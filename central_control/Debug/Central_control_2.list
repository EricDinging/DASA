
Central_control_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a5c  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08009c18  08009c18  00019c18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c88  08009c88  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08009c88  08009c88  00019c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009c90  08009c90  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009c90  08009c90  00019c90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009c94  08009c94  00019c94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08009c98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000774  2000000c  08009ca4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000780  08009ca4  00020780  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001da90  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031cb  00000000  00000000  0003dacc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019b0  00000000  00000000  00040c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018a8  00000000  00000000  00042648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002df13  00000000  00000000  00043ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001dd8c  00000000  00000000  00071e03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012349f  00000000  00000000  0008fb8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001b302e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006f08  00000000  00000000  001b3080  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08009c00 	.word	0x08009c00

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08009c00 	.word	0x08009c00

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b974 	b.w	80004fc <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	468e      	mov	lr, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d14d      	bne.n	80002d6 <__udivmoddi4+0xaa>
 800023a:	428a      	cmp	r2, r1
 800023c:	4694      	mov	ip, r2
 800023e:	d969      	bls.n	8000314 <__udivmoddi4+0xe8>
 8000240:	fab2 f282 	clz	r2, r2
 8000244:	b152      	cbz	r2, 800025c <__udivmoddi4+0x30>
 8000246:	fa01 f302 	lsl.w	r3, r1, r2
 800024a:	f1c2 0120 	rsb	r1, r2, #32
 800024e:	fa20 f101 	lsr.w	r1, r0, r1
 8000252:	fa0c fc02 	lsl.w	ip, ip, r2
 8000256:	ea41 0e03 	orr.w	lr, r1, r3
 800025a:	4094      	lsls	r4, r2
 800025c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000260:	0c21      	lsrs	r1, r4, #16
 8000262:	fbbe f6f8 	udiv	r6, lr, r8
 8000266:	fa1f f78c 	uxth.w	r7, ip
 800026a:	fb08 e316 	mls	r3, r8, r6, lr
 800026e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000272:	fb06 f107 	mul.w	r1, r6, r7
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000282:	f080 811f 	bcs.w	80004c4 <__udivmoddi4+0x298>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 811c 	bls.w	80004c4 <__udivmoddi4+0x298>
 800028c:	3e02      	subs	r6, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a5b      	subs	r3, r3, r1
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb3 f0f8 	udiv	r0, r3, r8
 8000298:	fb08 3310 	mls	r3, r8, r0, r3
 800029c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a0:	fb00 f707 	mul.w	r7, r0, r7
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	d90a      	bls.n	80002be <__udivmoddi4+0x92>
 80002a8:	eb1c 0404 	adds.w	r4, ip, r4
 80002ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b0:	f080 810a 	bcs.w	80004c8 <__udivmoddi4+0x29c>
 80002b4:	42a7      	cmp	r7, r4
 80002b6:	f240 8107 	bls.w	80004c8 <__udivmoddi4+0x29c>
 80002ba:	4464      	add	r4, ip
 80002bc:	3802      	subs	r0, #2
 80002be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c2:	1be4      	subs	r4, r4, r7
 80002c4:	2600      	movs	r6, #0
 80002c6:	b11d      	cbz	r5, 80002d0 <__udivmoddi4+0xa4>
 80002c8:	40d4      	lsrs	r4, r2
 80002ca:	2300      	movs	r3, #0
 80002cc:	e9c5 4300 	strd	r4, r3, [r5]
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0xc2>
 80002da:	2d00      	cmp	r5, #0
 80002dc:	f000 80ef 	beq.w	80004be <__udivmoddi4+0x292>
 80002e0:	2600      	movs	r6, #0
 80002e2:	e9c5 0100 	strd	r0, r1, [r5]
 80002e6:	4630      	mov	r0, r6
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	fab3 f683 	clz	r6, r3
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d14a      	bne.n	800038c <__udivmoddi4+0x160>
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xd4>
 80002fa:	4282      	cmp	r2, r0
 80002fc:	f200 80f9 	bhi.w	80004f2 <__udivmoddi4+0x2c6>
 8000300:	1a84      	subs	r4, r0, r2
 8000302:	eb61 0303 	sbc.w	r3, r1, r3
 8000306:	2001      	movs	r0, #1
 8000308:	469e      	mov	lr, r3
 800030a:	2d00      	cmp	r5, #0
 800030c:	d0e0      	beq.n	80002d0 <__udivmoddi4+0xa4>
 800030e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000312:	e7dd      	b.n	80002d0 <__udivmoddi4+0xa4>
 8000314:	b902      	cbnz	r2, 8000318 <__udivmoddi4+0xec>
 8000316:	deff      	udf	#255	; 0xff
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	2a00      	cmp	r2, #0
 800031e:	f040 8092 	bne.w	8000446 <__udivmoddi4+0x21a>
 8000322:	eba1 010c 	sub.w	r1, r1, ip
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2601      	movs	r6, #1
 8000330:	0c20      	lsrs	r0, r4, #16
 8000332:	fbb1 f3f7 	udiv	r3, r1, r7
 8000336:	fb07 1113 	mls	r1, r7, r3, r1
 800033a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800033e:	fb0e f003 	mul.w	r0, lr, r3
 8000342:	4288      	cmp	r0, r1
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x12c>
 8000346:	eb1c 0101 	adds.w	r1, ip, r1
 800034a:	f103 38ff 	add.w	r8, r3, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x12a>
 8000350:	4288      	cmp	r0, r1
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2c0>
 8000356:	4643      	mov	r3, r8
 8000358:	1a09      	subs	r1, r1, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000360:	fb07 1110 	mls	r1, r7, r0, r1
 8000364:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x156>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 31ff 	add.w	r1, r0, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x154>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2ca>
 8000380:	4608      	mov	r0, r1
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800038a:	e79c      	b.n	80002c6 <__udivmoddi4+0x9a>
 800038c:	f1c6 0720 	rsb	r7, r6, #32
 8000390:	40b3      	lsls	r3, r6
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa20 f407 	lsr.w	r4, r0, r7
 800039e:	fa01 f306 	lsl.w	r3, r1, r6
 80003a2:	431c      	orrs	r4, r3
 80003a4:	40f9      	lsrs	r1, r7
 80003a6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003aa:	fa00 f306 	lsl.w	r3, r0, r6
 80003ae:	fbb1 f8f9 	udiv	r8, r1, r9
 80003b2:	0c20      	lsrs	r0, r4, #16
 80003b4:	fa1f fe8c 	uxth.w	lr, ip
 80003b8:	fb09 1118 	mls	r1, r9, r8, r1
 80003bc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c0:	fb08 f00e 	mul.w	r0, r8, lr
 80003c4:	4288      	cmp	r0, r1
 80003c6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b8>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2bc>
 80003d8:	4288      	cmp	r0, r1
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2bc>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4461      	add	r1, ip
 80003e4:	1a09      	subs	r1, r1, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003ec:	fb09 1110 	mls	r1, r9, r0, r1
 80003f0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003f8:	458e      	cmp	lr, r1
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1e2>
 80003fc:	eb1c 0101 	adds.w	r1, ip, r1
 8000400:	f100 34ff 	add.w	r4, r0, #4294967295
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2b4>
 8000406:	458e      	cmp	lr, r1
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2b4>
 800040a:	3802      	subs	r0, #2
 800040c:	4461      	add	r1, ip
 800040e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000412:	fba0 9402 	umull	r9, r4, r0, r2
 8000416:	eba1 010e 	sub.w	r1, r1, lr
 800041a:	42a1      	cmp	r1, r4
 800041c:	46c8      	mov	r8, r9
 800041e:	46a6      	mov	lr, r4
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x2a4>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x2a0>
 8000424:	b15d      	cbz	r5, 800043e <__udivmoddi4+0x212>
 8000426:	ebb3 0208 	subs.w	r2, r3, r8
 800042a:	eb61 010e 	sbc.w	r1, r1, lr
 800042e:	fa01 f707 	lsl.w	r7, r1, r7
 8000432:	fa22 f306 	lsr.w	r3, r2, r6
 8000436:	40f1      	lsrs	r1, r6
 8000438:	431f      	orrs	r7, r3
 800043a:	e9c5 7100 	strd	r7, r1, [r5]
 800043e:	2600      	movs	r6, #0
 8000440:	4631      	mov	r1, r6
 8000442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000446:	f1c2 0320 	rsb	r3, r2, #32
 800044a:	40d8      	lsrs	r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa21 f303 	lsr.w	r3, r1, r3
 8000454:	4091      	lsls	r1, r2
 8000456:	4301      	orrs	r1, r0
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb3 f0f7 	udiv	r0, r3, r7
 8000464:	fb07 3610 	mls	r6, r7, r0, r3
 8000468:	0c0b      	lsrs	r3, r1, #16
 800046a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800046e:	fb00 f60e 	mul.w	r6, r0, lr
 8000472:	429e      	cmp	r6, r3
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x260>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b8>
 8000484:	429e      	cmp	r6, r3
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b8>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1b9b      	subs	r3, r3, r6
 800048e:	b289      	uxth	r1, r1
 8000490:	fbb3 f6f7 	udiv	r6, r3, r7
 8000494:	fb07 3316 	mls	r3, r7, r6, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb06 f30e 	mul.w	r3, r6, lr
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x28a>
 80004a4:	eb1c 0101 	adds.w	r1, ip, r1
 80004a8:	f106 38ff 	add.w	r8, r6, #4294967295
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2b0>
 80004b2:	3e02      	subs	r6, #2
 80004b4:	4461      	add	r1, ip
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0x104>
 80004be:	462e      	mov	r6, r5
 80004c0:	4628      	mov	r0, r5
 80004c2:	e705      	b.n	80002d0 <__udivmoddi4+0xa4>
 80004c4:	4606      	mov	r6, r0
 80004c6:	e6e3      	b.n	8000290 <__udivmoddi4+0x64>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6f8      	b.n	80002be <__udivmoddi4+0x92>
 80004cc:	454b      	cmp	r3, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f8>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004d8:	3801      	subs	r0, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f8>
 80004dc:	4646      	mov	r6, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x28a>
 80004e0:	4620      	mov	r0, r4
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1e2>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x260>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b8>
 80004ec:	3b02      	subs	r3, #2
 80004ee:	4461      	add	r1, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x12c>
 80004f2:	4630      	mov	r0, r6
 80004f4:	e709      	b.n	800030a <__udivmoddi4+0xde>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x156>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <state_update>:
 *  Created on: Mar 25, 2023
 *      Author: eric
 */
#include "central_control.h"

void state_update() {
 8000500:	b480      	push	{r7}
 8000502:	b083      	sub	sp, #12
 8000504:	af00      	add	r7, sp, #0

	// All the buttons should be rising-edge triggered


	// read reset button, and set reset bit to 1 only if reset button is pressed
	if (reset) {
 8000506:	4b66      	ldr	r3, [pc, #408]	; (80006a0 <state_update+0x1a0>)
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	2b00      	cmp	r3, #0
 800050c:	d01e      	beq.n	800054c <state_update+0x4c>
		on_off = 0;
 800050e:	4b65      	ldr	r3, [pc, #404]	; (80006a4 <state_update+0x1a4>)
 8000510:	2200      	movs	r2, #0
 8000512:	701a      	strb	r2, [r3, #0]
		ball_locked = 0;
 8000514:	4b64      	ldr	r3, [pc, #400]	; (80006a8 <state_update+0x1a8>)
 8000516:	2200      	movs	r2, #0
 8000518:	701a      	strb	r2, [r3, #0]
		ball_not_found = 0;
 800051a:	4b64      	ldr	r3, [pc, #400]	; (80006ac <state_update+0x1ac>)
 800051c:	2200      	movs	r2, #0
 800051e:	701a      	strb	r2, [r3, #0]
		ball_count = 0;
 8000520:	4b63      	ldr	r3, [pc, #396]	; (80006b0 <state_update+0x1b0>)
 8000522:	2200      	movs	r2, #0
 8000524:	701a      	strb	r2, [r3, #0]
		ball_collected = 0;
 8000526:	4b63      	ldr	r3, [pc, #396]	; (80006b4 <state_update+0x1b4>)
 8000528:	2200      	movs	r2, #0
 800052a:	701a      	strb	r2, [r3, #0]
		station_arrived = 0;
 800052c:	4b62      	ldr	r3, [pc, #392]	; (80006b8 <state_update+0x1b8>)
 800052e:	2200      	movs	r2, #0
 8000530:	701a      	strb	r2, [r3, #0]
		avoid_finished = 0;
 8000532:	4b62      	ldr	r3, [pc, #392]	; (80006bc <state_update+0x1bc>)
 8000534:	2200      	movs	r2, #0
 8000536:	701a      	strb	r2, [r3, #0]
		reset = 0;
 8000538:	4b59      	ldr	r3, [pc, #356]	; (80006a0 <state_update+0x1a0>)
 800053a:	2200      	movs	r2, #0
 800053c:	701a      	strb	r2, [r3, #0]
		state = INIT;
 800053e:	4b60      	ldr	r3, [pc, #384]	; (80006c0 <state_update+0x1c0>)
 8000540:	2200      	movs	r2, #0
 8000542:	701a      	strb	r2, [r3, #0]
		prev_state = state;
 8000544:	4b5e      	ldr	r3, [pc, #376]	; (80006c0 <state_update+0x1c0>)
 8000546:	781a      	ldrb	r2, [r3, #0]
 8000548:	4b5e      	ldr	r3, [pc, #376]	; (80006c4 <state_update+0x1c4>)
 800054a:	701a      	strb	r2, [r3, #0]
	} else {
		// reading peripheral input, and clear register immediately
	}

	// Testing arg begin
	state = COLLECT;
 800054c:	4b5c      	ldr	r3, [pc, #368]	; (80006c0 <state_update+0x1c0>)
 800054e:	2202      	movs	r2, #2
 8000550:	701a      	strb	r2, [r3, #0]

	// Testing arg end

	// disable interrupt

	enum State next_state = state;
 8000552:	4b5b      	ldr	r3, [pc, #364]	; (80006c0 <state_update+0x1c0>)
 8000554:	781b      	ldrb	r3, [r3, #0]
 8000556:	71fb      	strb	r3, [r7, #7]

	switch (state) {
 8000558:	4b59      	ldr	r3, [pc, #356]	; (80006c0 <state_update+0x1c0>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	2b04      	cmp	r3, #4
 800055e:	f200 808e 	bhi.w	800067e <state_update+0x17e>
 8000562:	a201      	add	r2, pc, #4	; (adr r2, 8000568 <state_update+0x68>)
 8000564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000568:	0800057d 	.word	0x0800057d
 800056c:	08000591 	.word	0x08000591
 8000570:	080005cd 	.word	0x080005cd
 8000574:	08000609 	.word	0x08000609
 8000578:	08000631 	.word	0x08000631
	case INIT:
		if (on_off == 1) {
 800057c:	4b49      	ldr	r3, [pc, #292]	; (80006a4 <state_update+0x1a4>)
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	2b01      	cmp	r3, #1
 8000582:	d173      	bne.n	800066c <state_update+0x16c>
			on_off = 0;
 8000584:	4b47      	ldr	r3, [pc, #284]	; (80006a4 <state_update+0x1a4>)
 8000586:	2200      	movs	r2, #0
 8000588:	701a      	strb	r2, [r3, #0]
			next_state = SEARCH;
 800058a:	2301      	movs	r3, #1
 800058c:	71fb      	strb	r3, [r7, #7]
		}
		break;
 800058e:	e06d      	b.n	800066c <state_update+0x16c>
	case SEARCH:
		if (on_off) {
 8000590:	4b44      	ldr	r3, [pc, #272]	; (80006a4 <state_update+0x1a4>)
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	2b00      	cmp	r3, #0
 8000596:	d005      	beq.n	80005a4 <state_update+0xa4>
			on_off = 0;
 8000598:	4b42      	ldr	r3, [pc, #264]	; (80006a4 <state_update+0x1a4>)
 800059a:	2200      	movs	r2, #0
 800059c:	701a      	strb	r2, [r3, #0]
			next_state = RETURN;
 800059e:	2303      	movs	r3, #3
 80005a0:	71fb      	strb	r3, [r7, #7]
			next_state = COLLECT;
		} else if (ball_not_found) {
			ball_not_found = 0;
			next_state = RETURN;
		}
		break;
 80005a2:	e065      	b.n	8000670 <state_update+0x170>
		} else if (ball_locked) {
 80005a4:	4b40      	ldr	r3, [pc, #256]	; (80006a8 <state_update+0x1a8>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d005      	beq.n	80005b8 <state_update+0xb8>
			ball_locked = 0;
 80005ac:	4b3e      	ldr	r3, [pc, #248]	; (80006a8 <state_update+0x1a8>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	701a      	strb	r2, [r3, #0]
			next_state = COLLECT;
 80005b2:	2302      	movs	r3, #2
 80005b4:	71fb      	strb	r3, [r7, #7]
		break;
 80005b6:	e05b      	b.n	8000670 <state_update+0x170>
		} else if (ball_not_found) {
 80005b8:	4b3c      	ldr	r3, [pc, #240]	; (80006ac <state_update+0x1ac>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d057      	beq.n	8000670 <state_update+0x170>
			ball_not_found = 0;
 80005c0:	4b3a      	ldr	r3, [pc, #232]	; (80006ac <state_update+0x1ac>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	701a      	strb	r2, [r3, #0]
			next_state = RETURN;
 80005c6:	2303      	movs	r3, #3
 80005c8:	71fb      	strb	r3, [r7, #7]
		break;
 80005ca:	e051      	b.n	8000670 <state_update+0x170>
	case COLLECT: {
		// first time enable IR interrupt
		uint32_t local_count;
		local_count = count;
 80005cc:	4b3e      	ldr	r3, [pc, #248]	; (80006c8 <state_update+0x1c8>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	603b      	str	r3, [r7, #0]

		if (on_off) {
 80005d2:	4b34      	ldr	r3, [pc, #208]	; (80006a4 <state_update+0x1a4>)
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d005      	beq.n	80005e6 <state_update+0xe6>
			on_off = 0;
 80005da:	4b32      	ldr	r3, [pc, #200]	; (80006a4 <state_update+0x1a4>)
 80005dc:	2200      	movs	r2, #0
 80005de:	701a      	strb	r2, [r3, #0]
			next_state = RETURN;
 80005e0:	2303      	movs	r3, #3
 80005e2:	71fb      	strb	r3, [r7, #7]
		}

		if (next_state != state) {
			//  diable IR interrupt
		}
		break;
 80005e4:	e046      	b.n	8000674 <state_update+0x174>
		} else if (ball_collected) {
 80005e6:	4b33      	ldr	r3, [pc, #204]	; (80006b4 <state_update+0x1b4>)
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d042      	beq.n	8000674 <state_update+0x174>
			if (ball_count < MAXLOAD) {
 80005ee:	4b30      	ldr	r3, [pc, #192]	; (80006b0 <state_update+0x1b0>)
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	2b05      	cmp	r3, #5
 80005f4:	d802      	bhi.n	80005fc <state_update+0xfc>
				next_state = SEARCH;
 80005f6:	2301      	movs	r3, #1
 80005f8:	71fb      	strb	r3, [r7, #7]
 80005fa:	e001      	b.n	8000600 <state_update+0x100>
				next_state = RETURN;
 80005fc:	2303      	movs	r3, #3
 80005fe:	71fb      	strb	r3, [r7, #7]
			ball_collected = 0; // clear
 8000600:	4b2c      	ldr	r3, [pc, #176]	; (80006b4 <state_update+0x1b4>)
 8000602:	2200      	movs	r2, #0
 8000604:	701a      	strb	r2, [r3, #0]
		break;
 8000606:	e035      	b.n	8000674 <state_update+0x174>
		}
	case RETURN:
		if (on_off) {
 8000608:	4b26      	ldr	r3, [pc, #152]	; (80006a4 <state_update+0x1a4>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d002      	beq.n	8000616 <state_update+0x116>
			on_off = 0;
 8000610:	4b24      	ldr	r3, [pc, #144]	; (80006a4 <state_update+0x1a4>)
 8000612:	2200      	movs	r2, #0
 8000614:	701a      	strb	r2, [r3, #0]
		}

		if (station_arrived) {
 8000616:	4b28      	ldr	r3, [pc, #160]	; (80006b8 <state_update+0x1b8>)
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	2b00      	cmp	r3, #0
 800061c:	d02c      	beq.n	8000678 <state_update+0x178>
			station_arrived = 0;
 800061e:	4b26      	ldr	r3, [pc, #152]	; (80006b8 <state_update+0x1b8>)
 8000620:	2200      	movs	r2, #0
 8000622:	701a      	strb	r2, [r3, #0]
			reset = 1;
 8000624:	4b1e      	ldr	r3, [pc, #120]	; (80006a0 <state_update+0x1a0>)
 8000626:	2201      	movs	r2, #1
 8000628:	701a      	strb	r2, [r3, #0]
			next_state = INIT;
 800062a:	2300      	movs	r3, #0
 800062c:	71fb      	strb	r3, [r7, #7]
		}

		break;
 800062e:	e023      	b.n	8000678 <state_update+0x178>
	case AVOID_COLLISION:
		// only interrupt can cause the robot to enter this state
		// only after certain conditions are met can the robot leave this state
    
    if (on_off) {
 8000630:	4b1c      	ldr	r3, [pc, #112]	; (80006a4 <state_update+0x1a4>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d005      	beq.n	8000644 <state_update+0x144>
			on_off = 0;
 8000638:	4b1a      	ldr	r3, [pc, #104]	; (80006a4 <state_update+0x1a4>)
 800063a:	2200      	movs	r2, #0
 800063c:	701a      	strb	r2, [r3, #0]
			prev_state = RETURN;
 800063e:	4b21      	ldr	r3, [pc, #132]	; (80006c4 <state_update+0x1c4>)
 8000640:	2203      	movs	r2, #3
 8000642:	701a      	strb	r2, [r3, #0]
		}

		if (avoid_finished) {
 8000644:	4b1d      	ldr	r3, [pc, #116]	; (80006bc <state_update+0x1bc>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d017      	beq.n	800067c <state_update+0x17c>
			avoid_finished = 0;
 800064c:	4b1b      	ldr	r3, [pc, #108]	; (80006bc <state_update+0x1bc>)
 800064e:	2200      	movs	r2, #0
 8000650:	701a      	strb	r2, [r3, #0]
			next_state = prev_state;
 8000652:	4b1c      	ldr	r3, [pc, #112]	; (80006c4 <state_update+0x1c4>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	71fb      	strb	r3, [r7, #7]
			if (on_off) {
 8000658:	4b12      	ldr	r3, [pc, #72]	; (80006a4 <state_update+0x1a4>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d00d      	beq.n	800067c <state_update+0x17c>
				on_off = 0;
 8000660:	4b10      	ldr	r3, [pc, #64]	; (80006a4 <state_update+0x1a4>)
 8000662:	2200      	movs	r2, #0
 8000664:	701a      	strb	r2, [r3, #0]
				next_state = RETURN;
 8000666:	2303      	movs	r3, #3
 8000668:	71fb      	strb	r3, [r7, #7]
			}
		}
		break;
 800066a:	e007      	b.n	800067c <state_update+0x17c>
		break;
 800066c:	bf00      	nop
 800066e:	e006      	b.n	800067e <state_update+0x17e>
		break;
 8000670:	bf00      	nop
 8000672:	e004      	b.n	800067e <state_update+0x17e>
		break;
 8000674:	bf00      	nop
 8000676:	e002      	b.n	800067e <state_update+0x17e>
		break;
 8000678:	bf00      	nop
 800067a:	e000      	b.n	800067e <state_update+0x17e>
		break;
 800067c:	bf00      	nop
	}

	state = next_state;
 800067e:	4a10      	ldr	r2, [pc, #64]	; (80006c0 <state_update+0x1c0>)
 8000680:	79fb      	ldrb	r3, [r7, #7]
 8000682:	7013      	strb	r3, [r2, #0]
	if (state != AVOID_COLLISION) {
 8000684:	4b0e      	ldr	r3, [pc, #56]	; (80006c0 <state_update+0x1c0>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	2b04      	cmp	r3, #4
 800068a:	d003      	beq.n	8000694 <state_update+0x194>
		prev_state = state;
 800068c:	4b0c      	ldr	r3, [pc, #48]	; (80006c0 <state_update+0x1c0>)
 800068e:	781a      	ldrb	r2, [r3, #0]
 8000690:	4b0c      	ldr	r3, [pc, #48]	; (80006c4 <state_update+0x1c4>)
 8000692:	701a      	strb	r2, [r3, #0]
	}

	// enable interrupt
}
 8000694:	bf00      	nop
 8000696:	370c      	adds	r7, #12
 8000698:	46bd      	mov	sp, r7
 800069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069e:	4770      	bx	lr
 80006a0:	20000031 	.word	0x20000031
 80006a4:	2000002a 	.word	0x2000002a
 80006a8:	2000002b 	.word	0x2000002b
 80006ac:	2000002c 	.word	0x2000002c
 80006b0:	2000002d 	.word	0x2000002d
 80006b4:	2000002e 	.word	0x2000002e
 80006b8:	2000002f 	.word	0x2000002f
 80006bc:	20000030 	.word	0x20000030
 80006c0:	20000028 	.word	0x20000028
 80006c4:	20000029 	.word	0x20000029
 80006c8:	20000034 	.word	0x20000034

080006cc <execute>:

void execute() {
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
	switch (state) {
 80006d0:	4b0b      	ldr	r3, [pc, #44]	; (8000700 <execute+0x34>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	2b04      	cmp	r3, #4
 80006d6:	d80e      	bhi.n	80006f6 <execute+0x2a>
 80006d8:	a201      	add	r2, pc, #4	; (adr r2, 80006e0 <execute+0x14>)
 80006da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006de:	bf00      	nop
 80006e0:	080006f5 	.word	0x080006f5
 80006e4:	080006f5 	.word	0x080006f5
 80006e8:	080006f5 	.word	0x080006f5
 80006ec:	080006f5 	.word	0x080006f5
 80006f0:	080006f5 	.word	0x080006f5
	case INIT:
		break;
 80006f4:	bf00      	nop
	case RETURN:
		break;
	case AVOID_COLLISION:
		break;
	}
}
 80006f6:	bf00      	nop
 80006f8:	46bd      	mov	sp, r7
 80006fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fe:	4770      	bx	lr
 8000700:	20000028 	.word	0x20000028

08000704 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000708:	f001 feed 	bl	80024e6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800070c:	f000 f840 	bl	8000790 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000710:	f000 f8a0 	bl	8000854 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000714:	f000 ff8e 	bl	8001634 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000718:	f000 f8d0 	bl	80008bc <MX_ADC1_Init>
  MX_CAN1_Init();
 800071c:	f000 f932 	bl	8000984 <MX_CAN1_Init>
  MX_COMP1_Init();
 8000720:	f000 f964 	bl	80009ec <MX_COMP1_Init>
  MX_COMP2_Init();
 8000724:	f000 f990 	bl	8000a48 <MX_COMP2_Init>
  MX_I2C1_SMBUS_Init();
 8000728:	f000 f9ba 	bl	8000aa0 <MX_I2C1_SMBUS_Init>
  MX_I2C2_SMBUS_Init();
 800072c:	f000 f9f2 	bl	8000b14 <MX_I2C2_SMBUS_Init>
  MX_LPUART1_UART_Init();
 8000730:	f000 fa32 	bl	8000b98 <MX_LPUART1_UART_Init>
  MX_USART2_UART_Init();
 8000734:	f000 fa7e 	bl	8000c34 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000738:	f000 faca 	bl	8000cd0 <MX_USART3_UART_Init>
  MX_SAI1_Init();
 800073c:	f000 fb14 	bl	8000d68 <MX_SAI1_Init>
  MX_SAI2_Init();
 8000740:	f000 fbaa 	bl	8000e98 <MX_SAI2_Init>
  MX_SPI1_Init();
 8000744:	f000 fc10 	bl	8000f68 <MX_SPI1_Init>
  MX_SPI3_Init();
 8000748:	f000 fc4c 	bl	8000fe4 <MX_SPI3_Init>
  MX_TIM1_Init();
 800074c:	f000 fc88 	bl	8001060 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000750:	f000 fd6e 	bl	8001230 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000754:	f000 fdee 	bl	8001334 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000758:	f000 fe5e 	bl	8001418 <MX_TIM4_Init>
  MX_TIM15_Init();
 800075c:	f000 fede 	bl	800151c <MX_TIM15_Init>
  MX_USB_OTG_FS_USB_Init();
 8000760:	f000 ff60 	bl	8001624 <MX_USB_OTG_FS_USB_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000764:	2108      	movs	r1, #8
 8000766:	4808      	ldr	r0, [pc, #32]	; (8000788 <main+0x84>)
 8000768:	f006 fe5e 	bl	8007428 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800076c:	210c      	movs	r1, #12
 800076e:	4806      	ldr	r0, [pc, #24]	; (8000788 <main+0x84>)
 8000770:	f006 fe5a 	bl	8007428 <HAL_TIM_PWM_Start>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 8000774:	2104      	movs	r1, #4
 8000776:	4805      	ldr	r0, [pc, #20]	; (800078c <main+0x88>)
 8000778:	f006 ffbe 	bl	80076f8 <HAL_TIM_IC_Start_IT>


  while (1)
  {
	  state_update();
 800077c:	f7ff fec0 	bl	8000500 <state_update>
	  execute();
 8000780:	f7ff ffa4 	bl	80006cc <execute>
  {
 8000784:	e7fa      	b.n	800077c <main+0x78>
 8000786:	bf00      	nop
 8000788:	200006d8 	.word	0x200006d8
 800078c:	2000068c 	.word	0x2000068c

08000790 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b096      	sub	sp, #88	; 0x58
 8000794:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000796:	f107 0314 	add.w	r3, r7, #20
 800079a:	2244      	movs	r2, #68	; 0x44
 800079c:	2100      	movs	r1, #0
 800079e:	4618      	mov	r0, r3
 80007a0:	f009 fa26 	bl	8009bf0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a4:	463b      	mov	r3, r7
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	605a      	str	r2, [r3, #4]
 80007ac:	609a      	str	r2, [r3, #8]
 80007ae:	60da      	str	r2, [r3, #12]
 80007b0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007b2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007b6:	f003 fb75 	bl	8003ea4 <HAL_PWREx_ControlVoltageScaling>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80007c0:	f001 f806 	bl	80017d0 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80007c4:	f003 fb3e 	bl	8003e44 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80007c8:	4b21      	ldr	r3, [pc, #132]	; (8000850 <SystemClock_Config+0xc0>)
 80007ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80007ce:	4a20      	ldr	r2, [pc, #128]	; (8000850 <SystemClock_Config+0xc0>)
 80007d0:	f023 0318 	bic.w	r3, r3, #24
 80007d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80007d8:	2314      	movs	r3, #20
 80007da:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80007dc:	2301      	movs	r3, #1
 80007de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80007e0:	2301      	movs	r3, #1
 80007e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80007e4:	2300      	movs	r3, #0
 80007e6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80007e8:	2360      	movs	r3, #96	; 0x60
 80007ea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ec:	2302      	movs	r3, #2
 80007ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80007f0:	2301      	movs	r3, #1
 80007f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007f4:	2301      	movs	r3, #1
 80007f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80007f8:	2310      	movs	r3, #16
 80007fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007fc:	2302      	movs	r3, #2
 80007fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000800:	2302      	movs	r3, #2
 8000802:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000804:	2302      	movs	r3, #2
 8000806:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000808:	f107 0314 	add.w	r3, r7, #20
 800080c:	4618      	mov	r0, r3
 800080e:	f003 fbfd 	bl	800400c <HAL_RCC_OscConfig>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000818:	f000 ffda 	bl	80017d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800081c:	230f      	movs	r3, #15
 800081e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000820:	2303      	movs	r3, #3
 8000822:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000824:	2300      	movs	r3, #0
 8000826:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000828:	2300      	movs	r3, #0
 800082a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800082c:	2300      	movs	r3, #0
 800082e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000830:	463b      	mov	r3, r7
 8000832:	2101      	movs	r1, #1
 8000834:	4618      	mov	r0, r3
 8000836:	f004 f803 	bl	8004840 <HAL_RCC_ClockConfig>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000840:	f000 ffc6 	bl	80017d0 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000844:	f005 fd0c 	bl	8006260 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000848:	bf00      	nop
 800084a:	3758      	adds	r7, #88	; 0x58
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	40021000 	.word	0x40021000

08000854 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b0a6      	sub	sp, #152	; 0x98
 8000858:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800085a:	1d3b      	adds	r3, r7, #4
 800085c:	2294      	movs	r2, #148	; 0x94
 800085e:	2100      	movs	r1, #0
 8000860:	4618      	mov	r0, r3
 8000862:	f009 f9c5 	bl	8009bf0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_SAI2
 8000866:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 800086a:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 800086c:	2300      	movs	r3, #0
 800086e:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI1;
 8000870:	2300      	movs	r3, #0
 8000872:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000874:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000878:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800087c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000880:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000882:	2301      	movs	r3, #1
 8000884:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000886:	2301      	movs	r3, #1
 8000888:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800088a:	2318      	movs	r3, #24
 800088c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800088e:	2302      	movs	r3, #2
 8000890:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000892:	2302      	movs	r3, #2
 8000894:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000896:	2302      	movs	r3, #2
 8000898:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_48M2CLK
 800089a:	4b07      	ldr	r3, [pc, #28]	; (80008b8 <PeriphCommonClock_Config+0x64>)
 800089c:	623b      	str	r3, [r7, #32]
                              |RCC_PLLSAI1_ADC1CLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800089e:	1d3b      	adds	r3, r7, #4
 80008a0:	4618      	mov	r0, r3
 80008a2:	f004 fa8b 	bl	8004dbc <HAL_RCCEx_PeriphCLKConfig>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 80008ac:	f000 ff90 	bl	80017d0 <Error_Handler>
  }
}
 80008b0:	bf00      	nop
 80008b2:	3798      	adds	r7, #152	; 0x98
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	01110000 	.word	0x01110000

080008bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b086      	sub	sp, #24
 80008c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008c2:	463b      	mov	r3, r7
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	605a      	str	r2, [r3, #4]
 80008ca:	609a      	str	r2, [r3, #8]
 80008cc:	60da      	str	r2, [r3, #12]
 80008ce:	611a      	str	r2, [r3, #16]
 80008d0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80008d2:	4b29      	ldr	r3, [pc, #164]	; (8000978 <MX_ADC1_Init+0xbc>)
 80008d4:	4a29      	ldr	r2, [pc, #164]	; (800097c <MX_ADC1_Init+0xc0>)
 80008d6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80008d8:	4b27      	ldr	r3, [pc, #156]	; (8000978 <MX_ADC1_Init+0xbc>)
 80008da:	2200      	movs	r2, #0
 80008dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008de:	4b26      	ldr	r3, [pc, #152]	; (8000978 <MX_ADC1_Init+0xbc>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008e4:	4b24      	ldr	r3, [pc, #144]	; (8000978 <MX_ADC1_Init+0xbc>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008ea:	4b23      	ldr	r3, [pc, #140]	; (8000978 <MX_ADC1_Init+0xbc>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008f0:	4b21      	ldr	r3, [pc, #132]	; (8000978 <MX_ADC1_Init+0xbc>)
 80008f2:	2204      	movs	r2, #4
 80008f4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80008f6:	4b20      	ldr	r3, [pc, #128]	; (8000978 <MX_ADC1_Init+0xbc>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008fc:	4b1e      	ldr	r3, [pc, #120]	; (8000978 <MX_ADC1_Init+0xbc>)
 80008fe:	2200      	movs	r2, #0
 8000900:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000902:	4b1d      	ldr	r3, [pc, #116]	; (8000978 <MX_ADC1_Init+0xbc>)
 8000904:	2201      	movs	r2, #1
 8000906:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000908:	4b1b      	ldr	r3, [pc, #108]	; (8000978 <MX_ADC1_Init+0xbc>)
 800090a:	2200      	movs	r2, #0
 800090c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000910:	4b19      	ldr	r3, [pc, #100]	; (8000978 <MX_ADC1_Init+0xbc>)
 8000912:	2200      	movs	r2, #0
 8000914:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000916:	4b18      	ldr	r3, [pc, #96]	; (8000978 <MX_ADC1_Init+0xbc>)
 8000918:	2200      	movs	r2, #0
 800091a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800091c:	4b16      	ldr	r3, [pc, #88]	; (8000978 <MX_ADC1_Init+0xbc>)
 800091e:	2200      	movs	r2, #0
 8000920:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000924:	4b14      	ldr	r3, [pc, #80]	; (8000978 <MX_ADC1_Init+0xbc>)
 8000926:	2200      	movs	r2, #0
 8000928:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800092a:	4b13      	ldr	r3, [pc, #76]	; (8000978 <MX_ADC1_Init+0xbc>)
 800092c:	2200      	movs	r2, #0
 800092e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000932:	4811      	ldr	r0, [pc, #68]	; (8000978 <MX_ADC1_Init+0xbc>)
 8000934:	f001 ffec 	bl	8002910 <HAL_ADC_Init>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800093e:	f000 ff47 	bl	80017d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000942:	4b0f      	ldr	r3, [pc, #60]	; (8000980 <MX_ADC1_Init+0xc4>)
 8000944:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000946:	2306      	movs	r3, #6
 8000948:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800094a:	2300      	movs	r3, #0
 800094c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800094e:	237f      	movs	r3, #127	; 0x7f
 8000950:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000952:	2304      	movs	r3, #4
 8000954:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000956:	2300      	movs	r3, #0
 8000958:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800095a:	463b      	mov	r3, r7
 800095c:	4619      	mov	r1, r3
 800095e:	4806      	ldr	r0, [pc, #24]	; (8000978 <MX_ADC1_Init+0xbc>)
 8000960:	f002 f922 	bl	8002ba8 <HAL_ADC_ConfigChannel>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800096a:	f000 ff31 	bl	80017d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800096e:	bf00      	nop
 8000970:	3718      	adds	r7, #24
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	20000038 	.word	0x20000038
 800097c:	50040000 	.word	0x50040000
 8000980:	04300002 	.word	0x04300002

08000984 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000988:	4b16      	ldr	r3, [pc, #88]	; (80009e4 <MX_CAN1_Init+0x60>)
 800098a:	4a17      	ldr	r2, [pc, #92]	; (80009e8 <MX_CAN1_Init+0x64>)
 800098c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800098e:	4b15      	ldr	r3, [pc, #84]	; (80009e4 <MX_CAN1_Init+0x60>)
 8000990:	2210      	movs	r2, #16
 8000992:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000994:	4b13      	ldr	r3, [pc, #76]	; (80009e4 <MX_CAN1_Init+0x60>)
 8000996:	2200      	movs	r2, #0
 8000998:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800099a:	4b12      	ldr	r3, [pc, #72]	; (80009e4 <MX_CAN1_Init+0x60>)
 800099c:	2200      	movs	r2, #0
 800099e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80009a0:	4b10      	ldr	r3, [pc, #64]	; (80009e4 <MX_CAN1_Init+0x60>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80009a6:	4b0f      	ldr	r3, [pc, #60]	; (80009e4 <MX_CAN1_Init+0x60>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80009ac:	4b0d      	ldr	r3, [pc, #52]	; (80009e4 <MX_CAN1_Init+0x60>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80009b2:	4b0c      	ldr	r3, [pc, #48]	; (80009e4 <MX_CAN1_Init+0x60>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80009b8:	4b0a      	ldr	r3, [pc, #40]	; (80009e4 <MX_CAN1_Init+0x60>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80009be:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <MX_CAN1_Init+0x60>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80009c4:	4b07      	ldr	r3, [pc, #28]	; (80009e4 <MX_CAN1_Init+0x60>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80009ca:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <MX_CAN1_Init+0x60>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80009d0:	4804      	ldr	r0, [pc, #16]	; (80009e4 <MX_CAN1_Init+0x60>)
 80009d2:	f002 fce5 	bl	80033a0 <HAL_CAN_Init>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 80009dc:	f000 fef8 	bl	80017d0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80009e0:	bf00      	nop
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	200000a0 	.word	0x200000a0
 80009e8:	40006400 	.word	0x40006400

080009ec <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 80009f0:	4b12      	ldr	r3, [pc, #72]	; (8000a3c <MX_COMP1_Init+0x50>)
 80009f2:	4a13      	ldr	r2, [pc, #76]	; (8000a40 <MX_COMP1_Init+0x54>)
 80009f4:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InvertingInput = COMP_INPUT_MINUS_VREFINT;
 80009f6:	4b11      	ldr	r3, [pc, #68]	; (8000a3c <MX_COMP1_Init+0x50>)
 80009f8:	4a12      	ldr	r2, [pc, #72]	; (8000a44 <MX_COMP1_Init+0x58>)
 80009fa:	611a      	str	r2, [r3, #16]
  hcomp1.Init.NonInvertingInput = COMP_INPUT_PLUS_IO2;
 80009fc:	4b0f      	ldr	r3, [pc, #60]	; (8000a3c <MX_COMP1_Init+0x50>)
 80009fe:	2280      	movs	r2, #128	; 0x80
 8000a00:	60da      	str	r2, [r3, #12]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000a02:	4b0e      	ldr	r3, [pc, #56]	; (8000a3c <MX_COMP1_Init+0x50>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	619a      	str	r2, [r3, #24]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000a08:	4b0c      	ldr	r3, [pc, #48]	; (8000a3c <MX_COMP1_Init+0x50>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	615a      	str	r2, [r3, #20]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8000a0e:	4b0b      	ldr	r3, [pc, #44]	; (8000a3c <MX_COMP1_Init+0x50>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	61da      	str	r2, [r3, #28]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8000a14:	4b09      	ldr	r3, [pc, #36]	; (8000a3c <MX_COMP1_Init+0x50>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	609a      	str	r2, [r3, #8]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000a1a:	4b08      	ldr	r3, [pc, #32]	; (8000a3c <MX_COMP1_Init+0x50>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000a20:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <MX_COMP1_Init+0x50>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8000a26:	4805      	ldr	r0, [pc, #20]	; (8000a3c <MX_COMP1_Init+0x50>)
 8000a28:	f002 fe5e 	bl	80036e8 <HAL_COMP_Init>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_COMP1_Init+0x4a>
  {
    Error_Handler();
 8000a32:	f000 fecd 	bl	80017d0 <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	200000c8 	.word	0x200000c8
 8000a40:	40010200 	.word	0x40010200
 8000a44:	00800030 	.word	0x00800030

08000a48 <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 8000a4c:	4b12      	ldr	r3, [pc, #72]	; (8000a98 <MX_COMP2_Init+0x50>)
 8000a4e:	4a13      	ldr	r2, [pc, #76]	; (8000a9c <MX_COMP2_Init+0x54>)
 8000a50:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INPUT_MINUS_IO2;
 8000a52:	4b11      	ldr	r3, [pc, #68]	; (8000a98 <MX_COMP2_Init+0x50>)
 8000a54:	2270      	movs	r2, #112	; 0x70
 8000a56:	611a      	str	r2, [r3, #16]
  hcomp2.Init.NonInvertingInput = COMP_INPUT_PLUS_IO2;
 8000a58:	4b0f      	ldr	r3, [pc, #60]	; (8000a98 <MX_COMP2_Init+0x50>)
 8000a5a:	2280      	movs	r2, #128	; 0x80
 8000a5c:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000a5e:	4b0e      	ldr	r3, [pc, #56]	; (8000a98 <MX_COMP2_Init+0x50>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	619a      	str	r2, [r3, #24]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000a64:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <MX_COMP2_Init+0x50>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	615a      	str	r2, [r3, #20]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8000a6a:	4b0b      	ldr	r3, [pc, #44]	; (8000a98 <MX_COMP2_Init+0x50>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	61da      	str	r2, [r3, #28]
  hcomp2.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8000a70:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <MX_COMP2_Init+0x50>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	609a      	str	r2, [r3, #8]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000a76:	4b08      	ldr	r3, [pc, #32]	; (8000a98 <MX_COMP2_Init+0x50>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	605a      	str	r2, [r3, #4]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000a7c:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <MX_COMP2_Init+0x50>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8000a82:	4805      	ldr	r0, [pc, #20]	; (8000a98 <MX_COMP2_Init+0x50>)
 8000a84:	f002 fe30 	bl	80036e8 <HAL_COMP_Init>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_COMP2_Init+0x4a>
  {
    Error_Handler();
 8000a8e:	f000 fe9f 	bl	80017d0 <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	200000f4 	.word	0x200000f4
 8000a9c:	40010204 	.word	0x40010204

08000aa0 <MX_I2C1_SMBUS_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_SMBUS_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hsmbus1.Instance = I2C1;
 8000aa4:	4b18      	ldr	r3, [pc, #96]	; (8000b08 <MX_I2C1_SMBUS_Init+0x68>)
 8000aa6:	4a19      	ldr	r2, [pc, #100]	; (8000b0c <MX_I2C1_SMBUS_Init+0x6c>)
 8000aa8:	601a      	str	r2, [r3, #0]
  hsmbus1.Init.Timing = 0x00707CBB;
 8000aaa:	4b17      	ldr	r3, [pc, #92]	; (8000b08 <MX_I2C1_SMBUS_Init+0x68>)
 8000aac:	4a18      	ldr	r2, [pc, #96]	; (8000b10 <MX_I2C1_SMBUS_Init+0x70>)
 8000aae:	605a      	str	r2, [r3, #4]
  hsmbus1.Init.AnalogFilter = SMBUS_ANALOGFILTER_ENABLE;
 8000ab0:	4b15      	ldr	r3, [pc, #84]	; (8000b08 <MX_I2C1_SMBUS_Init+0x68>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	609a      	str	r2, [r3, #8]
  hsmbus1.Init.OwnAddress1 = 2;
 8000ab6:	4b14      	ldr	r3, [pc, #80]	; (8000b08 <MX_I2C1_SMBUS_Init+0x68>)
 8000ab8:	2202      	movs	r2, #2
 8000aba:	60da      	str	r2, [r3, #12]
  hsmbus1.Init.AddressingMode = SMBUS_ADDRESSINGMODE_7BIT;
 8000abc:	4b12      	ldr	r3, [pc, #72]	; (8000b08 <MX_I2C1_SMBUS_Init+0x68>)
 8000abe:	2201      	movs	r2, #1
 8000ac0:	611a      	str	r2, [r3, #16]
  hsmbus1.Init.DualAddressMode = SMBUS_DUALADDRESS_DISABLE;
 8000ac2:	4b11      	ldr	r3, [pc, #68]	; (8000b08 <MX_I2C1_SMBUS_Init+0x68>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	615a      	str	r2, [r3, #20]
  hsmbus1.Init.OwnAddress2 = 0;
 8000ac8:	4b0f      	ldr	r3, [pc, #60]	; (8000b08 <MX_I2C1_SMBUS_Init+0x68>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	619a      	str	r2, [r3, #24]
  hsmbus1.Init.OwnAddress2Masks = SMBUS_OA2_NOMASK;
 8000ace:	4b0e      	ldr	r3, [pc, #56]	; (8000b08 <MX_I2C1_SMBUS_Init+0x68>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	61da      	str	r2, [r3, #28]
  hsmbus1.Init.GeneralCallMode = SMBUS_GENERALCALL_DISABLE;
 8000ad4:	4b0c      	ldr	r3, [pc, #48]	; (8000b08 <MX_I2C1_SMBUS_Init+0x68>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	621a      	str	r2, [r3, #32]
  hsmbus1.Init.NoStretchMode = SMBUS_NOSTRETCH_DISABLE;
 8000ada:	4b0b      	ldr	r3, [pc, #44]	; (8000b08 <MX_I2C1_SMBUS_Init+0x68>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	625a      	str	r2, [r3, #36]	; 0x24
  hsmbus1.Init.PacketErrorCheckMode = SMBUS_PEC_DISABLE;
 8000ae0:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <MX_I2C1_SMBUS_Init+0x68>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	629a      	str	r2, [r3, #40]	; 0x28
  hsmbus1.Init.PeripheralMode = SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE;
 8000ae6:	4b08      	ldr	r3, [pc, #32]	; (8000b08 <MX_I2C1_SMBUS_Init+0x68>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	62da      	str	r2, [r3, #44]	; 0x2c
  hsmbus1.Init.SMBusTimeout = 0x00008186;
 8000aec:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <MX_I2C1_SMBUS_Init+0x68>)
 8000aee:	f248 1286 	movw	r2, #33158	; 0x8186
 8000af2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_SMBUS_Init(&hsmbus1) != HAL_OK)
 8000af4:	4804      	ldr	r0, [pc, #16]	; (8000b08 <MX_I2C1_SMBUS_Init+0x68>)
 8000af6:	f006 fa3b 	bl	8006f70 <HAL_SMBUS_Init>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_I2C1_SMBUS_Init+0x64>
  {
    Error_Handler();
 8000b00:	f000 fe66 	bl	80017d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b04:	bf00      	nop
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	20000120 	.word	0x20000120
 8000b0c:	40005400 	.word	0x40005400
 8000b10:	00707cbb 	.word	0x00707cbb

08000b14 <MX_I2C2_SMBUS_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_SMBUS_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hsmbus2.Instance = I2C2;
 8000b18:	4b1c      	ldr	r3, [pc, #112]	; (8000b8c <MX_I2C2_SMBUS_Init+0x78>)
 8000b1a:	4a1d      	ldr	r2, [pc, #116]	; (8000b90 <MX_I2C2_SMBUS_Init+0x7c>)
 8000b1c:	601a      	str	r2, [r3, #0]
  hsmbus2.Init.Timing = 0x00707CBB;
 8000b1e:	4b1b      	ldr	r3, [pc, #108]	; (8000b8c <MX_I2C2_SMBUS_Init+0x78>)
 8000b20:	4a1c      	ldr	r2, [pc, #112]	; (8000b94 <MX_I2C2_SMBUS_Init+0x80>)
 8000b22:	605a      	str	r2, [r3, #4]
  hsmbus2.Init.AnalogFilter = SMBUS_ANALOGFILTER_ENABLE;
 8000b24:	4b19      	ldr	r3, [pc, #100]	; (8000b8c <MX_I2C2_SMBUS_Init+0x78>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	609a      	str	r2, [r3, #8]
  hsmbus2.Init.OwnAddress1 = 2;
 8000b2a:	4b18      	ldr	r3, [pc, #96]	; (8000b8c <MX_I2C2_SMBUS_Init+0x78>)
 8000b2c:	2202      	movs	r2, #2
 8000b2e:	60da      	str	r2, [r3, #12]
  hsmbus2.Init.AddressingMode = SMBUS_ADDRESSINGMODE_7BIT;
 8000b30:	4b16      	ldr	r3, [pc, #88]	; (8000b8c <MX_I2C2_SMBUS_Init+0x78>)
 8000b32:	2201      	movs	r2, #1
 8000b34:	611a      	str	r2, [r3, #16]
  hsmbus2.Init.DualAddressMode = SMBUS_DUALADDRESS_DISABLE;
 8000b36:	4b15      	ldr	r3, [pc, #84]	; (8000b8c <MX_I2C2_SMBUS_Init+0x78>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	615a      	str	r2, [r3, #20]
  hsmbus2.Init.OwnAddress2 = 0;
 8000b3c:	4b13      	ldr	r3, [pc, #76]	; (8000b8c <MX_I2C2_SMBUS_Init+0x78>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	619a      	str	r2, [r3, #24]
  hsmbus2.Init.OwnAddress2Masks = SMBUS_OA2_NOMASK;
 8000b42:	4b12      	ldr	r3, [pc, #72]	; (8000b8c <MX_I2C2_SMBUS_Init+0x78>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	61da      	str	r2, [r3, #28]
  hsmbus2.Init.GeneralCallMode = SMBUS_GENERALCALL_DISABLE;
 8000b48:	4b10      	ldr	r3, [pc, #64]	; (8000b8c <MX_I2C2_SMBUS_Init+0x78>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	621a      	str	r2, [r3, #32]
  hsmbus2.Init.NoStretchMode = SMBUS_NOSTRETCH_DISABLE;
 8000b4e:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <MX_I2C2_SMBUS_Init+0x78>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	625a      	str	r2, [r3, #36]	; 0x24
  hsmbus2.Init.PacketErrorCheckMode = SMBUS_PEC_DISABLE;
 8000b54:	4b0d      	ldr	r3, [pc, #52]	; (8000b8c <MX_I2C2_SMBUS_Init+0x78>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	629a      	str	r2, [r3, #40]	; 0x28
  hsmbus2.Init.PeripheralMode = SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE;
 8000b5a:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <MX_I2C2_SMBUS_Init+0x78>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsmbus2.Init.SMBusTimeout = 0x00008186;
 8000b60:	4b0a      	ldr	r3, [pc, #40]	; (8000b8c <MX_I2C2_SMBUS_Init+0x78>)
 8000b62:	f248 1286 	movw	r2, #33158	; 0x8186
 8000b66:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_SMBUS_Init(&hsmbus2) != HAL_OK)
 8000b68:	4808      	ldr	r0, [pc, #32]	; (8000b8c <MX_I2C2_SMBUS_Init+0x78>)
 8000b6a:	f006 fa01 	bl	8006f70 <HAL_SMBUS_Init>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <MX_I2C2_SMBUS_Init+0x64>
  {
    Error_Handler();
 8000b74:	f000 fe2c 	bl	80017d0 <Error_Handler>
  }

  /** configuration Alert Mode
  */
  if (HAL_SMBUS_EnableAlert_IT(&hsmbus2) != HAL_OK)
 8000b78:	4804      	ldr	r0, [pc, #16]	; (8000b8c <MX_I2C2_SMBUS_Init+0x78>)
 8000b7a:	f006 fab1 	bl	80070e0 <HAL_SMBUS_EnableAlert_IT>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_I2C2_SMBUS_Init+0x74>
  {
    Error_Handler();
 8000b84:	f000 fe24 	bl	80017d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000b88:	bf00      	nop
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	20000170 	.word	0x20000170
 8000b90:	40005800 	.word	0x40005800
 8000b94:	00707cbb 	.word	0x00707cbb

08000b98 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000b9c:	4b22      	ldr	r3, [pc, #136]	; (8000c28 <MX_LPUART1_UART_Init+0x90>)
 8000b9e:	4a23      	ldr	r2, [pc, #140]	; (8000c2c <MX_LPUART1_UART_Init+0x94>)
 8000ba0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000ba2:	4b21      	ldr	r3, [pc, #132]	; (8000c28 <MX_LPUART1_UART_Init+0x90>)
 8000ba4:	4a22      	ldr	r2, [pc, #136]	; (8000c30 <MX_LPUART1_UART_Init+0x98>)
 8000ba6:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8000ba8:	4b1f      	ldr	r3, [pc, #124]	; (8000c28 <MX_LPUART1_UART_Init+0x90>)
 8000baa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000bae:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000bb0:	4b1d      	ldr	r3, [pc, #116]	; (8000c28 <MX_LPUART1_UART_Init+0x90>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000bb6:	4b1c      	ldr	r3, [pc, #112]	; (8000c28 <MX_LPUART1_UART_Init+0x90>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000bbc:	4b1a      	ldr	r3, [pc, #104]	; (8000c28 <MX_LPUART1_UART_Init+0x90>)
 8000bbe:	220c      	movs	r2, #12
 8000bc0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bc2:	4b19      	ldr	r3, [pc, #100]	; (8000c28 <MX_LPUART1_UART_Init+0x90>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bc8:	4b17      	ldr	r3, [pc, #92]	; (8000c28 <MX_LPUART1_UART_Init+0x90>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bce:	4b16      	ldr	r3, [pc, #88]	; (8000c28 <MX_LPUART1_UART_Init+0x90>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bd4:	4b14      	ldr	r3, [pc, #80]	; (8000c28 <MX_LPUART1_UART_Init+0x90>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000bda:	4b13      	ldr	r3, [pc, #76]	; (8000c28 <MX_LPUART1_UART_Init+0x90>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000be0:	4811      	ldr	r0, [pc, #68]	; (8000c28 <MX_LPUART1_UART_Init+0x90>)
 8000be2:	f008 f9dd 	bl	8008fa0 <HAL_UART_Init>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8000bec:	f000 fdf0 	bl	80017d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	480d      	ldr	r0, [pc, #52]	; (8000c28 <MX_LPUART1_UART_Init+0x90>)
 8000bf4:	f008 ff0e 	bl	8009a14 <HAL_UARTEx_SetTxFifoThreshold>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000bfe:	f000 fde7 	bl	80017d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c02:	2100      	movs	r1, #0
 8000c04:	4808      	ldr	r0, [pc, #32]	; (8000c28 <MX_LPUART1_UART_Init+0x90>)
 8000c06:	f008 ff43 	bl	8009a90 <HAL_UARTEx_SetRxFifoThreshold>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000c10:	f000 fdde 	bl	80017d0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000c14:	4804      	ldr	r0, [pc, #16]	; (8000c28 <MX_LPUART1_UART_Init+0x90>)
 8000c16:	f008 fec4 	bl	80099a2 <HAL_UARTEx_DisableFifoMode>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000c20:	f000 fdd6 	bl	80017d0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000c24:	bf00      	nop
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	200001c0 	.word	0x200001c0
 8000c2c:	40008000 	.word	0x40008000
 8000c30:	00033324 	.word	0x00033324

08000c34 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c38:	4b23      	ldr	r3, [pc, #140]	; (8000cc8 <MX_USART2_UART_Init+0x94>)
 8000c3a:	4a24      	ldr	r2, [pc, #144]	; (8000ccc <MX_USART2_UART_Init+0x98>)
 8000c3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c3e:	4b22      	ldr	r3, [pc, #136]	; (8000cc8 <MX_USART2_UART_Init+0x94>)
 8000c40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c46:	4b20      	ldr	r3, [pc, #128]	; (8000cc8 <MX_USART2_UART_Init+0x94>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c4c:	4b1e      	ldr	r3, [pc, #120]	; (8000cc8 <MX_USART2_UART_Init+0x94>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c52:	4b1d      	ldr	r3, [pc, #116]	; (8000cc8 <MX_USART2_UART_Init+0x94>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c58:	4b1b      	ldr	r3, [pc, #108]	; (8000cc8 <MX_USART2_UART_Init+0x94>)
 8000c5a:	220c      	movs	r2, #12
 8000c5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8000c5e:	4b1a      	ldr	r3, [pc, #104]	; (8000cc8 <MX_USART2_UART_Init+0x94>)
 8000c60:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000c64:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c66:	4b18      	ldr	r3, [pc, #96]	; (8000cc8 <MX_USART2_UART_Init+0x94>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c6c:	4b16      	ldr	r3, [pc, #88]	; (8000cc8 <MX_USART2_UART_Init+0x94>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c72:	4b15      	ldr	r3, [pc, #84]	; (8000cc8 <MX_USART2_UART_Init+0x94>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c78:	4b13      	ldr	r3, [pc, #76]	; (8000cc8 <MX_USART2_UART_Init+0x94>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c7e:	4812      	ldr	r0, [pc, #72]	; (8000cc8 <MX_USART2_UART_Init+0x94>)
 8000c80:	f008 f98e 	bl	8008fa0 <HAL_UART_Init>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8000c8a:	f000 fda1 	bl	80017d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c8e:	2100      	movs	r1, #0
 8000c90:	480d      	ldr	r0, [pc, #52]	; (8000cc8 <MX_USART2_UART_Init+0x94>)
 8000c92:	f008 febf 	bl	8009a14 <HAL_UARTEx_SetTxFifoThreshold>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8000c9c:	f000 fd98 	bl	80017d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	4809      	ldr	r0, [pc, #36]	; (8000cc8 <MX_USART2_UART_Init+0x94>)
 8000ca4:	f008 fef4 	bl	8009a90 <HAL_UARTEx_SetRxFifoThreshold>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8000cae:	f000 fd8f 	bl	80017d0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000cb2:	4805      	ldr	r0, [pc, #20]	; (8000cc8 <MX_USART2_UART_Init+0x94>)
 8000cb4:	f008 fe75 	bl	80099a2 <HAL_UARTEx_DisableFifoMode>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8000cbe:	f000 fd87 	bl	80017d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	20000250 	.word	0x20000250
 8000ccc:	40004400 	.word	0x40004400

08000cd0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000cd4:	4b22      	ldr	r3, [pc, #136]	; (8000d60 <MX_USART3_UART_Init+0x90>)
 8000cd6:	4a23      	ldr	r2, [pc, #140]	; (8000d64 <MX_USART3_UART_Init+0x94>)
 8000cd8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000cda:	4b21      	ldr	r3, [pc, #132]	; (8000d60 <MX_USART3_UART_Init+0x90>)
 8000cdc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ce0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ce2:	4b1f      	ldr	r3, [pc, #124]	; (8000d60 <MX_USART3_UART_Init+0x90>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ce8:	4b1d      	ldr	r3, [pc, #116]	; (8000d60 <MX_USART3_UART_Init+0x90>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000cee:	4b1c      	ldr	r3, [pc, #112]	; (8000d60 <MX_USART3_UART_Init+0x90>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000cf4:	4b1a      	ldr	r3, [pc, #104]	; (8000d60 <MX_USART3_UART_Init+0x90>)
 8000cf6:	220c      	movs	r2, #12
 8000cf8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cfa:	4b19      	ldr	r3, [pc, #100]	; (8000d60 <MX_USART3_UART_Init+0x90>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d00:	4b17      	ldr	r3, [pc, #92]	; (8000d60 <MX_USART3_UART_Init+0x90>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d06:	4b16      	ldr	r3, [pc, #88]	; (8000d60 <MX_USART3_UART_Init+0x90>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d0c:	4b14      	ldr	r3, [pc, #80]	; (8000d60 <MX_USART3_UART_Init+0x90>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d12:	4b13      	ldr	r3, [pc, #76]	; (8000d60 <MX_USART3_UART_Init+0x90>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d18:	4811      	ldr	r0, [pc, #68]	; (8000d60 <MX_USART3_UART_Init+0x90>)
 8000d1a:	f008 f941 	bl	8008fa0 <HAL_UART_Init>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000d24:	f000 fd54 	bl	80017d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d28:	2100      	movs	r1, #0
 8000d2a:	480d      	ldr	r0, [pc, #52]	; (8000d60 <MX_USART3_UART_Init+0x90>)
 8000d2c:	f008 fe72 	bl	8009a14 <HAL_UARTEx_SetTxFifoThreshold>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000d36:	f000 fd4b 	bl	80017d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	4808      	ldr	r0, [pc, #32]	; (8000d60 <MX_USART3_UART_Init+0x90>)
 8000d3e:	f008 fea7 	bl	8009a90 <HAL_UARTEx_SetRxFifoThreshold>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000d48:	f000 fd42 	bl	80017d0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000d4c:	4804      	ldr	r0, [pc, #16]	; (8000d60 <MX_USART3_UART_Init+0x90>)
 8000d4e:	f008 fe28 	bl	80099a2 <HAL_UARTEx_DisableFifoMode>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000d58:	f000 fd3a 	bl	80017d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d5c:	bf00      	nop
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	200002e0 	.word	0x200002e0
 8000d64:	40004800 	.word	0x40004800

08000d68 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockB1.Instance = SAI1_Block_B;
 8000d6c:	4b45      	ldr	r3, [pc, #276]	; (8000e84 <MX_SAI1_Init+0x11c>)
 8000d6e:	4a46      	ldr	r2, [pc, #280]	; (8000e88 <MX_SAI1_Init+0x120>)
 8000d70:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000d72:	4b44      	ldr	r3, [pc, #272]	; (8000e84 <MX_SAI1_Init+0x11c>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000d78:	4b42      	ldr	r3, [pc, #264]	; (8000e84 <MX_SAI1_Init+0x11c>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 8000d7e:	4b41      	ldr	r3, [pc, #260]	; (8000e84 <MX_SAI1_Init+0x11c>)
 8000d80:	2240      	movs	r2, #64	; 0x40
 8000d82:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000d84:	4b3f      	ldr	r3, [pc, #252]	; (8000e84 <MX_SAI1_Init+0x11c>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000d8a:	4b3e      	ldr	r3, [pc, #248]	; (8000e84 <MX_SAI1_Init+0x11c>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000d90:	4b3c      	ldr	r3, [pc, #240]	; (8000e84 <MX_SAI1_Init+0x11c>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000d96:	4b3b      	ldr	r3, [pc, #236]	; (8000e84 <MX_SAI1_Init+0x11c>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000d9c:	4b39      	ldr	r3, [pc, #228]	; (8000e84 <MX_SAI1_Init+0x11c>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8000da2:	4b38      	ldr	r3, [pc, #224]	; (8000e84 <MX_SAI1_Init+0x11c>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000da8:	4b36      	ldr	r3, [pc, #216]	; (8000e84 <MX_SAI1_Init+0x11c>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000dae:	4b35      	ldr	r3, [pc, #212]	; (8000e84 <MX_SAI1_Init+0x11c>)
 8000db0:	4a36      	ldr	r2, [pc, #216]	; (8000e8c <MX_SAI1_Init+0x124>)
 8000db2:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000db4:	4b33      	ldr	r3, [pc, #204]	; (8000e84 <MX_SAI1_Init+0x11c>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000dba:	4b32      	ldr	r3, [pc, #200]	; (8000e84 <MX_SAI1_Init+0x11c>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000dc0:	4b30      	ldr	r3, [pc, #192]	; (8000e84 <MX_SAI1_Init+0x11c>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000dc6:	4b2f      	ldr	r3, [pc, #188]	; (8000e84 <MX_SAI1_Init+0x11c>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.PdmInit.Activation = DISABLE;
 8000dcc:	4b2d      	ldr	r3, [pc, #180]	; (8000e84 <MX_SAI1_Init+0x11c>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.PdmInit.MicPairsNbr = 0;
 8000dd4:	4b2b      	ldr	r3, [pc, #172]	; (8000e84 <MX_SAI1_Init+0x11c>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8000dda:	4b2a      	ldr	r3, [pc, #168]	; (8000e84 <MX_SAI1_Init+0x11c>)
 8000ddc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000de0:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.FrameInit.FrameLength = 8;
 8000de2:	4b28      	ldr	r3, [pc, #160]	; (8000e84 <MX_SAI1_Init+0x11c>)
 8000de4:	2208      	movs	r2, #8
 8000de6:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 8000de8:	4b26      	ldr	r3, [pc, #152]	; (8000e84 <MX_SAI1_Init+0x11c>)
 8000dea:	2201      	movs	r2, #1
 8000dec:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000dee:	4b25      	ldr	r3, [pc, #148]	; (8000e84 <MX_SAI1_Init+0x11c>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000df4:	4b23      	ldr	r3, [pc, #140]	; (8000e84 <MX_SAI1_Init+0x11c>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000dfa:	4b22      	ldr	r3, [pc, #136]	; (8000e84 <MX_SAI1_Init+0x11c>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 8000e00:	4b20      	ldr	r3, [pc, #128]	; (8000e84 <MX_SAI1_Init+0x11c>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000e06:	4b1f      	ldr	r3, [pc, #124]	; (8000e84 <MX_SAI1_Init+0x11c>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 8000e0c:	4b1d      	ldr	r3, [pc, #116]	; (8000e84 <MX_SAI1_Init+0x11c>)
 8000e0e:	2201      	movs	r2, #1
 8000e10:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 8000e12:	4b1c      	ldr	r3, [pc, #112]	; (8000e84 <MX_SAI1_Init+0x11c>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	671a      	str	r2, [r3, #112]	; 0x70
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8000e18:	481a      	ldr	r0, [pc, #104]	; (8000e84 <MX_SAI1_Init+0x11c>)
 8000e1a:	f005 fd5d 	bl	80068d8 <HAL_SAI_Init>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_SAI1_Init+0xc0>
  {
    Error_Handler();
 8000e24:	f000 fcd4 	bl	80017d0 <Error_Handler>
  }
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000e28:	4b19      	ldr	r3, [pc, #100]	; (8000e90 <MX_SAI1_Init+0x128>)
 8000e2a:	4a1a      	ldr	r2, [pc, #104]	; (8000e94 <MX_SAI1_Init+0x12c>)
 8000e2c:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000e2e:	4b18      	ldr	r3, [pc, #96]	; (8000e90 <MX_SAI1_Init+0x128>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000e34:	4b16      	ldr	r3, [pc, #88]	; (8000e90 <MX_SAI1_Init+0x128>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000e3a:	4b15      	ldr	r3, [pc, #84]	; (8000e90 <MX_SAI1_Init+0x128>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000e40:	4b13      	ldr	r3, [pc, #76]	; (8000e90 <MX_SAI1_Init+0x128>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000e46:	4b12      	ldr	r3, [pc, #72]	; (8000e90 <MX_SAI1_Init+0x128>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000e4c:	4b10      	ldr	r3, [pc, #64]	; (8000e90 <MX_SAI1_Init+0x128>)
 8000e4e:	4a0f      	ldr	r2, [pc, #60]	; (8000e8c <MX_SAI1_Init+0x124>)
 8000e50:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000e52:	4b0f      	ldr	r3, [pc, #60]	; (8000e90 <MX_SAI1_Init+0x128>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000e58:	4b0d      	ldr	r3, [pc, #52]	; (8000e90 <MX_SAI1_Init+0x128>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000e5e:	4b0c      	ldr	r3, [pc, #48]	; (8000e90 <MX_SAI1_Init+0x128>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000e64:	4b0a      	ldr	r3, [pc, #40]	; (8000e90 <MX_SAI1_Init+0x128>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	2100      	movs	r1, #0
 8000e70:	4807      	ldr	r0, [pc, #28]	; (8000e90 <MX_SAI1_Init+0x128>)
 8000e72:	f005 fcff 	bl	8006874 <HAL_SAI_InitProtocol>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <MX_SAI1_Init+0x118>
  {
    Error_Handler();
 8000e7c:	f000 fca8 	bl	80017d0 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8000e80:	bf00      	nop
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	20000370 	.word	0x20000370
 8000e88:	40015424 	.word	0x40015424
 8000e8c:	0002ee00 	.word	0x0002ee00
 8000e90:	20000404 	.word	0x20000404
 8000e94:	40015404 	.word	0x40015404

08000e98 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8000e9c:	4b2f      	ldr	r3, [pc, #188]	; (8000f5c <MX_SAI2_Init+0xc4>)
 8000e9e:	4a30      	ldr	r2, [pc, #192]	; (8000f60 <MX_SAI2_Init+0xc8>)
 8000ea0:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000ea2:	4b2e      	ldr	r3, [pc, #184]	; (8000f5c <MX_SAI2_Init+0xc4>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8000ea8:	4b2c      	ldr	r3, [pc, #176]	; (8000f5c <MX_SAI2_Init+0xc4>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8000eae:	4b2b      	ldr	r3, [pc, #172]	; (8000f5c <MX_SAI2_Init+0xc4>)
 8000eb0:	2240      	movs	r2, #64	; 0x40
 8000eb2:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000eb4:	4b29      	ldr	r3, [pc, #164]	; (8000f5c <MX_SAI2_Init+0xc4>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000eba:	4b28      	ldr	r3, [pc, #160]	; (8000f5c <MX_SAI2_Init+0xc4>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000ec0:	4b26      	ldr	r3, [pc, #152]	; (8000f5c <MX_SAI2_Init+0xc4>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000ec6:	4b25      	ldr	r3, [pc, #148]	; (8000f5c <MX_SAI2_Init+0xc4>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000ecc:	4b23      	ldr	r3, [pc, #140]	; (8000f5c <MX_SAI2_Init+0xc4>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8000ed2:	4b22      	ldr	r3, [pc, #136]	; (8000f5c <MX_SAI2_Init+0xc4>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000ed8:	4b20      	ldr	r3, [pc, #128]	; (8000f5c <MX_SAI2_Init+0xc4>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000ede:	4b1f      	ldr	r3, [pc, #124]	; (8000f5c <MX_SAI2_Init+0xc4>)
 8000ee0:	4a20      	ldr	r2, [pc, #128]	; (8000f64 <MX_SAI2_Init+0xcc>)
 8000ee2:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000ee4:	4b1d      	ldr	r3, [pc, #116]	; (8000f5c <MX_SAI2_Init+0xc4>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000eea:	4b1c      	ldr	r3, [pc, #112]	; (8000f5c <MX_SAI2_Init+0xc4>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000ef0:	4b1a      	ldr	r3, [pc, #104]	; (8000f5c <MX_SAI2_Init+0xc4>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000ef6:	4b19      	ldr	r3, [pc, #100]	; (8000f5c <MX_SAI2_Init+0xc4>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.PdmInit.Activation = DISABLE;
 8000efc:	4b17      	ldr	r3, [pc, #92]	; (8000f5c <MX_SAI2_Init+0xc4>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.PdmInit.MicPairsNbr = 0;
 8000f04:	4b15      	ldr	r3, [pc, #84]	; (8000f5c <MX_SAI2_Init+0xc4>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8000f0a:	4b14      	ldr	r3, [pc, #80]	; (8000f5c <MX_SAI2_Init+0xc4>)
 8000f0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f10:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8000f12:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <MX_SAI2_Init+0xc4>)
 8000f14:	2208      	movs	r2, #8
 8000f16:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8000f18:	4b10      	ldr	r3, [pc, #64]	; (8000f5c <MX_SAI2_Init+0xc4>)
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000f1e:	4b0f      	ldr	r3, [pc, #60]	; (8000f5c <MX_SAI2_Init+0xc4>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000f24:	4b0d      	ldr	r3, [pc, #52]	; (8000f5c <MX_SAI2_Init+0xc4>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000f2a:	4b0c      	ldr	r3, [pc, #48]	; (8000f5c <MX_SAI2_Init+0xc4>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8000f30:	4b0a      	ldr	r3, [pc, #40]	; (8000f5c <MX_SAI2_Init+0xc4>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000f36:	4b09      	ldr	r3, [pc, #36]	; (8000f5c <MX_SAI2_Init+0xc4>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8000f3c:	4b07      	ldr	r3, [pc, #28]	; (8000f5c <MX_SAI2_Init+0xc4>)
 8000f3e:	2201      	movs	r2, #1
 8000f40:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8000f42:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <MX_SAI2_Init+0xc4>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	671a      	str	r2, [r3, #112]	; 0x70
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8000f48:	4804      	ldr	r0, [pc, #16]	; (8000f5c <MX_SAI2_Init+0xc4>)
 8000f4a:	f005 fcc5 	bl	80068d8 <HAL_SAI_Init>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <MX_SAI2_Init+0xc0>
  {
    Error_Handler();
 8000f54:	f000 fc3c 	bl	80017d0 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8000f58:	bf00      	nop
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	20000498 	.word	0x20000498
 8000f60:	40015804 	.word	0x40015804
 8000f64:	0002ee00 	.word	0x0002ee00

08000f68 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f6c:	4b1b      	ldr	r3, [pc, #108]	; (8000fdc <MX_SPI1_Init+0x74>)
 8000f6e:	4a1c      	ldr	r2, [pc, #112]	; (8000fe0 <MX_SPI1_Init+0x78>)
 8000f70:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f72:	4b1a      	ldr	r3, [pc, #104]	; (8000fdc <MX_SPI1_Init+0x74>)
 8000f74:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f78:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f7a:	4b18      	ldr	r3, [pc, #96]	; (8000fdc <MX_SPI1_Init+0x74>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000f80:	4b16      	ldr	r3, [pc, #88]	; (8000fdc <MX_SPI1_Init+0x74>)
 8000f82:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000f86:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f88:	4b14      	ldr	r3, [pc, #80]	; (8000fdc <MX_SPI1_Init+0x74>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f8e:	4b13      	ldr	r3, [pc, #76]	; (8000fdc <MX_SPI1_Init+0x74>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000f94:	4b11      	ldr	r3, [pc, #68]	; (8000fdc <MX_SPI1_Init+0x74>)
 8000f96:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000f9a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f9c:	4b0f      	ldr	r3, [pc, #60]	; (8000fdc <MX_SPI1_Init+0x74>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fa2:	4b0e      	ldr	r3, [pc, #56]	; (8000fdc <MX_SPI1_Init+0x74>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fa8:	4b0c      	ldr	r3, [pc, #48]	; (8000fdc <MX_SPI1_Init+0x74>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fae:	4b0b      	ldr	r3, [pc, #44]	; (8000fdc <MX_SPI1_Init+0x74>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000fb4:	4b09      	ldr	r3, [pc, #36]	; (8000fdc <MX_SPI1_Init+0x74>)
 8000fb6:	2207      	movs	r2, #7
 8000fb8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000fba:	4b08      	ldr	r3, [pc, #32]	; (8000fdc <MX_SPI1_Init+0x74>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000fc0:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <MX_SPI1_Init+0x74>)
 8000fc2:	2208      	movs	r2, #8
 8000fc4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000fc6:	4805      	ldr	r0, [pc, #20]	; (8000fdc <MX_SPI1_Init+0x74>)
 8000fc8:	f006 f8dd 	bl	8007186 <HAL_SPI_Init>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000fd2:	f000 fbfd 	bl	80017d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	2000052c 	.word	0x2000052c
 8000fe0:	40013000 	.word	0x40013000

08000fe4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000fe8:	4b1b      	ldr	r3, [pc, #108]	; (8001058 <MX_SPI3_Init+0x74>)
 8000fea:	4a1c      	ldr	r2, [pc, #112]	; (800105c <MX_SPI3_Init+0x78>)
 8000fec:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000fee:	4b1a      	ldr	r3, [pc, #104]	; (8001058 <MX_SPI3_Init+0x74>)
 8000ff0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ff4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000ff6:	4b18      	ldr	r3, [pc, #96]	; (8001058 <MX_SPI3_Init+0x74>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000ffc:	4b16      	ldr	r3, [pc, #88]	; (8001058 <MX_SPI3_Init+0x74>)
 8000ffe:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001002:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001004:	4b14      	ldr	r3, [pc, #80]	; (8001058 <MX_SPI3_Init+0x74>)
 8001006:	2200      	movs	r2, #0
 8001008:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800100a:	4b13      	ldr	r3, [pc, #76]	; (8001058 <MX_SPI3_Init+0x74>)
 800100c:	2200      	movs	r2, #0
 800100e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001010:	4b11      	ldr	r3, [pc, #68]	; (8001058 <MX_SPI3_Init+0x74>)
 8001012:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001016:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001018:	4b0f      	ldr	r3, [pc, #60]	; (8001058 <MX_SPI3_Init+0x74>)
 800101a:	2200      	movs	r2, #0
 800101c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800101e:	4b0e      	ldr	r3, [pc, #56]	; (8001058 <MX_SPI3_Init+0x74>)
 8001020:	2200      	movs	r2, #0
 8001022:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001024:	4b0c      	ldr	r3, [pc, #48]	; (8001058 <MX_SPI3_Init+0x74>)
 8001026:	2200      	movs	r2, #0
 8001028:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800102a:	4b0b      	ldr	r3, [pc, #44]	; (8001058 <MX_SPI3_Init+0x74>)
 800102c:	2200      	movs	r2, #0
 800102e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001030:	4b09      	ldr	r3, [pc, #36]	; (8001058 <MX_SPI3_Init+0x74>)
 8001032:	2207      	movs	r2, #7
 8001034:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001036:	4b08      	ldr	r3, [pc, #32]	; (8001058 <MX_SPI3_Init+0x74>)
 8001038:	2200      	movs	r2, #0
 800103a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800103c:	4b06      	ldr	r3, [pc, #24]	; (8001058 <MX_SPI3_Init+0x74>)
 800103e:	2208      	movs	r2, #8
 8001040:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001042:	4805      	ldr	r0, [pc, #20]	; (8001058 <MX_SPI3_Init+0x74>)
 8001044:	f006 f89f 	bl	8007186 <HAL_SPI_Init>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800104e:	f000 fbbf 	bl	80017d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20000590 	.word	0x20000590
 800105c:	40003c00 	.word	0x40003c00

08001060 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b09c      	sub	sp, #112	; 0x70
 8001064:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001066:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800106a:	2200      	movs	r2, #0
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	605a      	str	r2, [r3, #4]
 8001070:	609a      	str	r2, [r3, #8]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8001072:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	605a      	str	r2, [r3, #4]
 800107c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800107e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001082:	2200      	movs	r2, #0
 8001084:	601a      	str	r2, [r3, #0]
 8001086:	605a      	str	r2, [r3, #4]
 8001088:	609a      	str	r2, [r3, #8]
 800108a:	60da      	str	r2, [r3, #12]
 800108c:	611a      	str	r2, [r3, #16]
 800108e:	615a      	str	r2, [r3, #20]
 8001090:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001092:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001096:	2200      	movs	r2, #0
 8001098:	601a      	str	r2, [r3, #0]
 800109a:	605a      	str	r2, [r3, #4]
 800109c:	609a      	str	r2, [r3, #8]
 800109e:	60da      	str	r2, [r3, #12]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80010a0:	463b      	mov	r3, r7
 80010a2:	222c      	movs	r2, #44	; 0x2c
 80010a4:	2100      	movs	r1, #0
 80010a6:	4618      	mov	r0, r3
 80010a8:	f008 fda2 	bl	8009bf0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80010ac:	4b5e      	ldr	r3, [pc, #376]	; (8001228 <MX_TIM1_Init+0x1c8>)
 80010ae:	4a5f      	ldr	r2, [pc, #380]	; (800122c <MX_TIM1_Init+0x1cc>)
 80010b0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3999;
 80010b2:	4b5d      	ldr	r3, [pc, #372]	; (8001228 <MX_TIM1_Init+0x1c8>)
 80010b4:	f640 729f 	movw	r2, #3999	; 0xf9f
 80010b8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ba:	4b5b      	ldr	r3, [pc, #364]	; (8001228 <MX_TIM1_Init+0x1c8>)
 80010bc:	2200      	movs	r2, #0
 80010be:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 80010c0:	4b59      	ldr	r3, [pc, #356]	; (8001228 <MX_TIM1_Init+0x1c8>)
 80010c2:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80010c6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010c8:	4b57      	ldr	r3, [pc, #348]	; (8001228 <MX_TIM1_Init+0x1c8>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80010ce:	4b56      	ldr	r3, [pc, #344]	; (8001228 <MX_TIM1_Init+0x1c8>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010d4:	4b54      	ldr	r3, [pc, #336]	; (8001228 <MX_TIM1_Init+0x1c8>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80010da:	4853      	ldr	r0, [pc, #332]	; (8001228 <MX_TIM1_Init+0x1c8>)
 80010dc:	f006 f94d 	bl	800737a <HAL_TIM_PWM_Init>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80010e6:	f000 fb73 	bl	80017d0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80010ea:	484f      	ldr	r0, [pc, #316]	; (8001228 <MX_TIM1_Init+0x1c8>)
 80010ec:	f006 faa2 	bl	8007634 <HAL_TIM_IC_Init>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 80010f6:	f000 fb6b 	bl	80017d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010fa:	2300      	movs	r3, #0
 80010fc:	667b      	str	r3, [r7, #100]	; 0x64
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80010fe:	2300      	movs	r3, #0
 8001100:	66bb      	str	r3, [r7, #104]	; 0x68
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001102:	2300      	movs	r3, #0
 8001104:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001106:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800110a:	4619      	mov	r1, r3
 800110c:	4846      	ldr	r0, [pc, #280]	; (8001228 <MX_TIM1_Init+0x1c8>)
 800110e:	f007 fd5d 	bl	8008bcc <HAL_TIMEx_MasterConfigSynchronization>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8001118:	f000 fb5a 	bl	80017d0 <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 800111c:	2301      	movs	r3, #1
 800111e:	65bb      	str	r3, [r7, #88]	; 0x58
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 8001120:	2301      	movs	r3, #1
 8001122:	65fb      	str	r3, [r7, #92]	; 0x5c
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 8001124:	2300      	movs	r3, #0
 8001126:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8001128:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800112c:	461a      	mov	r2, r3
 800112e:	2101      	movs	r1, #1
 8001130:	483d      	ldr	r0, [pc, #244]	; (8001228 <MX_TIM1_Init+0x1c8>)
 8001132:	f007 fe51 	bl	8008dd8 <HAL_TIMEx_ConfigBreakInput>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_TIM1_Init+0xe0>
  {
    Error_Handler();
 800113c:	f000 fb48 	bl	80017d0 <Error_Handler>
  }
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 8001140:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001144:	461a      	mov	r2, r3
 8001146:	2102      	movs	r1, #2
 8001148:	4837      	ldr	r0, [pc, #220]	; (8001228 <MX_TIM1_Init+0x1c8>)
 800114a:	f007 fe45 	bl	8008dd8 <HAL_TIMEx_ConfigBreakInput>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001154:	f000 fb3c 	bl	80017d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001158:	2360      	movs	r3, #96	; 0x60
 800115a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.Pulse = 0;
 800115c:	2300      	movs	r3, #0
 800115e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001160:	2300      	movs	r3, #0
 8001162:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001164:	2300      	movs	r3, #0
 8001166:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001168:	2300      	movs	r3, #0
 800116a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800116c:	2300      	movs	r3, #0
 800116e:	653b      	str	r3, [r7, #80]	; 0x50
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001170:	2300      	movs	r3, #0
 8001172:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001174:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001178:	2200      	movs	r2, #0
 800117a:	4619      	mov	r1, r3
 800117c:	482a      	ldr	r0, [pc, #168]	; (8001228 <MX_TIM1_Init+0x1c8>)
 800117e:	f006 fdc1 	bl	8007d04 <HAL_TIM_PWM_ConfigChannel>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8001188:	f000 fb22 	bl	80017d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800118c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001190:	2204      	movs	r2, #4
 8001192:	4619      	mov	r1, r3
 8001194:	4824      	ldr	r0, [pc, #144]	; (8001228 <MX_TIM1_Init+0x1c8>)
 8001196:	f006 fdb5 	bl	8007d04 <HAL_TIM_PWM_ConfigChannel>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80011a0:	f000 fb16 	bl	80017d0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80011a4:	2302      	movs	r3, #2
 80011a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80011a8:	2301      	movs	r3, #1
 80011aa:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80011ac:	2300      	movs	r3, #0
 80011ae:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigIC.ICFilter = 0;
 80011b0:	2300      	movs	r3, #0
 80011b2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80011b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011b8:	2208      	movs	r2, #8
 80011ba:	4619      	mov	r1, r3
 80011bc:	481a      	ldr	r0, [pc, #104]	; (8001228 <MX_TIM1_Init+0x1c8>)
 80011be:	f006 fd04 	bl	8007bca <HAL_TIM_IC_ConfigChannel>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_TIM1_Init+0x16c>
  {
    Error_Handler();
 80011c8:	f000 fb02 	bl	80017d0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 80011cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80011d0:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 80011d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011d6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80011d8:	2300      	movs	r3, #0
 80011da:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80011dc:	2300      	movs	r3, #0
 80011de:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 80011e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011e4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80011e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011ea:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80011ec:	2300      	movs	r3, #0
 80011ee:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_ENABLE;
 80011f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80011f4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80011f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80011fa:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 80011fc:	2300      	movs	r3, #0
 80011fe:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001200:	2300      	movs	r3, #0
 8001202:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001204:	463b      	mov	r3, r7
 8001206:	4619      	mov	r1, r3
 8001208:	4807      	ldr	r0, [pc, #28]	; (8001228 <MX_TIM1_Init+0x1c8>)
 800120a:	f007 fd67 	bl	8008cdc <HAL_TIMEx_ConfigBreakDeadTime>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_TIM1_Init+0x1b8>
  {
    Error_Handler();
 8001214:	f000 fadc 	bl	80017d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001218:	4803      	ldr	r0, [pc, #12]	; (8001228 <MX_TIM1_Init+0x1c8>)
 800121a:	f000 ff21 	bl	8002060 <HAL_TIM_MspPostInit>

}
 800121e:	bf00      	nop
 8001220:	3770      	adds	r7, #112	; 0x70
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	200005f4 	.word	0x200005f4
 800122c:	40012c00 	.word	0x40012c00

08001230 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b08e      	sub	sp, #56	; 0x38
 8001234:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001236:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]
 800123e:	605a      	str	r2, [r3, #4]
 8001240:	609a      	str	r2, [r3, #8]
 8001242:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001244:	f107 031c 	add.w	r3, r7, #28
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
 800124e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001250:	463b      	mov	r3, r7
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	605a      	str	r2, [r3, #4]
 8001258:	609a      	str	r2, [r3, #8]
 800125a:	60da      	str	r2, [r3, #12]
 800125c:	611a      	str	r2, [r3, #16]
 800125e:	615a      	str	r2, [r3, #20]
 8001260:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001262:	4b33      	ldr	r3, [pc, #204]	; (8001330 <MX_TIM2_Init+0x100>)
 8001264:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001268:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800126a:	4b31      	ldr	r3, [pc, #196]	; (8001330 <MX_TIM2_Init+0x100>)
 800126c:	2200      	movs	r2, #0
 800126e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001270:	4b2f      	ldr	r3, [pc, #188]	; (8001330 <MX_TIM2_Init+0x100>)
 8001272:	2200      	movs	r2, #0
 8001274:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001276:	4b2e      	ldr	r3, [pc, #184]	; (8001330 <MX_TIM2_Init+0x100>)
 8001278:	f04f 32ff 	mov.w	r2, #4294967295
 800127c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800127e:	4b2c      	ldr	r3, [pc, #176]	; (8001330 <MX_TIM2_Init+0x100>)
 8001280:	2200      	movs	r2, #0
 8001282:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001284:	4b2a      	ldr	r3, [pc, #168]	; (8001330 <MX_TIM2_Init+0x100>)
 8001286:	2200      	movs	r2, #0
 8001288:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800128a:	4829      	ldr	r0, [pc, #164]	; (8001330 <MX_TIM2_Init+0x100>)
 800128c:	f006 f81e 	bl	80072cc <HAL_TIM_Base_Init>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001296:	f000 fa9b 	bl	80017d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800129a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800129e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012a4:	4619      	mov	r1, r3
 80012a6:	4822      	ldr	r0, [pc, #136]	; (8001330 <MX_TIM2_Init+0x100>)
 80012a8:	f006 fe40 	bl	8007f2c <HAL_TIM_ConfigClockSource>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80012b2:	f000 fa8d 	bl	80017d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80012b6:	481e      	ldr	r0, [pc, #120]	; (8001330 <MX_TIM2_Init+0x100>)
 80012b8:	f006 f85f 	bl	800737a <HAL_TIM_PWM_Init>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80012c2:	f000 fa85 	bl	80017d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012c6:	2300      	movs	r3, #0
 80012c8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ca:	2300      	movs	r3, #0
 80012cc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012ce:	f107 031c 	add.w	r3, r7, #28
 80012d2:	4619      	mov	r1, r3
 80012d4:	4816      	ldr	r0, [pc, #88]	; (8001330 <MX_TIM2_Init+0x100>)
 80012d6:	f007 fc79 	bl	8008bcc <HAL_TIMEx_MasterConfigSynchronization>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80012e0:	f000 fa76 	bl	80017d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012e4:	2360      	movs	r3, #96	; 0x60
 80012e6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80012e8:	2300      	movs	r3, #0
 80012ea:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012ec:	2300      	movs	r3, #0
 80012ee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012f0:	2300      	movs	r3, #0
 80012f2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012f4:	463b      	mov	r3, r7
 80012f6:	2200      	movs	r2, #0
 80012f8:	4619      	mov	r1, r3
 80012fa:	480d      	ldr	r0, [pc, #52]	; (8001330 <MX_TIM2_Init+0x100>)
 80012fc:	f006 fd02 	bl	8007d04 <HAL_TIM_PWM_ConfigChannel>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001306:	f000 fa63 	bl	80017d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800130a:	463b      	mov	r3, r7
 800130c:	2208      	movs	r2, #8
 800130e:	4619      	mov	r1, r3
 8001310:	4807      	ldr	r0, [pc, #28]	; (8001330 <MX_TIM2_Init+0x100>)
 8001312:	f006 fcf7 	bl	8007d04 <HAL_TIM_PWM_ConfigChannel>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 800131c:	f000 fa58 	bl	80017d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001320:	4803      	ldr	r0, [pc, #12]	; (8001330 <MX_TIM2_Init+0x100>)
 8001322:	f000 fe9d 	bl	8002060 <HAL_TIM_MspPostInit>

}
 8001326:	bf00      	nop
 8001328:	3738      	adds	r7, #56	; 0x38
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	20000640 	.word	0x20000640

08001334 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b08c      	sub	sp, #48	; 0x30
 8001338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800133a:	f107 0320 	add.w	r3, r7, #32
 800133e:	2200      	movs	r2, #0
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	605a      	str	r2, [r3, #4]
 8001344:	609a      	str	r2, [r3, #8]
 8001346:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001348:	f107 0314 	add.w	r3, r7, #20
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	605a      	str	r2, [r3, #4]
 8001352:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001354:	1d3b      	adds	r3, r7, #4
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	605a      	str	r2, [r3, #4]
 800135c:	609a      	str	r2, [r3, #8]
 800135e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001360:	4b2b      	ldr	r3, [pc, #172]	; (8001410 <MX_TIM3_Init+0xdc>)
 8001362:	4a2c      	ldr	r2, [pc, #176]	; (8001414 <MX_TIM3_Init+0xe0>)
 8001364:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3999;
 8001366:	4b2a      	ldr	r3, [pc, #168]	; (8001410 <MX_TIM3_Init+0xdc>)
 8001368:	f640 729f 	movw	r2, #3999	; 0xf9f
 800136c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800136e:	4b28      	ldr	r3, [pc, #160]	; (8001410 <MX_TIM3_Init+0xdc>)
 8001370:	2200      	movs	r2, #0
 8001372:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1999;
 8001374:	4b26      	ldr	r3, [pc, #152]	; (8001410 <MX_TIM3_Init+0xdc>)
 8001376:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800137a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800137c:	4b24      	ldr	r3, [pc, #144]	; (8001410 <MX_TIM3_Init+0xdc>)
 800137e:	2200      	movs	r2, #0
 8001380:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001382:	4b23      	ldr	r3, [pc, #140]	; (8001410 <MX_TIM3_Init+0xdc>)
 8001384:	2200      	movs	r2, #0
 8001386:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001388:	4821      	ldr	r0, [pc, #132]	; (8001410 <MX_TIM3_Init+0xdc>)
 800138a:	f005 ff9f 	bl	80072cc <HAL_TIM_Base_Init>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001394:	f000 fa1c 	bl	80017d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001398:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800139c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800139e:	f107 0320 	add.w	r3, r7, #32
 80013a2:	4619      	mov	r1, r3
 80013a4:	481a      	ldr	r0, [pc, #104]	; (8001410 <MX_TIM3_Init+0xdc>)
 80013a6:	f006 fdc1 	bl	8007f2c <HAL_TIM_ConfigClockSource>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 80013b0:	f000 fa0e 	bl	80017d0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80013b4:	4816      	ldr	r0, [pc, #88]	; (8001410 <MX_TIM3_Init+0xdc>)
 80013b6:	f006 f93d 	bl	8007634 <HAL_TIM_IC_Init>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80013c0:	f000 fa06 	bl	80017d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013c4:	2300      	movs	r3, #0
 80013c6:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013c8:	2300      	movs	r3, #0
 80013ca:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013cc:	f107 0314 	add.w	r3, r7, #20
 80013d0:	4619      	mov	r1, r3
 80013d2:	480f      	ldr	r0, [pc, #60]	; (8001410 <MX_TIM3_Init+0xdc>)
 80013d4:	f007 fbfa 	bl	8008bcc <HAL_TIMEx_MasterConfigSynchronization>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 80013de:	f000 f9f7 	bl	80017d0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80013e2:	2302      	movs	r3, #2
 80013e4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80013e6:	2301      	movs	r3, #1
 80013e8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80013ea:	2300      	movs	r3, #0
 80013ec:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80013ee:	2300      	movs	r3, #0
 80013f0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80013f2:	1d3b      	adds	r3, r7, #4
 80013f4:	2204      	movs	r2, #4
 80013f6:	4619      	mov	r1, r3
 80013f8:	4805      	ldr	r0, [pc, #20]	; (8001410 <MX_TIM3_Init+0xdc>)
 80013fa:	f006 fbe6 	bl	8007bca <HAL_TIM_IC_ConfigChannel>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8001404:	f000 f9e4 	bl	80017d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001408:	bf00      	nop
 800140a:	3730      	adds	r7, #48	; 0x30
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	2000068c 	.word	0x2000068c
 8001414:	40000400 	.word	0x40000400

08001418 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b08e      	sub	sp, #56	; 0x38
 800141c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800141e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001422:	2200      	movs	r2, #0
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	605a      	str	r2, [r3, #4]
 8001428:	609a      	str	r2, [r3, #8]
 800142a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800142c:	f107 031c 	add.w	r3, r7, #28
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	605a      	str	r2, [r3, #4]
 8001436:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001438:	463b      	mov	r3, r7
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	605a      	str	r2, [r3, #4]
 8001440:	609a      	str	r2, [r3, #8]
 8001442:	60da      	str	r2, [r3, #12]
 8001444:	611a      	str	r2, [r3, #16]
 8001446:	615a      	str	r2, [r3, #20]
 8001448:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800144a:	4b32      	ldr	r3, [pc, #200]	; (8001514 <MX_TIM4_Init+0xfc>)
 800144c:	4a32      	ldr	r2, [pc, #200]	; (8001518 <MX_TIM4_Init+0x100>)
 800144e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 6399;
 8001450:	4b30      	ldr	r3, [pc, #192]	; (8001514 <MX_TIM4_Init+0xfc>)
 8001452:	f641 02ff 	movw	r2, #6399	; 0x18ff
 8001456:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001458:	4b2e      	ldr	r3, [pc, #184]	; (8001514 <MX_TIM4_Init+0xfc>)
 800145a:	2200      	movs	r2, #0
 800145c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 800145e:	4b2d      	ldr	r3, [pc, #180]	; (8001514 <MX_TIM4_Init+0xfc>)
 8001460:	2263      	movs	r2, #99	; 0x63
 8001462:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001464:	4b2b      	ldr	r3, [pc, #172]	; (8001514 <MX_TIM4_Init+0xfc>)
 8001466:	2200      	movs	r2, #0
 8001468:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800146a:	4b2a      	ldr	r3, [pc, #168]	; (8001514 <MX_TIM4_Init+0xfc>)
 800146c:	2200      	movs	r2, #0
 800146e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001470:	4828      	ldr	r0, [pc, #160]	; (8001514 <MX_TIM4_Init+0xfc>)
 8001472:	f005 ff2b 	bl	80072cc <HAL_TIM_Base_Init>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 800147c:	f000 f9a8 	bl	80017d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001480:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001484:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001486:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800148a:	4619      	mov	r1, r3
 800148c:	4821      	ldr	r0, [pc, #132]	; (8001514 <MX_TIM4_Init+0xfc>)
 800148e:	f006 fd4d 	bl	8007f2c <HAL_TIM_ConfigClockSource>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001498:	f000 f99a 	bl	80017d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800149c:	481d      	ldr	r0, [pc, #116]	; (8001514 <MX_TIM4_Init+0xfc>)
 800149e:	f005 ff6c 	bl	800737a <HAL_TIM_PWM_Init>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80014a8:	f000 f992 	bl	80017d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014ac:	2300      	movs	r3, #0
 80014ae:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014b0:	2300      	movs	r3, #0
 80014b2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80014b4:	f107 031c 	add.w	r3, r7, #28
 80014b8:	4619      	mov	r1, r3
 80014ba:	4816      	ldr	r0, [pc, #88]	; (8001514 <MX_TIM4_Init+0xfc>)
 80014bc:	f007 fb86 	bl	8008bcc <HAL_TIMEx_MasterConfigSynchronization>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80014c6:	f000 f983 	bl	80017d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014ca:	2360      	movs	r3, #96	; 0x60
 80014cc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80014ce:	2300      	movs	r3, #0
 80014d0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014d2:	2300      	movs	r3, #0
 80014d4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014d6:	2300      	movs	r3, #0
 80014d8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80014da:	463b      	mov	r3, r7
 80014dc:	2208      	movs	r2, #8
 80014de:	4619      	mov	r1, r3
 80014e0:	480c      	ldr	r0, [pc, #48]	; (8001514 <MX_TIM4_Init+0xfc>)
 80014e2:	f006 fc0f 	bl	8007d04 <HAL_TIM_PWM_ConfigChannel>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80014ec:	f000 f970 	bl	80017d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80014f0:	463b      	mov	r3, r7
 80014f2:	220c      	movs	r2, #12
 80014f4:	4619      	mov	r1, r3
 80014f6:	4807      	ldr	r0, [pc, #28]	; (8001514 <MX_TIM4_Init+0xfc>)
 80014f8:	f006 fc04 	bl	8007d04 <HAL_TIM_PWM_ConfigChannel>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 8001502:	f000 f965 	bl	80017d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001506:	4803      	ldr	r0, [pc, #12]	; (8001514 <MX_TIM4_Init+0xfc>)
 8001508:	f000 fdaa 	bl	8002060 <HAL_TIM_MspPostInit>

}
 800150c:	bf00      	nop
 800150e:	3738      	adds	r7, #56	; 0x38
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	200006d8 	.word	0x200006d8
 8001518:	40000800 	.word	0x40000800

0800151c <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b096      	sub	sp, #88	; 0x58
 8001520:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001522:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001526:	2200      	movs	r2, #0
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	605a      	str	r2, [r3, #4]
 800152c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800152e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	605a      	str	r2, [r3, #4]
 8001538:	609a      	str	r2, [r3, #8]
 800153a:	60da      	str	r2, [r3, #12]
 800153c:	611a      	str	r2, [r3, #16]
 800153e:	615a      	str	r2, [r3, #20]
 8001540:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001542:	1d3b      	adds	r3, r7, #4
 8001544:	222c      	movs	r2, #44	; 0x2c
 8001546:	2100      	movs	r1, #0
 8001548:	4618      	mov	r0, r3
 800154a:	f008 fb51 	bl	8009bf0 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800154e:	4b33      	ldr	r3, [pc, #204]	; (800161c <MX_TIM15_Init+0x100>)
 8001550:	4a33      	ldr	r2, [pc, #204]	; (8001620 <MX_TIM15_Init+0x104>)
 8001552:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8001554:	4b31      	ldr	r3, [pc, #196]	; (800161c <MX_TIM15_Init+0x100>)
 8001556:	2200      	movs	r2, #0
 8001558:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800155a:	4b30      	ldr	r3, [pc, #192]	; (800161c <MX_TIM15_Init+0x100>)
 800155c:	2200      	movs	r2, #0
 800155e:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8001560:	4b2e      	ldr	r3, [pc, #184]	; (800161c <MX_TIM15_Init+0x100>)
 8001562:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001566:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001568:	4b2c      	ldr	r3, [pc, #176]	; (800161c <MX_TIM15_Init+0x100>)
 800156a:	2200      	movs	r2, #0
 800156c:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800156e:	4b2b      	ldr	r3, [pc, #172]	; (800161c <MX_TIM15_Init+0x100>)
 8001570:	2200      	movs	r2, #0
 8001572:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001574:	4b29      	ldr	r3, [pc, #164]	; (800161c <MX_TIM15_Init+0x100>)
 8001576:	2200      	movs	r2, #0
 8001578:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800157a:	4828      	ldr	r0, [pc, #160]	; (800161c <MX_TIM15_Init+0x100>)
 800157c:	f005 fefd 	bl	800737a <HAL_TIM_PWM_Init>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8001586:	f000 f923 	bl	80017d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800158a:	2300      	movs	r3, #0
 800158c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800158e:	2300      	movs	r3, #0
 8001590:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001592:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001596:	4619      	mov	r1, r3
 8001598:	4820      	ldr	r0, [pc, #128]	; (800161c <MX_TIM15_Init+0x100>)
 800159a:	f007 fb17 	bl	8008bcc <HAL_TIMEx_MasterConfigSynchronization>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 80015a4:	f000 f914 	bl	80017d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015a8:	2360      	movs	r3, #96	; 0x60
 80015aa:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80015ac:	2300      	movs	r3, #0
 80015ae:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015b0:	2300      	movs	r3, #0
 80015b2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015b4:	2300      	movs	r3, #0
 80015b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015b8:	2300      	movs	r3, #0
 80015ba:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015bc:	2300      	movs	r3, #0
 80015be:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015c0:	2300      	movs	r3, #0
 80015c2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015c8:	2200      	movs	r2, #0
 80015ca:	4619      	mov	r1, r3
 80015cc:	4813      	ldr	r0, [pc, #76]	; (800161c <MX_TIM15_Init+0x100>)
 80015ce:	f006 fb99 	bl	8007d04 <HAL_TIM_PWM_ConfigChannel>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 80015d8:	f000 f8fa 	bl	80017d0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015dc:	2300      	movs	r3, #0
 80015de:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015e0:	2300      	movs	r3, #0
 80015e2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015e4:	2300      	movs	r3, #0
 80015e6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015e8:	2300      	movs	r3, #0
 80015ea:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015ec:	2300      	movs	r3, #0
 80015ee:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015f4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015f6:	2300      	movs	r3, #0
 80015f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80015fa:	1d3b      	adds	r3, r7, #4
 80015fc:	4619      	mov	r1, r3
 80015fe:	4807      	ldr	r0, [pc, #28]	; (800161c <MX_TIM15_Init+0x100>)
 8001600:	f007 fb6c 	bl	8008cdc <HAL_TIMEx_ConfigBreakDeadTime>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <MX_TIM15_Init+0xf2>
  {
    Error_Handler();
 800160a:	f000 f8e1 	bl	80017d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 800160e:	4803      	ldr	r0, [pc, #12]	; (800161c <MX_TIM15_Init+0x100>)
 8001610:	f000 fd26 	bl	8002060 <HAL_TIM_MspPostInit>

}
 8001614:	bf00      	nop
 8001616:	3758      	adds	r7, #88	; 0x58
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	20000724 	.word	0x20000724
 8001620:	40014000 	.word	0x40014000

08001624 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001628:	bf00      	nop
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
	...

08001634 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b08e      	sub	sp, #56	; 0x38
 8001638:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800163a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800163e:	2200      	movs	r2, #0
 8001640:	601a      	str	r2, [r3, #0]
 8001642:	605a      	str	r2, [r3, #4]
 8001644:	609a      	str	r2, [r3, #8]
 8001646:	60da      	str	r2, [r3, #12]
 8001648:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800164a:	4b5d      	ldr	r3, [pc, #372]	; (80017c0 <MX_GPIO_Init+0x18c>)
 800164c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800164e:	4a5c      	ldr	r2, [pc, #368]	; (80017c0 <MX_GPIO_Init+0x18c>)
 8001650:	f043 0310 	orr.w	r3, r3, #16
 8001654:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001656:	4b5a      	ldr	r3, [pc, #360]	; (80017c0 <MX_GPIO_Init+0x18c>)
 8001658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800165a:	f003 0310 	and.w	r3, r3, #16
 800165e:	623b      	str	r3, [r7, #32]
 8001660:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001662:	4b57      	ldr	r3, [pc, #348]	; (80017c0 <MX_GPIO_Init+0x18c>)
 8001664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001666:	4a56      	ldr	r2, [pc, #344]	; (80017c0 <MX_GPIO_Init+0x18c>)
 8001668:	f043 0304 	orr.w	r3, r3, #4
 800166c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800166e:	4b54      	ldr	r3, [pc, #336]	; (80017c0 <MX_GPIO_Init+0x18c>)
 8001670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001672:	f003 0304 	and.w	r3, r3, #4
 8001676:	61fb      	str	r3, [r7, #28]
 8001678:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800167a:	4b51      	ldr	r3, [pc, #324]	; (80017c0 <MX_GPIO_Init+0x18c>)
 800167c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800167e:	4a50      	ldr	r2, [pc, #320]	; (80017c0 <MX_GPIO_Init+0x18c>)
 8001680:	f043 0320 	orr.w	r3, r3, #32
 8001684:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001686:	4b4e      	ldr	r3, [pc, #312]	; (80017c0 <MX_GPIO_Init+0x18c>)
 8001688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800168a:	f003 0320 	and.w	r3, r3, #32
 800168e:	61bb      	str	r3, [r7, #24]
 8001690:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001692:	4b4b      	ldr	r3, [pc, #300]	; (80017c0 <MX_GPIO_Init+0x18c>)
 8001694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001696:	4a4a      	ldr	r2, [pc, #296]	; (80017c0 <MX_GPIO_Init+0x18c>)
 8001698:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800169c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800169e:	4b48      	ldr	r3, [pc, #288]	; (80017c0 <MX_GPIO_Init+0x18c>)
 80016a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016a6:	617b      	str	r3, [r7, #20]
 80016a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016aa:	4b45      	ldr	r3, [pc, #276]	; (80017c0 <MX_GPIO_Init+0x18c>)
 80016ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ae:	4a44      	ldr	r2, [pc, #272]	; (80017c0 <MX_GPIO_Init+0x18c>)
 80016b0:	f043 0301 	orr.w	r3, r3, #1
 80016b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016b6:	4b42      	ldr	r3, [pc, #264]	; (80017c0 <MX_GPIO_Init+0x18c>)
 80016b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	613b      	str	r3, [r7, #16]
 80016c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016c2:	4b3f      	ldr	r3, [pc, #252]	; (80017c0 <MX_GPIO_Init+0x18c>)
 80016c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c6:	4a3e      	ldr	r2, [pc, #248]	; (80017c0 <MX_GPIO_Init+0x18c>)
 80016c8:	f043 0302 	orr.w	r3, r3, #2
 80016cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016ce:	4b3c      	ldr	r3, [pc, #240]	; (80017c0 <MX_GPIO_Init+0x18c>)
 80016d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d2:	f003 0302 	and.w	r3, r3, #2
 80016d6:	60fb      	str	r3, [r7, #12]
 80016d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016da:	4b39      	ldr	r3, [pc, #228]	; (80017c0 <MX_GPIO_Init+0x18c>)
 80016dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016de:	4a38      	ldr	r2, [pc, #224]	; (80017c0 <MX_GPIO_Init+0x18c>)
 80016e0:	f043 0308 	orr.w	r3, r3, #8
 80016e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016e6:	4b36      	ldr	r3, [pc, #216]	; (80017c0 <MX_GPIO_Init+0x18c>)
 80016e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ea:	f003 0308 	and.w	r3, r3, #8
 80016ee:	60bb      	str	r3, [r7, #8]
 80016f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80016f2:	4b33      	ldr	r3, [pc, #204]	; (80017c0 <MX_GPIO_Init+0x18c>)
 80016f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f6:	4a32      	ldr	r2, [pc, #200]	; (80017c0 <MX_GPIO_Init+0x18c>)
 80016f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016fe:	4b30      	ldr	r3, [pc, #192]	; (80017c0 <MX_GPIO_Init+0x18c>)
 8001700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001706:	607b      	str	r3, [r7, #4]
 8001708:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 800170a:	f002 fc6f 	bl	8003fec <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 800170e:	2200      	movs	r2, #0
 8001710:	2178      	movs	r1, #120	; 0x78
 8001712:	482c      	ldr	r0, [pc, #176]	; (80017c4 <MX_GPIO_Init+0x190>)
 8001714:	f002 fb7e 	bl	8003e14 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PG3 PG4 PG5 PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001718:	2378      	movs	r3, #120	; 0x78
 800171a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800171c:	2301      	movs	r3, #1
 800171e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001720:	2300      	movs	r3, #0
 8001722:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001724:	2300      	movs	r3, #0
 8001726:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001728:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800172c:	4619      	mov	r1, r3
 800172e:	4825      	ldr	r0, [pc, #148]	; (80017c4 <MX_GPIO_Init+0x190>)
 8001730:	f002 f9de 	bl	8003af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001734:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001738:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173a:	2302      	movs	r3, #2
 800173c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173e:	2300      	movs	r3, #0
 8001740:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001742:	2303      	movs	r3, #3
 8001744:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001746:	230c      	movs	r3, #12
 8001748:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800174a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800174e:	4619      	mov	r1, r3
 8001750:	481d      	ldr	r0, [pc, #116]	; (80017c8 <MX_GPIO_Init+0x194>)
 8001752:	f002 f9cd 	bl	8003af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001756:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800175a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800175c:	2302      	movs	r3, #2
 800175e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001760:	2300      	movs	r3, #0
 8001762:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001764:	2303      	movs	r3, #3
 8001766:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001768:	230a      	movs	r3, #10
 800176a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800176c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001770:	4619      	mov	r1, r3
 8001772:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001776:	f002 f9bb 	bl	8003af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800177a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800177e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001780:	2300      	movs	r3, #0
 8001782:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001784:	2300      	movs	r3, #0
 8001786:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001788:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800178c:	4619      	mov	r1, r3
 800178e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001792:	f002 f9ad 	bl	8003af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001796:	2304      	movs	r3, #4
 8001798:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179a:	2302      	movs	r3, #2
 800179c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179e:	2300      	movs	r3, #0
 80017a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017a2:	2303      	movs	r3, #3
 80017a4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80017a6:	230c      	movs	r3, #12
 80017a8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ae:	4619      	mov	r1, r3
 80017b0:	4806      	ldr	r0, [pc, #24]	; (80017cc <MX_GPIO_Init+0x198>)
 80017b2:	f002 f99d 	bl	8003af0 <HAL_GPIO_Init>

}
 80017b6:	bf00      	nop
 80017b8:	3738      	adds	r7, #56	; 0x38
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	40021000 	.word	0x40021000
 80017c4:	48001800 	.word	0x48001800
 80017c8:	48000800 	.word	0x48000800
 80017cc:	48000c00 	.word	0x48000c00

080017d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017d4:	b672      	cpsid	i
}
 80017d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017d8:	e7fe      	b.n	80017d8 <Error_Handler+0x8>
	...

080017dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017e2:	4b0f      	ldr	r3, [pc, #60]	; (8001820 <HAL_MspInit+0x44>)
 80017e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017e6:	4a0e      	ldr	r2, [pc, #56]	; (8001820 <HAL_MspInit+0x44>)
 80017e8:	f043 0301 	orr.w	r3, r3, #1
 80017ec:	6613      	str	r3, [r2, #96]	; 0x60
 80017ee:	4b0c      	ldr	r3, [pc, #48]	; (8001820 <HAL_MspInit+0x44>)
 80017f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	607b      	str	r3, [r7, #4]
 80017f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017fa:	4b09      	ldr	r3, [pc, #36]	; (8001820 <HAL_MspInit+0x44>)
 80017fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017fe:	4a08      	ldr	r2, [pc, #32]	; (8001820 <HAL_MspInit+0x44>)
 8001800:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001804:	6593      	str	r3, [r2, #88]	; 0x58
 8001806:	4b06      	ldr	r3, [pc, #24]	; (8001820 <HAL_MspInit+0x44>)
 8001808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800180a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800180e:	603b      	str	r3, [r7, #0]
 8001810:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001812:	bf00      	nop
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	40021000 	.word	0x40021000

08001824 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b08c      	sub	sp, #48	; 0x30
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800182c:	f107 031c 	add.w	r3, r7, #28
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]
 8001834:	605a      	str	r2, [r3, #4]
 8001836:	609a      	str	r2, [r3, #8]
 8001838:	60da      	str	r2, [r3, #12]
 800183a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a2d      	ldr	r2, [pc, #180]	; (80018f8 <HAL_ADC_MspInit+0xd4>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d154      	bne.n	80018f0 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001846:	4b2d      	ldr	r3, [pc, #180]	; (80018fc <HAL_ADC_MspInit+0xd8>)
 8001848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800184a:	4a2c      	ldr	r2, [pc, #176]	; (80018fc <HAL_ADC_MspInit+0xd8>)
 800184c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001850:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001852:	4b2a      	ldr	r3, [pc, #168]	; (80018fc <HAL_ADC_MspInit+0xd8>)
 8001854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001856:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800185a:	61bb      	str	r3, [r7, #24]
 800185c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800185e:	4b27      	ldr	r3, [pc, #156]	; (80018fc <HAL_ADC_MspInit+0xd8>)
 8001860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001862:	4a26      	ldr	r2, [pc, #152]	; (80018fc <HAL_ADC_MspInit+0xd8>)
 8001864:	f043 0304 	orr.w	r3, r3, #4
 8001868:	64d3      	str	r3, [r2, #76]	; 0x4c
 800186a:	4b24      	ldr	r3, [pc, #144]	; (80018fc <HAL_ADC_MspInit+0xd8>)
 800186c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800186e:	f003 0304 	and.w	r3, r3, #4
 8001872:	617b      	str	r3, [r7, #20]
 8001874:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001876:	4b21      	ldr	r3, [pc, #132]	; (80018fc <HAL_ADC_MspInit+0xd8>)
 8001878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800187a:	4a20      	ldr	r2, [pc, #128]	; (80018fc <HAL_ADC_MspInit+0xd8>)
 800187c:	f043 0301 	orr.w	r3, r3, #1
 8001880:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001882:	4b1e      	ldr	r3, [pc, #120]	; (80018fc <HAL_ADC_MspInit+0xd8>)
 8001884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001886:	f003 0301 	and.w	r3, r3, #1
 800188a:	613b      	str	r3, [r7, #16]
 800188c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800188e:	4b1b      	ldr	r3, [pc, #108]	; (80018fc <HAL_ADC_MspInit+0xd8>)
 8001890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001892:	4a1a      	ldr	r2, [pc, #104]	; (80018fc <HAL_ADC_MspInit+0xd8>)
 8001894:	f043 0302 	orr.w	r3, r3, #2
 8001898:	64d3      	str	r3, [r2, #76]	; 0x4c
 800189a:	4b18      	ldr	r3, [pc, #96]	; (80018fc <HAL_ADC_MspInit+0xd8>)
 800189c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800189e:	f003 0302 	and.w	r3, r3, #2
 80018a2:	60fb      	str	r3, [r7, #12]
 80018a4:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN8
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80018a6:	233f      	movs	r3, #63	; 0x3f
 80018a8:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80018aa:	230b      	movs	r3, #11
 80018ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ae:	2300      	movs	r3, #0
 80018b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018b2:	f107 031c 	add.w	r3, r7, #28
 80018b6:	4619      	mov	r1, r3
 80018b8:	4811      	ldr	r0, [pc, #68]	; (8001900 <HAL_ADC_MspInit+0xdc>)
 80018ba:	f002 f919 	bl	8003af0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 80018be:	230a      	movs	r3, #10
 80018c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80018c2:	230b      	movs	r3, #11
 80018c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c6:	2300      	movs	r3, #0
 80018c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ca:	f107 031c 	add.w	r3, r7, #28
 80018ce:	4619      	mov	r1, r3
 80018d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018d4:	f002 f90c 	bl	8003af0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80018d8:	2302      	movs	r3, #2
 80018da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80018dc:	230b      	movs	r3, #11
 80018de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e0:	2300      	movs	r3, #0
 80018e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018e4:	f107 031c 	add.w	r3, r7, #28
 80018e8:	4619      	mov	r1, r3
 80018ea:	4806      	ldr	r0, [pc, #24]	; (8001904 <HAL_ADC_MspInit+0xe0>)
 80018ec:	f002 f900 	bl	8003af0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80018f0:	bf00      	nop
 80018f2:	3730      	adds	r7, #48	; 0x30
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	50040000 	.word	0x50040000
 80018fc:	40021000 	.word	0x40021000
 8001900:	48000800 	.word	0x48000800
 8001904:	48000400 	.word	0x48000400

08001908 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b08a      	sub	sp, #40	; 0x28
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001910:	f107 0314 	add.w	r3, r7, #20
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	605a      	str	r2, [r3, #4]
 800191a:	609a      	str	r2, [r3, #8]
 800191c:	60da      	str	r2, [r3, #12]
 800191e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a17      	ldr	r2, [pc, #92]	; (8001984 <HAL_CAN_MspInit+0x7c>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d127      	bne.n	800197a <HAL_CAN_MspInit+0x72>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800192a:	4b17      	ldr	r3, [pc, #92]	; (8001988 <HAL_CAN_MspInit+0x80>)
 800192c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800192e:	4a16      	ldr	r2, [pc, #88]	; (8001988 <HAL_CAN_MspInit+0x80>)
 8001930:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001934:	6593      	str	r3, [r2, #88]	; 0x58
 8001936:	4b14      	ldr	r3, [pc, #80]	; (8001988 <HAL_CAN_MspInit+0x80>)
 8001938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800193a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800193e:	613b      	str	r3, [r7, #16]
 8001940:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001942:	4b11      	ldr	r3, [pc, #68]	; (8001988 <HAL_CAN_MspInit+0x80>)
 8001944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001946:	4a10      	ldr	r2, [pc, #64]	; (8001988 <HAL_CAN_MspInit+0x80>)
 8001948:	f043 0308 	orr.w	r3, r3, #8
 800194c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800194e:	4b0e      	ldr	r3, [pc, #56]	; (8001988 <HAL_CAN_MspInit+0x80>)
 8001950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001952:	f003 0308 	and.w	r3, r3, #8
 8001956:	60fb      	str	r3, [r7, #12]
 8001958:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800195a:	2303      	movs	r3, #3
 800195c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800195e:	2302      	movs	r3, #2
 8001960:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001962:	2300      	movs	r3, #0
 8001964:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001966:	2303      	movs	r3, #3
 8001968:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800196a:	2309      	movs	r3, #9
 800196c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800196e:	f107 0314 	add.w	r3, r7, #20
 8001972:	4619      	mov	r1, r3
 8001974:	4805      	ldr	r0, [pc, #20]	; (800198c <HAL_CAN_MspInit+0x84>)
 8001976:	f002 f8bb 	bl	8003af0 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800197a:	bf00      	nop
 800197c:	3728      	adds	r7, #40	; 0x28
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	40006400 	.word	0x40006400
 8001988:	40021000 	.word	0x40021000
 800198c:	48000c00 	.word	0x48000c00

08001990 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b08a      	sub	sp, #40	; 0x28
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001998:	f107 0314 	add.w	r3, r7, #20
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
 80019a0:	605a      	str	r2, [r3, #4]
 80019a2:	609a      	str	r2, [r3, #8]
 80019a4:	60da      	str	r2, [r3, #12]
 80019a6:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP1)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a1e      	ldr	r2, [pc, #120]	; (8001a28 <HAL_COMP_MspInit+0x98>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d118      	bne.n	80019e4 <HAL_COMP_MspInit+0x54>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019b2:	4b1e      	ldr	r3, [pc, #120]	; (8001a2c <HAL_COMP_MspInit+0x9c>)
 80019b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019b6:	4a1d      	ldr	r2, [pc, #116]	; (8001a2c <HAL_COMP_MspInit+0x9c>)
 80019b8:	f043 0302 	orr.w	r3, r3, #2
 80019bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019be:	4b1b      	ldr	r3, [pc, #108]	; (8001a2c <HAL_COMP_MspInit+0x9c>)
 80019c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019c2:	f003 0302 	and.w	r3, r3, #2
 80019c6:	613b      	str	r3, [r7, #16]
 80019c8:	693b      	ldr	r3, [r7, #16]
    /**COMP1 GPIO Configuration
    PB2     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80019ca:	2304      	movs	r3, #4
 80019cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019ce:	2303      	movs	r3, #3
 80019d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d2:	2300      	movs	r3, #0
 80019d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019d6:	f107 0314 	add.w	r3, r7, #20
 80019da:	4619      	mov	r1, r3
 80019dc:	4814      	ldr	r0, [pc, #80]	; (8001a30 <HAL_COMP_MspInit+0xa0>)
 80019de:	f002 f887 	bl	8003af0 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }

}
 80019e2:	e01c      	b.n	8001a1e <HAL_COMP_MspInit+0x8e>
  else if(hcomp->Instance==COMP2)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a12      	ldr	r2, [pc, #72]	; (8001a34 <HAL_COMP_MspInit+0xa4>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d117      	bne.n	8001a1e <HAL_COMP_MspInit+0x8e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ee:	4b0f      	ldr	r3, [pc, #60]	; (8001a2c <HAL_COMP_MspInit+0x9c>)
 80019f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019f2:	4a0e      	ldr	r2, [pc, #56]	; (8001a2c <HAL_COMP_MspInit+0x9c>)
 80019f4:	f043 0302 	orr.w	r3, r3, #2
 80019f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019fa:	4b0c      	ldr	r3, [pc, #48]	; (8001a2c <HAL_COMP_MspInit+0x9c>)
 80019fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	60fb      	str	r3, [r7, #12]
 8001a04:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a06:	23c0      	movs	r3, #192	; 0xc0
 8001a08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a12:	f107 0314 	add.w	r3, r7, #20
 8001a16:	4619      	mov	r1, r3
 8001a18:	4805      	ldr	r0, [pc, #20]	; (8001a30 <HAL_COMP_MspInit+0xa0>)
 8001a1a:	f002 f869 	bl	8003af0 <HAL_GPIO_Init>
}
 8001a1e:	bf00      	nop
 8001a20:	3728      	adds	r7, #40	; 0x28
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	40010200 	.word	0x40010200
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	48000400 	.word	0x48000400
 8001a34:	40010204 	.word	0x40010204

08001a38 <HAL_SMBUS_MspInit>:
* This function configures the hardware resources used in this example
* @param hsmbus: SMBUS handle pointer
* @retval None
*/
void HAL_SMBUS_MspInit(SMBUS_HandleTypeDef* hsmbus)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b0b0      	sub	sp, #192	; 0xc0
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a40:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	605a      	str	r2, [r3, #4]
 8001a4a:	609a      	str	r2, [r3, #8]
 8001a4c:	60da      	str	r2, [r3, #12]
 8001a4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a50:	f107 0318 	add.w	r3, r7, #24
 8001a54:	2294      	movs	r2, #148	; 0x94
 8001a56:	2100      	movs	r1, #0
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f008 f8c9 	bl	8009bf0 <memset>
  if(hsmbus->Instance==I2C1)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a42      	ldr	r2, [pc, #264]	; (8001b6c <HAL_SMBUS_MspInit+0x134>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d13c      	bne.n	8001ae2 <HAL_SMBUS_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001a68:	2340      	movs	r3, #64	; 0x40
 8001a6a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a70:	f107 0318 	add.w	r3, r7, #24
 8001a74:	4618      	mov	r0, r3
 8001a76:	f003 f9a1 	bl	8004dbc <HAL_RCCEx_PeriphCLKConfig>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <HAL_SMBUS_MspInit+0x4c>
    {
      Error_Handler();
 8001a80:	f7ff fea6 	bl	80017d0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a84:	4b3a      	ldr	r3, [pc, #232]	; (8001b70 <HAL_SMBUS_MspInit+0x138>)
 8001a86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a88:	4a39      	ldr	r2, [pc, #228]	; (8001b70 <HAL_SMBUS_MspInit+0x138>)
 8001a8a:	f043 0302 	orr.w	r3, r3, #2
 8001a8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a90:	4b37      	ldr	r3, [pc, #220]	; (8001b70 <HAL_SMBUS_MspInit+0x138>)
 8001a92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a94:	f003 0302 	and.w	r3, r3, #2
 8001a98:	617b      	str	r3, [r7, #20]
 8001a9a:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001a9c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001aa0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001aa4:	2312      	movs	r3, #18
 8001aa6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ab6:	2304      	movs	r3, #4
 8001ab8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001abc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	482c      	ldr	r0, [pc, #176]	; (8001b74 <HAL_SMBUS_MspInit+0x13c>)
 8001ac4:	f002 f814 	bl	8003af0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ac8:	4b29      	ldr	r3, [pc, #164]	; (8001b70 <HAL_SMBUS_MspInit+0x138>)
 8001aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001acc:	4a28      	ldr	r2, [pc, #160]	; (8001b70 <HAL_SMBUS_MspInit+0x138>)
 8001ace:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ad2:	6593      	str	r3, [r2, #88]	; 0x58
 8001ad4:	4b26      	ldr	r3, [pc, #152]	; (8001b70 <HAL_SMBUS_MspInit+0x138>)
 8001ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001adc:	613b      	str	r3, [r7, #16]
 8001ade:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001ae0:	e03f      	b.n	8001b62 <HAL_SMBUS_MspInit+0x12a>
  else if(hsmbus->Instance==I2C2)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a24      	ldr	r2, [pc, #144]	; (8001b78 <HAL_SMBUS_MspInit+0x140>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d13a      	bne.n	8001b62 <HAL_SMBUS_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001aec:	2380      	movs	r3, #128	; 0x80
 8001aee:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001af0:	2300      	movs	r3, #0
 8001af2:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001af4:	f107 0318 	add.w	r3, r7, #24
 8001af8:	4618      	mov	r0, r3
 8001afa:	f003 f95f 	bl	8004dbc <HAL_RCCEx_PeriphCLKConfig>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <HAL_SMBUS_MspInit+0xd0>
      Error_Handler();
 8001b04:	f7ff fe64 	bl	80017d0 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b08:	4b19      	ldr	r3, [pc, #100]	; (8001b70 <HAL_SMBUS_MspInit+0x138>)
 8001b0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b0c:	4a18      	ldr	r2, [pc, #96]	; (8001b70 <HAL_SMBUS_MspInit+0x138>)
 8001b0e:	f043 0320 	orr.w	r3, r3, #32
 8001b12:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b14:	4b16      	ldr	r3, [pc, #88]	; (8001b70 <HAL_SMBUS_MspInit+0x138>)
 8001b16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b18:	f003 0320 	and.w	r3, r3, #32
 8001b1c:	60fb      	str	r3, [r7, #12]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001b20:	2307      	movs	r3, #7
 8001b22:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b26:	2312      	movs	r3, #18
 8001b28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b32:	2303      	movs	r3, #3
 8001b34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001b38:	2304      	movs	r3, #4
 8001b3a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b3e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001b42:	4619      	mov	r1, r3
 8001b44:	480d      	ldr	r0, [pc, #52]	; (8001b7c <HAL_SMBUS_MspInit+0x144>)
 8001b46:	f001 ffd3 	bl	8003af0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001b4a:	4b09      	ldr	r3, [pc, #36]	; (8001b70 <HAL_SMBUS_MspInit+0x138>)
 8001b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b4e:	4a08      	ldr	r2, [pc, #32]	; (8001b70 <HAL_SMBUS_MspInit+0x138>)
 8001b50:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b54:	6593      	str	r3, [r2, #88]	; 0x58
 8001b56:	4b06      	ldr	r3, [pc, #24]	; (8001b70 <HAL_SMBUS_MspInit+0x138>)
 8001b58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b5e:	60bb      	str	r3, [r7, #8]
 8001b60:	68bb      	ldr	r3, [r7, #8]
}
 8001b62:	bf00      	nop
 8001b64:	37c0      	adds	r7, #192	; 0xc0
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	40005400 	.word	0x40005400
 8001b70:	40021000 	.word	0x40021000
 8001b74:	48000400 	.word	0x48000400
 8001b78:	40005800 	.word	0x40005800
 8001b7c:	48001400 	.word	0x48001400

08001b80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b0b2      	sub	sp, #200	; 0xc8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b88:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]
 8001b90:	605a      	str	r2, [r3, #4]
 8001b92:	609a      	str	r2, [r3, #8]
 8001b94:	60da      	str	r2, [r3, #12]
 8001b96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b98:	f107 0320 	add.w	r3, r7, #32
 8001b9c:	2294      	movs	r2, #148	; 0x94
 8001b9e:	2100      	movs	r1, #0
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f008 f825 	bl	8009bf0 <memset>
  if(huart->Instance==LPUART1)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a64      	ldr	r2, [pc, #400]	; (8001d3c <HAL_UART_MspInit+0x1bc>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d13e      	bne.n	8001c2e <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001bb0:	2320      	movs	r3, #32
 8001bb2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bb8:	f107 0320 	add.w	r3, r7, #32
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f003 f8fd 	bl	8004dbc <HAL_RCCEx_PeriphCLKConfig>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001bc8:	f7ff fe02 	bl	80017d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001bcc:	4b5c      	ldr	r3, [pc, #368]	; (8001d40 <HAL_UART_MspInit+0x1c0>)
 8001bce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bd0:	4a5b      	ldr	r2, [pc, #364]	; (8001d40 <HAL_UART_MspInit+0x1c0>)
 8001bd2:	f043 0301 	orr.w	r3, r3, #1
 8001bd6:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001bd8:	4b59      	ldr	r3, [pc, #356]	; (8001d40 <HAL_UART_MspInit+0x1c0>)
 8001bda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bdc:	f003 0301 	and.w	r3, r3, #1
 8001be0:	61fb      	str	r3, [r7, #28]
 8001be2:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001be4:	4b56      	ldr	r3, [pc, #344]	; (8001d40 <HAL_UART_MspInit+0x1c0>)
 8001be6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001be8:	4a55      	ldr	r2, [pc, #340]	; (8001d40 <HAL_UART_MspInit+0x1c0>)
 8001bea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bee:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bf0:	4b53      	ldr	r3, [pc, #332]	; (8001d40 <HAL_UART_MspInit+0x1c0>)
 8001bf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bf8:	61bb      	str	r3, [r7, #24]
 8001bfa:	69bb      	ldr	r3, [r7, #24]
    HAL_PWREx_EnableVddIO2();
 8001bfc:	f002 f9f6 	bl	8003fec <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001c00:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001c04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c08:	2302      	movs	r3, #2
 8001c0a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c14:	2303      	movs	r3, #3
 8001c16:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001c1a:	2308      	movs	r3, #8
 8001c1c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c20:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001c24:	4619      	mov	r1, r3
 8001c26:	4847      	ldr	r0, [pc, #284]	; (8001d44 <HAL_UART_MspInit+0x1c4>)
 8001c28:	f001 ff62 	bl	8003af0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001c2c:	e081      	b.n	8001d32 <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART2)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a45      	ldr	r2, [pc, #276]	; (8001d48 <HAL_UART_MspInit+0x1c8>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d13b      	bne.n	8001cb0 <HAL_UART_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001c38:	2302      	movs	r3, #2
 8001c3a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c40:	f107 0320 	add.w	r3, r7, #32
 8001c44:	4618      	mov	r0, r3
 8001c46:	f003 f8b9 	bl	8004dbc <HAL_RCCEx_PeriphCLKConfig>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d001      	beq.n	8001c54 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8001c50:	f7ff fdbe 	bl	80017d0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c54:	4b3a      	ldr	r3, [pc, #232]	; (8001d40 <HAL_UART_MspInit+0x1c0>)
 8001c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c58:	4a39      	ldr	r2, [pc, #228]	; (8001d40 <HAL_UART_MspInit+0x1c0>)
 8001c5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c5e:	6593      	str	r3, [r2, #88]	; 0x58
 8001c60:	4b37      	ldr	r3, [pc, #220]	; (8001d40 <HAL_UART_MspInit+0x1c0>)
 8001c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c68:	617b      	str	r3, [r7, #20]
 8001c6a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c6c:	4b34      	ldr	r3, [pc, #208]	; (8001d40 <HAL_UART_MspInit+0x1c0>)
 8001c6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c70:	4a33      	ldr	r2, [pc, #204]	; (8001d40 <HAL_UART_MspInit+0x1c0>)
 8001c72:	f043 0308 	orr.w	r3, r3, #8
 8001c76:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c78:	4b31      	ldr	r3, [pc, #196]	; (8001d40 <HAL_UART_MspInit+0x1c0>)
 8001c7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c7c:	f003 0308 	and.w	r3, r3, #8
 8001c80:	613b      	str	r3, [r7, #16]
 8001c82:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001c84:	2378      	movs	r3, #120	; 0x78
 8001c86:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c90:	2300      	movs	r3, #0
 8001c92:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c96:	2303      	movs	r3, #3
 8001c98:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c9c:	2307      	movs	r3, #7
 8001c9e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ca2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	4828      	ldr	r0, [pc, #160]	; (8001d4c <HAL_UART_MspInit+0x1cc>)
 8001caa:	f001 ff21 	bl	8003af0 <HAL_GPIO_Init>
}
 8001cae:	e040      	b.n	8001d32 <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART3)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a26      	ldr	r2, [pc, #152]	; (8001d50 <HAL_UART_MspInit+0x1d0>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d13b      	bne.n	8001d32 <HAL_UART_MspInit+0x1b2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001cba:	2304      	movs	r3, #4
 8001cbc:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cc2:	f107 0320 	add.w	r3, r7, #32
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f003 f878 	bl	8004dbc <HAL_RCCEx_PeriphCLKConfig>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <HAL_UART_MspInit+0x156>
      Error_Handler();
 8001cd2:	f7ff fd7d 	bl	80017d0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001cd6:	4b1a      	ldr	r3, [pc, #104]	; (8001d40 <HAL_UART_MspInit+0x1c0>)
 8001cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cda:	4a19      	ldr	r2, [pc, #100]	; (8001d40 <HAL_UART_MspInit+0x1c0>)
 8001cdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ce0:	6593      	str	r3, [r2, #88]	; 0x58
 8001ce2:	4b17      	ldr	r3, [pc, #92]	; (8001d40 <HAL_UART_MspInit+0x1c0>)
 8001ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cea:	60fb      	str	r3, [r7, #12]
 8001cec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cee:	4b14      	ldr	r3, [pc, #80]	; (8001d40 <HAL_UART_MspInit+0x1c0>)
 8001cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cf2:	4a13      	ldr	r2, [pc, #76]	; (8001d40 <HAL_UART_MspInit+0x1c0>)
 8001cf4:	f043 0308 	orr.w	r3, r3, #8
 8001cf8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cfa:	4b11      	ldr	r3, [pc, #68]	; (8001d40 <HAL_UART_MspInit+0x1c0>)
 8001cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cfe:	f003 0308 	and.w	r3, r3, #8
 8001d02:	60bb      	str	r3, [r7, #8]
 8001d04:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001d06:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d0a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0e:	2302      	movs	r3, #2
 8001d10:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d14:	2300      	movs	r3, #0
 8001d16:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d20:	2307      	movs	r3, #7
 8001d22:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d26:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	4807      	ldr	r0, [pc, #28]	; (8001d4c <HAL_UART_MspInit+0x1cc>)
 8001d2e:	f001 fedf 	bl	8003af0 <HAL_GPIO_Init>
}
 8001d32:	bf00      	nop
 8001d34:	37c8      	adds	r7, #200	; 0xc8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	40008000 	.word	0x40008000
 8001d40:	40021000 	.word	0x40021000
 8001d44:	48001800 	.word	0x48001800
 8001d48:	40004400 	.word	0x40004400
 8001d4c:	48000c00 	.word	0x48000c00
 8001d50:	40004800 	.word	0x40004800

08001d54 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b08c      	sub	sp, #48	; 0x30
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d5c:	f107 031c 	add.w	r3, r7, #28
 8001d60:	2200      	movs	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	605a      	str	r2, [r3, #4]
 8001d66:	609a      	str	r2, [r3, #8]
 8001d68:	60da      	str	r2, [r3, #12]
 8001d6a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a2e      	ldr	r2, [pc, #184]	; (8001e2c <HAL_SPI_MspInit+0xd8>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d129      	bne.n	8001dca <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d76:	4b2e      	ldr	r3, [pc, #184]	; (8001e30 <HAL_SPI_MspInit+0xdc>)
 8001d78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d7a:	4a2d      	ldr	r2, [pc, #180]	; (8001e30 <HAL_SPI_MspInit+0xdc>)
 8001d7c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d80:	6613      	str	r3, [r2, #96]	; 0x60
 8001d82:	4b2b      	ldr	r3, [pc, #172]	; (8001e30 <HAL_SPI_MspInit+0xdc>)
 8001d84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d8a:	61bb      	str	r3, [r7, #24]
 8001d8c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d8e:	4b28      	ldr	r3, [pc, #160]	; (8001e30 <HAL_SPI_MspInit+0xdc>)
 8001d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d92:	4a27      	ldr	r2, [pc, #156]	; (8001e30 <HAL_SPI_MspInit+0xdc>)
 8001d94:	f043 0301 	orr.w	r3, r3, #1
 8001d98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d9a:	4b25      	ldr	r3, [pc, #148]	; (8001e30 <HAL_SPI_MspInit+0xdc>)
 8001d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d9e:	f003 0301 	and.w	r3, r3, #1
 8001da2:	617b      	str	r3, [r7, #20]
 8001da4:	697b      	ldr	r3, [r7, #20]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001da6:	23f0      	movs	r3, #240	; 0xf0
 8001da8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001daa:	2302      	movs	r3, #2
 8001dac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dae:	2300      	movs	r3, #0
 8001db0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001db2:	2303      	movs	r3, #3
 8001db4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001db6:	2305      	movs	r3, #5
 8001db8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dba:	f107 031c 	add.w	r3, r7, #28
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dc4:	f001 fe94 	bl	8003af0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001dc8:	e02c      	b.n	8001e24 <HAL_SPI_MspInit+0xd0>
  else if(hspi->Instance==SPI3)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a19      	ldr	r2, [pc, #100]	; (8001e34 <HAL_SPI_MspInit+0xe0>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d127      	bne.n	8001e24 <HAL_SPI_MspInit+0xd0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001dd4:	4b16      	ldr	r3, [pc, #88]	; (8001e30 <HAL_SPI_MspInit+0xdc>)
 8001dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dd8:	4a15      	ldr	r2, [pc, #84]	; (8001e30 <HAL_SPI_MspInit+0xdc>)
 8001dda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001dde:	6593      	str	r3, [r2, #88]	; 0x58
 8001de0:	4b13      	ldr	r3, [pc, #76]	; (8001e30 <HAL_SPI_MspInit+0xdc>)
 8001de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001de4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001de8:	613b      	str	r3, [r7, #16]
 8001dea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dec:	4b10      	ldr	r3, [pc, #64]	; (8001e30 <HAL_SPI_MspInit+0xdc>)
 8001dee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001df0:	4a0f      	ldr	r2, [pc, #60]	; (8001e30 <HAL_SPI_MspInit+0xdc>)
 8001df2:	f043 0302 	orr.w	r3, r3, #2
 8001df6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001df8:	4b0d      	ldr	r3, [pc, #52]	; (8001e30 <HAL_SPI_MspInit+0xdc>)
 8001dfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dfc:	f003 0302 	and.w	r3, r3, #2
 8001e00:	60fb      	str	r3, [r7, #12]
 8001e02:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001e04:	2338      	movs	r3, #56	; 0x38
 8001e06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e08:	2302      	movs	r3, #2
 8001e0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e10:	2303      	movs	r3, #3
 8001e12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001e14:	2306      	movs	r3, #6
 8001e16:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e18:	f107 031c 	add.w	r3, r7, #28
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	4806      	ldr	r0, [pc, #24]	; (8001e38 <HAL_SPI_MspInit+0xe4>)
 8001e20:	f001 fe66 	bl	8003af0 <HAL_GPIO_Init>
}
 8001e24:	bf00      	nop
 8001e26:	3730      	adds	r7, #48	; 0x30
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	40013000 	.word	0x40013000
 8001e30:	40021000 	.word	0x40021000
 8001e34:	40003c00 	.word	0x40003c00
 8001e38:	48000400 	.word	0x48000400

08001e3c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b08a      	sub	sp, #40	; 0x28
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e44:	f107 0314 	add.w	r3, r7, #20
 8001e48:	2200      	movs	r2, #0
 8001e4a:	601a      	str	r2, [r3, #0]
 8001e4c:	605a      	str	r2, [r3, #4]
 8001e4e:	609a      	str	r2, [r3, #8]
 8001e50:	60da      	str	r2, [r3, #12]
 8001e52:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a35      	ldr	r2, [pc, #212]	; (8001f30 <HAL_TIM_PWM_MspInit+0xf4>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d152      	bne.n	8001f04 <HAL_TIM_PWM_MspInit+0xc8>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e5e:	4b35      	ldr	r3, [pc, #212]	; (8001f34 <HAL_TIM_PWM_MspInit+0xf8>)
 8001e60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e62:	4a34      	ldr	r2, [pc, #208]	; (8001f34 <HAL_TIM_PWM_MspInit+0xf8>)
 8001e64:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e68:	6613      	str	r3, [r2, #96]	; 0x60
 8001e6a:	4b32      	ldr	r3, [pc, #200]	; (8001f34 <HAL_TIM_PWM_MspInit+0xf8>)
 8001e6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e72:	613b      	str	r3, [r7, #16]
 8001e74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e76:	4b2f      	ldr	r3, [pc, #188]	; (8001f34 <HAL_TIM_PWM_MspInit+0xf8>)
 8001e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e7a:	4a2e      	ldr	r2, [pc, #184]	; (8001f34 <HAL_TIM_PWM_MspInit+0xf8>)
 8001e7c:	f043 0310 	orr.w	r3, r3, #16
 8001e80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e82:	4b2c      	ldr	r3, [pc, #176]	; (8001f34 <HAL_TIM_PWM_MspInit+0xf8>)
 8001e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e86:	f003 0310 	and.w	r3, r3, #16
 8001e8a:	60fb      	str	r3, [r7, #12]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
    PE7     ------> TIM1_ETR
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_BKIN2
    PE15     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001e8e:	2380      	movs	r3, #128	; 0x80
 8001e90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e92:	2302      	movs	r3, #2
 8001e94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e96:	2300      	movs	r3, #0
 8001e98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ea2:	f107 0314 	add.w	r3, r7, #20
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	4823      	ldr	r0, [pc, #140]	; (8001f38 <HAL_TIM_PWM_MspInit+0xfc>)
 8001eaa:	f001 fe21 	bl	8003af0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001eae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001eb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ec4:	f107 0314 	add.w	r3, r7, #20
 8001ec8:	4619      	mov	r1, r3
 8001eca:	481b      	ldr	r0, [pc, #108]	; (8001f38 <HAL_TIM_PWM_MspInit+0xfc>)
 8001ecc:	f001 fe10 	bl	8003af0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001ed0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001ed4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eda:	2300      	movs	r3, #0
 8001edc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ee6:	f107 0314 	add.w	r3, r7, #20
 8001eea:	4619      	mov	r1, r3
 8001eec:	4812      	ldr	r0, [pc, #72]	; (8001f38 <HAL_TIM_PWM_MspInit+0xfc>)
 8001eee:	f001 fdff 	bl	8003af0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	2100      	movs	r1, #0
 8001ef6:	201b      	movs	r0, #27
 8001ef8:	f001 fdc3 	bl	8003a82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001efc:	201b      	movs	r0, #27
 8001efe:	f001 fddc 	bl	8003aba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001f02:	e010      	b.n	8001f26 <HAL_TIM_PWM_MspInit+0xea>
  else if(htim_pwm->Instance==TIM15)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a0c      	ldr	r2, [pc, #48]	; (8001f3c <HAL_TIM_PWM_MspInit+0x100>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d10b      	bne.n	8001f26 <HAL_TIM_PWM_MspInit+0xea>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001f0e:	4b09      	ldr	r3, [pc, #36]	; (8001f34 <HAL_TIM_PWM_MspInit+0xf8>)
 8001f10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f12:	4a08      	ldr	r2, [pc, #32]	; (8001f34 <HAL_TIM_PWM_MspInit+0xf8>)
 8001f14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f18:	6613      	str	r3, [r2, #96]	; 0x60
 8001f1a:	4b06      	ldr	r3, [pc, #24]	; (8001f34 <HAL_TIM_PWM_MspInit+0xf8>)
 8001f1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f22:	60bb      	str	r3, [r7, #8]
 8001f24:	68bb      	ldr	r3, [r7, #8]
}
 8001f26:	bf00      	nop
 8001f28:	3728      	adds	r7, #40	; 0x28
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	40012c00 	.word	0x40012c00
 8001f34:	40021000 	.word	0x40021000
 8001f38:	48001000 	.word	0x48001000
 8001f3c:	40014000 	.word	0x40014000

08001f40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b08c      	sub	sp, #48	; 0x30
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f48:	f107 031c 	add.w	r3, r7, #28
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	605a      	str	r2, [r3, #4]
 8001f52:	609a      	str	r2, [r3, #8]
 8001f54:	60da      	str	r2, [r3, #12]
 8001f56:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f60:	d10c      	bne.n	8001f7c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f62:	4b3a      	ldr	r3, [pc, #232]	; (800204c <HAL_TIM_Base_MspInit+0x10c>)
 8001f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f66:	4a39      	ldr	r2, [pc, #228]	; (800204c <HAL_TIM_Base_MspInit+0x10c>)
 8001f68:	f043 0301 	orr.w	r3, r3, #1
 8001f6c:	6593      	str	r3, [r2, #88]	; 0x58
 8001f6e:	4b37      	ldr	r3, [pc, #220]	; (800204c <HAL_TIM_Base_MspInit+0x10c>)
 8001f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	61bb      	str	r3, [r7, #24]
 8001f78:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001f7a:	e062      	b.n	8002042 <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM3)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a33      	ldr	r2, [pc, #204]	; (8002050 <HAL_TIM_Base_MspInit+0x110>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d130      	bne.n	8001fe8 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f86:	4b31      	ldr	r3, [pc, #196]	; (800204c <HAL_TIM_Base_MspInit+0x10c>)
 8001f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f8a:	4a30      	ldr	r2, [pc, #192]	; (800204c <HAL_TIM_Base_MspInit+0x10c>)
 8001f8c:	f043 0302 	orr.w	r3, r3, #2
 8001f90:	6593      	str	r3, [r2, #88]	; 0x58
 8001f92:	4b2e      	ldr	r3, [pc, #184]	; (800204c <HAL_TIM_Base_MspInit+0x10c>)
 8001f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	617b      	str	r3, [r7, #20]
 8001f9c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f9e:	4b2b      	ldr	r3, [pc, #172]	; (800204c <HAL_TIM_Base_MspInit+0x10c>)
 8001fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fa2:	4a2a      	ldr	r2, [pc, #168]	; (800204c <HAL_TIM_Base_MspInit+0x10c>)
 8001fa4:	f043 0304 	orr.w	r3, r3, #4
 8001fa8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001faa:	4b28      	ldr	r3, [pc, #160]	; (800204c <HAL_TIM_Base_MspInit+0x10c>)
 8001fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fae:	f003 0304 	and.w	r3, r3, #4
 8001fb2:	613b      	str	r3, [r7, #16]
 8001fb4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001fb6:	2380      	movs	r3, #128	; 0x80
 8001fb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fba:	2302      	movs	r3, #2
 8001fbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fca:	f107 031c 	add.w	r3, r7, #28
 8001fce:	4619      	mov	r1, r3
 8001fd0:	4820      	ldr	r0, [pc, #128]	; (8002054 <HAL_TIM_Base_MspInit+0x114>)
 8001fd2:	f001 fd8d 	bl	8003af0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	2100      	movs	r1, #0
 8001fda:	201d      	movs	r0, #29
 8001fdc:	f001 fd51 	bl	8003a82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001fe0:	201d      	movs	r0, #29
 8001fe2:	f001 fd6a 	bl	8003aba <HAL_NVIC_EnableIRQ>
}
 8001fe6:	e02c      	b.n	8002042 <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM4)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a1a      	ldr	r2, [pc, #104]	; (8002058 <HAL_TIM_Base_MspInit+0x118>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d127      	bne.n	8002042 <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001ff2:	4b16      	ldr	r3, [pc, #88]	; (800204c <HAL_TIM_Base_MspInit+0x10c>)
 8001ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff6:	4a15      	ldr	r2, [pc, #84]	; (800204c <HAL_TIM_Base_MspInit+0x10c>)
 8001ff8:	f043 0304 	orr.w	r3, r3, #4
 8001ffc:	6593      	str	r3, [r2, #88]	; 0x58
 8001ffe:	4b13      	ldr	r3, [pc, #76]	; (800204c <HAL_TIM_Base_MspInit+0x10c>)
 8002000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002002:	f003 0304 	and.w	r3, r3, #4
 8002006:	60fb      	str	r3, [r7, #12]
 8002008:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800200a:	4b10      	ldr	r3, [pc, #64]	; (800204c <HAL_TIM_Base_MspInit+0x10c>)
 800200c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800200e:	4a0f      	ldr	r2, [pc, #60]	; (800204c <HAL_TIM_Base_MspInit+0x10c>)
 8002010:	f043 0310 	orr.w	r3, r3, #16
 8002014:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002016:	4b0d      	ldr	r3, [pc, #52]	; (800204c <HAL_TIM_Base_MspInit+0x10c>)
 8002018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800201a:	f003 0310 	and.w	r3, r3, #16
 800201e:	60bb      	str	r3, [r7, #8]
 8002020:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002022:	2301      	movs	r3, #1
 8002024:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002026:	2302      	movs	r3, #2
 8002028:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202a:	2300      	movs	r3, #0
 800202c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800202e:	2300      	movs	r3, #0
 8002030:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002032:	2302      	movs	r3, #2
 8002034:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002036:	f107 031c 	add.w	r3, r7, #28
 800203a:	4619      	mov	r1, r3
 800203c:	4807      	ldr	r0, [pc, #28]	; (800205c <HAL_TIM_Base_MspInit+0x11c>)
 800203e:	f001 fd57 	bl	8003af0 <HAL_GPIO_Init>
}
 8002042:	bf00      	nop
 8002044:	3730      	adds	r7, #48	; 0x30
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	40021000 	.word	0x40021000
 8002050:	40000400 	.word	0x40000400
 8002054:	48000800 	.word	0x48000800
 8002058:	40000800 	.word	0x40000800
 800205c:	48001000 	.word	0x48001000

08002060 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b08c      	sub	sp, #48	; 0x30
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002068:	f107 031c 	add.w	r3, r7, #28
 800206c:	2200      	movs	r2, #0
 800206e:	601a      	str	r2, [r3, #0]
 8002070:	605a      	str	r2, [r3, #4]
 8002072:	609a      	str	r2, [r3, #8]
 8002074:	60da      	str	r2, [r3, #12]
 8002076:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a54      	ldr	r2, [pc, #336]	; (80021d0 <HAL_TIM_MspPostInit+0x170>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d11d      	bne.n	80020be <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002082:	4b54      	ldr	r3, [pc, #336]	; (80021d4 <HAL_TIM_MspPostInit+0x174>)
 8002084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002086:	4a53      	ldr	r2, [pc, #332]	; (80021d4 <HAL_TIM_MspPostInit+0x174>)
 8002088:	f043 0310 	orr.w	r3, r3, #16
 800208c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800208e:	4b51      	ldr	r3, [pc, #324]	; (80021d4 <HAL_TIM_MspPostInit+0x174>)
 8002090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002092:	f003 0310 	and.w	r3, r3, #16
 8002096:	61bb      	str	r3, [r7, #24]
 8002098:	69bb      	ldr	r3, [r7, #24]
    PE9     ------> TIM1_CH1
    PE10     ------> TIM1_CH2N
    PE11     ------> TIM1_CH2
    PE12     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800209a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800209e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a0:	2302      	movs	r3, #2
 80020a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a4:	2300      	movs	r3, #0
 80020a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a8:	2300      	movs	r3, #0
 80020aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80020ac:	2301      	movs	r3, #1
 80020ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020b0:	f107 031c 	add.w	r3, r7, #28
 80020b4:	4619      	mov	r1, r3
 80020b6:	4848      	ldr	r0, [pc, #288]	; (80021d8 <HAL_TIM_MspPostInit+0x178>)
 80020b8:	f001 fd1a 	bl	8003af0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80020bc:	e084      	b.n	80021c8 <HAL_TIM_MspPostInit+0x168>
  else if(htim->Instance==TIM2)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020c6:	d13a      	bne.n	800213e <HAL_TIM_MspPostInit+0xde>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020c8:	4b42      	ldr	r3, [pc, #264]	; (80021d4 <HAL_TIM_MspPostInit+0x174>)
 80020ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020cc:	4a41      	ldr	r2, [pc, #260]	; (80021d4 <HAL_TIM_MspPostInit+0x174>)
 80020ce:	f043 0301 	orr.w	r3, r3, #1
 80020d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020d4:	4b3f      	ldr	r3, [pc, #252]	; (80021d4 <HAL_TIM_MspPostInit+0x174>)
 80020d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020d8:	f003 0301 	and.w	r3, r3, #1
 80020dc:	617b      	str	r3, [r7, #20]
 80020de:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020e0:	4b3c      	ldr	r3, [pc, #240]	; (80021d4 <HAL_TIM_MspPostInit+0x174>)
 80020e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020e4:	4a3b      	ldr	r2, [pc, #236]	; (80021d4 <HAL_TIM_MspPostInit+0x174>)
 80020e6:	f043 0302 	orr.w	r3, r3, #2
 80020ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020ec:	4b39      	ldr	r3, [pc, #228]	; (80021d4 <HAL_TIM_MspPostInit+0x174>)
 80020ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020f0:	f003 0302 	and.w	r3, r3, #2
 80020f4:	613b      	str	r3, [r7, #16]
 80020f6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80020f8:	2301      	movs	r3, #1
 80020fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020fc:	2302      	movs	r3, #2
 80020fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002100:	2300      	movs	r3, #0
 8002102:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002104:	2300      	movs	r3, #0
 8002106:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002108:	2301      	movs	r3, #1
 800210a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800210c:	f107 031c 	add.w	r3, r7, #28
 8002110:	4619      	mov	r1, r3
 8002112:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002116:	f001 fceb 	bl	8003af0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800211a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800211e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002120:	2302      	movs	r3, #2
 8002122:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002124:	2300      	movs	r3, #0
 8002126:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002128:	2300      	movs	r3, #0
 800212a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800212c:	2301      	movs	r3, #1
 800212e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002130:	f107 031c 	add.w	r3, r7, #28
 8002134:	4619      	mov	r1, r3
 8002136:	4829      	ldr	r0, [pc, #164]	; (80021dc <HAL_TIM_MspPostInit+0x17c>)
 8002138:	f001 fcda 	bl	8003af0 <HAL_GPIO_Init>
}
 800213c:	e044      	b.n	80021c8 <HAL_TIM_MspPostInit+0x168>
  else if(htim->Instance==TIM4)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a27      	ldr	r2, [pc, #156]	; (80021e0 <HAL_TIM_MspPostInit+0x180>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d11d      	bne.n	8002184 <HAL_TIM_MspPostInit+0x124>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002148:	4b22      	ldr	r3, [pc, #136]	; (80021d4 <HAL_TIM_MspPostInit+0x174>)
 800214a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800214c:	4a21      	ldr	r2, [pc, #132]	; (80021d4 <HAL_TIM_MspPostInit+0x174>)
 800214e:	f043 0308 	orr.w	r3, r3, #8
 8002152:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002154:	4b1f      	ldr	r3, [pc, #124]	; (80021d4 <HAL_TIM_MspPostInit+0x174>)
 8002156:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002158:	f003 0308 	and.w	r3, r3, #8
 800215c:	60fb      	str	r3, [r7, #12]
 800215e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002160:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002164:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002166:	2302      	movs	r3, #2
 8002168:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216a:	2300      	movs	r3, #0
 800216c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800216e:	2300      	movs	r3, #0
 8002170:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002172:	2302      	movs	r3, #2
 8002174:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002176:	f107 031c 	add.w	r3, r7, #28
 800217a:	4619      	mov	r1, r3
 800217c:	4819      	ldr	r0, [pc, #100]	; (80021e4 <HAL_TIM_MspPostInit+0x184>)
 800217e:	f001 fcb7 	bl	8003af0 <HAL_GPIO_Init>
}
 8002182:	e021      	b.n	80021c8 <HAL_TIM_MspPostInit+0x168>
  else if(htim->Instance==TIM15)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a17      	ldr	r2, [pc, #92]	; (80021e8 <HAL_TIM_MspPostInit+0x188>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d11c      	bne.n	80021c8 <HAL_TIM_MspPostInit+0x168>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800218e:	4b11      	ldr	r3, [pc, #68]	; (80021d4 <HAL_TIM_MspPostInit+0x174>)
 8002190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002192:	4a10      	ldr	r2, [pc, #64]	; (80021d4 <HAL_TIM_MspPostInit+0x174>)
 8002194:	f043 0302 	orr.w	r3, r3, #2
 8002198:	64d3      	str	r3, [r2, #76]	; 0x4c
 800219a:	4b0e      	ldr	r3, [pc, #56]	; (80021d4 <HAL_TIM_MspPostInit+0x174>)
 800219c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800219e:	f003 0302 	and.w	r3, r3, #2
 80021a2:	60bb      	str	r3, [r7, #8]
 80021a4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80021a6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80021aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ac:	2302      	movs	r3, #2
 80021ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b0:	2300      	movs	r3, #0
 80021b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b4:	2300      	movs	r3, #0
 80021b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 80021b8:	230e      	movs	r3, #14
 80021ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021bc:	f107 031c 	add.w	r3, r7, #28
 80021c0:	4619      	mov	r1, r3
 80021c2:	4806      	ldr	r0, [pc, #24]	; (80021dc <HAL_TIM_MspPostInit+0x17c>)
 80021c4:	f001 fc94 	bl	8003af0 <HAL_GPIO_Init>
}
 80021c8:	bf00      	nop
 80021ca:	3730      	adds	r7, #48	; 0x30
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	40012c00 	.word	0x40012c00
 80021d4:	40021000 	.word	0x40021000
 80021d8:	48001000 	.word	0x48001000
 80021dc:	48000400 	.word	0x48000400
 80021e0:	40000800 	.word	0x40000800
 80021e4:	48000c00 	.word	0x48000c00
 80021e8:	40014000 	.word	0x40014000

080021ec <HAL_SAI_MspInit>:

static uint32_t SAI1_client =0;
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b08a      	sub	sp, #40	; 0x28
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a50      	ldr	r2, [pc, #320]	; (800233c <HAL_SAI_MspInit+0x150>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d124      	bne.n	8002248 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 80021fe:	4b50      	ldr	r3, [pc, #320]	; (8002340 <HAL_SAI_MspInit+0x154>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d10b      	bne.n	800221e <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8002206:	4b4f      	ldr	r3, [pc, #316]	; (8002344 <HAL_SAI_MspInit+0x158>)
 8002208:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800220a:	4a4e      	ldr	r2, [pc, #312]	; (8002344 <HAL_SAI_MspInit+0x158>)
 800220c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002210:	6613      	str	r3, [r2, #96]	; 0x60
 8002212:	4b4c      	ldr	r3, [pc, #304]	; (8002344 <HAL_SAI_MspInit+0x158>)
 8002214:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002216:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800221a:	613b      	str	r3, [r7, #16]
 800221c:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 800221e:	4b48      	ldr	r3, [pc, #288]	; (8002340 <HAL_SAI_MspInit+0x154>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	3301      	adds	r3, #1
 8002224:	4a46      	ldr	r2, [pc, #280]	; (8002340 <HAL_SAI_MspInit+0x154>)
 8002226:	6013      	str	r3, [r2, #0]
    PE2     ------> SAI1_MCLK_A
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002228:	2374      	movs	r3, #116	; 0x74
 800222a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800222c:	2302      	movs	r3, #2
 800222e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002230:	2300      	movs	r3, #0
 8002232:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002234:	2300      	movs	r3, #0
 8002236:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8002238:	230d      	movs	r3, #13
 800223a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800223c:	f107 0314 	add.w	r3, r7, #20
 8002240:	4619      	mov	r1, r3
 8002242:	4841      	ldr	r0, [pc, #260]	; (8002348 <HAL_SAI_MspInit+0x15c>)
 8002244:	f001 fc54 	bl	8003af0 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a3f      	ldr	r2, [pc, #252]	; (800234c <HAL_SAI_MspInit+0x160>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d135      	bne.n	80022be <HAL_SAI_MspInit+0xd2>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 8002252:	4b3b      	ldr	r3, [pc, #236]	; (8002340 <HAL_SAI_MspInit+0x154>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d10b      	bne.n	8002272 <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800225a:	4b3a      	ldr	r3, [pc, #232]	; (8002344 <HAL_SAI_MspInit+0x158>)
 800225c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800225e:	4a39      	ldr	r2, [pc, #228]	; (8002344 <HAL_SAI_MspInit+0x158>)
 8002260:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002264:	6613      	str	r3, [r2, #96]	; 0x60
 8002266:	4b37      	ldr	r3, [pc, #220]	; (8002344 <HAL_SAI_MspInit+0x158>)
 8002268:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800226a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800226e:	60fb      	str	r3, [r7, #12]
 8002270:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 8002272:	4b33      	ldr	r3, [pc, #204]	; (8002340 <HAL_SAI_MspInit+0x154>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	3301      	adds	r3, #1
 8002278:	4a31      	ldr	r2, [pc, #196]	; (8002340 <HAL_SAI_MspInit+0x154>)
 800227a:	6013      	str	r3, [r2, #0]
    PE3     ------> SAI1_SD_B
    PF7     ------> SAI1_MCLK_B
    PF8     ------> SAI1_SCK_B
    PF9     ------> SAI1_FS_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800227c:	2308      	movs	r3, #8
 800227e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002280:	2302      	movs	r3, #2
 8002282:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002284:	2300      	movs	r3, #0
 8002286:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002288:	2300      	movs	r3, #0
 800228a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800228c:	230d      	movs	r3, #13
 800228e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002290:	f107 0314 	add.w	r3, r7, #20
 8002294:	4619      	mov	r1, r3
 8002296:	482c      	ldr	r0, [pc, #176]	; (8002348 <HAL_SAI_MspInit+0x15c>)
 8002298:	f001 fc2a 	bl	8003af0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800229c:	f44f 7360 	mov.w	r3, #896	; 0x380
 80022a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a2:	2302      	movs	r3, #2
 80022a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a6:	2300      	movs	r3, #0
 80022a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022aa:	2300      	movs	r3, #0
 80022ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80022ae:	230d      	movs	r3, #13
 80022b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80022b2:	f107 0314 	add.w	r3, r7, #20
 80022b6:	4619      	mov	r1, r3
 80022b8:	4825      	ldr	r0, [pc, #148]	; (8002350 <HAL_SAI_MspInit+0x164>)
 80022ba:	f001 fc19 	bl	8003af0 <HAL_GPIO_Init>

    }
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a24      	ldr	r2, [pc, #144]	; (8002354 <HAL_SAI_MspInit+0x168>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d135      	bne.n	8002334 <HAL_SAI_MspInit+0x148>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 80022c8:	4b23      	ldr	r3, [pc, #140]	; (8002358 <HAL_SAI_MspInit+0x16c>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d10b      	bne.n	80022e8 <HAL_SAI_MspInit+0xfc>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80022d0:	4b1c      	ldr	r3, [pc, #112]	; (8002344 <HAL_SAI_MspInit+0x158>)
 80022d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022d4:	4a1b      	ldr	r2, [pc, #108]	; (8002344 <HAL_SAI_MspInit+0x158>)
 80022d6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80022da:	6613      	str	r3, [r2, #96]	; 0x60
 80022dc:	4b19      	ldr	r3, [pc, #100]	; (8002344 <HAL_SAI_MspInit+0x158>)
 80022de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022e4:	60bb      	str	r3, [r7, #8]
 80022e6:	68bb      	ldr	r3, [r7, #8]
    }
    SAI2_client ++;
 80022e8:	4b1b      	ldr	r3, [pc, #108]	; (8002358 <HAL_SAI_MspInit+0x16c>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	3301      	adds	r3, #1
 80022ee:	4a1a      	ldr	r2, [pc, #104]	; (8002358 <HAL_SAI_MspInit+0x16c>)
 80022f0:	6013      	str	r3, [r2, #0]
    PB12     ------> SAI2_FS_A
    PB13     ------> SAI2_SCK_A
    PB15     ------> SAI2_SD_A
    PC6     ------> SAI2_MCLK_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80022f2:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 80022f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f8:	2302      	movs	r3, #2
 80022fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fc:	2300      	movs	r3, #0
 80022fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002300:	2300      	movs	r3, #0
 8002302:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8002304:	230d      	movs	r3, #13
 8002306:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002308:	f107 0314 	add.w	r3, r7, #20
 800230c:	4619      	mov	r1, r3
 800230e:	4813      	ldr	r0, [pc, #76]	; (800235c <HAL_SAI_MspInit+0x170>)
 8002310:	f001 fbee 	bl	8003af0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002314:	2340      	movs	r3, #64	; 0x40
 8002316:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002318:	2302      	movs	r3, #2
 800231a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231c:	2300      	movs	r3, #0
 800231e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002320:	2300      	movs	r3, #0
 8002322:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8002324:	230d      	movs	r3, #13
 8002326:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002328:	f107 0314 	add.w	r3, r7, #20
 800232c:	4619      	mov	r1, r3
 800232e:	480c      	ldr	r0, [pc, #48]	; (8002360 <HAL_SAI_MspInit+0x174>)
 8002330:	f001 fbde 	bl	8003af0 <HAL_GPIO_Init>

    }
}
 8002334:	bf00      	nop
 8002336:	3728      	adds	r7, #40	; 0x28
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	40015404 	.word	0x40015404
 8002340:	20000770 	.word	0x20000770
 8002344:	40021000 	.word	0x40021000
 8002348:	48001000 	.word	0x48001000
 800234c:	40015424 	.word	0x40015424
 8002350:	48001400 	.word	0x48001400
 8002354:	40015804 	.word	0x40015804
 8002358:	20000774 	.word	0x20000774
 800235c:	48000400 	.word	0x48000400
 8002360:	48000800 	.word	0x48000800

08002364 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002368:	e7fe      	b.n	8002368 <NMI_Handler+0x4>

0800236a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800236a:	b480      	push	{r7}
 800236c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800236e:	e7fe      	b.n	800236e <HardFault_Handler+0x4>

08002370 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002374:	e7fe      	b.n	8002374 <MemManage_Handler+0x4>

08002376 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002376:	b480      	push	{r7}
 8002378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800237a:	e7fe      	b.n	800237a <BusFault_Handler+0x4>

0800237c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002380:	e7fe      	b.n	8002380 <UsageFault_Handler+0x4>

08002382 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002382:	b480      	push	{r7}
 8002384:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002386:	bf00      	nop
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr

08002390 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002394:	bf00      	nop
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr

0800239e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800239e:	b480      	push	{r7}
 80023a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023a2:	bf00      	nop
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023b0:	f000 f8ee 	bl	8002590 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023b4:	bf00      	nop
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80023bc:	4802      	ldr	r0, [pc, #8]	; (80023c8 <TIM1_CC_IRQHandler+0x10>)
 80023be:	f005 fae5 	bl	800798c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80023c2:	bf00      	nop
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	200005f4 	.word	0x200005f4

080023cc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	const uint32_t THRESHOD = 500;
 80023d2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80023d6:	607b      	str	r3, [r7, #4]
	extern uint8_t ball_count;

	extern uint32_t count;
	static uint8_t mode = 0;

	if (mode == 0) {
 80023d8:	4b1f      	ldr	r3, [pc, #124]	; (8002458 <TIM3_IRQHandler+0x8c>)
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d112      	bne.n	8002406 <TIM3_IRQHandler+0x3a>
		// falling edge
		TIM3->CNT = 0;
 80023e0:	4b1e      	ldr	r3, [pc, #120]	; (800245c <TIM3_IRQHandler+0x90>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	625a      	str	r2, [r3, #36]	; 0x24
		TIM3->CCER &= ~(0b1 << 1);
 80023e6:	4b1d      	ldr	r3, [pc, #116]	; (800245c <TIM3_IRQHandler+0x90>)
 80023e8:	6a1b      	ldr	r3, [r3, #32]
 80023ea:	4a1c      	ldr	r2, [pc, #112]	; (800245c <TIM3_IRQHandler+0x90>)
 80023ec:	f023 0302 	bic.w	r3, r3, #2
 80023f0:	6213      	str	r3, [r2, #32]
		TIM3->CCER &= ~(0b1 << 3);
 80023f2:	4b1a      	ldr	r3, [pc, #104]	; (800245c <TIM3_IRQHandler+0x90>)
 80023f4:	6a1b      	ldr	r3, [r3, #32]
 80023f6:	4a19      	ldr	r2, [pc, #100]	; (800245c <TIM3_IRQHandler+0x90>)
 80023f8:	f023 0308 	bic.w	r3, r3, #8
 80023fc:	6213      	str	r3, [r2, #32]
		mode = 1;
 80023fe:	4b16      	ldr	r3, [pc, #88]	; (8002458 <TIM3_IRQHandler+0x8c>)
 8002400:	2201      	movs	r2, #1
 8002402:	701a      	strb	r2, [r3, #0]
 8002404:	e021      	b.n	800244a <TIM3_IRQHandler+0x7e>
	} else {
		// rising edge;
		uint32_t local_count = TIM3->CNT;
 8002406:	4b15      	ldr	r3, [pc, #84]	; (800245c <TIM3_IRQHandler+0x90>)
 8002408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240a:	603b      	str	r3, [r7, #0]
		count = local_count;
 800240c:	4a14      	ldr	r2, [pc, #80]	; (8002460 <TIM3_IRQHandler+0x94>)
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	6013      	str	r3, [r2, #0]

		if (local_count > THRESHOD) {
 8002412:	683a      	ldr	r2, [r7, #0]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	429a      	cmp	r2, r3
 8002418:	d908      	bls.n	800242c <TIM3_IRQHandler+0x60>
			 ball_collected = 1;
 800241a:	4b12      	ldr	r3, [pc, #72]	; (8002464 <TIM3_IRQHandler+0x98>)
 800241c:	2201      	movs	r2, #1
 800241e:	701a      	strb	r2, [r3, #0]
			 ball_count++;
 8002420:	4b11      	ldr	r3, [pc, #68]	; (8002468 <TIM3_IRQHandler+0x9c>)
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	3301      	adds	r3, #1
 8002426:	b2da      	uxtb	r2, r3
 8002428:	4b0f      	ldr	r3, [pc, #60]	; (8002468 <TIM3_IRQHandler+0x9c>)
 800242a:	701a      	strb	r2, [r3, #0]
		}

		TIM3->CCER |= (0b1 << 1);
 800242c:	4b0b      	ldr	r3, [pc, #44]	; (800245c <TIM3_IRQHandler+0x90>)
 800242e:	6a1b      	ldr	r3, [r3, #32]
 8002430:	4a0a      	ldr	r2, [pc, #40]	; (800245c <TIM3_IRQHandler+0x90>)
 8002432:	f043 0302 	orr.w	r3, r3, #2
 8002436:	6213      	str	r3, [r2, #32]
		TIM3->CCER &= ~(0b1 << 3);
 8002438:	4b08      	ldr	r3, [pc, #32]	; (800245c <TIM3_IRQHandler+0x90>)
 800243a:	6a1b      	ldr	r3, [r3, #32]
 800243c:	4a07      	ldr	r2, [pc, #28]	; (800245c <TIM3_IRQHandler+0x90>)
 800243e:	f023 0308 	bic.w	r3, r3, #8
 8002442:	6213      	str	r3, [r2, #32]
		mode = 0;
 8002444:	4b04      	ldr	r3, [pc, #16]	; (8002458 <TIM3_IRQHandler+0x8c>)
 8002446:	2200      	movs	r2, #0
 8002448:	701a      	strb	r2, [r3, #0]
	}


  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800244a:	4808      	ldr	r0, [pc, #32]	; (800246c <TIM3_IRQHandler+0xa0>)
 800244c:	f005 fa9e 	bl	800798c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002450:	bf00      	nop
 8002452:	3708      	adds	r7, #8
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	20000778 	.word	0x20000778
 800245c:	40000400 	.word	0x40000400
 8002460:	20000034 	.word	0x20000034
 8002464:	2000002e 	.word	0x2000002e
 8002468:	2000002d 	.word	0x2000002d
 800246c:	2000068c 	.word	0x2000068c

08002470 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002474:	4b06      	ldr	r3, [pc, #24]	; (8002490 <SystemInit+0x20>)
 8002476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800247a:	4a05      	ldr	r2, [pc, #20]	; (8002490 <SystemInit+0x20>)
 800247c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002480:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002484:	bf00      	nop
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	e000ed00 	.word	0xe000ed00

08002494 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002494:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024cc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002498:	f7ff ffea 	bl	8002470 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800249c:	480c      	ldr	r0, [pc, #48]	; (80024d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800249e:	490d      	ldr	r1, [pc, #52]	; (80024d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80024a0:	4a0d      	ldr	r2, [pc, #52]	; (80024d8 <LoopForever+0xe>)
  movs r3, #0
 80024a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024a4:	e002      	b.n	80024ac <LoopCopyDataInit>

080024a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024aa:	3304      	adds	r3, #4

080024ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024b0:	d3f9      	bcc.n	80024a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024b2:	4a0a      	ldr	r2, [pc, #40]	; (80024dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80024b4:	4c0a      	ldr	r4, [pc, #40]	; (80024e0 <LoopForever+0x16>)
  movs r3, #0
 80024b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024b8:	e001      	b.n	80024be <LoopFillZerobss>

080024ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024bc:	3204      	adds	r2, #4

080024be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024c0:	d3fb      	bcc.n	80024ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024c2:	f007 fb71 	bl	8009ba8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80024c6:	f7fe f91d 	bl	8000704 <main>

080024ca <LoopForever>:

LoopForever:
    b LoopForever
 80024ca:	e7fe      	b.n	80024ca <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80024cc:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80024d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024d4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80024d8:	08009c98 	.word	0x08009c98
  ldr r2, =_sbss
 80024dc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80024e0:	20000780 	.word	0x20000780

080024e4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80024e4:	e7fe      	b.n	80024e4 <ADC1_IRQHandler>

080024e6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024e6:	b580      	push	{r7, lr}
 80024e8:	b082      	sub	sp, #8
 80024ea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80024ec:	2300      	movs	r3, #0
 80024ee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024f0:	2003      	movs	r0, #3
 80024f2:	f001 fabb 	bl	8003a6c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024f6:	2000      	movs	r0, #0
 80024f8:	f000 f80e 	bl	8002518 <HAL_InitTick>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d002      	beq.n	8002508 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	71fb      	strb	r3, [r7, #7]
 8002506:	e001      	b.n	800250c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002508:	f7ff f968 	bl	80017dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800250c:	79fb      	ldrb	r3, [r7, #7]
}
 800250e:	4618      	mov	r0, r3
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
	...

08002518 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002520:	2300      	movs	r3, #0
 8002522:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002524:	4b17      	ldr	r3, [pc, #92]	; (8002584 <HAL_InitTick+0x6c>)
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d023      	beq.n	8002574 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800252c:	4b16      	ldr	r3, [pc, #88]	; (8002588 <HAL_InitTick+0x70>)
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	4b14      	ldr	r3, [pc, #80]	; (8002584 <HAL_InitTick+0x6c>)
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	4619      	mov	r1, r3
 8002536:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800253a:	fbb3 f3f1 	udiv	r3, r3, r1
 800253e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002542:	4618      	mov	r0, r3
 8002544:	f001 fac7 	bl	8003ad6 <HAL_SYSTICK_Config>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d10f      	bne.n	800256e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2b0f      	cmp	r3, #15
 8002552:	d809      	bhi.n	8002568 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002554:	2200      	movs	r2, #0
 8002556:	6879      	ldr	r1, [r7, #4]
 8002558:	f04f 30ff 	mov.w	r0, #4294967295
 800255c:	f001 fa91 	bl	8003a82 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002560:	4a0a      	ldr	r2, [pc, #40]	; (800258c <HAL_InitTick+0x74>)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6013      	str	r3, [r2, #0]
 8002566:	e007      	b.n	8002578 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	73fb      	strb	r3, [r7, #15]
 800256c:	e004      	b.n	8002578 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	73fb      	strb	r3, [r7, #15]
 8002572:	e001      	b.n	8002578 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002578:	7bfb      	ldrb	r3, [r7, #15]
}
 800257a:	4618      	mov	r0, r3
 800257c:	3710      	adds	r7, #16
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	20000008 	.word	0x20000008
 8002588:	20000000 	.word	0x20000000
 800258c:	20000004 	.word	0x20000004

08002590 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002594:	4b06      	ldr	r3, [pc, #24]	; (80025b0 <HAL_IncTick+0x20>)
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	461a      	mov	r2, r3
 800259a:	4b06      	ldr	r3, [pc, #24]	; (80025b4 <HAL_IncTick+0x24>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4413      	add	r3, r2
 80025a0:	4a04      	ldr	r2, [pc, #16]	; (80025b4 <HAL_IncTick+0x24>)
 80025a2:	6013      	str	r3, [r2, #0]
}
 80025a4:	bf00      	nop
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	20000008 	.word	0x20000008
 80025b4:	2000077c 	.word	0x2000077c

080025b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
  return uwTick;
 80025bc:	4b03      	ldr	r3, [pc, #12]	; (80025cc <HAL_GetTick+0x14>)
 80025be:	681b      	ldr	r3, [r3, #0]
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	2000077c 	.word	0x2000077c

080025d0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	431a      	orrs	r2, r3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	609a      	str	r2, [r3, #8]
}
 80025ea:	bf00      	nop
 80025ec:	370c      	adds	r7, #12
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr

080025f6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80025f6:	b480      	push	{r7}
 80025f8:	b083      	sub	sp, #12
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6078      	str	r0, [r7, #4]
 80025fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	431a      	orrs	r2, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	609a      	str	r2, [r3, #8]
}
 8002610:	bf00      	nop
 8002612:	370c      	adds	r7, #12
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr

0800261c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800262c:	4618      	mov	r0, r3
 800262e:	370c      	adds	r7, #12
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr

08002638 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002638:	b480      	push	{r7}
 800263a:	b087      	sub	sp, #28
 800263c:	af00      	add	r7, sp, #0
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	60b9      	str	r1, [r7, #8]
 8002642:	607a      	str	r2, [r7, #4]
 8002644:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	3360      	adds	r3, #96	; 0x60
 800264a:	461a      	mov	r2, r3
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	4413      	add	r3, r2
 8002652:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	4b08      	ldr	r3, [pc, #32]	; (800267c <LL_ADC_SetOffset+0x44>)
 800265a:	4013      	ands	r3, r2
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002662:	683a      	ldr	r2, [r7, #0]
 8002664:	430a      	orrs	r2, r1
 8002666:	4313      	orrs	r3, r2
 8002668:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002670:	bf00      	nop
 8002672:	371c      	adds	r7, #28
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr
 800267c:	03fff000 	.word	0x03fff000

08002680 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002680:	b480      	push	{r7}
 8002682:	b085      	sub	sp, #20
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	3360      	adds	r3, #96	; 0x60
 800268e:	461a      	mov	r2, r3
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	4413      	add	r3, r2
 8002696:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3714      	adds	r7, #20
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b087      	sub	sp, #28
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	60f8      	str	r0, [r7, #12]
 80026b4:	60b9      	str	r1, [r7, #8]
 80026b6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	3360      	adds	r3, #96	; 0x60
 80026bc:	461a      	mov	r2, r3
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	4413      	add	r3, r2
 80026c4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	431a      	orrs	r2, r3
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80026d6:	bf00      	nop
 80026d8:	371c      	adds	r7, #28
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr

080026e2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80026e2:	b480      	push	{r7}
 80026e4:	b083      	sub	sp, #12
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
 80026ea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	695b      	ldr	r3, [r3, #20]
 80026f0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	431a      	orrs	r2, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	615a      	str	r2, [r3, #20]
}
 80026fc:	bf00      	nop
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr

08002708 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002708:	b480      	push	{r7}
 800270a:	b087      	sub	sp, #28
 800270c:	af00      	add	r7, sp, #0
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	60b9      	str	r1, [r7, #8]
 8002712:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	3330      	adds	r3, #48	; 0x30
 8002718:	461a      	mov	r2, r3
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	0a1b      	lsrs	r3, r3, #8
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	f003 030c 	and.w	r3, r3, #12
 8002724:	4413      	add	r3, r2
 8002726:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	f003 031f 	and.w	r3, r3, #31
 8002732:	211f      	movs	r1, #31
 8002734:	fa01 f303 	lsl.w	r3, r1, r3
 8002738:	43db      	mvns	r3, r3
 800273a:	401a      	ands	r2, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	0e9b      	lsrs	r3, r3, #26
 8002740:	f003 011f 	and.w	r1, r3, #31
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	f003 031f 	and.w	r3, r3, #31
 800274a:	fa01 f303 	lsl.w	r3, r1, r3
 800274e:	431a      	orrs	r2, r3
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002754:	bf00      	nop
 8002756:	371c      	adds	r7, #28
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002760:	b480      	push	{r7}
 8002762:	b087      	sub	sp, #28
 8002764:	af00      	add	r7, sp, #0
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	60b9      	str	r1, [r7, #8]
 800276a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	3314      	adds	r3, #20
 8002770:	461a      	mov	r2, r3
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	0e5b      	lsrs	r3, r3, #25
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	f003 0304 	and.w	r3, r3, #4
 800277c:	4413      	add	r3, r2
 800277e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	0d1b      	lsrs	r3, r3, #20
 8002788:	f003 031f 	and.w	r3, r3, #31
 800278c:	2107      	movs	r1, #7
 800278e:	fa01 f303 	lsl.w	r3, r1, r3
 8002792:	43db      	mvns	r3, r3
 8002794:	401a      	ands	r2, r3
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	0d1b      	lsrs	r3, r3, #20
 800279a:	f003 031f 	and.w	r3, r3, #31
 800279e:	6879      	ldr	r1, [r7, #4]
 80027a0:	fa01 f303 	lsl.w	r3, r1, r3
 80027a4:	431a      	orrs	r2, r3
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80027aa:	bf00      	nop
 80027ac:	371c      	adds	r7, #28
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
	...

080027b8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b085      	sub	sp, #20
 80027bc:	af00      	add	r7, sp, #0
 80027be:	60f8      	str	r0, [r7, #12]
 80027c0:	60b9      	str	r1, [r7, #8]
 80027c2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027d0:	43db      	mvns	r3, r3
 80027d2:	401a      	ands	r2, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f003 0318 	and.w	r3, r3, #24
 80027da:	4908      	ldr	r1, [pc, #32]	; (80027fc <LL_ADC_SetChannelSingleDiff+0x44>)
 80027dc:	40d9      	lsrs	r1, r3
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	400b      	ands	r3, r1
 80027e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027e6:	431a      	orrs	r2, r3
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80027ee:	bf00      	nop
 80027f0:	3714      	adds	r7, #20
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	0007ffff 	.word	0x0007ffff

08002800 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002810:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	6093      	str	r3, [r2, #8]
}
 8002818:	bf00      	nop
 800281a:	370c      	adds	r7, #12
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr

08002824 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002834:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002838:	d101      	bne.n	800283e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800283a:	2301      	movs	r3, #1
 800283c:	e000      	b.n	8002840 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800283e:	2300      	movs	r3, #0
}
 8002840:	4618      	mov	r0, r3
 8002842:	370c      	adds	r7, #12
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr

0800284c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800285c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002860:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002868:	bf00      	nop
 800286a:	370c      	adds	r7, #12
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002884:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002888:	d101      	bne.n	800288e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800288a:	2301      	movs	r3, #1
 800288c:	e000      	b.n	8002890 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800288e:	2300      	movs	r3, #0
}
 8002890:	4618      	mov	r0, r3
 8002892:	370c      	adds	r7, #12
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	f003 0301 	and.w	r3, r3, #1
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d101      	bne.n	80028b4 <LL_ADC_IsEnabled+0x18>
 80028b0:	2301      	movs	r3, #1
 80028b2:	e000      	b.n	80028b6 <LL_ADC_IsEnabled+0x1a>
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	370c      	adds	r7, #12
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr

080028c2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80028c2:	b480      	push	{r7}
 80028c4:	b083      	sub	sp, #12
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f003 0304 	and.w	r3, r3, #4
 80028d2:	2b04      	cmp	r3, #4
 80028d4:	d101      	bne.n	80028da <LL_ADC_REG_IsConversionOngoing+0x18>
 80028d6:	2301      	movs	r3, #1
 80028d8:	e000      	b.n	80028dc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80028da:	2300      	movs	r3, #0
}
 80028dc:	4618      	mov	r0, r3
 80028de:	370c      	adds	r7, #12
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr

080028e8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	f003 0308 	and.w	r3, r3, #8
 80028f8:	2b08      	cmp	r3, #8
 80028fa:	d101      	bne.n	8002900 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80028fc:	2301      	movs	r3, #1
 80028fe:	e000      	b.n	8002902 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002900:	2300      	movs	r3, #0
}
 8002902:	4618      	mov	r0, r3
 8002904:	370c      	adds	r7, #12
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
	...

08002910 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b088      	sub	sp, #32
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002918:	2300      	movs	r3, #0
 800291a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800291c:	2300      	movs	r3, #0
 800291e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d101      	bne.n	800292a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e12f      	b.n	8002b8a <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	691b      	ldr	r3, [r3, #16]
 800292e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002934:	2b00      	cmp	r3, #0
 8002936:	d109      	bne.n	800294c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f7fe ff73 	bl	8001824 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4618      	mov	r0, r3
 8002952:	f7ff ff67 	bl	8002824 <LL_ADC_IsDeepPowerDownEnabled>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d004      	beq.n	8002966 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4618      	mov	r0, r3
 8002962:	f7ff ff4d 	bl	8002800 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4618      	mov	r0, r3
 800296c:	f7ff ff82 	bl	8002874 <LL_ADC_IsInternalRegulatorEnabled>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d115      	bne.n	80029a2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4618      	mov	r0, r3
 800297c:	f7ff ff66 	bl	800284c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002980:	4b84      	ldr	r3, [pc, #528]	; (8002b94 <HAL_ADC_Init+0x284>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	099b      	lsrs	r3, r3, #6
 8002986:	4a84      	ldr	r2, [pc, #528]	; (8002b98 <HAL_ADC_Init+0x288>)
 8002988:	fba2 2303 	umull	r2, r3, r2, r3
 800298c:	099b      	lsrs	r3, r3, #6
 800298e:	3301      	adds	r3, #1
 8002990:	005b      	lsls	r3, r3, #1
 8002992:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002994:	e002      	b.n	800299c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	3b01      	subs	r3, #1
 800299a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d1f9      	bne.n	8002996 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7ff ff64 	bl	8002874 <LL_ADC_IsInternalRegulatorEnabled>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d10d      	bne.n	80029ce <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029b6:	f043 0210 	orr.w	r2, r3, #16
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029c2:	f043 0201 	orr.w	r2, r3, #1
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f7ff ff75 	bl	80028c2 <LL_ADC_REG_IsConversionOngoing>
 80029d8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029de:	f003 0310 	and.w	r3, r3, #16
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	f040 80c8 	bne.w	8002b78 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	f040 80c4 	bne.w	8002b78 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029f4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80029f8:	f043 0202 	orr.w	r2, r3, #2
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7ff ff49 	bl	800289c <LL_ADC_IsEnabled>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d10b      	bne.n	8002a28 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a10:	4862      	ldr	r0, [pc, #392]	; (8002b9c <HAL_ADC_Init+0x28c>)
 8002a12:	f7ff ff43 	bl	800289c <LL_ADC_IsEnabled>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d105      	bne.n	8002a28 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	4619      	mov	r1, r3
 8002a22:	485f      	ldr	r0, [pc, #380]	; (8002ba0 <HAL_ADC_Init+0x290>)
 8002a24:	f7ff fdd4 	bl	80025d0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	7e5b      	ldrb	r3, [r3, #25]
 8002a2c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a32:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002a38:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002a3e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a46:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d106      	bne.n	8002a64 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5a:	3b01      	subs	r3, #1
 8002a5c:	045b      	lsls	r3, r3, #17
 8002a5e:	69ba      	ldr	r2, [r7, #24]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d009      	beq.n	8002a80 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a70:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a78:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002a7a:	69ba      	ldr	r2, [r7, #24]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	68da      	ldr	r2, [r3, #12]
 8002a86:	4b47      	ldr	r3, [pc, #284]	; (8002ba4 <HAL_ADC_Init+0x294>)
 8002a88:	4013      	ands	r3, r2
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	6812      	ldr	r2, [r2, #0]
 8002a8e:	69b9      	ldr	r1, [r7, #24]
 8002a90:	430b      	orrs	r3, r1
 8002a92:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f7ff ff12 	bl	80028c2 <LL_ADC_REG_IsConversionOngoing>
 8002a9e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7ff ff1f 	bl	80028e8 <LL_ADC_INJ_IsConversionOngoing>
 8002aaa:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d140      	bne.n	8002b34 <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d13d      	bne.n	8002b34 <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	7e1b      	ldrb	r3, [r3, #24]
 8002ac0:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002ac2:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002aca:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002acc:	4313      	orrs	r3, r2
 8002ace:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ada:	f023 0306 	bic.w	r3, r3, #6
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	6812      	ldr	r2, [r2, #0]
 8002ae2:	69b9      	ldr	r1, [r7, #24]
 8002ae4:	430b      	orrs	r3, r1
 8002ae6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d118      	bne.n	8002b24 <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	691b      	ldr	r3, [r3, #16]
 8002af8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002afc:	f023 0304 	bic.w	r3, r3, #4
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002b08:	4311      	orrs	r1, r2
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002b0e:	4311      	orrs	r1, r2
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002b14:	430a      	orrs	r2, r1
 8002b16:	431a      	orrs	r2, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f042 0201 	orr.w	r2, r2, #1
 8002b20:	611a      	str	r2, [r3, #16]
 8002b22:	e007      	b.n	8002b34 <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	691a      	ldr	r2, [r3, #16]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f022 0201 	bic.w	r2, r2, #1
 8002b32:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	691b      	ldr	r3, [r3, #16]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d10c      	bne.n	8002b56 <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b42:	f023 010f 	bic.w	r1, r3, #15
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	69db      	ldr	r3, [r3, #28]
 8002b4a:	1e5a      	subs	r2, r3, #1
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	430a      	orrs	r2, r1
 8002b52:	631a      	str	r2, [r3, #48]	; 0x30
 8002b54:	e007      	b.n	8002b66 <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f022 020f 	bic.w	r2, r2, #15
 8002b64:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b6a:	f023 0303 	bic.w	r3, r3, #3
 8002b6e:	f043 0201 	orr.w	r2, r3, #1
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	659a      	str	r2, [r3, #88]	; 0x58
 8002b76:	e007      	b.n	8002b88 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b7c:	f043 0210 	orr.w	r2, r3, #16
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002b88:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3720      	adds	r7, #32
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	20000000 	.word	0x20000000
 8002b98:	053e2d63 	.word	0x053e2d63
 8002b9c:	50040000 	.word	0x50040000
 8002ba0:	50040300 	.word	0x50040300
 8002ba4:	fff0c007 	.word	0xfff0c007

08002ba8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b0b6      	sub	sp, #216	; 0xd8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d101      	bne.n	8002bca <HAL_ADC_ConfigChannel+0x22>
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	e3d5      	b.n	8003376 <HAL_ADC_ConfigChannel+0x7ce>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2201      	movs	r2, #1
 8002bce:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7ff fe73 	bl	80028c2 <LL_ADC_REG_IsConversionOngoing>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	f040 83ba 	bne.w	8003358 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	2b05      	cmp	r3, #5
 8002bea:	d824      	bhi.n	8002c36 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	3b02      	subs	r3, #2
 8002bf2:	2b03      	cmp	r3, #3
 8002bf4:	d81b      	bhi.n	8002c2e <HAL_ADC_ConfigChannel+0x86>
 8002bf6:	a201      	add	r2, pc, #4	; (adr r2, 8002bfc <HAL_ADC_ConfigChannel+0x54>)
 8002bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bfc:	08002c0d 	.word	0x08002c0d
 8002c00:	08002c15 	.word	0x08002c15
 8002c04:	08002c1d 	.word	0x08002c1d
 8002c08:	08002c25 	.word	0x08002c25
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	220c      	movs	r2, #12
 8002c10:	605a      	str	r2, [r3, #4]
          break;
 8002c12:	e011      	b.n	8002c38 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	2212      	movs	r2, #18
 8002c18:	605a      	str	r2, [r3, #4]
          break;
 8002c1a:	e00d      	b.n	8002c38 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	2218      	movs	r2, #24
 8002c20:	605a      	str	r2, [r3, #4]
          break;
 8002c22:	e009      	b.n	8002c38 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c2a:	605a      	str	r2, [r3, #4]
          break;
 8002c2c:	e004      	b.n	8002c38 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	2206      	movs	r2, #6
 8002c32:	605a      	str	r2, [r3, #4]
          break;
 8002c34:	e000      	b.n	8002c38 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002c36:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6818      	ldr	r0, [r3, #0]
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	6859      	ldr	r1, [r3, #4]
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	461a      	mov	r2, r3
 8002c46:	f7ff fd5f 	bl	8002708 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f7ff fe37 	bl	80028c2 <LL_ADC_REG_IsConversionOngoing>
 8002c54:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f7ff fe43 	bl	80028e8 <LL_ADC_INJ_IsConversionOngoing>
 8002c62:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c66:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	f040 81c1 	bne.w	8002ff2 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002c70:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	f040 81bc 	bne.w	8002ff2 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002c82:	d10f      	bne.n	8002ca4 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6818      	ldr	r0, [r3, #0]
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	4619      	mov	r1, r3
 8002c90:	f7ff fd66 	bl	8002760 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f7ff fd20 	bl	80026e2 <LL_ADC_SetSamplingTimeCommonConfig>
 8002ca2:	e00e      	b.n	8002cc2 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6818      	ldr	r0, [r3, #0]
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	6819      	ldr	r1, [r3, #0]
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	f7ff fd55 	bl	8002760 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	2100      	movs	r1, #0
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7ff fd10 	bl	80026e2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	695a      	ldr	r2, [r3, #20]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	08db      	lsrs	r3, r3, #3
 8002cce:	f003 0303 	and.w	r3, r3, #3
 8002cd2:	005b      	lsls	r3, r3, #1
 8002cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	691b      	ldr	r3, [r3, #16]
 8002ce0:	2b04      	cmp	r3, #4
 8002ce2:	d00a      	beq.n	8002cfa <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6818      	ldr	r0, [r3, #0]
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	6919      	ldr	r1, [r3, #16]
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002cf4:	f7ff fca0 	bl	8002638 <LL_ADC_SetOffset>
 8002cf8:	e17b      	b.n	8002ff2 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	2100      	movs	r1, #0
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7ff fcbd 	bl	8002680 <LL_ADC_GetOffsetChannel>
 8002d06:	4603      	mov	r3, r0
 8002d08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d10a      	bne.n	8002d26 <HAL_ADC_ConfigChannel+0x17e>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2100      	movs	r1, #0
 8002d16:	4618      	mov	r0, r3
 8002d18:	f7ff fcb2 	bl	8002680 <LL_ADC_GetOffsetChannel>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	0e9b      	lsrs	r3, r3, #26
 8002d20:	f003 021f 	and.w	r2, r3, #31
 8002d24:	e01e      	b.n	8002d64 <HAL_ADC_ConfigChannel+0x1bc>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2100      	movs	r1, #0
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7ff fca7 	bl	8002680 <LL_ADC_GetOffsetChannel>
 8002d32:	4603      	mov	r3, r0
 8002d34:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d38:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002d3c:	fa93 f3a3 	rbit	r3, r3
 8002d40:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002d44:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002d48:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002d4c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d101      	bne.n	8002d58 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8002d54:	2320      	movs	r3, #32
 8002d56:	e004      	b.n	8002d62 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8002d58:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002d5c:	fab3 f383 	clz	r3, r3
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d105      	bne.n	8002d7c <HAL_ADC_ConfigChannel+0x1d4>
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	0e9b      	lsrs	r3, r3, #26
 8002d76:	f003 031f 	and.w	r3, r3, #31
 8002d7a:	e018      	b.n	8002dae <HAL_ADC_ConfigChannel+0x206>
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d84:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002d88:	fa93 f3a3 	rbit	r3, r3
 8002d8c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002d90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002d98:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d101      	bne.n	8002da4 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8002da0:	2320      	movs	r3, #32
 8002da2:	e004      	b.n	8002dae <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8002da4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002da8:	fab3 f383 	clz	r3, r3
 8002dac:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d106      	bne.n	8002dc0 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2200      	movs	r2, #0
 8002db8:	2100      	movs	r1, #0
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7ff fc76 	bl	80026ac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2101      	movs	r1, #1
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7ff fc5a 	bl	8002680 <LL_ADC_GetOffsetChannel>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d10a      	bne.n	8002dec <HAL_ADC_ConfigChannel+0x244>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2101      	movs	r1, #1
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7ff fc4f 	bl	8002680 <LL_ADC_GetOffsetChannel>
 8002de2:	4603      	mov	r3, r0
 8002de4:	0e9b      	lsrs	r3, r3, #26
 8002de6:	f003 021f 	and.w	r2, r3, #31
 8002dea:	e01e      	b.n	8002e2a <HAL_ADC_ConfigChannel+0x282>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2101      	movs	r1, #1
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7ff fc44 	bl	8002680 <LL_ADC_GetOffsetChannel>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dfe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002e02:	fa93 f3a3 	rbit	r3, r3
 8002e06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002e0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002e0e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002e12:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d101      	bne.n	8002e1e <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8002e1a:	2320      	movs	r3, #32
 8002e1c:	e004      	b.n	8002e28 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8002e1e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002e22:	fab3 f383 	clz	r3, r3
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d105      	bne.n	8002e42 <HAL_ADC_ConfigChannel+0x29a>
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	0e9b      	lsrs	r3, r3, #26
 8002e3c:	f003 031f 	and.w	r3, r3, #31
 8002e40:	e018      	b.n	8002e74 <HAL_ADC_ConfigChannel+0x2cc>
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e4a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002e4e:	fa93 f3a3 	rbit	r3, r3
 8002e52:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002e56:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002e5a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002e5e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d101      	bne.n	8002e6a <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8002e66:	2320      	movs	r3, #32
 8002e68:	e004      	b.n	8002e74 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8002e6a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002e6e:	fab3 f383 	clz	r3, r3
 8002e72:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d106      	bne.n	8002e86 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	2101      	movs	r1, #1
 8002e80:	4618      	mov	r0, r3
 8002e82:	f7ff fc13 	bl	80026ac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2102      	movs	r1, #2
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7ff fbf7 	bl	8002680 <LL_ADC_GetOffsetChannel>
 8002e92:	4603      	mov	r3, r0
 8002e94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d10a      	bne.n	8002eb2 <HAL_ADC_ConfigChannel+0x30a>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2102      	movs	r1, #2
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7ff fbec 	bl	8002680 <LL_ADC_GetOffsetChannel>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	0e9b      	lsrs	r3, r3, #26
 8002eac:	f003 021f 	and.w	r2, r3, #31
 8002eb0:	e01e      	b.n	8002ef0 <HAL_ADC_ConfigChannel+0x348>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2102      	movs	r1, #2
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f7ff fbe1 	bl	8002680 <LL_ADC_GetOffsetChannel>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ec8:	fa93 f3a3 	rbit	r3, r3
 8002ecc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002ed0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002ed4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002ed8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d101      	bne.n	8002ee4 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8002ee0:	2320      	movs	r3, #32
 8002ee2:	e004      	b.n	8002eee <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8002ee4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002ee8:	fab3 f383 	clz	r3, r3
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d105      	bne.n	8002f08 <HAL_ADC_ConfigChannel+0x360>
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	0e9b      	lsrs	r3, r3, #26
 8002f02:	f003 031f 	and.w	r3, r3, #31
 8002f06:	e016      	b.n	8002f36 <HAL_ADC_ConfigChannel+0x38e>
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f10:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002f14:	fa93 f3a3 	rbit	r3, r3
 8002f18:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002f1a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002f1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002f20:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d101      	bne.n	8002f2c <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8002f28:	2320      	movs	r3, #32
 8002f2a:	e004      	b.n	8002f36 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8002f2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f30:	fab3 f383 	clz	r3, r3
 8002f34:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d106      	bne.n	8002f48 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	2102      	movs	r1, #2
 8002f42:	4618      	mov	r0, r3
 8002f44:	f7ff fbb2 	bl	80026ac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2103      	movs	r1, #3
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7ff fb96 	bl	8002680 <LL_ADC_GetOffsetChannel>
 8002f54:	4603      	mov	r3, r0
 8002f56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d10a      	bne.n	8002f74 <HAL_ADC_ConfigChannel+0x3cc>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	2103      	movs	r1, #3
 8002f64:	4618      	mov	r0, r3
 8002f66:	f7ff fb8b 	bl	8002680 <LL_ADC_GetOffsetChannel>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	0e9b      	lsrs	r3, r3, #26
 8002f6e:	f003 021f 	and.w	r2, r3, #31
 8002f72:	e017      	b.n	8002fa4 <HAL_ADC_ConfigChannel+0x3fc>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2103      	movs	r1, #3
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7ff fb80 	bl	8002680 <LL_ADC_GetOffsetChannel>
 8002f80:	4603      	mov	r3, r0
 8002f82:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f86:	fa93 f3a3 	rbit	r3, r3
 8002f8a:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002f8c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f8e:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002f90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d101      	bne.n	8002f9a <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8002f96:	2320      	movs	r3, #32
 8002f98:	e003      	b.n	8002fa2 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8002f9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f9c:	fab3 f383 	clz	r3, r3
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d105      	bne.n	8002fbc <HAL_ADC_ConfigChannel+0x414>
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	0e9b      	lsrs	r3, r3, #26
 8002fb6:	f003 031f 	and.w	r3, r3, #31
 8002fba:	e011      	b.n	8002fe0 <HAL_ADC_ConfigChannel+0x438>
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002fc4:	fa93 f3a3 	rbit	r3, r3
 8002fc8:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002fca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002fcc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002fce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d101      	bne.n	8002fd8 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8002fd4:	2320      	movs	r3, #32
 8002fd6:	e003      	b.n	8002fe0 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8002fd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fda:	fab3 f383 	clz	r3, r3
 8002fde:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d106      	bne.n	8002ff2 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	2103      	movs	r1, #3
 8002fec:	4618      	mov	r0, r3
 8002fee:	f7ff fb5d 	bl	80026ac <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f7ff fc50 	bl	800289c <LL_ADC_IsEnabled>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	f040 8140 	bne.w	8003284 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6818      	ldr	r0, [r3, #0]
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	6819      	ldr	r1, [r3, #0]
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	461a      	mov	r2, r3
 8003012:	f7ff fbd1 	bl	80027b8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	4a8f      	ldr	r2, [pc, #572]	; (8003258 <HAL_ADC_ConfigChannel+0x6b0>)
 800301c:	4293      	cmp	r3, r2
 800301e:	f040 8131 	bne.w	8003284 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800302e:	2b00      	cmp	r3, #0
 8003030:	d10b      	bne.n	800304a <HAL_ADC_ConfigChannel+0x4a2>
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	0e9b      	lsrs	r3, r3, #26
 8003038:	3301      	adds	r3, #1
 800303a:	f003 031f 	and.w	r3, r3, #31
 800303e:	2b09      	cmp	r3, #9
 8003040:	bf94      	ite	ls
 8003042:	2301      	movls	r3, #1
 8003044:	2300      	movhi	r3, #0
 8003046:	b2db      	uxtb	r3, r3
 8003048:	e019      	b.n	800307e <HAL_ADC_ConfigChannel+0x4d6>
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003050:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003052:	fa93 f3a3 	rbit	r3, r3
 8003056:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003058:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800305a:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800305c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800305e:	2b00      	cmp	r3, #0
 8003060:	d101      	bne.n	8003066 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8003062:	2320      	movs	r3, #32
 8003064:	e003      	b.n	800306e <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8003066:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003068:	fab3 f383 	clz	r3, r3
 800306c:	b2db      	uxtb	r3, r3
 800306e:	3301      	adds	r3, #1
 8003070:	f003 031f 	and.w	r3, r3, #31
 8003074:	2b09      	cmp	r3, #9
 8003076:	bf94      	ite	ls
 8003078:	2301      	movls	r3, #1
 800307a:	2300      	movhi	r3, #0
 800307c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800307e:	2b00      	cmp	r3, #0
 8003080:	d079      	beq.n	8003176 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800308a:	2b00      	cmp	r3, #0
 800308c:	d107      	bne.n	800309e <HAL_ADC_ConfigChannel+0x4f6>
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	0e9b      	lsrs	r3, r3, #26
 8003094:	3301      	adds	r3, #1
 8003096:	069b      	lsls	r3, r3, #26
 8003098:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800309c:	e015      	b.n	80030ca <HAL_ADC_ConfigChannel+0x522>
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030a6:	fa93 f3a3 	rbit	r3, r3
 80030aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80030ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030ae:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80030b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d101      	bne.n	80030ba <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 80030b6:	2320      	movs	r3, #32
 80030b8:	e003      	b.n	80030c2 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 80030ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030bc:	fab3 f383 	clz	r3, r3
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	3301      	adds	r3, #1
 80030c4:	069b      	lsls	r3, r3, #26
 80030c6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d109      	bne.n	80030ea <HAL_ADC_ConfigChannel+0x542>
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	0e9b      	lsrs	r3, r3, #26
 80030dc:	3301      	adds	r3, #1
 80030de:	f003 031f 	and.w	r3, r3, #31
 80030e2:	2101      	movs	r1, #1
 80030e4:	fa01 f303 	lsl.w	r3, r1, r3
 80030e8:	e017      	b.n	800311a <HAL_ADC_ConfigChannel+0x572>
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030f2:	fa93 f3a3 	rbit	r3, r3
 80030f6:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80030f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030fa:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80030fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d101      	bne.n	8003106 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8003102:	2320      	movs	r3, #32
 8003104:	e003      	b.n	800310e <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8003106:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003108:	fab3 f383 	clz	r3, r3
 800310c:	b2db      	uxtb	r3, r3
 800310e:	3301      	adds	r3, #1
 8003110:	f003 031f 	and.w	r3, r3, #31
 8003114:	2101      	movs	r1, #1
 8003116:	fa01 f303 	lsl.w	r3, r1, r3
 800311a:	ea42 0103 	orr.w	r1, r2, r3
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003126:	2b00      	cmp	r3, #0
 8003128:	d10a      	bne.n	8003140 <HAL_ADC_ConfigChannel+0x598>
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	0e9b      	lsrs	r3, r3, #26
 8003130:	3301      	adds	r3, #1
 8003132:	f003 021f 	and.w	r2, r3, #31
 8003136:	4613      	mov	r3, r2
 8003138:	005b      	lsls	r3, r3, #1
 800313a:	4413      	add	r3, r2
 800313c:	051b      	lsls	r3, r3, #20
 800313e:	e018      	b.n	8003172 <HAL_ADC_ConfigChannel+0x5ca>
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003148:	fa93 f3a3 	rbit	r3, r3
 800314c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800314e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003150:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003152:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003154:	2b00      	cmp	r3, #0
 8003156:	d101      	bne.n	800315c <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8003158:	2320      	movs	r3, #32
 800315a:	e003      	b.n	8003164 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 800315c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800315e:	fab3 f383 	clz	r3, r3
 8003162:	b2db      	uxtb	r3, r3
 8003164:	3301      	adds	r3, #1
 8003166:	f003 021f 	and.w	r2, r3, #31
 800316a:	4613      	mov	r3, r2
 800316c:	005b      	lsls	r3, r3, #1
 800316e:	4413      	add	r3, r2
 8003170:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003172:	430b      	orrs	r3, r1
 8003174:	e081      	b.n	800327a <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800317e:	2b00      	cmp	r3, #0
 8003180:	d107      	bne.n	8003192 <HAL_ADC_ConfigChannel+0x5ea>
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	0e9b      	lsrs	r3, r3, #26
 8003188:	3301      	adds	r3, #1
 800318a:	069b      	lsls	r3, r3, #26
 800318c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003190:	e015      	b.n	80031be <HAL_ADC_ConfigChannel+0x616>
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800319a:	fa93 f3a3 	rbit	r3, r3
 800319e:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80031a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031a2:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80031a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d101      	bne.n	80031ae <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 80031aa:	2320      	movs	r3, #32
 80031ac:	e003      	b.n	80031b6 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 80031ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b0:	fab3 f383 	clz	r3, r3
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	3301      	adds	r3, #1
 80031b8:	069b      	lsls	r3, r3, #26
 80031ba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d109      	bne.n	80031de <HAL_ADC_ConfigChannel+0x636>
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	0e9b      	lsrs	r3, r3, #26
 80031d0:	3301      	adds	r3, #1
 80031d2:	f003 031f 	and.w	r3, r3, #31
 80031d6:	2101      	movs	r1, #1
 80031d8:	fa01 f303 	lsl.w	r3, r1, r3
 80031dc:	e017      	b.n	800320e <HAL_ADC_ConfigChannel+0x666>
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e4:	6a3b      	ldr	r3, [r7, #32]
 80031e6:	fa93 f3a3 	rbit	r3, r3
 80031ea:	61fb      	str	r3, [r7, #28]
  return result;
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80031f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d101      	bne.n	80031fa <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 80031f6:	2320      	movs	r3, #32
 80031f8:	e003      	b.n	8003202 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 80031fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fc:	fab3 f383 	clz	r3, r3
 8003200:	b2db      	uxtb	r3, r3
 8003202:	3301      	adds	r3, #1
 8003204:	f003 031f 	and.w	r3, r3, #31
 8003208:	2101      	movs	r1, #1
 800320a:	fa01 f303 	lsl.w	r3, r1, r3
 800320e:	ea42 0103 	orr.w	r1, r2, r3
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800321a:	2b00      	cmp	r3, #0
 800321c:	d10d      	bne.n	800323a <HAL_ADC_ConfigChannel+0x692>
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	0e9b      	lsrs	r3, r3, #26
 8003224:	3301      	adds	r3, #1
 8003226:	f003 021f 	and.w	r2, r3, #31
 800322a:	4613      	mov	r3, r2
 800322c:	005b      	lsls	r3, r3, #1
 800322e:	4413      	add	r3, r2
 8003230:	3b1e      	subs	r3, #30
 8003232:	051b      	lsls	r3, r3, #20
 8003234:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003238:	e01e      	b.n	8003278 <HAL_ADC_ConfigChannel+0x6d0>
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	fa93 f3a3 	rbit	r3, r3
 8003246:	613b      	str	r3, [r7, #16]
  return result;
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800324c:	69bb      	ldr	r3, [r7, #24]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d104      	bne.n	800325c <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8003252:	2320      	movs	r3, #32
 8003254:	e006      	b.n	8003264 <HAL_ADC_ConfigChannel+0x6bc>
 8003256:	bf00      	nop
 8003258:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800325c:	69bb      	ldr	r3, [r7, #24]
 800325e:	fab3 f383 	clz	r3, r3
 8003262:	b2db      	uxtb	r3, r3
 8003264:	3301      	adds	r3, #1
 8003266:	f003 021f 	and.w	r2, r3, #31
 800326a:	4613      	mov	r3, r2
 800326c:	005b      	lsls	r3, r3, #1
 800326e:	4413      	add	r3, r2
 8003270:	3b1e      	subs	r3, #30
 8003272:	051b      	lsls	r3, r3, #20
 8003274:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003278:	430b      	orrs	r3, r1
 800327a:	683a      	ldr	r2, [r7, #0]
 800327c:	6892      	ldr	r2, [r2, #8]
 800327e:	4619      	mov	r1, r3
 8003280:	f7ff fa6e 	bl	8002760 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	4b3d      	ldr	r3, [pc, #244]	; (8003380 <HAL_ADC_ConfigChannel+0x7d8>)
 800328a:	4013      	ands	r3, r2
 800328c:	2b00      	cmp	r3, #0
 800328e:	d06c      	beq.n	800336a <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003290:	483c      	ldr	r0, [pc, #240]	; (8003384 <HAL_ADC_ConfigChannel+0x7dc>)
 8003292:	f7ff f9c3 	bl	800261c <LL_ADC_GetCommonPathInternalCh>
 8003296:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a3a      	ldr	r2, [pc, #232]	; (8003388 <HAL_ADC_ConfigChannel+0x7e0>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d127      	bne.n	80032f4 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80032a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80032a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d121      	bne.n	80032f4 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a35      	ldr	r2, [pc, #212]	; (800338c <HAL_ADC_ConfigChannel+0x7e4>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d157      	bne.n	800336a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80032ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80032be:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80032c2:	4619      	mov	r1, r3
 80032c4:	482f      	ldr	r0, [pc, #188]	; (8003384 <HAL_ADC_ConfigChannel+0x7dc>)
 80032c6:	f7ff f996 	bl	80025f6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80032ca:	4b31      	ldr	r3, [pc, #196]	; (8003390 <HAL_ADC_ConfigChannel+0x7e8>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	099b      	lsrs	r3, r3, #6
 80032d0:	4a30      	ldr	r2, [pc, #192]	; (8003394 <HAL_ADC_ConfigChannel+0x7ec>)
 80032d2:	fba2 2303 	umull	r2, r3, r2, r3
 80032d6:	099b      	lsrs	r3, r3, #6
 80032d8:	1c5a      	adds	r2, r3, #1
 80032da:	4613      	mov	r3, r2
 80032dc:	005b      	lsls	r3, r3, #1
 80032de:	4413      	add	r3, r2
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80032e4:	e002      	b.n	80032ec <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	3b01      	subs	r3, #1
 80032ea:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d1f9      	bne.n	80032e6 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80032f2:	e03a      	b.n	800336a <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a27      	ldr	r2, [pc, #156]	; (8003398 <HAL_ADC_ConfigChannel+0x7f0>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d113      	bne.n	8003326 <HAL_ADC_ConfigChannel+0x77e>
 80032fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003302:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d10d      	bne.n	8003326 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a1f      	ldr	r2, [pc, #124]	; (800338c <HAL_ADC_ConfigChannel+0x7e4>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d12a      	bne.n	800336a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003314:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003318:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800331c:	4619      	mov	r1, r3
 800331e:	4819      	ldr	r0, [pc, #100]	; (8003384 <HAL_ADC_ConfigChannel+0x7dc>)
 8003320:	f7ff f969 	bl	80025f6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003324:	e021      	b.n	800336a <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a1c      	ldr	r2, [pc, #112]	; (800339c <HAL_ADC_ConfigChannel+0x7f4>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d11c      	bne.n	800336a <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003330:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003334:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003338:	2b00      	cmp	r3, #0
 800333a:	d116      	bne.n	800336a <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a12      	ldr	r2, [pc, #72]	; (800338c <HAL_ADC_ConfigChannel+0x7e4>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d111      	bne.n	800336a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003346:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800334a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800334e:	4619      	mov	r1, r3
 8003350:	480c      	ldr	r0, [pc, #48]	; (8003384 <HAL_ADC_ConfigChannel+0x7dc>)
 8003352:	f7ff f950 	bl	80025f6 <LL_ADC_SetCommonPathInternalCh>
 8003356:	e008      	b.n	800336a <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800335c:	f043 0220 	orr.w	r2, r3, #32
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8003372:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003376:	4618      	mov	r0, r3
 8003378:	37d8      	adds	r7, #216	; 0xd8
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	80080000 	.word	0x80080000
 8003384:	50040300 	.word	0x50040300
 8003388:	c7520000 	.word	0xc7520000
 800338c:	50040000 	.word	0x50040000
 8003390:	20000000 	.word	0x20000000
 8003394:	053e2d63 	.word	0x053e2d63
 8003398:	cb840000 	.word	0xcb840000
 800339c:	80000001 	.word	0x80000001

080033a0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d101      	bne.n	80033b2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e0ed      	b.n	800358e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d102      	bne.n	80033c4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f7fe faa2 	bl	8001908 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f042 0201 	orr.w	r2, r2, #1
 80033d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80033d4:	f7ff f8f0 	bl	80025b8 <HAL_GetTick>
 80033d8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80033da:	e012      	b.n	8003402 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80033dc:	f7ff f8ec 	bl	80025b8 <HAL_GetTick>
 80033e0:	4602      	mov	r2, r0
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	2b0a      	cmp	r3, #10
 80033e8:	d90b      	bls.n	8003402 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ee:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2205      	movs	r2, #5
 80033fa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e0c5      	b.n	800358e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f003 0301 	and.w	r3, r3, #1
 800340c:	2b00      	cmp	r3, #0
 800340e:	d0e5      	beq.n	80033dc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f022 0202 	bic.w	r2, r2, #2
 800341e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003420:	f7ff f8ca 	bl	80025b8 <HAL_GetTick>
 8003424:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003426:	e012      	b.n	800344e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003428:	f7ff f8c6 	bl	80025b8 <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	2b0a      	cmp	r3, #10
 8003434:	d90b      	bls.n	800344e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2205      	movs	r2, #5
 8003446:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e09f      	b.n	800358e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f003 0302 	and.w	r3, r3, #2
 8003458:	2b00      	cmp	r3, #0
 800345a:	d1e5      	bne.n	8003428 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	7e1b      	ldrb	r3, [r3, #24]
 8003460:	2b01      	cmp	r3, #1
 8003462:	d108      	bne.n	8003476 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003472:	601a      	str	r2, [r3, #0]
 8003474:	e007      	b.n	8003486 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003484:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	7e5b      	ldrb	r3, [r3, #25]
 800348a:	2b01      	cmp	r3, #1
 800348c:	d108      	bne.n	80034a0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800349c:	601a      	str	r2, [r3, #0]
 800349e:	e007      	b.n	80034b0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034ae:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	7e9b      	ldrb	r3, [r3, #26]
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d108      	bne.n	80034ca <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f042 0220 	orr.w	r2, r2, #32
 80034c6:	601a      	str	r2, [r3, #0]
 80034c8:	e007      	b.n	80034da <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f022 0220 	bic.w	r2, r2, #32
 80034d8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	7edb      	ldrb	r3, [r3, #27]
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d108      	bne.n	80034f4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f022 0210 	bic.w	r2, r2, #16
 80034f0:	601a      	str	r2, [r3, #0]
 80034f2:	e007      	b.n	8003504 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f042 0210 	orr.w	r2, r2, #16
 8003502:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	7f1b      	ldrb	r3, [r3, #28]
 8003508:	2b01      	cmp	r3, #1
 800350a:	d108      	bne.n	800351e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f042 0208 	orr.w	r2, r2, #8
 800351a:	601a      	str	r2, [r3, #0]
 800351c:	e007      	b.n	800352e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f022 0208 	bic.w	r2, r2, #8
 800352c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	7f5b      	ldrb	r3, [r3, #29]
 8003532:	2b01      	cmp	r3, #1
 8003534:	d108      	bne.n	8003548 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f042 0204 	orr.w	r2, r2, #4
 8003544:	601a      	str	r2, [r3, #0]
 8003546:	e007      	b.n	8003558 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f022 0204 	bic.w	r2, r2, #4
 8003556:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	689a      	ldr	r2, [r3, #8]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	431a      	orrs	r2, r3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	431a      	orrs	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	695b      	ldr	r3, [r3, #20]
 800356c:	ea42 0103 	orr.w	r1, r2, r3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	1e5a      	subs	r2, r3, #1
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	430a      	orrs	r2, r1
 800357c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800358c:	2300      	movs	r3, #0
}
 800358e:	4618      	mov	r0, r3
 8003590:	3710      	adds	r7, #16
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
	...

08003598 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80035a0:	4b05      	ldr	r3, [pc, #20]	; (80035b8 <LL_EXTI_EnableIT_0_31+0x20>)
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	4904      	ldr	r1, [pc, #16]	; (80035b8 <LL_EXTI_EnableIT_0_31+0x20>)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	600b      	str	r3, [r1, #0]
}
 80035ac:	bf00      	nop
 80035ae:	370c      	adds	r7, #12
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr
 80035b8:	40010400 	.word	0x40010400

080035bc <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80035c4:	4b06      	ldr	r3, [pc, #24]	; (80035e0 <LL_EXTI_DisableIT_0_31+0x24>)
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	43db      	mvns	r3, r3
 80035cc:	4904      	ldr	r1, [pc, #16]	; (80035e0 <LL_EXTI_DisableIT_0_31+0x24>)
 80035ce:	4013      	ands	r3, r2
 80035d0:	600b      	str	r3, [r1, #0]
}
 80035d2:	bf00      	nop
 80035d4:	370c      	adds	r7, #12
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr
 80035de:	bf00      	nop
 80035e0:	40010400 	.word	0x40010400

080035e4 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 80035ec:	4b05      	ldr	r3, [pc, #20]	; (8003604 <LL_EXTI_EnableEvent_0_31+0x20>)
 80035ee:	685a      	ldr	r2, [r3, #4]
 80035f0:	4904      	ldr	r1, [pc, #16]	; (8003604 <LL_EXTI_EnableEvent_0_31+0x20>)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	604b      	str	r3, [r1, #4]

}
 80035f8:	bf00      	nop
 80035fa:	370c      	adds	r7, #12
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr
 8003604:	40010400 	.word	0x40010400

08003608 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8003608:	b480      	push	{r7}
 800360a:	b083      	sub	sp, #12
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8003610:	4b06      	ldr	r3, [pc, #24]	; (800362c <LL_EXTI_DisableEvent_0_31+0x24>)
 8003612:	685a      	ldr	r2, [r3, #4]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	43db      	mvns	r3, r3
 8003618:	4904      	ldr	r1, [pc, #16]	; (800362c <LL_EXTI_DisableEvent_0_31+0x24>)
 800361a:	4013      	ands	r3, r2
 800361c:	604b      	str	r3, [r1, #4]
}
 800361e:	bf00      	nop
 8003620:	370c      	adds	r7, #12
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop
 800362c:	40010400 	.word	0x40010400

08003630 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8003638:	4b05      	ldr	r3, [pc, #20]	; (8003650 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800363a:	689a      	ldr	r2, [r3, #8]
 800363c:	4904      	ldr	r1, [pc, #16]	; (8003650 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4313      	orrs	r3, r2
 8003642:	608b      	str	r3, [r1, #8]

}
 8003644:	bf00      	nop
 8003646:	370c      	adds	r7, #12
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr
 8003650:	40010400 	.word	0x40010400

08003654 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800365c:	4b06      	ldr	r3, [pc, #24]	; (8003678 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800365e:	689a      	ldr	r2, [r3, #8]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	43db      	mvns	r3, r3
 8003664:	4904      	ldr	r1, [pc, #16]	; (8003678 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8003666:	4013      	ands	r3, r2
 8003668:	608b      	str	r3, [r1, #8]

}
 800366a:	bf00      	nop
 800366c:	370c      	adds	r7, #12
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr
 8003676:	bf00      	nop
 8003678:	40010400 	.word	0x40010400

0800367c <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8003684:	4b05      	ldr	r3, [pc, #20]	; (800369c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8003686:	68da      	ldr	r2, [r3, #12]
 8003688:	4904      	ldr	r1, [pc, #16]	; (800369c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4313      	orrs	r3, r2
 800368e:	60cb      	str	r3, [r1, #12]
}
 8003690:	bf00      	nop
 8003692:	370c      	adds	r7, #12
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr
 800369c:	40010400 	.word	0x40010400

080036a0 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80036a8:	4b06      	ldr	r3, [pc, #24]	; (80036c4 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80036aa:	68da      	ldr	r2, [r3, #12]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	43db      	mvns	r3, r3
 80036b0:	4904      	ldr	r1, [pc, #16]	; (80036c4 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80036b2:	4013      	ands	r3, r2
 80036b4:	60cb      	str	r3, [r1, #12]
}
 80036b6:	bf00      	nop
 80036b8:	370c      	adds	r7, #12
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr
 80036c2:	bf00      	nop
 80036c4:	40010400 	.word	0x40010400

080036c8 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 80036d0:	4a04      	ldr	r2, [pc, #16]	; (80036e4 <LL_EXTI_ClearFlag_0_31+0x1c>)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6153      	str	r3, [r2, #20]
}
 80036d6:	bf00      	nop
 80036d8:	370c      	adds	r7, #12
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr
 80036e2:	bf00      	nop
 80036e4:	40010400 	.word	0x40010400

080036e8 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b088      	sub	sp, #32
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 80036f0:	2300      	movs	r3, #0
 80036f2:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80036f4:	2300      	movs	r3, #0
 80036f6:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d102      	bne.n	8003704 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	77fb      	strb	r3, [r7, #31]
 8003702:	e0d1      	b.n	80038a8 <HAL_COMP_Init+0x1c0>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800370e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003712:	d102      	bne.n	800371a <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	77fb      	strb	r3, [r7, #31]
 8003718:	e0c6      	b.n	80038a8 <HAL_COMP_Init+0x1c0>
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));
#if defined(COMP2)
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));
#endif

    if(hcomp->State == HAL_COMP_STATE_RESET)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003720:	b2db      	uxtb	r3, r3
 8003722:	2b00      	cmp	r3, #0
 8003724:	d115      	bne.n	8003752 <HAL_COMP_Init+0x6a>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	629a      	str	r2, [r3, #40]	; 0x28
      /*       COMP clock enable must be implemented by user                  */
      /*       in "HAL_COMP_MspInit()".                                       */
      /*       Therefore, for compatibility anticipation, it is recommended   */
      /*       to implement __HAL_RCC_SYSCFG_CLK_ENABLE()                     */
      /*       in "HAL_COMP_MspInit()".                                       */
      __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003734:	4b5f      	ldr	r3, [pc, #380]	; (80038b4 <HAL_COMP_Init+0x1cc>)
 8003736:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003738:	4a5e      	ldr	r2, [pc, #376]	; (80038b4 <HAL_COMP_Init+0x1cc>)
 800373a:	f043 0301 	orr.w	r3, r3, #1
 800373e:	6613      	str	r3, [r2, #96]	; 0x60
 8003740:	4b5c      	ldr	r3, [pc, #368]	; (80038b4 <HAL_COMP_Init+0x1cc>)
 8003742:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003744:	f003 0301 	and.w	r3, r3, #1
 8003748:	60bb      	str	r3, [r7, #8]
 800374a:	68bb      	ldr	r3, [r7, #8]

      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
      /* Init the low level hardware */
      HAL_COMP_MspInit(hcomp);
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f7fe f91f 	bl	8001990 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800375c:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.NonInvertingInput
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	68da      	ldr	r2, [r3, #12]
               | hcomp->Init.InvertingInput
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	691b      	ldr	r3, [r3, #16]
 8003766:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	69db      	ldr	r3, [r3, #28]
 800376c:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	695b      	ldr	r3, [r3, #20]
 8003772:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	699b      	ldr	r3, [r3, #24]
 8003778:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (  hcomp->Init.NonInvertingInput
 800377e:	4313      	orrs	r3, r2
 8003780:	617b      	str	r3, [r7, #20]
               COMP_CSR_BLANKING | COMP_CSR_BRGEN    | COMP_CSR_SCALEN  | COMP_CSR_INMESEL,
               tmp_csr
              );
#endif /* COMP_CSR_WINMODE */
#else
    MODIFY_REG(hcomp->Instance->CSR,
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	4b4b      	ldr	r3, [pc, #300]	; (80038b8 <HAL_COMP_Init+0x1d0>)
 800378a:	4013      	ands	r3, r2
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	6812      	ldr	r2, [r2, #0]
 8003790:	6979      	ldr	r1, [r7, #20]
 8003792:	430b      	orrs	r3, r1
 8003794:	6013      	str	r3, [r2, #0]
#if defined(COMP2)
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800379e:	d106      	bne.n	80037ae <HAL_COMP_Init+0xc6>
    {
      SET_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 80037a0:	4b46      	ldr	r3, [pc, #280]	; (80038bc <HAL_COMP_Init+0x1d4>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a45      	ldr	r2, [pc, #276]	; (80038bc <HAL_COMP_Init+0x1d4>)
 80037a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037aa:	6013      	str	r3, [r2, #0]
 80037ac:	e005      	b.n	80037ba <HAL_COMP_Init+0xd2>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 80037ae:	4b43      	ldr	r3, [pc, #268]	; (80038bc <HAL_COMP_Init+0x1d4>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a42      	ldr	r2, [pc, #264]	; (80038bc <HAL_COMP_Init+0x1d4>)
 80037b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80037b8:	6013      	str	r3, [r2, #0]
    }
#endif /* COMP2 */

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d016      	beq.n	80037f6 <HAL_COMP_Init+0x10e>
 80037c8:	69bb      	ldr	r3, [r7, #24]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d113      	bne.n	80037f6 <HAL_COMP_Init+0x10e>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80037ce:	4b3c      	ldr	r3, [pc, #240]	; (80038c0 <HAL_COMP_Init+0x1d8>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	099b      	lsrs	r3, r3, #6
 80037d4:	4a3b      	ldr	r2, [pc, #236]	; (80038c4 <HAL_COMP_Init+0x1dc>)
 80037d6:	fba2 2303 	umull	r2, r3, r2, r3
 80037da:	099b      	lsrs	r3, r3, #6
 80037dc:	1c5a      	adds	r2, r3, #1
 80037de:	4613      	mov	r3, r2
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	4413      	add	r3, r2
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 80037e8:	e002      	b.n	80037f0 <HAL_COMP_Init+0x108>
      {
        wait_loop_index--;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	3b01      	subs	r3, #1
 80037ee:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d1f9      	bne.n	80037ea <HAL_COMP_Init+0x102>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a33      	ldr	r2, [pc, #204]	; (80038c8 <HAL_COMP_Init+0x1e0>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d102      	bne.n	8003806 <HAL_COMP_Init+0x11e>
 8003800:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003804:	e001      	b.n	800380a <HAL_COMP_Init+0x122>
 8003806:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800380a:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6a1b      	ldr	r3, [r3, #32]
 8003810:	f003 0303 	and.w	r3, r3, #3
 8003814:	2b00      	cmp	r3, #0
 8003816:	d037      	beq.n	8003888 <HAL_COMP_Init+0x1a0>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6a1b      	ldr	r3, [r3, #32]
 800381c:	f003 0310 	and.w	r3, r3, #16
 8003820:	2b00      	cmp	r3, #0
 8003822:	d003      	beq.n	800382c <HAL_COMP_Init+0x144>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8003824:	6938      	ldr	r0, [r7, #16]
 8003826:	f7ff ff03 	bl	8003630 <LL_EXTI_EnableRisingTrig_0_31>
 800382a:	e002      	b.n	8003832 <HAL_COMP_Init+0x14a>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 800382c:	6938      	ldr	r0, [r7, #16]
 800382e:	f7ff ff11 	bl	8003654 <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a1b      	ldr	r3, [r3, #32]
 8003836:	f003 0320 	and.w	r3, r3, #32
 800383a:	2b00      	cmp	r3, #0
 800383c:	d003      	beq.n	8003846 <HAL_COMP_Init+0x15e>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 800383e:	6938      	ldr	r0, [r7, #16]
 8003840:	f7ff ff1c 	bl	800367c <LL_EXTI_EnableFallingTrig_0_31>
 8003844:	e002      	b.n	800384c <HAL_COMP_Init+0x164>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8003846:	6938      	ldr	r0, [r7, #16]
 8003848:	f7ff ff2a 	bl	80036a0 <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearFlag_0_31(exti_line);
 800384c:	6938      	ldr	r0, [r7, #16]
 800384e:	f7ff ff3b 	bl	80036c8 <LL_EXTI_ClearFlag_0_31>

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a1b      	ldr	r3, [r3, #32]
 8003856:	f003 0302 	and.w	r3, r3, #2
 800385a:	2b00      	cmp	r3, #0
 800385c:	d003      	beq.n	8003866 <HAL_COMP_Init+0x17e>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 800385e:	6938      	ldr	r0, [r7, #16]
 8003860:	f7ff fec0 	bl	80035e4 <LL_EXTI_EnableEvent_0_31>
 8003864:	e002      	b.n	800386c <HAL_COMP_Init+0x184>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8003866:	6938      	ldr	r0, [r7, #16]
 8003868:	f7ff fece 	bl	8003608 <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6a1b      	ldr	r3, [r3, #32]
 8003870:	f003 0301 	and.w	r3, r3, #1
 8003874:	2b00      	cmp	r3, #0
 8003876:	d003      	beq.n	8003880 <HAL_COMP_Init+0x198>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 8003878:	6938      	ldr	r0, [r7, #16]
 800387a:	f7ff fe8d 	bl	8003598 <LL_EXTI_EnableIT_0_31>
 800387e:	e009      	b.n	8003894 <HAL_COMP_Init+0x1ac>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8003880:	6938      	ldr	r0, [r7, #16]
 8003882:	f7ff fe9b 	bl	80035bc <LL_EXTI_DisableIT_0_31>
 8003886:	e005      	b.n	8003894 <HAL_COMP_Init+0x1ac>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 8003888:	6938      	ldr	r0, [r7, #16]
 800388a:	f7ff febd 	bl	8003608 <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 800388e:	6938      	ldr	r0, [r7, #16]
 8003890:	f7ff fe94 	bl	80035bc <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800389a:	b2db      	uxtb	r3, r3
 800389c:	2b00      	cmp	r3, #0
 800389e:	d103      	bne.n	80038a8 <HAL_COMP_Init+0x1c0>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 80038a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3720      	adds	r7, #32
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	40021000 	.word	0x40021000
 80038b8:	ff207d03 	.word	0xff207d03
 80038bc:	40010204 	.word	0x40010204
 80038c0:	20000000 	.word	0x20000000
 80038c4:	053e2d63 	.word	0x053e2d63
 80038c8:	40010200 	.word	0x40010200

080038cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b085      	sub	sp, #20
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f003 0307 	and.w	r3, r3, #7
 80038da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038dc:	4b0c      	ldr	r3, [pc, #48]	; (8003910 <__NVIC_SetPriorityGrouping+0x44>)
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038e2:	68ba      	ldr	r2, [r7, #8]
 80038e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80038e8:	4013      	ands	r3, r2
 80038ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80038f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038fe:	4a04      	ldr	r2, [pc, #16]	; (8003910 <__NVIC_SetPriorityGrouping+0x44>)
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	60d3      	str	r3, [r2, #12]
}
 8003904:	bf00      	nop
 8003906:	3714      	adds	r7, #20
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr
 8003910:	e000ed00 	.word	0xe000ed00

08003914 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003914:	b480      	push	{r7}
 8003916:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003918:	4b04      	ldr	r3, [pc, #16]	; (800392c <__NVIC_GetPriorityGrouping+0x18>)
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	0a1b      	lsrs	r3, r3, #8
 800391e:	f003 0307 	and.w	r3, r3, #7
}
 8003922:	4618      	mov	r0, r3
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr
 800392c:	e000ed00 	.word	0xe000ed00

08003930 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	4603      	mov	r3, r0
 8003938:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800393a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800393e:	2b00      	cmp	r3, #0
 8003940:	db0b      	blt.n	800395a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003942:	79fb      	ldrb	r3, [r7, #7]
 8003944:	f003 021f 	and.w	r2, r3, #31
 8003948:	4907      	ldr	r1, [pc, #28]	; (8003968 <__NVIC_EnableIRQ+0x38>)
 800394a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800394e:	095b      	lsrs	r3, r3, #5
 8003950:	2001      	movs	r0, #1
 8003952:	fa00 f202 	lsl.w	r2, r0, r2
 8003956:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800395a:	bf00      	nop
 800395c:	370c      	adds	r7, #12
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr
 8003966:	bf00      	nop
 8003968:	e000e100 	.word	0xe000e100

0800396c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	4603      	mov	r3, r0
 8003974:	6039      	str	r1, [r7, #0]
 8003976:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003978:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800397c:	2b00      	cmp	r3, #0
 800397e:	db0a      	blt.n	8003996 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	b2da      	uxtb	r2, r3
 8003984:	490c      	ldr	r1, [pc, #48]	; (80039b8 <__NVIC_SetPriority+0x4c>)
 8003986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800398a:	0112      	lsls	r2, r2, #4
 800398c:	b2d2      	uxtb	r2, r2
 800398e:	440b      	add	r3, r1
 8003990:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003994:	e00a      	b.n	80039ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	b2da      	uxtb	r2, r3
 800399a:	4908      	ldr	r1, [pc, #32]	; (80039bc <__NVIC_SetPriority+0x50>)
 800399c:	79fb      	ldrb	r3, [r7, #7]
 800399e:	f003 030f 	and.w	r3, r3, #15
 80039a2:	3b04      	subs	r3, #4
 80039a4:	0112      	lsls	r2, r2, #4
 80039a6:	b2d2      	uxtb	r2, r2
 80039a8:	440b      	add	r3, r1
 80039aa:	761a      	strb	r2, [r3, #24]
}
 80039ac:	bf00      	nop
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr
 80039b8:	e000e100 	.word	0xe000e100
 80039bc:	e000ed00 	.word	0xe000ed00

080039c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b089      	sub	sp, #36	; 0x24
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	60b9      	str	r1, [r7, #8]
 80039ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f003 0307 	and.w	r3, r3, #7
 80039d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	f1c3 0307 	rsb	r3, r3, #7
 80039da:	2b04      	cmp	r3, #4
 80039dc:	bf28      	it	cs
 80039de:	2304      	movcs	r3, #4
 80039e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	3304      	adds	r3, #4
 80039e6:	2b06      	cmp	r3, #6
 80039e8:	d902      	bls.n	80039f0 <NVIC_EncodePriority+0x30>
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	3b03      	subs	r3, #3
 80039ee:	e000      	b.n	80039f2 <NVIC_EncodePriority+0x32>
 80039f0:	2300      	movs	r3, #0
 80039f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039f4:	f04f 32ff 	mov.w	r2, #4294967295
 80039f8:	69bb      	ldr	r3, [r7, #24]
 80039fa:	fa02 f303 	lsl.w	r3, r2, r3
 80039fe:	43da      	mvns	r2, r3
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	401a      	ands	r2, r3
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a08:	f04f 31ff 	mov.w	r1, #4294967295
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a12:	43d9      	mvns	r1, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a18:	4313      	orrs	r3, r2
         );
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3724      	adds	r7, #36	; 0x24
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr
	...

08003a28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b082      	sub	sp, #8
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	3b01      	subs	r3, #1
 8003a34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a38:	d301      	bcc.n	8003a3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e00f      	b.n	8003a5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a3e:	4a0a      	ldr	r2, [pc, #40]	; (8003a68 <SysTick_Config+0x40>)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	3b01      	subs	r3, #1
 8003a44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a46:	210f      	movs	r1, #15
 8003a48:	f04f 30ff 	mov.w	r0, #4294967295
 8003a4c:	f7ff ff8e 	bl	800396c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a50:	4b05      	ldr	r3, [pc, #20]	; (8003a68 <SysTick_Config+0x40>)
 8003a52:	2200      	movs	r2, #0
 8003a54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a56:	4b04      	ldr	r3, [pc, #16]	; (8003a68 <SysTick_Config+0x40>)
 8003a58:	2207      	movs	r2, #7
 8003a5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a5c:	2300      	movs	r3, #0
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3708      	adds	r7, #8
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	e000e010 	.word	0xe000e010

08003a6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f7ff ff29 	bl	80038cc <__NVIC_SetPriorityGrouping>
}
 8003a7a:	bf00      	nop
 8003a7c:	3708      	adds	r7, #8
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}

08003a82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a82:	b580      	push	{r7, lr}
 8003a84:	b086      	sub	sp, #24
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	4603      	mov	r3, r0
 8003a8a:	60b9      	str	r1, [r7, #8]
 8003a8c:	607a      	str	r2, [r7, #4]
 8003a8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003a90:	2300      	movs	r3, #0
 8003a92:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003a94:	f7ff ff3e 	bl	8003914 <__NVIC_GetPriorityGrouping>
 8003a98:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	68b9      	ldr	r1, [r7, #8]
 8003a9e:	6978      	ldr	r0, [r7, #20]
 8003aa0:	f7ff ff8e 	bl	80039c0 <NVIC_EncodePriority>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003aaa:	4611      	mov	r1, r2
 8003aac:	4618      	mov	r0, r3
 8003aae:	f7ff ff5d 	bl	800396c <__NVIC_SetPriority>
}
 8003ab2:	bf00      	nop
 8003ab4:	3718      	adds	r7, #24
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}

08003aba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003aba:	b580      	push	{r7, lr}
 8003abc:	b082      	sub	sp, #8
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ac4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f7ff ff31 	bl	8003930 <__NVIC_EnableIRQ>
}
 8003ace:	bf00      	nop
 8003ad0:	3708      	adds	r7, #8
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}

08003ad6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ad6:	b580      	push	{r7, lr}
 8003ad8:	b082      	sub	sp, #8
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f7ff ffa2 	bl	8003a28 <SysTick_Config>
 8003ae4:	4603      	mov	r3, r0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3708      	adds	r7, #8
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
	...

08003af0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b087      	sub	sp, #28
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003afa:	2300      	movs	r3, #0
 8003afc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003afe:	e166      	b.n	8003dce <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	2101      	movs	r1, #1
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	fa01 f303 	lsl.w	r3, r1, r3
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	f000 8158 	beq.w	8003dc8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f003 0303 	and.w	r3, r3, #3
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d005      	beq.n	8003b30 <HAL_GPIO_Init+0x40>
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f003 0303 	and.w	r3, r3, #3
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	d130      	bne.n	8003b92 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	005b      	lsls	r3, r3, #1
 8003b3a:	2203      	movs	r2, #3
 8003b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b40:	43db      	mvns	r3, r3
 8003b42:	693a      	ldr	r2, [r7, #16]
 8003b44:	4013      	ands	r3, r2
 8003b46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	68da      	ldr	r2, [r3, #12]
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	005b      	lsls	r3, r3, #1
 8003b50:	fa02 f303 	lsl.w	r3, r2, r3
 8003b54:	693a      	ldr	r2, [r7, #16]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	693a      	ldr	r2, [r7, #16]
 8003b5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003b66:	2201      	movs	r2, #1
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6e:	43db      	mvns	r3, r3
 8003b70:	693a      	ldr	r2, [r7, #16]
 8003b72:	4013      	ands	r3, r2
 8003b74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	091b      	lsrs	r3, r3, #4
 8003b7c:	f003 0201 	and.w	r2, r3, #1
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	fa02 f303 	lsl.w	r3, r2, r3
 8003b86:	693a      	ldr	r2, [r7, #16]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	693a      	ldr	r2, [r7, #16]
 8003b90:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	f003 0303 	and.w	r3, r3, #3
 8003b9a:	2b03      	cmp	r3, #3
 8003b9c:	d017      	beq.n	8003bce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	005b      	lsls	r3, r3, #1
 8003ba8:	2203      	movs	r2, #3
 8003baa:	fa02 f303 	lsl.w	r3, r2, r3
 8003bae:	43db      	mvns	r3, r3
 8003bb0:	693a      	ldr	r2, [r7, #16]
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	689a      	ldr	r2, [r3, #8]
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	005b      	lsls	r3, r3, #1
 8003bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc2:	693a      	ldr	r2, [r7, #16]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	693a      	ldr	r2, [r7, #16]
 8003bcc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	f003 0303 	and.w	r3, r3, #3
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d123      	bne.n	8003c22 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	08da      	lsrs	r2, r3, #3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	3208      	adds	r2, #8
 8003be2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003be6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	f003 0307 	and.w	r3, r3, #7
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	220f      	movs	r2, #15
 8003bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf6:	43db      	mvns	r3, r3
 8003bf8:	693a      	ldr	r2, [r7, #16]
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	691a      	ldr	r2, [r3, #16]
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	f003 0307 	and.w	r3, r3, #7
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0e:	693a      	ldr	r2, [r7, #16]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	08da      	lsrs	r2, r3, #3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	3208      	adds	r2, #8
 8003c1c:	6939      	ldr	r1, [r7, #16]
 8003c1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	005b      	lsls	r3, r3, #1
 8003c2c:	2203      	movs	r2, #3
 8003c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c32:	43db      	mvns	r3, r3
 8003c34:	693a      	ldr	r2, [r7, #16]
 8003c36:	4013      	ands	r3, r2
 8003c38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	f003 0203 	and.w	r2, r3, #3
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	005b      	lsls	r3, r3, #1
 8003c46:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4a:	693a      	ldr	r2, [r7, #16]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	693a      	ldr	r2, [r7, #16]
 8003c54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	f000 80b2 	beq.w	8003dc8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c64:	4b61      	ldr	r3, [pc, #388]	; (8003dec <HAL_GPIO_Init+0x2fc>)
 8003c66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c68:	4a60      	ldr	r2, [pc, #384]	; (8003dec <HAL_GPIO_Init+0x2fc>)
 8003c6a:	f043 0301 	orr.w	r3, r3, #1
 8003c6e:	6613      	str	r3, [r2, #96]	; 0x60
 8003c70:	4b5e      	ldr	r3, [pc, #376]	; (8003dec <HAL_GPIO_Init+0x2fc>)
 8003c72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c74:	f003 0301 	and.w	r3, r3, #1
 8003c78:	60bb      	str	r3, [r7, #8]
 8003c7a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003c7c:	4a5c      	ldr	r2, [pc, #368]	; (8003df0 <HAL_GPIO_Init+0x300>)
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	089b      	lsrs	r3, r3, #2
 8003c82:	3302      	adds	r3, #2
 8003c84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c88:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	f003 0303 	and.w	r3, r3, #3
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	220f      	movs	r2, #15
 8003c94:	fa02 f303 	lsl.w	r3, r2, r3
 8003c98:	43db      	mvns	r3, r3
 8003c9a:	693a      	ldr	r2, [r7, #16]
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003ca6:	d02b      	beq.n	8003d00 <HAL_GPIO_Init+0x210>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	4a52      	ldr	r2, [pc, #328]	; (8003df4 <HAL_GPIO_Init+0x304>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d025      	beq.n	8003cfc <HAL_GPIO_Init+0x20c>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	4a51      	ldr	r2, [pc, #324]	; (8003df8 <HAL_GPIO_Init+0x308>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d01f      	beq.n	8003cf8 <HAL_GPIO_Init+0x208>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	4a50      	ldr	r2, [pc, #320]	; (8003dfc <HAL_GPIO_Init+0x30c>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d019      	beq.n	8003cf4 <HAL_GPIO_Init+0x204>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	4a4f      	ldr	r2, [pc, #316]	; (8003e00 <HAL_GPIO_Init+0x310>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d013      	beq.n	8003cf0 <HAL_GPIO_Init+0x200>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	4a4e      	ldr	r2, [pc, #312]	; (8003e04 <HAL_GPIO_Init+0x314>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d00d      	beq.n	8003cec <HAL_GPIO_Init+0x1fc>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	4a4d      	ldr	r2, [pc, #308]	; (8003e08 <HAL_GPIO_Init+0x318>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d007      	beq.n	8003ce8 <HAL_GPIO_Init+0x1f8>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	4a4c      	ldr	r2, [pc, #304]	; (8003e0c <HAL_GPIO_Init+0x31c>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d101      	bne.n	8003ce4 <HAL_GPIO_Init+0x1f4>
 8003ce0:	2307      	movs	r3, #7
 8003ce2:	e00e      	b.n	8003d02 <HAL_GPIO_Init+0x212>
 8003ce4:	2308      	movs	r3, #8
 8003ce6:	e00c      	b.n	8003d02 <HAL_GPIO_Init+0x212>
 8003ce8:	2306      	movs	r3, #6
 8003cea:	e00a      	b.n	8003d02 <HAL_GPIO_Init+0x212>
 8003cec:	2305      	movs	r3, #5
 8003cee:	e008      	b.n	8003d02 <HAL_GPIO_Init+0x212>
 8003cf0:	2304      	movs	r3, #4
 8003cf2:	e006      	b.n	8003d02 <HAL_GPIO_Init+0x212>
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	e004      	b.n	8003d02 <HAL_GPIO_Init+0x212>
 8003cf8:	2302      	movs	r3, #2
 8003cfa:	e002      	b.n	8003d02 <HAL_GPIO_Init+0x212>
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e000      	b.n	8003d02 <HAL_GPIO_Init+0x212>
 8003d00:	2300      	movs	r3, #0
 8003d02:	697a      	ldr	r2, [r7, #20]
 8003d04:	f002 0203 	and.w	r2, r2, #3
 8003d08:	0092      	lsls	r2, r2, #2
 8003d0a:	4093      	lsls	r3, r2
 8003d0c:	693a      	ldr	r2, [r7, #16]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003d12:	4937      	ldr	r1, [pc, #220]	; (8003df0 <HAL_GPIO_Init+0x300>)
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	089b      	lsrs	r3, r3, #2
 8003d18:	3302      	adds	r3, #2
 8003d1a:	693a      	ldr	r2, [r7, #16]
 8003d1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003d20:	4b3b      	ldr	r3, [pc, #236]	; (8003e10 <HAL_GPIO_Init+0x320>)
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	43db      	mvns	r3, r3
 8003d2a:	693a      	ldr	r2, [r7, #16]
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d003      	beq.n	8003d44 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003d3c:	693a      	ldr	r2, [r7, #16]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003d44:	4a32      	ldr	r2, [pc, #200]	; (8003e10 <HAL_GPIO_Init+0x320>)
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003d4a:	4b31      	ldr	r3, [pc, #196]	; (8003e10 <HAL_GPIO_Init+0x320>)
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	43db      	mvns	r3, r3
 8003d54:	693a      	ldr	r2, [r7, #16]
 8003d56:	4013      	ands	r3, r2
 8003d58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d003      	beq.n	8003d6e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003d66:	693a      	ldr	r2, [r7, #16]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003d6e:	4a28      	ldr	r2, [pc, #160]	; (8003e10 <HAL_GPIO_Init+0x320>)
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003d74:	4b26      	ldr	r3, [pc, #152]	; (8003e10 <HAL_GPIO_Init+0x320>)
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	43db      	mvns	r3, r3
 8003d7e:	693a      	ldr	r2, [r7, #16]
 8003d80:	4013      	ands	r3, r2
 8003d82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d003      	beq.n	8003d98 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003d90:	693a      	ldr	r2, [r7, #16]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003d98:	4a1d      	ldr	r2, [pc, #116]	; (8003e10 <HAL_GPIO_Init+0x320>)
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003d9e:	4b1c      	ldr	r3, [pc, #112]	; (8003e10 <HAL_GPIO_Init+0x320>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	43db      	mvns	r3, r3
 8003da8:	693a      	ldr	r2, [r7, #16]
 8003daa:	4013      	ands	r3, r2
 8003dac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d003      	beq.n	8003dc2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003dba:	693a      	ldr	r2, [r7, #16]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003dc2:	4a13      	ldr	r2, [pc, #76]	; (8003e10 <HAL_GPIO_Init+0x320>)
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	3301      	adds	r3, #1
 8003dcc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	fa22 f303 	lsr.w	r3, r2, r3
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	f47f ae91 	bne.w	8003b00 <HAL_GPIO_Init+0x10>
  }
}
 8003dde:	bf00      	nop
 8003de0:	bf00      	nop
 8003de2:	371c      	adds	r7, #28
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr
 8003dec:	40021000 	.word	0x40021000
 8003df0:	40010000 	.word	0x40010000
 8003df4:	48000400 	.word	0x48000400
 8003df8:	48000800 	.word	0x48000800
 8003dfc:	48000c00 	.word	0x48000c00
 8003e00:	48001000 	.word	0x48001000
 8003e04:	48001400 	.word	0x48001400
 8003e08:	48001800 	.word	0x48001800
 8003e0c:	48001c00 	.word	0x48001c00
 8003e10:	40010400 	.word	0x40010400

08003e14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b083      	sub	sp, #12
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	460b      	mov	r3, r1
 8003e1e:	807b      	strh	r3, [r7, #2]
 8003e20:	4613      	mov	r3, r2
 8003e22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e24:	787b      	ldrb	r3, [r7, #1]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d003      	beq.n	8003e32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003e2a:	887a      	ldrh	r2, [r7, #2]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003e30:	e002      	b.n	8003e38 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003e32:	887a      	ldrh	r2, [r7, #2]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003e38:	bf00      	nop
 8003e3a:	370c      	adds	r7, #12
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr

08003e44 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003e44:	b480      	push	{r7}
 8003e46:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e48:	4b05      	ldr	r3, [pc, #20]	; (8003e60 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a04      	ldr	r2, [pc, #16]	; (8003e60 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003e4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e52:	6013      	str	r3, [r2, #0]
}
 8003e54:	bf00      	nop
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr
 8003e5e:	bf00      	nop
 8003e60:	40007000 	.word	0x40007000

08003e64 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003e64:	b480      	push	{r7}
 8003e66:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003e68:	4b0d      	ldr	r3, [pc, #52]	; (8003ea0 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003e70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e74:	d102      	bne.n	8003e7c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8003e76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e7a:	e00b      	b.n	8003e94 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003e7c:	4b08      	ldr	r3, [pc, #32]	; (8003ea0 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003e7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e8a:	d102      	bne.n	8003e92 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003e8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e90:	e000      	b.n	8003e94 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003e92:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr
 8003e9e:	bf00      	nop
 8003ea0:	40007000 	.word	0x40007000

08003ea4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b085      	sub	sp, #20
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d141      	bne.n	8003f36 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003eb2:	4b4b      	ldr	r3, [pc, #300]	; (8003fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003eba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ebe:	d131      	bne.n	8003f24 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ec0:	4b47      	ldr	r3, [pc, #284]	; (8003fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ec2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ec6:	4a46      	ldr	r2, [pc, #280]	; (8003fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ec8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ecc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ed0:	4b43      	ldr	r3, [pc, #268]	; (8003fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003ed8:	4a41      	ldr	r2, [pc, #260]	; (8003fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003eda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ede:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003ee0:	4b40      	ldr	r3, [pc, #256]	; (8003fe4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	2232      	movs	r2, #50	; 0x32
 8003ee6:	fb02 f303 	mul.w	r3, r2, r3
 8003eea:	4a3f      	ldr	r2, [pc, #252]	; (8003fe8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003eec:	fba2 2303 	umull	r2, r3, r2, r3
 8003ef0:	0c9b      	lsrs	r3, r3, #18
 8003ef2:	3301      	adds	r3, #1
 8003ef4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ef6:	e002      	b.n	8003efe <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	3b01      	subs	r3, #1
 8003efc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003efe:	4b38      	ldr	r3, [pc, #224]	; (8003fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f00:	695b      	ldr	r3, [r3, #20]
 8003f02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f0a:	d102      	bne.n	8003f12 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d1f2      	bne.n	8003ef8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003f12:	4b33      	ldr	r3, [pc, #204]	; (8003fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f14:	695b      	ldr	r3, [r3, #20]
 8003f16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f1e:	d158      	bne.n	8003fd2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003f20:	2303      	movs	r3, #3
 8003f22:	e057      	b.n	8003fd4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f24:	4b2e      	ldr	r3, [pc, #184]	; (8003fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f2a:	4a2d      	ldr	r2, [pc, #180]	; (8003fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f30:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003f34:	e04d      	b.n	8003fd2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f3c:	d141      	bne.n	8003fc2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f3e:	4b28      	ldr	r3, [pc, #160]	; (8003fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003f46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f4a:	d131      	bne.n	8003fb0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f4c:	4b24      	ldr	r3, [pc, #144]	; (8003fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f52:	4a23      	ldr	r2, [pc, #140]	; (8003fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f58:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f5c:	4b20      	ldr	r3, [pc, #128]	; (8003fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003f64:	4a1e      	ldr	r2, [pc, #120]	; (8003fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f6a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003f6c:	4b1d      	ldr	r3, [pc, #116]	; (8003fe4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	2232      	movs	r2, #50	; 0x32
 8003f72:	fb02 f303 	mul.w	r3, r2, r3
 8003f76:	4a1c      	ldr	r2, [pc, #112]	; (8003fe8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003f78:	fba2 2303 	umull	r2, r3, r2, r3
 8003f7c:	0c9b      	lsrs	r3, r3, #18
 8003f7e:	3301      	adds	r3, #1
 8003f80:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f82:	e002      	b.n	8003f8a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	3b01      	subs	r3, #1
 8003f88:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f8a:	4b15      	ldr	r3, [pc, #84]	; (8003fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f8c:	695b      	ldr	r3, [r3, #20]
 8003f8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f96:	d102      	bne.n	8003f9e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d1f2      	bne.n	8003f84 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003f9e:	4b10      	ldr	r3, [pc, #64]	; (8003fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fa0:	695b      	ldr	r3, [r3, #20]
 8003fa2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003faa:	d112      	bne.n	8003fd2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003fac:	2303      	movs	r3, #3
 8003fae:	e011      	b.n	8003fd4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003fb0:	4b0b      	ldr	r3, [pc, #44]	; (8003fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fb6:	4a0a      	ldr	r2, [pc, #40]	; (8003fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fbc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003fc0:	e007      	b.n	8003fd2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003fc2:	4b07      	ldr	r3, [pc, #28]	; (8003fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003fca:	4a05      	ldr	r2, [pc, #20]	; (8003fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fcc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003fd0:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003fd2:	2300      	movs	r3, #0
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3714      	adds	r7, #20
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr
 8003fe0:	40007000 	.word	0x40007000
 8003fe4:	20000000 	.word	0x20000000
 8003fe8:	431bde83 	.word	0x431bde83

08003fec <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003fec:	b480      	push	{r7}
 8003fee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8003ff0:	4b05      	ldr	r3, [pc, #20]	; (8004008 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	4a04      	ldr	r2, [pc, #16]	; (8004008 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003ff6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ffa:	6053      	str	r3, [r2, #4]
}
 8003ffc:	bf00      	nop
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr
 8004006:	bf00      	nop
 8004008:	40007000 	.word	0x40007000

0800400c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b088      	sub	sp, #32
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d102      	bne.n	8004020 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	f000 bc08 	b.w	8004830 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004020:	4b96      	ldr	r3, [pc, #600]	; (800427c <HAL_RCC_OscConfig+0x270>)
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	f003 030c 	and.w	r3, r3, #12
 8004028:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800402a:	4b94      	ldr	r3, [pc, #592]	; (800427c <HAL_RCC_OscConfig+0x270>)
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	f003 0303 	and.w	r3, r3, #3
 8004032:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 0310 	and.w	r3, r3, #16
 800403c:	2b00      	cmp	r3, #0
 800403e:	f000 80e4 	beq.w	800420a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004042:	69bb      	ldr	r3, [r7, #24]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d007      	beq.n	8004058 <HAL_RCC_OscConfig+0x4c>
 8004048:	69bb      	ldr	r3, [r7, #24]
 800404a:	2b0c      	cmp	r3, #12
 800404c:	f040 808b 	bne.w	8004166 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	2b01      	cmp	r3, #1
 8004054:	f040 8087 	bne.w	8004166 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004058:	4b88      	ldr	r3, [pc, #544]	; (800427c <HAL_RCC_OscConfig+0x270>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 0302 	and.w	r3, r3, #2
 8004060:	2b00      	cmp	r3, #0
 8004062:	d005      	beq.n	8004070 <HAL_RCC_OscConfig+0x64>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	699b      	ldr	r3, [r3, #24]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d101      	bne.n	8004070 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e3df      	b.n	8004830 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a1a      	ldr	r2, [r3, #32]
 8004074:	4b81      	ldr	r3, [pc, #516]	; (800427c <HAL_RCC_OscConfig+0x270>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 0308 	and.w	r3, r3, #8
 800407c:	2b00      	cmp	r3, #0
 800407e:	d004      	beq.n	800408a <HAL_RCC_OscConfig+0x7e>
 8004080:	4b7e      	ldr	r3, [pc, #504]	; (800427c <HAL_RCC_OscConfig+0x270>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004088:	e005      	b.n	8004096 <HAL_RCC_OscConfig+0x8a>
 800408a:	4b7c      	ldr	r3, [pc, #496]	; (800427c <HAL_RCC_OscConfig+0x270>)
 800408c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004090:	091b      	lsrs	r3, r3, #4
 8004092:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004096:	4293      	cmp	r3, r2
 8004098:	d223      	bcs.n	80040e2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a1b      	ldr	r3, [r3, #32]
 800409e:	4618      	mov	r0, r3
 80040a0:	f000 fdcc 	bl	8004c3c <RCC_SetFlashLatencyFromMSIRange>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d001      	beq.n	80040ae <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e3c0      	b.n	8004830 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80040ae:	4b73      	ldr	r3, [pc, #460]	; (800427c <HAL_RCC_OscConfig+0x270>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a72      	ldr	r2, [pc, #456]	; (800427c <HAL_RCC_OscConfig+0x270>)
 80040b4:	f043 0308 	orr.w	r3, r3, #8
 80040b8:	6013      	str	r3, [r2, #0]
 80040ba:	4b70      	ldr	r3, [pc, #448]	; (800427c <HAL_RCC_OscConfig+0x270>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a1b      	ldr	r3, [r3, #32]
 80040c6:	496d      	ldr	r1, [pc, #436]	; (800427c <HAL_RCC_OscConfig+0x270>)
 80040c8:	4313      	orrs	r3, r2
 80040ca:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80040cc:	4b6b      	ldr	r3, [pc, #428]	; (800427c <HAL_RCC_OscConfig+0x270>)
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	69db      	ldr	r3, [r3, #28]
 80040d8:	021b      	lsls	r3, r3, #8
 80040da:	4968      	ldr	r1, [pc, #416]	; (800427c <HAL_RCC_OscConfig+0x270>)
 80040dc:	4313      	orrs	r3, r2
 80040de:	604b      	str	r3, [r1, #4]
 80040e0:	e025      	b.n	800412e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80040e2:	4b66      	ldr	r3, [pc, #408]	; (800427c <HAL_RCC_OscConfig+0x270>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a65      	ldr	r2, [pc, #404]	; (800427c <HAL_RCC_OscConfig+0x270>)
 80040e8:	f043 0308 	orr.w	r3, r3, #8
 80040ec:	6013      	str	r3, [r2, #0]
 80040ee:	4b63      	ldr	r3, [pc, #396]	; (800427c <HAL_RCC_OscConfig+0x270>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a1b      	ldr	r3, [r3, #32]
 80040fa:	4960      	ldr	r1, [pc, #384]	; (800427c <HAL_RCC_OscConfig+0x270>)
 80040fc:	4313      	orrs	r3, r2
 80040fe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004100:	4b5e      	ldr	r3, [pc, #376]	; (800427c <HAL_RCC_OscConfig+0x270>)
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	69db      	ldr	r3, [r3, #28]
 800410c:	021b      	lsls	r3, r3, #8
 800410e:	495b      	ldr	r1, [pc, #364]	; (800427c <HAL_RCC_OscConfig+0x270>)
 8004110:	4313      	orrs	r3, r2
 8004112:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004114:	69bb      	ldr	r3, [r7, #24]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d109      	bne.n	800412e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a1b      	ldr	r3, [r3, #32]
 800411e:	4618      	mov	r0, r3
 8004120:	f000 fd8c 	bl	8004c3c <RCC_SetFlashLatencyFromMSIRange>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d001      	beq.n	800412e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e380      	b.n	8004830 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800412e:	f000 fcc1 	bl	8004ab4 <HAL_RCC_GetSysClockFreq>
 8004132:	4602      	mov	r2, r0
 8004134:	4b51      	ldr	r3, [pc, #324]	; (800427c <HAL_RCC_OscConfig+0x270>)
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	091b      	lsrs	r3, r3, #4
 800413a:	f003 030f 	and.w	r3, r3, #15
 800413e:	4950      	ldr	r1, [pc, #320]	; (8004280 <HAL_RCC_OscConfig+0x274>)
 8004140:	5ccb      	ldrb	r3, [r1, r3]
 8004142:	f003 031f 	and.w	r3, r3, #31
 8004146:	fa22 f303 	lsr.w	r3, r2, r3
 800414a:	4a4e      	ldr	r2, [pc, #312]	; (8004284 <HAL_RCC_OscConfig+0x278>)
 800414c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800414e:	4b4e      	ldr	r3, [pc, #312]	; (8004288 <HAL_RCC_OscConfig+0x27c>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4618      	mov	r0, r3
 8004154:	f7fe f9e0 	bl	8002518 <HAL_InitTick>
 8004158:	4603      	mov	r3, r0
 800415a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800415c:	7bfb      	ldrb	r3, [r7, #15]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d052      	beq.n	8004208 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004162:	7bfb      	ldrb	r3, [r7, #15]
 8004164:	e364      	b.n	8004830 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	699b      	ldr	r3, [r3, #24]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d032      	beq.n	80041d4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800416e:	4b43      	ldr	r3, [pc, #268]	; (800427c <HAL_RCC_OscConfig+0x270>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a42      	ldr	r2, [pc, #264]	; (800427c <HAL_RCC_OscConfig+0x270>)
 8004174:	f043 0301 	orr.w	r3, r3, #1
 8004178:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800417a:	f7fe fa1d 	bl	80025b8 <HAL_GetTick>
 800417e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004180:	e008      	b.n	8004194 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004182:	f7fe fa19 	bl	80025b8 <HAL_GetTick>
 8004186:	4602      	mov	r2, r0
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	1ad3      	subs	r3, r2, r3
 800418c:	2b02      	cmp	r3, #2
 800418e:	d901      	bls.n	8004194 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004190:	2303      	movs	r3, #3
 8004192:	e34d      	b.n	8004830 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004194:	4b39      	ldr	r3, [pc, #228]	; (800427c <HAL_RCC_OscConfig+0x270>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 0302 	and.w	r3, r3, #2
 800419c:	2b00      	cmp	r3, #0
 800419e:	d0f0      	beq.n	8004182 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80041a0:	4b36      	ldr	r3, [pc, #216]	; (800427c <HAL_RCC_OscConfig+0x270>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a35      	ldr	r2, [pc, #212]	; (800427c <HAL_RCC_OscConfig+0x270>)
 80041a6:	f043 0308 	orr.w	r3, r3, #8
 80041aa:	6013      	str	r3, [r2, #0]
 80041ac:	4b33      	ldr	r3, [pc, #204]	; (800427c <HAL_RCC_OscConfig+0x270>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6a1b      	ldr	r3, [r3, #32]
 80041b8:	4930      	ldr	r1, [pc, #192]	; (800427c <HAL_RCC_OscConfig+0x270>)
 80041ba:	4313      	orrs	r3, r2
 80041bc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041be:	4b2f      	ldr	r3, [pc, #188]	; (800427c <HAL_RCC_OscConfig+0x270>)
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	69db      	ldr	r3, [r3, #28]
 80041ca:	021b      	lsls	r3, r3, #8
 80041cc:	492b      	ldr	r1, [pc, #172]	; (800427c <HAL_RCC_OscConfig+0x270>)
 80041ce:	4313      	orrs	r3, r2
 80041d0:	604b      	str	r3, [r1, #4]
 80041d2:	e01a      	b.n	800420a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80041d4:	4b29      	ldr	r3, [pc, #164]	; (800427c <HAL_RCC_OscConfig+0x270>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a28      	ldr	r2, [pc, #160]	; (800427c <HAL_RCC_OscConfig+0x270>)
 80041da:	f023 0301 	bic.w	r3, r3, #1
 80041de:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80041e0:	f7fe f9ea 	bl	80025b8 <HAL_GetTick>
 80041e4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80041e6:	e008      	b.n	80041fa <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80041e8:	f7fe f9e6 	bl	80025b8 <HAL_GetTick>
 80041ec:	4602      	mov	r2, r0
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	1ad3      	subs	r3, r2, r3
 80041f2:	2b02      	cmp	r3, #2
 80041f4:	d901      	bls.n	80041fa <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80041f6:	2303      	movs	r3, #3
 80041f8:	e31a      	b.n	8004830 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80041fa:	4b20      	ldr	r3, [pc, #128]	; (800427c <HAL_RCC_OscConfig+0x270>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 0302 	and.w	r3, r3, #2
 8004202:	2b00      	cmp	r3, #0
 8004204:	d1f0      	bne.n	80041e8 <HAL_RCC_OscConfig+0x1dc>
 8004206:	e000      	b.n	800420a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004208:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0301 	and.w	r3, r3, #1
 8004212:	2b00      	cmp	r3, #0
 8004214:	d073      	beq.n	80042fe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004216:	69bb      	ldr	r3, [r7, #24]
 8004218:	2b08      	cmp	r3, #8
 800421a:	d005      	beq.n	8004228 <HAL_RCC_OscConfig+0x21c>
 800421c:	69bb      	ldr	r3, [r7, #24]
 800421e:	2b0c      	cmp	r3, #12
 8004220:	d10e      	bne.n	8004240 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	2b03      	cmp	r3, #3
 8004226:	d10b      	bne.n	8004240 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004228:	4b14      	ldr	r3, [pc, #80]	; (800427c <HAL_RCC_OscConfig+0x270>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004230:	2b00      	cmp	r3, #0
 8004232:	d063      	beq.n	80042fc <HAL_RCC_OscConfig+0x2f0>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d15f      	bne.n	80042fc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e2f7      	b.n	8004830 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004248:	d106      	bne.n	8004258 <HAL_RCC_OscConfig+0x24c>
 800424a:	4b0c      	ldr	r3, [pc, #48]	; (800427c <HAL_RCC_OscConfig+0x270>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a0b      	ldr	r2, [pc, #44]	; (800427c <HAL_RCC_OscConfig+0x270>)
 8004250:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004254:	6013      	str	r3, [r2, #0]
 8004256:	e025      	b.n	80042a4 <HAL_RCC_OscConfig+0x298>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004260:	d114      	bne.n	800428c <HAL_RCC_OscConfig+0x280>
 8004262:	4b06      	ldr	r3, [pc, #24]	; (800427c <HAL_RCC_OscConfig+0x270>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a05      	ldr	r2, [pc, #20]	; (800427c <HAL_RCC_OscConfig+0x270>)
 8004268:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800426c:	6013      	str	r3, [r2, #0]
 800426e:	4b03      	ldr	r3, [pc, #12]	; (800427c <HAL_RCC_OscConfig+0x270>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a02      	ldr	r2, [pc, #8]	; (800427c <HAL_RCC_OscConfig+0x270>)
 8004274:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004278:	6013      	str	r3, [r2, #0]
 800427a:	e013      	b.n	80042a4 <HAL_RCC_OscConfig+0x298>
 800427c:	40021000 	.word	0x40021000
 8004280:	08009c18 	.word	0x08009c18
 8004284:	20000000 	.word	0x20000000
 8004288:	20000004 	.word	0x20000004
 800428c:	4ba0      	ldr	r3, [pc, #640]	; (8004510 <HAL_RCC_OscConfig+0x504>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a9f      	ldr	r2, [pc, #636]	; (8004510 <HAL_RCC_OscConfig+0x504>)
 8004292:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004296:	6013      	str	r3, [r2, #0]
 8004298:	4b9d      	ldr	r3, [pc, #628]	; (8004510 <HAL_RCC_OscConfig+0x504>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a9c      	ldr	r2, [pc, #624]	; (8004510 <HAL_RCC_OscConfig+0x504>)
 800429e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d013      	beq.n	80042d4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ac:	f7fe f984 	bl	80025b8 <HAL_GetTick>
 80042b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042b2:	e008      	b.n	80042c6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042b4:	f7fe f980 	bl	80025b8 <HAL_GetTick>
 80042b8:	4602      	mov	r2, r0
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	2b64      	cmp	r3, #100	; 0x64
 80042c0:	d901      	bls.n	80042c6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e2b4      	b.n	8004830 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042c6:	4b92      	ldr	r3, [pc, #584]	; (8004510 <HAL_RCC_OscConfig+0x504>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d0f0      	beq.n	80042b4 <HAL_RCC_OscConfig+0x2a8>
 80042d2:	e014      	b.n	80042fe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042d4:	f7fe f970 	bl	80025b8 <HAL_GetTick>
 80042d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80042da:	e008      	b.n	80042ee <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042dc:	f7fe f96c 	bl	80025b8 <HAL_GetTick>
 80042e0:	4602      	mov	r2, r0
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	2b64      	cmp	r3, #100	; 0x64
 80042e8:	d901      	bls.n	80042ee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	e2a0      	b.n	8004830 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80042ee:	4b88      	ldr	r3, [pc, #544]	; (8004510 <HAL_RCC_OscConfig+0x504>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d1f0      	bne.n	80042dc <HAL_RCC_OscConfig+0x2d0>
 80042fa:	e000      	b.n	80042fe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 0302 	and.w	r3, r3, #2
 8004306:	2b00      	cmp	r3, #0
 8004308:	d060      	beq.n	80043cc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800430a:	69bb      	ldr	r3, [r7, #24]
 800430c:	2b04      	cmp	r3, #4
 800430e:	d005      	beq.n	800431c <HAL_RCC_OscConfig+0x310>
 8004310:	69bb      	ldr	r3, [r7, #24]
 8004312:	2b0c      	cmp	r3, #12
 8004314:	d119      	bne.n	800434a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	2b02      	cmp	r3, #2
 800431a:	d116      	bne.n	800434a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800431c:	4b7c      	ldr	r3, [pc, #496]	; (8004510 <HAL_RCC_OscConfig+0x504>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004324:	2b00      	cmp	r3, #0
 8004326:	d005      	beq.n	8004334 <HAL_RCC_OscConfig+0x328>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d101      	bne.n	8004334 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e27d      	b.n	8004830 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004334:	4b76      	ldr	r3, [pc, #472]	; (8004510 <HAL_RCC_OscConfig+0x504>)
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	691b      	ldr	r3, [r3, #16]
 8004340:	061b      	lsls	r3, r3, #24
 8004342:	4973      	ldr	r1, [pc, #460]	; (8004510 <HAL_RCC_OscConfig+0x504>)
 8004344:	4313      	orrs	r3, r2
 8004346:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004348:	e040      	b.n	80043cc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d023      	beq.n	800439a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004352:	4b6f      	ldr	r3, [pc, #444]	; (8004510 <HAL_RCC_OscConfig+0x504>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a6e      	ldr	r2, [pc, #440]	; (8004510 <HAL_RCC_OscConfig+0x504>)
 8004358:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800435c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800435e:	f7fe f92b 	bl	80025b8 <HAL_GetTick>
 8004362:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004364:	e008      	b.n	8004378 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004366:	f7fe f927 	bl	80025b8 <HAL_GetTick>
 800436a:	4602      	mov	r2, r0
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	1ad3      	subs	r3, r2, r3
 8004370:	2b02      	cmp	r3, #2
 8004372:	d901      	bls.n	8004378 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004374:	2303      	movs	r3, #3
 8004376:	e25b      	b.n	8004830 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004378:	4b65      	ldr	r3, [pc, #404]	; (8004510 <HAL_RCC_OscConfig+0x504>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004380:	2b00      	cmp	r3, #0
 8004382:	d0f0      	beq.n	8004366 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004384:	4b62      	ldr	r3, [pc, #392]	; (8004510 <HAL_RCC_OscConfig+0x504>)
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	691b      	ldr	r3, [r3, #16]
 8004390:	061b      	lsls	r3, r3, #24
 8004392:	495f      	ldr	r1, [pc, #380]	; (8004510 <HAL_RCC_OscConfig+0x504>)
 8004394:	4313      	orrs	r3, r2
 8004396:	604b      	str	r3, [r1, #4]
 8004398:	e018      	b.n	80043cc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800439a:	4b5d      	ldr	r3, [pc, #372]	; (8004510 <HAL_RCC_OscConfig+0x504>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a5c      	ldr	r2, [pc, #368]	; (8004510 <HAL_RCC_OscConfig+0x504>)
 80043a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043a6:	f7fe f907 	bl	80025b8 <HAL_GetTick>
 80043aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80043ac:	e008      	b.n	80043c0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043ae:	f7fe f903 	bl	80025b8 <HAL_GetTick>
 80043b2:	4602      	mov	r2, r0
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	2b02      	cmp	r3, #2
 80043ba:	d901      	bls.n	80043c0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80043bc:	2303      	movs	r3, #3
 80043be:	e237      	b.n	8004830 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80043c0:	4b53      	ldr	r3, [pc, #332]	; (8004510 <HAL_RCC_OscConfig+0x504>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d1f0      	bne.n	80043ae <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 0308 	and.w	r3, r3, #8
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d03c      	beq.n	8004452 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	695b      	ldr	r3, [r3, #20]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d01c      	beq.n	800441a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043e0:	4b4b      	ldr	r3, [pc, #300]	; (8004510 <HAL_RCC_OscConfig+0x504>)
 80043e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043e6:	4a4a      	ldr	r2, [pc, #296]	; (8004510 <HAL_RCC_OscConfig+0x504>)
 80043e8:	f043 0301 	orr.w	r3, r3, #1
 80043ec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043f0:	f7fe f8e2 	bl	80025b8 <HAL_GetTick>
 80043f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80043f6:	e008      	b.n	800440a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043f8:	f7fe f8de 	bl	80025b8 <HAL_GetTick>
 80043fc:	4602      	mov	r2, r0
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	2b02      	cmp	r3, #2
 8004404:	d901      	bls.n	800440a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e212      	b.n	8004830 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800440a:	4b41      	ldr	r3, [pc, #260]	; (8004510 <HAL_RCC_OscConfig+0x504>)
 800440c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004410:	f003 0302 	and.w	r3, r3, #2
 8004414:	2b00      	cmp	r3, #0
 8004416:	d0ef      	beq.n	80043f8 <HAL_RCC_OscConfig+0x3ec>
 8004418:	e01b      	b.n	8004452 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800441a:	4b3d      	ldr	r3, [pc, #244]	; (8004510 <HAL_RCC_OscConfig+0x504>)
 800441c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004420:	4a3b      	ldr	r2, [pc, #236]	; (8004510 <HAL_RCC_OscConfig+0x504>)
 8004422:	f023 0301 	bic.w	r3, r3, #1
 8004426:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800442a:	f7fe f8c5 	bl	80025b8 <HAL_GetTick>
 800442e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004430:	e008      	b.n	8004444 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004432:	f7fe f8c1 	bl	80025b8 <HAL_GetTick>
 8004436:	4602      	mov	r2, r0
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	1ad3      	subs	r3, r2, r3
 800443c:	2b02      	cmp	r3, #2
 800443e:	d901      	bls.n	8004444 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004440:	2303      	movs	r3, #3
 8004442:	e1f5      	b.n	8004830 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004444:	4b32      	ldr	r3, [pc, #200]	; (8004510 <HAL_RCC_OscConfig+0x504>)
 8004446:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800444a:	f003 0302 	and.w	r3, r3, #2
 800444e:	2b00      	cmp	r3, #0
 8004450:	d1ef      	bne.n	8004432 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 0304 	and.w	r3, r3, #4
 800445a:	2b00      	cmp	r3, #0
 800445c:	f000 80a6 	beq.w	80045ac <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004460:	2300      	movs	r3, #0
 8004462:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004464:	4b2a      	ldr	r3, [pc, #168]	; (8004510 <HAL_RCC_OscConfig+0x504>)
 8004466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004468:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800446c:	2b00      	cmp	r3, #0
 800446e:	d10d      	bne.n	800448c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004470:	4b27      	ldr	r3, [pc, #156]	; (8004510 <HAL_RCC_OscConfig+0x504>)
 8004472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004474:	4a26      	ldr	r2, [pc, #152]	; (8004510 <HAL_RCC_OscConfig+0x504>)
 8004476:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800447a:	6593      	str	r3, [r2, #88]	; 0x58
 800447c:	4b24      	ldr	r3, [pc, #144]	; (8004510 <HAL_RCC_OscConfig+0x504>)
 800447e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004480:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004484:	60bb      	str	r3, [r7, #8]
 8004486:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004488:	2301      	movs	r3, #1
 800448a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800448c:	4b21      	ldr	r3, [pc, #132]	; (8004514 <HAL_RCC_OscConfig+0x508>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004494:	2b00      	cmp	r3, #0
 8004496:	d118      	bne.n	80044ca <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004498:	4b1e      	ldr	r3, [pc, #120]	; (8004514 <HAL_RCC_OscConfig+0x508>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a1d      	ldr	r2, [pc, #116]	; (8004514 <HAL_RCC_OscConfig+0x508>)
 800449e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044a2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044a4:	f7fe f888 	bl	80025b8 <HAL_GetTick>
 80044a8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044aa:	e008      	b.n	80044be <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044ac:	f7fe f884 	bl	80025b8 <HAL_GetTick>
 80044b0:	4602      	mov	r2, r0
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	2b02      	cmp	r3, #2
 80044b8:	d901      	bls.n	80044be <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80044ba:	2303      	movs	r3, #3
 80044bc:	e1b8      	b.n	8004830 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044be:	4b15      	ldr	r3, [pc, #84]	; (8004514 <HAL_RCC_OscConfig+0x508>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d0f0      	beq.n	80044ac <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d108      	bne.n	80044e4 <HAL_RCC_OscConfig+0x4d8>
 80044d2:	4b0f      	ldr	r3, [pc, #60]	; (8004510 <HAL_RCC_OscConfig+0x504>)
 80044d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044d8:	4a0d      	ldr	r2, [pc, #52]	; (8004510 <HAL_RCC_OscConfig+0x504>)
 80044da:	f043 0301 	orr.w	r3, r3, #1
 80044de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80044e2:	e029      	b.n	8004538 <HAL_RCC_OscConfig+0x52c>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	2b05      	cmp	r3, #5
 80044ea:	d115      	bne.n	8004518 <HAL_RCC_OscConfig+0x50c>
 80044ec:	4b08      	ldr	r3, [pc, #32]	; (8004510 <HAL_RCC_OscConfig+0x504>)
 80044ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044f2:	4a07      	ldr	r2, [pc, #28]	; (8004510 <HAL_RCC_OscConfig+0x504>)
 80044f4:	f043 0304 	orr.w	r3, r3, #4
 80044f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80044fc:	4b04      	ldr	r3, [pc, #16]	; (8004510 <HAL_RCC_OscConfig+0x504>)
 80044fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004502:	4a03      	ldr	r2, [pc, #12]	; (8004510 <HAL_RCC_OscConfig+0x504>)
 8004504:	f043 0301 	orr.w	r3, r3, #1
 8004508:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800450c:	e014      	b.n	8004538 <HAL_RCC_OscConfig+0x52c>
 800450e:	bf00      	nop
 8004510:	40021000 	.word	0x40021000
 8004514:	40007000 	.word	0x40007000
 8004518:	4b9d      	ldr	r3, [pc, #628]	; (8004790 <HAL_RCC_OscConfig+0x784>)
 800451a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800451e:	4a9c      	ldr	r2, [pc, #624]	; (8004790 <HAL_RCC_OscConfig+0x784>)
 8004520:	f023 0301 	bic.w	r3, r3, #1
 8004524:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004528:	4b99      	ldr	r3, [pc, #612]	; (8004790 <HAL_RCC_OscConfig+0x784>)
 800452a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800452e:	4a98      	ldr	r2, [pc, #608]	; (8004790 <HAL_RCC_OscConfig+0x784>)
 8004530:	f023 0304 	bic.w	r3, r3, #4
 8004534:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d016      	beq.n	800456e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004540:	f7fe f83a 	bl	80025b8 <HAL_GetTick>
 8004544:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004546:	e00a      	b.n	800455e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004548:	f7fe f836 	bl	80025b8 <HAL_GetTick>
 800454c:	4602      	mov	r2, r0
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	f241 3288 	movw	r2, #5000	; 0x1388
 8004556:	4293      	cmp	r3, r2
 8004558:	d901      	bls.n	800455e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800455a:	2303      	movs	r3, #3
 800455c:	e168      	b.n	8004830 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800455e:	4b8c      	ldr	r3, [pc, #560]	; (8004790 <HAL_RCC_OscConfig+0x784>)
 8004560:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004564:	f003 0302 	and.w	r3, r3, #2
 8004568:	2b00      	cmp	r3, #0
 800456a:	d0ed      	beq.n	8004548 <HAL_RCC_OscConfig+0x53c>
 800456c:	e015      	b.n	800459a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800456e:	f7fe f823 	bl	80025b8 <HAL_GetTick>
 8004572:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004574:	e00a      	b.n	800458c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004576:	f7fe f81f 	bl	80025b8 <HAL_GetTick>
 800457a:	4602      	mov	r2, r0
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	1ad3      	subs	r3, r2, r3
 8004580:	f241 3288 	movw	r2, #5000	; 0x1388
 8004584:	4293      	cmp	r3, r2
 8004586:	d901      	bls.n	800458c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004588:	2303      	movs	r3, #3
 800458a:	e151      	b.n	8004830 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800458c:	4b80      	ldr	r3, [pc, #512]	; (8004790 <HAL_RCC_OscConfig+0x784>)
 800458e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004592:	f003 0302 	and.w	r3, r3, #2
 8004596:	2b00      	cmp	r3, #0
 8004598:	d1ed      	bne.n	8004576 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800459a:	7ffb      	ldrb	r3, [r7, #31]
 800459c:	2b01      	cmp	r3, #1
 800459e:	d105      	bne.n	80045ac <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045a0:	4b7b      	ldr	r3, [pc, #492]	; (8004790 <HAL_RCC_OscConfig+0x784>)
 80045a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045a4:	4a7a      	ldr	r2, [pc, #488]	; (8004790 <HAL_RCC_OscConfig+0x784>)
 80045a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045aa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0320 	and.w	r3, r3, #32
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d03c      	beq.n	8004632 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d01c      	beq.n	80045fa <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80045c0:	4b73      	ldr	r3, [pc, #460]	; (8004790 <HAL_RCC_OscConfig+0x784>)
 80045c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045c6:	4a72      	ldr	r2, [pc, #456]	; (8004790 <HAL_RCC_OscConfig+0x784>)
 80045c8:	f043 0301 	orr.w	r3, r3, #1
 80045cc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045d0:	f7fd fff2 	bl	80025b8 <HAL_GetTick>
 80045d4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80045d6:	e008      	b.n	80045ea <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80045d8:	f7fd ffee 	bl	80025b8 <HAL_GetTick>
 80045dc:	4602      	mov	r2, r0
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	d901      	bls.n	80045ea <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	e122      	b.n	8004830 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80045ea:	4b69      	ldr	r3, [pc, #420]	; (8004790 <HAL_RCC_OscConfig+0x784>)
 80045ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045f0:	f003 0302 	and.w	r3, r3, #2
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d0ef      	beq.n	80045d8 <HAL_RCC_OscConfig+0x5cc>
 80045f8:	e01b      	b.n	8004632 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80045fa:	4b65      	ldr	r3, [pc, #404]	; (8004790 <HAL_RCC_OscConfig+0x784>)
 80045fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004600:	4a63      	ldr	r2, [pc, #396]	; (8004790 <HAL_RCC_OscConfig+0x784>)
 8004602:	f023 0301 	bic.w	r3, r3, #1
 8004606:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800460a:	f7fd ffd5 	bl	80025b8 <HAL_GetTick>
 800460e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004610:	e008      	b.n	8004624 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004612:	f7fd ffd1 	bl	80025b8 <HAL_GetTick>
 8004616:	4602      	mov	r2, r0
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	2b02      	cmp	r3, #2
 800461e:	d901      	bls.n	8004624 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004620:	2303      	movs	r3, #3
 8004622:	e105      	b.n	8004830 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004624:	4b5a      	ldr	r3, [pc, #360]	; (8004790 <HAL_RCC_OscConfig+0x784>)
 8004626:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800462a:	f003 0302 	and.w	r3, r3, #2
 800462e:	2b00      	cmp	r3, #0
 8004630:	d1ef      	bne.n	8004612 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004636:	2b00      	cmp	r3, #0
 8004638:	f000 80f9 	beq.w	800482e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004640:	2b02      	cmp	r3, #2
 8004642:	f040 80cf 	bne.w	80047e4 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004646:	4b52      	ldr	r3, [pc, #328]	; (8004790 <HAL_RCC_OscConfig+0x784>)
 8004648:	68db      	ldr	r3, [r3, #12]
 800464a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	f003 0203 	and.w	r2, r3, #3
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004656:	429a      	cmp	r2, r3
 8004658:	d12c      	bne.n	80046b4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004664:	3b01      	subs	r3, #1
 8004666:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004668:	429a      	cmp	r2, r3
 800466a:	d123      	bne.n	80046b4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004676:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004678:	429a      	cmp	r2, r3
 800467a:	d11b      	bne.n	80046b4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004686:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004688:	429a      	cmp	r2, r3
 800468a:	d113      	bne.n	80046b4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004696:	085b      	lsrs	r3, r3, #1
 8004698:	3b01      	subs	r3, #1
 800469a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800469c:	429a      	cmp	r2, r3
 800469e:	d109      	bne.n	80046b4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046aa:	085b      	lsrs	r3, r3, #1
 80046ac:	3b01      	subs	r3, #1
 80046ae:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d071      	beq.n	8004798 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80046b4:	69bb      	ldr	r3, [r7, #24]
 80046b6:	2b0c      	cmp	r3, #12
 80046b8:	d068      	beq.n	800478c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80046ba:	4b35      	ldr	r3, [pc, #212]	; (8004790 <HAL_RCC_OscConfig+0x784>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d105      	bne.n	80046d2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80046c6:	4b32      	ldr	r3, [pc, #200]	; (8004790 <HAL_RCC_OscConfig+0x784>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d001      	beq.n	80046d6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e0ac      	b.n	8004830 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80046d6:	4b2e      	ldr	r3, [pc, #184]	; (8004790 <HAL_RCC_OscConfig+0x784>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a2d      	ldr	r2, [pc, #180]	; (8004790 <HAL_RCC_OscConfig+0x784>)
 80046dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046e0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80046e2:	f7fd ff69 	bl	80025b8 <HAL_GetTick>
 80046e6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046e8:	e008      	b.n	80046fc <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046ea:	f7fd ff65 	bl	80025b8 <HAL_GetTick>
 80046ee:	4602      	mov	r2, r0
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	2b02      	cmp	r3, #2
 80046f6:	d901      	bls.n	80046fc <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80046f8:	2303      	movs	r3, #3
 80046fa:	e099      	b.n	8004830 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046fc:	4b24      	ldr	r3, [pc, #144]	; (8004790 <HAL_RCC_OscConfig+0x784>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004704:	2b00      	cmp	r3, #0
 8004706:	d1f0      	bne.n	80046ea <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004708:	4b21      	ldr	r3, [pc, #132]	; (8004790 <HAL_RCC_OscConfig+0x784>)
 800470a:	68da      	ldr	r2, [r3, #12]
 800470c:	4b21      	ldr	r3, [pc, #132]	; (8004794 <HAL_RCC_OscConfig+0x788>)
 800470e:	4013      	ands	r3, r2
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004714:	687a      	ldr	r2, [r7, #4]
 8004716:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004718:	3a01      	subs	r2, #1
 800471a:	0112      	lsls	r2, r2, #4
 800471c:	4311      	orrs	r1, r2
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004722:	0212      	lsls	r2, r2, #8
 8004724:	4311      	orrs	r1, r2
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800472a:	0852      	lsrs	r2, r2, #1
 800472c:	3a01      	subs	r2, #1
 800472e:	0552      	lsls	r2, r2, #21
 8004730:	4311      	orrs	r1, r2
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004736:	0852      	lsrs	r2, r2, #1
 8004738:	3a01      	subs	r2, #1
 800473a:	0652      	lsls	r2, r2, #25
 800473c:	4311      	orrs	r1, r2
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004742:	06d2      	lsls	r2, r2, #27
 8004744:	430a      	orrs	r2, r1
 8004746:	4912      	ldr	r1, [pc, #72]	; (8004790 <HAL_RCC_OscConfig+0x784>)
 8004748:	4313      	orrs	r3, r2
 800474a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800474c:	4b10      	ldr	r3, [pc, #64]	; (8004790 <HAL_RCC_OscConfig+0x784>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a0f      	ldr	r2, [pc, #60]	; (8004790 <HAL_RCC_OscConfig+0x784>)
 8004752:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004756:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004758:	4b0d      	ldr	r3, [pc, #52]	; (8004790 <HAL_RCC_OscConfig+0x784>)
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	4a0c      	ldr	r2, [pc, #48]	; (8004790 <HAL_RCC_OscConfig+0x784>)
 800475e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004762:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004764:	f7fd ff28 	bl	80025b8 <HAL_GetTick>
 8004768:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800476a:	e008      	b.n	800477e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800476c:	f7fd ff24 	bl	80025b8 <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	2b02      	cmp	r3, #2
 8004778:	d901      	bls.n	800477e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e058      	b.n	8004830 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800477e:	4b04      	ldr	r3, [pc, #16]	; (8004790 <HAL_RCC_OscConfig+0x784>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d0f0      	beq.n	800476c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800478a:	e050      	b.n	800482e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e04f      	b.n	8004830 <HAL_RCC_OscConfig+0x824>
 8004790:	40021000 	.word	0x40021000
 8004794:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004798:	4b27      	ldr	r3, [pc, #156]	; (8004838 <HAL_RCC_OscConfig+0x82c>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d144      	bne.n	800482e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80047a4:	4b24      	ldr	r3, [pc, #144]	; (8004838 <HAL_RCC_OscConfig+0x82c>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a23      	ldr	r2, [pc, #140]	; (8004838 <HAL_RCC_OscConfig+0x82c>)
 80047aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047ae:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80047b0:	4b21      	ldr	r3, [pc, #132]	; (8004838 <HAL_RCC_OscConfig+0x82c>)
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	4a20      	ldr	r2, [pc, #128]	; (8004838 <HAL_RCC_OscConfig+0x82c>)
 80047b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047ba:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80047bc:	f7fd fefc 	bl	80025b8 <HAL_GetTick>
 80047c0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047c2:	e008      	b.n	80047d6 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047c4:	f7fd fef8 	bl	80025b8 <HAL_GetTick>
 80047c8:	4602      	mov	r2, r0
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	2b02      	cmp	r3, #2
 80047d0:	d901      	bls.n	80047d6 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e02c      	b.n	8004830 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047d6:	4b18      	ldr	r3, [pc, #96]	; (8004838 <HAL_RCC_OscConfig+0x82c>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d0f0      	beq.n	80047c4 <HAL_RCC_OscConfig+0x7b8>
 80047e2:	e024      	b.n	800482e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80047e4:	69bb      	ldr	r3, [r7, #24]
 80047e6:	2b0c      	cmp	r3, #12
 80047e8:	d01f      	beq.n	800482a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047ea:	4b13      	ldr	r3, [pc, #76]	; (8004838 <HAL_RCC_OscConfig+0x82c>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a12      	ldr	r2, [pc, #72]	; (8004838 <HAL_RCC_OscConfig+0x82c>)
 80047f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047f6:	f7fd fedf 	bl	80025b8 <HAL_GetTick>
 80047fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047fc:	e008      	b.n	8004810 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047fe:	f7fd fedb 	bl	80025b8 <HAL_GetTick>
 8004802:	4602      	mov	r2, r0
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	1ad3      	subs	r3, r2, r3
 8004808:	2b02      	cmp	r3, #2
 800480a:	d901      	bls.n	8004810 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 800480c:	2303      	movs	r3, #3
 800480e:	e00f      	b.n	8004830 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004810:	4b09      	ldr	r3, [pc, #36]	; (8004838 <HAL_RCC_OscConfig+0x82c>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004818:	2b00      	cmp	r3, #0
 800481a:	d1f0      	bne.n	80047fe <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800481c:	4b06      	ldr	r3, [pc, #24]	; (8004838 <HAL_RCC_OscConfig+0x82c>)
 800481e:	68da      	ldr	r2, [r3, #12]
 8004820:	4905      	ldr	r1, [pc, #20]	; (8004838 <HAL_RCC_OscConfig+0x82c>)
 8004822:	4b06      	ldr	r3, [pc, #24]	; (800483c <HAL_RCC_OscConfig+0x830>)
 8004824:	4013      	ands	r3, r2
 8004826:	60cb      	str	r3, [r1, #12]
 8004828:	e001      	b.n	800482e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e000      	b.n	8004830 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800482e:	2300      	movs	r3, #0
}
 8004830:	4618      	mov	r0, r3
 8004832:	3720      	adds	r7, #32
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}
 8004838:	40021000 	.word	0x40021000
 800483c:	feeefffc 	.word	0xfeeefffc

08004840 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b086      	sub	sp, #24
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800484a:	2300      	movs	r3, #0
 800484c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d101      	bne.n	8004858 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	e11d      	b.n	8004a94 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004858:	4b90      	ldr	r3, [pc, #576]	; (8004a9c <HAL_RCC_ClockConfig+0x25c>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 030f 	and.w	r3, r3, #15
 8004860:	683a      	ldr	r2, [r7, #0]
 8004862:	429a      	cmp	r2, r3
 8004864:	d910      	bls.n	8004888 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004866:	4b8d      	ldr	r3, [pc, #564]	; (8004a9c <HAL_RCC_ClockConfig+0x25c>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f023 020f 	bic.w	r2, r3, #15
 800486e:	498b      	ldr	r1, [pc, #556]	; (8004a9c <HAL_RCC_ClockConfig+0x25c>)
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	4313      	orrs	r3, r2
 8004874:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004876:	4b89      	ldr	r3, [pc, #548]	; (8004a9c <HAL_RCC_ClockConfig+0x25c>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 030f 	and.w	r3, r3, #15
 800487e:	683a      	ldr	r2, [r7, #0]
 8004880:	429a      	cmp	r2, r3
 8004882:	d001      	beq.n	8004888 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e105      	b.n	8004a94 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 0302 	and.w	r3, r3, #2
 8004890:	2b00      	cmp	r3, #0
 8004892:	d010      	beq.n	80048b6 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	689a      	ldr	r2, [r3, #8]
 8004898:	4b81      	ldr	r3, [pc, #516]	; (8004aa0 <HAL_RCC_ClockConfig+0x260>)
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d908      	bls.n	80048b6 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048a4:	4b7e      	ldr	r3, [pc, #504]	; (8004aa0 <HAL_RCC_ClockConfig+0x260>)
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	497b      	ldr	r1, [pc, #492]	; (8004aa0 <HAL_RCC_ClockConfig+0x260>)
 80048b2:	4313      	orrs	r3, r2
 80048b4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 0301 	and.w	r3, r3, #1
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d079      	beq.n	80049b6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	2b03      	cmp	r3, #3
 80048c8:	d11e      	bne.n	8004908 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048ca:	4b75      	ldr	r3, [pc, #468]	; (8004aa0 <HAL_RCC_ClockConfig+0x260>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d101      	bne.n	80048da <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e0dc      	b.n	8004a94 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80048da:	f000 fa09 	bl	8004cf0 <RCC_GetSysClockFreqFromPLLSource>
 80048de:	4603      	mov	r3, r0
 80048e0:	4a70      	ldr	r2, [pc, #448]	; (8004aa4 <HAL_RCC_ClockConfig+0x264>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d946      	bls.n	8004974 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80048e6:	4b6e      	ldr	r3, [pc, #440]	; (8004aa0 <HAL_RCC_ClockConfig+0x260>)
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d140      	bne.n	8004974 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80048f2:	4b6b      	ldr	r3, [pc, #428]	; (8004aa0 <HAL_RCC_ClockConfig+0x260>)
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048fa:	4a69      	ldr	r2, [pc, #420]	; (8004aa0 <HAL_RCC_ClockConfig+0x260>)
 80048fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004900:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004902:	2380      	movs	r3, #128	; 0x80
 8004904:	617b      	str	r3, [r7, #20]
 8004906:	e035      	b.n	8004974 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	2b02      	cmp	r3, #2
 800490e:	d107      	bne.n	8004920 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004910:	4b63      	ldr	r3, [pc, #396]	; (8004aa0 <HAL_RCC_ClockConfig+0x260>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004918:	2b00      	cmp	r3, #0
 800491a:	d115      	bne.n	8004948 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	e0b9      	b.n	8004a94 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d107      	bne.n	8004938 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004928:	4b5d      	ldr	r3, [pc, #372]	; (8004aa0 <HAL_RCC_ClockConfig+0x260>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 0302 	and.w	r3, r3, #2
 8004930:	2b00      	cmp	r3, #0
 8004932:	d109      	bne.n	8004948 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	e0ad      	b.n	8004a94 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004938:	4b59      	ldr	r3, [pc, #356]	; (8004aa0 <HAL_RCC_ClockConfig+0x260>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004940:	2b00      	cmp	r3, #0
 8004942:	d101      	bne.n	8004948 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	e0a5      	b.n	8004a94 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004948:	f000 f8b4 	bl	8004ab4 <HAL_RCC_GetSysClockFreq>
 800494c:	4603      	mov	r3, r0
 800494e:	4a55      	ldr	r2, [pc, #340]	; (8004aa4 <HAL_RCC_ClockConfig+0x264>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d90f      	bls.n	8004974 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004954:	4b52      	ldr	r3, [pc, #328]	; (8004aa0 <HAL_RCC_ClockConfig+0x260>)
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800495c:	2b00      	cmp	r3, #0
 800495e:	d109      	bne.n	8004974 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004960:	4b4f      	ldr	r3, [pc, #316]	; (8004aa0 <HAL_RCC_ClockConfig+0x260>)
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004968:	4a4d      	ldr	r2, [pc, #308]	; (8004aa0 <HAL_RCC_ClockConfig+0x260>)
 800496a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800496e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004970:	2380      	movs	r3, #128	; 0x80
 8004972:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004974:	4b4a      	ldr	r3, [pc, #296]	; (8004aa0 <HAL_RCC_ClockConfig+0x260>)
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	f023 0203 	bic.w	r2, r3, #3
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	4947      	ldr	r1, [pc, #284]	; (8004aa0 <HAL_RCC_ClockConfig+0x260>)
 8004982:	4313      	orrs	r3, r2
 8004984:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004986:	f7fd fe17 	bl	80025b8 <HAL_GetTick>
 800498a:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800498c:	e00a      	b.n	80049a4 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800498e:	f7fd fe13 	bl	80025b8 <HAL_GetTick>
 8004992:	4602      	mov	r2, r0
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	1ad3      	subs	r3, r2, r3
 8004998:	f241 3288 	movw	r2, #5000	; 0x1388
 800499c:	4293      	cmp	r3, r2
 800499e:	d901      	bls.n	80049a4 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80049a0:	2303      	movs	r3, #3
 80049a2:	e077      	b.n	8004a94 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049a4:	4b3e      	ldr	r3, [pc, #248]	; (8004aa0 <HAL_RCC_ClockConfig+0x260>)
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	f003 020c 	and.w	r2, r3, #12
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d1eb      	bne.n	800498e <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	2b80      	cmp	r3, #128	; 0x80
 80049ba:	d105      	bne.n	80049c8 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80049bc:	4b38      	ldr	r3, [pc, #224]	; (8004aa0 <HAL_RCC_ClockConfig+0x260>)
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	4a37      	ldr	r2, [pc, #220]	; (8004aa0 <HAL_RCC_ClockConfig+0x260>)
 80049c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049c6:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 0302 	and.w	r3, r3, #2
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d010      	beq.n	80049f6 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	689a      	ldr	r2, [r3, #8]
 80049d8:	4b31      	ldr	r3, [pc, #196]	; (8004aa0 <HAL_RCC_ClockConfig+0x260>)
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d208      	bcs.n	80049f6 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049e4:	4b2e      	ldr	r3, [pc, #184]	; (8004aa0 <HAL_RCC_ClockConfig+0x260>)
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	492b      	ldr	r1, [pc, #172]	; (8004aa0 <HAL_RCC_ClockConfig+0x260>)
 80049f2:	4313      	orrs	r3, r2
 80049f4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80049f6:	4b29      	ldr	r3, [pc, #164]	; (8004a9c <HAL_RCC_ClockConfig+0x25c>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 030f 	and.w	r3, r3, #15
 80049fe:	683a      	ldr	r2, [r7, #0]
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d210      	bcs.n	8004a26 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a04:	4b25      	ldr	r3, [pc, #148]	; (8004a9c <HAL_RCC_ClockConfig+0x25c>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f023 020f 	bic.w	r2, r3, #15
 8004a0c:	4923      	ldr	r1, [pc, #140]	; (8004a9c <HAL_RCC_ClockConfig+0x25c>)
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	4313      	orrs	r3, r2
 8004a12:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a14:	4b21      	ldr	r3, [pc, #132]	; (8004a9c <HAL_RCC_ClockConfig+0x25c>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 030f 	and.w	r3, r3, #15
 8004a1c:	683a      	ldr	r2, [r7, #0]
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d001      	beq.n	8004a26 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e036      	b.n	8004a94 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 0304 	and.w	r3, r3, #4
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d008      	beq.n	8004a44 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a32:	4b1b      	ldr	r3, [pc, #108]	; (8004aa0 <HAL_RCC_ClockConfig+0x260>)
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	68db      	ldr	r3, [r3, #12]
 8004a3e:	4918      	ldr	r1, [pc, #96]	; (8004aa0 <HAL_RCC_ClockConfig+0x260>)
 8004a40:	4313      	orrs	r3, r2
 8004a42:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 0308 	and.w	r3, r3, #8
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d009      	beq.n	8004a64 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a50:	4b13      	ldr	r3, [pc, #76]	; (8004aa0 <HAL_RCC_ClockConfig+0x260>)
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	691b      	ldr	r3, [r3, #16]
 8004a5c:	00db      	lsls	r3, r3, #3
 8004a5e:	4910      	ldr	r1, [pc, #64]	; (8004aa0 <HAL_RCC_ClockConfig+0x260>)
 8004a60:	4313      	orrs	r3, r2
 8004a62:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004a64:	f000 f826 	bl	8004ab4 <HAL_RCC_GetSysClockFreq>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	4b0d      	ldr	r3, [pc, #52]	; (8004aa0 <HAL_RCC_ClockConfig+0x260>)
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	091b      	lsrs	r3, r3, #4
 8004a70:	f003 030f 	and.w	r3, r3, #15
 8004a74:	490c      	ldr	r1, [pc, #48]	; (8004aa8 <HAL_RCC_ClockConfig+0x268>)
 8004a76:	5ccb      	ldrb	r3, [r1, r3]
 8004a78:	f003 031f 	and.w	r3, r3, #31
 8004a7c:	fa22 f303 	lsr.w	r3, r2, r3
 8004a80:	4a0a      	ldr	r2, [pc, #40]	; (8004aac <HAL_RCC_ClockConfig+0x26c>)
 8004a82:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004a84:	4b0a      	ldr	r3, [pc, #40]	; (8004ab0 <HAL_RCC_ClockConfig+0x270>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f7fd fd45 	bl	8002518 <HAL_InitTick>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	73fb      	strb	r3, [r7, #15]

  return status;
 8004a92:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3718      	adds	r7, #24
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}
 8004a9c:	40022000 	.word	0x40022000
 8004aa0:	40021000 	.word	0x40021000
 8004aa4:	04c4b400 	.word	0x04c4b400
 8004aa8:	08009c18 	.word	0x08009c18
 8004aac:	20000000 	.word	0x20000000
 8004ab0:	20000004 	.word	0x20000004

08004ab4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b089      	sub	sp, #36	; 0x24
 8004ab8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004aba:	2300      	movs	r3, #0
 8004abc:	61fb      	str	r3, [r7, #28]
 8004abe:	2300      	movs	r3, #0
 8004ac0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ac2:	4b3e      	ldr	r3, [pc, #248]	; (8004bbc <HAL_RCC_GetSysClockFreq+0x108>)
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	f003 030c 	and.w	r3, r3, #12
 8004aca:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004acc:	4b3b      	ldr	r3, [pc, #236]	; (8004bbc <HAL_RCC_GetSysClockFreq+0x108>)
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	f003 0303 	and.w	r3, r3, #3
 8004ad4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d005      	beq.n	8004ae8 <HAL_RCC_GetSysClockFreq+0x34>
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	2b0c      	cmp	r3, #12
 8004ae0:	d121      	bne.n	8004b26 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d11e      	bne.n	8004b26 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004ae8:	4b34      	ldr	r3, [pc, #208]	; (8004bbc <HAL_RCC_GetSysClockFreq+0x108>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 0308 	and.w	r3, r3, #8
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d107      	bne.n	8004b04 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004af4:	4b31      	ldr	r3, [pc, #196]	; (8004bbc <HAL_RCC_GetSysClockFreq+0x108>)
 8004af6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004afa:	0a1b      	lsrs	r3, r3, #8
 8004afc:	f003 030f 	and.w	r3, r3, #15
 8004b00:	61fb      	str	r3, [r7, #28]
 8004b02:	e005      	b.n	8004b10 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004b04:	4b2d      	ldr	r3, [pc, #180]	; (8004bbc <HAL_RCC_GetSysClockFreq+0x108>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	091b      	lsrs	r3, r3, #4
 8004b0a:	f003 030f 	and.w	r3, r3, #15
 8004b0e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004b10:	4a2b      	ldr	r2, [pc, #172]	; (8004bc0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004b12:	69fb      	ldr	r3, [r7, #28]
 8004b14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b18:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d10d      	bne.n	8004b3c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004b20:	69fb      	ldr	r3, [r7, #28]
 8004b22:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004b24:	e00a      	b.n	8004b3c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	2b04      	cmp	r3, #4
 8004b2a:	d102      	bne.n	8004b32 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004b2c:	4b25      	ldr	r3, [pc, #148]	; (8004bc4 <HAL_RCC_GetSysClockFreq+0x110>)
 8004b2e:	61bb      	str	r3, [r7, #24]
 8004b30:	e004      	b.n	8004b3c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	2b08      	cmp	r3, #8
 8004b36:	d101      	bne.n	8004b3c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004b38:	4b23      	ldr	r3, [pc, #140]	; (8004bc8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004b3a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	2b0c      	cmp	r3, #12
 8004b40:	d134      	bne.n	8004bac <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004b42:	4b1e      	ldr	r3, [pc, #120]	; (8004bbc <HAL_RCC_GetSysClockFreq+0x108>)
 8004b44:	68db      	ldr	r3, [r3, #12]
 8004b46:	f003 0303 	and.w	r3, r3, #3
 8004b4a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	2b02      	cmp	r3, #2
 8004b50:	d003      	beq.n	8004b5a <HAL_RCC_GetSysClockFreq+0xa6>
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	2b03      	cmp	r3, #3
 8004b56:	d003      	beq.n	8004b60 <HAL_RCC_GetSysClockFreq+0xac>
 8004b58:	e005      	b.n	8004b66 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004b5a:	4b1a      	ldr	r3, [pc, #104]	; (8004bc4 <HAL_RCC_GetSysClockFreq+0x110>)
 8004b5c:	617b      	str	r3, [r7, #20]
      break;
 8004b5e:	e005      	b.n	8004b6c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004b60:	4b19      	ldr	r3, [pc, #100]	; (8004bc8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004b62:	617b      	str	r3, [r7, #20]
      break;
 8004b64:	e002      	b.n	8004b6c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004b66:	69fb      	ldr	r3, [r7, #28]
 8004b68:	617b      	str	r3, [r7, #20]
      break;
 8004b6a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004b6c:	4b13      	ldr	r3, [pc, #76]	; (8004bbc <HAL_RCC_GetSysClockFreq+0x108>)
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	091b      	lsrs	r3, r3, #4
 8004b72:	f003 030f 	and.w	r3, r3, #15
 8004b76:	3301      	adds	r3, #1
 8004b78:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004b7a:	4b10      	ldr	r3, [pc, #64]	; (8004bbc <HAL_RCC_GetSysClockFreq+0x108>)
 8004b7c:	68db      	ldr	r3, [r3, #12]
 8004b7e:	0a1b      	lsrs	r3, r3, #8
 8004b80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b84:	697a      	ldr	r2, [r7, #20]
 8004b86:	fb03 f202 	mul.w	r2, r3, r2
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b90:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004b92:	4b0a      	ldr	r3, [pc, #40]	; (8004bbc <HAL_RCC_GetSysClockFreq+0x108>)
 8004b94:	68db      	ldr	r3, [r3, #12]
 8004b96:	0e5b      	lsrs	r3, r3, #25
 8004b98:	f003 0303 	and.w	r3, r3, #3
 8004b9c:	3301      	adds	r3, #1
 8004b9e:	005b      	lsls	r3, r3, #1
 8004ba0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004ba2:	697a      	ldr	r2, [r7, #20]
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004baa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004bac:	69bb      	ldr	r3, [r7, #24]
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3724      	adds	r7, #36	; 0x24
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr
 8004bba:	bf00      	nop
 8004bbc:	40021000 	.word	0x40021000
 8004bc0:	08009c30 	.word	0x08009c30
 8004bc4:	00f42400 	.word	0x00f42400
 8004bc8:	007a1200 	.word	0x007a1200

08004bcc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bd0:	4b03      	ldr	r3, [pc, #12]	; (8004be0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bdc:	4770      	bx	lr
 8004bde:	bf00      	nop
 8004be0:	20000000 	.word	0x20000000

08004be4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004be8:	f7ff fff0 	bl	8004bcc <HAL_RCC_GetHCLKFreq>
 8004bec:	4602      	mov	r2, r0
 8004bee:	4b06      	ldr	r3, [pc, #24]	; (8004c08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	0a1b      	lsrs	r3, r3, #8
 8004bf4:	f003 0307 	and.w	r3, r3, #7
 8004bf8:	4904      	ldr	r1, [pc, #16]	; (8004c0c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004bfa:	5ccb      	ldrb	r3, [r1, r3]
 8004bfc:	f003 031f 	and.w	r3, r3, #31
 8004c00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	bd80      	pop	{r7, pc}
 8004c08:	40021000 	.word	0x40021000
 8004c0c:	08009c28 	.word	0x08009c28

08004c10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004c14:	f7ff ffda 	bl	8004bcc <HAL_RCC_GetHCLKFreq>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	4b06      	ldr	r3, [pc, #24]	; (8004c34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	0adb      	lsrs	r3, r3, #11
 8004c20:	f003 0307 	and.w	r3, r3, #7
 8004c24:	4904      	ldr	r1, [pc, #16]	; (8004c38 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004c26:	5ccb      	ldrb	r3, [r1, r3]
 8004c28:	f003 031f 	and.w	r3, r3, #31
 8004c2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	bd80      	pop	{r7, pc}
 8004c34:	40021000 	.word	0x40021000
 8004c38:	08009c28 	.word	0x08009c28

08004c3c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b086      	sub	sp, #24
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004c44:	2300      	movs	r3, #0
 8004c46:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004c48:	4b27      	ldr	r3, [pc, #156]	; (8004ce8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d003      	beq.n	8004c5c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004c54:	f7ff f906 	bl	8003e64 <HAL_PWREx_GetVoltageRange>
 8004c58:	6178      	str	r0, [r7, #20]
 8004c5a:	e014      	b.n	8004c86 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c5c:	4b22      	ldr	r3, [pc, #136]	; (8004ce8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c60:	4a21      	ldr	r2, [pc, #132]	; (8004ce8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004c62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c66:	6593      	str	r3, [r2, #88]	; 0x58
 8004c68:	4b1f      	ldr	r3, [pc, #124]	; (8004ce8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004c6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c70:	60fb      	str	r3, [r7, #12]
 8004c72:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004c74:	f7ff f8f6 	bl	8003e64 <HAL_PWREx_GetVoltageRange>
 8004c78:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004c7a:	4b1b      	ldr	r3, [pc, #108]	; (8004ce8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c7e:	4a1a      	ldr	r2, [pc, #104]	; (8004ce8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004c80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c84:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c8c:	d10b      	bne.n	8004ca6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2b80      	cmp	r3, #128	; 0x80
 8004c92:	d913      	bls.n	8004cbc <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2ba0      	cmp	r3, #160	; 0xa0
 8004c98:	d902      	bls.n	8004ca0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004c9a:	2302      	movs	r3, #2
 8004c9c:	613b      	str	r3, [r7, #16]
 8004c9e:	e00d      	b.n	8004cbc <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	613b      	str	r3, [r7, #16]
 8004ca4:	e00a      	b.n	8004cbc <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2b7f      	cmp	r3, #127	; 0x7f
 8004caa:	d902      	bls.n	8004cb2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004cac:	2302      	movs	r3, #2
 8004cae:	613b      	str	r3, [r7, #16]
 8004cb0:	e004      	b.n	8004cbc <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2b70      	cmp	r3, #112	; 0x70
 8004cb6:	d101      	bne.n	8004cbc <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004cb8:	2301      	movs	r3, #1
 8004cba:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004cbc:	4b0b      	ldr	r3, [pc, #44]	; (8004cec <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f023 020f 	bic.w	r2, r3, #15
 8004cc4:	4909      	ldr	r1, [pc, #36]	; (8004cec <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004ccc:	4b07      	ldr	r3, [pc, #28]	; (8004cec <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 030f 	and.w	r3, r3, #15
 8004cd4:	693a      	ldr	r2, [r7, #16]
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d001      	beq.n	8004cde <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e000      	b.n	8004ce0 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8004cde:	2300      	movs	r3, #0
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3718      	adds	r7, #24
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	40021000 	.word	0x40021000
 8004cec:	40022000 	.word	0x40022000

08004cf0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b087      	sub	sp, #28
 8004cf4:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004cf6:	4b2d      	ldr	r3, [pc, #180]	; (8004dac <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	f003 0303 	and.w	r3, r3, #3
 8004cfe:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2b03      	cmp	r3, #3
 8004d04:	d00b      	beq.n	8004d1e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2b03      	cmp	r3, #3
 8004d0a:	d825      	bhi.n	8004d58 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d008      	beq.n	8004d24 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2b02      	cmp	r3, #2
 8004d16:	d11f      	bne.n	8004d58 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004d18:	4b25      	ldr	r3, [pc, #148]	; (8004db0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004d1a:	613b      	str	r3, [r7, #16]
    break;
 8004d1c:	e01f      	b.n	8004d5e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8004d1e:	4b25      	ldr	r3, [pc, #148]	; (8004db4 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004d20:	613b      	str	r3, [r7, #16]
    break;
 8004d22:	e01c      	b.n	8004d5e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004d24:	4b21      	ldr	r3, [pc, #132]	; (8004dac <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 0308 	and.w	r3, r3, #8
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d107      	bne.n	8004d40 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004d30:	4b1e      	ldr	r3, [pc, #120]	; (8004dac <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004d32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d36:	0a1b      	lsrs	r3, r3, #8
 8004d38:	f003 030f 	and.w	r3, r3, #15
 8004d3c:	617b      	str	r3, [r7, #20]
 8004d3e:	e005      	b.n	8004d4c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004d40:	4b1a      	ldr	r3, [pc, #104]	; (8004dac <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	091b      	lsrs	r3, r3, #4
 8004d46:	f003 030f 	and.w	r3, r3, #15
 8004d4a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8004d4c:	4a1a      	ldr	r2, [pc, #104]	; (8004db8 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d54:	613b      	str	r3, [r7, #16]
    break;
 8004d56:	e002      	b.n	8004d5e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	613b      	str	r3, [r7, #16]
    break;
 8004d5c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004d5e:	4b13      	ldr	r3, [pc, #76]	; (8004dac <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	091b      	lsrs	r3, r3, #4
 8004d64:	f003 030f 	and.w	r3, r3, #15
 8004d68:	3301      	adds	r3, #1
 8004d6a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004d6c:	4b0f      	ldr	r3, [pc, #60]	; (8004dac <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	0a1b      	lsrs	r3, r3, #8
 8004d72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d76:	693a      	ldr	r2, [r7, #16]
 8004d78:	fb03 f202 	mul.w	r2, r3, r2
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d82:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004d84:	4b09      	ldr	r3, [pc, #36]	; (8004dac <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	0e5b      	lsrs	r3, r3, #25
 8004d8a:	f003 0303 	and.w	r3, r3, #3
 8004d8e:	3301      	adds	r3, #1
 8004d90:	005b      	lsls	r3, r3, #1
 8004d92:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004d94:	693a      	ldr	r2, [r7, #16]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d9c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004d9e:	683b      	ldr	r3, [r7, #0]
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	371c      	adds	r7, #28
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr
 8004dac:	40021000 	.word	0x40021000
 8004db0:	00f42400 	.word	0x00f42400
 8004db4:	007a1200 	.word	0x007a1200
 8004db8:	08009c30 	.word	0x08009c30

08004dbc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b086      	sub	sp, #24
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004dc8:	2300      	movs	r3, #0
 8004dca:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d040      	beq.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ddc:	2b80      	cmp	r3, #128	; 0x80
 8004dde:	d02a      	beq.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004de0:	2b80      	cmp	r3, #128	; 0x80
 8004de2:	d825      	bhi.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004de4:	2b60      	cmp	r3, #96	; 0x60
 8004de6:	d026      	beq.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004de8:	2b60      	cmp	r3, #96	; 0x60
 8004dea:	d821      	bhi.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004dec:	2b40      	cmp	r3, #64	; 0x40
 8004dee:	d006      	beq.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004df0:	2b40      	cmp	r3, #64	; 0x40
 8004df2:	d81d      	bhi.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d009      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004df8:	2b20      	cmp	r3, #32
 8004dfa:	d010      	beq.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004dfc:	e018      	b.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004dfe:	4b89      	ldr	r3, [pc, #548]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e00:	68db      	ldr	r3, [r3, #12]
 8004e02:	4a88      	ldr	r2, [pc, #544]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e08:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004e0a:	e015      	b.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	3304      	adds	r3, #4
 8004e10:	2100      	movs	r1, #0
 8004e12:	4618      	mov	r0, r3
 8004e14:	f001 fa34 	bl	8006280 <RCCEx_PLLSAI1_Config>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004e1c:	e00c      	b.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	3320      	adds	r3, #32
 8004e22:	2100      	movs	r1, #0
 8004e24:	4618      	mov	r0, r3
 8004e26:	f001 fb1f 	bl	8006468 <RCCEx_PLLSAI2_Config>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004e2e:	e003      	b.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	74fb      	strb	r3, [r7, #19]
      break;
 8004e34:	e000      	b.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8004e36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e38:	7cfb      	ldrb	r3, [r7, #19]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d10b      	bne.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004e3e:	4b79      	ldr	r3, [pc, #484]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e40:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e44:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e4c:	4975      	ldr	r1, [pc, #468]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004e54:	e001      	b.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e56:	7cfb      	ldrb	r3, [r7, #19]
 8004e58:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d047      	beq.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e6e:	d030      	beq.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004e70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e74:	d82a      	bhi.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004e76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e7a:	d02a      	beq.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004e7c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e80:	d824      	bhi.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004e82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e86:	d008      	beq.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004e88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e8c:	d81e      	bhi.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d00a      	beq.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004e92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e96:	d010      	beq.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004e98:	e018      	b.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004e9a:	4b62      	ldr	r3, [pc, #392]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e9c:	68db      	ldr	r3, [r3, #12]
 8004e9e:	4a61      	ldr	r2, [pc, #388]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ea0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ea4:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004ea6:	e015      	b.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	3304      	adds	r3, #4
 8004eac:	2100      	movs	r1, #0
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f001 f9e6 	bl	8006280 <RCCEx_PLLSAI1_Config>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004eb8:	e00c      	b.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	3320      	adds	r3, #32
 8004ebe:	2100      	movs	r1, #0
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f001 fad1 	bl	8006468 <RCCEx_PLLSAI2_Config>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004eca:	e003      	b.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	74fb      	strb	r3, [r7, #19]
      break;
 8004ed0:	e000      	b.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8004ed2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ed4:	7cfb      	ldrb	r3, [r7, #19]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d10b      	bne.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004eda:	4b52      	ldr	r3, [pc, #328]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004edc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004ee0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ee8:	494e      	ldr	r1, [pc, #312]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004eea:	4313      	orrs	r3, r2
 8004eec:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004ef0:	e001      	b.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ef2:	7cfb      	ldrb	r3, [r7, #19]
 8004ef4:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	f000 809f 	beq.w	8005042 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f04:	2300      	movs	r3, #0
 8004f06:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004f08:	4b46      	ldr	r3, [pc, #280]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d101      	bne.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004f14:	2301      	movs	r3, #1
 8004f16:	e000      	b.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004f18:	2300      	movs	r3, #0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d00d      	beq.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f1e:	4b41      	ldr	r3, [pc, #260]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f22:	4a40      	ldr	r2, [pc, #256]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f28:	6593      	str	r3, [r2, #88]	; 0x58
 8004f2a:	4b3e      	ldr	r3, [pc, #248]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f32:	60bb      	str	r3, [r7, #8]
 8004f34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f36:	2301      	movs	r3, #1
 8004f38:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f3a:	4b3b      	ldr	r3, [pc, #236]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a3a      	ldr	r2, [pc, #232]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004f40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f44:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004f46:	f7fd fb37 	bl	80025b8 <HAL_GetTick>
 8004f4a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004f4c:	e009      	b.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f4e:	f7fd fb33 	bl	80025b8 <HAL_GetTick>
 8004f52:	4602      	mov	r2, r0
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	1ad3      	subs	r3, r2, r3
 8004f58:	2b02      	cmp	r3, #2
 8004f5a:	d902      	bls.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8004f5c:	2303      	movs	r3, #3
 8004f5e:	74fb      	strb	r3, [r7, #19]
        break;
 8004f60:	e005      	b.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004f62:	4b31      	ldr	r3, [pc, #196]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d0ef      	beq.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8004f6e:	7cfb      	ldrb	r3, [r7, #19]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d15b      	bne.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004f74:	4b2b      	ldr	r3, [pc, #172]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f7e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d01f      	beq.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f8c:	697a      	ldr	r2, [r7, #20]
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d019      	beq.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004f92:	4b24      	ldr	r3, [pc, #144]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f9c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004f9e:	4b21      	ldr	r3, [pc, #132]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004fa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fa4:	4a1f      	ldr	r2, [pc, #124]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004fa6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004faa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004fae:	4b1d      	ldr	r3, [pc, #116]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fb4:	4a1b      	ldr	r2, [pc, #108]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004fb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004fbe:	4a19      	ldr	r2, [pc, #100]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	f003 0301 	and.w	r3, r3, #1
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d016      	beq.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fd0:	f7fd faf2 	bl	80025b8 <HAL_GetTick>
 8004fd4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004fd6:	e00b      	b.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fd8:	f7fd faee 	bl	80025b8 <HAL_GetTick>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	1ad3      	subs	r3, r2, r3
 8004fe2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d902      	bls.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	74fb      	strb	r3, [r7, #19]
            break;
 8004fee:	e006      	b.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ff0:	4b0c      	ldr	r3, [pc, #48]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ff6:	f003 0302 	and.w	r3, r3, #2
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d0ec      	beq.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8004ffe:	7cfb      	ldrb	r3, [r7, #19]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d10c      	bne.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005004:	4b07      	ldr	r3, [pc, #28]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005006:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800500a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005014:	4903      	ldr	r1, [pc, #12]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005016:	4313      	orrs	r3, r2
 8005018:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800501c:	e008      	b.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800501e:	7cfb      	ldrb	r3, [r7, #19]
 8005020:	74bb      	strb	r3, [r7, #18]
 8005022:	e005      	b.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8005024:	40021000 	.word	0x40021000
 8005028:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800502c:	7cfb      	ldrb	r3, [r7, #19]
 800502e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005030:	7c7b      	ldrb	r3, [r7, #17]
 8005032:	2b01      	cmp	r3, #1
 8005034:	d105      	bne.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005036:	4ba0      	ldr	r3, [pc, #640]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800503a:	4a9f      	ldr	r2, [pc, #636]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800503c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005040:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f003 0301 	and.w	r3, r3, #1
 800504a:	2b00      	cmp	r3, #0
 800504c:	d00a      	beq.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800504e:	4b9a      	ldr	r3, [pc, #616]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005050:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005054:	f023 0203 	bic.w	r2, r3, #3
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800505c:	4996      	ldr	r1, [pc, #600]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800505e:	4313      	orrs	r3, r2
 8005060:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 0302 	and.w	r3, r3, #2
 800506c:	2b00      	cmp	r3, #0
 800506e:	d00a      	beq.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005070:	4b91      	ldr	r3, [pc, #580]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005076:	f023 020c 	bic.w	r2, r3, #12
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800507e:	498e      	ldr	r1, [pc, #568]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005080:	4313      	orrs	r3, r2
 8005082:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f003 0304 	and.w	r3, r3, #4
 800508e:	2b00      	cmp	r3, #0
 8005090:	d00a      	beq.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005092:	4b89      	ldr	r3, [pc, #548]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005094:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005098:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050a0:	4985      	ldr	r1, [pc, #532]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050a2:	4313      	orrs	r3, r2
 80050a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f003 0308 	and.w	r3, r3, #8
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d00a      	beq.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80050b4:	4b80      	ldr	r3, [pc, #512]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050c2:	497d      	ldr	r1, [pc, #500]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050c4:	4313      	orrs	r3, r2
 80050c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 0310 	and.w	r3, r3, #16
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d00a      	beq.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80050d6:	4b78      	ldr	r3, [pc, #480]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050e4:	4974      	ldr	r1, [pc, #464]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050e6:	4313      	orrs	r3, r2
 80050e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 0320 	and.w	r3, r3, #32
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d00a      	beq.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80050f8:	4b6f      	ldr	r3, [pc, #444]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050fe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005106:	496c      	ldr	r1, [pc, #432]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005108:	4313      	orrs	r3, r2
 800510a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005116:	2b00      	cmp	r3, #0
 8005118:	d00a      	beq.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800511a:	4b67      	ldr	r3, [pc, #412]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800511c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005120:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005128:	4963      	ldr	r1, [pc, #396]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800512a:	4313      	orrs	r3, r2
 800512c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005138:	2b00      	cmp	r3, #0
 800513a:	d00a      	beq.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800513c:	4b5e      	ldr	r3, [pc, #376]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800513e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005142:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800514a:	495b      	ldr	r1, [pc, #364]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800514c:	4313      	orrs	r3, r2
 800514e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800515a:	2b00      	cmp	r3, #0
 800515c:	d00a      	beq.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800515e:	4b56      	ldr	r3, [pc, #344]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005160:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005164:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800516c:	4952      	ldr	r1, [pc, #328]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800516e:	4313      	orrs	r3, r2
 8005170:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800517c:	2b00      	cmp	r3, #0
 800517e:	d00a      	beq.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005180:	4b4d      	ldr	r3, [pc, #308]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005186:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800518e:	494a      	ldr	r1, [pc, #296]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005190:	4313      	orrs	r3, r2
 8005192:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d00a      	beq.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80051a2:	4b45      	ldr	r3, [pc, #276]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051b0:	4941      	ldr	r1, [pc, #260]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051b2:	4313      	orrs	r3, r2
 80051b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d00a      	beq.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80051c4:	4b3c      	ldr	r3, [pc, #240]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80051ca:	f023 0203 	bic.w	r2, r3, #3
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051d2:	4939      	ldr	r1, [pc, #228]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051d4:	4313      	orrs	r3, r2
 80051d6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d028      	beq.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80051e6:	4b34      	ldr	r3, [pc, #208]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ec:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051f4:	4930      	ldr	r1, [pc, #192]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051f6:	4313      	orrs	r3, r2
 80051f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005200:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005204:	d106      	bne.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005206:	4b2c      	ldr	r3, [pc, #176]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005208:	68db      	ldr	r3, [r3, #12]
 800520a:	4a2b      	ldr	r2, [pc, #172]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800520c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005210:	60d3      	str	r3, [r2, #12]
 8005212:	e011      	b.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005218:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800521c:	d10c      	bne.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	3304      	adds	r3, #4
 8005222:	2101      	movs	r1, #1
 8005224:	4618      	mov	r0, r3
 8005226:	f001 f82b 	bl	8006280 <RCCEx_PLLSAI1_Config>
 800522a:	4603      	mov	r3, r0
 800522c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800522e:	7cfb      	ldrb	r3, [r7, #19]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d001      	beq.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8005234:	7cfb      	ldrb	r3, [r7, #19]
 8005236:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005240:	2b00      	cmp	r3, #0
 8005242:	d04d      	beq.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005248:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800524c:	d108      	bne.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800524e:	4b1a      	ldr	r3, [pc, #104]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005250:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005254:	4a18      	ldr	r2, [pc, #96]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005256:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800525a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800525e:	e012      	b.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005260:	4b15      	ldr	r3, [pc, #84]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005262:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005266:	4a14      	ldr	r2, [pc, #80]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005268:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800526c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005270:	4b11      	ldr	r3, [pc, #68]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005272:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005276:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800527e:	490e      	ldr	r1, [pc, #56]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005280:	4313      	orrs	r3, r2
 8005282:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800528a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800528e:	d106      	bne.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005290:	4b09      	ldr	r3, [pc, #36]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	4a08      	ldr	r2, [pc, #32]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005296:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800529a:	60d3      	str	r3, [r2, #12]
 800529c:	e020      	b.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80052a6:	d109      	bne.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80052a8:	4b03      	ldr	r3, [pc, #12]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	4a02      	ldr	r2, [pc, #8]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052b2:	60d3      	str	r3, [r2, #12]
 80052b4:	e014      	b.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80052b6:	bf00      	nop
 80052b8:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80052c4:	d10c      	bne.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	3304      	adds	r3, #4
 80052ca:	2101      	movs	r1, #1
 80052cc:	4618      	mov	r0, r3
 80052ce:	f000 ffd7 	bl	8006280 <RCCEx_PLLSAI1_Config>
 80052d2:	4603      	mov	r3, r0
 80052d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80052d6:	7cfb      	ldrb	r3, [r7, #19]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d001      	beq.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80052dc:	7cfb      	ldrb	r3, [r7, #19]
 80052de:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d028      	beq.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80052ec:	4b4a      	ldr	r3, [pc, #296]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80052ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052fa:	4947      	ldr	r1, [pc, #284]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80052fc:	4313      	orrs	r3, r2
 80052fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005306:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800530a:	d106      	bne.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800530c:	4b42      	ldr	r3, [pc, #264]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800530e:	68db      	ldr	r3, [r3, #12]
 8005310:	4a41      	ldr	r2, [pc, #260]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005312:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005316:	60d3      	str	r3, [r2, #12]
 8005318:	e011      	b.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800531e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005322:	d10c      	bne.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	3304      	adds	r3, #4
 8005328:	2101      	movs	r1, #1
 800532a:	4618      	mov	r0, r3
 800532c:	f000 ffa8 	bl	8006280 <RCCEx_PLLSAI1_Config>
 8005330:	4603      	mov	r3, r0
 8005332:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005334:	7cfb      	ldrb	r3, [r7, #19]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d001      	beq.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800533a:	7cfb      	ldrb	r3, [r7, #19]
 800533c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005346:	2b00      	cmp	r3, #0
 8005348:	d01e      	beq.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800534a:	4b33      	ldr	r3, [pc, #204]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800534c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005350:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800535a:	492f      	ldr	r1, [pc, #188]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800535c:	4313      	orrs	r3, r2
 800535e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005368:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800536c:	d10c      	bne.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	3304      	adds	r3, #4
 8005372:	2102      	movs	r1, #2
 8005374:	4618      	mov	r0, r3
 8005376:	f000 ff83 	bl	8006280 <RCCEx_PLLSAI1_Config>
 800537a:	4603      	mov	r3, r0
 800537c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800537e:	7cfb      	ldrb	r3, [r7, #19]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d001      	beq.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8005384:	7cfb      	ldrb	r3, [r7, #19]
 8005386:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005390:	2b00      	cmp	r3, #0
 8005392:	d00b      	beq.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005394:	4b20      	ldr	r3, [pc, #128]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005396:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800539a:	f023 0204 	bic.w	r2, r3, #4
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053a4:	491c      	ldr	r1, [pc, #112]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053a6:	4313      	orrs	r3, r2
 80053a8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d00b      	beq.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80053b8:	4b17      	ldr	r3, [pc, #92]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80053be:	f023 0218 	bic.w	r2, r3, #24
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053c8:	4913      	ldr	r1, [pc, #76]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053ca:	4313      	orrs	r3, r2
 80053cc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d017      	beq.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80053dc:	4b0e      	ldr	r3, [pc, #56]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80053e2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053ec:	490a      	ldr	r1, [pc, #40]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053ee:	4313      	orrs	r3, r2
 80053f0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80053fe:	d105      	bne.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005400:	4b05      	ldr	r3, [pc, #20]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005402:	68db      	ldr	r3, [r3, #12]
 8005404:	4a04      	ldr	r2, [pc, #16]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005406:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800540a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800540c:	7cbb      	ldrb	r3, [r7, #18]
}
 800540e:	4618      	mov	r0, r3
 8005410:	3718      	adds	r7, #24
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}
 8005416:	bf00      	nop
 8005418:	40021000 	.word	0x40021000

0800541c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b088      	sub	sp, #32
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8005424:	2300      	movs	r3, #0
 8005426:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800542e:	d13e      	bne.n	80054ae <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005430:	4bb6      	ldr	r3, [pc, #728]	; (800570c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005432:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005436:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800543a:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005442:	d028      	beq.n	8005496 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800544a:	f200 86f4 	bhi.w	8006236 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005454:	d005      	beq.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800545c:	d00e      	beq.n	800547c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 800545e:	f000 beea 	b.w	8006236 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005462:	4baa      	ldr	r3, [pc, #680]	; (800570c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005464:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005468:	f003 0302 	and.w	r3, r3, #2
 800546c:	2b02      	cmp	r3, #2
 800546e:	f040 86e4 	bne.w	800623a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        frequency = LSE_VALUE;
 8005472:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005476:	61fb      	str	r3, [r7, #28]
      break;
 8005478:	f000 bedf 	b.w	800623a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800547c:	4ba3      	ldr	r3, [pc, #652]	; (800570c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800547e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005482:	f003 0302 	and.w	r3, r3, #2
 8005486:	2b02      	cmp	r3, #2
 8005488:	f040 86d9 	bne.w	800623e <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
          frequency = LSI_VALUE;
 800548c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005490:	61fb      	str	r3, [r7, #28]
      break;
 8005492:	f000 bed4 	b.w	800623e <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005496:	4b9d      	ldr	r3, [pc, #628]	; (800570c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800549e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80054a2:	f040 86ce 	bne.w	8006242 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
        frequency = HSE_VALUE / 32U;
 80054a6:	4b9a      	ldr	r3, [pc, #616]	; (8005710 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80054a8:	61fb      	str	r3, [r7, #28]
      break;
 80054aa:	f000 beca 	b.w	8006242 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80054ae:	4b97      	ldr	r3, [pc, #604]	; (800570c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80054b0:	68db      	ldr	r3, [r3, #12]
 80054b2:	f003 0303 	and.w	r3, r3, #3
 80054b6:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	2b03      	cmp	r3, #3
 80054bc:	d036      	beq.n	800552c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	2b03      	cmp	r3, #3
 80054c2:	d840      	bhi.n	8005546 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d003      	beq.n	80054d2 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	2b02      	cmp	r3, #2
 80054ce:	d020      	beq.n	8005512 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 80054d0:	e039      	b.n	8005546 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80054d2:	4b8e      	ldr	r3, [pc, #568]	; (800570c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f003 0302 	and.w	r3, r3, #2
 80054da:	2b02      	cmp	r3, #2
 80054dc:	d116      	bne.n	800550c <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80054de:	4b8b      	ldr	r3, [pc, #556]	; (800570c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f003 0308 	and.w	r3, r3, #8
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d005      	beq.n	80054f6 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 80054ea:	4b88      	ldr	r3, [pc, #544]	; (800570c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	091b      	lsrs	r3, r3, #4
 80054f0:	f003 030f 	and.w	r3, r3, #15
 80054f4:	e005      	b.n	8005502 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 80054f6:	4b85      	ldr	r3, [pc, #532]	; (800570c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80054f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054fc:	0a1b      	lsrs	r3, r3, #8
 80054fe:	f003 030f 	and.w	r3, r3, #15
 8005502:	4a84      	ldr	r2, [pc, #528]	; (8005714 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005504:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005508:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800550a:	e01f      	b.n	800554c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800550c:	2300      	movs	r3, #0
 800550e:	61bb      	str	r3, [r7, #24]
      break;
 8005510:	e01c      	b.n	800554c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005512:	4b7e      	ldr	r3, [pc, #504]	; (800570c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800551a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800551e:	d102      	bne.n	8005526 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8005520:	4b7d      	ldr	r3, [pc, #500]	; (8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8005522:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005524:	e012      	b.n	800554c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005526:	2300      	movs	r3, #0
 8005528:	61bb      	str	r3, [r7, #24]
      break;
 800552a:	e00f      	b.n	800554c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800552c:	4b77      	ldr	r3, [pc, #476]	; (800570c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005534:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005538:	d102      	bne.n	8005540 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 800553a:	4b78      	ldr	r3, [pc, #480]	; (800571c <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 800553c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800553e:	e005      	b.n	800554c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005540:	2300      	movs	r3, #0
 8005542:	61bb      	str	r3, [r7, #24]
      break;
 8005544:	e002      	b.n	800554c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8005546:	2300      	movs	r3, #0
 8005548:	61bb      	str	r3, [r7, #24]
      break;
 800554a:	bf00      	nop
    }

    switch(PeriphClk)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005552:	f000 8606 	beq.w	8006162 <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800555c:	f200 8673 	bhi.w	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005566:	f000 8469 	beq.w	8005e3c <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005570:	f200 8669 	bhi.w	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800557a:	f000 8531 	beq.w	8005fe0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc4>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005584:	f200 865f 	bhi.w	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800558e:	f000 8187 	beq.w	80058a0 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005598:	f200 8655 	bhi.w	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80055a2:	f000 80cd 	beq.w	8005740 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80055ac:	f200 864b 	bhi.w	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055b6:	f000 8430 	beq.w	8005e1a <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055c0:	f200 8641 	bhi.w	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055ca:	f000 83e4 	beq.w	8005d96 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055d4:	f200 8637 	bhi.w	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055de:	f000 80af 	beq.w	8005740 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055e8:	f200 862d 	bhi.w	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055f2:	f000 809d 	beq.w	8005730 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055fc:	f200 8623 	bhi.w	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005606:	f000 808b 	beq.w	8005720 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005610:	f200 8619 	bhi.w	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800561a:	f000 8554 	beq.w	80060c6 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005624:	f200 860f 	bhi.w	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800562e:	f000 8500 	beq.w	8006032 <HAL_RCCEx_GetPeriphCLKFreq+0xc16>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005638:	f200 8605 	bhi.w	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005642:	f000 84a1 	beq.w	8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800564c:	f200 85fb 	bhi.w	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2b80      	cmp	r3, #128	; 0x80
 8005654:	f000 846c 	beq.w	8005f30 <HAL_RCCEx_GetPeriphCLKFreq+0xb14>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2b80      	cmp	r3, #128	; 0x80
 800565c:	f200 85f3 	bhi.w	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2b20      	cmp	r3, #32
 8005664:	d84c      	bhi.n	8005700 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2b00      	cmp	r3, #0
 800566a:	f000 85ec 	beq.w	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	3b01      	subs	r3, #1
 8005672:	2b1f      	cmp	r3, #31
 8005674:	f200 85e7 	bhi.w	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005678:	a201      	add	r2, pc, #4	; (adr r2, 8005680 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 800567a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800567e:	bf00      	nop
 8005680:	08005a95 	.word	0x08005a95
 8005684:	08005b03 	.word	0x08005b03
 8005688:	08006247 	.word	0x08006247
 800568c:	08005b97 	.word	0x08005b97
 8005690:	08006247 	.word	0x08006247
 8005694:	08006247 	.word	0x08006247
 8005698:	08006247 	.word	0x08006247
 800569c:	08005c0f 	.word	0x08005c0f
 80056a0:	08006247 	.word	0x08006247
 80056a4:	08006247 	.word	0x08006247
 80056a8:	08006247 	.word	0x08006247
 80056ac:	08006247 	.word	0x08006247
 80056b0:	08006247 	.word	0x08006247
 80056b4:	08006247 	.word	0x08006247
 80056b8:	08006247 	.word	0x08006247
 80056bc:	08005c93 	.word	0x08005c93
 80056c0:	08006247 	.word	0x08006247
 80056c4:	08006247 	.word	0x08006247
 80056c8:	08006247 	.word	0x08006247
 80056cc:	08006247 	.word	0x08006247
 80056d0:	08006247 	.word	0x08006247
 80056d4:	08006247 	.word	0x08006247
 80056d8:	08006247 	.word	0x08006247
 80056dc:	08006247 	.word	0x08006247
 80056e0:	08006247 	.word	0x08006247
 80056e4:	08006247 	.word	0x08006247
 80056e8:	08006247 	.word	0x08006247
 80056ec:	08006247 	.word	0x08006247
 80056f0:	08006247 	.word	0x08006247
 80056f4:	08006247 	.word	0x08006247
 80056f8:	08006247 	.word	0x08006247
 80056fc:	08005d15 	.word	0x08005d15
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2b40      	cmp	r3, #64	; 0x40
 8005704:	f000 83e8 	beq.w	8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8005708:	f000 bd9d 	b.w	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800570c:	40021000 	.word	0x40021000
 8005710:	0003d090 	.word	0x0003d090
 8005714:	08009c30 	.word	0x08009c30
 8005718:	00f42400 	.word	0x00f42400
 800571c:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8005720:	69b9      	ldr	r1, [r7, #24]
 8005722:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005726:	f000 ff93 	bl	8006650 <RCCEx_GetSAIxPeriphCLKFreq>
 800572a:	61f8      	str	r0, [r7, #28]
      break;
 800572c:	f000 bd8e 	b.w	800624c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8005730:	69b9      	ldr	r1, [r7, #24]
 8005732:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005736:	f000 ff8b 	bl	8006650 <RCCEx_GetSAIxPeriphCLKFreq>
 800573a:	61f8      	str	r0, [r7, #28]
      break;
 800573c:	f000 bd86 	b.w	800624c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8005740:	4b9a      	ldr	r3, [pc, #616]	; (80059ac <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005746:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800574a:	60fb      	str	r3, [r7, #12]
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005752:	d015      	beq.n	8005780 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800575a:	f200 8092 	bhi.w	8005882 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005764:	d029      	beq.n	80057ba <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800576c:	f200 8089 	bhi.w	8005882 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d07b      	beq.n	800586e <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800577c:	d04a      	beq.n	8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
          break;
 800577e:	e080      	b.n	8005882 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005780:	4b8a      	ldr	r3, [pc, #552]	; (80059ac <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f003 0302 	and.w	r3, r3, #2
 8005788:	2b02      	cmp	r3, #2
 800578a:	d17d      	bne.n	8005888 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800578c:	4b87      	ldr	r3, [pc, #540]	; (80059ac <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f003 0308 	and.w	r3, r3, #8
 8005794:	2b00      	cmp	r3, #0
 8005796:	d005      	beq.n	80057a4 <HAL_RCCEx_GetPeriphCLKFreq+0x388>
 8005798:	4b84      	ldr	r3, [pc, #528]	; (80059ac <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	091b      	lsrs	r3, r3, #4
 800579e:	f003 030f 	and.w	r3, r3, #15
 80057a2:	e005      	b.n	80057b0 <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 80057a4:	4b81      	ldr	r3, [pc, #516]	; (80059ac <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80057a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057aa:	0a1b      	lsrs	r3, r3, #8
 80057ac:	f003 030f 	and.w	r3, r3, #15
 80057b0:	4a7f      	ldr	r2, [pc, #508]	; (80059b0 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80057b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057b6:	61fb      	str	r3, [r7, #28]
          break;
 80057b8:	e066      	b.n	8005888 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80057ba:	4b7c      	ldr	r3, [pc, #496]	; (80059ac <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80057c6:	d162      	bne.n	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80057c8:	4b78      	ldr	r3, [pc, #480]	; (80059ac <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80057d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057d4:	d15b      	bne.n	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80057d6:	4b75      	ldr	r3, [pc, #468]	; (80059ac <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80057d8:	68db      	ldr	r3, [r3, #12]
 80057da:	0a1b      	lsrs	r3, r3, #8
 80057dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057e0:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80057e2:	69bb      	ldr	r3, [r7, #24]
 80057e4:	68ba      	ldr	r2, [r7, #8]
 80057e6:	fb03 f202 	mul.w	r2, r3, r2
 80057ea:	4b70      	ldr	r3, [pc, #448]	; (80059ac <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80057ec:	68db      	ldr	r3, [r3, #12]
 80057ee:	091b      	lsrs	r3, r3, #4
 80057f0:	f003 030f 	and.w	r3, r3, #15
 80057f4:	3301      	adds	r3, #1
 80057f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80057fa:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80057fc:	4b6b      	ldr	r3, [pc, #428]	; (80059ac <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80057fe:	68db      	ldr	r3, [r3, #12]
 8005800:	0d5b      	lsrs	r3, r3, #21
 8005802:	f003 0303 	and.w	r3, r3, #3
 8005806:	3301      	adds	r3, #1
 8005808:	005b      	lsls	r3, r3, #1
 800580a:	69ba      	ldr	r2, [r7, #24]
 800580c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005810:	61fb      	str	r3, [r7, #28]
          break;
 8005812:	e03c      	b.n	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8005814:	4b65      	ldr	r3, [pc, #404]	; (80059ac <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800581c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005820:	d138      	bne.n	8005894 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8005822:	4b62      	ldr	r3, [pc, #392]	; (80059ac <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005824:	691b      	ldr	r3, [r3, #16]
 8005826:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800582a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800582e:	d131      	bne.n	8005894 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005830:	4b5e      	ldr	r3, [pc, #376]	; (80059ac <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005832:	691b      	ldr	r3, [r3, #16]
 8005834:	0a1b      	lsrs	r3, r3, #8
 8005836:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800583a:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800583c:	69bb      	ldr	r3, [r7, #24]
 800583e:	68ba      	ldr	r2, [r7, #8]
 8005840:	fb03 f202 	mul.w	r2, r3, r2
 8005844:	4b59      	ldr	r3, [pc, #356]	; (80059ac <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005846:	691b      	ldr	r3, [r3, #16]
 8005848:	091b      	lsrs	r3, r3, #4
 800584a:	f003 030f 	and.w	r3, r3, #15
 800584e:	3301      	adds	r3, #1
 8005850:	fbb2 f3f3 	udiv	r3, r2, r3
 8005854:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8005856:	4b55      	ldr	r3, [pc, #340]	; (80059ac <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005858:	691b      	ldr	r3, [r3, #16]
 800585a:	0d5b      	lsrs	r3, r3, #21
 800585c:	f003 0303 	and.w	r3, r3, #3
 8005860:	3301      	adds	r3, #1
 8005862:	005b      	lsls	r3, r3, #1
 8005864:	69ba      	ldr	r2, [r7, #24]
 8005866:	fbb2 f3f3 	udiv	r3, r2, r3
 800586a:	61fb      	str	r3, [r7, #28]
          break;
 800586c:	e012      	b.n	8005894 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 800586e:	4b4f      	ldr	r3, [pc, #316]	; (80059ac <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005870:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005874:	f003 0302 	and.w	r3, r3, #2
 8005878:	2b02      	cmp	r3, #2
 800587a:	d10e      	bne.n	800589a <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = HSI48_VALUE;
 800587c:	4b4d      	ldr	r3, [pc, #308]	; (80059b4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800587e:	61fb      	str	r3, [r7, #28]
          break;
 8005880:	e00b      	b.n	800589a <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 8005882:	bf00      	nop
 8005884:	f000 bce2 	b.w	800624c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005888:	bf00      	nop
 800588a:	f000 bcdf 	b.w	800624c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800588e:	bf00      	nop
 8005890:	f000 bcdc 	b.w	800624c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005894:	bf00      	nop
 8005896:	f000 bcd9 	b.w	800624c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800589a:	bf00      	nop
        break;
 800589c:	f000 bcd6 	b.w	800624c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 80058a0:	4b42      	ldr	r3, [pc, #264]	; (80059ac <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80058a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80058a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80058ae:	d13d      	bne.n	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x510>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80058b0:	4b3e      	ldr	r3, [pc, #248]	; (80059ac <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80058bc:	f040 84c5 	bne.w	800624a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 80058c0:	4b3a      	ldr	r3, [pc, #232]	; (80059ac <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80058c2:	68db      	ldr	r3, [r3, #12]
 80058c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058cc:	f040 84bd 	bne.w	800624a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80058d0:	4b36      	ldr	r3, [pc, #216]	; (80059ac <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80058d2:	68db      	ldr	r3, [r3, #12]
 80058d4:	0a1b      	lsrs	r3, r3, #8
 80058d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058da:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80058dc:	69bb      	ldr	r3, [r7, #24]
 80058de:	68ba      	ldr	r2, [r7, #8]
 80058e0:	fb03 f202 	mul.w	r2, r3, r2
 80058e4:	4b31      	ldr	r3, [pc, #196]	; (80059ac <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80058e6:	68db      	ldr	r3, [r3, #12]
 80058e8:	091b      	lsrs	r3, r3, #4
 80058ea:	f003 030f 	and.w	r3, r3, #15
 80058ee:	3301      	adds	r3, #1
 80058f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80058f4:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 80058f6:	4b2d      	ldr	r3, [pc, #180]	; (80059ac <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80058f8:	68db      	ldr	r3, [r3, #12]
 80058fa:	0edb      	lsrs	r3, r3, #27
 80058fc:	f003 031f 	and.w	r3, r3, #31
 8005900:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d10a      	bne.n	800591e <HAL_RCCEx_GetPeriphCLKFreq+0x502>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8005908:	4b28      	ldr	r3, [pc, #160]	; (80059ac <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800590a:	68db      	ldr	r3, [r3, #12]
 800590c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005910:	2b00      	cmp	r3, #0
 8005912:	d002      	beq.n	800591a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 17U;
 8005914:	2311      	movs	r3, #17
 8005916:	617b      	str	r3, [r7, #20]
 8005918:	e001      	b.n	800591e <HAL_RCCEx_GetPeriphCLKFreq+0x502>
                pllp = 7U;
 800591a:	2307      	movs	r3, #7
 800591c:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 800591e:	69ba      	ldr	r2, [r7, #24]
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	fbb2 f3f3 	udiv	r3, r2, r3
 8005926:	61fb      	str	r3, [r7, #28]
      break;
 8005928:	f000 bc8f 	b.w	800624a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 800592c:	4b1f      	ldr	r3, [pc, #124]	; (80059ac <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800592e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005932:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8005936:	60fb      	str	r3, [r7, #12]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800593e:	d016      	beq.n	800596e <HAL_RCCEx_GetPeriphCLKFreq+0x552>
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005946:	f200 809b 	bhi.w	8005a80 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005950:	d032      	beq.n	80059b8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005958:	f200 8092 	bhi.w	8005a80 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2b00      	cmp	r3, #0
 8005960:	f000 8084 	beq.w	8005a6c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800596a:	d052      	beq.n	8005a12 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          break;
 800596c:	e088      	b.n	8005a80 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800596e:	4b0f      	ldr	r3, [pc, #60]	; (80059ac <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f003 0302 	and.w	r3, r3, #2
 8005976:	2b02      	cmp	r3, #2
 8005978:	f040 8084 	bne.w	8005a84 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800597c:	4b0b      	ldr	r3, [pc, #44]	; (80059ac <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f003 0308 	and.w	r3, r3, #8
 8005984:	2b00      	cmp	r3, #0
 8005986:	d005      	beq.n	8005994 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8005988:	4b08      	ldr	r3, [pc, #32]	; (80059ac <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	091b      	lsrs	r3, r3, #4
 800598e:	f003 030f 	and.w	r3, r3, #15
 8005992:	e005      	b.n	80059a0 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
 8005994:	4b05      	ldr	r3, [pc, #20]	; (80059ac <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005996:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800599a:	0a1b      	lsrs	r3, r3, #8
 800599c:	f003 030f 	and.w	r3, r3, #15
 80059a0:	4a03      	ldr	r2, [pc, #12]	; (80059b0 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80059a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059a6:	61fb      	str	r3, [r7, #28]
          break;
 80059a8:	e06c      	b.n	8005a84 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 80059aa:	bf00      	nop
 80059ac:	40021000 	.word	0x40021000
 80059b0:	08009c30 	.word	0x08009c30
 80059b4:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80059b8:	4ba5      	ldr	r3, [pc, #660]	; (8005c50 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80059c4:	d160      	bne.n	8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80059c6:	4ba2      	ldr	r3, [pc, #648]	; (8005c50 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80059c8:	68db      	ldr	r3, [r3, #12]
 80059ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059d2:	d159      	bne.n	8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80059d4:	4b9e      	ldr	r3, [pc, #632]	; (8005c50 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80059d6:	68db      	ldr	r3, [r3, #12]
 80059d8:	0a1b      	lsrs	r3, r3, #8
 80059da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059de:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80059e0:	69bb      	ldr	r3, [r7, #24]
 80059e2:	68ba      	ldr	r2, [r7, #8]
 80059e4:	fb03 f202 	mul.w	r2, r3, r2
 80059e8:	4b99      	ldr	r3, [pc, #612]	; (8005c50 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80059ea:	68db      	ldr	r3, [r3, #12]
 80059ec:	091b      	lsrs	r3, r3, #4
 80059ee:	f003 030f 	and.w	r3, r3, #15
 80059f2:	3301      	adds	r3, #1
 80059f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80059f8:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80059fa:	4b95      	ldr	r3, [pc, #596]	; (8005c50 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80059fc:	68db      	ldr	r3, [r3, #12]
 80059fe:	0d5b      	lsrs	r3, r3, #21
 8005a00:	f003 0303 	and.w	r3, r3, #3
 8005a04:	3301      	adds	r3, #1
 8005a06:	005b      	lsls	r3, r3, #1
 8005a08:	69ba      	ldr	r2, [r7, #24]
 8005a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a0e:	61fb      	str	r3, [r7, #28]
          break;
 8005a10:	e03a      	b.n	8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8005a12:	4b8f      	ldr	r3, [pc, #572]	; (8005c50 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a1e:	d135      	bne.n	8005a8c <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8005a20:	4b8b      	ldr	r3, [pc, #556]	; (8005c50 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005a22:	691b      	ldr	r3, [r3, #16]
 8005a24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a2c:	d12e      	bne.n	8005a8c <HAL_RCCEx_GetPeriphCLKFreq+0x670>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005a2e:	4b88      	ldr	r3, [pc, #544]	; (8005c50 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005a30:	691b      	ldr	r3, [r3, #16]
 8005a32:	0a1b      	lsrs	r3, r3, #8
 8005a34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a38:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8005a3a:	69bb      	ldr	r3, [r7, #24]
 8005a3c:	68ba      	ldr	r2, [r7, #8]
 8005a3e:	fb03 f202 	mul.w	r2, r3, r2
 8005a42:	4b83      	ldr	r3, [pc, #524]	; (8005c50 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005a44:	691b      	ldr	r3, [r3, #16]
 8005a46:	091b      	lsrs	r3, r3, #4
 8005a48:	f003 030f 	and.w	r3, r3, #15
 8005a4c:	3301      	adds	r3, #1
 8005a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a52:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8005a54:	4b7e      	ldr	r3, [pc, #504]	; (8005c50 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005a56:	691b      	ldr	r3, [r3, #16]
 8005a58:	0d5b      	lsrs	r3, r3, #21
 8005a5a:	f003 0303 	and.w	r3, r3, #3
 8005a5e:	3301      	adds	r3, #1
 8005a60:	005b      	lsls	r3, r3, #1
 8005a62:	69ba      	ldr	r2, [r7, #24]
 8005a64:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a68:	61fb      	str	r3, [r7, #28]
          break;
 8005a6a:	e00f      	b.n	8005a8c <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8005a6c:	4b78      	ldr	r3, [pc, #480]	; (8005c50 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005a6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005a72:	f003 0302 	and.w	r3, r3, #2
 8005a76:	2b02      	cmp	r3, #2
 8005a78:	d10a      	bne.n	8005a90 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            frequency = HSI48_VALUE;
 8005a7a:	4b76      	ldr	r3, [pc, #472]	; (8005c54 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8005a7c:	61fb      	str	r3, [r7, #28]
          break;
 8005a7e:	e007      	b.n	8005a90 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          break;
 8005a80:	bf00      	nop
 8005a82:	e3e2      	b.n	800624a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8005a84:	bf00      	nop
 8005a86:	e3e0      	b.n	800624a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8005a88:	bf00      	nop
 8005a8a:	e3de      	b.n	800624a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8005a8c:	bf00      	nop
 8005a8e:	e3dc      	b.n	800624a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8005a90:	bf00      	nop
      break;
 8005a92:	e3da      	b.n	800624a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8005a94:	4b6e      	ldr	r3, [pc, #440]	; (8005c50 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a9a:	f003 0303 	and.w	r3, r3, #3
 8005a9e:	60fb      	str	r3, [r7, #12]
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2b03      	cmp	r3, #3
 8005aa4:	d827      	bhi.n	8005af6 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8005aa6:	a201      	add	r2, pc, #4	; (adr r2, 8005aac <HAL_RCCEx_GetPeriphCLKFreq+0x690>)
 8005aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aac:	08005abd 	.word	0x08005abd
 8005ab0:	08005ac5 	.word	0x08005ac5
 8005ab4:	08005acd 	.word	0x08005acd
 8005ab8:	08005ae1 	.word	0x08005ae1
          frequency = HAL_RCC_GetPCLK2Freq();
 8005abc:	f7ff f8a8 	bl	8004c10 <HAL_RCC_GetPCLK2Freq>
 8005ac0:	61f8      	str	r0, [r7, #28]
          break;
 8005ac2:	e01d      	b.n	8005b00 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          frequency = HAL_RCC_GetSysClockFreq();
 8005ac4:	f7fe fff6 	bl	8004ab4 <HAL_RCC_GetSysClockFreq>
 8005ac8:	61f8      	str	r0, [r7, #28]
          break;
 8005aca:	e019      	b.n	8005b00 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005acc:	4b60      	ldr	r3, [pc, #384]	; (8005c50 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ad4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ad8:	d10f      	bne.n	8005afa <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = HSI_VALUE;
 8005ada:	4b5f      	ldr	r3, [pc, #380]	; (8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005adc:	61fb      	str	r3, [r7, #28]
          break;
 8005ade:	e00c      	b.n	8005afa <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005ae0:	4b5b      	ldr	r3, [pc, #364]	; (8005c50 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ae6:	f003 0302 	and.w	r3, r3, #2
 8005aea:	2b02      	cmp	r3, #2
 8005aec:	d107      	bne.n	8005afe <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
            frequency = LSE_VALUE;
 8005aee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005af2:	61fb      	str	r3, [r7, #28]
          break;
 8005af4:	e003      	b.n	8005afe <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
          break;
 8005af6:	bf00      	nop
 8005af8:	e3a8      	b.n	800624c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005afa:	bf00      	nop
 8005afc:	e3a6      	b.n	800624c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005afe:	bf00      	nop
        break;
 8005b00:	e3a4      	b.n	800624c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8005b02:	4b53      	ldr	r3, [pc, #332]	; (8005c50 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b08:	f003 030c 	and.w	r3, r3, #12
 8005b0c:	60fb      	str	r3, [r7, #12]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2b0c      	cmp	r3, #12
 8005b12:	d83a      	bhi.n	8005b8a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8005b14:	a201      	add	r2, pc, #4	; (adr r2, 8005b1c <HAL_RCCEx_GetPeriphCLKFreq+0x700>)
 8005b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b1a:	bf00      	nop
 8005b1c:	08005b51 	.word	0x08005b51
 8005b20:	08005b8b 	.word	0x08005b8b
 8005b24:	08005b8b 	.word	0x08005b8b
 8005b28:	08005b8b 	.word	0x08005b8b
 8005b2c:	08005b59 	.word	0x08005b59
 8005b30:	08005b8b 	.word	0x08005b8b
 8005b34:	08005b8b 	.word	0x08005b8b
 8005b38:	08005b8b 	.word	0x08005b8b
 8005b3c:	08005b61 	.word	0x08005b61
 8005b40:	08005b8b 	.word	0x08005b8b
 8005b44:	08005b8b 	.word	0x08005b8b
 8005b48:	08005b8b 	.word	0x08005b8b
 8005b4c:	08005b75 	.word	0x08005b75
          frequency = HAL_RCC_GetPCLK1Freq();
 8005b50:	f7ff f848 	bl	8004be4 <HAL_RCC_GetPCLK1Freq>
 8005b54:	61f8      	str	r0, [r7, #28]
          break;
 8005b56:	e01d      	b.n	8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = HAL_RCC_GetSysClockFreq();
 8005b58:	f7fe ffac 	bl	8004ab4 <HAL_RCC_GetSysClockFreq>
 8005b5c:	61f8      	str	r0, [r7, #28]
          break;
 8005b5e:	e019      	b.n	8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005b60:	4b3b      	ldr	r3, [pc, #236]	; (8005c50 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b6c:	d10f      	bne.n	8005b8e <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = HSI_VALUE;
 8005b6e:	4b3a      	ldr	r3, [pc, #232]	; (8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005b70:	61fb      	str	r3, [r7, #28]
          break;
 8005b72:	e00c      	b.n	8005b8e <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005b74:	4b36      	ldr	r3, [pc, #216]	; (8005c50 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b7a:	f003 0302 	and.w	r3, r3, #2
 8005b7e:	2b02      	cmp	r3, #2
 8005b80:	d107      	bne.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
            frequency = LSE_VALUE;
 8005b82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b86:	61fb      	str	r3, [r7, #28]
          break;
 8005b88:	e003      	b.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
          break;
 8005b8a:	bf00      	nop
 8005b8c:	e35e      	b.n	800624c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005b8e:	bf00      	nop
 8005b90:	e35c      	b.n	800624c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005b92:	bf00      	nop
        break;
 8005b94:	e35a      	b.n	800624c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8005b96:	4b2e      	ldr	r3, [pc, #184]	; (8005c50 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b9c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005ba0:	60fb      	str	r3, [r7, #12]
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2b30      	cmp	r3, #48	; 0x30
 8005ba6:	d021      	beq.n	8005bec <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2b30      	cmp	r3, #48	; 0x30
 8005bac:	d829      	bhi.n	8005c02 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2b20      	cmp	r3, #32
 8005bb2:	d011      	beq.n	8005bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2b20      	cmp	r3, #32
 8005bb8:	d823      	bhi.n	8005c02 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d003      	beq.n	8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2b10      	cmp	r3, #16
 8005bc4:	d004      	beq.n	8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
          break;
 8005bc6:	e01c      	b.n	8005c02 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005bc8:	f7ff f80c 	bl	8004be4 <HAL_RCC_GetPCLK1Freq>
 8005bcc:	61f8      	str	r0, [r7, #28]
          break;
 8005bce:	e01d      	b.n	8005c0c <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          frequency = HAL_RCC_GetSysClockFreq();
 8005bd0:	f7fe ff70 	bl	8004ab4 <HAL_RCC_GetSysClockFreq>
 8005bd4:	61f8      	str	r0, [r7, #28]
          break;
 8005bd6:	e019      	b.n	8005c0c <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005bd8:	4b1d      	ldr	r3, [pc, #116]	; (8005c50 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005be0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005be4:	d10f      	bne.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = HSI_VALUE;
 8005be6:	4b1c      	ldr	r3, [pc, #112]	; (8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005be8:	61fb      	str	r3, [r7, #28]
          break;
 8005bea:	e00c      	b.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005bec:	4b18      	ldr	r3, [pc, #96]	; (8005c50 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bf2:	f003 0302 	and.w	r3, r3, #2
 8005bf6:	2b02      	cmp	r3, #2
 8005bf8:	d107      	bne.n	8005c0a <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
            frequency = LSE_VALUE;
 8005bfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bfe:	61fb      	str	r3, [r7, #28]
          break;
 8005c00:	e003      	b.n	8005c0a <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
          break;
 8005c02:	bf00      	nop
 8005c04:	e322      	b.n	800624c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005c06:	bf00      	nop
 8005c08:	e320      	b.n	800624c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005c0a:	bf00      	nop
        break;
 8005c0c:	e31e      	b.n	800624c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8005c0e:	4b10      	ldr	r3, [pc, #64]	; (8005c50 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c14:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005c18:	60fb      	str	r3, [r7, #12]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2bc0      	cmp	r3, #192	; 0xc0
 8005c1e:	d027      	beq.n	8005c70 <HAL_RCCEx_GetPeriphCLKFreq+0x854>
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2bc0      	cmp	r3, #192	; 0xc0
 8005c24:	d82f      	bhi.n	8005c86 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2b80      	cmp	r3, #128	; 0x80
 8005c2a:	d017      	beq.n	8005c5c <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2b80      	cmp	r3, #128	; 0x80
 8005c30:	d829      	bhi.n	8005c86 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d003      	beq.n	8005c40 <HAL_RCCEx_GetPeriphCLKFreq+0x824>
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2b40      	cmp	r3, #64	; 0x40
 8005c3c:	d004      	beq.n	8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
          break;
 8005c3e:	e022      	b.n	8005c86 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005c40:	f7fe ffd0 	bl	8004be4 <HAL_RCC_GetPCLK1Freq>
 8005c44:	61f8      	str	r0, [r7, #28]
          break;
 8005c46:	e023      	b.n	8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
          frequency = HAL_RCC_GetSysClockFreq();
 8005c48:	f7fe ff34 	bl	8004ab4 <HAL_RCC_GetSysClockFreq>
 8005c4c:	61f8      	str	r0, [r7, #28]
          break;
 8005c4e:	e01f      	b.n	8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
 8005c50:	40021000 	.word	0x40021000
 8005c54:	02dc6c00 	.word	0x02dc6c00
 8005c58:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005c5c:	4b9b      	ldr	r3, [pc, #620]	; (8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c68:	d10f      	bne.n	8005c8a <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = HSI_VALUE;
 8005c6a:	4b99      	ldr	r3, [pc, #612]	; (8005ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8005c6c:	61fb      	str	r3, [r7, #28]
          break;
 8005c6e:	e00c      	b.n	8005c8a <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005c70:	4b96      	ldr	r3, [pc, #600]	; (8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c76:	f003 0302 	and.w	r3, r3, #2
 8005c7a:	2b02      	cmp	r3, #2
 8005c7c:	d107      	bne.n	8005c8e <HAL_RCCEx_GetPeriphCLKFreq+0x872>
            frequency = LSE_VALUE;
 8005c7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c82:	61fb      	str	r3, [r7, #28]
          break;
 8005c84:	e003      	b.n	8005c8e <HAL_RCCEx_GetPeriphCLKFreq+0x872>
          break;
 8005c86:	bf00      	nop
 8005c88:	e2e0      	b.n	800624c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005c8a:	bf00      	nop
 8005c8c:	e2de      	b.n	800624c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005c8e:	bf00      	nop
        break;
 8005c90:	e2dc      	b.n	800624c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8005c92:	4b8e      	ldr	r3, [pc, #568]	; (8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005c94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c9c:	60fb      	str	r3, [r7, #12]
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ca4:	d025      	beq.n	8005cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005cac:	d82c      	bhi.n	8005d08 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cb4:	d013      	beq.n	8005cde <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cbc:	d824      	bhi.n	8005d08 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d004      	beq.n	8005cce <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cca:	d004      	beq.n	8005cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 8005ccc:	e01c      	b.n	8005d08 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005cce:	f7fe ff89 	bl	8004be4 <HAL_RCC_GetPCLK1Freq>
 8005cd2:	61f8      	str	r0, [r7, #28]
          break;
 8005cd4:	e01d      	b.n	8005d12 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = HAL_RCC_GetSysClockFreq();
 8005cd6:	f7fe feed 	bl	8004ab4 <HAL_RCC_GetSysClockFreq>
 8005cda:	61f8      	str	r0, [r7, #28]
          break;
 8005cdc:	e019      	b.n	8005d12 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005cde:	4b7b      	ldr	r3, [pc, #492]	; (8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ce6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cea:	d10f      	bne.n	8005d0c <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = HSI_VALUE;
 8005cec:	4b78      	ldr	r3, [pc, #480]	; (8005ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8005cee:	61fb      	str	r3, [r7, #28]
          break;
 8005cf0:	e00c      	b.n	8005d0c <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005cf2:	4b76      	ldr	r3, [pc, #472]	; (8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005cf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cf8:	f003 0302 	and.w	r3, r3, #2
 8005cfc:	2b02      	cmp	r3, #2
 8005cfe:	d107      	bne.n	8005d10 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
            frequency = LSE_VALUE;
 8005d00:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d04:	61fb      	str	r3, [r7, #28]
          break;
 8005d06:	e003      	b.n	8005d10 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
          break;
 8005d08:	bf00      	nop
 8005d0a:	e29f      	b.n	800624c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005d0c:	bf00      	nop
 8005d0e:	e29d      	b.n	800624c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005d10:	bf00      	nop
        break;
 8005d12:	e29b      	b.n	800624c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8005d14:	4b6d      	ldr	r3, [pc, #436]	; (8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d1a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005d1e:	60fb      	str	r3, [r7, #12]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d26:	d025      	beq.n	8005d74 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d2e:	d82c      	bhi.n	8005d8a <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d36:	d013      	beq.n	8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d3e:	d824      	bhi.n	8005d8a <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d004      	beq.n	8005d50 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d4c:	d004      	beq.n	8005d58 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
          break;
 8005d4e:	e01c      	b.n	8005d8a <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005d50:	f7fe ff48 	bl	8004be4 <HAL_RCC_GetPCLK1Freq>
 8005d54:	61f8      	str	r0, [r7, #28]
          break;
 8005d56:	e01d      	b.n	8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = HAL_RCC_GetSysClockFreq();
 8005d58:	f7fe feac 	bl	8004ab4 <HAL_RCC_GetSysClockFreq>
 8005d5c:	61f8      	str	r0, [r7, #28]
          break;
 8005d5e:	e019      	b.n	8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005d60:	4b5a      	ldr	r3, [pc, #360]	; (8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d6c:	d10f      	bne.n	8005d8e <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = HSI_VALUE;
 8005d6e:	4b58      	ldr	r3, [pc, #352]	; (8005ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8005d70:	61fb      	str	r3, [r7, #28]
          break;
 8005d72:	e00c      	b.n	8005d8e <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005d74:	4b55      	ldr	r3, [pc, #340]	; (8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d7a:	f003 0302 	and.w	r3, r3, #2
 8005d7e:	2b02      	cmp	r3, #2
 8005d80:	d107      	bne.n	8005d92 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
            frequency = LSE_VALUE;
 8005d82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d86:	61fb      	str	r3, [r7, #28]
          break;
 8005d88:	e003      	b.n	8005d92 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
          break;
 8005d8a:	bf00      	nop
 8005d8c:	e25e      	b.n	800624c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005d8e:	bf00      	nop
 8005d90:	e25c      	b.n	800624c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005d92:	bf00      	nop
        break;
 8005d94:	e25a      	b.n	800624c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005d96:	4b4d      	ldr	r3, [pc, #308]	; (8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d9c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005da0:	60fb      	str	r3, [r7, #12]
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005da8:	d007      	beq.n	8005dba <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005db0:	d12f      	bne.n	8005e12 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          frequency = HAL_RCC_GetSysClockFreq();
 8005db2:	f7fe fe7f 	bl	8004ab4 <HAL_RCC_GetSysClockFreq>
 8005db6:	61f8      	str	r0, [r7, #28]
          break;
 8005db8:	e02e      	b.n	8005e18 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8005dba:	4b44      	ldr	r3, [pc, #272]	; (8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005dc2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005dc6:	d126      	bne.n	8005e16 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 8005dc8:	4b40      	ldr	r3, [pc, #256]	; (8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005dca:	691b      	ldr	r3, [r3, #16]
 8005dcc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d020      	beq.n	8005e16 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005dd4:	4b3d      	ldr	r3, [pc, #244]	; (8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005dd6:	691b      	ldr	r3, [r3, #16]
 8005dd8:	0a1b      	lsrs	r3, r3, #8
 8005dda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005dde:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8005de0:	69bb      	ldr	r3, [r7, #24]
 8005de2:	68ba      	ldr	r2, [r7, #8]
 8005de4:	fb03 f202 	mul.w	r2, r3, r2
 8005de8:	4b38      	ldr	r3, [pc, #224]	; (8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005dea:	691b      	ldr	r3, [r3, #16]
 8005dec:	091b      	lsrs	r3, r3, #4
 8005dee:	f003 030f 	and.w	r3, r3, #15
 8005df2:	3301      	adds	r3, #1
 8005df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005df8:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8005dfa:	4b34      	ldr	r3, [pc, #208]	; (8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005dfc:	691b      	ldr	r3, [r3, #16]
 8005dfe:	0e5b      	lsrs	r3, r3, #25
 8005e00:	f003 0303 	and.w	r3, r3, #3
 8005e04:	3301      	adds	r3, #1
 8005e06:	005b      	lsls	r3, r3, #1
 8005e08:	69ba      	ldr	r2, [r7, #24]
 8005e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e0e:	61fb      	str	r3, [r7, #28]
          break;
 8005e10:	e001      	b.n	8005e16 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
          break;
 8005e12:	bf00      	nop
 8005e14:	e21a      	b.n	800624c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005e16:	bf00      	nop
        break;
 8005e18:	e218      	b.n	800624c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8005e1a:	4b2c      	ldr	r3, [pc, #176]	; (8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005e1c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e20:	f003 0304 	and.w	r3, r3, #4
 8005e24:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d103      	bne.n	8005e34 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetPCLK2Freq();
 8005e2c:	f7fe fef0 	bl	8004c10 <HAL_RCC_GetPCLK2Freq>
 8005e30:	61f8      	str	r0, [r7, #28]
        break;
 8005e32:	e20b      	b.n	800624c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          frequency = HAL_RCC_GetSysClockFreq();
 8005e34:	f7fe fe3e 	bl	8004ab4 <HAL_RCC_GetSysClockFreq>
 8005e38:	61f8      	str	r0, [r7, #28]
        break;
 8005e3a:	e207      	b.n	800624c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 8005e3c:	4b23      	ldr	r3, [pc, #140]	; (8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005e3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e42:	f003 0318 	and.w	r3, r3, #24
 8005e46:	60fb      	str	r3, [r7, #12]
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2b10      	cmp	r3, #16
 8005e4c:	d010      	beq.n	8005e70 <HAL_RCCEx_GetPeriphCLKFreq+0xa54>
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2b10      	cmp	r3, #16
 8005e52:	d834      	bhi.n	8005ebe <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d003      	beq.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2b08      	cmp	r3, #8
 8005e5e:	d024      	beq.n	8005eaa <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
          break;
 8005e60:	e02d      	b.n	8005ebe <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8005e62:	69b9      	ldr	r1, [r7, #24]
 8005e64:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005e68:	f000 fbf2 	bl	8006650 <RCCEx_GetSAIxPeriphCLKFreq>
 8005e6c:	61f8      	str	r0, [r7, #28]
          break;
 8005e6e:	e02b      	b.n	8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005e70:	4b16      	ldr	r3, [pc, #88]	; (8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f003 0302 	and.w	r3, r3, #2
 8005e78:	2b02      	cmp	r3, #2
 8005e7a:	d122      	bne.n	8005ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005e7c:	4b13      	ldr	r3, [pc, #76]	; (8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f003 0308 	and.w	r3, r3, #8
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d005      	beq.n	8005e94 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 8005e88:	4b10      	ldr	r3, [pc, #64]	; (8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	091b      	lsrs	r3, r3, #4
 8005e8e:	f003 030f 	and.w	r3, r3, #15
 8005e92:	e005      	b.n	8005ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
 8005e94:	4b0d      	ldr	r3, [pc, #52]	; (8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005e96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e9a:	0a1b      	lsrs	r3, r3, #8
 8005e9c:	f003 030f 	and.w	r3, r3, #15
 8005ea0:	4a0c      	ldr	r2, [pc, #48]	; (8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8005ea2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ea6:	61fb      	str	r3, [r7, #28]
          break;
 8005ea8:	e00b      	b.n	8005ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005eaa:	4b08      	ldr	r3, [pc, #32]	; (8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005eb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005eb6:	d106      	bne.n	8005ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
            frequency = HSI_VALUE;
 8005eb8:	4b05      	ldr	r3, [pc, #20]	; (8005ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8005eba:	61fb      	str	r3, [r7, #28]
          break;
 8005ebc:	e003      	b.n	8005ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
          break;
 8005ebe:	bf00      	nop
 8005ec0:	e1c4      	b.n	800624c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005ec2:	bf00      	nop
 8005ec4:	e1c2      	b.n	800624c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005ec6:	bf00      	nop
        break;
 8005ec8:	e1c0      	b.n	800624c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 8005eca:	bf00      	nop
 8005ecc:	40021000 	.word	0x40021000
 8005ed0:	00f42400 	.word	0x00f42400
 8005ed4:	08009c30 	.word	0x08009c30
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8005ed8:	4b96      	ldr	r3, [pc, #600]	; (8006134 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ede:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005ee2:	60fb      	str	r3, [r7, #12]
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005eea:	d013      	beq.n	8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ef2:	d819      	bhi.n	8005f28 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d004      	beq.n	8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f00:	d004      	beq.n	8005f0c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>
          break;
 8005f02:	e011      	b.n	8005f28 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005f04:	f7fe fe6e 	bl	8004be4 <HAL_RCC_GetPCLK1Freq>
 8005f08:	61f8      	str	r0, [r7, #28]
          break;
 8005f0a:	e010      	b.n	8005f2e <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          frequency = HAL_RCC_GetSysClockFreq();
 8005f0c:	f7fe fdd2 	bl	8004ab4 <HAL_RCC_GetSysClockFreq>
 8005f10:	61f8      	str	r0, [r7, #28]
          break;
 8005f12:	e00c      	b.n	8005f2e <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005f14:	4b87      	ldr	r3, [pc, #540]	; (8006134 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f20:	d104      	bne.n	8005f2c <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
            frequency = HSI_VALUE;
 8005f22:	4b85      	ldr	r3, [pc, #532]	; (8006138 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8005f24:	61fb      	str	r3, [r7, #28]
          break;
 8005f26:	e001      	b.n	8005f2c <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
          break;
 8005f28:	bf00      	nop
 8005f2a:	e18f      	b.n	800624c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005f2c:	bf00      	nop
        break;
 8005f2e:	e18d      	b.n	800624c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8005f30:	4b80      	ldr	r3, [pc, #512]	; (8006134 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f36:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005f3a:	60fb      	str	r3, [r7, #12]
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f42:	d013      	beq.n	8005f6c <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f4a:	d819      	bhi.n	8005f80 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d004      	beq.n	8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0xb40>
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f58:	d004      	beq.n	8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          break;
 8005f5a:	e011      	b.n	8005f80 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005f5c:	f7fe fe42 	bl	8004be4 <HAL_RCC_GetPCLK1Freq>
 8005f60:	61f8      	str	r0, [r7, #28]
          break;
 8005f62:	e010      	b.n	8005f86 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = HAL_RCC_GetSysClockFreq();
 8005f64:	f7fe fda6 	bl	8004ab4 <HAL_RCC_GetSysClockFreq>
 8005f68:	61f8      	str	r0, [r7, #28]
          break;
 8005f6a:	e00c      	b.n	8005f86 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005f6c:	4b71      	ldr	r3, [pc, #452]	; (8006134 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f78:	d104      	bne.n	8005f84 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
            frequency = HSI_VALUE;
 8005f7a:	4b6f      	ldr	r3, [pc, #444]	; (8006138 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8005f7c:	61fb      	str	r3, [r7, #28]
          break;
 8005f7e:	e001      	b.n	8005f84 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          break;
 8005f80:	bf00      	nop
 8005f82:	e163      	b.n	800624c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005f84:	bf00      	nop
        break;
 8005f86:	e161      	b.n	800624c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8005f88:	4b6a      	ldr	r3, [pc, #424]	; (8006134 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f8e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005f92:	60fb      	str	r3, [r7, #12]
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f9a:	d013      	beq.n	8005fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005fa2:	d819      	bhi.n	8005fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d004      	beq.n	8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb98>
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fb0:	d004      	beq.n	8005fbc <HAL_RCCEx_GetPeriphCLKFreq+0xba0>
          break;
 8005fb2:	e011      	b.n	8005fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005fb4:	f7fe fe16 	bl	8004be4 <HAL_RCC_GetPCLK1Freq>
 8005fb8:	61f8      	str	r0, [r7, #28]
          break;
 8005fba:	e010      	b.n	8005fde <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          frequency = HAL_RCC_GetSysClockFreq();
 8005fbc:	f7fe fd7a 	bl	8004ab4 <HAL_RCC_GetSysClockFreq>
 8005fc0:	61f8      	str	r0, [r7, #28]
          break;
 8005fc2:	e00c      	b.n	8005fde <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005fc4:	4b5b      	ldr	r3, [pc, #364]	; (8006134 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fd0:	d104      	bne.n	8005fdc <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
            frequency = HSI_VALUE;
 8005fd2:	4b59      	ldr	r3, [pc, #356]	; (8006138 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8005fd4:	61fb      	str	r3, [r7, #28]
          break;
 8005fd6:	e001      	b.n	8005fdc <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
          break;
 8005fd8:	bf00      	nop
 8005fda:	e137      	b.n	800624c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005fdc:	bf00      	nop
        break;
 8005fde:	e135      	b.n	800624c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8005fe0:	4b54      	ldr	r3, [pc, #336]	; (8006134 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005fe2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005fe6:	f003 0303 	and.w	r3, r3, #3
 8005fea:	60fb      	str	r3, [r7, #12]
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2b02      	cmp	r3, #2
 8005ff0:	d011      	beq.n	8006016 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2b02      	cmp	r3, #2
 8005ff6:	d818      	bhi.n	800602a <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d003      	beq.n	8006006 <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2b01      	cmp	r3, #1
 8006002:	d004      	beq.n	800600e <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
          break;
 8006004:	e011      	b.n	800602a <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006006:	f7fe fded 	bl	8004be4 <HAL_RCC_GetPCLK1Freq>
 800600a:	61f8      	str	r0, [r7, #28]
          break;
 800600c:	e010      	b.n	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          frequency = HAL_RCC_GetSysClockFreq();
 800600e:	f7fe fd51 	bl	8004ab4 <HAL_RCC_GetSysClockFreq>
 8006012:	61f8      	str	r0, [r7, #28]
          break;
 8006014:	e00c      	b.n	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006016:	4b47      	ldr	r3, [pc, #284]	; (8006134 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800601e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006022:	d104      	bne.n	800602e <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
            frequency = HSI_VALUE;
 8006024:	4b44      	ldr	r3, [pc, #272]	; (8006138 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8006026:	61fb      	str	r3, [r7, #28]
          break;
 8006028:	e001      	b.n	800602e <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
          break;
 800602a:	bf00      	nop
 800602c:	e10e      	b.n	800624c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800602e:	bf00      	nop
        break;
 8006030:	e10c      	b.n	800624c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006032:	4b40      	ldr	r3, [pc, #256]	; (8006134 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006034:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006038:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800603c:	60fb      	str	r3, [r7, #12]
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006044:	d02c      	beq.n	80060a0 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800604c:	d833      	bhi.n	80060b6 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006054:	d01a      	beq.n	800608c <HAL_RCCEx_GetPeriphCLKFreq+0xc70>
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800605c:	d82b      	bhi.n	80060b6 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d004      	beq.n	800606e <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800606a:	d004      	beq.n	8006076 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
          break;
 800606c:	e023      	b.n	80060b6 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          frequency = HAL_RCC_GetPCLK1Freq();
 800606e:	f7fe fdb9 	bl	8004be4 <HAL_RCC_GetPCLK1Freq>
 8006072:	61f8      	str	r0, [r7, #28]
          break;
 8006074:	e026      	b.n	80060c4 <HAL_RCCEx_GetPeriphCLKFreq+0xca8>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006076:	4b2f      	ldr	r3, [pc, #188]	; (8006134 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006078:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800607c:	f003 0302 	and.w	r3, r3, #2
 8006080:	2b02      	cmp	r3, #2
 8006082:	d11a      	bne.n	80060ba <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
              frequency = LSI_VALUE;
 8006084:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006088:	61fb      	str	r3, [r7, #28]
          break;
 800608a:	e016      	b.n	80060ba <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800608c:	4b29      	ldr	r3, [pc, #164]	; (8006134 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006094:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006098:	d111      	bne.n	80060be <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = HSI_VALUE;
 800609a:	4b27      	ldr	r3, [pc, #156]	; (8006138 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800609c:	61fb      	str	r3, [r7, #28]
          break;
 800609e:	e00e      	b.n	80060be <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80060a0:	4b24      	ldr	r3, [pc, #144]	; (8006134 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80060a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060a6:	f003 0302 	and.w	r3, r3, #2
 80060aa:	2b02      	cmp	r3, #2
 80060ac:	d109      	bne.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
            frequency = LSE_VALUE;
 80060ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060b2:	61fb      	str	r3, [r7, #28]
          break;
 80060b4:	e005      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
          break;
 80060b6:	bf00      	nop
 80060b8:	e0c8      	b.n	800624c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80060ba:	bf00      	nop
 80060bc:	e0c6      	b.n	800624c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80060be:	bf00      	nop
 80060c0:	e0c4      	b.n	800624c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80060c2:	bf00      	nop
        break;
 80060c4:	e0c2      	b.n	800624c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80060c6:	4b1b      	ldr	r3, [pc, #108]	; (8006134 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80060c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060cc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80060d0:	60fb      	str	r3, [r7, #12]
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80060d8:	d030      	beq.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0xd20>
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80060e0:	d837      	bhi.n	8006152 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80060e8:	d01a      	beq.n	8006120 <HAL_RCCEx_GetPeriphCLKFreq+0xd04>
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80060f0:	d82f      	bhi.n	8006152 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d004      	beq.n	8006102 <HAL_RCCEx_GetPeriphCLKFreq+0xce6>
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060fe:	d004      	beq.n	800610a <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
          break;
 8006100:	e027      	b.n	8006152 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006102:	f7fe fd6f 	bl	8004be4 <HAL_RCC_GetPCLK1Freq>
 8006106:	61f8      	str	r0, [r7, #28]
          break;
 8006108:	e02a      	b.n	8006160 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800610a:	4b0a      	ldr	r3, [pc, #40]	; (8006134 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800610c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006110:	f003 0302 	and.w	r3, r3, #2
 8006114:	2b02      	cmp	r3, #2
 8006116:	d11e      	bne.n	8006156 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
              frequency = LSI_VALUE;
 8006118:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800611c:	61fb      	str	r3, [r7, #28]
          break;
 800611e:	e01a      	b.n	8006156 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006120:	4b04      	ldr	r3, [pc, #16]	; (8006134 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006128:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800612c:	d115      	bne.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = HSI_VALUE;
 800612e:	4b02      	ldr	r3, [pc, #8]	; (8006138 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8006130:	61fb      	str	r3, [r7, #28]
          break;
 8006132:	e012      	b.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 8006134:	40021000 	.word	0x40021000
 8006138:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800613c:	4b46      	ldr	r3, [pc, #280]	; (8006258 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800613e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006142:	f003 0302 	and.w	r3, r3, #2
 8006146:	2b02      	cmp	r3, #2
 8006148:	d109      	bne.n	800615e <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
            frequency = LSE_VALUE;
 800614a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800614e:	61fb      	str	r3, [r7, #28]
          break;
 8006150:	e005      	b.n	800615e <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
          break;
 8006152:	bf00      	nop
 8006154:	e07a      	b.n	800624c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006156:	bf00      	nop
 8006158:	e078      	b.n	800624c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800615a:	bf00      	nop
 800615c:	e076      	b.n	800624c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800615e:	bf00      	nop
        break;
 8006160:	e074      	b.n	800624c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8006162:	4b3d      	ldr	r3, [pc, #244]	; (8006258 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006164:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006168:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800616c:	60fb      	str	r3, [r7, #12]
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006174:	d02c      	beq.n	80061d0 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800617c:	d855      	bhi.n	800622a <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d004      	beq.n	800618e <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800618a:	d004      	beq.n	8006196 <HAL_RCCEx_GetPeriphCLKFreq+0xd7a>
          break;
 800618c:	e04d      	b.n	800622a <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          frequency = HAL_RCC_GetSysClockFreq();
 800618e:	f7fe fc91 	bl	8004ab4 <HAL_RCC_GetSysClockFreq>
 8006192:	61f8      	str	r0, [r7, #28]
          break;
 8006194:	e04e      	b.n	8006234 <HAL_RCCEx_GetPeriphCLKFreq+0xe18>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006196:	4b30      	ldr	r3, [pc, #192]	; (8006258 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f003 0302 	and.w	r3, r3, #2
 800619e:	2b02      	cmp	r3, #2
 80061a0:	d145      	bne.n	800622e <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80061a2:	4b2d      	ldr	r3, [pc, #180]	; (8006258 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f003 0308 	and.w	r3, r3, #8
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d005      	beq.n	80061ba <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 80061ae:	4b2a      	ldr	r3, [pc, #168]	; (8006258 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	091b      	lsrs	r3, r3, #4
 80061b4:	f003 030f 	and.w	r3, r3, #15
 80061b8:	e005      	b.n	80061c6 <HAL_RCCEx_GetPeriphCLKFreq+0xdaa>
 80061ba:	4b27      	ldr	r3, [pc, #156]	; (8006258 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80061bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80061c0:	0a1b      	lsrs	r3, r3, #8
 80061c2:	f003 030f 	and.w	r3, r3, #15
 80061c6:	4a25      	ldr	r2, [pc, #148]	; (800625c <HAL_RCCEx_GetPeriphCLKFreq+0xe40>)
 80061c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061cc:	61fb      	str	r3, [r7, #28]
          break;
 80061ce:	e02e      	b.n	800622e <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80061d0:	4b21      	ldr	r3, [pc, #132]	; (8006258 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80061dc:	d129      	bne.n	8006232 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80061de:	4b1e      	ldr	r3, [pc, #120]	; (8006258 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80061e0:	68db      	ldr	r3, [r3, #12]
 80061e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80061e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061ea:	d122      	bne.n	8006232 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80061ec:	4b1a      	ldr	r3, [pc, #104]	; (8006258 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80061ee:	68db      	ldr	r3, [r3, #12]
 80061f0:	0a1b      	lsrs	r3, r3, #8
 80061f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061f6:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80061f8:	69bb      	ldr	r3, [r7, #24]
 80061fa:	68ba      	ldr	r2, [r7, #8]
 80061fc:	fb03 f202 	mul.w	r2, r3, r2
 8006200:	4b15      	ldr	r3, [pc, #84]	; (8006258 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006202:	68db      	ldr	r3, [r3, #12]
 8006204:	091b      	lsrs	r3, r3, #4
 8006206:	f003 030f 	and.w	r3, r3, #15
 800620a:	3301      	adds	r3, #1
 800620c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006210:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8006212:	4b11      	ldr	r3, [pc, #68]	; (8006258 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006214:	68db      	ldr	r3, [r3, #12]
 8006216:	0d5b      	lsrs	r3, r3, #21
 8006218:	f003 0303 	and.w	r3, r3, #3
 800621c:	3301      	adds	r3, #1
 800621e:	005b      	lsls	r3, r3, #1
 8006220:	69ba      	ldr	r2, [r7, #24]
 8006222:	fbb2 f3f3 	udiv	r3, r2, r3
 8006226:	61fb      	str	r3, [r7, #28]
          break;
 8006228:	e003      	b.n	8006232 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          break;
 800622a:	bf00      	nop
 800622c:	e00e      	b.n	800624c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800622e:	bf00      	nop
 8006230:	e00c      	b.n	800624c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006232:	bf00      	nop
        break;
 8006234:	e00a      	b.n	800624c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8006236:	bf00      	nop
 8006238:	e008      	b.n	800624c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800623a:	bf00      	nop
 800623c:	e006      	b.n	800624c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800623e:	bf00      	nop
 8006240:	e004      	b.n	800624c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8006242:	bf00      	nop
 8006244:	e002      	b.n	800624c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8006246:	bf00      	nop
 8006248:	e000      	b.n	800624c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800624a:	bf00      	nop
    }
  }

  return(frequency);
 800624c:	69fb      	ldr	r3, [r7, #28]
}
 800624e:	4618      	mov	r0, r3
 8006250:	3720      	adds	r7, #32
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}
 8006256:	bf00      	nop
 8006258:	40021000 	.word	0x40021000
 800625c:	08009c30 	.word	0x08009c30

08006260 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8006260:	b480      	push	{r7}
 8006262:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8006264:	4b05      	ldr	r3, [pc, #20]	; (800627c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a04      	ldr	r2, [pc, #16]	; (800627c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800626a:	f043 0304 	orr.w	r3, r3, #4
 800626e:	6013      	str	r3, [r2, #0]
}
 8006270:	bf00      	nop
 8006272:	46bd      	mov	sp, r7
 8006274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006278:	4770      	bx	lr
 800627a:	bf00      	nop
 800627c:	40021000 	.word	0x40021000

08006280 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b084      	sub	sp, #16
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800628a:	2300      	movs	r3, #0
 800628c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800628e:	4b72      	ldr	r3, [pc, #456]	; (8006458 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006290:	68db      	ldr	r3, [r3, #12]
 8006292:	f003 0303 	and.w	r3, r3, #3
 8006296:	2b00      	cmp	r3, #0
 8006298:	d00e      	beq.n	80062b8 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800629a:	4b6f      	ldr	r3, [pc, #444]	; (8006458 <RCCEx_PLLSAI1_Config+0x1d8>)
 800629c:	68db      	ldr	r3, [r3, #12]
 800629e:	f003 0203 	and.w	r2, r3, #3
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	429a      	cmp	r2, r3
 80062a8:	d103      	bne.n	80062b2 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
       ||
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d142      	bne.n	8006338 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	73fb      	strb	r3, [r7, #15]
 80062b6:	e03f      	b.n	8006338 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	2b03      	cmp	r3, #3
 80062be:	d018      	beq.n	80062f2 <RCCEx_PLLSAI1_Config+0x72>
 80062c0:	2b03      	cmp	r3, #3
 80062c2:	d825      	bhi.n	8006310 <RCCEx_PLLSAI1_Config+0x90>
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d002      	beq.n	80062ce <RCCEx_PLLSAI1_Config+0x4e>
 80062c8:	2b02      	cmp	r3, #2
 80062ca:	d009      	beq.n	80062e0 <RCCEx_PLLSAI1_Config+0x60>
 80062cc:	e020      	b.n	8006310 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80062ce:	4b62      	ldr	r3, [pc, #392]	; (8006458 <RCCEx_PLLSAI1_Config+0x1d8>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f003 0302 	and.w	r3, r3, #2
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d11d      	bne.n	8006316 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80062da:	2301      	movs	r3, #1
 80062dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80062de:	e01a      	b.n	8006316 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80062e0:	4b5d      	ldr	r3, [pc, #372]	; (8006458 <RCCEx_PLLSAI1_Config+0x1d8>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d116      	bne.n	800631a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80062ec:	2301      	movs	r3, #1
 80062ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80062f0:	e013      	b.n	800631a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80062f2:	4b59      	ldr	r3, [pc, #356]	; (8006458 <RCCEx_PLLSAI1_Config+0x1d8>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d10f      	bne.n	800631e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80062fe:	4b56      	ldr	r3, [pc, #344]	; (8006458 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006306:	2b00      	cmp	r3, #0
 8006308:	d109      	bne.n	800631e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800630a:	2301      	movs	r3, #1
 800630c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800630e:	e006      	b.n	800631e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006310:	2301      	movs	r3, #1
 8006312:	73fb      	strb	r3, [r7, #15]
      break;
 8006314:	e004      	b.n	8006320 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006316:	bf00      	nop
 8006318:	e002      	b.n	8006320 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800631a:	bf00      	nop
 800631c:	e000      	b.n	8006320 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800631e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006320:	7bfb      	ldrb	r3, [r7, #15]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d108      	bne.n	8006338 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8006326:	4b4c      	ldr	r3, [pc, #304]	; (8006458 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006328:	68db      	ldr	r3, [r3, #12]
 800632a:	f023 0203 	bic.w	r2, r3, #3
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4949      	ldr	r1, [pc, #292]	; (8006458 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006334:	4313      	orrs	r3, r2
 8006336:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006338:	7bfb      	ldrb	r3, [r7, #15]
 800633a:	2b00      	cmp	r3, #0
 800633c:	f040 8086 	bne.w	800644c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006340:	4b45      	ldr	r3, [pc, #276]	; (8006458 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a44      	ldr	r2, [pc, #272]	; (8006458 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006346:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800634a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800634c:	f7fc f934 	bl	80025b8 <HAL_GetTick>
 8006350:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006352:	e009      	b.n	8006368 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006354:	f7fc f930 	bl	80025b8 <HAL_GetTick>
 8006358:	4602      	mov	r2, r0
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	1ad3      	subs	r3, r2, r3
 800635e:	2b02      	cmp	r3, #2
 8006360:	d902      	bls.n	8006368 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006362:	2303      	movs	r3, #3
 8006364:	73fb      	strb	r3, [r7, #15]
        break;
 8006366:	e005      	b.n	8006374 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006368:	4b3b      	ldr	r3, [pc, #236]	; (8006458 <RCCEx_PLLSAI1_Config+0x1d8>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006370:	2b00      	cmp	r3, #0
 8006372:	d1ef      	bne.n	8006354 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006374:	7bfb      	ldrb	r3, [r7, #15]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d168      	bne.n	800644c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d113      	bne.n	80063a8 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006380:	4b35      	ldr	r3, [pc, #212]	; (8006458 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006382:	691a      	ldr	r2, [r3, #16]
 8006384:	4b35      	ldr	r3, [pc, #212]	; (800645c <RCCEx_PLLSAI1_Config+0x1dc>)
 8006386:	4013      	ands	r3, r2
 8006388:	687a      	ldr	r2, [r7, #4]
 800638a:	6892      	ldr	r2, [r2, #8]
 800638c:	0211      	lsls	r1, r2, #8
 800638e:	687a      	ldr	r2, [r7, #4]
 8006390:	68d2      	ldr	r2, [r2, #12]
 8006392:	06d2      	lsls	r2, r2, #27
 8006394:	4311      	orrs	r1, r2
 8006396:	687a      	ldr	r2, [r7, #4]
 8006398:	6852      	ldr	r2, [r2, #4]
 800639a:	3a01      	subs	r2, #1
 800639c:	0112      	lsls	r2, r2, #4
 800639e:	430a      	orrs	r2, r1
 80063a0:	492d      	ldr	r1, [pc, #180]	; (8006458 <RCCEx_PLLSAI1_Config+0x1d8>)
 80063a2:	4313      	orrs	r3, r2
 80063a4:	610b      	str	r3, [r1, #16]
 80063a6:	e02d      	b.n	8006404 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	d115      	bne.n	80063da <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80063ae:	4b2a      	ldr	r3, [pc, #168]	; (8006458 <RCCEx_PLLSAI1_Config+0x1d8>)
 80063b0:	691a      	ldr	r2, [r3, #16]
 80063b2:	4b2b      	ldr	r3, [pc, #172]	; (8006460 <RCCEx_PLLSAI1_Config+0x1e0>)
 80063b4:	4013      	ands	r3, r2
 80063b6:	687a      	ldr	r2, [r7, #4]
 80063b8:	6892      	ldr	r2, [r2, #8]
 80063ba:	0211      	lsls	r1, r2, #8
 80063bc:	687a      	ldr	r2, [r7, #4]
 80063be:	6912      	ldr	r2, [r2, #16]
 80063c0:	0852      	lsrs	r2, r2, #1
 80063c2:	3a01      	subs	r2, #1
 80063c4:	0552      	lsls	r2, r2, #21
 80063c6:	4311      	orrs	r1, r2
 80063c8:	687a      	ldr	r2, [r7, #4]
 80063ca:	6852      	ldr	r2, [r2, #4]
 80063cc:	3a01      	subs	r2, #1
 80063ce:	0112      	lsls	r2, r2, #4
 80063d0:	430a      	orrs	r2, r1
 80063d2:	4921      	ldr	r1, [pc, #132]	; (8006458 <RCCEx_PLLSAI1_Config+0x1d8>)
 80063d4:	4313      	orrs	r3, r2
 80063d6:	610b      	str	r3, [r1, #16]
 80063d8:	e014      	b.n	8006404 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80063da:	4b1f      	ldr	r3, [pc, #124]	; (8006458 <RCCEx_PLLSAI1_Config+0x1d8>)
 80063dc:	691a      	ldr	r2, [r3, #16]
 80063de:	4b21      	ldr	r3, [pc, #132]	; (8006464 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063e0:	4013      	ands	r3, r2
 80063e2:	687a      	ldr	r2, [r7, #4]
 80063e4:	6892      	ldr	r2, [r2, #8]
 80063e6:	0211      	lsls	r1, r2, #8
 80063e8:	687a      	ldr	r2, [r7, #4]
 80063ea:	6952      	ldr	r2, [r2, #20]
 80063ec:	0852      	lsrs	r2, r2, #1
 80063ee:	3a01      	subs	r2, #1
 80063f0:	0652      	lsls	r2, r2, #25
 80063f2:	4311      	orrs	r1, r2
 80063f4:	687a      	ldr	r2, [r7, #4]
 80063f6:	6852      	ldr	r2, [r2, #4]
 80063f8:	3a01      	subs	r2, #1
 80063fa:	0112      	lsls	r2, r2, #4
 80063fc:	430a      	orrs	r2, r1
 80063fe:	4916      	ldr	r1, [pc, #88]	; (8006458 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006400:	4313      	orrs	r3, r2
 8006402:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006404:	4b14      	ldr	r3, [pc, #80]	; (8006458 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a13      	ldr	r2, [pc, #76]	; (8006458 <RCCEx_PLLSAI1_Config+0x1d8>)
 800640a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800640e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006410:	f7fc f8d2 	bl	80025b8 <HAL_GetTick>
 8006414:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006416:	e009      	b.n	800642c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006418:	f7fc f8ce 	bl	80025b8 <HAL_GetTick>
 800641c:	4602      	mov	r2, r0
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	1ad3      	subs	r3, r2, r3
 8006422:	2b02      	cmp	r3, #2
 8006424:	d902      	bls.n	800642c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006426:	2303      	movs	r3, #3
 8006428:	73fb      	strb	r3, [r7, #15]
          break;
 800642a:	e005      	b.n	8006438 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800642c:	4b0a      	ldr	r3, [pc, #40]	; (8006458 <RCCEx_PLLSAI1_Config+0x1d8>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006434:	2b00      	cmp	r3, #0
 8006436:	d0ef      	beq.n	8006418 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006438:	7bfb      	ldrb	r3, [r7, #15]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d106      	bne.n	800644c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800643e:	4b06      	ldr	r3, [pc, #24]	; (8006458 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006440:	691a      	ldr	r2, [r3, #16]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	699b      	ldr	r3, [r3, #24]
 8006446:	4904      	ldr	r1, [pc, #16]	; (8006458 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006448:	4313      	orrs	r3, r2
 800644a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800644c:	7bfb      	ldrb	r3, [r7, #15]
}
 800644e:	4618      	mov	r0, r3
 8006450:	3710      	adds	r7, #16
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}
 8006456:	bf00      	nop
 8006458:	40021000 	.word	0x40021000
 800645c:	07ff800f 	.word	0x07ff800f
 8006460:	ff9f800f 	.word	0xff9f800f
 8006464:	f9ff800f 	.word	0xf9ff800f

08006468 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b084      	sub	sp, #16
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006472:	2300      	movs	r3, #0
 8006474:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006476:	4b72      	ldr	r3, [pc, #456]	; (8006640 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006478:	68db      	ldr	r3, [r3, #12]
 800647a:	f003 0303 	and.w	r3, r3, #3
 800647e:	2b00      	cmp	r3, #0
 8006480:	d00e      	beq.n	80064a0 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006482:	4b6f      	ldr	r3, [pc, #444]	; (8006640 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006484:	68db      	ldr	r3, [r3, #12]
 8006486:	f003 0203 	and.w	r2, r3, #3
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	429a      	cmp	r2, r3
 8006490:	d103      	bne.n	800649a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
       ||
 8006496:	2b00      	cmp	r3, #0
 8006498:	d142      	bne.n	8006520 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	73fb      	strb	r3, [r7, #15]
 800649e:	e03f      	b.n	8006520 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	2b03      	cmp	r3, #3
 80064a6:	d018      	beq.n	80064da <RCCEx_PLLSAI2_Config+0x72>
 80064a8:	2b03      	cmp	r3, #3
 80064aa:	d825      	bhi.n	80064f8 <RCCEx_PLLSAI2_Config+0x90>
 80064ac:	2b01      	cmp	r3, #1
 80064ae:	d002      	beq.n	80064b6 <RCCEx_PLLSAI2_Config+0x4e>
 80064b0:	2b02      	cmp	r3, #2
 80064b2:	d009      	beq.n	80064c8 <RCCEx_PLLSAI2_Config+0x60>
 80064b4:	e020      	b.n	80064f8 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80064b6:	4b62      	ldr	r3, [pc, #392]	; (8006640 <RCCEx_PLLSAI2_Config+0x1d8>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f003 0302 	and.w	r3, r3, #2
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d11d      	bne.n	80064fe <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80064c6:	e01a      	b.n	80064fe <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80064c8:	4b5d      	ldr	r3, [pc, #372]	; (8006640 <RCCEx_PLLSAI2_Config+0x1d8>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d116      	bne.n	8006502 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80064d8:	e013      	b.n	8006502 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80064da:	4b59      	ldr	r3, [pc, #356]	; (8006640 <RCCEx_PLLSAI2_Config+0x1d8>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d10f      	bne.n	8006506 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80064e6:	4b56      	ldr	r3, [pc, #344]	; (8006640 <RCCEx_PLLSAI2_Config+0x1d8>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d109      	bne.n	8006506 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80064f2:	2301      	movs	r3, #1
 80064f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80064f6:	e006      	b.n	8006506 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80064f8:	2301      	movs	r3, #1
 80064fa:	73fb      	strb	r3, [r7, #15]
      break;
 80064fc:	e004      	b.n	8006508 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80064fe:	bf00      	nop
 8006500:	e002      	b.n	8006508 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006502:	bf00      	nop
 8006504:	e000      	b.n	8006508 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006506:	bf00      	nop
    }

    if(status == HAL_OK)
 8006508:	7bfb      	ldrb	r3, [r7, #15]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d108      	bne.n	8006520 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800650e:	4b4c      	ldr	r3, [pc, #304]	; (8006640 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006510:	68db      	ldr	r3, [r3, #12]
 8006512:	f023 0203 	bic.w	r2, r3, #3
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4949      	ldr	r1, [pc, #292]	; (8006640 <RCCEx_PLLSAI2_Config+0x1d8>)
 800651c:	4313      	orrs	r3, r2
 800651e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006520:	7bfb      	ldrb	r3, [r7, #15]
 8006522:	2b00      	cmp	r3, #0
 8006524:	f040 8086 	bne.w	8006634 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006528:	4b45      	ldr	r3, [pc, #276]	; (8006640 <RCCEx_PLLSAI2_Config+0x1d8>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a44      	ldr	r2, [pc, #272]	; (8006640 <RCCEx_PLLSAI2_Config+0x1d8>)
 800652e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006532:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006534:	f7fc f840 	bl	80025b8 <HAL_GetTick>
 8006538:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800653a:	e009      	b.n	8006550 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800653c:	f7fc f83c 	bl	80025b8 <HAL_GetTick>
 8006540:	4602      	mov	r2, r0
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	1ad3      	subs	r3, r2, r3
 8006546:	2b02      	cmp	r3, #2
 8006548:	d902      	bls.n	8006550 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800654a:	2303      	movs	r3, #3
 800654c:	73fb      	strb	r3, [r7, #15]
        break;
 800654e:	e005      	b.n	800655c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006550:	4b3b      	ldr	r3, [pc, #236]	; (8006640 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006558:	2b00      	cmp	r3, #0
 800655a:	d1ef      	bne.n	800653c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800655c:	7bfb      	ldrb	r3, [r7, #15]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d168      	bne.n	8006634 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d113      	bne.n	8006590 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006568:	4b35      	ldr	r3, [pc, #212]	; (8006640 <RCCEx_PLLSAI2_Config+0x1d8>)
 800656a:	695a      	ldr	r2, [r3, #20]
 800656c:	4b35      	ldr	r3, [pc, #212]	; (8006644 <RCCEx_PLLSAI2_Config+0x1dc>)
 800656e:	4013      	ands	r3, r2
 8006570:	687a      	ldr	r2, [r7, #4]
 8006572:	6892      	ldr	r2, [r2, #8]
 8006574:	0211      	lsls	r1, r2, #8
 8006576:	687a      	ldr	r2, [r7, #4]
 8006578:	68d2      	ldr	r2, [r2, #12]
 800657a:	06d2      	lsls	r2, r2, #27
 800657c:	4311      	orrs	r1, r2
 800657e:	687a      	ldr	r2, [r7, #4]
 8006580:	6852      	ldr	r2, [r2, #4]
 8006582:	3a01      	subs	r2, #1
 8006584:	0112      	lsls	r2, r2, #4
 8006586:	430a      	orrs	r2, r1
 8006588:	492d      	ldr	r1, [pc, #180]	; (8006640 <RCCEx_PLLSAI2_Config+0x1d8>)
 800658a:	4313      	orrs	r3, r2
 800658c:	614b      	str	r3, [r1, #20]
 800658e:	e02d      	b.n	80065ec <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	2b01      	cmp	r3, #1
 8006594:	d115      	bne.n	80065c2 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006596:	4b2a      	ldr	r3, [pc, #168]	; (8006640 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006598:	695a      	ldr	r2, [r3, #20]
 800659a:	4b2b      	ldr	r3, [pc, #172]	; (8006648 <RCCEx_PLLSAI2_Config+0x1e0>)
 800659c:	4013      	ands	r3, r2
 800659e:	687a      	ldr	r2, [r7, #4]
 80065a0:	6892      	ldr	r2, [r2, #8]
 80065a2:	0211      	lsls	r1, r2, #8
 80065a4:	687a      	ldr	r2, [r7, #4]
 80065a6:	6912      	ldr	r2, [r2, #16]
 80065a8:	0852      	lsrs	r2, r2, #1
 80065aa:	3a01      	subs	r2, #1
 80065ac:	0552      	lsls	r2, r2, #21
 80065ae:	4311      	orrs	r1, r2
 80065b0:	687a      	ldr	r2, [r7, #4]
 80065b2:	6852      	ldr	r2, [r2, #4]
 80065b4:	3a01      	subs	r2, #1
 80065b6:	0112      	lsls	r2, r2, #4
 80065b8:	430a      	orrs	r2, r1
 80065ba:	4921      	ldr	r1, [pc, #132]	; (8006640 <RCCEx_PLLSAI2_Config+0x1d8>)
 80065bc:	4313      	orrs	r3, r2
 80065be:	614b      	str	r3, [r1, #20]
 80065c0:	e014      	b.n	80065ec <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80065c2:	4b1f      	ldr	r3, [pc, #124]	; (8006640 <RCCEx_PLLSAI2_Config+0x1d8>)
 80065c4:	695a      	ldr	r2, [r3, #20]
 80065c6:	4b21      	ldr	r3, [pc, #132]	; (800664c <RCCEx_PLLSAI2_Config+0x1e4>)
 80065c8:	4013      	ands	r3, r2
 80065ca:	687a      	ldr	r2, [r7, #4]
 80065cc:	6892      	ldr	r2, [r2, #8]
 80065ce:	0211      	lsls	r1, r2, #8
 80065d0:	687a      	ldr	r2, [r7, #4]
 80065d2:	6952      	ldr	r2, [r2, #20]
 80065d4:	0852      	lsrs	r2, r2, #1
 80065d6:	3a01      	subs	r2, #1
 80065d8:	0652      	lsls	r2, r2, #25
 80065da:	4311      	orrs	r1, r2
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	6852      	ldr	r2, [r2, #4]
 80065e0:	3a01      	subs	r2, #1
 80065e2:	0112      	lsls	r2, r2, #4
 80065e4:	430a      	orrs	r2, r1
 80065e6:	4916      	ldr	r1, [pc, #88]	; (8006640 <RCCEx_PLLSAI2_Config+0x1d8>)
 80065e8:	4313      	orrs	r3, r2
 80065ea:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80065ec:	4b14      	ldr	r3, [pc, #80]	; (8006640 <RCCEx_PLLSAI2_Config+0x1d8>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a13      	ldr	r2, [pc, #76]	; (8006640 <RCCEx_PLLSAI2_Config+0x1d8>)
 80065f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065f6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065f8:	f7fb ffde 	bl	80025b8 <HAL_GetTick>
 80065fc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80065fe:	e009      	b.n	8006614 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006600:	f7fb ffda 	bl	80025b8 <HAL_GetTick>
 8006604:	4602      	mov	r2, r0
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	1ad3      	subs	r3, r2, r3
 800660a:	2b02      	cmp	r3, #2
 800660c:	d902      	bls.n	8006614 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800660e:	2303      	movs	r3, #3
 8006610:	73fb      	strb	r3, [r7, #15]
          break;
 8006612:	e005      	b.n	8006620 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006614:	4b0a      	ldr	r3, [pc, #40]	; (8006640 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800661c:	2b00      	cmp	r3, #0
 800661e:	d0ef      	beq.n	8006600 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006620:	7bfb      	ldrb	r3, [r7, #15]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d106      	bne.n	8006634 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006626:	4b06      	ldr	r3, [pc, #24]	; (8006640 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006628:	695a      	ldr	r2, [r3, #20]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	699b      	ldr	r3, [r3, #24]
 800662e:	4904      	ldr	r1, [pc, #16]	; (8006640 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006630:	4313      	orrs	r3, r2
 8006632:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006634:	7bfb      	ldrb	r3, [r7, #15]
}
 8006636:	4618      	mov	r0, r3
 8006638:	3710      	adds	r7, #16
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}
 800663e:	bf00      	nop
 8006640:	40021000 	.word	0x40021000
 8006644:	07ff800f 	.word	0x07ff800f
 8006648:	ff9f800f 	.word	0xff9f800f
 800664c:	f9ff800f 	.word	0xf9ff800f

08006650 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8006650:	b480      	push	{r7}
 8006652:	b089      	sub	sp, #36	; 0x24
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
 8006658:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 800665a:	2300      	movs	r3, #0
 800665c:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800665e:	2300      	movs	r3, #0
 8006660:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8006662:	2300      	movs	r3, #0
 8006664:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800666c:	d10b      	bne.n	8006686 <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800666e:	4b7e      	ldr	r3, [pc, #504]	; (8006868 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006670:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006674:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8006678:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 800667a:	69bb      	ldr	r3, [r7, #24]
 800667c:	2b60      	cmp	r3, #96	; 0x60
 800667e:	d112      	bne.n	80066a6 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006680:	4b7a      	ldr	r3, [pc, #488]	; (800686c <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8006682:	61fb      	str	r3, [r7, #28]
 8006684:	e00f      	b.n	80066a6 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800668c:	d10b      	bne.n	80066a6 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800668e:	4b76      	ldr	r3, [pc, #472]	; (8006868 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006690:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006694:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006698:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 800669a:	69bb      	ldr	r3, [r7, #24]
 800669c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066a0:	d101      	bne.n	80066a6 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 80066a2:	4b72      	ldr	r3, [pc, #456]	; (800686c <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 80066a4:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 80066a6:	69fb      	ldr	r3, [r7, #28]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	f040 80d6 	bne.w	800685a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 80066b2:	69bb      	ldr	r3, [r7, #24]
 80066b4:	2b40      	cmp	r3, #64	; 0x40
 80066b6:	d003      	beq.n	80066c0 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 80066b8:	69bb      	ldr	r3, [r7, #24]
 80066ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066be:	d13b      	bne.n	8006738 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80066c0:	4b69      	ldr	r3, [pc, #420]	; (8006868 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80066cc:	f040 80c4 	bne.w	8006858 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 80066d0:	4b65      	ldr	r3, [pc, #404]	; (8006868 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80066d2:	68db      	ldr	r3, [r3, #12]
 80066d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80066d8:	2b00      	cmp	r3, #0
 80066da:	f000 80bd 	beq.w	8006858 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80066de:	4b62      	ldr	r3, [pc, #392]	; (8006868 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80066e0:	68db      	ldr	r3, [r3, #12]
 80066e2:	091b      	lsrs	r3, r3, #4
 80066e4:	f003 030f 	and.w	r3, r3, #15
 80066e8:	3301      	adds	r3, #1
 80066ea:	693a      	ldr	r2, [r7, #16]
 80066ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80066f0:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80066f2:	4b5d      	ldr	r3, [pc, #372]	; (8006868 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80066f4:	68db      	ldr	r3, [r3, #12]
 80066f6:	0a1b      	lsrs	r3, r3, #8
 80066f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066fc:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 80066fe:	4b5a      	ldr	r3, [pc, #360]	; (8006868 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006700:	68db      	ldr	r3, [r3, #12]
 8006702:	0edb      	lsrs	r3, r3, #27
 8006704:	f003 031f 	and.w	r3, r3, #31
 8006708:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d10a      	bne.n	8006726 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8006710:	4b55      	ldr	r3, [pc, #340]	; (8006868 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006712:	68db      	ldr	r3, [r3, #12]
 8006714:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006718:	2b00      	cmp	r3, #0
 800671a:	d002      	beq.n	8006722 <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 800671c:	2311      	movs	r3, #17
 800671e:	617b      	str	r3, [r7, #20]
 8006720:	e001      	b.n	8006726 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 8006722:	2307      	movs	r3, #7
 8006724:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	68fa      	ldr	r2, [r7, #12]
 800672a:	fb03 f202 	mul.w	r2, r3, r2
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	fbb2 f3f3 	udiv	r3, r2, r3
 8006734:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8006736:	e08f      	b.n	8006858 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8006738:	69bb      	ldr	r3, [r7, #24]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d13a      	bne.n	80067b4 <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 800673e:	4b4a      	ldr	r3, [pc, #296]	; (8006868 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006746:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800674a:	f040 8086 	bne.w	800685a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 800674e:	4b46      	ldr	r3, [pc, #280]	; (8006868 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006750:	691b      	ldr	r3, [r3, #16]
 8006752:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006756:	2b00      	cmp	r3, #0
 8006758:	d07f      	beq.n	800685a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800675a:	4b43      	ldr	r3, [pc, #268]	; (8006868 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800675c:	691b      	ldr	r3, [r3, #16]
 800675e:	091b      	lsrs	r3, r3, #4
 8006760:	f003 030f 	and.w	r3, r3, #15
 8006764:	3301      	adds	r3, #1
 8006766:	693a      	ldr	r2, [r7, #16]
 8006768:	fbb2 f3f3 	udiv	r3, r2, r3
 800676c:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800676e:	4b3e      	ldr	r3, [pc, #248]	; (8006868 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006770:	691b      	ldr	r3, [r3, #16]
 8006772:	0a1b      	lsrs	r3, r3, #8
 8006774:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006778:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 800677a:	4b3b      	ldr	r3, [pc, #236]	; (8006868 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800677c:	691b      	ldr	r3, [r3, #16]
 800677e:	0edb      	lsrs	r3, r3, #27
 8006780:	f003 031f 	and.w	r3, r3, #31
 8006784:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d10a      	bne.n	80067a2 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 800678c:	4b36      	ldr	r3, [pc, #216]	; (8006868 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800678e:	691b      	ldr	r3, [r3, #16]
 8006790:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006794:	2b00      	cmp	r3, #0
 8006796:	d002      	beq.n	800679e <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 8006798:	2311      	movs	r3, #17
 800679a:	617b      	str	r3, [r7, #20]
 800679c:	e001      	b.n	80067a2 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 800679e:	2307      	movs	r3, #7
 80067a0:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	68fa      	ldr	r2, [r7, #12]
 80067a6:	fb03 f202 	mul.w	r2, r3, r2
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80067b0:	61fb      	str	r3, [r7, #28]
 80067b2:	e052      	b.n	800685a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 80067b4:	69bb      	ldr	r3, [r7, #24]
 80067b6:	2b80      	cmp	r3, #128	; 0x80
 80067b8:	d003      	beq.n	80067c2 <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 80067ba:	69bb      	ldr	r3, [r7, #24]
 80067bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067c0:	d109      	bne.n	80067d6 <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80067c2:	4b29      	ldr	r3, [pc, #164]	; (8006868 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067ce:	d144      	bne.n	800685a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 80067d0:	4b27      	ldr	r3, [pc, #156]	; (8006870 <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 80067d2:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80067d4:	e041      	b.n	800685a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 80067d6:	69bb      	ldr	r3, [r7, #24]
 80067d8:	2b20      	cmp	r3, #32
 80067da:	d003      	beq.n	80067e4 <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 80067dc:	69bb      	ldr	r3, [r7, #24]
 80067de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067e2:	d13a      	bne.n	800685a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 80067e4:	4b20      	ldr	r3, [pc, #128]	; (8006868 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80067ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067f0:	d133      	bne.n	800685a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 80067f2:	4b1d      	ldr	r3, [pc, #116]	; (8006868 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80067f4:	695b      	ldr	r3, [r3, #20]
 80067f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d02d      	beq.n	800685a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 80067fe:	4b1a      	ldr	r3, [pc, #104]	; (8006868 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006800:	695b      	ldr	r3, [r3, #20]
 8006802:	091b      	lsrs	r3, r3, #4
 8006804:	f003 030f 	and.w	r3, r3, #15
 8006808:	3301      	adds	r3, #1
 800680a:	693a      	ldr	r2, [r7, #16]
 800680c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006810:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8006812:	4b15      	ldr	r3, [pc, #84]	; (8006868 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006814:	695b      	ldr	r3, [r3, #20]
 8006816:	0a1b      	lsrs	r3, r3, #8
 8006818:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800681c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 800681e:	4b12      	ldr	r3, [pc, #72]	; (8006868 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006820:	695b      	ldr	r3, [r3, #20]
 8006822:	0edb      	lsrs	r3, r3, #27
 8006824:	f003 031f 	and.w	r3, r3, #31
 8006828:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d10a      	bne.n	8006846 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8006830:	4b0d      	ldr	r3, [pc, #52]	; (8006868 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006832:	695b      	ldr	r3, [r3, #20]
 8006834:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006838:	2b00      	cmp	r3, #0
 800683a:	d002      	beq.n	8006842 <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 800683c:	2311      	movs	r3, #17
 800683e:	617b      	str	r3, [r7, #20]
 8006840:	e001      	b.n	8006846 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 8006842:	2307      	movs	r3, #7
 8006844:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	68fa      	ldr	r2, [r7, #12]
 800684a:	fb03 f202 	mul.w	r2, r3, r2
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	fbb2 f3f3 	udiv	r3, r2, r3
 8006854:	61fb      	str	r3, [r7, #28]
 8006856:	e000      	b.n	800685a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8006858:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 800685a:	69fb      	ldr	r3, [r7, #28]
}
 800685c:	4618      	mov	r0, r3
 800685e:	3724      	adds	r7, #36	; 0x24
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr
 8006868:	40021000 	.word	0x40021000
 800686c:	001fff68 	.word	0x001fff68
 8006870:	00f42400 	.word	0x00f42400

08006874 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b086      	sub	sp, #24
 8006878:	af00      	add	r7, sp, #0
 800687a:	60f8      	str	r0, [r7, #12]
 800687c:	60b9      	str	r1, [r7, #8]
 800687e:	607a      	str	r2, [r7, #4]
 8006880:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	2b02      	cmp	r3, #2
 8006886:	d904      	bls.n	8006892 <HAL_SAI_InitProtocol+0x1e>
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	3b03      	subs	r3, #3
 800688c:	2b01      	cmp	r3, #1
 800688e:	d812      	bhi.n	80068b6 <HAL_SAI_InitProtocol+0x42>
 8006890:	e008      	b.n	80068a4 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	687a      	ldr	r2, [r7, #4]
 8006896:	68b9      	ldr	r1, [r7, #8]
 8006898:	68f8      	ldr	r0, [r7, #12]
 800689a:	f000 f9fb 	bl	8006c94 <SAI_InitI2S>
 800689e:	4603      	mov	r3, r0
 80068a0:	75fb      	strb	r3, [r7, #23]
      break;
 80068a2:	e00b      	b.n	80068bc <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	687a      	ldr	r2, [r7, #4]
 80068a8:	68b9      	ldr	r1, [r7, #8]
 80068aa:	68f8      	ldr	r0, [r7, #12]
 80068ac:	f000 faa4 	bl	8006df8 <SAI_InitPCM>
 80068b0:	4603      	mov	r3, r0
 80068b2:	75fb      	strb	r3, [r7, #23]
      break;
 80068b4:	e002      	b.n	80068bc <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 80068b6:	2301      	movs	r3, #1
 80068b8:	75fb      	strb	r3, [r7, #23]
      break;
 80068ba:	bf00      	nop
  }

  if (status == HAL_OK)
 80068bc:	7dfb      	ldrb	r3, [r7, #23]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d104      	bne.n	80068cc <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 80068c2:	68f8      	ldr	r0, [r7, #12]
 80068c4:	f000 f808 	bl	80068d8 <HAL_SAI_Init>
 80068c8:	4603      	mov	r3, r0
 80068ca:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80068cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3718      	adds	r7, #24
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}
	...

080068d8 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b08a      	sub	sp, #40	; 0x28
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d101      	bne.n	80068ea <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 80068e6:	2301      	movs	r3, #1
 80068e8:	e1c7      	b.n	8006c7a <HAL_SAI_Init+0x3a2>

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80068f0:	2b01      	cmp	r3, #1
 80068f2:	d10e      	bne.n	8006912 <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a81      	ldr	r2, [pc, #516]	; (8006b00 <HAL_SAI_Init+0x228>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d107      	bne.n	800690e <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 8006902:	2b01      	cmp	r3, #1
 8006904:	d103      	bne.n	800690e <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800690a:	2b00      	cmp	r3, #0
 800690c:	d001      	beq.n	8006912 <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 800690e:	2301      	movs	r3, #1
 8006910:	e1b3      	b.n	8006c7a <HAL_SAI_Init+0x3a2>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8006918:	b2db      	uxtb	r3, r3
 800691a:	2b00      	cmp	r3, #0
 800691c:	d106      	bne.n	800692c <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2200      	movs	r2, #0
 8006922:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f7fb fc60 	bl	80021ec <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f000 fae5 	bl	8006efc <SAI_Disable>
 8006932:	4603      	mov	r3, r0
 8006934:	2b00      	cmp	r3, #0
 8006936:	d001      	beq.n	800693c <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 8006938:	2301      	movs	r3, #1
 800693a:	e19e      	b.n	8006c7a <HAL_SAI_Init+0x3a2>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2202      	movs	r2, #2
 8006940:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	68db      	ldr	r3, [r3, #12]
 8006948:	2b02      	cmp	r3, #2
 800694a:	d00c      	beq.n	8006966 <HAL_SAI_Init+0x8e>
 800694c:	2b02      	cmp	r3, #2
 800694e:	d80d      	bhi.n	800696c <HAL_SAI_Init+0x94>
 8006950:	2b00      	cmp	r3, #0
 8006952:	d002      	beq.n	800695a <HAL_SAI_Init+0x82>
 8006954:	2b01      	cmp	r3, #1
 8006956:	d003      	beq.n	8006960 <HAL_SAI_Init+0x88>
 8006958:	e008      	b.n	800696c <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800695a:	2300      	movs	r3, #0
 800695c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800695e:	e008      	b.n	8006972 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8006960:	2310      	movs	r3, #16
 8006962:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006964:	e005      	b.n	8006972 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8006966:	2320      	movs	r3, #32
 8006968:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800696a:	e002      	b.n	8006972 <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 800696c:	2300      	movs	r3, #0
 800696e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006970:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	689b      	ldr	r3, [r3, #8]
 8006976:	2b03      	cmp	r3, #3
 8006978:	d81d      	bhi.n	80069b6 <HAL_SAI_Init+0xde>
 800697a:	a201      	add	r2, pc, #4	; (adr r2, 8006980 <HAL_SAI_Init+0xa8>)
 800697c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006980:	08006991 	.word	0x08006991
 8006984:	08006997 	.word	0x08006997
 8006988:	0800699f 	.word	0x0800699f
 800698c:	080069a7 	.word	0x080069a7
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8006990:	2300      	movs	r3, #0
 8006992:	61fb      	str	r3, [r7, #28]
      break;
 8006994:	e012      	b.n	80069bc <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8006996:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800699a:	61fb      	str	r3, [r7, #28]
      break;
 800699c:	e00e      	b.n	80069bc <HAL_SAI_Init+0xe4>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800699e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80069a2:	61fb      	str	r3, [r7, #28]
      break;
 80069a4:	e00a      	b.n	80069bc <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80069a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80069aa:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 80069ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ae:	f043 0301 	orr.w	r3, r3, #1
 80069b2:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80069b4:	e002      	b.n	80069bc <HAL_SAI_Init+0xe4>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 80069b6:	2300      	movs	r3, #0
 80069b8:	61fb      	str	r3, [r7, #28]
      break;
 80069ba:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a4f      	ldr	r2, [pc, #316]	; (8006b00 <HAL_SAI_Init+0x228>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d004      	beq.n	80069d0 <HAL_SAI_Init+0xf8>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a4e      	ldr	r2, [pc, #312]	; (8006b04 <HAL_SAI_Init+0x22c>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d103      	bne.n	80069d8 <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 80069d0:	4a4d      	ldr	r2, [pc, #308]	; (8006b08 <HAL_SAI_Init+0x230>)
 80069d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d4:	6013      	str	r3, [r2, #0]
 80069d6:	e002      	b.n	80069de <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 80069d8:	4a4c      	ldr	r2, [pc, #304]	; (8006b0c <HAL_SAI_Init+0x234>)
 80069da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069dc:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	69db      	ldr	r3, [r3, #28]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d073      	beq.n	8006ace <HAL_SAI_Init+0x1f6>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a45      	ldr	r2, [pc, #276]	; (8006b00 <HAL_SAI_Init+0x228>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d004      	beq.n	80069fa <HAL_SAI_Init+0x122>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a43      	ldr	r2, [pc, #268]	; (8006b04 <HAL_SAI_Init+0x22c>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d105      	bne.n	8006a06 <HAL_SAI_Init+0x12e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80069fa:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80069fe:	f7fe fd0d 	bl	800541c <HAL_RCCEx_GetPeriphCLKFreq>
 8006a02:	61b8      	str	r0, [r7, #24]
 8006a04:	e004      	b.n	8006a10 <HAL_SAI_Init+0x138>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8006a06:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006a0a:	f7fe fd07 	bl	800541c <HAL_RCCEx_GetPeriphCLKFreq>
 8006a0e:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NOMCK = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NOMCK = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	695b      	ldr	r3, [r3, #20]
 8006a14:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006a18:	d120      	bne.n	8006a5c <HAL_SAI_Init+0x184>
    {
      /* NOMCK = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a1e:	2b04      	cmp	r3, #4
 8006a20:	d102      	bne.n	8006a28 <HAL_SAI_Init+0x150>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 8006a22:	2340      	movs	r3, #64	; 0x40
 8006a24:	613b      	str	r3, [r7, #16]
 8006a26:	e00a      	b.n	8006a3e <HAL_SAI_Init+0x166>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a2c:	2b08      	cmp	r3, #8
 8006a2e:	d103      	bne.n	8006a38 <HAL_SAI_Init+0x160>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 8006a30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006a34:	613b      	str	r3, [r7, #16]
 8006a36:	e002      	b.n	8006a3e <HAL_SAI_Init+0x166>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a3c:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8006a3e:	69ba      	ldr	r2, [r7, #24]
 8006a40:	4613      	mov	r3, r2
 8006a42:	009b      	lsls	r3, r3, #2
 8006a44:	4413      	add	r3, r2
 8006a46:	005b      	lsls	r3, r3, #1
 8006a48:	4619      	mov	r1, r3
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	69db      	ldr	r3, [r3, #28]
 8006a4e:	693a      	ldr	r2, [r7, #16]
 8006a50:	fb02 f303 	mul.w	r3, r2, r3
 8006a54:	fbb1 f3f3 	udiv	r3, r1, r3
 8006a58:	617b      	str	r3, [r7, #20]
 8006a5a:	e017      	b.n	8006a8c <HAL_SAI_Init+0x1b4>
    }
    else
    {
      /* NOMCK = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a60:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006a64:	d101      	bne.n	8006a6a <HAL_SAI_Init+0x192>
 8006a66:	2302      	movs	r3, #2
 8006a68:	e000      	b.n	8006a6c <HAL_SAI_Init+0x194>
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8006a6e:	69ba      	ldr	r2, [r7, #24]
 8006a70:	4613      	mov	r3, r2
 8006a72:	009b      	lsls	r3, r3, #2
 8006a74:	4413      	add	r3, r2
 8006a76:	005b      	lsls	r3, r3, #1
 8006a78:	4619      	mov	r1, r3
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	69db      	ldr	r3, [r3, #28]
 8006a7e:	68fa      	ldr	r2, [r7, #12]
 8006a80:	fb02 f303 	mul.w	r3, r2, r3
 8006a84:	021b      	lsls	r3, r3, #8
 8006a86:	fbb1 f3f3 	udiv	r3, r1, r3
 8006a8a:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	4a20      	ldr	r2, [pc, #128]	; (8006b10 <HAL_SAI_Init+0x238>)
 8006a90:	fba2 2303 	umull	r2, r3, r2, r3
 8006a94:	08da      	lsrs	r2, r3, #3
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8006a9a:	6979      	ldr	r1, [r7, #20]
 8006a9c:	4b1c      	ldr	r3, [pc, #112]	; (8006b10 <HAL_SAI_Init+0x238>)
 8006a9e:	fba3 2301 	umull	r2, r3, r3, r1
 8006aa2:	08da      	lsrs	r2, r3, #3
 8006aa4:	4613      	mov	r3, r2
 8006aa6:	009b      	lsls	r3, r3, #2
 8006aa8:	4413      	add	r3, r2
 8006aaa:	005b      	lsls	r3, r3, #1
 8006aac:	1aca      	subs	r2, r1, r3
 8006aae:	2a08      	cmp	r2, #8
 8006ab0:	d904      	bls.n	8006abc <HAL_SAI_Init+0x1e4>
    {
      hsai->Init.Mckdiv += 1U;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6a1b      	ldr	r3, [r3, #32]
 8006ab6:	1c5a      	adds	r2, r3, #1
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ac0:	2b04      	cmp	r3, #4
 8006ac2:	d104      	bne.n	8006ace <HAL_SAI_Init+0x1f6>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6a1b      	ldr	r3, [r3, #32]
 8006ac8:	085a      	lsrs	r2, r3, #1
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d003      	beq.n	8006ade <HAL_SAI_Init+0x206>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	685b      	ldr	r3, [r3, #4]
 8006ada:	2b02      	cmp	r3, #2
 8006adc:	d109      	bne.n	8006af2 <HAL_SAI_Init+0x21a>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ae2:	2b01      	cmp	r3, #1
 8006ae4:	d101      	bne.n	8006aea <HAL_SAI_Init+0x212>
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	e001      	b.n	8006aee <HAL_SAI_Init+0x216>
 8006aea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006aee:	623b      	str	r3, [r7, #32]
 8006af0:	e012      	b.n	8006b18 <HAL_SAI_Init+0x240>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006af6:	2b01      	cmp	r3, #1
 8006af8:	d10c      	bne.n	8006b14 <HAL_SAI_Init+0x23c>
 8006afa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006afe:	e00a      	b.n	8006b16 <HAL_SAI_Init+0x23e>
 8006b00:	40015404 	.word	0x40015404
 8006b04:	40015424 	.word	0x40015424
 8006b08:	40015400 	.word	0x40015400
 8006b0c:	40015800 	.word	0x40015800
 8006b10:	cccccccd 	.word	0xcccccccd
 8006b14:	2300      	movs	r3, #0
 8006b16:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	6819      	ldr	r1, [r3, #0]
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681a      	ldr	r2, [r3, #0]
 8006b22:	4b58      	ldr	r3, [pc, #352]	; (8006c84 <HAL_SAI_Init+0x3ac>)
 8006b24:	400b      	ands	r3, r1
 8006b26:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NOMCK | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	6819      	ldr	r1, [r3, #0]
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	685a      	ldr	r2, [r3, #4]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b36:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006b3c:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b42:	431a      	orrs	r2, r3
 8006b44:	6a3b      	ldr	r3, [r7, #32]
 8006b46:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8006b48:	69fb      	ldr	r3, [r7, #28]
 8006b4a:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          ckstr_bits | syncen_bits |                             \
 8006b50:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	691b      	ldr	r3, [r3, #16]
 8006b56:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006b5c:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6a1b      	ldr	r3, [r3, #32]
 8006b62:	051b      	lsls	r3, r3, #20
 8006b64:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8006b6a:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	430a      	orrs	r2, r1
 8006b72:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	687a      	ldr	r2, [r7, #4]
 8006b7c:	6812      	ldr	r2, [r2, #0]
 8006b7e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8006b82:	f023 030f 	bic.w	r3, r3, #15
 8006b86:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	6859      	ldr	r1, [r3, #4]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	699a      	ldr	r2, [r3, #24]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b96:	431a      	orrs	r2, r3
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b9c:	431a      	orrs	r2, r3
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	430a      	orrs	r2, r1
 8006ba4:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	6899      	ldr	r1, [r3, #8]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681a      	ldr	r2, [r3, #0]
 8006bb0:	4b35      	ldr	r3, [pc, #212]	; (8006c88 <HAL_SAI_Init+0x3b0>)
 8006bb2:	400b      	ands	r3, r1
 8006bb4:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	6899      	ldr	r1, [r3, #8]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bc0:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006bc6:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
                           hsai->FrameInit.FSOffset |
 8006bcc:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSDefinition |
 8006bd2:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bd8:	3b01      	subs	r3, #1
 8006bda:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8006bdc:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	430a      	orrs	r2, r1
 8006be4:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	68d9      	ldr	r1, [r3, #12]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681a      	ldr	r2, [r3, #0]
 8006bf0:	f24f 0320 	movw	r3, #61472	; 0xf020
 8006bf4:	400b      	ands	r3, r1
 8006bf6:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	68d9      	ldr	r1, [r3, #12]
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c06:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c0c:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006c0e:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c14:	3b01      	subs	r3, #1
 8006c16:	021b      	lsls	r3, r3, #8
 8006c18:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	430a      	orrs	r2, r1
 8006c20:	60da      	str	r2, [r3, #12]

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a19      	ldr	r2, [pc, #100]	; (8006c8c <HAL_SAI_Init+0x3b4>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d119      	bne.n	8006c60 <HAL_SAI_Init+0x388>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8006c2c:	4b18      	ldr	r3, [pc, #96]	; (8006c90 <HAL_SAI_Init+0x3b8>)
 8006c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c30:	4a17      	ldr	r2, [pc, #92]	; (8006c90 <HAL_SAI_Init+0x3b8>)
 8006c32:	f023 0301 	bic.w	r3, r3, #1
 8006c36:	6453      	str	r3, [r2, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006c3e:	2b01      	cmp	r3, #1
 8006c40:	d10e      	bne.n	8006c60 <HAL_SAI_Init+0x388>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c4a:	3b01      	subs	r3, #1
 8006c4c:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8006c4e:	4910      	ldr	r1, [pc, #64]	; (8006c90 <HAL_SAI_Init+0x3b8>)
 8006c50:	4313      	orrs	r3, r2
 8006c52:	644b      	str	r3, [r1, #68]	; 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 8006c54:	4b0e      	ldr	r3, [pc, #56]	; (8006c90 <HAL_SAI_Init+0x3b8>)
 8006c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c58:	4a0d      	ldr	r2, [pc, #52]	; (8006c90 <HAL_SAI_Init+0x3b8>)
 8006c5a:	f043 0301 	orr.w	r3, r3, #1
 8006c5e:	6453      	str	r3, [r2, #68]	; 0x44
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2200      	movs	r2, #0
 8006c64:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2200      	movs	r2, #0
 8006c74:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

  return HAL_OK;
 8006c78:	2300      	movs	r3, #0
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3728      	adds	r7, #40	; 0x28
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}
 8006c82:	bf00      	nop
 8006c84:	f805c010 	.word	0xf805c010
 8006c88:	fff88000 	.word	0xfff88000
 8006c8c:	40015404 	.word	0x40015404
 8006c90:	40015400 	.word	0x40015400

08006c94 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b087      	sub	sp, #28
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	60f8      	str	r0, [r7, #12]
 8006c9c:	60b9      	str	r1, [r7, #8]
 8006c9e:	607a      	str	r2, [r7, #4]
 8006ca0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	641a      	str	r2, [r3, #64]	; 0x40
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	649a      	str	r2, [r3, #72]	; 0x48
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d003      	beq.n	8006cc2 <SAI_InitI2S+0x2e>
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	2b02      	cmp	r3, #2
 8006cc0:	d103      	bne.n	8006cca <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	64da      	str	r2, [r3, #76]	; 0x4c
 8006cc8:	e002      	b.n	8006cd0 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2201      	movs	r2, #1
 8006cce:	64da      	str	r2, [r3, #76]	; 0x4c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006cd6:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006cde:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.FirstBitOffset  = 0;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.SlotNumber      = nbslot;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	683a      	ldr	r2, [r7, #0]
 8006cea:	66da      	str	r2, [r3, #108]	; 0x6c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	f003 0301 	and.w	r3, r3, #1
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d001      	beq.n	8006cfa <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	e077      	b.n	8006dea <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d107      	bne.n	8006d10 <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	2200      	movs	r2, #0
 8006d04:	65da      	str	r2, [r3, #92]	; 0x5c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8006d0c:	661a      	str	r2, [r3, #96]	; 0x60
 8006d0e:	e006      	b.n	8006d1e <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006d16:	65da      	str	r2, [r3, #92]	; 0x5c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Frame definition */
  switch (datasize)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2b03      	cmp	r3, #3
 8006d22:	d84f      	bhi.n	8006dc4 <SAI_InitI2S+0x130>
 8006d24:	a201      	add	r2, pc, #4	; (adr r2, 8006d2c <SAI_InitI2S+0x98>)
 8006d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d2a:	bf00      	nop
 8006d2c:	08006d3d 	.word	0x08006d3d
 8006d30:	08006d5f 	.word	0x08006d5f
 8006d34:	08006d81 	.word	0x08006d81
 8006d38:	08006da3 	.word	0x08006da3
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2280      	movs	r2, #128	; 0x80
 8006d40:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	085b      	lsrs	r3, r3, #1
 8006d46:	015a      	lsls	r2, r3, #5
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	085b      	lsrs	r3, r3, #1
 8006d50:	011a      	lsls	r2, r3, #4
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2240      	movs	r2, #64	; 0x40
 8006d5a:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8006d5c:	e035      	b.n	8006dca <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2280      	movs	r2, #128	; 0x80
 8006d62:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	085b      	lsrs	r3, r3, #1
 8006d68:	019a      	lsls	r2, r3, #6
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	085b      	lsrs	r3, r3, #1
 8006d72:	015a      	lsls	r2, r3, #5
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	2280      	movs	r2, #128	; 0x80
 8006d7c:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8006d7e:	e024      	b.n	8006dca <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	22c0      	movs	r2, #192	; 0xc0
 8006d84:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	085b      	lsrs	r3, r3, #1
 8006d8a:	019a      	lsls	r2, r3, #6
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	085b      	lsrs	r3, r3, #1
 8006d94:	015a      	lsls	r2, r3, #5
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2280      	movs	r2, #128	; 0x80
 8006d9e:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8006da0:	e013      	b.n	8006dca <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	22e0      	movs	r2, #224	; 0xe0
 8006da6:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	085b      	lsrs	r3, r3, #1
 8006dac:	019a      	lsls	r2, r3, #6
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	085b      	lsrs	r3, r3, #1
 8006db6:	015a      	lsls	r2, r3, #5
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	2280      	movs	r2, #128	; 0x80
 8006dc0:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8006dc2:	e002      	b.n	8006dca <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	75fb      	strb	r3, [r7, #23]
      break;
 8006dc8:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	2b02      	cmp	r3, #2
 8006dce:	d10b      	bne.n	8006de8 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2b01      	cmp	r3, #1
 8006dd4:	d102      	bne.n	8006ddc <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	2210      	movs	r2, #16
 8006dda:	665a      	str	r2, [r3, #100]	; 0x64
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2b02      	cmp	r3, #2
 8006de0:	d102      	bne.n	8006de8 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	2208      	movs	r2, #8
 8006de6:	665a      	str	r2, [r3, #100]	; 0x64
    }
  }
  return status;
 8006de8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	371c      	adds	r7, #28
 8006dee:	46bd      	mov	sp, r7
 8006df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df4:	4770      	bx	lr
 8006df6:	bf00      	nop

08006df8 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b087      	sub	sp, #28
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	60f8      	str	r0, [r7, #12]
 8006e00:	60b9      	str	r1, [r7, #8]
 8006e02:	607a      	str	r2, [r7, #4]
 8006e04:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e06:	2300      	movs	r3, #0
 8006e08:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	641a      	str	r2, [r3, #64]	; 0x40
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	2200      	movs	r2, #0
 8006e14:	649a      	str	r2, [r3, #72]	; 0x48
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d003      	beq.n	8006e26 <SAI_InitPCM+0x2e>
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	2b02      	cmp	r3, #2
 8006e24:	d103      	bne.n	8006e2e <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2201      	movs	r2, #1
 8006e2a:	64da      	str	r2, [r3, #76]	; 0x4c
 8006e2c:	e002      	b.n	8006e34 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2200      	movs	r2, #0
 8006e32:	64da      	str	r2, [r3, #76]	; 0x4c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2200      	movs	r2, #0
 8006e38:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006e40:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8006e48:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.SlotNumber      = nbslot;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	683a      	ldr	r2, [r7, #0]
 8006e54:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006e5c:	671a      	str	r2, [r3, #112]	; 0x70

  if (protocol == SAI_PCM_SHORT)
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	2b04      	cmp	r3, #4
 8006e62:	d103      	bne.n	8006e6c <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2201      	movs	r2, #1
 8006e68:	655a      	str	r2, [r3, #84]	; 0x54
 8006e6a:	e002      	b.n	8006e72 <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	220d      	movs	r2, #13
 8006e70:	655a      	str	r2, [r3, #84]	; 0x54
  }

  switch (datasize)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2b03      	cmp	r3, #3
 8006e76:	d837      	bhi.n	8006ee8 <SAI_InitPCM+0xf0>
 8006e78:	a201      	add	r2, pc, #4	; (adr r2, 8006e80 <SAI_InitPCM+0x88>)
 8006e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e7e:	bf00      	nop
 8006e80:	08006e91 	.word	0x08006e91
 8006e84:	08006ea7 	.word	0x08006ea7
 8006e88:	08006ebd 	.word	0x08006ebd
 8006e8c:	08006ed3 	.word	0x08006ed3
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	2280      	movs	r2, #128	; 0x80
 8006e94:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	011a      	lsls	r2, r3, #4
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	2240      	movs	r2, #64	; 0x40
 8006ea2:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8006ea4:	e023      	b.n	8006eee <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	2280      	movs	r2, #128	; 0x80
 8006eaa:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	015a      	lsls	r2, r3, #5
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2280      	movs	r2, #128	; 0x80
 8006eb8:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8006eba:	e018      	b.n	8006eee <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	22c0      	movs	r2, #192	; 0xc0
 8006ec0:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	015a      	lsls	r2, r3, #5
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2280      	movs	r2, #128	; 0x80
 8006ece:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8006ed0:	e00d      	b.n	8006eee <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	22e0      	movs	r2, #224	; 0xe0
 8006ed6:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	015a      	lsls	r2, r3, #5
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	2280      	movs	r2, #128	; 0x80
 8006ee4:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8006ee6:	e002      	b.n	8006eee <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 8006ee8:	2301      	movs	r3, #1
 8006eea:	75fb      	strb	r3, [r7, #23]
      break;
 8006eec:	bf00      	nop
  }

  return status;
 8006eee:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	371c      	adds	r7, #28
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efa:	4770      	bx	lr

08006efc <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b085      	sub	sp, #20
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8006f04:	4b18      	ldr	r3, [pc, #96]	; (8006f68 <SAI_Disable+0x6c>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a18      	ldr	r2, [pc, #96]	; (8006f6c <SAI_Disable+0x70>)
 8006f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8006f0e:	0b1b      	lsrs	r3, r3, #12
 8006f10:	009b      	lsls	r3, r3, #2
 8006f12:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8006f14:	2300      	movs	r3, #0
 8006f16:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	681a      	ldr	r2, [r3, #0]
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006f26:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d10a      	bne.n	8006f44 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f34:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      status = HAL_TIMEOUT;
 8006f3e:	2303      	movs	r3, #3
 8006f40:	72fb      	strb	r3, [r7, #11]
      break;
 8006f42:	e009      	b.n	8006f58 <SAI_Disable+0x5c>
    }
    count--;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	3b01      	subs	r3, #1
 8006f48:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d1e7      	bne.n	8006f28 <SAI_Disable+0x2c>

  return status;
 8006f58:	7afb      	ldrb	r3, [r7, #11]
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3714      	adds	r7, #20
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f64:	4770      	bx	lr
 8006f66:	bf00      	nop
 8006f68:	20000000 	.word	0x20000000
 8006f6c:	95cbec1b 	.word	0x95cbec1b

08006f70 <HAL_SMBUS_Init>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_Init(SMBUS_HandleTypeDef *hsmbus)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b082      	sub	sp, #8
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  /* Check the SMBUS handle allocation */
  if (hsmbus == NULL)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d101      	bne.n	8006f82 <HAL_SMBUS_Init+0x12>
  {
    return HAL_ERROR;
 8006f7e:	2301      	movs	r3, #1
 8006f80:	e0aa      	b.n	80070d8 <HAL_SMBUS_Init+0x168>
  assert_param(IS_SMBUS_GENERAL_CALL(hsmbus->Init.GeneralCallMode));
  assert_param(IS_SMBUS_NO_STRETCH(hsmbus->Init.NoStretchMode));
  assert_param(IS_SMBUS_PEC(hsmbus->Init.PacketErrorCheckMode));
  assert_param(IS_SMBUS_PERIPHERAL_MODE(hsmbus->Init.PeripheralMode));

  if (hsmbus->State == HAL_SMBUS_STATE_RESET)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d106      	bne.n	8006f98 <HAL_SMBUS_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hsmbus->Lock = HAL_UNLOCKED;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hsmbus->MspInitCallback(hsmbus);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_SMBUS_MspInit(hsmbus);
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f7fa fd50 	bl	8001a38 <HAL_SMBUS_MspInit>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
  }

  hsmbus->State = HAL_SMBUS_STATE_BUSY;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2202      	movs	r2, #2
 8006f9c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Disable the selected SMBUS peripheral */
  __HAL_SMBUS_DISABLE(hsmbus);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	681a      	ldr	r2, [r3, #0]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f022 0201 	bic.w	r2, r2, #1
 8006fac:	601a      	str	r2, [r3, #0]

  /*---------------------------- SMBUSx TIMINGR Configuration ------------------------*/
  /* Configure SMBUSx: Frequency range */
  hsmbus->Instance->TIMINGR = hsmbus->Init.Timing & TIMING_CLEAR_MASK;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	685a      	ldr	r2, [r3, #4]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006fba:	611a      	str	r2, [r3, #16]

  /*---------------------------- SMBUSx TIMEOUTR Configuration ------------------------*/
  /* Configure SMBUSx: Bus Timeout  */
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TIMOUTEN;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	695a      	ldr	r2, [r3, #20]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006fca:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TEXTEN;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	695a      	ldr	r2, [r3, #20]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006fda:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR = hsmbus->Init.SMBusTimeout;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	687a      	ldr	r2, [r7, #4]
 8006fe2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006fe4:	615a      	str	r2, [r3, #20]

  /*---------------------------- SMBUSx OAR1 Configuration -----------------------*/
  /* Configure SMBUSx: Own Address1 and ack own address1 mode */
  hsmbus->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	689a      	ldr	r2, [r3, #8]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006ff4:	609a      	str	r2, [r3, #8]

  if (hsmbus->Init.OwnAddress1 != 0UL)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	68db      	ldr	r3, [r3, #12]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d012      	beq.n	8007024 <HAL_SMBUS_Init+0xb4>
  {
    if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_7BIT)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	691b      	ldr	r3, [r3, #16]
 8007002:	2b01      	cmp	r3, #1
 8007004:	d107      	bne.n	8007016 <HAL_SMBUS_Init+0xa6>
    {
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | hsmbus->Init.OwnAddress1);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	68da      	ldr	r2, [r3, #12]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007012:	609a      	str	r2, [r3, #8]
 8007014:	e006      	b.n	8007024 <HAL_SMBUS_Init+0xb4>
    }
    else /* SMBUS_ADDRESSINGMODE_10BIT */
    {
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hsmbus->Init.OwnAddress1);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	68da      	ldr	r2, [r3, #12]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007022:	609a      	str	r2, [r3, #8]
    }
  }

  /*---------------------------- SMBUSx CR2 Configuration ------------------------*/
  /* Configure SMBUSx: Addressing Master mode */
  if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_10BIT)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	691b      	ldr	r3, [r3, #16]
 8007028:	2b02      	cmp	r3, #2
 800702a:	d104      	bne.n	8007036 <HAL_SMBUS_Init+0xc6>
  {
    hsmbus->Instance->CR2 = (I2C_CR2_ADD10);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007034:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process) */
  /* AUTOEND and NACK bit will be manage during Transfer process */
  hsmbus->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	687a      	ldr	r2, [r7, #4]
 800703e:	6812      	ldr	r2, [r2, #0]
 8007040:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007044:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007048:	6053      	str	r3, [r2, #4]

  /*---------------------------- SMBUSx OAR2 Configuration -----------------------*/
  /* Configure SMBUSx: Dual mode and Own Address2 */
  hsmbus->Instance->OAR2 = (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2 | \
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	695a      	ldr	r2, [r3, #20]
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	699b      	ldr	r3, [r3, #24]
 8007052:	ea42 0103 	orr.w	r1, r2, r3
                            (hsmbus->Init.OwnAddress2Masks << 8U));
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	69db      	ldr	r3, [r3, #28]
 800705a:	021a      	lsls	r2, r3, #8
  hsmbus->Instance->OAR2 = (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2 | \
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	430a      	orrs	r2, r1
 8007062:	60da      	str	r2, [r3, #12]

  /*---------------------------- SMBUSx CR1 Configuration ------------------------*/
  /* Configure SMBUSx: Generalcall and NoStretch mode */
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6a1a      	ldr	r2, [r3, #32]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800706c:	431a      	orrs	r2, r3
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 8007072:	431a      	orrs	r2, r3
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007078:	ea42 0103 	orr.w	r1, r2, r3
                           hsmbus->Init.AnalogFilter);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	689a      	ldr	r2, [r3, #8]
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 8007084:	430a      	orrs	r2, r1
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 8007086:	601a      	str	r2, [r3, #0]

  /* Enable Slave Byte Control only in case of Packet Error Check is enabled
     and SMBUS Peripheral is set in Slave mode */
  if ((hsmbus->Init.PacketErrorCheckMode == SMBUS_PEC_ENABLE) && \
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800708c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007090:	d110      	bne.n	80070b4 <HAL_SMBUS_Init+0x144>
      ((hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE) || \
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  if ((hsmbus->Init.PacketErrorCheckMode == SMBUS_PEC_ENABLE) && \
 8007096:	2b00      	cmp	r3, #0
 8007098:	d004      	beq.n	80070a4 <HAL_SMBUS_Init+0x134>
       (hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE_ARP)))
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      ((hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE) || \
 800709e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80070a2:	d107      	bne.n	80070b4 <HAL_SMBUS_Init+0x144>
  {
    hsmbus->Instance->CR1 |= I2C_CR1_SBC;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	681a      	ldr	r2, [r3, #0]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80070b2:	601a      	str	r2, [r3, #0]
  }

  /* Enable the selected SMBUS peripheral */
  __HAL_SMBUS_ENABLE(hsmbus);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	681a      	ldr	r2, [r3, #0]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f042 0201 	orr.w	r2, r2, #1
 80070c2:	601a      	str	r2, [r3, #0]

  hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2200      	movs	r2, #0
 80070c8:	64da      	str	r2, [r3, #76]	; 0x4c
  hsmbus->PreviousState = HAL_SMBUS_STATE_READY;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2201      	movs	r2, #1
 80070ce:	641a      	str	r2, [r3, #64]	; 0x40
  hsmbus->State = HAL_SMBUS_STATE_READY;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2201      	movs	r2, #1
 80070d4:	649a      	str	r2, [r3, #72]	; 0x48

  return HAL_OK;
 80070d6:	2300      	movs	r3, #0
}
 80070d8:	4618      	mov	r0, r3
 80070da:	3708      	adds	r7, #8
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}

080070e0 <HAL_SMBUS_EnableAlert_IT>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUSx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_EnableAlert_IT(SMBUS_HandleTypeDef *hsmbus)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b082      	sub	sp, #8
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  /* Enable SMBus alert */
  hsmbus->Instance->CR1 |= I2C_CR1_ALERTEN;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	681a      	ldr	r2, [r3, #0]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80070f6:	601a      	str	r2, [r3, #0]

  /* Clear ALERT flag */
  __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_ALERT);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007100:	61da      	str	r2, [r3, #28]

  /* Enable Alert Interrupt */
  SMBUS_Enable_IRQ(hsmbus, SMBUS_IT_ALERT);
 8007102:	2180      	movs	r1, #128	; 0x80
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f000 f805 	bl	8007114 <SMBUS_Enable_IRQ>

  return HAL_OK;
 800710a:	2300      	movs	r3, #0
}
 800710c:	4618      	mov	r0, r3
 800710e:	3708      	adds	r7, #8
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}

08007114 <SMBUS_Enable_IRQ>:
  *                the configuration information for the specified SMBUS.
  * @param  InterruptRequest Value of @ref SMBUS_Interrupt_configuration_definition.
  * @retval HAL status
  */
static void SMBUS_Enable_IRQ(SMBUS_HandleTypeDef *hsmbus, uint32_t InterruptRequest)
{
 8007114:	b480      	push	{r7}
 8007116:	b085      	sub	sp, #20
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
 800711c:	6039      	str	r1, [r7, #0]
  uint32_t tmpisr = 0UL;
 800711e:	2300      	movs	r3, #0
 8007120:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & SMBUS_IT_ALERT) == SMBUS_IT_ALERT)
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007128:	2b00      	cmp	r3, #0
 800712a:	d003      	beq.n	8007134 <SMBUS_Enable_IRQ+0x20>
  {
    /* Enable ERR interrupt */
    tmpisr |= SMBUS_IT_ERRI;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007132:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_ADDR) == SMBUS_IT_ADDR)
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800713a:	2b38      	cmp	r3, #56	; 0x38
 800713c:	d103      	bne.n	8007146 <SMBUS_Enable_IRQ+0x32>
  {
    /* Enable ADDR, STOP interrupt */
    tmpisr |= SMBUS_IT_ADDRI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_ERRI;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8007144:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_TX) == SMBUS_IT_TX)
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800714c:	2bf2      	cmp	r3, #242	; 0xf2
 800714e:	d103      	bne.n	8007158 <SMBUS_Enable_IRQ+0x44>
  {
    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    tmpisr |= SMBUS_IT_ERRI | SMBUS_IT_TCI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_TXI;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8007156:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_RX) == SMBUS_IT_RX)
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	f003 03d4 	and.w	r3, r3, #212	; 0xd4
 800715e:	2bd4      	cmp	r3, #212	; 0xd4
 8007160:	d103      	bne.n	800716a <SMBUS_Enable_IRQ+0x56>
  {
    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    tmpisr |= SMBUS_IT_ERRI | SMBUS_IT_TCI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_RXI;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8007168:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of SMBUS interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_SMBUS_ENABLE_IT(hsmbus, tmpisr);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	6819      	ldr	r1, [r3, #0]
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	68fa      	ldr	r2, [r7, #12]
 8007176:	430a      	orrs	r2, r1
 8007178:	601a      	str	r2, [r3, #0]
}
 800717a:	bf00      	nop
 800717c:	3714      	adds	r7, #20
 800717e:	46bd      	mov	sp, r7
 8007180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007184:	4770      	bx	lr

08007186 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007186:	b580      	push	{r7, lr}
 8007188:	b084      	sub	sp, #16
 800718a:	af00      	add	r7, sp, #0
 800718c:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d101      	bne.n	8007198 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007194:	2301      	movs	r3, #1
 8007196:	e095      	b.n	80072c4 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800719c:	2b00      	cmp	r3, #0
 800719e:	d108      	bne.n	80071b2 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80071a8:	d009      	beq.n	80071be <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2200      	movs	r2, #0
 80071ae:	61da      	str	r2, [r3, #28]
 80071b0:	e005      	b.n	80071be <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2200      	movs	r2, #0
 80071b6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2200      	movs	r2, #0
 80071bc:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2200      	movs	r2, #0
 80071c2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80071ca:	b2db      	uxtb	r3, r3
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d106      	bne.n	80071de <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2200      	movs	r2, #0
 80071d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f7fa fdbb 	bl	8001d54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2202      	movs	r2, #2
 80071e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	681a      	ldr	r2, [r3, #0]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071f4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	68db      	ldr	r3, [r3, #12]
 80071fa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80071fe:	d902      	bls.n	8007206 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007200:	2300      	movs	r3, #0
 8007202:	60fb      	str	r3, [r7, #12]
 8007204:	e002      	b.n	800720c <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007206:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800720a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	68db      	ldr	r3, [r3, #12]
 8007210:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007214:	d007      	beq.n	8007226 <HAL_SPI_Init+0xa0>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	68db      	ldr	r3, [r3, #12]
 800721a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800721e:	d002      	beq.n	8007226 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2200      	movs	r2, #0
 8007224:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	689b      	ldr	r3, [r3, #8]
 8007232:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007236:	431a      	orrs	r2, r3
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	691b      	ldr	r3, [r3, #16]
 800723c:	f003 0302 	and.w	r3, r3, #2
 8007240:	431a      	orrs	r2, r3
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	695b      	ldr	r3, [r3, #20]
 8007246:	f003 0301 	and.w	r3, r3, #1
 800724a:	431a      	orrs	r2, r3
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	699b      	ldr	r3, [r3, #24]
 8007250:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007254:	431a      	orrs	r2, r3
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	69db      	ldr	r3, [r3, #28]
 800725a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800725e:	431a      	orrs	r2, r3
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6a1b      	ldr	r3, [r3, #32]
 8007264:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007268:	ea42 0103 	orr.w	r1, r2, r3
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007270:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	430a      	orrs	r2, r1
 800727a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	699b      	ldr	r3, [r3, #24]
 8007280:	0c1b      	lsrs	r3, r3, #16
 8007282:	f003 0204 	and.w	r2, r3, #4
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800728a:	f003 0310 	and.w	r3, r3, #16
 800728e:	431a      	orrs	r2, r3
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007294:	f003 0308 	and.w	r3, r3, #8
 8007298:	431a      	orrs	r2, r3
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	68db      	ldr	r3, [r3, #12]
 800729e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80072a2:	ea42 0103 	orr.w	r1, r2, r3
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	430a      	orrs	r2, r1
 80072b2:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2200      	movs	r2, #0
 80072b8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2201      	movs	r2, #1
 80072be:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80072c2:	2300      	movs	r3, #0
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	3710      	adds	r7, #16
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}

080072cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b082      	sub	sp, #8
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d101      	bne.n	80072de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80072da:	2301      	movs	r3, #1
 80072dc:	e049      	b.n	8007372 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072e4:	b2db      	uxtb	r3, r3
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d106      	bne.n	80072f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2200      	movs	r2, #0
 80072ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f7fa fe24 	bl	8001f40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2202      	movs	r2, #2
 80072fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681a      	ldr	r2, [r3, #0]
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	3304      	adds	r3, #4
 8007308:	4619      	mov	r1, r3
 800730a:	4610      	mov	r0, r2
 800730c:	f000 ff0a 	bl	8008124 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2201      	movs	r2, #1
 8007314:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2201      	movs	r2, #1
 800731c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2201      	movs	r2, #1
 8007324:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2201      	movs	r2, #1
 800732c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2201      	movs	r2, #1
 8007334:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2201      	movs	r2, #1
 800733c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2201      	movs	r2, #1
 8007344:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2201      	movs	r2, #1
 800734c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2201      	movs	r2, #1
 8007354:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2201      	movs	r2, #1
 800735c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2201      	movs	r2, #1
 8007364:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2201      	movs	r2, #1
 800736c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007370:	2300      	movs	r3, #0
}
 8007372:	4618      	mov	r0, r3
 8007374:	3708      	adds	r7, #8
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}

0800737a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800737a:	b580      	push	{r7, lr}
 800737c:	b082      	sub	sp, #8
 800737e:	af00      	add	r7, sp, #0
 8007380:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d101      	bne.n	800738c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007388:	2301      	movs	r3, #1
 800738a:	e049      	b.n	8007420 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007392:	b2db      	uxtb	r3, r3
 8007394:	2b00      	cmp	r3, #0
 8007396:	d106      	bne.n	80073a6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2200      	movs	r2, #0
 800739c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f7fa fd4b 	bl	8001e3c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2202      	movs	r2, #2
 80073aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681a      	ldr	r2, [r3, #0]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	3304      	adds	r3, #4
 80073b6:	4619      	mov	r1, r3
 80073b8:	4610      	mov	r0, r2
 80073ba:	f000 feb3 	bl	8008124 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2201      	movs	r2, #1
 80073c2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2201      	movs	r2, #1
 80073ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2201      	movs	r2, #1
 80073d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2201      	movs	r2, #1
 80073da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2201      	movs	r2, #1
 80073e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2201      	movs	r2, #1
 80073ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2201      	movs	r2, #1
 80073f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2201      	movs	r2, #1
 80073fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2201      	movs	r2, #1
 8007402:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2201      	movs	r2, #1
 800740a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2201      	movs	r2, #1
 8007412:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2201      	movs	r2, #1
 800741a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800741e:	2300      	movs	r3, #0
}
 8007420:	4618      	mov	r0, r3
 8007422:	3708      	adds	r7, #8
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}

08007428 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b084      	sub	sp, #16
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d109      	bne.n	800744c <HAL_TIM_PWM_Start+0x24>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800743e:	b2db      	uxtb	r3, r3
 8007440:	2b01      	cmp	r3, #1
 8007442:	bf14      	ite	ne
 8007444:	2301      	movne	r3, #1
 8007446:	2300      	moveq	r3, #0
 8007448:	b2db      	uxtb	r3, r3
 800744a:	e03c      	b.n	80074c6 <HAL_TIM_PWM_Start+0x9e>
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	2b04      	cmp	r3, #4
 8007450:	d109      	bne.n	8007466 <HAL_TIM_PWM_Start+0x3e>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007458:	b2db      	uxtb	r3, r3
 800745a:	2b01      	cmp	r3, #1
 800745c:	bf14      	ite	ne
 800745e:	2301      	movne	r3, #1
 8007460:	2300      	moveq	r3, #0
 8007462:	b2db      	uxtb	r3, r3
 8007464:	e02f      	b.n	80074c6 <HAL_TIM_PWM_Start+0x9e>
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	2b08      	cmp	r3, #8
 800746a:	d109      	bne.n	8007480 <HAL_TIM_PWM_Start+0x58>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007472:	b2db      	uxtb	r3, r3
 8007474:	2b01      	cmp	r3, #1
 8007476:	bf14      	ite	ne
 8007478:	2301      	movne	r3, #1
 800747a:	2300      	moveq	r3, #0
 800747c:	b2db      	uxtb	r3, r3
 800747e:	e022      	b.n	80074c6 <HAL_TIM_PWM_Start+0x9e>
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	2b0c      	cmp	r3, #12
 8007484:	d109      	bne.n	800749a <HAL_TIM_PWM_Start+0x72>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800748c:	b2db      	uxtb	r3, r3
 800748e:	2b01      	cmp	r3, #1
 8007490:	bf14      	ite	ne
 8007492:	2301      	movne	r3, #1
 8007494:	2300      	moveq	r3, #0
 8007496:	b2db      	uxtb	r3, r3
 8007498:	e015      	b.n	80074c6 <HAL_TIM_PWM_Start+0x9e>
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	2b10      	cmp	r3, #16
 800749e:	d109      	bne.n	80074b4 <HAL_TIM_PWM_Start+0x8c>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80074a6:	b2db      	uxtb	r3, r3
 80074a8:	2b01      	cmp	r3, #1
 80074aa:	bf14      	ite	ne
 80074ac:	2301      	movne	r3, #1
 80074ae:	2300      	moveq	r3, #0
 80074b0:	b2db      	uxtb	r3, r3
 80074b2:	e008      	b.n	80074c6 <HAL_TIM_PWM_Start+0x9e>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80074ba:	b2db      	uxtb	r3, r3
 80074bc:	2b01      	cmp	r3, #1
 80074be:	bf14      	ite	ne
 80074c0:	2301      	movne	r3, #1
 80074c2:	2300      	moveq	r3, #0
 80074c4:	b2db      	uxtb	r3, r3
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d001      	beq.n	80074ce <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80074ca:	2301      	movs	r3, #1
 80074cc:	e09c      	b.n	8007608 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d104      	bne.n	80074de <HAL_TIM_PWM_Start+0xb6>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2202      	movs	r2, #2
 80074d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80074dc:	e023      	b.n	8007526 <HAL_TIM_PWM_Start+0xfe>
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	2b04      	cmp	r3, #4
 80074e2:	d104      	bne.n	80074ee <HAL_TIM_PWM_Start+0xc6>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2202      	movs	r2, #2
 80074e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80074ec:	e01b      	b.n	8007526 <HAL_TIM_PWM_Start+0xfe>
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	2b08      	cmp	r3, #8
 80074f2:	d104      	bne.n	80074fe <HAL_TIM_PWM_Start+0xd6>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2202      	movs	r2, #2
 80074f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80074fc:	e013      	b.n	8007526 <HAL_TIM_PWM_Start+0xfe>
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	2b0c      	cmp	r3, #12
 8007502:	d104      	bne.n	800750e <HAL_TIM_PWM_Start+0xe6>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2202      	movs	r2, #2
 8007508:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800750c:	e00b      	b.n	8007526 <HAL_TIM_PWM_Start+0xfe>
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	2b10      	cmp	r3, #16
 8007512:	d104      	bne.n	800751e <HAL_TIM_PWM_Start+0xf6>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2202      	movs	r2, #2
 8007518:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800751c:	e003      	b.n	8007526 <HAL_TIM_PWM_Start+0xfe>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2202      	movs	r2, #2
 8007522:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	2201      	movs	r2, #1
 800752c:	6839      	ldr	r1, [r7, #0]
 800752e:	4618      	mov	r0, r3
 8007530:	f001 fb26 	bl	8008b80 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4a35      	ldr	r2, [pc, #212]	; (8007610 <HAL_TIM_PWM_Start+0x1e8>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d013      	beq.n	8007566 <HAL_TIM_PWM_Start+0x13e>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	4a34      	ldr	r2, [pc, #208]	; (8007614 <HAL_TIM_PWM_Start+0x1ec>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d00e      	beq.n	8007566 <HAL_TIM_PWM_Start+0x13e>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4a32      	ldr	r2, [pc, #200]	; (8007618 <HAL_TIM_PWM_Start+0x1f0>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d009      	beq.n	8007566 <HAL_TIM_PWM_Start+0x13e>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4a31      	ldr	r2, [pc, #196]	; (800761c <HAL_TIM_PWM_Start+0x1f4>)
 8007558:	4293      	cmp	r3, r2
 800755a:	d004      	beq.n	8007566 <HAL_TIM_PWM_Start+0x13e>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4a2f      	ldr	r2, [pc, #188]	; (8007620 <HAL_TIM_PWM_Start+0x1f8>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d101      	bne.n	800756a <HAL_TIM_PWM_Start+0x142>
 8007566:	2301      	movs	r3, #1
 8007568:	e000      	b.n	800756c <HAL_TIM_PWM_Start+0x144>
 800756a:	2300      	movs	r3, #0
 800756c:	2b00      	cmp	r3, #0
 800756e:	d007      	beq.n	8007580 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800757e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4a22      	ldr	r2, [pc, #136]	; (8007610 <HAL_TIM_PWM_Start+0x1e8>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d01d      	beq.n	80075c6 <HAL_TIM_PWM_Start+0x19e>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007592:	d018      	beq.n	80075c6 <HAL_TIM_PWM_Start+0x19e>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a22      	ldr	r2, [pc, #136]	; (8007624 <HAL_TIM_PWM_Start+0x1fc>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d013      	beq.n	80075c6 <HAL_TIM_PWM_Start+0x19e>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4a21      	ldr	r2, [pc, #132]	; (8007628 <HAL_TIM_PWM_Start+0x200>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d00e      	beq.n	80075c6 <HAL_TIM_PWM_Start+0x19e>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a1f      	ldr	r2, [pc, #124]	; (800762c <HAL_TIM_PWM_Start+0x204>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d009      	beq.n	80075c6 <HAL_TIM_PWM_Start+0x19e>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a17      	ldr	r2, [pc, #92]	; (8007614 <HAL_TIM_PWM_Start+0x1ec>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d004      	beq.n	80075c6 <HAL_TIM_PWM_Start+0x19e>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a15      	ldr	r2, [pc, #84]	; (8007618 <HAL_TIM_PWM_Start+0x1f0>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d115      	bne.n	80075f2 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	689a      	ldr	r2, [r3, #8]
 80075cc:	4b18      	ldr	r3, [pc, #96]	; (8007630 <HAL_TIM_PWM_Start+0x208>)
 80075ce:	4013      	ands	r3, r2
 80075d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	2b06      	cmp	r3, #6
 80075d6:	d015      	beq.n	8007604 <HAL_TIM_PWM_Start+0x1dc>
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075de:	d011      	beq.n	8007604 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	681a      	ldr	r2, [r3, #0]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f042 0201 	orr.w	r2, r2, #1
 80075ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075f0:	e008      	b.n	8007604 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	681a      	ldr	r2, [r3, #0]
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f042 0201 	orr.w	r2, r2, #1
 8007600:	601a      	str	r2, [r3, #0]
 8007602:	e000      	b.n	8007606 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007604:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007606:	2300      	movs	r3, #0
}
 8007608:	4618      	mov	r0, r3
 800760a:	3710      	adds	r7, #16
 800760c:	46bd      	mov	sp, r7
 800760e:	bd80      	pop	{r7, pc}
 8007610:	40012c00 	.word	0x40012c00
 8007614:	40013400 	.word	0x40013400
 8007618:	40014000 	.word	0x40014000
 800761c:	40014400 	.word	0x40014400
 8007620:	40014800 	.word	0x40014800
 8007624:	40000400 	.word	0x40000400
 8007628:	40000800 	.word	0x40000800
 800762c:	40000c00 	.word	0x40000c00
 8007630:	00010007 	.word	0x00010007

08007634 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b082      	sub	sp, #8
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d101      	bne.n	8007646 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007642:	2301      	movs	r3, #1
 8007644:	e049      	b.n	80076da <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800764c:	b2db      	uxtb	r3, r3
 800764e:	2b00      	cmp	r3, #0
 8007650:	d106      	bne.n	8007660 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2200      	movs	r2, #0
 8007656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f000 f841 	bl	80076e2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2202      	movs	r2, #2
 8007664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681a      	ldr	r2, [r3, #0]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	3304      	adds	r3, #4
 8007670:	4619      	mov	r1, r3
 8007672:	4610      	mov	r0, r2
 8007674:	f000 fd56 	bl	8008124 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2201      	movs	r2, #1
 800767c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2201      	movs	r2, #1
 8007684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2201      	movs	r2, #1
 800768c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2201      	movs	r2, #1
 8007694:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2201      	movs	r2, #1
 800769c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2201      	movs	r2, #1
 80076a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2201      	movs	r2, #1
 80076ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2201      	movs	r2, #1
 80076b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2201      	movs	r2, #1
 80076bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2201      	movs	r2, #1
 80076c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2201      	movs	r2, #1
 80076cc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2201      	movs	r2, #1
 80076d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80076d8:	2300      	movs	r3, #0
}
 80076da:	4618      	mov	r0, r3
 80076dc:	3708      	adds	r7, #8
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}

080076e2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80076e2:	b480      	push	{r7}
 80076e4:	b083      	sub	sp, #12
 80076e6:	af00      	add	r7, sp, #0
 80076e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80076ea:	bf00      	nop
 80076ec:	370c      	adds	r7, #12
 80076ee:	46bd      	mov	sp, r7
 80076f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f4:	4770      	bx	lr
	...

080076f8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b084      	sub	sp, #16
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
 8007700:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007702:	2300      	movs	r3, #0
 8007704:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d104      	bne.n	8007716 <HAL_TIM_IC_Start_IT+0x1e>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007712:	b2db      	uxtb	r3, r3
 8007714:	e023      	b.n	800775e <HAL_TIM_IC_Start_IT+0x66>
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	2b04      	cmp	r3, #4
 800771a:	d104      	bne.n	8007726 <HAL_TIM_IC_Start_IT+0x2e>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007722:	b2db      	uxtb	r3, r3
 8007724:	e01b      	b.n	800775e <HAL_TIM_IC_Start_IT+0x66>
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	2b08      	cmp	r3, #8
 800772a:	d104      	bne.n	8007736 <HAL_TIM_IC_Start_IT+0x3e>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007732:	b2db      	uxtb	r3, r3
 8007734:	e013      	b.n	800775e <HAL_TIM_IC_Start_IT+0x66>
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	2b0c      	cmp	r3, #12
 800773a:	d104      	bne.n	8007746 <HAL_TIM_IC_Start_IT+0x4e>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007742:	b2db      	uxtb	r3, r3
 8007744:	e00b      	b.n	800775e <HAL_TIM_IC_Start_IT+0x66>
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	2b10      	cmp	r3, #16
 800774a:	d104      	bne.n	8007756 <HAL_TIM_IC_Start_IT+0x5e>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007752:	b2db      	uxtb	r3, r3
 8007754:	e003      	b.n	800775e <HAL_TIM_IC_Start_IT+0x66>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800775c:	b2db      	uxtb	r3, r3
 800775e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d104      	bne.n	8007770 <HAL_TIM_IC_Start_IT+0x78>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800776c:	b2db      	uxtb	r3, r3
 800776e:	e013      	b.n	8007798 <HAL_TIM_IC_Start_IT+0xa0>
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	2b04      	cmp	r3, #4
 8007774:	d104      	bne.n	8007780 <HAL_TIM_IC_Start_IT+0x88>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800777c:	b2db      	uxtb	r3, r3
 800777e:	e00b      	b.n	8007798 <HAL_TIM_IC_Start_IT+0xa0>
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	2b08      	cmp	r3, #8
 8007784:	d104      	bne.n	8007790 <HAL_TIM_IC_Start_IT+0x98>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800778c:	b2db      	uxtb	r3, r3
 800778e:	e003      	b.n	8007798 <HAL_TIM_IC_Start_IT+0xa0>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8007796:	b2db      	uxtb	r3, r3
 8007798:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800779a:	7bbb      	ldrb	r3, [r7, #14]
 800779c:	2b01      	cmp	r3, #1
 800779e:	d102      	bne.n	80077a6 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80077a0:	7b7b      	ldrb	r3, [r7, #13]
 80077a2:	2b01      	cmp	r3, #1
 80077a4:	d001      	beq.n	80077aa <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80077a6:	2301      	movs	r3, #1
 80077a8:	e0dd      	b.n	8007966 <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d104      	bne.n	80077ba <HAL_TIM_IC_Start_IT+0xc2>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2202      	movs	r2, #2
 80077b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80077b8:	e023      	b.n	8007802 <HAL_TIM_IC_Start_IT+0x10a>
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	2b04      	cmp	r3, #4
 80077be:	d104      	bne.n	80077ca <HAL_TIM_IC_Start_IT+0xd2>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2202      	movs	r2, #2
 80077c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80077c8:	e01b      	b.n	8007802 <HAL_TIM_IC_Start_IT+0x10a>
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	2b08      	cmp	r3, #8
 80077ce:	d104      	bne.n	80077da <HAL_TIM_IC_Start_IT+0xe2>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2202      	movs	r2, #2
 80077d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80077d8:	e013      	b.n	8007802 <HAL_TIM_IC_Start_IT+0x10a>
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	2b0c      	cmp	r3, #12
 80077de:	d104      	bne.n	80077ea <HAL_TIM_IC_Start_IT+0xf2>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2202      	movs	r2, #2
 80077e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80077e8:	e00b      	b.n	8007802 <HAL_TIM_IC_Start_IT+0x10a>
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	2b10      	cmp	r3, #16
 80077ee:	d104      	bne.n	80077fa <HAL_TIM_IC_Start_IT+0x102>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2202      	movs	r2, #2
 80077f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80077f8:	e003      	b.n	8007802 <HAL_TIM_IC_Start_IT+0x10a>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2202      	movs	r2, #2
 80077fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d104      	bne.n	8007812 <HAL_TIM_IC_Start_IT+0x11a>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2202      	movs	r2, #2
 800780c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007810:	e013      	b.n	800783a <HAL_TIM_IC_Start_IT+0x142>
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	2b04      	cmp	r3, #4
 8007816:	d104      	bne.n	8007822 <HAL_TIM_IC_Start_IT+0x12a>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2202      	movs	r2, #2
 800781c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007820:	e00b      	b.n	800783a <HAL_TIM_IC_Start_IT+0x142>
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	2b08      	cmp	r3, #8
 8007826:	d104      	bne.n	8007832 <HAL_TIM_IC_Start_IT+0x13a>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2202      	movs	r2, #2
 800782c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007830:	e003      	b.n	800783a <HAL_TIM_IC_Start_IT+0x142>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2202      	movs	r2, #2
 8007836:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	2b0c      	cmp	r3, #12
 800783e:	d841      	bhi.n	80078c4 <HAL_TIM_IC_Start_IT+0x1cc>
 8007840:	a201      	add	r2, pc, #4	; (adr r2, 8007848 <HAL_TIM_IC_Start_IT+0x150>)
 8007842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007846:	bf00      	nop
 8007848:	0800787d 	.word	0x0800787d
 800784c:	080078c5 	.word	0x080078c5
 8007850:	080078c5 	.word	0x080078c5
 8007854:	080078c5 	.word	0x080078c5
 8007858:	0800788f 	.word	0x0800788f
 800785c:	080078c5 	.word	0x080078c5
 8007860:	080078c5 	.word	0x080078c5
 8007864:	080078c5 	.word	0x080078c5
 8007868:	080078a1 	.word	0x080078a1
 800786c:	080078c5 	.word	0x080078c5
 8007870:	080078c5 	.word	0x080078c5
 8007874:	080078c5 	.word	0x080078c5
 8007878:	080078b3 	.word	0x080078b3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	68da      	ldr	r2, [r3, #12]
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f042 0202 	orr.w	r2, r2, #2
 800788a:	60da      	str	r2, [r3, #12]
      break;
 800788c:	e01d      	b.n	80078ca <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	68da      	ldr	r2, [r3, #12]
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f042 0204 	orr.w	r2, r2, #4
 800789c:	60da      	str	r2, [r3, #12]
      break;
 800789e:	e014      	b.n	80078ca <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	68da      	ldr	r2, [r3, #12]
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f042 0208 	orr.w	r2, r2, #8
 80078ae:	60da      	str	r2, [r3, #12]
      break;
 80078b0:	e00b      	b.n	80078ca <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	68da      	ldr	r2, [r3, #12]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f042 0210 	orr.w	r2, r2, #16
 80078c0:	60da      	str	r2, [r3, #12]
      break;
 80078c2:	e002      	b.n	80078ca <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80078c4:	2301      	movs	r3, #1
 80078c6:	73fb      	strb	r3, [r7, #15]
      break;
 80078c8:	bf00      	nop
  }

  if (status == HAL_OK)
 80078ca:	7bfb      	ldrb	r3, [r7, #15]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d149      	bne.n	8007964 <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	2201      	movs	r2, #1
 80078d6:	6839      	ldr	r1, [r7, #0]
 80078d8:	4618      	mov	r0, r3
 80078da:	f001 f951 	bl	8008b80 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	4a23      	ldr	r2, [pc, #140]	; (8007970 <HAL_TIM_IC_Start_IT+0x278>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d01d      	beq.n	8007924 <HAL_TIM_IC_Start_IT+0x22c>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078f0:	d018      	beq.n	8007924 <HAL_TIM_IC_Start_IT+0x22c>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	4a1f      	ldr	r2, [pc, #124]	; (8007974 <HAL_TIM_IC_Start_IT+0x27c>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d013      	beq.n	8007924 <HAL_TIM_IC_Start_IT+0x22c>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a1d      	ldr	r2, [pc, #116]	; (8007978 <HAL_TIM_IC_Start_IT+0x280>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d00e      	beq.n	8007924 <HAL_TIM_IC_Start_IT+0x22c>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4a1c      	ldr	r2, [pc, #112]	; (800797c <HAL_TIM_IC_Start_IT+0x284>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d009      	beq.n	8007924 <HAL_TIM_IC_Start_IT+0x22c>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4a1a      	ldr	r2, [pc, #104]	; (8007980 <HAL_TIM_IC_Start_IT+0x288>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d004      	beq.n	8007924 <HAL_TIM_IC_Start_IT+0x22c>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	4a19      	ldr	r2, [pc, #100]	; (8007984 <HAL_TIM_IC_Start_IT+0x28c>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d115      	bne.n	8007950 <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	689a      	ldr	r2, [r3, #8]
 800792a:	4b17      	ldr	r3, [pc, #92]	; (8007988 <HAL_TIM_IC_Start_IT+0x290>)
 800792c:	4013      	ands	r3, r2
 800792e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	2b06      	cmp	r3, #6
 8007934:	d015      	beq.n	8007962 <HAL_TIM_IC_Start_IT+0x26a>
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800793c:	d011      	beq.n	8007962 <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	681a      	ldr	r2, [r3, #0]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f042 0201 	orr.w	r2, r2, #1
 800794c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800794e:	e008      	b.n	8007962 <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	681a      	ldr	r2, [r3, #0]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f042 0201 	orr.w	r2, r2, #1
 800795e:	601a      	str	r2, [r3, #0]
 8007960:	e000      	b.n	8007964 <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007962:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8007964:	7bfb      	ldrb	r3, [r7, #15]
}
 8007966:	4618      	mov	r0, r3
 8007968:	3710      	adds	r7, #16
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}
 800796e:	bf00      	nop
 8007970:	40012c00 	.word	0x40012c00
 8007974:	40000400 	.word	0x40000400
 8007978:	40000800 	.word	0x40000800
 800797c:	40000c00 	.word	0x40000c00
 8007980:	40013400 	.word	0x40013400
 8007984:	40014000 	.word	0x40014000
 8007988:	00010007 	.word	0x00010007

0800798c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b082      	sub	sp, #8
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	691b      	ldr	r3, [r3, #16]
 800799a:	f003 0302 	and.w	r3, r3, #2
 800799e:	2b02      	cmp	r3, #2
 80079a0:	d122      	bne.n	80079e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	68db      	ldr	r3, [r3, #12]
 80079a8:	f003 0302 	and.w	r3, r3, #2
 80079ac:	2b02      	cmp	r3, #2
 80079ae:	d11b      	bne.n	80079e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f06f 0202 	mvn.w	r2, #2
 80079b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2201      	movs	r2, #1
 80079be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	699b      	ldr	r3, [r3, #24]
 80079c6:	f003 0303 	and.w	r3, r3, #3
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d003      	beq.n	80079d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f000 fb89 	bl	80080e6 <HAL_TIM_IC_CaptureCallback>
 80079d4:	e005      	b.n	80079e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f000 fb7b 	bl	80080d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f000 fb8c 	bl	80080fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2200      	movs	r2, #0
 80079e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	691b      	ldr	r3, [r3, #16]
 80079ee:	f003 0304 	and.w	r3, r3, #4
 80079f2:	2b04      	cmp	r3, #4
 80079f4:	d122      	bne.n	8007a3c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	68db      	ldr	r3, [r3, #12]
 80079fc:	f003 0304 	and.w	r3, r3, #4
 8007a00:	2b04      	cmp	r3, #4
 8007a02:	d11b      	bne.n	8007a3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f06f 0204 	mvn.w	r2, #4
 8007a0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2202      	movs	r2, #2
 8007a12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	699b      	ldr	r3, [r3, #24]
 8007a1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d003      	beq.n	8007a2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f000 fb5f 	bl	80080e6 <HAL_TIM_IC_CaptureCallback>
 8007a28:	e005      	b.n	8007a36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f000 fb51 	bl	80080d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f000 fb62 	bl	80080fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	691b      	ldr	r3, [r3, #16]
 8007a42:	f003 0308 	and.w	r3, r3, #8
 8007a46:	2b08      	cmp	r3, #8
 8007a48:	d122      	bne.n	8007a90 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	68db      	ldr	r3, [r3, #12]
 8007a50:	f003 0308 	and.w	r3, r3, #8
 8007a54:	2b08      	cmp	r3, #8
 8007a56:	d11b      	bne.n	8007a90 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f06f 0208 	mvn.w	r2, #8
 8007a60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2204      	movs	r2, #4
 8007a66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	69db      	ldr	r3, [r3, #28]
 8007a6e:	f003 0303 	and.w	r3, r3, #3
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d003      	beq.n	8007a7e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f000 fb35 	bl	80080e6 <HAL_TIM_IC_CaptureCallback>
 8007a7c:	e005      	b.n	8007a8a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f000 fb27 	bl	80080d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f000 fb38 	bl	80080fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	691b      	ldr	r3, [r3, #16]
 8007a96:	f003 0310 	and.w	r3, r3, #16
 8007a9a:	2b10      	cmp	r3, #16
 8007a9c:	d122      	bne.n	8007ae4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	68db      	ldr	r3, [r3, #12]
 8007aa4:	f003 0310 	and.w	r3, r3, #16
 8007aa8:	2b10      	cmp	r3, #16
 8007aaa:	d11b      	bne.n	8007ae4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f06f 0210 	mvn.w	r2, #16
 8007ab4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2208      	movs	r2, #8
 8007aba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	69db      	ldr	r3, [r3, #28]
 8007ac2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d003      	beq.n	8007ad2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f000 fb0b 	bl	80080e6 <HAL_TIM_IC_CaptureCallback>
 8007ad0:	e005      	b.n	8007ade <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f000 fafd 	bl	80080d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f000 fb0e 	bl	80080fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	691b      	ldr	r3, [r3, #16]
 8007aea:	f003 0301 	and.w	r3, r3, #1
 8007aee:	2b01      	cmp	r3, #1
 8007af0:	d10e      	bne.n	8007b10 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	68db      	ldr	r3, [r3, #12]
 8007af8:	f003 0301 	and.w	r3, r3, #1
 8007afc:	2b01      	cmp	r3, #1
 8007afe:	d107      	bne.n	8007b10 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f06f 0201 	mvn.w	r2, #1
 8007b08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f000 fad7 	bl	80080be <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	691b      	ldr	r3, [r3, #16]
 8007b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b1a:	2b80      	cmp	r3, #128	; 0x80
 8007b1c:	d10e      	bne.n	8007b3c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	68db      	ldr	r3, [r3, #12]
 8007b24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b28:	2b80      	cmp	r3, #128	; 0x80
 8007b2a:	d107      	bne.n	8007b3c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007b34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f001 fa1e 	bl	8008f78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	691b      	ldr	r3, [r3, #16]
 8007b42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b4a:	d10e      	bne.n	8007b6a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	68db      	ldr	r3, [r3, #12]
 8007b52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b56:	2b80      	cmp	r3, #128	; 0x80
 8007b58:	d107      	bne.n	8007b6a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007b62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f001 fa11 	bl	8008f8c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	691b      	ldr	r3, [r3, #16]
 8007b70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b74:	2b40      	cmp	r3, #64	; 0x40
 8007b76:	d10e      	bne.n	8007b96 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	68db      	ldr	r3, [r3, #12]
 8007b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b82:	2b40      	cmp	r3, #64	; 0x40
 8007b84:	d107      	bne.n	8007b96 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007b8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f000 fabc 	bl	800810e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	691b      	ldr	r3, [r3, #16]
 8007b9c:	f003 0320 	and.w	r3, r3, #32
 8007ba0:	2b20      	cmp	r3, #32
 8007ba2:	d10e      	bne.n	8007bc2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	68db      	ldr	r3, [r3, #12]
 8007baa:	f003 0320 	and.w	r3, r3, #32
 8007bae:	2b20      	cmp	r3, #32
 8007bb0:	d107      	bne.n	8007bc2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f06f 0220 	mvn.w	r2, #32
 8007bba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f001 f9d1 	bl	8008f64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007bc2:	bf00      	nop
 8007bc4:	3708      	adds	r7, #8
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bd80      	pop	{r7, pc}

08007bca <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007bca:	b580      	push	{r7, lr}
 8007bcc:	b086      	sub	sp, #24
 8007bce:	af00      	add	r7, sp, #0
 8007bd0:	60f8      	str	r0, [r7, #12]
 8007bd2:	60b9      	str	r1, [r7, #8]
 8007bd4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007be0:	2b01      	cmp	r3, #1
 8007be2:	d101      	bne.n	8007be8 <HAL_TIM_IC_ConfigChannel+0x1e>
 8007be4:	2302      	movs	r3, #2
 8007be6:	e088      	b.n	8007cfa <HAL_TIM_IC_ConfigChannel+0x130>
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	2201      	movs	r2, #1
 8007bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d11b      	bne.n	8007c2e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	6818      	ldr	r0, [r3, #0]
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	6819      	ldr	r1, [r3, #0]
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	685a      	ldr	r2, [r3, #4]
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	68db      	ldr	r3, [r3, #12]
 8007c06:	f000 fdfd 	bl	8008804 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	699a      	ldr	r2, [r3, #24]
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f022 020c 	bic.w	r2, r2, #12
 8007c18:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	6999      	ldr	r1, [r3, #24]
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	689a      	ldr	r2, [r3, #8]
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	430a      	orrs	r2, r1
 8007c2a:	619a      	str	r2, [r3, #24]
 8007c2c:	e060      	b.n	8007cf0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2b04      	cmp	r3, #4
 8007c32:	d11c      	bne.n	8007c6e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	6818      	ldr	r0, [r3, #0]
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	6819      	ldr	r1, [r3, #0]
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	685a      	ldr	r2, [r3, #4]
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	68db      	ldr	r3, [r3, #12]
 8007c44:	f000 fe7b 	bl	800893e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	699a      	ldr	r2, [r3, #24]
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007c56:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	6999      	ldr	r1, [r3, #24]
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	689b      	ldr	r3, [r3, #8]
 8007c62:	021a      	lsls	r2, r3, #8
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	430a      	orrs	r2, r1
 8007c6a:	619a      	str	r2, [r3, #24]
 8007c6c:	e040      	b.n	8007cf0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2b08      	cmp	r3, #8
 8007c72:	d11b      	bne.n	8007cac <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	6818      	ldr	r0, [r3, #0]
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	6819      	ldr	r1, [r3, #0]
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	685a      	ldr	r2, [r3, #4]
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	68db      	ldr	r3, [r3, #12]
 8007c84:	f000 fec8 	bl	8008a18 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	69da      	ldr	r2, [r3, #28]
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f022 020c 	bic.w	r2, r2, #12
 8007c96:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	69d9      	ldr	r1, [r3, #28]
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	689a      	ldr	r2, [r3, #8]
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	430a      	orrs	r2, r1
 8007ca8:	61da      	str	r2, [r3, #28]
 8007caa:	e021      	b.n	8007cf0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2b0c      	cmp	r3, #12
 8007cb0:	d11c      	bne.n	8007cec <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	6818      	ldr	r0, [r3, #0]
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	6819      	ldr	r1, [r3, #0]
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	685a      	ldr	r2, [r3, #4]
 8007cbe:	68bb      	ldr	r3, [r7, #8]
 8007cc0:	68db      	ldr	r3, [r3, #12]
 8007cc2:	f000 fee5 	bl	8008a90 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	69da      	ldr	r2, [r3, #28]
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007cd4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	69d9      	ldr	r1, [r3, #28]
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	689b      	ldr	r3, [r3, #8]
 8007ce0:	021a      	lsls	r2, r3, #8
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	430a      	orrs	r2, r1
 8007ce8:	61da      	str	r2, [r3, #28]
 8007cea:	e001      	b.n	8007cf0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8007cec:	2301      	movs	r3, #1
 8007cee:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007cf8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3718      	adds	r7, #24
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}
	...

08007d04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b086      	sub	sp, #24
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	60f8      	str	r0, [r7, #12]
 8007d0c:	60b9      	str	r1, [r7, #8]
 8007d0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007d10:	2300      	movs	r3, #0
 8007d12:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d1a:	2b01      	cmp	r3, #1
 8007d1c:	d101      	bne.n	8007d22 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007d1e:	2302      	movs	r3, #2
 8007d20:	e0ff      	b.n	8007f22 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	2201      	movs	r2, #1
 8007d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2b14      	cmp	r3, #20
 8007d2e:	f200 80f0 	bhi.w	8007f12 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007d32:	a201      	add	r2, pc, #4	; (adr r2, 8007d38 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d38:	08007d8d 	.word	0x08007d8d
 8007d3c:	08007f13 	.word	0x08007f13
 8007d40:	08007f13 	.word	0x08007f13
 8007d44:	08007f13 	.word	0x08007f13
 8007d48:	08007dcd 	.word	0x08007dcd
 8007d4c:	08007f13 	.word	0x08007f13
 8007d50:	08007f13 	.word	0x08007f13
 8007d54:	08007f13 	.word	0x08007f13
 8007d58:	08007e0f 	.word	0x08007e0f
 8007d5c:	08007f13 	.word	0x08007f13
 8007d60:	08007f13 	.word	0x08007f13
 8007d64:	08007f13 	.word	0x08007f13
 8007d68:	08007e4f 	.word	0x08007e4f
 8007d6c:	08007f13 	.word	0x08007f13
 8007d70:	08007f13 	.word	0x08007f13
 8007d74:	08007f13 	.word	0x08007f13
 8007d78:	08007e91 	.word	0x08007e91
 8007d7c:	08007f13 	.word	0x08007f13
 8007d80:	08007f13 	.word	0x08007f13
 8007d84:	08007f13 	.word	0x08007f13
 8007d88:	08007ed1 	.word	0x08007ed1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	68b9      	ldr	r1, [r7, #8]
 8007d92:	4618      	mov	r0, r3
 8007d94:	f000 fa60 	bl	8008258 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	699a      	ldr	r2, [r3, #24]
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f042 0208 	orr.w	r2, r2, #8
 8007da6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	699a      	ldr	r2, [r3, #24]
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f022 0204 	bic.w	r2, r2, #4
 8007db6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	6999      	ldr	r1, [r3, #24]
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	691a      	ldr	r2, [r3, #16]
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	430a      	orrs	r2, r1
 8007dc8:	619a      	str	r2, [r3, #24]
      break;
 8007dca:	e0a5      	b.n	8007f18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	68b9      	ldr	r1, [r7, #8]
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f000 fad0 	bl	8008378 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	699a      	ldr	r2, [r3, #24]
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007de6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	699a      	ldr	r2, [r3, #24]
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007df6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	6999      	ldr	r1, [r3, #24]
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	691b      	ldr	r3, [r3, #16]
 8007e02:	021a      	lsls	r2, r3, #8
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	430a      	orrs	r2, r1
 8007e0a:	619a      	str	r2, [r3, #24]
      break;
 8007e0c:	e084      	b.n	8007f18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	68b9      	ldr	r1, [r7, #8]
 8007e14:	4618      	mov	r0, r3
 8007e16:	f000 fb39 	bl	800848c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	69da      	ldr	r2, [r3, #28]
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f042 0208 	orr.w	r2, r2, #8
 8007e28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	69da      	ldr	r2, [r3, #28]
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f022 0204 	bic.w	r2, r2, #4
 8007e38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	69d9      	ldr	r1, [r3, #28]
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	691a      	ldr	r2, [r3, #16]
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	430a      	orrs	r2, r1
 8007e4a:	61da      	str	r2, [r3, #28]
      break;
 8007e4c:	e064      	b.n	8007f18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	68b9      	ldr	r1, [r7, #8]
 8007e54:	4618      	mov	r0, r3
 8007e56:	f000 fba1 	bl	800859c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	69da      	ldr	r2, [r3, #28]
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007e68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	69da      	ldr	r2, [r3, #28]
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	69d9      	ldr	r1, [r3, #28]
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	691b      	ldr	r3, [r3, #16]
 8007e84:	021a      	lsls	r2, r3, #8
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	430a      	orrs	r2, r1
 8007e8c:	61da      	str	r2, [r3, #28]
      break;
 8007e8e:	e043      	b.n	8007f18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	68b9      	ldr	r1, [r7, #8]
 8007e96:	4618      	mov	r0, r3
 8007e98:	f000 fbea 	bl	8008670 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f042 0208 	orr.w	r2, r2, #8
 8007eaa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f022 0204 	bic.w	r2, r2, #4
 8007eba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	691a      	ldr	r2, [r3, #16]
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	430a      	orrs	r2, r1
 8007ecc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007ece:	e023      	b.n	8007f18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	68b9      	ldr	r1, [r7, #8]
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f000 fc2e 	bl	8008738 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007eea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007efa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007f02:	68bb      	ldr	r3, [r7, #8]
 8007f04:	691b      	ldr	r3, [r3, #16]
 8007f06:	021a      	lsls	r2, r3, #8
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	430a      	orrs	r2, r1
 8007f0e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007f10:	e002      	b.n	8007f18 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007f12:	2301      	movs	r3, #1
 8007f14:	75fb      	strb	r3, [r7, #23]
      break;
 8007f16:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007f20:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f22:	4618      	mov	r0, r3
 8007f24:	3718      	adds	r7, #24
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}
 8007f2a:	bf00      	nop

08007f2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b084      	sub	sp, #16
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
 8007f34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007f36:	2300      	movs	r3, #0
 8007f38:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f40:	2b01      	cmp	r3, #1
 8007f42:	d101      	bne.n	8007f48 <HAL_TIM_ConfigClockSource+0x1c>
 8007f44:	2302      	movs	r3, #2
 8007f46:	e0b6      	b.n	80080b6 <HAL_TIM_ConfigClockSource+0x18a>
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2201      	movs	r2, #1
 8007f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2202      	movs	r2, #2
 8007f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	689b      	ldr	r3, [r3, #8]
 8007f5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f66:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007f6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007f72:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	68ba      	ldr	r2, [r7, #8]
 8007f7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f84:	d03e      	beq.n	8008004 <HAL_TIM_ConfigClockSource+0xd8>
 8007f86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f8a:	f200 8087 	bhi.w	800809c <HAL_TIM_ConfigClockSource+0x170>
 8007f8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f92:	f000 8086 	beq.w	80080a2 <HAL_TIM_ConfigClockSource+0x176>
 8007f96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f9a:	d87f      	bhi.n	800809c <HAL_TIM_ConfigClockSource+0x170>
 8007f9c:	2b70      	cmp	r3, #112	; 0x70
 8007f9e:	d01a      	beq.n	8007fd6 <HAL_TIM_ConfigClockSource+0xaa>
 8007fa0:	2b70      	cmp	r3, #112	; 0x70
 8007fa2:	d87b      	bhi.n	800809c <HAL_TIM_ConfigClockSource+0x170>
 8007fa4:	2b60      	cmp	r3, #96	; 0x60
 8007fa6:	d050      	beq.n	800804a <HAL_TIM_ConfigClockSource+0x11e>
 8007fa8:	2b60      	cmp	r3, #96	; 0x60
 8007faa:	d877      	bhi.n	800809c <HAL_TIM_ConfigClockSource+0x170>
 8007fac:	2b50      	cmp	r3, #80	; 0x50
 8007fae:	d03c      	beq.n	800802a <HAL_TIM_ConfigClockSource+0xfe>
 8007fb0:	2b50      	cmp	r3, #80	; 0x50
 8007fb2:	d873      	bhi.n	800809c <HAL_TIM_ConfigClockSource+0x170>
 8007fb4:	2b40      	cmp	r3, #64	; 0x40
 8007fb6:	d058      	beq.n	800806a <HAL_TIM_ConfigClockSource+0x13e>
 8007fb8:	2b40      	cmp	r3, #64	; 0x40
 8007fba:	d86f      	bhi.n	800809c <HAL_TIM_ConfigClockSource+0x170>
 8007fbc:	2b30      	cmp	r3, #48	; 0x30
 8007fbe:	d064      	beq.n	800808a <HAL_TIM_ConfigClockSource+0x15e>
 8007fc0:	2b30      	cmp	r3, #48	; 0x30
 8007fc2:	d86b      	bhi.n	800809c <HAL_TIM_ConfigClockSource+0x170>
 8007fc4:	2b20      	cmp	r3, #32
 8007fc6:	d060      	beq.n	800808a <HAL_TIM_ConfigClockSource+0x15e>
 8007fc8:	2b20      	cmp	r3, #32
 8007fca:	d867      	bhi.n	800809c <HAL_TIM_ConfigClockSource+0x170>
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d05c      	beq.n	800808a <HAL_TIM_ConfigClockSource+0x15e>
 8007fd0:	2b10      	cmp	r3, #16
 8007fd2:	d05a      	beq.n	800808a <HAL_TIM_ConfigClockSource+0x15e>
 8007fd4:	e062      	b.n	800809c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6818      	ldr	r0, [r3, #0]
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	6899      	ldr	r1, [r3, #8]
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	685a      	ldr	r2, [r3, #4]
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	68db      	ldr	r3, [r3, #12]
 8007fe6:	f000 fdab 	bl	8008b40 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	689b      	ldr	r3, [r3, #8]
 8007ff0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007ff8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	68ba      	ldr	r2, [r7, #8]
 8008000:	609a      	str	r2, [r3, #8]
      break;
 8008002:	e04f      	b.n	80080a4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6818      	ldr	r0, [r3, #0]
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	6899      	ldr	r1, [r3, #8]
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	685a      	ldr	r2, [r3, #4]
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	68db      	ldr	r3, [r3, #12]
 8008014:	f000 fd94 	bl	8008b40 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	689a      	ldr	r2, [r3, #8]
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008026:	609a      	str	r2, [r3, #8]
      break;
 8008028:	e03c      	b.n	80080a4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6818      	ldr	r0, [r3, #0]
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	6859      	ldr	r1, [r3, #4]
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	68db      	ldr	r3, [r3, #12]
 8008036:	461a      	mov	r2, r3
 8008038:	f000 fc52 	bl	80088e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	2150      	movs	r1, #80	; 0x50
 8008042:	4618      	mov	r0, r3
 8008044:	f000 fd61 	bl	8008b0a <TIM_ITRx_SetConfig>
      break;
 8008048:	e02c      	b.n	80080a4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6818      	ldr	r0, [r3, #0]
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	6859      	ldr	r1, [r3, #4]
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	68db      	ldr	r3, [r3, #12]
 8008056:	461a      	mov	r2, r3
 8008058:	f000 fcae 	bl	80089b8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	2160      	movs	r1, #96	; 0x60
 8008062:	4618      	mov	r0, r3
 8008064:	f000 fd51 	bl	8008b0a <TIM_ITRx_SetConfig>
      break;
 8008068:	e01c      	b.n	80080a4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6818      	ldr	r0, [r3, #0]
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	6859      	ldr	r1, [r3, #4]
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	68db      	ldr	r3, [r3, #12]
 8008076:	461a      	mov	r2, r3
 8008078:	f000 fc32 	bl	80088e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	2140      	movs	r1, #64	; 0x40
 8008082:	4618      	mov	r0, r3
 8008084:	f000 fd41 	bl	8008b0a <TIM_ITRx_SetConfig>
      break;
 8008088:	e00c      	b.n	80080a4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681a      	ldr	r2, [r3, #0]
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	4619      	mov	r1, r3
 8008094:	4610      	mov	r0, r2
 8008096:	f000 fd38 	bl	8008b0a <TIM_ITRx_SetConfig>
      break;
 800809a:	e003      	b.n	80080a4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800809c:	2301      	movs	r3, #1
 800809e:	73fb      	strb	r3, [r7, #15]
      break;
 80080a0:	e000      	b.n	80080a4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80080a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2201      	movs	r2, #1
 80080a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2200      	movs	r2, #0
 80080b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80080b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	3710      	adds	r7, #16
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}

080080be <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80080be:	b480      	push	{r7}
 80080c0:	b083      	sub	sp, #12
 80080c2:	af00      	add	r7, sp, #0
 80080c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80080c6:	bf00      	nop
 80080c8:	370c      	adds	r7, #12
 80080ca:	46bd      	mov	sp, r7
 80080cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d0:	4770      	bx	lr

080080d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80080d2:	b480      	push	{r7}
 80080d4:	b083      	sub	sp, #12
 80080d6:	af00      	add	r7, sp, #0
 80080d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80080da:	bf00      	nop
 80080dc:	370c      	adds	r7, #12
 80080de:	46bd      	mov	sp, r7
 80080e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e4:	4770      	bx	lr

080080e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80080e6:	b480      	push	{r7}
 80080e8:	b083      	sub	sp, #12
 80080ea:	af00      	add	r7, sp, #0
 80080ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80080ee:	bf00      	nop
 80080f0:	370c      	adds	r7, #12
 80080f2:	46bd      	mov	sp, r7
 80080f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f8:	4770      	bx	lr

080080fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80080fa:	b480      	push	{r7}
 80080fc:	b083      	sub	sp, #12
 80080fe:	af00      	add	r7, sp, #0
 8008100:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008102:	bf00      	nop
 8008104:	370c      	adds	r7, #12
 8008106:	46bd      	mov	sp, r7
 8008108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810c:	4770      	bx	lr

0800810e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800810e:	b480      	push	{r7}
 8008110:	b083      	sub	sp, #12
 8008112:	af00      	add	r7, sp, #0
 8008114:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008116:	bf00      	nop
 8008118:	370c      	adds	r7, #12
 800811a:	46bd      	mov	sp, r7
 800811c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008120:	4770      	bx	lr
	...

08008124 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008124:	b480      	push	{r7}
 8008126:	b085      	sub	sp, #20
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
 800812c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	4a40      	ldr	r2, [pc, #256]	; (8008238 <TIM_Base_SetConfig+0x114>)
 8008138:	4293      	cmp	r3, r2
 800813a:	d013      	beq.n	8008164 <TIM_Base_SetConfig+0x40>
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008142:	d00f      	beq.n	8008164 <TIM_Base_SetConfig+0x40>
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	4a3d      	ldr	r2, [pc, #244]	; (800823c <TIM_Base_SetConfig+0x118>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d00b      	beq.n	8008164 <TIM_Base_SetConfig+0x40>
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	4a3c      	ldr	r2, [pc, #240]	; (8008240 <TIM_Base_SetConfig+0x11c>)
 8008150:	4293      	cmp	r3, r2
 8008152:	d007      	beq.n	8008164 <TIM_Base_SetConfig+0x40>
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	4a3b      	ldr	r2, [pc, #236]	; (8008244 <TIM_Base_SetConfig+0x120>)
 8008158:	4293      	cmp	r3, r2
 800815a:	d003      	beq.n	8008164 <TIM_Base_SetConfig+0x40>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	4a3a      	ldr	r2, [pc, #232]	; (8008248 <TIM_Base_SetConfig+0x124>)
 8008160:	4293      	cmp	r3, r2
 8008162:	d108      	bne.n	8008176 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800816a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	685b      	ldr	r3, [r3, #4]
 8008170:	68fa      	ldr	r2, [r7, #12]
 8008172:	4313      	orrs	r3, r2
 8008174:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	4a2f      	ldr	r2, [pc, #188]	; (8008238 <TIM_Base_SetConfig+0x114>)
 800817a:	4293      	cmp	r3, r2
 800817c:	d01f      	beq.n	80081be <TIM_Base_SetConfig+0x9a>
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008184:	d01b      	beq.n	80081be <TIM_Base_SetConfig+0x9a>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	4a2c      	ldr	r2, [pc, #176]	; (800823c <TIM_Base_SetConfig+0x118>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d017      	beq.n	80081be <TIM_Base_SetConfig+0x9a>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	4a2b      	ldr	r2, [pc, #172]	; (8008240 <TIM_Base_SetConfig+0x11c>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d013      	beq.n	80081be <TIM_Base_SetConfig+0x9a>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	4a2a      	ldr	r2, [pc, #168]	; (8008244 <TIM_Base_SetConfig+0x120>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d00f      	beq.n	80081be <TIM_Base_SetConfig+0x9a>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	4a29      	ldr	r2, [pc, #164]	; (8008248 <TIM_Base_SetConfig+0x124>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d00b      	beq.n	80081be <TIM_Base_SetConfig+0x9a>
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	4a28      	ldr	r2, [pc, #160]	; (800824c <TIM_Base_SetConfig+0x128>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d007      	beq.n	80081be <TIM_Base_SetConfig+0x9a>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	4a27      	ldr	r2, [pc, #156]	; (8008250 <TIM_Base_SetConfig+0x12c>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d003      	beq.n	80081be <TIM_Base_SetConfig+0x9a>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	4a26      	ldr	r2, [pc, #152]	; (8008254 <TIM_Base_SetConfig+0x130>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d108      	bne.n	80081d0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	68db      	ldr	r3, [r3, #12]
 80081ca:	68fa      	ldr	r2, [r7, #12]
 80081cc:	4313      	orrs	r3, r2
 80081ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	695b      	ldr	r3, [r3, #20]
 80081da:	4313      	orrs	r3, r2
 80081dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	68fa      	ldr	r2, [r7, #12]
 80081e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	689a      	ldr	r2, [r3, #8]
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	681a      	ldr	r2, [r3, #0]
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	4a10      	ldr	r2, [pc, #64]	; (8008238 <TIM_Base_SetConfig+0x114>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d00f      	beq.n	800821c <TIM_Base_SetConfig+0xf8>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	4a12      	ldr	r2, [pc, #72]	; (8008248 <TIM_Base_SetConfig+0x124>)
 8008200:	4293      	cmp	r3, r2
 8008202:	d00b      	beq.n	800821c <TIM_Base_SetConfig+0xf8>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	4a11      	ldr	r2, [pc, #68]	; (800824c <TIM_Base_SetConfig+0x128>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d007      	beq.n	800821c <TIM_Base_SetConfig+0xf8>
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	4a10      	ldr	r2, [pc, #64]	; (8008250 <TIM_Base_SetConfig+0x12c>)
 8008210:	4293      	cmp	r3, r2
 8008212:	d003      	beq.n	800821c <TIM_Base_SetConfig+0xf8>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	4a0f      	ldr	r2, [pc, #60]	; (8008254 <TIM_Base_SetConfig+0x130>)
 8008218:	4293      	cmp	r3, r2
 800821a:	d103      	bne.n	8008224 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	691a      	ldr	r2, [r3, #16]
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2201      	movs	r2, #1
 8008228:	615a      	str	r2, [r3, #20]
}
 800822a:	bf00      	nop
 800822c:	3714      	adds	r7, #20
 800822e:	46bd      	mov	sp, r7
 8008230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008234:	4770      	bx	lr
 8008236:	bf00      	nop
 8008238:	40012c00 	.word	0x40012c00
 800823c:	40000400 	.word	0x40000400
 8008240:	40000800 	.word	0x40000800
 8008244:	40000c00 	.word	0x40000c00
 8008248:	40013400 	.word	0x40013400
 800824c:	40014000 	.word	0x40014000
 8008250:	40014400 	.word	0x40014400
 8008254:	40014800 	.word	0x40014800

08008258 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008258:	b480      	push	{r7}
 800825a:	b087      	sub	sp, #28
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
 8008260:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6a1b      	ldr	r3, [r3, #32]
 8008266:	f023 0201 	bic.w	r2, r3, #1
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6a1b      	ldr	r3, [r3, #32]
 8008272:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	685b      	ldr	r3, [r3, #4]
 8008278:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	699b      	ldr	r3, [r3, #24]
 800827e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008286:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800828a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	f023 0303 	bic.w	r3, r3, #3
 8008292:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	68fa      	ldr	r2, [r7, #12]
 800829a:	4313      	orrs	r3, r2
 800829c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800829e:	697b      	ldr	r3, [r7, #20]
 80082a0:	f023 0302 	bic.w	r3, r3, #2
 80082a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	689b      	ldr	r3, [r3, #8]
 80082aa:	697a      	ldr	r2, [r7, #20]
 80082ac:	4313      	orrs	r3, r2
 80082ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	4a2c      	ldr	r2, [pc, #176]	; (8008364 <TIM_OC1_SetConfig+0x10c>)
 80082b4:	4293      	cmp	r3, r2
 80082b6:	d00f      	beq.n	80082d8 <TIM_OC1_SetConfig+0x80>
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	4a2b      	ldr	r2, [pc, #172]	; (8008368 <TIM_OC1_SetConfig+0x110>)
 80082bc:	4293      	cmp	r3, r2
 80082be:	d00b      	beq.n	80082d8 <TIM_OC1_SetConfig+0x80>
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	4a2a      	ldr	r2, [pc, #168]	; (800836c <TIM_OC1_SetConfig+0x114>)
 80082c4:	4293      	cmp	r3, r2
 80082c6:	d007      	beq.n	80082d8 <TIM_OC1_SetConfig+0x80>
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	4a29      	ldr	r2, [pc, #164]	; (8008370 <TIM_OC1_SetConfig+0x118>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d003      	beq.n	80082d8 <TIM_OC1_SetConfig+0x80>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	4a28      	ldr	r2, [pc, #160]	; (8008374 <TIM_OC1_SetConfig+0x11c>)
 80082d4:	4293      	cmp	r3, r2
 80082d6:	d10c      	bne.n	80082f2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80082d8:	697b      	ldr	r3, [r7, #20]
 80082da:	f023 0308 	bic.w	r3, r3, #8
 80082de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	68db      	ldr	r3, [r3, #12]
 80082e4:	697a      	ldr	r2, [r7, #20]
 80082e6:	4313      	orrs	r3, r2
 80082e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	f023 0304 	bic.w	r3, r3, #4
 80082f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	4a1b      	ldr	r2, [pc, #108]	; (8008364 <TIM_OC1_SetConfig+0x10c>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d00f      	beq.n	800831a <TIM_OC1_SetConfig+0xc2>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	4a1a      	ldr	r2, [pc, #104]	; (8008368 <TIM_OC1_SetConfig+0x110>)
 80082fe:	4293      	cmp	r3, r2
 8008300:	d00b      	beq.n	800831a <TIM_OC1_SetConfig+0xc2>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	4a19      	ldr	r2, [pc, #100]	; (800836c <TIM_OC1_SetConfig+0x114>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d007      	beq.n	800831a <TIM_OC1_SetConfig+0xc2>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	4a18      	ldr	r2, [pc, #96]	; (8008370 <TIM_OC1_SetConfig+0x118>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d003      	beq.n	800831a <TIM_OC1_SetConfig+0xc2>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	4a17      	ldr	r2, [pc, #92]	; (8008374 <TIM_OC1_SetConfig+0x11c>)
 8008316:	4293      	cmp	r3, r2
 8008318:	d111      	bne.n	800833e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800831a:	693b      	ldr	r3, [r7, #16]
 800831c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008320:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008322:	693b      	ldr	r3, [r7, #16]
 8008324:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008328:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	695b      	ldr	r3, [r3, #20]
 800832e:	693a      	ldr	r2, [r7, #16]
 8008330:	4313      	orrs	r3, r2
 8008332:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	699b      	ldr	r3, [r3, #24]
 8008338:	693a      	ldr	r2, [r7, #16]
 800833a:	4313      	orrs	r3, r2
 800833c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	693a      	ldr	r2, [r7, #16]
 8008342:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	68fa      	ldr	r2, [r7, #12]
 8008348:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	685a      	ldr	r2, [r3, #4]
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	697a      	ldr	r2, [r7, #20]
 8008356:	621a      	str	r2, [r3, #32]
}
 8008358:	bf00      	nop
 800835a:	371c      	adds	r7, #28
 800835c:	46bd      	mov	sp, r7
 800835e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008362:	4770      	bx	lr
 8008364:	40012c00 	.word	0x40012c00
 8008368:	40013400 	.word	0x40013400
 800836c:	40014000 	.word	0x40014000
 8008370:	40014400 	.word	0x40014400
 8008374:	40014800 	.word	0x40014800

08008378 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008378:	b480      	push	{r7}
 800837a:	b087      	sub	sp, #28
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
 8008380:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6a1b      	ldr	r3, [r3, #32]
 8008386:	f023 0210 	bic.w	r2, r3, #16
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6a1b      	ldr	r3, [r3, #32]
 8008392:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	685b      	ldr	r3, [r3, #4]
 8008398:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	699b      	ldr	r3, [r3, #24]
 800839e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80083a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	021b      	lsls	r3, r3, #8
 80083ba:	68fa      	ldr	r2, [r7, #12]
 80083bc:	4313      	orrs	r3, r2
 80083be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80083c0:	697b      	ldr	r3, [r7, #20]
 80083c2:	f023 0320 	bic.w	r3, r3, #32
 80083c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	689b      	ldr	r3, [r3, #8]
 80083cc:	011b      	lsls	r3, r3, #4
 80083ce:	697a      	ldr	r2, [r7, #20]
 80083d0:	4313      	orrs	r3, r2
 80083d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	4a28      	ldr	r2, [pc, #160]	; (8008478 <TIM_OC2_SetConfig+0x100>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d003      	beq.n	80083e4 <TIM_OC2_SetConfig+0x6c>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	4a27      	ldr	r2, [pc, #156]	; (800847c <TIM_OC2_SetConfig+0x104>)
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d10d      	bne.n	8008400 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80083ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	68db      	ldr	r3, [r3, #12]
 80083f0:	011b      	lsls	r3, r3, #4
 80083f2:	697a      	ldr	r2, [r7, #20]
 80083f4:	4313      	orrs	r3, r2
 80083f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083fe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	4a1d      	ldr	r2, [pc, #116]	; (8008478 <TIM_OC2_SetConfig+0x100>)
 8008404:	4293      	cmp	r3, r2
 8008406:	d00f      	beq.n	8008428 <TIM_OC2_SetConfig+0xb0>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	4a1c      	ldr	r2, [pc, #112]	; (800847c <TIM_OC2_SetConfig+0x104>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d00b      	beq.n	8008428 <TIM_OC2_SetConfig+0xb0>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	4a1b      	ldr	r2, [pc, #108]	; (8008480 <TIM_OC2_SetConfig+0x108>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d007      	beq.n	8008428 <TIM_OC2_SetConfig+0xb0>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	4a1a      	ldr	r2, [pc, #104]	; (8008484 <TIM_OC2_SetConfig+0x10c>)
 800841c:	4293      	cmp	r3, r2
 800841e:	d003      	beq.n	8008428 <TIM_OC2_SetConfig+0xb0>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	4a19      	ldr	r2, [pc, #100]	; (8008488 <TIM_OC2_SetConfig+0x110>)
 8008424:	4293      	cmp	r3, r2
 8008426:	d113      	bne.n	8008450 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008428:	693b      	ldr	r3, [r7, #16]
 800842a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800842e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008430:	693b      	ldr	r3, [r7, #16]
 8008432:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008436:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	695b      	ldr	r3, [r3, #20]
 800843c:	009b      	lsls	r3, r3, #2
 800843e:	693a      	ldr	r2, [r7, #16]
 8008440:	4313      	orrs	r3, r2
 8008442:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	699b      	ldr	r3, [r3, #24]
 8008448:	009b      	lsls	r3, r3, #2
 800844a:	693a      	ldr	r2, [r7, #16]
 800844c:	4313      	orrs	r3, r2
 800844e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	693a      	ldr	r2, [r7, #16]
 8008454:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	68fa      	ldr	r2, [r7, #12]
 800845a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	685a      	ldr	r2, [r3, #4]
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	697a      	ldr	r2, [r7, #20]
 8008468:	621a      	str	r2, [r3, #32]
}
 800846a:	bf00      	nop
 800846c:	371c      	adds	r7, #28
 800846e:	46bd      	mov	sp, r7
 8008470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008474:	4770      	bx	lr
 8008476:	bf00      	nop
 8008478:	40012c00 	.word	0x40012c00
 800847c:	40013400 	.word	0x40013400
 8008480:	40014000 	.word	0x40014000
 8008484:	40014400 	.word	0x40014400
 8008488:	40014800 	.word	0x40014800

0800848c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800848c:	b480      	push	{r7}
 800848e:	b087      	sub	sp, #28
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
 8008494:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6a1b      	ldr	r3, [r3, #32]
 800849a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6a1b      	ldr	r3, [r3, #32]
 80084a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	685b      	ldr	r3, [r3, #4]
 80084ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	69db      	ldr	r3, [r3, #28]
 80084b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80084ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	f023 0303 	bic.w	r3, r3, #3
 80084c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	68fa      	ldr	r2, [r7, #12]
 80084ce:	4313      	orrs	r3, r2
 80084d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80084d2:	697b      	ldr	r3, [r7, #20]
 80084d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80084d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	689b      	ldr	r3, [r3, #8]
 80084de:	021b      	lsls	r3, r3, #8
 80084e0:	697a      	ldr	r2, [r7, #20]
 80084e2:	4313      	orrs	r3, r2
 80084e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	4a27      	ldr	r2, [pc, #156]	; (8008588 <TIM_OC3_SetConfig+0xfc>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d003      	beq.n	80084f6 <TIM_OC3_SetConfig+0x6a>
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	4a26      	ldr	r2, [pc, #152]	; (800858c <TIM_OC3_SetConfig+0x100>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d10d      	bne.n	8008512 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80084f6:	697b      	ldr	r3, [r7, #20]
 80084f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80084fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	68db      	ldr	r3, [r3, #12]
 8008502:	021b      	lsls	r3, r3, #8
 8008504:	697a      	ldr	r2, [r7, #20]
 8008506:	4313      	orrs	r3, r2
 8008508:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008510:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	4a1c      	ldr	r2, [pc, #112]	; (8008588 <TIM_OC3_SetConfig+0xfc>)
 8008516:	4293      	cmp	r3, r2
 8008518:	d00f      	beq.n	800853a <TIM_OC3_SetConfig+0xae>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	4a1b      	ldr	r2, [pc, #108]	; (800858c <TIM_OC3_SetConfig+0x100>)
 800851e:	4293      	cmp	r3, r2
 8008520:	d00b      	beq.n	800853a <TIM_OC3_SetConfig+0xae>
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	4a1a      	ldr	r2, [pc, #104]	; (8008590 <TIM_OC3_SetConfig+0x104>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d007      	beq.n	800853a <TIM_OC3_SetConfig+0xae>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	4a19      	ldr	r2, [pc, #100]	; (8008594 <TIM_OC3_SetConfig+0x108>)
 800852e:	4293      	cmp	r3, r2
 8008530:	d003      	beq.n	800853a <TIM_OC3_SetConfig+0xae>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	4a18      	ldr	r2, [pc, #96]	; (8008598 <TIM_OC3_SetConfig+0x10c>)
 8008536:	4293      	cmp	r3, r2
 8008538:	d113      	bne.n	8008562 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800853a:	693b      	ldr	r3, [r7, #16]
 800853c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008540:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008542:	693b      	ldr	r3, [r7, #16]
 8008544:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008548:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	695b      	ldr	r3, [r3, #20]
 800854e:	011b      	lsls	r3, r3, #4
 8008550:	693a      	ldr	r2, [r7, #16]
 8008552:	4313      	orrs	r3, r2
 8008554:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	699b      	ldr	r3, [r3, #24]
 800855a:	011b      	lsls	r3, r3, #4
 800855c:	693a      	ldr	r2, [r7, #16]
 800855e:	4313      	orrs	r3, r2
 8008560:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	693a      	ldr	r2, [r7, #16]
 8008566:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	68fa      	ldr	r2, [r7, #12]
 800856c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	685a      	ldr	r2, [r3, #4]
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	697a      	ldr	r2, [r7, #20]
 800857a:	621a      	str	r2, [r3, #32]
}
 800857c:	bf00      	nop
 800857e:	371c      	adds	r7, #28
 8008580:	46bd      	mov	sp, r7
 8008582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008586:	4770      	bx	lr
 8008588:	40012c00 	.word	0x40012c00
 800858c:	40013400 	.word	0x40013400
 8008590:	40014000 	.word	0x40014000
 8008594:	40014400 	.word	0x40014400
 8008598:	40014800 	.word	0x40014800

0800859c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800859c:	b480      	push	{r7}
 800859e:	b087      	sub	sp, #28
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
 80085a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6a1b      	ldr	r3, [r3, #32]
 80085aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6a1b      	ldr	r3, [r3, #32]
 80085b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	685b      	ldr	r3, [r3, #4]
 80085bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	69db      	ldr	r3, [r3, #28]
 80085c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80085ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	021b      	lsls	r3, r3, #8
 80085de:	68fa      	ldr	r2, [r7, #12]
 80085e0:	4313      	orrs	r3, r2
 80085e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80085e4:	693b      	ldr	r3, [r7, #16]
 80085e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80085ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	689b      	ldr	r3, [r3, #8]
 80085f0:	031b      	lsls	r3, r3, #12
 80085f2:	693a      	ldr	r2, [r7, #16]
 80085f4:	4313      	orrs	r3, r2
 80085f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	4a18      	ldr	r2, [pc, #96]	; (800865c <TIM_OC4_SetConfig+0xc0>)
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d00f      	beq.n	8008620 <TIM_OC4_SetConfig+0x84>
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	4a17      	ldr	r2, [pc, #92]	; (8008660 <TIM_OC4_SetConfig+0xc4>)
 8008604:	4293      	cmp	r3, r2
 8008606:	d00b      	beq.n	8008620 <TIM_OC4_SetConfig+0x84>
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	4a16      	ldr	r2, [pc, #88]	; (8008664 <TIM_OC4_SetConfig+0xc8>)
 800860c:	4293      	cmp	r3, r2
 800860e:	d007      	beq.n	8008620 <TIM_OC4_SetConfig+0x84>
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	4a15      	ldr	r2, [pc, #84]	; (8008668 <TIM_OC4_SetConfig+0xcc>)
 8008614:	4293      	cmp	r3, r2
 8008616:	d003      	beq.n	8008620 <TIM_OC4_SetConfig+0x84>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	4a14      	ldr	r2, [pc, #80]	; (800866c <TIM_OC4_SetConfig+0xd0>)
 800861c:	4293      	cmp	r3, r2
 800861e:	d109      	bne.n	8008634 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008626:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	695b      	ldr	r3, [r3, #20]
 800862c:	019b      	lsls	r3, r3, #6
 800862e:	697a      	ldr	r2, [r7, #20]
 8008630:	4313      	orrs	r3, r2
 8008632:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	697a      	ldr	r2, [r7, #20]
 8008638:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	68fa      	ldr	r2, [r7, #12]
 800863e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	685a      	ldr	r2, [r3, #4]
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	693a      	ldr	r2, [r7, #16]
 800864c:	621a      	str	r2, [r3, #32]
}
 800864e:	bf00      	nop
 8008650:	371c      	adds	r7, #28
 8008652:	46bd      	mov	sp, r7
 8008654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008658:	4770      	bx	lr
 800865a:	bf00      	nop
 800865c:	40012c00 	.word	0x40012c00
 8008660:	40013400 	.word	0x40013400
 8008664:	40014000 	.word	0x40014000
 8008668:	40014400 	.word	0x40014400
 800866c:	40014800 	.word	0x40014800

08008670 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008670:	b480      	push	{r7}
 8008672:	b087      	sub	sp, #28
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
 8008678:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6a1b      	ldr	r3, [r3, #32]
 800867e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6a1b      	ldr	r3, [r3, #32]
 800868a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	685b      	ldr	r3, [r3, #4]
 8008690:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800869e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	68fa      	ldr	r2, [r7, #12]
 80086aa:	4313      	orrs	r3, r2
 80086ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80086ae:	693b      	ldr	r3, [r7, #16]
 80086b0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80086b4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	689b      	ldr	r3, [r3, #8]
 80086ba:	041b      	lsls	r3, r3, #16
 80086bc:	693a      	ldr	r2, [r7, #16]
 80086be:	4313      	orrs	r3, r2
 80086c0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	4a17      	ldr	r2, [pc, #92]	; (8008724 <TIM_OC5_SetConfig+0xb4>)
 80086c6:	4293      	cmp	r3, r2
 80086c8:	d00f      	beq.n	80086ea <TIM_OC5_SetConfig+0x7a>
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	4a16      	ldr	r2, [pc, #88]	; (8008728 <TIM_OC5_SetConfig+0xb8>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d00b      	beq.n	80086ea <TIM_OC5_SetConfig+0x7a>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	4a15      	ldr	r2, [pc, #84]	; (800872c <TIM_OC5_SetConfig+0xbc>)
 80086d6:	4293      	cmp	r3, r2
 80086d8:	d007      	beq.n	80086ea <TIM_OC5_SetConfig+0x7a>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	4a14      	ldr	r2, [pc, #80]	; (8008730 <TIM_OC5_SetConfig+0xc0>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d003      	beq.n	80086ea <TIM_OC5_SetConfig+0x7a>
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	4a13      	ldr	r2, [pc, #76]	; (8008734 <TIM_OC5_SetConfig+0xc4>)
 80086e6:	4293      	cmp	r3, r2
 80086e8:	d109      	bne.n	80086fe <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80086f0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	695b      	ldr	r3, [r3, #20]
 80086f6:	021b      	lsls	r3, r3, #8
 80086f8:	697a      	ldr	r2, [r7, #20]
 80086fa:	4313      	orrs	r3, r2
 80086fc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	697a      	ldr	r2, [r7, #20]
 8008702:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	68fa      	ldr	r2, [r7, #12]
 8008708:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	685a      	ldr	r2, [r3, #4]
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	693a      	ldr	r2, [r7, #16]
 8008716:	621a      	str	r2, [r3, #32]
}
 8008718:	bf00      	nop
 800871a:	371c      	adds	r7, #28
 800871c:	46bd      	mov	sp, r7
 800871e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008722:	4770      	bx	lr
 8008724:	40012c00 	.word	0x40012c00
 8008728:	40013400 	.word	0x40013400
 800872c:	40014000 	.word	0x40014000
 8008730:	40014400 	.word	0x40014400
 8008734:	40014800 	.word	0x40014800

08008738 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008738:	b480      	push	{r7}
 800873a:	b087      	sub	sp, #28
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
 8008740:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6a1b      	ldr	r3, [r3, #32]
 8008746:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6a1b      	ldr	r3, [r3, #32]
 8008752:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	685b      	ldr	r3, [r3, #4]
 8008758:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800875e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008766:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800876a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	021b      	lsls	r3, r3, #8
 8008772:	68fa      	ldr	r2, [r7, #12]
 8008774:	4313      	orrs	r3, r2
 8008776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008778:	693b      	ldr	r3, [r7, #16]
 800877a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800877e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	689b      	ldr	r3, [r3, #8]
 8008784:	051b      	lsls	r3, r3, #20
 8008786:	693a      	ldr	r2, [r7, #16]
 8008788:	4313      	orrs	r3, r2
 800878a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	4a18      	ldr	r2, [pc, #96]	; (80087f0 <TIM_OC6_SetConfig+0xb8>)
 8008790:	4293      	cmp	r3, r2
 8008792:	d00f      	beq.n	80087b4 <TIM_OC6_SetConfig+0x7c>
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	4a17      	ldr	r2, [pc, #92]	; (80087f4 <TIM_OC6_SetConfig+0xbc>)
 8008798:	4293      	cmp	r3, r2
 800879a:	d00b      	beq.n	80087b4 <TIM_OC6_SetConfig+0x7c>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	4a16      	ldr	r2, [pc, #88]	; (80087f8 <TIM_OC6_SetConfig+0xc0>)
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d007      	beq.n	80087b4 <TIM_OC6_SetConfig+0x7c>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	4a15      	ldr	r2, [pc, #84]	; (80087fc <TIM_OC6_SetConfig+0xc4>)
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d003      	beq.n	80087b4 <TIM_OC6_SetConfig+0x7c>
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	4a14      	ldr	r2, [pc, #80]	; (8008800 <TIM_OC6_SetConfig+0xc8>)
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d109      	bne.n	80087c8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80087ba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	695b      	ldr	r3, [r3, #20]
 80087c0:	029b      	lsls	r3, r3, #10
 80087c2:	697a      	ldr	r2, [r7, #20]
 80087c4:	4313      	orrs	r3, r2
 80087c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	697a      	ldr	r2, [r7, #20]
 80087cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	68fa      	ldr	r2, [r7, #12]
 80087d2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	685a      	ldr	r2, [r3, #4]
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	693a      	ldr	r2, [r7, #16]
 80087e0:	621a      	str	r2, [r3, #32]
}
 80087e2:	bf00      	nop
 80087e4:	371c      	adds	r7, #28
 80087e6:	46bd      	mov	sp, r7
 80087e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ec:	4770      	bx	lr
 80087ee:	bf00      	nop
 80087f0:	40012c00 	.word	0x40012c00
 80087f4:	40013400 	.word	0x40013400
 80087f8:	40014000 	.word	0x40014000
 80087fc:	40014400 	.word	0x40014400
 8008800:	40014800 	.word	0x40014800

08008804 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008804:	b480      	push	{r7}
 8008806:	b087      	sub	sp, #28
 8008808:	af00      	add	r7, sp, #0
 800880a:	60f8      	str	r0, [r7, #12]
 800880c:	60b9      	str	r1, [r7, #8]
 800880e:	607a      	str	r2, [r7, #4]
 8008810:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	6a1b      	ldr	r3, [r3, #32]
 8008816:	f023 0201 	bic.w	r2, r3, #1
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	699b      	ldr	r3, [r3, #24]
 8008822:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	6a1b      	ldr	r3, [r3, #32]
 8008828:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	4a26      	ldr	r2, [pc, #152]	; (80088c8 <TIM_TI1_SetConfig+0xc4>)
 800882e:	4293      	cmp	r3, r2
 8008830:	d017      	beq.n	8008862 <TIM_TI1_SetConfig+0x5e>
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008838:	d013      	beq.n	8008862 <TIM_TI1_SetConfig+0x5e>
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	4a23      	ldr	r2, [pc, #140]	; (80088cc <TIM_TI1_SetConfig+0xc8>)
 800883e:	4293      	cmp	r3, r2
 8008840:	d00f      	beq.n	8008862 <TIM_TI1_SetConfig+0x5e>
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	4a22      	ldr	r2, [pc, #136]	; (80088d0 <TIM_TI1_SetConfig+0xcc>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d00b      	beq.n	8008862 <TIM_TI1_SetConfig+0x5e>
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	4a21      	ldr	r2, [pc, #132]	; (80088d4 <TIM_TI1_SetConfig+0xd0>)
 800884e:	4293      	cmp	r3, r2
 8008850:	d007      	beq.n	8008862 <TIM_TI1_SetConfig+0x5e>
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	4a20      	ldr	r2, [pc, #128]	; (80088d8 <TIM_TI1_SetConfig+0xd4>)
 8008856:	4293      	cmp	r3, r2
 8008858:	d003      	beq.n	8008862 <TIM_TI1_SetConfig+0x5e>
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	4a1f      	ldr	r2, [pc, #124]	; (80088dc <TIM_TI1_SetConfig+0xd8>)
 800885e:	4293      	cmp	r3, r2
 8008860:	d101      	bne.n	8008866 <TIM_TI1_SetConfig+0x62>
 8008862:	2301      	movs	r3, #1
 8008864:	e000      	b.n	8008868 <TIM_TI1_SetConfig+0x64>
 8008866:	2300      	movs	r3, #0
 8008868:	2b00      	cmp	r3, #0
 800886a:	d008      	beq.n	800887e <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800886c:	697b      	ldr	r3, [r7, #20]
 800886e:	f023 0303 	bic.w	r3, r3, #3
 8008872:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008874:	697a      	ldr	r2, [r7, #20]
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	4313      	orrs	r3, r2
 800887a:	617b      	str	r3, [r7, #20]
 800887c:	e003      	b.n	8008886 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800887e:	697b      	ldr	r3, [r7, #20]
 8008880:	f043 0301 	orr.w	r3, r3, #1
 8008884:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008886:	697b      	ldr	r3, [r7, #20]
 8008888:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800888c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	011b      	lsls	r3, r3, #4
 8008892:	b2db      	uxtb	r3, r3
 8008894:	697a      	ldr	r2, [r7, #20]
 8008896:	4313      	orrs	r3, r2
 8008898:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	f023 030a 	bic.w	r3, r3, #10
 80088a0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	f003 030a 	and.w	r3, r3, #10
 80088a8:	693a      	ldr	r2, [r7, #16]
 80088aa:	4313      	orrs	r3, r2
 80088ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	697a      	ldr	r2, [r7, #20]
 80088b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	693a      	ldr	r2, [r7, #16]
 80088b8:	621a      	str	r2, [r3, #32]
}
 80088ba:	bf00      	nop
 80088bc:	371c      	adds	r7, #28
 80088be:	46bd      	mov	sp, r7
 80088c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c4:	4770      	bx	lr
 80088c6:	bf00      	nop
 80088c8:	40012c00 	.word	0x40012c00
 80088cc:	40000400 	.word	0x40000400
 80088d0:	40000800 	.word	0x40000800
 80088d4:	40000c00 	.word	0x40000c00
 80088d8:	40013400 	.word	0x40013400
 80088dc:	40014000 	.word	0x40014000

080088e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80088e0:	b480      	push	{r7}
 80088e2:	b087      	sub	sp, #28
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	60f8      	str	r0, [r7, #12]
 80088e8:	60b9      	str	r1, [r7, #8]
 80088ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	6a1b      	ldr	r3, [r3, #32]
 80088f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	6a1b      	ldr	r3, [r3, #32]
 80088f6:	f023 0201 	bic.w	r2, r3, #1
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	699b      	ldr	r3, [r3, #24]
 8008902:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008904:	693b      	ldr	r3, [r7, #16]
 8008906:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800890a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	011b      	lsls	r3, r3, #4
 8008910:	693a      	ldr	r2, [r7, #16]
 8008912:	4313      	orrs	r3, r2
 8008914:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008916:	697b      	ldr	r3, [r7, #20]
 8008918:	f023 030a 	bic.w	r3, r3, #10
 800891c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800891e:	697a      	ldr	r2, [r7, #20]
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	4313      	orrs	r3, r2
 8008924:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	693a      	ldr	r2, [r7, #16]
 800892a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	697a      	ldr	r2, [r7, #20]
 8008930:	621a      	str	r2, [r3, #32]
}
 8008932:	bf00      	nop
 8008934:	371c      	adds	r7, #28
 8008936:	46bd      	mov	sp, r7
 8008938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893c:	4770      	bx	lr

0800893e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800893e:	b480      	push	{r7}
 8008940:	b087      	sub	sp, #28
 8008942:	af00      	add	r7, sp, #0
 8008944:	60f8      	str	r0, [r7, #12]
 8008946:	60b9      	str	r1, [r7, #8]
 8008948:	607a      	str	r2, [r7, #4]
 800894a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	6a1b      	ldr	r3, [r3, #32]
 8008950:	f023 0210 	bic.w	r2, r3, #16
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	699b      	ldr	r3, [r3, #24]
 800895c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	6a1b      	ldr	r3, [r3, #32]
 8008962:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008964:	697b      	ldr	r3, [r7, #20]
 8008966:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800896a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	021b      	lsls	r3, r3, #8
 8008970:	697a      	ldr	r2, [r7, #20]
 8008972:	4313      	orrs	r3, r2
 8008974:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008976:	697b      	ldr	r3, [r7, #20]
 8008978:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800897c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	031b      	lsls	r3, r3, #12
 8008982:	b29b      	uxth	r3, r3
 8008984:	697a      	ldr	r2, [r7, #20]
 8008986:	4313      	orrs	r3, r2
 8008988:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800898a:	693b      	ldr	r3, [r7, #16]
 800898c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008990:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	011b      	lsls	r3, r3, #4
 8008996:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800899a:	693a      	ldr	r2, [r7, #16]
 800899c:	4313      	orrs	r3, r2
 800899e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	697a      	ldr	r2, [r7, #20]
 80089a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	693a      	ldr	r2, [r7, #16]
 80089aa:	621a      	str	r2, [r3, #32]
}
 80089ac:	bf00      	nop
 80089ae:	371c      	adds	r7, #28
 80089b0:	46bd      	mov	sp, r7
 80089b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b6:	4770      	bx	lr

080089b8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80089b8:	b480      	push	{r7}
 80089ba:	b087      	sub	sp, #28
 80089bc:	af00      	add	r7, sp, #0
 80089be:	60f8      	str	r0, [r7, #12]
 80089c0:	60b9      	str	r1, [r7, #8]
 80089c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	6a1b      	ldr	r3, [r3, #32]
 80089c8:	f023 0210 	bic.w	r2, r3, #16
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	699b      	ldr	r3, [r3, #24]
 80089d4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	6a1b      	ldr	r3, [r3, #32]
 80089da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80089dc:	697b      	ldr	r3, [r7, #20]
 80089de:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80089e2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	031b      	lsls	r3, r3, #12
 80089e8:	697a      	ldr	r2, [r7, #20]
 80089ea:	4313      	orrs	r3, r2
 80089ec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80089ee:	693b      	ldr	r3, [r7, #16]
 80089f0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80089f4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80089f6:	68bb      	ldr	r3, [r7, #8]
 80089f8:	011b      	lsls	r3, r3, #4
 80089fa:	693a      	ldr	r2, [r7, #16]
 80089fc:	4313      	orrs	r3, r2
 80089fe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	697a      	ldr	r2, [r7, #20]
 8008a04:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	693a      	ldr	r2, [r7, #16]
 8008a0a:	621a      	str	r2, [r3, #32]
}
 8008a0c:	bf00      	nop
 8008a0e:	371c      	adds	r7, #28
 8008a10:	46bd      	mov	sp, r7
 8008a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a16:	4770      	bx	lr

08008a18 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008a18:	b480      	push	{r7}
 8008a1a:	b087      	sub	sp, #28
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	60f8      	str	r0, [r7, #12]
 8008a20:	60b9      	str	r1, [r7, #8]
 8008a22:	607a      	str	r2, [r7, #4]
 8008a24:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	6a1b      	ldr	r3, [r3, #32]
 8008a2a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	69db      	ldr	r3, [r3, #28]
 8008a36:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	6a1b      	ldr	r3, [r3, #32]
 8008a3c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008a3e:	697b      	ldr	r3, [r7, #20]
 8008a40:	f023 0303 	bic.w	r3, r3, #3
 8008a44:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8008a46:	697a      	ldr	r2, [r7, #20]
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	4313      	orrs	r3, r2
 8008a4c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008a4e:	697b      	ldr	r3, [r7, #20]
 8008a50:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008a54:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	011b      	lsls	r3, r3, #4
 8008a5a:	b2db      	uxtb	r3, r3
 8008a5c:	697a      	ldr	r2, [r7, #20]
 8008a5e:	4313      	orrs	r3, r2
 8008a60:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008a62:	693b      	ldr	r3, [r7, #16]
 8008a64:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8008a68:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	021b      	lsls	r3, r3, #8
 8008a6e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8008a72:	693a      	ldr	r2, [r7, #16]
 8008a74:	4313      	orrs	r3, r2
 8008a76:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	697a      	ldr	r2, [r7, #20]
 8008a7c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	693a      	ldr	r2, [r7, #16]
 8008a82:	621a      	str	r2, [r3, #32]
}
 8008a84:	bf00      	nop
 8008a86:	371c      	adds	r7, #28
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8e:	4770      	bx	lr

08008a90 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008a90:	b480      	push	{r7}
 8008a92:	b087      	sub	sp, #28
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	60f8      	str	r0, [r7, #12]
 8008a98:	60b9      	str	r1, [r7, #8]
 8008a9a:	607a      	str	r2, [r7, #4]
 8008a9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	6a1b      	ldr	r3, [r3, #32]
 8008aa2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	69db      	ldr	r3, [r3, #28]
 8008aae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	6a1b      	ldr	r3, [r3, #32]
 8008ab4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008ab6:	697b      	ldr	r3, [r7, #20]
 8008ab8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008abc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	021b      	lsls	r3, r3, #8
 8008ac2:	697a      	ldr	r2, [r7, #20]
 8008ac4:	4313      	orrs	r3, r2
 8008ac6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008ac8:	697b      	ldr	r3, [r7, #20]
 8008aca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008ace:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	031b      	lsls	r3, r3, #12
 8008ad4:	b29b      	uxth	r3, r3
 8008ad6:	697a      	ldr	r2, [r7, #20]
 8008ad8:	4313      	orrs	r3, r2
 8008ada:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008adc:	693b      	ldr	r3, [r7, #16]
 8008ade:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8008ae2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	031b      	lsls	r3, r3, #12
 8008ae8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8008aec:	693a      	ldr	r2, [r7, #16]
 8008aee:	4313      	orrs	r3, r2
 8008af0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	697a      	ldr	r2, [r7, #20]
 8008af6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	693a      	ldr	r2, [r7, #16]
 8008afc:	621a      	str	r2, [r3, #32]
}
 8008afe:	bf00      	nop
 8008b00:	371c      	adds	r7, #28
 8008b02:	46bd      	mov	sp, r7
 8008b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b08:	4770      	bx	lr

08008b0a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008b0a:	b480      	push	{r7}
 8008b0c:	b085      	sub	sp, #20
 8008b0e:	af00      	add	r7, sp, #0
 8008b10:	6078      	str	r0, [r7, #4]
 8008b12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	689b      	ldr	r3, [r3, #8]
 8008b18:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b20:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008b22:	683a      	ldr	r2, [r7, #0]
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	4313      	orrs	r3, r2
 8008b28:	f043 0307 	orr.w	r3, r3, #7
 8008b2c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	68fa      	ldr	r2, [r7, #12]
 8008b32:	609a      	str	r2, [r3, #8]
}
 8008b34:	bf00      	nop
 8008b36:	3714      	adds	r7, #20
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3e:	4770      	bx	lr

08008b40 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008b40:	b480      	push	{r7}
 8008b42:	b087      	sub	sp, #28
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	60f8      	str	r0, [r7, #12]
 8008b48:	60b9      	str	r1, [r7, #8]
 8008b4a:	607a      	str	r2, [r7, #4]
 8008b4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	689b      	ldr	r3, [r3, #8]
 8008b52:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008b54:	697b      	ldr	r3, [r7, #20]
 8008b56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008b5a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	021a      	lsls	r2, r3, #8
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	431a      	orrs	r2, r3
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	4313      	orrs	r3, r2
 8008b68:	697a      	ldr	r2, [r7, #20]
 8008b6a:	4313      	orrs	r3, r2
 8008b6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	697a      	ldr	r2, [r7, #20]
 8008b72:	609a      	str	r2, [r3, #8]
}
 8008b74:	bf00      	nop
 8008b76:	371c      	adds	r7, #28
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7e:	4770      	bx	lr

08008b80 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008b80:	b480      	push	{r7}
 8008b82:	b087      	sub	sp, #28
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	60f8      	str	r0, [r7, #12]
 8008b88:	60b9      	str	r1, [r7, #8]
 8008b8a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008b8c:	68bb      	ldr	r3, [r7, #8]
 8008b8e:	f003 031f 	and.w	r3, r3, #31
 8008b92:	2201      	movs	r2, #1
 8008b94:	fa02 f303 	lsl.w	r3, r2, r3
 8008b98:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	6a1a      	ldr	r2, [r3, #32]
 8008b9e:	697b      	ldr	r3, [r7, #20]
 8008ba0:	43db      	mvns	r3, r3
 8008ba2:	401a      	ands	r2, r3
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	6a1a      	ldr	r2, [r3, #32]
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	f003 031f 	and.w	r3, r3, #31
 8008bb2:	6879      	ldr	r1, [r7, #4]
 8008bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8008bb8:	431a      	orrs	r2, r3
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	621a      	str	r2, [r3, #32]
}
 8008bbe:	bf00      	nop
 8008bc0:	371c      	adds	r7, #28
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc8:	4770      	bx	lr
	...

08008bcc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008bcc:	b480      	push	{r7}
 8008bce:	b085      	sub	sp, #20
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
 8008bd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008bdc:	2b01      	cmp	r3, #1
 8008bde:	d101      	bne.n	8008be4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008be0:	2302      	movs	r3, #2
 8008be2:	e068      	b.n	8008cb6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2201      	movs	r2, #1
 8008be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2202      	movs	r2, #2
 8008bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	685b      	ldr	r3, [r3, #4]
 8008bfa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	689b      	ldr	r3, [r3, #8]
 8008c02:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	4a2e      	ldr	r2, [pc, #184]	; (8008cc4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	d004      	beq.n	8008c18 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	4a2d      	ldr	r2, [pc, #180]	; (8008cc8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008c14:	4293      	cmp	r3, r2
 8008c16:	d108      	bne.n	8008c2a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008c1e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	685b      	ldr	r3, [r3, #4]
 8008c24:	68fa      	ldr	r2, [r7, #12]
 8008c26:	4313      	orrs	r3, r2
 8008c28:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c30:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	68fa      	ldr	r2, [r7, #12]
 8008c38:	4313      	orrs	r3, r2
 8008c3a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	68fa      	ldr	r2, [r7, #12]
 8008c42:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	4a1e      	ldr	r2, [pc, #120]	; (8008cc4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	d01d      	beq.n	8008c8a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c56:	d018      	beq.n	8008c8a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	4a1b      	ldr	r2, [pc, #108]	; (8008ccc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	d013      	beq.n	8008c8a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	4a1a      	ldr	r2, [pc, #104]	; (8008cd0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008c68:	4293      	cmp	r3, r2
 8008c6a:	d00e      	beq.n	8008c8a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	4a18      	ldr	r2, [pc, #96]	; (8008cd4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d009      	beq.n	8008c8a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	4a13      	ldr	r2, [pc, #76]	; (8008cc8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008c7c:	4293      	cmp	r3, r2
 8008c7e:	d004      	beq.n	8008c8a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	4a14      	ldr	r2, [pc, #80]	; (8008cd8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d10c      	bne.n	8008ca4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008c8a:	68bb      	ldr	r3, [r7, #8]
 8008c8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008c90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	689b      	ldr	r3, [r3, #8]
 8008c96:	68ba      	ldr	r2, [r7, #8]
 8008c98:	4313      	orrs	r3, r2
 8008c9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	68ba      	ldr	r2, [r7, #8]
 8008ca2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2201      	movs	r2, #1
 8008ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2200      	movs	r2, #0
 8008cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008cb4:	2300      	movs	r3, #0
}
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	3714      	adds	r7, #20
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc0:	4770      	bx	lr
 8008cc2:	bf00      	nop
 8008cc4:	40012c00 	.word	0x40012c00
 8008cc8:	40013400 	.word	0x40013400
 8008ccc:	40000400 	.word	0x40000400
 8008cd0:	40000800 	.word	0x40000800
 8008cd4:	40000c00 	.word	0x40000c00
 8008cd8:	40014000 	.word	0x40014000

08008cdc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008cdc:	b480      	push	{r7}
 8008cde:	b085      	sub	sp, #20
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
 8008ce4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008cf0:	2b01      	cmp	r3, #1
 8008cf2:	d101      	bne.n	8008cf8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008cf4:	2302      	movs	r3, #2
 8008cf6:	e065      	b.n	8008dc4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2201      	movs	r2, #1
 8008cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	68db      	ldr	r3, [r3, #12]
 8008d0a:	4313      	orrs	r3, r2
 8008d0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	689b      	ldr	r3, [r3, #8]
 8008d18:	4313      	orrs	r3, r2
 8008d1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	685b      	ldr	r3, [r3, #4]
 8008d26:	4313      	orrs	r3, r2
 8008d28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	4313      	orrs	r3, r2
 8008d36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	691b      	ldr	r3, [r3, #16]
 8008d42:	4313      	orrs	r3, r2
 8008d44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	695b      	ldr	r3, [r3, #20]
 8008d50:	4313      	orrs	r3, r2
 8008d52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d5e:	4313      	orrs	r3, r2
 8008d60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	699b      	ldr	r3, [r3, #24]
 8008d6c:	041b      	lsls	r3, r3, #16
 8008d6e:	4313      	orrs	r3, r2
 8008d70:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	4a16      	ldr	r2, [pc, #88]	; (8008dd0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8008d78:	4293      	cmp	r3, r2
 8008d7a:	d004      	beq.n	8008d86 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	4a14      	ldr	r2, [pc, #80]	; (8008dd4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8008d82:	4293      	cmp	r3, r2
 8008d84:	d115      	bne.n	8008db2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d90:	051b      	lsls	r3, r3, #20
 8008d92:	4313      	orrs	r3, r2
 8008d94:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	69db      	ldr	r3, [r3, #28]
 8008da0:	4313      	orrs	r3, r2
 8008da2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	6a1b      	ldr	r3, [r3, #32]
 8008dae:	4313      	orrs	r3, r2
 8008db0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	68fa      	ldr	r2, [r7, #12]
 8008db8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008dc2:	2300      	movs	r3, #0
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	3714      	adds	r7, #20
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dce:	4770      	bx	lr
 8008dd0:	40012c00 	.word	0x40012c00
 8008dd4:	40013400 	.word	0x40013400

08008dd8 <HAL_TIMEx_ConfigBreakInput>:
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             const TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)

{
 8008dd8:	b480      	push	{r7}
 8008dda:	b08b      	sub	sp, #44	; 0x2c
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	60f8      	str	r0, [r7, #12]
 8008de0:	60b9      	str	r1, [r7, #8]
 8008de2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008de4:	2300      	movs	r3, #0
 8008de6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#else
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));
#endif /* DFSDM1_Channel0 */

  /* Check input state */
  __HAL_LOCK(htim);
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008df0:	2b01      	cmp	r3, #1
 8008df2:	d101      	bne.n	8008df8 <HAL_TIMEx_ConfigBreakInput+0x20>
 8008df4:	2302      	movs	r3, #2
 8008df6:	e0af      	b.n	8008f58 <HAL_TIMEx_ConfigBreakInput+0x180>
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	2201      	movs	r2, #1
 8008dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (sBreakInputConfig->Source)
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	3b01      	subs	r3, #1
 8008e06:	2b07      	cmp	r3, #7
 8008e08:	d83a      	bhi.n	8008e80 <HAL_TIMEx_ConfigBreakInput+0xa8>
 8008e0a:	a201      	add	r2, pc, #4	; (adr r2, 8008e10 <HAL_TIMEx_ConfigBreakInput+0x38>)
 8008e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e10:	08008e31 	.word	0x08008e31
 8008e14:	08008e45 	.word	0x08008e45
 8008e18:	08008e81 	.word	0x08008e81
 8008e1c:	08008e59 	.word	0x08008e59
 8008e20:	08008e81 	.word	0x08008e81
 8008e24:	08008e81 	.word	0x08008e81
 8008e28:	08008e81 	.word	0x08008e81
 8008e2c:	08008e6d 	.word	0x08008e6d
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_OR2_BKINE;
 8008e30:	2301      	movs	r3, #1
 8008e32:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKINE_Pos;
 8008e34:	2300      	movs	r3, #0
 8008e36:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_OR2_BKINP;
 8008e38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008e3c:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_OR2_BKINP_Pos;
 8008e3e:	2309      	movs	r3, #9
 8008e40:	613b      	str	r3, [r7, #16]
      break;
 8008e42:	e026      	b.n	8008e92 <HAL_TIMEx_ConfigBreakInput+0xba>
    }
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_OR2_BKCMP1E;
 8008e44:	2302      	movs	r3, #2
 8008e46:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKCMP1E_Pos;
 8008e48:	2301      	movs	r3, #1
 8008e4a:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_OR2_BKCMP1P;
 8008e4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e50:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_OR2_BKCMP1P_Pos;
 8008e52:	230a      	movs	r3, #10
 8008e54:	613b      	str	r3, [r7, #16]
      break;
 8008e56:	e01c      	b.n	8008e92 <HAL_TIMEx_ConfigBreakInput+0xba>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_OR2_BKCMP2E;
 8008e58:	2304      	movs	r3, #4
 8008e5a:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKCMP2E_Pos;
 8008e5c:	2302      	movs	r3, #2
 8008e5e:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_OR2_BKCMP2P;
 8008e60:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008e64:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_OR2_BKCMP2P_Pos;
 8008e66:	230b      	movs	r3, #11
 8008e68:	613b      	str	r3, [r7, #16]
      break;
 8008e6a:	e012      	b.n	8008e92 <HAL_TIMEx_ConfigBreakInput+0xba>
    }
#if defined(DFSDM1_Channel0)
    case TIM_BREAKINPUTSOURCE_DFSDM1:
    {
      bkin_enable_mask = TIM1_OR2_BKDF1BK0E;
 8008e6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e70:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKDF1BK0E_Pos;
 8008e72:	2308      	movs	r3, #8
 8008e74:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = 0U;
 8008e76:	2300      	movs	r3, #0
 8008e78:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = 0U;
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	613b      	str	r3, [r7, #16]
      break;
 8008e7e:	e008      	b.n	8008e92 <HAL_TIMEx_ConfigBreakInput+0xba>
    }
#endif /* DFSDM1_Channel0 */

    default:
    {
      bkin_enable_mask = 0U;
 8008e80:	2300      	movs	r3, #0
 8008e82:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = 0U;
 8008e84:	2300      	movs	r3, #0
 8008e86:	61bb      	str	r3, [r7, #24]
      bkin_enable_bitpos = 0U;
 8008e88:	2300      	movs	r3, #0
 8008e8a:	617b      	str	r3, [r7, #20]
      bkin_polarity_bitpos = 0U;
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	613b      	str	r3, [r7, #16]
      break;
 8008e90:	bf00      	nop
    }
  }

  switch (BreakInput)
 8008e92:	68bb      	ldr	r3, [r7, #8]
 8008e94:	2b01      	cmp	r3, #1
 8008e96:	d003      	beq.n	8008ea0 <HAL_TIMEx_ConfigBreakInput+0xc8>
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	2b02      	cmp	r3, #2
 8008e9c:	d029      	beq.n	8008ef2 <HAL_TIMEx_ConfigBreakInput+0x11a>
 8008e9e:	e051      	b.n	8008f44 <HAL_TIMEx_ConfigBreakInput+0x16c>
  {
    case TIM_BREAKINPUT_BRK:
    {
      /* Get the TIMx_OR2 register value */
      tmporx = htim->Instance->OR2;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ea6:	623b      	str	r3, [r7, #32]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 8008ea8:	69fb      	ldr	r3, [r7, #28]
 8008eaa:	43db      	mvns	r3, r3
 8008eac:	6a3a      	ldr	r2, [r7, #32]
 8008eae:	4013      	ands	r3, r2
 8008eb0:	623b      	str	r3, [r7, #32]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	685a      	ldr	r2, [r3, #4]
 8008eb6:	697b      	ldr	r3, [r7, #20]
 8008eb8:	409a      	lsls	r2, r3
 8008eba:	69fb      	ldr	r3, [r7, #28]
 8008ebc:	4013      	ands	r3, r2
 8008ebe:	6a3a      	ldr	r2, [r7, #32]
 8008ec0:	4313      	orrs	r3, r2
 8008ec2:	623b      	str	r3, [r7, #32]

      /* Set the break input polarity */
#if defined(DFSDM1_Channel0)
      if (sBreakInputConfig->Source != TIM_BREAKINPUTSOURCE_DFSDM1)
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	2b08      	cmp	r3, #8
 8008eca:	d00d      	beq.n	8008ee8 <HAL_TIMEx_ConfigBreakInput+0x110>
#endif /* DFSDM1_Channel0 */
      {
        tmporx &= ~bkin_polarity_mask;
 8008ecc:	69bb      	ldr	r3, [r7, #24]
 8008ece:	43db      	mvns	r3, r3
 8008ed0:	6a3a      	ldr	r2, [r7, #32]
 8008ed2:	4013      	ands	r3, r2
 8008ed4:	623b      	str	r3, [r7, #32]
        tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	689a      	ldr	r2, [r3, #8]
 8008eda:	693b      	ldr	r3, [r7, #16]
 8008edc:	409a      	lsls	r2, r3
 8008ede:	69bb      	ldr	r3, [r7, #24]
 8008ee0:	4013      	ands	r3, r2
 8008ee2:	6a3a      	ldr	r2, [r7, #32]
 8008ee4:	4313      	orrs	r3, r2
 8008ee6:	623b      	str	r3, [r7, #32]
      }

      /* Set TIMx_OR2 */
      htim->Instance->OR2 = tmporx;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	6a3a      	ldr	r2, [r7, #32]
 8008eee:	661a      	str	r2, [r3, #96]	; 0x60
      break;
 8008ef0:	e02c      	b.n	8008f4c <HAL_TIMEx_ConfigBreakInput+0x174>
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_OR3 register value */
      tmporx = htim->Instance->OR3;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ef8:	623b      	str	r3, [r7, #32]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 8008efa:	69fb      	ldr	r3, [r7, #28]
 8008efc:	43db      	mvns	r3, r3
 8008efe:	6a3a      	ldr	r2, [r7, #32]
 8008f00:	4013      	ands	r3, r2
 8008f02:	623b      	str	r3, [r7, #32]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	685a      	ldr	r2, [r3, #4]
 8008f08:	697b      	ldr	r3, [r7, #20]
 8008f0a:	409a      	lsls	r2, r3
 8008f0c:	69fb      	ldr	r3, [r7, #28]
 8008f0e:	4013      	ands	r3, r2
 8008f10:	6a3a      	ldr	r2, [r7, #32]
 8008f12:	4313      	orrs	r3, r2
 8008f14:	623b      	str	r3, [r7, #32]

      /* Set the break input polarity */
#if defined(DFSDM1_Channel0)
      if (sBreakInputConfig->Source != TIM_BREAKINPUTSOURCE_DFSDM1)
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	2b08      	cmp	r3, #8
 8008f1c:	d00d      	beq.n	8008f3a <HAL_TIMEx_ConfigBreakInput+0x162>
#endif /* DFSDM1_Channel0 */
      {
        tmporx &= ~bkin_polarity_mask;
 8008f1e:	69bb      	ldr	r3, [r7, #24]
 8008f20:	43db      	mvns	r3, r3
 8008f22:	6a3a      	ldr	r2, [r7, #32]
 8008f24:	4013      	ands	r3, r2
 8008f26:	623b      	str	r3, [r7, #32]
        tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	689a      	ldr	r2, [r3, #8]
 8008f2c:	693b      	ldr	r3, [r7, #16]
 8008f2e:	409a      	lsls	r2, r3
 8008f30:	69bb      	ldr	r3, [r7, #24]
 8008f32:	4013      	ands	r3, r2
 8008f34:	6a3a      	ldr	r2, [r7, #32]
 8008f36:	4313      	orrs	r3, r2
 8008f38:	623b      	str	r3, [r7, #32]
      }

      /* Set TIMx_OR3 */
      htim->Instance->OR3 = tmporx;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	6a3a      	ldr	r2, [r7, #32]
 8008f40:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 8008f42:	e003      	b.n	8008f4c <HAL_TIMEx_ConfigBreakInput+0x174>
    }
    default:
      status = HAL_ERROR;
 8008f44:	2301      	movs	r3, #1
 8008f46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8008f4a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	2200      	movs	r2, #0
 8008f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008f54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	372c      	adds	r7, #44	; 0x2c
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f62:	4770      	bx	lr

08008f64 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008f64:	b480      	push	{r7}
 8008f66:	b083      	sub	sp, #12
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008f6c:	bf00      	nop
 8008f6e:	370c      	adds	r7, #12
 8008f70:	46bd      	mov	sp, r7
 8008f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f76:	4770      	bx	lr

08008f78 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008f78:	b480      	push	{r7}
 8008f7a:	b083      	sub	sp, #12
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008f80:	bf00      	nop
 8008f82:	370c      	adds	r7, #12
 8008f84:	46bd      	mov	sp, r7
 8008f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8a:	4770      	bx	lr

08008f8c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008f8c:	b480      	push	{r7}
 8008f8e:	b083      	sub	sp, #12
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008f94:	bf00      	nop
 8008f96:	370c      	adds	r7, #12
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9e:	4770      	bx	lr

08008fa0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b082      	sub	sp, #8
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d101      	bne.n	8008fb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008fae:	2301      	movs	r3, #1
 8008fb0:	e042      	b.n	8009038 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d106      	bne.n	8008fca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	f7f8 fddb 	bl	8001b80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2224      	movs	r2, #36	; 0x24
 8008fce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	681a      	ldr	r2, [r3, #0]
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f022 0201 	bic.w	r2, r2, #1
 8008fe0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	f000 f82c 	bl	8009040 <UART_SetConfig>
 8008fe8:	4603      	mov	r3, r0
 8008fea:	2b01      	cmp	r3, #1
 8008fec:	d101      	bne.n	8008ff2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008fee:	2301      	movs	r3, #1
 8008ff0:	e022      	b.n	8009038 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d002      	beq.n	8009000 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f000 fb1c 	bl	8009638 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	685a      	ldr	r2, [r3, #4]
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800900e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	689a      	ldr	r2, [r3, #8]
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800901e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	681a      	ldr	r2, [r3, #0]
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f042 0201 	orr.w	r2, r2, #1
 800902e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	f000 fba3 	bl	800977c <UART_CheckIdleState>
 8009036:	4603      	mov	r3, r0
}
 8009038:	4618      	mov	r0, r3
 800903a:	3708      	adds	r7, #8
 800903c:	46bd      	mov	sp, r7
 800903e:	bd80      	pop	{r7, pc}

08009040 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009040:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009044:	b08c      	sub	sp, #48	; 0x30
 8009046:	af00      	add	r7, sp, #0
 8009048:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800904a:	2300      	movs	r3, #0
 800904c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009050:	697b      	ldr	r3, [r7, #20]
 8009052:	689a      	ldr	r2, [r3, #8]
 8009054:	697b      	ldr	r3, [r7, #20]
 8009056:	691b      	ldr	r3, [r3, #16]
 8009058:	431a      	orrs	r2, r3
 800905a:	697b      	ldr	r3, [r7, #20]
 800905c:	695b      	ldr	r3, [r3, #20]
 800905e:	431a      	orrs	r2, r3
 8009060:	697b      	ldr	r3, [r7, #20]
 8009062:	69db      	ldr	r3, [r3, #28]
 8009064:	4313      	orrs	r3, r2
 8009066:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009068:	697b      	ldr	r3, [r7, #20]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	681a      	ldr	r2, [r3, #0]
 800906e:	4baa      	ldr	r3, [pc, #680]	; (8009318 <UART_SetConfig+0x2d8>)
 8009070:	4013      	ands	r3, r2
 8009072:	697a      	ldr	r2, [r7, #20]
 8009074:	6812      	ldr	r2, [r2, #0]
 8009076:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009078:	430b      	orrs	r3, r1
 800907a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800907c:	697b      	ldr	r3, [r7, #20]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	685b      	ldr	r3, [r3, #4]
 8009082:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009086:	697b      	ldr	r3, [r7, #20]
 8009088:	68da      	ldr	r2, [r3, #12]
 800908a:	697b      	ldr	r3, [r7, #20]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	430a      	orrs	r2, r1
 8009090:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009092:	697b      	ldr	r3, [r7, #20]
 8009094:	699b      	ldr	r3, [r3, #24]
 8009096:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009098:	697b      	ldr	r3, [r7, #20]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	4a9f      	ldr	r2, [pc, #636]	; (800931c <UART_SetConfig+0x2dc>)
 800909e:	4293      	cmp	r3, r2
 80090a0:	d004      	beq.n	80090ac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80090a2:	697b      	ldr	r3, [r7, #20]
 80090a4:	6a1b      	ldr	r3, [r3, #32]
 80090a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80090a8:	4313      	orrs	r3, r2
 80090aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80090ac:	697b      	ldr	r3, [r7, #20]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	689b      	ldr	r3, [r3, #8]
 80090b2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80090b6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80090ba:	697a      	ldr	r2, [r7, #20]
 80090bc:	6812      	ldr	r2, [r2, #0]
 80090be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80090c0:	430b      	orrs	r3, r1
 80090c2:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80090c4:	697b      	ldr	r3, [r7, #20]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090ca:	f023 010f 	bic.w	r1, r3, #15
 80090ce:	697b      	ldr	r3, [r7, #20]
 80090d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80090d2:	697b      	ldr	r3, [r7, #20]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	430a      	orrs	r2, r1
 80090d8:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80090da:	697b      	ldr	r3, [r7, #20]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	4a90      	ldr	r2, [pc, #576]	; (8009320 <UART_SetConfig+0x2e0>)
 80090e0:	4293      	cmp	r3, r2
 80090e2:	d125      	bne.n	8009130 <UART_SetConfig+0xf0>
 80090e4:	4b8f      	ldr	r3, [pc, #572]	; (8009324 <UART_SetConfig+0x2e4>)
 80090e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090ea:	f003 0303 	and.w	r3, r3, #3
 80090ee:	2b03      	cmp	r3, #3
 80090f0:	d81a      	bhi.n	8009128 <UART_SetConfig+0xe8>
 80090f2:	a201      	add	r2, pc, #4	; (adr r2, 80090f8 <UART_SetConfig+0xb8>)
 80090f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090f8:	08009109 	.word	0x08009109
 80090fc:	08009119 	.word	0x08009119
 8009100:	08009111 	.word	0x08009111
 8009104:	08009121 	.word	0x08009121
 8009108:	2301      	movs	r3, #1
 800910a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800910e:	e116      	b.n	800933e <UART_SetConfig+0x2fe>
 8009110:	2302      	movs	r3, #2
 8009112:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009116:	e112      	b.n	800933e <UART_SetConfig+0x2fe>
 8009118:	2304      	movs	r3, #4
 800911a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800911e:	e10e      	b.n	800933e <UART_SetConfig+0x2fe>
 8009120:	2308      	movs	r3, #8
 8009122:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009126:	e10a      	b.n	800933e <UART_SetConfig+0x2fe>
 8009128:	2310      	movs	r3, #16
 800912a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800912e:	e106      	b.n	800933e <UART_SetConfig+0x2fe>
 8009130:	697b      	ldr	r3, [r7, #20]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	4a7c      	ldr	r2, [pc, #496]	; (8009328 <UART_SetConfig+0x2e8>)
 8009136:	4293      	cmp	r3, r2
 8009138:	d138      	bne.n	80091ac <UART_SetConfig+0x16c>
 800913a:	4b7a      	ldr	r3, [pc, #488]	; (8009324 <UART_SetConfig+0x2e4>)
 800913c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009140:	f003 030c 	and.w	r3, r3, #12
 8009144:	2b0c      	cmp	r3, #12
 8009146:	d82d      	bhi.n	80091a4 <UART_SetConfig+0x164>
 8009148:	a201      	add	r2, pc, #4	; (adr r2, 8009150 <UART_SetConfig+0x110>)
 800914a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800914e:	bf00      	nop
 8009150:	08009185 	.word	0x08009185
 8009154:	080091a5 	.word	0x080091a5
 8009158:	080091a5 	.word	0x080091a5
 800915c:	080091a5 	.word	0x080091a5
 8009160:	08009195 	.word	0x08009195
 8009164:	080091a5 	.word	0x080091a5
 8009168:	080091a5 	.word	0x080091a5
 800916c:	080091a5 	.word	0x080091a5
 8009170:	0800918d 	.word	0x0800918d
 8009174:	080091a5 	.word	0x080091a5
 8009178:	080091a5 	.word	0x080091a5
 800917c:	080091a5 	.word	0x080091a5
 8009180:	0800919d 	.word	0x0800919d
 8009184:	2300      	movs	r3, #0
 8009186:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800918a:	e0d8      	b.n	800933e <UART_SetConfig+0x2fe>
 800918c:	2302      	movs	r3, #2
 800918e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009192:	e0d4      	b.n	800933e <UART_SetConfig+0x2fe>
 8009194:	2304      	movs	r3, #4
 8009196:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800919a:	e0d0      	b.n	800933e <UART_SetConfig+0x2fe>
 800919c:	2308      	movs	r3, #8
 800919e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80091a2:	e0cc      	b.n	800933e <UART_SetConfig+0x2fe>
 80091a4:	2310      	movs	r3, #16
 80091a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80091aa:	e0c8      	b.n	800933e <UART_SetConfig+0x2fe>
 80091ac:	697b      	ldr	r3, [r7, #20]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	4a5e      	ldr	r2, [pc, #376]	; (800932c <UART_SetConfig+0x2ec>)
 80091b2:	4293      	cmp	r3, r2
 80091b4:	d125      	bne.n	8009202 <UART_SetConfig+0x1c2>
 80091b6:	4b5b      	ldr	r3, [pc, #364]	; (8009324 <UART_SetConfig+0x2e4>)
 80091b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091bc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80091c0:	2b30      	cmp	r3, #48	; 0x30
 80091c2:	d016      	beq.n	80091f2 <UART_SetConfig+0x1b2>
 80091c4:	2b30      	cmp	r3, #48	; 0x30
 80091c6:	d818      	bhi.n	80091fa <UART_SetConfig+0x1ba>
 80091c8:	2b20      	cmp	r3, #32
 80091ca:	d00a      	beq.n	80091e2 <UART_SetConfig+0x1a2>
 80091cc:	2b20      	cmp	r3, #32
 80091ce:	d814      	bhi.n	80091fa <UART_SetConfig+0x1ba>
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d002      	beq.n	80091da <UART_SetConfig+0x19a>
 80091d4:	2b10      	cmp	r3, #16
 80091d6:	d008      	beq.n	80091ea <UART_SetConfig+0x1aa>
 80091d8:	e00f      	b.n	80091fa <UART_SetConfig+0x1ba>
 80091da:	2300      	movs	r3, #0
 80091dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80091e0:	e0ad      	b.n	800933e <UART_SetConfig+0x2fe>
 80091e2:	2302      	movs	r3, #2
 80091e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80091e8:	e0a9      	b.n	800933e <UART_SetConfig+0x2fe>
 80091ea:	2304      	movs	r3, #4
 80091ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80091f0:	e0a5      	b.n	800933e <UART_SetConfig+0x2fe>
 80091f2:	2308      	movs	r3, #8
 80091f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80091f8:	e0a1      	b.n	800933e <UART_SetConfig+0x2fe>
 80091fa:	2310      	movs	r3, #16
 80091fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009200:	e09d      	b.n	800933e <UART_SetConfig+0x2fe>
 8009202:	697b      	ldr	r3, [r7, #20]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	4a4a      	ldr	r2, [pc, #296]	; (8009330 <UART_SetConfig+0x2f0>)
 8009208:	4293      	cmp	r3, r2
 800920a:	d125      	bne.n	8009258 <UART_SetConfig+0x218>
 800920c:	4b45      	ldr	r3, [pc, #276]	; (8009324 <UART_SetConfig+0x2e4>)
 800920e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009212:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009216:	2bc0      	cmp	r3, #192	; 0xc0
 8009218:	d016      	beq.n	8009248 <UART_SetConfig+0x208>
 800921a:	2bc0      	cmp	r3, #192	; 0xc0
 800921c:	d818      	bhi.n	8009250 <UART_SetConfig+0x210>
 800921e:	2b80      	cmp	r3, #128	; 0x80
 8009220:	d00a      	beq.n	8009238 <UART_SetConfig+0x1f8>
 8009222:	2b80      	cmp	r3, #128	; 0x80
 8009224:	d814      	bhi.n	8009250 <UART_SetConfig+0x210>
 8009226:	2b00      	cmp	r3, #0
 8009228:	d002      	beq.n	8009230 <UART_SetConfig+0x1f0>
 800922a:	2b40      	cmp	r3, #64	; 0x40
 800922c:	d008      	beq.n	8009240 <UART_SetConfig+0x200>
 800922e:	e00f      	b.n	8009250 <UART_SetConfig+0x210>
 8009230:	2300      	movs	r3, #0
 8009232:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009236:	e082      	b.n	800933e <UART_SetConfig+0x2fe>
 8009238:	2302      	movs	r3, #2
 800923a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800923e:	e07e      	b.n	800933e <UART_SetConfig+0x2fe>
 8009240:	2304      	movs	r3, #4
 8009242:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009246:	e07a      	b.n	800933e <UART_SetConfig+0x2fe>
 8009248:	2308      	movs	r3, #8
 800924a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800924e:	e076      	b.n	800933e <UART_SetConfig+0x2fe>
 8009250:	2310      	movs	r3, #16
 8009252:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009256:	e072      	b.n	800933e <UART_SetConfig+0x2fe>
 8009258:	697b      	ldr	r3, [r7, #20]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	4a35      	ldr	r2, [pc, #212]	; (8009334 <UART_SetConfig+0x2f4>)
 800925e:	4293      	cmp	r3, r2
 8009260:	d12a      	bne.n	80092b8 <UART_SetConfig+0x278>
 8009262:	4b30      	ldr	r3, [pc, #192]	; (8009324 <UART_SetConfig+0x2e4>)
 8009264:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009268:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800926c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009270:	d01a      	beq.n	80092a8 <UART_SetConfig+0x268>
 8009272:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009276:	d81b      	bhi.n	80092b0 <UART_SetConfig+0x270>
 8009278:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800927c:	d00c      	beq.n	8009298 <UART_SetConfig+0x258>
 800927e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009282:	d815      	bhi.n	80092b0 <UART_SetConfig+0x270>
 8009284:	2b00      	cmp	r3, #0
 8009286:	d003      	beq.n	8009290 <UART_SetConfig+0x250>
 8009288:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800928c:	d008      	beq.n	80092a0 <UART_SetConfig+0x260>
 800928e:	e00f      	b.n	80092b0 <UART_SetConfig+0x270>
 8009290:	2300      	movs	r3, #0
 8009292:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009296:	e052      	b.n	800933e <UART_SetConfig+0x2fe>
 8009298:	2302      	movs	r3, #2
 800929a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800929e:	e04e      	b.n	800933e <UART_SetConfig+0x2fe>
 80092a0:	2304      	movs	r3, #4
 80092a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80092a6:	e04a      	b.n	800933e <UART_SetConfig+0x2fe>
 80092a8:	2308      	movs	r3, #8
 80092aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80092ae:	e046      	b.n	800933e <UART_SetConfig+0x2fe>
 80092b0:	2310      	movs	r3, #16
 80092b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80092b6:	e042      	b.n	800933e <UART_SetConfig+0x2fe>
 80092b8:	697b      	ldr	r3, [r7, #20]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	4a17      	ldr	r2, [pc, #92]	; (800931c <UART_SetConfig+0x2dc>)
 80092be:	4293      	cmp	r3, r2
 80092c0:	d13a      	bne.n	8009338 <UART_SetConfig+0x2f8>
 80092c2:	4b18      	ldr	r3, [pc, #96]	; (8009324 <UART_SetConfig+0x2e4>)
 80092c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092c8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80092cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80092d0:	d01a      	beq.n	8009308 <UART_SetConfig+0x2c8>
 80092d2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80092d6:	d81b      	bhi.n	8009310 <UART_SetConfig+0x2d0>
 80092d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80092dc:	d00c      	beq.n	80092f8 <UART_SetConfig+0x2b8>
 80092de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80092e2:	d815      	bhi.n	8009310 <UART_SetConfig+0x2d0>
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d003      	beq.n	80092f0 <UART_SetConfig+0x2b0>
 80092e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80092ec:	d008      	beq.n	8009300 <UART_SetConfig+0x2c0>
 80092ee:	e00f      	b.n	8009310 <UART_SetConfig+0x2d0>
 80092f0:	2300      	movs	r3, #0
 80092f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80092f6:	e022      	b.n	800933e <UART_SetConfig+0x2fe>
 80092f8:	2302      	movs	r3, #2
 80092fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80092fe:	e01e      	b.n	800933e <UART_SetConfig+0x2fe>
 8009300:	2304      	movs	r3, #4
 8009302:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009306:	e01a      	b.n	800933e <UART_SetConfig+0x2fe>
 8009308:	2308      	movs	r3, #8
 800930a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800930e:	e016      	b.n	800933e <UART_SetConfig+0x2fe>
 8009310:	2310      	movs	r3, #16
 8009312:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009316:	e012      	b.n	800933e <UART_SetConfig+0x2fe>
 8009318:	cfff69f3 	.word	0xcfff69f3
 800931c:	40008000 	.word	0x40008000
 8009320:	40013800 	.word	0x40013800
 8009324:	40021000 	.word	0x40021000
 8009328:	40004400 	.word	0x40004400
 800932c:	40004800 	.word	0x40004800
 8009330:	40004c00 	.word	0x40004c00
 8009334:	40005000 	.word	0x40005000
 8009338:	2310      	movs	r3, #16
 800933a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800933e:	697b      	ldr	r3, [r7, #20]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	4aae      	ldr	r2, [pc, #696]	; (80095fc <UART_SetConfig+0x5bc>)
 8009344:	4293      	cmp	r3, r2
 8009346:	f040 8097 	bne.w	8009478 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800934a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800934e:	2b08      	cmp	r3, #8
 8009350:	d823      	bhi.n	800939a <UART_SetConfig+0x35a>
 8009352:	a201      	add	r2, pc, #4	; (adr r2, 8009358 <UART_SetConfig+0x318>)
 8009354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009358:	0800937d 	.word	0x0800937d
 800935c:	0800939b 	.word	0x0800939b
 8009360:	08009385 	.word	0x08009385
 8009364:	0800939b 	.word	0x0800939b
 8009368:	0800938b 	.word	0x0800938b
 800936c:	0800939b 	.word	0x0800939b
 8009370:	0800939b 	.word	0x0800939b
 8009374:	0800939b 	.word	0x0800939b
 8009378:	08009393 	.word	0x08009393
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800937c:	f7fb fc32 	bl	8004be4 <HAL_RCC_GetPCLK1Freq>
 8009380:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009382:	e010      	b.n	80093a6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009384:	4b9e      	ldr	r3, [pc, #632]	; (8009600 <UART_SetConfig+0x5c0>)
 8009386:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009388:	e00d      	b.n	80093a6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800938a:	f7fb fb93 	bl	8004ab4 <HAL_RCC_GetSysClockFreq>
 800938e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009390:	e009      	b.n	80093a6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009392:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009396:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009398:	e005      	b.n	80093a6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800939a:	2300      	movs	r3, #0
 800939c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800939e:	2301      	movs	r3, #1
 80093a0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80093a4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80093a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	f000 8130 	beq.w	800960e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80093ae:	697b      	ldr	r3, [r7, #20]
 80093b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093b2:	4a94      	ldr	r2, [pc, #592]	; (8009604 <UART_SetConfig+0x5c4>)
 80093b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80093b8:	461a      	mov	r2, r3
 80093ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80093c0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80093c2:	697b      	ldr	r3, [r7, #20]
 80093c4:	685a      	ldr	r2, [r3, #4]
 80093c6:	4613      	mov	r3, r2
 80093c8:	005b      	lsls	r3, r3, #1
 80093ca:	4413      	add	r3, r2
 80093cc:	69ba      	ldr	r2, [r7, #24]
 80093ce:	429a      	cmp	r2, r3
 80093d0:	d305      	bcc.n	80093de <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80093d2:	697b      	ldr	r3, [r7, #20]
 80093d4:	685b      	ldr	r3, [r3, #4]
 80093d6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80093d8:	69ba      	ldr	r2, [r7, #24]
 80093da:	429a      	cmp	r2, r3
 80093dc:	d903      	bls.n	80093e6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80093de:	2301      	movs	r3, #1
 80093e0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80093e4:	e113      	b.n	800960e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80093e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093e8:	2200      	movs	r2, #0
 80093ea:	60bb      	str	r3, [r7, #8]
 80093ec:	60fa      	str	r2, [r7, #12]
 80093ee:	697b      	ldr	r3, [r7, #20]
 80093f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093f2:	4a84      	ldr	r2, [pc, #528]	; (8009604 <UART_SetConfig+0x5c4>)
 80093f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80093f8:	b29b      	uxth	r3, r3
 80093fa:	2200      	movs	r2, #0
 80093fc:	603b      	str	r3, [r7, #0]
 80093fe:	607a      	str	r2, [r7, #4]
 8009400:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009404:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009408:	f7f6 fef8 	bl	80001fc <__aeabi_uldivmod>
 800940c:	4602      	mov	r2, r0
 800940e:	460b      	mov	r3, r1
 8009410:	4610      	mov	r0, r2
 8009412:	4619      	mov	r1, r3
 8009414:	f04f 0200 	mov.w	r2, #0
 8009418:	f04f 0300 	mov.w	r3, #0
 800941c:	020b      	lsls	r3, r1, #8
 800941e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009422:	0202      	lsls	r2, r0, #8
 8009424:	6979      	ldr	r1, [r7, #20]
 8009426:	6849      	ldr	r1, [r1, #4]
 8009428:	0849      	lsrs	r1, r1, #1
 800942a:	2000      	movs	r0, #0
 800942c:	460c      	mov	r4, r1
 800942e:	4605      	mov	r5, r0
 8009430:	eb12 0804 	adds.w	r8, r2, r4
 8009434:	eb43 0905 	adc.w	r9, r3, r5
 8009438:	697b      	ldr	r3, [r7, #20]
 800943a:	685b      	ldr	r3, [r3, #4]
 800943c:	2200      	movs	r2, #0
 800943e:	469a      	mov	sl, r3
 8009440:	4693      	mov	fp, r2
 8009442:	4652      	mov	r2, sl
 8009444:	465b      	mov	r3, fp
 8009446:	4640      	mov	r0, r8
 8009448:	4649      	mov	r1, r9
 800944a:	f7f6 fed7 	bl	80001fc <__aeabi_uldivmod>
 800944e:	4602      	mov	r2, r0
 8009450:	460b      	mov	r3, r1
 8009452:	4613      	mov	r3, r2
 8009454:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009456:	6a3b      	ldr	r3, [r7, #32]
 8009458:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800945c:	d308      	bcc.n	8009470 <UART_SetConfig+0x430>
 800945e:	6a3b      	ldr	r3, [r7, #32]
 8009460:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009464:	d204      	bcs.n	8009470 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8009466:	697b      	ldr	r3, [r7, #20]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	6a3a      	ldr	r2, [r7, #32]
 800946c:	60da      	str	r2, [r3, #12]
 800946e:	e0ce      	b.n	800960e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8009470:	2301      	movs	r3, #1
 8009472:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009476:	e0ca      	b.n	800960e <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009478:	697b      	ldr	r3, [r7, #20]
 800947a:	69db      	ldr	r3, [r3, #28]
 800947c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009480:	d166      	bne.n	8009550 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8009482:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009486:	2b08      	cmp	r3, #8
 8009488:	d827      	bhi.n	80094da <UART_SetConfig+0x49a>
 800948a:	a201      	add	r2, pc, #4	; (adr r2, 8009490 <UART_SetConfig+0x450>)
 800948c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009490:	080094b5 	.word	0x080094b5
 8009494:	080094bd 	.word	0x080094bd
 8009498:	080094c5 	.word	0x080094c5
 800949c:	080094db 	.word	0x080094db
 80094a0:	080094cb 	.word	0x080094cb
 80094a4:	080094db 	.word	0x080094db
 80094a8:	080094db 	.word	0x080094db
 80094ac:	080094db 	.word	0x080094db
 80094b0:	080094d3 	.word	0x080094d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80094b4:	f7fb fb96 	bl	8004be4 <HAL_RCC_GetPCLK1Freq>
 80094b8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80094ba:	e014      	b.n	80094e6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80094bc:	f7fb fba8 	bl	8004c10 <HAL_RCC_GetPCLK2Freq>
 80094c0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80094c2:	e010      	b.n	80094e6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80094c4:	4b4e      	ldr	r3, [pc, #312]	; (8009600 <UART_SetConfig+0x5c0>)
 80094c6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80094c8:	e00d      	b.n	80094e6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80094ca:	f7fb faf3 	bl	8004ab4 <HAL_RCC_GetSysClockFreq>
 80094ce:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80094d0:	e009      	b.n	80094e6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80094d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80094d6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80094d8:	e005      	b.n	80094e6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80094da:	2300      	movs	r3, #0
 80094dc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80094de:	2301      	movs	r3, #1
 80094e0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80094e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80094e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	f000 8090 	beq.w	800960e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80094ee:	697b      	ldr	r3, [r7, #20]
 80094f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094f2:	4a44      	ldr	r2, [pc, #272]	; (8009604 <UART_SetConfig+0x5c4>)
 80094f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80094f8:	461a      	mov	r2, r3
 80094fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8009500:	005a      	lsls	r2, r3, #1
 8009502:	697b      	ldr	r3, [r7, #20]
 8009504:	685b      	ldr	r3, [r3, #4]
 8009506:	085b      	lsrs	r3, r3, #1
 8009508:	441a      	add	r2, r3
 800950a:	697b      	ldr	r3, [r7, #20]
 800950c:	685b      	ldr	r3, [r3, #4]
 800950e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009512:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009514:	6a3b      	ldr	r3, [r7, #32]
 8009516:	2b0f      	cmp	r3, #15
 8009518:	d916      	bls.n	8009548 <UART_SetConfig+0x508>
 800951a:	6a3b      	ldr	r3, [r7, #32]
 800951c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009520:	d212      	bcs.n	8009548 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009522:	6a3b      	ldr	r3, [r7, #32]
 8009524:	b29b      	uxth	r3, r3
 8009526:	f023 030f 	bic.w	r3, r3, #15
 800952a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800952c:	6a3b      	ldr	r3, [r7, #32]
 800952e:	085b      	lsrs	r3, r3, #1
 8009530:	b29b      	uxth	r3, r3
 8009532:	f003 0307 	and.w	r3, r3, #7
 8009536:	b29a      	uxth	r2, r3
 8009538:	8bfb      	ldrh	r3, [r7, #30]
 800953a:	4313      	orrs	r3, r2
 800953c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800953e:	697b      	ldr	r3, [r7, #20]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	8bfa      	ldrh	r2, [r7, #30]
 8009544:	60da      	str	r2, [r3, #12]
 8009546:	e062      	b.n	800960e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8009548:	2301      	movs	r3, #1
 800954a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800954e:	e05e      	b.n	800960e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009550:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009554:	2b08      	cmp	r3, #8
 8009556:	d828      	bhi.n	80095aa <UART_SetConfig+0x56a>
 8009558:	a201      	add	r2, pc, #4	; (adr r2, 8009560 <UART_SetConfig+0x520>)
 800955a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800955e:	bf00      	nop
 8009560:	08009585 	.word	0x08009585
 8009564:	0800958d 	.word	0x0800958d
 8009568:	08009595 	.word	0x08009595
 800956c:	080095ab 	.word	0x080095ab
 8009570:	0800959b 	.word	0x0800959b
 8009574:	080095ab 	.word	0x080095ab
 8009578:	080095ab 	.word	0x080095ab
 800957c:	080095ab 	.word	0x080095ab
 8009580:	080095a3 	.word	0x080095a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009584:	f7fb fb2e 	bl	8004be4 <HAL_RCC_GetPCLK1Freq>
 8009588:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800958a:	e014      	b.n	80095b6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800958c:	f7fb fb40 	bl	8004c10 <HAL_RCC_GetPCLK2Freq>
 8009590:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009592:	e010      	b.n	80095b6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009594:	4b1a      	ldr	r3, [pc, #104]	; (8009600 <UART_SetConfig+0x5c0>)
 8009596:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009598:	e00d      	b.n	80095b6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800959a:	f7fb fa8b 	bl	8004ab4 <HAL_RCC_GetSysClockFreq>
 800959e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80095a0:	e009      	b.n	80095b6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80095a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80095a6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80095a8:	e005      	b.n	80095b6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80095aa:	2300      	movs	r3, #0
 80095ac:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80095ae:	2301      	movs	r3, #1
 80095b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80095b4:	bf00      	nop
    }

    if (pclk != 0U)
 80095b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d028      	beq.n	800960e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80095bc:	697b      	ldr	r3, [r7, #20]
 80095be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095c0:	4a10      	ldr	r2, [pc, #64]	; (8009604 <UART_SetConfig+0x5c4>)
 80095c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80095c6:	461a      	mov	r2, r3
 80095c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ca:	fbb3 f2f2 	udiv	r2, r3, r2
 80095ce:	697b      	ldr	r3, [r7, #20]
 80095d0:	685b      	ldr	r3, [r3, #4]
 80095d2:	085b      	lsrs	r3, r3, #1
 80095d4:	441a      	add	r2, r3
 80095d6:	697b      	ldr	r3, [r7, #20]
 80095d8:	685b      	ldr	r3, [r3, #4]
 80095da:	fbb2 f3f3 	udiv	r3, r2, r3
 80095de:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80095e0:	6a3b      	ldr	r3, [r7, #32]
 80095e2:	2b0f      	cmp	r3, #15
 80095e4:	d910      	bls.n	8009608 <UART_SetConfig+0x5c8>
 80095e6:	6a3b      	ldr	r3, [r7, #32]
 80095e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80095ec:	d20c      	bcs.n	8009608 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80095ee:	6a3b      	ldr	r3, [r7, #32]
 80095f0:	b29a      	uxth	r2, r3
 80095f2:	697b      	ldr	r3, [r7, #20]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	60da      	str	r2, [r3, #12]
 80095f8:	e009      	b.n	800960e <UART_SetConfig+0x5ce>
 80095fa:	bf00      	nop
 80095fc:	40008000 	.word	0x40008000
 8009600:	00f42400 	.word	0x00f42400
 8009604:	08009c60 	.word	0x08009c60
      }
      else
      {
        ret = HAL_ERROR;
 8009608:	2301      	movs	r3, #1
 800960a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800960e:	697b      	ldr	r3, [r7, #20]
 8009610:	2201      	movs	r2, #1
 8009612:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009616:	697b      	ldr	r3, [r7, #20]
 8009618:	2201      	movs	r2, #1
 800961a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800961e:	697b      	ldr	r3, [r7, #20]
 8009620:	2200      	movs	r2, #0
 8009622:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8009624:	697b      	ldr	r3, [r7, #20]
 8009626:	2200      	movs	r2, #0
 8009628:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800962a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800962e:	4618      	mov	r0, r3
 8009630:	3730      	adds	r7, #48	; 0x30
 8009632:	46bd      	mov	sp, r7
 8009634:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009638 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009638:	b480      	push	{r7}
 800963a:	b083      	sub	sp, #12
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009644:	f003 0301 	and.w	r3, r3, #1
 8009648:	2b00      	cmp	r3, #0
 800964a:	d00a      	beq.n	8009662 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	685b      	ldr	r3, [r3, #4]
 8009652:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	430a      	orrs	r2, r1
 8009660:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009666:	f003 0302 	and.w	r3, r3, #2
 800966a:	2b00      	cmp	r3, #0
 800966c:	d00a      	beq.n	8009684 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	685b      	ldr	r3, [r3, #4]
 8009674:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	430a      	orrs	r2, r1
 8009682:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009688:	f003 0304 	and.w	r3, r3, #4
 800968c:	2b00      	cmp	r3, #0
 800968e:	d00a      	beq.n	80096a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	685b      	ldr	r3, [r3, #4]
 8009696:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	430a      	orrs	r2, r1
 80096a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096aa:	f003 0308 	and.w	r3, r3, #8
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d00a      	beq.n	80096c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	685b      	ldr	r3, [r3, #4]
 80096b8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	430a      	orrs	r2, r1
 80096c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096cc:	f003 0310 	and.w	r3, r3, #16
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d00a      	beq.n	80096ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	689b      	ldr	r3, [r3, #8]
 80096da:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	430a      	orrs	r2, r1
 80096e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096ee:	f003 0320 	and.w	r3, r3, #32
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d00a      	beq.n	800970c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	689b      	ldr	r3, [r3, #8]
 80096fc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	430a      	orrs	r2, r1
 800970a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009710:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009714:	2b00      	cmp	r3, #0
 8009716:	d01a      	beq.n	800974e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	685b      	ldr	r3, [r3, #4]
 800971e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	430a      	orrs	r2, r1
 800972c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009732:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009736:	d10a      	bne.n	800974e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	685b      	ldr	r3, [r3, #4]
 800973e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	430a      	orrs	r2, r1
 800974c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009756:	2b00      	cmp	r3, #0
 8009758:	d00a      	beq.n	8009770 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	685b      	ldr	r3, [r3, #4]
 8009760:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	430a      	orrs	r2, r1
 800976e:	605a      	str	r2, [r3, #4]
  }
}
 8009770:	bf00      	nop
 8009772:	370c      	adds	r7, #12
 8009774:	46bd      	mov	sp, r7
 8009776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977a:	4770      	bx	lr

0800977c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b086      	sub	sp, #24
 8009780:	af02      	add	r7, sp, #8
 8009782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2200      	movs	r2, #0
 8009788:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800978c:	f7f8 ff14 	bl	80025b8 <HAL_GetTick>
 8009790:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	f003 0308 	and.w	r3, r3, #8
 800979c:	2b08      	cmp	r3, #8
 800979e:	d10e      	bne.n	80097be <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80097a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80097a4:	9300      	str	r3, [sp, #0]
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	2200      	movs	r2, #0
 80097aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f000 f82f 	bl	8009812 <UART_WaitOnFlagUntilTimeout>
 80097b4:	4603      	mov	r3, r0
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d001      	beq.n	80097be <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80097ba:	2303      	movs	r3, #3
 80097bc:	e025      	b.n	800980a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	f003 0304 	and.w	r3, r3, #4
 80097c8:	2b04      	cmp	r3, #4
 80097ca:	d10e      	bne.n	80097ea <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80097cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80097d0:	9300      	str	r3, [sp, #0]
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	2200      	movs	r2, #0
 80097d6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80097da:	6878      	ldr	r0, [r7, #4]
 80097dc:	f000 f819 	bl	8009812 <UART_WaitOnFlagUntilTimeout>
 80097e0:	4603      	mov	r3, r0
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d001      	beq.n	80097ea <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80097e6:	2303      	movs	r3, #3
 80097e8:	e00f      	b.n	800980a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	2220      	movs	r2, #32
 80097ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	2220      	movs	r2, #32
 80097f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2200      	movs	r2, #0
 80097fe:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2200      	movs	r2, #0
 8009804:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009808:	2300      	movs	r3, #0
}
 800980a:	4618      	mov	r0, r3
 800980c:	3710      	adds	r7, #16
 800980e:	46bd      	mov	sp, r7
 8009810:	bd80      	pop	{r7, pc}

08009812 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009812:	b580      	push	{r7, lr}
 8009814:	b09c      	sub	sp, #112	; 0x70
 8009816:	af00      	add	r7, sp, #0
 8009818:	60f8      	str	r0, [r7, #12]
 800981a:	60b9      	str	r1, [r7, #8]
 800981c:	603b      	str	r3, [r7, #0]
 800981e:	4613      	mov	r3, r2
 8009820:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009822:	e0a9      	b.n	8009978 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009824:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009826:	f1b3 3fff 	cmp.w	r3, #4294967295
 800982a:	f000 80a5 	beq.w	8009978 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800982e:	f7f8 fec3 	bl	80025b8 <HAL_GetTick>
 8009832:	4602      	mov	r2, r0
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	1ad3      	subs	r3, r2, r3
 8009838:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800983a:	429a      	cmp	r2, r3
 800983c:	d302      	bcc.n	8009844 <UART_WaitOnFlagUntilTimeout+0x32>
 800983e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009840:	2b00      	cmp	r3, #0
 8009842:	d140      	bne.n	80098c6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800984a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800984c:	e853 3f00 	ldrex	r3, [r3]
 8009850:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009852:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009854:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009858:	667b      	str	r3, [r7, #100]	; 0x64
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	461a      	mov	r2, r3
 8009860:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009862:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009864:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009866:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009868:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800986a:	e841 2300 	strex	r3, r2, [r1]
 800986e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009870:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009872:	2b00      	cmp	r3, #0
 8009874:	d1e6      	bne.n	8009844 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	3308      	adds	r3, #8
 800987c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800987e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009880:	e853 3f00 	ldrex	r3, [r3]
 8009884:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009888:	f023 0301 	bic.w	r3, r3, #1
 800988c:	663b      	str	r3, [r7, #96]	; 0x60
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	3308      	adds	r3, #8
 8009894:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009896:	64ba      	str	r2, [r7, #72]	; 0x48
 8009898:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800989a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800989c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800989e:	e841 2300 	strex	r3, r2, [r1]
 80098a2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80098a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d1e5      	bne.n	8009876 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	2220      	movs	r2, #32
 80098ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	2220      	movs	r2, #32
 80098b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	2200      	movs	r2, #0
 80098be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80098c2:	2303      	movs	r3, #3
 80098c4:	e069      	b.n	800999a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	f003 0304 	and.w	r3, r3, #4
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d051      	beq.n	8009978 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	69db      	ldr	r3, [r3, #28]
 80098da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80098de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80098e2:	d149      	bne.n	8009978 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80098ec:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098f6:	e853 3f00 	ldrex	r3, [r3]
 80098fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80098fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098fe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009902:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	461a      	mov	r2, r3
 800990a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800990c:	637b      	str	r3, [r7, #52]	; 0x34
 800990e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009910:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009912:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009914:	e841 2300 	strex	r3, r2, [r1]
 8009918:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800991a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800991c:	2b00      	cmp	r3, #0
 800991e:	d1e6      	bne.n	80098ee <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	3308      	adds	r3, #8
 8009926:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009928:	697b      	ldr	r3, [r7, #20]
 800992a:	e853 3f00 	ldrex	r3, [r3]
 800992e:	613b      	str	r3, [r7, #16]
   return(result);
 8009930:	693b      	ldr	r3, [r7, #16]
 8009932:	f023 0301 	bic.w	r3, r3, #1
 8009936:	66bb      	str	r3, [r7, #104]	; 0x68
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	3308      	adds	r3, #8
 800993e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009940:	623a      	str	r2, [r7, #32]
 8009942:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009944:	69f9      	ldr	r1, [r7, #28]
 8009946:	6a3a      	ldr	r2, [r7, #32]
 8009948:	e841 2300 	strex	r3, r2, [r1]
 800994c:	61bb      	str	r3, [r7, #24]
   return(result);
 800994e:	69bb      	ldr	r3, [r7, #24]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d1e5      	bne.n	8009920 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	2220      	movs	r2, #32
 8009958:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	2220      	movs	r2, #32
 8009960:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	2220      	movs	r2, #32
 8009968:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	2200      	movs	r2, #0
 8009970:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009974:	2303      	movs	r3, #3
 8009976:	e010      	b.n	800999a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	69da      	ldr	r2, [r3, #28]
 800997e:	68bb      	ldr	r3, [r7, #8]
 8009980:	4013      	ands	r3, r2
 8009982:	68ba      	ldr	r2, [r7, #8]
 8009984:	429a      	cmp	r2, r3
 8009986:	bf0c      	ite	eq
 8009988:	2301      	moveq	r3, #1
 800998a:	2300      	movne	r3, #0
 800998c:	b2db      	uxtb	r3, r3
 800998e:	461a      	mov	r2, r3
 8009990:	79fb      	ldrb	r3, [r7, #7]
 8009992:	429a      	cmp	r2, r3
 8009994:	f43f af46 	beq.w	8009824 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009998:	2300      	movs	r3, #0
}
 800999a:	4618      	mov	r0, r3
 800999c:	3770      	adds	r7, #112	; 0x70
 800999e:	46bd      	mov	sp, r7
 80099a0:	bd80      	pop	{r7, pc}

080099a2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80099a2:	b480      	push	{r7}
 80099a4:	b085      	sub	sp, #20
 80099a6:	af00      	add	r7, sp, #0
 80099a8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80099b0:	2b01      	cmp	r3, #1
 80099b2:	d101      	bne.n	80099b8 <HAL_UARTEx_DisableFifoMode+0x16>
 80099b4:	2302      	movs	r3, #2
 80099b6:	e027      	b.n	8009a08 <HAL_UARTEx_DisableFifoMode+0x66>
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	2201      	movs	r2, #1
 80099bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2224      	movs	r2, #36	; 0x24
 80099c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	681a      	ldr	r2, [r3, #0]
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	f022 0201 	bic.w	r2, r2, #1
 80099de:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80099e6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2200      	movs	r2, #0
 80099ec:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	68fa      	ldr	r2, [r7, #12]
 80099f4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	2220      	movs	r2, #32
 80099fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	2200      	movs	r2, #0
 8009a02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009a06:	2300      	movs	r3, #0
}
 8009a08:	4618      	mov	r0, r3
 8009a0a:	3714      	adds	r7, #20
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a12:	4770      	bx	lr

08009a14 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b084      	sub	sp, #16
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
 8009a1c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009a24:	2b01      	cmp	r3, #1
 8009a26:	d101      	bne.n	8009a2c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009a28:	2302      	movs	r3, #2
 8009a2a:	e02d      	b.n	8009a88 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2201      	movs	r2, #1
 8009a30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2224      	movs	r2, #36	; 0x24
 8009a38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	681a      	ldr	r2, [r3, #0]
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	f022 0201 	bic.w	r2, r2, #1
 8009a52:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	689b      	ldr	r3, [r3, #8]
 8009a5a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	683a      	ldr	r2, [r7, #0]
 8009a64:	430a      	orrs	r2, r1
 8009a66:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009a68:	6878      	ldr	r0, [r7, #4]
 8009a6a:	f000 f84f 	bl	8009b0c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	68fa      	ldr	r2, [r7, #12]
 8009a74:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	2220      	movs	r2, #32
 8009a7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	2200      	movs	r2, #0
 8009a82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009a86:	2300      	movs	r3, #0
}
 8009a88:	4618      	mov	r0, r3
 8009a8a:	3710      	adds	r7, #16
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	bd80      	pop	{r7, pc}

08009a90 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b084      	sub	sp, #16
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
 8009a98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009aa0:	2b01      	cmp	r3, #1
 8009aa2:	d101      	bne.n	8009aa8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009aa4:	2302      	movs	r3, #2
 8009aa6:	e02d      	b.n	8009b04 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2201      	movs	r2, #1
 8009aac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2224      	movs	r2, #36	; 0x24
 8009ab4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	681a      	ldr	r2, [r3, #0]
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	f022 0201 	bic.w	r2, r2, #1
 8009ace:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	689b      	ldr	r3, [r3, #8]
 8009ad6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	683a      	ldr	r2, [r7, #0]
 8009ae0:	430a      	orrs	r2, r1
 8009ae2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009ae4:	6878      	ldr	r0, [r7, #4]
 8009ae6:	f000 f811 	bl	8009b0c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	68fa      	ldr	r2, [r7, #12]
 8009af0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	2220      	movs	r2, #32
 8009af6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	2200      	movs	r2, #0
 8009afe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009b02:	2300      	movs	r3, #0
}
 8009b04:	4618      	mov	r0, r3
 8009b06:	3710      	adds	r7, #16
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	bd80      	pop	{r7, pc}

08009b0c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009b0c:	b480      	push	{r7}
 8009b0e:	b085      	sub	sp, #20
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d108      	bne.n	8009b2e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2201      	movs	r2, #1
 8009b20:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2201      	movs	r2, #1
 8009b28:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009b2c:	e031      	b.n	8009b92 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009b2e:	2308      	movs	r3, #8
 8009b30:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009b32:	2308      	movs	r3, #8
 8009b34:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	689b      	ldr	r3, [r3, #8]
 8009b3c:	0e5b      	lsrs	r3, r3, #25
 8009b3e:	b2db      	uxtb	r3, r3
 8009b40:	f003 0307 	and.w	r3, r3, #7
 8009b44:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	689b      	ldr	r3, [r3, #8]
 8009b4c:	0f5b      	lsrs	r3, r3, #29
 8009b4e:	b2db      	uxtb	r3, r3
 8009b50:	f003 0307 	and.w	r3, r3, #7
 8009b54:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009b56:	7bbb      	ldrb	r3, [r7, #14]
 8009b58:	7b3a      	ldrb	r2, [r7, #12]
 8009b5a:	4911      	ldr	r1, [pc, #68]	; (8009ba0 <UARTEx_SetNbDataToProcess+0x94>)
 8009b5c:	5c8a      	ldrb	r2, [r1, r2]
 8009b5e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009b62:	7b3a      	ldrb	r2, [r7, #12]
 8009b64:	490f      	ldr	r1, [pc, #60]	; (8009ba4 <UARTEx_SetNbDataToProcess+0x98>)
 8009b66:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009b68:	fb93 f3f2 	sdiv	r3, r3, r2
 8009b6c:	b29a      	uxth	r2, r3
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009b74:	7bfb      	ldrb	r3, [r7, #15]
 8009b76:	7b7a      	ldrb	r2, [r7, #13]
 8009b78:	4909      	ldr	r1, [pc, #36]	; (8009ba0 <UARTEx_SetNbDataToProcess+0x94>)
 8009b7a:	5c8a      	ldrb	r2, [r1, r2]
 8009b7c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009b80:	7b7a      	ldrb	r2, [r7, #13]
 8009b82:	4908      	ldr	r1, [pc, #32]	; (8009ba4 <UARTEx_SetNbDataToProcess+0x98>)
 8009b84:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009b86:	fb93 f3f2 	sdiv	r3, r3, r2
 8009b8a:	b29a      	uxth	r2, r3
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009b92:	bf00      	nop
 8009b94:	3714      	adds	r7, #20
 8009b96:	46bd      	mov	sp, r7
 8009b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9c:	4770      	bx	lr
 8009b9e:	bf00      	nop
 8009ba0:	08009c78 	.word	0x08009c78
 8009ba4:	08009c80 	.word	0x08009c80

08009ba8 <__libc_init_array>:
 8009ba8:	b570      	push	{r4, r5, r6, lr}
 8009baa:	4d0d      	ldr	r5, [pc, #52]	; (8009be0 <__libc_init_array+0x38>)
 8009bac:	4c0d      	ldr	r4, [pc, #52]	; (8009be4 <__libc_init_array+0x3c>)
 8009bae:	1b64      	subs	r4, r4, r5
 8009bb0:	10a4      	asrs	r4, r4, #2
 8009bb2:	2600      	movs	r6, #0
 8009bb4:	42a6      	cmp	r6, r4
 8009bb6:	d109      	bne.n	8009bcc <__libc_init_array+0x24>
 8009bb8:	4d0b      	ldr	r5, [pc, #44]	; (8009be8 <__libc_init_array+0x40>)
 8009bba:	4c0c      	ldr	r4, [pc, #48]	; (8009bec <__libc_init_array+0x44>)
 8009bbc:	f000 f820 	bl	8009c00 <_init>
 8009bc0:	1b64      	subs	r4, r4, r5
 8009bc2:	10a4      	asrs	r4, r4, #2
 8009bc4:	2600      	movs	r6, #0
 8009bc6:	42a6      	cmp	r6, r4
 8009bc8:	d105      	bne.n	8009bd6 <__libc_init_array+0x2e>
 8009bca:	bd70      	pop	{r4, r5, r6, pc}
 8009bcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bd0:	4798      	blx	r3
 8009bd2:	3601      	adds	r6, #1
 8009bd4:	e7ee      	b.n	8009bb4 <__libc_init_array+0xc>
 8009bd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bda:	4798      	blx	r3
 8009bdc:	3601      	adds	r6, #1
 8009bde:	e7f2      	b.n	8009bc6 <__libc_init_array+0x1e>
 8009be0:	08009c90 	.word	0x08009c90
 8009be4:	08009c90 	.word	0x08009c90
 8009be8:	08009c90 	.word	0x08009c90
 8009bec:	08009c94 	.word	0x08009c94

08009bf0 <memset>:
 8009bf0:	4402      	add	r2, r0
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	4293      	cmp	r3, r2
 8009bf6:	d100      	bne.n	8009bfa <memset+0xa>
 8009bf8:	4770      	bx	lr
 8009bfa:	f803 1b01 	strb.w	r1, [r3], #1
 8009bfe:	e7f9      	b.n	8009bf4 <memset+0x4>

08009c00 <_init>:
 8009c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c02:	bf00      	nop
 8009c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c06:	bc08      	pop	{r3}
 8009c08:	469e      	mov	lr, r3
 8009c0a:	4770      	bx	lr

08009c0c <_fini>:
 8009c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c0e:	bf00      	nop
 8009c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c12:	bc08      	pop	{r3}
 8009c14:	469e      	mov	lr, r3
 8009c16:	4770      	bx	lr
