
Central_control_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e1c4  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000055c  0800e388  0800e388  0001e388  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e8e4  0800e8e4  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800e8e4  0800e8e4  0001e8e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e8ec  0800e8ec  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e8ec  0800e8ec  0001e8ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e8f0  0800e8f0  0001e8f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800e8f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000680  200001e4  0800ead8  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000864  0800ead8  00020864  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002113e  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c53  00000000  00000000  00041352  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a80  00000000  00000000  00044fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001940  00000000  00000000  00046a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030309  00000000  00000000  00048368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000209e4  00000000  00000000  00078671  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001265d9  00000000  00000000  00099055  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001bf62e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000081d8  00000000  00000000  001bf680  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800e36c 	.word	0x0800e36c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e8 	.word	0x200001e8
 80001fc:	0800e36c 	.word	0x0800e36c

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b974 	b.w	8000ed8 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	4604      	mov	r4, r0
 8000c10:	468e      	mov	lr, r1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d14d      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c16:	428a      	cmp	r2, r1
 8000c18:	4694      	mov	ip, r2
 8000c1a:	d969      	bls.n	8000cf0 <__udivmoddi4+0xe8>
 8000c1c:	fab2 f282 	clz	r2, r2
 8000c20:	b152      	cbz	r2, 8000c38 <__udivmoddi4+0x30>
 8000c22:	fa01 f302 	lsl.w	r3, r1, r2
 8000c26:	f1c2 0120 	rsb	r1, r2, #32
 8000c2a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c2e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c32:	ea41 0e03 	orr.w	lr, r1, r3
 8000c36:	4094      	lsls	r4, r2
 8000c38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c3c:	0c21      	lsrs	r1, r4, #16
 8000c3e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c42:	fa1f f78c 	uxth.w	r7, ip
 8000c46:	fb08 e316 	mls	r3, r8, r6, lr
 8000c4a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c4e:	fb06 f107 	mul.w	r1, r6, r7
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c5e:	f080 811f 	bcs.w	8000ea0 <__udivmoddi4+0x298>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 811c 	bls.w	8000ea0 <__udivmoddi4+0x298>
 8000c68:	3e02      	subs	r6, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a5b      	subs	r3, r3, r1
 8000c6e:	b2a4      	uxth	r4, r4
 8000c70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c74:	fb08 3310 	mls	r3, r8, r0, r3
 8000c78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c7c:	fb00 f707 	mul.w	r7, r0, r7
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	d90a      	bls.n	8000c9a <__udivmoddi4+0x92>
 8000c84:	eb1c 0404 	adds.w	r4, ip, r4
 8000c88:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8c:	f080 810a 	bcs.w	8000ea4 <__udivmoddi4+0x29c>
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	f240 8107 	bls.w	8000ea4 <__udivmoddi4+0x29c>
 8000c96:	4464      	add	r4, ip
 8000c98:	3802      	subs	r0, #2
 8000c9a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c9e:	1be4      	subs	r4, r4, r7
 8000ca0:	2600      	movs	r6, #0
 8000ca2:	b11d      	cbz	r5, 8000cac <__udivmoddi4+0xa4>
 8000ca4:	40d4      	lsrs	r4, r2
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cac:	4631      	mov	r1, r6
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0xc2>
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	f000 80ef 	beq.w	8000e9a <__udivmoddi4+0x292>
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	4631      	mov	r1, r6
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	fab3 f683 	clz	r6, r3
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	d14a      	bne.n	8000d68 <__udivmoddi4+0x160>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0xd4>
 8000cd6:	4282      	cmp	r2, r0
 8000cd8:	f200 80f9 	bhi.w	8000ece <__udivmoddi4+0x2c6>
 8000cdc:	1a84      	subs	r4, r0, r2
 8000cde:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	469e      	mov	lr, r3
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	d0e0      	beq.n	8000cac <__udivmoddi4+0xa4>
 8000cea:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cee:	e7dd      	b.n	8000cac <__udivmoddi4+0xa4>
 8000cf0:	b902      	cbnz	r2, 8000cf4 <__udivmoddi4+0xec>
 8000cf2:	deff      	udf	#255	; 0xff
 8000cf4:	fab2 f282 	clz	r2, r2
 8000cf8:	2a00      	cmp	r2, #0
 8000cfa:	f040 8092 	bne.w	8000e22 <__udivmoddi4+0x21a>
 8000cfe:	eba1 010c 	sub.w	r1, r1, ip
 8000d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d06:	fa1f fe8c 	uxth.w	lr, ip
 8000d0a:	2601      	movs	r6, #1
 8000d0c:	0c20      	lsrs	r0, r4, #16
 8000d0e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d12:	fb07 1113 	mls	r1, r7, r3, r1
 8000d16:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d1a:	fb0e f003 	mul.w	r0, lr, r3
 8000d1e:	4288      	cmp	r0, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x12c>
 8000d22:	eb1c 0101 	adds.w	r1, ip, r1
 8000d26:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x12a>
 8000d2c:	4288      	cmp	r0, r1
 8000d2e:	f200 80cb 	bhi.w	8000ec8 <__udivmoddi4+0x2c0>
 8000d32:	4643      	mov	r3, r8
 8000d34:	1a09      	subs	r1, r1, r0
 8000d36:	b2a4      	uxth	r4, r4
 8000d38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d3c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d40:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d44:	fb0e fe00 	mul.w	lr, lr, r0
 8000d48:	45a6      	cmp	lr, r4
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x156>
 8000d4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d50:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d54:	d202      	bcs.n	8000d5c <__udivmoddi4+0x154>
 8000d56:	45a6      	cmp	lr, r4
 8000d58:	f200 80bb 	bhi.w	8000ed2 <__udivmoddi4+0x2ca>
 8000d5c:	4608      	mov	r0, r1
 8000d5e:	eba4 040e 	sub.w	r4, r4, lr
 8000d62:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d66:	e79c      	b.n	8000ca2 <__udivmoddi4+0x9a>
 8000d68:	f1c6 0720 	rsb	r7, r6, #32
 8000d6c:	40b3      	lsls	r3, r6
 8000d6e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d72:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d76:	fa20 f407 	lsr.w	r4, r0, r7
 8000d7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d7e:	431c      	orrs	r4, r3
 8000d80:	40f9      	lsrs	r1, r7
 8000d82:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d86:	fa00 f306 	lsl.w	r3, r0, r6
 8000d8a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d8e:	0c20      	lsrs	r0, r4, #16
 8000d90:	fa1f fe8c 	uxth.w	lr, ip
 8000d94:	fb09 1118 	mls	r1, r9, r8, r1
 8000d98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9c:	fb08 f00e 	mul.w	r0, r8, lr
 8000da0:	4288      	cmp	r0, r1
 8000da2:	fa02 f206 	lsl.w	r2, r2, r6
 8000da6:	d90b      	bls.n	8000dc0 <__udivmoddi4+0x1b8>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db0:	f080 8088 	bcs.w	8000ec4 <__udivmoddi4+0x2bc>
 8000db4:	4288      	cmp	r0, r1
 8000db6:	f240 8085 	bls.w	8000ec4 <__udivmoddi4+0x2bc>
 8000dba:	f1a8 0802 	sub.w	r8, r8, #2
 8000dbe:	4461      	add	r1, ip
 8000dc0:	1a09      	subs	r1, r1, r0
 8000dc2:	b2a4      	uxth	r4, r4
 8000dc4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dc8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dcc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dd0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd4:	458e      	cmp	lr, r1
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x1e2>
 8000dd8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ddc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000de0:	d26c      	bcs.n	8000ebc <__udivmoddi4+0x2b4>
 8000de2:	458e      	cmp	lr, r1
 8000de4:	d96a      	bls.n	8000ebc <__udivmoddi4+0x2b4>
 8000de6:	3802      	subs	r0, #2
 8000de8:	4461      	add	r1, ip
 8000dea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dee:	fba0 9402 	umull	r9, r4, r0, r2
 8000df2:	eba1 010e 	sub.w	r1, r1, lr
 8000df6:	42a1      	cmp	r1, r4
 8000df8:	46c8      	mov	r8, r9
 8000dfa:	46a6      	mov	lr, r4
 8000dfc:	d356      	bcc.n	8000eac <__udivmoddi4+0x2a4>
 8000dfe:	d053      	beq.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e00:	b15d      	cbz	r5, 8000e1a <__udivmoddi4+0x212>
 8000e02:	ebb3 0208 	subs.w	r2, r3, r8
 8000e06:	eb61 010e 	sbc.w	r1, r1, lr
 8000e0a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e0e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e12:	40f1      	lsrs	r1, r6
 8000e14:	431f      	orrs	r7, r3
 8000e16:	e9c5 7100 	strd	r7, r1, [r5]
 8000e1a:	2600      	movs	r6, #0
 8000e1c:	4631      	mov	r1, r6
 8000e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e22:	f1c2 0320 	rsb	r3, r2, #32
 8000e26:	40d8      	lsrs	r0, r3
 8000e28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e2c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e30:	4091      	lsls	r1, r2
 8000e32:	4301      	orrs	r1, r0
 8000e34:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e38:	fa1f fe8c 	uxth.w	lr, ip
 8000e3c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e40:	fb07 3610 	mls	r6, r7, r0, r3
 8000e44:	0c0b      	lsrs	r3, r1, #16
 8000e46:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e4a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e4e:	429e      	cmp	r6, r3
 8000e50:	fa04 f402 	lsl.w	r4, r4, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x260>
 8000e56:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e5e:	d22f      	bcs.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e60:	429e      	cmp	r6, r3
 8000e62:	d92d      	bls.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e64:	3802      	subs	r0, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	1b9b      	subs	r3, r3, r6
 8000e6a:	b289      	uxth	r1, r1
 8000e6c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e70:	fb07 3316 	mls	r3, r7, r6, r3
 8000e74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e78:	fb06 f30e 	mul.w	r3, r6, lr
 8000e7c:	428b      	cmp	r3, r1
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x28a>
 8000e80:	eb1c 0101 	adds.w	r1, ip, r1
 8000e84:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e88:	d216      	bcs.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d914      	bls.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8e:	3e02      	subs	r6, #2
 8000e90:	4461      	add	r1, ip
 8000e92:	1ac9      	subs	r1, r1, r3
 8000e94:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e98:	e738      	b.n	8000d0c <__udivmoddi4+0x104>
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e705      	b.n	8000cac <__udivmoddi4+0xa4>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e3      	b.n	8000c6c <__udivmoddi4+0x64>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6f8      	b.n	8000c9a <__udivmoddi4+0x92>
 8000ea8:	454b      	cmp	r3, r9
 8000eaa:	d2a9      	bcs.n	8000e00 <__udivmoddi4+0x1f8>
 8000eac:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7a3      	b.n	8000e00 <__udivmoddi4+0x1f8>
 8000eb8:	4646      	mov	r6, r8
 8000eba:	e7ea      	b.n	8000e92 <__udivmoddi4+0x28a>
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	e794      	b.n	8000dea <__udivmoddi4+0x1e2>
 8000ec0:	4640      	mov	r0, r8
 8000ec2:	e7d1      	b.n	8000e68 <__udivmoddi4+0x260>
 8000ec4:	46d0      	mov	r8, sl
 8000ec6:	e77b      	b.n	8000dc0 <__udivmoddi4+0x1b8>
 8000ec8:	3b02      	subs	r3, #2
 8000eca:	4461      	add	r1, ip
 8000ecc:	e732      	b.n	8000d34 <__udivmoddi4+0x12c>
 8000ece:	4630      	mov	r0, r6
 8000ed0:	e709      	b.n	8000ce6 <__udivmoddi4+0xde>
 8000ed2:	4464      	add	r4, ip
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	e742      	b.n	8000d5e <__udivmoddi4+0x156>

08000ed8 <__aeabi_idiv0>:
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop

08000edc <getSync>:
		sprintf(buf, "sig: %d x: %d y: %d width: %d height: %d index: %d age: %d\r\n", (pixy.curr_blocks + n)->m_signature, (pixy.curr_blocks + n)->m_x, (pixy.curr_blocks + n)->m_y, (pixy.curr_blocks + n)->m_width, (pixy.curr_blocks + n)->m_height, (pixy.curr_blocks + n)->m_index, (pixy.curr_blocks + n)->m_age);
	printf(buf);
}


int16_t getSync() {
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
	uint8_t i, j, c, cprev;
	int16_t res;
	uint16_t start;

	// parse bytes until we find sync
	for (i = j = 0, cprev = 0; true; i++) {
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	73bb      	strb	r3, [r7, #14]
 8000ee6:	7bbb      	ldrb	r3, [r7, #14]
 8000ee8:	73fb      	strb	r3, [r7, #15]
 8000eea:	2300      	movs	r3, #0
 8000eec:	737b      	strb	r3, [r7, #13]
		res = recv(&c, 1, NULL);
 8000eee:	1dfb      	adds	r3, r7, #7
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	2101      	movs	r1, #1
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f000 f9b1 	bl	800125c <recv>
 8000efa:	4603      	mov	r3, r0
 8000efc:	817b      	strh	r3, [r7, #10]
		if (res >= PIXY_RESULT_OK) {
 8000efe:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	db1f      	blt.n	8000f46 <getSync+0x6a>
			// since we're using little endian, previous byte is least significant byte
			start = cprev;
 8000f06:	7b7b      	ldrb	r3, [r7, #13]
 8000f08:	813b      	strh	r3, [r7, #8]
			// current byte is most significant byte
			start |= c << 8;
 8000f0a:	79fb      	ldrb	r3, [r7, #7]
 8000f0c:	021b      	lsls	r3, r3, #8
 8000f0e:	b21a      	sxth	r2, r3
 8000f10:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	b21b      	sxth	r3, r3
 8000f18:	813b      	strh	r3, [r7, #8]
			cprev = c;
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
 8000f1c:	737b      	strb	r3, [r7, #13]
			if (start == PIXY_CHECKSUM_SYNC) {
 8000f1e:	893b      	ldrh	r3, [r7, #8]
 8000f20:	f24c 12af 	movw	r2, #49583	; 0xc1af
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d104      	bne.n	8000f32 <getSync+0x56>
				pixy.m_cs = true;
 8000f28:	4b16      	ldr	r3, [pc, #88]	; (8000f84 <getSync+0xa8>)
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	749a      	strb	r2, [r3, #18]
				return PIXY_RESULT_OK;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	e024      	b.n	8000f7c <getSync+0xa0>
			}
			if (start == PIXY_NO_CHECKSUM_SYNC) {
 8000f32:	893b      	ldrh	r3, [r7, #8]
 8000f34:	f24c 12ae 	movw	r2, #49582	; 0xc1ae
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d104      	bne.n	8000f46 <getSync+0x6a>
				pixy.m_cs = false;
 8000f3c:	4b11      	ldr	r3, [pc, #68]	; (8000f84 <getSync+0xa8>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	749a      	strb	r2, [r3, #18]
				return PIXY_RESULT_OK;
 8000f42:	2300      	movs	r3, #0
 8000f44:	e01a      	b.n	8000f7c <getSync+0xa0>
			}
		}
		// If we've read some bytes and no sync, then wait and try again.
		// And do that several more times before we give up.
		// Pixy guarantees to respond within 100us.
		if (i >= 4) {
 8000f46:	7bfb      	ldrb	r3, [r7, #15]
 8000f48:	2b03      	cmp	r3, #3
 8000f4a:	d913      	bls.n	8000f74 <getSync+0x98>
			if (j >= 4) {
 8000f4c:	7bbb      	ldrb	r3, [r7, #14]
 8000f4e:	2b03      	cmp	r3, #3
 8000f50:	d902      	bls.n	8000f58 <getSync+0x7c>
				return PIXY_RESULT_ERROR;
 8000f52:	f04f 33ff 	mov.w	r3, #4294967295
 8000f56:	e011      	b.n	8000f7c <getSync+0xa0>
			}

			for (volatile int i = 0; i < 10; i++) asm(""); // 25 microsecond delay (9.5 => 10)
 8000f58:	2300      	movs	r3, #0
 8000f5a:	603b      	str	r3, [r7, #0]
 8000f5c:	e002      	b.n	8000f64 <getSync+0x88>
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	3301      	adds	r3, #1
 8000f62:	603b      	str	r3, [r7, #0]
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	2b09      	cmp	r3, #9
 8000f68:	ddf9      	ble.n	8000f5e <getSync+0x82>

			j++;
 8000f6a:	7bbb      	ldrb	r3, [r7, #14]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	73bb      	strb	r3, [r7, #14]
			i = 0;
 8000f70:	2300      	movs	r3, #0
 8000f72:	73fb      	strb	r3, [r7, #15]
	for (i = j = 0, cprev = 0; true; i++) {
 8000f74:	7bfb      	ldrb	r3, [r7, #15]
 8000f76:	3301      	adds	r3, #1
 8000f78:	73fb      	strb	r3, [r7, #15]
		res = recv(&c, 1, NULL);
 8000f7a:	e7b8      	b.n	8000eee <getSync+0x12>
		}
	}
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3710      	adds	r7, #16
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	20000200 	.word	0x20000200

08000f88 <recvPacket>:

int16_t recvPacket() {
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
	uint16_t csCalc, csSerial;
	int16_t res;

	res = getSync();
 8000f8e:	f7ff ffa5 	bl	8000edc <getSync>
 8000f92:	4603      	mov	r3, r0
 8000f94:	80fb      	strh	r3, [r7, #6]
	if (res < 0)
 8000f96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	da02      	bge.n	8000fa4 <recvPacket+0x1c>
		return res;
 8000f9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fa2:	e065      	b.n	8001070 <recvPacket+0xe8>

	if (pixy.m_cs) {
 8000fa4:	4b34      	ldr	r3, [pc, #208]	; (8001078 <recvPacket+0xf0>)
 8000fa6:	7c9b      	ldrb	r3, [r3, #18]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d035      	beq.n	8001018 <recvPacket+0x90>
		res = recv(pixy.m_buf, 4, NULL);
 8000fac:	4b32      	ldr	r3, [pc, #200]	; (8001078 <recvPacket+0xf0>)
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	2104      	movs	r1, #4
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f000 f951 	bl	800125c <recv>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	80fb      	strh	r3, [r7, #6]
		if (res < 0)
 8000fbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	da02      	bge.n	8000fcc <recvPacket+0x44>
			return res;
 8000fc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fca:	e051      	b.n	8001070 <recvPacket+0xe8>

		pixy.m_type = pixy.m_buf[0];
 8000fcc:	4b2a      	ldr	r3, [pc, #168]	; (8001078 <recvPacket+0xf0>)
 8000fce:	689b      	ldr	r3, [r3, #8]
 8000fd0:	781a      	ldrb	r2, [r3, #0]
 8000fd2:	4b29      	ldr	r3, [pc, #164]	; (8001078 <recvPacket+0xf0>)
 8000fd4:	741a      	strb	r2, [r3, #16]
		pixy.m_length = pixy.m_buf[1];
 8000fd6:	4b28      	ldr	r3, [pc, #160]	; (8001078 <recvPacket+0xf0>)
 8000fd8:	689b      	ldr	r3, [r3, #8]
 8000fda:	785a      	ldrb	r2, [r3, #1]
 8000fdc:	4b26      	ldr	r3, [pc, #152]	; (8001078 <recvPacket+0xf0>)
 8000fde:	745a      	strb	r2, [r3, #17]

		csSerial = *(uint16_t*) &(pixy.m_buf[2]);
 8000fe0:	4b25      	ldr	r3, [pc, #148]	; (8001078 <recvPacket+0xf0>)
 8000fe2:	689b      	ldr	r3, [r3, #8]
 8000fe4:	885b      	ldrh	r3, [r3, #2]
 8000fe6:	80bb      	strh	r3, [r7, #4]

		res = recv(pixy.m_buf, pixy.m_length, &csCalc);
 8000fe8:	4b23      	ldr	r3, [pc, #140]	; (8001078 <recvPacket+0xf0>)
 8000fea:	689b      	ldr	r3, [r3, #8]
 8000fec:	4a22      	ldr	r2, [pc, #136]	; (8001078 <recvPacket+0xf0>)
 8000fee:	7c51      	ldrb	r1, [r2, #17]
 8000ff0:	1cba      	adds	r2, r7, #2
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f000 f932 	bl	800125c <recv>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	80fb      	strh	r3, [r7, #6]
		if (res < 0)
 8000ffc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001000:	2b00      	cmp	r3, #0
 8001002:	da02      	bge.n	800100a <recvPacket+0x82>
			return res;
 8001004:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001008:	e032      	b.n	8001070 <recvPacket+0xe8>

		if (csSerial != csCalc) {
 800100a:	887b      	ldrh	r3, [r7, #2]
 800100c:	88ba      	ldrh	r2, [r7, #4]
 800100e:	429a      	cmp	r2, r3
 8001010:	d02d      	beq.n	800106e <recvPacket+0xe6>
			return PIXY_RESULT_CHECKSUM_ERROR;
 8001012:	f06f 0302 	mvn.w	r3, #2
 8001016:	e02b      	b.n	8001070 <recvPacket+0xe8>
		}
	} else {
		res = recv(pixy.m_buf, 2, NULL);
 8001018:	4b17      	ldr	r3, [pc, #92]	; (8001078 <recvPacket+0xf0>)
 800101a:	689b      	ldr	r3, [r3, #8]
 800101c:	2200      	movs	r2, #0
 800101e:	2102      	movs	r1, #2
 8001020:	4618      	mov	r0, r3
 8001022:	f000 f91b 	bl	800125c <recv>
 8001026:	4603      	mov	r3, r0
 8001028:	80fb      	strh	r3, [r7, #6]
		if (res < 0)
 800102a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800102e:	2b00      	cmp	r3, #0
 8001030:	da02      	bge.n	8001038 <recvPacket+0xb0>
			return res;
 8001032:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001036:	e01b      	b.n	8001070 <recvPacket+0xe8>

		pixy.m_type = pixy.m_buf[0];
 8001038:	4b0f      	ldr	r3, [pc, #60]	; (8001078 <recvPacket+0xf0>)
 800103a:	689b      	ldr	r3, [r3, #8]
 800103c:	781a      	ldrb	r2, [r3, #0]
 800103e:	4b0e      	ldr	r3, [pc, #56]	; (8001078 <recvPacket+0xf0>)
 8001040:	741a      	strb	r2, [r3, #16]
		pixy.m_length = pixy.m_buf[1];
 8001042:	4b0d      	ldr	r3, [pc, #52]	; (8001078 <recvPacket+0xf0>)
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	785a      	ldrb	r2, [r3, #1]
 8001048:	4b0b      	ldr	r3, [pc, #44]	; (8001078 <recvPacket+0xf0>)
 800104a:	745a      	strb	r2, [r3, #17]

		res = recv(pixy.m_buf, pixy.m_length, NULL);
 800104c:	4b0a      	ldr	r3, [pc, #40]	; (8001078 <recvPacket+0xf0>)
 800104e:	689b      	ldr	r3, [r3, #8]
 8001050:	4a09      	ldr	r2, [pc, #36]	; (8001078 <recvPacket+0xf0>)
 8001052:	7c51      	ldrb	r1, [r2, #17]
 8001054:	2200      	movs	r2, #0
 8001056:	4618      	mov	r0, r3
 8001058:	f000 f900 	bl	800125c <recv>
 800105c:	4603      	mov	r3, r0
 800105e:	80fb      	strh	r3, [r7, #6]
		if (res < 0)
 8001060:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001064:	2b00      	cmp	r3, #0
 8001066:	da02      	bge.n	800106e <recvPacket+0xe6>
			return res;
 8001068:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800106c:	e000      	b.n	8001070 <recvPacket+0xe8>
	}
	return PIXY_RESULT_OK;
 800106e:	2300      	movs	r3, #0
}
 8001070:	4618      	mov	r0, r3
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	20000200 	.word	0x20000200

0800107c <sendPacket>:

int16_t sendPacket() {
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
	// write header info at beginnig of buffer
	pixy.m_buf[0] = PIXY_NO_CHECKSUM_SYNC & 0xff;
 8001080:	4b10      	ldr	r3, [pc, #64]	; (80010c4 <sendPacket+0x48>)
 8001082:	689b      	ldr	r3, [r3, #8]
 8001084:	22ae      	movs	r2, #174	; 0xae
 8001086:	701a      	strb	r2, [r3, #0]
	pixy.m_buf[1] = PIXY_NO_CHECKSUM_SYNC >> 8;
 8001088:	4b0e      	ldr	r3, [pc, #56]	; (80010c4 <sendPacket+0x48>)
 800108a:	689b      	ldr	r3, [r3, #8]
 800108c:	3301      	adds	r3, #1
 800108e:	22c1      	movs	r2, #193	; 0xc1
 8001090:	701a      	strb	r2, [r3, #0]
	pixy.m_buf[2] = pixy.m_type;
 8001092:	4b0c      	ldr	r3, [pc, #48]	; (80010c4 <sendPacket+0x48>)
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	3302      	adds	r3, #2
 8001098:	4a0a      	ldr	r2, [pc, #40]	; (80010c4 <sendPacket+0x48>)
 800109a:	7c12      	ldrb	r2, [r2, #16]
 800109c:	701a      	strb	r2, [r3, #0]
	pixy.m_buf[3] = pixy.m_length;
 800109e:	4b09      	ldr	r3, [pc, #36]	; (80010c4 <sendPacket+0x48>)
 80010a0:	689b      	ldr	r3, [r3, #8]
 80010a2:	3303      	adds	r3, #3
 80010a4:	4a07      	ldr	r2, [pc, #28]	; (80010c4 <sendPacket+0x48>)
 80010a6:	7c52      	ldrb	r2, [r2, #17]
 80010a8:	701a      	strb	r2, [r3, #0]
	// send whole thing -- header and data in one call
	return send(pixy.m_buf, pixy.m_length + PIXY_SEND_HEADER_SIZE);
 80010aa:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <sendPacket+0x48>)
 80010ac:	689a      	ldr	r2, [r3, #8]
 80010ae:	4b05      	ldr	r3, [pc, #20]	; (80010c4 <sendPacket+0x48>)
 80010b0:	7c5b      	ldrb	r3, [r3, #17]
 80010b2:	3304      	adds	r3, #4
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	4619      	mov	r1, r3
 80010b8:	4610      	mov	r0, r2
 80010ba:	f000 f923 	bl	8001304 <send>
 80010be:	4603      	mov	r3, r0
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	20000200 	.word	0x20000200

080010c8 <getVersion>:

int8_t getVersion() {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
	pixy.m_length = 0;
 80010cc:	4b11      	ldr	r3, [pc, #68]	; (8001114 <getVersion+0x4c>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	745a      	strb	r2, [r3, #17]
	pixy.m_type = PIXY_TYPE_REQUEST_VERSION;
 80010d2:	4b10      	ldr	r3, [pc, #64]	; (8001114 <getVersion+0x4c>)
 80010d4:	220e      	movs	r2, #14
 80010d6:	741a      	strb	r2, [r3, #16]
	sendPacket();
 80010d8:	f7ff ffd0 	bl	800107c <sendPacket>
	if (recvPacket() == 0) {
 80010dc:	f7ff ff54 	bl	8000f88 <recvPacket>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d112      	bne.n	800110c <getVersion+0x44>
		if (pixy.m_type == PIXY_TYPE_RESPONSE_VERSION) {
 80010e6:	4b0b      	ldr	r3, [pc, #44]	; (8001114 <getVersion+0x4c>)
 80010e8:	7c1b      	ldrb	r3, [r3, #16]
 80010ea:	2b0f      	cmp	r3, #15
 80010ec:	d107      	bne.n	80010fe <getVersion+0x36>
			pixy.version = (Version*) pixy.m_buf;
 80010ee:	4b09      	ldr	r3, [pc, #36]	; (8001114 <getVersion+0x4c>)
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	4a08      	ldr	r2, [pc, #32]	; (8001114 <getVersion+0x4c>)
 80010f4:	6013      	str	r3, [r2, #0]
			return pixy.m_length;
 80010f6:	4b07      	ldr	r3, [pc, #28]	; (8001114 <getVersion+0x4c>)
 80010f8:	7c5b      	ldrb	r3, [r3, #17]
 80010fa:	b25b      	sxtb	r3, r3
 80010fc:	e008      	b.n	8001110 <getVersion+0x48>
		} else if (pixy.m_type == PIXY_TYPE_RESPONSE_ERROR)
 80010fe:	4b05      	ldr	r3, [pc, #20]	; (8001114 <getVersion+0x4c>)
 8001100:	7c1b      	ldrb	r3, [r3, #16]
 8001102:	2b03      	cmp	r3, #3
 8001104:	d102      	bne.n	800110c <getVersion+0x44>
			return PIXY_RESULT_BUSY;
 8001106:	f06f 0301 	mvn.w	r3, #1
 800110a:	e001      	b.n	8001110 <getVersion+0x48>
	}
	return PIXY_RESULT_ERROR;  // some kind of bitstream error
 800110c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001110:	4618      	mov	r0, r3
 8001112:	bd80      	pop	{r7, pc}
 8001114:	20000200 	.word	0x20000200

08001118 <getResolution>:

int8_t getResolution() {
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
	pixy.m_length = 1;
 800111c:	4b13      	ldr	r3, [pc, #76]	; (800116c <getResolution+0x54>)
 800111e:	2201      	movs	r2, #1
 8001120:	745a      	strb	r2, [r3, #17]
	pixy.m_bufPayload[0] = 0; // for future types of queries
 8001122:	4b12      	ldr	r3, [pc, #72]	; (800116c <getResolution+0x54>)
 8001124:	68db      	ldr	r3, [r3, #12]
 8001126:	2200      	movs	r2, #0
 8001128:	701a      	strb	r2, [r3, #0]
	pixy.m_type = PIXY_TYPE_REQUEST_RESOLUTION;
 800112a:	4b10      	ldr	r3, [pc, #64]	; (800116c <getResolution+0x54>)
 800112c:	220c      	movs	r2, #12
 800112e:	741a      	strb	r2, [r3, #16]
	sendPacket();
 8001130:	f7ff ffa4 	bl	800107c <sendPacket>
	if (recvPacket() == 0) {
 8001134:	f7ff ff28 	bl	8000f88 <recvPacket>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d112      	bne.n	8001164 <getResolution+0x4c>
		if (pixy.m_type == PIXY_TYPE_RESPONSE_RESOLUTION) {
 800113e:	4b0b      	ldr	r3, [pc, #44]	; (800116c <getResolution+0x54>)
 8001140:	7c1b      	ldrb	r3, [r3, #16]
 8001142:	2b0d      	cmp	r3, #13
 8001144:	d10b      	bne.n	800115e <getResolution+0x46>
			pixy.frameWidth = *(uint16_t*)pixy.m_buf;
 8001146:	4b09      	ldr	r3, [pc, #36]	; (800116c <getResolution+0x54>)
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	881a      	ldrh	r2, [r3, #0]
 800114c:	4b07      	ldr	r3, [pc, #28]	; (800116c <getResolution+0x54>)
 800114e:	809a      	strh	r2, [r3, #4]
			pixy.frameHeight = *(uint16_t*)(pixy.m_buf + sizeof(uint16_t));
 8001150:	4b06      	ldr	r3, [pc, #24]	; (800116c <getResolution+0x54>)
 8001152:	689b      	ldr	r3, [r3, #8]
 8001154:	885a      	ldrh	r2, [r3, #2]
 8001156:	4b05      	ldr	r3, [pc, #20]	; (800116c <getResolution+0x54>)
 8001158:	80da      	strh	r2, [r3, #6]
			return PIXY_RESULT_OK; // success
 800115a:	2300      	movs	r3, #0
 800115c:	e004      	b.n	8001168 <getResolution+0x50>
		} else
			return PIXY_RESULT_ERROR;
 800115e:	f04f 33ff 	mov.w	r3, #4294967295
 8001162:	e001      	b.n	8001168 <getResolution+0x50>
	} else
		return PIXY_RESULT_ERROR;  // some kind of bitstream error
 8001164:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001168:	4618      	mov	r0, r3
 800116a:	bd80      	pop	{r7, pc}
 800116c:	20000200 	.word	0x20000200

08001170 <pixy2_init>:
		// We can give up half a millisecond of latency (worst case)
		for (volatile int i = 0; i < 190; i++) asm("");
	}
}

int8_t pixy2_init(SPI_HandleTypeDef *hspi, GPIO_TypeDef *port, uint16_t pin) {
 8001170:	b580      	push	{r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af00      	add	r7, sp, #0
 8001176:	60f8      	str	r0, [r7, #12]
 8001178:	60b9      	str	r1, [r7, #8]
 800117a:	4613      	mov	r3, r2
 800117c:	80fb      	strh	r3, [r7, #6]
	// allocate buffer space for send/receive
	pixy.m_buf = (uint8_t*) malloc(PIXY_BUFFERSIZE);
 800117e:	f44f 7082 	mov.w	r0, #260	; 0x104
 8001182:	f00a fb49 	bl	800b818 <malloc>
 8001186:	4603      	mov	r3, r0
 8001188:	461a      	mov	r2, r3
 800118a:	4b24      	ldr	r3, [pc, #144]	; (800121c <pixy2_init+0xac>)
 800118c:	609a      	str	r2, [r3, #8]
	// shifted buffer is used for sending, so we have space to write header information
	pixy.m_bufPayload = pixy.m_buf + PIXY_SEND_HEADER_SIZE;
 800118e:	4b23      	ldr	r3, [pc, #140]	; (800121c <pixy2_init+0xac>)
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	3304      	adds	r3, #4
 8001194:	4a21      	ldr	r2, [pc, #132]	; (800121c <pixy2_init+0xac>)
 8001196:	60d3      	str	r3, [r2, #12]
	pixy.frameWidth = pixy.frameHeight = 0;
 8001198:	4b20      	ldr	r3, [pc, #128]	; (800121c <pixy2_init+0xac>)
 800119a:	2200      	movs	r2, #0
 800119c:	80da      	strh	r2, [r3, #6]
 800119e:	4b1f      	ldr	r3, [pc, #124]	; (800121c <pixy2_init+0xac>)
 80011a0:	88da      	ldrh	r2, [r3, #6]
 80011a2:	4b1e      	ldr	r3, [pc, #120]	; (800121c <pixy2_init+0xac>)
 80011a4:	809a      	strh	r2, [r3, #4]
	pixy.version=NULL;
 80011a6:	4b1d      	ldr	r3, [pc, #116]	; (800121c <pixy2_init+0xac>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
	pixy.m_cs = false;
 80011ac:	4b1b      	ldr	r3, [pc, #108]	; (800121c <pixy2_init+0xac>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	749a      	strb	r2, [r3, #18]
	pixy.curr_blocks = NULL;
 80011b2:	4b1a      	ldr	r3, [pc, #104]	; (800121c <pixy2_init+0xac>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	615a      	str	r2, [r3, #20]
	pixy.numBlocks = 0;
 80011b8:	4b18      	ldr	r3, [pc, #96]	; (800121c <pixy2_init+0xac>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	761a      	strb	r2, [r3, #24]

	int8_t res;

	res = open(hspi, port, pin);
 80011be:	88fb      	ldrh	r3, [r7, #6]
 80011c0:	461a      	mov	r2, r3
 80011c2:	68b9      	ldr	r1, [r7, #8]
 80011c4:	68f8      	ldr	r0, [r7, #12]
 80011c6:	f000 f82b 	bl	8001220 <open>
 80011ca:	4603      	mov	r3, r0
 80011cc:	75fb      	strb	r3, [r7, #23]
	if (res < 0)
 80011ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	da02      	bge.n	80011dc <pixy2_init+0x6c>
		return res;
 80011d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80011da:	e01b      	b.n	8001214 <pixy2_init+0xa4>

	// wait for pixy to be ready -- that is, Pixy takes a second or 2 boot up
	// getVersion is an effective "ping".  We timeout after 5s.

	for (int millis = HAL_GetTick(); HAL_GetTick() - millis < 5000;) {
 80011dc:	f002 fbc4 	bl	8003968 <HAL_GetTick>
 80011e0:	4603      	mov	r3, r0
 80011e2:	613b      	str	r3, [r7, #16]
 80011e4:	e00b      	b.n	80011fe <pixy2_init+0x8e>
		if (getVersion() >= 0) { // successful version get -> pixy is ready
 80011e6:	f7ff ff6f 	bl	80010c8 <getVersion>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	db03      	blt.n	80011f8 <pixy2_init+0x88>
			getResolution(); // get resolution so we have it
 80011f0:	f7ff ff92 	bl	8001118 <getResolution>
			return PIXY_RESULT_OK;
 80011f4:	2300      	movs	r3, #0
 80011f6:	e00d      	b.n	8001214 <pixy2_init+0xa4>
		}
		HAL_Delay(5); // might have to change
 80011f8:	2005      	movs	r0, #5
 80011fa:	f002 fbc1 	bl	8003980 <HAL_Delay>
	for (int millis = HAL_GetTick(); HAL_GetTick() - millis < 5000;) {
 80011fe:	f002 fbb3 	bl	8003968 <HAL_GetTick>
 8001202:	4602      	mov	r2, r0
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	1ad3      	subs	r3, r2, r3
 8001208:	f241 3287 	movw	r2, #4999	; 0x1387
 800120c:	4293      	cmp	r3, r2
 800120e:	d9ea      	bls.n	80011e6 <pixy2_init+0x76>
	}
	// timeout
	return PIXY_RESULT_TIMEOUT;
 8001210:	f06f 0303 	mvn.w	r3, #3
}
 8001214:	4618      	mov	r0, r3
 8001216:	3718      	adds	r7, #24
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	20000200 	.word	0x20000200

08001220 <open>:

SPI_HandleTypeDef* SPI_obj;
GPIO_TypeDef* GPIO_ss;
uint16_t GPIO_ss_pin;

int8_t open(SPI_HandleTypeDef* hspi,GPIO_TypeDef* port,uint16_t pin) {
 8001220:	b480      	push	{r7}
 8001222:	b085      	sub	sp, #20
 8001224:	af00      	add	r7, sp, #0
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	4613      	mov	r3, r2
 800122c:	80fb      	strh	r3, [r7, #6]
	GPIO_ss_pin = pin;
 800122e:	4a08      	ldr	r2, [pc, #32]	; (8001250 <open+0x30>)
 8001230:	88fb      	ldrh	r3, [r7, #6]
 8001232:	8013      	strh	r3, [r2, #0]
	GPIO_ss = port;
 8001234:	4a07      	ldr	r2, [pc, #28]	; (8001254 <open+0x34>)
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	6013      	str	r3, [r2, #0]
	SPI_obj = hspi;
 800123a:	4a07      	ldr	r2, [pc, #28]	; (8001258 <open+0x38>)
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	6013      	str	r3, [r2, #0]
	return 0;
 8001240:	2300      	movs	r3, #0
}
 8001242:	4618      	mov	r0, r3
 8001244:	3714      	adds	r7, #20
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	20000224 	.word	0x20000224
 8001254:	20000220 	.word	0x20000220
 8001258:	2000021c 	.word	0x2000021c

0800125c <recv>:

int16_t recv(uint8_t *buf, uint8_t len, uint16_t *checkSumCalculation) { // based on arduino implementation
 800125c:	b580      	push	{r7, lr}
 800125e:	b086      	sub	sp, #24
 8001260:	af00      	add	r7, sp, #0
 8001262:	60f8      	str	r0, [r7, #12]
 8001264:	460b      	mov	r3, r1
 8001266:	607a      	str	r2, [r7, #4]
 8001268:	72fb      	strb	r3, [r7, #11]
	uint8_t i = 0;
 800126a:	2300      	movs	r3, #0
 800126c:	75fb      	strb	r3, [r7, #23]
	if (checkSumCalculation)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d002      	beq.n	800127a <recv+0x1e>
		*checkSumCalculation = 0;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2200      	movs	r2, #0
 8001278:	801a      	strh	r2, [r3, #0]
	
	HAL_GPIO_WritePin(GPIO_ss, GPIO_ss_pin, GPIO_PIN_RESET);
 800127a:	4b1f      	ldr	r3, [pc, #124]	; (80012f8 <recv+0x9c>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a1f      	ldr	r2, [pc, #124]	; (80012fc <recv+0xa0>)
 8001280:	8811      	ldrh	r1, [r2, #0]
 8001282:	2200      	movs	r2, #0
 8001284:	4618      	mov	r0, r3
 8001286:	f003 fe59 	bl	8004f3c <HAL_GPIO_WritePin>

	for (i = 0; i < len; ++i) {
 800128a:	2300      	movs	r3, #0
 800128c:	75fb      	strb	r3, [r7, #23]
 800128e:	e020      	b.n	80012d2 <recv+0x76>
		uint8_t data = 0;
 8001290:	2300      	movs	r3, #0
 8001292:	75bb      	strb	r3, [r7, #22]
		HAL_SPI_Receive(SPI_obj, &data, 1, 5000);
 8001294:	4b1a      	ldr	r3, [pc, #104]	; (8001300 <recv+0xa4>)
 8001296:	6818      	ldr	r0, [r3, #0]
 8001298:	f107 0116 	add.w	r1, r7, #22
 800129c:	f241 3388 	movw	r3, #5000	; 0x1388
 80012a0:	2201      	movs	r2, #1
 80012a2:	f007 f8af 	bl	8008404 <HAL_SPI_Receive>
		buf[i] = data;
 80012a6:	7dfb      	ldrb	r3, [r7, #23]
 80012a8:	68fa      	ldr	r2, [r7, #12]
 80012aa:	4413      	add	r3, r2
 80012ac:	7dba      	ldrb	r2, [r7, #22]
 80012ae:	701a      	strb	r2, [r3, #0]
		if (checkSumCalculation)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d00a      	beq.n	80012cc <recv+0x70>
			*checkSumCalculation += buf[i];
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	881a      	ldrh	r2, [r3, #0]
 80012ba:	7dfb      	ldrb	r3, [r7, #23]
 80012bc:	68f9      	ldr	r1, [r7, #12]
 80012be:	440b      	add	r3, r1
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	b29b      	uxth	r3, r3
 80012c4:	4413      	add	r3, r2
 80012c6:	b29a      	uxth	r2, r3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < len; ++i) {
 80012cc:	7dfb      	ldrb	r3, [r7, #23]
 80012ce:	3301      	adds	r3, #1
 80012d0:	75fb      	strb	r3, [r7, #23]
 80012d2:	7dfa      	ldrb	r2, [r7, #23]
 80012d4:	7afb      	ldrb	r3, [r7, #11]
 80012d6:	429a      	cmp	r2, r3
 80012d8:	d3da      	bcc.n	8001290 <recv+0x34>
	}

	HAL_GPIO_WritePin(GPIO_ss, GPIO_ss_pin, GPIO_PIN_SET);
 80012da:	4b07      	ldr	r3, [pc, #28]	; (80012f8 <recv+0x9c>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a07      	ldr	r2, [pc, #28]	; (80012fc <recv+0xa0>)
 80012e0:	8811      	ldrh	r1, [r2, #0]
 80012e2:	2201      	movs	r2, #1
 80012e4:	4618      	mov	r0, r3
 80012e6:	f003 fe29 	bl	8004f3c <HAL_GPIO_WritePin>
	return len;
 80012ea:	7afb      	ldrb	r3, [r7, #11]
 80012ec:	b21b      	sxth	r3, r3
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3718      	adds	r7, #24
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	20000220 	.word	0x20000220
 80012fc:	20000224 	.word	0x20000224
 8001300:	2000021c 	.word	0x2000021c

08001304 <send>:

int16_t send(uint8_t *buf, uint8_t len) { // based on arduino implementation
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	460b      	mov	r3, r1
 800130e:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 0;
 8001310:	2300      	movs	r3, #0
 8001312:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIO_ss, GPIO_ss_pin, GPIO_PIN_RESET);
 8001314:	4b14      	ldr	r3, [pc, #80]	; (8001368 <send+0x64>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a14      	ldr	r2, [pc, #80]	; (800136c <send+0x68>)
 800131a:	8811      	ldrh	r1, [r2, #0]
 800131c:	2200      	movs	r2, #0
 800131e:	4618      	mov	r0, r3
 8001320:	f003 fe0c 	bl	8004f3c <HAL_GPIO_WritePin>


	for (i = 0; i < len; ++i) {
 8001324:	2300      	movs	r3, #0
 8001326:	73fb      	strb	r3, [r7, #15]
 8001328:	e00c      	b.n	8001344 <send+0x40>
		HAL_SPI_Transmit(SPI_obj, (uint8_t *) (buf + i), 1, 5000);
 800132a:	4b11      	ldr	r3, [pc, #68]	; (8001370 <send+0x6c>)
 800132c:	6818      	ldr	r0, [r3, #0]
 800132e:	7bfb      	ldrb	r3, [r7, #15]
 8001330:	687a      	ldr	r2, [r7, #4]
 8001332:	18d1      	adds	r1, r2, r3
 8001334:	f241 3388 	movw	r3, #5000	; 0x1388
 8001338:	2201      	movs	r2, #1
 800133a:	f006 fef5 	bl	8008128 <HAL_SPI_Transmit>
	for (i = 0; i < len; ++i) {
 800133e:	7bfb      	ldrb	r3, [r7, #15]
 8001340:	3301      	adds	r3, #1
 8001342:	73fb      	strb	r3, [r7, #15]
 8001344:	7bfa      	ldrb	r2, [r7, #15]
 8001346:	78fb      	ldrb	r3, [r7, #3]
 8001348:	429a      	cmp	r2, r3
 800134a:	d3ee      	bcc.n	800132a <send+0x26>
	}


	HAL_GPIO_WritePin(GPIO_ss, GPIO_ss_pin, GPIO_PIN_SET);
 800134c:	4b06      	ldr	r3, [pc, #24]	; (8001368 <send+0x64>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a06      	ldr	r2, [pc, #24]	; (800136c <send+0x68>)
 8001352:	8811      	ldrh	r1, [r2, #0]
 8001354:	2201      	movs	r2, #1
 8001356:	4618      	mov	r0, r3
 8001358:	f003 fdf0 	bl	8004f3c <HAL_GPIO_WritePin>

	return len;
 800135c:	78fb      	ldrb	r3, [r7, #3]
 800135e:	b21b      	sxth	r3, r3
}
 8001360:	4618      	mov	r0, r3
 8001362:	3710      	adds	r7, #16
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	20000220 	.word	0x20000220
 800136c:	20000224 	.word	0x20000224
 8001370:	2000021c 	.word	0x2000021c

08001374 <state_update>:
uint8_t reset = 0; // reset button

// testing
uint32_t count = 0;

void state_update() {
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0

	// All the buttons should be rising-edge triggered


	// read reset button, and set reset bit to 1 only if reset button is pressed
	if (reset) {
 800137a:	4b9b      	ldr	r3, [pc, #620]	; (80015e8 <state_update+0x274>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d021      	beq.n	80013c6 <state_update+0x52>
		on_off = 0;
 8001382:	4b9a      	ldr	r3, [pc, #616]	; (80015ec <state_update+0x278>)
 8001384:	2200      	movs	r2, #0
 8001386:	701a      	strb	r2, [r3, #0]
		ball_locked = 0;
 8001388:	4b99      	ldr	r3, [pc, #612]	; (80015f0 <state_update+0x27c>)
 800138a:	2200      	movs	r2, #0
 800138c:	701a      	strb	r2, [r3, #0]
		ball_not_found = 0;
 800138e:	4b99      	ldr	r3, [pc, #612]	; (80015f4 <state_update+0x280>)
 8001390:	2200      	movs	r2, #0
 8001392:	701a      	strb	r2, [r3, #0]
		ball_count = 0;
 8001394:	4b98      	ldr	r3, [pc, #608]	; (80015f8 <state_update+0x284>)
 8001396:	2200      	movs	r2, #0
 8001398:	701a      	strb	r2, [r3, #0]
		ball_collected = 0;
 800139a:	4b98      	ldr	r3, [pc, #608]	; (80015fc <state_update+0x288>)
 800139c:	2200      	movs	r2, #0
 800139e:	701a      	strb	r2, [r3, #0]
		station_arrived = 0;
 80013a0:	4b97      	ldr	r3, [pc, #604]	; (8001600 <state_update+0x28c>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	701a      	strb	r2, [r3, #0]
		avoid_finished = 0;
 80013a6:	4b97      	ldr	r3, [pc, #604]	; (8001604 <state_update+0x290>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	701a      	strb	r2, [r3, #0]
		avoid_begin = 0;
 80013ac:	4b96      	ldr	r3, [pc, #600]	; (8001608 <state_update+0x294>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	701a      	strb	r2, [r3, #0]
		reset = 0;
 80013b2:	4b8d      	ldr	r3, [pc, #564]	; (80015e8 <state_update+0x274>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	701a      	strb	r2, [r3, #0]
		state = INIT;
 80013b8:	4b94      	ldr	r3, [pc, #592]	; (800160c <state_update+0x298>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	701a      	strb	r2, [r3, #0]
		prev_state = state;
 80013be:	4b93      	ldr	r3, [pc, #588]	; (800160c <state_update+0x298>)
 80013c0:	781a      	ldrb	r2, [r3, #0]
 80013c2:	4b93      	ldr	r3, [pc, #588]	; (8001610 <state_update+0x29c>)
 80013c4:	701a      	strb	r2, [r3, #0]
	} else {
		// reading peripheral input, and clear register immediately
	}

	// disable interrupt ultrasonic, ir
	HAL_NVIC_DisableIRQ(TIM3_IRQn);
 80013c6:	201d      	movs	r0, #29
 80013c8:	f003 fc0b 	bl	8004be2 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(TIM1_CC_IRQn);
 80013cc:	201b      	movs	r0, #27
 80013ce:	f003 fc08 	bl	8004be2 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(TIM5_IRQn);
 80013d2:	2032      	movs	r0, #50	; 0x32
 80013d4:	f003 fc05 	bl	8004be2 <HAL_NVIC_DisableIRQ>

	enum State next_state = state;
 80013d8:	4b8c      	ldr	r3, [pc, #560]	; (800160c <state_update+0x298>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	71fb      	strb	r3, [r7, #7]

	switch (state) {
 80013de:	4b8b      	ldr	r3, [pc, #556]	; (800160c <state_update+0x298>)
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	2b04      	cmp	r3, #4
 80013e4:	f200 80b1 	bhi.w	800154a <state_update+0x1d6>
 80013e8:	a201      	add	r2, pc, #4	; (adr r2, 80013f0 <state_update+0x7c>)
 80013ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013ee:	bf00      	nop
 80013f0:	08001405 	.word	0x08001405
 80013f4:	0800141b 	.word	0x0800141b
 80013f8:	08001457 	.word	0x08001457
 80013fc:	080014c3 	.word	0x080014c3
 8001400:	080014eb 	.word	0x080014eb
	case INIT:
		if (on_off == 1) {
 8001404:	4b79      	ldr	r3, [pc, #484]	; (80015ec <state_update+0x278>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	2b01      	cmp	r3, #1
 800140a:	f040 8095 	bne.w	8001538 <state_update+0x1c4>
			on_off = 0;
 800140e:	4b77      	ldr	r3, [pc, #476]	; (80015ec <state_update+0x278>)
 8001410:	2200      	movs	r2, #0
 8001412:	701a      	strb	r2, [r3, #0]
			next_state = SEARCH;
 8001414:	2301      	movs	r3, #1
 8001416:	71fb      	strb	r3, [r7, #7]
		}
		break;
 8001418:	e08e      	b.n	8001538 <state_update+0x1c4>
	case SEARCH:
		if (on_off) {
 800141a:	4b74      	ldr	r3, [pc, #464]	; (80015ec <state_update+0x278>)
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d005      	beq.n	800142e <state_update+0xba>
			on_off = 0;
 8001422:	4b72      	ldr	r3, [pc, #456]	; (80015ec <state_update+0x278>)
 8001424:	2200      	movs	r2, #0
 8001426:	701a      	strb	r2, [r3, #0]
			next_state = RETURN;
 8001428:	2303      	movs	r3, #3
 800142a:	71fb      	strb	r3, [r7, #7]
			next_state = COLLECT;
		} else if (ball_not_found) {
			ball_not_found = 0;
			next_state = RETURN;
		}
		break;
 800142c:	e086      	b.n	800153c <state_update+0x1c8>
		} else if (ball_locked) {
 800142e:	4b70      	ldr	r3, [pc, #448]	; (80015f0 <state_update+0x27c>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d005      	beq.n	8001442 <state_update+0xce>
			ball_locked = 0;
 8001436:	4b6e      	ldr	r3, [pc, #440]	; (80015f0 <state_update+0x27c>)
 8001438:	2200      	movs	r2, #0
 800143a:	701a      	strb	r2, [r3, #0]
			next_state = COLLECT;
 800143c:	2302      	movs	r3, #2
 800143e:	71fb      	strb	r3, [r7, #7]
		break;
 8001440:	e07c      	b.n	800153c <state_update+0x1c8>
		} else if (ball_not_found) {
 8001442:	4b6c      	ldr	r3, [pc, #432]	; (80015f4 <state_update+0x280>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d078      	beq.n	800153c <state_update+0x1c8>
			ball_not_found = 0;
 800144a:	4b6a      	ldr	r3, [pc, #424]	; (80015f4 <state_update+0x280>)
 800144c:	2200      	movs	r2, #0
 800144e:	701a      	strb	r2, [r3, #0]
			next_state = RETURN;
 8001450:	2303      	movs	r3, #3
 8001452:	71fb      	strb	r3, [r7, #7]
		break;
 8001454:	e072      	b.n	800153c <state_update+0x1c8>
	case COLLECT: {
		printf("Collect: mode enter\n");
 8001456:	486f      	ldr	r0, [pc, #444]	; (8001614 <state_update+0x2a0>)
 8001458:	f00a ffbe 	bl	800c3d8 <puts>
		uint32_t local_count;
		local_count = count;
 800145c:	4b6e      	ldr	r3, [pc, #440]	; (8001618 <state_update+0x2a4>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	603b      	str	r3, [r7, #0]

		if (on_off) {
 8001462:	4b62      	ldr	r3, [pc, #392]	; (80015ec <state_update+0x278>)
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d005      	beq.n	8001476 <state_update+0x102>
			on_off = 0;
 800146a:	4b60      	ldr	r3, [pc, #384]	; (80015ec <state_update+0x278>)
 800146c:	2200      	movs	r2, #0
 800146e:	701a      	strb	r2, [r3, #0]
			next_state = RETURN;
 8001470:	2303      	movs	r3, #3
 8001472:	71fb      	strb	r3, [r7, #7]
			} else {
				next_state = RETURN;
			}
			ball_collected = 0; // clear
		}
		break;
 8001474:	e064      	b.n	8001540 <state_update+0x1cc>
		} else if (ball_collected) {
 8001476:	4b61      	ldr	r3, [pc, #388]	; (80015fc <state_update+0x288>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d060      	beq.n	8001540 <state_update+0x1cc>
			__HAL_TIM_CLEAR_FLAG(&htim5, TIM_SR_UIF);
 800147e:	4b67      	ldr	r3, [pc, #412]	; (800161c <state_update+0x2a8>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f06f 0201 	mvn.w	r2, #1
 8001486:	611a      	str	r2, [r3, #16]
			TIM5->ARR = 100;
 8001488:	4b65      	ldr	r3, [pc, #404]	; (8001620 <state_update+0x2ac>)
 800148a:	2264      	movs	r2, #100	; 0x64
 800148c:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM5->CNT = 0;
 800148e:	4b64      	ldr	r3, [pc, #400]	; (8001620 <state_update+0x2ac>)
 8001490:	2200      	movs	r2, #0
 8001492:	625a      	str	r2, [r3, #36]	; 0x24
			HAL_TIM_Base_Start_IT(&htim5);
 8001494:	4861      	ldr	r0, [pc, #388]	; (800161c <state_update+0x2a8>)
 8001496:	f007 fd0d 	bl	8008eb4 <HAL_TIM_Base_Start_IT>
			HAL_NVIC_EnableIRQ(TIM5_IRQn); // speaker
 800149a:	2032      	movs	r0, #50	; 0x32
 800149c:	f003 fb93 	bl	8004bc6 <HAL_NVIC_EnableIRQ>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7,  1);
 80014a0:	2201      	movs	r2, #1
 80014a2:	2180      	movs	r1, #128	; 0x80
 80014a4:	485f      	ldr	r0, [pc, #380]	; (8001624 <state_update+0x2b0>)
 80014a6:	f003 fd49 	bl	8004f3c <HAL_GPIO_WritePin>
			printf("Collect: Ball_collected, ball_count: %d\n", ball_count);
 80014aa:	4b53      	ldr	r3, [pc, #332]	; (80015f8 <state_update+0x284>)
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	4619      	mov	r1, r3
 80014b0:	485d      	ldr	r0, [pc, #372]	; (8001628 <state_update+0x2b4>)
 80014b2:	f00a ff0b 	bl	800c2cc <iprintf>
				next_state = SEARCH;
 80014b6:	2301      	movs	r3, #1
 80014b8:	71fb      	strb	r3, [r7, #7]
			ball_collected = 0; // clear
 80014ba:	4b50      	ldr	r3, [pc, #320]	; (80015fc <state_update+0x288>)
 80014bc:	2200      	movs	r2, #0
 80014be:	701a      	strb	r2, [r3, #0]
		break;
 80014c0:	e03e      	b.n	8001540 <state_update+0x1cc>
		}
	case RETURN:
		if (on_off) {
 80014c2:	4b4a      	ldr	r3, [pc, #296]	; (80015ec <state_update+0x278>)
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d002      	beq.n	80014d0 <state_update+0x15c>
			on_off = 0;
 80014ca:	4b48      	ldr	r3, [pc, #288]	; (80015ec <state_update+0x278>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	701a      	strb	r2, [r3, #0]
		}

		if (station_arrived) {
 80014d0:	4b4b      	ldr	r3, [pc, #300]	; (8001600 <state_update+0x28c>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d035      	beq.n	8001544 <state_update+0x1d0>
			station_arrived = 0;
 80014d8:	4b49      	ldr	r3, [pc, #292]	; (8001600 <state_update+0x28c>)
 80014da:	2200      	movs	r2, #0
 80014dc:	701a      	strb	r2, [r3, #0]
			reset = 1;
 80014de:	4b42      	ldr	r3, [pc, #264]	; (80015e8 <state_update+0x274>)
 80014e0:	2201      	movs	r2, #1
 80014e2:	701a      	strb	r2, [r3, #0]
			next_state = INIT;
 80014e4:	2300      	movs	r3, #0
 80014e6:	71fb      	strb	r3, [r7, #7]
		}

		break;
 80014e8:	e02c      	b.n	8001544 <state_update+0x1d0>
	case AVOID_COLLISION:{
		// only interrupt can cause the robot to enter this state
		// only after certain conditions are met can the robot leave this state
    
		if (on_off) {
 80014ea:	4b40      	ldr	r3, [pc, #256]	; (80015ec <state_update+0x278>)
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d005      	beq.n	80014fe <state_update+0x18a>
			on_off = 0;
 80014f2:	4b3e      	ldr	r3, [pc, #248]	; (80015ec <state_update+0x278>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	701a      	strb	r2, [r3, #0]
			prev_state = RETURN;
 80014f8:	4b45      	ldr	r3, [pc, #276]	; (8001610 <state_update+0x29c>)
 80014fa:	2203      	movs	r2, #3
 80014fc:	701a      	strb	r2, [r3, #0]
		}

		uint8_t local_avoid_finished = avoid_finished;
 80014fe:	4b41      	ldr	r3, [pc, #260]	; (8001604 <state_update+0x290>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	71bb      	strb	r3, [r7, #6]

		if (avoid_finished) {
 8001504:	4b3f      	ldr	r3, [pc, #252]	; (8001604 <state_update+0x290>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d01d      	beq.n	8001548 <state_update+0x1d4>
			avoid_begin = 0;
 800150c:	4b3e      	ldr	r3, [pc, #248]	; (8001608 <state_update+0x294>)
 800150e:	2200      	movs	r2, #0
 8001510:	701a      	strb	r2, [r3, #0]
			avoid_finished = 0;
 8001512:	4b3c      	ldr	r3, [pc, #240]	; (8001604 <state_update+0x290>)
 8001514:	2200      	movs	r2, #0
 8001516:	701a      	strb	r2, [r3, #0]

			HAL_TIM_Base_Stop_IT(&htim5);
 8001518:	4840      	ldr	r0, [pc, #256]	; (800161c <state_update+0x2a8>)
 800151a:	f007 fd3b 	bl	8008f94 <HAL_TIM_Base_Stop_IT>

			next_state = prev_state;
 800151e:	4b3c      	ldr	r3, [pc, #240]	; (8001610 <state_update+0x29c>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	71fb      	strb	r3, [r7, #7]

			if (on_off) {
 8001524:	4b31      	ldr	r3, [pc, #196]	; (80015ec <state_update+0x278>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d00d      	beq.n	8001548 <state_update+0x1d4>
				on_off = 0;
 800152c:	4b2f      	ldr	r3, [pc, #188]	; (80015ec <state_update+0x278>)
 800152e:	2200      	movs	r2, #0
 8001530:	701a      	strb	r2, [r3, #0]
				next_state = RETURN;
 8001532:	2303      	movs	r3, #3
 8001534:	71fb      	strb	r3, [r7, #7]
			}
		}
		break;
 8001536:	e007      	b.n	8001548 <state_update+0x1d4>
		break;
 8001538:	bf00      	nop
 800153a:	e006      	b.n	800154a <state_update+0x1d6>
		break;
 800153c:	bf00      	nop
 800153e:	e004      	b.n	800154a <state_update+0x1d6>
		break;
 8001540:	bf00      	nop
 8001542:	e002      	b.n	800154a <state_update+0x1d6>
		break;
 8001544:	bf00      	nop
 8001546:	e000      	b.n	800154a <state_update+0x1d6>
		break;
 8001548:	bf00      	nop
		}
	}

	state = next_state;
 800154a:	4a30      	ldr	r2, [pc, #192]	; (800160c <state_update+0x298>)
 800154c:	79fb      	ldrb	r3, [r7, #7]
 800154e:	7013      	strb	r3, [r2, #0]
	if (state != AVOID_COLLISION) {
 8001550:	4b2e      	ldr	r3, [pc, #184]	; (800160c <state_update+0x298>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	2b04      	cmp	r3, #4
 8001556:	d003      	beq.n	8001560 <state_update+0x1ec>
		prev_state = state;
 8001558:	4b2c      	ldr	r3, [pc, #176]	; (800160c <state_update+0x298>)
 800155a:	781a      	ldrb	r2, [r3, #0]
 800155c:	4b2c      	ldr	r3, [pc, #176]	; (8001610 <state_update+0x29c>)
 800155e:	701a      	strb	r2, [r3, #0]
	}

	// Testing arg begin
	state = COLLECT;
 8001560:	4b2a      	ldr	r3, [pc, #168]	; (800160c <state_update+0x298>)
 8001562:	2202      	movs	r2, #2
 8001564:	701a      	strb	r2, [r3, #0]
	if (state != AVOID_COLLISION) {
 8001566:	4b29      	ldr	r3, [pc, #164]	; (800160c <state_update+0x298>)
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	2b04      	cmp	r3, #4
 800156c:	d003      	beq.n	8001576 <state_update+0x202>
		prev_state = state;
 800156e:	4b27      	ldr	r3, [pc, #156]	; (800160c <state_update+0x298>)
 8001570:	781a      	ldrb	r2, [r3, #0]
 8001572:	4b27      	ldr	r3, [pc, #156]	; (8001610 <state_update+0x29c>)
 8001574:	701a      	strb	r2, [r3, #0]
	}
	// Testing arg end


	// enable interrupt
	if (state == COLLECT) {
 8001576:	4b25      	ldr	r3, [pc, #148]	; (800160c <state_update+0x298>)
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	2b02      	cmp	r3, #2
 800157c:	d103      	bne.n	8001586 <state_update+0x212>
		HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800157e:	201d      	movs	r0, #29
 8001580:	f003 fb21 	bl	8004bc6 <HAL_NVIC_EnableIRQ>
			printf("Avoid_Collision: timer begin\n");
			HAL_TIM_Base_Start_IT(&htim5);
		}
		HAL_NVIC_EnableIRQ(TIM5_IRQn);
	}
}
 8001584:	e02b      	b.n	80015de <state_update+0x26a>
	} else if (state == RETURN || state == SEARCH) {
 8001586:	4b21      	ldr	r3, [pc, #132]	; (800160c <state_update+0x298>)
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	2b03      	cmp	r3, #3
 800158c:	d003      	beq.n	8001596 <state_update+0x222>
 800158e:	4b1f      	ldr	r3, [pc, #124]	; (800160c <state_update+0x298>)
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	2b01      	cmp	r3, #1
 8001594:	d103      	bne.n	800159e <state_update+0x22a>
		HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001596:	201b      	movs	r0, #27
 8001598:	f003 fb15 	bl	8004bc6 <HAL_NVIC_EnableIRQ>
}
 800159c:	e01f      	b.n	80015de <state_update+0x26a>
	} else if (state == AVOID_COLLISION) {
 800159e:	4b1b      	ldr	r3, [pc, #108]	; (800160c <state_update+0x298>)
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	2b04      	cmp	r3, #4
 80015a4:	d11b      	bne.n	80015de <state_update+0x26a>
		if (avoid_begin == 0) {
 80015a6:	4b18      	ldr	r3, [pc, #96]	; (8001608 <state_update+0x294>)
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d114      	bne.n	80015d8 <state_update+0x264>
			__HAL_TIM_CLEAR_FLAG(&htim5, TIM_SR_UIF);
 80015ae:	4b1b      	ldr	r3, [pc, #108]	; (800161c <state_update+0x2a8>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f06f 0201 	mvn.w	r2, #1
 80015b6:	611a      	str	r2, [r3, #16]
			avoid_begin = 1;
 80015b8:	4b13      	ldr	r3, [pc, #76]	; (8001608 <state_update+0x294>)
 80015ba:	2201      	movs	r2, #1
 80015bc:	701a      	strb	r2, [r3, #0]
			TIM5->ARR = 5000;
 80015be:	4b18      	ldr	r3, [pc, #96]	; (8001620 <state_update+0x2ac>)
 80015c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80015c4:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM5->CNT = 0;
 80015c6:	4b16      	ldr	r3, [pc, #88]	; (8001620 <state_update+0x2ac>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	625a      	str	r2, [r3, #36]	; 0x24
			printf("Avoid_Collision: timer begin\n");
 80015cc:	4817      	ldr	r0, [pc, #92]	; (800162c <state_update+0x2b8>)
 80015ce:	f00a ff03 	bl	800c3d8 <puts>
			HAL_TIM_Base_Start_IT(&htim5);
 80015d2:	4812      	ldr	r0, [pc, #72]	; (800161c <state_update+0x2a8>)
 80015d4:	f007 fc6e 	bl	8008eb4 <HAL_TIM_Base_Start_IT>
		HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80015d8:	2032      	movs	r0, #50	; 0x32
 80015da:	f003 faf4 	bl	8004bc6 <HAL_NVIC_EnableIRQ>
}
 80015de:	bf00      	nop
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	20000230 	.word	0x20000230
 80015ec:	20000228 	.word	0x20000228
 80015f0:	20000229 	.word	0x20000229
 80015f4:	2000022a 	.word	0x2000022a
 80015f8:	2000022b 	.word	0x2000022b
 80015fc:	2000022c 	.word	0x2000022c
 8001600:	2000022d 	.word	0x2000022d
 8001604:	2000022e 	.word	0x2000022e
 8001608:	2000022f 	.word	0x2000022f
 800160c:	20000226 	.word	0x20000226
 8001610:	20000227 	.word	0x20000227
 8001614:	0800e388 	.word	0x0800e388
 8001618:	20000234 	.word	0x20000234
 800161c:	200007a8 	.word	0x200007a8
 8001620:	40000c00 	.word	0x40000c00
 8001624:	48001000 	.word	0x48001000
 8001628:	0800e39c 	.word	0x0800e39c
 800162c:	0800e3c8 	.word	0x0800e3c8

08001630 <execute>:

  }
}


void execute() {
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
	//default
	rotor_control(1);
 8001634:	2001      	movs	r0, #1
 8001636:	f001 f975 	bl	8002924 <rotor_control>
	motor_control(7);
 800163a:	2007      	movs	r0, #7
 800163c:	f001 f882 	bl	8002744 <motor_control>
	//led
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8,  0);
 8001640:	2200      	movs	r2, #0
 8001642:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001646:	4838      	ldr	r0, [pc, #224]	; (8001728 <execute+0xf8>)
 8001648:	f003 fc78 	bl	8004f3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9,  0);
 800164c:	2200      	movs	r2, #0
 800164e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001652:	4835      	ldr	r0, [pc, #212]	; (8001728 <execute+0xf8>)
 8001654:	f003 fc72 	bl	8004f3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, 0);
 8001658:	2200      	movs	r2, #0
 800165a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800165e:	4832      	ldr	r0, [pc, #200]	; (8001728 <execute+0xf8>)
 8001660:	f003 fc6c 	bl	8004f3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, 0);
 8001664:	2200      	movs	r2, #0
 8001666:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800166a:	482f      	ldr	r0, [pc, #188]	; (8001728 <execute+0xf8>)
 800166c:	f003 fc66 	bl	8004f3c <HAL_GPIO_WritePin>

	switch (state) {
 8001670:	4b2e      	ldr	r3, [pc, #184]	; (800172c <execute+0xfc>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	2b04      	cmp	r3, #4
 8001676:	d855      	bhi.n	8001724 <execute+0xf4>
 8001678:	a201      	add	r2, pc, #4	; (adr r2, 8001680 <execute+0x50>)
 800167a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800167e:	bf00      	nop
 8001680:	08001695 	.word	0x08001695
 8001684:	080016a3 	.word	0x080016a3
 8001688:	080016e9 	.word	0x080016e9
 800168c:	08001703 	.word	0x08001703
 8001690:	08001711 	.word	0x08001711
	case INIT:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8,  1); // white led
 8001694:	2201      	movs	r2, #1
 8001696:	f44f 7180 	mov.w	r1, #256	; 0x100
 800169a:	4823      	ldr	r0, [pc, #140]	; (8001728 <execute+0xf8>)
 800169c:	f003 fc4e 	bl	8004f3c <HAL_GPIO_WritePin>
		break;
 80016a0:	e040      	b.n	8001724 <execute+0xf4>
	case SEARCH: {
//		uint8_t motor_mode = get_mode();
//		motor_control(motor_mode);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9,  1); // blue led
 80016a2:	2201      	movs	r2, #1
 80016a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016a8:	481f      	ldr	r0, [pc, #124]	; (8001728 <execute+0xf8>)
 80016aa:	f003 fc47 	bl	8004f3c <HAL_GPIO_WritePin>

		while (1) {
			static uint8_t local_motor_mode = 0;
			if (local_motor_mode == 8) local_motor_mode = 0;
 80016ae:	4b20      	ldr	r3, [pc, #128]	; (8001730 <execute+0x100>)
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	2b08      	cmp	r3, #8
 80016b4:	d102      	bne.n	80016bc <execute+0x8c>
 80016b6:	4b1e      	ldr	r3, [pc, #120]	; (8001730 <execute+0x100>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	701a      	strb	r2, [r3, #0]
			printf("Search: motor mode %d\n", local_motor_mode);
 80016bc:	4b1c      	ldr	r3, [pc, #112]	; (8001730 <execute+0x100>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	4619      	mov	r1, r3
 80016c2:	481c      	ldr	r0, [pc, #112]	; (8001734 <execute+0x104>)
 80016c4:	f00a fe02 	bl	800c2cc <iprintf>
			motor_control(local_motor_mode);
 80016c8:	4b19      	ldr	r3, [pc, #100]	; (8001730 <execute+0x100>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	4618      	mov	r0, r3
 80016ce:	f001 f839 	bl	8002744 <motor_control>
//				HAL_Delay(1000);
//			} else {
//				HAL_Delay(5000);
//			}

			HAL_Delay(5000);
 80016d2:	f241 3088 	movw	r0, #5000	; 0x1388
 80016d6:	f002 f953 	bl	8003980 <HAL_Delay>
			local_motor_mode++;
 80016da:	4b15      	ldr	r3, [pc, #84]	; (8001730 <execute+0x100>)
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	3301      	adds	r3, #1
 80016e0:	b2da      	uxtb	r2, r3
 80016e2:	4b13      	ldr	r3, [pc, #76]	; (8001730 <execute+0x100>)
 80016e4:	701a      	strb	r2, [r3, #0]
		while (1) {
 80016e6:	e7e2      	b.n	80016ae <execute+0x7e>
//		ball_not_found;
		break;
	}
	case COLLECT:

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, 1); // green led
 80016e8:	2201      	movs	r2, #1
 80016ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016ee:	480e      	ldr	r0, [pc, #56]	; (8001728 <execute+0xf8>)
 80016f0:	f003 fc24 	bl	8004f3c <HAL_GPIO_WritePin>
		rotor_control(0);
 80016f4:	2000      	movs	r0, #0
 80016f6:	f001 f915 	bl	8002924 <rotor_control>
		motor_control(0);
 80016fa:	2000      	movs	r0, #0
 80016fc:	f001 f822 	bl	8002744 <motor_control>

		break;
 8001700:	e010      	b.n	8001724 <execute+0xf4>
	case RETURN:

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8,  1); // white led
 8001702:	2201      	movs	r2, #1
 8001704:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001708:	4807      	ldr	r0, [pc, #28]	; (8001728 <execute+0xf8>)
 800170a:	f003 fc17 	bl	8004f3c <HAL_GPIO_WritePin>
		break;
 800170e:	e009      	b.n	8001724 <execute+0xf4>
	case AVOID_COLLISION:

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, 1); // red led
 8001710:	2201      	movs	r2, #1
 8001712:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001716:	4804      	ldr	r0, [pc, #16]	; (8001728 <execute+0xf8>)
 8001718:	f003 fc10 	bl	8004f3c <HAL_GPIO_WritePin>
		motor_control(1);
 800171c:	2001      	movs	r0, #1
 800171e:	f001 f811 	bl	8002744 <motor_control>
		break;
 8001722:	bf00      	nop
	}
}
 8001724:	bf00      	nop
 8001726:	bd80      	pop	{r7, pc}
 8001728:	48000800 	.word	0x48000800
 800172c:	20000226 	.word	0x20000226
 8001730:	20000238 	.word	0x20000238
 8001734:	0800e42c 	.word	0x0800e42c

08001738 <delay_loop>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void delay_loop(int time) {
 8001738:	b480      	push	{r7}
 800173a:	b085      	sub	sp, #20
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
	 for(volatile int j = 0; j < time; ++j)
 8001740:	2300      	movs	r3, #0
 8001742:	60fb      	str	r3, [r7, #12]
 8001744:	e00c      	b.n	8001760 <delay_loop+0x28>
	  		  for (volatile int i = 0; i < 380; ++i) asm("");//1ms
 8001746:	2300      	movs	r3, #0
 8001748:	60bb      	str	r3, [r7, #8]
 800174a:	e002      	b.n	8001752 <delay_loop+0x1a>
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	3301      	adds	r3, #1
 8001750:	60bb      	str	r3, [r7, #8]
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	f5b3 7fbe 	cmp.w	r3, #380	; 0x17c
 8001758:	dbf8      	blt.n	800174c <delay_loop+0x14>
	 for(volatile int j = 0; j < time; ++j)
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	3301      	adds	r3, #1
 800175e:	60fb      	str	r3, [r7, #12]
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	429a      	cmp	r2, r3
 8001766:	dcee      	bgt.n	8001746 <delay_loop+0xe>
}
 8001768:	bf00      	nop
 800176a:	bf00      	nop
 800176c:	3714      	adds	r7, #20
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
	...

08001778 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800177c:	f002 f88b 	bl	8003896 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001780:	f000 f858 	bl	8001834 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001784:	f000 f8b8 	bl	80018f8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001788:	f000 fe90 	bl	80024ac <MX_GPIO_Init>
  MX_ADC1_Init();
 800178c:	f000 f8e6 	bl	800195c <MX_ADC1_Init>
  MX_CAN1_Init();
 8001790:	f000 f948 	bl	8001a24 <MX_CAN1_Init>
  MX_I2C1_SMBUS_Init();
 8001794:	f000 f97a 	bl	8001a8c <MX_I2C1_SMBUS_Init>
  MX_I2C2_SMBUS_Init();
 8001798:	f000 f9b2 	bl	8001b00 <MX_I2C2_SMBUS_Init>
  MX_LPUART1_UART_Init();
 800179c:	f000 f9f2 	bl	8001b84 <MX_LPUART1_UART_Init>
  MX_USART2_UART_Init();
 80017a0:	f000 fa3c 	bl	8001c1c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80017a4:	f000 fa88 	bl	8001cb8 <MX_USART3_UART_Init>
  MX_SAI2_Init();
 80017a8:	f000 fad2 	bl	8001d50 <MX_SAI2_Init>
  MX_SPI1_Init();
 80017ac:	f000 fb38 	bl	8001e20 <MX_SPI1_Init>
  MX_SPI3_Init();
 80017b0:	f000 fb74 	bl	8001e9c <MX_SPI3_Init>
  MX_TIM1_Init();
 80017b4:	f000 fbb0 	bl	8001f18 <MX_TIM1_Init>
  MX_TIM2_Init();
 80017b8:	f000 fc24 	bl	8002004 <MX_TIM2_Init>
  MX_TIM3_Init();
 80017bc:	f000 fc9a 	bl	80020f4 <MX_TIM3_Init>
  MX_TIM4_Init();
 80017c0:	f000 fd0a 	bl	80021d8 <MX_TIM4_Init>
  MX_TIM15_Init();
 80017c4:	f000 fde6 	bl	8002394 <MX_TIM15_Init>
  MX_USB_OTG_FS_USB_Init();
 80017c8:	f000 fe68 	bl	800249c <MX_USB_OTG_FS_USB_Init>
  MX_TIM5_Init();
 80017cc:	f000 fd92 	bl	80022f4 <MX_TIM5_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80017d0:	2100      	movs	r1, #0
 80017d2:	4812      	ldr	r0, [pc, #72]	; (800181c <main+0xa4>)
 80017d4:	f007 fc64 	bl	80090a0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80017d8:	2108      	movs	r1, #8
 80017da:	4810      	ldr	r0, [pc, #64]	; (800181c <main+0xa4>)
 80017dc:	f007 fc60 	bl	80090a0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80017e0:	210c      	movs	r1, #12
 80017e2:	480e      	ldr	r0, [pc, #56]	; (800181c <main+0xa4>)
 80017e4:	f007 fc5c 	bl	80090a0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80017e8:	2100      	movs	r1, #0
 80017ea:	480d      	ldr	r0, [pc, #52]	; (8001820 <main+0xa8>)
 80017ec:	f007 fc58 	bl	80090a0 <HAL_TIM_PWM_Start>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 80017f0:	2100      	movs	r1, #0
 80017f2:	480c      	ldr	r0, [pc, #48]	; (8001824 <main+0xac>)
 80017f4:	f007 fdbc 	bl	8009370 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 80017f8:	2104      	movs	r1, #4
 80017fa:	480b      	ldr	r0, [pc, #44]	; (8001828 <main+0xb0>)
 80017fc:	f007 fdb8 	bl	8009370 <HAL_TIM_IC_Start_IT>

  extern Pixy2 pixy;
  pixy2_init(&hspi1, GPIOB, GPIO_PIN_2);
 8001800:	2204      	movs	r2, #4
 8001802:	490a      	ldr	r1, [pc, #40]	; (800182c <main+0xb4>)
 8001804:	480a      	ldr	r0, [pc, #40]	; (8001830 <main+0xb8>)
 8001806:	f7ff fcb3 	bl	8001170 <pixy2_init>
//		  for(int i = 0; i < bruh; ++i) {
//			  printBlock(i);
//		  }
//	  }
//	  printf("main\n");
	  state_update();
 800180a:	f7ff fdb3 	bl	8001374 <state_update>
	  execute();
 800180e:	f7ff ff0f 	bl	8001630 <execute>
	  delay_loop(2000); // 0.1ms
 8001812:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001816:	f7ff ff8f 	bl	8001738 <delay_loop>
  {
 800181a:	e7f6      	b.n	800180a <main+0x92>
 800181c:	2000075c 	.word	0x2000075c
 8001820:	200006c4 	.word	0x200006c4
 8001824:	20000678 	.word	0x20000678
 8001828:	20000710 	.word	0x20000710
 800182c:	48000400 	.word	0x48000400
 8001830:	200005b0 	.word	0x200005b0

08001834 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b096      	sub	sp, #88	; 0x58
 8001838:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800183a:	f107 0314 	add.w	r3, r7, #20
 800183e:	2244      	movs	r2, #68	; 0x44
 8001840:	2100      	movs	r1, #0
 8001842:	4618      	mov	r0, r3
 8001844:	f009 fff0 	bl	800b828 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001848:	463b      	mov	r3, r7
 800184a:	2200      	movs	r2, #0
 800184c:	601a      	str	r2, [r3, #0]
 800184e:	605a      	str	r2, [r3, #4]
 8001850:	609a      	str	r2, [r3, #8]
 8001852:	60da      	str	r2, [r3, #12]
 8001854:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001856:	f44f 7000 	mov.w	r0, #512	; 0x200
 800185a:	f003 fbb7 	bl	8004fcc <HAL_PWREx_ControlVoltageScaling>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001864:	f000 ff68 	bl	8002738 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001868:	f003 fb80 	bl	8004f6c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800186c:	4b21      	ldr	r3, [pc, #132]	; (80018f4 <SystemClock_Config+0xc0>)
 800186e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001872:	4a20      	ldr	r2, [pc, #128]	; (80018f4 <SystemClock_Config+0xc0>)
 8001874:	f023 0318 	bic.w	r3, r3, #24
 8001878:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800187c:	2314      	movs	r3, #20
 800187e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001880:	2301      	movs	r3, #1
 8001882:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001884:	2301      	movs	r3, #1
 8001886:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001888:	2300      	movs	r3, #0
 800188a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800188c:	2360      	movs	r3, #96	; 0x60
 800188e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001890:	2302      	movs	r3, #2
 8001892:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001894:	2301      	movs	r3, #1
 8001896:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001898:	2301      	movs	r3, #1
 800189a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 800189c:	2310      	movs	r3, #16
 800189e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018a0:	2302      	movs	r3, #2
 80018a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80018a4:	2302      	movs	r3, #2
 80018a6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80018a8:	2302      	movs	r3, #2
 80018aa:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018ac:	f107 0314 	add.w	r3, r7, #20
 80018b0:	4618      	mov	r0, r3
 80018b2:	f003 fc3f 	bl	8005134 <HAL_RCC_OscConfig>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80018bc:	f000 ff3c 	bl	8002738 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018c0:	230f      	movs	r3, #15
 80018c2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018c4:	2303      	movs	r3, #3
 80018c6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018c8:	2300      	movs	r3, #0
 80018ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018cc:	2300      	movs	r3, #0
 80018ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018d0:	2300      	movs	r3, #0
 80018d2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80018d4:	463b      	mov	r3, r7
 80018d6:	2101      	movs	r1, #1
 80018d8:	4618      	mov	r0, r3
 80018da:	f004 f845 	bl	8005968 <HAL_RCC_ClockConfig>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80018e4:	f000 ff28 	bl	8002738 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80018e8:	f005 fd4e 	bl	8007388 <HAL_RCCEx_EnableMSIPLLMode>
}
 80018ec:	bf00      	nop
 80018ee:	3758      	adds	r7, #88	; 0x58
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	40021000 	.word	0x40021000

080018f8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b0a6      	sub	sp, #152	; 0x98
 80018fc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018fe:	1d3b      	adds	r3, r7, #4
 8001900:	2294      	movs	r2, #148	; 0x94
 8001902:	2100      	movs	r1, #0
 8001904:	4618      	mov	r0, r3
 8001906:	f009 ff8f 	bl	800b828 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI2|RCC_PERIPHCLK_USB
 800190a:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800190e:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI1;
 8001910:	2300      	movs	r3, #0
 8001912:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001914:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001918:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800191c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001920:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001922:	2301      	movs	r3, #1
 8001924:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001926:	2301      	movs	r3, #1
 8001928:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800192a:	2318      	movs	r3, #24
 800192c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800192e:	2302      	movs	r3, #2
 8001930:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001932:	2302      	movs	r3, #2
 8001934:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001936:	2302      	movs	r3, #2
 8001938:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_48M2CLK
 800193a:	4b07      	ldr	r3, [pc, #28]	; (8001958 <PeriphCommonClock_Config+0x60>)
 800193c:	623b      	str	r3, [r7, #32]
                              |RCC_PLLSAI1_ADC1CLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800193e:	1d3b      	adds	r3, r7, #4
 8001940:	4618      	mov	r0, r3
 8001942:	f004 facf 	bl	8005ee4 <HAL_RCCEx_PeriphCLKConfig>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 800194c:	f000 fef4 	bl	8002738 <Error_Handler>
  }
}
 8001950:	bf00      	nop
 8001952:	3798      	adds	r7, #152	; 0x98
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	01110000 	.word	0x01110000

0800195c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b086      	sub	sp, #24
 8001960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001962:	463b      	mov	r3, r7
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	605a      	str	r2, [r3, #4]
 800196a:	609a      	str	r2, [r3, #8]
 800196c:	60da      	str	r2, [r3, #12]
 800196e:	611a      	str	r2, [r3, #16]
 8001970:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001972:	4b29      	ldr	r3, [pc, #164]	; (8001a18 <MX_ADC1_Init+0xbc>)
 8001974:	4a29      	ldr	r2, [pc, #164]	; (8001a1c <MX_ADC1_Init+0xc0>)
 8001976:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001978:	4b27      	ldr	r3, [pc, #156]	; (8001a18 <MX_ADC1_Init+0xbc>)
 800197a:	2200      	movs	r2, #0
 800197c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800197e:	4b26      	ldr	r3, [pc, #152]	; (8001a18 <MX_ADC1_Init+0xbc>)
 8001980:	2200      	movs	r2, #0
 8001982:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001984:	4b24      	ldr	r3, [pc, #144]	; (8001a18 <MX_ADC1_Init+0xbc>)
 8001986:	2200      	movs	r2, #0
 8001988:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800198a:	4b23      	ldr	r3, [pc, #140]	; (8001a18 <MX_ADC1_Init+0xbc>)
 800198c:	2200      	movs	r2, #0
 800198e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001990:	4b21      	ldr	r3, [pc, #132]	; (8001a18 <MX_ADC1_Init+0xbc>)
 8001992:	2204      	movs	r2, #4
 8001994:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001996:	4b20      	ldr	r3, [pc, #128]	; (8001a18 <MX_ADC1_Init+0xbc>)
 8001998:	2200      	movs	r2, #0
 800199a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800199c:	4b1e      	ldr	r3, [pc, #120]	; (8001a18 <MX_ADC1_Init+0xbc>)
 800199e:	2200      	movs	r2, #0
 80019a0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80019a2:	4b1d      	ldr	r3, [pc, #116]	; (8001a18 <MX_ADC1_Init+0xbc>)
 80019a4:	2201      	movs	r2, #1
 80019a6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80019a8:	4b1b      	ldr	r3, [pc, #108]	; (8001a18 <MX_ADC1_Init+0xbc>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80019b0:	4b19      	ldr	r3, [pc, #100]	; (8001a18 <MX_ADC1_Init+0xbc>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80019b6:	4b18      	ldr	r3, [pc, #96]	; (8001a18 <MX_ADC1_Init+0xbc>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80019bc:	4b16      	ldr	r3, [pc, #88]	; (8001a18 <MX_ADC1_Init+0xbc>)
 80019be:	2200      	movs	r2, #0
 80019c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80019c4:	4b14      	ldr	r3, [pc, #80]	; (8001a18 <MX_ADC1_Init+0xbc>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80019ca:	4b13      	ldr	r3, [pc, #76]	; (8001a18 <MX_ADC1_Init+0xbc>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80019d2:	4811      	ldr	r0, [pc, #68]	; (8001a18 <MX_ADC1_Init+0xbc>)
 80019d4:	f002 f998 	bl	8003d08 <HAL_ADC_Init>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80019de:	f000 feab 	bl	8002738 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80019e2:	4b0f      	ldr	r3, [pc, #60]	; (8001a20 <MX_ADC1_Init+0xc4>)
 80019e4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80019e6:	2306      	movs	r3, #6
 80019e8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80019ea:	2300      	movs	r3, #0
 80019ec:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80019ee:	237f      	movs	r3, #127	; 0x7f
 80019f0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80019f2:	2304      	movs	r3, #4
 80019f4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80019f6:	2300      	movs	r3, #0
 80019f8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019fa:	463b      	mov	r3, r7
 80019fc:	4619      	mov	r1, r3
 80019fe:	4806      	ldr	r0, [pc, #24]	; (8001a18 <MX_ADC1_Init+0xbc>)
 8001a00:	f002 face 	bl	8003fa0 <HAL_ADC_ConfigChannel>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001a0a:	f000 fe95 	bl	8002738 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a0e:	bf00      	nop
 8001a10:	3718      	adds	r7, #24
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	2000023c 	.word	0x2000023c
 8001a1c:	50040000 	.word	0x50040000
 8001a20:	04300002 	.word	0x04300002

08001a24 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001a28:	4b16      	ldr	r3, [pc, #88]	; (8001a84 <MX_CAN1_Init+0x60>)
 8001a2a:	4a17      	ldr	r2, [pc, #92]	; (8001a88 <MX_CAN1_Init+0x64>)
 8001a2c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8001a2e:	4b15      	ldr	r3, [pc, #84]	; (8001a84 <MX_CAN1_Init+0x60>)
 8001a30:	2210      	movs	r2, #16
 8001a32:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001a34:	4b13      	ldr	r3, [pc, #76]	; (8001a84 <MX_CAN1_Init+0x60>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001a3a:	4b12      	ldr	r3, [pc, #72]	; (8001a84 <MX_CAN1_Init+0x60>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8001a40:	4b10      	ldr	r3, [pc, #64]	; (8001a84 <MX_CAN1_Init+0x60>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001a46:	4b0f      	ldr	r3, [pc, #60]	; (8001a84 <MX_CAN1_Init+0x60>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001a4c:	4b0d      	ldr	r3, [pc, #52]	; (8001a84 <MX_CAN1_Init+0x60>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001a52:	4b0c      	ldr	r3, [pc, #48]	; (8001a84 <MX_CAN1_Init+0x60>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001a58:	4b0a      	ldr	r3, [pc, #40]	; (8001a84 <MX_CAN1_Init+0x60>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001a5e:	4b09      	ldr	r3, [pc, #36]	; (8001a84 <MX_CAN1_Init+0x60>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001a64:	4b07      	ldr	r3, [pc, #28]	; (8001a84 <MX_CAN1_Init+0x60>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001a6a:	4b06      	ldr	r3, [pc, #24]	; (8001a84 <MX_CAN1_Init+0x60>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001a70:	4804      	ldr	r0, [pc, #16]	; (8001a84 <MX_CAN1_Init+0x60>)
 8001a72:	f002 fe91 	bl	8004798 <HAL_CAN_Init>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8001a7c:	f000 fe5c 	bl	8002738 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001a80:	bf00      	nop
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	200002a4 	.word	0x200002a4
 8001a88:	40006400 	.word	0x40006400

08001a8c <MX_I2C1_SMBUS_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_SMBUS_Init(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hsmbus1.Instance = I2C1;
 8001a90:	4b18      	ldr	r3, [pc, #96]	; (8001af4 <MX_I2C1_SMBUS_Init+0x68>)
 8001a92:	4a19      	ldr	r2, [pc, #100]	; (8001af8 <MX_I2C1_SMBUS_Init+0x6c>)
 8001a94:	601a      	str	r2, [r3, #0]
  hsmbus1.Init.Timing = 0x00707CBB;
 8001a96:	4b17      	ldr	r3, [pc, #92]	; (8001af4 <MX_I2C1_SMBUS_Init+0x68>)
 8001a98:	4a18      	ldr	r2, [pc, #96]	; (8001afc <MX_I2C1_SMBUS_Init+0x70>)
 8001a9a:	605a      	str	r2, [r3, #4]
  hsmbus1.Init.AnalogFilter = SMBUS_ANALOGFILTER_ENABLE;
 8001a9c:	4b15      	ldr	r3, [pc, #84]	; (8001af4 <MX_I2C1_SMBUS_Init+0x68>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	609a      	str	r2, [r3, #8]
  hsmbus1.Init.OwnAddress1 = 2;
 8001aa2:	4b14      	ldr	r3, [pc, #80]	; (8001af4 <MX_I2C1_SMBUS_Init+0x68>)
 8001aa4:	2202      	movs	r2, #2
 8001aa6:	60da      	str	r2, [r3, #12]
  hsmbus1.Init.AddressingMode = SMBUS_ADDRESSINGMODE_7BIT;
 8001aa8:	4b12      	ldr	r3, [pc, #72]	; (8001af4 <MX_I2C1_SMBUS_Init+0x68>)
 8001aaa:	2201      	movs	r2, #1
 8001aac:	611a      	str	r2, [r3, #16]
  hsmbus1.Init.DualAddressMode = SMBUS_DUALADDRESS_DISABLE;
 8001aae:	4b11      	ldr	r3, [pc, #68]	; (8001af4 <MX_I2C1_SMBUS_Init+0x68>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	615a      	str	r2, [r3, #20]
  hsmbus1.Init.OwnAddress2 = 0;
 8001ab4:	4b0f      	ldr	r3, [pc, #60]	; (8001af4 <MX_I2C1_SMBUS_Init+0x68>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	619a      	str	r2, [r3, #24]
  hsmbus1.Init.OwnAddress2Masks = SMBUS_OA2_NOMASK;
 8001aba:	4b0e      	ldr	r3, [pc, #56]	; (8001af4 <MX_I2C1_SMBUS_Init+0x68>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	61da      	str	r2, [r3, #28]
  hsmbus1.Init.GeneralCallMode = SMBUS_GENERALCALL_DISABLE;
 8001ac0:	4b0c      	ldr	r3, [pc, #48]	; (8001af4 <MX_I2C1_SMBUS_Init+0x68>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	621a      	str	r2, [r3, #32]
  hsmbus1.Init.NoStretchMode = SMBUS_NOSTRETCH_DISABLE;
 8001ac6:	4b0b      	ldr	r3, [pc, #44]	; (8001af4 <MX_I2C1_SMBUS_Init+0x68>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	625a      	str	r2, [r3, #36]	; 0x24
  hsmbus1.Init.PacketErrorCheckMode = SMBUS_PEC_DISABLE;
 8001acc:	4b09      	ldr	r3, [pc, #36]	; (8001af4 <MX_I2C1_SMBUS_Init+0x68>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	629a      	str	r2, [r3, #40]	; 0x28
  hsmbus1.Init.PeripheralMode = SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE;
 8001ad2:	4b08      	ldr	r3, [pc, #32]	; (8001af4 <MX_I2C1_SMBUS_Init+0x68>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	62da      	str	r2, [r3, #44]	; 0x2c
  hsmbus1.Init.SMBusTimeout = 0x00008186;
 8001ad8:	4b06      	ldr	r3, [pc, #24]	; (8001af4 <MX_I2C1_SMBUS_Init+0x68>)
 8001ada:	f248 1286 	movw	r2, #33158	; 0x8186
 8001ade:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_SMBUS_Init(&hsmbus1) != HAL_OK)
 8001ae0:	4804      	ldr	r0, [pc, #16]	; (8001af4 <MX_I2C1_SMBUS_Init+0x68>)
 8001ae2:	f006 f973 	bl	8007dcc <HAL_SMBUS_Init>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <MX_I2C1_SMBUS_Init+0x64>
  {
    Error_Handler();
 8001aec:	f000 fe24 	bl	8002738 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001af0:	bf00      	nop
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	200002cc 	.word	0x200002cc
 8001af8:	40005400 	.word	0x40005400
 8001afc:	00707cbb 	.word	0x00707cbb

08001b00 <MX_I2C2_SMBUS_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_SMBUS_Init(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hsmbus2.Instance = I2C2;
 8001b04:	4b1c      	ldr	r3, [pc, #112]	; (8001b78 <MX_I2C2_SMBUS_Init+0x78>)
 8001b06:	4a1d      	ldr	r2, [pc, #116]	; (8001b7c <MX_I2C2_SMBUS_Init+0x7c>)
 8001b08:	601a      	str	r2, [r3, #0]
  hsmbus2.Init.Timing = 0x00707CBB;
 8001b0a:	4b1b      	ldr	r3, [pc, #108]	; (8001b78 <MX_I2C2_SMBUS_Init+0x78>)
 8001b0c:	4a1c      	ldr	r2, [pc, #112]	; (8001b80 <MX_I2C2_SMBUS_Init+0x80>)
 8001b0e:	605a      	str	r2, [r3, #4]
  hsmbus2.Init.AnalogFilter = SMBUS_ANALOGFILTER_ENABLE;
 8001b10:	4b19      	ldr	r3, [pc, #100]	; (8001b78 <MX_I2C2_SMBUS_Init+0x78>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	609a      	str	r2, [r3, #8]
  hsmbus2.Init.OwnAddress1 = 2;
 8001b16:	4b18      	ldr	r3, [pc, #96]	; (8001b78 <MX_I2C2_SMBUS_Init+0x78>)
 8001b18:	2202      	movs	r2, #2
 8001b1a:	60da      	str	r2, [r3, #12]
  hsmbus2.Init.AddressingMode = SMBUS_ADDRESSINGMODE_7BIT;
 8001b1c:	4b16      	ldr	r3, [pc, #88]	; (8001b78 <MX_I2C2_SMBUS_Init+0x78>)
 8001b1e:	2201      	movs	r2, #1
 8001b20:	611a      	str	r2, [r3, #16]
  hsmbus2.Init.DualAddressMode = SMBUS_DUALADDRESS_DISABLE;
 8001b22:	4b15      	ldr	r3, [pc, #84]	; (8001b78 <MX_I2C2_SMBUS_Init+0x78>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	615a      	str	r2, [r3, #20]
  hsmbus2.Init.OwnAddress2 = 0;
 8001b28:	4b13      	ldr	r3, [pc, #76]	; (8001b78 <MX_I2C2_SMBUS_Init+0x78>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	619a      	str	r2, [r3, #24]
  hsmbus2.Init.OwnAddress2Masks = SMBUS_OA2_NOMASK;
 8001b2e:	4b12      	ldr	r3, [pc, #72]	; (8001b78 <MX_I2C2_SMBUS_Init+0x78>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	61da      	str	r2, [r3, #28]
  hsmbus2.Init.GeneralCallMode = SMBUS_GENERALCALL_DISABLE;
 8001b34:	4b10      	ldr	r3, [pc, #64]	; (8001b78 <MX_I2C2_SMBUS_Init+0x78>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	621a      	str	r2, [r3, #32]
  hsmbus2.Init.NoStretchMode = SMBUS_NOSTRETCH_DISABLE;
 8001b3a:	4b0f      	ldr	r3, [pc, #60]	; (8001b78 <MX_I2C2_SMBUS_Init+0x78>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	625a      	str	r2, [r3, #36]	; 0x24
  hsmbus2.Init.PacketErrorCheckMode = SMBUS_PEC_DISABLE;
 8001b40:	4b0d      	ldr	r3, [pc, #52]	; (8001b78 <MX_I2C2_SMBUS_Init+0x78>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	629a      	str	r2, [r3, #40]	; 0x28
  hsmbus2.Init.PeripheralMode = SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE;
 8001b46:	4b0c      	ldr	r3, [pc, #48]	; (8001b78 <MX_I2C2_SMBUS_Init+0x78>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsmbus2.Init.SMBusTimeout = 0x00008186;
 8001b4c:	4b0a      	ldr	r3, [pc, #40]	; (8001b78 <MX_I2C2_SMBUS_Init+0x78>)
 8001b4e:	f248 1286 	movw	r2, #33158	; 0x8186
 8001b52:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_SMBUS_Init(&hsmbus2) != HAL_OK)
 8001b54:	4808      	ldr	r0, [pc, #32]	; (8001b78 <MX_I2C2_SMBUS_Init+0x78>)
 8001b56:	f006 f939 	bl	8007dcc <HAL_SMBUS_Init>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <MX_I2C2_SMBUS_Init+0x64>
  {
    Error_Handler();
 8001b60:	f000 fdea 	bl	8002738 <Error_Handler>
  }

  /** configuration Alert Mode
  */
  if (HAL_SMBUS_EnableAlert_IT(&hsmbus2) != HAL_OK)
 8001b64:	4804      	ldr	r0, [pc, #16]	; (8001b78 <MX_I2C2_SMBUS_Init+0x78>)
 8001b66:	f006 f9e9 	bl	8007f3c <HAL_SMBUS_EnableAlert_IT>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <MX_I2C2_SMBUS_Init+0x74>
  {
    Error_Handler();
 8001b70:	f000 fde2 	bl	8002738 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001b74:	bf00      	nop
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	2000031c 	.word	0x2000031c
 8001b7c:	40005800 	.word	0x40005800
 8001b80:	00707cbb 	.word	0x00707cbb

08001b84 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001b88:	4b22      	ldr	r3, [pc, #136]	; (8001c14 <MX_LPUART1_UART_Init+0x90>)
 8001b8a:	4a23      	ldr	r2, [pc, #140]	; (8001c18 <MX_LPUART1_UART_Init+0x94>)
 8001b8c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001b8e:	4b21      	ldr	r3, [pc, #132]	; (8001c14 <MX_LPUART1_UART_Init+0x90>)
 8001b90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b94:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b96:	4b1f      	ldr	r3, [pc, #124]	; (8001c14 <MX_LPUART1_UART_Init+0x90>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001b9c:	4b1d      	ldr	r3, [pc, #116]	; (8001c14 <MX_LPUART1_UART_Init+0x90>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001ba2:	4b1c      	ldr	r3, [pc, #112]	; (8001c14 <MX_LPUART1_UART_Init+0x90>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001ba8:	4b1a      	ldr	r3, [pc, #104]	; (8001c14 <MX_LPUART1_UART_Init+0x90>)
 8001baa:	220c      	movs	r2, #12
 8001bac:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bae:	4b19      	ldr	r3, [pc, #100]	; (8001c14 <MX_LPUART1_UART_Init+0x90>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bb4:	4b17      	ldr	r3, [pc, #92]	; (8001c14 <MX_LPUART1_UART_Init+0x90>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001bba:	4b16      	ldr	r3, [pc, #88]	; (8001c14 <MX_LPUART1_UART_Init+0x90>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bc0:	4b14      	ldr	r3, [pc, #80]	; (8001c14 <MX_LPUART1_UART_Init+0x90>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8001bc6:	4b13      	ldr	r3, [pc, #76]	; (8001c14 <MX_LPUART1_UART_Init+0x90>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001bcc:	4811      	ldr	r0, [pc, #68]	; (8001c14 <MX_LPUART1_UART_Init+0x90>)
 8001bce:	f008 ff5d 	bl	800aa8c <HAL_UART_Init>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8001bd8:	f000 fdae 	bl	8002738 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bdc:	2100      	movs	r1, #0
 8001bde:	480d      	ldr	r0, [pc, #52]	; (8001c14 <MX_LPUART1_UART_Init+0x90>)
 8001be0:	f009 fd26 	bl	800b630 <HAL_UARTEx_SetTxFifoThreshold>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001bea:	f000 fda5 	bl	8002738 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bee:	2100      	movs	r1, #0
 8001bf0:	4808      	ldr	r0, [pc, #32]	; (8001c14 <MX_LPUART1_UART_Init+0x90>)
 8001bf2:	f009 fd5b 	bl	800b6ac <HAL_UARTEx_SetRxFifoThreshold>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001bfc:	f000 fd9c 	bl	8002738 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001c00:	4804      	ldr	r0, [pc, #16]	; (8001c14 <MX_LPUART1_UART_Init+0x90>)
 8001c02:	f009 fcdc 	bl	800b5be <HAL_UARTEx_DisableFifoMode>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001c0c:	f000 fd94 	bl	8002738 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001c10:	bf00      	nop
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	2000036c 	.word	0x2000036c
 8001c18:	40008000 	.word	0x40008000

08001c1c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c20:	4b23      	ldr	r3, [pc, #140]	; (8001cb0 <MX_USART2_UART_Init+0x94>)
 8001c22:	4a24      	ldr	r2, [pc, #144]	; (8001cb4 <MX_USART2_UART_Init+0x98>)
 8001c24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c26:	4b22      	ldr	r3, [pc, #136]	; (8001cb0 <MX_USART2_UART_Init+0x94>)
 8001c28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c2e:	4b20      	ldr	r3, [pc, #128]	; (8001cb0 <MX_USART2_UART_Init+0x94>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c34:	4b1e      	ldr	r3, [pc, #120]	; (8001cb0 <MX_USART2_UART_Init+0x94>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c3a:	4b1d      	ldr	r3, [pc, #116]	; (8001cb0 <MX_USART2_UART_Init+0x94>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c40:	4b1b      	ldr	r3, [pc, #108]	; (8001cb0 <MX_USART2_UART_Init+0x94>)
 8001c42:	220c      	movs	r2, #12
 8001c44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8001c46:	4b1a      	ldr	r3, [pc, #104]	; (8001cb0 <MX_USART2_UART_Init+0x94>)
 8001c48:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001c4c:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c4e:	4b18      	ldr	r3, [pc, #96]	; (8001cb0 <MX_USART2_UART_Init+0x94>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c54:	4b16      	ldr	r3, [pc, #88]	; (8001cb0 <MX_USART2_UART_Init+0x94>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c5a:	4b15      	ldr	r3, [pc, #84]	; (8001cb0 <MX_USART2_UART_Init+0x94>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c60:	4b13      	ldr	r3, [pc, #76]	; (8001cb0 <MX_USART2_UART_Init+0x94>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c66:	4812      	ldr	r0, [pc, #72]	; (8001cb0 <MX_USART2_UART_Init+0x94>)
 8001c68:	f008 ff10 	bl	800aa8c <HAL_UART_Init>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8001c72:	f000 fd61 	bl	8002738 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c76:	2100      	movs	r1, #0
 8001c78:	480d      	ldr	r0, [pc, #52]	; (8001cb0 <MX_USART2_UART_Init+0x94>)
 8001c7a:	f009 fcd9 	bl	800b630 <HAL_UARTEx_SetTxFifoThreshold>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8001c84:	f000 fd58 	bl	8002738 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c88:	2100      	movs	r1, #0
 8001c8a:	4809      	ldr	r0, [pc, #36]	; (8001cb0 <MX_USART2_UART_Init+0x94>)
 8001c8c:	f009 fd0e 	bl	800b6ac <HAL_UARTEx_SetRxFifoThreshold>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8001c96:	f000 fd4f 	bl	8002738 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001c9a:	4805      	ldr	r0, [pc, #20]	; (8001cb0 <MX_USART2_UART_Init+0x94>)
 8001c9c:	f009 fc8f 	bl	800b5be <HAL_UARTEx_DisableFifoMode>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8001ca6:	f000 fd47 	bl	8002738 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001caa:	bf00      	nop
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	200003fc 	.word	0x200003fc
 8001cb4:	40004400 	.word	0x40004400

08001cb8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001cbc:	4b22      	ldr	r3, [pc, #136]	; (8001d48 <MX_USART3_UART_Init+0x90>)
 8001cbe:	4a23      	ldr	r2, [pc, #140]	; (8001d4c <MX_USART3_UART_Init+0x94>)
 8001cc0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001cc2:	4b21      	ldr	r3, [pc, #132]	; (8001d48 <MX_USART3_UART_Init+0x90>)
 8001cc4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cc8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001cca:	4b1f      	ldr	r3, [pc, #124]	; (8001d48 <MX_USART3_UART_Init+0x90>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001cd0:	4b1d      	ldr	r3, [pc, #116]	; (8001d48 <MX_USART3_UART_Init+0x90>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001cd6:	4b1c      	ldr	r3, [pc, #112]	; (8001d48 <MX_USART3_UART_Init+0x90>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001cdc:	4b1a      	ldr	r3, [pc, #104]	; (8001d48 <MX_USART3_UART_Init+0x90>)
 8001cde:	220c      	movs	r2, #12
 8001ce0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ce2:	4b19      	ldr	r3, [pc, #100]	; (8001d48 <MX_USART3_UART_Init+0x90>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ce8:	4b17      	ldr	r3, [pc, #92]	; (8001d48 <MX_USART3_UART_Init+0x90>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cee:	4b16      	ldr	r3, [pc, #88]	; (8001d48 <MX_USART3_UART_Init+0x90>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001cf4:	4b14      	ldr	r3, [pc, #80]	; (8001d48 <MX_USART3_UART_Init+0x90>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cfa:	4b13      	ldr	r3, [pc, #76]	; (8001d48 <MX_USART3_UART_Init+0x90>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001d00:	4811      	ldr	r0, [pc, #68]	; (8001d48 <MX_USART3_UART_Init+0x90>)
 8001d02:	f008 fec3 	bl	800aa8c <HAL_UART_Init>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001d0c:	f000 fd14 	bl	8002738 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d10:	2100      	movs	r1, #0
 8001d12:	480d      	ldr	r0, [pc, #52]	; (8001d48 <MX_USART3_UART_Init+0x90>)
 8001d14:	f009 fc8c 	bl	800b630 <HAL_UARTEx_SetTxFifoThreshold>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001d1e:	f000 fd0b 	bl	8002738 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d22:	2100      	movs	r1, #0
 8001d24:	4808      	ldr	r0, [pc, #32]	; (8001d48 <MX_USART3_UART_Init+0x90>)
 8001d26:	f009 fcc1 	bl	800b6ac <HAL_UARTEx_SetRxFifoThreshold>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001d30:	f000 fd02 	bl	8002738 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001d34:	4804      	ldr	r0, [pc, #16]	; (8001d48 <MX_USART3_UART_Init+0x90>)
 8001d36:	f009 fc42 	bl	800b5be <HAL_UARTEx_DisableFifoMode>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d001      	beq.n	8001d44 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001d40:	f000 fcfa 	bl	8002738 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001d44:	bf00      	nop
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	2000048c 	.word	0x2000048c
 8001d4c:	40004800 	.word	0x40004800

08001d50 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8001d54:	4b2f      	ldr	r3, [pc, #188]	; (8001e14 <MX_SAI2_Init+0xc4>)
 8001d56:	4a30      	ldr	r2, [pc, #192]	; (8001e18 <MX_SAI2_Init+0xc8>)
 8001d58:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001d5a:	4b2e      	ldr	r3, [pc, #184]	; (8001e14 <MX_SAI2_Init+0xc4>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001d60:	4b2c      	ldr	r3, [pc, #176]	; (8001e14 <MX_SAI2_Init+0xc4>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8001d66:	4b2b      	ldr	r3, [pc, #172]	; (8001e14 <MX_SAI2_Init+0xc4>)
 8001d68:	2240      	movs	r2, #64	; 0x40
 8001d6a:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001d6c:	4b29      	ldr	r3, [pc, #164]	; (8001e14 <MX_SAI2_Init+0xc4>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001d72:	4b28      	ldr	r3, [pc, #160]	; (8001e14 <MX_SAI2_Init+0xc4>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001d78:	4b26      	ldr	r3, [pc, #152]	; (8001e14 <MX_SAI2_Init+0xc4>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001d7e:	4b25      	ldr	r3, [pc, #148]	; (8001e14 <MX_SAI2_Init+0xc4>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001d84:	4b23      	ldr	r3, [pc, #140]	; (8001e14 <MX_SAI2_Init+0xc4>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8001d8a:	4b22      	ldr	r3, [pc, #136]	; (8001e14 <MX_SAI2_Init+0xc4>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001d90:	4b20      	ldr	r3, [pc, #128]	; (8001e14 <MX_SAI2_Init+0xc4>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001d96:	4b1f      	ldr	r3, [pc, #124]	; (8001e14 <MX_SAI2_Init+0xc4>)
 8001d98:	4a20      	ldr	r2, [pc, #128]	; (8001e1c <MX_SAI2_Init+0xcc>)
 8001d9a:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001d9c:	4b1d      	ldr	r3, [pc, #116]	; (8001e14 <MX_SAI2_Init+0xc4>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001da2:	4b1c      	ldr	r3, [pc, #112]	; (8001e14 <MX_SAI2_Init+0xc4>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001da8:	4b1a      	ldr	r3, [pc, #104]	; (8001e14 <MX_SAI2_Init+0xc4>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001dae:	4b19      	ldr	r3, [pc, #100]	; (8001e14 <MX_SAI2_Init+0xc4>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.PdmInit.Activation = DISABLE;
 8001db4:	4b17      	ldr	r3, [pc, #92]	; (8001e14 <MX_SAI2_Init+0xc4>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.PdmInit.MicPairsNbr = 0;
 8001dbc:	4b15      	ldr	r3, [pc, #84]	; (8001e14 <MX_SAI2_Init+0xc4>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8001dc2:	4b14      	ldr	r3, [pc, #80]	; (8001e14 <MX_SAI2_Init+0xc4>)
 8001dc4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001dc8:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8001dca:	4b12      	ldr	r3, [pc, #72]	; (8001e14 <MX_SAI2_Init+0xc4>)
 8001dcc:	2208      	movs	r2, #8
 8001dce:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8001dd0:	4b10      	ldr	r3, [pc, #64]	; (8001e14 <MX_SAI2_Init+0xc4>)
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001dd6:	4b0f      	ldr	r3, [pc, #60]	; (8001e14 <MX_SAI2_Init+0xc4>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001ddc:	4b0d      	ldr	r3, [pc, #52]	; (8001e14 <MX_SAI2_Init+0xc4>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001de2:	4b0c      	ldr	r3, [pc, #48]	; (8001e14 <MX_SAI2_Init+0xc4>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8001de8:	4b0a      	ldr	r3, [pc, #40]	; (8001e14 <MX_SAI2_Init+0xc4>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001dee:	4b09      	ldr	r3, [pc, #36]	; (8001e14 <MX_SAI2_Init+0xc4>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8001df4:	4b07      	ldr	r3, [pc, #28]	; (8001e14 <MX_SAI2_Init+0xc4>)
 8001df6:	2201      	movs	r2, #1
 8001df8:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8001dfa:	4b06      	ldr	r3, [pc, #24]	; (8001e14 <MX_SAI2_Init+0xc4>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	671a      	str	r2, [r3, #112]	; 0x70
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8001e00:	4804      	ldr	r0, [pc, #16]	; (8001e14 <MX_SAI2_Init+0xc4>)
 8001e02:	f005 fdcb 	bl	800799c <HAL_SAI_Init>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <MX_SAI2_Init+0xc0>
  {
    Error_Handler();
 8001e0c:	f000 fc94 	bl	8002738 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8001e10:	bf00      	nop
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	2000051c 	.word	0x2000051c
 8001e18:	40015804 	.word	0x40015804
 8001e1c:	0002ee00 	.word	0x0002ee00

08001e20 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001e24:	4b1b      	ldr	r3, [pc, #108]	; (8001e94 <MX_SPI1_Init+0x74>)
 8001e26:	4a1c      	ldr	r2, [pc, #112]	; (8001e98 <MX_SPI1_Init+0x78>)
 8001e28:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001e2a:	4b1a      	ldr	r3, [pc, #104]	; (8001e94 <MX_SPI1_Init+0x74>)
 8001e2c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e30:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001e32:	4b18      	ldr	r3, [pc, #96]	; (8001e94 <MX_SPI1_Init+0x74>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e38:	4b16      	ldr	r3, [pc, #88]	; (8001e94 <MX_SPI1_Init+0x74>)
 8001e3a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001e3e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e40:	4b14      	ldr	r3, [pc, #80]	; (8001e94 <MX_SPI1_Init+0x74>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e46:	4b13      	ldr	r3, [pc, #76]	; (8001e94 <MX_SPI1_Init+0x74>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001e4c:	4b11      	ldr	r3, [pc, #68]	; (8001e94 <MX_SPI1_Init+0x74>)
 8001e4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e52:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001e54:	4b0f      	ldr	r3, [pc, #60]	; (8001e94 <MX_SPI1_Init+0x74>)
 8001e56:	2218      	movs	r2, #24
 8001e58:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e5a:	4b0e      	ldr	r3, [pc, #56]	; (8001e94 <MX_SPI1_Init+0x74>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e60:	4b0c      	ldr	r3, [pc, #48]	; (8001e94 <MX_SPI1_Init+0x74>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e66:	4b0b      	ldr	r3, [pc, #44]	; (8001e94 <MX_SPI1_Init+0x74>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001e6c:	4b09      	ldr	r3, [pc, #36]	; (8001e94 <MX_SPI1_Init+0x74>)
 8001e6e:	2207      	movs	r2, #7
 8001e70:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001e72:	4b08      	ldr	r3, [pc, #32]	; (8001e94 <MX_SPI1_Init+0x74>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001e78:	4b06      	ldr	r3, [pc, #24]	; (8001e94 <MX_SPI1_Init+0x74>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001e7e:	4805      	ldr	r0, [pc, #20]	; (8001e94 <MX_SPI1_Init+0x74>)
 8001e80:	f006 f8af 	bl	8007fe2 <HAL_SPI_Init>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001e8a:	f000 fc55 	bl	8002738 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001e8e:	bf00      	nop
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	200005b0 	.word	0x200005b0
 8001e98:	40013000 	.word	0x40013000

08001e9c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001ea0:	4b1b      	ldr	r3, [pc, #108]	; (8001f10 <MX_SPI3_Init+0x74>)
 8001ea2:	4a1c      	ldr	r2, [pc, #112]	; (8001f14 <MX_SPI3_Init+0x78>)
 8001ea4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001ea6:	4b1a      	ldr	r3, [pc, #104]	; (8001f10 <MX_SPI3_Init+0x74>)
 8001ea8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001eac:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001eae:	4b18      	ldr	r3, [pc, #96]	; (8001f10 <MX_SPI3_Init+0x74>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8001eb4:	4b16      	ldr	r3, [pc, #88]	; (8001f10 <MX_SPI3_Init+0x74>)
 8001eb6:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001eba:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ebc:	4b14      	ldr	r3, [pc, #80]	; (8001f10 <MX_SPI3_Init+0x74>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ec2:	4b13      	ldr	r3, [pc, #76]	; (8001f10 <MX_SPI3_Init+0x74>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001ec8:	4b11      	ldr	r3, [pc, #68]	; (8001f10 <MX_SPI3_Init+0x74>)
 8001eca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ece:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ed0:	4b0f      	ldr	r3, [pc, #60]	; (8001f10 <MX_SPI3_Init+0x74>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ed6:	4b0e      	ldr	r3, [pc, #56]	; (8001f10 <MX_SPI3_Init+0x74>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001edc:	4b0c      	ldr	r3, [pc, #48]	; (8001f10 <MX_SPI3_Init+0x74>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ee2:	4b0b      	ldr	r3, [pc, #44]	; (8001f10 <MX_SPI3_Init+0x74>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001ee8:	4b09      	ldr	r3, [pc, #36]	; (8001f10 <MX_SPI3_Init+0x74>)
 8001eea:	2207      	movs	r2, #7
 8001eec:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001eee:	4b08      	ldr	r3, [pc, #32]	; (8001f10 <MX_SPI3_Init+0x74>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001ef4:	4b06      	ldr	r3, [pc, #24]	; (8001f10 <MX_SPI3_Init+0x74>)
 8001ef6:	2208      	movs	r2, #8
 8001ef8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001efa:	4805      	ldr	r0, [pc, #20]	; (8001f10 <MX_SPI3_Init+0x74>)
 8001efc:	f006 f871 	bl	8007fe2 <HAL_SPI_Init>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001f06:	f000 fc17 	bl	8002738 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001f0a:	bf00      	nop
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	20000614 	.word	0x20000614
 8001f14:	40003c00 	.word	0x40003c00

08001f18 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b08c      	sub	sp, #48	; 0x30
 8001f1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f1e:	f107 0320 	add.w	r3, r7, #32
 8001f22:	2200      	movs	r2, #0
 8001f24:	601a      	str	r2, [r3, #0]
 8001f26:	605a      	str	r2, [r3, #4]
 8001f28:	609a      	str	r2, [r3, #8]
 8001f2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f2c:	f107 0314 	add.w	r3, r7, #20
 8001f30:	2200      	movs	r2, #0
 8001f32:	601a      	str	r2, [r3, #0]
 8001f34:	605a      	str	r2, [r3, #4]
 8001f36:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001f38:	1d3b      	adds	r3, r7, #4
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	601a      	str	r2, [r3, #0]
 8001f3e:	605a      	str	r2, [r3, #4]
 8001f40:	609a      	str	r2, [r3, #8]
 8001f42:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001f44:	4b2d      	ldr	r3, [pc, #180]	; (8001ffc <MX_TIM1_Init+0xe4>)
 8001f46:	4a2e      	ldr	r2, [pc, #184]	; (8002000 <MX_TIM1_Init+0xe8>)
 8001f48:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 31;
 8001f4a:	4b2c      	ldr	r3, [pc, #176]	; (8001ffc <MX_TIM1_Init+0xe4>)
 8001f4c:	221f      	movs	r2, #31
 8001f4e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f50:	4b2a      	ldr	r3, [pc, #168]	; (8001ffc <MX_TIM1_Init+0xe4>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001f56:	4b29      	ldr	r3, [pc, #164]	; (8001ffc <MX_TIM1_Init+0xe4>)
 8001f58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f5c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f5e:	4b27      	ldr	r3, [pc, #156]	; (8001ffc <MX_TIM1_Init+0xe4>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001f64:	4b25      	ldr	r3, [pc, #148]	; (8001ffc <MX_TIM1_Init+0xe4>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f6a:	4b24      	ldr	r3, [pc, #144]	; (8001ffc <MX_TIM1_Init+0xe4>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001f70:	4822      	ldr	r0, [pc, #136]	; (8001ffc <MX_TIM1_Init+0xe4>)
 8001f72:	f006 ff47 	bl	8008e04 <HAL_TIM_Base_Init>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8001f7c:	f000 fbdc 	bl	8002738 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f84:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001f86:	f107 0320 	add.w	r3, r7, #32
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	481b      	ldr	r0, [pc, #108]	; (8001ffc <MX_TIM1_Init+0xe4>)
 8001f8e:	f007 fe09 	bl	8009ba4 <HAL_TIM_ConfigClockSource>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8001f98:	f000 fbce 	bl	8002738 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001f9c:	4817      	ldr	r0, [pc, #92]	; (8001ffc <MX_TIM1_Init+0xe4>)
 8001f9e:	f007 f985 	bl	80092ac <HAL_TIM_IC_Init>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001fa8:	f000 fbc6 	bl	8002738 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fac:	2300      	movs	r3, #0
 8001fae:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001fb8:	f107 0314 	add.w	r3, r7, #20
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	480f      	ldr	r0, [pc, #60]	; (8001ffc <MX_TIM1_Init+0xe4>)
 8001fc0:	f008 fc40 	bl	800a844 <HAL_TIMEx_MasterConfigSynchronization>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8001fca:	f000 fbb5 	bl	8002738 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001fde:	1d3b      	adds	r3, r7, #4
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	4805      	ldr	r0, [pc, #20]	; (8001ffc <MX_TIM1_Init+0xe4>)
 8001fe6:	f007 fc2c 	bl	8009842 <HAL_TIM_IC_ConfigChannel>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8001ff0:	f000 fba2 	bl	8002738 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001ff4:	bf00      	nop
 8001ff6:	3730      	adds	r7, #48	; 0x30
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	20000678 	.word	0x20000678
 8002000:	40012c00 	.word	0x40012c00

08002004 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b08e      	sub	sp, #56	; 0x38
 8002008:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800200a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800200e:	2200      	movs	r2, #0
 8002010:	601a      	str	r2, [r3, #0]
 8002012:	605a      	str	r2, [r3, #4]
 8002014:	609a      	str	r2, [r3, #8]
 8002016:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002018:	f107 031c 	add.w	r3, r7, #28
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]
 8002020:	605a      	str	r2, [r3, #4]
 8002022:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002024:	463b      	mov	r3, r7
 8002026:	2200      	movs	r2, #0
 8002028:	601a      	str	r2, [r3, #0]
 800202a:	605a      	str	r2, [r3, #4]
 800202c:	609a      	str	r2, [r3, #8]
 800202e:	60da      	str	r2, [r3, #12]
 8002030:	611a      	str	r2, [r3, #16]
 8002032:	615a      	str	r2, [r3, #20]
 8002034:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002036:	4b2e      	ldr	r3, [pc, #184]	; (80020f0 <MX_TIM2_Init+0xec>)
 8002038:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800203c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 319;
 800203e:	4b2c      	ldr	r3, [pc, #176]	; (80020f0 <MX_TIM2_Init+0xec>)
 8002040:	f240 123f 	movw	r2, #319	; 0x13f
 8002044:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002046:	4b2a      	ldr	r3, [pc, #168]	; (80020f0 <MX_TIM2_Init+0xec>)
 8002048:	2200      	movs	r2, #0
 800204a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4000;
 800204c:	4b28      	ldr	r3, [pc, #160]	; (80020f0 <MX_TIM2_Init+0xec>)
 800204e:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8002052:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002054:	4b26      	ldr	r3, [pc, #152]	; (80020f0 <MX_TIM2_Init+0xec>)
 8002056:	2200      	movs	r2, #0
 8002058:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800205a:	4b25      	ldr	r3, [pc, #148]	; (80020f0 <MX_TIM2_Init+0xec>)
 800205c:	2200      	movs	r2, #0
 800205e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002060:	4823      	ldr	r0, [pc, #140]	; (80020f0 <MX_TIM2_Init+0xec>)
 8002062:	f006 fecf 	bl	8008e04 <HAL_TIM_Base_Init>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 800206c:	f000 fb64 	bl	8002738 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002070:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002074:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002076:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800207a:	4619      	mov	r1, r3
 800207c:	481c      	ldr	r0, [pc, #112]	; (80020f0 <MX_TIM2_Init+0xec>)
 800207e:	f007 fd91 	bl	8009ba4 <HAL_TIM_ConfigClockSource>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d001      	beq.n	800208c <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8002088:	f000 fb56 	bl	8002738 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800208c:	4818      	ldr	r0, [pc, #96]	; (80020f0 <MX_TIM2_Init+0xec>)
 800208e:	f006 ffb0 	bl	8008ff2 <HAL_TIM_PWM_Init>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d001      	beq.n	800209c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8002098:	f000 fb4e 	bl	8002738 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800209c:	2300      	movs	r3, #0
 800209e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020a0:	2300      	movs	r3, #0
 80020a2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80020a4:	f107 031c 	add.w	r3, r7, #28
 80020a8:	4619      	mov	r1, r3
 80020aa:	4811      	ldr	r0, [pc, #68]	; (80020f0 <MX_TIM2_Init+0xec>)
 80020ac:	f008 fbca 	bl	800a844 <HAL_TIMEx_MasterConfigSynchronization>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80020b6:	f000 fb3f 	bl	8002738 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020ba:	2360      	movs	r3, #96	; 0x60
 80020bc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1;
 80020be:	2301      	movs	r3, #1
 80020c0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020c2:	2300      	movs	r3, #0
 80020c4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020c6:	2300      	movs	r3, #0
 80020c8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020ca:	463b      	mov	r3, r7
 80020cc:	2200      	movs	r2, #0
 80020ce:	4619      	mov	r1, r3
 80020d0:	4807      	ldr	r0, [pc, #28]	; (80020f0 <MX_TIM2_Init+0xec>)
 80020d2:	f007 fc53 	bl	800997c <HAL_TIM_PWM_ConfigChannel>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 80020dc:	f000 fb2c 	bl	8002738 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80020e0:	4803      	ldr	r0, [pc, #12]	; (80020f0 <MX_TIM2_Init+0xec>)
 80020e2:	f001 f8b3 	bl	800324c <HAL_TIM_MspPostInit>

}
 80020e6:	bf00      	nop
 80020e8:	3738      	adds	r7, #56	; 0x38
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	200006c4 	.word	0x200006c4

080020f4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b08c      	sub	sp, #48	; 0x30
 80020f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020fa:	f107 0320 	add.w	r3, r7, #32
 80020fe:	2200      	movs	r2, #0
 8002100:	601a      	str	r2, [r3, #0]
 8002102:	605a      	str	r2, [r3, #4]
 8002104:	609a      	str	r2, [r3, #8]
 8002106:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002108:	f107 0314 	add.w	r3, r7, #20
 800210c:	2200      	movs	r2, #0
 800210e:	601a      	str	r2, [r3, #0]
 8002110:	605a      	str	r2, [r3, #4]
 8002112:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002114:	1d3b      	adds	r3, r7, #4
 8002116:	2200      	movs	r2, #0
 8002118:	601a      	str	r2, [r3, #0]
 800211a:	605a      	str	r2, [r3, #4]
 800211c:	609a      	str	r2, [r3, #8]
 800211e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002120:	4b2b      	ldr	r3, [pc, #172]	; (80021d0 <MX_TIM3_Init+0xdc>)
 8002122:	4a2c      	ldr	r2, [pc, #176]	; (80021d4 <MX_TIM3_Init+0xe0>)
 8002124:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 31999;
 8002126:	4b2a      	ldr	r3, [pc, #168]	; (80021d0 <MX_TIM3_Init+0xdc>)
 8002128:	f647 42ff 	movw	r2, #31999	; 0x7cff
 800212c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800212e:	4b28      	ldr	r3, [pc, #160]	; (80021d0 <MX_TIM3_Init+0xdc>)
 8002130:	2200      	movs	r2, #0
 8002132:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 32000;
 8002134:	4b26      	ldr	r3, [pc, #152]	; (80021d0 <MX_TIM3_Init+0xdc>)
 8002136:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 800213a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800213c:	4b24      	ldr	r3, [pc, #144]	; (80021d0 <MX_TIM3_Init+0xdc>)
 800213e:	2200      	movs	r2, #0
 8002140:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002142:	4b23      	ldr	r3, [pc, #140]	; (80021d0 <MX_TIM3_Init+0xdc>)
 8002144:	2200      	movs	r2, #0
 8002146:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002148:	4821      	ldr	r0, [pc, #132]	; (80021d0 <MX_TIM3_Init+0xdc>)
 800214a:	f006 fe5b 	bl	8008e04 <HAL_TIM_Base_Init>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d001      	beq.n	8002158 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8002154:	f000 faf0 	bl	8002738 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002158:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800215c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800215e:	f107 0320 	add.w	r3, r7, #32
 8002162:	4619      	mov	r1, r3
 8002164:	481a      	ldr	r0, [pc, #104]	; (80021d0 <MX_TIM3_Init+0xdc>)
 8002166:	f007 fd1d 	bl	8009ba4 <HAL_TIM_ConfigClockSource>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d001      	beq.n	8002174 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8002170:	f000 fae2 	bl	8002738 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8002174:	4816      	ldr	r0, [pc, #88]	; (80021d0 <MX_TIM3_Init+0xdc>)
 8002176:	f007 f899 	bl	80092ac <HAL_TIM_IC_Init>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8002180:	f000 fada 	bl	8002738 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002184:	2300      	movs	r3, #0
 8002186:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002188:	2300      	movs	r3, #0
 800218a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800218c:	f107 0314 	add.w	r3, r7, #20
 8002190:	4619      	mov	r1, r3
 8002192:	480f      	ldr	r0, [pc, #60]	; (80021d0 <MX_TIM3_Init+0xdc>)
 8002194:	f008 fb56 	bl	800a844 <HAL_TIMEx_MasterConfigSynchronization>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 800219e:	f000 facb 	bl	8002738 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80021a2:	2302      	movs	r3, #2
 80021a4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80021a6:	2301      	movs	r3, #1
 80021a8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80021aa:	2300      	movs	r3, #0
 80021ac:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80021ae:	2300      	movs	r3, #0
 80021b0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80021b2:	1d3b      	adds	r3, r7, #4
 80021b4:	2204      	movs	r2, #4
 80021b6:	4619      	mov	r1, r3
 80021b8:	4805      	ldr	r0, [pc, #20]	; (80021d0 <MX_TIM3_Init+0xdc>)
 80021ba:	f007 fb42 	bl	8009842 <HAL_TIM_IC_ConfigChannel>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d001      	beq.n	80021c8 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 80021c4:	f000 fab8 	bl	8002738 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80021c8:	bf00      	nop
 80021ca:	3730      	adds	r7, #48	; 0x30
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	20000710 	.word	0x20000710
 80021d4:	40000400 	.word	0x40000400

080021d8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b08e      	sub	sp, #56	; 0x38
 80021dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021e2:	2200      	movs	r2, #0
 80021e4:	601a      	str	r2, [r3, #0]
 80021e6:	605a      	str	r2, [r3, #4]
 80021e8:	609a      	str	r2, [r3, #8]
 80021ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021ec:	f107 031c 	add.w	r3, r7, #28
 80021f0:	2200      	movs	r2, #0
 80021f2:	601a      	str	r2, [r3, #0]
 80021f4:	605a      	str	r2, [r3, #4]
 80021f6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021f8:	463b      	mov	r3, r7
 80021fa:	2200      	movs	r2, #0
 80021fc:	601a      	str	r2, [r3, #0]
 80021fe:	605a      	str	r2, [r3, #4]
 8002200:	609a      	str	r2, [r3, #8]
 8002202:	60da      	str	r2, [r3, #12]
 8002204:	611a      	str	r2, [r3, #16]
 8002206:	615a      	str	r2, [r3, #20]
 8002208:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800220a:	4b38      	ldr	r3, [pc, #224]	; (80022ec <MX_TIM4_Init+0x114>)
 800220c:	4a38      	ldr	r2, [pc, #224]	; (80022f0 <MX_TIM4_Init+0x118>)
 800220e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 6399;
 8002210:	4b36      	ldr	r3, [pc, #216]	; (80022ec <MX_TIM4_Init+0x114>)
 8002212:	f641 02ff 	movw	r2, #6399	; 0x18ff
 8002216:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002218:	4b34      	ldr	r3, [pc, #208]	; (80022ec <MX_TIM4_Init+0x114>)
 800221a:	2200      	movs	r2, #0
 800221c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 800221e:	4b33      	ldr	r3, [pc, #204]	; (80022ec <MX_TIM4_Init+0x114>)
 8002220:	2264      	movs	r2, #100	; 0x64
 8002222:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002224:	4b31      	ldr	r3, [pc, #196]	; (80022ec <MX_TIM4_Init+0x114>)
 8002226:	2200      	movs	r2, #0
 8002228:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800222a:	4b30      	ldr	r3, [pc, #192]	; (80022ec <MX_TIM4_Init+0x114>)
 800222c:	2200      	movs	r2, #0
 800222e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002230:	482e      	ldr	r0, [pc, #184]	; (80022ec <MX_TIM4_Init+0x114>)
 8002232:	f006 fde7 	bl	8008e04 <HAL_TIM_Base_Init>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d001      	beq.n	8002240 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 800223c:	f000 fa7c 	bl	8002738 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002240:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002244:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002246:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800224a:	4619      	mov	r1, r3
 800224c:	4827      	ldr	r0, [pc, #156]	; (80022ec <MX_TIM4_Init+0x114>)
 800224e:	f007 fca9 	bl	8009ba4 <HAL_TIM_ConfigClockSource>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d001      	beq.n	800225c <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8002258:	f000 fa6e 	bl	8002738 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800225c:	4823      	ldr	r0, [pc, #140]	; (80022ec <MX_TIM4_Init+0x114>)
 800225e:	f006 fec8 	bl	8008ff2 <HAL_TIM_PWM_Init>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d001      	beq.n	800226c <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8002268:	f000 fa66 	bl	8002738 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800226c:	2300      	movs	r3, #0
 800226e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002270:	2300      	movs	r3, #0
 8002272:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002274:	f107 031c 	add.w	r3, r7, #28
 8002278:	4619      	mov	r1, r3
 800227a:	481c      	ldr	r0, [pc, #112]	; (80022ec <MX_TIM4_Init+0x114>)
 800227c:	f008 fae2 	bl	800a844 <HAL_TIMEx_MasterConfigSynchronization>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8002286:	f000 fa57 	bl	8002738 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800228a:	2360      	movs	r3, #96	; 0x60
 800228c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800228e:	2300      	movs	r3, #0
 8002290:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002292:	2300      	movs	r3, #0
 8002294:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002296:	2300      	movs	r3, #0
 8002298:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800229a:	463b      	mov	r3, r7
 800229c:	2200      	movs	r2, #0
 800229e:	4619      	mov	r1, r3
 80022a0:	4812      	ldr	r0, [pc, #72]	; (80022ec <MX_TIM4_Init+0x114>)
 80022a2:	f007 fb6b 	bl	800997c <HAL_TIM_PWM_ConfigChannel>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d001      	beq.n	80022b0 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80022ac:	f000 fa44 	bl	8002738 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80022b0:	463b      	mov	r3, r7
 80022b2:	2208      	movs	r2, #8
 80022b4:	4619      	mov	r1, r3
 80022b6:	480d      	ldr	r0, [pc, #52]	; (80022ec <MX_TIM4_Init+0x114>)
 80022b8:	f007 fb60 	bl	800997c <HAL_TIM_PWM_ConfigChannel>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 80022c2:	f000 fa39 	bl	8002738 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80022c6:	463b      	mov	r3, r7
 80022c8:	220c      	movs	r2, #12
 80022ca:	4619      	mov	r1, r3
 80022cc:	4807      	ldr	r0, [pc, #28]	; (80022ec <MX_TIM4_Init+0x114>)
 80022ce:	f007 fb55 	bl	800997c <HAL_TIM_PWM_ConfigChannel>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d001      	beq.n	80022dc <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 80022d8:	f000 fa2e 	bl	8002738 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80022dc:	4803      	ldr	r0, [pc, #12]	; (80022ec <MX_TIM4_Init+0x114>)
 80022de:	f000 ffb5 	bl	800324c <HAL_TIM_MspPostInit>

}
 80022e2:	bf00      	nop
 80022e4:	3738      	adds	r7, #56	; 0x38
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	2000075c 	.word	0x2000075c
 80022f0:	40000800 	.word	0x40000800

080022f4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b088      	sub	sp, #32
 80022f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022fa:	f107 0310 	add.w	r3, r7, #16
 80022fe:	2200      	movs	r2, #0
 8002300:	601a      	str	r2, [r3, #0]
 8002302:	605a      	str	r2, [r3, #4]
 8002304:	609a      	str	r2, [r3, #8]
 8002306:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002308:	1d3b      	adds	r3, r7, #4
 800230a:	2200      	movs	r2, #0
 800230c:	601a      	str	r2, [r3, #0]
 800230e:	605a      	str	r2, [r3, #4]
 8002310:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002312:	4b1e      	ldr	r3, [pc, #120]	; (800238c <MX_TIM5_Init+0x98>)
 8002314:	4a1e      	ldr	r2, [pc, #120]	; (8002390 <MX_TIM5_Init+0x9c>)
 8002316:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 31999;
 8002318:	4b1c      	ldr	r3, [pc, #112]	; (800238c <MX_TIM5_Init+0x98>)
 800231a:	f647 42ff 	movw	r2, #31999	; 0x7cff
 800231e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002320:	4b1a      	ldr	r3, [pc, #104]	; (800238c <MX_TIM5_Init+0x98>)
 8002322:	2200      	movs	r2, #0
 8002324:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 5000;
 8002326:	4b19      	ldr	r3, [pc, #100]	; (800238c <MX_TIM5_Init+0x98>)
 8002328:	f241 3288 	movw	r2, #5000	; 0x1388
 800232c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800232e:	4b17      	ldr	r3, [pc, #92]	; (800238c <MX_TIM5_Init+0x98>)
 8002330:	2200      	movs	r2, #0
 8002332:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002334:	4b15      	ldr	r3, [pc, #84]	; (800238c <MX_TIM5_Init+0x98>)
 8002336:	2200      	movs	r2, #0
 8002338:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800233a:	4814      	ldr	r0, [pc, #80]	; (800238c <MX_TIM5_Init+0x98>)
 800233c:	f006 fd62 	bl	8008e04 <HAL_TIM_Base_Init>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 8002346:	f000 f9f7 	bl	8002738 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800234a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800234e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002350:	f107 0310 	add.w	r3, r7, #16
 8002354:	4619      	mov	r1, r3
 8002356:	480d      	ldr	r0, [pc, #52]	; (800238c <MX_TIM5_Init+0x98>)
 8002358:	f007 fc24 	bl	8009ba4 <HAL_TIM_ConfigClockSource>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d001      	beq.n	8002366 <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 8002362:	f000 f9e9 	bl	8002738 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002366:	2300      	movs	r3, #0
 8002368:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800236a:	2300      	movs	r3, #0
 800236c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800236e:	1d3b      	adds	r3, r7, #4
 8002370:	4619      	mov	r1, r3
 8002372:	4806      	ldr	r0, [pc, #24]	; (800238c <MX_TIM5_Init+0x98>)
 8002374:	f008 fa66 	bl	800a844 <HAL_TIMEx_MasterConfigSynchronization>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d001      	beq.n	8002382 <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 800237e:	f000 f9db 	bl	8002738 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002382:	bf00      	nop
 8002384:	3720      	adds	r7, #32
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	200007a8 	.word	0x200007a8
 8002390:	40000c00 	.word	0x40000c00

08002394 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b096      	sub	sp, #88	; 0x58
 8002398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800239a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800239e:	2200      	movs	r2, #0
 80023a0:	601a      	str	r2, [r3, #0]
 80023a2:	605a      	str	r2, [r3, #4]
 80023a4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80023aa:	2200      	movs	r2, #0
 80023ac:	601a      	str	r2, [r3, #0]
 80023ae:	605a      	str	r2, [r3, #4]
 80023b0:	609a      	str	r2, [r3, #8]
 80023b2:	60da      	str	r2, [r3, #12]
 80023b4:	611a      	str	r2, [r3, #16]
 80023b6:	615a      	str	r2, [r3, #20]
 80023b8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80023ba:	1d3b      	adds	r3, r7, #4
 80023bc:	222c      	movs	r2, #44	; 0x2c
 80023be:	2100      	movs	r1, #0
 80023c0:	4618      	mov	r0, r3
 80023c2:	f009 fa31 	bl	800b828 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80023c6:	4b33      	ldr	r3, [pc, #204]	; (8002494 <MX_TIM15_Init+0x100>)
 80023c8:	4a33      	ldr	r2, [pc, #204]	; (8002498 <MX_TIM15_Init+0x104>)
 80023ca:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 80023cc:	4b31      	ldr	r3, [pc, #196]	; (8002494 <MX_TIM15_Init+0x100>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023d2:	4b30      	ldr	r3, [pc, #192]	; (8002494 <MX_TIM15_Init+0x100>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 80023d8:	4b2e      	ldr	r3, [pc, #184]	; (8002494 <MX_TIM15_Init+0x100>)
 80023da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023de:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023e0:	4b2c      	ldr	r3, [pc, #176]	; (8002494 <MX_TIM15_Init+0x100>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80023e6:	4b2b      	ldr	r3, [pc, #172]	; (8002494 <MX_TIM15_Init+0x100>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023ec:	4b29      	ldr	r3, [pc, #164]	; (8002494 <MX_TIM15_Init+0x100>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80023f2:	4828      	ldr	r0, [pc, #160]	; (8002494 <MX_TIM15_Init+0x100>)
 80023f4:	f006 fdfd 	bl	8008ff2 <HAL_TIM_PWM_Init>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 80023fe:	f000 f99b 	bl	8002738 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002402:	2300      	movs	r3, #0
 8002404:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002406:	2300      	movs	r3, #0
 8002408:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800240a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800240e:	4619      	mov	r1, r3
 8002410:	4820      	ldr	r0, [pc, #128]	; (8002494 <MX_TIM15_Init+0x100>)
 8002412:	f008 fa17 	bl	800a844 <HAL_TIMEx_MasterConfigSynchronization>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d001      	beq.n	8002420 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 800241c:	f000 f98c 	bl	8002738 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002420:	2360      	movs	r3, #96	; 0x60
 8002422:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8002424:	2300      	movs	r3, #0
 8002426:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002428:	2300      	movs	r3, #0
 800242a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800242c:	2300      	movs	r3, #0
 800242e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002430:	2300      	movs	r3, #0
 8002432:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002434:	2300      	movs	r3, #0
 8002436:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002438:	2300      	movs	r3, #0
 800243a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800243c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002440:	2200      	movs	r2, #0
 8002442:	4619      	mov	r1, r3
 8002444:	4813      	ldr	r0, [pc, #76]	; (8002494 <MX_TIM15_Init+0x100>)
 8002446:	f007 fa99 	bl	800997c <HAL_TIM_PWM_ConfigChannel>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d001      	beq.n	8002454 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8002450:	f000 f972 	bl	8002738 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002454:	2300      	movs	r3, #0
 8002456:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002458:	2300      	movs	r3, #0
 800245a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800245c:	2300      	movs	r3, #0
 800245e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002460:	2300      	movs	r3, #0
 8002462:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002464:	2300      	movs	r3, #0
 8002466:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002468:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800246c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800246e:	2300      	movs	r3, #0
 8002470:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8002472:	1d3b      	adds	r3, r7, #4
 8002474:	4619      	mov	r1, r3
 8002476:	4807      	ldr	r0, [pc, #28]	; (8002494 <MX_TIM15_Init+0x100>)
 8002478:	f008 fa6c 	bl	800a954 <HAL_TIMEx_ConfigBreakDeadTime>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <MX_TIM15_Init+0xf2>
  {
    Error_Handler();
 8002482:	f000 f959 	bl	8002738 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8002486:	4803      	ldr	r0, [pc, #12]	; (8002494 <MX_TIM15_Init+0x100>)
 8002488:	f000 fee0 	bl	800324c <HAL_TIM_MspPostInit>

}
 800248c:	bf00      	nop
 800248e:	3758      	adds	r7, #88	; 0x58
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	200007f4 	.word	0x200007f4
 8002498:	40014000 	.word	0x40014000

0800249c <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80024a0:	bf00      	nop
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
	...

080024ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b08e      	sub	sp, #56	; 0x38
 80024b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024b6:	2200      	movs	r2, #0
 80024b8:	601a      	str	r2, [r3, #0]
 80024ba:	605a      	str	r2, [r3, #4]
 80024bc:	609a      	str	r2, [r3, #8]
 80024be:	60da      	str	r2, [r3, #12]
 80024c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80024c2:	4b8d      	ldr	r3, [pc, #564]	; (80026f8 <MX_GPIO_Init+0x24c>)
 80024c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024c6:	4a8c      	ldr	r2, [pc, #560]	; (80026f8 <MX_GPIO_Init+0x24c>)
 80024c8:	f043 0310 	orr.w	r3, r3, #16
 80024cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024ce:	4b8a      	ldr	r3, [pc, #552]	; (80026f8 <MX_GPIO_Init+0x24c>)
 80024d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024d2:	f003 0310 	and.w	r3, r3, #16
 80024d6:	623b      	str	r3, [r7, #32]
 80024d8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024da:	4b87      	ldr	r3, [pc, #540]	; (80026f8 <MX_GPIO_Init+0x24c>)
 80024dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024de:	4a86      	ldr	r2, [pc, #536]	; (80026f8 <MX_GPIO_Init+0x24c>)
 80024e0:	f043 0304 	orr.w	r3, r3, #4
 80024e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024e6:	4b84      	ldr	r3, [pc, #528]	; (80026f8 <MX_GPIO_Init+0x24c>)
 80024e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ea:	f003 0304 	and.w	r3, r3, #4
 80024ee:	61fb      	str	r3, [r7, #28]
 80024f0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80024f2:	4b81      	ldr	r3, [pc, #516]	; (80026f8 <MX_GPIO_Init+0x24c>)
 80024f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024f6:	4a80      	ldr	r2, [pc, #512]	; (80026f8 <MX_GPIO_Init+0x24c>)
 80024f8:	f043 0320 	orr.w	r3, r3, #32
 80024fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024fe:	4b7e      	ldr	r3, [pc, #504]	; (80026f8 <MX_GPIO_Init+0x24c>)
 8002500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002502:	f003 0320 	and.w	r3, r3, #32
 8002506:	61bb      	str	r3, [r7, #24]
 8002508:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800250a:	4b7b      	ldr	r3, [pc, #492]	; (80026f8 <MX_GPIO_Init+0x24c>)
 800250c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800250e:	4a7a      	ldr	r2, [pc, #488]	; (80026f8 <MX_GPIO_Init+0x24c>)
 8002510:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002514:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002516:	4b78      	ldr	r3, [pc, #480]	; (80026f8 <MX_GPIO_Init+0x24c>)
 8002518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800251a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800251e:	617b      	str	r3, [r7, #20]
 8002520:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002522:	4b75      	ldr	r3, [pc, #468]	; (80026f8 <MX_GPIO_Init+0x24c>)
 8002524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002526:	4a74      	ldr	r2, [pc, #464]	; (80026f8 <MX_GPIO_Init+0x24c>)
 8002528:	f043 0301 	orr.w	r3, r3, #1
 800252c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800252e:	4b72      	ldr	r3, [pc, #456]	; (80026f8 <MX_GPIO_Init+0x24c>)
 8002530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002532:	f003 0301 	and.w	r3, r3, #1
 8002536:	613b      	str	r3, [r7, #16]
 8002538:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800253a:	4b6f      	ldr	r3, [pc, #444]	; (80026f8 <MX_GPIO_Init+0x24c>)
 800253c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800253e:	4a6e      	ldr	r2, [pc, #440]	; (80026f8 <MX_GPIO_Init+0x24c>)
 8002540:	f043 0302 	orr.w	r3, r3, #2
 8002544:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002546:	4b6c      	ldr	r3, [pc, #432]	; (80026f8 <MX_GPIO_Init+0x24c>)
 8002548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	60fb      	str	r3, [r7, #12]
 8002550:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002552:	4b69      	ldr	r3, [pc, #420]	; (80026f8 <MX_GPIO_Init+0x24c>)
 8002554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002556:	4a68      	ldr	r2, [pc, #416]	; (80026f8 <MX_GPIO_Init+0x24c>)
 8002558:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800255c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800255e:	4b66      	ldr	r3, [pc, #408]	; (80026f8 <MX_GPIO_Init+0x24c>)
 8002560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002566:	60bb      	str	r3, [r7, #8]
 8002568:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800256a:	4b63      	ldr	r3, [pc, #396]	; (80026f8 <MX_GPIO_Init+0x24c>)
 800256c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800256e:	4a62      	ldr	r2, [pc, #392]	; (80026f8 <MX_GPIO_Init+0x24c>)
 8002570:	f043 0308 	orr.w	r3, r3, #8
 8002574:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002576:	4b60      	ldr	r3, [pc, #384]	; (80026f8 <MX_GPIO_Init+0x24c>)
 8002578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800257a:	f003 0308 	and.w	r3, r3, #8
 800257e:	607b      	str	r3, [r7, #4]
 8002580:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8002582:	f002 fdc7 	bl	8005114 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8002586:	2200      	movs	r2, #0
 8002588:	f44f 5146 	mov.w	r1, #12672	; 0x3180
 800258c:	485b      	ldr	r0, [pc, #364]	; (80026fc <MX_GPIO_Init+0x250>)
 800258e:	f002 fcd5 	bl	8004f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8002592:	2200      	movs	r2, #0
 8002594:	2104      	movs	r1, #4
 8002596:	485a      	ldr	r0, [pc, #360]	; (8002700 <MX_GPIO_Init+0x254>)
 8002598:	f002 fcd0 	bl	8004f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800259c:	2200      	movs	r2, #0
 800259e:	217f      	movs	r1, #127	; 0x7f
 80025a0:	4858      	ldr	r0, [pc, #352]	; (8002704 <MX_GPIO_Init+0x258>)
 80025a2:	f002 fccb 	bl	8004f3c <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 80025a6:	2200      	movs	r2, #0
 80025a8:	2180      	movs	r1, #128	; 0x80
 80025aa:	4857      	ldr	r0, [pc, #348]	; (8002708 <MX_GPIO_Init+0x25c>)
 80025ac:	f002 fcc6 	bl	8004f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 80025b0:	2200      	movs	r2, #0
 80025b2:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 80025b6:	4855      	ldr	r0, [pc, #340]	; (800270c <MX_GPIO_Init+0x260>)
 80025b8:	f002 fcc0 	bl	8004f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80025bc:	230c      	movs	r3, #12
 80025be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c0:	2302      	movs	r3, #2
 80025c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c4:	2300      	movs	r3, #0
 80025c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025c8:	2300      	movs	r3, #0
 80025ca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80025cc:	230d      	movs	r3, #13
 80025ce:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80025d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025d4:	4619      	mov	r1, r3
 80025d6:	484c      	ldr	r0, [pc, #304]	; (8002708 <MX_GPIO_Init+0x25c>)
 80025d8:	f002 fb1e 	bl	8004c18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF7 PF8 PF12 PF13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_12|GPIO_PIN_13;
 80025dc:	f44f 5346 	mov.w	r3, #12672	; 0x3180
 80025e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025e2:	2301      	movs	r3, #1
 80025e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e6:	2300      	movs	r3, #0
 80025e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ea:	2300      	movs	r3, #0
 80025ec:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80025ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025f2:	4619      	mov	r1, r3
 80025f4:	4841      	ldr	r0, [pc, #260]	; (80026fc <MX_GPIO_Init+0x250>)
 80025f6:	f002 fb0f 	bl	8004c18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80025fa:	2304      	movs	r3, #4
 80025fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025fe:	2301      	movs	r3, #1
 8002600:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002602:	2300      	movs	r3, #0
 8002604:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002606:	2300      	movs	r3, #0
 8002608:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800260a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800260e:	4619      	mov	r1, r3
 8002610:	483b      	ldr	r0, [pc, #236]	; (8002700 <MX_GPIO_Init+0x254>)
 8002612:	f002 fb01 	bl	8004c18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG2 PG3
                           PG4 PG5 PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002616:	237f      	movs	r3, #127	; 0x7f
 8002618:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800261a:	2301      	movs	r3, #1
 800261c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261e:	2300      	movs	r3, #0
 8002620:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002622:	2300      	movs	r3, #0
 8002624:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002626:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800262a:	4619      	mov	r1, r3
 800262c:	4835      	ldr	r0, [pc, #212]	; (8002704 <MX_GPIO_Init+0x258>)
 800262e:	f002 faf3 	bl	8004c18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002632:	2380      	movs	r3, #128	; 0x80
 8002634:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002636:	2301      	movs	r3, #1
 8002638:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800263a:	2300      	movs	r3, #0
 800263c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800263e:	2300      	movs	r3, #0
 8002640:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002642:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002646:	4619      	mov	r1, r3
 8002648:	482f      	ldr	r0, [pc, #188]	; (8002708 <MX_GPIO_Init+0x25c>)
 800264a:	f002 fae5 	bl	8004c18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800264e:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002652:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002654:	2301      	movs	r3, #1
 8002656:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002658:	2300      	movs	r3, #0
 800265a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800265c:	2300      	movs	r3, #0
 800265e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002660:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002664:	4619      	mov	r1, r3
 8002666:	4829      	ldr	r0, [pc, #164]	; (800270c <MX_GPIO_Init+0x260>)
 8002668:	f002 fad6 	bl	8004c18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800266c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002670:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002672:	2302      	movs	r3, #2
 8002674:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002676:	2300      	movs	r3, #0
 8002678:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800267a:	2303      	movs	r3, #3
 800267c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800267e:	230a      	movs	r3, #10
 8002680:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002682:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002686:	4619      	mov	r1, r3
 8002688:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800268c:	f002 fac4 	bl	8004c18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002690:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002694:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002696:	2300      	movs	r3, #0
 8002698:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269a:	2300      	movs	r3, #0
 800269c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800269e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026a2:	4619      	mov	r1, r3
 80026a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026a8:	f002 fab6 	bl	8004c18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80026ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b2:	2302      	movs	r3, #2
 80026b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b6:	2300      	movs	r3, #0
 80026b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026ba:	2303      	movs	r3, #3
 80026bc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80026be:	230c      	movs	r3, #12
 80026c0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026c6:	4619      	mov	r1, r3
 80026c8:	4810      	ldr	r0, [pc, #64]	; (800270c <MX_GPIO_Init+0x260>)
 80026ca:	f002 faa5 	bl	8004c18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80026ce:	2304      	movs	r3, #4
 80026d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d2:	2302      	movs	r3, #2
 80026d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d6:	2300      	movs	r3, #0
 80026d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026da:	2303      	movs	r3, #3
 80026dc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80026de:	230c      	movs	r3, #12
 80026e0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026e6:	4619      	mov	r1, r3
 80026e8:	4809      	ldr	r0, [pc, #36]	; (8002710 <MX_GPIO_Init+0x264>)
 80026ea:	f002 fa95 	bl	8004c18 <HAL_GPIO_Init>

}
 80026ee:	bf00      	nop
 80026f0:	3738      	adds	r7, #56	; 0x38
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	40021000 	.word	0x40021000
 80026fc:	48001400 	.word	0x48001400
 8002700:	48000400 	.word	0x48000400
 8002704:	48001800 	.word	0x48001800
 8002708:	48001000 	.word	0x48001000
 800270c:	48000800 	.word	0x48000800
 8002710:	48000c00 	.word	0x48000c00

08002714 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 800271c:	1d39      	adds	r1, r7, #4
 800271e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002722:	2201      	movs	r2, #1
 8002724:	4803      	ldr	r0, [pc, #12]	; (8002734 <__io_putchar+0x20>)
 8002726:	f008 fa01 	bl	800ab2c <HAL_UART_Transmit>
  return ch;
 800272a:	687b      	ldr	r3, [r7, #4]
}
 800272c:	4618      	mov	r0, r3
 800272e:	3708      	adds	r7, #8
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	2000036c 	.word	0x2000036c

08002738 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800273c:	b672      	cpsid	i
}
 800273e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002740:	e7fe      	b.n	8002740 <Error_Handler+0x8>
	...

08002744 <motor_control>:
 *  Created on: Mar 12, 2023
 *      Author: ericding
 */
#include "motor_control.h"

void motor_control (uint8_t mode) {
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	4603      	mov	r3, r0
 800274c:	71fb      	strb	r3, [r7, #7]
	static uint8_t rmotor_pwm_val = 20;
	static uint8_t lmotor_h_bridge_in1 = 1;
	static uint8_t lmotor_h_bridge_in2 = 0;
	static uint8_t rmotor_h_bridge_in3 = 1;
	static uint8_t rmotor_h_bridge_in4 = 0;
	switch(mode) {
 800274e:	79fb      	ldrb	r3, [r7, #7]
 8002750:	2b06      	cmp	r3, #6
 8002752:	f200 8096 	bhi.w	8002882 <motor_control+0x13e>
 8002756:	a201      	add	r2, pc, #4	; (adr r2, 800275c <motor_control+0x18>)
 8002758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800275c:	08002779 	.word	0x08002779
 8002760:	0800279f 	.word	0x0800279f
 8002764:	080027c5 	.word	0x080027c5
 8002768:	080027eb 	.word	0x080027eb
 800276c:	08002811 	.word	0x08002811
 8002770:	08002837 	.word	0x08002837
 8002774:	0800285d 	.word	0x0800285d
		case 0 :
			lmotor_pwm_val = 50;
 8002778:	4b62      	ldr	r3, [pc, #392]	; (8002904 <motor_control+0x1c0>)
 800277a:	2232      	movs	r2, #50	; 0x32
 800277c:	701a      	strb	r2, [r3, #0]
			rmotor_pwm_val = 50;
 800277e:	4b62      	ldr	r3, [pc, #392]	; (8002908 <motor_control+0x1c4>)
 8002780:	2232      	movs	r2, #50	; 0x32
 8002782:	701a      	strb	r2, [r3, #0]
			lmotor_h_bridge_in1 = 1;
 8002784:	4b61      	ldr	r3, [pc, #388]	; (800290c <motor_control+0x1c8>)
 8002786:	2201      	movs	r2, #1
 8002788:	701a      	strb	r2, [r3, #0]
			lmotor_h_bridge_in2 = 0;
 800278a:	4b61      	ldr	r3, [pc, #388]	; (8002910 <motor_control+0x1cc>)
 800278c:	2200      	movs	r2, #0
 800278e:	701a      	strb	r2, [r3, #0]
			rmotor_h_bridge_in3 = 1;
 8002790:	4b60      	ldr	r3, [pc, #384]	; (8002914 <motor_control+0x1d0>)
 8002792:	2201      	movs	r2, #1
 8002794:	701a      	strb	r2, [r3, #0]
			rmotor_h_bridge_in4 = 0;
 8002796:	4b60      	ldr	r3, [pc, #384]	; (8002918 <motor_control+0x1d4>)
 8002798:	2200      	movs	r2, #0
 800279a:	701a      	strb	r2, [r3, #0]
			break;
 800279c:	e084      	b.n	80028a8 <motor_control+0x164>
		case 1:
			lmotor_pwm_val = 70;
 800279e:	4b59      	ldr	r3, [pc, #356]	; (8002904 <motor_control+0x1c0>)
 80027a0:	2246      	movs	r2, #70	; 0x46
 80027a2:	701a      	strb	r2, [r3, #0]
			rmotor_pwm_val = 70;
 80027a4:	4b58      	ldr	r3, [pc, #352]	; (8002908 <motor_control+0x1c4>)
 80027a6:	2246      	movs	r2, #70	; 0x46
 80027a8:	701a      	strb	r2, [r3, #0]
			lmotor_h_bridge_in1 = 0;
 80027aa:	4b58      	ldr	r3, [pc, #352]	; (800290c <motor_control+0x1c8>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	701a      	strb	r2, [r3, #0]
			lmotor_h_bridge_in2 = 1;
 80027b0:	4b57      	ldr	r3, [pc, #348]	; (8002910 <motor_control+0x1cc>)
 80027b2:	2201      	movs	r2, #1
 80027b4:	701a      	strb	r2, [r3, #0]
			rmotor_h_bridge_in3 = 1;
 80027b6:	4b57      	ldr	r3, [pc, #348]	; (8002914 <motor_control+0x1d0>)
 80027b8:	2201      	movs	r2, #1
 80027ba:	701a      	strb	r2, [r3, #0]
			rmotor_h_bridge_in4 = 0;
 80027bc:	4b56      	ldr	r3, [pc, #344]	; (8002918 <motor_control+0x1d4>)
 80027be:	2200      	movs	r2, #0
 80027c0:	701a      	strb	r2, [r3, #0]
			break;
 80027c2:	e071      	b.n	80028a8 <motor_control+0x164>
		case 2:
			lmotor_pwm_val = 70;
 80027c4:	4b4f      	ldr	r3, [pc, #316]	; (8002904 <motor_control+0x1c0>)
 80027c6:	2246      	movs	r2, #70	; 0x46
 80027c8:	701a      	strb	r2, [r3, #0]
			rmotor_pwm_val = 70;
 80027ca:	4b4f      	ldr	r3, [pc, #316]	; (8002908 <motor_control+0x1c4>)
 80027cc:	2246      	movs	r2, #70	; 0x46
 80027ce:	701a      	strb	r2, [r3, #0]
			lmotor_h_bridge_in1 = 1;
 80027d0:	4b4e      	ldr	r3, [pc, #312]	; (800290c <motor_control+0x1c8>)
 80027d2:	2201      	movs	r2, #1
 80027d4:	701a      	strb	r2, [r3, #0]
			lmotor_h_bridge_in2 = 0;
 80027d6:	4b4e      	ldr	r3, [pc, #312]	; (8002910 <motor_control+0x1cc>)
 80027d8:	2200      	movs	r2, #0
 80027da:	701a      	strb	r2, [r3, #0]
			rmotor_h_bridge_in3 = 0;
 80027dc:	4b4d      	ldr	r3, [pc, #308]	; (8002914 <motor_control+0x1d0>)
 80027de:	2200      	movs	r2, #0
 80027e0:	701a      	strb	r2, [r3, #0]
			rmotor_h_bridge_in4 = 1;
 80027e2:	4b4d      	ldr	r3, [pc, #308]	; (8002918 <motor_control+0x1d4>)
 80027e4:	2201      	movs	r2, #1
 80027e6:	701a      	strb	r2, [r3, #0]
			break;
 80027e8:	e05e      	b.n	80028a8 <motor_control+0x164>
		case 3:
			lmotor_pwm_val = 70;
 80027ea:	4b46      	ldr	r3, [pc, #280]	; (8002904 <motor_control+0x1c0>)
 80027ec:	2246      	movs	r2, #70	; 0x46
 80027ee:	701a      	strb	r2, [r3, #0]
			rmotor_pwm_val = 70;
 80027f0:	4b45      	ldr	r3, [pc, #276]	; (8002908 <motor_control+0x1c4>)
 80027f2:	2246      	movs	r2, #70	; 0x46
 80027f4:	701a      	strb	r2, [r3, #0]
			lmotor_h_bridge_in1 = 0;
 80027f6:	4b45      	ldr	r3, [pc, #276]	; (800290c <motor_control+0x1c8>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	701a      	strb	r2, [r3, #0]
			lmotor_h_bridge_in2 = 1;
 80027fc:	4b44      	ldr	r3, [pc, #272]	; (8002910 <motor_control+0x1cc>)
 80027fe:	2201      	movs	r2, #1
 8002800:	701a      	strb	r2, [r3, #0]
			rmotor_h_bridge_in3 = 1;
 8002802:	4b44      	ldr	r3, [pc, #272]	; (8002914 <motor_control+0x1d0>)
 8002804:	2201      	movs	r2, #1
 8002806:	701a      	strb	r2, [r3, #0]
			rmotor_h_bridge_in4 = 0;
 8002808:	4b43      	ldr	r3, [pc, #268]	; (8002918 <motor_control+0x1d4>)
 800280a:	2200      	movs	r2, #0
 800280c:	701a      	strb	r2, [r3, #0]
			break;
 800280e:	e04b      	b.n	80028a8 <motor_control+0x164>
		case 4:
			lmotor_pwm_val = 50;
 8002810:	4b3c      	ldr	r3, [pc, #240]	; (8002904 <motor_control+0x1c0>)
 8002812:	2232      	movs	r2, #50	; 0x32
 8002814:	701a      	strb	r2, [r3, #0]
			rmotor_pwm_val = 50;
 8002816:	4b3c      	ldr	r3, [pc, #240]	; (8002908 <motor_control+0x1c4>)
 8002818:	2232      	movs	r2, #50	; 0x32
 800281a:	701a      	strb	r2, [r3, #0]
			lmotor_h_bridge_in1 = 0;
 800281c:	4b3b      	ldr	r3, [pc, #236]	; (800290c <motor_control+0x1c8>)
 800281e:	2200      	movs	r2, #0
 8002820:	701a      	strb	r2, [r3, #0]
			lmotor_h_bridge_in2 = 1;
 8002822:	4b3b      	ldr	r3, [pc, #236]	; (8002910 <motor_control+0x1cc>)
 8002824:	2201      	movs	r2, #1
 8002826:	701a      	strb	r2, [r3, #0]
			rmotor_h_bridge_in3 = 0;
 8002828:	4b3a      	ldr	r3, [pc, #232]	; (8002914 <motor_control+0x1d0>)
 800282a:	2200      	movs	r2, #0
 800282c:	701a      	strb	r2, [r3, #0]
			rmotor_h_bridge_in4 = 1;
 800282e:	4b3a      	ldr	r3, [pc, #232]	; (8002918 <motor_control+0x1d4>)
 8002830:	2201      	movs	r2, #1
 8002832:	701a      	strb	r2, [r3, #0]
			break;
 8002834:	e038      	b.n	80028a8 <motor_control+0x164>
		case 5:
			lmotor_pwm_val = 100;
 8002836:	4b33      	ldr	r3, [pc, #204]	; (8002904 <motor_control+0x1c0>)
 8002838:	2264      	movs	r2, #100	; 0x64
 800283a:	701a      	strb	r2, [r3, #0]
			rmotor_pwm_val = 100;
 800283c:	4b32      	ldr	r3, [pc, #200]	; (8002908 <motor_control+0x1c4>)
 800283e:	2264      	movs	r2, #100	; 0x64
 8002840:	701a      	strb	r2, [r3, #0]
			lmotor_h_bridge_in1 = 1;
 8002842:	4b32      	ldr	r3, [pc, #200]	; (800290c <motor_control+0x1c8>)
 8002844:	2201      	movs	r2, #1
 8002846:	701a      	strb	r2, [r3, #0]
			lmotor_h_bridge_in2 = 0;
 8002848:	4b31      	ldr	r3, [pc, #196]	; (8002910 <motor_control+0x1cc>)
 800284a:	2200      	movs	r2, #0
 800284c:	701a      	strb	r2, [r3, #0]
			rmotor_h_bridge_in3 = 1;
 800284e:	4b31      	ldr	r3, [pc, #196]	; (8002914 <motor_control+0x1d0>)
 8002850:	2201      	movs	r2, #1
 8002852:	701a      	strb	r2, [r3, #0]
			rmotor_h_bridge_in4 = 0;
 8002854:	4b30      	ldr	r3, [pc, #192]	; (8002918 <motor_control+0x1d4>)
 8002856:	2200      	movs	r2, #0
 8002858:	701a      	strb	r2, [r3, #0]
			break;
 800285a:	e025      	b.n	80028a8 <motor_control+0x164>
		case 6:
			lmotor_pwm_val = 30;
 800285c:	4b29      	ldr	r3, [pc, #164]	; (8002904 <motor_control+0x1c0>)
 800285e:	221e      	movs	r2, #30
 8002860:	701a      	strb	r2, [r3, #0]
			rmotor_pwm_val = 30;
 8002862:	4b29      	ldr	r3, [pc, #164]	; (8002908 <motor_control+0x1c4>)
 8002864:	221e      	movs	r2, #30
 8002866:	701a      	strb	r2, [r3, #0]
			lmotor_h_bridge_in1 = 1;
 8002868:	4b28      	ldr	r3, [pc, #160]	; (800290c <motor_control+0x1c8>)
 800286a:	2201      	movs	r2, #1
 800286c:	701a      	strb	r2, [r3, #0]
			lmotor_h_bridge_in2 = 0;
 800286e:	4b28      	ldr	r3, [pc, #160]	; (8002910 <motor_control+0x1cc>)
 8002870:	2200      	movs	r2, #0
 8002872:	701a      	strb	r2, [r3, #0]
			rmotor_h_bridge_in3 = 1;
 8002874:	4b27      	ldr	r3, [pc, #156]	; (8002914 <motor_control+0x1d0>)
 8002876:	2201      	movs	r2, #1
 8002878:	701a      	strb	r2, [r3, #0]
			rmotor_h_bridge_in4 = 0;
 800287a:	4b27      	ldr	r3, [pc, #156]	; (8002918 <motor_control+0x1d4>)
 800287c:	2200      	movs	r2, #0
 800287e:	701a      	strb	r2, [r3, #0]
			break;
 8002880:	e012      	b.n	80028a8 <motor_control+0x164>
		default:
			lmotor_pwm_val = 0;
 8002882:	4b20      	ldr	r3, [pc, #128]	; (8002904 <motor_control+0x1c0>)
 8002884:	2200      	movs	r2, #0
 8002886:	701a      	strb	r2, [r3, #0]
			rmotor_pwm_val = 0;
 8002888:	4b1f      	ldr	r3, [pc, #124]	; (8002908 <motor_control+0x1c4>)
 800288a:	2200      	movs	r2, #0
 800288c:	701a      	strb	r2, [r3, #0]
			lmotor_h_bridge_in1 = 1;
 800288e:	4b1f      	ldr	r3, [pc, #124]	; (800290c <motor_control+0x1c8>)
 8002890:	2201      	movs	r2, #1
 8002892:	701a      	strb	r2, [r3, #0]
			lmotor_h_bridge_in2 = 0;
 8002894:	4b1e      	ldr	r3, [pc, #120]	; (8002910 <motor_control+0x1cc>)
 8002896:	2200      	movs	r2, #0
 8002898:	701a      	strb	r2, [r3, #0]
			rmotor_h_bridge_in3 = 1;
 800289a:	4b1e      	ldr	r3, [pc, #120]	; (8002914 <motor_control+0x1d0>)
 800289c:	2201      	movs	r2, #1
 800289e:	701a      	strb	r2, [r3, #0]
			rmotor_h_bridge_in4 = 0;
 80028a0:	4b1d      	ldr	r3, [pc, #116]	; (8002918 <motor_control+0x1d4>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	701a      	strb	r2, [r3, #0]
			break;
 80028a6:	bf00      	nop
	}

	htim4.Instance->CCR3 = lmotor_pwm_val; // PD14 to EnA
 80028a8:	4b16      	ldr	r3, [pc, #88]	; (8002904 <motor_control+0x1c0>)
 80028aa:	781a      	ldrb	r2, [r3, #0]
 80028ac:	4b1b      	ldr	r3, [pc, #108]	; (800291c <motor_control+0x1d8>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	63da      	str	r2, [r3, #60]	; 0x3c
	htim4.Instance->CCR4 = rmotor_pwm_val; // PD15 to EnB
 80028b2:	4b15      	ldr	r3, [pc, #84]	; (8002908 <motor_control+0x1c4>)
 80028b4:	781a      	ldrb	r2, [r3, #0]
 80028b6:	4b19      	ldr	r3, [pc, #100]	; (800291c <motor_control+0x1d8>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7,  lmotor_h_bridge_in1);
 80028bc:	4b13      	ldr	r3, [pc, #76]	; (800290c <motor_control+0x1c8>)
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	461a      	mov	r2, r3
 80028c2:	2180      	movs	r1, #128	; 0x80
 80028c4:	4816      	ldr	r0, [pc, #88]	; (8002920 <motor_control+0x1dc>)
 80028c6:	f002 fb39 	bl	8004f3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8,  lmotor_h_bridge_in2);
 80028ca:	4b11      	ldr	r3, [pc, #68]	; (8002910 <motor_control+0x1cc>)
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	461a      	mov	r2, r3
 80028d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80028d4:	4812      	ldr	r0, [pc, #72]	; (8002920 <motor_control+0x1dc>)
 80028d6:	f002 fb31 	bl	8004f3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12,  rmotor_h_bridge_in3);
 80028da:	4b0e      	ldr	r3, [pc, #56]	; (8002914 <motor_control+0x1d0>)
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	461a      	mov	r2, r3
 80028e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80028e4:	480e      	ldr	r0, [pc, #56]	; (8002920 <motor_control+0x1dc>)
 80028e6:	f002 fb29 	bl	8004f3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13,  rmotor_h_bridge_in4);
 80028ea:	4b0b      	ldr	r3, [pc, #44]	; (8002918 <motor_control+0x1d4>)
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	461a      	mov	r2, r3
 80028f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80028f4:	480a      	ldr	r0, [pc, #40]	; (8002920 <motor_control+0x1dc>)
 80028f6:	f002 fb21 	bl	8004f3c <HAL_GPIO_WritePin>
}
 80028fa:	bf00      	nop
 80028fc:	3708      	adds	r7, #8
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	20000000 	.word	0x20000000
 8002908:	20000001 	.word	0x20000001
 800290c:	20000002 	.word	0x20000002
 8002910:	20000840 	.word	0x20000840
 8002914:	20000003 	.word	0x20000003
 8002918:	20000841 	.word	0x20000841
 800291c:	2000075c 	.word	0x2000075c
 8002920:	48001400 	.word	0x48001400

08002924 <rotor_control>:
 */

#include "rotor_control.h"


void rotor_control (uint8_t mode) {
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	4603      	mov	r3, r0
 800292c:	71fb      	strb	r3, [r7, #7]
	// mode 0 turn, mode 1 stop
	static uint8_t motor_pwm_val = 0; // 0 - 99 throttle control
	static uint8_t motor_h_bridge_in1 = 1;
	static uint8_t motor_h_bridge_in2 = 0;

	switch(mode) {
 800292e:	79fb      	ldrb	r3, [r7, #7]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d109      	bne.n	8002948 <rotor_control+0x24>
		case 0 :
			motor_pwm_val = 40;
 8002934:	4b15      	ldr	r3, [pc, #84]	; (800298c <rotor_control+0x68>)
 8002936:	2228      	movs	r2, #40	; 0x28
 8002938:	701a      	strb	r2, [r3, #0]
			motor_h_bridge_in1 = 1;
 800293a:	4b15      	ldr	r3, [pc, #84]	; (8002990 <rotor_control+0x6c>)
 800293c:	2201      	movs	r2, #1
 800293e:	701a      	strb	r2, [r3, #0]
			motor_h_bridge_in2 = 0;
 8002940:	4b14      	ldr	r3, [pc, #80]	; (8002994 <rotor_control+0x70>)
 8002942:	2200      	movs	r2, #0
 8002944:	701a      	strb	r2, [r3, #0]
			break;
 8002946:	e009      	b.n	800295c <rotor_control+0x38>
		default:
			motor_pwm_val = 0;
 8002948:	4b10      	ldr	r3, [pc, #64]	; (800298c <rotor_control+0x68>)
 800294a:	2200      	movs	r2, #0
 800294c:	701a      	strb	r2, [r3, #0]
			motor_h_bridge_in1 = 1;
 800294e:	4b10      	ldr	r3, [pc, #64]	; (8002990 <rotor_control+0x6c>)
 8002950:	2201      	movs	r2, #1
 8002952:	701a      	strb	r2, [r3, #0]
			motor_h_bridge_in2 = 0;
 8002954:	4b0f      	ldr	r3, [pc, #60]	; (8002994 <rotor_control+0x70>)
 8002956:	2200      	movs	r2, #0
 8002958:	701a      	strb	r2, [r3, #0]
			break;
 800295a:	bf00      	nop
	}

	htim4.Instance->CCR1 = motor_pwm_val; // PD13
 800295c:	4b0b      	ldr	r3, [pc, #44]	; (800298c <rotor_control+0x68>)
 800295e:	781a      	ldrb	r2, [r3, #0]
 8002960:	4b0d      	ldr	r3, [pc, #52]	; (8002998 <rotor_control+0x74>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0,  motor_h_bridge_in1);
 8002966:	4b0a      	ldr	r3, [pc, #40]	; (8002990 <rotor_control+0x6c>)
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	461a      	mov	r2, r3
 800296c:	2101      	movs	r1, #1
 800296e:	480b      	ldr	r0, [pc, #44]	; (800299c <rotor_control+0x78>)
 8002970:	f002 fae4 	bl	8004f3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1,  motor_h_bridge_in2);
 8002974:	4b07      	ldr	r3, [pc, #28]	; (8002994 <rotor_control+0x70>)
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	461a      	mov	r2, r3
 800297a:	2102      	movs	r1, #2
 800297c:	4807      	ldr	r0, [pc, #28]	; (800299c <rotor_control+0x78>)
 800297e:	f002 fadd 	bl	8004f3c <HAL_GPIO_WritePin>
}
 8002982:	bf00      	nop
 8002984:	3708      	adds	r7, #8
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	20000842 	.word	0x20000842
 8002990:	20000004 	.word	0x20000004
 8002994:	20000843 	.word	0x20000843
 8002998:	2000075c 	.word	0x2000075c
 800299c:	48001800 	.word	0x48001800

080029a0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029a6:	4b0f      	ldr	r3, [pc, #60]	; (80029e4 <HAL_MspInit+0x44>)
 80029a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029aa:	4a0e      	ldr	r2, [pc, #56]	; (80029e4 <HAL_MspInit+0x44>)
 80029ac:	f043 0301 	orr.w	r3, r3, #1
 80029b0:	6613      	str	r3, [r2, #96]	; 0x60
 80029b2:	4b0c      	ldr	r3, [pc, #48]	; (80029e4 <HAL_MspInit+0x44>)
 80029b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029b6:	f003 0301 	and.w	r3, r3, #1
 80029ba:	607b      	str	r3, [r7, #4]
 80029bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029be:	4b09      	ldr	r3, [pc, #36]	; (80029e4 <HAL_MspInit+0x44>)
 80029c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029c2:	4a08      	ldr	r2, [pc, #32]	; (80029e4 <HAL_MspInit+0x44>)
 80029c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029c8:	6593      	str	r3, [r2, #88]	; 0x58
 80029ca:	4b06      	ldr	r3, [pc, #24]	; (80029e4 <HAL_MspInit+0x44>)
 80029cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029d2:	603b      	str	r3, [r7, #0]
 80029d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029d6:	bf00      	nop
 80029d8:	370c      	adds	r7, #12
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop
 80029e4:	40021000 	.word	0x40021000

080029e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b08c      	sub	sp, #48	; 0x30
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029f0:	f107 031c 	add.w	r3, r7, #28
 80029f4:	2200      	movs	r2, #0
 80029f6:	601a      	str	r2, [r3, #0]
 80029f8:	605a      	str	r2, [r3, #4]
 80029fa:	609a      	str	r2, [r3, #8]
 80029fc:	60da      	str	r2, [r3, #12]
 80029fe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a2d      	ldr	r2, [pc, #180]	; (8002abc <HAL_ADC_MspInit+0xd4>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d154      	bne.n	8002ab4 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002a0a:	4b2d      	ldr	r3, [pc, #180]	; (8002ac0 <HAL_ADC_MspInit+0xd8>)
 8002a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a0e:	4a2c      	ldr	r2, [pc, #176]	; (8002ac0 <HAL_ADC_MspInit+0xd8>)
 8002a10:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002a14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a16:	4b2a      	ldr	r3, [pc, #168]	; (8002ac0 <HAL_ADC_MspInit+0xd8>)
 8002a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a1e:	61bb      	str	r3, [r7, #24]
 8002a20:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a22:	4b27      	ldr	r3, [pc, #156]	; (8002ac0 <HAL_ADC_MspInit+0xd8>)
 8002a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a26:	4a26      	ldr	r2, [pc, #152]	; (8002ac0 <HAL_ADC_MspInit+0xd8>)
 8002a28:	f043 0304 	orr.w	r3, r3, #4
 8002a2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a2e:	4b24      	ldr	r3, [pc, #144]	; (8002ac0 <HAL_ADC_MspInit+0xd8>)
 8002a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a32:	f003 0304 	and.w	r3, r3, #4
 8002a36:	617b      	str	r3, [r7, #20]
 8002a38:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a3a:	4b21      	ldr	r3, [pc, #132]	; (8002ac0 <HAL_ADC_MspInit+0xd8>)
 8002a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a3e:	4a20      	ldr	r2, [pc, #128]	; (8002ac0 <HAL_ADC_MspInit+0xd8>)
 8002a40:	f043 0301 	orr.w	r3, r3, #1
 8002a44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a46:	4b1e      	ldr	r3, [pc, #120]	; (8002ac0 <HAL_ADC_MspInit+0xd8>)
 8002a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	613b      	str	r3, [r7, #16]
 8002a50:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a52:	4b1b      	ldr	r3, [pc, #108]	; (8002ac0 <HAL_ADC_MspInit+0xd8>)
 8002a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a56:	4a1a      	ldr	r2, [pc, #104]	; (8002ac0 <HAL_ADC_MspInit+0xd8>)
 8002a58:	f043 0302 	orr.w	r3, r3, #2
 8002a5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a5e:	4b18      	ldr	r3, [pc, #96]	; (8002ac0 <HAL_ADC_MspInit+0xd8>)
 8002a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	60fb      	str	r3, [r7, #12]
 8002a68:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN8
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002a6a:	233f      	movs	r3, #63	; 0x3f
 8002a6c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002a6e:	230b      	movs	r3, #11
 8002a70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a72:	2300      	movs	r3, #0
 8002a74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a76:	f107 031c 	add.w	r3, r7, #28
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	4811      	ldr	r0, [pc, #68]	; (8002ac4 <HAL_ADC_MspInit+0xdc>)
 8002a7e:	f002 f8cb 	bl	8004c18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8002a82:	230a      	movs	r3, #10
 8002a84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002a86:	230b      	movs	r3, #11
 8002a88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a8e:	f107 031c 	add.w	r3, r7, #28
 8002a92:	4619      	mov	r1, r3
 8002a94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a98:	f002 f8be 	bl	8004c18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002aa0:	230b      	movs	r3, #11
 8002aa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aa8:	f107 031c 	add.w	r3, r7, #28
 8002aac:	4619      	mov	r1, r3
 8002aae:	4806      	ldr	r0, [pc, #24]	; (8002ac8 <HAL_ADC_MspInit+0xe0>)
 8002ab0:	f002 f8b2 	bl	8004c18 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002ab4:	bf00      	nop
 8002ab6:	3730      	adds	r7, #48	; 0x30
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	50040000 	.word	0x50040000
 8002ac0:	40021000 	.word	0x40021000
 8002ac4:	48000800 	.word	0x48000800
 8002ac8:	48000400 	.word	0x48000400

08002acc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b08a      	sub	sp, #40	; 0x28
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ad4:	f107 0314 	add.w	r3, r7, #20
 8002ad8:	2200      	movs	r2, #0
 8002ada:	601a      	str	r2, [r3, #0]
 8002adc:	605a      	str	r2, [r3, #4]
 8002ade:	609a      	str	r2, [r3, #8]
 8002ae0:	60da      	str	r2, [r3, #12]
 8002ae2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a17      	ldr	r2, [pc, #92]	; (8002b48 <HAL_CAN_MspInit+0x7c>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d127      	bne.n	8002b3e <HAL_CAN_MspInit+0x72>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002aee:	4b17      	ldr	r3, [pc, #92]	; (8002b4c <HAL_CAN_MspInit+0x80>)
 8002af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002af2:	4a16      	ldr	r2, [pc, #88]	; (8002b4c <HAL_CAN_MspInit+0x80>)
 8002af4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002af8:	6593      	str	r3, [r2, #88]	; 0x58
 8002afa:	4b14      	ldr	r3, [pc, #80]	; (8002b4c <HAL_CAN_MspInit+0x80>)
 8002afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002afe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b02:	613b      	str	r3, [r7, #16]
 8002b04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b06:	4b11      	ldr	r3, [pc, #68]	; (8002b4c <HAL_CAN_MspInit+0x80>)
 8002b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b0a:	4a10      	ldr	r2, [pc, #64]	; (8002b4c <HAL_CAN_MspInit+0x80>)
 8002b0c:	f043 0308 	orr.w	r3, r3, #8
 8002b10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b12:	4b0e      	ldr	r3, [pc, #56]	; (8002b4c <HAL_CAN_MspInit+0x80>)
 8002b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b16:	f003 0308 	and.w	r3, r3, #8
 8002b1a:	60fb      	str	r3, [r7, #12]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b22:	2302      	movs	r3, #2
 8002b24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b26:	2300      	movs	r3, #0
 8002b28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002b2e:	2309      	movs	r3, #9
 8002b30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b32:	f107 0314 	add.w	r3, r7, #20
 8002b36:	4619      	mov	r1, r3
 8002b38:	4805      	ldr	r0, [pc, #20]	; (8002b50 <HAL_CAN_MspInit+0x84>)
 8002b3a:	f002 f86d 	bl	8004c18 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002b3e:	bf00      	nop
 8002b40:	3728      	adds	r7, #40	; 0x28
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	40006400 	.word	0x40006400
 8002b4c:	40021000 	.word	0x40021000
 8002b50:	48000c00 	.word	0x48000c00

08002b54 <HAL_SMBUS_MspInit>:
* This function configures the hardware resources used in this example
* @param hsmbus: SMBUS handle pointer
* @retval None
*/
void HAL_SMBUS_MspInit(SMBUS_HandleTypeDef* hsmbus)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b0b0      	sub	sp, #192	; 0xc0
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b5c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002b60:	2200      	movs	r2, #0
 8002b62:	601a      	str	r2, [r3, #0]
 8002b64:	605a      	str	r2, [r3, #4]
 8002b66:	609a      	str	r2, [r3, #8]
 8002b68:	60da      	str	r2, [r3, #12]
 8002b6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b6c:	f107 0318 	add.w	r3, r7, #24
 8002b70:	2294      	movs	r2, #148	; 0x94
 8002b72:	2100      	movs	r1, #0
 8002b74:	4618      	mov	r0, r3
 8002b76:	f008 fe57 	bl	800b828 <memset>
  if(hsmbus->Instance==I2C1)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a42      	ldr	r2, [pc, #264]	; (8002c88 <HAL_SMBUS_MspInit+0x134>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d13c      	bne.n	8002bfe <HAL_SMBUS_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002b84:	2340      	movs	r3, #64	; 0x40
 8002b86:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b8c:	f107 0318 	add.w	r3, r7, #24
 8002b90:	4618      	mov	r0, r3
 8002b92:	f003 f9a7 	bl	8005ee4 <HAL_RCCEx_PeriphCLKConfig>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d001      	beq.n	8002ba0 <HAL_SMBUS_MspInit+0x4c>
    {
      Error_Handler();
 8002b9c:	f7ff fdcc 	bl	8002738 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ba0:	4b3a      	ldr	r3, [pc, #232]	; (8002c8c <HAL_SMBUS_MspInit+0x138>)
 8002ba2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ba4:	4a39      	ldr	r2, [pc, #228]	; (8002c8c <HAL_SMBUS_MspInit+0x138>)
 8002ba6:	f043 0302 	orr.w	r3, r3, #2
 8002baa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bac:	4b37      	ldr	r3, [pc, #220]	; (8002c8c <HAL_SMBUS_MspInit+0x138>)
 8002bae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bb0:	f003 0302 	and.w	r3, r3, #2
 8002bb4:	617b      	str	r3, [r7, #20]
 8002bb6:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002bb8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002bbc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002bc0:	2312      	movs	r3, #18
 8002bc2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002bd2:	2304      	movs	r3, #4
 8002bd4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bd8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002bdc:	4619      	mov	r1, r3
 8002bde:	482c      	ldr	r0, [pc, #176]	; (8002c90 <HAL_SMBUS_MspInit+0x13c>)
 8002be0:	f002 f81a 	bl	8004c18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002be4:	4b29      	ldr	r3, [pc, #164]	; (8002c8c <HAL_SMBUS_MspInit+0x138>)
 8002be6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002be8:	4a28      	ldr	r2, [pc, #160]	; (8002c8c <HAL_SMBUS_MspInit+0x138>)
 8002bea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002bee:	6593      	str	r3, [r2, #88]	; 0x58
 8002bf0:	4b26      	ldr	r3, [pc, #152]	; (8002c8c <HAL_SMBUS_MspInit+0x138>)
 8002bf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bf4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bf8:	613b      	str	r3, [r7, #16]
 8002bfa:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002bfc:	e03f      	b.n	8002c7e <HAL_SMBUS_MspInit+0x12a>
  else if(hsmbus->Instance==I2C2)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a24      	ldr	r2, [pc, #144]	; (8002c94 <HAL_SMBUS_MspInit+0x140>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d13a      	bne.n	8002c7e <HAL_SMBUS_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002c08:	2380      	movs	r3, #128	; 0x80
 8002c0a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c10:	f107 0318 	add.w	r3, r7, #24
 8002c14:	4618      	mov	r0, r3
 8002c16:	f003 f965 	bl	8005ee4 <HAL_RCCEx_PeriphCLKConfig>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d001      	beq.n	8002c24 <HAL_SMBUS_MspInit+0xd0>
      Error_Handler();
 8002c20:	f7ff fd8a 	bl	8002738 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c24:	4b19      	ldr	r3, [pc, #100]	; (8002c8c <HAL_SMBUS_MspInit+0x138>)
 8002c26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c28:	4a18      	ldr	r2, [pc, #96]	; (8002c8c <HAL_SMBUS_MspInit+0x138>)
 8002c2a:	f043 0320 	orr.w	r3, r3, #32
 8002c2e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c30:	4b16      	ldr	r3, [pc, #88]	; (8002c8c <HAL_SMBUS_MspInit+0x138>)
 8002c32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c34:	f003 0320 	and.w	r3, r3, #32
 8002c38:	60fb      	str	r3, [r7, #12]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8002c3c:	2307      	movs	r3, #7
 8002c3e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c42:	2312      	movs	r3, #18
 8002c44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002c54:	2304      	movs	r3, #4
 8002c56:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002c5a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002c5e:	4619      	mov	r1, r3
 8002c60:	480d      	ldr	r0, [pc, #52]	; (8002c98 <HAL_SMBUS_MspInit+0x144>)
 8002c62:	f001 ffd9 	bl	8004c18 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002c66:	4b09      	ldr	r3, [pc, #36]	; (8002c8c <HAL_SMBUS_MspInit+0x138>)
 8002c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c6a:	4a08      	ldr	r2, [pc, #32]	; (8002c8c <HAL_SMBUS_MspInit+0x138>)
 8002c6c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002c70:	6593      	str	r3, [r2, #88]	; 0x58
 8002c72:	4b06      	ldr	r3, [pc, #24]	; (8002c8c <HAL_SMBUS_MspInit+0x138>)
 8002c74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c7a:	60bb      	str	r3, [r7, #8]
 8002c7c:	68bb      	ldr	r3, [r7, #8]
}
 8002c7e:	bf00      	nop
 8002c80:	37c0      	adds	r7, #192	; 0xc0
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	40005400 	.word	0x40005400
 8002c8c:	40021000 	.word	0x40021000
 8002c90:	48000400 	.word	0x48000400
 8002c94:	40005800 	.word	0x40005800
 8002c98:	48001400 	.word	0x48001400

08002c9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b0b2      	sub	sp, #200	; 0xc8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ca4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002ca8:	2200      	movs	r2, #0
 8002caa:	601a      	str	r2, [r3, #0]
 8002cac:	605a      	str	r2, [r3, #4]
 8002cae:	609a      	str	r2, [r3, #8]
 8002cb0:	60da      	str	r2, [r3, #12]
 8002cb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002cb4:	f107 0320 	add.w	r3, r7, #32
 8002cb8:	2294      	movs	r2, #148	; 0x94
 8002cba:	2100      	movs	r1, #0
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f008 fdb3 	bl	800b828 <memset>
  if(huart->Instance==LPUART1)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a64      	ldr	r2, [pc, #400]	; (8002e58 <HAL_UART_MspInit+0x1bc>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d13e      	bne.n	8002d4a <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002ccc:	2320      	movs	r3, #32
 8002cce:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002cd4:	f107 0320 	add.w	r3, r7, #32
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f003 f903 	bl	8005ee4 <HAL_RCCEx_PeriphCLKConfig>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d001      	beq.n	8002ce8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002ce4:	f7ff fd28 	bl	8002738 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002ce8:	4b5c      	ldr	r3, [pc, #368]	; (8002e5c <HAL_UART_MspInit+0x1c0>)
 8002cea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cec:	4a5b      	ldr	r2, [pc, #364]	; (8002e5c <HAL_UART_MspInit+0x1c0>)
 8002cee:	f043 0301 	orr.w	r3, r3, #1
 8002cf2:	65d3      	str	r3, [r2, #92]	; 0x5c
 8002cf4:	4b59      	ldr	r3, [pc, #356]	; (8002e5c <HAL_UART_MspInit+0x1c0>)
 8002cf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cf8:	f003 0301 	and.w	r3, r3, #1
 8002cfc:	61fb      	str	r3, [r7, #28]
 8002cfe:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002d00:	4b56      	ldr	r3, [pc, #344]	; (8002e5c <HAL_UART_MspInit+0x1c0>)
 8002d02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d04:	4a55      	ldr	r2, [pc, #340]	; (8002e5c <HAL_UART_MspInit+0x1c0>)
 8002d06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d0a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d0c:	4b53      	ldr	r3, [pc, #332]	; (8002e5c <HAL_UART_MspInit+0x1c0>)
 8002d0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d14:	61bb      	str	r3, [r7, #24]
 8002d16:	69bb      	ldr	r3, [r7, #24]
    HAL_PWREx_EnableVddIO2();
 8002d18:	f002 f9fc 	bl	8005114 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002d1c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002d20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d24:	2302      	movs	r3, #2
 8002d26:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d30:	2303      	movs	r3, #3
 8002d32:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002d36:	2308      	movs	r3, #8
 8002d38:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002d3c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002d40:	4619      	mov	r1, r3
 8002d42:	4847      	ldr	r0, [pc, #284]	; (8002e60 <HAL_UART_MspInit+0x1c4>)
 8002d44:	f001 ff68 	bl	8004c18 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002d48:	e081      	b.n	8002e4e <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART2)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a45      	ldr	r2, [pc, #276]	; (8002e64 <HAL_UART_MspInit+0x1c8>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d13b      	bne.n	8002dcc <HAL_UART_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002d54:	2302      	movs	r3, #2
 8002d56:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d5c:	f107 0320 	add.w	r3, r7, #32
 8002d60:	4618      	mov	r0, r3
 8002d62:	f003 f8bf 	bl	8005ee4 <HAL_RCCEx_PeriphCLKConfig>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d001      	beq.n	8002d70 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8002d6c:	f7ff fce4 	bl	8002738 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d70:	4b3a      	ldr	r3, [pc, #232]	; (8002e5c <HAL_UART_MspInit+0x1c0>)
 8002d72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d74:	4a39      	ldr	r2, [pc, #228]	; (8002e5c <HAL_UART_MspInit+0x1c0>)
 8002d76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d7a:	6593      	str	r3, [r2, #88]	; 0x58
 8002d7c:	4b37      	ldr	r3, [pc, #220]	; (8002e5c <HAL_UART_MspInit+0x1c0>)
 8002d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d84:	617b      	str	r3, [r7, #20]
 8002d86:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d88:	4b34      	ldr	r3, [pc, #208]	; (8002e5c <HAL_UART_MspInit+0x1c0>)
 8002d8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d8c:	4a33      	ldr	r2, [pc, #204]	; (8002e5c <HAL_UART_MspInit+0x1c0>)
 8002d8e:	f043 0308 	orr.w	r3, r3, #8
 8002d92:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d94:	4b31      	ldr	r3, [pc, #196]	; (8002e5c <HAL_UART_MspInit+0x1c0>)
 8002d96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d98:	f003 0308 	and.w	r3, r3, #8
 8002d9c:	613b      	str	r3, [r7, #16]
 8002d9e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002da0:	2378      	movs	r3, #120	; 0x78
 8002da2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002da6:	2302      	movs	r3, #2
 8002da8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dac:	2300      	movs	r3, #0
 8002dae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002db2:	2303      	movs	r3, #3
 8002db4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002db8:	2307      	movs	r3, #7
 8002dba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002dbe:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	4828      	ldr	r0, [pc, #160]	; (8002e68 <HAL_UART_MspInit+0x1cc>)
 8002dc6:	f001 ff27 	bl	8004c18 <HAL_GPIO_Init>
}
 8002dca:	e040      	b.n	8002e4e <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART3)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a26      	ldr	r2, [pc, #152]	; (8002e6c <HAL_UART_MspInit+0x1d0>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d13b      	bne.n	8002e4e <HAL_UART_MspInit+0x1b2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002dd6:	2304      	movs	r3, #4
 8002dd8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002dde:	f107 0320 	add.w	r3, r7, #32
 8002de2:	4618      	mov	r0, r3
 8002de4:	f003 f87e 	bl	8005ee4 <HAL_RCCEx_PeriphCLKConfig>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d001      	beq.n	8002df2 <HAL_UART_MspInit+0x156>
      Error_Handler();
 8002dee:	f7ff fca3 	bl	8002738 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002df2:	4b1a      	ldr	r3, [pc, #104]	; (8002e5c <HAL_UART_MspInit+0x1c0>)
 8002df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002df6:	4a19      	ldr	r2, [pc, #100]	; (8002e5c <HAL_UART_MspInit+0x1c0>)
 8002df8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dfc:	6593      	str	r3, [r2, #88]	; 0x58
 8002dfe:	4b17      	ldr	r3, [pc, #92]	; (8002e5c <HAL_UART_MspInit+0x1c0>)
 8002e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e06:	60fb      	str	r3, [r7, #12]
 8002e08:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e0a:	4b14      	ldr	r3, [pc, #80]	; (8002e5c <HAL_UART_MspInit+0x1c0>)
 8002e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e0e:	4a13      	ldr	r2, [pc, #76]	; (8002e5c <HAL_UART_MspInit+0x1c0>)
 8002e10:	f043 0308 	orr.w	r3, r3, #8
 8002e14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e16:	4b11      	ldr	r3, [pc, #68]	; (8002e5c <HAL_UART_MspInit+0x1c0>)
 8002e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e1a:	f003 0308 	and.w	r3, r3, #8
 8002e1e:	60bb      	str	r3, [r7, #8]
 8002e20:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002e22:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002e26:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e2a:	2302      	movs	r3, #2
 8002e2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e30:	2300      	movs	r3, #0
 8002e32:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e36:	2303      	movs	r3, #3
 8002e38:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002e3c:	2307      	movs	r3, #7
 8002e3e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e42:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002e46:	4619      	mov	r1, r3
 8002e48:	4807      	ldr	r0, [pc, #28]	; (8002e68 <HAL_UART_MspInit+0x1cc>)
 8002e4a:	f001 fee5 	bl	8004c18 <HAL_GPIO_Init>
}
 8002e4e:	bf00      	nop
 8002e50:	37c8      	adds	r7, #200	; 0xc8
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	40008000 	.word	0x40008000
 8002e5c:	40021000 	.word	0x40021000
 8002e60:	48001800 	.word	0x48001800
 8002e64:	40004400 	.word	0x40004400
 8002e68:	48000c00 	.word	0x48000c00
 8002e6c:	40004800 	.word	0x40004800

08002e70 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b08c      	sub	sp, #48	; 0x30
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e78:	f107 031c 	add.w	r3, r7, #28
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	601a      	str	r2, [r3, #0]
 8002e80:	605a      	str	r2, [r3, #4]
 8002e82:	609a      	str	r2, [r3, #8]
 8002e84:	60da      	str	r2, [r3, #12]
 8002e86:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a2e      	ldr	r2, [pc, #184]	; (8002f48 <HAL_SPI_MspInit+0xd8>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d129      	bne.n	8002ee6 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002e92:	4b2e      	ldr	r3, [pc, #184]	; (8002f4c <HAL_SPI_MspInit+0xdc>)
 8002e94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e96:	4a2d      	ldr	r2, [pc, #180]	; (8002f4c <HAL_SPI_MspInit+0xdc>)
 8002e98:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e9c:	6613      	str	r3, [r2, #96]	; 0x60
 8002e9e:	4b2b      	ldr	r3, [pc, #172]	; (8002f4c <HAL_SPI_MspInit+0xdc>)
 8002ea0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ea2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ea6:	61bb      	str	r3, [r7, #24]
 8002ea8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eaa:	4b28      	ldr	r3, [pc, #160]	; (8002f4c <HAL_SPI_MspInit+0xdc>)
 8002eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eae:	4a27      	ldr	r2, [pc, #156]	; (8002f4c <HAL_SPI_MspInit+0xdc>)
 8002eb0:	f043 0301 	orr.w	r3, r3, #1
 8002eb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002eb6:	4b25      	ldr	r3, [pc, #148]	; (8002f4c <HAL_SPI_MspInit+0xdc>)
 8002eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eba:	f003 0301 	and.w	r3, r3, #1
 8002ebe:	617b      	str	r3, [r7, #20]
 8002ec0:	697b      	ldr	r3, [r7, #20]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002ec2:	23f0      	movs	r3, #240	; 0xf0
 8002ec4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ec6:	2302      	movs	r3, #2
 8002ec8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002ed2:	2305      	movs	r3, #5
 8002ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ed6:	f107 031c 	add.w	r3, r7, #28
 8002eda:	4619      	mov	r1, r3
 8002edc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ee0:	f001 fe9a 	bl	8004c18 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002ee4:	e02c      	b.n	8002f40 <HAL_SPI_MspInit+0xd0>
  else if(hspi->Instance==SPI3)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a19      	ldr	r2, [pc, #100]	; (8002f50 <HAL_SPI_MspInit+0xe0>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d127      	bne.n	8002f40 <HAL_SPI_MspInit+0xd0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002ef0:	4b16      	ldr	r3, [pc, #88]	; (8002f4c <HAL_SPI_MspInit+0xdc>)
 8002ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ef4:	4a15      	ldr	r2, [pc, #84]	; (8002f4c <HAL_SPI_MspInit+0xdc>)
 8002ef6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002efa:	6593      	str	r3, [r2, #88]	; 0x58
 8002efc:	4b13      	ldr	r3, [pc, #76]	; (8002f4c <HAL_SPI_MspInit+0xdc>)
 8002efe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f04:	613b      	str	r3, [r7, #16]
 8002f06:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f08:	4b10      	ldr	r3, [pc, #64]	; (8002f4c <HAL_SPI_MspInit+0xdc>)
 8002f0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f0c:	4a0f      	ldr	r2, [pc, #60]	; (8002f4c <HAL_SPI_MspInit+0xdc>)
 8002f0e:	f043 0302 	orr.w	r3, r3, #2
 8002f12:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f14:	4b0d      	ldr	r3, [pc, #52]	; (8002f4c <HAL_SPI_MspInit+0xdc>)
 8002f16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f18:	f003 0302 	and.w	r3, r3, #2
 8002f1c:	60fb      	str	r3, [r7, #12]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002f20:	2338      	movs	r3, #56	; 0x38
 8002f22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f24:	2302      	movs	r3, #2
 8002f26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002f30:	2306      	movs	r3, #6
 8002f32:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f34:	f107 031c 	add.w	r3, r7, #28
 8002f38:	4619      	mov	r1, r3
 8002f3a:	4806      	ldr	r0, [pc, #24]	; (8002f54 <HAL_SPI_MspInit+0xe4>)
 8002f3c:	f001 fe6c 	bl	8004c18 <HAL_GPIO_Init>
}
 8002f40:	bf00      	nop
 8002f42:	3730      	adds	r7, #48	; 0x30
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	40013000 	.word	0x40013000
 8002f4c:	40021000 	.word	0x40021000
 8002f50:	40003c00 	.word	0x40003c00
 8002f54:	48000400 	.word	0x48000400

08002f58 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b092      	sub	sp, #72	; 0x48
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f60:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002f64:	2200      	movs	r2, #0
 8002f66:	601a      	str	r2, [r3, #0]
 8002f68:	605a      	str	r2, [r3, #4]
 8002f6a:	609a      	str	r2, [r3, #8]
 8002f6c:	60da      	str	r2, [r3, #12]
 8002f6e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a9e      	ldr	r2, [pc, #632]	; (80031f0 <HAL_TIM_Base_MspInit+0x298>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d15b      	bne.n	8003032 <HAL_TIM_Base_MspInit+0xda>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002f7a:	4b9e      	ldr	r3, [pc, #632]	; (80031f4 <HAL_TIM_Base_MspInit+0x29c>)
 8002f7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f7e:	4a9d      	ldr	r2, [pc, #628]	; (80031f4 <HAL_TIM_Base_MspInit+0x29c>)
 8002f80:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002f84:	6613      	str	r3, [r2, #96]	; 0x60
 8002f86:	4b9b      	ldr	r3, [pc, #620]	; (80031f4 <HAL_TIM_Base_MspInit+0x29c>)
 8002f88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f8e:	633b      	str	r3, [r7, #48]	; 0x30
 8002f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f92:	4b98      	ldr	r3, [pc, #608]	; (80031f4 <HAL_TIM_Base_MspInit+0x29c>)
 8002f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f96:	4a97      	ldr	r2, [pc, #604]	; (80031f4 <HAL_TIM_Base_MspInit+0x29c>)
 8002f98:	f043 0310 	orr.w	r3, r3, #16
 8002f9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f9e:	4b95      	ldr	r3, [pc, #596]	; (80031f4 <HAL_TIM_Base_MspInit+0x29c>)
 8002fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fa2:	f003 0310 	and.w	r3, r3, #16
 8002fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_BKIN2
    PE15     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8002faa:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8002fae:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fb0:	2302      	movs	r3, #2
 8002fb2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002fc0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	488c      	ldr	r0, [pc, #560]	; (80031f8 <HAL_TIM_Base_MspInit+0x2a0>)
 8002fc8:	f001 fe26 	bl	8004c18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002fcc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002fd0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fd2:	2302      	movs	r3, #2
 8002fd4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002fe2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	4883      	ldr	r0, [pc, #524]	; (80031f8 <HAL_TIM_Base_MspInit+0x2a0>)
 8002fea:	f001 fe15 	bl	8004c18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002fee:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002ff2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ff4:	2302      	movs	r3, #2
 8002ff6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 8003000:	2303      	movs	r3, #3
 8003002:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003004:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003008:	4619      	mov	r1, r3
 800300a:	487b      	ldr	r0, [pc, #492]	; (80031f8 <HAL_TIM_Base_MspInit+0x2a0>)
 800300c:	f001 fe04 	bl	8004c18 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8003010:	2200      	movs	r2, #0
 8003012:	2100      	movs	r1, #0
 8003014:	201b      	movs	r0, #27
 8003016:	f001 fdba 	bl	8004b8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800301a:	201b      	movs	r0, #27
 800301c:	f001 fdd3 	bl	8004bc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 1, 0);
 8003020:	2200      	movs	r2, #0
 8003022:	2101      	movs	r1, #1
 8003024:	201b      	movs	r0, #27
 8003026:	f001 fdb2 	bl	8004b8e <HAL_NVIC_SetPriority>
    HAL_NVIC_DisableIRQ(TIM1_CC_IRQn);
 800302a:	201b      	movs	r0, #27
 800302c:	f001 fdd9 	bl	8004be2 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(TIM5_IRQn);

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8003030:	e0d9      	b.n	80031e6 <HAL_TIM_Base_MspInit+0x28e>
  else if(htim_base->Instance==TIM2)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800303a:	d147      	bne.n	80030cc <HAL_TIM_Base_MspInit+0x174>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800303c:	4b6d      	ldr	r3, [pc, #436]	; (80031f4 <HAL_TIM_Base_MspInit+0x29c>)
 800303e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003040:	4a6c      	ldr	r2, [pc, #432]	; (80031f4 <HAL_TIM_Base_MspInit+0x29c>)
 8003042:	f043 0301 	orr.w	r3, r3, #1
 8003046:	6593      	str	r3, [r2, #88]	; 0x58
 8003048:	4b6a      	ldr	r3, [pc, #424]	; (80031f4 <HAL_TIM_Base_MspInit+0x29c>)
 800304a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800304c:	f003 0301 	and.w	r3, r3, #1
 8003050:	62bb      	str	r3, [r7, #40]	; 0x28
 8003052:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003054:	4b67      	ldr	r3, [pc, #412]	; (80031f4 <HAL_TIM_Base_MspInit+0x29c>)
 8003056:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003058:	4a66      	ldr	r2, [pc, #408]	; (80031f4 <HAL_TIM_Base_MspInit+0x29c>)
 800305a:	f043 0302 	orr.w	r3, r3, #2
 800305e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003060:	4b64      	ldr	r3, [pc, #400]	; (80031f4 <HAL_TIM_Base_MspInit+0x29c>)
 8003062:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003064:	f003 0302 	and.w	r3, r3, #2
 8003068:	627b      	str	r3, [r7, #36]	; 0x24
 800306a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800306c:	4b61      	ldr	r3, [pc, #388]	; (80031f4 <HAL_TIM_Base_MspInit+0x29c>)
 800306e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003070:	4a60      	ldr	r2, [pc, #384]	; (80031f4 <HAL_TIM_Base_MspInit+0x29c>)
 8003072:	f043 0301 	orr.w	r3, r3, #1
 8003076:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003078:	4b5e      	ldr	r3, [pc, #376]	; (80031f4 <HAL_TIM_Base_MspInit+0x29c>)
 800307a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800307c:	f003 0301 	and.w	r3, r3, #1
 8003080:	623b      	str	r3, [r7, #32]
 8003082:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003084:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003088:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800308a:	2302      	movs	r3, #2
 800308c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800308e:	2300      	movs	r3, #0
 8003090:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003092:	2300      	movs	r3, #0
 8003094:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003096:	2301      	movs	r3, #1
 8003098:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800309a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800309e:	4619      	mov	r1, r3
 80030a0:	4856      	ldr	r0, [pc, #344]	; (80031fc <HAL_TIM_Base_MspInit+0x2a4>)
 80030a2:	f001 fdb9 	bl	8004c18 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80030a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030aa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ac:	2302      	movs	r3, #2
 80030ae:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b0:	2300      	movs	r3, #0
 80030b2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030b4:	2300      	movs	r3, #0
 80030b6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80030b8:	2302      	movs	r3, #2
 80030ba:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030bc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80030c0:	4619      	mov	r1, r3
 80030c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030c6:	f001 fda7 	bl	8004c18 <HAL_GPIO_Init>
}
 80030ca:	e08c      	b.n	80031e6 <HAL_TIM_Base_MspInit+0x28e>
  else if(htim_base->Instance==TIM3)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a4b      	ldr	r2, [pc, #300]	; (8003200 <HAL_TIM_Base_MspInit+0x2a8>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d138      	bne.n	8003148 <HAL_TIM_Base_MspInit+0x1f0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80030d6:	4b47      	ldr	r3, [pc, #284]	; (80031f4 <HAL_TIM_Base_MspInit+0x29c>)
 80030d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030da:	4a46      	ldr	r2, [pc, #280]	; (80031f4 <HAL_TIM_Base_MspInit+0x29c>)
 80030dc:	f043 0302 	orr.w	r3, r3, #2
 80030e0:	6593      	str	r3, [r2, #88]	; 0x58
 80030e2:	4b44      	ldr	r3, [pc, #272]	; (80031f4 <HAL_TIM_Base_MspInit+0x29c>)
 80030e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030e6:	f003 0302 	and.w	r3, r3, #2
 80030ea:	61fb      	str	r3, [r7, #28]
 80030ec:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80030ee:	4b41      	ldr	r3, [pc, #260]	; (80031f4 <HAL_TIM_Base_MspInit+0x29c>)
 80030f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030f2:	4a40      	ldr	r2, [pc, #256]	; (80031f4 <HAL_TIM_Base_MspInit+0x29c>)
 80030f4:	f043 0310 	orr.w	r3, r3, #16
 80030f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80030fa:	4b3e      	ldr	r3, [pc, #248]	; (80031f4 <HAL_TIM_Base_MspInit+0x29c>)
 80030fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030fe:	f003 0310 	and.w	r3, r3, #16
 8003102:	61bb      	str	r3, [r7, #24]
 8003104:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003106:	2310      	movs	r3, #16
 8003108:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800310a:	2302      	movs	r3, #2
 800310c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800310e:	2301      	movs	r3, #1
 8003110:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003112:	2300      	movs	r3, #0
 8003114:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003116:	2302      	movs	r3, #2
 8003118:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800311a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800311e:	4619      	mov	r1, r3
 8003120:	4835      	ldr	r0, [pc, #212]	; (80031f8 <HAL_TIM_Base_MspInit+0x2a0>)
 8003122:	f001 fd79 	bl	8004c18 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003126:	2200      	movs	r2, #0
 8003128:	2100      	movs	r1, #0
 800312a:	201d      	movs	r0, #29
 800312c:	f001 fd2f 	bl	8004b8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003130:	201d      	movs	r0, #29
 8003132:	f001 fd48 	bl	8004bc6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8003136:	2200      	movs	r2, #0
 8003138:	2105      	movs	r1, #5
 800313a:	201d      	movs	r0, #29
 800313c:	f001 fd27 	bl	8004b8e <HAL_NVIC_SetPriority>
    HAL_NVIC_DisableIRQ(TIM3_IRQn);
 8003140:	201d      	movs	r0, #29
 8003142:	f001 fd4e 	bl	8004be2 <HAL_NVIC_DisableIRQ>
}
 8003146:	e04e      	b.n	80031e6 <HAL_TIM_Base_MspInit+0x28e>
  else if(htim_base->Instance==TIM4)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a2d      	ldr	r2, [pc, #180]	; (8003204 <HAL_TIM_Base_MspInit+0x2ac>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d128      	bne.n	80031a4 <HAL_TIM_Base_MspInit+0x24c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003152:	4b28      	ldr	r3, [pc, #160]	; (80031f4 <HAL_TIM_Base_MspInit+0x29c>)
 8003154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003156:	4a27      	ldr	r2, [pc, #156]	; (80031f4 <HAL_TIM_Base_MspInit+0x29c>)
 8003158:	f043 0304 	orr.w	r3, r3, #4
 800315c:	6593      	str	r3, [r2, #88]	; 0x58
 800315e:	4b25      	ldr	r3, [pc, #148]	; (80031f4 <HAL_TIM_Base_MspInit+0x29c>)
 8003160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003162:	f003 0304 	and.w	r3, r3, #4
 8003166:	617b      	str	r3, [r7, #20]
 8003168:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800316a:	4b22      	ldr	r3, [pc, #136]	; (80031f4 <HAL_TIM_Base_MspInit+0x29c>)
 800316c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800316e:	4a21      	ldr	r2, [pc, #132]	; (80031f4 <HAL_TIM_Base_MspInit+0x29c>)
 8003170:	f043 0310 	orr.w	r3, r3, #16
 8003174:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003176:	4b1f      	ldr	r3, [pc, #124]	; (80031f4 <HAL_TIM_Base_MspInit+0x29c>)
 8003178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800317a:	f003 0310 	and.w	r3, r3, #16
 800317e:	613b      	str	r3, [r7, #16]
 8003180:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003182:	2301      	movs	r3, #1
 8003184:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003186:	2302      	movs	r3, #2
 8003188:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800318a:	2300      	movs	r3, #0
 800318c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800318e:	2300      	movs	r3, #0
 8003190:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003192:	2302      	movs	r3, #2
 8003194:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003196:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800319a:	4619      	mov	r1, r3
 800319c:	4816      	ldr	r0, [pc, #88]	; (80031f8 <HAL_TIM_Base_MspInit+0x2a0>)
 800319e:	f001 fd3b 	bl	8004c18 <HAL_GPIO_Init>
}
 80031a2:	e020      	b.n	80031e6 <HAL_TIM_Base_MspInit+0x28e>
  else if(htim_base->Instance==TIM5)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a17      	ldr	r2, [pc, #92]	; (8003208 <HAL_TIM_Base_MspInit+0x2b0>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d11b      	bne.n	80031e6 <HAL_TIM_Base_MspInit+0x28e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80031ae:	4b11      	ldr	r3, [pc, #68]	; (80031f4 <HAL_TIM_Base_MspInit+0x29c>)
 80031b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031b2:	4a10      	ldr	r2, [pc, #64]	; (80031f4 <HAL_TIM_Base_MspInit+0x29c>)
 80031b4:	f043 0308 	orr.w	r3, r3, #8
 80031b8:	6593      	str	r3, [r2, #88]	; 0x58
 80031ba:	4b0e      	ldr	r3, [pc, #56]	; (80031f4 <HAL_TIM_Base_MspInit+0x29c>)
 80031bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031be:	f003 0308 	and.w	r3, r3, #8
 80031c2:	60fb      	str	r3, [r7, #12]
 80031c4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80031c6:	2200      	movs	r2, #0
 80031c8:	2100      	movs	r1, #0
 80031ca:	2032      	movs	r0, #50	; 0x32
 80031cc:	f001 fcdf 	bl	8004b8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80031d0:	2032      	movs	r0, #50	; 0x32
 80031d2:	f001 fcf8 	bl	8004bc6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM3_IRQn, 6, 0);
 80031d6:	2200      	movs	r2, #0
 80031d8:	2106      	movs	r1, #6
 80031da:	201d      	movs	r0, #29
 80031dc:	f001 fcd7 	bl	8004b8e <HAL_NVIC_SetPriority>
    HAL_NVIC_DisableIRQ(TIM5_IRQn);
 80031e0:	2032      	movs	r0, #50	; 0x32
 80031e2:	f001 fcfe 	bl	8004be2 <HAL_NVIC_DisableIRQ>
}
 80031e6:	bf00      	nop
 80031e8:	3748      	adds	r7, #72	; 0x48
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	40012c00 	.word	0x40012c00
 80031f4:	40021000 	.word	0x40021000
 80031f8:	48001000 	.word	0x48001000
 80031fc:	48000400 	.word	0x48000400
 8003200:	40000400 	.word	0x40000400
 8003204:	40000800 	.word	0x40000800
 8003208:	40000c00 	.word	0x40000c00

0800320c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800320c:	b480      	push	{r7}
 800320e:	b085      	sub	sp, #20
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM15)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a0a      	ldr	r2, [pc, #40]	; (8003244 <HAL_TIM_PWM_MspInit+0x38>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d10b      	bne.n	8003236 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 800321e:	4b0a      	ldr	r3, [pc, #40]	; (8003248 <HAL_TIM_PWM_MspInit+0x3c>)
 8003220:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003222:	4a09      	ldr	r2, [pc, #36]	; (8003248 <HAL_TIM_PWM_MspInit+0x3c>)
 8003224:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003228:	6613      	str	r3, [r2, #96]	; 0x60
 800322a:	4b07      	ldr	r3, [pc, #28]	; (8003248 <HAL_TIM_PWM_MspInit+0x3c>)
 800322c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800322e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003232:	60fb      	str	r3, [r7, #12]
 8003234:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8003236:	bf00      	nop
 8003238:	3714      	adds	r7, #20
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop
 8003244:	40014000 	.word	0x40014000
 8003248:	40021000 	.word	0x40021000

0800324c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b08c      	sub	sp, #48	; 0x30
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003254:	f107 031c 	add.w	r3, r7, #28
 8003258:	2200      	movs	r2, #0
 800325a:	601a      	str	r2, [r3, #0]
 800325c:	605a      	str	r2, [r3, #4]
 800325e:	609a      	str	r2, [r3, #8]
 8003260:	60da      	str	r2, [r3, #12]
 8003262:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a54      	ldr	r2, [pc, #336]	; (80033bc <HAL_TIM_MspPostInit+0x170>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d11d      	bne.n	80032aa <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800326e:	4b54      	ldr	r3, [pc, #336]	; (80033c0 <HAL_TIM_MspPostInit+0x174>)
 8003270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003272:	4a53      	ldr	r2, [pc, #332]	; (80033c0 <HAL_TIM_MspPostInit+0x174>)
 8003274:	f043 0310 	orr.w	r3, r3, #16
 8003278:	64d3      	str	r3, [r2, #76]	; 0x4c
 800327a:	4b51      	ldr	r3, [pc, #324]	; (80033c0 <HAL_TIM_MspPostInit+0x174>)
 800327c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800327e:	f003 0310 	and.w	r3, r3, #16
 8003282:	61bb      	str	r3, [r7, #24]
 8003284:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE8     ------> TIM1_CH1N
    PE10     ------> TIM1_CH2N
    PE12     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_12;
 8003286:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
 800328a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800328c:	2302      	movs	r3, #2
 800328e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003290:	2300      	movs	r3, #0
 8003292:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003294:	2300      	movs	r3, #0
 8003296:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003298:	2301      	movs	r3, #1
 800329a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800329c:	f107 031c 	add.w	r3, r7, #28
 80032a0:	4619      	mov	r1, r3
 80032a2:	4848      	ldr	r0, [pc, #288]	; (80033c4 <HAL_TIM_MspPostInit+0x178>)
 80032a4:	f001 fcb8 	bl	8004c18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80032a8:	e083      	b.n	80033b2 <HAL_TIM_MspPostInit+0x166>
  else if(htim->Instance==TIM2)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032b2:	d11d      	bne.n	80032f0 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032b4:	4b42      	ldr	r3, [pc, #264]	; (80033c0 <HAL_TIM_MspPostInit+0x174>)
 80032b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032b8:	4a41      	ldr	r2, [pc, #260]	; (80033c0 <HAL_TIM_MspPostInit+0x174>)
 80032ba:	f043 0301 	orr.w	r3, r3, #1
 80032be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80032c0:	4b3f      	ldr	r3, [pc, #252]	; (80033c0 <HAL_TIM_MspPostInit+0x174>)
 80032c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032c4:	f003 0301 	and.w	r3, r3, #1
 80032c8:	617b      	str	r3, [r7, #20]
 80032ca:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80032cc:	2301      	movs	r3, #1
 80032ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032d0:	2302      	movs	r3, #2
 80032d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d4:	2300      	movs	r3, #0
 80032d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032d8:	2300      	movs	r3, #0
 80032da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80032dc:	2301      	movs	r3, #1
 80032de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032e0:	f107 031c 	add.w	r3, r7, #28
 80032e4:	4619      	mov	r1, r3
 80032e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032ea:	f001 fc95 	bl	8004c18 <HAL_GPIO_Init>
}
 80032ee:	e060      	b.n	80033b2 <HAL_TIM_MspPostInit+0x166>
  else if(htim->Instance==TIM4)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a34      	ldr	r2, [pc, #208]	; (80033c8 <HAL_TIM_MspPostInit+0x17c>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d139      	bne.n	800336e <HAL_TIM_MspPostInit+0x122>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80032fa:	4b31      	ldr	r3, [pc, #196]	; (80033c0 <HAL_TIM_MspPostInit+0x174>)
 80032fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032fe:	4a30      	ldr	r2, [pc, #192]	; (80033c0 <HAL_TIM_MspPostInit+0x174>)
 8003300:	f043 0308 	orr.w	r3, r3, #8
 8003304:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003306:	4b2e      	ldr	r3, [pc, #184]	; (80033c0 <HAL_TIM_MspPostInit+0x174>)
 8003308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800330a:	f003 0308 	and.w	r3, r3, #8
 800330e:	613b      	str	r3, [r7, #16]
 8003310:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003312:	4b2b      	ldr	r3, [pc, #172]	; (80033c0 <HAL_TIM_MspPostInit+0x174>)
 8003314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003316:	4a2a      	ldr	r2, [pc, #168]	; (80033c0 <HAL_TIM_MspPostInit+0x174>)
 8003318:	f043 0302 	orr.w	r3, r3, #2
 800331c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800331e:	4b28      	ldr	r3, [pc, #160]	; (80033c0 <HAL_TIM_MspPostInit+0x174>)
 8003320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003322:	f003 0302 	and.w	r3, r3, #2
 8003326:	60fb      	str	r3, [r7, #12]
 8003328:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800332a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800332e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003330:	2302      	movs	r3, #2
 8003332:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003334:	2300      	movs	r3, #0
 8003336:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003338:	2300      	movs	r3, #0
 800333a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800333c:	2302      	movs	r3, #2
 800333e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003340:	f107 031c 	add.w	r3, r7, #28
 8003344:	4619      	mov	r1, r3
 8003346:	4821      	ldr	r0, [pc, #132]	; (80033cc <HAL_TIM_MspPostInit+0x180>)
 8003348:	f001 fc66 	bl	8004c18 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800334c:	2340      	movs	r3, #64	; 0x40
 800334e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003350:	2302      	movs	r3, #2
 8003352:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003354:	2300      	movs	r3, #0
 8003356:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003358:	2300      	movs	r3, #0
 800335a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800335c:	2302      	movs	r3, #2
 800335e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003360:	f107 031c 	add.w	r3, r7, #28
 8003364:	4619      	mov	r1, r3
 8003366:	481a      	ldr	r0, [pc, #104]	; (80033d0 <HAL_TIM_MspPostInit+0x184>)
 8003368:	f001 fc56 	bl	8004c18 <HAL_GPIO_Init>
}
 800336c:	e021      	b.n	80033b2 <HAL_TIM_MspPostInit+0x166>
  else if(htim->Instance==TIM15)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a18      	ldr	r2, [pc, #96]	; (80033d4 <HAL_TIM_MspPostInit+0x188>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d11c      	bne.n	80033b2 <HAL_TIM_MspPostInit+0x166>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003378:	4b11      	ldr	r3, [pc, #68]	; (80033c0 <HAL_TIM_MspPostInit+0x174>)
 800337a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800337c:	4a10      	ldr	r2, [pc, #64]	; (80033c0 <HAL_TIM_MspPostInit+0x174>)
 800337e:	f043 0302 	orr.w	r3, r3, #2
 8003382:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003384:	4b0e      	ldr	r3, [pc, #56]	; (80033c0 <HAL_TIM_MspPostInit+0x174>)
 8003386:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003388:	f003 0302 	and.w	r3, r3, #2
 800338c:	60bb      	str	r3, [r7, #8]
 800338e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003390:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003394:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003396:	2302      	movs	r3, #2
 8003398:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800339a:	2300      	movs	r3, #0
 800339c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800339e:	2300      	movs	r3, #0
 80033a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 80033a2:	230e      	movs	r3, #14
 80033a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033a6:	f107 031c 	add.w	r3, r7, #28
 80033aa:	4619      	mov	r1, r3
 80033ac:	4808      	ldr	r0, [pc, #32]	; (80033d0 <HAL_TIM_MspPostInit+0x184>)
 80033ae:	f001 fc33 	bl	8004c18 <HAL_GPIO_Init>
}
 80033b2:	bf00      	nop
 80033b4:	3730      	adds	r7, #48	; 0x30
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	40012c00 	.word	0x40012c00
 80033c0:	40021000 	.word	0x40021000
 80033c4:	48001000 	.word	0x48001000
 80033c8:	40000800 	.word	0x40000800
 80033cc:	48000c00 	.word	0x48000c00
 80033d0:	48000400 	.word	0x48000400
 80033d4:	40014000 	.word	0x40014000

080033d8 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b088      	sub	sp, #32
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a1e      	ldr	r2, [pc, #120]	; (8003460 <HAL_SAI_MspInit+0x88>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d135      	bne.n	8003456 <HAL_SAI_MspInit+0x7e>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 80033ea:	4b1e      	ldr	r3, [pc, #120]	; (8003464 <HAL_SAI_MspInit+0x8c>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d10b      	bne.n	800340a <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80033f2:	4b1d      	ldr	r3, [pc, #116]	; (8003468 <HAL_SAI_MspInit+0x90>)
 80033f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033f6:	4a1c      	ldr	r2, [pc, #112]	; (8003468 <HAL_SAI_MspInit+0x90>)
 80033f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80033fc:	6613      	str	r3, [r2, #96]	; 0x60
 80033fe:	4b1a      	ldr	r3, [pc, #104]	; (8003468 <HAL_SAI_MspInit+0x90>)
 8003400:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003402:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003406:	60bb      	str	r3, [r7, #8]
 8003408:	68bb      	ldr	r3, [r7, #8]
    }
    SAI2_client ++;
 800340a:	4b16      	ldr	r3, [pc, #88]	; (8003464 <HAL_SAI_MspInit+0x8c>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	3301      	adds	r3, #1
 8003410:	4a14      	ldr	r2, [pc, #80]	; (8003464 <HAL_SAI_MspInit+0x8c>)
 8003412:	6013      	str	r3, [r2, #0]
    PB12     ------> SAI2_FS_A
    PB13     ------> SAI2_SCK_A
    PB15     ------> SAI2_SD_A
    PC6     ------> SAI2_MCLK_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8003414:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8003418:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800341a:	2302      	movs	r3, #2
 800341c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800341e:	2300      	movs	r3, #0
 8003420:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003422:	2300      	movs	r3, #0
 8003424:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8003426:	230d      	movs	r3, #13
 8003428:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800342a:	f107 030c 	add.w	r3, r7, #12
 800342e:	4619      	mov	r1, r3
 8003430:	480e      	ldr	r0, [pc, #56]	; (800346c <HAL_SAI_MspInit+0x94>)
 8003432:	f001 fbf1 	bl	8004c18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003436:	2340      	movs	r3, #64	; 0x40
 8003438:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800343a:	2302      	movs	r3, #2
 800343c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800343e:	2300      	movs	r3, #0
 8003440:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003442:	2300      	movs	r3, #0
 8003444:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8003446:	230d      	movs	r3, #13
 8003448:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800344a:	f107 030c 	add.w	r3, r7, #12
 800344e:	4619      	mov	r1, r3
 8003450:	4807      	ldr	r0, [pc, #28]	; (8003470 <HAL_SAI_MspInit+0x98>)
 8003452:	f001 fbe1 	bl	8004c18 <HAL_GPIO_Init>

    }
}
 8003456:	bf00      	nop
 8003458:	3720      	adds	r7, #32
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	40015804 	.word	0x40015804
 8003464:	20000844 	.word	0x20000844
 8003468:	40021000 	.word	0x40021000
 800346c:	48000400 	.word	0x48000400
 8003470:	48000800 	.word	0x48000800

08003474 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003474:	b480      	push	{r7}
 8003476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003478:	e7fe      	b.n	8003478 <NMI_Handler+0x4>

0800347a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800347a:	b480      	push	{r7}
 800347c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800347e:	e7fe      	b.n	800347e <HardFault_Handler+0x4>

08003480 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003480:	b480      	push	{r7}
 8003482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003484:	e7fe      	b.n	8003484 <MemManage_Handler+0x4>

08003486 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003486:	b480      	push	{r7}
 8003488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800348a:	e7fe      	b.n	800348a <BusFault_Handler+0x4>

0800348c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800348c:	b480      	push	{r7}
 800348e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003490:	e7fe      	b.n	8003490 <UsageFault_Handler+0x4>

08003492 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003492:	b480      	push	{r7}
 8003494:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003496:	bf00      	nop
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr

080034a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80034a0:	b480      	push	{r7}
 80034a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80034a4:	bf00      	nop
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr

080034ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80034ae:	b480      	push	{r7}
 80034b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80034b2:	bf00      	nop
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80034c0:	f000 fa3e 	bl	8003940 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80034c4:	bf00      	nop
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b084      	sub	sp, #16
 80034cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */
	static uint8_t mode = 0;

	extern enum State state;
	const float threshod = 12.0;
 80034ce:	4b28      	ldr	r3, [pc, #160]	; (8003570 <TIM1_CC_IRQHandler+0xa8>)
 80034d0:	60fb      	str	r3, [r7, #12]

	if (mode == 0) {
 80034d2:	4b28      	ldr	r3, [pc, #160]	; (8003574 <TIM1_CC_IRQHandler+0xac>)
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d112      	bne.n	8003500 <TIM1_CC_IRQHandler+0x38>
		// rising edge
		TIM1->CNT = 0;
 80034da:	4b27      	ldr	r3, [pc, #156]	; (8003578 <TIM1_CC_IRQHandler+0xb0>)
 80034dc:	2200      	movs	r2, #0
 80034de:	625a      	str	r2, [r3, #36]	; 0x24
		TIM1->CCER |= (0b1 << 1);
 80034e0:	4b25      	ldr	r3, [pc, #148]	; (8003578 <TIM1_CC_IRQHandler+0xb0>)
 80034e2:	6a1b      	ldr	r3, [r3, #32]
 80034e4:	4a24      	ldr	r2, [pc, #144]	; (8003578 <TIM1_CC_IRQHandler+0xb0>)
 80034e6:	f043 0302 	orr.w	r3, r3, #2
 80034ea:	6213      	str	r3, [r2, #32]
		TIM1->CCER &= ~(0b1 << 3);
 80034ec:	4b22      	ldr	r3, [pc, #136]	; (8003578 <TIM1_CC_IRQHandler+0xb0>)
 80034ee:	6a1b      	ldr	r3, [r3, #32]
 80034f0:	4a21      	ldr	r2, [pc, #132]	; (8003578 <TIM1_CC_IRQHandler+0xb0>)
 80034f2:	f023 0308 	bic.w	r3, r3, #8
 80034f6:	6213      	str	r3, [r2, #32]
		mode = 1;
 80034f8:	4b1e      	ldr	r3, [pc, #120]	; (8003574 <TIM1_CC_IRQHandler+0xac>)
 80034fa:	2201      	movs	r2, #1
 80034fc:	701a      	strb	r2, [r3, #0]
 80034fe:	e030      	b.n	8003562 <TIM1_CC_IRQHandler+0x9a>
	} else {
		// falling edge
		uint16_t local_count = TIM1->CNT;
 8003500:	4b1d      	ldr	r3, [pc, #116]	; (8003578 <TIM1_CC_IRQHandler+0xb0>)
 8003502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003504:	817b      	strh	r3, [r7, #10]
		float distance = (float)local_count * 1.0 / 144;
 8003506:	897b      	ldrh	r3, [r7, #10]
 8003508:	ee07 3a90 	vmov	s15, r3
 800350c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003510:	eddf 6a1a 	vldr	s13, [pc, #104]	; 800357c <TIM1_CC_IRQHandler+0xb4>
 8003514:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003518:	edc7 7a01 	vstr	s15, [r7, #4]
		printf("Distance: %f\n", distance);
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f7fd f82b 	bl	8000578 <__aeabi_f2d>
 8003522:	4602      	mov	r2, r0
 8003524:	460b      	mov	r3, r1
 8003526:	4816      	ldr	r0, [pc, #88]	; (8003580 <TIM1_CC_IRQHandler+0xb8>)
 8003528:	f008 fed0 	bl	800c2cc <iprintf>

		if (distance < threshod) {
 800352c:	ed97 7a01 	vldr	s14, [r7, #4]
 8003530:	edd7 7a03 	vldr	s15, [r7, #12]
 8003534:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800353c:	d502      	bpl.n	8003544 <TIM1_CC_IRQHandler+0x7c>
			state = AVOID_COLLISION;
 800353e:	4b11      	ldr	r3, [pc, #68]	; (8003584 <TIM1_CC_IRQHandler+0xbc>)
 8003540:	2204      	movs	r2, #4
 8003542:	701a      	strb	r2, [r3, #0]
		}

		TIM1->CCER &= ~(0b1 << 1);
 8003544:	4b0c      	ldr	r3, [pc, #48]	; (8003578 <TIM1_CC_IRQHandler+0xb0>)
 8003546:	6a1b      	ldr	r3, [r3, #32]
 8003548:	4a0b      	ldr	r2, [pc, #44]	; (8003578 <TIM1_CC_IRQHandler+0xb0>)
 800354a:	f023 0302 	bic.w	r3, r3, #2
 800354e:	6213      	str	r3, [r2, #32]
		TIM1->CCER &= ~(0b1 << 3);
 8003550:	4b09      	ldr	r3, [pc, #36]	; (8003578 <TIM1_CC_IRQHandler+0xb0>)
 8003552:	6a1b      	ldr	r3, [r3, #32]
 8003554:	4a08      	ldr	r2, [pc, #32]	; (8003578 <TIM1_CC_IRQHandler+0xb0>)
 8003556:	f023 0308 	bic.w	r3, r3, #8
 800355a:	6213      	str	r3, [r2, #32]
		mode = 0;
 800355c:	4b05      	ldr	r3, [pc, #20]	; (8003574 <TIM1_CC_IRQHandler+0xac>)
 800355e:	2200      	movs	r2, #0
 8003560:	701a      	strb	r2, [r3, #0]
	}

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003562:	4809      	ldr	r0, [pc, #36]	; (8003588 <TIM1_CC_IRQHandler+0xc0>)
 8003564:	f006 f84e 	bl	8009604 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8003568:	bf00      	nop
 800356a:	3710      	adds	r7, #16
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}
 8003570:	41400000 	.word	0x41400000
 8003574:	20000848 	.word	0x20000848
 8003578:	40012c00 	.word	0x40012c00
 800357c:	43100000 	.word	0x43100000
 8003580:	0800e444 	.word	0x0800e444
 8003584:	20000226 	.word	0x20000226
 8003588:	20000678 	.word	0x20000678

0800358c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	const uint32_t THRESHOD = 50;
 8003592:	2332      	movs	r3, #50	; 0x32
 8003594:	607b      	str	r3, [r7, #4]

	extern uint32_t count;

	static uint8_t mode = 0;

	if (mode == 0) {
 8003596:	4b22      	ldr	r3, [pc, #136]	; (8003620 <TIM3_IRQHandler+0x94>)
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d112      	bne.n	80035c4 <TIM3_IRQHandler+0x38>
		// falling edge
		TIM3->CNT = 0;
 800359e:	4b21      	ldr	r3, [pc, #132]	; (8003624 <TIM3_IRQHandler+0x98>)
 80035a0:	2200      	movs	r2, #0
 80035a2:	625a      	str	r2, [r3, #36]	; 0x24
		TIM3->CCER &= ~(0b1 << 5);
 80035a4:	4b1f      	ldr	r3, [pc, #124]	; (8003624 <TIM3_IRQHandler+0x98>)
 80035a6:	6a1b      	ldr	r3, [r3, #32]
 80035a8:	4a1e      	ldr	r2, [pc, #120]	; (8003624 <TIM3_IRQHandler+0x98>)
 80035aa:	f023 0320 	bic.w	r3, r3, #32
 80035ae:	6213      	str	r3, [r2, #32]
		TIM3->CCER &= ~(0b1 << 7);
 80035b0:	4b1c      	ldr	r3, [pc, #112]	; (8003624 <TIM3_IRQHandler+0x98>)
 80035b2:	6a1b      	ldr	r3, [r3, #32]
 80035b4:	4a1b      	ldr	r2, [pc, #108]	; (8003624 <TIM3_IRQHandler+0x98>)
 80035b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035ba:	6213      	str	r3, [r2, #32]
		mode = 1;
 80035bc:	4b18      	ldr	r3, [pc, #96]	; (8003620 <TIM3_IRQHandler+0x94>)
 80035be:	2201      	movs	r2, #1
 80035c0:	701a      	strb	r2, [r3, #0]
 80035c2:	e025      	b.n	8003610 <TIM3_IRQHandler+0x84>
	} else {
		// rising edge;
		uint32_t local_count = TIM3->CNT;
 80035c4:	4b17      	ldr	r3, [pc, #92]	; (8003624 <TIM3_IRQHandler+0x98>)
 80035c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c8:	603b      	str	r3, [r7, #0]
		count = local_count;
 80035ca:	4a17      	ldr	r2, [pc, #92]	; (8003628 <TIM3_IRQHandler+0x9c>)
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	6013      	str	r3, [r2, #0]

		if (local_count > THRESHOD) {
 80035d0:	683a      	ldr	r2, [r7, #0]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d90c      	bls.n	80035f2 <TIM3_IRQHandler+0x66>
			printf("IR interrupt: Local_count %d\n", local_count);
 80035d8:	6839      	ldr	r1, [r7, #0]
 80035da:	4814      	ldr	r0, [pc, #80]	; (800362c <TIM3_IRQHandler+0xa0>)
 80035dc:	f008 fe76 	bl	800c2cc <iprintf>
			ball_collected = 1;
 80035e0:	4b13      	ldr	r3, [pc, #76]	; (8003630 <TIM3_IRQHandler+0xa4>)
 80035e2:	2201      	movs	r2, #1
 80035e4:	701a      	strb	r2, [r3, #0]
			ball_count++;
 80035e6:	4b13      	ldr	r3, [pc, #76]	; (8003634 <TIM3_IRQHandler+0xa8>)
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	3301      	adds	r3, #1
 80035ec:	b2da      	uxtb	r2, r3
 80035ee:	4b11      	ldr	r3, [pc, #68]	; (8003634 <TIM3_IRQHandler+0xa8>)
 80035f0:	701a      	strb	r2, [r3, #0]
		}

		TIM3->CCER |= (0b1 << 5);
 80035f2:	4b0c      	ldr	r3, [pc, #48]	; (8003624 <TIM3_IRQHandler+0x98>)
 80035f4:	6a1b      	ldr	r3, [r3, #32]
 80035f6:	4a0b      	ldr	r2, [pc, #44]	; (8003624 <TIM3_IRQHandler+0x98>)
 80035f8:	f043 0320 	orr.w	r3, r3, #32
 80035fc:	6213      	str	r3, [r2, #32]
		TIM3->CCER &= ~(0b1 << 7);
 80035fe:	4b09      	ldr	r3, [pc, #36]	; (8003624 <TIM3_IRQHandler+0x98>)
 8003600:	6a1b      	ldr	r3, [r3, #32]
 8003602:	4a08      	ldr	r2, [pc, #32]	; (8003624 <TIM3_IRQHandler+0x98>)
 8003604:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003608:	6213      	str	r3, [r2, #32]
		mode = 0;
 800360a:	4b05      	ldr	r3, [pc, #20]	; (8003620 <TIM3_IRQHandler+0x94>)
 800360c:	2200      	movs	r2, #0
 800360e:	701a      	strb	r2, [r3, #0]
	}


  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003610:	4809      	ldr	r0, [pc, #36]	; (8003638 <TIM3_IRQHandler+0xac>)
 8003612:	f005 fff7 	bl	8009604 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003616:	bf00      	nop
 8003618:	3708      	adds	r7, #8
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	20000849 	.word	0x20000849
 8003624:	40000400 	.word	0x40000400
 8003628:	20000234 	.word	0x20000234
 800362c:	0800e454 	.word	0x0800e454
 8003630:	2000022c 	.word	0x2000022c
 8003634:	2000022b 	.word	0x2000022b
 8003638:	20000710 	.word	0x20000710

0800363c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
	extern enum State state;
	if (state == AVOID_COLLISION) {
 8003640:	4b0f      	ldr	r3, [pc, #60]	; (8003680 <TIM5_IRQHandler+0x44>)
 8003642:	781b      	ldrb	r3, [r3, #0]
 8003644:	2b04      	cmp	r3, #4
 8003646:	d10a      	bne.n	800365e <TIM5_IRQHandler+0x22>
		extern uint8_t avoid_finished;
		if (avoid_finished == 0) {
 8003648:	4b0e      	ldr	r3, [pc, #56]	; (8003684 <TIM5_IRQHandler+0x48>)
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d102      	bne.n	8003656 <TIM5_IRQHandler+0x1a>
			avoid_finished = 1;
 8003650:	4b0c      	ldr	r3, [pc, #48]	; (8003684 <TIM5_IRQHandler+0x48>)
 8003652:	2201      	movs	r2, #1
 8003654:	701a      	strb	r2, [r3, #0]
		}
		printf("Avoid_Collision: Timer 5 seconds\n");
 8003656:	480c      	ldr	r0, [pc, #48]	; (8003688 <TIM5_IRQHandler+0x4c>)
 8003658:	f008 febe 	bl	800c3d8 <puts>
 800365c:	e00b      	b.n	8003676 <TIM5_IRQHandler+0x3a>
	} else if (state == COLLECT) {
 800365e:	4b08      	ldr	r3, [pc, #32]	; (8003680 <TIM5_IRQHandler+0x44>)
 8003660:	781b      	ldrb	r3, [r3, #0]
 8003662:	2b02      	cmp	r3, #2
 8003664:	d107      	bne.n	8003676 <TIM5_IRQHandler+0x3a>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7,  0);
 8003666:	2200      	movs	r2, #0
 8003668:	2180      	movs	r1, #128	; 0x80
 800366a:	4808      	ldr	r0, [pc, #32]	; (800368c <TIM5_IRQHandler+0x50>)
 800366c:	f001 fc66 	bl	8004f3c <HAL_GPIO_WritePin>
		HAL_TIM_Base_Stop_IT(&htim5);
 8003670:	4807      	ldr	r0, [pc, #28]	; (8003690 <TIM5_IRQHandler+0x54>)
 8003672:	f005 fc8f 	bl	8008f94 <HAL_TIM_Base_Stop_IT>
	}

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003676:	4806      	ldr	r0, [pc, #24]	; (8003690 <TIM5_IRQHandler+0x54>)
 8003678:	f005 ffc4 	bl	8009604 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800367c:	bf00      	nop
 800367e:	bd80      	pop	{r7, pc}
 8003680:	20000226 	.word	0x20000226
 8003684:	2000022e 	.word	0x2000022e
 8003688:	0800e474 	.word	0x0800e474
 800368c:	48001000 	.word	0x48001000
 8003690:	200007a8 	.word	0x200007a8

08003694 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003694:	b480      	push	{r7}
 8003696:	af00      	add	r7, sp, #0
	return 1;
 8003698:	2301      	movs	r3, #1
}
 800369a:	4618      	mov	r0, r3
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <_kill>:

int _kill(int pid, int sig)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b082      	sub	sp, #8
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80036ae:	f008 f889 	bl	800b7c4 <__errno>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2216      	movs	r2, #22
 80036b6:	601a      	str	r2, [r3, #0]
	return -1;
 80036b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3708      	adds	r7, #8
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}

080036c4 <_exit>:

void _exit (int status)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80036cc:	f04f 31ff 	mov.w	r1, #4294967295
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f7ff ffe7 	bl	80036a4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80036d6:	e7fe      	b.n	80036d6 <_exit+0x12>

080036d8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b086      	sub	sp, #24
 80036dc:	af00      	add	r7, sp, #0
 80036de:	60f8      	str	r0, [r7, #12]
 80036e0:	60b9      	str	r1, [r7, #8]
 80036e2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036e4:	2300      	movs	r3, #0
 80036e6:	617b      	str	r3, [r7, #20]
 80036e8:	e00a      	b.n	8003700 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80036ea:	f3af 8000 	nop.w
 80036ee:	4601      	mov	r1, r0
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	1c5a      	adds	r2, r3, #1
 80036f4:	60ba      	str	r2, [r7, #8]
 80036f6:	b2ca      	uxtb	r2, r1
 80036f8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	3301      	adds	r3, #1
 80036fe:	617b      	str	r3, [r7, #20]
 8003700:	697a      	ldr	r2, [r7, #20]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	429a      	cmp	r2, r3
 8003706:	dbf0      	blt.n	80036ea <_read+0x12>
	}

return len;
 8003708:	687b      	ldr	r3, [r7, #4]
}
 800370a:	4618      	mov	r0, r3
 800370c:	3718      	adds	r7, #24
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}

08003712 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003712:	b580      	push	{r7, lr}
 8003714:	b086      	sub	sp, #24
 8003716:	af00      	add	r7, sp, #0
 8003718:	60f8      	str	r0, [r7, #12]
 800371a:	60b9      	str	r1, [r7, #8]
 800371c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800371e:	2300      	movs	r3, #0
 8003720:	617b      	str	r3, [r7, #20]
 8003722:	e009      	b.n	8003738 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	1c5a      	adds	r2, r3, #1
 8003728:	60ba      	str	r2, [r7, #8]
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	4618      	mov	r0, r3
 800372e:	f7fe fff1 	bl	8002714 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	3301      	adds	r3, #1
 8003736:	617b      	str	r3, [r7, #20]
 8003738:	697a      	ldr	r2, [r7, #20]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	429a      	cmp	r2, r3
 800373e:	dbf1      	blt.n	8003724 <_write+0x12>
	}
	return len;
 8003740:	687b      	ldr	r3, [r7, #4]
}
 8003742:	4618      	mov	r0, r3
 8003744:	3718      	adds	r7, #24
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}

0800374a <_close>:

int _close(int file)
{
 800374a:	b480      	push	{r7}
 800374c:	b083      	sub	sp, #12
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
	return -1;
 8003752:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003756:	4618      	mov	r0, r3
 8003758:	370c      	adds	r7, #12
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr

08003762 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003762:	b480      	push	{r7}
 8003764:	b083      	sub	sp, #12
 8003766:	af00      	add	r7, sp, #0
 8003768:	6078      	str	r0, [r7, #4]
 800376a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003772:	605a      	str	r2, [r3, #4]
	return 0;
 8003774:	2300      	movs	r3, #0
}
 8003776:	4618      	mov	r0, r3
 8003778:	370c      	adds	r7, #12
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr

08003782 <_isatty>:

int _isatty(int file)
{
 8003782:	b480      	push	{r7}
 8003784:	b083      	sub	sp, #12
 8003786:	af00      	add	r7, sp, #0
 8003788:	6078      	str	r0, [r7, #4]
	return 1;
 800378a:	2301      	movs	r3, #1
}
 800378c:	4618      	mov	r0, r3
 800378e:	370c      	adds	r7, #12
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003798:	b480      	push	{r7}
 800379a:	b085      	sub	sp, #20
 800379c:	af00      	add	r7, sp, #0
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	60b9      	str	r1, [r7, #8]
 80037a2:	607a      	str	r2, [r7, #4]
	return 0;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3714      	adds	r7, #20
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr
	...

080037b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b086      	sub	sp, #24
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80037bc:	4a14      	ldr	r2, [pc, #80]	; (8003810 <_sbrk+0x5c>)
 80037be:	4b15      	ldr	r3, [pc, #84]	; (8003814 <_sbrk+0x60>)
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80037c8:	4b13      	ldr	r3, [pc, #76]	; (8003818 <_sbrk+0x64>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d102      	bne.n	80037d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80037d0:	4b11      	ldr	r3, [pc, #68]	; (8003818 <_sbrk+0x64>)
 80037d2:	4a12      	ldr	r2, [pc, #72]	; (800381c <_sbrk+0x68>)
 80037d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80037d6:	4b10      	ldr	r3, [pc, #64]	; (8003818 <_sbrk+0x64>)
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4413      	add	r3, r2
 80037de:	693a      	ldr	r2, [r7, #16]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d207      	bcs.n	80037f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80037e4:	f007 ffee 	bl	800b7c4 <__errno>
 80037e8:	4603      	mov	r3, r0
 80037ea:	220c      	movs	r2, #12
 80037ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80037ee:	f04f 33ff 	mov.w	r3, #4294967295
 80037f2:	e009      	b.n	8003808 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80037f4:	4b08      	ldr	r3, [pc, #32]	; (8003818 <_sbrk+0x64>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80037fa:	4b07      	ldr	r3, [pc, #28]	; (8003818 <_sbrk+0x64>)
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4413      	add	r3, r2
 8003802:	4a05      	ldr	r2, [pc, #20]	; (8003818 <_sbrk+0x64>)
 8003804:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003806:	68fb      	ldr	r3, [r7, #12]
}
 8003808:	4618      	mov	r0, r3
 800380a:	3718      	adds	r7, #24
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}
 8003810:	200a0000 	.word	0x200a0000
 8003814:	00000400 	.word	0x00000400
 8003818:	2000084c 	.word	0x2000084c
 800381c:	20000868 	.word	0x20000868

08003820 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003820:	b480      	push	{r7}
 8003822:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003824:	4b06      	ldr	r3, [pc, #24]	; (8003840 <SystemInit+0x20>)
 8003826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800382a:	4a05      	ldr	r2, [pc, #20]	; (8003840 <SystemInit+0x20>)
 800382c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003830:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003834:	bf00      	nop
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr
 800383e:	bf00      	nop
 8003840:	e000ed00 	.word	0xe000ed00

08003844 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003844:	f8df d034 	ldr.w	sp, [pc, #52]	; 800387c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003848:	f7ff ffea 	bl	8003820 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800384c:	480c      	ldr	r0, [pc, #48]	; (8003880 <LoopForever+0x6>)
  ldr r1, =_edata
 800384e:	490d      	ldr	r1, [pc, #52]	; (8003884 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003850:	4a0d      	ldr	r2, [pc, #52]	; (8003888 <LoopForever+0xe>)
  movs r3, #0
 8003852:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003854:	e002      	b.n	800385c <LoopCopyDataInit>

08003856 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003856:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003858:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800385a:	3304      	adds	r3, #4

0800385c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800385c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800385e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003860:	d3f9      	bcc.n	8003856 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003862:	4a0a      	ldr	r2, [pc, #40]	; (800388c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003864:	4c0a      	ldr	r4, [pc, #40]	; (8003890 <LoopForever+0x16>)
  movs r3, #0
 8003866:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003868:	e001      	b.n	800386e <LoopFillZerobss>

0800386a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800386a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800386c:	3204      	adds	r2, #4

0800386e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800386e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003870:	d3fb      	bcc.n	800386a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003872:	f007 ffad 	bl	800b7d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003876:	f7fd ff7f 	bl	8001778 <main>

0800387a <LoopForever>:

LoopForever:
    b LoopForever
 800387a:	e7fe      	b.n	800387a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800387c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8003880:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003884:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8003888:	0800e8f4 	.word	0x0800e8f4
  ldr r2, =_sbss
 800388c:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8003890:	20000864 	.word	0x20000864

08003894 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003894:	e7fe      	b.n	8003894 <ADC1_IRQHandler>

08003896 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003896:	b580      	push	{r7, lr}
 8003898:	b082      	sub	sp, #8
 800389a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800389c:	2300      	movs	r3, #0
 800389e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80038a0:	2003      	movs	r0, #3
 80038a2:	f001 f969 	bl	8004b78 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80038a6:	2000      	movs	r0, #0
 80038a8:	f000 f80e 	bl	80038c8 <HAL_InitTick>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d002      	beq.n	80038b8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	71fb      	strb	r3, [r7, #7]
 80038b6:	e001      	b.n	80038bc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80038b8:	f7ff f872 	bl	80029a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80038bc:	79fb      	ldrb	r3, [r7, #7]
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3708      	adds	r7, #8
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
	...

080038c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80038d0:	2300      	movs	r3, #0
 80038d2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80038d4:	4b17      	ldr	r3, [pc, #92]	; (8003934 <HAL_InitTick+0x6c>)
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d023      	beq.n	8003924 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80038dc:	4b16      	ldr	r3, [pc, #88]	; (8003938 <HAL_InitTick+0x70>)
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	4b14      	ldr	r3, [pc, #80]	; (8003934 <HAL_InitTick+0x6c>)
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	4619      	mov	r1, r3
 80038e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80038ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80038ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80038f2:	4618      	mov	r0, r3
 80038f4:	f001 f983 	bl	8004bfe <HAL_SYSTICK_Config>
 80038f8:	4603      	mov	r3, r0
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d10f      	bne.n	800391e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2b0f      	cmp	r3, #15
 8003902:	d809      	bhi.n	8003918 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003904:	2200      	movs	r2, #0
 8003906:	6879      	ldr	r1, [r7, #4]
 8003908:	f04f 30ff 	mov.w	r0, #4294967295
 800390c:	f001 f93f 	bl	8004b8e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003910:	4a0a      	ldr	r2, [pc, #40]	; (800393c <HAL_InitTick+0x74>)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6013      	str	r3, [r2, #0]
 8003916:	e007      	b.n	8003928 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	73fb      	strb	r3, [r7, #15]
 800391c:	e004      	b.n	8003928 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	73fb      	strb	r3, [r7, #15]
 8003922:	e001      	b.n	8003928 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003928:	7bfb      	ldrb	r3, [r7, #15]
}
 800392a:	4618      	mov	r0, r3
 800392c:	3710      	adds	r7, #16
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	20000010 	.word	0x20000010
 8003938:	20000008 	.word	0x20000008
 800393c:	2000000c 	.word	0x2000000c

08003940 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003940:	b480      	push	{r7}
 8003942:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003944:	4b06      	ldr	r3, [pc, #24]	; (8003960 <HAL_IncTick+0x20>)
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	461a      	mov	r2, r3
 800394a:	4b06      	ldr	r3, [pc, #24]	; (8003964 <HAL_IncTick+0x24>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4413      	add	r3, r2
 8003950:	4a04      	ldr	r2, [pc, #16]	; (8003964 <HAL_IncTick+0x24>)
 8003952:	6013      	str	r3, [r2, #0]
}
 8003954:	bf00      	nop
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr
 800395e:	bf00      	nop
 8003960:	20000010 	.word	0x20000010
 8003964:	20000850 	.word	0x20000850

08003968 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003968:	b480      	push	{r7}
 800396a:	af00      	add	r7, sp, #0
  return uwTick;
 800396c:	4b03      	ldr	r3, [pc, #12]	; (800397c <HAL_GetTick+0x14>)
 800396e:	681b      	ldr	r3, [r3, #0]
}
 8003970:	4618      	mov	r0, r3
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr
 800397a:	bf00      	nop
 800397c:	20000850 	.word	0x20000850

08003980 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003988:	f7ff ffee 	bl	8003968 <HAL_GetTick>
 800398c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003998:	d005      	beq.n	80039a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800399a:	4b0a      	ldr	r3, [pc, #40]	; (80039c4 <HAL_Delay+0x44>)
 800399c:	781b      	ldrb	r3, [r3, #0]
 800399e:	461a      	mov	r2, r3
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	4413      	add	r3, r2
 80039a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80039a6:	bf00      	nop
 80039a8:	f7ff ffde 	bl	8003968 <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	68fa      	ldr	r2, [r7, #12]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d8f7      	bhi.n	80039a8 <HAL_Delay+0x28>
  {
  }
}
 80039b8:	bf00      	nop
 80039ba:	bf00      	nop
 80039bc:	3710      	adds	r7, #16
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	20000010 	.word	0x20000010

080039c8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	431a      	orrs	r2, r3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	609a      	str	r2, [r3, #8]
}
 80039e2:	bf00      	nop
 80039e4:	370c      	adds	r7, #12
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr

080039ee <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80039ee:	b480      	push	{r7}
 80039f0:	b083      	sub	sp, #12
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
 80039f6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	431a      	orrs	r2, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	609a      	str	r2, [r3, #8]
}
 8003a08:	bf00      	nop
 8003a0a:	370c      	adds	r7, #12
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr

08003a14 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	370c      	adds	r7, #12
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr

08003a30 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b087      	sub	sp, #28
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	607a      	str	r2, [r7, #4]
 8003a3c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	3360      	adds	r3, #96	; 0x60
 8003a42:	461a      	mov	r2, r3
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	4413      	add	r3, r2
 8003a4a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	4b08      	ldr	r3, [pc, #32]	; (8003a74 <LL_ADC_SetOffset+0x44>)
 8003a52:	4013      	ands	r3, r2
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003a5a:	683a      	ldr	r2, [r7, #0]
 8003a5c:	430a      	orrs	r2, r1
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003a68:	bf00      	nop
 8003a6a:	371c      	adds	r7, #28
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr
 8003a74:	03fff000 	.word	0x03fff000

08003a78 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b085      	sub	sp, #20
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	3360      	adds	r3, #96	; 0x60
 8003a86:	461a      	mov	r2, r3
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	4413      	add	r3, r2
 8003a8e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3714      	adds	r7, #20
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b087      	sub	sp, #28
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	60b9      	str	r1, [r7, #8]
 8003aae:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	3360      	adds	r3, #96	; 0x60
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	4413      	add	r3, r2
 8003abc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	431a      	orrs	r2, r3
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003ace:	bf00      	nop
 8003ad0:	371c      	adds	r7, #28
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr

08003ada <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003ada:	b480      	push	{r7}
 8003adc:	b083      	sub	sp, #12
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
 8003ae2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	695b      	ldr	r3, [r3, #20]
 8003ae8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	431a      	orrs	r2, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	615a      	str	r2, [r3, #20]
}
 8003af4:	bf00      	nop
 8003af6:	370c      	adds	r7, #12
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr

08003b00 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b087      	sub	sp, #28
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	60b9      	str	r1, [r7, #8]
 8003b0a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	3330      	adds	r3, #48	; 0x30
 8003b10:	461a      	mov	r2, r3
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	0a1b      	lsrs	r3, r3, #8
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	f003 030c 	and.w	r3, r3, #12
 8003b1c:	4413      	add	r3, r2
 8003b1e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	f003 031f 	and.w	r3, r3, #31
 8003b2a:	211f      	movs	r1, #31
 8003b2c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b30:	43db      	mvns	r3, r3
 8003b32:	401a      	ands	r2, r3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	0e9b      	lsrs	r3, r3, #26
 8003b38:	f003 011f 	and.w	r1, r3, #31
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	f003 031f 	and.w	r3, r3, #31
 8003b42:	fa01 f303 	lsl.w	r3, r1, r3
 8003b46:	431a      	orrs	r2, r3
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003b4c:	bf00      	nop
 8003b4e:	371c      	adds	r7, #28
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b087      	sub	sp, #28
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	3314      	adds	r3, #20
 8003b68:	461a      	mov	r2, r3
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	0e5b      	lsrs	r3, r3, #25
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	f003 0304 	and.w	r3, r3, #4
 8003b74:	4413      	add	r3, r2
 8003b76:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	0d1b      	lsrs	r3, r3, #20
 8003b80:	f003 031f 	and.w	r3, r3, #31
 8003b84:	2107      	movs	r1, #7
 8003b86:	fa01 f303 	lsl.w	r3, r1, r3
 8003b8a:	43db      	mvns	r3, r3
 8003b8c:	401a      	ands	r2, r3
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	0d1b      	lsrs	r3, r3, #20
 8003b92:	f003 031f 	and.w	r3, r3, #31
 8003b96:	6879      	ldr	r1, [r7, #4]
 8003b98:	fa01 f303 	lsl.w	r3, r1, r3
 8003b9c:	431a      	orrs	r2, r3
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003ba2:	bf00      	nop
 8003ba4:	371c      	adds	r7, #28
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr
	...

08003bb0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b085      	sub	sp, #20
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	60b9      	str	r1, [r7, #8]
 8003bba:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bc8:	43db      	mvns	r3, r3
 8003bca:	401a      	ands	r2, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f003 0318 	and.w	r3, r3, #24
 8003bd2:	4908      	ldr	r1, [pc, #32]	; (8003bf4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003bd4:	40d9      	lsrs	r1, r3
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	400b      	ands	r3, r1
 8003bda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bde:	431a      	orrs	r2, r3
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003be6:	bf00      	nop
 8003be8:	3714      	adds	r7, #20
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr
 8003bf2:	bf00      	nop
 8003bf4:	0007ffff 	.word	0x0007ffff

08003bf8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b083      	sub	sp, #12
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003c08:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	6093      	str	r3, [r2, #8]
}
 8003c10:	bf00      	nop
 8003c12:	370c      	adds	r7, #12
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr

08003c1c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c30:	d101      	bne.n	8003c36 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003c32:	2301      	movs	r3, #1
 8003c34:	e000      	b.n	8003c38 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003c36:	2300      	movs	r3, #0
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	370c      	adds	r7, #12
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr

08003c44 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003c54:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003c58:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003c60:	bf00      	nop
 8003c62:	370c      	adds	r7, #12
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr

08003c6c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c7c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c80:	d101      	bne.n	8003c86 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003c82:	2301      	movs	r3, #1
 8003c84:	e000      	b.n	8003c88 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003c86:	2300      	movs	r3, #0
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	f003 0301 	and.w	r3, r3, #1
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d101      	bne.n	8003cac <LL_ADC_IsEnabled+0x18>
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e000      	b.n	8003cae <LL_ADC_IsEnabled+0x1a>
 8003cac:	2300      	movs	r3, #0
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	370c      	adds	r7, #12
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr

08003cba <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003cba:	b480      	push	{r7}
 8003cbc:	b083      	sub	sp, #12
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	f003 0304 	and.w	r3, r3, #4
 8003cca:	2b04      	cmp	r3, #4
 8003ccc:	d101      	bne.n	8003cd2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e000      	b.n	8003cd4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003cd2:	2300      	movs	r3, #0
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	370c      	adds	r7, #12
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	f003 0308 	and.w	r3, r3, #8
 8003cf0:	2b08      	cmp	r3, #8
 8003cf2:	d101      	bne.n	8003cf8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e000      	b.n	8003cfa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	370c      	adds	r7, #12
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr
	...

08003d08 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b088      	sub	sp, #32
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d10:	2300      	movs	r3, #0
 8003d12:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003d14:	2300      	movs	r3, #0
 8003d16:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d101      	bne.n	8003d22 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e12f      	b.n	8003f82 <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	691b      	ldr	r3, [r3, #16]
 8003d26:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d109      	bne.n	8003d44 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f7fe fe59 	bl	80029e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f7ff ff67 	bl	8003c1c <LL_ADC_IsDeepPowerDownEnabled>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d004      	beq.n	8003d5e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f7ff ff4d 	bl	8003bf8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4618      	mov	r0, r3
 8003d64:	f7ff ff82 	bl	8003c6c <LL_ADC_IsInternalRegulatorEnabled>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d115      	bne.n	8003d9a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4618      	mov	r0, r3
 8003d74:	f7ff ff66 	bl	8003c44 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003d78:	4b84      	ldr	r3, [pc, #528]	; (8003f8c <HAL_ADC_Init+0x284>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	099b      	lsrs	r3, r3, #6
 8003d7e:	4a84      	ldr	r2, [pc, #528]	; (8003f90 <HAL_ADC_Init+0x288>)
 8003d80:	fba2 2303 	umull	r2, r3, r2, r3
 8003d84:	099b      	lsrs	r3, r3, #6
 8003d86:	3301      	adds	r3, #1
 8003d88:	005b      	lsls	r3, r3, #1
 8003d8a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003d8c:	e002      	b.n	8003d94 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	3b01      	subs	r3, #1
 8003d92:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d1f9      	bne.n	8003d8e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f7ff ff64 	bl	8003c6c <LL_ADC_IsInternalRegulatorEnabled>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d10d      	bne.n	8003dc6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dae:	f043 0210 	orr.w	r2, r3, #16
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dba:	f043 0201 	orr.w	r2, r3, #1
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f7ff ff75 	bl	8003cba <LL_ADC_REG_IsConversionOngoing>
 8003dd0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dd6:	f003 0310 	and.w	r3, r3, #16
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	f040 80c8 	bne.w	8003f70 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	f040 80c4 	bne.w	8003f70 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dec:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003df0:	f043 0202 	orr.w	r2, r3, #2
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f7ff ff49 	bl	8003c94 <LL_ADC_IsEnabled>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d10b      	bne.n	8003e20 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003e08:	4862      	ldr	r0, [pc, #392]	; (8003f94 <HAL_ADC_Init+0x28c>)
 8003e0a:	f7ff ff43 	bl	8003c94 <LL_ADC_IsEnabled>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d105      	bne.n	8003e20 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	4619      	mov	r1, r3
 8003e1a:	485f      	ldr	r0, [pc, #380]	; (8003f98 <HAL_ADC_Init+0x290>)
 8003e1c:	f7ff fdd4 	bl	80039c8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	7e5b      	ldrb	r3, [r3, #25]
 8003e24:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003e2a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003e30:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003e36:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e3e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003e40:	4313      	orrs	r3, r2
 8003e42:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d106      	bne.n	8003e5c <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e52:	3b01      	subs	r3, #1
 8003e54:	045b      	lsls	r3, r3, #17
 8003e56:	69ba      	ldr	r2, [r7, #24]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d009      	beq.n	8003e78 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e68:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e70:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003e72:	69ba      	ldr	r2, [r7, #24]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	68da      	ldr	r2, [r3, #12]
 8003e7e:	4b47      	ldr	r3, [pc, #284]	; (8003f9c <HAL_ADC_Init+0x294>)
 8003e80:	4013      	ands	r3, r2
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	6812      	ldr	r2, [r2, #0]
 8003e86:	69b9      	ldr	r1, [r7, #24]
 8003e88:	430b      	orrs	r3, r1
 8003e8a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4618      	mov	r0, r3
 8003e92:	f7ff ff12 	bl	8003cba <LL_ADC_REG_IsConversionOngoing>
 8003e96:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f7ff ff1f 	bl	8003ce0 <LL_ADC_INJ_IsConversionOngoing>
 8003ea2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d140      	bne.n	8003f2c <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d13d      	bne.n	8003f2c <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	7e1b      	ldrb	r3, [r3, #24]
 8003eb8:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003eba:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003ec2:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ed2:	f023 0306 	bic.w	r3, r3, #6
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	6812      	ldr	r2, [r2, #0]
 8003eda:	69b9      	ldr	r1, [r7, #24]
 8003edc:	430b      	orrs	r3, r1
 8003ede:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d118      	bne.n	8003f1c <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	691b      	ldr	r3, [r3, #16]
 8003ef0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003ef4:	f023 0304 	bic.w	r3, r3, #4
 8003ef8:	687a      	ldr	r2, [r7, #4]
 8003efa:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003f00:	4311      	orrs	r1, r2
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003f06:	4311      	orrs	r1, r2
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003f0c:	430a      	orrs	r2, r1
 8003f0e:	431a      	orrs	r2, r3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f042 0201 	orr.w	r2, r2, #1
 8003f18:	611a      	str	r2, [r3, #16]
 8003f1a:	e007      	b.n	8003f2c <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	691a      	ldr	r2, [r3, #16]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f022 0201 	bic.w	r2, r2, #1
 8003f2a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	691b      	ldr	r3, [r3, #16]
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d10c      	bne.n	8003f4e <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f3a:	f023 010f 	bic.w	r1, r3, #15
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	69db      	ldr	r3, [r3, #28]
 8003f42:	1e5a      	subs	r2, r3, #1
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	430a      	orrs	r2, r1
 8003f4a:	631a      	str	r2, [r3, #48]	; 0x30
 8003f4c:	e007      	b.n	8003f5e <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f022 020f 	bic.w	r2, r2, #15
 8003f5c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f62:	f023 0303 	bic.w	r3, r3, #3
 8003f66:	f043 0201 	orr.w	r2, r3, #1
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	659a      	str	r2, [r3, #88]	; 0x58
 8003f6e:	e007      	b.n	8003f80 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f74:	f043 0210 	orr.w	r2, r3, #16
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003f80:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3720      	adds	r7, #32
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	20000008 	.word	0x20000008
 8003f90:	053e2d63 	.word	0x053e2d63
 8003f94:	50040000 	.word	0x50040000
 8003f98:	50040300 	.word	0x50040300
 8003f9c:	fff0c007 	.word	0xfff0c007

08003fa0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b0b6      	sub	sp, #216	; 0xd8
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003faa:	2300      	movs	r3, #0
 8003fac:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d101      	bne.n	8003fc2 <HAL_ADC_ConfigChannel+0x22>
 8003fbe:	2302      	movs	r3, #2
 8003fc0:	e3d5      	b.n	800476e <HAL_ADC_ConfigChannel+0x7ce>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f7ff fe73 	bl	8003cba <LL_ADC_REG_IsConversionOngoing>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	f040 83ba 	bne.w	8004750 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	2b05      	cmp	r3, #5
 8003fe2:	d824      	bhi.n	800402e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	3b02      	subs	r3, #2
 8003fea:	2b03      	cmp	r3, #3
 8003fec:	d81b      	bhi.n	8004026 <HAL_ADC_ConfigChannel+0x86>
 8003fee:	a201      	add	r2, pc, #4	; (adr r2, 8003ff4 <HAL_ADC_ConfigChannel+0x54>)
 8003ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ff4:	08004005 	.word	0x08004005
 8003ff8:	0800400d 	.word	0x0800400d
 8003ffc:	08004015 	.word	0x08004015
 8004000:	0800401d 	.word	0x0800401d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	220c      	movs	r2, #12
 8004008:	605a      	str	r2, [r3, #4]
          break;
 800400a:	e011      	b.n	8004030 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	2212      	movs	r2, #18
 8004010:	605a      	str	r2, [r3, #4]
          break;
 8004012:	e00d      	b.n	8004030 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	2218      	movs	r2, #24
 8004018:	605a      	str	r2, [r3, #4]
          break;
 800401a:	e009      	b.n	8004030 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004022:	605a      	str	r2, [r3, #4]
          break;
 8004024:	e004      	b.n	8004030 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	2206      	movs	r2, #6
 800402a:	605a      	str	r2, [r3, #4]
          break;
 800402c:	e000      	b.n	8004030 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800402e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6818      	ldr	r0, [r3, #0]
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	6859      	ldr	r1, [r3, #4]
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	461a      	mov	r2, r3
 800403e:	f7ff fd5f 	bl	8003b00 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4618      	mov	r0, r3
 8004048:	f7ff fe37 	bl	8003cba <LL_ADC_REG_IsConversionOngoing>
 800404c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4618      	mov	r0, r3
 8004056:	f7ff fe43 	bl	8003ce0 <LL_ADC_INJ_IsConversionOngoing>
 800405a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800405e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004062:	2b00      	cmp	r3, #0
 8004064:	f040 81c1 	bne.w	80043ea <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004068:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800406c:	2b00      	cmp	r3, #0
 800406e:	f040 81bc 	bne.w	80043ea <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800407a:	d10f      	bne.n	800409c <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6818      	ldr	r0, [r3, #0]
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	2200      	movs	r2, #0
 8004086:	4619      	mov	r1, r3
 8004088:	f7ff fd66 	bl	8003b58 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8004094:	4618      	mov	r0, r3
 8004096:	f7ff fd20 	bl	8003ada <LL_ADC_SetSamplingTimeCommonConfig>
 800409a:	e00e      	b.n	80040ba <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6818      	ldr	r0, [r3, #0]
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	6819      	ldr	r1, [r3, #0]
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	461a      	mov	r2, r3
 80040aa:	f7ff fd55 	bl	8003b58 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	2100      	movs	r1, #0
 80040b4:	4618      	mov	r0, r3
 80040b6:	f7ff fd10 	bl	8003ada <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	695a      	ldr	r2, [r3, #20]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	08db      	lsrs	r3, r3, #3
 80040c6:	f003 0303 	and.w	r3, r3, #3
 80040ca:	005b      	lsls	r3, r3, #1
 80040cc:	fa02 f303 	lsl.w	r3, r2, r3
 80040d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	691b      	ldr	r3, [r3, #16]
 80040d8:	2b04      	cmp	r3, #4
 80040da:	d00a      	beq.n	80040f2 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6818      	ldr	r0, [r3, #0]
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	6919      	ldr	r1, [r3, #16]
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80040ec:	f7ff fca0 	bl	8003a30 <LL_ADC_SetOffset>
 80040f0:	e17b      	b.n	80043ea <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	2100      	movs	r1, #0
 80040f8:	4618      	mov	r0, r3
 80040fa:	f7ff fcbd 	bl	8003a78 <LL_ADC_GetOffsetChannel>
 80040fe:	4603      	mov	r3, r0
 8004100:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004104:	2b00      	cmp	r3, #0
 8004106:	d10a      	bne.n	800411e <HAL_ADC_ConfigChannel+0x17e>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	2100      	movs	r1, #0
 800410e:	4618      	mov	r0, r3
 8004110:	f7ff fcb2 	bl	8003a78 <LL_ADC_GetOffsetChannel>
 8004114:	4603      	mov	r3, r0
 8004116:	0e9b      	lsrs	r3, r3, #26
 8004118:	f003 021f 	and.w	r2, r3, #31
 800411c:	e01e      	b.n	800415c <HAL_ADC_ConfigChannel+0x1bc>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	2100      	movs	r1, #0
 8004124:	4618      	mov	r0, r3
 8004126:	f7ff fca7 	bl	8003a78 <LL_ADC_GetOffsetChannel>
 800412a:	4603      	mov	r3, r0
 800412c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004130:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004134:	fa93 f3a3 	rbit	r3, r3
 8004138:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800413c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004140:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004144:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004148:	2b00      	cmp	r3, #0
 800414a:	d101      	bne.n	8004150 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 800414c:	2320      	movs	r3, #32
 800414e:	e004      	b.n	800415a <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8004150:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004154:	fab3 f383 	clz	r3, r3
 8004158:	b2db      	uxtb	r3, r3
 800415a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004164:	2b00      	cmp	r3, #0
 8004166:	d105      	bne.n	8004174 <HAL_ADC_ConfigChannel+0x1d4>
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	0e9b      	lsrs	r3, r3, #26
 800416e:	f003 031f 	and.w	r3, r3, #31
 8004172:	e018      	b.n	80041a6 <HAL_ADC_ConfigChannel+0x206>
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800417c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004180:	fa93 f3a3 	rbit	r3, r3
 8004184:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8004188:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800418c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8004190:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004194:	2b00      	cmp	r3, #0
 8004196:	d101      	bne.n	800419c <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8004198:	2320      	movs	r3, #32
 800419a:	e004      	b.n	80041a6 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 800419c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80041a0:	fab3 f383 	clz	r3, r3
 80041a4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d106      	bne.n	80041b8 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	2200      	movs	r2, #0
 80041b0:	2100      	movs	r1, #0
 80041b2:	4618      	mov	r0, r3
 80041b4:	f7ff fc76 	bl	8003aa4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	2101      	movs	r1, #1
 80041be:	4618      	mov	r0, r3
 80041c0:	f7ff fc5a 	bl	8003a78 <LL_ADC_GetOffsetChannel>
 80041c4:	4603      	mov	r3, r0
 80041c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d10a      	bne.n	80041e4 <HAL_ADC_ConfigChannel+0x244>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	2101      	movs	r1, #1
 80041d4:	4618      	mov	r0, r3
 80041d6:	f7ff fc4f 	bl	8003a78 <LL_ADC_GetOffsetChannel>
 80041da:	4603      	mov	r3, r0
 80041dc:	0e9b      	lsrs	r3, r3, #26
 80041de:	f003 021f 	and.w	r2, r3, #31
 80041e2:	e01e      	b.n	8004222 <HAL_ADC_ConfigChannel+0x282>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	2101      	movs	r1, #1
 80041ea:	4618      	mov	r0, r3
 80041ec:	f7ff fc44 	bl	8003a78 <LL_ADC_GetOffsetChannel>
 80041f0:	4603      	mov	r3, r0
 80041f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80041fa:	fa93 f3a3 	rbit	r3, r3
 80041fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8004202:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004206:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800420a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800420e:	2b00      	cmp	r3, #0
 8004210:	d101      	bne.n	8004216 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8004212:	2320      	movs	r3, #32
 8004214:	e004      	b.n	8004220 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8004216:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800421a:	fab3 f383 	clz	r3, r3
 800421e:	b2db      	uxtb	r3, r3
 8004220:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800422a:	2b00      	cmp	r3, #0
 800422c:	d105      	bne.n	800423a <HAL_ADC_ConfigChannel+0x29a>
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	0e9b      	lsrs	r3, r3, #26
 8004234:	f003 031f 	and.w	r3, r3, #31
 8004238:	e018      	b.n	800426c <HAL_ADC_ConfigChannel+0x2cc>
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004242:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004246:	fa93 f3a3 	rbit	r3, r3
 800424a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800424e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004252:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8004256:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800425a:	2b00      	cmp	r3, #0
 800425c:	d101      	bne.n	8004262 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 800425e:	2320      	movs	r3, #32
 8004260:	e004      	b.n	800426c <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8004262:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004266:	fab3 f383 	clz	r3, r3
 800426a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800426c:	429a      	cmp	r2, r3
 800426e:	d106      	bne.n	800427e <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	2200      	movs	r2, #0
 8004276:	2101      	movs	r1, #1
 8004278:	4618      	mov	r0, r3
 800427a:	f7ff fc13 	bl	8003aa4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	2102      	movs	r1, #2
 8004284:	4618      	mov	r0, r3
 8004286:	f7ff fbf7 	bl	8003a78 <LL_ADC_GetOffsetChannel>
 800428a:	4603      	mov	r3, r0
 800428c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004290:	2b00      	cmp	r3, #0
 8004292:	d10a      	bne.n	80042aa <HAL_ADC_ConfigChannel+0x30a>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	2102      	movs	r1, #2
 800429a:	4618      	mov	r0, r3
 800429c:	f7ff fbec 	bl	8003a78 <LL_ADC_GetOffsetChannel>
 80042a0:	4603      	mov	r3, r0
 80042a2:	0e9b      	lsrs	r3, r3, #26
 80042a4:	f003 021f 	and.w	r2, r3, #31
 80042a8:	e01e      	b.n	80042e8 <HAL_ADC_ConfigChannel+0x348>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	2102      	movs	r1, #2
 80042b0:	4618      	mov	r0, r3
 80042b2:	f7ff fbe1 	bl	8003a78 <LL_ADC_GetOffsetChannel>
 80042b6:	4603      	mov	r3, r0
 80042b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80042c0:	fa93 f3a3 	rbit	r3, r3
 80042c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80042c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80042cc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80042d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d101      	bne.n	80042dc <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 80042d8:	2320      	movs	r3, #32
 80042da:	e004      	b.n	80042e6 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 80042dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80042e0:	fab3 f383 	clz	r3, r3
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d105      	bne.n	8004300 <HAL_ADC_ConfigChannel+0x360>
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	0e9b      	lsrs	r3, r3, #26
 80042fa:	f003 031f 	and.w	r3, r3, #31
 80042fe:	e016      	b.n	800432e <HAL_ADC_ConfigChannel+0x38e>
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004308:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800430c:	fa93 f3a3 	rbit	r3, r3
 8004310:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8004312:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004314:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8004318:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800431c:	2b00      	cmp	r3, #0
 800431e:	d101      	bne.n	8004324 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8004320:	2320      	movs	r3, #32
 8004322:	e004      	b.n	800432e <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8004324:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004328:	fab3 f383 	clz	r3, r3
 800432c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800432e:	429a      	cmp	r2, r3
 8004330:	d106      	bne.n	8004340 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	2200      	movs	r2, #0
 8004338:	2102      	movs	r1, #2
 800433a:	4618      	mov	r0, r3
 800433c:	f7ff fbb2 	bl	8003aa4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	2103      	movs	r1, #3
 8004346:	4618      	mov	r0, r3
 8004348:	f7ff fb96 	bl	8003a78 <LL_ADC_GetOffsetChannel>
 800434c:	4603      	mov	r3, r0
 800434e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004352:	2b00      	cmp	r3, #0
 8004354:	d10a      	bne.n	800436c <HAL_ADC_ConfigChannel+0x3cc>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	2103      	movs	r1, #3
 800435c:	4618      	mov	r0, r3
 800435e:	f7ff fb8b 	bl	8003a78 <LL_ADC_GetOffsetChannel>
 8004362:	4603      	mov	r3, r0
 8004364:	0e9b      	lsrs	r3, r3, #26
 8004366:	f003 021f 	and.w	r2, r3, #31
 800436a:	e017      	b.n	800439c <HAL_ADC_ConfigChannel+0x3fc>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	2103      	movs	r1, #3
 8004372:	4618      	mov	r0, r3
 8004374:	f7ff fb80 	bl	8003a78 <LL_ADC_GetOffsetChannel>
 8004378:	4603      	mov	r3, r0
 800437a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800437c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800437e:	fa93 f3a3 	rbit	r3, r3
 8004382:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8004384:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004386:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8004388:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800438a:	2b00      	cmp	r3, #0
 800438c:	d101      	bne.n	8004392 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800438e:	2320      	movs	r3, #32
 8004390:	e003      	b.n	800439a <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8004392:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004394:	fab3 f383 	clz	r3, r3
 8004398:	b2db      	uxtb	r3, r3
 800439a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d105      	bne.n	80043b4 <HAL_ADC_ConfigChannel+0x414>
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	0e9b      	lsrs	r3, r3, #26
 80043ae:	f003 031f 	and.w	r3, r3, #31
 80043b2:	e011      	b.n	80043d8 <HAL_ADC_ConfigChannel+0x438>
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80043bc:	fa93 f3a3 	rbit	r3, r3
 80043c0:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80043c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80043c4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80043c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d101      	bne.n	80043d0 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 80043cc:	2320      	movs	r3, #32
 80043ce:	e003      	b.n	80043d8 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 80043d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043d2:	fab3 f383 	clz	r3, r3
 80043d6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80043d8:	429a      	cmp	r2, r3
 80043da:	d106      	bne.n	80043ea <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2200      	movs	r2, #0
 80043e2:	2103      	movs	r1, #3
 80043e4:	4618      	mov	r0, r3
 80043e6:	f7ff fb5d 	bl	8003aa4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4618      	mov	r0, r3
 80043f0:	f7ff fc50 	bl	8003c94 <LL_ADC_IsEnabled>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	f040 8140 	bne.w	800467c <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6818      	ldr	r0, [r3, #0]
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	6819      	ldr	r1, [r3, #0]
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	461a      	mov	r2, r3
 800440a:	f7ff fbd1 	bl	8003bb0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	4a8f      	ldr	r2, [pc, #572]	; (8004650 <HAL_ADC_ConfigChannel+0x6b0>)
 8004414:	4293      	cmp	r3, r2
 8004416:	f040 8131 	bne.w	800467c <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004426:	2b00      	cmp	r3, #0
 8004428:	d10b      	bne.n	8004442 <HAL_ADC_ConfigChannel+0x4a2>
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	0e9b      	lsrs	r3, r3, #26
 8004430:	3301      	adds	r3, #1
 8004432:	f003 031f 	and.w	r3, r3, #31
 8004436:	2b09      	cmp	r3, #9
 8004438:	bf94      	ite	ls
 800443a:	2301      	movls	r3, #1
 800443c:	2300      	movhi	r3, #0
 800443e:	b2db      	uxtb	r3, r3
 8004440:	e019      	b.n	8004476 <HAL_ADC_ConfigChannel+0x4d6>
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004448:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800444a:	fa93 f3a3 	rbit	r3, r3
 800444e:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8004450:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004452:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8004454:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004456:	2b00      	cmp	r3, #0
 8004458:	d101      	bne.n	800445e <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 800445a:	2320      	movs	r3, #32
 800445c:	e003      	b.n	8004466 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 800445e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004460:	fab3 f383 	clz	r3, r3
 8004464:	b2db      	uxtb	r3, r3
 8004466:	3301      	adds	r3, #1
 8004468:	f003 031f 	and.w	r3, r3, #31
 800446c:	2b09      	cmp	r3, #9
 800446e:	bf94      	ite	ls
 8004470:	2301      	movls	r3, #1
 8004472:	2300      	movhi	r3, #0
 8004474:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004476:	2b00      	cmp	r3, #0
 8004478:	d079      	beq.n	800456e <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004482:	2b00      	cmp	r3, #0
 8004484:	d107      	bne.n	8004496 <HAL_ADC_ConfigChannel+0x4f6>
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	0e9b      	lsrs	r3, r3, #26
 800448c:	3301      	adds	r3, #1
 800448e:	069b      	lsls	r3, r3, #26
 8004490:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004494:	e015      	b.n	80044c2 <HAL_ADC_ConfigChannel+0x522>
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800449c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800449e:	fa93 f3a3 	rbit	r3, r3
 80044a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80044a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044a6:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80044a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d101      	bne.n	80044b2 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 80044ae:	2320      	movs	r3, #32
 80044b0:	e003      	b.n	80044ba <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 80044b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044b4:	fab3 f383 	clz	r3, r3
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	3301      	adds	r3, #1
 80044bc:	069b      	lsls	r3, r3, #26
 80044be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d109      	bne.n	80044e2 <HAL_ADC_ConfigChannel+0x542>
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	0e9b      	lsrs	r3, r3, #26
 80044d4:	3301      	adds	r3, #1
 80044d6:	f003 031f 	and.w	r3, r3, #31
 80044da:	2101      	movs	r1, #1
 80044dc:	fa01 f303 	lsl.w	r3, r1, r3
 80044e0:	e017      	b.n	8004512 <HAL_ADC_ConfigChannel+0x572>
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044ea:	fa93 f3a3 	rbit	r3, r3
 80044ee:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80044f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044f2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80044f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d101      	bne.n	80044fe <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 80044fa:	2320      	movs	r3, #32
 80044fc:	e003      	b.n	8004506 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 80044fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004500:	fab3 f383 	clz	r3, r3
 8004504:	b2db      	uxtb	r3, r3
 8004506:	3301      	adds	r3, #1
 8004508:	f003 031f 	and.w	r3, r3, #31
 800450c:	2101      	movs	r1, #1
 800450e:	fa01 f303 	lsl.w	r3, r1, r3
 8004512:	ea42 0103 	orr.w	r1, r2, r3
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800451e:	2b00      	cmp	r3, #0
 8004520:	d10a      	bne.n	8004538 <HAL_ADC_ConfigChannel+0x598>
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	0e9b      	lsrs	r3, r3, #26
 8004528:	3301      	adds	r3, #1
 800452a:	f003 021f 	and.w	r2, r3, #31
 800452e:	4613      	mov	r3, r2
 8004530:	005b      	lsls	r3, r3, #1
 8004532:	4413      	add	r3, r2
 8004534:	051b      	lsls	r3, r3, #20
 8004536:	e018      	b.n	800456a <HAL_ADC_ConfigChannel+0x5ca>
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800453e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004540:	fa93 f3a3 	rbit	r3, r3
 8004544:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004546:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004548:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800454a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800454c:	2b00      	cmp	r3, #0
 800454e:	d101      	bne.n	8004554 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8004550:	2320      	movs	r3, #32
 8004552:	e003      	b.n	800455c <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8004554:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004556:	fab3 f383 	clz	r3, r3
 800455a:	b2db      	uxtb	r3, r3
 800455c:	3301      	adds	r3, #1
 800455e:	f003 021f 	and.w	r2, r3, #31
 8004562:	4613      	mov	r3, r2
 8004564:	005b      	lsls	r3, r3, #1
 8004566:	4413      	add	r3, r2
 8004568:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800456a:	430b      	orrs	r3, r1
 800456c:	e081      	b.n	8004672 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004576:	2b00      	cmp	r3, #0
 8004578:	d107      	bne.n	800458a <HAL_ADC_ConfigChannel+0x5ea>
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	0e9b      	lsrs	r3, r3, #26
 8004580:	3301      	adds	r3, #1
 8004582:	069b      	lsls	r3, r3, #26
 8004584:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004588:	e015      	b.n	80045b6 <HAL_ADC_ConfigChannel+0x616>
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004592:	fa93 f3a3 	rbit	r3, r3
 8004596:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8004598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800459a:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800459c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d101      	bne.n	80045a6 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 80045a2:	2320      	movs	r3, #32
 80045a4:	e003      	b.n	80045ae <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 80045a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a8:	fab3 f383 	clz	r3, r3
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	3301      	adds	r3, #1
 80045b0:	069b      	lsls	r3, r3, #26
 80045b2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d109      	bne.n	80045d6 <HAL_ADC_ConfigChannel+0x636>
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	0e9b      	lsrs	r3, r3, #26
 80045c8:	3301      	adds	r3, #1
 80045ca:	f003 031f 	and.w	r3, r3, #31
 80045ce:	2101      	movs	r1, #1
 80045d0:	fa01 f303 	lsl.w	r3, r1, r3
 80045d4:	e017      	b.n	8004606 <HAL_ADC_ConfigChannel+0x666>
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045dc:	6a3b      	ldr	r3, [r7, #32]
 80045de:	fa93 f3a3 	rbit	r3, r3
 80045e2:	61fb      	str	r3, [r7, #28]
  return result;
 80045e4:	69fb      	ldr	r3, [r7, #28]
 80045e6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80045e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d101      	bne.n	80045f2 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 80045ee:	2320      	movs	r3, #32
 80045f0:	e003      	b.n	80045fa <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 80045f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f4:	fab3 f383 	clz	r3, r3
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	3301      	adds	r3, #1
 80045fc:	f003 031f 	and.w	r3, r3, #31
 8004600:	2101      	movs	r1, #1
 8004602:	fa01 f303 	lsl.w	r3, r1, r3
 8004606:	ea42 0103 	orr.w	r1, r2, r3
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004612:	2b00      	cmp	r3, #0
 8004614:	d10d      	bne.n	8004632 <HAL_ADC_ConfigChannel+0x692>
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	0e9b      	lsrs	r3, r3, #26
 800461c:	3301      	adds	r3, #1
 800461e:	f003 021f 	and.w	r2, r3, #31
 8004622:	4613      	mov	r3, r2
 8004624:	005b      	lsls	r3, r3, #1
 8004626:	4413      	add	r3, r2
 8004628:	3b1e      	subs	r3, #30
 800462a:	051b      	lsls	r3, r3, #20
 800462c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004630:	e01e      	b.n	8004670 <HAL_ADC_ConfigChannel+0x6d0>
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	fa93 f3a3 	rbit	r3, r3
 800463e:	613b      	str	r3, [r7, #16]
  return result;
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004644:	69bb      	ldr	r3, [r7, #24]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d104      	bne.n	8004654 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 800464a:	2320      	movs	r3, #32
 800464c:	e006      	b.n	800465c <HAL_ADC_ConfigChannel+0x6bc>
 800464e:	bf00      	nop
 8004650:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004654:	69bb      	ldr	r3, [r7, #24]
 8004656:	fab3 f383 	clz	r3, r3
 800465a:	b2db      	uxtb	r3, r3
 800465c:	3301      	adds	r3, #1
 800465e:	f003 021f 	and.w	r2, r3, #31
 8004662:	4613      	mov	r3, r2
 8004664:	005b      	lsls	r3, r3, #1
 8004666:	4413      	add	r3, r2
 8004668:	3b1e      	subs	r3, #30
 800466a:	051b      	lsls	r3, r3, #20
 800466c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004670:	430b      	orrs	r3, r1
 8004672:	683a      	ldr	r2, [r7, #0]
 8004674:	6892      	ldr	r2, [r2, #8]
 8004676:	4619      	mov	r1, r3
 8004678:	f7ff fa6e 	bl	8003b58 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	4b3d      	ldr	r3, [pc, #244]	; (8004778 <HAL_ADC_ConfigChannel+0x7d8>)
 8004682:	4013      	ands	r3, r2
 8004684:	2b00      	cmp	r3, #0
 8004686:	d06c      	beq.n	8004762 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004688:	483c      	ldr	r0, [pc, #240]	; (800477c <HAL_ADC_ConfigChannel+0x7dc>)
 800468a:	f7ff f9c3 	bl	8003a14 <LL_ADC_GetCommonPathInternalCh>
 800468e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a3a      	ldr	r2, [pc, #232]	; (8004780 <HAL_ADC_ConfigChannel+0x7e0>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d127      	bne.n	80046ec <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800469c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80046a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d121      	bne.n	80046ec <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a35      	ldr	r2, [pc, #212]	; (8004784 <HAL_ADC_ConfigChannel+0x7e4>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d157      	bne.n	8004762 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80046b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80046b6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80046ba:	4619      	mov	r1, r3
 80046bc:	482f      	ldr	r0, [pc, #188]	; (800477c <HAL_ADC_ConfigChannel+0x7dc>)
 80046be:	f7ff f996 	bl	80039ee <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80046c2:	4b31      	ldr	r3, [pc, #196]	; (8004788 <HAL_ADC_ConfigChannel+0x7e8>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	099b      	lsrs	r3, r3, #6
 80046c8:	4a30      	ldr	r2, [pc, #192]	; (800478c <HAL_ADC_ConfigChannel+0x7ec>)
 80046ca:	fba2 2303 	umull	r2, r3, r2, r3
 80046ce:	099b      	lsrs	r3, r3, #6
 80046d0:	1c5a      	adds	r2, r3, #1
 80046d2:	4613      	mov	r3, r2
 80046d4:	005b      	lsls	r3, r3, #1
 80046d6:	4413      	add	r3, r2
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80046dc:	e002      	b.n	80046e4 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	3b01      	subs	r3, #1
 80046e2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d1f9      	bne.n	80046de <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80046ea:	e03a      	b.n	8004762 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a27      	ldr	r2, [pc, #156]	; (8004790 <HAL_ADC_ConfigChannel+0x7f0>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d113      	bne.n	800471e <HAL_ADC_ConfigChannel+0x77e>
 80046f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80046fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d10d      	bne.n	800471e <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a1f      	ldr	r2, [pc, #124]	; (8004784 <HAL_ADC_ConfigChannel+0x7e4>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d12a      	bne.n	8004762 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800470c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004710:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004714:	4619      	mov	r1, r3
 8004716:	4819      	ldr	r0, [pc, #100]	; (800477c <HAL_ADC_ConfigChannel+0x7dc>)
 8004718:	f7ff f969 	bl	80039ee <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800471c:	e021      	b.n	8004762 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a1c      	ldr	r2, [pc, #112]	; (8004794 <HAL_ADC_ConfigChannel+0x7f4>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d11c      	bne.n	8004762 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004728:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800472c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004730:	2b00      	cmp	r3, #0
 8004732:	d116      	bne.n	8004762 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a12      	ldr	r2, [pc, #72]	; (8004784 <HAL_ADC_ConfigChannel+0x7e4>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d111      	bne.n	8004762 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800473e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004742:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004746:	4619      	mov	r1, r3
 8004748:	480c      	ldr	r0, [pc, #48]	; (800477c <HAL_ADC_ConfigChannel+0x7dc>)
 800474a:	f7ff f950 	bl	80039ee <LL_ADC_SetCommonPathInternalCh>
 800474e:	e008      	b.n	8004762 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004754:	f043 0220 	orr.w	r2, r3, #32
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800476a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800476e:	4618      	mov	r0, r3
 8004770:	37d8      	adds	r7, #216	; 0xd8
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	80080000 	.word	0x80080000
 800477c:	50040300 	.word	0x50040300
 8004780:	c7520000 	.word	0xc7520000
 8004784:	50040000 	.word	0x50040000
 8004788:	20000008 	.word	0x20000008
 800478c:	053e2d63 	.word	0x053e2d63
 8004790:	cb840000 	.word	0xcb840000
 8004794:	80000001 	.word	0x80000001

08004798 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b084      	sub	sp, #16
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d101      	bne.n	80047aa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e0ed      	b.n	8004986 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d102      	bne.n	80047bc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f7fe f988 	bl	8002acc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f042 0201 	orr.w	r2, r2, #1
 80047ca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80047cc:	f7ff f8cc 	bl	8003968 <HAL_GetTick>
 80047d0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80047d2:	e012      	b.n	80047fa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80047d4:	f7ff f8c8 	bl	8003968 <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	2b0a      	cmp	r3, #10
 80047e0:	d90b      	bls.n	80047fa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2205      	movs	r2, #5
 80047f2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e0c5      	b.n	8004986 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	f003 0301 	and.w	r3, r3, #1
 8004804:	2b00      	cmp	r3, #0
 8004806:	d0e5      	beq.n	80047d4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f022 0202 	bic.w	r2, r2, #2
 8004816:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004818:	f7ff f8a6 	bl	8003968 <HAL_GetTick>
 800481c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800481e:	e012      	b.n	8004846 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004820:	f7ff f8a2 	bl	8003968 <HAL_GetTick>
 8004824:	4602      	mov	r2, r0
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	2b0a      	cmp	r3, #10
 800482c:	d90b      	bls.n	8004846 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004832:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2205      	movs	r2, #5
 800483e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e09f      	b.n	8004986 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	f003 0302 	and.w	r3, r3, #2
 8004850:	2b00      	cmp	r3, #0
 8004852:	d1e5      	bne.n	8004820 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	7e1b      	ldrb	r3, [r3, #24]
 8004858:	2b01      	cmp	r3, #1
 800485a:	d108      	bne.n	800486e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800486a:	601a      	str	r2, [r3, #0]
 800486c:	e007      	b.n	800487e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800487c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	7e5b      	ldrb	r3, [r3, #25]
 8004882:	2b01      	cmp	r3, #1
 8004884:	d108      	bne.n	8004898 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004894:	601a      	str	r2, [r3, #0]
 8004896:	e007      	b.n	80048a8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	7e9b      	ldrb	r3, [r3, #26]
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d108      	bne.n	80048c2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f042 0220 	orr.w	r2, r2, #32
 80048be:	601a      	str	r2, [r3, #0]
 80048c0:	e007      	b.n	80048d2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f022 0220 	bic.w	r2, r2, #32
 80048d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	7edb      	ldrb	r3, [r3, #27]
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d108      	bne.n	80048ec <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f022 0210 	bic.w	r2, r2, #16
 80048e8:	601a      	str	r2, [r3, #0]
 80048ea:	e007      	b.n	80048fc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f042 0210 	orr.w	r2, r2, #16
 80048fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	7f1b      	ldrb	r3, [r3, #28]
 8004900:	2b01      	cmp	r3, #1
 8004902:	d108      	bne.n	8004916 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f042 0208 	orr.w	r2, r2, #8
 8004912:	601a      	str	r2, [r3, #0]
 8004914:	e007      	b.n	8004926 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f022 0208 	bic.w	r2, r2, #8
 8004924:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	7f5b      	ldrb	r3, [r3, #29]
 800492a:	2b01      	cmp	r3, #1
 800492c:	d108      	bne.n	8004940 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f042 0204 	orr.w	r2, r2, #4
 800493c:	601a      	str	r2, [r3, #0]
 800493e:	e007      	b.n	8004950 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f022 0204 	bic.w	r2, r2, #4
 800494e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	689a      	ldr	r2, [r3, #8]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	431a      	orrs	r2, r3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	691b      	ldr	r3, [r3, #16]
 800495e:	431a      	orrs	r2, r3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	695b      	ldr	r3, [r3, #20]
 8004964:	ea42 0103 	orr.w	r1, r2, r3
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	1e5a      	subs	r2, r3, #1
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	430a      	orrs	r2, r1
 8004974:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004984:	2300      	movs	r3, #0
}
 8004986:	4618      	mov	r0, r3
 8004988:	3710      	adds	r7, #16
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}
	...

08004990 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004990:	b480      	push	{r7}
 8004992:	b085      	sub	sp, #20
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f003 0307 	and.w	r3, r3, #7
 800499e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80049a0:	4b0c      	ldr	r3, [pc, #48]	; (80049d4 <__NVIC_SetPriorityGrouping+0x44>)
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80049a6:	68ba      	ldr	r2, [r7, #8]
 80049a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80049ac:	4013      	ands	r3, r2
 80049ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80049b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80049bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80049c2:	4a04      	ldr	r2, [pc, #16]	; (80049d4 <__NVIC_SetPriorityGrouping+0x44>)
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	60d3      	str	r3, [r2, #12]
}
 80049c8:	bf00      	nop
 80049ca:	3714      	adds	r7, #20
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr
 80049d4:	e000ed00 	.word	0xe000ed00

080049d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80049d8:	b480      	push	{r7}
 80049da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80049dc:	4b04      	ldr	r3, [pc, #16]	; (80049f0 <__NVIC_GetPriorityGrouping+0x18>)
 80049de:	68db      	ldr	r3, [r3, #12]
 80049e0:	0a1b      	lsrs	r3, r3, #8
 80049e2:	f003 0307 	and.w	r3, r3, #7
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr
 80049f0:	e000ed00 	.word	0xe000ed00

080049f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	4603      	mov	r3, r0
 80049fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	db0b      	blt.n	8004a1e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a06:	79fb      	ldrb	r3, [r7, #7]
 8004a08:	f003 021f 	and.w	r2, r3, #31
 8004a0c:	4907      	ldr	r1, [pc, #28]	; (8004a2c <__NVIC_EnableIRQ+0x38>)
 8004a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a12:	095b      	lsrs	r3, r3, #5
 8004a14:	2001      	movs	r0, #1
 8004a16:	fa00 f202 	lsl.w	r2, r0, r2
 8004a1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004a1e:	bf00      	nop
 8004a20:	370c      	adds	r7, #12
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr
 8004a2a:	bf00      	nop
 8004a2c:	e000e100 	.word	0xe000e100

08004a30 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b083      	sub	sp, #12
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	4603      	mov	r3, r0
 8004a38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	db12      	blt.n	8004a68 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a42:	79fb      	ldrb	r3, [r7, #7]
 8004a44:	f003 021f 	and.w	r2, r3, #31
 8004a48:	490a      	ldr	r1, [pc, #40]	; (8004a74 <__NVIC_DisableIRQ+0x44>)
 8004a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a4e:	095b      	lsrs	r3, r3, #5
 8004a50:	2001      	movs	r0, #1
 8004a52:	fa00 f202 	lsl.w	r2, r0, r2
 8004a56:	3320      	adds	r3, #32
 8004a58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004a5c:	f3bf 8f4f 	dsb	sy
}
 8004a60:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004a62:	f3bf 8f6f 	isb	sy
}
 8004a66:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004a68:	bf00      	nop
 8004a6a:	370c      	adds	r7, #12
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr
 8004a74:	e000e100 	.word	0xe000e100

08004a78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	4603      	mov	r3, r0
 8004a80:	6039      	str	r1, [r7, #0]
 8004a82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	db0a      	blt.n	8004aa2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	b2da      	uxtb	r2, r3
 8004a90:	490c      	ldr	r1, [pc, #48]	; (8004ac4 <__NVIC_SetPriority+0x4c>)
 8004a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a96:	0112      	lsls	r2, r2, #4
 8004a98:	b2d2      	uxtb	r2, r2
 8004a9a:	440b      	add	r3, r1
 8004a9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004aa0:	e00a      	b.n	8004ab8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	b2da      	uxtb	r2, r3
 8004aa6:	4908      	ldr	r1, [pc, #32]	; (8004ac8 <__NVIC_SetPriority+0x50>)
 8004aa8:	79fb      	ldrb	r3, [r7, #7]
 8004aaa:	f003 030f 	and.w	r3, r3, #15
 8004aae:	3b04      	subs	r3, #4
 8004ab0:	0112      	lsls	r2, r2, #4
 8004ab2:	b2d2      	uxtb	r2, r2
 8004ab4:	440b      	add	r3, r1
 8004ab6:	761a      	strb	r2, [r3, #24]
}
 8004ab8:	bf00      	nop
 8004aba:	370c      	adds	r7, #12
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr
 8004ac4:	e000e100 	.word	0xe000e100
 8004ac8:	e000ed00 	.word	0xe000ed00

08004acc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b089      	sub	sp, #36	; 0x24
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	60f8      	str	r0, [r7, #12]
 8004ad4:	60b9      	str	r1, [r7, #8]
 8004ad6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f003 0307 	and.w	r3, r3, #7
 8004ade:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ae0:	69fb      	ldr	r3, [r7, #28]
 8004ae2:	f1c3 0307 	rsb	r3, r3, #7
 8004ae6:	2b04      	cmp	r3, #4
 8004ae8:	bf28      	it	cs
 8004aea:	2304      	movcs	r3, #4
 8004aec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004aee:	69fb      	ldr	r3, [r7, #28]
 8004af0:	3304      	adds	r3, #4
 8004af2:	2b06      	cmp	r3, #6
 8004af4:	d902      	bls.n	8004afc <NVIC_EncodePriority+0x30>
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	3b03      	subs	r3, #3
 8004afa:	e000      	b.n	8004afe <NVIC_EncodePriority+0x32>
 8004afc:	2300      	movs	r3, #0
 8004afe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b00:	f04f 32ff 	mov.w	r2, #4294967295
 8004b04:	69bb      	ldr	r3, [r7, #24]
 8004b06:	fa02 f303 	lsl.w	r3, r2, r3
 8004b0a:	43da      	mvns	r2, r3
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	401a      	ands	r2, r3
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b14:	f04f 31ff 	mov.w	r1, #4294967295
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b1e:	43d9      	mvns	r1, r3
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b24:	4313      	orrs	r3, r2
         );
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3724      	adds	r7, #36	; 0x24
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr
	...

08004b34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b082      	sub	sp, #8
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	3b01      	subs	r3, #1
 8004b40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b44:	d301      	bcc.n	8004b4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004b46:	2301      	movs	r3, #1
 8004b48:	e00f      	b.n	8004b6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004b4a:	4a0a      	ldr	r2, [pc, #40]	; (8004b74 <SysTick_Config+0x40>)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	3b01      	subs	r3, #1
 8004b50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004b52:	210f      	movs	r1, #15
 8004b54:	f04f 30ff 	mov.w	r0, #4294967295
 8004b58:	f7ff ff8e 	bl	8004a78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004b5c:	4b05      	ldr	r3, [pc, #20]	; (8004b74 <SysTick_Config+0x40>)
 8004b5e:	2200      	movs	r2, #0
 8004b60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004b62:	4b04      	ldr	r3, [pc, #16]	; (8004b74 <SysTick_Config+0x40>)
 8004b64:	2207      	movs	r2, #7
 8004b66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004b68:	2300      	movs	r3, #0
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3708      	adds	r7, #8
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	bf00      	nop
 8004b74:	e000e010 	.word	0xe000e010

08004b78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b082      	sub	sp, #8
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f7ff ff05 	bl	8004990 <__NVIC_SetPriorityGrouping>
}
 8004b86:	bf00      	nop
 8004b88:	3708      	adds	r7, #8
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}

08004b8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b8e:	b580      	push	{r7, lr}
 8004b90:	b086      	sub	sp, #24
 8004b92:	af00      	add	r7, sp, #0
 8004b94:	4603      	mov	r3, r0
 8004b96:	60b9      	str	r1, [r7, #8]
 8004b98:	607a      	str	r2, [r7, #4]
 8004b9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004ba0:	f7ff ff1a 	bl	80049d8 <__NVIC_GetPriorityGrouping>
 8004ba4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	68b9      	ldr	r1, [r7, #8]
 8004baa:	6978      	ldr	r0, [r7, #20]
 8004bac:	f7ff ff8e 	bl	8004acc <NVIC_EncodePriority>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bb6:	4611      	mov	r1, r2
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f7ff ff5d 	bl	8004a78 <__NVIC_SetPriority>
}
 8004bbe:	bf00      	nop
 8004bc0:	3718      	adds	r7, #24
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}

08004bc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bc6:	b580      	push	{r7, lr}
 8004bc8:	b082      	sub	sp, #8
 8004bca:	af00      	add	r7, sp, #0
 8004bcc:	4603      	mov	r3, r0
 8004bce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f7ff ff0d 	bl	80049f4 <__NVIC_EnableIRQ>
}
 8004bda:	bf00      	nop
 8004bdc:	3708      	adds	r7, #8
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}

08004be2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004be2:	b580      	push	{r7, lr}
 8004be4:	b082      	sub	sp, #8
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	4603      	mov	r3, r0
 8004bea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004bec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f7ff ff1d 	bl	8004a30 <__NVIC_DisableIRQ>
}
 8004bf6:	bf00      	nop
 8004bf8:	3708      	adds	r7, #8
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}

08004bfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004bfe:	b580      	push	{r7, lr}
 8004c00:	b082      	sub	sp, #8
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f7ff ff94 	bl	8004b34 <SysTick_Config>
 8004c0c:	4603      	mov	r3, r0
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3708      	adds	r7, #8
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}
	...

08004c18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b087      	sub	sp, #28
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004c22:	2300      	movs	r3, #0
 8004c24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004c26:	e166      	b.n	8004ef6 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	2101      	movs	r1, #1
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	fa01 f303 	lsl.w	r3, r1, r3
 8004c34:	4013      	ands	r3, r2
 8004c36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	f000 8158 	beq.w	8004ef0 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	f003 0303 	and.w	r3, r3, #3
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d005      	beq.n	8004c58 <HAL_GPIO_Init+0x40>
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	f003 0303 	and.w	r3, r3, #3
 8004c54:	2b02      	cmp	r3, #2
 8004c56:	d130      	bne.n	8004cba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	005b      	lsls	r3, r3, #1
 8004c62:	2203      	movs	r2, #3
 8004c64:	fa02 f303 	lsl.w	r3, r2, r3
 8004c68:	43db      	mvns	r3, r3
 8004c6a:	693a      	ldr	r2, [r7, #16]
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	68da      	ldr	r2, [r3, #12]
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	005b      	lsls	r3, r3, #1
 8004c78:	fa02 f303 	lsl.w	r3, r2, r3
 8004c7c:	693a      	ldr	r2, [r7, #16]
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	693a      	ldr	r2, [r7, #16]
 8004c86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004c8e:	2201      	movs	r2, #1
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	fa02 f303 	lsl.w	r3, r2, r3
 8004c96:	43db      	mvns	r3, r3
 8004c98:	693a      	ldr	r2, [r7, #16]
 8004c9a:	4013      	ands	r3, r2
 8004c9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	091b      	lsrs	r3, r3, #4
 8004ca4:	f003 0201 	and.w	r2, r3, #1
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	fa02 f303 	lsl.w	r3, r2, r3
 8004cae:	693a      	ldr	r2, [r7, #16]
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	693a      	ldr	r2, [r7, #16]
 8004cb8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	f003 0303 	and.w	r3, r3, #3
 8004cc2:	2b03      	cmp	r3, #3
 8004cc4:	d017      	beq.n	8004cf6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	68db      	ldr	r3, [r3, #12]
 8004cca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	005b      	lsls	r3, r3, #1
 8004cd0:	2203      	movs	r2, #3
 8004cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd6:	43db      	mvns	r3, r3
 8004cd8:	693a      	ldr	r2, [r7, #16]
 8004cda:	4013      	ands	r3, r2
 8004cdc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	689a      	ldr	r2, [r3, #8]
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	005b      	lsls	r3, r3, #1
 8004ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cea:	693a      	ldr	r2, [r7, #16]
 8004cec:	4313      	orrs	r3, r2
 8004cee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	693a      	ldr	r2, [r7, #16]
 8004cf4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	f003 0303 	and.w	r3, r3, #3
 8004cfe:	2b02      	cmp	r3, #2
 8004d00:	d123      	bne.n	8004d4a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	08da      	lsrs	r2, r3, #3
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	3208      	adds	r2, #8
 8004d0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	f003 0307 	and.w	r3, r3, #7
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	220f      	movs	r2, #15
 8004d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d1e:	43db      	mvns	r3, r3
 8004d20:	693a      	ldr	r2, [r7, #16]
 8004d22:	4013      	ands	r3, r2
 8004d24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	691a      	ldr	r2, [r3, #16]
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	f003 0307 	and.w	r3, r3, #7
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	fa02 f303 	lsl.w	r3, r2, r3
 8004d36:	693a      	ldr	r2, [r7, #16]
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	08da      	lsrs	r2, r3, #3
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	3208      	adds	r2, #8
 8004d44:	6939      	ldr	r1, [r7, #16]
 8004d46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	005b      	lsls	r3, r3, #1
 8004d54:	2203      	movs	r2, #3
 8004d56:	fa02 f303 	lsl.w	r3, r2, r3
 8004d5a:	43db      	mvns	r3, r3
 8004d5c:	693a      	ldr	r2, [r7, #16]
 8004d5e:	4013      	ands	r3, r2
 8004d60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	f003 0203 	and.w	r2, r3, #3
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	005b      	lsls	r3, r3, #1
 8004d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d72:	693a      	ldr	r2, [r7, #16]
 8004d74:	4313      	orrs	r3, r2
 8004d76:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	693a      	ldr	r2, [r7, #16]
 8004d7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	f000 80b2 	beq.w	8004ef0 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d8c:	4b61      	ldr	r3, [pc, #388]	; (8004f14 <HAL_GPIO_Init+0x2fc>)
 8004d8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d90:	4a60      	ldr	r2, [pc, #384]	; (8004f14 <HAL_GPIO_Init+0x2fc>)
 8004d92:	f043 0301 	orr.w	r3, r3, #1
 8004d96:	6613      	str	r3, [r2, #96]	; 0x60
 8004d98:	4b5e      	ldr	r3, [pc, #376]	; (8004f14 <HAL_GPIO_Init+0x2fc>)
 8004d9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d9c:	f003 0301 	and.w	r3, r3, #1
 8004da0:	60bb      	str	r3, [r7, #8]
 8004da2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004da4:	4a5c      	ldr	r2, [pc, #368]	; (8004f18 <HAL_GPIO_Init+0x300>)
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	089b      	lsrs	r3, r3, #2
 8004daa:	3302      	adds	r3, #2
 8004dac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004db0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	f003 0303 	and.w	r3, r3, #3
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	220f      	movs	r2, #15
 8004dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc0:	43db      	mvns	r3, r3
 8004dc2:	693a      	ldr	r2, [r7, #16]
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004dce:	d02b      	beq.n	8004e28 <HAL_GPIO_Init+0x210>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	4a52      	ldr	r2, [pc, #328]	; (8004f1c <HAL_GPIO_Init+0x304>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d025      	beq.n	8004e24 <HAL_GPIO_Init+0x20c>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	4a51      	ldr	r2, [pc, #324]	; (8004f20 <HAL_GPIO_Init+0x308>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d01f      	beq.n	8004e20 <HAL_GPIO_Init+0x208>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	4a50      	ldr	r2, [pc, #320]	; (8004f24 <HAL_GPIO_Init+0x30c>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d019      	beq.n	8004e1c <HAL_GPIO_Init+0x204>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	4a4f      	ldr	r2, [pc, #316]	; (8004f28 <HAL_GPIO_Init+0x310>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d013      	beq.n	8004e18 <HAL_GPIO_Init+0x200>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	4a4e      	ldr	r2, [pc, #312]	; (8004f2c <HAL_GPIO_Init+0x314>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d00d      	beq.n	8004e14 <HAL_GPIO_Init+0x1fc>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	4a4d      	ldr	r2, [pc, #308]	; (8004f30 <HAL_GPIO_Init+0x318>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d007      	beq.n	8004e10 <HAL_GPIO_Init+0x1f8>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	4a4c      	ldr	r2, [pc, #304]	; (8004f34 <HAL_GPIO_Init+0x31c>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d101      	bne.n	8004e0c <HAL_GPIO_Init+0x1f4>
 8004e08:	2307      	movs	r3, #7
 8004e0a:	e00e      	b.n	8004e2a <HAL_GPIO_Init+0x212>
 8004e0c:	2308      	movs	r3, #8
 8004e0e:	e00c      	b.n	8004e2a <HAL_GPIO_Init+0x212>
 8004e10:	2306      	movs	r3, #6
 8004e12:	e00a      	b.n	8004e2a <HAL_GPIO_Init+0x212>
 8004e14:	2305      	movs	r3, #5
 8004e16:	e008      	b.n	8004e2a <HAL_GPIO_Init+0x212>
 8004e18:	2304      	movs	r3, #4
 8004e1a:	e006      	b.n	8004e2a <HAL_GPIO_Init+0x212>
 8004e1c:	2303      	movs	r3, #3
 8004e1e:	e004      	b.n	8004e2a <HAL_GPIO_Init+0x212>
 8004e20:	2302      	movs	r3, #2
 8004e22:	e002      	b.n	8004e2a <HAL_GPIO_Init+0x212>
 8004e24:	2301      	movs	r3, #1
 8004e26:	e000      	b.n	8004e2a <HAL_GPIO_Init+0x212>
 8004e28:	2300      	movs	r3, #0
 8004e2a:	697a      	ldr	r2, [r7, #20]
 8004e2c:	f002 0203 	and.w	r2, r2, #3
 8004e30:	0092      	lsls	r2, r2, #2
 8004e32:	4093      	lsls	r3, r2
 8004e34:	693a      	ldr	r2, [r7, #16]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004e3a:	4937      	ldr	r1, [pc, #220]	; (8004f18 <HAL_GPIO_Init+0x300>)
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	089b      	lsrs	r3, r3, #2
 8004e40:	3302      	adds	r3, #2
 8004e42:	693a      	ldr	r2, [r7, #16]
 8004e44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004e48:	4b3b      	ldr	r3, [pc, #236]	; (8004f38 <HAL_GPIO_Init+0x320>)
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	43db      	mvns	r3, r3
 8004e52:	693a      	ldr	r2, [r7, #16]
 8004e54:	4013      	ands	r3, r2
 8004e56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d003      	beq.n	8004e6c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8004e64:	693a      	ldr	r2, [r7, #16]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004e6c:	4a32      	ldr	r2, [pc, #200]	; (8004f38 <HAL_GPIO_Init+0x320>)
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004e72:	4b31      	ldr	r3, [pc, #196]	; (8004f38 <HAL_GPIO_Init+0x320>)
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	43db      	mvns	r3, r3
 8004e7c:	693a      	ldr	r2, [r7, #16]
 8004e7e:	4013      	ands	r3, r2
 8004e80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d003      	beq.n	8004e96 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8004e8e:	693a      	ldr	r2, [r7, #16]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004e96:	4a28      	ldr	r2, [pc, #160]	; (8004f38 <HAL_GPIO_Init+0x320>)
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004e9c:	4b26      	ldr	r3, [pc, #152]	; (8004f38 <HAL_GPIO_Init+0x320>)
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	43db      	mvns	r3, r3
 8004ea6:	693a      	ldr	r2, [r7, #16]
 8004ea8:	4013      	ands	r3, r2
 8004eaa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d003      	beq.n	8004ec0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8004eb8:	693a      	ldr	r2, [r7, #16]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004ec0:	4a1d      	ldr	r2, [pc, #116]	; (8004f38 <HAL_GPIO_Init+0x320>)
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004ec6:	4b1c      	ldr	r3, [pc, #112]	; (8004f38 <HAL_GPIO_Init+0x320>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	43db      	mvns	r3, r3
 8004ed0:	693a      	ldr	r2, [r7, #16]
 8004ed2:	4013      	ands	r3, r2
 8004ed4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d003      	beq.n	8004eea <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8004ee2:	693a      	ldr	r2, [r7, #16]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004eea:	4a13      	ldr	r2, [pc, #76]	; (8004f38 <HAL_GPIO_Init+0x320>)
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	3301      	adds	r3, #1
 8004ef4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	fa22 f303 	lsr.w	r3, r2, r3
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	f47f ae91 	bne.w	8004c28 <HAL_GPIO_Init+0x10>
  }
}
 8004f06:	bf00      	nop
 8004f08:	bf00      	nop
 8004f0a:	371c      	adds	r7, #28
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr
 8004f14:	40021000 	.word	0x40021000
 8004f18:	40010000 	.word	0x40010000
 8004f1c:	48000400 	.word	0x48000400
 8004f20:	48000800 	.word	0x48000800
 8004f24:	48000c00 	.word	0x48000c00
 8004f28:	48001000 	.word	0x48001000
 8004f2c:	48001400 	.word	0x48001400
 8004f30:	48001800 	.word	0x48001800
 8004f34:	48001c00 	.word	0x48001c00
 8004f38:	40010400 	.word	0x40010400

08004f3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b083      	sub	sp, #12
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	460b      	mov	r3, r1
 8004f46:	807b      	strh	r3, [r7, #2]
 8004f48:	4613      	mov	r3, r2
 8004f4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004f4c:	787b      	ldrb	r3, [r7, #1]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d003      	beq.n	8004f5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004f52:	887a      	ldrh	r2, [r7, #2]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004f58:	e002      	b.n	8004f60 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004f5a:	887a      	ldrh	r2, [r7, #2]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004f60:	bf00      	nop
 8004f62:	370c      	adds	r7, #12
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr

08004f6c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f70:	4b05      	ldr	r3, [pc, #20]	; (8004f88 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a04      	ldr	r2, [pc, #16]	; (8004f88 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004f76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f7a:	6013      	str	r3, [r2, #0]
}
 8004f7c:	bf00      	nop
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr
 8004f86:	bf00      	nop
 8004f88:	40007000 	.word	0x40007000

08004f8c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004f90:	4b0d      	ldr	r3, [pc, #52]	; (8004fc8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004f98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f9c:	d102      	bne.n	8004fa4 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8004f9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004fa2:	e00b      	b.n	8004fbc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8004fa4:	4b08      	ldr	r3, [pc, #32]	; (8004fc8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004fa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fb2:	d102      	bne.n	8004fba <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8004fb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004fb8:	e000      	b.n	8004fbc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8004fba:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr
 8004fc6:	bf00      	nop
 8004fc8:	40007000 	.word	0x40007000

08004fcc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b085      	sub	sp, #20
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d141      	bne.n	800505e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004fda:	4b4b      	ldr	r3, [pc, #300]	; (8005108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004fe2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fe6:	d131      	bne.n	800504c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004fe8:	4b47      	ldr	r3, [pc, #284]	; (8005108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fee:	4a46      	ldr	r2, [pc, #280]	; (8005108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ff0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ff4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004ff8:	4b43      	ldr	r3, [pc, #268]	; (8005108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005000:	4a41      	ldr	r2, [pc, #260]	; (8005108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005002:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005006:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8005008:	4b40      	ldr	r3, [pc, #256]	; (800510c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	2232      	movs	r2, #50	; 0x32
 800500e:	fb02 f303 	mul.w	r3, r2, r3
 8005012:	4a3f      	ldr	r2, [pc, #252]	; (8005110 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005014:	fba2 2303 	umull	r2, r3, r2, r3
 8005018:	0c9b      	lsrs	r3, r3, #18
 800501a:	3301      	adds	r3, #1
 800501c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800501e:	e002      	b.n	8005026 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	3b01      	subs	r3, #1
 8005024:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005026:	4b38      	ldr	r3, [pc, #224]	; (8005108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005028:	695b      	ldr	r3, [r3, #20]
 800502a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800502e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005032:	d102      	bne.n	800503a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d1f2      	bne.n	8005020 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800503a:	4b33      	ldr	r3, [pc, #204]	; (8005108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800503c:	695b      	ldr	r3, [r3, #20]
 800503e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005042:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005046:	d158      	bne.n	80050fa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005048:	2303      	movs	r3, #3
 800504a:	e057      	b.n	80050fc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800504c:	4b2e      	ldr	r3, [pc, #184]	; (8005108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800504e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005052:	4a2d      	ldr	r2, [pc, #180]	; (8005108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005054:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005058:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800505c:	e04d      	b.n	80050fa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005064:	d141      	bne.n	80050ea <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005066:	4b28      	ldr	r3, [pc, #160]	; (8005108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800506e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005072:	d131      	bne.n	80050d8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005074:	4b24      	ldr	r3, [pc, #144]	; (8005108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005076:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800507a:	4a23      	ldr	r2, [pc, #140]	; (8005108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800507c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005080:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005084:	4b20      	ldr	r3, [pc, #128]	; (8005108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800508c:	4a1e      	ldr	r2, [pc, #120]	; (8005108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800508e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005092:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8005094:	4b1d      	ldr	r3, [pc, #116]	; (800510c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	2232      	movs	r2, #50	; 0x32
 800509a:	fb02 f303 	mul.w	r3, r2, r3
 800509e:	4a1c      	ldr	r2, [pc, #112]	; (8005110 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80050a0:	fba2 2303 	umull	r2, r3, r2, r3
 80050a4:	0c9b      	lsrs	r3, r3, #18
 80050a6:	3301      	adds	r3, #1
 80050a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80050aa:	e002      	b.n	80050b2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	3b01      	subs	r3, #1
 80050b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80050b2:	4b15      	ldr	r3, [pc, #84]	; (8005108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050b4:	695b      	ldr	r3, [r3, #20]
 80050b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050be:	d102      	bne.n	80050c6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d1f2      	bne.n	80050ac <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80050c6:	4b10      	ldr	r3, [pc, #64]	; (8005108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050c8:	695b      	ldr	r3, [r3, #20]
 80050ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050d2:	d112      	bne.n	80050fa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80050d4:	2303      	movs	r3, #3
 80050d6:	e011      	b.n	80050fc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80050d8:	4b0b      	ldr	r3, [pc, #44]	; (8005108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050de:	4a0a      	ldr	r2, [pc, #40]	; (8005108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80050e8:	e007      	b.n	80050fa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80050ea:	4b07      	ldr	r3, [pc, #28]	; (8005108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80050f2:	4a05      	ldr	r2, [pc, #20]	; (8005108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050f4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80050f8:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80050fa:	2300      	movs	r3, #0
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3714      	adds	r7, #20
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr
 8005108:	40007000 	.word	0x40007000
 800510c:	20000008 	.word	0x20000008
 8005110:	431bde83 	.word	0x431bde83

08005114 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8005114:	b480      	push	{r7}
 8005116:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8005118:	4b05      	ldr	r3, [pc, #20]	; (8005130 <HAL_PWREx_EnableVddIO2+0x1c>)
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	4a04      	ldr	r2, [pc, #16]	; (8005130 <HAL_PWREx_EnableVddIO2+0x1c>)
 800511e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005122:	6053      	str	r3, [r2, #4]
}
 8005124:	bf00      	nop
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr
 800512e:	bf00      	nop
 8005130:	40007000 	.word	0x40007000

08005134 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b088      	sub	sp, #32
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d102      	bne.n	8005148 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	f000 bc08 	b.w	8005958 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005148:	4b96      	ldr	r3, [pc, #600]	; (80053a4 <HAL_RCC_OscConfig+0x270>)
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	f003 030c 	and.w	r3, r3, #12
 8005150:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005152:	4b94      	ldr	r3, [pc, #592]	; (80053a4 <HAL_RCC_OscConfig+0x270>)
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	f003 0303 	and.w	r3, r3, #3
 800515a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f003 0310 	and.w	r3, r3, #16
 8005164:	2b00      	cmp	r3, #0
 8005166:	f000 80e4 	beq.w	8005332 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800516a:	69bb      	ldr	r3, [r7, #24]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d007      	beq.n	8005180 <HAL_RCC_OscConfig+0x4c>
 8005170:	69bb      	ldr	r3, [r7, #24]
 8005172:	2b0c      	cmp	r3, #12
 8005174:	f040 808b 	bne.w	800528e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	2b01      	cmp	r3, #1
 800517c:	f040 8087 	bne.w	800528e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005180:	4b88      	ldr	r3, [pc, #544]	; (80053a4 <HAL_RCC_OscConfig+0x270>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f003 0302 	and.w	r3, r3, #2
 8005188:	2b00      	cmp	r3, #0
 800518a:	d005      	beq.n	8005198 <HAL_RCC_OscConfig+0x64>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	699b      	ldr	r3, [r3, #24]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d101      	bne.n	8005198 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	e3df      	b.n	8005958 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6a1a      	ldr	r2, [r3, #32]
 800519c:	4b81      	ldr	r3, [pc, #516]	; (80053a4 <HAL_RCC_OscConfig+0x270>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f003 0308 	and.w	r3, r3, #8
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d004      	beq.n	80051b2 <HAL_RCC_OscConfig+0x7e>
 80051a8:	4b7e      	ldr	r3, [pc, #504]	; (80053a4 <HAL_RCC_OscConfig+0x270>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051b0:	e005      	b.n	80051be <HAL_RCC_OscConfig+0x8a>
 80051b2:	4b7c      	ldr	r3, [pc, #496]	; (80053a4 <HAL_RCC_OscConfig+0x270>)
 80051b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051b8:	091b      	lsrs	r3, r3, #4
 80051ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051be:	4293      	cmp	r3, r2
 80051c0:	d223      	bcs.n	800520a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6a1b      	ldr	r3, [r3, #32]
 80051c6:	4618      	mov	r0, r3
 80051c8:	f000 fdcc 	bl	8005d64 <RCC_SetFlashLatencyFromMSIRange>
 80051cc:	4603      	mov	r3, r0
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d001      	beq.n	80051d6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	e3c0      	b.n	8005958 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80051d6:	4b73      	ldr	r3, [pc, #460]	; (80053a4 <HAL_RCC_OscConfig+0x270>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a72      	ldr	r2, [pc, #456]	; (80053a4 <HAL_RCC_OscConfig+0x270>)
 80051dc:	f043 0308 	orr.w	r3, r3, #8
 80051e0:	6013      	str	r3, [r2, #0]
 80051e2:	4b70      	ldr	r3, [pc, #448]	; (80053a4 <HAL_RCC_OscConfig+0x270>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6a1b      	ldr	r3, [r3, #32]
 80051ee:	496d      	ldr	r1, [pc, #436]	; (80053a4 <HAL_RCC_OscConfig+0x270>)
 80051f0:	4313      	orrs	r3, r2
 80051f2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80051f4:	4b6b      	ldr	r3, [pc, #428]	; (80053a4 <HAL_RCC_OscConfig+0x270>)
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	69db      	ldr	r3, [r3, #28]
 8005200:	021b      	lsls	r3, r3, #8
 8005202:	4968      	ldr	r1, [pc, #416]	; (80053a4 <HAL_RCC_OscConfig+0x270>)
 8005204:	4313      	orrs	r3, r2
 8005206:	604b      	str	r3, [r1, #4]
 8005208:	e025      	b.n	8005256 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800520a:	4b66      	ldr	r3, [pc, #408]	; (80053a4 <HAL_RCC_OscConfig+0x270>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a65      	ldr	r2, [pc, #404]	; (80053a4 <HAL_RCC_OscConfig+0x270>)
 8005210:	f043 0308 	orr.w	r3, r3, #8
 8005214:	6013      	str	r3, [r2, #0]
 8005216:	4b63      	ldr	r3, [pc, #396]	; (80053a4 <HAL_RCC_OscConfig+0x270>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6a1b      	ldr	r3, [r3, #32]
 8005222:	4960      	ldr	r1, [pc, #384]	; (80053a4 <HAL_RCC_OscConfig+0x270>)
 8005224:	4313      	orrs	r3, r2
 8005226:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005228:	4b5e      	ldr	r3, [pc, #376]	; (80053a4 <HAL_RCC_OscConfig+0x270>)
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	69db      	ldr	r3, [r3, #28]
 8005234:	021b      	lsls	r3, r3, #8
 8005236:	495b      	ldr	r1, [pc, #364]	; (80053a4 <HAL_RCC_OscConfig+0x270>)
 8005238:	4313      	orrs	r3, r2
 800523a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800523c:	69bb      	ldr	r3, [r7, #24]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d109      	bne.n	8005256 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6a1b      	ldr	r3, [r3, #32]
 8005246:	4618      	mov	r0, r3
 8005248:	f000 fd8c 	bl	8005d64 <RCC_SetFlashLatencyFromMSIRange>
 800524c:	4603      	mov	r3, r0
 800524e:	2b00      	cmp	r3, #0
 8005250:	d001      	beq.n	8005256 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	e380      	b.n	8005958 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005256:	f000 fcc1 	bl	8005bdc <HAL_RCC_GetSysClockFreq>
 800525a:	4602      	mov	r2, r0
 800525c:	4b51      	ldr	r3, [pc, #324]	; (80053a4 <HAL_RCC_OscConfig+0x270>)
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	091b      	lsrs	r3, r3, #4
 8005262:	f003 030f 	and.w	r3, r3, #15
 8005266:	4950      	ldr	r1, [pc, #320]	; (80053a8 <HAL_RCC_OscConfig+0x274>)
 8005268:	5ccb      	ldrb	r3, [r1, r3]
 800526a:	f003 031f 	and.w	r3, r3, #31
 800526e:	fa22 f303 	lsr.w	r3, r2, r3
 8005272:	4a4e      	ldr	r2, [pc, #312]	; (80053ac <HAL_RCC_OscConfig+0x278>)
 8005274:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005276:	4b4e      	ldr	r3, [pc, #312]	; (80053b0 <HAL_RCC_OscConfig+0x27c>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4618      	mov	r0, r3
 800527c:	f7fe fb24 	bl	80038c8 <HAL_InitTick>
 8005280:	4603      	mov	r3, r0
 8005282:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005284:	7bfb      	ldrb	r3, [r7, #15]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d052      	beq.n	8005330 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800528a:	7bfb      	ldrb	r3, [r7, #15]
 800528c:	e364      	b.n	8005958 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	699b      	ldr	r3, [r3, #24]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d032      	beq.n	80052fc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005296:	4b43      	ldr	r3, [pc, #268]	; (80053a4 <HAL_RCC_OscConfig+0x270>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a42      	ldr	r2, [pc, #264]	; (80053a4 <HAL_RCC_OscConfig+0x270>)
 800529c:	f043 0301 	orr.w	r3, r3, #1
 80052a0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80052a2:	f7fe fb61 	bl	8003968 <HAL_GetTick>
 80052a6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80052a8:	e008      	b.n	80052bc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80052aa:	f7fe fb5d 	bl	8003968 <HAL_GetTick>
 80052ae:	4602      	mov	r2, r0
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	1ad3      	subs	r3, r2, r3
 80052b4:	2b02      	cmp	r3, #2
 80052b6:	d901      	bls.n	80052bc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80052b8:	2303      	movs	r3, #3
 80052ba:	e34d      	b.n	8005958 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80052bc:	4b39      	ldr	r3, [pc, #228]	; (80053a4 <HAL_RCC_OscConfig+0x270>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 0302 	and.w	r3, r3, #2
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d0f0      	beq.n	80052aa <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80052c8:	4b36      	ldr	r3, [pc, #216]	; (80053a4 <HAL_RCC_OscConfig+0x270>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a35      	ldr	r2, [pc, #212]	; (80053a4 <HAL_RCC_OscConfig+0x270>)
 80052ce:	f043 0308 	orr.w	r3, r3, #8
 80052d2:	6013      	str	r3, [r2, #0]
 80052d4:	4b33      	ldr	r3, [pc, #204]	; (80053a4 <HAL_RCC_OscConfig+0x270>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6a1b      	ldr	r3, [r3, #32]
 80052e0:	4930      	ldr	r1, [pc, #192]	; (80053a4 <HAL_RCC_OscConfig+0x270>)
 80052e2:	4313      	orrs	r3, r2
 80052e4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80052e6:	4b2f      	ldr	r3, [pc, #188]	; (80053a4 <HAL_RCC_OscConfig+0x270>)
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	69db      	ldr	r3, [r3, #28]
 80052f2:	021b      	lsls	r3, r3, #8
 80052f4:	492b      	ldr	r1, [pc, #172]	; (80053a4 <HAL_RCC_OscConfig+0x270>)
 80052f6:	4313      	orrs	r3, r2
 80052f8:	604b      	str	r3, [r1, #4]
 80052fa:	e01a      	b.n	8005332 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80052fc:	4b29      	ldr	r3, [pc, #164]	; (80053a4 <HAL_RCC_OscConfig+0x270>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a28      	ldr	r2, [pc, #160]	; (80053a4 <HAL_RCC_OscConfig+0x270>)
 8005302:	f023 0301 	bic.w	r3, r3, #1
 8005306:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005308:	f7fe fb2e 	bl	8003968 <HAL_GetTick>
 800530c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800530e:	e008      	b.n	8005322 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005310:	f7fe fb2a 	bl	8003968 <HAL_GetTick>
 8005314:	4602      	mov	r2, r0
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	1ad3      	subs	r3, r2, r3
 800531a:	2b02      	cmp	r3, #2
 800531c:	d901      	bls.n	8005322 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800531e:	2303      	movs	r3, #3
 8005320:	e31a      	b.n	8005958 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005322:	4b20      	ldr	r3, [pc, #128]	; (80053a4 <HAL_RCC_OscConfig+0x270>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f003 0302 	and.w	r3, r3, #2
 800532a:	2b00      	cmp	r3, #0
 800532c:	d1f0      	bne.n	8005310 <HAL_RCC_OscConfig+0x1dc>
 800532e:	e000      	b.n	8005332 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005330:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f003 0301 	and.w	r3, r3, #1
 800533a:	2b00      	cmp	r3, #0
 800533c:	d073      	beq.n	8005426 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800533e:	69bb      	ldr	r3, [r7, #24]
 8005340:	2b08      	cmp	r3, #8
 8005342:	d005      	beq.n	8005350 <HAL_RCC_OscConfig+0x21c>
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	2b0c      	cmp	r3, #12
 8005348:	d10e      	bne.n	8005368 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	2b03      	cmp	r3, #3
 800534e:	d10b      	bne.n	8005368 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005350:	4b14      	ldr	r3, [pc, #80]	; (80053a4 <HAL_RCC_OscConfig+0x270>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005358:	2b00      	cmp	r3, #0
 800535a:	d063      	beq.n	8005424 <HAL_RCC_OscConfig+0x2f0>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d15f      	bne.n	8005424 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	e2f7      	b.n	8005958 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005370:	d106      	bne.n	8005380 <HAL_RCC_OscConfig+0x24c>
 8005372:	4b0c      	ldr	r3, [pc, #48]	; (80053a4 <HAL_RCC_OscConfig+0x270>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a0b      	ldr	r2, [pc, #44]	; (80053a4 <HAL_RCC_OscConfig+0x270>)
 8005378:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800537c:	6013      	str	r3, [r2, #0]
 800537e:	e025      	b.n	80053cc <HAL_RCC_OscConfig+0x298>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005388:	d114      	bne.n	80053b4 <HAL_RCC_OscConfig+0x280>
 800538a:	4b06      	ldr	r3, [pc, #24]	; (80053a4 <HAL_RCC_OscConfig+0x270>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a05      	ldr	r2, [pc, #20]	; (80053a4 <HAL_RCC_OscConfig+0x270>)
 8005390:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005394:	6013      	str	r3, [r2, #0]
 8005396:	4b03      	ldr	r3, [pc, #12]	; (80053a4 <HAL_RCC_OscConfig+0x270>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a02      	ldr	r2, [pc, #8]	; (80053a4 <HAL_RCC_OscConfig+0x270>)
 800539c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053a0:	6013      	str	r3, [r2, #0]
 80053a2:	e013      	b.n	80053cc <HAL_RCC_OscConfig+0x298>
 80053a4:	40021000 	.word	0x40021000
 80053a8:	0800e498 	.word	0x0800e498
 80053ac:	20000008 	.word	0x20000008
 80053b0:	2000000c 	.word	0x2000000c
 80053b4:	4ba0      	ldr	r3, [pc, #640]	; (8005638 <HAL_RCC_OscConfig+0x504>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a9f      	ldr	r2, [pc, #636]	; (8005638 <HAL_RCC_OscConfig+0x504>)
 80053ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053be:	6013      	str	r3, [r2, #0]
 80053c0:	4b9d      	ldr	r3, [pc, #628]	; (8005638 <HAL_RCC_OscConfig+0x504>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a9c      	ldr	r2, [pc, #624]	; (8005638 <HAL_RCC_OscConfig+0x504>)
 80053c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d013      	beq.n	80053fc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053d4:	f7fe fac8 	bl	8003968 <HAL_GetTick>
 80053d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80053da:	e008      	b.n	80053ee <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053dc:	f7fe fac4 	bl	8003968 <HAL_GetTick>
 80053e0:	4602      	mov	r2, r0
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	2b64      	cmp	r3, #100	; 0x64
 80053e8:	d901      	bls.n	80053ee <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80053ea:	2303      	movs	r3, #3
 80053ec:	e2b4      	b.n	8005958 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80053ee:	4b92      	ldr	r3, [pc, #584]	; (8005638 <HAL_RCC_OscConfig+0x504>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d0f0      	beq.n	80053dc <HAL_RCC_OscConfig+0x2a8>
 80053fa:	e014      	b.n	8005426 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053fc:	f7fe fab4 	bl	8003968 <HAL_GetTick>
 8005400:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005402:	e008      	b.n	8005416 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005404:	f7fe fab0 	bl	8003968 <HAL_GetTick>
 8005408:	4602      	mov	r2, r0
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	2b64      	cmp	r3, #100	; 0x64
 8005410:	d901      	bls.n	8005416 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005412:	2303      	movs	r3, #3
 8005414:	e2a0      	b.n	8005958 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005416:	4b88      	ldr	r3, [pc, #544]	; (8005638 <HAL_RCC_OscConfig+0x504>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800541e:	2b00      	cmp	r3, #0
 8005420:	d1f0      	bne.n	8005404 <HAL_RCC_OscConfig+0x2d0>
 8005422:	e000      	b.n	8005426 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005424:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f003 0302 	and.w	r3, r3, #2
 800542e:	2b00      	cmp	r3, #0
 8005430:	d060      	beq.n	80054f4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005432:	69bb      	ldr	r3, [r7, #24]
 8005434:	2b04      	cmp	r3, #4
 8005436:	d005      	beq.n	8005444 <HAL_RCC_OscConfig+0x310>
 8005438:	69bb      	ldr	r3, [r7, #24]
 800543a:	2b0c      	cmp	r3, #12
 800543c:	d119      	bne.n	8005472 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	2b02      	cmp	r3, #2
 8005442:	d116      	bne.n	8005472 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005444:	4b7c      	ldr	r3, [pc, #496]	; (8005638 <HAL_RCC_OscConfig+0x504>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800544c:	2b00      	cmp	r3, #0
 800544e:	d005      	beq.n	800545c <HAL_RCC_OscConfig+0x328>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	68db      	ldr	r3, [r3, #12]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d101      	bne.n	800545c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	e27d      	b.n	8005958 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800545c:	4b76      	ldr	r3, [pc, #472]	; (8005638 <HAL_RCC_OscConfig+0x504>)
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	691b      	ldr	r3, [r3, #16]
 8005468:	061b      	lsls	r3, r3, #24
 800546a:	4973      	ldr	r1, [pc, #460]	; (8005638 <HAL_RCC_OscConfig+0x504>)
 800546c:	4313      	orrs	r3, r2
 800546e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005470:	e040      	b.n	80054f4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	68db      	ldr	r3, [r3, #12]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d023      	beq.n	80054c2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800547a:	4b6f      	ldr	r3, [pc, #444]	; (8005638 <HAL_RCC_OscConfig+0x504>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a6e      	ldr	r2, [pc, #440]	; (8005638 <HAL_RCC_OscConfig+0x504>)
 8005480:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005484:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005486:	f7fe fa6f 	bl	8003968 <HAL_GetTick>
 800548a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800548c:	e008      	b.n	80054a0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800548e:	f7fe fa6b 	bl	8003968 <HAL_GetTick>
 8005492:	4602      	mov	r2, r0
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	1ad3      	subs	r3, r2, r3
 8005498:	2b02      	cmp	r3, #2
 800549a:	d901      	bls.n	80054a0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800549c:	2303      	movs	r3, #3
 800549e:	e25b      	b.n	8005958 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80054a0:	4b65      	ldr	r3, [pc, #404]	; (8005638 <HAL_RCC_OscConfig+0x504>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d0f0      	beq.n	800548e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054ac:	4b62      	ldr	r3, [pc, #392]	; (8005638 <HAL_RCC_OscConfig+0x504>)
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	691b      	ldr	r3, [r3, #16]
 80054b8:	061b      	lsls	r3, r3, #24
 80054ba:	495f      	ldr	r1, [pc, #380]	; (8005638 <HAL_RCC_OscConfig+0x504>)
 80054bc:	4313      	orrs	r3, r2
 80054be:	604b      	str	r3, [r1, #4]
 80054c0:	e018      	b.n	80054f4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80054c2:	4b5d      	ldr	r3, [pc, #372]	; (8005638 <HAL_RCC_OscConfig+0x504>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a5c      	ldr	r2, [pc, #368]	; (8005638 <HAL_RCC_OscConfig+0x504>)
 80054c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054ce:	f7fe fa4b 	bl	8003968 <HAL_GetTick>
 80054d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80054d4:	e008      	b.n	80054e8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054d6:	f7fe fa47 	bl	8003968 <HAL_GetTick>
 80054da:	4602      	mov	r2, r0
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	1ad3      	subs	r3, r2, r3
 80054e0:	2b02      	cmp	r3, #2
 80054e2:	d901      	bls.n	80054e8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80054e4:	2303      	movs	r3, #3
 80054e6:	e237      	b.n	8005958 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80054e8:	4b53      	ldr	r3, [pc, #332]	; (8005638 <HAL_RCC_OscConfig+0x504>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d1f0      	bne.n	80054d6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 0308 	and.w	r3, r3, #8
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d03c      	beq.n	800557a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	695b      	ldr	r3, [r3, #20]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d01c      	beq.n	8005542 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005508:	4b4b      	ldr	r3, [pc, #300]	; (8005638 <HAL_RCC_OscConfig+0x504>)
 800550a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800550e:	4a4a      	ldr	r2, [pc, #296]	; (8005638 <HAL_RCC_OscConfig+0x504>)
 8005510:	f043 0301 	orr.w	r3, r3, #1
 8005514:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005518:	f7fe fa26 	bl	8003968 <HAL_GetTick>
 800551c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800551e:	e008      	b.n	8005532 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005520:	f7fe fa22 	bl	8003968 <HAL_GetTick>
 8005524:	4602      	mov	r2, r0
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	2b02      	cmp	r3, #2
 800552c:	d901      	bls.n	8005532 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800552e:	2303      	movs	r3, #3
 8005530:	e212      	b.n	8005958 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005532:	4b41      	ldr	r3, [pc, #260]	; (8005638 <HAL_RCC_OscConfig+0x504>)
 8005534:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005538:	f003 0302 	and.w	r3, r3, #2
 800553c:	2b00      	cmp	r3, #0
 800553e:	d0ef      	beq.n	8005520 <HAL_RCC_OscConfig+0x3ec>
 8005540:	e01b      	b.n	800557a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005542:	4b3d      	ldr	r3, [pc, #244]	; (8005638 <HAL_RCC_OscConfig+0x504>)
 8005544:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005548:	4a3b      	ldr	r2, [pc, #236]	; (8005638 <HAL_RCC_OscConfig+0x504>)
 800554a:	f023 0301 	bic.w	r3, r3, #1
 800554e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005552:	f7fe fa09 	bl	8003968 <HAL_GetTick>
 8005556:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005558:	e008      	b.n	800556c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800555a:	f7fe fa05 	bl	8003968 <HAL_GetTick>
 800555e:	4602      	mov	r2, r0
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	1ad3      	subs	r3, r2, r3
 8005564:	2b02      	cmp	r3, #2
 8005566:	d901      	bls.n	800556c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005568:	2303      	movs	r3, #3
 800556a:	e1f5      	b.n	8005958 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800556c:	4b32      	ldr	r3, [pc, #200]	; (8005638 <HAL_RCC_OscConfig+0x504>)
 800556e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005572:	f003 0302 	and.w	r3, r3, #2
 8005576:	2b00      	cmp	r3, #0
 8005578:	d1ef      	bne.n	800555a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f003 0304 	and.w	r3, r3, #4
 8005582:	2b00      	cmp	r3, #0
 8005584:	f000 80a6 	beq.w	80056d4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005588:	2300      	movs	r3, #0
 800558a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800558c:	4b2a      	ldr	r3, [pc, #168]	; (8005638 <HAL_RCC_OscConfig+0x504>)
 800558e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005594:	2b00      	cmp	r3, #0
 8005596:	d10d      	bne.n	80055b4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005598:	4b27      	ldr	r3, [pc, #156]	; (8005638 <HAL_RCC_OscConfig+0x504>)
 800559a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800559c:	4a26      	ldr	r2, [pc, #152]	; (8005638 <HAL_RCC_OscConfig+0x504>)
 800559e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055a2:	6593      	str	r3, [r2, #88]	; 0x58
 80055a4:	4b24      	ldr	r3, [pc, #144]	; (8005638 <HAL_RCC_OscConfig+0x504>)
 80055a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055ac:	60bb      	str	r3, [r7, #8]
 80055ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055b0:	2301      	movs	r3, #1
 80055b2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055b4:	4b21      	ldr	r3, [pc, #132]	; (800563c <HAL_RCC_OscConfig+0x508>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d118      	bne.n	80055f2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80055c0:	4b1e      	ldr	r3, [pc, #120]	; (800563c <HAL_RCC_OscConfig+0x508>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a1d      	ldr	r2, [pc, #116]	; (800563c <HAL_RCC_OscConfig+0x508>)
 80055c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055ca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055cc:	f7fe f9cc 	bl	8003968 <HAL_GetTick>
 80055d0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055d2:	e008      	b.n	80055e6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055d4:	f7fe f9c8 	bl	8003968 <HAL_GetTick>
 80055d8:	4602      	mov	r2, r0
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	1ad3      	subs	r3, r2, r3
 80055de:	2b02      	cmp	r3, #2
 80055e0:	d901      	bls.n	80055e6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80055e2:	2303      	movs	r3, #3
 80055e4:	e1b8      	b.n	8005958 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055e6:	4b15      	ldr	r3, [pc, #84]	; (800563c <HAL_RCC_OscConfig+0x508>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d0f0      	beq.n	80055d4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	d108      	bne.n	800560c <HAL_RCC_OscConfig+0x4d8>
 80055fa:	4b0f      	ldr	r3, [pc, #60]	; (8005638 <HAL_RCC_OscConfig+0x504>)
 80055fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005600:	4a0d      	ldr	r2, [pc, #52]	; (8005638 <HAL_RCC_OscConfig+0x504>)
 8005602:	f043 0301 	orr.w	r3, r3, #1
 8005606:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800560a:	e029      	b.n	8005660 <HAL_RCC_OscConfig+0x52c>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	2b05      	cmp	r3, #5
 8005612:	d115      	bne.n	8005640 <HAL_RCC_OscConfig+0x50c>
 8005614:	4b08      	ldr	r3, [pc, #32]	; (8005638 <HAL_RCC_OscConfig+0x504>)
 8005616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800561a:	4a07      	ldr	r2, [pc, #28]	; (8005638 <HAL_RCC_OscConfig+0x504>)
 800561c:	f043 0304 	orr.w	r3, r3, #4
 8005620:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005624:	4b04      	ldr	r3, [pc, #16]	; (8005638 <HAL_RCC_OscConfig+0x504>)
 8005626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800562a:	4a03      	ldr	r2, [pc, #12]	; (8005638 <HAL_RCC_OscConfig+0x504>)
 800562c:	f043 0301 	orr.w	r3, r3, #1
 8005630:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005634:	e014      	b.n	8005660 <HAL_RCC_OscConfig+0x52c>
 8005636:	bf00      	nop
 8005638:	40021000 	.word	0x40021000
 800563c:	40007000 	.word	0x40007000
 8005640:	4b9d      	ldr	r3, [pc, #628]	; (80058b8 <HAL_RCC_OscConfig+0x784>)
 8005642:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005646:	4a9c      	ldr	r2, [pc, #624]	; (80058b8 <HAL_RCC_OscConfig+0x784>)
 8005648:	f023 0301 	bic.w	r3, r3, #1
 800564c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005650:	4b99      	ldr	r3, [pc, #612]	; (80058b8 <HAL_RCC_OscConfig+0x784>)
 8005652:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005656:	4a98      	ldr	r2, [pc, #608]	; (80058b8 <HAL_RCC_OscConfig+0x784>)
 8005658:	f023 0304 	bic.w	r3, r3, #4
 800565c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d016      	beq.n	8005696 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005668:	f7fe f97e 	bl	8003968 <HAL_GetTick>
 800566c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800566e:	e00a      	b.n	8005686 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005670:	f7fe f97a 	bl	8003968 <HAL_GetTick>
 8005674:	4602      	mov	r2, r0
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	1ad3      	subs	r3, r2, r3
 800567a:	f241 3288 	movw	r2, #5000	; 0x1388
 800567e:	4293      	cmp	r3, r2
 8005680:	d901      	bls.n	8005686 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005682:	2303      	movs	r3, #3
 8005684:	e168      	b.n	8005958 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005686:	4b8c      	ldr	r3, [pc, #560]	; (80058b8 <HAL_RCC_OscConfig+0x784>)
 8005688:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800568c:	f003 0302 	and.w	r3, r3, #2
 8005690:	2b00      	cmp	r3, #0
 8005692:	d0ed      	beq.n	8005670 <HAL_RCC_OscConfig+0x53c>
 8005694:	e015      	b.n	80056c2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005696:	f7fe f967 	bl	8003968 <HAL_GetTick>
 800569a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800569c:	e00a      	b.n	80056b4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800569e:	f7fe f963 	bl	8003968 <HAL_GetTick>
 80056a2:	4602      	mov	r2, r0
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	1ad3      	subs	r3, r2, r3
 80056a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d901      	bls.n	80056b4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80056b0:	2303      	movs	r3, #3
 80056b2:	e151      	b.n	8005958 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80056b4:	4b80      	ldr	r3, [pc, #512]	; (80058b8 <HAL_RCC_OscConfig+0x784>)
 80056b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056ba:	f003 0302 	and.w	r3, r3, #2
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d1ed      	bne.n	800569e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80056c2:	7ffb      	ldrb	r3, [r7, #31]
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d105      	bne.n	80056d4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056c8:	4b7b      	ldr	r3, [pc, #492]	; (80058b8 <HAL_RCC_OscConfig+0x784>)
 80056ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056cc:	4a7a      	ldr	r2, [pc, #488]	; (80058b8 <HAL_RCC_OscConfig+0x784>)
 80056ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056d2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f003 0320 	and.w	r3, r3, #32
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d03c      	beq.n	800575a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d01c      	beq.n	8005722 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80056e8:	4b73      	ldr	r3, [pc, #460]	; (80058b8 <HAL_RCC_OscConfig+0x784>)
 80056ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80056ee:	4a72      	ldr	r2, [pc, #456]	; (80058b8 <HAL_RCC_OscConfig+0x784>)
 80056f0:	f043 0301 	orr.w	r3, r3, #1
 80056f4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056f8:	f7fe f936 	bl	8003968 <HAL_GetTick>
 80056fc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80056fe:	e008      	b.n	8005712 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005700:	f7fe f932 	bl	8003968 <HAL_GetTick>
 8005704:	4602      	mov	r2, r0
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	1ad3      	subs	r3, r2, r3
 800570a:	2b02      	cmp	r3, #2
 800570c:	d901      	bls.n	8005712 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800570e:	2303      	movs	r3, #3
 8005710:	e122      	b.n	8005958 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005712:	4b69      	ldr	r3, [pc, #420]	; (80058b8 <HAL_RCC_OscConfig+0x784>)
 8005714:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005718:	f003 0302 	and.w	r3, r3, #2
 800571c:	2b00      	cmp	r3, #0
 800571e:	d0ef      	beq.n	8005700 <HAL_RCC_OscConfig+0x5cc>
 8005720:	e01b      	b.n	800575a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005722:	4b65      	ldr	r3, [pc, #404]	; (80058b8 <HAL_RCC_OscConfig+0x784>)
 8005724:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005728:	4a63      	ldr	r2, [pc, #396]	; (80058b8 <HAL_RCC_OscConfig+0x784>)
 800572a:	f023 0301 	bic.w	r3, r3, #1
 800572e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005732:	f7fe f919 	bl	8003968 <HAL_GetTick>
 8005736:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005738:	e008      	b.n	800574c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800573a:	f7fe f915 	bl	8003968 <HAL_GetTick>
 800573e:	4602      	mov	r2, r0
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	1ad3      	subs	r3, r2, r3
 8005744:	2b02      	cmp	r3, #2
 8005746:	d901      	bls.n	800574c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005748:	2303      	movs	r3, #3
 800574a:	e105      	b.n	8005958 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800574c:	4b5a      	ldr	r3, [pc, #360]	; (80058b8 <HAL_RCC_OscConfig+0x784>)
 800574e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005752:	f003 0302 	and.w	r3, r3, #2
 8005756:	2b00      	cmp	r3, #0
 8005758:	d1ef      	bne.n	800573a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800575e:	2b00      	cmp	r3, #0
 8005760:	f000 80f9 	beq.w	8005956 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005768:	2b02      	cmp	r3, #2
 800576a:	f040 80cf 	bne.w	800590c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800576e:	4b52      	ldr	r3, [pc, #328]	; (80058b8 <HAL_RCC_OscConfig+0x784>)
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	f003 0203 	and.w	r2, r3, #3
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800577e:	429a      	cmp	r2, r3
 8005780:	d12c      	bne.n	80057dc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800578c:	3b01      	subs	r3, #1
 800578e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005790:	429a      	cmp	r2, r3
 8005792:	d123      	bne.n	80057dc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800579e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d11b      	bne.n	80057dc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ae:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d113      	bne.n	80057dc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057be:	085b      	lsrs	r3, r3, #1
 80057c0:	3b01      	subs	r3, #1
 80057c2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d109      	bne.n	80057dc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d2:	085b      	lsrs	r3, r3, #1
 80057d4:	3b01      	subs	r3, #1
 80057d6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80057d8:	429a      	cmp	r2, r3
 80057da:	d071      	beq.n	80058c0 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80057dc:	69bb      	ldr	r3, [r7, #24]
 80057de:	2b0c      	cmp	r3, #12
 80057e0:	d068      	beq.n	80058b4 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80057e2:	4b35      	ldr	r3, [pc, #212]	; (80058b8 <HAL_RCC_OscConfig+0x784>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d105      	bne.n	80057fa <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80057ee:	4b32      	ldr	r3, [pc, #200]	; (80058b8 <HAL_RCC_OscConfig+0x784>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d001      	beq.n	80057fe <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	e0ac      	b.n	8005958 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80057fe:	4b2e      	ldr	r3, [pc, #184]	; (80058b8 <HAL_RCC_OscConfig+0x784>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a2d      	ldr	r2, [pc, #180]	; (80058b8 <HAL_RCC_OscConfig+0x784>)
 8005804:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005808:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800580a:	f7fe f8ad 	bl	8003968 <HAL_GetTick>
 800580e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005810:	e008      	b.n	8005824 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005812:	f7fe f8a9 	bl	8003968 <HAL_GetTick>
 8005816:	4602      	mov	r2, r0
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	1ad3      	subs	r3, r2, r3
 800581c:	2b02      	cmp	r3, #2
 800581e:	d901      	bls.n	8005824 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8005820:	2303      	movs	r3, #3
 8005822:	e099      	b.n	8005958 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005824:	4b24      	ldr	r3, [pc, #144]	; (80058b8 <HAL_RCC_OscConfig+0x784>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800582c:	2b00      	cmp	r3, #0
 800582e:	d1f0      	bne.n	8005812 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005830:	4b21      	ldr	r3, [pc, #132]	; (80058b8 <HAL_RCC_OscConfig+0x784>)
 8005832:	68da      	ldr	r2, [r3, #12]
 8005834:	4b21      	ldr	r3, [pc, #132]	; (80058bc <HAL_RCC_OscConfig+0x788>)
 8005836:	4013      	ands	r3, r2
 8005838:	687a      	ldr	r2, [r7, #4]
 800583a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800583c:	687a      	ldr	r2, [r7, #4]
 800583e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005840:	3a01      	subs	r2, #1
 8005842:	0112      	lsls	r2, r2, #4
 8005844:	4311      	orrs	r1, r2
 8005846:	687a      	ldr	r2, [r7, #4]
 8005848:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800584a:	0212      	lsls	r2, r2, #8
 800584c:	4311      	orrs	r1, r2
 800584e:	687a      	ldr	r2, [r7, #4]
 8005850:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005852:	0852      	lsrs	r2, r2, #1
 8005854:	3a01      	subs	r2, #1
 8005856:	0552      	lsls	r2, r2, #21
 8005858:	4311      	orrs	r1, r2
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800585e:	0852      	lsrs	r2, r2, #1
 8005860:	3a01      	subs	r2, #1
 8005862:	0652      	lsls	r2, r2, #25
 8005864:	4311      	orrs	r1, r2
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800586a:	06d2      	lsls	r2, r2, #27
 800586c:	430a      	orrs	r2, r1
 800586e:	4912      	ldr	r1, [pc, #72]	; (80058b8 <HAL_RCC_OscConfig+0x784>)
 8005870:	4313      	orrs	r3, r2
 8005872:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005874:	4b10      	ldr	r3, [pc, #64]	; (80058b8 <HAL_RCC_OscConfig+0x784>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a0f      	ldr	r2, [pc, #60]	; (80058b8 <HAL_RCC_OscConfig+0x784>)
 800587a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800587e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005880:	4b0d      	ldr	r3, [pc, #52]	; (80058b8 <HAL_RCC_OscConfig+0x784>)
 8005882:	68db      	ldr	r3, [r3, #12]
 8005884:	4a0c      	ldr	r2, [pc, #48]	; (80058b8 <HAL_RCC_OscConfig+0x784>)
 8005886:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800588a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800588c:	f7fe f86c 	bl	8003968 <HAL_GetTick>
 8005890:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005892:	e008      	b.n	80058a6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005894:	f7fe f868 	bl	8003968 <HAL_GetTick>
 8005898:	4602      	mov	r2, r0
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	1ad3      	subs	r3, r2, r3
 800589e:	2b02      	cmp	r3, #2
 80058a0:	d901      	bls.n	80058a6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80058a2:	2303      	movs	r3, #3
 80058a4:	e058      	b.n	8005958 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058a6:	4b04      	ldr	r3, [pc, #16]	; (80058b8 <HAL_RCC_OscConfig+0x784>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d0f0      	beq.n	8005894 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80058b2:	e050      	b.n	8005956 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80058b4:	2301      	movs	r3, #1
 80058b6:	e04f      	b.n	8005958 <HAL_RCC_OscConfig+0x824>
 80058b8:	40021000 	.word	0x40021000
 80058bc:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058c0:	4b27      	ldr	r3, [pc, #156]	; (8005960 <HAL_RCC_OscConfig+0x82c>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d144      	bne.n	8005956 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80058cc:	4b24      	ldr	r3, [pc, #144]	; (8005960 <HAL_RCC_OscConfig+0x82c>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a23      	ldr	r2, [pc, #140]	; (8005960 <HAL_RCC_OscConfig+0x82c>)
 80058d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80058d6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80058d8:	4b21      	ldr	r3, [pc, #132]	; (8005960 <HAL_RCC_OscConfig+0x82c>)
 80058da:	68db      	ldr	r3, [r3, #12]
 80058dc:	4a20      	ldr	r2, [pc, #128]	; (8005960 <HAL_RCC_OscConfig+0x82c>)
 80058de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80058e2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80058e4:	f7fe f840 	bl	8003968 <HAL_GetTick>
 80058e8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058ea:	e008      	b.n	80058fe <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058ec:	f7fe f83c 	bl	8003968 <HAL_GetTick>
 80058f0:	4602      	mov	r2, r0
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	1ad3      	subs	r3, r2, r3
 80058f6:	2b02      	cmp	r3, #2
 80058f8:	d901      	bls.n	80058fe <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80058fa:	2303      	movs	r3, #3
 80058fc:	e02c      	b.n	8005958 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058fe:	4b18      	ldr	r3, [pc, #96]	; (8005960 <HAL_RCC_OscConfig+0x82c>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005906:	2b00      	cmp	r3, #0
 8005908:	d0f0      	beq.n	80058ec <HAL_RCC_OscConfig+0x7b8>
 800590a:	e024      	b.n	8005956 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800590c:	69bb      	ldr	r3, [r7, #24]
 800590e:	2b0c      	cmp	r3, #12
 8005910:	d01f      	beq.n	8005952 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005912:	4b13      	ldr	r3, [pc, #76]	; (8005960 <HAL_RCC_OscConfig+0x82c>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a12      	ldr	r2, [pc, #72]	; (8005960 <HAL_RCC_OscConfig+0x82c>)
 8005918:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800591c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800591e:	f7fe f823 	bl	8003968 <HAL_GetTick>
 8005922:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005924:	e008      	b.n	8005938 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005926:	f7fe f81f 	bl	8003968 <HAL_GetTick>
 800592a:	4602      	mov	r2, r0
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	1ad3      	subs	r3, r2, r3
 8005930:	2b02      	cmp	r3, #2
 8005932:	d901      	bls.n	8005938 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8005934:	2303      	movs	r3, #3
 8005936:	e00f      	b.n	8005958 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005938:	4b09      	ldr	r3, [pc, #36]	; (8005960 <HAL_RCC_OscConfig+0x82c>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005940:	2b00      	cmp	r3, #0
 8005942:	d1f0      	bne.n	8005926 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005944:	4b06      	ldr	r3, [pc, #24]	; (8005960 <HAL_RCC_OscConfig+0x82c>)
 8005946:	68da      	ldr	r2, [r3, #12]
 8005948:	4905      	ldr	r1, [pc, #20]	; (8005960 <HAL_RCC_OscConfig+0x82c>)
 800594a:	4b06      	ldr	r3, [pc, #24]	; (8005964 <HAL_RCC_OscConfig+0x830>)
 800594c:	4013      	ands	r3, r2
 800594e:	60cb      	str	r3, [r1, #12]
 8005950:	e001      	b.n	8005956 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005952:	2301      	movs	r3, #1
 8005954:	e000      	b.n	8005958 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8005956:	2300      	movs	r3, #0
}
 8005958:	4618      	mov	r0, r3
 800595a:	3720      	adds	r7, #32
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}
 8005960:	40021000 	.word	0x40021000
 8005964:	feeefffc 	.word	0xfeeefffc

08005968 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b086      	sub	sp, #24
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005972:	2300      	movs	r3, #0
 8005974:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d101      	bne.n	8005980 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800597c:	2301      	movs	r3, #1
 800597e:	e11d      	b.n	8005bbc <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005980:	4b90      	ldr	r3, [pc, #576]	; (8005bc4 <HAL_RCC_ClockConfig+0x25c>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f003 030f 	and.w	r3, r3, #15
 8005988:	683a      	ldr	r2, [r7, #0]
 800598a:	429a      	cmp	r2, r3
 800598c:	d910      	bls.n	80059b0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800598e:	4b8d      	ldr	r3, [pc, #564]	; (8005bc4 <HAL_RCC_ClockConfig+0x25c>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f023 020f 	bic.w	r2, r3, #15
 8005996:	498b      	ldr	r1, [pc, #556]	; (8005bc4 <HAL_RCC_ClockConfig+0x25c>)
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	4313      	orrs	r3, r2
 800599c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800599e:	4b89      	ldr	r3, [pc, #548]	; (8005bc4 <HAL_RCC_ClockConfig+0x25c>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f003 030f 	and.w	r3, r3, #15
 80059a6:	683a      	ldr	r2, [r7, #0]
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d001      	beq.n	80059b0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80059ac:	2301      	movs	r3, #1
 80059ae:	e105      	b.n	8005bbc <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f003 0302 	and.w	r3, r3, #2
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d010      	beq.n	80059de <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	689a      	ldr	r2, [r3, #8]
 80059c0:	4b81      	ldr	r3, [pc, #516]	; (8005bc8 <HAL_RCC_ClockConfig+0x260>)
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d908      	bls.n	80059de <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059cc:	4b7e      	ldr	r3, [pc, #504]	; (8005bc8 <HAL_RCC_ClockConfig+0x260>)
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	497b      	ldr	r1, [pc, #492]	; (8005bc8 <HAL_RCC_ClockConfig+0x260>)
 80059da:	4313      	orrs	r3, r2
 80059dc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f003 0301 	and.w	r3, r3, #1
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d079      	beq.n	8005ade <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	2b03      	cmp	r3, #3
 80059f0:	d11e      	bne.n	8005a30 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059f2:	4b75      	ldr	r3, [pc, #468]	; (8005bc8 <HAL_RCC_ClockConfig+0x260>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d101      	bne.n	8005a02 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	e0dc      	b.n	8005bbc <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8005a02:	f000 fa09 	bl	8005e18 <RCC_GetSysClockFreqFromPLLSource>
 8005a06:	4603      	mov	r3, r0
 8005a08:	4a70      	ldr	r2, [pc, #448]	; (8005bcc <HAL_RCC_ClockConfig+0x264>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d946      	bls.n	8005a9c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005a0e:	4b6e      	ldr	r3, [pc, #440]	; (8005bc8 <HAL_RCC_ClockConfig+0x260>)
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d140      	bne.n	8005a9c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005a1a:	4b6b      	ldr	r3, [pc, #428]	; (8005bc8 <HAL_RCC_ClockConfig+0x260>)
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a22:	4a69      	ldr	r2, [pc, #420]	; (8005bc8 <HAL_RCC_ClockConfig+0x260>)
 8005a24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a28:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005a2a:	2380      	movs	r3, #128	; 0x80
 8005a2c:	617b      	str	r3, [r7, #20]
 8005a2e:	e035      	b.n	8005a9c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	2b02      	cmp	r3, #2
 8005a36:	d107      	bne.n	8005a48 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a38:	4b63      	ldr	r3, [pc, #396]	; (8005bc8 <HAL_RCC_ClockConfig+0x260>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d115      	bne.n	8005a70 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005a44:	2301      	movs	r3, #1
 8005a46:	e0b9      	b.n	8005bbc <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d107      	bne.n	8005a60 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005a50:	4b5d      	ldr	r3, [pc, #372]	; (8005bc8 <HAL_RCC_ClockConfig+0x260>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f003 0302 	and.w	r3, r3, #2
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d109      	bne.n	8005a70 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	e0ad      	b.n	8005bbc <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a60:	4b59      	ldr	r3, [pc, #356]	; (8005bc8 <HAL_RCC_ClockConfig+0x260>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d101      	bne.n	8005a70 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	e0a5      	b.n	8005bbc <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8005a70:	f000 f8b4 	bl	8005bdc <HAL_RCC_GetSysClockFreq>
 8005a74:	4603      	mov	r3, r0
 8005a76:	4a55      	ldr	r2, [pc, #340]	; (8005bcc <HAL_RCC_ClockConfig+0x264>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d90f      	bls.n	8005a9c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005a7c:	4b52      	ldr	r3, [pc, #328]	; (8005bc8 <HAL_RCC_ClockConfig+0x260>)
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d109      	bne.n	8005a9c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005a88:	4b4f      	ldr	r3, [pc, #316]	; (8005bc8 <HAL_RCC_ClockConfig+0x260>)
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a90:	4a4d      	ldr	r2, [pc, #308]	; (8005bc8 <HAL_RCC_ClockConfig+0x260>)
 8005a92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a96:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005a98:	2380      	movs	r3, #128	; 0x80
 8005a9a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005a9c:	4b4a      	ldr	r3, [pc, #296]	; (8005bc8 <HAL_RCC_ClockConfig+0x260>)
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	f023 0203 	bic.w	r2, r3, #3
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	4947      	ldr	r1, [pc, #284]	; (8005bc8 <HAL_RCC_ClockConfig+0x260>)
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005aae:	f7fd ff5b 	bl	8003968 <HAL_GetTick>
 8005ab2:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ab4:	e00a      	b.n	8005acc <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ab6:	f7fd ff57 	bl	8003968 <HAL_GetTick>
 8005aba:	4602      	mov	r2, r0
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	1ad3      	subs	r3, r2, r3
 8005ac0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d901      	bls.n	8005acc <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8005ac8:	2303      	movs	r3, #3
 8005aca:	e077      	b.n	8005bbc <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005acc:	4b3e      	ldr	r3, [pc, #248]	; (8005bc8 <HAL_RCC_ClockConfig+0x260>)
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	f003 020c 	and.w	r2, r3, #12
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	009b      	lsls	r3, r3, #2
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d1eb      	bne.n	8005ab6 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	2b80      	cmp	r3, #128	; 0x80
 8005ae2:	d105      	bne.n	8005af0 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005ae4:	4b38      	ldr	r3, [pc, #224]	; (8005bc8 <HAL_RCC_ClockConfig+0x260>)
 8005ae6:	689b      	ldr	r3, [r3, #8]
 8005ae8:	4a37      	ldr	r2, [pc, #220]	; (8005bc8 <HAL_RCC_ClockConfig+0x260>)
 8005aea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005aee:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f003 0302 	and.w	r3, r3, #2
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d010      	beq.n	8005b1e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	689a      	ldr	r2, [r3, #8]
 8005b00:	4b31      	ldr	r3, [pc, #196]	; (8005bc8 <HAL_RCC_ClockConfig+0x260>)
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d208      	bcs.n	8005b1e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b0c:	4b2e      	ldr	r3, [pc, #184]	; (8005bc8 <HAL_RCC_ClockConfig+0x260>)
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	689b      	ldr	r3, [r3, #8]
 8005b18:	492b      	ldr	r1, [pc, #172]	; (8005bc8 <HAL_RCC_ClockConfig+0x260>)
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005b1e:	4b29      	ldr	r3, [pc, #164]	; (8005bc4 <HAL_RCC_ClockConfig+0x25c>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f003 030f 	and.w	r3, r3, #15
 8005b26:	683a      	ldr	r2, [r7, #0]
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d210      	bcs.n	8005b4e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b2c:	4b25      	ldr	r3, [pc, #148]	; (8005bc4 <HAL_RCC_ClockConfig+0x25c>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f023 020f 	bic.w	r2, r3, #15
 8005b34:	4923      	ldr	r1, [pc, #140]	; (8005bc4 <HAL_RCC_ClockConfig+0x25c>)
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b3c:	4b21      	ldr	r3, [pc, #132]	; (8005bc4 <HAL_RCC_ClockConfig+0x25c>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f003 030f 	and.w	r3, r3, #15
 8005b44:	683a      	ldr	r2, [r7, #0]
 8005b46:	429a      	cmp	r2, r3
 8005b48:	d001      	beq.n	8005b4e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e036      	b.n	8005bbc <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f003 0304 	and.w	r3, r3, #4
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d008      	beq.n	8005b6c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b5a:	4b1b      	ldr	r3, [pc, #108]	; (8005bc8 <HAL_RCC_ClockConfig+0x260>)
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	4918      	ldr	r1, [pc, #96]	; (8005bc8 <HAL_RCC_ClockConfig+0x260>)
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f003 0308 	and.w	r3, r3, #8
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d009      	beq.n	8005b8c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005b78:	4b13      	ldr	r3, [pc, #76]	; (8005bc8 <HAL_RCC_ClockConfig+0x260>)
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	691b      	ldr	r3, [r3, #16]
 8005b84:	00db      	lsls	r3, r3, #3
 8005b86:	4910      	ldr	r1, [pc, #64]	; (8005bc8 <HAL_RCC_ClockConfig+0x260>)
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005b8c:	f000 f826 	bl	8005bdc <HAL_RCC_GetSysClockFreq>
 8005b90:	4602      	mov	r2, r0
 8005b92:	4b0d      	ldr	r3, [pc, #52]	; (8005bc8 <HAL_RCC_ClockConfig+0x260>)
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	091b      	lsrs	r3, r3, #4
 8005b98:	f003 030f 	and.w	r3, r3, #15
 8005b9c:	490c      	ldr	r1, [pc, #48]	; (8005bd0 <HAL_RCC_ClockConfig+0x268>)
 8005b9e:	5ccb      	ldrb	r3, [r1, r3]
 8005ba0:	f003 031f 	and.w	r3, r3, #31
 8005ba4:	fa22 f303 	lsr.w	r3, r2, r3
 8005ba8:	4a0a      	ldr	r2, [pc, #40]	; (8005bd4 <HAL_RCC_ClockConfig+0x26c>)
 8005baa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005bac:	4b0a      	ldr	r3, [pc, #40]	; (8005bd8 <HAL_RCC_ClockConfig+0x270>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f7fd fe89 	bl	80038c8 <HAL_InitTick>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	73fb      	strb	r3, [r7, #15]

  return status;
 8005bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3718      	adds	r7, #24
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}
 8005bc4:	40022000 	.word	0x40022000
 8005bc8:	40021000 	.word	0x40021000
 8005bcc:	04c4b400 	.word	0x04c4b400
 8005bd0:	0800e498 	.word	0x0800e498
 8005bd4:	20000008 	.word	0x20000008
 8005bd8:	2000000c 	.word	0x2000000c

08005bdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b089      	sub	sp, #36	; 0x24
 8005be0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005be2:	2300      	movs	r3, #0
 8005be4:	61fb      	str	r3, [r7, #28]
 8005be6:	2300      	movs	r3, #0
 8005be8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005bea:	4b3e      	ldr	r3, [pc, #248]	; (8005ce4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	f003 030c 	and.w	r3, r3, #12
 8005bf2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005bf4:	4b3b      	ldr	r3, [pc, #236]	; (8005ce4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005bf6:	68db      	ldr	r3, [r3, #12]
 8005bf8:	f003 0303 	and.w	r3, r3, #3
 8005bfc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d005      	beq.n	8005c10 <HAL_RCC_GetSysClockFreq+0x34>
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	2b0c      	cmp	r3, #12
 8005c08:	d121      	bne.n	8005c4e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	d11e      	bne.n	8005c4e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005c10:	4b34      	ldr	r3, [pc, #208]	; (8005ce4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f003 0308 	and.w	r3, r3, #8
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d107      	bne.n	8005c2c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005c1c:	4b31      	ldr	r3, [pc, #196]	; (8005ce4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c22:	0a1b      	lsrs	r3, r3, #8
 8005c24:	f003 030f 	and.w	r3, r3, #15
 8005c28:	61fb      	str	r3, [r7, #28]
 8005c2a:	e005      	b.n	8005c38 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005c2c:	4b2d      	ldr	r3, [pc, #180]	; (8005ce4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	091b      	lsrs	r3, r3, #4
 8005c32:	f003 030f 	and.w	r3, r3, #15
 8005c36:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005c38:	4a2b      	ldr	r2, [pc, #172]	; (8005ce8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005c3a:	69fb      	ldr	r3, [r7, #28]
 8005c3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c40:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d10d      	bne.n	8005c64 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005c48:	69fb      	ldr	r3, [r7, #28]
 8005c4a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005c4c:	e00a      	b.n	8005c64 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	2b04      	cmp	r3, #4
 8005c52:	d102      	bne.n	8005c5a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005c54:	4b25      	ldr	r3, [pc, #148]	; (8005cec <HAL_RCC_GetSysClockFreq+0x110>)
 8005c56:	61bb      	str	r3, [r7, #24]
 8005c58:	e004      	b.n	8005c64 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	2b08      	cmp	r3, #8
 8005c5e:	d101      	bne.n	8005c64 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005c60:	4b23      	ldr	r3, [pc, #140]	; (8005cf0 <HAL_RCC_GetSysClockFreq+0x114>)
 8005c62:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	2b0c      	cmp	r3, #12
 8005c68:	d134      	bne.n	8005cd4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005c6a:	4b1e      	ldr	r3, [pc, #120]	; (8005ce4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c6c:	68db      	ldr	r3, [r3, #12]
 8005c6e:	f003 0303 	and.w	r3, r3, #3
 8005c72:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	2b02      	cmp	r3, #2
 8005c78:	d003      	beq.n	8005c82 <HAL_RCC_GetSysClockFreq+0xa6>
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	2b03      	cmp	r3, #3
 8005c7e:	d003      	beq.n	8005c88 <HAL_RCC_GetSysClockFreq+0xac>
 8005c80:	e005      	b.n	8005c8e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005c82:	4b1a      	ldr	r3, [pc, #104]	; (8005cec <HAL_RCC_GetSysClockFreq+0x110>)
 8005c84:	617b      	str	r3, [r7, #20]
      break;
 8005c86:	e005      	b.n	8005c94 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005c88:	4b19      	ldr	r3, [pc, #100]	; (8005cf0 <HAL_RCC_GetSysClockFreq+0x114>)
 8005c8a:	617b      	str	r3, [r7, #20]
      break;
 8005c8c:	e002      	b.n	8005c94 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005c8e:	69fb      	ldr	r3, [r7, #28]
 8005c90:	617b      	str	r3, [r7, #20]
      break;
 8005c92:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005c94:	4b13      	ldr	r3, [pc, #76]	; (8005ce4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c96:	68db      	ldr	r3, [r3, #12]
 8005c98:	091b      	lsrs	r3, r3, #4
 8005c9a:	f003 030f 	and.w	r3, r3, #15
 8005c9e:	3301      	adds	r3, #1
 8005ca0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005ca2:	4b10      	ldr	r3, [pc, #64]	; (8005ce4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ca4:	68db      	ldr	r3, [r3, #12]
 8005ca6:	0a1b      	lsrs	r3, r3, #8
 8005ca8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cac:	697a      	ldr	r2, [r7, #20]
 8005cae:	fb03 f202 	mul.w	r2, r3, r2
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cb8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005cba:	4b0a      	ldr	r3, [pc, #40]	; (8005ce4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005cbc:	68db      	ldr	r3, [r3, #12]
 8005cbe:	0e5b      	lsrs	r3, r3, #25
 8005cc0:	f003 0303 	and.w	r3, r3, #3
 8005cc4:	3301      	adds	r3, #1
 8005cc6:	005b      	lsls	r3, r3, #1
 8005cc8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005cca:	697a      	ldr	r2, [r7, #20]
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cd2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005cd4:	69bb      	ldr	r3, [r7, #24]
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3724      	adds	r7, #36	; 0x24
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr
 8005ce2:	bf00      	nop
 8005ce4:	40021000 	.word	0x40021000
 8005ce8:	0800e4b0 	.word	0x0800e4b0
 8005cec:	00f42400 	.word	0x00f42400
 8005cf0:	007a1200 	.word	0x007a1200

08005cf4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005cf8:	4b03      	ldr	r3, [pc, #12]	; (8005d08 <HAL_RCC_GetHCLKFreq+0x14>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr
 8005d06:	bf00      	nop
 8005d08:	20000008 	.word	0x20000008

08005d0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005d10:	f7ff fff0 	bl	8005cf4 <HAL_RCC_GetHCLKFreq>
 8005d14:	4602      	mov	r2, r0
 8005d16:	4b06      	ldr	r3, [pc, #24]	; (8005d30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	0a1b      	lsrs	r3, r3, #8
 8005d1c:	f003 0307 	and.w	r3, r3, #7
 8005d20:	4904      	ldr	r1, [pc, #16]	; (8005d34 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005d22:	5ccb      	ldrb	r3, [r1, r3]
 8005d24:	f003 031f 	and.w	r3, r3, #31
 8005d28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	bd80      	pop	{r7, pc}
 8005d30:	40021000 	.word	0x40021000
 8005d34:	0800e4a8 	.word	0x0800e4a8

08005d38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005d3c:	f7ff ffda 	bl	8005cf4 <HAL_RCC_GetHCLKFreq>
 8005d40:	4602      	mov	r2, r0
 8005d42:	4b06      	ldr	r3, [pc, #24]	; (8005d5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	0adb      	lsrs	r3, r3, #11
 8005d48:	f003 0307 	and.w	r3, r3, #7
 8005d4c:	4904      	ldr	r1, [pc, #16]	; (8005d60 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005d4e:	5ccb      	ldrb	r3, [r1, r3]
 8005d50:	f003 031f 	and.w	r3, r3, #31
 8005d54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	bd80      	pop	{r7, pc}
 8005d5c:	40021000 	.word	0x40021000
 8005d60:	0800e4a8 	.word	0x0800e4a8

08005d64 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b086      	sub	sp, #24
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005d70:	4b27      	ldr	r3, [pc, #156]	; (8005e10 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005d72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d003      	beq.n	8005d84 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005d7c:	f7ff f906 	bl	8004f8c <HAL_PWREx_GetVoltageRange>
 8005d80:	6178      	str	r0, [r7, #20]
 8005d82:	e014      	b.n	8005dae <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005d84:	4b22      	ldr	r3, [pc, #136]	; (8005e10 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d88:	4a21      	ldr	r2, [pc, #132]	; (8005e10 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005d8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d8e:	6593      	str	r3, [r2, #88]	; 0x58
 8005d90:	4b1f      	ldr	r3, [pc, #124]	; (8005e10 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005d92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d98:	60fb      	str	r3, [r7, #12]
 8005d9a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005d9c:	f7ff f8f6 	bl	8004f8c <HAL_PWREx_GetVoltageRange>
 8005da0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005da2:	4b1b      	ldr	r3, [pc, #108]	; (8005e10 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005da6:	4a1a      	ldr	r2, [pc, #104]	; (8005e10 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005da8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005dac:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005db4:	d10b      	bne.n	8005dce <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2b80      	cmp	r3, #128	; 0x80
 8005dba:	d913      	bls.n	8005de4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2ba0      	cmp	r3, #160	; 0xa0
 8005dc0:	d902      	bls.n	8005dc8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005dc2:	2302      	movs	r3, #2
 8005dc4:	613b      	str	r3, [r7, #16]
 8005dc6:	e00d      	b.n	8005de4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005dc8:	2301      	movs	r3, #1
 8005dca:	613b      	str	r3, [r7, #16]
 8005dcc:	e00a      	b.n	8005de4 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2b7f      	cmp	r3, #127	; 0x7f
 8005dd2:	d902      	bls.n	8005dda <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8005dd4:	2302      	movs	r3, #2
 8005dd6:	613b      	str	r3, [r7, #16]
 8005dd8:	e004      	b.n	8005de4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2b70      	cmp	r3, #112	; 0x70
 8005dde:	d101      	bne.n	8005de4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005de0:	2301      	movs	r3, #1
 8005de2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005de4:	4b0b      	ldr	r3, [pc, #44]	; (8005e14 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f023 020f 	bic.w	r2, r3, #15
 8005dec:	4909      	ldr	r1, [pc, #36]	; (8005e14 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	4313      	orrs	r3, r2
 8005df2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005df4:	4b07      	ldr	r3, [pc, #28]	; (8005e14 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f003 030f 	and.w	r3, r3, #15
 8005dfc:	693a      	ldr	r2, [r7, #16]
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	d001      	beq.n	8005e06 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	e000      	b.n	8005e08 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8005e06:	2300      	movs	r3, #0
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	3718      	adds	r7, #24
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}
 8005e10:	40021000 	.word	0x40021000
 8005e14:	40022000 	.word	0x40022000

08005e18 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b087      	sub	sp, #28
 8005e1c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005e1e:	4b2d      	ldr	r3, [pc, #180]	; (8005ed4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005e20:	68db      	ldr	r3, [r3, #12]
 8005e22:	f003 0303 	and.w	r3, r3, #3
 8005e26:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2b03      	cmp	r3, #3
 8005e2c:	d00b      	beq.n	8005e46 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2b03      	cmp	r3, #3
 8005e32:	d825      	bhi.n	8005e80 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	d008      	beq.n	8005e4c <RCC_GetSysClockFreqFromPLLSource+0x34>
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2b02      	cmp	r3, #2
 8005e3e:	d11f      	bne.n	8005e80 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8005e40:	4b25      	ldr	r3, [pc, #148]	; (8005ed8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005e42:	613b      	str	r3, [r7, #16]
    break;
 8005e44:	e01f      	b.n	8005e86 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8005e46:	4b25      	ldr	r3, [pc, #148]	; (8005edc <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8005e48:	613b      	str	r3, [r7, #16]
    break;
 8005e4a:	e01c      	b.n	8005e86 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005e4c:	4b21      	ldr	r3, [pc, #132]	; (8005ed4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f003 0308 	and.w	r3, r3, #8
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d107      	bne.n	8005e68 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005e58:	4b1e      	ldr	r3, [pc, #120]	; (8005ed4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005e5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e5e:	0a1b      	lsrs	r3, r3, #8
 8005e60:	f003 030f 	and.w	r3, r3, #15
 8005e64:	617b      	str	r3, [r7, #20]
 8005e66:	e005      	b.n	8005e74 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005e68:	4b1a      	ldr	r3, [pc, #104]	; (8005ed4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	091b      	lsrs	r3, r3, #4
 8005e6e:	f003 030f 	and.w	r3, r3, #15
 8005e72:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8005e74:	4a1a      	ldr	r2, [pc, #104]	; (8005ee0 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e7c:	613b      	str	r3, [r7, #16]
    break;
 8005e7e:	e002      	b.n	8005e86 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8005e80:	2300      	movs	r3, #0
 8005e82:	613b      	str	r3, [r7, #16]
    break;
 8005e84:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005e86:	4b13      	ldr	r3, [pc, #76]	; (8005ed4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005e88:	68db      	ldr	r3, [r3, #12]
 8005e8a:	091b      	lsrs	r3, r3, #4
 8005e8c:	f003 030f 	and.w	r3, r3, #15
 8005e90:	3301      	adds	r3, #1
 8005e92:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005e94:	4b0f      	ldr	r3, [pc, #60]	; (8005ed4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005e96:	68db      	ldr	r3, [r3, #12]
 8005e98:	0a1b      	lsrs	r3, r3, #8
 8005e9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e9e:	693a      	ldr	r2, [r7, #16]
 8005ea0:	fb03 f202 	mul.w	r2, r3, r2
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eaa:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005eac:	4b09      	ldr	r3, [pc, #36]	; (8005ed4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	0e5b      	lsrs	r3, r3, #25
 8005eb2:	f003 0303 	and.w	r3, r3, #3
 8005eb6:	3301      	adds	r3, #1
 8005eb8:	005b      	lsls	r3, r3, #1
 8005eba:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005ebc:	693a      	ldr	r2, [r7, #16]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ec4:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8005ec6:	683b      	ldr	r3, [r7, #0]
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	371c      	adds	r7, #28
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr
 8005ed4:	40021000 	.word	0x40021000
 8005ed8:	00f42400 	.word	0x00f42400
 8005edc:	007a1200 	.word	0x007a1200
 8005ee0:	0800e4b0 	.word	0x0800e4b0

08005ee4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b086      	sub	sp, #24
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005eec:	2300      	movs	r3, #0
 8005eee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d040      	beq.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f04:	2b80      	cmp	r3, #128	; 0x80
 8005f06:	d02a      	beq.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005f08:	2b80      	cmp	r3, #128	; 0x80
 8005f0a:	d825      	bhi.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005f0c:	2b60      	cmp	r3, #96	; 0x60
 8005f0e:	d026      	beq.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005f10:	2b60      	cmp	r3, #96	; 0x60
 8005f12:	d821      	bhi.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005f14:	2b40      	cmp	r3, #64	; 0x40
 8005f16:	d006      	beq.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8005f18:	2b40      	cmp	r3, #64	; 0x40
 8005f1a:	d81d      	bhi.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d009      	beq.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8005f20:	2b20      	cmp	r3, #32
 8005f22:	d010      	beq.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005f24:	e018      	b.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005f26:	4b89      	ldr	r3, [pc, #548]	; (800614c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f28:	68db      	ldr	r3, [r3, #12]
 8005f2a:	4a88      	ldr	r2, [pc, #544]	; (800614c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f30:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005f32:	e015      	b.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	3304      	adds	r3, #4
 8005f38:	2100      	movs	r1, #0
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f001 fa34 	bl	80073a8 <RCCEx_PLLSAI1_Config>
 8005f40:	4603      	mov	r3, r0
 8005f42:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005f44:	e00c      	b.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	3320      	adds	r3, #32
 8005f4a:	2100      	movs	r1, #0
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f001 fb1f 	bl	8007590 <RCCEx_PLLSAI2_Config>
 8005f52:	4603      	mov	r3, r0
 8005f54:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005f56:	e003      	b.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	74fb      	strb	r3, [r7, #19]
      break;
 8005f5c:	e000      	b.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8005f5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f60:	7cfb      	ldrb	r3, [r7, #19]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d10b      	bne.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005f66:	4b79      	ldr	r3, [pc, #484]	; (800614c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f68:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005f6c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f74:	4975      	ldr	r1, [pc, #468]	; (800614c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f76:	4313      	orrs	r3, r2
 8005f78:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005f7c:	e001      	b.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f7e:	7cfb      	ldrb	r3, [r7, #19]
 8005f80:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d047      	beq.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f96:	d030      	beq.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005f98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f9c:	d82a      	bhi.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005f9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005fa2:	d02a      	beq.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005fa4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005fa8:	d824      	bhi.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005faa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fae:	d008      	beq.n	8005fc2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005fb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fb4:	d81e      	bhi.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d00a      	beq.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8005fba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fbe:	d010      	beq.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005fc0:	e018      	b.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005fc2:	4b62      	ldr	r3, [pc, #392]	; (800614c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005fc4:	68db      	ldr	r3, [r3, #12]
 8005fc6:	4a61      	ldr	r2, [pc, #388]	; (800614c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005fc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fcc:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005fce:	e015      	b.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	3304      	adds	r3, #4
 8005fd4:	2100      	movs	r1, #0
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f001 f9e6 	bl	80073a8 <RCCEx_PLLSAI1_Config>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005fe0:	e00c      	b.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	3320      	adds	r3, #32
 8005fe6:	2100      	movs	r1, #0
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f001 fad1 	bl	8007590 <RCCEx_PLLSAI2_Config>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005ff2:	e003      	b.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	74fb      	strb	r3, [r7, #19]
      break;
 8005ff8:	e000      	b.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8005ffa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ffc:	7cfb      	ldrb	r3, [r7, #19]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d10b      	bne.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006002:	4b52      	ldr	r3, [pc, #328]	; (800614c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006004:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006008:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006010:	494e      	ldr	r1, [pc, #312]	; (800614c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006012:	4313      	orrs	r3, r2
 8006014:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8006018:	e001      	b.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800601a:	7cfb      	ldrb	r3, [r7, #19]
 800601c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006026:	2b00      	cmp	r3, #0
 8006028:	f000 809f 	beq.w	800616a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800602c:	2300      	movs	r3, #0
 800602e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006030:	4b46      	ldr	r3, [pc, #280]	; (800614c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006034:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006038:	2b00      	cmp	r3, #0
 800603a:	d101      	bne.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800603c:	2301      	movs	r3, #1
 800603e:	e000      	b.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8006040:	2300      	movs	r3, #0
 8006042:	2b00      	cmp	r3, #0
 8006044:	d00d      	beq.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006046:	4b41      	ldr	r3, [pc, #260]	; (800614c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800604a:	4a40      	ldr	r2, [pc, #256]	; (800614c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800604c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006050:	6593      	str	r3, [r2, #88]	; 0x58
 8006052:	4b3e      	ldr	r3, [pc, #248]	; (800614c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800605a:	60bb      	str	r3, [r7, #8]
 800605c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800605e:	2301      	movs	r3, #1
 8006060:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006062:	4b3b      	ldr	r3, [pc, #236]	; (8006150 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a3a      	ldr	r2, [pc, #232]	; (8006150 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006068:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800606c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800606e:	f7fd fc7b 	bl	8003968 <HAL_GetTick>
 8006072:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006074:	e009      	b.n	800608a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006076:	f7fd fc77 	bl	8003968 <HAL_GetTick>
 800607a:	4602      	mov	r2, r0
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	1ad3      	subs	r3, r2, r3
 8006080:	2b02      	cmp	r3, #2
 8006082:	d902      	bls.n	800608a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8006084:	2303      	movs	r3, #3
 8006086:	74fb      	strb	r3, [r7, #19]
        break;
 8006088:	e005      	b.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800608a:	4b31      	ldr	r3, [pc, #196]	; (8006150 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006092:	2b00      	cmp	r3, #0
 8006094:	d0ef      	beq.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8006096:	7cfb      	ldrb	r3, [r7, #19]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d15b      	bne.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800609c:	4b2b      	ldr	r3, [pc, #172]	; (800614c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800609e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060a6:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d01f      	beq.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060b4:	697a      	ldr	r2, [r7, #20]
 80060b6:	429a      	cmp	r2, r3
 80060b8:	d019      	beq.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80060ba:	4b24      	ldr	r3, [pc, #144]	; (800614c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80060bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060c4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80060c6:	4b21      	ldr	r3, [pc, #132]	; (800614c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80060c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060cc:	4a1f      	ldr	r2, [pc, #124]	; (800614c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80060ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80060d6:	4b1d      	ldr	r3, [pc, #116]	; (800614c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80060d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060dc:	4a1b      	ldr	r2, [pc, #108]	; (800614c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80060de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80060e6:	4a19      	ldr	r2, [pc, #100]	; (800614c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	f003 0301 	and.w	r3, r3, #1
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d016      	beq.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060f8:	f7fd fc36 	bl	8003968 <HAL_GetTick>
 80060fc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80060fe:	e00b      	b.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006100:	f7fd fc32 	bl	8003968 <HAL_GetTick>
 8006104:	4602      	mov	r2, r0
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	1ad3      	subs	r3, r2, r3
 800610a:	f241 3288 	movw	r2, #5000	; 0x1388
 800610e:	4293      	cmp	r3, r2
 8006110:	d902      	bls.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8006112:	2303      	movs	r3, #3
 8006114:	74fb      	strb	r3, [r7, #19]
            break;
 8006116:	e006      	b.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006118:	4b0c      	ldr	r3, [pc, #48]	; (800614c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800611a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800611e:	f003 0302 	and.w	r3, r3, #2
 8006122:	2b00      	cmp	r3, #0
 8006124:	d0ec      	beq.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8006126:	7cfb      	ldrb	r3, [r7, #19]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d10c      	bne.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800612c:	4b07      	ldr	r3, [pc, #28]	; (800614c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800612e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006132:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800613c:	4903      	ldr	r1, [pc, #12]	; (800614c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800613e:	4313      	orrs	r3, r2
 8006140:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006144:	e008      	b.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006146:	7cfb      	ldrb	r3, [r7, #19]
 8006148:	74bb      	strb	r3, [r7, #18]
 800614a:	e005      	b.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800614c:	40021000 	.word	0x40021000
 8006150:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006154:	7cfb      	ldrb	r3, [r7, #19]
 8006156:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006158:	7c7b      	ldrb	r3, [r7, #17]
 800615a:	2b01      	cmp	r3, #1
 800615c:	d105      	bne.n	800616a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800615e:	4ba0      	ldr	r3, [pc, #640]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006162:	4a9f      	ldr	r2, [pc, #636]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006164:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006168:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f003 0301 	and.w	r3, r3, #1
 8006172:	2b00      	cmp	r3, #0
 8006174:	d00a      	beq.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006176:	4b9a      	ldr	r3, [pc, #616]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006178:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800617c:	f023 0203 	bic.w	r2, r3, #3
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006184:	4996      	ldr	r1, [pc, #600]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006186:	4313      	orrs	r3, r2
 8006188:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f003 0302 	and.w	r3, r3, #2
 8006194:	2b00      	cmp	r3, #0
 8006196:	d00a      	beq.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006198:	4b91      	ldr	r3, [pc, #580]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800619a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800619e:	f023 020c 	bic.w	r2, r3, #12
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a6:	498e      	ldr	r1, [pc, #568]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061a8:	4313      	orrs	r3, r2
 80061aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f003 0304 	and.w	r3, r3, #4
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d00a      	beq.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80061ba:	4b89      	ldr	r3, [pc, #548]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061c0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061c8:	4985      	ldr	r1, [pc, #532]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061ca:	4313      	orrs	r3, r2
 80061cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f003 0308 	and.w	r3, r3, #8
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d00a      	beq.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80061dc:	4b80      	ldr	r3, [pc, #512]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061e2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061ea:	497d      	ldr	r1, [pc, #500]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061ec:	4313      	orrs	r3, r2
 80061ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f003 0310 	and.w	r3, r3, #16
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d00a      	beq.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80061fe:	4b78      	ldr	r3, [pc, #480]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006200:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006204:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800620c:	4974      	ldr	r1, [pc, #464]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800620e:	4313      	orrs	r3, r2
 8006210:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f003 0320 	and.w	r3, r3, #32
 800621c:	2b00      	cmp	r3, #0
 800621e:	d00a      	beq.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006220:	4b6f      	ldr	r3, [pc, #444]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006226:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800622e:	496c      	ldr	r1, [pc, #432]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006230:	4313      	orrs	r3, r2
 8006232:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800623e:	2b00      	cmp	r3, #0
 8006240:	d00a      	beq.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006242:	4b67      	ldr	r3, [pc, #412]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006244:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006248:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006250:	4963      	ldr	r1, [pc, #396]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006252:	4313      	orrs	r3, r2
 8006254:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006260:	2b00      	cmp	r3, #0
 8006262:	d00a      	beq.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006264:	4b5e      	ldr	r3, [pc, #376]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006266:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800626a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006272:	495b      	ldr	r1, [pc, #364]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006274:	4313      	orrs	r3, r2
 8006276:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006282:	2b00      	cmp	r3, #0
 8006284:	d00a      	beq.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006286:	4b56      	ldr	r3, [pc, #344]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006288:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800628c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006294:	4952      	ldr	r1, [pc, #328]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006296:	4313      	orrs	r3, r2
 8006298:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d00a      	beq.n	80062be <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80062a8:	4b4d      	ldr	r3, [pc, #308]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062ae:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062b6:	494a      	ldr	r1, [pc, #296]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062b8:	4313      	orrs	r3, r2
 80062ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d00a      	beq.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80062ca:	4b45      	ldr	r3, [pc, #276]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062d8:	4941      	ldr	r1, [pc, #260]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062da:	4313      	orrs	r3, r2
 80062dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d00a      	beq.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80062ec:	4b3c      	ldr	r3, [pc, #240]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80062f2:	f023 0203 	bic.w	r2, r3, #3
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062fa:	4939      	ldr	r1, [pc, #228]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062fc:	4313      	orrs	r3, r2
 80062fe:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800630a:	2b00      	cmp	r3, #0
 800630c:	d028      	beq.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800630e:	4b34      	ldr	r3, [pc, #208]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006310:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006314:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800631c:	4930      	ldr	r1, [pc, #192]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800631e:	4313      	orrs	r3, r2
 8006320:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006328:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800632c:	d106      	bne.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800632e:	4b2c      	ldr	r3, [pc, #176]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006330:	68db      	ldr	r3, [r3, #12]
 8006332:	4a2b      	ldr	r2, [pc, #172]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006334:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006338:	60d3      	str	r3, [r2, #12]
 800633a:	e011      	b.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006340:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006344:	d10c      	bne.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	3304      	adds	r3, #4
 800634a:	2101      	movs	r1, #1
 800634c:	4618      	mov	r0, r3
 800634e:	f001 f82b 	bl	80073a8 <RCCEx_PLLSAI1_Config>
 8006352:	4603      	mov	r3, r0
 8006354:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006356:	7cfb      	ldrb	r3, [r7, #19]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d001      	beq.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800635c:	7cfb      	ldrb	r3, [r7, #19]
 800635e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006368:	2b00      	cmp	r3, #0
 800636a:	d04d      	beq.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006370:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006374:	d108      	bne.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8006376:	4b1a      	ldr	r3, [pc, #104]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006378:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800637c:	4a18      	ldr	r2, [pc, #96]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800637e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006382:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8006386:	e012      	b.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8006388:	4b15      	ldr	r3, [pc, #84]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800638a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800638e:	4a14      	ldr	r2, [pc, #80]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006390:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006394:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8006398:	4b11      	ldr	r3, [pc, #68]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800639a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800639e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80063a6:	490e      	ldr	r1, [pc, #56]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063a8:	4313      	orrs	r3, r2
 80063aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80063b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80063b6:	d106      	bne.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80063b8:	4b09      	ldr	r3, [pc, #36]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063ba:	68db      	ldr	r3, [r3, #12]
 80063bc:	4a08      	ldr	r2, [pc, #32]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80063c2:	60d3      	str	r3, [r2, #12]
 80063c4:	e020      	b.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80063ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80063ce:	d109      	bne.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80063d0:	4b03      	ldr	r3, [pc, #12]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063d2:	68db      	ldr	r3, [r3, #12]
 80063d4:	4a02      	ldr	r2, [pc, #8]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063da:	60d3      	str	r3, [r2, #12]
 80063dc:	e014      	b.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80063de:	bf00      	nop
 80063e0:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80063e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80063ec:	d10c      	bne.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	3304      	adds	r3, #4
 80063f2:	2101      	movs	r1, #1
 80063f4:	4618      	mov	r0, r3
 80063f6:	f000 ffd7 	bl	80073a8 <RCCEx_PLLSAI1_Config>
 80063fa:	4603      	mov	r3, r0
 80063fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80063fe:	7cfb      	ldrb	r3, [r7, #19]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d001      	beq.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8006404:	7cfb      	ldrb	r3, [r7, #19]
 8006406:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006410:	2b00      	cmp	r3, #0
 8006412:	d028      	beq.n	8006466 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006414:	4b4a      	ldr	r3, [pc, #296]	; (8006540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800641a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006422:	4947      	ldr	r1, [pc, #284]	; (8006540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006424:	4313      	orrs	r3, r2
 8006426:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800642e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006432:	d106      	bne.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006434:	4b42      	ldr	r3, [pc, #264]	; (8006540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006436:	68db      	ldr	r3, [r3, #12]
 8006438:	4a41      	ldr	r2, [pc, #260]	; (8006540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800643a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800643e:	60d3      	str	r3, [r2, #12]
 8006440:	e011      	b.n	8006466 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006446:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800644a:	d10c      	bne.n	8006466 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	3304      	adds	r3, #4
 8006450:	2101      	movs	r1, #1
 8006452:	4618      	mov	r0, r3
 8006454:	f000 ffa8 	bl	80073a8 <RCCEx_PLLSAI1_Config>
 8006458:	4603      	mov	r3, r0
 800645a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800645c:	7cfb      	ldrb	r3, [r7, #19]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d001      	beq.n	8006466 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8006462:	7cfb      	ldrb	r3, [r7, #19]
 8006464:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800646e:	2b00      	cmp	r3, #0
 8006470:	d01e      	beq.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006472:	4b33      	ldr	r3, [pc, #204]	; (8006540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006474:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006478:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006482:	492f      	ldr	r1, [pc, #188]	; (8006540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006484:	4313      	orrs	r3, r2
 8006486:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006490:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006494:	d10c      	bne.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	3304      	adds	r3, #4
 800649a:	2102      	movs	r1, #2
 800649c:	4618      	mov	r0, r3
 800649e:	f000 ff83 	bl	80073a8 <RCCEx_PLLSAI1_Config>
 80064a2:	4603      	mov	r3, r0
 80064a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80064a6:	7cfb      	ldrb	r3, [r7, #19]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d001      	beq.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80064ac:	7cfb      	ldrb	r3, [r7, #19]
 80064ae:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d00b      	beq.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80064bc:	4b20      	ldr	r3, [pc, #128]	; (8006540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80064be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80064c2:	f023 0204 	bic.w	r2, r3, #4
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064cc:	491c      	ldr	r1, [pc, #112]	; (8006540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80064ce:	4313      	orrs	r3, r2
 80064d0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d00b      	beq.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80064e0:	4b17      	ldr	r3, [pc, #92]	; (8006540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80064e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80064e6:	f023 0218 	bic.w	r2, r3, #24
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064f0:	4913      	ldr	r1, [pc, #76]	; (8006540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80064f2:	4313      	orrs	r3, r2
 80064f4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006500:	2b00      	cmp	r3, #0
 8006502:	d017      	beq.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006504:	4b0e      	ldr	r3, [pc, #56]	; (8006540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006506:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800650a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006514:	490a      	ldr	r1, [pc, #40]	; (8006540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006516:	4313      	orrs	r3, r2
 8006518:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006522:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006526:	d105      	bne.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006528:	4b05      	ldr	r3, [pc, #20]	; (8006540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800652a:	68db      	ldr	r3, [r3, #12]
 800652c:	4a04      	ldr	r2, [pc, #16]	; (8006540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800652e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006532:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006534:	7cbb      	ldrb	r3, [r7, #18]
}
 8006536:	4618      	mov	r0, r3
 8006538:	3718      	adds	r7, #24
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}
 800653e:	bf00      	nop
 8006540:	40021000 	.word	0x40021000

08006544 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b088      	sub	sp, #32
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 800654c:	2300      	movs	r3, #0
 800654e:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006556:	d13e      	bne.n	80065d6 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8006558:	4bb6      	ldr	r3, [pc, #728]	; (8006834 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800655a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800655e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006562:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800656a:	d028      	beq.n	80065be <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006572:	f200 86f4 	bhi.w	800735e <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800657c:	d005      	beq.n	800658a <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006584:	d00e      	beq.n	80065a4 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8006586:	f000 beea 	b.w	800735e <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800658a:	4baa      	ldr	r3, [pc, #680]	; (8006834 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800658c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006590:	f003 0302 	and.w	r3, r3, #2
 8006594:	2b02      	cmp	r3, #2
 8006596:	f040 86e4 	bne.w	8007362 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        frequency = LSE_VALUE;
 800659a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800659e:	61fb      	str	r3, [r7, #28]
      break;
 80065a0:	f000 bedf 	b.w	8007362 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80065a4:	4ba3      	ldr	r3, [pc, #652]	; (8006834 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80065a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80065aa:	f003 0302 	and.w	r3, r3, #2
 80065ae:	2b02      	cmp	r3, #2
 80065b0:	f040 86d9 	bne.w	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
          frequency = LSI_VALUE;
 80065b4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80065b8:	61fb      	str	r3, [r7, #28]
      break;
 80065ba:	f000 bed4 	b.w	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80065be:	4b9d      	ldr	r3, [pc, #628]	; (8006834 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80065ca:	f040 86ce 	bne.w	800736a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
        frequency = HSE_VALUE / 32U;
 80065ce:	4b9a      	ldr	r3, [pc, #616]	; (8006838 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80065d0:	61fb      	str	r3, [r7, #28]
      break;
 80065d2:	f000 beca 	b.w	800736a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80065d6:	4b97      	ldr	r3, [pc, #604]	; (8006834 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80065d8:	68db      	ldr	r3, [r3, #12]
 80065da:	f003 0303 	and.w	r3, r3, #3
 80065de:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	2b03      	cmp	r3, #3
 80065e4:	d036      	beq.n	8006654 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	2b03      	cmp	r3, #3
 80065ea:	d840      	bhi.n	800666e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	2b01      	cmp	r3, #1
 80065f0:	d003      	beq.n	80065fa <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	2b02      	cmp	r3, #2
 80065f6:	d020      	beq.n	800663a <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 80065f8:	e039      	b.n	800666e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80065fa:	4b8e      	ldr	r3, [pc, #568]	; (8006834 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f003 0302 	and.w	r3, r3, #2
 8006602:	2b02      	cmp	r3, #2
 8006604:	d116      	bne.n	8006634 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006606:	4b8b      	ldr	r3, [pc, #556]	; (8006834 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f003 0308 	and.w	r3, r3, #8
 800660e:	2b00      	cmp	r3, #0
 8006610:	d005      	beq.n	800661e <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8006612:	4b88      	ldr	r3, [pc, #544]	; (8006834 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	091b      	lsrs	r3, r3, #4
 8006618:	f003 030f 	and.w	r3, r3, #15
 800661c:	e005      	b.n	800662a <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 800661e:	4b85      	ldr	r3, [pc, #532]	; (8006834 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006620:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006624:	0a1b      	lsrs	r3, r3, #8
 8006626:	f003 030f 	and.w	r3, r3, #15
 800662a:	4a84      	ldr	r2, [pc, #528]	; (800683c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800662c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006630:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8006632:	e01f      	b.n	8006674 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8006634:	2300      	movs	r3, #0
 8006636:	61bb      	str	r3, [r7, #24]
      break;
 8006638:	e01c      	b.n	8006674 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800663a:	4b7e      	ldr	r3, [pc, #504]	; (8006834 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006642:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006646:	d102      	bne.n	800664e <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8006648:	4b7d      	ldr	r3, [pc, #500]	; (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800664a:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800664c:	e012      	b.n	8006674 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800664e:	2300      	movs	r3, #0
 8006650:	61bb      	str	r3, [r7, #24]
      break;
 8006652:	e00f      	b.n	8006674 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006654:	4b77      	ldr	r3, [pc, #476]	; (8006834 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800665c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006660:	d102      	bne.n	8006668 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8006662:	4b78      	ldr	r3, [pc, #480]	; (8006844 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8006664:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8006666:	e005      	b.n	8006674 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8006668:	2300      	movs	r3, #0
 800666a:	61bb      	str	r3, [r7, #24]
      break;
 800666c:	e002      	b.n	8006674 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 800666e:	2300      	movs	r3, #0
 8006670:	61bb      	str	r3, [r7, #24]
      break;
 8006672:	bf00      	nop
    }

    switch(PeriphClk)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800667a:	f000 8606 	beq.w	800728a <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006684:	f200 8673 	bhi.w	800736e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800668e:	f000 8469 	beq.w	8006f64 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006698:	f200 8669 	bhi.w	800736e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066a2:	f000 8531 	beq.w	8007108 <HAL_RCCEx_GetPeriphCLKFreq+0xbc4>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066ac:	f200 865f 	bhi.w	800736e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80066b6:	f000 8187 	beq.w	80069c8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80066c0:	f200 8655 	bhi.w	800736e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80066ca:	f000 80cd 	beq.w	8006868 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80066d4:	f200 864b 	bhi.w	800736e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066de:	f000 8430 	beq.w	8006f42 <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066e8:	f200 8641 	bhi.w	800736e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80066f2:	f000 83e4 	beq.w	8006ebe <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80066fc:	f200 8637 	bhi.w	800736e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006706:	f000 80af 	beq.w	8006868 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006710:	f200 862d 	bhi.w	800736e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800671a:	f000 809d 	beq.w	8006858 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006724:	f200 8623 	bhi.w	800736e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800672e:	f000 808b 	beq.w	8006848 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006738:	f200 8619 	bhi.w	800736e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006742:	f000 8554 	beq.w	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800674c:	f200 860f 	bhi.w	800736e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006756:	f000 8500 	beq.w	800715a <HAL_RCCEx_GetPeriphCLKFreq+0xc16>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006760:	f200 8605 	bhi.w	800736e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800676a:	f000 84a1 	beq.w	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006774:	f200 85fb 	bhi.w	800736e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2b80      	cmp	r3, #128	; 0x80
 800677c:	f000 846c 	beq.w	8007058 <HAL_RCCEx_GetPeriphCLKFreq+0xb14>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2b80      	cmp	r3, #128	; 0x80
 8006784:	f200 85f3 	bhi.w	800736e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2b20      	cmp	r3, #32
 800678c:	d84c      	bhi.n	8006828 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2b00      	cmp	r3, #0
 8006792:	f000 85ec 	beq.w	800736e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	3b01      	subs	r3, #1
 800679a:	2b1f      	cmp	r3, #31
 800679c:	f200 85e7 	bhi.w	800736e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80067a0:	a201      	add	r2, pc, #4	; (adr r2, 80067a8 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 80067a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067a6:	bf00      	nop
 80067a8:	08006bbd 	.word	0x08006bbd
 80067ac:	08006c2b 	.word	0x08006c2b
 80067b0:	0800736f 	.word	0x0800736f
 80067b4:	08006cbf 	.word	0x08006cbf
 80067b8:	0800736f 	.word	0x0800736f
 80067bc:	0800736f 	.word	0x0800736f
 80067c0:	0800736f 	.word	0x0800736f
 80067c4:	08006d37 	.word	0x08006d37
 80067c8:	0800736f 	.word	0x0800736f
 80067cc:	0800736f 	.word	0x0800736f
 80067d0:	0800736f 	.word	0x0800736f
 80067d4:	0800736f 	.word	0x0800736f
 80067d8:	0800736f 	.word	0x0800736f
 80067dc:	0800736f 	.word	0x0800736f
 80067e0:	0800736f 	.word	0x0800736f
 80067e4:	08006dbb 	.word	0x08006dbb
 80067e8:	0800736f 	.word	0x0800736f
 80067ec:	0800736f 	.word	0x0800736f
 80067f0:	0800736f 	.word	0x0800736f
 80067f4:	0800736f 	.word	0x0800736f
 80067f8:	0800736f 	.word	0x0800736f
 80067fc:	0800736f 	.word	0x0800736f
 8006800:	0800736f 	.word	0x0800736f
 8006804:	0800736f 	.word	0x0800736f
 8006808:	0800736f 	.word	0x0800736f
 800680c:	0800736f 	.word	0x0800736f
 8006810:	0800736f 	.word	0x0800736f
 8006814:	0800736f 	.word	0x0800736f
 8006818:	0800736f 	.word	0x0800736f
 800681c:	0800736f 	.word	0x0800736f
 8006820:	0800736f 	.word	0x0800736f
 8006824:	08006e3d 	.word	0x08006e3d
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2b40      	cmp	r3, #64	; 0x40
 800682c:	f000 83e8 	beq.w	8007000 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8006830:	f000 bd9d 	b.w	800736e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006834:	40021000 	.word	0x40021000
 8006838:	0003d090 	.word	0x0003d090
 800683c:	0800e4b0 	.word	0x0800e4b0
 8006840:	00f42400 	.word	0x00f42400
 8006844:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8006848:	69b9      	ldr	r1, [r7, #24]
 800684a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800684e:	f000 ff93 	bl	8007778 <RCCEx_GetSAIxPeriphCLKFreq>
 8006852:	61f8      	str	r0, [r7, #28]
      break;
 8006854:	f000 bd8e 	b.w	8007374 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8006858:	69b9      	ldr	r1, [r7, #24]
 800685a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800685e:	f000 ff8b 	bl	8007778 <RCCEx_GetSAIxPeriphCLKFreq>
 8006862:	61f8      	str	r0, [r7, #28]
      break;
 8006864:	f000 bd86 	b.w	8007374 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8006868:	4b9a      	ldr	r3, [pc, #616]	; (8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800686a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800686e:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8006872:	60fb      	str	r3, [r7, #12]
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800687a:	d015      	beq.n	80068a8 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006882:	f200 8092 	bhi.w	80069aa <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800688c:	d029      	beq.n	80068e2 <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006894:	f200 8089 	bhi.w	80069aa <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d07b      	beq.n	8006996 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80068a4:	d04a      	beq.n	800693c <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
          break;
 80068a6:	e080      	b.n	80069aa <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80068a8:	4b8a      	ldr	r3, [pc, #552]	; (8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f003 0302 	and.w	r3, r3, #2
 80068b0:	2b02      	cmp	r3, #2
 80068b2:	d17d      	bne.n	80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80068b4:	4b87      	ldr	r3, [pc, #540]	; (8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f003 0308 	and.w	r3, r3, #8
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d005      	beq.n	80068cc <HAL_RCCEx_GetPeriphCLKFreq+0x388>
 80068c0:	4b84      	ldr	r3, [pc, #528]	; (8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	091b      	lsrs	r3, r3, #4
 80068c6:	f003 030f 	and.w	r3, r3, #15
 80068ca:	e005      	b.n	80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 80068cc:	4b81      	ldr	r3, [pc, #516]	; (8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80068ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80068d2:	0a1b      	lsrs	r3, r3, #8
 80068d4:	f003 030f 	and.w	r3, r3, #15
 80068d8:	4a7f      	ldr	r2, [pc, #508]	; (8006ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80068da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068de:	61fb      	str	r3, [r7, #28]
          break;
 80068e0:	e066      	b.n	80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80068e2:	4b7c      	ldr	r3, [pc, #496]	; (8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80068ee:	d162      	bne.n	80069b6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80068f0:	4b78      	ldr	r3, [pc, #480]	; (8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80068f2:	68db      	ldr	r3, [r3, #12]
 80068f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80068f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80068fc:	d15b      	bne.n	80069b6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80068fe:	4b75      	ldr	r3, [pc, #468]	; (8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006900:	68db      	ldr	r3, [r3, #12]
 8006902:	0a1b      	lsrs	r3, r3, #8
 8006904:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006908:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800690a:	69bb      	ldr	r3, [r7, #24]
 800690c:	68ba      	ldr	r2, [r7, #8]
 800690e:	fb03 f202 	mul.w	r2, r3, r2
 8006912:	4b70      	ldr	r3, [pc, #448]	; (8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006914:	68db      	ldr	r3, [r3, #12]
 8006916:	091b      	lsrs	r3, r3, #4
 8006918:	f003 030f 	and.w	r3, r3, #15
 800691c:	3301      	adds	r3, #1
 800691e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006922:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8006924:	4b6b      	ldr	r3, [pc, #428]	; (8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006926:	68db      	ldr	r3, [r3, #12]
 8006928:	0d5b      	lsrs	r3, r3, #21
 800692a:	f003 0303 	and.w	r3, r3, #3
 800692e:	3301      	adds	r3, #1
 8006930:	005b      	lsls	r3, r3, #1
 8006932:	69ba      	ldr	r2, [r7, #24]
 8006934:	fbb2 f3f3 	udiv	r3, r2, r3
 8006938:	61fb      	str	r3, [r7, #28]
          break;
 800693a:	e03c      	b.n	80069b6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800693c:	4b65      	ldr	r3, [pc, #404]	; (8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006944:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006948:	d138      	bne.n	80069bc <HAL_RCCEx_GetPeriphCLKFreq+0x478>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800694a:	4b62      	ldr	r3, [pc, #392]	; (8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800694c:	691b      	ldr	r3, [r3, #16]
 800694e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006952:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006956:	d131      	bne.n	80069bc <HAL_RCCEx_GetPeriphCLKFreq+0x478>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006958:	4b5e      	ldr	r3, [pc, #376]	; (8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800695a:	691b      	ldr	r3, [r3, #16]
 800695c:	0a1b      	lsrs	r3, r3, #8
 800695e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006962:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8006964:	69bb      	ldr	r3, [r7, #24]
 8006966:	68ba      	ldr	r2, [r7, #8]
 8006968:	fb03 f202 	mul.w	r2, r3, r2
 800696c:	4b59      	ldr	r3, [pc, #356]	; (8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800696e:	691b      	ldr	r3, [r3, #16]
 8006970:	091b      	lsrs	r3, r3, #4
 8006972:	f003 030f 	and.w	r3, r3, #15
 8006976:	3301      	adds	r3, #1
 8006978:	fbb2 f3f3 	udiv	r3, r2, r3
 800697c:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800697e:	4b55      	ldr	r3, [pc, #340]	; (8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006980:	691b      	ldr	r3, [r3, #16]
 8006982:	0d5b      	lsrs	r3, r3, #21
 8006984:	f003 0303 	and.w	r3, r3, #3
 8006988:	3301      	adds	r3, #1
 800698a:	005b      	lsls	r3, r3, #1
 800698c:	69ba      	ldr	r2, [r7, #24]
 800698e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006992:	61fb      	str	r3, [r7, #28]
          break;
 8006994:	e012      	b.n	80069bc <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8006996:	4b4f      	ldr	r3, [pc, #316]	; (8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006998:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800699c:	f003 0302 	and.w	r3, r3, #2
 80069a0:	2b02      	cmp	r3, #2
 80069a2:	d10e      	bne.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = HSI48_VALUE;
 80069a4:	4b4d      	ldr	r3, [pc, #308]	; (8006adc <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80069a6:	61fb      	str	r3, [r7, #28]
          break;
 80069a8:	e00b      	b.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 80069aa:	bf00      	nop
 80069ac:	f000 bce2 	b.w	8007374 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80069b0:	bf00      	nop
 80069b2:	f000 bcdf 	b.w	8007374 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80069b6:	bf00      	nop
 80069b8:	f000 bcdc 	b.w	8007374 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80069bc:	bf00      	nop
 80069be:	f000 bcd9 	b.w	8007374 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80069c2:	bf00      	nop
        break;
 80069c4:	f000 bcd6 	b.w	8007374 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 80069c8:	4b42      	ldr	r3, [pc, #264]	; (8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80069ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80069ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80069d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80069d6:	d13d      	bne.n	8006a54 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80069d8:	4b3e      	ldr	r3, [pc, #248]	; (8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80069e4:	f040 84c5 	bne.w	8007372 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 80069e8:	4b3a      	ldr	r3, [pc, #232]	; (8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80069ea:	68db      	ldr	r3, [r3, #12]
 80069ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80069f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069f4:	f040 84bd 	bne.w	8007372 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80069f8:	4b36      	ldr	r3, [pc, #216]	; (8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80069fa:	68db      	ldr	r3, [r3, #12]
 80069fc:	0a1b      	lsrs	r3, r3, #8
 80069fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a02:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006a04:	69bb      	ldr	r3, [r7, #24]
 8006a06:	68ba      	ldr	r2, [r7, #8]
 8006a08:	fb03 f202 	mul.w	r2, r3, r2
 8006a0c:	4b31      	ldr	r3, [pc, #196]	; (8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006a0e:	68db      	ldr	r3, [r3, #12]
 8006a10:	091b      	lsrs	r3, r3, #4
 8006a12:	f003 030f 	and.w	r3, r3, #15
 8006a16:	3301      	adds	r3, #1
 8006a18:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a1c:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8006a1e:	4b2d      	ldr	r3, [pc, #180]	; (8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006a20:	68db      	ldr	r3, [r3, #12]
 8006a22:	0edb      	lsrs	r3, r3, #27
 8006a24:	f003 031f 	and.w	r3, r3, #31
 8006a28:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d10a      	bne.n	8006a46 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8006a30:	4b28      	ldr	r3, [pc, #160]	; (8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006a32:	68db      	ldr	r3, [r3, #12]
 8006a34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d002      	beq.n	8006a42 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 17U;
 8006a3c:	2311      	movs	r3, #17
 8006a3e:	617b      	str	r3, [r7, #20]
 8006a40:	e001      	b.n	8006a46 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
                pllp = 7U;
 8006a42:	2307      	movs	r3, #7
 8006a44:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 8006a46:	69ba      	ldr	r2, [r7, #24]
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a4e:	61fb      	str	r3, [r7, #28]
      break;
 8006a50:	f000 bc8f 	b.w	8007372 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8006a54:	4b1f      	ldr	r3, [pc, #124]	; (8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a5a:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8006a5e:	60fb      	str	r3, [r7, #12]
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006a66:	d016      	beq.n	8006a96 <HAL_RCCEx_GetPeriphCLKFreq+0x552>
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006a6e:	f200 809b 	bhi.w	8006ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a78:	d032      	beq.n	8006ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a80:	f200 8092 	bhi.w	8006ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	f000 8084 	beq.w	8006b94 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006a92:	d052      	beq.n	8006b3a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          break;
 8006a94:	e088      	b.n	8006ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006a96:	4b0f      	ldr	r3, [pc, #60]	; (8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f003 0302 	and.w	r3, r3, #2
 8006a9e:	2b02      	cmp	r3, #2
 8006aa0:	f040 8084 	bne.w	8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006aa4:	4b0b      	ldr	r3, [pc, #44]	; (8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f003 0308 	and.w	r3, r3, #8
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d005      	beq.n	8006abc <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8006ab0:	4b08      	ldr	r3, [pc, #32]	; (8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	091b      	lsrs	r3, r3, #4
 8006ab6:	f003 030f 	and.w	r3, r3, #15
 8006aba:	e005      	b.n	8006ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
 8006abc:	4b05      	ldr	r3, [pc, #20]	; (8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006abe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ac2:	0a1b      	lsrs	r3, r3, #8
 8006ac4:	f003 030f 	and.w	r3, r3, #15
 8006ac8:	4a03      	ldr	r2, [pc, #12]	; (8006ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8006aca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ace:	61fb      	str	r3, [r7, #28]
          break;
 8006ad0:	e06c      	b.n	8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 8006ad2:	bf00      	nop
 8006ad4:	40021000 	.word	0x40021000
 8006ad8:	0800e4b0 	.word	0x0800e4b0
 8006adc:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8006ae0:	4ba5      	ldr	r3, [pc, #660]	; (8006d78 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ae8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006aec:	d160      	bne.n	8006bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8006aee:	4ba2      	ldr	r3, [pc, #648]	; (8006d78 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006af0:	68db      	ldr	r3, [r3, #12]
 8006af2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006af6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006afa:	d159      	bne.n	8006bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006afc:	4b9e      	ldr	r3, [pc, #632]	; (8006d78 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006afe:	68db      	ldr	r3, [r3, #12]
 8006b00:	0a1b      	lsrs	r3, r3, #8
 8006b02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b06:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006b08:	69bb      	ldr	r3, [r7, #24]
 8006b0a:	68ba      	ldr	r2, [r7, #8]
 8006b0c:	fb03 f202 	mul.w	r2, r3, r2
 8006b10:	4b99      	ldr	r3, [pc, #612]	; (8006d78 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006b12:	68db      	ldr	r3, [r3, #12]
 8006b14:	091b      	lsrs	r3, r3, #4
 8006b16:	f003 030f 	and.w	r3, r3, #15
 8006b1a:	3301      	adds	r3, #1
 8006b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b20:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8006b22:	4b95      	ldr	r3, [pc, #596]	; (8006d78 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006b24:	68db      	ldr	r3, [r3, #12]
 8006b26:	0d5b      	lsrs	r3, r3, #21
 8006b28:	f003 0303 	and.w	r3, r3, #3
 8006b2c:	3301      	adds	r3, #1
 8006b2e:	005b      	lsls	r3, r3, #1
 8006b30:	69ba      	ldr	r2, [r7, #24]
 8006b32:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b36:	61fb      	str	r3, [r7, #28]
          break;
 8006b38:	e03a      	b.n	8006bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8006b3a:	4b8f      	ldr	r3, [pc, #572]	; (8006d78 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b46:	d135      	bne.n	8006bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8006b48:	4b8b      	ldr	r3, [pc, #556]	; (8006d78 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006b4a:	691b      	ldr	r3, [r3, #16]
 8006b4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b54:	d12e      	bne.n	8006bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006b56:	4b88      	ldr	r3, [pc, #544]	; (8006d78 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006b58:	691b      	ldr	r3, [r3, #16]
 8006b5a:	0a1b      	lsrs	r3, r3, #8
 8006b5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b60:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8006b62:	69bb      	ldr	r3, [r7, #24]
 8006b64:	68ba      	ldr	r2, [r7, #8]
 8006b66:	fb03 f202 	mul.w	r2, r3, r2
 8006b6a:	4b83      	ldr	r3, [pc, #524]	; (8006d78 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006b6c:	691b      	ldr	r3, [r3, #16]
 8006b6e:	091b      	lsrs	r3, r3, #4
 8006b70:	f003 030f 	and.w	r3, r3, #15
 8006b74:	3301      	adds	r3, #1
 8006b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b7a:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8006b7c:	4b7e      	ldr	r3, [pc, #504]	; (8006d78 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006b7e:	691b      	ldr	r3, [r3, #16]
 8006b80:	0d5b      	lsrs	r3, r3, #21
 8006b82:	f003 0303 	and.w	r3, r3, #3
 8006b86:	3301      	adds	r3, #1
 8006b88:	005b      	lsls	r3, r3, #1
 8006b8a:	69ba      	ldr	r2, [r7, #24]
 8006b8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b90:	61fb      	str	r3, [r7, #28]
          break;
 8006b92:	e00f      	b.n	8006bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8006b94:	4b78      	ldr	r3, [pc, #480]	; (8006d78 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006b96:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006b9a:	f003 0302 	and.w	r3, r3, #2
 8006b9e:	2b02      	cmp	r3, #2
 8006ba0:	d10a      	bne.n	8006bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            frequency = HSI48_VALUE;
 8006ba2:	4b76      	ldr	r3, [pc, #472]	; (8006d7c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006ba4:	61fb      	str	r3, [r7, #28]
          break;
 8006ba6:	e007      	b.n	8006bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          break;
 8006ba8:	bf00      	nop
 8006baa:	e3e2      	b.n	8007372 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006bac:	bf00      	nop
 8006bae:	e3e0      	b.n	8007372 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006bb0:	bf00      	nop
 8006bb2:	e3de      	b.n	8007372 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006bb4:	bf00      	nop
 8006bb6:	e3dc      	b.n	8007372 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006bb8:	bf00      	nop
      break;
 8006bba:	e3da      	b.n	8007372 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006bbc:	4b6e      	ldr	r3, [pc, #440]	; (8006d78 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bc2:	f003 0303 	and.w	r3, r3, #3
 8006bc6:	60fb      	str	r3, [r7, #12]
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	2b03      	cmp	r3, #3
 8006bcc:	d827      	bhi.n	8006c1e <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8006bce:	a201      	add	r2, pc, #4	; (adr r2, 8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x690>)
 8006bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bd4:	08006be5 	.word	0x08006be5
 8006bd8:	08006bed 	.word	0x08006bed
 8006bdc:	08006bf5 	.word	0x08006bf5
 8006be0:	08006c09 	.word	0x08006c09
          frequency = HAL_RCC_GetPCLK2Freq();
 8006be4:	f7ff f8a8 	bl	8005d38 <HAL_RCC_GetPCLK2Freq>
 8006be8:	61f8      	str	r0, [r7, #28]
          break;
 8006bea:	e01d      	b.n	8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          frequency = HAL_RCC_GetSysClockFreq();
 8006bec:	f7fe fff6 	bl	8005bdc <HAL_RCC_GetSysClockFreq>
 8006bf0:	61f8      	str	r0, [r7, #28]
          break;
 8006bf2:	e019      	b.n	8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006bf4:	4b60      	ldr	r3, [pc, #384]	; (8006d78 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c00:	d10f      	bne.n	8006c22 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = HSI_VALUE;
 8006c02:	4b5f      	ldr	r3, [pc, #380]	; (8006d80 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006c04:	61fb      	str	r3, [r7, #28]
          break;
 8006c06:	e00c      	b.n	8006c22 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006c08:	4b5b      	ldr	r3, [pc, #364]	; (8006d78 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c0e:	f003 0302 	and.w	r3, r3, #2
 8006c12:	2b02      	cmp	r3, #2
 8006c14:	d107      	bne.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
            frequency = LSE_VALUE;
 8006c16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c1a:	61fb      	str	r3, [r7, #28]
          break;
 8006c1c:	e003      	b.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
          break;
 8006c1e:	bf00      	nop
 8006c20:	e3a8      	b.n	8007374 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006c22:	bf00      	nop
 8006c24:	e3a6      	b.n	8007374 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006c26:	bf00      	nop
        break;
 8006c28:	e3a4      	b.n	8007374 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8006c2a:	4b53      	ldr	r3, [pc, #332]	; (8006d78 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c30:	f003 030c 	and.w	r3, r3, #12
 8006c34:	60fb      	str	r3, [r7, #12]
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2b0c      	cmp	r3, #12
 8006c3a:	d83a      	bhi.n	8006cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8006c3c:	a201      	add	r2, pc, #4	; (adr r2, 8006c44 <HAL_RCCEx_GetPeriphCLKFreq+0x700>)
 8006c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c42:	bf00      	nop
 8006c44:	08006c79 	.word	0x08006c79
 8006c48:	08006cb3 	.word	0x08006cb3
 8006c4c:	08006cb3 	.word	0x08006cb3
 8006c50:	08006cb3 	.word	0x08006cb3
 8006c54:	08006c81 	.word	0x08006c81
 8006c58:	08006cb3 	.word	0x08006cb3
 8006c5c:	08006cb3 	.word	0x08006cb3
 8006c60:	08006cb3 	.word	0x08006cb3
 8006c64:	08006c89 	.word	0x08006c89
 8006c68:	08006cb3 	.word	0x08006cb3
 8006c6c:	08006cb3 	.word	0x08006cb3
 8006c70:	08006cb3 	.word	0x08006cb3
 8006c74:	08006c9d 	.word	0x08006c9d
          frequency = HAL_RCC_GetPCLK1Freq();
 8006c78:	f7ff f848 	bl	8005d0c <HAL_RCC_GetPCLK1Freq>
 8006c7c:	61f8      	str	r0, [r7, #28]
          break;
 8006c7e:	e01d      	b.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = HAL_RCC_GetSysClockFreq();
 8006c80:	f7fe ffac 	bl	8005bdc <HAL_RCC_GetSysClockFreq>
 8006c84:	61f8      	str	r0, [r7, #28]
          break;
 8006c86:	e019      	b.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006c88:	4b3b      	ldr	r3, [pc, #236]	; (8006d78 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c94:	d10f      	bne.n	8006cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = HSI_VALUE;
 8006c96:	4b3a      	ldr	r3, [pc, #232]	; (8006d80 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006c98:	61fb      	str	r3, [r7, #28]
          break;
 8006c9a:	e00c      	b.n	8006cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006c9c:	4b36      	ldr	r3, [pc, #216]	; (8006d78 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ca2:	f003 0302 	and.w	r3, r3, #2
 8006ca6:	2b02      	cmp	r3, #2
 8006ca8:	d107      	bne.n	8006cba <HAL_RCCEx_GetPeriphCLKFreq+0x776>
            frequency = LSE_VALUE;
 8006caa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cae:	61fb      	str	r3, [r7, #28]
          break;
 8006cb0:	e003      	b.n	8006cba <HAL_RCCEx_GetPeriphCLKFreq+0x776>
          break;
 8006cb2:	bf00      	nop
 8006cb4:	e35e      	b.n	8007374 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006cb6:	bf00      	nop
 8006cb8:	e35c      	b.n	8007374 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006cba:	bf00      	nop
        break;
 8006cbc:	e35a      	b.n	8007374 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006cbe:	4b2e      	ldr	r3, [pc, #184]	; (8006d78 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cc4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006cc8:	60fb      	str	r3, [r7, #12]
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2b30      	cmp	r3, #48	; 0x30
 8006cce:	d021      	beq.n	8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	2b30      	cmp	r3, #48	; 0x30
 8006cd4:	d829      	bhi.n	8006d2a <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2b20      	cmp	r3, #32
 8006cda:	d011      	beq.n	8006d00 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2b20      	cmp	r3, #32
 8006ce0:	d823      	bhi.n	8006d2a <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d003      	beq.n	8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	2b10      	cmp	r3, #16
 8006cec:	d004      	beq.n	8006cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
          break;
 8006cee:	e01c      	b.n	8006d2a <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006cf0:	f7ff f80c 	bl	8005d0c <HAL_RCC_GetPCLK1Freq>
 8006cf4:	61f8      	str	r0, [r7, #28]
          break;
 8006cf6:	e01d      	b.n	8006d34 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          frequency = HAL_RCC_GetSysClockFreq();
 8006cf8:	f7fe ff70 	bl	8005bdc <HAL_RCC_GetSysClockFreq>
 8006cfc:	61f8      	str	r0, [r7, #28]
          break;
 8006cfe:	e019      	b.n	8006d34 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006d00:	4b1d      	ldr	r3, [pc, #116]	; (8006d78 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d0c:	d10f      	bne.n	8006d2e <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = HSI_VALUE;
 8006d0e:	4b1c      	ldr	r3, [pc, #112]	; (8006d80 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006d10:	61fb      	str	r3, [r7, #28]
          break;
 8006d12:	e00c      	b.n	8006d2e <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006d14:	4b18      	ldr	r3, [pc, #96]	; (8006d78 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d1a:	f003 0302 	and.w	r3, r3, #2
 8006d1e:	2b02      	cmp	r3, #2
 8006d20:	d107      	bne.n	8006d32 <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
            frequency = LSE_VALUE;
 8006d22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d26:	61fb      	str	r3, [r7, #28]
          break;
 8006d28:	e003      	b.n	8006d32 <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
          break;
 8006d2a:	bf00      	nop
 8006d2c:	e322      	b.n	8007374 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006d2e:	bf00      	nop
 8006d30:	e320      	b.n	8007374 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006d32:	bf00      	nop
        break;
 8006d34:	e31e      	b.n	8007374 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8006d36:	4b10      	ldr	r3, [pc, #64]	; (8006d78 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d3c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006d40:	60fb      	str	r3, [r7, #12]
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	2bc0      	cmp	r3, #192	; 0xc0
 8006d46:	d027      	beq.n	8006d98 <HAL_RCCEx_GetPeriphCLKFreq+0x854>
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2bc0      	cmp	r3, #192	; 0xc0
 8006d4c:	d82f      	bhi.n	8006dae <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2b80      	cmp	r3, #128	; 0x80
 8006d52:	d017      	beq.n	8006d84 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2b80      	cmp	r3, #128	; 0x80
 8006d58:	d829      	bhi.n	8006dae <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d003      	beq.n	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x824>
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	2b40      	cmp	r3, #64	; 0x40
 8006d64:	d004      	beq.n	8006d70 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
          break;
 8006d66:	e022      	b.n	8006dae <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006d68:	f7fe ffd0 	bl	8005d0c <HAL_RCC_GetPCLK1Freq>
 8006d6c:	61f8      	str	r0, [r7, #28]
          break;
 8006d6e:	e023      	b.n	8006db8 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
          frequency = HAL_RCC_GetSysClockFreq();
 8006d70:	f7fe ff34 	bl	8005bdc <HAL_RCC_GetSysClockFreq>
 8006d74:	61f8      	str	r0, [r7, #28]
          break;
 8006d76:	e01f      	b.n	8006db8 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
 8006d78:	40021000 	.word	0x40021000
 8006d7c:	02dc6c00 	.word	0x02dc6c00
 8006d80:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006d84:	4b9b      	ldr	r3, [pc, #620]	; (8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d90:	d10f      	bne.n	8006db2 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = HSI_VALUE;
 8006d92:	4b99      	ldr	r3, [pc, #612]	; (8006ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8006d94:	61fb      	str	r3, [r7, #28]
          break;
 8006d96:	e00c      	b.n	8006db2 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006d98:	4b96      	ldr	r3, [pc, #600]	; (8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d9e:	f003 0302 	and.w	r3, r3, #2
 8006da2:	2b02      	cmp	r3, #2
 8006da4:	d107      	bne.n	8006db6 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
            frequency = LSE_VALUE;
 8006da6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006daa:	61fb      	str	r3, [r7, #28]
          break;
 8006dac:	e003      	b.n	8006db6 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
          break;
 8006dae:	bf00      	nop
 8006db0:	e2e0      	b.n	8007374 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006db2:	bf00      	nop
 8006db4:	e2de      	b.n	8007374 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006db6:	bf00      	nop
        break;
 8006db8:	e2dc      	b.n	8007374 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8006dba:	4b8e      	ldr	r3, [pc, #568]	; (8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006dbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006dc4:	60fb      	str	r3, [r7, #12]
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006dcc:	d025      	beq.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006dd4:	d82c      	bhi.n	8006e30 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ddc:	d013      	beq.n	8006e06 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006de4:	d824      	bhi.n	8006e30 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d004      	beq.n	8006df6 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006df2:	d004      	beq.n	8006dfe <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 8006df4:	e01c      	b.n	8006e30 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006df6:	f7fe ff89 	bl	8005d0c <HAL_RCC_GetPCLK1Freq>
 8006dfa:	61f8      	str	r0, [r7, #28]
          break;
 8006dfc:	e01d      	b.n	8006e3a <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = HAL_RCC_GetSysClockFreq();
 8006dfe:	f7fe feed 	bl	8005bdc <HAL_RCC_GetSysClockFreq>
 8006e02:	61f8      	str	r0, [r7, #28]
          break;
 8006e04:	e019      	b.n	8006e3a <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006e06:	4b7b      	ldr	r3, [pc, #492]	; (8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e12:	d10f      	bne.n	8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = HSI_VALUE;
 8006e14:	4b78      	ldr	r3, [pc, #480]	; (8006ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8006e16:	61fb      	str	r3, [r7, #28]
          break;
 8006e18:	e00c      	b.n	8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006e1a:	4b76      	ldr	r3, [pc, #472]	; (8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e20:	f003 0302 	and.w	r3, r3, #2
 8006e24:	2b02      	cmp	r3, #2
 8006e26:	d107      	bne.n	8006e38 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
            frequency = LSE_VALUE;
 8006e28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e2c:	61fb      	str	r3, [r7, #28]
          break;
 8006e2e:	e003      	b.n	8006e38 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
          break;
 8006e30:	bf00      	nop
 8006e32:	e29f      	b.n	8007374 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006e34:	bf00      	nop
 8006e36:	e29d      	b.n	8007374 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006e38:	bf00      	nop
        break;
 8006e3a:	e29b      	b.n	8007374 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006e3c:	4b6d      	ldr	r3, [pc, #436]	; (8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e42:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006e46:	60fb      	str	r3, [r7, #12]
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e4e:	d025      	beq.n	8006e9c <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e56:	d82c      	bhi.n	8006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e5e:	d013      	beq.n	8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e66:	d824      	bhi.n	8006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d004      	beq.n	8006e78 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e74:	d004      	beq.n	8006e80 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
          break;
 8006e76:	e01c      	b.n	8006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006e78:	f7fe ff48 	bl	8005d0c <HAL_RCC_GetPCLK1Freq>
 8006e7c:	61f8      	str	r0, [r7, #28]
          break;
 8006e7e:	e01d      	b.n	8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = HAL_RCC_GetSysClockFreq();
 8006e80:	f7fe feac 	bl	8005bdc <HAL_RCC_GetSysClockFreq>
 8006e84:	61f8      	str	r0, [r7, #28]
          break;
 8006e86:	e019      	b.n	8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006e88:	4b5a      	ldr	r3, [pc, #360]	; (8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e94:	d10f      	bne.n	8006eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = HSI_VALUE;
 8006e96:	4b58      	ldr	r3, [pc, #352]	; (8006ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8006e98:	61fb      	str	r3, [r7, #28]
          break;
 8006e9a:	e00c      	b.n	8006eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006e9c:	4b55      	ldr	r3, [pc, #340]	; (8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ea2:	f003 0302 	and.w	r3, r3, #2
 8006ea6:	2b02      	cmp	r3, #2
 8006ea8:	d107      	bne.n	8006eba <HAL_RCCEx_GetPeriphCLKFreq+0x976>
            frequency = LSE_VALUE;
 8006eaa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006eae:	61fb      	str	r3, [r7, #28]
          break;
 8006eb0:	e003      	b.n	8006eba <HAL_RCCEx_GetPeriphCLKFreq+0x976>
          break;
 8006eb2:	bf00      	nop
 8006eb4:	e25e      	b.n	8007374 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006eb6:	bf00      	nop
 8006eb8:	e25c      	b.n	8007374 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006eba:	bf00      	nop
        break;
 8006ebc:	e25a      	b.n	8007374 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006ebe:	4b4d      	ldr	r3, [pc, #308]	; (8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ec4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006ec8:	60fb      	str	r3, [r7, #12]
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ed0:	d007      	beq.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006ed8:	d12f      	bne.n	8006f3a <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          frequency = HAL_RCC_GetSysClockFreq();
 8006eda:	f7fe fe7f 	bl	8005bdc <HAL_RCC_GetSysClockFreq>
 8006ede:	61f8      	str	r0, [r7, #28]
          break;
 8006ee0:	e02e      	b.n	8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8006ee2:	4b44      	ldr	r3, [pc, #272]	; (8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006eea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006eee:	d126      	bne.n	8006f3e <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 8006ef0:	4b40      	ldr	r3, [pc, #256]	; (8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006ef2:	691b      	ldr	r3, [r3, #16]
 8006ef4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d020      	beq.n	8006f3e <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006efc:	4b3d      	ldr	r3, [pc, #244]	; (8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006efe:	691b      	ldr	r3, [r3, #16]
 8006f00:	0a1b      	lsrs	r3, r3, #8
 8006f02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f06:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8006f08:	69bb      	ldr	r3, [r7, #24]
 8006f0a:	68ba      	ldr	r2, [r7, #8]
 8006f0c:	fb03 f202 	mul.w	r2, r3, r2
 8006f10:	4b38      	ldr	r3, [pc, #224]	; (8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006f12:	691b      	ldr	r3, [r3, #16]
 8006f14:	091b      	lsrs	r3, r3, #4
 8006f16:	f003 030f 	and.w	r3, r3, #15
 8006f1a:	3301      	adds	r3, #1
 8006f1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f20:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8006f22:	4b34      	ldr	r3, [pc, #208]	; (8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006f24:	691b      	ldr	r3, [r3, #16]
 8006f26:	0e5b      	lsrs	r3, r3, #25
 8006f28:	f003 0303 	and.w	r3, r3, #3
 8006f2c:	3301      	adds	r3, #1
 8006f2e:	005b      	lsls	r3, r3, #1
 8006f30:	69ba      	ldr	r2, [r7, #24]
 8006f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f36:	61fb      	str	r3, [r7, #28]
          break;
 8006f38:	e001      	b.n	8006f3e <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
          break;
 8006f3a:	bf00      	nop
 8006f3c:	e21a      	b.n	8007374 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006f3e:	bf00      	nop
        break;
 8006f40:	e218      	b.n	8007374 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8006f42:	4b2c      	ldr	r3, [pc, #176]	; (8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006f44:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006f48:	f003 0304 	and.w	r3, r3, #4
 8006f4c:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d103      	bne.n	8006f5c <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetPCLK2Freq();
 8006f54:	f7fe fef0 	bl	8005d38 <HAL_RCC_GetPCLK2Freq>
 8006f58:	61f8      	str	r0, [r7, #28]
        break;
 8006f5a:	e20b      	b.n	8007374 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          frequency = HAL_RCC_GetSysClockFreq();
 8006f5c:	f7fe fe3e 	bl	8005bdc <HAL_RCC_GetSysClockFreq>
 8006f60:	61f8      	str	r0, [r7, #28]
        break;
 8006f62:	e207      	b.n	8007374 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 8006f64:	4b23      	ldr	r3, [pc, #140]	; (8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006f66:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006f6a:	f003 0318 	and.w	r3, r3, #24
 8006f6e:	60fb      	str	r3, [r7, #12]
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	2b10      	cmp	r3, #16
 8006f74:	d010      	beq.n	8006f98 <HAL_RCCEx_GetPeriphCLKFreq+0xa54>
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2b10      	cmp	r3, #16
 8006f7a:	d834      	bhi.n	8006fe6 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d003      	beq.n	8006f8a <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2b08      	cmp	r3, #8
 8006f86:	d024      	beq.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
          break;
 8006f88:	e02d      	b.n	8006fe6 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8006f8a:	69b9      	ldr	r1, [r7, #24]
 8006f8c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006f90:	f000 fbf2 	bl	8007778 <RCCEx_GetSAIxPeriphCLKFreq>
 8006f94:	61f8      	str	r0, [r7, #28]
          break;
 8006f96:	e02b      	b.n	8006ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006f98:	4b16      	ldr	r3, [pc, #88]	; (8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f003 0302 	and.w	r3, r3, #2
 8006fa0:	2b02      	cmp	r3, #2
 8006fa2:	d122      	bne.n	8006fea <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006fa4:	4b13      	ldr	r3, [pc, #76]	; (8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f003 0308 	and.w	r3, r3, #8
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d005      	beq.n	8006fbc <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 8006fb0:	4b10      	ldr	r3, [pc, #64]	; (8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	091b      	lsrs	r3, r3, #4
 8006fb6:	f003 030f 	and.w	r3, r3, #15
 8006fba:	e005      	b.n	8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
 8006fbc:	4b0d      	ldr	r3, [pc, #52]	; (8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006fbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006fc2:	0a1b      	lsrs	r3, r3, #8
 8006fc4:	f003 030f 	and.w	r3, r3, #15
 8006fc8:	4a0c      	ldr	r2, [pc, #48]	; (8006ffc <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006fca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fce:	61fb      	str	r3, [r7, #28]
          break;
 8006fd0:	e00b      	b.n	8006fea <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006fd2:	4b08      	ldr	r3, [pc, #32]	; (8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fde:	d106      	bne.n	8006fee <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
            frequency = HSI_VALUE;
 8006fe0:	4b05      	ldr	r3, [pc, #20]	; (8006ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8006fe2:	61fb      	str	r3, [r7, #28]
          break;
 8006fe4:	e003      	b.n	8006fee <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
          break;
 8006fe6:	bf00      	nop
 8006fe8:	e1c4      	b.n	8007374 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006fea:	bf00      	nop
 8006fec:	e1c2      	b.n	8007374 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006fee:	bf00      	nop
        break;
 8006ff0:	e1c0      	b.n	8007374 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 8006ff2:	bf00      	nop
 8006ff4:	40021000 	.word	0x40021000
 8006ff8:	00f42400 	.word	0x00f42400
 8006ffc:	0800e4b0 	.word	0x0800e4b0
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8007000:	4b96      	ldr	r3, [pc, #600]	; (800725c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007002:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007006:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800700a:	60fb      	str	r3, [r7, #12]
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007012:	d013      	beq.n	800703c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800701a:	d819      	bhi.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d004      	beq.n	800702c <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007028:	d004      	beq.n	8007034 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>
          break;
 800702a:	e011      	b.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          frequency = HAL_RCC_GetPCLK1Freq();
 800702c:	f7fe fe6e 	bl	8005d0c <HAL_RCC_GetPCLK1Freq>
 8007030:	61f8      	str	r0, [r7, #28]
          break;
 8007032:	e010      	b.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          frequency = HAL_RCC_GetSysClockFreq();
 8007034:	f7fe fdd2 	bl	8005bdc <HAL_RCC_GetSysClockFreq>
 8007038:	61f8      	str	r0, [r7, #28]
          break;
 800703a:	e00c      	b.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800703c:	4b87      	ldr	r3, [pc, #540]	; (800725c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007044:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007048:	d104      	bne.n	8007054 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
            frequency = HSI_VALUE;
 800704a:	4b85      	ldr	r3, [pc, #532]	; (8007260 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800704c:	61fb      	str	r3, [r7, #28]
          break;
 800704e:	e001      	b.n	8007054 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
          break;
 8007050:	bf00      	nop
 8007052:	e18f      	b.n	8007374 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007054:	bf00      	nop
        break;
 8007056:	e18d      	b.n	8007374 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8007058:	4b80      	ldr	r3, [pc, #512]	; (800725c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800705a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800705e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007062:	60fb      	str	r3, [r7, #12]
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800706a:	d013      	beq.n	8007094 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007072:	d819      	bhi.n	80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d004      	beq.n	8007084 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007080:	d004      	beq.n	800708c <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          break;
 8007082:	e011      	b.n	80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007084:	f7fe fe42 	bl	8005d0c <HAL_RCC_GetPCLK1Freq>
 8007088:	61f8      	str	r0, [r7, #28]
          break;
 800708a:	e010      	b.n	80070ae <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = HAL_RCC_GetSysClockFreq();
 800708c:	f7fe fda6 	bl	8005bdc <HAL_RCC_GetSysClockFreq>
 8007090:	61f8      	str	r0, [r7, #28]
          break;
 8007092:	e00c      	b.n	80070ae <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007094:	4b71      	ldr	r3, [pc, #452]	; (800725c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800709c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070a0:	d104      	bne.n	80070ac <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
            frequency = HSI_VALUE;
 80070a2:	4b6f      	ldr	r3, [pc, #444]	; (8007260 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 80070a4:	61fb      	str	r3, [r7, #28]
          break;
 80070a6:	e001      	b.n	80070ac <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          break;
 80070a8:	bf00      	nop
 80070aa:	e163      	b.n	8007374 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80070ac:	bf00      	nop
        break;
 80070ae:	e161      	b.n	8007374 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80070b0:	4b6a      	ldr	r3, [pc, #424]	; (800725c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80070b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070b6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80070ba:	60fb      	str	r3, [r7, #12]
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80070c2:	d013      	beq.n	80070ec <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80070ca:	d819      	bhi.n	8007100 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d004      	beq.n	80070dc <HAL_RCCEx_GetPeriphCLKFreq+0xb98>
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070d8:	d004      	beq.n	80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0xba0>
          break;
 80070da:	e011      	b.n	8007100 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          frequency = HAL_RCC_GetPCLK1Freq();
 80070dc:	f7fe fe16 	bl	8005d0c <HAL_RCC_GetPCLK1Freq>
 80070e0:	61f8      	str	r0, [r7, #28]
          break;
 80070e2:	e010      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          frequency = HAL_RCC_GetSysClockFreq();
 80070e4:	f7fe fd7a 	bl	8005bdc <HAL_RCC_GetSysClockFreq>
 80070e8:	61f8      	str	r0, [r7, #28]
          break;
 80070ea:	e00c      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80070ec:	4b5b      	ldr	r3, [pc, #364]	; (800725c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070f8:	d104      	bne.n	8007104 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
            frequency = HSI_VALUE;
 80070fa:	4b59      	ldr	r3, [pc, #356]	; (8007260 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 80070fc:	61fb      	str	r3, [r7, #28]
          break;
 80070fe:	e001      	b.n	8007104 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
          break;
 8007100:	bf00      	nop
 8007102:	e137      	b.n	8007374 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007104:	bf00      	nop
        break;
 8007106:	e135      	b.n	8007374 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8007108:	4b54      	ldr	r3, [pc, #336]	; (800725c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800710a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800710e:	f003 0303 	and.w	r3, r3, #3
 8007112:	60fb      	str	r3, [r7, #12]
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	2b02      	cmp	r3, #2
 8007118:	d011      	beq.n	800713e <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	2b02      	cmp	r3, #2
 800711e:	d818      	bhi.n	8007152 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d003      	beq.n	800712e <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	2b01      	cmp	r3, #1
 800712a:	d004      	beq.n	8007136 <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
          break;
 800712c:	e011      	b.n	8007152 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          frequency = HAL_RCC_GetPCLK1Freq();
 800712e:	f7fe fded 	bl	8005d0c <HAL_RCC_GetPCLK1Freq>
 8007132:	61f8      	str	r0, [r7, #28]
          break;
 8007134:	e010      	b.n	8007158 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          frequency = HAL_RCC_GetSysClockFreq();
 8007136:	f7fe fd51 	bl	8005bdc <HAL_RCC_GetSysClockFreq>
 800713a:	61f8      	str	r0, [r7, #28]
          break;
 800713c:	e00c      	b.n	8007158 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800713e:	4b47      	ldr	r3, [pc, #284]	; (800725c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007146:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800714a:	d104      	bne.n	8007156 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
            frequency = HSI_VALUE;
 800714c:	4b44      	ldr	r3, [pc, #272]	; (8007260 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800714e:	61fb      	str	r3, [r7, #28]
          break;
 8007150:	e001      	b.n	8007156 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
          break;
 8007152:	bf00      	nop
 8007154:	e10e      	b.n	8007374 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007156:	bf00      	nop
        break;
 8007158:	e10c      	b.n	8007374 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800715a:	4b40      	ldr	r3, [pc, #256]	; (800725c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800715c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007160:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8007164:	60fb      	str	r3, [r7, #12]
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800716c:	d02c      	beq.n	80071c8 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007174:	d833      	bhi.n	80071de <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800717c:	d01a      	beq.n	80071b4 <HAL_RCCEx_GetPeriphCLKFreq+0xc70>
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007184:	d82b      	bhi.n	80071de <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d004      	beq.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007192:	d004      	beq.n	800719e <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
          break;
 8007194:	e023      	b.n	80071de <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007196:	f7fe fdb9 	bl	8005d0c <HAL_RCC_GetPCLK1Freq>
 800719a:	61f8      	str	r0, [r7, #28]
          break;
 800719c:	e026      	b.n	80071ec <HAL_RCCEx_GetPeriphCLKFreq+0xca8>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800719e:	4b2f      	ldr	r3, [pc, #188]	; (800725c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80071a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80071a4:	f003 0302 	and.w	r3, r3, #2
 80071a8:	2b02      	cmp	r3, #2
 80071aa:	d11a      	bne.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
              frequency = LSI_VALUE;
 80071ac:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80071b0:	61fb      	str	r3, [r7, #28]
          break;
 80071b2:	e016      	b.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80071b4:	4b29      	ldr	r3, [pc, #164]	; (800725c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071c0:	d111      	bne.n	80071e6 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = HSI_VALUE;
 80071c2:	4b27      	ldr	r3, [pc, #156]	; (8007260 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 80071c4:	61fb      	str	r3, [r7, #28]
          break;
 80071c6:	e00e      	b.n	80071e6 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80071c8:	4b24      	ldr	r3, [pc, #144]	; (800725c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80071ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071ce:	f003 0302 	and.w	r3, r3, #2
 80071d2:	2b02      	cmp	r3, #2
 80071d4:	d109      	bne.n	80071ea <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
            frequency = LSE_VALUE;
 80071d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071da:	61fb      	str	r3, [r7, #28]
          break;
 80071dc:	e005      	b.n	80071ea <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
          break;
 80071de:	bf00      	nop
 80071e0:	e0c8      	b.n	8007374 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80071e2:	bf00      	nop
 80071e4:	e0c6      	b.n	8007374 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80071e6:	bf00      	nop
 80071e8:	e0c4      	b.n	8007374 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80071ea:	bf00      	nop
        break;
 80071ec:	e0c2      	b.n	8007374 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80071ee:	4b1b      	ldr	r3, [pc, #108]	; (800725c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80071f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071f4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80071f8:	60fb      	str	r3, [r7, #12]
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007200:	d030      	beq.n	8007264 <HAL_RCCEx_GetPeriphCLKFreq+0xd20>
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007208:	d837      	bhi.n	800727a <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007210:	d01a      	beq.n	8007248 <HAL_RCCEx_GetPeriphCLKFreq+0xd04>
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007218:	d82f      	bhi.n	800727a <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d004      	beq.n	800722a <HAL_RCCEx_GetPeriphCLKFreq+0xce6>
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007226:	d004      	beq.n	8007232 <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
          break;
 8007228:	e027      	b.n	800727a <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          frequency = HAL_RCC_GetPCLK1Freq();
 800722a:	f7fe fd6f 	bl	8005d0c <HAL_RCC_GetPCLK1Freq>
 800722e:	61f8      	str	r0, [r7, #28]
          break;
 8007230:	e02a      	b.n	8007288 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8007232:	4b0a      	ldr	r3, [pc, #40]	; (800725c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007234:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007238:	f003 0302 	and.w	r3, r3, #2
 800723c:	2b02      	cmp	r3, #2
 800723e:	d11e      	bne.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
              frequency = LSI_VALUE;
 8007240:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007244:	61fb      	str	r3, [r7, #28]
          break;
 8007246:	e01a      	b.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007248:	4b04      	ldr	r3, [pc, #16]	; (800725c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007250:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007254:	d115      	bne.n	8007282 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = HSI_VALUE;
 8007256:	4b02      	ldr	r3, [pc, #8]	; (8007260 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8007258:	61fb      	str	r3, [r7, #28]
          break;
 800725a:	e012      	b.n	8007282 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 800725c:	40021000 	.word	0x40021000
 8007260:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007264:	4b46      	ldr	r3, [pc, #280]	; (8007380 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8007266:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800726a:	f003 0302 	and.w	r3, r3, #2
 800726e:	2b02      	cmp	r3, #2
 8007270:	d109      	bne.n	8007286 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
            frequency = LSE_VALUE;
 8007272:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007276:	61fb      	str	r3, [r7, #28]
          break;
 8007278:	e005      	b.n	8007286 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
          break;
 800727a:	bf00      	nop
 800727c:	e07a      	b.n	8007374 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800727e:	bf00      	nop
 8007280:	e078      	b.n	8007374 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007282:	bf00      	nop
 8007284:	e076      	b.n	8007374 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007286:	bf00      	nop
        break;
 8007288:	e074      	b.n	8007374 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800728a:	4b3d      	ldr	r3, [pc, #244]	; (8007380 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800728c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007290:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007294:	60fb      	str	r3, [r7, #12]
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800729c:	d02c      	beq.n	80072f8 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80072a4:	d855      	bhi.n	8007352 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d004      	beq.n	80072b6 <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80072b2:	d004      	beq.n	80072be <HAL_RCCEx_GetPeriphCLKFreq+0xd7a>
          break;
 80072b4:	e04d      	b.n	8007352 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          frequency = HAL_RCC_GetSysClockFreq();
 80072b6:	f7fe fc91 	bl	8005bdc <HAL_RCC_GetSysClockFreq>
 80072ba:	61f8      	str	r0, [r7, #28]
          break;
 80072bc:	e04e      	b.n	800735c <HAL_RCCEx_GetPeriphCLKFreq+0xe18>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80072be:	4b30      	ldr	r3, [pc, #192]	; (8007380 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f003 0302 	and.w	r3, r3, #2
 80072c6:	2b02      	cmp	r3, #2
 80072c8:	d145      	bne.n	8007356 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80072ca:	4b2d      	ldr	r3, [pc, #180]	; (8007380 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f003 0308 	and.w	r3, r3, #8
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d005      	beq.n	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 80072d6:	4b2a      	ldr	r3, [pc, #168]	; (8007380 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	091b      	lsrs	r3, r3, #4
 80072dc:	f003 030f 	and.w	r3, r3, #15
 80072e0:	e005      	b.n	80072ee <HAL_RCCEx_GetPeriphCLKFreq+0xdaa>
 80072e2:	4b27      	ldr	r3, [pc, #156]	; (8007380 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80072e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80072e8:	0a1b      	lsrs	r3, r3, #8
 80072ea:	f003 030f 	and.w	r3, r3, #15
 80072ee:	4a25      	ldr	r2, [pc, #148]	; (8007384 <HAL_RCCEx_GetPeriphCLKFreq+0xe40>)
 80072f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072f4:	61fb      	str	r3, [r7, #28]
          break;
 80072f6:	e02e      	b.n	8007356 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80072f8:	4b21      	ldr	r3, [pc, #132]	; (8007380 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007300:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007304:	d129      	bne.n	800735a <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8007306:	4b1e      	ldr	r3, [pc, #120]	; (8007380 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8007308:	68db      	ldr	r3, [r3, #12]
 800730a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800730e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007312:	d122      	bne.n	800735a <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8007314:	4b1a      	ldr	r3, [pc, #104]	; (8007380 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8007316:	68db      	ldr	r3, [r3, #12]
 8007318:	0a1b      	lsrs	r3, r3, #8
 800731a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800731e:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007320:	69bb      	ldr	r3, [r7, #24]
 8007322:	68ba      	ldr	r2, [r7, #8]
 8007324:	fb03 f202 	mul.w	r2, r3, r2
 8007328:	4b15      	ldr	r3, [pc, #84]	; (8007380 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800732a:	68db      	ldr	r3, [r3, #12]
 800732c:	091b      	lsrs	r3, r3, #4
 800732e:	f003 030f 	and.w	r3, r3, #15
 8007332:	3301      	adds	r3, #1
 8007334:	fbb2 f3f3 	udiv	r3, r2, r3
 8007338:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800733a:	4b11      	ldr	r3, [pc, #68]	; (8007380 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800733c:	68db      	ldr	r3, [r3, #12]
 800733e:	0d5b      	lsrs	r3, r3, #21
 8007340:	f003 0303 	and.w	r3, r3, #3
 8007344:	3301      	adds	r3, #1
 8007346:	005b      	lsls	r3, r3, #1
 8007348:	69ba      	ldr	r2, [r7, #24]
 800734a:	fbb2 f3f3 	udiv	r3, r2, r3
 800734e:	61fb      	str	r3, [r7, #28]
          break;
 8007350:	e003      	b.n	800735a <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          break;
 8007352:	bf00      	nop
 8007354:	e00e      	b.n	8007374 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007356:	bf00      	nop
 8007358:	e00c      	b.n	8007374 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800735a:	bf00      	nop
        break;
 800735c:	e00a      	b.n	8007374 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800735e:	bf00      	nop
 8007360:	e008      	b.n	8007374 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8007362:	bf00      	nop
 8007364:	e006      	b.n	8007374 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8007366:	bf00      	nop
 8007368:	e004      	b.n	8007374 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800736a:	bf00      	nop
 800736c:	e002      	b.n	8007374 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800736e:	bf00      	nop
 8007370:	e000      	b.n	8007374 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8007372:	bf00      	nop
    }
  }

  return(frequency);
 8007374:	69fb      	ldr	r3, [r7, #28]
}
 8007376:	4618      	mov	r0, r3
 8007378:	3720      	adds	r7, #32
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}
 800737e:	bf00      	nop
 8007380:	40021000 	.word	0x40021000
 8007384:	0800e4b0 	.word	0x0800e4b0

08007388 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8007388:	b480      	push	{r7}
 800738a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800738c:	4b05      	ldr	r3, [pc, #20]	; (80073a4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a04      	ldr	r2, [pc, #16]	; (80073a4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8007392:	f043 0304 	orr.w	r3, r3, #4
 8007396:	6013      	str	r3, [r2, #0]
}
 8007398:	bf00      	nop
 800739a:	46bd      	mov	sp, r7
 800739c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a0:	4770      	bx	lr
 80073a2:	bf00      	nop
 80073a4:	40021000 	.word	0x40021000

080073a8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b084      	sub	sp, #16
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
 80073b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80073b2:	2300      	movs	r3, #0
 80073b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80073b6:	4b72      	ldr	r3, [pc, #456]	; (8007580 <RCCEx_PLLSAI1_Config+0x1d8>)
 80073b8:	68db      	ldr	r3, [r3, #12]
 80073ba:	f003 0303 	and.w	r3, r3, #3
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d00e      	beq.n	80073e0 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80073c2:	4b6f      	ldr	r3, [pc, #444]	; (8007580 <RCCEx_PLLSAI1_Config+0x1d8>)
 80073c4:	68db      	ldr	r3, [r3, #12]
 80073c6:	f003 0203 	and.w	r2, r3, #3
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	429a      	cmp	r2, r3
 80073d0:	d103      	bne.n	80073da <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
       ||
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d142      	bne.n	8007460 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80073da:	2301      	movs	r3, #1
 80073dc:	73fb      	strb	r3, [r7, #15]
 80073de:	e03f      	b.n	8007460 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	2b03      	cmp	r3, #3
 80073e6:	d018      	beq.n	800741a <RCCEx_PLLSAI1_Config+0x72>
 80073e8:	2b03      	cmp	r3, #3
 80073ea:	d825      	bhi.n	8007438 <RCCEx_PLLSAI1_Config+0x90>
 80073ec:	2b01      	cmp	r3, #1
 80073ee:	d002      	beq.n	80073f6 <RCCEx_PLLSAI1_Config+0x4e>
 80073f0:	2b02      	cmp	r3, #2
 80073f2:	d009      	beq.n	8007408 <RCCEx_PLLSAI1_Config+0x60>
 80073f4:	e020      	b.n	8007438 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80073f6:	4b62      	ldr	r3, [pc, #392]	; (8007580 <RCCEx_PLLSAI1_Config+0x1d8>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f003 0302 	and.w	r3, r3, #2
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d11d      	bne.n	800743e <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8007402:	2301      	movs	r3, #1
 8007404:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007406:	e01a      	b.n	800743e <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007408:	4b5d      	ldr	r3, [pc, #372]	; (8007580 <RCCEx_PLLSAI1_Config+0x1d8>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007410:	2b00      	cmp	r3, #0
 8007412:	d116      	bne.n	8007442 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8007414:	2301      	movs	r3, #1
 8007416:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007418:	e013      	b.n	8007442 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800741a:	4b59      	ldr	r3, [pc, #356]	; (8007580 <RCCEx_PLLSAI1_Config+0x1d8>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007422:	2b00      	cmp	r3, #0
 8007424:	d10f      	bne.n	8007446 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007426:	4b56      	ldr	r3, [pc, #344]	; (8007580 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800742e:	2b00      	cmp	r3, #0
 8007430:	d109      	bne.n	8007446 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8007432:	2301      	movs	r3, #1
 8007434:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007436:	e006      	b.n	8007446 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8007438:	2301      	movs	r3, #1
 800743a:	73fb      	strb	r3, [r7, #15]
      break;
 800743c:	e004      	b.n	8007448 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800743e:	bf00      	nop
 8007440:	e002      	b.n	8007448 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8007442:	bf00      	nop
 8007444:	e000      	b.n	8007448 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8007446:	bf00      	nop
    }

    if(status == HAL_OK)
 8007448:	7bfb      	ldrb	r3, [r7, #15]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d108      	bne.n	8007460 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800744e:	4b4c      	ldr	r3, [pc, #304]	; (8007580 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007450:	68db      	ldr	r3, [r3, #12]
 8007452:	f023 0203 	bic.w	r2, r3, #3
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4949      	ldr	r1, [pc, #292]	; (8007580 <RCCEx_PLLSAI1_Config+0x1d8>)
 800745c:	4313      	orrs	r3, r2
 800745e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8007460:	7bfb      	ldrb	r3, [r7, #15]
 8007462:	2b00      	cmp	r3, #0
 8007464:	f040 8086 	bne.w	8007574 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007468:	4b45      	ldr	r3, [pc, #276]	; (8007580 <RCCEx_PLLSAI1_Config+0x1d8>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4a44      	ldr	r2, [pc, #272]	; (8007580 <RCCEx_PLLSAI1_Config+0x1d8>)
 800746e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007472:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007474:	f7fc fa78 	bl	8003968 <HAL_GetTick>
 8007478:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800747a:	e009      	b.n	8007490 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800747c:	f7fc fa74 	bl	8003968 <HAL_GetTick>
 8007480:	4602      	mov	r2, r0
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	1ad3      	subs	r3, r2, r3
 8007486:	2b02      	cmp	r3, #2
 8007488:	d902      	bls.n	8007490 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800748a:	2303      	movs	r3, #3
 800748c:	73fb      	strb	r3, [r7, #15]
        break;
 800748e:	e005      	b.n	800749c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007490:	4b3b      	ldr	r3, [pc, #236]	; (8007580 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007498:	2b00      	cmp	r3, #0
 800749a:	d1ef      	bne.n	800747c <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800749c:	7bfb      	ldrb	r3, [r7, #15]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d168      	bne.n	8007574 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d113      	bne.n	80074d0 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80074a8:	4b35      	ldr	r3, [pc, #212]	; (8007580 <RCCEx_PLLSAI1_Config+0x1d8>)
 80074aa:	691a      	ldr	r2, [r3, #16]
 80074ac:	4b35      	ldr	r3, [pc, #212]	; (8007584 <RCCEx_PLLSAI1_Config+0x1dc>)
 80074ae:	4013      	ands	r3, r2
 80074b0:	687a      	ldr	r2, [r7, #4]
 80074b2:	6892      	ldr	r2, [r2, #8]
 80074b4:	0211      	lsls	r1, r2, #8
 80074b6:	687a      	ldr	r2, [r7, #4]
 80074b8:	68d2      	ldr	r2, [r2, #12]
 80074ba:	06d2      	lsls	r2, r2, #27
 80074bc:	4311      	orrs	r1, r2
 80074be:	687a      	ldr	r2, [r7, #4]
 80074c0:	6852      	ldr	r2, [r2, #4]
 80074c2:	3a01      	subs	r2, #1
 80074c4:	0112      	lsls	r2, r2, #4
 80074c6:	430a      	orrs	r2, r1
 80074c8:	492d      	ldr	r1, [pc, #180]	; (8007580 <RCCEx_PLLSAI1_Config+0x1d8>)
 80074ca:	4313      	orrs	r3, r2
 80074cc:	610b      	str	r3, [r1, #16]
 80074ce:	e02d      	b.n	800752c <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	2b01      	cmp	r3, #1
 80074d4:	d115      	bne.n	8007502 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80074d6:	4b2a      	ldr	r3, [pc, #168]	; (8007580 <RCCEx_PLLSAI1_Config+0x1d8>)
 80074d8:	691a      	ldr	r2, [r3, #16]
 80074da:	4b2b      	ldr	r3, [pc, #172]	; (8007588 <RCCEx_PLLSAI1_Config+0x1e0>)
 80074dc:	4013      	ands	r3, r2
 80074de:	687a      	ldr	r2, [r7, #4]
 80074e0:	6892      	ldr	r2, [r2, #8]
 80074e2:	0211      	lsls	r1, r2, #8
 80074e4:	687a      	ldr	r2, [r7, #4]
 80074e6:	6912      	ldr	r2, [r2, #16]
 80074e8:	0852      	lsrs	r2, r2, #1
 80074ea:	3a01      	subs	r2, #1
 80074ec:	0552      	lsls	r2, r2, #21
 80074ee:	4311      	orrs	r1, r2
 80074f0:	687a      	ldr	r2, [r7, #4]
 80074f2:	6852      	ldr	r2, [r2, #4]
 80074f4:	3a01      	subs	r2, #1
 80074f6:	0112      	lsls	r2, r2, #4
 80074f8:	430a      	orrs	r2, r1
 80074fa:	4921      	ldr	r1, [pc, #132]	; (8007580 <RCCEx_PLLSAI1_Config+0x1d8>)
 80074fc:	4313      	orrs	r3, r2
 80074fe:	610b      	str	r3, [r1, #16]
 8007500:	e014      	b.n	800752c <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007502:	4b1f      	ldr	r3, [pc, #124]	; (8007580 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007504:	691a      	ldr	r2, [r3, #16]
 8007506:	4b21      	ldr	r3, [pc, #132]	; (800758c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007508:	4013      	ands	r3, r2
 800750a:	687a      	ldr	r2, [r7, #4]
 800750c:	6892      	ldr	r2, [r2, #8]
 800750e:	0211      	lsls	r1, r2, #8
 8007510:	687a      	ldr	r2, [r7, #4]
 8007512:	6952      	ldr	r2, [r2, #20]
 8007514:	0852      	lsrs	r2, r2, #1
 8007516:	3a01      	subs	r2, #1
 8007518:	0652      	lsls	r2, r2, #25
 800751a:	4311      	orrs	r1, r2
 800751c:	687a      	ldr	r2, [r7, #4]
 800751e:	6852      	ldr	r2, [r2, #4]
 8007520:	3a01      	subs	r2, #1
 8007522:	0112      	lsls	r2, r2, #4
 8007524:	430a      	orrs	r2, r1
 8007526:	4916      	ldr	r1, [pc, #88]	; (8007580 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007528:	4313      	orrs	r3, r2
 800752a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800752c:	4b14      	ldr	r3, [pc, #80]	; (8007580 <RCCEx_PLLSAI1_Config+0x1d8>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a13      	ldr	r2, [pc, #76]	; (8007580 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007532:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007536:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007538:	f7fc fa16 	bl	8003968 <HAL_GetTick>
 800753c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800753e:	e009      	b.n	8007554 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007540:	f7fc fa12 	bl	8003968 <HAL_GetTick>
 8007544:	4602      	mov	r2, r0
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	1ad3      	subs	r3, r2, r3
 800754a:	2b02      	cmp	r3, #2
 800754c:	d902      	bls.n	8007554 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800754e:	2303      	movs	r3, #3
 8007550:	73fb      	strb	r3, [r7, #15]
          break;
 8007552:	e005      	b.n	8007560 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007554:	4b0a      	ldr	r3, [pc, #40]	; (8007580 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800755c:	2b00      	cmp	r3, #0
 800755e:	d0ef      	beq.n	8007540 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8007560:	7bfb      	ldrb	r3, [r7, #15]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d106      	bne.n	8007574 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007566:	4b06      	ldr	r3, [pc, #24]	; (8007580 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007568:	691a      	ldr	r2, [r3, #16]
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	699b      	ldr	r3, [r3, #24]
 800756e:	4904      	ldr	r1, [pc, #16]	; (8007580 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007570:	4313      	orrs	r3, r2
 8007572:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007574:	7bfb      	ldrb	r3, [r7, #15]
}
 8007576:	4618      	mov	r0, r3
 8007578:	3710      	adds	r7, #16
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}
 800757e:	bf00      	nop
 8007580:	40021000 	.word	0x40021000
 8007584:	07ff800f 	.word	0x07ff800f
 8007588:	ff9f800f 	.word	0xff9f800f
 800758c:	f9ff800f 	.word	0xf9ff800f

08007590 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b084      	sub	sp, #16
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
 8007598:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800759a:	2300      	movs	r3, #0
 800759c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800759e:	4b72      	ldr	r3, [pc, #456]	; (8007768 <RCCEx_PLLSAI2_Config+0x1d8>)
 80075a0:	68db      	ldr	r3, [r3, #12]
 80075a2:	f003 0303 	and.w	r3, r3, #3
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d00e      	beq.n	80075c8 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80075aa:	4b6f      	ldr	r3, [pc, #444]	; (8007768 <RCCEx_PLLSAI2_Config+0x1d8>)
 80075ac:	68db      	ldr	r3, [r3, #12]
 80075ae:	f003 0203 	and.w	r2, r3, #3
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	429a      	cmp	r2, r3
 80075b8:	d103      	bne.n	80075c2 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
       ||
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d142      	bne.n	8007648 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80075c2:	2301      	movs	r3, #1
 80075c4:	73fb      	strb	r3, [r7, #15]
 80075c6:	e03f      	b.n	8007648 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	2b03      	cmp	r3, #3
 80075ce:	d018      	beq.n	8007602 <RCCEx_PLLSAI2_Config+0x72>
 80075d0:	2b03      	cmp	r3, #3
 80075d2:	d825      	bhi.n	8007620 <RCCEx_PLLSAI2_Config+0x90>
 80075d4:	2b01      	cmp	r3, #1
 80075d6:	d002      	beq.n	80075de <RCCEx_PLLSAI2_Config+0x4e>
 80075d8:	2b02      	cmp	r3, #2
 80075da:	d009      	beq.n	80075f0 <RCCEx_PLLSAI2_Config+0x60>
 80075dc:	e020      	b.n	8007620 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80075de:	4b62      	ldr	r3, [pc, #392]	; (8007768 <RCCEx_PLLSAI2_Config+0x1d8>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f003 0302 	and.w	r3, r3, #2
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d11d      	bne.n	8007626 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80075ea:	2301      	movs	r3, #1
 80075ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80075ee:	e01a      	b.n	8007626 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80075f0:	4b5d      	ldr	r3, [pc, #372]	; (8007768 <RCCEx_PLLSAI2_Config+0x1d8>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d116      	bne.n	800762a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80075fc:	2301      	movs	r3, #1
 80075fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007600:	e013      	b.n	800762a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007602:	4b59      	ldr	r3, [pc, #356]	; (8007768 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800760a:	2b00      	cmp	r3, #0
 800760c:	d10f      	bne.n	800762e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800760e:	4b56      	ldr	r3, [pc, #344]	; (8007768 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007616:	2b00      	cmp	r3, #0
 8007618:	d109      	bne.n	800762e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800761a:	2301      	movs	r3, #1
 800761c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800761e:	e006      	b.n	800762e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8007620:	2301      	movs	r3, #1
 8007622:	73fb      	strb	r3, [r7, #15]
      break;
 8007624:	e004      	b.n	8007630 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8007626:	bf00      	nop
 8007628:	e002      	b.n	8007630 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800762a:	bf00      	nop
 800762c:	e000      	b.n	8007630 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800762e:	bf00      	nop
    }

    if(status == HAL_OK)
 8007630:	7bfb      	ldrb	r3, [r7, #15]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d108      	bne.n	8007648 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8007636:	4b4c      	ldr	r3, [pc, #304]	; (8007768 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007638:	68db      	ldr	r3, [r3, #12]
 800763a:	f023 0203 	bic.w	r2, r3, #3
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4949      	ldr	r1, [pc, #292]	; (8007768 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007644:	4313      	orrs	r3, r2
 8007646:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8007648:	7bfb      	ldrb	r3, [r7, #15]
 800764a:	2b00      	cmp	r3, #0
 800764c:	f040 8086 	bne.w	800775c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007650:	4b45      	ldr	r3, [pc, #276]	; (8007768 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a44      	ldr	r2, [pc, #272]	; (8007768 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007656:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800765a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800765c:	f7fc f984 	bl	8003968 <HAL_GetTick>
 8007660:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007662:	e009      	b.n	8007678 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007664:	f7fc f980 	bl	8003968 <HAL_GetTick>
 8007668:	4602      	mov	r2, r0
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	1ad3      	subs	r3, r2, r3
 800766e:	2b02      	cmp	r3, #2
 8007670:	d902      	bls.n	8007678 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8007672:	2303      	movs	r3, #3
 8007674:	73fb      	strb	r3, [r7, #15]
        break;
 8007676:	e005      	b.n	8007684 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007678:	4b3b      	ldr	r3, [pc, #236]	; (8007768 <RCCEx_PLLSAI2_Config+0x1d8>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007680:	2b00      	cmp	r3, #0
 8007682:	d1ef      	bne.n	8007664 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8007684:	7bfb      	ldrb	r3, [r7, #15]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d168      	bne.n	800775c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d113      	bne.n	80076b8 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007690:	4b35      	ldr	r3, [pc, #212]	; (8007768 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007692:	695a      	ldr	r2, [r3, #20]
 8007694:	4b35      	ldr	r3, [pc, #212]	; (800776c <RCCEx_PLLSAI2_Config+0x1dc>)
 8007696:	4013      	ands	r3, r2
 8007698:	687a      	ldr	r2, [r7, #4]
 800769a:	6892      	ldr	r2, [r2, #8]
 800769c:	0211      	lsls	r1, r2, #8
 800769e:	687a      	ldr	r2, [r7, #4]
 80076a0:	68d2      	ldr	r2, [r2, #12]
 80076a2:	06d2      	lsls	r2, r2, #27
 80076a4:	4311      	orrs	r1, r2
 80076a6:	687a      	ldr	r2, [r7, #4]
 80076a8:	6852      	ldr	r2, [r2, #4]
 80076aa:	3a01      	subs	r2, #1
 80076ac:	0112      	lsls	r2, r2, #4
 80076ae:	430a      	orrs	r2, r1
 80076b0:	492d      	ldr	r1, [pc, #180]	; (8007768 <RCCEx_PLLSAI2_Config+0x1d8>)
 80076b2:	4313      	orrs	r3, r2
 80076b4:	614b      	str	r3, [r1, #20]
 80076b6:	e02d      	b.n	8007714 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	2b01      	cmp	r3, #1
 80076bc:	d115      	bne.n	80076ea <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80076be:	4b2a      	ldr	r3, [pc, #168]	; (8007768 <RCCEx_PLLSAI2_Config+0x1d8>)
 80076c0:	695a      	ldr	r2, [r3, #20]
 80076c2:	4b2b      	ldr	r3, [pc, #172]	; (8007770 <RCCEx_PLLSAI2_Config+0x1e0>)
 80076c4:	4013      	ands	r3, r2
 80076c6:	687a      	ldr	r2, [r7, #4]
 80076c8:	6892      	ldr	r2, [r2, #8]
 80076ca:	0211      	lsls	r1, r2, #8
 80076cc:	687a      	ldr	r2, [r7, #4]
 80076ce:	6912      	ldr	r2, [r2, #16]
 80076d0:	0852      	lsrs	r2, r2, #1
 80076d2:	3a01      	subs	r2, #1
 80076d4:	0552      	lsls	r2, r2, #21
 80076d6:	4311      	orrs	r1, r2
 80076d8:	687a      	ldr	r2, [r7, #4]
 80076da:	6852      	ldr	r2, [r2, #4]
 80076dc:	3a01      	subs	r2, #1
 80076de:	0112      	lsls	r2, r2, #4
 80076e0:	430a      	orrs	r2, r1
 80076e2:	4921      	ldr	r1, [pc, #132]	; (8007768 <RCCEx_PLLSAI2_Config+0x1d8>)
 80076e4:	4313      	orrs	r3, r2
 80076e6:	614b      	str	r3, [r1, #20]
 80076e8:	e014      	b.n	8007714 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80076ea:	4b1f      	ldr	r3, [pc, #124]	; (8007768 <RCCEx_PLLSAI2_Config+0x1d8>)
 80076ec:	695a      	ldr	r2, [r3, #20]
 80076ee:	4b21      	ldr	r3, [pc, #132]	; (8007774 <RCCEx_PLLSAI2_Config+0x1e4>)
 80076f0:	4013      	ands	r3, r2
 80076f2:	687a      	ldr	r2, [r7, #4]
 80076f4:	6892      	ldr	r2, [r2, #8]
 80076f6:	0211      	lsls	r1, r2, #8
 80076f8:	687a      	ldr	r2, [r7, #4]
 80076fa:	6952      	ldr	r2, [r2, #20]
 80076fc:	0852      	lsrs	r2, r2, #1
 80076fe:	3a01      	subs	r2, #1
 8007700:	0652      	lsls	r2, r2, #25
 8007702:	4311      	orrs	r1, r2
 8007704:	687a      	ldr	r2, [r7, #4]
 8007706:	6852      	ldr	r2, [r2, #4]
 8007708:	3a01      	subs	r2, #1
 800770a:	0112      	lsls	r2, r2, #4
 800770c:	430a      	orrs	r2, r1
 800770e:	4916      	ldr	r1, [pc, #88]	; (8007768 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007710:	4313      	orrs	r3, r2
 8007712:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8007714:	4b14      	ldr	r3, [pc, #80]	; (8007768 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4a13      	ldr	r2, [pc, #76]	; (8007768 <RCCEx_PLLSAI2_Config+0x1d8>)
 800771a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800771e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007720:	f7fc f922 	bl	8003968 <HAL_GetTick>
 8007724:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007726:	e009      	b.n	800773c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007728:	f7fc f91e 	bl	8003968 <HAL_GetTick>
 800772c:	4602      	mov	r2, r0
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	1ad3      	subs	r3, r2, r3
 8007732:	2b02      	cmp	r3, #2
 8007734:	d902      	bls.n	800773c <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8007736:	2303      	movs	r3, #3
 8007738:	73fb      	strb	r3, [r7, #15]
          break;
 800773a:	e005      	b.n	8007748 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800773c:	4b0a      	ldr	r3, [pc, #40]	; (8007768 <RCCEx_PLLSAI2_Config+0x1d8>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007744:	2b00      	cmp	r3, #0
 8007746:	d0ef      	beq.n	8007728 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8007748:	7bfb      	ldrb	r3, [r7, #15]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d106      	bne.n	800775c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800774e:	4b06      	ldr	r3, [pc, #24]	; (8007768 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007750:	695a      	ldr	r2, [r3, #20]
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	699b      	ldr	r3, [r3, #24]
 8007756:	4904      	ldr	r1, [pc, #16]	; (8007768 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007758:	4313      	orrs	r3, r2
 800775a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800775c:	7bfb      	ldrb	r3, [r7, #15]
}
 800775e:	4618      	mov	r0, r3
 8007760:	3710      	adds	r7, #16
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}
 8007766:	bf00      	nop
 8007768:	40021000 	.word	0x40021000
 800776c:	07ff800f 	.word	0x07ff800f
 8007770:	ff9f800f 	.word	0xff9f800f
 8007774:	f9ff800f 	.word	0xf9ff800f

08007778 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8007778:	b480      	push	{r7}
 800777a:	b089      	sub	sp, #36	; 0x24
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
 8007780:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8007782:	2300      	movs	r3, #0
 8007784:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8007786:	2300      	movs	r3, #0
 8007788:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 800778a:	2300      	movs	r3, #0
 800778c:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007794:	d10b      	bne.n	80077ae <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8007796:	4b7e      	ldr	r3, [pc, #504]	; (8007990 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007798:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800779c:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80077a0:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 80077a2:	69bb      	ldr	r3, [r7, #24]
 80077a4:	2b60      	cmp	r3, #96	; 0x60
 80077a6:	d112      	bne.n	80077ce <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80077a8:	4b7a      	ldr	r3, [pc, #488]	; (8007994 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 80077aa:	61fb      	str	r3, [r7, #28]
 80077ac:	e00f      	b.n	80077ce <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077b4:	d10b      	bne.n	80077ce <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80077b6:	4b76      	ldr	r3, [pc, #472]	; (8007990 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80077b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80077bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80077c0:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 80077c2:	69bb      	ldr	r3, [r7, #24]
 80077c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80077c8:	d101      	bne.n	80077ce <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 80077ca:	4b72      	ldr	r3, [pc, #456]	; (8007994 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 80077cc:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 80077ce:	69fb      	ldr	r3, [r7, #28]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	f040 80d6 	bne.w	8007982 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 80077da:	69bb      	ldr	r3, [r7, #24]
 80077dc:	2b40      	cmp	r3, #64	; 0x40
 80077de:	d003      	beq.n	80077e8 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 80077e0:	69bb      	ldr	r3, [r7, #24]
 80077e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077e6:	d13b      	bne.n	8007860 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80077e8:	4b69      	ldr	r3, [pc, #420]	; (8007990 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80077f4:	f040 80c4 	bne.w	8007980 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 80077f8:	4b65      	ldr	r3, [pc, #404]	; (8007990 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80077fa:	68db      	ldr	r3, [r3, #12]
 80077fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007800:	2b00      	cmp	r3, #0
 8007802:	f000 80bd 	beq.w	8007980 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007806:	4b62      	ldr	r3, [pc, #392]	; (8007990 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007808:	68db      	ldr	r3, [r3, #12]
 800780a:	091b      	lsrs	r3, r3, #4
 800780c:	f003 030f 	and.w	r3, r3, #15
 8007810:	3301      	adds	r3, #1
 8007812:	693a      	ldr	r2, [r7, #16]
 8007814:	fbb2 f3f3 	udiv	r3, r2, r3
 8007818:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800781a:	4b5d      	ldr	r3, [pc, #372]	; (8007990 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800781c:	68db      	ldr	r3, [r3, #12]
 800781e:	0a1b      	lsrs	r3, r3, #8
 8007820:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007824:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8007826:	4b5a      	ldr	r3, [pc, #360]	; (8007990 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007828:	68db      	ldr	r3, [r3, #12]
 800782a:	0edb      	lsrs	r3, r3, #27
 800782c:	f003 031f 	and.w	r3, r3, #31
 8007830:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8007832:	697b      	ldr	r3, [r7, #20]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d10a      	bne.n	800784e <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8007838:	4b55      	ldr	r3, [pc, #340]	; (8007990 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800783a:	68db      	ldr	r3, [r3, #12]
 800783c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007840:	2b00      	cmp	r3, #0
 8007842:	d002      	beq.n	800784a <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 8007844:	2311      	movs	r3, #17
 8007846:	617b      	str	r3, [r7, #20]
 8007848:	e001      	b.n	800784e <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 800784a:	2307      	movs	r3, #7
 800784c:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	68fa      	ldr	r2, [r7, #12]
 8007852:	fb03 f202 	mul.w	r2, r3, r2
 8007856:	697b      	ldr	r3, [r7, #20]
 8007858:	fbb2 f3f3 	udiv	r3, r2, r3
 800785c:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800785e:	e08f      	b.n	8007980 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8007860:	69bb      	ldr	r3, [r7, #24]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d13a      	bne.n	80078dc <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8007866:	4b4a      	ldr	r3, [pc, #296]	; (8007990 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800786e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007872:	f040 8086 	bne.w	8007982 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8007876:	4b46      	ldr	r3, [pc, #280]	; (8007990 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007878:	691b      	ldr	r3, [r3, #16]
 800787a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800787e:	2b00      	cmp	r3, #0
 8007880:	d07f      	beq.n	8007982 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8007882:	4b43      	ldr	r3, [pc, #268]	; (8007990 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007884:	691b      	ldr	r3, [r3, #16]
 8007886:	091b      	lsrs	r3, r3, #4
 8007888:	f003 030f 	and.w	r3, r3, #15
 800788c:	3301      	adds	r3, #1
 800788e:	693a      	ldr	r2, [r7, #16]
 8007890:	fbb2 f3f3 	udiv	r3, r2, r3
 8007894:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8007896:	4b3e      	ldr	r3, [pc, #248]	; (8007990 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007898:	691b      	ldr	r3, [r3, #16]
 800789a:	0a1b      	lsrs	r3, r3, #8
 800789c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078a0:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 80078a2:	4b3b      	ldr	r3, [pc, #236]	; (8007990 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80078a4:	691b      	ldr	r3, [r3, #16]
 80078a6:	0edb      	lsrs	r3, r3, #27
 80078a8:	f003 031f 	and.w	r3, r3, #31
 80078ac:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d10a      	bne.n	80078ca <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 80078b4:	4b36      	ldr	r3, [pc, #216]	; (8007990 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80078b6:	691b      	ldr	r3, [r3, #16]
 80078b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d002      	beq.n	80078c6 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 80078c0:	2311      	movs	r3, #17
 80078c2:	617b      	str	r3, [r7, #20]
 80078c4:	e001      	b.n	80078ca <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 80078c6:	2307      	movs	r3, #7
 80078c8:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	68fa      	ldr	r2, [r7, #12]
 80078ce:	fb03 f202 	mul.w	r2, r3, r2
 80078d2:	697b      	ldr	r3, [r7, #20]
 80078d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80078d8:	61fb      	str	r3, [r7, #28]
 80078da:	e052      	b.n	8007982 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 80078dc:	69bb      	ldr	r3, [r7, #24]
 80078de:	2b80      	cmp	r3, #128	; 0x80
 80078e0:	d003      	beq.n	80078ea <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 80078e2:	69bb      	ldr	r3, [r7, #24]
 80078e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078e8:	d109      	bne.n	80078fe <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80078ea:	4b29      	ldr	r3, [pc, #164]	; (8007990 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078f6:	d144      	bne.n	8007982 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 80078f8:	4b27      	ldr	r3, [pc, #156]	; (8007998 <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 80078fa:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80078fc:	e041      	b.n	8007982 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 80078fe:	69bb      	ldr	r3, [r7, #24]
 8007900:	2b20      	cmp	r3, #32
 8007902:	d003      	beq.n	800790c <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 8007904:	69bb      	ldr	r3, [r7, #24]
 8007906:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800790a:	d13a      	bne.n	8007982 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 800790c:	4b20      	ldr	r3, [pc, #128]	; (8007990 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007914:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007918:	d133      	bne.n	8007982 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 800791a:	4b1d      	ldr	r3, [pc, #116]	; (8007990 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800791c:	695b      	ldr	r3, [r3, #20]
 800791e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007922:	2b00      	cmp	r3, #0
 8007924:	d02d      	beq.n	8007982 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 8007926:	4b1a      	ldr	r3, [pc, #104]	; (8007990 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007928:	695b      	ldr	r3, [r3, #20]
 800792a:	091b      	lsrs	r3, r3, #4
 800792c:	f003 030f 	and.w	r3, r3, #15
 8007930:	3301      	adds	r3, #1
 8007932:	693a      	ldr	r2, [r7, #16]
 8007934:	fbb2 f3f3 	udiv	r3, r2, r3
 8007938:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800793a:	4b15      	ldr	r3, [pc, #84]	; (8007990 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800793c:	695b      	ldr	r3, [r3, #20]
 800793e:	0a1b      	lsrs	r3, r3, #8
 8007940:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007944:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 8007946:	4b12      	ldr	r3, [pc, #72]	; (8007990 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007948:	695b      	ldr	r3, [r3, #20]
 800794a:	0edb      	lsrs	r3, r3, #27
 800794c:	f003 031f 	and.w	r3, r3, #31
 8007950:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d10a      	bne.n	800796e <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8007958:	4b0d      	ldr	r3, [pc, #52]	; (8007990 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800795a:	695b      	ldr	r3, [r3, #20]
 800795c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007960:	2b00      	cmp	r3, #0
 8007962:	d002      	beq.n	800796a <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 8007964:	2311      	movs	r3, #17
 8007966:	617b      	str	r3, [r7, #20]
 8007968:	e001      	b.n	800796e <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 800796a:	2307      	movs	r3, #7
 800796c:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	68fa      	ldr	r2, [r7, #12]
 8007972:	fb03 f202 	mul.w	r2, r3, r2
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	fbb2 f3f3 	udiv	r3, r2, r3
 800797c:	61fb      	str	r3, [r7, #28]
 800797e:	e000      	b.n	8007982 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8007980:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8007982:	69fb      	ldr	r3, [r7, #28]
}
 8007984:	4618      	mov	r0, r3
 8007986:	3724      	adds	r7, #36	; 0x24
 8007988:	46bd      	mov	sp, r7
 800798a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798e:	4770      	bx	lr
 8007990:	40021000 	.word	0x40021000
 8007994:	001fff68 	.word	0x001fff68
 8007998:	00f42400 	.word	0x00f42400

0800799c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b08a      	sub	sp, #40	; 0x28
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d101      	bne.n	80079ae <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 80079aa:	2301      	movs	r3, #1
 80079ac:	e1c7      	b.n	8007d3e <HAL_SAI_Init+0x3a2>

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80079b4:	2b01      	cmp	r3, #1
 80079b6:	d10e      	bne.n	80079d6 <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4a81      	ldr	r2, [pc, #516]	; (8007bc4 <HAL_SAI_Init+0x228>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d107      	bne.n	80079d2 <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 80079c6:	2b01      	cmp	r3, #1
 80079c8:	d103      	bne.n	80079d2 <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d001      	beq.n	80079d6 <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 80079d2:	2301      	movs	r3, #1
 80079d4:	e1b3      	b.n	8007d3e <HAL_SAI_Init+0x3a2>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 80079dc:	b2db      	uxtb	r3, r3
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d106      	bne.n	80079f0 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2200      	movs	r2, #0
 80079e6:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f7fb fcf4 	bl	80033d8 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f000 f9b1 	bl	8007d58 <SAI_Disable>
 80079f6:	4603      	mov	r3, r0
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d001      	beq.n	8007a00 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 80079fc:	2301      	movs	r3, #1
 80079fe:	e19e      	b.n	8007d3e <HAL_SAI_Init+0x3a2>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2202      	movs	r2, #2
 8007a04:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	68db      	ldr	r3, [r3, #12]
 8007a0c:	2b02      	cmp	r3, #2
 8007a0e:	d00c      	beq.n	8007a2a <HAL_SAI_Init+0x8e>
 8007a10:	2b02      	cmp	r3, #2
 8007a12:	d80d      	bhi.n	8007a30 <HAL_SAI_Init+0x94>
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d002      	beq.n	8007a1e <HAL_SAI_Init+0x82>
 8007a18:	2b01      	cmp	r3, #1
 8007a1a:	d003      	beq.n	8007a24 <HAL_SAI_Init+0x88>
 8007a1c:	e008      	b.n	8007a30 <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007a22:	e008      	b.n	8007a36 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8007a24:	2310      	movs	r3, #16
 8007a26:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007a28:	e005      	b.n	8007a36 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8007a2a:	2320      	movs	r3, #32
 8007a2c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007a2e:	e002      	b.n	8007a36 <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 8007a30:	2300      	movs	r3, #0
 8007a32:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007a34:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	689b      	ldr	r3, [r3, #8]
 8007a3a:	2b03      	cmp	r3, #3
 8007a3c:	d81d      	bhi.n	8007a7a <HAL_SAI_Init+0xde>
 8007a3e:	a201      	add	r2, pc, #4	; (adr r2, 8007a44 <HAL_SAI_Init+0xa8>)
 8007a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a44:	08007a55 	.word	0x08007a55
 8007a48:	08007a5b 	.word	0x08007a5b
 8007a4c:	08007a63 	.word	0x08007a63
 8007a50:	08007a6b 	.word	0x08007a6b
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8007a54:	2300      	movs	r3, #0
 8007a56:	61fb      	str	r3, [r7, #28]
      break;
 8007a58:	e012      	b.n	8007a80 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8007a5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a5e:	61fb      	str	r3, [r7, #28]
      break;
 8007a60:	e00e      	b.n	8007a80 <HAL_SAI_Init+0xe4>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007a62:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007a66:	61fb      	str	r3, [r7, #28]
      break;
 8007a68:	e00a      	b.n	8007a80 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007a6a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007a6e:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8007a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a72:	f043 0301 	orr.w	r3, r3, #1
 8007a76:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007a78:	e002      	b.n	8007a80 <HAL_SAI_Init+0xe4>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	61fb      	str	r3, [r7, #28]
      break;
 8007a7e:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4a4f      	ldr	r2, [pc, #316]	; (8007bc4 <HAL_SAI_Init+0x228>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d004      	beq.n	8007a94 <HAL_SAI_Init+0xf8>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4a4e      	ldr	r2, [pc, #312]	; (8007bc8 <HAL_SAI_Init+0x22c>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d103      	bne.n	8007a9c <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 8007a94:	4a4d      	ldr	r2, [pc, #308]	; (8007bcc <HAL_SAI_Init+0x230>)
 8007a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a98:	6013      	str	r3, [r2, #0]
 8007a9a:	e002      	b.n	8007aa2 <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8007a9c:	4a4c      	ldr	r2, [pc, #304]	; (8007bd0 <HAL_SAI_Init+0x234>)
 8007a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa0:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	69db      	ldr	r3, [r3, #28]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d073      	beq.n	8007b92 <HAL_SAI_Init+0x1f6>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	4a45      	ldr	r2, [pc, #276]	; (8007bc4 <HAL_SAI_Init+0x228>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d004      	beq.n	8007abe <HAL_SAI_Init+0x122>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	4a43      	ldr	r2, [pc, #268]	; (8007bc8 <HAL_SAI_Init+0x22c>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d105      	bne.n	8007aca <HAL_SAI_Init+0x12e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8007abe:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007ac2:	f7fe fd3f 	bl	8006544 <HAL_RCCEx_GetPeriphCLKFreq>
 8007ac6:	61b8      	str	r0, [r7, #24]
 8007ac8:	e004      	b.n	8007ad4 <HAL_SAI_Init+0x138>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8007aca:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8007ace:	f7fe fd39 	bl	8006544 <HAL_RCCEx_GetPeriphCLKFreq>
 8007ad2:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NOMCK = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NOMCK = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	695b      	ldr	r3, [r3, #20]
 8007ad8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007adc:	d120      	bne.n	8007b20 <HAL_SAI_Init+0x184>
    {
      /* NOMCK = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ae2:	2b04      	cmp	r3, #4
 8007ae4:	d102      	bne.n	8007aec <HAL_SAI_Init+0x150>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 8007ae6:	2340      	movs	r3, #64	; 0x40
 8007ae8:	613b      	str	r3, [r7, #16]
 8007aea:	e00a      	b.n	8007b02 <HAL_SAI_Init+0x166>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007af0:	2b08      	cmp	r3, #8
 8007af2:	d103      	bne.n	8007afc <HAL_SAI_Init+0x160>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 8007af4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007af8:	613b      	str	r3, [r7, #16]
 8007afa:	e002      	b.n	8007b02 <HAL_SAI_Init+0x166>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b00:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8007b02:	69ba      	ldr	r2, [r7, #24]
 8007b04:	4613      	mov	r3, r2
 8007b06:	009b      	lsls	r3, r3, #2
 8007b08:	4413      	add	r3, r2
 8007b0a:	005b      	lsls	r3, r3, #1
 8007b0c:	4619      	mov	r1, r3
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	69db      	ldr	r3, [r3, #28]
 8007b12:	693a      	ldr	r2, [r7, #16]
 8007b14:	fb02 f303 	mul.w	r3, r2, r3
 8007b18:	fbb1 f3f3 	udiv	r3, r1, r3
 8007b1c:	617b      	str	r3, [r7, #20]
 8007b1e:	e017      	b.n	8007b50 <HAL_SAI_Init+0x1b4>
    }
    else
    {
      /* NOMCK = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b24:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007b28:	d101      	bne.n	8007b2e <HAL_SAI_Init+0x192>
 8007b2a:	2302      	movs	r3, #2
 8007b2c:	e000      	b.n	8007b30 <HAL_SAI_Init+0x194>
 8007b2e:	2301      	movs	r3, #1
 8007b30:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8007b32:	69ba      	ldr	r2, [r7, #24]
 8007b34:	4613      	mov	r3, r2
 8007b36:	009b      	lsls	r3, r3, #2
 8007b38:	4413      	add	r3, r2
 8007b3a:	005b      	lsls	r3, r3, #1
 8007b3c:	4619      	mov	r1, r3
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	69db      	ldr	r3, [r3, #28]
 8007b42:	68fa      	ldr	r2, [r7, #12]
 8007b44:	fb02 f303 	mul.w	r3, r2, r3
 8007b48:	021b      	lsls	r3, r3, #8
 8007b4a:	fbb1 f3f3 	udiv	r3, r1, r3
 8007b4e:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	4a20      	ldr	r2, [pc, #128]	; (8007bd4 <HAL_SAI_Init+0x238>)
 8007b54:	fba2 2303 	umull	r2, r3, r2, r3
 8007b58:	08da      	lsrs	r2, r3, #3
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8007b5e:	6979      	ldr	r1, [r7, #20]
 8007b60:	4b1c      	ldr	r3, [pc, #112]	; (8007bd4 <HAL_SAI_Init+0x238>)
 8007b62:	fba3 2301 	umull	r2, r3, r3, r1
 8007b66:	08da      	lsrs	r2, r3, #3
 8007b68:	4613      	mov	r3, r2
 8007b6a:	009b      	lsls	r3, r3, #2
 8007b6c:	4413      	add	r3, r2
 8007b6e:	005b      	lsls	r3, r3, #1
 8007b70:	1aca      	subs	r2, r1, r3
 8007b72:	2a08      	cmp	r2, #8
 8007b74:	d904      	bls.n	8007b80 <HAL_SAI_Init+0x1e4>
    {
      hsai->Init.Mckdiv += 1U;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6a1b      	ldr	r3, [r3, #32]
 8007b7a:	1c5a      	adds	r2, r3, #1
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b84:	2b04      	cmp	r3, #4
 8007b86:	d104      	bne.n	8007b92 <HAL_SAI_Init+0x1f6>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6a1b      	ldr	r3, [r3, #32]
 8007b8c:	085a      	lsrs	r2, r3, #1
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	685b      	ldr	r3, [r3, #4]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d003      	beq.n	8007ba2 <HAL_SAI_Init+0x206>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	685b      	ldr	r3, [r3, #4]
 8007b9e:	2b02      	cmp	r3, #2
 8007ba0:	d109      	bne.n	8007bb6 <HAL_SAI_Init+0x21a>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ba6:	2b01      	cmp	r3, #1
 8007ba8:	d101      	bne.n	8007bae <HAL_SAI_Init+0x212>
 8007baa:	2300      	movs	r3, #0
 8007bac:	e001      	b.n	8007bb2 <HAL_SAI_Init+0x216>
 8007bae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007bb2:	623b      	str	r3, [r7, #32]
 8007bb4:	e012      	b.n	8007bdc <HAL_SAI_Init+0x240>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bba:	2b01      	cmp	r3, #1
 8007bbc:	d10c      	bne.n	8007bd8 <HAL_SAI_Init+0x23c>
 8007bbe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007bc2:	e00a      	b.n	8007bda <HAL_SAI_Init+0x23e>
 8007bc4:	40015404 	.word	0x40015404
 8007bc8:	40015424 	.word	0x40015424
 8007bcc:	40015400 	.word	0x40015400
 8007bd0:	40015800 	.word	0x40015800
 8007bd4:	cccccccd 	.word	0xcccccccd
 8007bd8:	2300      	movs	r3, #0
 8007bda:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	6819      	ldr	r1, [r3, #0]
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681a      	ldr	r2, [r3, #0]
 8007be6:	4b58      	ldr	r3, [pc, #352]	; (8007d48 <HAL_SAI_Init+0x3ac>)
 8007be8:	400b      	ands	r3, r1
 8007bea:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NOMCK | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	6819      	ldr	r1, [r3, #0]
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	685a      	ldr	r2, [r3, #4]
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bfa:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007c00:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c06:	431a      	orrs	r2, r3
 8007c08:	6a3b      	ldr	r3, [r7, #32]
 8007c0a:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8007c0c:	69fb      	ldr	r3, [r7, #28]
 8007c0e:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          ckstr_bits | syncen_bits |                             \
 8007c14:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	691b      	ldr	r3, [r3, #16]
 8007c1a:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007c20:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6a1b      	ldr	r3, [r3, #32]
 8007c26:	051b      	lsls	r3, r3, #20
 8007c28:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8007c2e:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	430a      	orrs	r2, r1
 8007c36:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	685b      	ldr	r3, [r3, #4]
 8007c3e:	687a      	ldr	r2, [r7, #4]
 8007c40:	6812      	ldr	r2, [r2, #0]
 8007c42:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8007c46:	f023 030f 	bic.w	r3, r3, #15
 8007c4a:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	6859      	ldr	r1, [r3, #4]
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	699a      	ldr	r2, [r3, #24]
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c5a:	431a      	orrs	r2, r3
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c60:	431a      	orrs	r2, r3
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	430a      	orrs	r2, r1
 8007c68:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	6899      	ldr	r1, [r3, #8]
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681a      	ldr	r2, [r3, #0]
 8007c74:	4b35      	ldr	r3, [pc, #212]	; (8007d4c <HAL_SAI_Init+0x3b0>)
 8007c76:	400b      	ands	r3, r1
 8007c78:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	6899      	ldr	r1, [r3, #8]
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c84:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007c8a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
                           hsai->FrameInit.FSOffset |
 8007c90:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSDefinition |
 8007c96:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c9c:	3b01      	subs	r3, #1
 8007c9e:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8007ca0:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	430a      	orrs	r2, r1
 8007ca8:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	68d9      	ldr	r1, [r3, #12]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681a      	ldr	r2, [r3, #0]
 8007cb4:	f24f 0320 	movw	r3, #61472	; 0xf020
 8007cb8:	400b      	ands	r3, r1
 8007cba:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	68d9      	ldr	r1, [r3, #12]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007cca:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cd0:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007cd2:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007cd8:	3b01      	subs	r3, #1
 8007cda:	021b      	lsls	r3, r3, #8
 8007cdc:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	430a      	orrs	r2, r1
 8007ce4:	60da      	str	r2, [r3, #12]

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4a19      	ldr	r2, [pc, #100]	; (8007d50 <HAL_SAI_Init+0x3b4>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d119      	bne.n	8007d24 <HAL_SAI_Init+0x388>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8007cf0:	4b18      	ldr	r3, [pc, #96]	; (8007d54 <HAL_SAI_Init+0x3b8>)
 8007cf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cf4:	4a17      	ldr	r2, [pc, #92]	; (8007d54 <HAL_SAI_Init+0x3b8>)
 8007cf6:	f023 0301 	bic.w	r3, r3, #1
 8007cfa:	6453      	str	r3, [r2, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007d02:	2b01      	cmp	r3, #1
 8007d04:	d10e      	bne.n	8007d24 <HAL_SAI_Init+0x388>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d0e:	3b01      	subs	r3, #1
 8007d10:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8007d12:	4910      	ldr	r1, [pc, #64]	; (8007d54 <HAL_SAI_Init+0x3b8>)
 8007d14:	4313      	orrs	r3, r2
 8007d16:	644b      	str	r3, [r1, #68]	; 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 8007d18:	4b0e      	ldr	r3, [pc, #56]	; (8007d54 <HAL_SAI_Init+0x3b8>)
 8007d1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d1c:	4a0d      	ldr	r2, [pc, #52]	; (8007d54 <HAL_SAI_Init+0x3b8>)
 8007d1e:	f043 0301 	orr.w	r3, r3, #1
 8007d22:	6453      	str	r3, [r2, #68]	; 0x44
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2200      	movs	r2, #0
 8007d28:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2201      	movs	r2, #1
 8007d30:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2200      	movs	r2, #0
 8007d38:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

  return HAL_OK;
 8007d3c:	2300      	movs	r3, #0
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3728      	adds	r7, #40	; 0x28
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}
 8007d46:	bf00      	nop
 8007d48:	f805c010 	.word	0xf805c010
 8007d4c:	fff88000 	.word	0xfff88000
 8007d50:	40015404 	.word	0x40015404
 8007d54:	40015400 	.word	0x40015400

08007d58 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8007d58:	b480      	push	{r7}
 8007d5a:	b085      	sub	sp, #20
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8007d60:	4b18      	ldr	r3, [pc, #96]	; (8007dc4 <SAI_Disable+0x6c>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	4a18      	ldr	r2, [pc, #96]	; (8007dc8 <SAI_Disable+0x70>)
 8007d66:	fba2 2303 	umull	r2, r3, r2, r3
 8007d6a:	0b1b      	lsrs	r3, r3, #12
 8007d6c:	009b      	lsls	r3, r3, #2
 8007d6e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8007d70:	2300      	movs	r3, #0
 8007d72:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	681a      	ldr	r2, [r3, #0]
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007d82:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d10a      	bne.n	8007da0 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d90:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      status = HAL_TIMEOUT;
 8007d9a:	2303      	movs	r3, #3
 8007d9c:	72fb      	strb	r3, [r7, #11]
      break;
 8007d9e:	e009      	b.n	8007db4 <SAI_Disable+0x5c>
    }
    count--;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	3b01      	subs	r3, #1
 8007da4:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d1e7      	bne.n	8007d84 <SAI_Disable+0x2c>

  return status;
 8007db4:	7afb      	ldrb	r3, [r7, #11]
}
 8007db6:	4618      	mov	r0, r3
 8007db8:	3714      	adds	r7, #20
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc0:	4770      	bx	lr
 8007dc2:	bf00      	nop
 8007dc4:	20000008 	.word	0x20000008
 8007dc8:	95cbec1b 	.word	0x95cbec1b

08007dcc <HAL_SMBUS_Init>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_Init(SMBUS_HandleTypeDef *hsmbus)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b082      	sub	sp, #8
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
  /* Check the SMBUS handle allocation */
  if (hsmbus == NULL)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d101      	bne.n	8007dde <HAL_SMBUS_Init+0x12>
  {
    return HAL_ERROR;
 8007dda:	2301      	movs	r3, #1
 8007ddc:	e0aa      	b.n	8007f34 <HAL_SMBUS_Init+0x168>
  assert_param(IS_SMBUS_GENERAL_CALL(hsmbus->Init.GeneralCallMode));
  assert_param(IS_SMBUS_NO_STRETCH(hsmbus->Init.NoStretchMode));
  assert_param(IS_SMBUS_PEC(hsmbus->Init.PacketErrorCheckMode));
  assert_param(IS_SMBUS_PERIPHERAL_MODE(hsmbus->Init.PeripheralMode));

  if (hsmbus->State == HAL_SMBUS_STATE_RESET)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d106      	bne.n	8007df4 <HAL_SMBUS_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hsmbus->Lock = HAL_UNLOCKED;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2200      	movs	r2, #0
 8007dea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hsmbus->MspInitCallback(hsmbus);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_SMBUS_MspInit(hsmbus);
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f7fa feb0 	bl	8002b54 <HAL_SMBUS_MspInit>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
  }

  hsmbus->State = HAL_SMBUS_STATE_BUSY;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2202      	movs	r2, #2
 8007df8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Disable the selected SMBUS peripheral */
  __HAL_SMBUS_DISABLE(hsmbus);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	681a      	ldr	r2, [r3, #0]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f022 0201 	bic.w	r2, r2, #1
 8007e08:	601a      	str	r2, [r3, #0]

  /*---------------------------- SMBUSx TIMINGR Configuration ------------------------*/
  /* Configure SMBUSx: Frequency range */
  hsmbus->Instance->TIMINGR = hsmbus->Init.Timing & TIMING_CLEAR_MASK;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	685a      	ldr	r2, [r3, #4]
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007e16:	611a      	str	r2, [r3, #16]

  /*---------------------------- SMBUSx TIMEOUTR Configuration ------------------------*/
  /* Configure SMBUSx: Bus Timeout  */
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TIMOUTEN;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	695a      	ldr	r2, [r3, #20]
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007e26:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TEXTEN;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	695a      	ldr	r2, [r3, #20]
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8007e36:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR = hsmbus->Init.SMBusTimeout;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	687a      	ldr	r2, [r7, #4]
 8007e3e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007e40:	615a      	str	r2, [r3, #20]

  /*---------------------------- SMBUSx OAR1 Configuration -----------------------*/
  /* Configure SMBUSx: Own Address1 and ack own address1 mode */
  hsmbus->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	689a      	ldr	r2, [r3, #8]
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007e50:	609a      	str	r2, [r3, #8]

  if (hsmbus->Init.OwnAddress1 != 0UL)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	68db      	ldr	r3, [r3, #12]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d012      	beq.n	8007e80 <HAL_SMBUS_Init+0xb4>
  {
    if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_7BIT)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	691b      	ldr	r3, [r3, #16]
 8007e5e:	2b01      	cmp	r3, #1
 8007e60:	d107      	bne.n	8007e72 <HAL_SMBUS_Init+0xa6>
    {
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | hsmbus->Init.OwnAddress1);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	68da      	ldr	r2, [r3, #12]
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007e6e:	609a      	str	r2, [r3, #8]
 8007e70:	e006      	b.n	8007e80 <HAL_SMBUS_Init+0xb4>
    }
    else /* SMBUS_ADDRESSINGMODE_10BIT */
    {
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hsmbus->Init.OwnAddress1);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	68da      	ldr	r2, [r3, #12]
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007e7e:	609a      	str	r2, [r3, #8]
    }
  }

  /*---------------------------- SMBUSx CR2 Configuration ------------------------*/
  /* Configure SMBUSx: Addressing Master mode */
  if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_10BIT)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	691b      	ldr	r3, [r3, #16]
 8007e84:	2b02      	cmp	r3, #2
 8007e86:	d104      	bne.n	8007e92 <HAL_SMBUS_Init+0xc6>
  {
    hsmbus->Instance->CR2 = (I2C_CR2_ADD10);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007e90:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process) */
  /* AUTOEND and NACK bit will be manage during Transfer process */
  hsmbus->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	685b      	ldr	r3, [r3, #4]
 8007e98:	687a      	ldr	r2, [r7, #4]
 8007e9a:	6812      	ldr	r2, [r2, #0]
 8007e9c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007ea0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ea4:	6053      	str	r3, [r2, #4]

  /*---------------------------- SMBUSx OAR2 Configuration -----------------------*/
  /* Configure SMBUSx: Dual mode and Own Address2 */
  hsmbus->Instance->OAR2 = (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2 | \
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	695a      	ldr	r2, [r3, #20]
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	699b      	ldr	r3, [r3, #24]
 8007eae:	ea42 0103 	orr.w	r1, r2, r3
                            (hsmbus->Init.OwnAddress2Masks << 8U));
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	69db      	ldr	r3, [r3, #28]
 8007eb6:	021a      	lsls	r2, r3, #8
  hsmbus->Instance->OAR2 = (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2 | \
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	430a      	orrs	r2, r1
 8007ebe:	60da      	str	r2, [r3, #12]

  /*---------------------------- SMBUSx CR1 Configuration ------------------------*/
  /* Configure SMBUSx: Generalcall and NoStretch mode */
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6a1a      	ldr	r2, [r3, #32]
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ec8:	431a      	orrs	r2, r3
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 8007ece:	431a      	orrs	r2, r3
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ed4:	ea42 0103 	orr.w	r1, r2, r3
                           hsmbus->Init.AnalogFilter);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	689a      	ldr	r2, [r3, #8]
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 8007ee0:	430a      	orrs	r2, r1
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 8007ee2:	601a      	str	r2, [r3, #0]

  /* Enable Slave Byte Control only in case of Packet Error Check is enabled
     and SMBUS Peripheral is set in Slave mode */
  if ((hsmbus->Init.PacketErrorCheckMode == SMBUS_PEC_ENABLE) && \
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ee8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007eec:	d110      	bne.n	8007f10 <HAL_SMBUS_Init+0x144>
      ((hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE) || \
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  if ((hsmbus->Init.PacketErrorCheckMode == SMBUS_PEC_ENABLE) && \
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d004      	beq.n	8007f00 <HAL_SMBUS_Init+0x134>
       (hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE_ARP)))
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      ((hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE) || \
 8007efa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007efe:	d107      	bne.n	8007f10 <HAL_SMBUS_Init+0x144>
  {
    hsmbus->Instance->CR1 |= I2C_CR1_SBC;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	681a      	ldr	r2, [r3, #0]
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007f0e:	601a      	str	r2, [r3, #0]
  }

  /* Enable the selected SMBUS peripheral */
  __HAL_SMBUS_ENABLE(hsmbus);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	681a      	ldr	r2, [r3, #0]
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f042 0201 	orr.w	r2, r2, #1
 8007f1e:	601a      	str	r2, [r3, #0]

  hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2200      	movs	r2, #0
 8007f24:	64da      	str	r2, [r3, #76]	; 0x4c
  hsmbus->PreviousState = HAL_SMBUS_STATE_READY;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2201      	movs	r2, #1
 8007f2a:	641a      	str	r2, [r3, #64]	; 0x40
  hsmbus->State = HAL_SMBUS_STATE_READY;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2201      	movs	r2, #1
 8007f30:	649a      	str	r2, [r3, #72]	; 0x48

  return HAL_OK;
 8007f32:	2300      	movs	r3, #0
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	3708      	adds	r7, #8
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}

08007f3c <HAL_SMBUS_EnableAlert_IT>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUSx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_EnableAlert_IT(SMBUS_HandleTypeDef *hsmbus)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b082      	sub	sp, #8
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
  /* Enable SMBus alert */
  hsmbus->Instance->CR1 |= I2C_CR1_ALERTEN;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	681a      	ldr	r2, [r3, #0]
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8007f52:	601a      	str	r2, [r3, #0]

  /* Clear ALERT flag */
  __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_ALERT);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007f5c:	61da      	str	r2, [r3, #28]

  /* Enable Alert Interrupt */
  SMBUS_Enable_IRQ(hsmbus, SMBUS_IT_ALERT);
 8007f5e:	2180      	movs	r1, #128	; 0x80
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f000 f805 	bl	8007f70 <SMBUS_Enable_IRQ>

  return HAL_OK;
 8007f66:	2300      	movs	r3, #0
}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	3708      	adds	r7, #8
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}

08007f70 <SMBUS_Enable_IRQ>:
  *                the configuration information for the specified SMBUS.
  * @param  InterruptRequest Value of @ref SMBUS_Interrupt_configuration_definition.
  * @retval HAL status
  */
static void SMBUS_Enable_IRQ(SMBUS_HandleTypeDef *hsmbus, uint32_t InterruptRequest)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b085      	sub	sp, #20
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
 8007f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpisr = 0UL;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & SMBUS_IT_ALERT) == SMBUS_IT_ALERT)
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d003      	beq.n	8007f90 <SMBUS_Enable_IRQ+0x20>
  {
    /* Enable ERR interrupt */
    tmpisr |= SMBUS_IT_ERRI;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f8e:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_ADDR) == SMBUS_IT_ADDR)
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007f96:	2b38      	cmp	r3, #56	; 0x38
 8007f98:	d103      	bne.n	8007fa2 <SMBUS_Enable_IRQ+0x32>
  {
    /* Enable ADDR, STOP interrupt */
    tmpisr |= SMBUS_IT_ADDRI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_ERRI;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8007fa0:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_TX) == SMBUS_IT_TX)
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8007fa8:	2bf2      	cmp	r3, #242	; 0xf2
 8007faa:	d103      	bne.n	8007fb4 <SMBUS_Enable_IRQ+0x44>
  {
    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    tmpisr |= SMBUS_IT_ERRI | SMBUS_IT_TCI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_TXI;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8007fb2:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_RX) == SMBUS_IT_RX)
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	f003 03d4 	and.w	r3, r3, #212	; 0xd4
 8007fba:	2bd4      	cmp	r3, #212	; 0xd4
 8007fbc:	d103      	bne.n	8007fc6 <SMBUS_Enable_IRQ+0x56>
  {
    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    tmpisr |= SMBUS_IT_ERRI | SMBUS_IT_TCI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_RXI;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8007fc4:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of SMBUS interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_SMBUS_ENABLE_IT(hsmbus, tmpisr);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	6819      	ldr	r1, [r3, #0]
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	68fa      	ldr	r2, [r7, #12]
 8007fd2:	430a      	orrs	r2, r1
 8007fd4:	601a      	str	r2, [r3, #0]
}
 8007fd6:	bf00      	nop
 8007fd8:	3714      	adds	r7, #20
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe0:	4770      	bx	lr

08007fe2 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007fe2:	b580      	push	{r7, lr}
 8007fe4:	b084      	sub	sp, #16
 8007fe6:	af00      	add	r7, sp, #0
 8007fe8:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d101      	bne.n	8007ff4 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	e095      	b.n	8008120 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d108      	bne.n	800800e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	685b      	ldr	r3, [r3, #4]
 8008000:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008004:	d009      	beq.n	800801a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2200      	movs	r2, #0
 800800a:	61da      	str	r2, [r3, #28]
 800800c:	e005      	b.n	800801a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2200      	movs	r2, #0
 8008012:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2200      	movs	r2, #0
 8008018:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2200      	movs	r2, #0
 800801e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008026:	b2db      	uxtb	r3, r3
 8008028:	2b00      	cmp	r3, #0
 800802a:	d106      	bne.n	800803a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2200      	movs	r2, #0
 8008030:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f7fa ff1b 	bl	8002e70 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2202      	movs	r2, #2
 800803e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	681a      	ldr	r2, [r3, #0]
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008050:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	68db      	ldr	r3, [r3, #12]
 8008056:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800805a:	d902      	bls.n	8008062 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800805c:	2300      	movs	r3, #0
 800805e:	60fb      	str	r3, [r7, #12]
 8008060:	e002      	b.n	8008068 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008062:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008066:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	68db      	ldr	r3, [r3, #12]
 800806c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008070:	d007      	beq.n	8008082 <HAL_SPI_Init+0xa0>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	68db      	ldr	r3, [r3, #12]
 8008076:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800807a:	d002      	beq.n	8008082 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2200      	movs	r2, #0
 8008080:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	685b      	ldr	r3, [r3, #4]
 8008086:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	689b      	ldr	r3, [r3, #8]
 800808e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008092:	431a      	orrs	r2, r3
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	691b      	ldr	r3, [r3, #16]
 8008098:	f003 0302 	and.w	r3, r3, #2
 800809c:	431a      	orrs	r2, r3
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	695b      	ldr	r3, [r3, #20]
 80080a2:	f003 0301 	and.w	r3, r3, #1
 80080a6:	431a      	orrs	r2, r3
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	699b      	ldr	r3, [r3, #24]
 80080ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80080b0:	431a      	orrs	r2, r3
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	69db      	ldr	r3, [r3, #28]
 80080b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80080ba:	431a      	orrs	r2, r3
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6a1b      	ldr	r3, [r3, #32]
 80080c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080c4:	ea42 0103 	orr.w	r1, r2, r3
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080cc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	430a      	orrs	r2, r1
 80080d6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	699b      	ldr	r3, [r3, #24]
 80080dc:	0c1b      	lsrs	r3, r3, #16
 80080de:	f003 0204 	and.w	r2, r3, #4
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e6:	f003 0310 	and.w	r3, r3, #16
 80080ea:	431a      	orrs	r2, r3
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080f0:	f003 0308 	and.w	r3, r3, #8
 80080f4:	431a      	orrs	r2, r3
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	68db      	ldr	r3, [r3, #12]
 80080fa:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80080fe:	ea42 0103 	orr.w	r1, r2, r3
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	430a      	orrs	r2, r1
 800810e:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2200      	movs	r2, #0
 8008114:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2201      	movs	r2, #1
 800811a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800811e:	2300      	movs	r3, #0
}
 8008120:	4618      	mov	r0, r3
 8008122:	3710      	adds	r7, #16
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}

08008128 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b088      	sub	sp, #32
 800812c:	af00      	add	r7, sp, #0
 800812e:	60f8      	str	r0, [r7, #12]
 8008130:	60b9      	str	r1, [r7, #8]
 8008132:	603b      	str	r3, [r7, #0]
 8008134:	4613      	mov	r3, r2
 8008136:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008138:	2300      	movs	r3, #0
 800813a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008142:	2b01      	cmp	r3, #1
 8008144:	d101      	bne.n	800814a <HAL_SPI_Transmit+0x22>
 8008146:	2302      	movs	r3, #2
 8008148:	e158      	b.n	80083fc <HAL_SPI_Transmit+0x2d4>
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	2201      	movs	r2, #1
 800814e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008152:	f7fb fc09 	bl	8003968 <HAL_GetTick>
 8008156:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008158:	88fb      	ldrh	r3, [r7, #6]
 800815a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008162:	b2db      	uxtb	r3, r3
 8008164:	2b01      	cmp	r3, #1
 8008166:	d002      	beq.n	800816e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008168:	2302      	movs	r3, #2
 800816a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800816c:	e13d      	b.n	80083ea <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d002      	beq.n	800817a <HAL_SPI_Transmit+0x52>
 8008174:	88fb      	ldrh	r3, [r7, #6]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d102      	bne.n	8008180 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800817a:	2301      	movs	r3, #1
 800817c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800817e:	e134      	b.n	80083ea <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	2203      	movs	r2, #3
 8008184:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	2200      	movs	r2, #0
 800818c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	68ba      	ldr	r2, [r7, #8]
 8008192:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	88fa      	ldrh	r2, [r7, #6]
 8008198:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	88fa      	ldrh	r2, [r7, #6]
 800819e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	2200      	movs	r2, #0
 80081a4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	2200      	movs	r2, #0
 80081aa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	2200      	movs	r2, #0
 80081b2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	2200      	movs	r2, #0
 80081ba:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	2200      	movs	r2, #0
 80081c0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	689b      	ldr	r3, [r3, #8]
 80081c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081ca:	d10f      	bne.n	80081ec <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	681a      	ldr	r2, [r3, #0]
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80081da:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	681a      	ldr	r2, [r3, #0]
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80081ea:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081f6:	2b40      	cmp	r3, #64	; 0x40
 80081f8:	d007      	beq.n	800820a <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	681a      	ldr	r2, [r3, #0]
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008208:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	68db      	ldr	r3, [r3, #12]
 800820e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008212:	d94b      	bls.n	80082ac <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	685b      	ldr	r3, [r3, #4]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d002      	beq.n	8008222 <HAL_SPI_Transmit+0xfa>
 800821c:	8afb      	ldrh	r3, [r7, #22]
 800821e:	2b01      	cmp	r3, #1
 8008220:	d13e      	bne.n	80082a0 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008226:	881a      	ldrh	r2, [r3, #0]
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008232:	1c9a      	adds	r2, r3, #2
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800823c:	b29b      	uxth	r3, r3
 800823e:	3b01      	subs	r3, #1
 8008240:	b29a      	uxth	r2, r3
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008246:	e02b      	b.n	80082a0 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	689b      	ldr	r3, [r3, #8]
 800824e:	f003 0302 	and.w	r3, r3, #2
 8008252:	2b02      	cmp	r3, #2
 8008254:	d112      	bne.n	800827c <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800825a:	881a      	ldrh	r2, [r3, #0]
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008266:	1c9a      	adds	r2, r3, #2
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008270:	b29b      	uxth	r3, r3
 8008272:	3b01      	subs	r3, #1
 8008274:	b29a      	uxth	r2, r3
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	87da      	strh	r2, [r3, #62]	; 0x3e
 800827a:	e011      	b.n	80082a0 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800827c:	f7fb fb74 	bl	8003968 <HAL_GetTick>
 8008280:	4602      	mov	r2, r0
 8008282:	69bb      	ldr	r3, [r7, #24]
 8008284:	1ad3      	subs	r3, r2, r3
 8008286:	683a      	ldr	r2, [r7, #0]
 8008288:	429a      	cmp	r2, r3
 800828a:	d803      	bhi.n	8008294 <HAL_SPI_Transmit+0x16c>
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008292:	d102      	bne.n	800829a <HAL_SPI_Transmit+0x172>
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d102      	bne.n	80082a0 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800829a:	2303      	movs	r3, #3
 800829c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800829e:	e0a4      	b.n	80083ea <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80082a4:	b29b      	uxth	r3, r3
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d1ce      	bne.n	8008248 <HAL_SPI_Transmit+0x120>
 80082aa:	e07c      	b.n	80083a6 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	685b      	ldr	r3, [r3, #4]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d002      	beq.n	80082ba <HAL_SPI_Transmit+0x192>
 80082b4:	8afb      	ldrh	r3, [r7, #22]
 80082b6:	2b01      	cmp	r3, #1
 80082b8:	d170      	bne.n	800839c <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80082be:	b29b      	uxth	r3, r3
 80082c0:	2b01      	cmp	r3, #1
 80082c2:	d912      	bls.n	80082ea <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082c8:	881a      	ldrh	r2, [r3, #0]
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082d4:	1c9a      	adds	r2, r3, #2
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80082de:	b29b      	uxth	r3, r3
 80082e0:	3b02      	subs	r3, #2
 80082e2:	b29a      	uxth	r2, r3
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80082e8:	e058      	b.n	800839c <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	330c      	adds	r3, #12
 80082f4:	7812      	ldrb	r2, [r2, #0]
 80082f6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082fc:	1c5a      	adds	r2, r3, #1
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008306:	b29b      	uxth	r3, r3
 8008308:	3b01      	subs	r3, #1
 800830a:	b29a      	uxth	r2, r3
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8008310:	e044      	b.n	800839c <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	689b      	ldr	r3, [r3, #8]
 8008318:	f003 0302 	and.w	r3, r3, #2
 800831c:	2b02      	cmp	r3, #2
 800831e:	d12b      	bne.n	8008378 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008324:	b29b      	uxth	r3, r3
 8008326:	2b01      	cmp	r3, #1
 8008328:	d912      	bls.n	8008350 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800832e:	881a      	ldrh	r2, [r3, #0]
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800833a:	1c9a      	adds	r2, r3, #2
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008344:	b29b      	uxth	r3, r3
 8008346:	3b02      	subs	r3, #2
 8008348:	b29a      	uxth	r2, r3
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800834e:	e025      	b.n	800839c <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	330c      	adds	r3, #12
 800835a:	7812      	ldrb	r2, [r2, #0]
 800835c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008362:	1c5a      	adds	r2, r3, #1
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800836c:	b29b      	uxth	r3, r3
 800836e:	3b01      	subs	r3, #1
 8008370:	b29a      	uxth	r2, r3
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008376:	e011      	b.n	800839c <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008378:	f7fb faf6 	bl	8003968 <HAL_GetTick>
 800837c:	4602      	mov	r2, r0
 800837e:	69bb      	ldr	r3, [r7, #24]
 8008380:	1ad3      	subs	r3, r2, r3
 8008382:	683a      	ldr	r2, [r7, #0]
 8008384:	429a      	cmp	r2, r3
 8008386:	d803      	bhi.n	8008390 <HAL_SPI_Transmit+0x268>
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800838e:	d102      	bne.n	8008396 <HAL_SPI_Transmit+0x26e>
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d102      	bne.n	800839c <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8008396:	2303      	movs	r3, #3
 8008398:	77fb      	strb	r3, [r7, #31]
          goto error;
 800839a:	e026      	b.n	80083ea <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80083a0:	b29b      	uxth	r3, r3
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d1b5      	bne.n	8008312 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80083a6:	69ba      	ldr	r2, [r7, #24]
 80083a8:	6839      	ldr	r1, [r7, #0]
 80083aa:	68f8      	ldr	r0, [r7, #12]
 80083ac:	f000 fce4 	bl	8008d78 <SPI_EndRxTxTransaction>
 80083b0:	4603      	mov	r3, r0
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d002      	beq.n	80083bc <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	2220      	movs	r2, #32
 80083ba:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	689b      	ldr	r3, [r3, #8]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d10a      	bne.n	80083da <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80083c4:	2300      	movs	r3, #0
 80083c6:	613b      	str	r3, [r7, #16]
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	68db      	ldr	r3, [r3, #12]
 80083ce:	613b      	str	r3, [r7, #16]
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	689b      	ldr	r3, [r3, #8]
 80083d6:	613b      	str	r3, [r7, #16]
 80083d8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d002      	beq.n	80083e8 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80083e2:	2301      	movs	r3, #1
 80083e4:	77fb      	strb	r3, [r7, #31]
 80083e6:	e000      	b.n	80083ea <HAL_SPI_Transmit+0x2c2>
  }

error:
 80083e8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	2201      	movs	r2, #1
 80083ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	2200      	movs	r2, #0
 80083f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80083fa:	7ffb      	ldrb	r3, [r7, #31]
}
 80083fc:	4618      	mov	r0, r3
 80083fe:	3720      	adds	r7, #32
 8008400:	46bd      	mov	sp, r7
 8008402:	bd80      	pop	{r7, pc}

08008404 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b088      	sub	sp, #32
 8008408:	af02      	add	r7, sp, #8
 800840a:	60f8      	str	r0, [r7, #12]
 800840c:	60b9      	str	r1, [r7, #8]
 800840e:	603b      	str	r3, [r7, #0]
 8008410:	4613      	mov	r3, r2
 8008412:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008414:	2300      	movs	r3, #0
 8008416:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	685b      	ldr	r3, [r3, #4]
 800841c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008420:	d112      	bne.n	8008448 <HAL_SPI_Receive+0x44>
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	689b      	ldr	r3, [r3, #8]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d10e      	bne.n	8008448 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	2204      	movs	r2, #4
 800842e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008432:	88fa      	ldrh	r2, [r7, #6]
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	9300      	str	r3, [sp, #0]
 8008438:	4613      	mov	r3, r2
 800843a:	68ba      	ldr	r2, [r7, #8]
 800843c:	68b9      	ldr	r1, [r7, #8]
 800843e:	68f8      	ldr	r0, [r7, #12]
 8008440:	f000 f910 	bl	8008664 <HAL_SPI_TransmitReceive>
 8008444:	4603      	mov	r3, r0
 8008446:	e109      	b.n	800865c <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800844e:	2b01      	cmp	r3, #1
 8008450:	d101      	bne.n	8008456 <HAL_SPI_Receive+0x52>
 8008452:	2302      	movs	r3, #2
 8008454:	e102      	b.n	800865c <HAL_SPI_Receive+0x258>
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	2201      	movs	r2, #1
 800845a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800845e:	f7fb fa83 	bl	8003968 <HAL_GetTick>
 8008462:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800846a:	b2db      	uxtb	r3, r3
 800846c:	2b01      	cmp	r3, #1
 800846e:	d002      	beq.n	8008476 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8008470:	2302      	movs	r3, #2
 8008472:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008474:	e0e9      	b.n	800864a <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d002      	beq.n	8008482 <HAL_SPI_Receive+0x7e>
 800847c:	88fb      	ldrh	r3, [r7, #6]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d102      	bne.n	8008488 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8008482:	2301      	movs	r3, #1
 8008484:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008486:	e0e0      	b.n	800864a <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	2204      	movs	r2, #4
 800848c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	2200      	movs	r2, #0
 8008494:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	68ba      	ldr	r2, [r7, #8]
 800849a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	88fa      	ldrh	r2, [r7, #6]
 80084a0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	88fa      	ldrh	r2, [r7, #6]
 80084a8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	2200      	movs	r2, #0
 80084b0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	2200      	movs	r2, #0
 80084b6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	2200      	movs	r2, #0
 80084bc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	2200      	movs	r2, #0
 80084c2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	2200      	movs	r2, #0
 80084c8:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	68db      	ldr	r3, [r3, #12]
 80084ce:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80084d2:	d908      	bls.n	80084e6 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	685a      	ldr	r2, [r3, #4]
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80084e2:	605a      	str	r2, [r3, #4]
 80084e4:	e007      	b.n	80084f6 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	685a      	ldr	r2, [r3, #4]
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80084f4:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	689b      	ldr	r3, [r3, #8]
 80084fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084fe:	d10f      	bne.n	8008520 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	681a      	ldr	r2, [r3, #0]
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800850e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	681a      	ldr	r2, [r3, #0]
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800851e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800852a:	2b40      	cmp	r3, #64	; 0x40
 800852c:	d007      	beq.n	800853e <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	681a      	ldr	r2, [r3, #0]
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800853c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	68db      	ldr	r3, [r3, #12]
 8008542:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008546:	d867      	bhi.n	8008618 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008548:	e030      	b.n	80085ac <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	689b      	ldr	r3, [r3, #8]
 8008550:	f003 0301 	and.w	r3, r3, #1
 8008554:	2b01      	cmp	r3, #1
 8008556:	d117      	bne.n	8008588 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f103 020c 	add.w	r2, r3, #12
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008564:	7812      	ldrb	r2, [r2, #0]
 8008566:	b2d2      	uxtb	r2, r2
 8008568:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800856e:	1c5a      	adds	r2, r3, #1
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800857a:	b29b      	uxth	r3, r3
 800857c:	3b01      	subs	r3, #1
 800857e:	b29a      	uxth	r2, r3
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8008586:	e011      	b.n	80085ac <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008588:	f7fb f9ee 	bl	8003968 <HAL_GetTick>
 800858c:	4602      	mov	r2, r0
 800858e:	693b      	ldr	r3, [r7, #16]
 8008590:	1ad3      	subs	r3, r2, r3
 8008592:	683a      	ldr	r2, [r7, #0]
 8008594:	429a      	cmp	r2, r3
 8008596:	d803      	bhi.n	80085a0 <HAL_SPI_Receive+0x19c>
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800859e:	d102      	bne.n	80085a6 <HAL_SPI_Receive+0x1a2>
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d102      	bne.n	80085ac <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80085a6:	2303      	movs	r3, #3
 80085a8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80085aa:	e04e      	b.n	800864a <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80085b2:	b29b      	uxth	r3, r3
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d1c8      	bne.n	800854a <HAL_SPI_Receive+0x146>
 80085b8:	e034      	b.n	8008624 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	689b      	ldr	r3, [r3, #8]
 80085c0:	f003 0301 	and.w	r3, r3, #1
 80085c4:	2b01      	cmp	r3, #1
 80085c6:	d115      	bne.n	80085f4 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	68da      	ldr	r2, [r3, #12]
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085d2:	b292      	uxth	r2, r2
 80085d4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085da:	1c9a      	adds	r2, r3, #2
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80085e6:	b29b      	uxth	r3, r3
 80085e8:	3b01      	subs	r3, #1
 80085ea:	b29a      	uxth	r2, r3
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80085f2:	e011      	b.n	8008618 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80085f4:	f7fb f9b8 	bl	8003968 <HAL_GetTick>
 80085f8:	4602      	mov	r2, r0
 80085fa:	693b      	ldr	r3, [r7, #16]
 80085fc:	1ad3      	subs	r3, r2, r3
 80085fe:	683a      	ldr	r2, [r7, #0]
 8008600:	429a      	cmp	r2, r3
 8008602:	d803      	bhi.n	800860c <HAL_SPI_Receive+0x208>
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800860a:	d102      	bne.n	8008612 <HAL_SPI_Receive+0x20e>
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d102      	bne.n	8008618 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8008612:	2303      	movs	r3, #3
 8008614:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008616:	e018      	b.n	800864a <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800861e:	b29b      	uxth	r3, r3
 8008620:	2b00      	cmp	r3, #0
 8008622:	d1ca      	bne.n	80085ba <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008624:	693a      	ldr	r2, [r7, #16]
 8008626:	6839      	ldr	r1, [r7, #0]
 8008628:	68f8      	ldr	r0, [r7, #12]
 800862a:	f000 fb4d 	bl	8008cc8 <SPI_EndRxTransaction>
 800862e:	4603      	mov	r3, r0
 8008630:	2b00      	cmp	r3, #0
 8008632:	d002      	beq.n	800863a <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	2220      	movs	r2, #32
 8008638:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800863e:	2b00      	cmp	r3, #0
 8008640:	d002      	beq.n	8008648 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8008642:	2301      	movs	r3, #1
 8008644:	75fb      	strb	r3, [r7, #23]
 8008646:	e000      	b.n	800864a <HAL_SPI_Receive+0x246>
  }

error :
 8008648:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	2201      	movs	r2, #1
 800864e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	2200      	movs	r2, #0
 8008656:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800865a:	7dfb      	ldrb	r3, [r7, #23]
}
 800865c:	4618      	mov	r0, r3
 800865e:	3718      	adds	r7, #24
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}

08008664 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b08a      	sub	sp, #40	; 0x28
 8008668:	af00      	add	r7, sp, #0
 800866a:	60f8      	str	r0, [r7, #12]
 800866c:	60b9      	str	r1, [r7, #8]
 800866e:	607a      	str	r2, [r7, #4]
 8008670:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008672:	2301      	movs	r3, #1
 8008674:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008676:	2300      	movs	r3, #0
 8008678:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008682:	2b01      	cmp	r3, #1
 8008684:	d101      	bne.n	800868a <HAL_SPI_TransmitReceive+0x26>
 8008686:	2302      	movs	r3, #2
 8008688:	e1fb      	b.n	8008a82 <HAL_SPI_TransmitReceive+0x41e>
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	2201      	movs	r2, #1
 800868e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008692:	f7fb f969 	bl	8003968 <HAL_GetTick>
 8008696:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800869e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	685b      	ldr	r3, [r3, #4]
 80086a4:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80086a6:	887b      	ldrh	r3, [r7, #2]
 80086a8:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80086aa:	887b      	ldrh	r3, [r7, #2]
 80086ac:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80086ae:	7efb      	ldrb	r3, [r7, #27]
 80086b0:	2b01      	cmp	r3, #1
 80086b2:	d00e      	beq.n	80086d2 <HAL_SPI_TransmitReceive+0x6e>
 80086b4:	697b      	ldr	r3, [r7, #20]
 80086b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80086ba:	d106      	bne.n	80086ca <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	689b      	ldr	r3, [r3, #8]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d102      	bne.n	80086ca <HAL_SPI_TransmitReceive+0x66>
 80086c4:	7efb      	ldrb	r3, [r7, #27]
 80086c6:	2b04      	cmp	r3, #4
 80086c8:	d003      	beq.n	80086d2 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80086ca:	2302      	movs	r3, #2
 80086cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80086d0:	e1cd      	b.n	8008a6e <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d005      	beq.n	80086e4 <HAL_SPI_TransmitReceive+0x80>
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d002      	beq.n	80086e4 <HAL_SPI_TransmitReceive+0x80>
 80086de:	887b      	ldrh	r3, [r7, #2]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d103      	bne.n	80086ec <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80086e4:	2301      	movs	r3, #1
 80086e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80086ea:	e1c0      	b.n	8008a6e <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80086f2:	b2db      	uxtb	r3, r3
 80086f4:	2b04      	cmp	r3, #4
 80086f6:	d003      	beq.n	8008700 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	2205      	movs	r2, #5
 80086fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	2200      	movs	r2, #0
 8008704:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	687a      	ldr	r2, [r7, #4]
 800870a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	887a      	ldrh	r2, [r7, #2]
 8008710:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	887a      	ldrh	r2, [r7, #2]
 8008718:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	68ba      	ldr	r2, [r7, #8]
 8008720:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	887a      	ldrh	r2, [r7, #2]
 8008726:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	887a      	ldrh	r2, [r7, #2]
 800872c:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	2200      	movs	r2, #0
 8008732:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	2200      	movs	r2, #0
 8008738:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	68db      	ldr	r3, [r3, #12]
 800873e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008742:	d802      	bhi.n	800874a <HAL_SPI_TransmitReceive+0xe6>
 8008744:	8a3b      	ldrh	r3, [r7, #16]
 8008746:	2b01      	cmp	r3, #1
 8008748:	d908      	bls.n	800875c <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	685a      	ldr	r2, [r3, #4]
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008758:	605a      	str	r2, [r3, #4]
 800875a:	e007      	b.n	800876c <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	685a      	ldr	r2, [r3, #4]
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800876a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008776:	2b40      	cmp	r3, #64	; 0x40
 8008778:	d007      	beq.n	800878a <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	681a      	ldr	r2, [r3, #0]
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008788:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	68db      	ldr	r3, [r3, #12]
 800878e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008792:	d97c      	bls.n	800888e <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	685b      	ldr	r3, [r3, #4]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d002      	beq.n	80087a2 <HAL_SPI_TransmitReceive+0x13e>
 800879c:	8a7b      	ldrh	r3, [r7, #18]
 800879e:	2b01      	cmp	r3, #1
 80087a0:	d169      	bne.n	8008876 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087a6:	881a      	ldrh	r2, [r3, #0]
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087b2:	1c9a      	adds	r2, r3, #2
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80087bc:	b29b      	uxth	r3, r3
 80087be:	3b01      	subs	r3, #1
 80087c0:	b29a      	uxth	r2, r3
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80087c6:	e056      	b.n	8008876 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	689b      	ldr	r3, [r3, #8]
 80087ce:	f003 0302 	and.w	r3, r3, #2
 80087d2:	2b02      	cmp	r3, #2
 80087d4:	d11b      	bne.n	800880e <HAL_SPI_TransmitReceive+0x1aa>
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80087da:	b29b      	uxth	r3, r3
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d016      	beq.n	800880e <HAL_SPI_TransmitReceive+0x1aa>
 80087e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e2:	2b01      	cmp	r3, #1
 80087e4:	d113      	bne.n	800880e <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087ea:	881a      	ldrh	r2, [r3, #0]
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087f6:	1c9a      	adds	r2, r3, #2
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008800:	b29b      	uxth	r3, r3
 8008802:	3b01      	subs	r3, #1
 8008804:	b29a      	uxth	r2, r3
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800880a:	2300      	movs	r3, #0
 800880c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	689b      	ldr	r3, [r3, #8]
 8008814:	f003 0301 	and.w	r3, r3, #1
 8008818:	2b01      	cmp	r3, #1
 800881a:	d11c      	bne.n	8008856 <HAL_SPI_TransmitReceive+0x1f2>
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008822:	b29b      	uxth	r3, r3
 8008824:	2b00      	cmp	r3, #0
 8008826:	d016      	beq.n	8008856 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	68da      	ldr	r2, [r3, #12]
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008832:	b292      	uxth	r2, r2
 8008834:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800883a:	1c9a      	adds	r2, r3, #2
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008846:	b29b      	uxth	r3, r3
 8008848:	3b01      	subs	r3, #1
 800884a:	b29a      	uxth	r2, r3
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008852:	2301      	movs	r3, #1
 8008854:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008856:	f7fb f887 	bl	8003968 <HAL_GetTick>
 800885a:	4602      	mov	r2, r0
 800885c:	69fb      	ldr	r3, [r7, #28]
 800885e:	1ad3      	subs	r3, r2, r3
 8008860:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008862:	429a      	cmp	r2, r3
 8008864:	d807      	bhi.n	8008876 <HAL_SPI_TransmitReceive+0x212>
 8008866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800886c:	d003      	beq.n	8008876 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800886e:	2303      	movs	r3, #3
 8008870:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8008874:	e0fb      	b.n	8008a6e <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800887a:	b29b      	uxth	r3, r3
 800887c:	2b00      	cmp	r3, #0
 800887e:	d1a3      	bne.n	80087c8 <HAL_SPI_TransmitReceive+0x164>
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008886:	b29b      	uxth	r3, r3
 8008888:	2b00      	cmp	r3, #0
 800888a:	d19d      	bne.n	80087c8 <HAL_SPI_TransmitReceive+0x164>
 800888c:	e0df      	b.n	8008a4e <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	685b      	ldr	r3, [r3, #4]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d003      	beq.n	800889e <HAL_SPI_TransmitReceive+0x23a>
 8008896:	8a7b      	ldrh	r3, [r7, #18]
 8008898:	2b01      	cmp	r3, #1
 800889a:	f040 80cb 	bne.w	8008a34 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80088a2:	b29b      	uxth	r3, r3
 80088a4:	2b01      	cmp	r3, #1
 80088a6:	d912      	bls.n	80088ce <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088ac:	881a      	ldrh	r2, [r3, #0]
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088b8:	1c9a      	adds	r2, r3, #2
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80088c2:	b29b      	uxth	r3, r3
 80088c4:	3b02      	subs	r3, #2
 80088c6:	b29a      	uxth	r2, r3
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	87da      	strh	r2, [r3, #62]	; 0x3e
 80088cc:	e0b2      	b.n	8008a34 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	330c      	adds	r3, #12
 80088d8:	7812      	ldrb	r2, [r2, #0]
 80088da:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088e0:	1c5a      	adds	r2, r3, #1
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80088ea:	b29b      	uxth	r3, r3
 80088ec:	3b01      	subs	r3, #1
 80088ee:	b29a      	uxth	r2, r3
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80088f4:	e09e      	b.n	8008a34 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	689b      	ldr	r3, [r3, #8]
 80088fc:	f003 0302 	and.w	r3, r3, #2
 8008900:	2b02      	cmp	r3, #2
 8008902:	d134      	bne.n	800896e <HAL_SPI_TransmitReceive+0x30a>
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008908:	b29b      	uxth	r3, r3
 800890a:	2b00      	cmp	r3, #0
 800890c:	d02f      	beq.n	800896e <HAL_SPI_TransmitReceive+0x30a>
 800890e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008910:	2b01      	cmp	r3, #1
 8008912:	d12c      	bne.n	800896e <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008918:	b29b      	uxth	r3, r3
 800891a:	2b01      	cmp	r3, #1
 800891c:	d912      	bls.n	8008944 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008922:	881a      	ldrh	r2, [r3, #0]
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800892e:	1c9a      	adds	r2, r3, #2
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008938:	b29b      	uxth	r3, r3
 800893a:	3b02      	subs	r3, #2
 800893c:	b29a      	uxth	r2, r3
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008942:	e012      	b.n	800896a <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	330c      	adds	r3, #12
 800894e:	7812      	ldrb	r2, [r2, #0]
 8008950:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008956:	1c5a      	adds	r2, r3, #1
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008960:	b29b      	uxth	r3, r3
 8008962:	3b01      	subs	r3, #1
 8008964:	b29a      	uxth	r2, r3
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800896a:	2300      	movs	r3, #0
 800896c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	689b      	ldr	r3, [r3, #8]
 8008974:	f003 0301 	and.w	r3, r3, #1
 8008978:	2b01      	cmp	r3, #1
 800897a:	d148      	bne.n	8008a0e <HAL_SPI_TransmitReceive+0x3aa>
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008982:	b29b      	uxth	r3, r3
 8008984:	2b00      	cmp	r3, #0
 8008986:	d042      	beq.n	8008a0e <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800898e:	b29b      	uxth	r3, r3
 8008990:	2b01      	cmp	r3, #1
 8008992:	d923      	bls.n	80089dc <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	68da      	ldr	r2, [r3, #12]
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800899e:	b292      	uxth	r2, r2
 80089a0:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089a6:	1c9a      	adds	r2, r3, #2
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80089b2:	b29b      	uxth	r3, r3
 80089b4:	3b02      	subs	r3, #2
 80089b6:	b29a      	uxth	r2, r3
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80089c4:	b29b      	uxth	r3, r3
 80089c6:	2b01      	cmp	r3, #1
 80089c8:	d81f      	bhi.n	8008a0a <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	685a      	ldr	r2, [r3, #4]
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80089d8:	605a      	str	r2, [r3, #4]
 80089da:	e016      	b.n	8008a0a <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f103 020c 	add.w	r2, r3, #12
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089e8:	7812      	ldrb	r2, [r2, #0]
 80089ea:	b2d2      	uxtb	r2, r2
 80089ec:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089f2:	1c5a      	adds	r2, r3, #1
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80089fe:	b29b      	uxth	r3, r3
 8008a00:	3b01      	subs	r3, #1
 8008a02:	b29a      	uxth	r2, r3
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008a0e:	f7fa ffab 	bl	8003968 <HAL_GetTick>
 8008a12:	4602      	mov	r2, r0
 8008a14:	69fb      	ldr	r3, [r7, #28]
 8008a16:	1ad3      	subs	r3, r2, r3
 8008a18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a1a:	429a      	cmp	r2, r3
 8008a1c:	d803      	bhi.n	8008a26 <HAL_SPI_TransmitReceive+0x3c2>
 8008a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a24:	d102      	bne.n	8008a2c <HAL_SPI_TransmitReceive+0x3c8>
 8008a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d103      	bne.n	8008a34 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8008a2c:	2303      	movs	r3, #3
 8008a2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8008a32:	e01c      	b.n	8008a6e <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a38:	b29b      	uxth	r3, r3
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	f47f af5b 	bne.w	80088f6 <HAL_SPI_TransmitReceive+0x292>
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008a46:	b29b      	uxth	r3, r3
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	f47f af54 	bne.w	80088f6 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008a4e:	69fa      	ldr	r2, [r7, #28]
 8008a50:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008a52:	68f8      	ldr	r0, [r7, #12]
 8008a54:	f000 f990 	bl	8008d78 <SPI_EndRxTxTransaction>
 8008a58:	4603      	mov	r3, r0
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d006      	beq.n	8008a6c <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8008a5e:	2301      	movs	r3, #1
 8008a60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	2220      	movs	r2, #32
 8008a68:	661a      	str	r2, [r3, #96]	; 0x60
 8008a6a:	e000      	b.n	8008a6e <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8008a6c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	2201      	movs	r2, #1
 8008a72:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	2200      	movs	r2, #0
 8008a7a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008a7e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	3728      	adds	r7, #40	; 0x28
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}
	...

08008a8c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b088      	sub	sp, #32
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	60f8      	str	r0, [r7, #12]
 8008a94:	60b9      	str	r1, [r7, #8]
 8008a96:	603b      	str	r3, [r7, #0]
 8008a98:	4613      	mov	r3, r2
 8008a9a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008a9c:	f7fa ff64 	bl	8003968 <HAL_GetTick>
 8008aa0:	4602      	mov	r2, r0
 8008aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aa4:	1a9b      	subs	r3, r3, r2
 8008aa6:	683a      	ldr	r2, [r7, #0]
 8008aa8:	4413      	add	r3, r2
 8008aaa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008aac:	f7fa ff5c 	bl	8003968 <HAL_GetTick>
 8008ab0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008ab2:	4b39      	ldr	r3, [pc, #228]	; (8008b98 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	015b      	lsls	r3, r3, #5
 8008ab8:	0d1b      	lsrs	r3, r3, #20
 8008aba:	69fa      	ldr	r2, [r7, #28]
 8008abc:	fb02 f303 	mul.w	r3, r2, r3
 8008ac0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008ac2:	e054      	b.n	8008b6e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008aca:	d050      	beq.n	8008b6e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008acc:	f7fa ff4c 	bl	8003968 <HAL_GetTick>
 8008ad0:	4602      	mov	r2, r0
 8008ad2:	69bb      	ldr	r3, [r7, #24]
 8008ad4:	1ad3      	subs	r3, r2, r3
 8008ad6:	69fa      	ldr	r2, [r7, #28]
 8008ad8:	429a      	cmp	r2, r3
 8008ada:	d902      	bls.n	8008ae2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008adc:	69fb      	ldr	r3, [r7, #28]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d13d      	bne.n	8008b5e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	685a      	ldr	r2, [r3, #4]
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008af0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	685b      	ldr	r3, [r3, #4]
 8008af6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008afa:	d111      	bne.n	8008b20 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	689b      	ldr	r3, [r3, #8]
 8008b00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b04:	d004      	beq.n	8008b10 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	689b      	ldr	r3, [r3, #8]
 8008b0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b0e:	d107      	bne.n	8008b20 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	681a      	ldr	r2, [r3, #0]
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b1e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b28:	d10f      	bne.n	8008b4a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	681a      	ldr	r2, [r3, #0]
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008b38:	601a      	str	r2, [r3, #0]
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	681a      	ldr	r2, [r3, #0]
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008b48:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	2201      	movs	r2, #1
 8008b4e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	2200      	movs	r2, #0
 8008b56:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008b5a:	2303      	movs	r3, #3
 8008b5c:	e017      	b.n	8008b8e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008b5e:	697b      	ldr	r3, [r7, #20]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d101      	bne.n	8008b68 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008b64:	2300      	movs	r3, #0
 8008b66:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008b68:	697b      	ldr	r3, [r7, #20]
 8008b6a:	3b01      	subs	r3, #1
 8008b6c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	689a      	ldr	r2, [r3, #8]
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	4013      	ands	r3, r2
 8008b78:	68ba      	ldr	r2, [r7, #8]
 8008b7a:	429a      	cmp	r2, r3
 8008b7c:	bf0c      	ite	eq
 8008b7e:	2301      	moveq	r3, #1
 8008b80:	2300      	movne	r3, #0
 8008b82:	b2db      	uxtb	r3, r3
 8008b84:	461a      	mov	r2, r3
 8008b86:	79fb      	ldrb	r3, [r7, #7]
 8008b88:	429a      	cmp	r2, r3
 8008b8a:	d19b      	bne.n	8008ac4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008b8c:	2300      	movs	r3, #0
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	3720      	adds	r7, #32
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}
 8008b96:	bf00      	nop
 8008b98:	20000008 	.word	0x20000008

08008b9c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b08a      	sub	sp, #40	; 0x28
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	60f8      	str	r0, [r7, #12]
 8008ba4:	60b9      	str	r1, [r7, #8]
 8008ba6:	607a      	str	r2, [r7, #4]
 8008ba8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008baa:	2300      	movs	r3, #0
 8008bac:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008bae:	f7fa fedb 	bl	8003968 <HAL_GetTick>
 8008bb2:	4602      	mov	r2, r0
 8008bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bb6:	1a9b      	subs	r3, r3, r2
 8008bb8:	683a      	ldr	r2, [r7, #0]
 8008bba:	4413      	add	r3, r2
 8008bbc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8008bbe:	f7fa fed3 	bl	8003968 <HAL_GetTick>
 8008bc2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	330c      	adds	r3, #12
 8008bca:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008bcc:	4b3d      	ldr	r3, [pc, #244]	; (8008cc4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8008bce:	681a      	ldr	r2, [r3, #0]
 8008bd0:	4613      	mov	r3, r2
 8008bd2:	009b      	lsls	r3, r3, #2
 8008bd4:	4413      	add	r3, r2
 8008bd6:	00da      	lsls	r2, r3, #3
 8008bd8:	1ad3      	subs	r3, r2, r3
 8008bda:	0d1b      	lsrs	r3, r3, #20
 8008bdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bde:	fb02 f303 	mul.w	r3, r2, r3
 8008be2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008be4:	e060      	b.n	8008ca8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008bec:	d107      	bne.n	8008bfe <SPI_WaitFifoStateUntilTimeout+0x62>
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d104      	bne.n	8008bfe <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008bf4:	69fb      	ldr	r3, [r7, #28]
 8008bf6:	781b      	ldrb	r3, [r3, #0]
 8008bf8:	b2db      	uxtb	r3, r3
 8008bfa:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008bfc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c04:	d050      	beq.n	8008ca8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008c06:	f7fa feaf 	bl	8003968 <HAL_GetTick>
 8008c0a:	4602      	mov	r2, r0
 8008c0c:	6a3b      	ldr	r3, [r7, #32]
 8008c0e:	1ad3      	subs	r3, r2, r3
 8008c10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c12:	429a      	cmp	r2, r3
 8008c14:	d902      	bls.n	8008c1c <SPI_WaitFifoStateUntilTimeout+0x80>
 8008c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d13d      	bne.n	8008c98 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	685a      	ldr	r2, [r3, #4]
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008c2a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	685b      	ldr	r3, [r3, #4]
 8008c30:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008c34:	d111      	bne.n	8008c5a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	689b      	ldr	r3, [r3, #8]
 8008c3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c3e:	d004      	beq.n	8008c4a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	689b      	ldr	r3, [r3, #8]
 8008c44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c48:	d107      	bne.n	8008c5a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	681a      	ldr	r2, [r3, #0]
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008c58:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c62:	d10f      	bne.n	8008c84 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	681a      	ldr	r2, [r3, #0]
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008c72:	601a      	str	r2, [r3, #0]
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	681a      	ldr	r2, [r3, #0]
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008c82:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	2201      	movs	r2, #1
 8008c88:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	2200      	movs	r2, #0
 8008c90:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008c94:	2303      	movs	r3, #3
 8008c96:	e010      	b.n	8008cba <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008c98:	69bb      	ldr	r3, [r7, #24]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d101      	bne.n	8008ca2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8008ca2:	69bb      	ldr	r3, [r7, #24]
 8008ca4:	3b01      	subs	r3, #1
 8008ca6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	689a      	ldr	r2, [r3, #8]
 8008cae:	68bb      	ldr	r3, [r7, #8]
 8008cb0:	4013      	ands	r3, r2
 8008cb2:	687a      	ldr	r2, [r7, #4]
 8008cb4:	429a      	cmp	r2, r3
 8008cb6:	d196      	bne.n	8008be6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8008cb8:	2300      	movs	r3, #0
}
 8008cba:	4618      	mov	r0, r3
 8008cbc:	3728      	adds	r7, #40	; 0x28
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bd80      	pop	{r7, pc}
 8008cc2:	bf00      	nop
 8008cc4:	20000008 	.word	0x20000008

08008cc8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b086      	sub	sp, #24
 8008ccc:	af02      	add	r7, sp, #8
 8008cce:	60f8      	str	r0, [r7, #12]
 8008cd0:	60b9      	str	r1, [r7, #8]
 8008cd2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	685b      	ldr	r3, [r3, #4]
 8008cd8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008cdc:	d111      	bne.n	8008d02 <SPI_EndRxTransaction+0x3a>
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	689b      	ldr	r3, [r3, #8]
 8008ce2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ce6:	d004      	beq.n	8008cf2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	689b      	ldr	r3, [r3, #8]
 8008cec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008cf0:	d107      	bne.n	8008d02 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	681a      	ldr	r2, [r3, #0]
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d00:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	9300      	str	r3, [sp, #0]
 8008d06:	68bb      	ldr	r3, [r7, #8]
 8008d08:	2200      	movs	r2, #0
 8008d0a:	2180      	movs	r1, #128	; 0x80
 8008d0c:	68f8      	ldr	r0, [r7, #12]
 8008d0e:	f7ff febd 	bl	8008a8c <SPI_WaitFlagStateUntilTimeout>
 8008d12:	4603      	mov	r3, r0
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d007      	beq.n	8008d28 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d1c:	f043 0220 	orr.w	r2, r3, #32
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008d24:	2303      	movs	r3, #3
 8008d26:	e023      	b.n	8008d70 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	685b      	ldr	r3, [r3, #4]
 8008d2c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008d30:	d11d      	bne.n	8008d6e <SPI_EndRxTransaction+0xa6>
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	689b      	ldr	r3, [r3, #8]
 8008d36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d3a:	d004      	beq.n	8008d46 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	689b      	ldr	r3, [r3, #8]
 8008d40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d44:	d113      	bne.n	8008d6e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	9300      	str	r3, [sp, #0]
 8008d4a:	68bb      	ldr	r3, [r7, #8]
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008d52:	68f8      	ldr	r0, [r7, #12]
 8008d54:	f7ff ff22 	bl	8008b9c <SPI_WaitFifoStateUntilTimeout>
 8008d58:	4603      	mov	r3, r0
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d007      	beq.n	8008d6e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d62:	f043 0220 	orr.w	r2, r3, #32
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8008d6a:	2303      	movs	r3, #3
 8008d6c:	e000      	b.n	8008d70 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8008d6e:	2300      	movs	r3, #0
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	3710      	adds	r7, #16
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd80      	pop	{r7, pc}

08008d78 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b086      	sub	sp, #24
 8008d7c:	af02      	add	r7, sp, #8
 8008d7e:	60f8      	str	r0, [r7, #12]
 8008d80:	60b9      	str	r1, [r7, #8]
 8008d82:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	9300      	str	r3, [sp, #0]
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8008d90:	68f8      	ldr	r0, [r7, #12]
 8008d92:	f7ff ff03 	bl	8008b9c <SPI_WaitFifoStateUntilTimeout>
 8008d96:	4603      	mov	r3, r0
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d007      	beq.n	8008dac <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008da0:	f043 0220 	orr.w	r2, r3, #32
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008da8:	2303      	movs	r3, #3
 8008daa:	e027      	b.n	8008dfc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	9300      	str	r3, [sp, #0]
 8008db0:	68bb      	ldr	r3, [r7, #8]
 8008db2:	2200      	movs	r2, #0
 8008db4:	2180      	movs	r1, #128	; 0x80
 8008db6:	68f8      	ldr	r0, [r7, #12]
 8008db8:	f7ff fe68 	bl	8008a8c <SPI_WaitFlagStateUntilTimeout>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d007      	beq.n	8008dd2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008dc6:	f043 0220 	orr.w	r2, r3, #32
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008dce:	2303      	movs	r3, #3
 8008dd0:	e014      	b.n	8008dfc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	9300      	str	r3, [sp, #0]
 8008dd6:	68bb      	ldr	r3, [r7, #8]
 8008dd8:	2200      	movs	r2, #0
 8008dda:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008dde:	68f8      	ldr	r0, [r7, #12]
 8008de0:	f7ff fedc 	bl	8008b9c <SPI_WaitFifoStateUntilTimeout>
 8008de4:	4603      	mov	r3, r0
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d007      	beq.n	8008dfa <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008dee:	f043 0220 	orr.w	r2, r3, #32
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008df6:	2303      	movs	r3, #3
 8008df8:	e000      	b.n	8008dfc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008dfa:	2300      	movs	r3, #0
}
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	3710      	adds	r7, #16
 8008e00:	46bd      	mov	sp, r7
 8008e02:	bd80      	pop	{r7, pc}

08008e04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b082      	sub	sp, #8
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d101      	bne.n	8008e16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008e12:	2301      	movs	r3, #1
 8008e14:	e049      	b.n	8008eaa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e1c:	b2db      	uxtb	r3, r3
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d106      	bne.n	8008e30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2200      	movs	r2, #0
 8008e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	f7fa f894 	bl	8002f58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2202      	movs	r2, #2
 8008e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681a      	ldr	r2, [r3, #0]
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	3304      	adds	r3, #4
 8008e40:	4619      	mov	r1, r3
 8008e42:	4610      	mov	r0, r2
 8008e44:	f000 ffaa 	bl	8009d9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2201      	movs	r2, #1
 8008e4c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2201      	movs	r2, #1
 8008e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2201      	movs	r2, #1
 8008e5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2201      	movs	r2, #1
 8008e64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2201      	movs	r2, #1
 8008e6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2201      	movs	r2, #1
 8008e74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2201      	movs	r2, #1
 8008e7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2201      	movs	r2, #1
 8008e84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2201      	movs	r2, #1
 8008e8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2201      	movs	r2, #1
 8008e94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2201      	movs	r2, #1
 8008e9c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2201      	movs	r2, #1
 8008ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008ea8:	2300      	movs	r3, #0
}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	3708      	adds	r7, #8
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}
	...

08008eb4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	b085      	sub	sp, #20
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ec2:	b2db      	uxtb	r3, r3
 8008ec4:	2b01      	cmp	r3, #1
 8008ec6:	d001      	beq.n	8008ecc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008ec8:	2301      	movs	r3, #1
 8008eca:	e04f      	b.n	8008f6c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2202      	movs	r2, #2
 8008ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	68da      	ldr	r2, [r3, #12]
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f042 0201 	orr.w	r2, r2, #1
 8008ee2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	4a23      	ldr	r2, [pc, #140]	; (8008f78 <HAL_TIM_Base_Start_IT+0xc4>)
 8008eea:	4293      	cmp	r3, r2
 8008eec:	d01d      	beq.n	8008f2a <HAL_TIM_Base_Start_IT+0x76>
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ef6:	d018      	beq.n	8008f2a <HAL_TIM_Base_Start_IT+0x76>
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	4a1f      	ldr	r2, [pc, #124]	; (8008f7c <HAL_TIM_Base_Start_IT+0xc8>)
 8008efe:	4293      	cmp	r3, r2
 8008f00:	d013      	beq.n	8008f2a <HAL_TIM_Base_Start_IT+0x76>
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	4a1e      	ldr	r2, [pc, #120]	; (8008f80 <HAL_TIM_Base_Start_IT+0xcc>)
 8008f08:	4293      	cmp	r3, r2
 8008f0a:	d00e      	beq.n	8008f2a <HAL_TIM_Base_Start_IT+0x76>
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	4a1c      	ldr	r2, [pc, #112]	; (8008f84 <HAL_TIM_Base_Start_IT+0xd0>)
 8008f12:	4293      	cmp	r3, r2
 8008f14:	d009      	beq.n	8008f2a <HAL_TIM_Base_Start_IT+0x76>
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	4a1b      	ldr	r2, [pc, #108]	; (8008f88 <HAL_TIM_Base_Start_IT+0xd4>)
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	d004      	beq.n	8008f2a <HAL_TIM_Base_Start_IT+0x76>
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	4a19      	ldr	r2, [pc, #100]	; (8008f8c <HAL_TIM_Base_Start_IT+0xd8>)
 8008f26:	4293      	cmp	r3, r2
 8008f28:	d115      	bne.n	8008f56 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	689a      	ldr	r2, [r3, #8]
 8008f30:	4b17      	ldr	r3, [pc, #92]	; (8008f90 <HAL_TIM_Base_Start_IT+0xdc>)
 8008f32:	4013      	ands	r3, r2
 8008f34:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	2b06      	cmp	r3, #6
 8008f3a:	d015      	beq.n	8008f68 <HAL_TIM_Base_Start_IT+0xb4>
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f42:	d011      	beq.n	8008f68 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	681a      	ldr	r2, [r3, #0]
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f042 0201 	orr.w	r2, r2, #1
 8008f52:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f54:	e008      	b.n	8008f68 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	681a      	ldr	r2, [r3, #0]
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f042 0201 	orr.w	r2, r2, #1
 8008f64:	601a      	str	r2, [r3, #0]
 8008f66:	e000      	b.n	8008f6a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f68:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008f6a:	2300      	movs	r3, #0
}
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	3714      	adds	r7, #20
 8008f70:	46bd      	mov	sp, r7
 8008f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f76:	4770      	bx	lr
 8008f78:	40012c00 	.word	0x40012c00
 8008f7c:	40000400 	.word	0x40000400
 8008f80:	40000800 	.word	0x40000800
 8008f84:	40000c00 	.word	0x40000c00
 8008f88:	40013400 	.word	0x40013400
 8008f8c:	40014000 	.word	0x40014000
 8008f90:	00010007 	.word	0x00010007

08008f94 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008f94:	b480      	push	{r7}
 8008f96:	b083      	sub	sp, #12
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	68da      	ldr	r2, [r3, #12]
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	f022 0201 	bic.w	r2, r2, #1
 8008faa:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	6a1a      	ldr	r2, [r3, #32]
 8008fb2:	f241 1311 	movw	r3, #4369	; 0x1111
 8008fb6:	4013      	ands	r3, r2
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d10f      	bne.n	8008fdc <HAL_TIM_Base_Stop_IT+0x48>
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	6a1a      	ldr	r2, [r3, #32]
 8008fc2:	f240 4344 	movw	r3, #1092	; 0x444
 8008fc6:	4013      	ands	r3, r2
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d107      	bne.n	8008fdc <HAL_TIM_Base_Stop_IT+0x48>
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	681a      	ldr	r2, [r3, #0]
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f022 0201 	bic.w	r2, r2, #1
 8008fda:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2201      	movs	r2, #1
 8008fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008fe4:	2300      	movs	r3, #0
}
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	370c      	adds	r7, #12
 8008fea:	46bd      	mov	sp, r7
 8008fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff0:	4770      	bx	lr

08008ff2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008ff2:	b580      	push	{r7, lr}
 8008ff4:	b082      	sub	sp, #8
 8008ff6:	af00      	add	r7, sp, #0
 8008ff8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d101      	bne.n	8009004 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009000:	2301      	movs	r3, #1
 8009002:	e049      	b.n	8009098 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800900a:	b2db      	uxtb	r3, r3
 800900c:	2b00      	cmp	r3, #0
 800900e:	d106      	bne.n	800901e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2200      	movs	r2, #0
 8009014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	f7fa f8f7 	bl	800320c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	2202      	movs	r2, #2
 8009022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681a      	ldr	r2, [r3, #0]
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	3304      	adds	r3, #4
 800902e:	4619      	mov	r1, r3
 8009030:	4610      	mov	r0, r2
 8009032:	f000 feb3 	bl	8009d9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2201      	movs	r2, #1
 800903a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2201      	movs	r2, #1
 8009042:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2201      	movs	r2, #1
 800904a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2201      	movs	r2, #1
 8009052:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	2201      	movs	r2, #1
 800905a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2201      	movs	r2, #1
 8009062:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	2201      	movs	r2, #1
 800906a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	2201      	movs	r2, #1
 8009072:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2201      	movs	r2, #1
 800907a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2201      	movs	r2, #1
 8009082:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	2201      	movs	r2, #1
 800908a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2201      	movs	r2, #1
 8009092:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009096:	2300      	movs	r3, #0
}
 8009098:	4618      	mov	r0, r3
 800909a:	3708      	adds	r7, #8
 800909c:	46bd      	mov	sp, r7
 800909e:	bd80      	pop	{r7, pc}

080090a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b084      	sub	sp, #16
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
 80090a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d109      	bne.n	80090c4 <HAL_TIM_PWM_Start+0x24>
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80090b6:	b2db      	uxtb	r3, r3
 80090b8:	2b01      	cmp	r3, #1
 80090ba:	bf14      	ite	ne
 80090bc:	2301      	movne	r3, #1
 80090be:	2300      	moveq	r3, #0
 80090c0:	b2db      	uxtb	r3, r3
 80090c2:	e03c      	b.n	800913e <HAL_TIM_PWM_Start+0x9e>
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	2b04      	cmp	r3, #4
 80090c8:	d109      	bne.n	80090de <HAL_TIM_PWM_Start+0x3e>
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80090d0:	b2db      	uxtb	r3, r3
 80090d2:	2b01      	cmp	r3, #1
 80090d4:	bf14      	ite	ne
 80090d6:	2301      	movne	r3, #1
 80090d8:	2300      	moveq	r3, #0
 80090da:	b2db      	uxtb	r3, r3
 80090dc:	e02f      	b.n	800913e <HAL_TIM_PWM_Start+0x9e>
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	2b08      	cmp	r3, #8
 80090e2:	d109      	bne.n	80090f8 <HAL_TIM_PWM_Start+0x58>
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80090ea:	b2db      	uxtb	r3, r3
 80090ec:	2b01      	cmp	r3, #1
 80090ee:	bf14      	ite	ne
 80090f0:	2301      	movne	r3, #1
 80090f2:	2300      	moveq	r3, #0
 80090f4:	b2db      	uxtb	r3, r3
 80090f6:	e022      	b.n	800913e <HAL_TIM_PWM_Start+0x9e>
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	2b0c      	cmp	r3, #12
 80090fc:	d109      	bne.n	8009112 <HAL_TIM_PWM_Start+0x72>
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009104:	b2db      	uxtb	r3, r3
 8009106:	2b01      	cmp	r3, #1
 8009108:	bf14      	ite	ne
 800910a:	2301      	movne	r3, #1
 800910c:	2300      	moveq	r3, #0
 800910e:	b2db      	uxtb	r3, r3
 8009110:	e015      	b.n	800913e <HAL_TIM_PWM_Start+0x9e>
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	2b10      	cmp	r3, #16
 8009116:	d109      	bne.n	800912c <HAL_TIM_PWM_Start+0x8c>
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800911e:	b2db      	uxtb	r3, r3
 8009120:	2b01      	cmp	r3, #1
 8009122:	bf14      	ite	ne
 8009124:	2301      	movne	r3, #1
 8009126:	2300      	moveq	r3, #0
 8009128:	b2db      	uxtb	r3, r3
 800912a:	e008      	b.n	800913e <HAL_TIM_PWM_Start+0x9e>
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009132:	b2db      	uxtb	r3, r3
 8009134:	2b01      	cmp	r3, #1
 8009136:	bf14      	ite	ne
 8009138:	2301      	movne	r3, #1
 800913a:	2300      	moveq	r3, #0
 800913c:	b2db      	uxtb	r3, r3
 800913e:	2b00      	cmp	r3, #0
 8009140:	d001      	beq.n	8009146 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8009142:	2301      	movs	r3, #1
 8009144:	e09c      	b.n	8009280 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d104      	bne.n	8009156 <HAL_TIM_PWM_Start+0xb6>
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2202      	movs	r2, #2
 8009150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009154:	e023      	b.n	800919e <HAL_TIM_PWM_Start+0xfe>
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	2b04      	cmp	r3, #4
 800915a:	d104      	bne.n	8009166 <HAL_TIM_PWM_Start+0xc6>
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2202      	movs	r2, #2
 8009160:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009164:	e01b      	b.n	800919e <HAL_TIM_PWM_Start+0xfe>
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	2b08      	cmp	r3, #8
 800916a:	d104      	bne.n	8009176 <HAL_TIM_PWM_Start+0xd6>
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2202      	movs	r2, #2
 8009170:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009174:	e013      	b.n	800919e <HAL_TIM_PWM_Start+0xfe>
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	2b0c      	cmp	r3, #12
 800917a:	d104      	bne.n	8009186 <HAL_TIM_PWM_Start+0xe6>
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2202      	movs	r2, #2
 8009180:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009184:	e00b      	b.n	800919e <HAL_TIM_PWM_Start+0xfe>
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	2b10      	cmp	r3, #16
 800918a:	d104      	bne.n	8009196 <HAL_TIM_PWM_Start+0xf6>
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2202      	movs	r2, #2
 8009190:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009194:	e003      	b.n	800919e <HAL_TIM_PWM_Start+0xfe>
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2202      	movs	r2, #2
 800919a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	2201      	movs	r2, #1
 80091a4:	6839      	ldr	r1, [r7, #0]
 80091a6:	4618      	mov	r0, r3
 80091a8:	f001 fb26 	bl	800a7f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	4a35      	ldr	r2, [pc, #212]	; (8009288 <HAL_TIM_PWM_Start+0x1e8>)
 80091b2:	4293      	cmp	r3, r2
 80091b4:	d013      	beq.n	80091de <HAL_TIM_PWM_Start+0x13e>
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	4a34      	ldr	r2, [pc, #208]	; (800928c <HAL_TIM_PWM_Start+0x1ec>)
 80091bc:	4293      	cmp	r3, r2
 80091be:	d00e      	beq.n	80091de <HAL_TIM_PWM_Start+0x13e>
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	4a32      	ldr	r2, [pc, #200]	; (8009290 <HAL_TIM_PWM_Start+0x1f0>)
 80091c6:	4293      	cmp	r3, r2
 80091c8:	d009      	beq.n	80091de <HAL_TIM_PWM_Start+0x13e>
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	4a31      	ldr	r2, [pc, #196]	; (8009294 <HAL_TIM_PWM_Start+0x1f4>)
 80091d0:	4293      	cmp	r3, r2
 80091d2:	d004      	beq.n	80091de <HAL_TIM_PWM_Start+0x13e>
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	4a2f      	ldr	r2, [pc, #188]	; (8009298 <HAL_TIM_PWM_Start+0x1f8>)
 80091da:	4293      	cmp	r3, r2
 80091dc:	d101      	bne.n	80091e2 <HAL_TIM_PWM_Start+0x142>
 80091de:	2301      	movs	r3, #1
 80091e0:	e000      	b.n	80091e4 <HAL_TIM_PWM_Start+0x144>
 80091e2:	2300      	movs	r3, #0
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d007      	beq.n	80091f8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80091f6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	4a22      	ldr	r2, [pc, #136]	; (8009288 <HAL_TIM_PWM_Start+0x1e8>)
 80091fe:	4293      	cmp	r3, r2
 8009200:	d01d      	beq.n	800923e <HAL_TIM_PWM_Start+0x19e>
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800920a:	d018      	beq.n	800923e <HAL_TIM_PWM_Start+0x19e>
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	4a22      	ldr	r2, [pc, #136]	; (800929c <HAL_TIM_PWM_Start+0x1fc>)
 8009212:	4293      	cmp	r3, r2
 8009214:	d013      	beq.n	800923e <HAL_TIM_PWM_Start+0x19e>
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	4a21      	ldr	r2, [pc, #132]	; (80092a0 <HAL_TIM_PWM_Start+0x200>)
 800921c:	4293      	cmp	r3, r2
 800921e:	d00e      	beq.n	800923e <HAL_TIM_PWM_Start+0x19e>
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	4a1f      	ldr	r2, [pc, #124]	; (80092a4 <HAL_TIM_PWM_Start+0x204>)
 8009226:	4293      	cmp	r3, r2
 8009228:	d009      	beq.n	800923e <HAL_TIM_PWM_Start+0x19e>
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	4a17      	ldr	r2, [pc, #92]	; (800928c <HAL_TIM_PWM_Start+0x1ec>)
 8009230:	4293      	cmp	r3, r2
 8009232:	d004      	beq.n	800923e <HAL_TIM_PWM_Start+0x19e>
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	4a15      	ldr	r2, [pc, #84]	; (8009290 <HAL_TIM_PWM_Start+0x1f0>)
 800923a:	4293      	cmp	r3, r2
 800923c:	d115      	bne.n	800926a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	689a      	ldr	r2, [r3, #8]
 8009244:	4b18      	ldr	r3, [pc, #96]	; (80092a8 <HAL_TIM_PWM_Start+0x208>)
 8009246:	4013      	ands	r3, r2
 8009248:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	2b06      	cmp	r3, #6
 800924e:	d015      	beq.n	800927c <HAL_TIM_PWM_Start+0x1dc>
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009256:	d011      	beq.n	800927c <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	681a      	ldr	r2, [r3, #0]
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f042 0201 	orr.w	r2, r2, #1
 8009266:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009268:	e008      	b.n	800927c <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	681a      	ldr	r2, [r3, #0]
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f042 0201 	orr.w	r2, r2, #1
 8009278:	601a      	str	r2, [r3, #0]
 800927a:	e000      	b.n	800927e <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800927c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800927e:	2300      	movs	r3, #0
}
 8009280:	4618      	mov	r0, r3
 8009282:	3710      	adds	r7, #16
 8009284:	46bd      	mov	sp, r7
 8009286:	bd80      	pop	{r7, pc}
 8009288:	40012c00 	.word	0x40012c00
 800928c:	40013400 	.word	0x40013400
 8009290:	40014000 	.word	0x40014000
 8009294:	40014400 	.word	0x40014400
 8009298:	40014800 	.word	0x40014800
 800929c:	40000400 	.word	0x40000400
 80092a0:	40000800 	.word	0x40000800
 80092a4:	40000c00 	.word	0x40000c00
 80092a8:	00010007 	.word	0x00010007

080092ac <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b082      	sub	sp, #8
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d101      	bne.n	80092be <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80092ba:	2301      	movs	r3, #1
 80092bc:	e049      	b.n	8009352 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092c4:	b2db      	uxtb	r3, r3
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d106      	bne.n	80092d8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2200      	movs	r2, #0
 80092ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80092d2:	6878      	ldr	r0, [r7, #4]
 80092d4:	f000 f841 	bl	800935a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2202      	movs	r2, #2
 80092dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681a      	ldr	r2, [r3, #0]
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	3304      	adds	r3, #4
 80092e8:	4619      	mov	r1, r3
 80092ea:	4610      	mov	r0, r2
 80092ec:	f000 fd56 	bl	8009d9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2201      	movs	r2, #1
 80092f4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2201      	movs	r2, #1
 80092fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2201      	movs	r2, #1
 8009304:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2201      	movs	r2, #1
 800930c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2201      	movs	r2, #1
 8009314:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2201      	movs	r2, #1
 800931c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2201      	movs	r2, #1
 8009324:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2201      	movs	r2, #1
 800932c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2201      	movs	r2, #1
 8009334:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2201      	movs	r2, #1
 800933c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2201      	movs	r2, #1
 8009344:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2201      	movs	r2, #1
 800934c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009350:	2300      	movs	r3, #0
}
 8009352:	4618      	mov	r0, r3
 8009354:	3708      	adds	r7, #8
 8009356:	46bd      	mov	sp, r7
 8009358:	bd80      	pop	{r7, pc}

0800935a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800935a:	b480      	push	{r7}
 800935c:	b083      	sub	sp, #12
 800935e:	af00      	add	r7, sp, #0
 8009360:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8009362:	bf00      	nop
 8009364:	370c      	adds	r7, #12
 8009366:	46bd      	mov	sp, r7
 8009368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936c:	4770      	bx	lr
	...

08009370 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b084      	sub	sp, #16
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
 8009378:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800937a:	2300      	movs	r3, #0
 800937c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d104      	bne.n	800938e <HAL_TIM_IC_Start_IT+0x1e>
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800938a:	b2db      	uxtb	r3, r3
 800938c:	e023      	b.n	80093d6 <HAL_TIM_IC_Start_IT+0x66>
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	2b04      	cmp	r3, #4
 8009392:	d104      	bne.n	800939e <HAL_TIM_IC_Start_IT+0x2e>
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800939a:	b2db      	uxtb	r3, r3
 800939c:	e01b      	b.n	80093d6 <HAL_TIM_IC_Start_IT+0x66>
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	2b08      	cmp	r3, #8
 80093a2:	d104      	bne.n	80093ae <HAL_TIM_IC_Start_IT+0x3e>
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80093aa:	b2db      	uxtb	r3, r3
 80093ac:	e013      	b.n	80093d6 <HAL_TIM_IC_Start_IT+0x66>
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	2b0c      	cmp	r3, #12
 80093b2:	d104      	bne.n	80093be <HAL_TIM_IC_Start_IT+0x4e>
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80093ba:	b2db      	uxtb	r3, r3
 80093bc:	e00b      	b.n	80093d6 <HAL_TIM_IC_Start_IT+0x66>
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	2b10      	cmp	r3, #16
 80093c2:	d104      	bne.n	80093ce <HAL_TIM_IC_Start_IT+0x5e>
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80093ca:	b2db      	uxtb	r3, r3
 80093cc:	e003      	b.n	80093d6 <HAL_TIM_IC_Start_IT+0x66>
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80093d4:	b2db      	uxtb	r3, r3
 80093d6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d104      	bne.n	80093e8 <HAL_TIM_IC_Start_IT+0x78>
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80093e4:	b2db      	uxtb	r3, r3
 80093e6:	e013      	b.n	8009410 <HAL_TIM_IC_Start_IT+0xa0>
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	2b04      	cmp	r3, #4
 80093ec:	d104      	bne.n	80093f8 <HAL_TIM_IC_Start_IT+0x88>
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80093f4:	b2db      	uxtb	r3, r3
 80093f6:	e00b      	b.n	8009410 <HAL_TIM_IC_Start_IT+0xa0>
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	2b08      	cmp	r3, #8
 80093fc:	d104      	bne.n	8009408 <HAL_TIM_IC_Start_IT+0x98>
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009404:	b2db      	uxtb	r3, r3
 8009406:	e003      	b.n	8009410 <HAL_TIM_IC_Start_IT+0xa0>
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800940e:	b2db      	uxtb	r3, r3
 8009410:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8009412:	7bbb      	ldrb	r3, [r7, #14]
 8009414:	2b01      	cmp	r3, #1
 8009416:	d102      	bne.n	800941e <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8009418:	7b7b      	ldrb	r3, [r7, #13]
 800941a:	2b01      	cmp	r3, #1
 800941c:	d001      	beq.n	8009422 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800941e:	2301      	movs	r3, #1
 8009420:	e0dd      	b.n	80095de <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d104      	bne.n	8009432 <HAL_TIM_IC_Start_IT+0xc2>
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2202      	movs	r2, #2
 800942c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009430:	e023      	b.n	800947a <HAL_TIM_IC_Start_IT+0x10a>
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	2b04      	cmp	r3, #4
 8009436:	d104      	bne.n	8009442 <HAL_TIM_IC_Start_IT+0xd2>
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2202      	movs	r2, #2
 800943c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009440:	e01b      	b.n	800947a <HAL_TIM_IC_Start_IT+0x10a>
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	2b08      	cmp	r3, #8
 8009446:	d104      	bne.n	8009452 <HAL_TIM_IC_Start_IT+0xe2>
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2202      	movs	r2, #2
 800944c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009450:	e013      	b.n	800947a <HAL_TIM_IC_Start_IT+0x10a>
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	2b0c      	cmp	r3, #12
 8009456:	d104      	bne.n	8009462 <HAL_TIM_IC_Start_IT+0xf2>
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2202      	movs	r2, #2
 800945c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009460:	e00b      	b.n	800947a <HAL_TIM_IC_Start_IT+0x10a>
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	2b10      	cmp	r3, #16
 8009466:	d104      	bne.n	8009472 <HAL_TIM_IC_Start_IT+0x102>
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2202      	movs	r2, #2
 800946c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009470:	e003      	b.n	800947a <HAL_TIM_IC_Start_IT+0x10a>
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	2202      	movs	r2, #2
 8009476:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d104      	bne.n	800948a <HAL_TIM_IC_Start_IT+0x11a>
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2202      	movs	r2, #2
 8009484:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009488:	e013      	b.n	80094b2 <HAL_TIM_IC_Start_IT+0x142>
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	2b04      	cmp	r3, #4
 800948e:	d104      	bne.n	800949a <HAL_TIM_IC_Start_IT+0x12a>
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2202      	movs	r2, #2
 8009494:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009498:	e00b      	b.n	80094b2 <HAL_TIM_IC_Start_IT+0x142>
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	2b08      	cmp	r3, #8
 800949e:	d104      	bne.n	80094aa <HAL_TIM_IC_Start_IT+0x13a>
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2202      	movs	r2, #2
 80094a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80094a8:	e003      	b.n	80094b2 <HAL_TIM_IC_Start_IT+0x142>
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2202      	movs	r2, #2
 80094ae:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	2b0c      	cmp	r3, #12
 80094b6:	d841      	bhi.n	800953c <HAL_TIM_IC_Start_IT+0x1cc>
 80094b8:	a201      	add	r2, pc, #4	; (adr r2, 80094c0 <HAL_TIM_IC_Start_IT+0x150>)
 80094ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094be:	bf00      	nop
 80094c0:	080094f5 	.word	0x080094f5
 80094c4:	0800953d 	.word	0x0800953d
 80094c8:	0800953d 	.word	0x0800953d
 80094cc:	0800953d 	.word	0x0800953d
 80094d0:	08009507 	.word	0x08009507
 80094d4:	0800953d 	.word	0x0800953d
 80094d8:	0800953d 	.word	0x0800953d
 80094dc:	0800953d 	.word	0x0800953d
 80094e0:	08009519 	.word	0x08009519
 80094e4:	0800953d 	.word	0x0800953d
 80094e8:	0800953d 	.word	0x0800953d
 80094ec:	0800953d 	.word	0x0800953d
 80094f0:	0800952b 	.word	0x0800952b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	68da      	ldr	r2, [r3, #12]
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	f042 0202 	orr.w	r2, r2, #2
 8009502:	60da      	str	r2, [r3, #12]
      break;
 8009504:	e01d      	b.n	8009542 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	68da      	ldr	r2, [r3, #12]
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	f042 0204 	orr.w	r2, r2, #4
 8009514:	60da      	str	r2, [r3, #12]
      break;
 8009516:	e014      	b.n	8009542 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	68da      	ldr	r2, [r3, #12]
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f042 0208 	orr.w	r2, r2, #8
 8009526:	60da      	str	r2, [r3, #12]
      break;
 8009528:	e00b      	b.n	8009542 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	68da      	ldr	r2, [r3, #12]
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	f042 0210 	orr.w	r2, r2, #16
 8009538:	60da      	str	r2, [r3, #12]
      break;
 800953a:	e002      	b.n	8009542 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800953c:	2301      	movs	r3, #1
 800953e:	73fb      	strb	r3, [r7, #15]
      break;
 8009540:	bf00      	nop
  }

  if (status == HAL_OK)
 8009542:	7bfb      	ldrb	r3, [r7, #15]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d149      	bne.n	80095dc <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	2201      	movs	r2, #1
 800954e:	6839      	ldr	r1, [r7, #0]
 8009550:	4618      	mov	r0, r3
 8009552:	f001 f951 	bl	800a7f8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	4a23      	ldr	r2, [pc, #140]	; (80095e8 <HAL_TIM_IC_Start_IT+0x278>)
 800955c:	4293      	cmp	r3, r2
 800955e:	d01d      	beq.n	800959c <HAL_TIM_IC_Start_IT+0x22c>
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009568:	d018      	beq.n	800959c <HAL_TIM_IC_Start_IT+0x22c>
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	4a1f      	ldr	r2, [pc, #124]	; (80095ec <HAL_TIM_IC_Start_IT+0x27c>)
 8009570:	4293      	cmp	r3, r2
 8009572:	d013      	beq.n	800959c <HAL_TIM_IC_Start_IT+0x22c>
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	4a1d      	ldr	r2, [pc, #116]	; (80095f0 <HAL_TIM_IC_Start_IT+0x280>)
 800957a:	4293      	cmp	r3, r2
 800957c:	d00e      	beq.n	800959c <HAL_TIM_IC_Start_IT+0x22c>
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	4a1c      	ldr	r2, [pc, #112]	; (80095f4 <HAL_TIM_IC_Start_IT+0x284>)
 8009584:	4293      	cmp	r3, r2
 8009586:	d009      	beq.n	800959c <HAL_TIM_IC_Start_IT+0x22c>
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	4a1a      	ldr	r2, [pc, #104]	; (80095f8 <HAL_TIM_IC_Start_IT+0x288>)
 800958e:	4293      	cmp	r3, r2
 8009590:	d004      	beq.n	800959c <HAL_TIM_IC_Start_IT+0x22c>
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	4a19      	ldr	r2, [pc, #100]	; (80095fc <HAL_TIM_IC_Start_IT+0x28c>)
 8009598:	4293      	cmp	r3, r2
 800959a:	d115      	bne.n	80095c8 <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	689a      	ldr	r2, [r3, #8]
 80095a2:	4b17      	ldr	r3, [pc, #92]	; (8009600 <HAL_TIM_IC_Start_IT+0x290>)
 80095a4:	4013      	ands	r3, r2
 80095a6:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	2b06      	cmp	r3, #6
 80095ac:	d015      	beq.n	80095da <HAL_TIM_IC_Start_IT+0x26a>
 80095ae:	68bb      	ldr	r3, [r7, #8]
 80095b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80095b4:	d011      	beq.n	80095da <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	681a      	ldr	r2, [r3, #0]
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	f042 0201 	orr.w	r2, r2, #1
 80095c4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095c6:	e008      	b.n	80095da <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	681a      	ldr	r2, [r3, #0]
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	f042 0201 	orr.w	r2, r2, #1
 80095d6:	601a      	str	r2, [r3, #0]
 80095d8:	e000      	b.n	80095dc <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095da:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80095dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80095de:	4618      	mov	r0, r3
 80095e0:	3710      	adds	r7, #16
 80095e2:	46bd      	mov	sp, r7
 80095e4:	bd80      	pop	{r7, pc}
 80095e6:	bf00      	nop
 80095e8:	40012c00 	.word	0x40012c00
 80095ec:	40000400 	.word	0x40000400
 80095f0:	40000800 	.word	0x40000800
 80095f4:	40000c00 	.word	0x40000c00
 80095f8:	40013400 	.word	0x40013400
 80095fc:	40014000 	.word	0x40014000
 8009600:	00010007 	.word	0x00010007

08009604 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b082      	sub	sp, #8
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	691b      	ldr	r3, [r3, #16]
 8009612:	f003 0302 	and.w	r3, r3, #2
 8009616:	2b02      	cmp	r3, #2
 8009618:	d122      	bne.n	8009660 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	68db      	ldr	r3, [r3, #12]
 8009620:	f003 0302 	and.w	r3, r3, #2
 8009624:	2b02      	cmp	r3, #2
 8009626:	d11b      	bne.n	8009660 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	f06f 0202 	mvn.w	r2, #2
 8009630:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2201      	movs	r2, #1
 8009636:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	699b      	ldr	r3, [r3, #24]
 800963e:	f003 0303 	and.w	r3, r3, #3
 8009642:	2b00      	cmp	r3, #0
 8009644:	d003      	beq.n	800964e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009646:	6878      	ldr	r0, [r7, #4]
 8009648:	f000 fb89 	bl	8009d5e <HAL_TIM_IC_CaptureCallback>
 800964c:	e005      	b.n	800965a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800964e:	6878      	ldr	r0, [r7, #4]
 8009650:	f000 fb7b 	bl	8009d4a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009654:	6878      	ldr	r0, [r7, #4]
 8009656:	f000 fb8c 	bl	8009d72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2200      	movs	r2, #0
 800965e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	691b      	ldr	r3, [r3, #16]
 8009666:	f003 0304 	and.w	r3, r3, #4
 800966a:	2b04      	cmp	r3, #4
 800966c:	d122      	bne.n	80096b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	68db      	ldr	r3, [r3, #12]
 8009674:	f003 0304 	and.w	r3, r3, #4
 8009678:	2b04      	cmp	r3, #4
 800967a:	d11b      	bne.n	80096b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f06f 0204 	mvn.w	r2, #4
 8009684:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2202      	movs	r2, #2
 800968a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	699b      	ldr	r3, [r3, #24]
 8009692:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009696:	2b00      	cmp	r3, #0
 8009698:	d003      	beq.n	80096a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	f000 fb5f 	bl	8009d5e <HAL_TIM_IC_CaptureCallback>
 80096a0:	e005      	b.n	80096ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80096a2:	6878      	ldr	r0, [r7, #4]
 80096a4:	f000 fb51 	bl	8009d4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80096a8:	6878      	ldr	r0, [r7, #4]
 80096aa:	f000 fb62 	bl	8009d72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2200      	movs	r2, #0
 80096b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	691b      	ldr	r3, [r3, #16]
 80096ba:	f003 0308 	and.w	r3, r3, #8
 80096be:	2b08      	cmp	r3, #8
 80096c0:	d122      	bne.n	8009708 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	68db      	ldr	r3, [r3, #12]
 80096c8:	f003 0308 	and.w	r3, r3, #8
 80096cc:	2b08      	cmp	r3, #8
 80096ce:	d11b      	bne.n	8009708 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	f06f 0208 	mvn.w	r2, #8
 80096d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2204      	movs	r2, #4
 80096de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	69db      	ldr	r3, [r3, #28]
 80096e6:	f003 0303 	and.w	r3, r3, #3
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d003      	beq.n	80096f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80096ee:	6878      	ldr	r0, [r7, #4]
 80096f0:	f000 fb35 	bl	8009d5e <HAL_TIM_IC_CaptureCallback>
 80096f4:	e005      	b.n	8009702 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	f000 fb27 	bl	8009d4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80096fc:	6878      	ldr	r0, [r7, #4]
 80096fe:	f000 fb38 	bl	8009d72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2200      	movs	r2, #0
 8009706:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	691b      	ldr	r3, [r3, #16]
 800970e:	f003 0310 	and.w	r3, r3, #16
 8009712:	2b10      	cmp	r3, #16
 8009714:	d122      	bne.n	800975c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	68db      	ldr	r3, [r3, #12]
 800971c:	f003 0310 	and.w	r3, r3, #16
 8009720:	2b10      	cmp	r3, #16
 8009722:	d11b      	bne.n	800975c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	f06f 0210 	mvn.w	r2, #16
 800972c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	2208      	movs	r2, #8
 8009732:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	69db      	ldr	r3, [r3, #28]
 800973a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800973e:	2b00      	cmp	r3, #0
 8009740:	d003      	beq.n	800974a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f000 fb0b 	bl	8009d5e <HAL_TIM_IC_CaptureCallback>
 8009748:	e005      	b.n	8009756 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f000 fafd 	bl	8009d4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009750:	6878      	ldr	r0, [r7, #4]
 8009752:	f000 fb0e 	bl	8009d72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	2200      	movs	r2, #0
 800975a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	691b      	ldr	r3, [r3, #16]
 8009762:	f003 0301 	and.w	r3, r3, #1
 8009766:	2b01      	cmp	r3, #1
 8009768:	d10e      	bne.n	8009788 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	68db      	ldr	r3, [r3, #12]
 8009770:	f003 0301 	and.w	r3, r3, #1
 8009774:	2b01      	cmp	r3, #1
 8009776:	d107      	bne.n	8009788 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	f06f 0201 	mvn.w	r2, #1
 8009780:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009782:	6878      	ldr	r0, [r7, #4]
 8009784:	f000 fad7 	bl	8009d36 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	691b      	ldr	r3, [r3, #16]
 800978e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009792:	2b80      	cmp	r3, #128	; 0x80
 8009794:	d10e      	bne.n	80097b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	68db      	ldr	r3, [r3, #12]
 800979c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097a0:	2b80      	cmp	r3, #128	; 0x80
 80097a2:	d107      	bne.n	80097b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80097ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f001 f958 	bl	800aa64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	691b      	ldr	r3, [r3, #16]
 80097ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80097c2:	d10e      	bne.n	80097e2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	68db      	ldr	r3, [r3, #12]
 80097ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097ce:	2b80      	cmp	r3, #128	; 0x80
 80097d0:	d107      	bne.n	80097e2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80097da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80097dc:	6878      	ldr	r0, [r7, #4]
 80097de:	f001 f94b 	bl	800aa78 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	691b      	ldr	r3, [r3, #16]
 80097e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097ec:	2b40      	cmp	r3, #64	; 0x40
 80097ee:	d10e      	bne.n	800980e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	68db      	ldr	r3, [r3, #12]
 80097f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097fa:	2b40      	cmp	r3, #64	; 0x40
 80097fc:	d107      	bne.n	800980e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009806:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009808:	6878      	ldr	r0, [r7, #4]
 800980a:	f000 fabc 	bl	8009d86 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	691b      	ldr	r3, [r3, #16]
 8009814:	f003 0320 	and.w	r3, r3, #32
 8009818:	2b20      	cmp	r3, #32
 800981a:	d10e      	bne.n	800983a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	68db      	ldr	r3, [r3, #12]
 8009822:	f003 0320 	and.w	r3, r3, #32
 8009826:	2b20      	cmp	r3, #32
 8009828:	d107      	bne.n	800983a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	f06f 0220 	mvn.w	r2, #32
 8009832:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009834:	6878      	ldr	r0, [r7, #4]
 8009836:	f001 f90b 	bl	800aa50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800983a:	bf00      	nop
 800983c:	3708      	adds	r7, #8
 800983e:	46bd      	mov	sp, r7
 8009840:	bd80      	pop	{r7, pc}

08009842 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8009842:	b580      	push	{r7, lr}
 8009844:	b086      	sub	sp, #24
 8009846:	af00      	add	r7, sp, #0
 8009848:	60f8      	str	r0, [r7, #12]
 800984a:	60b9      	str	r1, [r7, #8]
 800984c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800984e:	2300      	movs	r3, #0
 8009850:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009858:	2b01      	cmp	r3, #1
 800985a:	d101      	bne.n	8009860 <HAL_TIM_IC_ConfigChannel+0x1e>
 800985c:	2302      	movs	r3, #2
 800985e:	e088      	b.n	8009972 <HAL_TIM_IC_ConfigChannel+0x130>
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	2201      	movs	r2, #1
 8009864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d11b      	bne.n	80098a6 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	6818      	ldr	r0, [r3, #0]
 8009872:	68bb      	ldr	r3, [r7, #8]
 8009874:	6819      	ldr	r1, [r3, #0]
 8009876:	68bb      	ldr	r3, [r7, #8]
 8009878:	685a      	ldr	r2, [r3, #4]
 800987a:	68bb      	ldr	r3, [r7, #8]
 800987c:	68db      	ldr	r3, [r3, #12]
 800987e:	f000 fdfd 	bl	800a47c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	699a      	ldr	r2, [r3, #24]
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	f022 020c 	bic.w	r2, r2, #12
 8009890:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	6999      	ldr	r1, [r3, #24]
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	689a      	ldr	r2, [r3, #8]
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	430a      	orrs	r2, r1
 80098a2:	619a      	str	r2, [r3, #24]
 80098a4:	e060      	b.n	8009968 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	2b04      	cmp	r3, #4
 80098aa:	d11c      	bne.n	80098e6 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	6818      	ldr	r0, [r3, #0]
 80098b0:	68bb      	ldr	r3, [r7, #8]
 80098b2:	6819      	ldr	r1, [r3, #0]
 80098b4:	68bb      	ldr	r3, [r7, #8]
 80098b6:	685a      	ldr	r2, [r3, #4]
 80098b8:	68bb      	ldr	r3, [r7, #8]
 80098ba:	68db      	ldr	r3, [r3, #12]
 80098bc:	f000 fe7b 	bl	800a5b6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	699a      	ldr	r2, [r3, #24]
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80098ce:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	6999      	ldr	r1, [r3, #24]
 80098d6:	68bb      	ldr	r3, [r7, #8]
 80098d8:	689b      	ldr	r3, [r3, #8]
 80098da:	021a      	lsls	r2, r3, #8
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	430a      	orrs	r2, r1
 80098e2:	619a      	str	r2, [r3, #24]
 80098e4:	e040      	b.n	8009968 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2b08      	cmp	r3, #8
 80098ea:	d11b      	bne.n	8009924 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	6818      	ldr	r0, [r3, #0]
 80098f0:	68bb      	ldr	r3, [r7, #8]
 80098f2:	6819      	ldr	r1, [r3, #0]
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	685a      	ldr	r2, [r3, #4]
 80098f8:	68bb      	ldr	r3, [r7, #8]
 80098fa:	68db      	ldr	r3, [r3, #12]
 80098fc:	f000 fec8 	bl	800a690 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	69da      	ldr	r2, [r3, #28]
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	f022 020c 	bic.w	r2, r2, #12
 800990e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	69d9      	ldr	r1, [r3, #28]
 8009916:	68bb      	ldr	r3, [r7, #8]
 8009918:	689a      	ldr	r2, [r3, #8]
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	430a      	orrs	r2, r1
 8009920:	61da      	str	r2, [r3, #28]
 8009922:	e021      	b.n	8009968 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	2b0c      	cmp	r3, #12
 8009928:	d11c      	bne.n	8009964 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	6818      	ldr	r0, [r3, #0]
 800992e:	68bb      	ldr	r3, [r7, #8]
 8009930:	6819      	ldr	r1, [r3, #0]
 8009932:	68bb      	ldr	r3, [r7, #8]
 8009934:	685a      	ldr	r2, [r3, #4]
 8009936:	68bb      	ldr	r3, [r7, #8]
 8009938:	68db      	ldr	r3, [r3, #12]
 800993a:	f000 fee5 	bl	800a708 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	69da      	ldr	r2, [r3, #28]
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800994c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	69d9      	ldr	r1, [r3, #28]
 8009954:	68bb      	ldr	r3, [r7, #8]
 8009956:	689b      	ldr	r3, [r3, #8]
 8009958:	021a      	lsls	r2, r3, #8
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	430a      	orrs	r2, r1
 8009960:	61da      	str	r2, [r3, #28]
 8009962:	e001      	b.n	8009968 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8009964:	2301      	movs	r3, #1
 8009966:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	2200      	movs	r2, #0
 800996c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009970:	7dfb      	ldrb	r3, [r7, #23]
}
 8009972:	4618      	mov	r0, r3
 8009974:	3718      	adds	r7, #24
 8009976:	46bd      	mov	sp, r7
 8009978:	bd80      	pop	{r7, pc}
	...

0800997c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b086      	sub	sp, #24
 8009980:	af00      	add	r7, sp, #0
 8009982:	60f8      	str	r0, [r7, #12]
 8009984:	60b9      	str	r1, [r7, #8]
 8009986:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009988:	2300      	movs	r3, #0
 800998a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009992:	2b01      	cmp	r3, #1
 8009994:	d101      	bne.n	800999a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009996:	2302      	movs	r3, #2
 8009998:	e0ff      	b.n	8009b9a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	2201      	movs	r2, #1
 800999e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2b14      	cmp	r3, #20
 80099a6:	f200 80f0 	bhi.w	8009b8a <HAL_TIM_PWM_ConfigChannel+0x20e>
 80099aa:	a201      	add	r2, pc, #4	; (adr r2, 80099b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80099ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099b0:	08009a05 	.word	0x08009a05
 80099b4:	08009b8b 	.word	0x08009b8b
 80099b8:	08009b8b 	.word	0x08009b8b
 80099bc:	08009b8b 	.word	0x08009b8b
 80099c0:	08009a45 	.word	0x08009a45
 80099c4:	08009b8b 	.word	0x08009b8b
 80099c8:	08009b8b 	.word	0x08009b8b
 80099cc:	08009b8b 	.word	0x08009b8b
 80099d0:	08009a87 	.word	0x08009a87
 80099d4:	08009b8b 	.word	0x08009b8b
 80099d8:	08009b8b 	.word	0x08009b8b
 80099dc:	08009b8b 	.word	0x08009b8b
 80099e0:	08009ac7 	.word	0x08009ac7
 80099e4:	08009b8b 	.word	0x08009b8b
 80099e8:	08009b8b 	.word	0x08009b8b
 80099ec:	08009b8b 	.word	0x08009b8b
 80099f0:	08009b09 	.word	0x08009b09
 80099f4:	08009b8b 	.word	0x08009b8b
 80099f8:	08009b8b 	.word	0x08009b8b
 80099fc:	08009b8b 	.word	0x08009b8b
 8009a00:	08009b49 	.word	0x08009b49
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	68b9      	ldr	r1, [r7, #8]
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	f000 fa60 	bl	8009ed0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	699a      	ldr	r2, [r3, #24]
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	f042 0208 	orr.w	r2, r2, #8
 8009a1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	699a      	ldr	r2, [r3, #24]
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	f022 0204 	bic.w	r2, r2, #4
 8009a2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	6999      	ldr	r1, [r3, #24]
 8009a36:	68bb      	ldr	r3, [r7, #8]
 8009a38:	691a      	ldr	r2, [r3, #16]
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	430a      	orrs	r2, r1
 8009a40:	619a      	str	r2, [r3, #24]
      break;
 8009a42:	e0a5      	b.n	8009b90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	68b9      	ldr	r1, [r7, #8]
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	f000 fad0 	bl	8009ff0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	699a      	ldr	r2, [r3, #24]
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009a5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	699a      	ldr	r2, [r3, #24]
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009a6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	6999      	ldr	r1, [r3, #24]
 8009a76:	68bb      	ldr	r3, [r7, #8]
 8009a78:	691b      	ldr	r3, [r3, #16]
 8009a7a:	021a      	lsls	r2, r3, #8
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	430a      	orrs	r2, r1
 8009a82:	619a      	str	r2, [r3, #24]
      break;
 8009a84:	e084      	b.n	8009b90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	68b9      	ldr	r1, [r7, #8]
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	f000 fb39 	bl	800a104 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	69da      	ldr	r2, [r3, #28]
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f042 0208 	orr.w	r2, r2, #8
 8009aa0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	69da      	ldr	r2, [r3, #28]
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	f022 0204 	bic.w	r2, r2, #4
 8009ab0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	69d9      	ldr	r1, [r3, #28]
 8009ab8:	68bb      	ldr	r3, [r7, #8]
 8009aba:	691a      	ldr	r2, [r3, #16]
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	430a      	orrs	r2, r1
 8009ac2:	61da      	str	r2, [r3, #28]
      break;
 8009ac4:	e064      	b.n	8009b90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	68b9      	ldr	r1, [r7, #8]
 8009acc:	4618      	mov	r0, r3
 8009ace:	f000 fba1 	bl	800a214 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	69da      	ldr	r2, [r3, #28]
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009ae0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	69da      	ldr	r2, [r3, #28]
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009af0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	69d9      	ldr	r1, [r3, #28]
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	691b      	ldr	r3, [r3, #16]
 8009afc:	021a      	lsls	r2, r3, #8
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	430a      	orrs	r2, r1
 8009b04:	61da      	str	r2, [r3, #28]
      break;
 8009b06:	e043      	b.n	8009b90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	68b9      	ldr	r1, [r7, #8]
 8009b0e:	4618      	mov	r0, r3
 8009b10:	f000 fbea 	bl	800a2e8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	f042 0208 	orr.w	r2, r2, #8
 8009b22:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	f022 0204 	bic.w	r2, r2, #4
 8009b32:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009b3a:	68bb      	ldr	r3, [r7, #8]
 8009b3c:	691a      	ldr	r2, [r3, #16]
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	430a      	orrs	r2, r1
 8009b44:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009b46:	e023      	b.n	8009b90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	68b9      	ldr	r1, [r7, #8]
 8009b4e:	4618      	mov	r0, r3
 8009b50:	f000 fc2e 	bl	800a3b0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009b62:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009b72:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009b7a:	68bb      	ldr	r3, [r7, #8]
 8009b7c:	691b      	ldr	r3, [r3, #16]
 8009b7e:	021a      	lsls	r2, r3, #8
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	430a      	orrs	r2, r1
 8009b86:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009b88:	e002      	b.n	8009b90 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009b8a:	2301      	movs	r3, #1
 8009b8c:	75fb      	strb	r3, [r7, #23]
      break;
 8009b8e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	2200      	movs	r2, #0
 8009b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009b98:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	3718      	adds	r7, #24
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	bd80      	pop	{r7, pc}
 8009ba2:	bf00      	nop

08009ba4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b084      	sub	sp, #16
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
 8009bac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009bae:	2300      	movs	r3, #0
 8009bb0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009bb8:	2b01      	cmp	r3, #1
 8009bba:	d101      	bne.n	8009bc0 <HAL_TIM_ConfigClockSource+0x1c>
 8009bbc:	2302      	movs	r3, #2
 8009bbe:	e0b6      	b.n	8009d2e <HAL_TIM_ConfigClockSource+0x18a>
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2201      	movs	r2, #1
 8009bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2202      	movs	r2, #2
 8009bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	689b      	ldr	r3, [r3, #8]
 8009bd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009bd8:	68bb      	ldr	r3, [r7, #8]
 8009bda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009bde:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009be2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009be4:	68bb      	ldr	r3, [r7, #8]
 8009be6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009bea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	68ba      	ldr	r2, [r7, #8]
 8009bf2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009bfc:	d03e      	beq.n	8009c7c <HAL_TIM_ConfigClockSource+0xd8>
 8009bfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c02:	f200 8087 	bhi.w	8009d14 <HAL_TIM_ConfigClockSource+0x170>
 8009c06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c0a:	f000 8086 	beq.w	8009d1a <HAL_TIM_ConfigClockSource+0x176>
 8009c0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c12:	d87f      	bhi.n	8009d14 <HAL_TIM_ConfigClockSource+0x170>
 8009c14:	2b70      	cmp	r3, #112	; 0x70
 8009c16:	d01a      	beq.n	8009c4e <HAL_TIM_ConfigClockSource+0xaa>
 8009c18:	2b70      	cmp	r3, #112	; 0x70
 8009c1a:	d87b      	bhi.n	8009d14 <HAL_TIM_ConfigClockSource+0x170>
 8009c1c:	2b60      	cmp	r3, #96	; 0x60
 8009c1e:	d050      	beq.n	8009cc2 <HAL_TIM_ConfigClockSource+0x11e>
 8009c20:	2b60      	cmp	r3, #96	; 0x60
 8009c22:	d877      	bhi.n	8009d14 <HAL_TIM_ConfigClockSource+0x170>
 8009c24:	2b50      	cmp	r3, #80	; 0x50
 8009c26:	d03c      	beq.n	8009ca2 <HAL_TIM_ConfigClockSource+0xfe>
 8009c28:	2b50      	cmp	r3, #80	; 0x50
 8009c2a:	d873      	bhi.n	8009d14 <HAL_TIM_ConfigClockSource+0x170>
 8009c2c:	2b40      	cmp	r3, #64	; 0x40
 8009c2e:	d058      	beq.n	8009ce2 <HAL_TIM_ConfigClockSource+0x13e>
 8009c30:	2b40      	cmp	r3, #64	; 0x40
 8009c32:	d86f      	bhi.n	8009d14 <HAL_TIM_ConfigClockSource+0x170>
 8009c34:	2b30      	cmp	r3, #48	; 0x30
 8009c36:	d064      	beq.n	8009d02 <HAL_TIM_ConfigClockSource+0x15e>
 8009c38:	2b30      	cmp	r3, #48	; 0x30
 8009c3a:	d86b      	bhi.n	8009d14 <HAL_TIM_ConfigClockSource+0x170>
 8009c3c:	2b20      	cmp	r3, #32
 8009c3e:	d060      	beq.n	8009d02 <HAL_TIM_ConfigClockSource+0x15e>
 8009c40:	2b20      	cmp	r3, #32
 8009c42:	d867      	bhi.n	8009d14 <HAL_TIM_ConfigClockSource+0x170>
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d05c      	beq.n	8009d02 <HAL_TIM_ConfigClockSource+0x15e>
 8009c48:	2b10      	cmp	r3, #16
 8009c4a:	d05a      	beq.n	8009d02 <HAL_TIM_ConfigClockSource+0x15e>
 8009c4c:	e062      	b.n	8009d14 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	6818      	ldr	r0, [r3, #0]
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	6899      	ldr	r1, [r3, #8]
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	685a      	ldr	r2, [r3, #4]
 8009c5a:	683b      	ldr	r3, [r7, #0]
 8009c5c:	68db      	ldr	r3, [r3, #12]
 8009c5e:	f000 fdab 	bl	800a7b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	689b      	ldr	r3, [r3, #8]
 8009c68:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009c6a:	68bb      	ldr	r3, [r7, #8]
 8009c6c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009c70:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	68ba      	ldr	r2, [r7, #8]
 8009c78:	609a      	str	r2, [r3, #8]
      break;
 8009c7a:	e04f      	b.n	8009d1c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	6818      	ldr	r0, [r3, #0]
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	6899      	ldr	r1, [r3, #8]
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	685a      	ldr	r2, [r3, #4]
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	68db      	ldr	r3, [r3, #12]
 8009c8c:	f000 fd94 	bl	800a7b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	689a      	ldr	r2, [r3, #8]
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009c9e:	609a      	str	r2, [r3, #8]
      break;
 8009ca0:	e03c      	b.n	8009d1c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	6818      	ldr	r0, [r3, #0]
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	6859      	ldr	r1, [r3, #4]
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	68db      	ldr	r3, [r3, #12]
 8009cae:	461a      	mov	r2, r3
 8009cb0:	f000 fc52 	bl	800a558 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	2150      	movs	r1, #80	; 0x50
 8009cba:	4618      	mov	r0, r3
 8009cbc:	f000 fd61 	bl	800a782 <TIM_ITRx_SetConfig>
      break;
 8009cc0:	e02c      	b.n	8009d1c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	6818      	ldr	r0, [r3, #0]
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	6859      	ldr	r1, [r3, #4]
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	68db      	ldr	r3, [r3, #12]
 8009cce:	461a      	mov	r2, r3
 8009cd0:	f000 fcae 	bl	800a630 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	2160      	movs	r1, #96	; 0x60
 8009cda:	4618      	mov	r0, r3
 8009cdc:	f000 fd51 	bl	800a782 <TIM_ITRx_SetConfig>
      break;
 8009ce0:	e01c      	b.n	8009d1c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	6818      	ldr	r0, [r3, #0]
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	6859      	ldr	r1, [r3, #4]
 8009cea:	683b      	ldr	r3, [r7, #0]
 8009cec:	68db      	ldr	r3, [r3, #12]
 8009cee:	461a      	mov	r2, r3
 8009cf0:	f000 fc32 	bl	800a558 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	2140      	movs	r1, #64	; 0x40
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	f000 fd41 	bl	800a782 <TIM_ITRx_SetConfig>
      break;
 8009d00:	e00c      	b.n	8009d1c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681a      	ldr	r2, [r3, #0]
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	4619      	mov	r1, r3
 8009d0c:	4610      	mov	r0, r2
 8009d0e:	f000 fd38 	bl	800a782 <TIM_ITRx_SetConfig>
      break;
 8009d12:	e003      	b.n	8009d1c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8009d14:	2301      	movs	r3, #1
 8009d16:	73fb      	strb	r3, [r7, #15]
      break;
 8009d18:	e000      	b.n	8009d1c <HAL_TIM_ConfigClockSource+0x178>
      break;
 8009d1a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2201      	movs	r2, #1
 8009d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2200      	movs	r2, #0
 8009d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d2e:	4618      	mov	r0, r3
 8009d30:	3710      	adds	r7, #16
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bd80      	pop	{r7, pc}

08009d36 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009d36:	b480      	push	{r7}
 8009d38:	b083      	sub	sp, #12
 8009d3a:	af00      	add	r7, sp, #0
 8009d3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009d3e:	bf00      	nop
 8009d40:	370c      	adds	r7, #12
 8009d42:	46bd      	mov	sp, r7
 8009d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d48:	4770      	bx	lr

08009d4a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009d4a:	b480      	push	{r7}
 8009d4c:	b083      	sub	sp, #12
 8009d4e:	af00      	add	r7, sp, #0
 8009d50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009d52:	bf00      	nop
 8009d54:	370c      	adds	r7, #12
 8009d56:	46bd      	mov	sp, r7
 8009d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5c:	4770      	bx	lr

08009d5e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009d5e:	b480      	push	{r7}
 8009d60:	b083      	sub	sp, #12
 8009d62:	af00      	add	r7, sp, #0
 8009d64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009d66:	bf00      	nop
 8009d68:	370c      	adds	r7, #12
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d70:	4770      	bx	lr

08009d72 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009d72:	b480      	push	{r7}
 8009d74:	b083      	sub	sp, #12
 8009d76:	af00      	add	r7, sp, #0
 8009d78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009d7a:	bf00      	nop
 8009d7c:	370c      	adds	r7, #12
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d84:	4770      	bx	lr

08009d86 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009d86:	b480      	push	{r7}
 8009d88:	b083      	sub	sp, #12
 8009d8a:	af00      	add	r7, sp, #0
 8009d8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009d8e:	bf00      	nop
 8009d90:	370c      	adds	r7, #12
 8009d92:	46bd      	mov	sp, r7
 8009d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d98:	4770      	bx	lr
	...

08009d9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009d9c:	b480      	push	{r7}
 8009d9e:	b085      	sub	sp, #20
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
 8009da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	4a40      	ldr	r2, [pc, #256]	; (8009eb0 <TIM_Base_SetConfig+0x114>)
 8009db0:	4293      	cmp	r3, r2
 8009db2:	d013      	beq.n	8009ddc <TIM_Base_SetConfig+0x40>
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009dba:	d00f      	beq.n	8009ddc <TIM_Base_SetConfig+0x40>
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	4a3d      	ldr	r2, [pc, #244]	; (8009eb4 <TIM_Base_SetConfig+0x118>)
 8009dc0:	4293      	cmp	r3, r2
 8009dc2:	d00b      	beq.n	8009ddc <TIM_Base_SetConfig+0x40>
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	4a3c      	ldr	r2, [pc, #240]	; (8009eb8 <TIM_Base_SetConfig+0x11c>)
 8009dc8:	4293      	cmp	r3, r2
 8009dca:	d007      	beq.n	8009ddc <TIM_Base_SetConfig+0x40>
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	4a3b      	ldr	r2, [pc, #236]	; (8009ebc <TIM_Base_SetConfig+0x120>)
 8009dd0:	4293      	cmp	r3, r2
 8009dd2:	d003      	beq.n	8009ddc <TIM_Base_SetConfig+0x40>
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	4a3a      	ldr	r2, [pc, #232]	; (8009ec0 <TIM_Base_SetConfig+0x124>)
 8009dd8:	4293      	cmp	r3, r2
 8009dda:	d108      	bne.n	8009dee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009de2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	685b      	ldr	r3, [r3, #4]
 8009de8:	68fa      	ldr	r2, [r7, #12]
 8009dea:	4313      	orrs	r3, r2
 8009dec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	4a2f      	ldr	r2, [pc, #188]	; (8009eb0 <TIM_Base_SetConfig+0x114>)
 8009df2:	4293      	cmp	r3, r2
 8009df4:	d01f      	beq.n	8009e36 <TIM_Base_SetConfig+0x9a>
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009dfc:	d01b      	beq.n	8009e36 <TIM_Base_SetConfig+0x9a>
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	4a2c      	ldr	r2, [pc, #176]	; (8009eb4 <TIM_Base_SetConfig+0x118>)
 8009e02:	4293      	cmp	r3, r2
 8009e04:	d017      	beq.n	8009e36 <TIM_Base_SetConfig+0x9a>
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	4a2b      	ldr	r2, [pc, #172]	; (8009eb8 <TIM_Base_SetConfig+0x11c>)
 8009e0a:	4293      	cmp	r3, r2
 8009e0c:	d013      	beq.n	8009e36 <TIM_Base_SetConfig+0x9a>
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	4a2a      	ldr	r2, [pc, #168]	; (8009ebc <TIM_Base_SetConfig+0x120>)
 8009e12:	4293      	cmp	r3, r2
 8009e14:	d00f      	beq.n	8009e36 <TIM_Base_SetConfig+0x9a>
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	4a29      	ldr	r2, [pc, #164]	; (8009ec0 <TIM_Base_SetConfig+0x124>)
 8009e1a:	4293      	cmp	r3, r2
 8009e1c:	d00b      	beq.n	8009e36 <TIM_Base_SetConfig+0x9a>
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	4a28      	ldr	r2, [pc, #160]	; (8009ec4 <TIM_Base_SetConfig+0x128>)
 8009e22:	4293      	cmp	r3, r2
 8009e24:	d007      	beq.n	8009e36 <TIM_Base_SetConfig+0x9a>
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	4a27      	ldr	r2, [pc, #156]	; (8009ec8 <TIM_Base_SetConfig+0x12c>)
 8009e2a:	4293      	cmp	r3, r2
 8009e2c:	d003      	beq.n	8009e36 <TIM_Base_SetConfig+0x9a>
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	4a26      	ldr	r2, [pc, #152]	; (8009ecc <TIM_Base_SetConfig+0x130>)
 8009e32:	4293      	cmp	r3, r2
 8009e34:	d108      	bne.n	8009e48 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009e3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	68db      	ldr	r3, [r3, #12]
 8009e42:	68fa      	ldr	r2, [r7, #12]
 8009e44:	4313      	orrs	r3, r2
 8009e46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	695b      	ldr	r3, [r3, #20]
 8009e52:	4313      	orrs	r3, r2
 8009e54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	68fa      	ldr	r2, [r7, #12]
 8009e5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	689a      	ldr	r2, [r3, #8]
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	681a      	ldr	r2, [r3, #0]
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	4a10      	ldr	r2, [pc, #64]	; (8009eb0 <TIM_Base_SetConfig+0x114>)
 8009e70:	4293      	cmp	r3, r2
 8009e72:	d00f      	beq.n	8009e94 <TIM_Base_SetConfig+0xf8>
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	4a12      	ldr	r2, [pc, #72]	; (8009ec0 <TIM_Base_SetConfig+0x124>)
 8009e78:	4293      	cmp	r3, r2
 8009e7a:	d00b      	beq.n	8009e94 <TIM_Base_SetConfig+0xf8>
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	4a11      	ldr	r2, [pc, #68]	; (8009ec4 <TIM_Base_SetConfig+0x128>)
 8009e80:	4293      	cmp	r3, r2
 8009e82:	d007      	beq.n	8009e94 <TIM_Base_SetConfig+0xf8>
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	4a10      	ldr	r2, [pc, #64]	; (8009ec8 <TIM_Base_SetConfig+0x12c>)
 8009e88:	4293      	cmp	r3, r2
 8009e8a:	d003      	beq.n	8009e94 <TIM_Base_SetConfig+0xf8>
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	4a0f      	ldr	r2, [pc, #60]	; (8009ecc <TIM_Base_SetConfig+0x130>)
 8009e90:	4293      	cmp	r3, r2
 8009e92:	d103      	bne.n	8009e9c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	691a      	ldr	r2, [r3, #16]
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2201      	movs	r2, #1
 8009ea0:	615a      	str	r2, [r3, #20]
}
 8009ea2:	bf00      	nop
 8009ea4:	3714      	adds	r7, #20
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eac:	4770      	bx	lr
 8009eae:	bf00      	nop
 8009eb0:	40012c00 	.word	0x40012c00
 8009eb4:	40000400 	.word	0x40000400
 8009eb8:	40000800 	.word	0x40000800
 8009ebc:	40000c00 	.word	0x40000c00
 8009ec0:	40013400 	.word	0x40013400
 8009ec4:	40014000 	.word	0x40014000
 8009ec8:	40014400 	.word	0x40014400
 8009ecc:	40014800 	.word	0x40014800

08009ed0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009ed0:	b480      	push	{r7}
 8009ed2:	b087      	sub	sp, #28
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
 8009ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	6a1b      	ldr	r3, [r3, #32]
 8009ede:	f023 0201 	bic.w	r2, r3, #1
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	6a1b      	ldr	r3, [r3, #32]
 8009eea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	685b      	ldr	r3, [r3, #4]
 8009ef0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	699b      	ldr	r3, [r3, #24]
 8009ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009efe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	f023 0303 	bic.w	r3, r3, #3
 8009f0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	68fa      	ldr	r2, [r7, #12]
 8009f12:	4313      	orrs	r3, r2
 8009f14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009f16:	697b      	ldr	r3, [r7, #20]
 8009f18:	f023 0302 	bic.w	r3, r3, #2
 8009f1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	689b      	ldr	r3, [r3, #8]
 8009f22:	697a      	ldr	r2, [r7, #20]
 8009f24:	4313      	orrs	r3, r2
 8009f26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	4a2c      	ldr	r2, [pc, #176]	; (8009fdc <TIM_OC1_SetConfig+0x10c>)
 8009f2c:	4293      	cmp	r3, r2
 8009f2e:	d00f      	beq.n	8009f50 <TIM_OC1_SetConfig+0x80>
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	4a2b      	ldr	r2, [pc, #172]	; (8009fe0 <TIM_OC1_SetConfig+0x110>)
 8009f34:	4293      	cmp	r3, r2
 8009f36:	d00b      	beq.n	8009f50 <TIM_OC1_SetConfig+0x80>
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	4a2a      	ldr	r2, [pc, #168]	; (8009fe4 <TIM_OC1_SetConfig+0x114>)
 8009f3c:	4293      	cmp	r3, r2
 8009f3e:	d007      	beq.n	8009f50 <TIM_OC1_SetConfig+0x80>
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	4a29      	ldr	r2, [pc, #164]	; (8009fe8 <TIM_OC1_SetConfig+0x118>)
 8009f44:	4293      	cmp	r3, r2
 8009f46:	d003      	beq.n	8009f50 <TIM_OC1_SetConfig+0x80>
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	4a28      	ldr	r2, [pc, #160]	; (8009fec <TIM_OC1_SetConfig+0x11c>)
 8009f4c:	4293      	cmp	r3, r2
 8009f4e:	d10c      	bne.n	8009f6a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009f50:	697b      	ldr	r3, [r7, #20]
 8009f52:	f023 0308 	bic.w	r3, r3, #8
 8009f56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009f58:	683b      	ldr	r3, [r7, #0]
 8009f5a:	68db      	ldr	r3, [r3, #12]
 8009f5c:	697a      	ldr	r2, [r7, #20]
 8009f5e:	4313      	orrs	r3, r2
 8009f60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009f62:	697b      	ldr	r3, [r7, #20]
 8009f64:	f023 0304 	bic.w	r3, r3, #4
 8009f68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	4a1b      	ldr	r2, [pc, #108]	; (8009fdc <TIM_OC1_SetConfig+0x10c>)
 8009f6e:	4293      	cmp	r3, r2
 8009f70:	d00f      	beq.n	8009f92 <TIM_OC1_SetConfig+0xc2>
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	4a1a      	ldr	r2, [pc, #104]	; (8009fe0 <TIM_OC1_SetConfig+0x110>)
 8009f76:	4293      	cmp	r3, r2
 8009f78:	d00b      	beq.n	8009f92 <TIM_OC1_SetConfig+0xc2>
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	4a19      	ldr	r2, [pc, #100]	; (8009fe4 <TIM_OC1_SetConfig+0x114>)
 8009f7e:	4293      	cmp	r3, r2
 8009f80:	d007      	beq.n	8009f92 <TIM_OC1_SetConfig+0xc2>
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	4a18      	ldr	r2, [pc, #96]	; (8009fe8 <TIM_OC1_SetConfig+0x118>)
 8009f86:	4293      	cmp	r3, r2
 8009f88:	d003      	beq.n	8009f92 <TIM_OC1_SetConfig+0xc2>
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	4a17      	ldr	r2, [pc, #92]	; (8009fec <TIM_OC1_SetConfig+0x11c>)
 8009f8e:	4293      	cmp	r3, r2
 8009f90:	d111      	bne.n	8009fb6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009f92:	693b      	ldr	r3, [r7, #16]
 8009f94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009f98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009f9a:	693b      	ldr	r3, [r7, #16]
 8009f9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009fa0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	695b      	ldr	r3, [r3, #20]
 8009fa6:	693a      	ldr	r2, [r7, #16]
 8009fa8:	4313      	orrs	r3, r2
 8009faa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	699b      	ldr	r3, [r3, #24]
 8009fb0:	693a      	ldr	r2, [r7, #16]
 8009fb2:	4313      	orrs	r3, r2
 8009fb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	693a      	ldr	r2, [r7, #16]
 8009fba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	68fa      	ldr	r2, [r7, #12]
 8009fc0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009fc2:	683b      	ldr	r3, [r7, #0]
 8009fc4:	685a      	ldr	r2, [r3, #4]
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	697a      	ldr	r2, [r7, #20]
 8009fce:	621a      	str	r2, [r3, #32]
}
 8009fd0:	bf00      	nop
 8009fd2:	371c      	adds	r7, #28
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fda:	4770      	bx	lr
 8009fdc:	40012c00 	.word	0x40012c00
 8009fe0:	40013400 	.word	0x40013400
 8009fe4:	40014000 	.word	0x40014000
 8009fe8:	40014400 	.word	0x40014400
 8009fec:	40014800 	.word	0x40014800

08009ff0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009ff0:	b480      	push	{r7}
 8009ff2:	b087      	sub	sp, #28
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
 8009ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6a1b      	ldr	r3, [r3, #32]
 8009ffe:	f023 0210 	bic.w	r2, r3, #16
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	6a1b      	ldr	r3, [r3, #32]
 800a00a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	685b      	ldr	r3, [r3, #4]
 800a010:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	699b      	ldr	r3, [r3, #24]
 800a016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a01e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a022:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a02a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	021b      	lsls	r3, r3, #8
 800a032:	68fa      	ldr	r2, [r7, #12]
 800a034:	4313      	orrs	r3, r2
 800a036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a038:	697b      	ldr	r3, [r7, #20]
 800a03a:	f023 0320 	bic.w	r3, r3, #32
 800a03e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	689b      	ldr	r3, [r3, #8]
 800a044:	011b      	lsls	r3, r3, #4
 800a046:	697a      	ldr	r2, [r7, #20]
 800a048:	4313      	orrs	r3, r2
 800a04a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	4a28      	ldr	r2, [pc, #160]	; (800a0f0 <TIM_OC2_SetConfig+0x100>)
 800a050:	4293      	cmp	r3, r2
 800a052:	d003      	beq.n	800a05c <TIM_OC2_SetConfig+0x6c>
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	4a27      	ldr	r2, [pc, #156]	; (800a0f4 <TIM_OC2_SetConfig+0x104>)
 800a058:	4293      	cmp	r3, r2
 800a05a:	d10d      	bne.n	800a078 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a05c:	697b      	ldr	r3, [r7, #20]
 800a05e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a062:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a064:	683b      	ldr	r3, [r7, #0]
 800a066:	68db      	ldr	r3, [r3, #12]
 800a068:	011b      	lsls	r3, r3, #4
 800a06a:	697a      	ldr	r2, [r7, #20]
 800a06c:	4313      	orrs	r3, r2
 800a06e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a070:	697b      	ldr	r3, [r7, #20]
 800a072:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a076:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	4a1d      	ldr	r2, [pc, #116]	; (800a0f0 <TIM_OC2_SetConfig+0x100>)
 800a07c:	4293      	cmp	r3, r2
 800a07e:	d00f      	beq.n	800a0a0 <TIM_OC2_SetConfig+0xb0>
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	4a1c      	ldr	r2, [pc, #112]	; (800a0f4 <TIM_OC2_SetConfig+0x104>)
 800a084:	4293      	cmp	r3, r2
 800a086:	d00b      	beq.n	800a0a0 <TIM_OC2_SetConfig+0xb0>
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	4a1b      	ldr	r2, [pc, #108]	; (800a0f8 <TIM_OC2_SetConfig+0x108>)
 800a08c:	4293      	cmp	r3, r2
 800a08e:	d007      	beq.n	800a0a0 <TIM_OC2_SetConfig+0xb0>
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	4a1a      	ldr	r2, [pc, #104]	; (800a0fc <TIM_OC2_SetConfig+0x10c>)
 800a094:	4293      	cmp	r3, r2
 800a096:	d003      	beq.n	800a0a0 <TIM_OC2_SetConfig+0xb0>
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	4a19      	ldr	r2, [pc, #100]	; (800a100 <TIM_OC2_SetConfig+0x110>)
 800a09c:	4293      	cmp	r3, r2
 800a09e:	d113      	bne.n	800a0c8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a0a0:	693b      	ldr	r3, [r7, #16]
 800a0a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a0a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a0a8:	693b      	ldr	r3, [r7, #16]
 800a0aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a0ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	695b      	ldr	r3, [r3, #20]
 800a0b4:	009b      	lsls	r3, r3, #2
 800a0b6:	693a      	ldr	r2, [r7, #16]
 800a0b8:	4313      	orrs	r3, r2
 800a0ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	699b      	ldr	r3, [r3, #24]
 800a0c0:	009b      	lsls	r3, r3, #2
 800a0c2:	693a      	ldr	r2, [r7, #16]
 800a0c4:	4313      	orrs	r3, r2
 800a0c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	693a      	ldr	r2, [r7, #16]
 800a0cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	68fa      	ldr	r2, [r7, #12]
 800a0d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a0d4:	683b      	ldr	r3, [r7, #0]
 800a0d6:	685a      	ldr	r2, [r3, #4]
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	697a      	ldr	r2, [r7, #20]
 800a0e0:	621a      	str	r2, [r3, #32]
}
 800a0e2:	bf00      	nop
 800a0e4:	371c      	adds	r7, #28
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ec:	4770      	bx	lr
 800a0ee:	bf00      	nop
 800a0f0:	40012c00 	.word	0x40012c00
 800a0f4:	40013400 	.word	0x40013400
 800a0f8:	40014000 	.word	0x40014000
 800a0fc:	40014400 	.word	0x40014400
 800a100:	40014800 	.word	0x40014800

0800a104 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a104:	b480      	push	{r7}
 800a106:	b087      	sub	sp, #28
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
 800a10c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	6a1b      	ldr	r3, [r3, #32]
 800a112:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	6a1b      	ldr	r3, [r3, #32]
 800a11e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	685b      	ldr	r3, [r3, #4]
 800a124:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	69db      	ldr	r3, [r3, #28]
 800a12a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a132:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a136:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	f023 0303 	bic.w	r3, r3, #3
 800a13e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	68fa      	ldr	r2, [r7, #12]
 800a146:	4313      	orrs	r3, r2
 800a148:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a14a:	697b      	ldr	r3, [r7, #20]
 800a14c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a150:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	689b      	ldr	r3, [r3, #8]
 800a156:	021b      	lsls	r3, r3, #8
 800a158:	697a      	ldr	r2, [r7, #20]
 800a15a:	4313      	orrs	r3, r2
 800a15c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	4a27      	ldr	r2, [pc, #156]	; (800a200 <TIM_OC3_SetConfig+0xfc>)
 800a162:	4293      	cmp	r3, r2
 800a164:	d003      	beq.n	800a16e <TIM_OC3_SetConfig+0x6a>
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	4a26      	ldr	r2, [pc, #152]	; (800a204 <TIM_OC3_SetConfig+0x100>)
 800a16a:	4293      	cmp	r3, r2
 800a16c:	d10d      	bne.n	800a18a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a16e:	697b      	ldr	r3, [r7, #20]
 800a170:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a174:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	68db      	ldr	r3, [r3, #12]
 800a17a:	021b      	lsls	r3, r3, #8
 800a17c:	697a      	ldr	r2, [r7, #20]
 800a17e:	4313      	orrs	r3, r2
 800a180:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a182:	697b      	ldr	r3, [r7, #20]
 800a184:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a188:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	4a1c      	ldr	r2, [pc, #112]	; (800a200 <TIM_OC3_SetConfig+0xfc>)
 800a18e:	4293      	cmp	r3, r2
 800a190:	d00f      	beq.n	800a1b2 <TIM_OC3_SetConfig+0xae>
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	4a1b      	ldr	r2, [pc, #108]	; (800a204 <TIM_OC3_SetConfig+0x100>)
 800a196:	4293      	cmp	r3, r2
 800a198:	d00b      	beq.n	800a1b2 <TIM_OC3_SetConfig+0xae>
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	4a1a      	ldr	r2, [pc, #104]	; (800a208 <TIM_OC3_SetConfig+0x104>)
 800a19e:	4293      	cmp	r3, r2
 800a1a0:	d007      	beq.n	800a1b2 <TIM_OC3_SetConfig+0xae>
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	4a19      	ldr	r2, [pc, #100]	; (800a20c <TIM_OC3_SetConfig+0x108>)
 800a1a6:	4293      	cmp	r3, r2
 800a1a8:	d003      	beq.n	800a1b2 <TIM_OC3_SetConfig+0xae>
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	4a18      	ldr	r2, [pc, #96]	; (800a210 <TIM_OC3_SetConfig+0x10c>)
 800a1ae:	4293      	cmp	r3, r2
 800a1b0:	d113      	bne.n	800a1da <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a1b2:	693b      	ldr	r3, [r7, #16]
 800a1b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a1b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a1ba:	693b      	ldr	r3, [r7, #16]
 800a1bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a1c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	695b      	ldr	r3, [r3, #20]
 800a1c6:	011b      	lsls	r3, r3, #4
 800a1c8:	693a      	ldr	r2, [r7, #16]
 800a1ca:	4313      	orrs	r3, r2
 800a1cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a1ce:	683b      	ldr	r3, [r7, #0]
 800a1d0:	699b      	ldr	r3, [r3, #24]
 800a1d2:	011b      	lsls	r3, r3, #4
 800a1d4:	693a      	ldr	r2, [r7, #16]
 800a1d6:	4313      	orrs	r3, r2
 800a1d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	693a      	ldr	r2, [r7, #16]
 800a1de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	68fa      	ldr	r2, [r7, #12]
 800a1e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a1e6:	683b      	ldr	r3, [r7, #0]
 800a1e8:	685a      	ldr	r2, [r3, #4]
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	697a      	ldr	r2, [r7, #20]
 800a1f2:	621a      	str	r2, [r3, #32]
}
 800a1f4:	bf00      	nop
 800a1f6:	371c      	adds	r7, #28
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fe:	4770      	bx	lr
 800a200:	40012c00 	.word	0x40012c00
 800a204:	40013400 	.word	0x40013400
 800a208:	40014000 	.word	0x40014000
 800a20c:	40014400 	.word	0x40014400
 800a210:	40014800 	.word	0x40014800

0800a214 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a214:	b480      	push	{r7}
 800a216:	b087      	sub	sp, #28
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
 800a21c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	6a1b      	ldr	r3, [r3, #32]
 800a222:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	6a1b      	ldr	r3, [r3, #32]
 800a22e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	685b      	ldr	r3, [r3, #4]
 800a234:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	69db      	ldr	r3, [r3, #28]
 800a23a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a242:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a246:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a24e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a250:	683b      	ldr	r3, [r7, #0]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	021b      	lsls	r3, r3, #8
 800a256:	68fa      	ldr	r2, [r7, #12]
 800a258:	4313      	orrs	r3, r2
 800a25a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a25c:	693b      	ldr	r3, [r7, #16]
 800a25e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a262:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	689b      	ldr	r3, [r3, #8]
 800a268:	031b      	lsls	r3, r3, #12
 800a26a:	693a      	ldr	r2, [r7, #16]
 800a26c:	4313      	orrs	r3, r2
 800a26e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	4a18      	ldr	r2, [pc, #96]	; (800a2d4 <TIM_OC4_SetConfig+0xc0>)
 800a274:	4293      	cmp	r3, r2
 800a276:	d00f      	beq.n	800a298 <TIM_OC4_SetConfig+0x84>
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	4a17      	ldr	r2, [pc, #92]	; (800a2d8 <TIM_OC4_SetConfig+0xc4>)
 800a27c:	4293      	cmp	r3, r2
 800a27e:	d00b      	beq.n	800a298 <TIM_OC4_SetConfig+0x84>
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	4a16      	ldr	r2, [pc, #88]	; (800a2dc <TIM_OC4_SetConfig+0xc8>)
 800a284:	4293      	cmp	r3, r2
 800a286:	d007      	beq.n	800a298 <TIM_OC4_SetConfig+0x84>
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	4a15      	ldr	r2, [pc, #84]	; (800a2e0 <TIM_OC4_SetConfig+0xcc>)
 800a28c:	4293      	cmp	r3, r2
 800a28e:	d003      	beq.n	800a298 <TIM_OC4_SetConfig+0x84>
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	4a14      	ldr	r2, [pc, #80]	; (800a2e4 <TIM_OC4_SetConfig+0xd0>)
 800a294:	4293      	cmp	r3, r2
 800a296:	d109      	bne.n	800a2ac <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a298:	697b      	ldr	r3, [r7, #20]
 800a29a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a29e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	695b      	ldr	r3, [r3, #20]
 800a2a4:	019b      	lsls	r3, r3, #6
 800a2a6:	697a      	ldr	r2, [r7, #20]
 800a2a8:	4313      	orrs	r3, r2
 800a2aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	697a      	ldr	r2, [r7, #20]
 800a2b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	68fa      	ldr	r2, [r7, #12]
 800a2b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a2b8:	683b      	ldr	r3, [r7, #0]
 800a2ba:	685a      	ldr	r2, [r3, #4]
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	693a      	ldr	r2, [r7, #16]
 800a2c4:	621a      	str	r2, [r3, #32]
}
 800a2c6:	bf00      	nop
 800a2c8:	371c      	adds	r7, #28
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d0:	4770      	bx	lr
 800a2d2:	bf00      	nop
 800a2d4:	40012c00 	.word	0x40012c00
 800a2d8:	40013400 	.word	0x40013400
 800a2dc:	40014000 	.word	0x40014000
 800a2e0:	40014400 	.word	0x40014400
 800a2e4:	40014800 	.word	0x40014800

0800a2e8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a2e8:	b480      	push	{r7}
 800a2ea:	b087      	sub	sp, #28
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
 800a2f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	6a1b      	ldr	r3, [r3, #32]
 800a2f6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	6a1b      	ldr	r3, [r3, #32]
 800a302:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	685b      	ldr	r3, [r3, #4]
 800a308:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a30e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a316:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a31a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	68fa      	ldr	r2, [r7, #12]
 800a322:	4313      	orrs	r3, r2
 800a324:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a326:	693b      	ldr	r3, [r7, #16]
 800a328:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a32c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	689b      	ldr	r3, [r3, #8]
 800a332:	041b      	lsls	r3, r3, #16
 800a334:	693a      	ldr	r2, [r7, #16]
 800a336:	4313      	orrs	r3, r2
 800a338:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	4a17      	ldr	r2, [pc, #92]	; (800a39c <TIM_OC5_SetConfig+0xb4>)
 800a33e:	4293      	cmp	r3, r2
 800a340:	d00f      	beq.n	800a362 <TIM_OC5_SetConfig+0x7a>
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	4a16      	ldr	r2, [pc, #88]	; (800a3a0 <TIM_OC5_SetConfig+0xb8>)
 800a346:	4293      	cmp	r3, r2
 800a348:	d00b      	beq.n	800a362 <TIM_OC5_SetConfig+0x7a>
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	4a15      	ldr	r2, [pc, #84]	; (800a3a4 <TIM_OC5_SetConfig+0xbc>)
 800a34e:	4293      	cmp	r3, r2
 800a350:	d007      	beq.n	800a362 <TIM_OC5_SetConfig+0x7a>
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	4a14      	ldr	r2, [pc, #80]	; (800a3a8 <TIM_OC5_SetConfig+0xc0>)
 800a356:	4293      	cmp	r3, r2
 800a358:	d003      	beq.n	800a362 <TIM_OC5_SetConfig+0x7a>
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	4a13      	ldr	r2, [pc, #76]	; (800a3ac <TIM_OC5_SetConfig+0xc4>)
 800a35e:	4293      	cmp	r3, r2
 800a360:	d109      	bne.n	800a376 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a362:	697b      	ldr	r3, [r7, #20]
 800a364:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a368:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a36a:	683b      	ldr	r3, [r7, #0]
 800a36c:	695b      	ldr	r3, [r3, #20]
 800a36e:	021b      	lsls	r3, r3, #8
 800a370:	697a      	ldr	r2, [r7, #20]
 800a372:	4313      	orrs	r3, r2
 800a374:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	697a      	ldr	r2, [r7, #20]
 800a37a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	68fa      	ldr	r2, [r7, #12]
 800a380:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	685a      	ldr	r2, [r3, #4]
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	693a      	ldr	r2, [r7, #16]
 800a38e:	621a      	str	r2, [r3, #32]
}
 800a390:	bf00      	nop
 800a392:	371c      	adds	r7, #28
 800a394:	46bd      	mov	sp, r7
 800a396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39a:	4770      	bx	lr
 800a39c:	40012c00 	.word	0x40012c00
 800a3a0:	40013400 	.word	0x40013400
 800a3a4:	40014000 	.word	0x40014000
 800a3a8:	40014400 	.word	0x40014400
 800a3ac:	40014800 	.word	0x40014800

0800a3b0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a3b0:	b480      	push	{r7}
 800a3b2:	b087      	sub	sp, #28
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
 800a3b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	6a1b      	ldr	r3, [r3, #32]
 800a3be:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	6a1b      	ldr	r3, [r3, #32]
 800a3ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	685b      	ldr	r3, [r3, #4]
 800a3d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a3de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a3e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a3e4:	683b      	ldr	r3, [r7, #0]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	021b      	lsls	r3, r3, #8
 800a3ea:	68fa      	ldr	r2, [r7, #12]
 800a3ec:	4313      	orrs	r3, r2
 800a3ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a3f0:	693b      	ldr	r3, [r7, #16]
 800a3f2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a3f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a3f8:	683b      	ldr	r3, [r7, #0]
 800a3fa:	689b      	ldr	r3, [r3, #8]
 800a3fc:	051b      	lsls	r3, r3, #20
 800a3fe:	693a      	ldr	r2, [r7, #16]
 800a400:	4313      	orrs	r3, r2
 800a402:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	4a18      	ldr	r2, [pc, #96]	; (800a468 <TIM_OC6_SetConfig+0xb8>)
 800a408:	4293      	cmp	r3, r2
 800a40a:	d00f      	beq.n	800a42c <TIM_OC6_SetConfig+0x7c>
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	4a17      	ldr	r2, [pc, #92]	; (800a46c <TIM_OC6_SetConfig+0xbc>)
 800a410:	4293      	cmp	r3, r2
 800a412:	d00b      	beq.n	800a42c <TIM_OC6_SetConfig+0x7c>
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	4a16      	ldr	r2, [pc, #88]	; (800a470 <TIM_OC6_SetConfig+0xc0>)
 800a418:	4293      	cmp	r3, r2
 800a41a:	d007      	beq.n	800a42c <TIM_OC6_SetConfig+0x7c>
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	4a15      	ldr	r2, [pc, #84]	; (800a474 <TIM_OC6_SetConfig+0xc4>)
 800a420:	4293      	cmp	r3, r2
 800a422:	d003      	beq.n	800a42c <TIM_OC6_SetConfig+0x7c>
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	4a14      	ldr	r2, [pc, #80]	; (800a478 <TIM_OC6_SetConfig+0xc8>)
 800a428:	4293      	cmp	r3, r2
 800a42a:	d109      	bne.n	800a440 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a42c:	697b      	ldr	r3, [r7, #20]
 800a42e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a432:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a434:	683b      	ldr	r3, [r7, #0]
 800a436:	695b      	ldr	r3, [r3, #20]
 800a438:	029b      	lsls	r3, r3, #10
 800a43a:	697a      	ldr	r2, [r7, #20]
 800a43c:	4313      	orrs	r3, r2
 800a43e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	697a      	ldr	r2, [r7, #20]
 800a444:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	68fa      	ldr	r2, [r7, #12]
 800a44a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a44c:	683b      	ldr	r3, [r7, #0]
 800a44e:	685a      	ldr	r2, [r3, #4]
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	693a      	ldr	r2, [r7, #16]
 800a458:	621a      	str	r2, [r3, #32]
}
 800a45a:	bf00      	nop
 800a45c:	371c      	adds	r7, #28
 800a45e:	46bd      	mov	sp, r7
 800a460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a464:	4770      	bx	lr
 800a466:	bf00      	nop
 800a468:	40012c00 	.word	0x40012c00
 800a46c:	40013400 	.word	0x40013400
 800a470:	40014000 	.word	0x40014000
 800a474:	40014400 	.word	0x40014400
 800a478:	40014800 	.word	0x40014800

0800a47c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800a47c:	b480      	push	{r7}
 800a47e:	b087      	sub	sp, #28
 800a480:	af00      	add	r7, sp, #0
 800a482:	60f8      	str	r0, [r7, #12]
 800a484:	60b9      	str	r1, [r7, #8]
 800a486:	607a      	str	r2, [r7, #4]
 800a488:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	6a1b      	ldr	r3, [r3, #32]
 800a48e:	f023 0201 	bic.w	r2, r3, #1
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	699b      	ldr	r3, [r3, #24]
 800a49a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	6a1b      	ldr	r3, [r3, #32]
 800a4a0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	4a26      	ldr	r2, [pc, #152]	; (800a540 <TIM_TI1_SetConfig+0xc4>)
 800a4a6:	4293      	cmp	r3, r2
 800a4a8:	d017      	beq.n	800a4da <TIM_TI1_SetConfig+0x5e>
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a4b0:	d013      	beq.n	800a4da <TIM_TI1_SetConfig+0x5e>
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	4a23      	ldr	r2, [pc, #140]	; (800a544 <TIM_TI1_SetConfig+0xc8>)
 800a4b6:	4293      	cmp	r3, r2
 800a4b8:	d00f      	beq.n	800a4da <TIM_TI1_SetConfig+0x5e>
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	4a22      	ldr	r2, [pc, #136]	; (800a548 <TIM_TI1_SetConfig+0xcc>)
 800a4be:	4293      	cmp	r3, r2
 800a4c0:	d00b      	beq.n	800a4da <TIM_TI1_SetConfig+0x5e>
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	4a21      	ldr	r2, [pc, #132]	; (800a54c <TIM_TI1_SetConfig+0xd0>)
 800a4c6:	4293      	cmp	r3, r2
 800a4c8:	d007      	beq.n	800a4da <TIM_TI1_SetConfig+0x5e>
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	4a20      	ldr	r2, [pc, #128]	; (800a550 <TIM_TI1_SetConfig+0xd4>)
 800a4ce:	4293      	cmp	r3, r2
 800a4d0:	d003      	beq.n	800a4da <TIM_TI1_SetConfig+0x5e>
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	4a1f      	ldr	r2, [pc, #124]	; (800a554 <TIM_TI1_SetConfig+0xd8>)
 800a4d6:	4293      	cmp	r3, r2
 800a4d8:	d101      	bne.n	800a4de <TIM_TI1_SetConfig+0x62>
 800a4da:	2301      	movs	r3, #1
 800a4dc:	e000      	b.n	800a4e0 <TIM_TI1_SetConfig+0x64>
 800a4de:	2300      	movs	r3, #0
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d008      	beq.n	800a4f6 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800a4e4:	697b      	ldr	r3, [r7, #20]
 800a4e6:	f023 0303 	bic.w	r3, r3, #3
 800a4ea:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800a4ec:	697a      	ldr	r2, [r7, #20]
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	4313      	orrs	r3, r2
 800a4f2:	617b      	str	r3, [r7, #20]
 800a4f4:	e003      	b.n	800a4fe <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800a4f6:	697b      	ldr	r3, [r7, #20]
 800a4f8:	f043 0301 	orr.w	r3, r3, #1
 800a4fc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a4fe:	697b      	ldr	r3, [r7, #20]
 800a500:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a504:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800a506:	683b      	ldr	r3, [r7, #0]
 800a508:	011b      	lsls	r3, r3, #4
 800a50a:	b2db      	uxtb	r3, r3
 800a50c:	697a      	ldr	r2, [r7, #20]
 800a50e:	4313      	orrs	r3, r2
 800a510:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a512:	693b      	ldr	r3, [r7, #16]
 800a514:	f023 030a 	bic.w	r3, r3, #10
 800a518:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800a51a:	68bb      	ldr	r3, [r7, #8]
 800a51c:	f003 030a 	and.w	r3, r3, #10
 800a520:	693a      	ldr	r2, [r7, #16]
 800a522:	4313      	orrs	r3, r2
 800a524:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	697a      	ldr	r2, [r7, #20]
 800a52a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	693a      	ldr	r2, [r7, #16]
 800a530:	621a      	str	r2, [r3, #32]
}
 800a532:	bf00      	nop
 800a534:	371c      	adds	r7, #28
 800a536:	46bd      	mov	sp, r7
 800a538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53c:	4770      	bx	lr
 800a53e:	bf00      	nop
 800a540:	40012c00 	.word	0x40012c00
 800a544:	40000400 	.word	0x40000400
 800a548:	40000800 	.word	0x40000800
 800a54c:	40000c00 	.word	0x40000c00
 800a550:	40013400 	.word	0x40013400
 800a554:	40014000 	.word	0x40014000

0800a558 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a558:	b480      	push	{r7}
 800a55a:	b087      	sub	sp, #28
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	60f8      	str	r0, [r7, #12]
 800a560:	60b9      	str	r1, [r7, #8]
 800a562:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	6a1b      	ldr	r3, [r3, #32]
 800a568:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	6a1b      	ldr	r3, [r3, #32]
 800a56e:	f023 0201 	bic.w	r2, r3, #1
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	699b      	ldr	r3, [r3, #24]
 800a57a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a57c:	693b      	ldr	r3, [r7, #16]
 800a57e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a582:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	011b      	lsls	r3, r3, #4
 800a588:	693a      	ldr	r2, [r7, #16]
 800a58a:	4313      	orrs	r3, r2
 800a58c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a58e:	697b      	ldr	r3, [r7, #20]
 800a590:	f023 030a 	bic.w	r3, r3, #10
 800a594:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a596:	697a      	ldr	r2, [r7, #20]
 800a598:	68bb      	ldr	r3, [r7, #8]
 800a59a:	4313      	orrs	r3, r2
 800a59c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	693a      	ldr	r2, [r7, #16]
 800a5a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	697a      	ldr	r2, [r7, #20]
 800a5a8:	621a      	str	r2, [r3, #32]
}
 800a5aa:	bf00      	nop
 800a5ac:	371c      	adds	r7, #28
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b4:	4770      	bx	lr

0800a5b6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a5b6:	b480      	push	{r7}
 800a5b8:	b087      	sub	sp, #28
 800a5ba:	af00      	add	r7, sp, #0
 800a5bc:	60f8      	str	r0, [r7, #12]
 800a5be:	60b9      	str	r1, [r7, #8]
 800a5c0:	607a      	str	r2, [r7, #4]
 800a5c2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	6a1b      	ldr	r3, [r3, #32]
 800a5c8:	f023 0210 	bic.w	r2, r3, #16
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	699b      	ldr	r3, [r3, #24]
 800a5d4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	6a1b      	ldr	r3, [r3, #32]
 800a5da:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800a5dc:	697b      	ldr	r3, [r7, #20]
 800a5de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a5e2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	021b      	lsls	r3, r3, #8
 800a5e8:	697a      	ldr	r2, [r7, #20]
 800a5ea:	4313      	orrs	r3, r2
 800a5ec:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a5ee:	697b      	ldr	r3, [r7, #20]
 800a5f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a5f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800a5f6:	683b      	ldr	r3, [r7, #0]
 800a5f8:	031b      	lsls	r3, r3, #12
 800a5fa:	b29b      	uxth	r3, r3
 800a5fc:	697a      	ldr	r2, [r7, #20]
 800a5fe:	4313      	orrs	r3, r2
 800a600:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a602:	693b      	ldr	r3, [r7, #16]
 800a604:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a608:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800a60a:	68bb      	ldr	r3, [r7, #8]
 800a60c:	011b      	lsls	r3, r3, #4
 800a60e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800a612:	693a      	ldr	r2, [r7, #16]
 800a614:	4313      	orrs	r3, r2
 800a616:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	697a      	ldr	r2, [r7, #20]
 800a61c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	693a      	ldr	r2, [r7, #16]
 800a622:	621a      	str	r2, [r3, #32]
}
 800a624:	bf00      	nop
 800a626:	371c      	adds	r7, #28
 800a628:	46bd      	mov	sp, r7
 800a62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62e:	4770      	bx	lr

0800a630 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a630:	b480      	push	{r7}
 800a632:	b087      	sub	sp, #28
 800a634:	af00      	add	r7, sp, #0
 800a636:	60f8      	str	r0, [r7, #12]
 800a638:	60b9      	str	r1, [r7, #8]
 800a63a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	6a1b      	ldr	r3, [r3, #32]
 800a640:	f023 0210 	bic.w	r2, r3, #16
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	699b      	ldr	r3, [r3, #24]
 800a64c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	6a1b      	ldr	r3, [r3, #32]
 800a652:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a654:	697b      	ldr	r3, [r7, #20]
 800a656:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a65a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	031b      	lsls	r3, r3, #12
 800a660:	697a      	ldr	r2, [r7, #20]
 800a662:	4313      	orrs	r3, r2
 800a664:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a666:	693b      	ldr	r3, [r7, #16]
 800a668:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a66c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a66e:	68bb      	ldr	r3, [r7, #8]
 800a670:	011b      	lsls	r3, r3, #4
 800a672:	693a      	ldr	r2, [r7, #16]
 800a674:	4313      	orrs	r3, r2
 800a676:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	697a      	ldr	r2, [r7, #20]
 800a67c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	693a      	ldr	r2, [r7, #16]
 800a682:	621a      	str	r2, [r3, #32]
}
 800a684:	bf00      	nop
 800a686:	371c      	adds	r7, #28
 800a688:	46bd      	mov	sp, r7
 800a68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68e:	4770      	bx	lr

0800a690 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a690:	b480      	push	{r7}
 800a692:	b087      	sub	sp, #28
 800a694:	af00      	add	r7, sp, #0
 800a696:	60f8      	str	r0, [r7, #12]
 800a698:	60b9      	str	r1, [r7, #8]
 800a69a:	607a      	str	r2, [r7, #4]
 800a69c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	6a1b      	ldr	r3, [r3, #32]
 800a6a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	69db      	ldr	r3, [r3, #28]
 800a6ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	6a1b      	ldr	r3, [r3, #32]
 800a6b4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800a6b6:	697b      	ldr	r3, [r7, #20]
 800a6b8:	f023 0303 	bic.w	r3, r3, #3
 800a6bc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800a6be:	697a      	ldr	r2, [r7, #20]
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	4313      	orrs	r3, r2
 800a6c4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800a6c6:	697b      	ldr	r3, [r7, #20]
 800a6c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a6cc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	011b      	lsls	r3, r3, #4
 800a6d2:	b2db      	uxtb	r3, r3
 800a6d4:	697a      	ldr	r2, [r7, #20]
 800a6d6:	4313      	orrs	r3, r2
 800a6d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800a6da:	693b      	ldr	r3, [r7, #16]
 800a6dc:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800a6e0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800a6e2:	68bb      	ldr	r3, [r7, #8]
 800a6e4:	021b      	lsls	r3, r3, #8
 800a6e6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800a6ea:	693a      	ldr	r2, [r7, #16]
 800a6ec:	4313      	orrs	r3, r2
 800a6ee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	697a      	ldr	r2, [r7, #20]
 800a6f4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	693a      	ldr	r2, [r7, #16]
 800a6fa:	621a      	str	r2, [r3, #32]
}
 800a6fc:	bf00      	nop
 800a6fe:	371c      	adds	r7, #28
 800a700:	46bd      	mov	sp, r7
 800a702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a706:	4770      	bx	lr

0800a708 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a708:	b480      	push	{r7}
 800a70a:	b087      	sub	sp, #28
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	60f8      	str	r0, [r7, #12]
 800a710:	60b9      	str	r1, [r7, #8]
 800a712:	607a      	str	r2, [r7, #4]
 800a714:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	6a1b      	ldr	r3, [r3, #32]
 800a71a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	69db      	ldr	r3, [r3, #28]
 800a726:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	6a1b      	ldr	r3, [r3, #32]
 800a72c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800a72e:	697b      	ldr	r3, [r7, #20]
 800a730:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a734:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	021b      	lsls	r3, r3, #8
 800a73a:	697a      	ldr	r2, [r7, #20]
 800a73c:	4313      	orrs	r3, r2
 800a73e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800a740:	697b      	ldr	r3, [r7, #20]
 800a742:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a746:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800a748:	683b      	ldr	r3, [r7, #0]
 800a74a:	031b      	lsls	r3, r3, #12
 800a74c:	b29b      	uxth	r3, r3
 800a74e:	697a      	ldr	r2, [r7, #20]
 800a750:	4313      	orrs	r3, r2
 800a752:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800a754:	693b      	ldr	r3, [r7, #16]
 800a756:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800a75a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800a75c:	68bb      	ldr	r3, [r7, #8]
 800a75e:	031b      	lsls	r3, r3, #12
 800a760:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800a764:	693a      	ldr	r2, [r7, #16]
 800a766:	4313      	orrs	r3, r2
 800a768:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	697a      	ldr	r2, [r7, #20]
 800a76e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	693a      	ldr	r2, [r7, #16]
 800a774:	621a      	str	r2, [r3, #32]
}
 800a776:	bf00      	nop
 800a778:	371c      	adds	r7, #28
 800a77a:	46bd      	mov	sp, r7
 800a77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a780:	4770      	bx	lr

0800a782 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a782:	b480      	push	{r7}
 800a784:	b085      	sub	sp, #20
 800a786:	af00      	add	r7, sp, #0
 800a788:	6078      	str	r0, [r7, #4]
 800a78a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	689b      	ldr	r3, [r3, #8]
 800a790:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a798:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a79a:	683a      	ldr	r2, [r7, #0]
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	4313      	orrs	r3, r2
 800a7a0:	f043 0307 	orr.w	r3, r3, #7
 800a7a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	68fa      	ldr	r2, [r7, #12]
 800a7aa:	609a      	str	r2, [r3, #8]
}
 800a7ac:	bf00      	nop
 800a7ae:	3714      	adds	r7, #20
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b6:	4770      	bx	lr

0800a7b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a7b8:	b480      	push	{r7}
 800a7ba:	b087      	sub	sp, #28
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	60f8      	str	r0, [r7, #12]
 800a7c0:	60b9      	str	r1, [r7, #8]
 800a7c2:	607a      	str	r2, [r7, #4]
 800a7c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	689b      	ldr	r3, [r3, #8]
 800a7ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a7cc:	697b      	ldr	r3, [r7, #20]
 800a7ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a7d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a7d4:	683b      	ldr	r3, [r7, #0]
 800a7d6:	021a      	lsls	r2, r3, #8
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	431a      	orrs	r2, r3
 800a7dc:	68bb      	ldr	r3, [r7, #8]
 800a7de:	4313      	orrs	r3, r2
 800a7e0:	697a      	ldr	r2, [r7, #20]
 800a7e2:	4313      	orrs	r3, r2
 800a7e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	697a      	ldr	r2, [r7, #20]
 800a7ea:	609a      	str	r2, [r3, #8]
}
 800a7ec:	bf00      	nop
 800a7ee:	371c      	adds	r7, #28
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f6:	4770      	bx	lr

0800a7f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a7f8:	b480      	push	{r7}
 800a7fa:	b087      	sub	sp, #28
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	60f8      	str	r0, [r7, #12]
 800a800:	60b9      	str	r1, [r7, #8]
 800a802:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a804:	68bb      	ldr	r3, [r7, #8]
 800a806:	f003 031f 	and.w	r3, r3, #31
 800a80a:	2201      	movs	r2, #1
 800a80c:	fa02 f303 	lsl.w	r3, r2, r3
 800a810:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	6a1a      	ldr	r2, [r3, #32]
 800a816:	697b      	ldr	r3, [r7, #20]
 800a818:	43db      	mvns	r3, r3
 800a81a:	401a      	ands	r2, r3
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	6a1a      	ldr	r2, [r3, #32]
 800a824:	68bb      	ldr	r3, [r7, #8]
 800a826:	f003 031f 	and.w	r3, r3, #31
 800a82a:	6879      	ldr	r1, [r7, #4]
 800a82c:	fa01 f303 	lsl.w	r3, r1, r3
 800a830:	431a      	orrs	r2, r3
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	621a      	str	r2, [r3, #32]
}
 800a836:	bf00      	nop
 800a838:	371c      	adds	r7, #28
 800a83a:	46bd      	mov	sp, r7
 800a83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a840:	4770      	bx	lr
	...

0800a844 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a844:	b480      	push	{r7}
 800a846:	b085      	sub	sp, #20
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
 800a84c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a854:	2b01      	cmp	r3, #1
 800a856:	d101      	bne.n	800a85c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a858:	2302      	movs	r3, #2
 800a85a:	e068      	b.n	800a92e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2201      	movs	r2, #1
 800a860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	2202      	movs	r2, #2
 800a868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	685b      	ldr	r3, [r3, #4]
 800a872:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	689b      	ldr	r3, [r3, #8]
 800a87a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	4a2e      	ldr	r2, [pc, #184]	; (800a93c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a882:	4293      	cmp	r3, r2
 800a884:	d004      	beq.n	800a890 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	4a2d      	ldr	r2, [pc, #180]	; (800a940 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a88c:	4293      	cmp	r3, r2
 800a88e:	d108      	bne.n	800a8a2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a896:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a898:	683b      	ldr	r3, [r7, #0]
 800a89a:	685b      	ldr	r3, [r3, #4]
 800a89c:	68fa      	ldr	r2, [r7, #12]
 800a89e:	4313      	orrs	r3, r2
 800a8a0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8a8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a8aa:	683b      	ldr	r3, [r7, #0]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	68fa      	ldr	r2, [r7, #12]
 800a8b0:	4313      	orrs	r3, r2
 800a8b2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	68fa      	ldr	r2, [r7, #12]
 800a8ba:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	4a1e      	ldr	r2, [pc, #120]	; (800a93c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a8c2:	4293      	cmp	r3, r2
 800a8c4:	d01d      	beq.n	800a902 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8ce:	d018      	beq.n	800a902 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	4a1b      	ldr	r2, [pc, #108]	; (800a944 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a8d6:	4293      	cmp	r3, r2
 800a8d8:	d013      	beq.n	800a902 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	4a1a      	ldr	r2, [pc, #104]	; (800a948 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a8e0:	4293      	cmp	r3, r2
 800a8e2:	d00e      	beq.n	800a902 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	4a18      	ldr	r2, [pc, #96]	; (800a94c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a8ea:	4293      	cmp	r3, r2
 800a8ec:	d009      	beq.n	800a902 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	4a13      	ldr	r2, [pc, #76]	; (800a940 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a8f4:	4293      	cmp	r3, r2
 800a8f6:	d004      	beq.n	800a902 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	4a14      	ldr	r2, [pc, #80]	; (800a950 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a8fe:	4293      	cmp	r3, r2
 800a900:	d10c      	bne.n	800a91c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a902:	68bb      	ldr	r3, [r7, #8]
 800a904:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a908:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a90a:	683b      	ldr	r3, [r7, #0]
 800a90c:	689b      	ldr	r3, [r3, #8]
 800a90e:	68ba      	ldr	r2, [r7, #8]
 800a910:	4313      	orrs	r3, r2
 800a912:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	68ba      	ldr	r2, [r7, #8]
 800a91a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	2201      	movs	r2, #1
 800a920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	2200      	movs	r2, #0
 800a928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a92c:	2300      	movs	r3, #0
}
 800a92e:	4618      	mov	r0, r3
 800a930:	3714      	adds	r7, #20
 800a932:	46bd      	mov	sp, r7
 800a934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a938:	4770      	bx	lr
 800a93a:	bf00      	nop
 800a93c:	40012c00 	.word	0x40012c00
 800a940:	40013400 	.word	0x40013400
 800a944:	40000400 	.word	0x40000400
 800a948:	40000800 	.word	0x40000800
 800a94c:	40000c00 	.word	0x40000c00
 800a950:	40014000 	.word	0x40014000

0800a954 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a954:	b480      	push	{r7}
 800a956:	b085      	sub	sp, #20
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
 800a95c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a95e:	2300      	movs	r3, #0
 800a960:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a968:	2b01      	cmp	r3, #1
 800a96a:	d101      	bne.n	800a970 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a96c:	2302      	movs	r3, #2
 800a96e:	e065      	b.n	800aa3c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2201      	movs	r2, #1
 800a974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a97e:	683b      	ldr	r3, [r7, #0]
 800a980:	68db      	ldr	r3, [r3, #12]
 800a982:	4313      	orrs	r3, r2
 800a984:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	689b      	ldr	r3, [r3, #8]
 800a990:	4313      	orrs	r3, r2
 800a992:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a99a:	683b      	ldr	r3, [r7, #0]
 800a99c:	685b      	ldr	r3, [r3, #4]
 800a99e:	4313      	orrs	r3, r2
 800a9a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	4313      	orrs	r3, r2
 800a9ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a9b6:	683b      	ldr	r3, [r7, #0]
 800a9b8:	691b      	ldr	r3, [r3, #16]
 800a9ba:	4313      	orrs	r3, r2
 800a9bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	695b      	ldr	r3, [r3, #20]
 800a9c8:	4313      	orrs	r3, r2
 800a9ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a9d2:	683b      	ldr	r3, [r7, #0]
 800a9d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9d6:	4313      	orrs	r3, r2
 800a9d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800a9e0:	683b      	ldr	r3, [r7, #0]
 800a9e2:	699b      	ldr	r3, [r3, #24]
 800a9e4:	041b      	lsls	r3, r3, #16
 800a9e6:	4313      	orrs	r3, r2
 800a9e8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	4a16      	ldr	r2, [pc, #88]	; (800aa48 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800a9f0:	4293      	cmp	r3, r2
 800a9f2:	d004      	beq.n	800a9fe <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	4a14      	ldr	r2, [pc, #80]	; (800aa4c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800a9fa:	4293      	cmp	r3, r2
 800a9fc:	d115      	bne.n	800aa2a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800aa04:	683b      	ldr	r3, [r7, #0]
 800aa06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa08:	051b      	lsls	r3, r3, #20
 800aa0a:	4313      	orrs	r3, r2
 800aa0c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	69db      	ldr	r3, [r3, #28]
 800aa18:	4313      	orrs	r3, r2
 800aa1a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800aa22:	683b      	ldr	r3, [r7, #0]
 800aa24:	6a1b      	ldr	r3, [r3, #32]
 800aa26:	4313      	orrs	r3, r2
 800aa28:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	68fa      	ldr	r2, [r7, #12]
 800aa30:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	2200      	movs	r2, #0
 800aa36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aa3a:	2300      	movs	r3, #0
}
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	3714      	adds	r7, #20
 800aa40:	46bd      	mov	sp, r7
 800aa42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa46:	4770      	bx	lr
 800aa48:	40012c00 	.word	0x40012c00
 800aa4c:	40013400 	.word	0x40013400

0800aa50 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800aa50:	b480      	push	{r7}
 800aa52:	b083      	sub	sp, #12
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800aa58:	bf00      	nop
 800aa5a:	370c      	adds	r7, #12
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa62:	4770      	bx	lr

0800aa64 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800aa64:	b480      	push	{r7}
 800aa66:	b083      	sub	sp, #12
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800aa6c:	bf00      	nop
 800aa6e:	370c      	adds	r7, #12
 800aa70:	46bd      	mov	sp, r7
 800aa72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa76:	4770      	bx	lr

0800aa78 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800aa78:	b480      	push	{r7}
 800aa7a:	b083      	sub	sp, #12
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800aa80:	bf00      	nop
 800aa82:	370c      	adds	r7, #12
 800aa84:	46bd      	mov	sp, r7
 800aa86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8a:	4770      	bx	lr

0800aa8c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	b082      	sub	sp, #8
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d101      	bne.n	800aa9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800aa9a:	2301      	movs	r3, #1
 800aa9c:	e042      	b.n	800ab24 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d106      	bne.n	800aab6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	2200      	movs	r2, #0
 800aaac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800aab0:	6878      	ldr	r0, [r7, #4]
 800aab2:	f7f8 f8f3 	bl	8002c9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	2224      	movs	r2, #36	; 0x24
 800aaba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	681a      	ldr	r2, [r3, #0]
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	f022 0201 	bic.w	r2, r2, #1
 800aacc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800aace:	6878      	ldr	r0, [r7, #4]
 800aad0:	f000 f8c4 	bl	800ac5c <UART_SetConfig>
 800aad4:	4603      	mov	r3, r0
 800aad6:	2b01      	cmp	r3, #1
 800aad8:	d101      	bne.n	800aade <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800aada:	2301      	movs	r3, #1
 800aadc:	e022      	b.n	800ab24 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d002      	beq.n	800aaec <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800aae6:	6878      	ldr	r0, [r7, #4]
 800aae8:	f000 fbb4 	bl	800b254 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	685a      	ldr	r2, [r3, #4]
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800aafa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	689a      	ldr	r2, [r3, #8]
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ab0a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	681a      	ldr	r2, [r3, #0]
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	f042 0201 	orr.w	r2, r2, #1
 800ab1a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ab1c:	6878      	ldr	r0, [r7, #4]
 800ab1e:	f000 fc3b 	bl	800b398 <UART_CheckIdleState>
 800ab22:	4603      	mov	r3, r0
}
 800ab24:	4618      	mov	r0, r3
 800ab26:	3708      	adds	r7, #8
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	bd80      	pop	{r7, pc}

0800ab2c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	b08a      	sub	sp, #40	; 0x28
 800ab30:	af02      	add	r7, sp, #8
 800ab32:	60f8      	str	r0, [r7, #12]
 800ab34:	60b9      	str	r1, [r7, #8]
 800ab36:	603b      	str	r3, [r7, #0]
 800ab38:	4613      	mov	r3, r2
 800ab3a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ab42:	2b20      	cmp	r3, #32
 800ab44:	f040 8084 	bne.w	800ac50 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800ab48:	68bb      	ldr	r3, [r7, #8]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d002      	beq.n	800ab54 <HAL_UART_Transmit+0x28>
 800ab4e:	88fb      	ldrh	r3, [r7, #6]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d101      	bne.n	800ab58 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800ab54:	2301      	movs	r3, #1
 800ab56:	e07c      	b.n	800ac52 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ab5e:	2b01      	cmp	r3, #1
 800ab60:	d101      	bne.n	800ab66 <HAL_UART_Transmit+0x3a>
 800ab62:	2302      	movs	r3, #2
 800ab64:	e075      	b.n	800ac52 <HAL_UART_Transmit+0x126>
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	2201      	movs	r2, #1
 800ab6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	2200      	movs	r2, #0
 800ab72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	2221      	movs	r2, #33	; 0x21
 800ab7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ab7e:	f7f8 fef3 	bl	8003968 <HAL_GetTick>
 800ab82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	88fa      	ldrh	r2, [r7, #6]
 800ab88:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	88fa      	ldrh	r2, [r7, #6]
 800ab90:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	689b      	ldr	r3, [r3, #8]
 800ab98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab9c:	d108      	bne.n	800abb0 <HAL_UART_Transmit+0x84>
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	691b      	ldr	r3, [r3, #16]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d104      	bne.n	800abb0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800aba6:	2300      	movs	r3, #0
 800aba8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800abaa:	68bb      	ldr	r3, [r7, #8]
 800abac:	61bb      	str	r3, [r7, #24]
 800abae:	e003      	b.n	800abb8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800abb0:	68bb      	ldr	r3, [r7, #8]
 800abb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800abb4:	2300      	movs	r3, #0
 800abb6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	2200      	movs	r2, #0
 800abbc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800abc0:	e02d      	b.n	800ac1e <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	9300      	str	r3, [sp, #0]
 800abc6:	697b      	ldr	r3, [r7, #20]
 800abc8:	2200      	movs	r2, #0
 800abca:	2180      	movs	r1, #128	; 0x80
 800abcc:	68f8      	ldr	r0, [r7, #12]
 800abce:	f000 fc2e 	bl	800b42e <UART_WaitOnFlagUntilTimeout>
 800abd2:	4603      	mov	r3, r0
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d001      	beq.n	800abdc <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800abd8:	2303      	movs	r3, #3
 800abda:	e03a      	b.n	800ac52 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 800abdc:	69fb      	ldr	r3, [r7, #28]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d10b      	bne.n	800abfa <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800abe2:	69bb      	ldr	r3, [r7, #24]
 800abe4:	881a      	ldrh	r2, [r3, #0]
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800abee:	b292      	uxth	r2, r2
 800abf0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800abf2:	69bb      	ldr	r3, [r7, #24]
 800abf4:	3302      	adds	r3, #2
 800abf6:	61bb      	str	r3, [r7, #24]
 800abf8:	e008      	b.n	800ac0c <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800abfa:	69fb      	ldr	r3, [r7, #28]
 800abfc:	781a      	ldrb	r2, [r3, #0]
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	b292      	uxth	r2, r2
 800ac04:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800ac06:	69fb      	ldr	r3, [r7, #28]
 800ac08:	3301      	adds	r3, #1
 800ac0a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ac12:	b29b      	uxth	r3, r3
 800ac14:	3b01      	subs	r3, #1
 800ac16:	b29a      	uxth	r2, r3
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ac24:	b29b      	uxth	r3, r3
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d1cb      	bne.n	800abc2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	9300      	str	r3, [sp, #0]
 800ac2e:	697b      	ldr	r3, [r7, #20]
 800ac30:	2200      	movs	r2, #0
 800ac32:	2140      	movs	r1, #64	; 0x40
 800ac34:	68f8      	ldr	r0, [r7, #12]
 800ac36:	f000 fbfa 	bl	800b42e <UART_WaitOnFlagUntilTimeout>
 800ac3a:	4603      	mov	r3, r0
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d001      	beq.n	800ac44 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 800ac40:	2303      	movs	r3, #3
 800ac42:	e006      	b.n	800ac52 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	2220      	movs	r2, #32
 800ac48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	e000      	b.n	800ac52 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 800ac50:	2302      	movs	r3, #2
  }
}
 800ac52:	4618      	mov	r0, r3
 800ac54:	3720      	adds	r7, #32
 800ac56:	46bd      	mov	sp, r7
 800ac58:	bd80      	pop	{r7, pc}
	...

0800ac5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ac5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ac60:	b08c      	sub	sp, #48	; 0x30
 800ac62:	af00      	add	r7, sp, #0
 800ac64:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ac66:	2300      	movs	r3, #0
 800ac68:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ac6c:	697b      	ldr	r3, [r7, #20]
 800ac6e:	689a      	ldr	r2, [r3, #8]
 800ac70:	697b      	ldr	r3, [r7, #20]
 800ac72:	691b      	ldr	r3, [r3, #16]
 800ac74:	431a      	orrs	r2, r3
 800ac76:	697b      	ldr	r3, [r7, #20]
 800ac78:	695b      	ldr	r3, [r3, #20]
 800ac7a:	431a      	orrs	r2, r3
 800ac7c:	697b      	ldr	r3, [r7, #20]
 800ac7e:	69db      	ldr	r3, [r3, #28]
 800ac80:	4313      	orrs	r3, r2
 800ac82:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ac84:	697b      	ldr	r3, [r7, #20]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	681a      	ldr	r2, [r3, #0]
 800ac8a:	4baa      	ldr	r3, [pc, #680]	; (800af34 <UART_SetConfig+0x2d8>)
 800ac8c:	4013      	ands	r3, r2
 800ac8e:	697a      	ldr	r2, [r7, #20]
 800ac90:	6812      	ldr	r2, [r2, #0]
 800ac92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ac94:	430b      	orrs	r3, r1
 800ac96:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ac98:	697b      	ldr	r3, [r7, #20]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	685b      	ldr	r3, [r3, #4]
 800ac9e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800aca2:	697b      	ldr	r3, [r7, #20]
 800aca4:	68da      	ldr	r2, [r3, #12]
 800aca6:	697b      	ldr	r3, [r7, #20]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	430a      	orrs	r2, r1
 800acac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800acae:	697b      	ldr	r3, [r7, #20]
 800acb0:	699b      	ldr	r3, [r3, #24]
 800acb2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800acb4:	697b      	ldr	r3, [r7, #20]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	4a9f      	ldr	r2, [pc, #636]	; (800af38 <UART_SetConfig+0x2dc>)
 800acba:	4293      	cmp	r3, r2
 800acbc:	d004      	beq.n	800acc8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800acbe:	697b      	ldr	r3, [r7, #20]
 800acc0:	6a1b      	ldr	r3, [r3, #32]
 800acc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800acc4:	4313      	orrs	r3, r2
 800acc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800acc8:	697b      	ldr	r3, [r7, #20]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	689b      	ldr	r3, [r3, #8]
 800acce:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800acd2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800acd6:	697a      	ldr	r2, [r7, #20]
 800acd8:	6812      	ldr	r2, [r2, #0]
 800acda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800acdc:	430b      	orrs	r3, r1
 800acde:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ace0:	697b      	ldr	r3, [r7, #20]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ace6:	f023 010f 	bic.w	r1, r3, #15
 800acea:	697b      	ldr	r3, [r7, #20]
 800acec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800acee:	697b      	ldr	r3, [r7, #20]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	430a      	orrs	r2, r1
 800acf4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800acf6:	697b      	ldr	r3, [r7, #20]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	4a90      	ldr	r2, [pc, #576]	; (800af3c <UART_SetConfig+0x2e0>)
 800acfc:	4293      	cmp	r3, r2
 800acfe:	d125      	bne.n	800ad4c <UART_SetConfig+0xf0>
 800ad00:	4b8f      	ldr	r3, [pc, #572]	; (800af40 <UART_SetConfig+0x2e4>)
 800ad02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad06:	f003 0303 	and.w	r3, r3, #3
 800ad0a:	2b03      	cmp	r3, #3
 800ad0c:	d81a      	bhi.n	800ad44 <UART_SetConfig+0xe8>
 800ad0e:	a201      	add	r2, pc, #4	; (adr r2, 800ad14 <UART_SetConfig+0xb8>)
 800ad10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad14:	0800ad25 	.word	0x0800ad25
 800ad18:	0800ad35 	.word	0x0800ad35
 800ad1c:	0800ad2d 	.word	0x0800ad2d
 800ad20:	0800ad3d 	.word	0x0800ad3d
 800ad24:	2301      	movs	r3, #1
 800ad26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ad2a:	e116      	b.n	800af5a <UART_SetConfig+0x2fe>
 800ad2c:	2302      	movs	r3, #2
 800ad2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ad32:	e112      	b.n	800af5a <UART_SetConfig+0x2fe>
 800ad34:	2304      	movs	r3, #4
 800ad36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ad3a:	e10e      	b.n	800af5a <UART_SetConfig+0x2fe>
 800ad3c:	2308      	movs	r3, #8
 800ad3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ad42:	e10a      	b.n	800af5a <UART_SetConfig+0x2fe>
 800ad44:	2310      	movs	r3, #16
 800ad46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ad4a:	e106      	b.n	800af5a <UART_SetConfig+0x2fe>
 800ad4c:	697b      	ldr	r3, [r7, #20]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	4a7c      	ldr	r2, [pc, #496]	; (800af44 <UART_SetConfig+0x2e8>)
 800ad52:	4293      	cmp	r3, r2
 800ad54:	d138      	bne.n	800adc8 <UART_SetConfig+0x16c>
 800ad56:	4b7a      	ldr	r3, [pc, #488]	; (800af40 <UART_SetConfig+0x2e4>)
 800ad58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad5c:	f003 030c 	and.w	r3, r3, #12
 800ad60:	2b0c      	cmp	r3, #12
 800ad62:	d82d      	bhi.n	800adc0 <UART_SetConfig+0x164>
 800ad64:	a201      	add	r2, pc, #4	; (adr r2, 800ad6c <UART_SetConfig+0x110>)
 800ad66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad6a:	bf00      	nop
 800ad6c:	0800ada1 	.word	0x0800ada1
 800ad70:	0800adc1 	.word	0x0800adc1
 800ad74:	0800adc1 	.word	0x0800adc1
 800ad78:	0800adc1 	.word	0x0800adc1
 800ad7c:	0800adb1 	.word	0x0800adb1
 800ad80:	0800adc1 	.word	0x0800adc1
 800ad84:	0800adc1 	.word	0x0800adc1
 800ad88:	0800adc1 	.word	0x0800adc1
 800ad8c:	0800ada9 	.word	0x0800ada9
 800ad90:	0800adc1 	.word	0x0800adc1
 800ad94:	0800adc1 	.word	0x0800adc1
 800ad98:	0800adc1 	.word	0x0800adc1
 800ad9c:	0800adb9 	.word	0x0800adb9
 800ada0:	2300      	movs	r3, #0
 800ada2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ada6:	e0d8      	b.n	800af5a <UART_SetConfig+0x2fe>
 800ada8:	2302      	movs	r3, #2
 800adaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800adae:	e0d4      	b.n	800af5a <UART_SetConfig+0x2fe>
 800adb0:	2304      	movs	r3, #4
 800adb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800adb6:	e0d0      	b.n	800af5a <UART_SetConfig+0x2fe>
 800adb8:	2308      	movs	r3, #8
 800adba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800adbe:	e0cc      	b.n	800af5a <UART_SetConfig+0x2fe>
 800adc0:	2310      	movs	r3, #16
 800adc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800adc6:	e0c8      	b.n	800af5a <UART_SetConfig+0x2fe>
 800adc8:	697b      	ldr	r3, [r7, #20]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	4a5e      	ldr	r2, [pc, #376]	; (800af48 <UART_SetConfig+0x2ec>)
 800adce:	4293      	cmp	r3, r2
 800add0:	d125      	bne.n	800ae1e <UART_SetConfig+0x1c2>
 800add2:	4b5b      	ldr	r3, [pc, #364]	; (800af40 <UART_SetConfig+0x2e4>)
 800add4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800add8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800addc:	2b30      	cmp	r3, #48	; 0x30
 800adde:	d016      	beq.n	800ae0e <UART_SetConfig+0x1b2>
 800ade0:	2b30      	cmp	r3, #48	; 0x30
 800ade2:	d818      	bhi.n	800ae16 <UART_SetConfig+0x1ba>
 800ade4:	2b20      	cmp	r3, #32
 800ade6:	d00a      	beq.n	800adfe <UART_SetConfig+0x1a2>
 800ade8:	2b20      	cmp	r3, #32
 800adea:	d814      	bhi.n	800ae16 <UART_SetConfig+0x1ba>
 800adec:	2b00      	cmp	r3, #0
 800adee:	d002      	beq.n	800adf6 <UART_SetConfig+0x19a>
 800adf0:	2b10      	cmp	r3, #16
 800adf2:	d008      	beq.n	800ae06 <UART_SetConfig+0x1aa>
 800adf4:	e00f      	b.n	800ae16 <UART_SetConfig+0x1ba>
 800adf6:	2300      	movs	r3, #0
 800adf8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800adfc:	e0ad      	b.n	800af5a <UART_SetConfig+0x2fe>
 800adfe:	2302      	movs	r3, #2
 800ae00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ae04:	e0a9      	b.n	800af5a <UART_SetConfig+0x2fe>
 800ae06:	2304      	movs	r3, #4
 800ae08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ae0c:	e0a5      	b.n	800af5a <UART_SetConfig+0x2fe>
 800ae0e:	2308      	movs	r3, #8
 800ae10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ae14:	e0a1      	b.n	800af5a <UART_SetConfig+0x2fe>
 800ae16:	2310      	movs	r3, #16
 800ae18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ae1c:	e09d      	b.n	800af5a <UART_SetConfig+0x2fe>
 800ae1e:	697b      	ldr	r3, [r7, #20]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	4a4a      	ldr	r2, [pc, #296]	; (800af4c <UART_SetConfig+0x2f0>)
 800ae24:	4293      	cmp	r3, r2
 800ae26:	d125      	bne.n	800ae74 <UART_SetConfig+0x218>
 800ae28:	4b45      	ldr	r3, [pc, #276]	; (800af40 <UART_SetConfig+0x2e4>)
 800ae2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae2e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ae32:	2bc0      	cmp	r3, #192	; 0xc0
 800ae34:	d016      	beq.n	800ae64 <UART_SetConfig+0x208>
 800ae36:	2bc0      	cmp	r3, #192	; 0xc0
 800ae38:	d818      	bhi.n	800ae6c <UART_SetConfig+0x210>
 800ae3a:	2b80      	cmp	r3, #128	; 0x80
 800ae3c:	d00a      	beq.n	800ae54 <UART_SetConfig+0x1f8>
 800ae3e:	2b80      	cmp	r3, #128	; 0x80
 800ae40:	d814      	bhi.n	800ae6c <UART_SetConfig+0x210>
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d002      	beq.n	800ae4c <UART_SetConfig+0x1f0>
 800ae46:	2b40      	cmp	r3, #64	; 0x40
 800ae48:	d008      	beq.n	800ae5c <UART_SetConfig+0x200>
 800ae4a:	e00f      	b.n	800ae6c <UART_SetConfig+0x210>
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ae52:	e082      	b.n	800af5a <UART_SetConfig+0x2fe>
 800ae54:	2302      	movs	r3, #2
 800ae56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ae5a:	e07e      	b.n	800af5a <UART_SetConfig+0x2fe>
 800ae5c:	2304      	movs	r3, #4
 800ae5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ae62:	e07a      	b.n	800af5a <UART_SetConfig+0x2fe>
 800ae64:	2308      	movs	r3, #8
 800ae66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ae6a:	e076      	b.n	800af5a <UART_SetConfig+0x2fe>
 800ae6c:	2310      	movs	r3, #16
 800ae6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ae72:	e072      	b.n	800af5a <UART_SetConfig+0x2fe>
 800ae74:	697b      	ldr	r3, [r7, #20]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	4a35      	ldr	r2, [pc, #212]	; (800af50 <UART_SetConfig+0x2f4>)
 800ae7a:	4293      	cmp	r3, r2
 800ae7c:	d12a      	bne.n	800aed4 <UART_SetConfig+0x278>
 800ae7e:	4b30      	ldr	r3, [pc, #192]	; (800af40 <UART_SetConfig+0x2e4>)
 800ae80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ae88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ae8c:	d01a      	beq.n	800aec4 <UART_SetConfig+0x268>
 800ae8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ae92:	d81b      	bhi.n	800aecc <UART_SetConfig+0x270>
 800ae94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ae98:	d00c      	beq.n	800aeb4 <UART_SetConfig+0x258>
 800ae9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ae9e:	d815      	bhi.n	800aecc <UART_SetConfig+0x270>
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d003      	beq.n	800aeac <UART_SetConfig+0x250>
 800aea4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aea8:	d008      	beq.n	800aebc <UART_SetConfig+0x260>
 800aeaa:	e00f      	b.n	800aecc <UART_SetConfig+0x270>
 800aeac:	2300      	movs	r3, #0
 800aeae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aeb2:	e052      	b.n	800af5a <UART_SetConfig+0x2fe>
 800aeb4:	2302      	movs	r3, #2
 800aeb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aeba:	e04e      	b.n	800af5a <UART_SetConfig+0x2fe>
 800aebc:	2304      	movs	r3, #4
 800aebe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aec2:	e04a      	b.n	800af5a <UART_SetConfig+0x2fe>
 800aec4:	2308      	movs	r3, #8
 800aec6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aeca:	e046      	b.n	800af5a <UART_SetConfig+0x2fe>
 800aecc:	2310      	movs	r3, #16
 800aece:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aed2:	e042      	b.n	800af5a <UART_SetConfig+0x2fe>
 800aed4:	697b      	ldr	r3, [r7, #20]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	4a17      	ldr	r2, [pc, #92]	; (800af38 <UART_SetConfig+0x2dc>)
 800aeda:	4293      	cmp	r3, r2
 800aedc:	d13a      	bne.n	800af54 <UART_SetConfig+0x2f8>
 800aede:	4b18      	ldr	r3, [pc, #96]	; (800af40 <UART_SetConfig+0x2e4>)
 800aee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aee4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800aee8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800aeec:	d01a      	beq.n	800af24 <UART_SetConfig+0x2c8>
 800aeee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800aef2:	d81b      	bhi.n	800af2c <UART_SetConfig+0x2d0>
 800aef4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aef8:	d00c      	beq.n	800af14 <UART_SetConfig+0x2b8>
 800aefa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aefe:	d815      	bhi.n	800af2c <UART_SetConfig+0x2d0>
 800af00:	2b00      	cmp	r3, #0
 800af02:	d003      	beq.n	800af0c <UART_SetConfig+0x2b0>
 800af04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800af08:	d008      	beq.n	800af1c <UART_SetConfig+0x2c0>
 800af0a:	e00f      	b.n	800af2c <UART_SetConfig+0x2d0>
 800af0c:	2300      	movs	r3, #0
 800af0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800af12:	e022      	b.n	800af5a <UART_SetConfig+0x2fe>
 800af14:	2302      	movs	r3, #2
 800af16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800af1a:	e01e      	b.n	800af5a <UART_SetConfig+0x2fe>
 800af1c:	2304      	movs	r3, #4
 800af1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800af22:	e01a      	b.n	800af5a <UART_SetConfig+0x2fe>
 800af24:	2308      	movs	r3, #8
 800af26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800af2a:	e016      	b.n	800af5a <UART_SetConfig+0x2fe>
 800af2c:	2310      	movs	r3, #16
 800af2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800af32:	e012      	b.n	800af5a <UART_SetConfig+0x2fe>
 800af34:	cfff69f3 	.word	0xcfff69f3
 800af38:	40008000 	.word	0x40008000
 800af3c:	40013800 	.word	0x40013800
 800af40:	40021000 	.word	0x40021000
 800af44:	40004400 	.word	0x40004400
 800af48:	40004800 	.word	0x40004800
 800af4c:	40004c00 	.word	0x40004c00
 800af50:	40005000 	.word	0x40005000
 800af54:	2310      	movs	r3, #16
 800af56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800af5a:	697b      	ldr	r3, [r7, #20]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	4aae      	ldr	r2, [pc, #696]	; (800b218 <UART_SetConfig+0x5bc>)
 800af60:	4293      	cmp	r3, r2
 800af62:	f040 8097 	bne.w	800b094 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800af66:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800af6a:	2b08      	cmp	r3, #8
 800af6c:	d823      	bhi.n	800afb6 <UART_SetConfig+0x35a>
 800af6e:	a201      	add	r2, pc, #4	; (adr r2, 800af74 <UART_SetConfig+0x318>)
 800af70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af74:	0800af99 	.word	0x0800af99
 800af78:	0800afb7 	.word	0x0800afb7
 800af7c:	0800afa1 	.word	0x0800afa1
 800af80:	0800afb7 	.word	0x0800afb7
 800af84:	0800afa7 	.word	0x0800afa7
 800af88:	0800afb7 	.word	0x0800afb7
 800af8c:	0800afb7 	.word	0x0800afb7
 800af90:	0800afb7 	.word	0x0800afb7
 800af94:	0800afaf 	.word	0x0800afaf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800af98:	f7fa feb8 	bl	8005d0c <HAL_RCC_GetPCLK1Freq>
 800af9c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800af9e:	e010      	b.n	800afc2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800afa0:	4b9e      	ldr	r3, [pc, #632]	; (800b21c <UART_SetConfig+0x5c0>)
 800afa2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800afa4:	e00d      	b.n	800afc2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800afa6:	f7fa fe19 	bl	8005bdc <HAL_RCC_GetSysClockFreq>
 800afaa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800afac:	e009      	b.n	800afc2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800afae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800afb2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800afb4:	e005      	b.n	800afc2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800afb6:	2300      	movs	r3, #0
 800afb8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800afba:	2301      	movs	r3, #1
 800afbc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800afc0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800afc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	f000 8130 	beq.w	800b22a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800afca:	697b      	ldr	r3, [r7, #20]
 800afcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afce:	4a94      	ldr	r2, [pc, #592]	; (800b220 <UART_SetConfig+0x5c4>)
 800afd0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800afd4:	461a      	mov	r2, r3
 800afd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afd8:	fbb3 f3f2 	udiv	r3, r3, r2
 800afdc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800afde:	697b      	ldr	r3, [r7, #20]
 800afe0:	685a      	ldr	r2, [r3, #4]
 800afe2:	4613      	mov	r3, r2
 800afe4:	005b      	lsls	r3, r3, #1
 800afe6:	4413      	add	r3, r2
 800afe8:	69ba      	ldr	r2, [r7, #24]
 800afea:	429a      	cmp	r2, r3
 800afec:	d305      	bcc.n	800affa <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800afee:	697b      	ldr	r3, [r7, #20]
 800aff0:	685b      	ldr	r3, [r3, #4]
 800aff2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800aff4:	69ba      	ldr	r2, [r7, #24]
 800aff6:	429a      	cmp	r2, r3
 800aff8:	d903      	bls.n	800b002 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800affa:	2301      	movs	r3, #1
 800affc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b000:	e113      	b.n	800b22a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b004:	2200      	movs	r2, #0
 800b006:	60bb      	str	r3, [r7, #8]
 800b008:	60fa      	str	r2, [r7, #12]
 800b00a:	697b      	ldr	r3, [r7, #20]
 800b00c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b00e:	4a84      	ldr	r2, [pc, #528]	; (800b220 <UART_SetConfig+0x5c4>)
 800b010:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b014:	b29b      	uxth	r3, r3
 800b016:	2200      	movs	r2, #0
 800b018:	603b      	str	r3, [r7, #0]
 800b01a:	607a      	str	r2, [r7, #4]
 800b01c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b020:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b024:	f7f5 fdd8 	bl	8000bd8 <__aeabi_uldivmod>
 800b028:	4602      	mov	r2, r0
 800b02a:	460b      	mov	r3, r1
 800b02c:	4610      	mov	r0, r2
 800b02e:	4619      	mov	r1, r3
 800b030:	f04f 0200 	mov.w	r2, #0
 800b034:	f04f 0300 	mov.w	r3, #0
 800b038:	020b      	lsls	r3, r1, #8
 800b03a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b03e:	0202      	lsls	r2, r0, #8
 800b040:	6979      	ldr	r1, [r7, #20]
 800b042:	6849      	ldr	r1, [r1, #4]
 800b044:	0849      	lsrs	r1, r1, #1
 800b046:	2000      	movs	r0, #0
 800b048:	460c      	mov	r4, r1
 800b04a:	4605      	mov	r5, r0
 800b04c:	eb12 0804 	adds.w	r8, r2, r4
 800b050:	eb43 0905 	adc.w	r9, r3, r5
 800b054:	697b      	ldr	r3, [r7, #20]
 800b056:	685b      	ldr	r3, [r3, #4]
 800b058:	2200      	movs	r2, #0
 800b05a:	469a      	mov	sl, r3
 800b05c:	4693      	mov	fp, r2
 800b05e:	4652      	mov	r2, sl
 800b060:	465b      	mov	r3, fp
 800b062:	4640      	mov	r0, r8
 800b064:	4649      	mov	r1, r9
 800b066:	f7f5 fdb7 	bl	8000bd8 <__aeabi_uldivmod>
 800b06a:	4602      	mov	r2, r0
 800b06c:	460b      	mov	r3, r1
 800b06e:	4613      	mov	r3, r2
 800b070:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b072:	6a3b      	ldr	r3, [r7, #32]
 800b074:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b078:	d308      	bcc.n	800b08c <UART_SetConfig+0x430>
 800b07a:	6a3b      	ldr	r3, [r7, #32]
 800b07c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b080:	d204      	bcs.n	800b08c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800b082:	697b      	ldr	r3, [r7, #20]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	6a3a      	ldr	r2, [r7, #32]
 800b088:	60da      	str	r2, [r3, #12]
 800b08a:	e0ce      	b.n	800b22a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800b08c:	2301      	movs	r3, #1
 800b08e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b092:	e0ca      	b.n	800b22a <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b094:	697b      	ldr	r3, [r7, #20]
 800b096:	69db      	ldr	r3, [r3, #28]
 800b098:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b09c:	d166      	bne.n	800b16c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800b09e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b0a2:	2b08      	cmp	r3, #8
 800b0a4:	d827      	bhi.n	800b0f6 <UART_SetConfig+0x49a>
 800b0a6:	a201      	add	r2, pc, #4	; (adr r2, 800b0ac <UART_SetConfig+0x450>)
 800b0a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0ac:	0800b0d1 	.word	0x0800b0d1
 800b0b0:	0800b0d9 	.word	0x0800b0d9
 800b0b4:	0800b0e1 	.word	0x0800b0e1
 800b0b8:	0800b0f7 	.word	0x0800b0f7
 800b0bc:	0800b0e7 	.word	0x0800b0e7
 800b0c0:	0800b0f7 	.word	0x0800b0f7
 800b0c4:	0800b0f7 	.word	0x0800b0f7
 800b0c8:	0800b0f7 	.word	0x0800b0f7
 800b0cc:	0800b0ef 	.word	0x0800b0ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b0d0:	f7fa fe1c 	bl	8005d0c <HAL_RCC_GetPCLK1Freq>
 800b0d4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b0d6:	e014      	b.n	800b102 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b0d8:	f7fa fe2e 	bl	8005d38 <HAL_RCC_GetPCLK2Freq>
 800b0dc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b0de:	e010      	b.n	800b102 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b0e0:	4b4e      	ldr	r3, [pc, #312]	; (800b21c <UART_SetConfig+0x5c0>)
 800b0e2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b0e4:	e00d      	b.n	800b102 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b0e6:	f7fa fd79 	bl	8005bdc <HAL_RCC_GetSysClockFreq>
 800b0ea:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b0ec:	e009      	b.n	800b102 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b0ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b0f2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b0f4:	e005      	b.n	800b102 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b0fa:	2301      	movs	r3, #1
 800b0fc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b100:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b104:	2b00      	cmp	r3, #0
 800b106:	f000 8090 	beq.w	800b22a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b10a:	697b      	ldr	r3, [r7, #20]
 800b10c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b10e:	4a44      	ldr	r2, [pc, #272]	; (800b220 <UART_SetConfig+0x5c4>)
 800b110:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b114:	461a      	mov	r2, r3
 800b116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b118:	fbb3 f3f2 	udiv	r3, r3, r2
 800b11c:	005a      	lsls	r2, r3, #1
 800b11e:	697b      	ldr	r3, [r7, #20]
 800b120:	685b      	ldr	r3, [r3, #4]
 800b122:	085b      	lsrs	r3, r3, #1
 800b124:	441a      	add	r2, r3
 800b126:	697b      	ldr	r3, [r7, #20]
 800b128:	685b      	ldr	r3, [r3, #4]
 800b12a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b12e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b130:	6a3b      	ldr	r3, [r7, #32]
 800b132:	2b0f      	cmp	r3, #15
 800b134:	d916      	bls.n	800b164 <UART_SetConfig+0x508>
 800b136:	6a3b      	ldr	r3, [r7, #32]
 800b138:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b13c:	d212      	bcs.n	800b164 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b13e:	6a3b      	ldr	r3, [r7, #32]
 800b140:	b29b      	uxth	r3, r3
 800b142:	f023 030f 	bic.w	r3, r3, #15
 800b146:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b148:	6a3b      	ldr	r3, [r7, #32]
 800b14a:	085b      	lsrs	r3, r3, #1
 800b14c:	b29b      	uxth	r3, r3
 800b14e:	f003 0307 	and.w	r3, r3, #7
 800b152:	b29a      	uxth	r2, r3
 800b154:	8bfb      	ldrh	r3, [r7, #30]
 800b156:	4313      	orrs	r3, r2
 800b158:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800b15a:	697b      	ldr	r3, [r7, #20]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	8bfa      	ldrh	r2, [r7, #30]
 800b160:	60da      	str	r2, [r3, #12]
 800b162:	e062      	b.n	800b22a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800b164:	2301      	movs	r3, #1
 800b166:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b16a:	e05e      	b.n	800b22a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b16c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b170:	2b08      	cmp	r3, #8
 800b172:	d828      	bhi.n	800b1c6 <UART_SetConfig+0x56a>
 800b174:	a201      	add	r2, pc, #4	; (adr r2, 800b17c <UART_SetConfig+0x520>)
 800b176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b17a:	bf00      	nop
 800b17c:	0800b1a1 	.word	0x0800b1a1
 800b180:	0800b1a9 	.word	0x0800b1a9
 800b184:	0800b1b1 	.word	0x0800b1b1
 800b188:	0800b1c7 	.word	0x0800b1c7
 800b18c:	0800b1b7 	.word	0x0800b1b7
 800b190:	0800b1c7 	.word	0x0800b1c7
 800b194:	0800b1c7 	.word	0x0800b1c7
 800b198:	0800b1c7 	.word	0x0800b1c7
 800b19c:	0800b1bf 	.word	0x0800b1bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b1a0:	f7fa fdb4 	bl	8005d0c <HAL_RCC_GetPCLK1Freq>
 800b1a4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b1a6:	e014      	b.n	800b1d2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b1a8:	f7fa fdc6 	bl	8005d38 <HAL_RCC_GetPCLK2Freq>
 800b1ac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b1ae:	e010      	b.n	800b1d2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b1b0:	4b1a      	ldr	r3, [pc, #104]	; (800b21c <UART_SetConfig+0x5c0>)
 800b1b2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b1b4:	e00d      	b.n	800b1d2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b1b6:	f7fa fd11 	bl	8005bdc <HAL_RCC_GetSysClockFreq>
 800b1ba:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b1bc:	e009      	b.n	800b1d2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b1be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b1c2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b1c4:	e005      	b.n	800b1d2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b1ca:	2301      	movs	r3, #1
 800b1cc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b1d0:	bf00      	nop
    }

    if (pclk != 0U)
 800b1d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d028      	beq.n	800b22a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b1d8:	697b      	ldr	r3, [r7, #20]
 800b1da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1dc:	4a10      	ldr	r2, [pc, #64]	; (800b220 <UART_SetConfig+0x5c4>)
 800b1de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b1e2:	461a      	mov	r2, r3
 800b1e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1e6:	fbb3 f2f2 	udiv	r2, r3, r2
 800b1ea:	697b      	ldr	r3, [r7, #20]
 800b1ec:	685b      	ldr	r3, [r3, #4]
 800b1ee:	085b      	lsrs	r3, r3, #1
 800b1f0:	441a      	add	r2, r3
 800b1f2:	697b      	ldr	r3, [r7, #20]
 800b1f4:	685b      	ldr	r3, [r3, #4]
 800b1f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1fa:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b1fc:	6a3b      	ldr	r3, [r7, #32]
 800b1fe:	2b0f      	cmp	r3, #15
 800b200:	d910      	bls.n	800b224 <UART_SetConfig+0x5c8>
 800b202:	6a3b      	ldr	r3, [r7, #32]
 800b204:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b208:	d20c      	bcs.n	800b224 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b20a:	6a3b      	ldr	r3, [r7, #32]
 800b20c:	b29a      	uxth	r2, r3
 800b20e:	697b      	ldr	r3, [r7, #20]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	60da      	str	r2, [r3, #12]
 800b214:	e009      	b.n	800b22a <UART_SetConfig+0x5ce>
 800b216:	bf00      	nop
 800b218:	40008000 	.word	0x40008000
 800b21c:	00f42400 	.word	0x00f42400
 800b220:	0800e4e0 	.word	0x0800e4e0
      }
      else
      {
        ret = HAL_ERROR;
 800b224:	2301      	movs	r3, #1
 800b226:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b22a:	697b      	ldr	r3, [r7, #20]
 800b22c:	2201      	movs	r2, #1
 800b22e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b232:	697b      	ldr	r3, [r7, #20]
 800b234:	2201      	movs	r2, #1
 800b236:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b23a:	697b      	ldr	r3, [r7, #20]
 800b23c:	2200      	movs	r2, #0
 800b23e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800b240:	697b      	ldr	r3, [r7, #20]
 800b242:	2200      	movs	r2, #0
 800b244:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800b246:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800b24a:	4618      	mov	r0, r3
 800b24c:	3730      	adds	r7, #48	; 0x30
 800b24e:	46bd      	mov	sp, r7
 800b250:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800b254 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b254:	b480      	push	{r7}
 800b256:	b083      	sub	sp, #12
 800b258:	af00      	add	r7, sp, #0
 800b25a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b260:	f003 0301 	and.w	r3, r3, #1
 800b264:	2b00      	cmp	r3, #0
 800b266:	d00a      	beq.n	800b27e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	685b      	ldr	r3, [r3, #4]
 800b26e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	430a      	orrs	r2, r1
 800b27c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b282:	f003 0302 	and.w	r3, r3, #2
 800b286:	2b00      	cmp	r3, #0
 800b288:	d00a      	beq.n	800b2a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	685b      	ldr	r3, [r3, #4]
 800b290:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	430a      	orrs	r2, r1
 800b29e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2a4:	f003 0304 	and.w	r3, r3, #4
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d00a      	beq.n	800b2c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	685b      	ldr	r3, [r3, #4]
 800b2b2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	430a      	orrs	r2, r1
 800b2c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2c6:	f003 0308 	and.w	r3, r3, #8
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d00a      	beq.n	800b2e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	685b      	ldr	r3, [r3, #4]
 800b2d4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	430a      	orrs	r2, r1
 800b2e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2e8:	f003 0310 	and.w	r3, r3, #16
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d00a      	beq.n	800b306 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	689b      	ldr	r3, [r3, #8]
 800b2f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	430a      	orrs	r2, r1
 800b304:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b30a:	f003 0320 	and.w	r3, r3, #32
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d00a      	beq.n	800b328 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	689b      	ldr	r3, [r3, #8]
 800b318:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	430a      	orrs	r2, r1
 800b326:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b32c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b330:	2b00      	cmp	r3, #0
 800b332:	d01a      	beq.n	800b36a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	685b      	ldr	r3, [r3, #4]
 800b33a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	430a      	orrs	r2, r1
 800b348:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b34e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b352:	d10a      	bne.n	800b36a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	685b      	ldr	r3, [r3, #4]
 800b35a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	430a      	orrs	r2, r1
 800b368:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b36e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b372:	2b00      	cmp	r3, #0
 800b374:	d00a      	beq.n	800b38c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	685b      	ldr	r3, [r3, #4]
 800b37c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	430a      	orrs	r2, r1
 800b38a:	605a      	str	r2, [r3, #4]
  }
}
 800b38c:	bf00      	nop
 800b38e:	370c      	adds	r7, #12
 800b390:	46bd      	mov	sp, r7
 800b392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b396:	4770      	bx	lr

0800b398 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b398:	b580      	push	{r7, lr}
 800b39a:	b086      	sub	sp, #24
 800b39c:	af02      	add	r7, sp, #8
 800b39e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b3a8:	f7f8 fade 	bl	8003968 <HAL_GetTick>
 800b3ac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	f003 0308 	and.w	r3, r3, #8
 800b3b8:	2b08      	cmp	r3, #8
 800b3ba:	d10e      	bne.n	800b3da <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b3bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b3c0:	9300      	str	r3, [sp, #0]
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	2200      	movs	r2, #0
 800b3c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b3ca:	6878      	ldr	r0, [r7, #4]
 800b3cc:	f000 f82f 	bl	800b42e <UART_WaitOnFlagUntilTimeout>
 800b3d0:	4603      	mov	r3, r0
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d001      	beq.n	800b3da <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b3d6:	2303      	movs	r3, #3
 800b3d8:	e025      	b.n	800b426 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	f003 0304 	and.w	r3, r3, #4
 800b3e4:	2b04      	cmp	r3, #4
 800b3e6:	d10e      	bne.n	800b406 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b3e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b3ec:	9300      	str	r3, [sp, #0]
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b3f6:	6878      	ldr	r0, [r7, #4]
 800b3f8:	f000 f819 	bl	800b42e <UART_WaitOnFlagUntilTimeout>
 800b3fc:	4603      	mov	r3, r0
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d001      	beq.n	800b406 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b402:	2303      	movs	r3, #3
 800b404:	e00f      	b.n	800b426 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	2220      	movs	r2, #32
 800b40a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	2220      	movs	r2, #32
 800b412:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	2200      	movs	r2, #0
 800b41a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	2200      	movs	r2, #0
 800b420:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b424:	2300      	movs	r3, #0
}
 800b426:	4618      	mov	r0, r3
 800b428:	3710      	adds	r7, #16
 800b42a:	46bd      	mov	sp, r7
 800b42c:	bd80      	pop	{r7, pc}

0800b42e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b42e:	b580      	push	{r7, lr}
 800b430:	b09c      	sub	sp, #112	; 0x70
 800b432:	af00      	add	r7, sp, #0
 800b434:	60f8      	str	r0, [r7, #12]
 800b436:	60b9      	str	r1, [r7, #8]
 800b438:	603b      	str	r3, [r7, #0]
 800b43a:	4613      	mov	r3, r2
 800b43c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b43e:	e0a9      	b.n	800b594 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b440:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b442:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b446:	f000 80a5 	beq.w	800b594 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b44a:	f7f8 fa8d 	bl	8003968 <HAL_GetTick>
 800b44e:	4602      	mov	r2, r0
 800b450:	683b      	ldr	r3, [r7, #0]
 800b452:	1ad3      	subs	r3, r2, r3
 800b454:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b456:	429a      	cmp	r2, r3
 800b458:	d302      	bcc.n	800b460 <UART_WaitOnFlagUntilTimeout+0x32>
 800b45a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d140      	bne.n	800b4e2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b466:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b468:	e853 3f00 	ldrex	r3, [r3]
 800b46c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b46e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b470:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b474:	667b      	str	r3, [r7, #100]	; 0x64
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	461a      	mov	r2, r3
 800b47c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b47e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b480:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b482:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b484:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b486:	e841 2300 	strex	r3, r2, [r1]
 800b48a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b48c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d1e6      	bne.n	800b460 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	3308      	adds	r3, #8
 800b498:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b49a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b49c:	e853 3f00 	ldrex	r3, [r3]
 800b4a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b4a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4a4:	f023 0301 	bic.w	r3, r3, #1
 800b4a8:	663b      	str	r3, [r7, #96]	; 0x60
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	3308      	adds	r3, #8
 800b4b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b4b2:	64ba      	str	r2, [r7, #72]	; 0x48
 800b4b4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b4b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b4ba:	e841 2300 	strex	r3, r2, [r1]
 800b4be:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b4c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d1e5      	bne.n	800b492 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	2220      	movs	r2, #32
 800b4ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	2220      	movs	r2, #32
 800b4d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	2200      	movs	r2, #0
 800b4da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800b4de:	2303      	movs	r3, #3
 800b4e0:	e069      	b.n	800b5b6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	f003 0304 	and.w	r3, r3, #4
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d051      	beq.n	800b594 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	69db      	ldr	r3, [r3, #28]
 800b4f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b4fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b4fe:	d149      	bne.n	800b594 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b508:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b512:	e853 3f00 	ldrex	r3, [r3]
 800b516:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b51a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b51e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	461a      	mov	r2, r3
 800b526:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b528:	637b      	str	r3, [r7, #52]	; 0x34
 800b52a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b52c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b52e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b530:	e841 2300 	strex	r3, r2, [r1]
 800b534:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d1e6      	bne.n	800b50a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	3308      	adds	r3, #8
 800b542:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b544:	697b      	ldr	r3, [r7, #20]
 800b546:	e853 3f00 	ldrex	r3, [r3]
 800b54a:	613b      	str	r3, [r7, #16]
   return(result);
 800b54c:	693b      	ldr	r3, [r7, #16]
 800b54e:	f023 0301 	bic.w	r3, r3, #1
 800b552:	66bb      	str	r3, [r7, #104]	; 0x68
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	3308      	adds	r3, #8
 800b55a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b55c:	623a      	str	r2, [r7, #32]
 800b55e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b560:	69f9      	ldr	r1, [r7, #28]
 800b562:	6a3a      	ldr	r2, [r7, #32]
 800b564:	e841 2300 	strex	r3, r2, [r1]
 800b568:	61bb      	str	r3, [r7, #24]
   return(result);
 800b56a:	69bb      	ldr	r3, [r7, #24]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d1e5      	bne.n	800b53c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	2220      	movs	r2, #32
 800b574:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	2220      	movs	r2, #32
 800b57c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	2220      	movs	r2, #32
 800b584:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	2200      	movs	r2, #0
 800b58c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800b590:	2303      	movs	r3, #3
 800b592:	e010      	b.n	800b5b6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	69da      	ldr	r2, [r3, #28]
 800b59a:	68bb      	ldr	r3, [r7, #8]
 800b59c:	4013      	ands	r3, r2
 800b59e:	68ba      	ldr	r2, [r7, #8]
 800b5a0:	429a      	cmp	r2, r3
 800b5a2:	bf0c      	ite	eq
 800b5a4:	2301      	moveq	r3, #1
 800b5a6:	2300      	movne	r3, #0
 800b5a8:	b2db      	uxtb	r3, r3
 800b5aa:	461a      	mov	r2, r3
 800b5ac:	79fb      	ldrb	r3, [r7, #7]
 800b5ae:	429a      	cmp	r2, r3
 800b5b0:	f43f af46 	beq.w	800b440 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b5b4:	2300      	movs	r3, #0
}
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	3770      	adds	r7, #112	; 0x70
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	bd80      	pop	{r7, pc}

0800b5be <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b5be:	b480      	push	{r7}
 800b5c0:	b085      	sub	sp, #20
 800b5c2:	af00      	add	r7, sp, #0
 800b5c4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b5cc:	2b01      	cmp	r3, #1
 800b5ce:	d101      	bne.n	800b5d4 <HAL_UARTEx_DisableFifoMode+0x16>
 800b5d0:	2302      	movs	r3, #2
 800b5d2:	e027      	b.n	800b624 <HAL_UARTEx_DisableFifoMode+0x66>
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	2201      	movs	r2, #1
 800b5d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	2224      	movs	r2, #36	; 0x24
 800b5e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	681a      	ldr	r2, [r3, #0]
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	f022 0201 	bic.w	r2, r2, #1
 800b5fa:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b602:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	2200      	movs	r2, #0
 800b608:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	68fa      	ldr	r2, [r7, #12]
 800b610:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	2220      	movs	r2, #32
 800b616:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	2200      	movs	r2, #0
 800b61e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b622:	2300      	movs	r3, #0
}
 800b624:	4618      	mov	r0, r3
 800b626:	3714      	adds	r7, #20
 800b628:	46bd      	mov	sp, r7
 800b62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62e:	4770      	bx	lr

0800b630 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b084      	sub	sp, #16
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
 800b638:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b640:	2b01      	cmp	r3, #1
 800b642:	d101      	bne.n	800b648 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b644:	2302      	movs	r3, #2
 800b646:	e02d      	b.n	800b6a4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	2201      	movs	r2, #1
 800b64c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	2224      	movs	r2, #36	; 0x24
 800b654:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	681a      	ldr	r2, [r3, #0]
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	f022 0201 	bic.w	r2, r2, #1
 800b66e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	689b      	ldr	r3, [r3, #8]
 800b676:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	683a      	ldr	r2, [r7, #0]
 800b680:	430a      	orrs	r2, r1
 800b682:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b684:	6878      	ldr	r0, [r7, #4]
 800b686:	f000 f84f 	bl	800b728 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	68fa      	ldr	r2, [r7, #12]
 800b690:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	2220      	movs	r2, #32
 800b696:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	2200      	movs	r2, #0
 800b69e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b6a2:	2300      	movs	r3, #0
}
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	3710      	adds	r7, #16
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	bd80      	pop	{r7, pc}

0800b6ac <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	b084      	sub	sp, #16
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
 800b6b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b6bc:	2b01      	cmp	r3, #1
 800b6be:	d101      	bne.n	800b6c4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b6c0:	2302      	movs	r3, #2
 800b6c2:	e02d      	b.n	800b720 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	2201      	movs	r2, #1
 800b6c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	2224      	movs	r2, #36	; 0x24
 800b6d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	681a      	ldr	r2, [r3, #0]
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	f022 0201 	bic.w	r2, r2, #1
 800b6ea:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	689b      	ldr	r3, [r3, #8]
 800b6f2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	683a      	ldr	r2, [r7, #0]
 800b6fc:	430a      	orrs	r2, r1
 800b6fe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b700:	6878      	ldr	r0, [r7, #4]
 800b702:	f000 f811 	bl	800b728 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	68fa      	ldr	r2, [r7, #12]
 800b70c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	2220      	movs	r2, #32
 800b712:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	2200      	movs	r2, #0
 800b71a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b71e:	2300      	movs	r3, #0
}
 800b720:	4618      	mov	r0, r3
 800b722:	3710      	adds	r7, #16
 800b724:	46bd      	mov	sp, r7
 800b726:	bd80      	pop	{r7, pc}

0800b728 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b728:	b480      	push	{r7}
 800b72a:	b085      	sub	sp, #20
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b734:	2b00      	cmp	r3, #0
 800b736:	d108      	bne.n	800b74a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	2201      	movs	r2, #1
 800b73c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	2201      	movs	r2, #1
 800b744:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b748:	e031      	b.n	800b7ae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b74a:	2308      	movs	r3, #8
 800b74c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b74e:	2308      	movs	r3, #8
 800b750:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	689b      	ldr	r3, [r3, #8]
 800b758:	0e5b      	lsrs	r3, r3, #25
 800b75a:	b2db      	uxtb	r3, r3
 800b75c:	f003 0307 	and.w	r3, r3, #7
 800b760:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	689b      	ldr	r3, [r3, #8]
 800b768:	0f5b      	lsrs	r3, r3, #29
 800b76a:	b2db      	uxtb	r3, r3
 800b76c:	f003 0307 	and.w	r3, r3, #7
 800b770:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b772:	7bbb      	ldrb	r3, [r7, #14]
 800b774:	7b3a      	ldrb	r2, [r7, #12]
 800b776:	4911      	ldr	r1, [pc, #68]	; (800b7bc <UARTEx_SetNbDataToProcess+0x94>)
 800b778:	5c8a      	ldrb	r2, [r1, r2]
 800b77a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b77e:	7b3a      	ldrb	r2, [r7, #12]
 800b780:	490f      	ldr	r1, [pc, #60]	; (800b7c0 <UARTEx_SetNbDataToProcess+0x98>)
 800b782:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b784:	fb93 f3f2 	sdiv	r3, r3, r2
 800b788:	b29a      	uxth	r2, r3
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b790:	7bfb      	ldrb	r3, [r7, #15]
 800b792:	7b7a      	ldrb	r2, [r7, #13]
 800b794:	4909      	ldr	r1, [pc, #36]	; (800b7bc <UARTEx_SetNbDataToProcess+0x94>)
 800b796:	5c8a      	ldrb	r2, [r1, r2]
 800b798:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b79c:	7b7a      	ldrb	r2, [r7, #13]
 800b79e:	4908      	ldr	r1, [pc, #32]	; (800b7c0 <UARTEx_SetNbDataToProcess+0x98>)
 800b7a0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b7a2:	fb93 f3f2 	sdiv	r3, r3, r2
 800b7a6:	b29a      	uxth	r2, r3
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b7ae:	bf00      	nop
 800b7b0:	3714      	adds	r7, #20
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b8:	4770      	bx	lr
 800b7ba:	bf00      	nop
 800b7bc:	0800e4f8 	.word	0x0800e4f8
 800b7c0:	0800e500 	.word	0x0800e500

0800b7c4 <__errno>:
 800b7c4:	4b01      	ldr	r3, [pc, #4]	; (800b7cc <__errno+0x8>)
 800b7c6:	6818      	ldr	r0, [r3, #0]
 800b7c8:	4770      	bx	lr
 800b7ca:	bf00      	nop
 800b7cc:	20000014 	.word	0x20000014

0800b7d0 <__libc_init_array>:
 800b7d0:	b570      	push	{r4, r5, r6, lr}
 800b7d2:	4d0d      	ldr	r5, [pc, #52]	; (800b808 <__libc_init_array+0x38>)
 800b7d4:	4c0d      	ldr	r4, [pc, #52]	; (800b80c <__libc_init_array+0x3c>)
 800b7d6:	1b64      	subs	r4, r4, r5
 800b7d8:	10a4      	asrs	r4, r4, #2
 800b7da:	2600      	movs	r6, #0
 800b7dc:	42a6      	cmp	r6, r4
 800b7de:	d109      	bne.n	800b7f4 <__libc_init_array+0x24>
 800b7e0:	4d0b      	ldr	r5, [pc, #44]	; (800b810 <__libc_init_array+0x40>)
 800b7e2:	4c0c      	ldr	r4, [pc, #48]	; (800b814 <__libc_init_array+0x44>)
 800b7e4:	f002 fdc2 	bl	800e36c <_init>
 800b7e8:	1b64      	subs	r4, r4, r5
 800b7ea:	10a4      	asrs	r4, r4, #2
 800b7ec:	2600      	movs	r6, #0
 800b7ee:	42a6      	cmp	r6, r4
 800b7f0:	d105      	bne.n	800b7fe <__libc_init_array+0x2e>
 800b7f2:	bd70      	pop	{r4, r5, r6, pc}
 800b7f4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b7f8:	4798      	blx	r3
 800b7fa:	3601      	adds	r6, #1
 800b7fc:	e7ee      	b.n	800b7dc <__libc_init_array+0xc>
 800b7fe:	f855 3b04 	ldr.w	r3, [r5], #4
 800b802:	4798      	blx	r3
 800b804:	3601      	adds	r6, #1
 800b806:	e7f2      	b.n	800b7ee <__libc_init_array+0x1e>
 800b808:	0800e8ec 	.word	0x0800e8ec
 800b80c:	0800e8ec 	.word	0x0800e8ec
 800b810:	0800e8ec 	.word	0x0800e8ec
 800b814:	0800e8f0 	.word	0x0800e8f0

0800b818 <malloc>:
 800b818:	4b02      	ldr	r3, [pc, #8]	; (800b824 <malloc+0xc>)
 800b81a:	4601      	mov	r1, r0
 800b81c:	6818      	ldr	r0, [r3, #0]
 800b81e:	f000 b877 	b.w	800b910 <_malloc_r>
 800b822:	bf00      	nop
 800b824:	20000014 	.word	0x20000014

0800b828 <memset>:
 800b828:	4402      	add	r2, r0
 800b82a:	4603      	mov	r3, r0
 800b82c:	4293      	cmp	r3, r2
 800b82e:	d100      	bne.n	800b832 <memset+0xa>
 800b830:	4770      	bx	lr
 800b832:	f803 1b01 	strb.w	r1, [r3], #1
 800b836:	e7f9      	b.n	800b82c <memset+0x4>

0800b838 <_free_r>:
 800b838:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b83a:	2900      	cmp	r1, #0
 800b83c:	d044      	beq.n	800b8c8 <_free_r+0x90>
 800b83e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b842:	9001      	str	r0, [sp, #4]
 800b844:	2b00      	cmp	r3, #0
 800b846:	f1a1 0404 	sub.w	r4, r1, #4
 800b84a:	bfb8      	it	lt
 800b84c:	18e4      	addlt	r4, r4, r3
 800b84e:	f001 ff47 	bl	800d6e0 <__malloc_lock>
 800b852:	4a1e      	ldr	r2, [pc, #120]	; (800b8cc <_free_r+0x94>)
 800b854:	9801      	ldr	r0, [sp, #4]
 800b856:	6813      	ldr	r3, [r2, #0]
 800b858:	b933      	cbnz	r3, 800b868 <_free_r+0x30>
 800b85a:	6063      	str	r3, [r4, #4]
 800b85c:	6014      	str	r4, [r2, #0]
 800b85e:	b003      	add	sp, #12
 800b860:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b864:	f001 bf42 	b.w	800d6ec <__malloc_unlock>
 800b868:	42a3      	cmp	r3, r4
 800b86a:	d908      	bls.n	800b87e <_free_r+0x46>
 800b86c:	6825      	ldr	r5, [r4, #0]
 800b86e:	1961      	adds	r1, r4, r5
 800b870:	428b      	cmp	r3, r1
 800b872:	bf01      	itttt	eq
 800b874:	6819      	ldreq	r1, [r3, #0]
 800b876:	685b      	ldreq	r3, [r3, #4]
 800b878:	1949      	addeq	r1, r1, r5
 800b87a:	6021      	streq	r1, [r4, #0]
 800b87c:	e7ed      	b.n	800b85a <_free_r+0x22>
 800b87e:	461a      	mov	r2, r3
 800b880:	685b      	ldr	r3, [r3, #4]
 800b882:	b10b      	cbz	r3, 800b888 <_free_r+0x50>
 800b884:	42a3      	cmp	r3, r4
 800b886:	d9fa      	bls.n	800b87e <_free_r+0x46>
 800b888:	6811      	ldr	r1, [r2, #0]
 800b88a:	1855      	adds	r5, r2, r1
 800b88c:	42a5      	cmp	r5, r4
 800b88e:	d10b      	bne.n	800b8a8 <_free_r+0x70>
 800b890:	6824      	ldr	r4, [r4, #0]
 800b892:	4421      	add	r1, r4
 800b894:	1854      	adds	r4, r2, r1
 800b896:	42a3      	cmp	r3, r4
 800b898:	6011      	str	r1, [r2, #0]
 800b89a:	d1e0      	bne.n	800b85e <_free_r+0x26>
 800b89c:	681c      	ldr	r4, [r3, #0]
 800b89e:	685b      	ldr	r3, [r3, #4]
 800b8a0:	6053      	str	r3, [r2, #4]
 800b8a2:	4421      	add	r1, r4
 800b8a4:	6011      	str	r1, [r2, #0]
 800b8a6:	e7da      	b.n	800b85e <_free_r+0x26>
 800b8a8:	d902      	bls.n	800b8b0 <_free_r+0x78>
 800b8aa:	230c      	movs	r3, #12
 800b8ac:	6003      	str	r3, [r0, #0]
 800b8ae:	e7d6      	b.n	800b85e <_free_r+0x26>
 800b8b0:	6825      	ldr	r5, [r4, #0]
 800b8b2:	1961      	adds	r1, r4, r5
 800b8b4:	428b      	cmp	r3, r1
 800b8b6:	bf04      	itt	eq
 800b8b8:	6819      	ldreq	r1, [r3, #0]
 800b8ba:	685b      	ldreq	r3, [r3, #4]
 800b8bc:	6063      	str	r3, [r4, #4]
 800b8be:	bf04      	itt	eq
 800b8c0:	1949      	addeq	r1, r1, r5
 800b8c2:	6021      	streq	r1, [r4, #0]
 800b8c4:	6054      	str	r4, [r2, #4]
 800b8c6:	e7ca      	b.n	800b85e <_free_r+0x26>
 800b8c8:	b003      	add	sp, #12
 800b8ca:	bd30      	pop	{r4, r5, pc}
 800b8cc:	20000854 	.word	0x20000854

0800b8d0 <sbrk_aligned>:
 800b8d0:	b570      	push	{r4, r5, r6, lr}
 800b8d2:	4e0e      	ldr	r6, [pc, #56]	; (800b90c <sbrk_aligned+0x3c>)
 800b8d4:	460c      	mov	r4, r1
 800b8d6:	6831      	ldr	r1, [r6, #0]
 800b8d8:	4605      	mov	r5, r0
 800b8da:	b911      	cbnz	r1, 800b8e2 <sbrk_aligned+0x12>
 800b8dc:	f000 fd84 	bl	800c3e8 <_sbrk_r>
 800b8e0:	6030      	str	r0, [r6, #0]
 800b8e2:	4621      	mov	r1, r4
 800b8e4:	4628      	mov	r0, r5
 800b8e6:	f000 fd7f 	bl	800c3e8 <_sbrk_r>
 800b8ea:	1c43      	adds	r3, r0, #1
 800b8ec:	d00a      	beq.n	800b904 <sbrk_aligned+0x34>
 800b8ee:	1cc4      	adds	r4, r0, #3
 800b8f0:	f024 0403 	bic.w	r4, r4, #3
 800b8f4:	42a0      	cmp	r0, r4
 800b8f6:	d007      	beq.n	800b908 <sbrk_aligned+0x38>
 800b8f8:	1a21      	subs	r1, r4, r0
 800b8fa:	4628      	mov	r0, r5
 800b8fc:	f000 fd74 	bl	800c3e8 <_sbrk_r>
 800b900:	3001      	adds	r0, #1
 800b902:	d101      	bne.n	800b908 <sbrk_aligned+0x38>
 800b904:	f04f 34ff 	mov.w	r4, #4294967295
 800b908:	4620      	mov	r0, r4
 800b90a:	bd70      	pop	{r4, r5, r6, pc}
 800b90c:	20000858 	.word	0x20000858

0800b910 <_malloc_r>:
 800b910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b914:	1ccd      	adds	r5, r1, #3
 800b916:	f025 0503 	bic.w	r5, r5, #3
 800b91a:	3508      	adds	r5, #8
 800b91c:	2d0c      	cmp	r5, #12
 800b91e:	bf38      	it	cc
 800b920:	250c      	movcc	r5, #12
 800b922:	2d00      	cmp	r5, #0
 800b924:	4607      	mov	r7, r0
 800b926:	db01      	blt.n	800b92c <_malloc_r+0x1c>
 800b928:	42a9      	cmp	r1, r5
 800b92a:	d905      	bls.n	800b938 <_malloc_r+0x28>
 800b92c:	230c      	movs	r3, #12
 800b92e:	603b      	str	r3, [r7, #0]
 800b930:	2600      	movs	r6, #0
 800b932:	4630      	mov	r0, r6
 800b934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b938:	4e2e      	ldr	r6, [pc, #184]	; (800b9f4 <_malloc_r+0xe4>)
 800b93a:	f001 fed1 	bl	800d6e0 <__malloc_lock>
 800b93e:	6833      	ldr	r3, [r6, #0]
 800b940:	461c      	mov	r4, r3
 800b942:	bb34      	cbnz	r4, 800b992 <_malloc_r+0x82>
 800b944:	4629      	mov	r1, r5
 800b946:	4638      	mov	r0, r7
 800b948:	f7ff ffc2 	bl	800b8d0 <sbrk_aligned>
 800b94c:	1c43      	adds	r3, r0, #1
 800b94e:	4604      	mov	r4, r0
 800b950:	d14d      	bne.n	800b9ee <_malloc_r+0xde>
 800b952:	6834      	ldr	r4, [r6, #0]
 800b954:	4626      	mov	r6, r4
 800b956:	2e00      	cmp	r6, #0
 800b958:	d140      	bne.n	800b9dc <_malloc_r+0xcc>
 800b95a:	6823      	ldr	r3, [r4, #0]
 800b95c:	4631      	mov	r1, r6
 800b95e:	4638      	mov	r0, r7
 800b960:	eb04 0803 	add.w	r8, r4, r3
 800b964:	f000 fd40 	bl	800c3e8 <_sbrk_r>
 800b968:	4580      	cmp	r8, r0
 800b96a:	d13a      	bne.n	800b9e2 <_malloc_r+0xd2>
 800b96c:	6821      	ldr	r1, [r4, #0]
 800b96e:	3503      	adds	r5, #3
 800b970:	1a6d      	subs	r5, r5, r1
 800b972:	f025 0503 	bic.w	r5, r5, #3
 800b976:	3508      	adds	r5, #8
 800b978:	2d0c      	cmp	r5, #12
 800b97a:	bf38      	it	cc
 800b97c:	250c      	movcc	r5, #12
 800b97e:	4629      	mov	r1, r5
 800b980:	4638      	mov	r0, r7
 800b982:	f7ff ffa5 	bl	800b8d0 <sbrk_aligned>
 800b986:	3001      	adds	r0, #1
 800b988:	d02b      	beq.n	800b9e2 <_malloc_r+0xd2>
 800b98a:	6823      	ldr	r3, [r4, #0]
 800b98c:	442b      	add	r3, r5
 800b98e:	6023      	str	r3, [r4, #0]
 800b990:	e00e      	b.n	800b9b0 <_malloc_r+0xa0>
 800b992:	6822      	ldr	r2, [r4, #0]
 800b994:	1b52      	subs	r2, r2, r5
 800b996:	d41e      	bmi.n	800b9d6 <_malloc_r+0xc6>
 800b998:	2a0b      	cmp	r2, #11
 800b99a:	d916      	bls.n	800b9ca <_malloc_r+0xba>
 800b99c:	1961      	adds	r1, r4, r5
 800b99e:	42a3      	cmp	r3, r4
 800b9a0:	6025      	str	r5, [r4, #0]
 800b9a2:	bf18      	it	ne
 800b9a4:	6059      	strne	r1, [r3, #4]
 800b9a6:	6863      	ldr	r3, [r4, #4]
 800b9a8:	bf08      	it	eq
 800b9aa:	6031      	streq	r1, [r6, #0]
 800b9ac:	5162      	str	r2, [r4, r5]
 800b9ae:	604b      	str	r3, [r1, #4]
 800b9b0:	4638      	mov	r0, r7
 800b9b2:	f104 060b 	add.w	r6, r4, #11
 800b9b6:	f001 fe99 	bl	800d6ec <__malloc_unlock>
 800b9ba:	f026 0607 	bic.w	r6, r6, #7
 800b9be:	1d23      	adds	r3, r4, #4
 800b9c0:	1af2      	subs	r2, r6, r3
 800b9c2:	d0b6      	beq.n	800b932 <_malloc_r+0x22>
 800b9c4:	1b9b      	subs	r3, r3, r6
 800b9c6:	50a3      	str	r3, [r4, r2]
 800b9c8:	e7b3      	b.n	800b932 <_malloc_r+0x22>
 800b9ca:	6862      	ldr	r2, [r4, #4]
 800b9cc:	42a3      	cmp	r3, r4
 800b9ce:	bf0c      	ite	eq
 800b9d0:	6032      	streq	r2, [r6, #0]
 800b9d2:	605a      	strne	r2, [r3, #4]
 800b9d4:	e7ec      	b.n	800b9b0 <_malloc_r+0xa0>
 800b9d6:	4623      	mov	r3, r4
 800b9d8:	6864      	ldr	r4, [r4, #4]
 800b9da:	e7b2      	b.n	800b942 <_malloc_r+0x32>
 800b9dc:	4634      	mov	r4, r6
 800b9de:	6876      	ldr	r6, [r6, #4]
 800b9e0:	e7b9      	b.n	800b956 <_malloc_r+0x46>
 800b9e2:	230c      	movs	r3, #12
 800b9e4:	603b      	str	r3, [r7, #0]
 800b9e6:	4638      	mov	r0, r7
 800b9e8:	f001 fe80 	bl	800d6ec <__malloc_unlock>
 800b9ec:	e7a1      	b.n	800b932 <_malloc_r+0x22>
 800b9ee:	6025      	str	r5, [r4, #0]
 800b9f0:	e7de      	b.n	800b9b0 <_malloc_r+0xa0>
 800b9f2:	bf00      	nop
 800b9f4:	20000854 	.word	0x20000854

0800b9f8 <__cvt>:
 800b9f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b9fc:	ec55 4b10 	vmov	r4, r5, d0
 800ba00:	2d00      	cmp	r5, #0
 800ba02:	460e      	mov	r6, r1
 800ba04:	4619      	mov	r1, r3
 800ba06:	462b      	mov	r3, r5
 800ba08:	bfbb      	ittet	lt
 800ba0a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ba0e:	461d      	movlt	r5, r3
 800ba10:	2300      	movge	r3, #0
 800ba12:	232d      	movlt	r3, #45	; 0x2d
 800ba14:	700b      	strb	r3, [r1, #0]
 800ba16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ba18:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ba1c:	4691      	mov	r9, r2
 800ba1e:	f023 0820 	bic.w	r8, r3, #32
 800ba22:	bfbc      	itt	lt
 800ba24:	4622      	movlt	r2, r4
 800ba26:	4614      	movlt	r4, r2
 800ba28:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ba2c:	d005      	beq.n	800ba3a <__cvt+0x42>
 800ba2e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ba32:	d100      	bne.n	800ba36 <__cvt+0x3e>
 800ba34:	3601      	adds	r6, #1
 800ba36:	2102      	movs	r1, #2
 800ba38:	e000      	b.n	800ba3c <__cvt+0x44>
 800ba3a:	2103      	movs	r1, #3
 800ba3c:	ab03      	add	r3, sp, #12
 800ba3e:	9301      	str	r3, [sp, #4]
 800ba40:	ab02      	add	r3, sp, #8
 800ba42:	9300      	str	r3, [sp, #0]
 800ba44:	ec45 4b10 	vmov	d0, r4, r5
 800ba48:	4653      	mov	r3, sl
 800ba4a:	4632      	mov	r2, r6
 800ba4c:	f000 fe28 	bl	800c6a0 <_dtoa_r>
 800ba50:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ba54:	4607      	mov	r7, r0
 800ba56:	d102      	bne.n	800ba5e <__cvt+0x66>
 800ba58:	f019 0f01 	tst.w	r9, #1
 800ba5c:	d022      	beq.n	800baa4 <__cvt+0xac>
 800ba5e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ba62:	eb07 0906 	add.w	r9, r7, r6
 800ba66:	d110      	bne.n	800ba8a <__cvt+0x92>
 800ba68:	783b      	ldrb	r3, [r7, #0]
 800ba6a:	2b30      	cmp	r3, #48	; 0x30
 800ba6c:	d10a      	bne.n	800ba84 <__cvt+0x8c>
 800ba6e:	2200      	movs	r2, #0
 800ba70:	2300      	movs	r3, #0
 800ba72:	4620      	mov	r0, r4
 800ba74:	4629      	mov	r1, r5
 800ba76:	f7f5 f83f 	bl	8000af8 <__aeabi_dcmpeq>
 800ba7a:	b918      	cbnz	r0, 800ba84 <__cvt+0x8c>
 800ba7c:	f1c6 0601 	rsb	r6, r6, #1
 800ba80:	f8ca 6000 	str.w	r6, [sl]
 800ba84:	f8da 3000 	ldr.w	r3, [sl]
 800ba88:	4499      	add	r9, r3
 800ba8a:	2200      	movs	r2, #0
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	4620      	mov	r0, r4
 800ba90:	4629      	mov	r1, r5
 800ba92:	f7f5 f831 	bl	8000af8 <__aeabi_dcmpeq>
 800ba96:	b108      	cbz	r0, 800ba9c <__cvt+0xa4>
 800ba98:	f8cd 900c 	str.w	r9, [sp, #12]
 800ba9c:	2230      	movs	r2, #48	; 0x30
 800ba9e:	9b03      	ldr	r3, [sp, #12]
 800baa0:	454b      	cmp	r3, r9
 800baa2:	d307      	bcc.n	800bab4 <__cvt+0xbc>
 800baa4:	9b03      	ldr	r3, [sp, #12]
 800baa6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800baa8:	1bdb      	subs	r3, r3, r7
 800baaa:	4638      	mov	r0, r7
 800baac:	6013      	str	r3, [r2, #0]
 800baae:	b004      	add	sp, #16
 800bab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bab4:	1c59      	adds	r1, r3, #1
 800bab6:	9103      	str	r1, [sp, #12]
 800bab8:	701a      	strb	r2, [r3, #0]
 800baba:	e7f0      	b.n	800ba9e <__cvt+0xa6>

0800babc <__exponent>:
 800babc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800babe:	4603      	mov	r3, r0
 800bac0:	2900      	cmp	r1, #0
 800bac2:	bfb8      	it	lt
 800bac4:	4249      	neglt	r1, r1
 800bac6:	f803 2b02 	strb.w	r2, [r3], #2
 800baca:	bfb4      	ite	lt
 800bacc:	222d      	movlt	r2, #45	; 0x2d
 800bace:	222b      	movge	r2, #43	; 0x2b
 800bad0:	2909      	cmp	r1, #9
 800bad2:	7042      	strb	r2, [r0, #1]
 800bad4:	dd2a      	ble.n	800bb2c <__exponent+0x70>
 800bad6:	f10d 0407 	add.w	r4, sp, #7
 800bada:	46a4      	mov	ip, r4
 800badc:	270a      	movs	r7, #10
 800bade:	46a6      	mov	lr, r4
 800bae0:	460a      	mov	r2, r1
 800bae2:	fb91 f6f7 	sdiv	r6, r1, r7
 800bae6:	fb07 1516 	mls	r5, r7, r6, r1
 800baea:	3530      	adds	r5, #48	; 0x30
 800baec:	2a63      	cmp	r2, #99	; 0x63
 800baee:	f104 34ff 	add.w	r4, r4, #4294967295
 800baf2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800baf6:	4631      	mov	r1, r6
 800baf8:	dcf1      	bgt.n	800bade <__exponent+0x22>
 800bafa:	3130      	adds	r1, #48	; 0x30
 800bafc:	f1ae 0502 	sub.w	r5, lr, #2
 800bb00:	f804 1c01 	strb.w	r1, [r4, #-1]
 800bb04:	1c44      	adds	r4, r0, #1
 800bb06:	4629      	mov	r1, r5
 800bb08:	4561      	cmp	r1, ip
 800bb0a:	d30a      	bcc.n	800bb22 <__exponent+0x66>
 800bb0c:	f10d 0209 	add.w	r2, sp, #9
 800bb10:	eba2 020e 	sub.w	r2, r2, lr
 800bb14:	4565      	cmp	r5, ip
 800bb16:	bf88      	it	hi
 800bb18:	2200      	movhi	r2, #0
 800bb1a:	4413      	add	r3, r2
 800bb1c:	1a18      	subs	r0, r3, r0
 800bb1e:	b003      	add	sp, #12
 800bb20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb22:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bb26:	f804 2f01 	strb.w	r2, [r4, #1]!
 800bb2a:	e7ed      	b.n	800bb08 <__exponent+0x4c>
 800bb2c:	2330      	movs	r3, #48	; 0x30
 800bb2e:	3130      	adds	r1, #48	; 0x30
 800bb30:	7083      	strb	r3, [r0, #2]
 800bb32:	70c1      	strb	r1, [r0, #3]
 800bb34:	1d03      	adds	r3, r0, #4
 800bb36:	e7f1      	b.n	800bb1c <__exponent+0x60>

0800bb38 <_printf_float>:
 800bb38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb3c:	ed2d 8b02 	vpush	{d8}
 800bb40:	b08d      	sub	sp, #52	; 0x34
 800bb42:	460c      	mov	r4, r1
 800bb44:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800bb48:	4616      	mov	r6, r2
 800bb4a:	461f      	mov	r7, r3
 800bb4c:	4605      	mov	r5, r0
 800bb4e:	f001 fd4d 	bl	800d5ec <_localeconv_r>
 800bb52:	f8d0 a000 	ldr.w	sl, [r0]
 800bb56:	4650      	mov	r0, sl
 800bb58:	f7f4 fb52 	bl	8000200 <strlen>
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	930a      	str	r3, [sp, #40]	; 0x28
 800bb60:	6823      	ldr	r3, [r4, #0]
 800bb62:	9305      	str	r3, [sp, #20]
 800bb64:	f8d8 3000 	ldr.w	r3, [r8]
 800bb68:	f894 b018 	ldrb.w	fp, [r4, #24]
 800bb6c:	3307      	adds	r3, #7
 800bb6e:	f023 0307 	bic.w	r3, r3, #7
 800bb72:	f103 0208 	add.w	r2, r3, #8
 800bb76:	f8c8 2000 	str.w	r2, [r8]
 800bb7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb7e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800bb82:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800bb86:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bb8a:	9307      	str	r3, [sp, #28]
 800bb8c:	f8cd 8018 	str.w	r8, [sp, #24]
 800bb90:	ee08 0a10 	vmov	s16, r0
 800bb94:	4b9f      	ldr	r3, [pc, #636]	; (800be14 <_printf_float+0x2dc>)
 800bb96:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bb9a:	f04f 32ff 	mov.w	r2, #4294967295
 800bb9e:	f7f4 ffdd 	bl	8000b5c <__aeabi_dcmpun>
 800bba2:	bb88      	cbnz	r0, 800bc08 <_printf_float+0xd0>
 800bba4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bba8:	4b9a      	ldr	r3, [pc, #616]	; (800be14 <_printf_float+0x2dc>)
 800bbaa:	f04f 32ff 	mov.w	r2, #4294967295
 800bbae:	f7f4 ffb7 	bl	8000b20 <__aeabi_dcmple>
 800bbb2:	bb48      	cbnz	r0, 800bc08 <_printf_float+0xd0>
 800bbb4:	2200      	movs	r2, #0
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	4640      	mov	r0, r8
 800bbba:	4649      	mov	r1, r9
 800bbbc:	f7f4 ffa6 	bl	8000b0c <__aeabi_dcmplt>
 800bbc0:	b110      	cbz	r0, 800bbc8 <_printf_float+0x90>
 800bbc2:	232d      	movs	r3, #45	; 0x2d
 800bbc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bbc8:	4b93      	ldr	r3, [pc, #588]	; (800be18 <_printf_float+0x2e0>)
 800bbca:	4894      	ldr	r0, [pc, #592]	; (800be1c <_printf_float+0x2e4>)
 800bbcc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800bbd0:	bf94      	ite	ls
 800bbd2:	4698      	movls	r8, r3
 800bbd4:	4680      	movhi	r8, r0
 800bbd6:	2303      	movs	r3, #3
 800bbd8:	6123      	str	r3, [r4, #16]
 800bbda:	9b05      	ldr	r3, [sp, #20]
 800bbdc:	f023 0204 	bic.w	r2, r3, #4
 800bbe0:	6022      	str	r2, [r4, #0]
 800bbe2:	f04f 0900 	mov.w	r9, #0
 800bbe6:	9700      	str	r7, [sp, #0]
 800bbe8:	4633      	mov	r3, r6
 800bbea:	aa0b      	add	r2, sp, #44	; 0x2c
 800bbec:	4621      	mov	r1, r4
 800bbee:	4628      	mov	r0, r5
 800bbf0:	f000 f9d8 	bl	800bfa4 <_printf_common>
 800bbf4:	3001      	adds	r0, #1
 800bbf6:	f040 8090 	bne.w	800bd1a <_printf_float+0x1e2>
 800bbfa:	f04f 30ff 	mov.w	r0, #4294967295
 800bbfe:	b00d      	add	sp, #52	; 0x34
 800bc00:	ecbd 8b02 	vpop	{d8}
 800bc04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc08:	4642      	mov	r2, r8
 800bc0a:	464b      	mov	r3, r9
 800bc0c:	4640      	mov	r0, r8
 800bc0e:	4649      	mov	r1, r9
 800bc10:	f7f4 ffa4 	bl	8000b5c <__aeabi_dcmpun>
 800bc14:	b140      	cbz	r0, 800bc28 <_printf_float+0xf0>
 800bc16:	464b      	mov	r3, r9
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	bfbc      	itt	lt
 800bc1c:	232d      	movlt	r3, #45	; 0x2d
 800bc1e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800bc22:	487f      	ldr	r0, [pc, #508]	; (800be20 <_printf_float+0x2e8>)
 800bc24:	4b7f      	ldr	r3, [pc, #508]	; (800be24 <_printf_float+0x2ec>)
 800bc26:	e7d1      	b.n	800bbcc <_printf_float+0x94>
 800bc28:	6863      	ldr	r3, [r4, #4]
 800bc2a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800bc2e:	9206      	str	r2, [sp, #24]
 800bc30:	1c5a      	adds	r2, r3, #1
 800bc32:	d13f      	bne.n	800bcb4 <_printf_float+0x17c>
 800bc34:	2306      	movs	r3, #6
 800bc36:	6063      	str	r3, [r4, #4]
 800bc38:	9b05      	ldr	r3, [sp, #20]
 800bc3a:	6861      	ldr	r1, [r4, #4]
 800bc3c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800bc40:	2300      	movs	r3, #0
 800bc42:	9303      	str	r3, [sp, #12]
 800bc44:	ab0a      	add	r3, sp, #40	; 0x28
 800bc46:	e9cd b301 	strd	fp, r3, [sp, #4]
 800bc4a:	ab09      	add	r3, sp, #36	; 0x24
 800bc4c:	ec49 8b10 	vmov	d0, r8, r9
 800bc50:	9300      	str	r3, [sp, #0]
 800bc52:	6022      	str	r2, [r4, #0]
 800bc54:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800bc58:	4628      	mov	r0, r5
 800bc5a:	f7ff fecd 	bl	800b9f8 <__cvt>
 800bc5e:	9b06      	ldr	r3, [sp, #24]
 800bc60:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bc62:	2b47      	cmp	r3, #71	; 0x47
 800bc64:	4680      	mov	r8, r0
 800bc66:	d108      	bne.n	800bc7a <_printf_float+0x142>
 800bc68:	1cc8      	adds	r0, r1, #3
 800bc6a:	db02      	blt.n	800bc72 <_printf_float+0x13a>
 800bc6c:	6863      	ldr	r3, [r4, #4]
 800bc6e:	4299      	cmp	r1, r3
 800bc70:	dd41      	ble.n	800bcf6 <_printf_float+0x1be>
 800bc72:	f1ab 0b02 	sub.w	fp, fp, #2
 800bc76:	fa5f fb8b 	uxtb.w	fp, fp
 800bc7a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bc7e:	d820      	bhi.n	800bcc2 <_printf_float+0x18a>
 800bc80:	3901      	subs	r1, #1
 800bc82:	465a      	mov	r2, fp
 800bc84:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800bc88:	9109      	str	r1, [sp, #36]	; 0x24
 800bc8a:	f7ff ff17 	bl	800babc <__exponent>
 800bc8e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bc90:	1813      	adds	r3, r2, r0
 800bc92:	2a01      	cmp	r2, #1
 800bc94:	4681      	mov	r9, r0
 800bc96:	6123      	str	r3, [r4, #16]
 800bc98:	dc02      	bgt.n	800bca0 <_printf_float+0x168>
 800bc9a:	6822      	ldr	r2, [r4, #0]
 800bc9c:	07d2      	lsls	r2, r2, #31
 800bc9e:	d501      	bpl.n	800bca4 <_printf_float+0x16c>
 800bca0:	3301      	adds	r3, #1
 800bca2:	6123      	str	r3, [r4, #16]
 800bca4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d09c      	beq.n	800bbe6 <_printf_float+0xae>
 800bcac:	232d      	movs	r3, #45	; 0x2d
 800bcae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bcb2:	e798      	b.n	800bbe6 <_printf_float+0xae>
 800bcb4:	9a06      	ldr	r2, [sp, #24]
 800bcb6:	2a47      	cmp	r2, #71	; 0x47
 800bcb8:	d1be      	bne.n	800bc38 <_printf_float+0x100>
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d1bc      	bne.n	800bc38 <_printf_float+0x100>
 800bcbe:	2301      	movs	r3, #1
 800bcc0:	e7b9      	b.n	800bc36 <_printf_float+0xfe>
 800bcc2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800bcc6:	d118      	bne.n	800bcfa <_printf_float+0x1c2>
 800bcc8:	2900      	cmp	r1, #0
 800bcca:	6863      	ldr	r3, [r4, #4]
 800bccc:	dd0b      	ble.n	800bce6 <_printf_float+0x1ae>
 800bcce:	6121      	str	r1, [r4, #16]
 800bcd0:	b913      	cbnz	r3, 800bcd8 <_printf_float+0x1a0>
 800bcd2:	6822      	ldr	r2, [r4, #0]
 800bcd4:	07d0      	lsls	r0, r2, #31
 800bcd6:	d502      	bpl.n	800bcde <_printf_float+0x1a6>
 800bcd8:	3301      	adds	r3, #1
 800bcda:	440b      	add	r3, r1
 800bcdc:	6123      	str	r3, [r4, #16]
 800bcde:	65a1      	str	r1, [r4, #88]	; 0x58
 800bce0:	f04f 0900 	mov.w	r9, #0
 800bce4:	e7de      	b.n	800bca4 <_printf_float+0x16c>
 800bce6:	b913      	cbnz	r3, 800bcee <_printf_float+0x1b6>
 800bce8:	6822      	ldr	r2, [r4, #0]
 800bcea:	07d2      	lsls	r2, r2, #31
 800bcec:	d501      	bpl.n	800bcf2 <_printf_float+0x1ba>
 800bcee:	3302      	adds	r3, #2
 800bcf0:	e7f4      	b.n	800bcdc <_printf_float+0x1a4>
 800bcf2:	2301      	movs	r3, #1
 800bcf4:	e7f2      	b.n	800bcdc <_printf_float+0x1a4>
 800bcf6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800bcfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bcfc:	4299      	cmp	r1, r3
 800bcfe:	db05      	blt.n	800bd0c <_printf_float+0x1d4>
 800bd00:	6823      	ldr	r3, [r4, #0]
 800bd02:	6121      	str	r1, [r4, #16]
 800bd04:	07d8      	lsls	r0, r3, #31
 800bd06:	d5ea      	bpl.n	800bcde <_printf_float+0x1a6>
 800bd08:	1c4b      	adds	r3, r1, #1
 800bd0a:	e7e7      	b.n	800bcdc <_printf_float+0x1a4>
 800bd0c:	2900      	cmp	r1, #0
 800bd0e:	bfd4      	ite	le
 800bd10:	f1c1 0202 	rsble	r2, r1, #2
 800bd14:	2201      	movgt	r2, #1
 800bd16:	4413      	add	r3, r2
 800bd18:	e7e0      	b.n	800bcdc <_printf_float+0x1a4>
 800bd1a:	6823      	ldr	r3, [r4, #0]
 800bd1c:	055a      	lsls	r2, r3, #21
 800bd1e:	d407      	bmi.n	800bd30 <_printf_float+0x1f8>
 800bd20:	6923      	ldr	r3, [r4, #16]
 800bd22:	4642      	mov	r2, r8
 800bd24:	4631      	mov	r1, r6
 800bd26:	4628      	mov	r0, r5
 800bd28:	47b8      	blx	r7
 800bd2a:	3001      	adds	r0, #1
 800bd2c:	d12c      	bne.n	800bd88 <_printf_float+0x250>
 800bd2e:	e764      	b.n	800bbfa <_printf_float+0xc2>
 800bd30:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bd34:	f240 80e0 	bls.w	800bef8 <_printf_float+0x3c0>
 800bd38:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bd3c:	2200      	movs	r2, #0
 800bd3e:	2300      	movs	r3, #0
 800bd40:	f7f4 feda 	bl	8000af8 <__aeabi_dcmpeq>
 800bd44:	2800      	cmp	r0, #0
 800bd46:	d034      	beq.n	800bdb2 <_printf_float+0x27a>
 800bd48:	4a37      	ldr	r2, [pc, #220]	; (800be28 <_printf_float+0x2f0>)
 800bd4a:	2301      	movs	r3, #1
 800bd4c:	4631      	mov	r1, r6
 800bd4e:	4628      	mov	r0, r5
 800bd50:	47b8      	blx	r7
 800bd52:	3001      	adds	r0, #1
 800bd54:	f43f af51 	beq.w	800bbfa <_printf_float+0xc2>
 800bd58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bd5c:	429a      	cmp	r2, r3
 800bd5e:	db02      	blt.n	800bd66 <_printf_float+0x22e>
 800bd60:	6823      	ldr	r3, [r4, #0]
 800bd62:	07d8      	lsls	r0, r3, #31
 800bd64:	d510      	bpl.n	800bd88 <_printf_float+0x250>
 800bd66:	ee18 3a10 	vmov	r3, s16
 800bd6a:	4652      	mov	r2, sl
 800bd6c:	4631      	mov	r1, r6
 800bd6e:	4628      	mov	r0, r5
 800bd70:	47b8      	blx	r7
 800bd72:	3001      	adds	r0, #1
 800bd74:	f43f af41 	beq.w	800bbfa <_printf_float+0xc2>
 800bd78:	f04f 0800 	mov.w	r8, #0
 800bd7c:	f104 091a 	add.w	r9, r4, #26
 800bd80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd82:	3b01      	subs	r3, #1
 800bd84:	4543      	cmp	r3, r8
 800bd86:	dc09      	bgt.n	800bd9c <_printf_float+0x264>
 800bd88:	6823      	ldr	r3, [r4, #0]
 800bd8a:	079b      	lsls	r3, r3, #30
 800bd8c:	f100 8105 	bmi.w	800bf9a <_printf_float+0x462>
 800bd90:	68e0      	ldr	r0, [r4, #12]
 800bd92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd94:	4298      	cmp	r0, r3
 800bd96:	bfb8      	it	lt
 800bd98:	4618      	movlt	r0, r3
 800bd9a:	e730      	b.n	800bbfe <_printf_float+0xc6>
 800bd9c:	2301      	movs	r3, #1
 800bd9e:	464a      	mov	r2, r9
 800bda0:	4631      	mov	r1, r6
 800bda2:	4628      	mov	r0, r5
 800bda4:	47b8      	blx	r7
 800bda6:	3001      	adds	r0, #1
 800bda8:	f43f af27 	beq.w	800bbfa <_printf_float+0xc2>
 800bdac:	f108 0801 	add.w	r8, r8, #1
 800bdb0:	e7e6      	b.n	800bd80 <_printf_float+0x248>
 800bdb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	dc39      	bgt.n	800be2c <_printf_float+0x2f4>
 800bdb8:	4a1b      	ldr	r2, [pc, #108]	; (800be28 <_printf_float+0x2f0>)
 800bdba:	2301      	movs	r3, #1
 800bdbc:	4631      	mov	r1, r6
 800bdbe:	4628      	mov	r0, r5
 800bdc0:	47b8      	blx	r7
 800bdc2:	3001      	adds	r0, #1
 800bdc4:	f43f af19 	beq.w	800bbfa <_printf_float+0xc2>
 800bdc8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bdcc:	4313      	orrs	r3, r2
 800bdce:	d102      	bne.n	800bdd6 <_printf_float+0x29e>
 800bdd0:	6823      	ldr	r3, [r4, #0]
 800bdd2:	07d9      	lsls	r1, r3, #31
 800bdd4:	d5d8      	bpl.n	800bd88 <_printf_float+0x250>
 800bdd6:	ee18 3a10 	vmov	r3, s16
 800bdda:	4652      	mov	r2, sl
 800bddc:	4631      	mov	r1, r6
 800bdde:	4628      	mov	r0, r5
 800bde0:	47b8      	blx	r7
 800bde2:	3001      	adds	r0, #1
 800bde4:	f43f af09 	beq.w	800bbfa <_printf_float+0xc2>
 800bde8:	f04f 0900 	mov.w	r9, #0
 800bdec:	f104 0a1a 	add.w	sl, r4, #26
 800bdf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdf2:	425b      	negs	r3, r3
 800bdf4:	454b      	cmp	r3, r9
 800bdf6:	dc01      	bgt.n	800bdfc <_printf_float+0x2c4>
 800bdf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bdfa:	e792      	b.n	800bd22 <_printf_float+0x1ea>
 800bdfc:	2301      	movs	r3, #1
 800bdfe:	4652      	mov	r2, sl
 800be00:	4631      	mov	r1, r6
 800be02:	4628      	mov	r0, r5
 800be04:	47b8      	blx	r7
 800be06:	3001      	adds	r0, #1
 800be08:	f43f aef7 	beq.w	800bbfa <_printf_float+0xc2>
 800be0c:	f109 0901 	add.w	r9, r9, #1
 800be10:	e7ee      	b.n	800bdf0 <_printf_float+0x2b8>
 800be12:	bf00      	nop
 800be14:	7fefffff 	.word	0x7fefffff
 800be18:	0800e50c 	.word	0x0800e50c
 800be1c:	0800e510 	.word	0x0800e510
 800be20:	0800e518 	.word	0x0800e518
 800be24:	0800e514 	.word	0x0800e514
 800be28:	0800e51c 	.word	0x0800e51c
 800be2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800be2e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800be30:	429a      	cmp	r2, r3
 800be32:	bfa8      	it	ge
 800be34:	461a      	movge	r2, r3
 800be36:	2a00      	cmp	r2, #0
 800be38:	4691      	mov	r9, r2
 800be3a:	dc37      	bgt.n	800beac <_printf_float+0x374>
 800be3c:	f04f 0b00 	mov.w	fp, #0
 800be40:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800be44:	f104 021a 	add.w	r2, r4, #26
 800be48:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800be4a:	9305      	str	r3, [sp, #20]
 800be4c:	eba3 0309 	sub.w	r3, r3, r9
 800be50:	455b      	cmp	r3, fp
 800be52:	dc33      	bgt.n	800bebc <_printf_float+0x384>
 800be54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800be58:	429a      	cmp	r2, r3
 800be5a:	db3b      	blt.n	800bed4 <_printf_float+0x39c>
 800be5c:	6823      	ldr	r3, [r4, #0]
 800be5e:	07da      	lsls	r2, r3, #31
 800be60:	d438      	bmi.n	800bed4 <_printf_float+0x39c>
 800be62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be64:	9a05      	ldr	r2, [sp, #20]
 800be66:	9909      	ldr	r1, [sp, #36]	; 0x24
 800be68:	1a9a      	subs	r2, r3, r2
 800be6a:	eba3 0901 	sub.w	r9, r3, r1
 800be6e:	4591      	cmp	r9, r2
 800be70:	bfa8      	it	ge
 800be72:	4691      	movge	r9, r2
 800be74:	f1b9 0f00 	cmp.w	r9, #0
 800be78:	dc35      	bgt.n	800bee6 <_printf_float+0x3ae>
 800be7a:	f04f 0800 	mov.w	r8, #0
 800be7e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800be82:	f104 0a1a 	add.w	sl, r4, #26
 800be86:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800be8a:	1a9b      	subs	r3, r3, r2
 800be8c:	eba3 0309 	sub.w	r3, r3, r9
 800be90:	4543      	cmp	r3, r8
 800be92:	f77f af79 	ble.w	800bd88 <_printf_float+0x250>
 800be96:	2301      	movs	r3, #1
 800be98:	4652      	mov	r2, sl
 800be9a:	4631      	mov	r1, r6
 800be9c:	4628      	mov	r0, r5
 800be9e:	47b8      	blx	r7
 800bea0:	3001      	adds	r0, #1
 800bea2:	f43f aeaa 	beq.w	800bbfa <_printf_float+0xc2>
 800bea6:	f108 0801 	add.w	r8, r8, #1
 800beaa:	e7ec      	b.n	800be86 <_printf_float+0x34e>
 800beac:	4613      	mov	r3, r2
 800beae:	4631      	mov	r1, r6
 800beb0:	4642      	mov	r2, r8
 800beb2:	4628      	mov	r0, r5
 800beb4:	47b8      	blx	r7
 800beb6:	3001      	adds	r0, #1
 800beb8:	d1c0      	bne.n	800be3c <_printf_float+0x304>
 800beba:	e69e      	b.n	800bbfa <_printf_float+0xc2>
 800bebc:	2301      	movs	r3, #1
 800bebe:	4631      	mov	r1, r6
 800bec0:	4628      	mov	r0, r5
 800bec2:	9205      	str	r2, [sp, #20]
 800bec4:	47b8      	blx	r7
 800bec6:	3001      	adds	r0, #1
 800bec8:	f43f ae97 	beq.w	800bbfa <_printf_float+0xc2>
 800becc:	9a05      	ldr	r2, [sp, #20]
 800bece:	f10b 0b01 	add.w	fp, fp, #1
 800bed2:	e7b9      	b.n	800be48 <_printf_float+0x310>
 800bed4:	ee18 3a10 	vmov	r3, s16
 800bed8:	4652      	mov	r2, sl
 800beda:	4631      	mov	r1, r6
 800bedc:	4628      	mov	r0, r5
 800bede:	47b8      	blx	r7
 800bee0:	3001      	adds	r0, #1
 800bee2:	d1be      	bne.n	800be62 <_printf_float+0x32a>
 800bee4:	e689      	b.n	800bbfa <_printf_float+0xc2>
 800bee6:	9a05      	ldr	r2, [sp, #20]
 800bee8:	464b      	mov	r3, r9
 800beea:	4442      	add	r2, r8
 800beec:	4631      	mov	r1, r6
 800beee:	4628      	mov	r0, r5
 800bef0:	47b8      	blx	r7
 800bef2:	3001      	adds	r0, #1
 800bef4:	d1c1      	bne.n	800be7a <_printf_float+0x342>
 800bef6:	e680      	b.n	800bbfa <_printf_float+0xc2>
 800bef8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800befa:	2a01      	cmp	r2, #1
 800befc:	dc01      	bgt.n	800bf02 <_printf_float+0x3ca>
 800befe:	07db      	lsls	r3, r3, #31
 800bf00:	d538      	bpl.n	800bf74 <_printf_float+0x43c>
 800bf02:	2301      	movs	r3, #1
 800bf04:	4642      	mov	r2, r8
 800bf06:	4631      	mov	r1, r6
 800bf08:	4628      	mov	r0, r5
 800bf0a:	47b8      	blx	r7
 800bf0c:	3001      	adds	r0, #1
 800bf0e:	f43f ae74 	beq.w	800bbfa <_printf_float+0xc2>
 800bf12:	ee18 3a10 	vmov	r3, s16
 800bf16:	4652      	mov	r2, sl
 800bf18:	4631      	mov	r1, r6
 800bf1a:	4628      	mov	r0, r5
 800bf1c:	47b8      	blx	r7
 800bf1e:	3001      	adds	r0, #1
 800bf20:	f43f ae6b 	beq.w	800bbfa <_printf_float+0xc2>
 800bf24:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bf28:	2200      	movs	r2, #0
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	f7f4 fde4 	bl	8000af8 <__aeabi_dcmpeq>
 800bf30:	b9d8      	cbnz	r0, 800bf6a <_printf_float+0x432>
 800bf32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf34:	f108 0201 	add.w	r2, r8, #1
 800bf38:	3b01      	subs	r3, #1
 800bf3a:	4631      	mov	r1, r6
 800bf3c:	4628      	mov	r0, r5
 800bf3e:	47b8      	blx	r7
 800bf40:	3001      	adds	r0, #1
 800bf42:	d10e      	bne.n	800bf62 <_printf_float+0x42a>
 800bf44:	e659      	b.n	800bbfa <_printf_float+0xc2>
 800bf46:	2301      	movs	r3, #1
 800bf48:	4652      	mov	r2, sl
 800bf4a:	4631      	mov	r1, r6
 800bf4c:	4628      	mov	r0, r5
 800bf4e:	47b8      	blx	r7
 800bf50:	3001      	adds	r0, #1
 800bf52:	f43f ae52 	beq.w	800bbfa <_printf_float+0xc2>
 800bf56:	f108 0801 	add.w	r8, r8, #1
 800bf5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf5c:	3b01      	subs	r3, #1
 800bf5e:	4543      	cmp	r3, r8
 800bf60:	dcf1      	bgt.n	800bf46 <_printf_float+0x40e>
 800bf62:	464b      	mov	r3, r9
 800bf64:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800bf68:	e6dc      	b.n	800bd24 <_printf_float+0x1ec>
 800bf6a:	f04f 0800 	mov.w	r8, #0
 800bf6e:	f104 0a1a 	add.w	sl, r4, #26
 800bf72:	e7f2      	b.n	800bf5a <_printf_float+0x422>
 800bf74:	2301      	movs	r3, #1
 800bf76:	4642      	mov	r2, r8
 800bf78:	e7df      	b.n	800bf3a <_printf_float+0x402>
 800bf7a:	2301      	movs	r3, #1
 800bf7c:	464a      	mov	r2, r9
 800bf7e:	4631      	mov	r1, r6
 800bf80:	4628      	mov	r0, r5
 800bf82:	47b8      	blx	r7
 800bf84:	3001      	adds	r0, #1
 800bf86:	f43f ae38 	beq.w	800bbfa <_printf_float+0xc2>
 800bf8a:	f108 0801 	add.w	r8, r8, #1
 800bf8e:	68e3      	ldr	r3, [r4, #12]
 800bf90:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bf92:	1a5b      	subs	r3, r3, r1
 800bf94:	4543      	cmp	r3, r8
 800bf96:	dcf0      	bgt.n	800bf7a <_printf_float+0x442>
 800bf98:	e6fa      	b.n	800bd90 <_printf_float+0x258>
 800bf9a:	f04f 0800 	mov.w	r8, #0
 800bf9e:	f104 0919 	add.w	r9, r4, #25
 800bfa2:	e7f4      	b.n	800bf8e <_printf_float+0x456>

0800bfa4 <_printf_common>:
 800bfa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bfa8:	4616      	mov	r6, r2
 800bfaa:	4699      	mov	r9, r3
 800bfac:	688a      	ldr	r2, [r1, #8]
 800bfae:	690b      	ldr	r3, [r1, #16]
 800bfb0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bfb4:	4293      	cmp	r3, r2
 800bfb6:	bfb8      	it	lt
 800bfb8:	4613      	movlt	r3, r2
 800bfba:	6033      	str	r3, [r6, #0]
 800bfbc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bfc0:	4607      	mov	r7, r0
 800bfc2:	460c      	mov	r4, r1
 800bfc4:	b10a      	cbz	r2, 800bfca <_printf_common+0x26>
 800bfc6:	3301      	adds	r3, #1
 800bfc8:	6033      	str	r3, [r6, #0]
 800bfca:	6823      	ldr	r3, [r4, #0]
 800bfcc:	0699      	lsls	r1, r3, #26
 800bfce:	bf42      	ittt	mi
 800bfd0:	6833      	ldrmi	r3, [r6, #0]
 800bfd2:	3302      	addmi	r3, #2
 800bfd4:	6033      	strmi	r3, [r6, #0]
 800bfd6:	6825      	ldr	r5, [r4, #0]
 800bfd8:	f015 0506 	ands.w	r5, r5, #6
 800bfdc:	d106      	bne.n	800bfec <_printf_common+0x48>
 800bfde:	f104 0a19 	add.w	sl, r4, #25
 800bfe2:	68e3      	ldr	r3, [r4, #12]
 800bfe4:	6832      	ldr	r2, [r6, #0]
 800bfe6:	1a9b      	subs	r3, r3, r2
 800bfe8:	42ab      	cmp	r3, r5
 800bfea:	dc26      	bgt.n	800c03a <_printf_common+0x96>
 800bfec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bff0:	1e13      	subs	r3, r2, #0
 800bff2:	6822      	ldr	r2, [r4, #0]
 800bff4:	bf18      	it	ne
 800bff6:	2301      	movne	r3, #1
 800bff8:	0692      	lsls	r2, r2, #26
 800bffa:	d42b      	bmi.n	800c054 <_printf_common+0xb0>
 800bffc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c000:	4649      	mov	r1, r9
 800c002:	4638      	mov	r0, r7
 800c004:	47c0      	blx	r8
 800c006:	3001      	adds	r0, #1
 800c008:	d01e      	beq.n	800c048 <_printf_common+0xa4>
 800c00a:	6823      	ldr	r3, [r4, #0]
 800c00c:	68e5      	ldr	r5, [r4, #12]
 800c00e:	6832      	ldr	r2, [r6, #0]
 800c010:	f003 0306 	and.w	r3, r3, #6
 800c014:	2b04      	cmp	r3, #4
 800c016:	bf08      	it	eq
 800c018:	1aad      	subeq	r5, r5, r2
 800c01a:	68a3      	ldr	r3, [r4, #8]
 800c01c:	6922      	ldr	r2, [r4, #16]
 800c01e:	bf0c      	ite	eq
 800c020:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c024:	2500      	movne	r5, #0
 800c026:	4293      	cmp	r3, r2
 800c028:	bfc4      	itt	gt
 800c02a:	1a9b      	subgt	r3, r3, r2
 800c02c:	18ed      	addgt	r5, r5, r3
 800c02e:	2600      	movs	r6, #0
 800c030:	341a      	adds	r4, #26
 800c032:	42b5      	cmp	r5, r6
 800c034:	d11a      	bne.n	800c06c <_printf_common+0xc8>
 800c036:	2000      	movs	r0, #0
 800c038:	e008      	b.n	800c04c <_printf_common+0xa8>
 800c03a:	2301      	movs	r3, #1
 800c03c:	4652      	mov	r2, sl
 800c03e:	4649      	mov	r1, r9
 800c040:	4638      	mov	r0, r7
 800c042:	47c0      	blx	r8
 800c044:	3001      	adds	r0, #1
 800c046:	d103      	bne.n	800c050 <_printf_common+0xac>
 800c048:	f04f 30ff 	mov.w	r0, #4294967295
 800c04c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c050:	3501      	adds	r5, #1
 800c052:	e7c6      	b.n	800bfe2 <_printf_common+0x3e>
 800c054:	18e1      	adds	r1, r4, r3
 800c056:	1c5a      	adds	r2, r3, #1
 800c058:	2030      	movs	r0, #48	; 0x30
 800c05a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c05e:	4422      	add	r2, r4
 800c060:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c064:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c068:	3302      	adds	r3, #2
 800c06a:	e7c7      	b.n	800bffc <_printf_common+0x58>
 800c06c:	2301      	movs	r3, #1
 800c06e:	4622      	mov	r2, r4
 800c070:	4649      	mov	r1, r9
 800c072:	4638      	mov	r0, r7
 800c074:	47c0      	blx	r8
 800c076:	3001      	adds	r0, #1
 800c078:	d0e6      	beq.n	800c048 <_printf_common+0xa4>
 800c07a:	3601      	adds	r6, #1
 800c07c:	e7d9      	b.n	800c032 <_printf_common+0x8e>
	...

0800c080 <_printf_i>:
 800c080:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c084:	7e0f      	ldrb	r7, [r1, #24]
 800c086:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c088:	2f78      	cmp	r7, #120	; 0x78
 800c08a:	4691      	mov	r9, r2
 800c08c:	4680      	mov	r8, r0
 800c08e:	460c      	mov	r4, r1
 800c090:	469a      	mov	sl, r3
 800c092:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c096:	d807      	bhi.n	800c0a8 <_printf_i+0x28>
 800c098:	2f62      	cmp	r7, #98	; 0x62
 800c09a:	d80a      	bhi.n	800c0b2 <_printf_i+0x32>
 800c09c:	2f00      	cmp	r7, #0
 800c09e:	f000 80d8 	beq.w	800c252 <_printf_i+0x1d2>
 800c0a2:	2f58      	cmp	r7, #88	; 0x58
 800c0a4:	f000 80a3 	beq.w	800c1ee <_printf_i+0x16e>
 800c0a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c0ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c0b0:	e03a      	b.n	800c128 <_printf_i+0xa8>
 800c0b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c0b6:	2b15      	cmp	r3, #21
 800c0b8:	d8f6      	bhi.n	800c0a8 <_printf_i+0x28>
 800c0ba:	a101      	add	r1, pc, #4	; (adr r1, 800c0c0 <_printf_i+0x40>)
 800c0bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c0c0:	0800c119 	.word	0x0800c119
 800c0c4:	0800c12d 	.word	0x0800c12d
 800c0c8:	0800c0a9 	.word	0x0800c0a9
 800c0cc:	0800c0a9 	.word	0x0800c0a9
 800c0d0:	0800c0a9 	.word	0x0800c0a9
 800c0d4:	0800c0a9 	.word	0x0800c0a9
 800c0d8:	0800c12d 	.word	0x0800c12d
 800c0dc:	0800c0a9 	.word	0x0800c0a9
 800c0e0:	0800c0a9 	.word	0x0800c0a9
 800c0e4:	0800c0a9 	.word	0x0800c0a9
 800c0e8:	0800c0a9 	.word	0x0800c0a9
 800c0ec:	0800c239 	.word	0x0800c239
 800c0f0:	0800c15d 	.word	0x0800c15d
 800c0f4:	0800c21b 	.word	0x0800c21b
 800c0f8:	0800c0a9 	.word	0x0800c0a9
 800c0fc:	0800c0a9 	.word	0x0800c0a9
 800c100:	0800c25b 	.word	0x0800c25b
 800c104:	0800c0a9 	.word	0x0800c0a9
 800c108:	0800c15d 	.word	0x0800c15d
 800c10c:	0800c0a9 	.word	0x0800c0a9
 800c110:	0800c0a9 	.word	0x0800c0a9
 800c114:	0800c223 	.word	0x0800c223
 800c118:	682b      	ldr	r3, [r5, #0]
 800c11a:	1d1a      	adds	r2, r3, #4
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	602a      	str	r2, [r5, #0]
 800c120:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c124:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c128:	2301      	movs	r3, #1
 800c12a:	e0a3      	b.n	800c274 <_printf_i+0x1f4>
 800c12c:	6820      	ldr	r0, [r4, #0]
 800c12e:	6829      	ldr	r1, [r5, #0]
 800c130:	0606      	lsls	r6, r0, #24
 800c132:	f101 0304 	add.w	r3, r1, #4
 800c136:	d50a      	bpl.n	800c14e <_printf_i+0xce>
 800c138:	680e      	ldr	r6, [r1, #0]
 800c13a:	602b      	str	r3, [r5, #0]
 800c13c:	2e00      	cmp	r6, #0
 800c13e:	da03      	bge.n	800c148 <_printf_i+0xc8>
 800c140:	232d      	movs	r3, #45	; 0x2d
 800c142:	4276      	negs	r6, r6
 800c144:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c148:	485e      	ldr	r0, [pc, #376]	; (800c2c4 <_printf_i+0x244>)
 800c14a:	230a      	movs	r3, #10
 800c14c:	e019      	b.n	800c182 <_printf_i+0x102>
 800c14e:	680e      	ldr	r6, [r1, #0]
 800c150:	602b      	str	r3, [r5, #0]
 800c152:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c156:	bf18      	it	ne
 800c158:	b236      	sxthne	r6, r6
 800c15a:	e7ef      	b.n	800c13c <_printf_i+0xbc>
 800c15c:	682b      	ldr	r3, [r5, #0]
 800c15e:	6820      	ldr	r0, [r4, #0]
 800c160:	1d19      	adds	r1, r3, #4
 800c162:	6029      	str	r1, [r5, #0]
 800c164:	0601      	lsls	r1, r0, #24
 800c166:	d501      	bpl.n	800c16c <_printf_i+0xec>
 800c168:	681e      	ldr	r6, [r3, #0]
 800c16a:	e002      	b.n	800c172 <_printf_i+0xf2>
 800c16c:	0646      	lsls	r6, r0, #25
 800c16e:	d5fb      	bpl.n	800c168 <_printf_i+0xe8>
 800c170:	881e      	ldrh	r6, [r3, #0]
 800c172:	4854      	ldr	r0, [pc, #336]	; (800c2c4 <_printf_i+0x244>)
 800c174:	2f6f      	cmp	r7, #111	; 0x6f
 800c176:	bf0c      	ite	eq
 800c178:	2308      	moveq	r3, #8
 800c17a:	230a      	movne	r3, #10
 800c17c:	2100      	movs	r1, #0
 800c17e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c182:	6865      	ldr	r5, [r4, #4]
 800c184:	60a5      	str	r5, [r4, #8]
 800c186:	2d00      	cmp	r5, #0
 800c188:	bfa2      	ittt	ge
 800c18a:	6821      	ldrge	r1, [r4, #0]
 800c18c:	f021 0104 	bicge.w	r1, r1, #4
 800c190:	6021      	strge	r1, [r4, #0]
 800c192:	b90e      	cbnz	r6, 800c198 <_printf_i+0x118>
 800c194:	2d00      	cmp	r5, #0
 800c196:	d04d      	beq.n	800c234 <_printf_i+0x1b4>
 800c198:	4615      	mov	r5, r2
 800c19a:	fbb6 f1f3 	udiv	r1, r6, r3
 800c19e:	fb03 6711 	mls	r7, r3, r1, r6
 800c1a2:	5dc7      	ldrb	r7, [r0, r7]
 800c1a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c1a8:	4637      	mov	r7, r6
 800c1aa:	42bb      	cmp	r3, r7
 800c1ac:	460e      	mov	r6, r1
 800c1ae:	d9f4      	bls.n	800c19a <_printf_i+0x11a>
 800c1b0:	2b08      	cmp	r3, #8
 800c1b2:	d10b      	bne.n	800c1cc <_printf_i+0x14c>
 800c1b4:	6823      	ldr	r3, [r4, #0]
 800c1b6:	07de      	lsls	r6, r3, #31
 800c1b8:	d508      	bpl.n	800c1cc <_printf_i+0x14c>
 800c1ba:	6923      	ldr	r3, [r4, #16]
 800c1bc:	6861      	ldr	r1, [r4, #4]
 800c1be:	4299      	cmp	r1, r3
 800c1c0:	bfde      	ittt	le
 800c1c2:	2330      	movle	r3, #48	; 0x30
 800c1c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c1c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c1cc:	1b52      	subs	r2, r2, r5
 800c1ce:	6122      	str	r2, [r4, #16]
 800c1d0:	f8cd a000 	str.w	sl, [sp]
 800c1d4:	464b      	mov	r3, r9
 800c1d6:	aa03      	add	r2, sp, #12
 800c1d8:	4621      	mov	r1, r4
 800c1da:	4640      	mov	r0, r8
 800c1dc:	f7ff fee2 	bl	800bfa4 <_printf_common>
 800c1e0:	3001      	adds	r0, #1
 800c1e2:	d14c      	bne.n	800c27e <_printf_i+0x1fe>
 800c1e4:	f04f 30ff 	mov.w	r0, #4294967295
 800c1e8:	b004      	add	sp, #16
 800c1ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1ee:	4835      	ldr	r0, [pc, #212]	; (800c2c4 <_printf_i+0x244>)
 800c1f0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c1f4:	6829      	ldr	r1, [r5, #0]
 800c1f6:	6823      	ldr	r3, [r4, #0]
 800c1f8:	f851 6b04 	ldr.w	r6, [r1], #4
 800c1fc:	6029      	str	r1, [r5, #0]
 800c1fe:	061d      	lsls	r5, r3, #24
 800c200:	d514      	bpl.n	800c22c <_printf_i+0x1ac>
 800c202:	07df      	lsls	r7, r3, #31
 800c204:	bf44      	itt	mi
 800c206:	f043 0320 	orrmi.w	r3, r3, #32
 800c20a:	6023      	strmi	r3, [r4, #0]
 800c20c:	b91e      	cbnz	r6, 800c216 <_printf_i+0x196>
 800c20e:	6823      	ldr	r3, [r4, #0]
 800c210:	f023 0320 	bic.w	r3, r3, #32
 800c214:	6023      	str	r3, [r4, #0]
 800c216:	2310      	movs	r3, #16
 800c218:	e7b0      	b.n	800c17c <_printf_i+0xfc>
 800c21a:	6823      	ldr	r3, [r4, #0]
 800c21c:	f043 0320 	orr.w	r3, r3, #32
 800c220:	6023      	str	r3, [r4, #0]
 800c222:	2378      	movs	r3, #120	; 0x78
 800c224:	4828      	ldr	r0, [pc, #160]	; (800c2c8 <_printf_i+0x248>)
 800c226:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c22a:	e7e3      	b.n	800c1f4 <_printf_i+0x174>
 800c22c:	0659      	lsls	r1, r3, #25
 800c22e:	bf48      	it	mi
 800c230:	b2b6      	uxthmi	r6, r6
 800c232:	e7e6      	b.n	800c202 <_printf_i+0x182>
 800c234:	4615      	mov	r5, r2
 800c236:	e7bb      	b.n	800c1b0 <_printf_i+0x130>
 800c238:	682b      	ldr	r3, [r5, #0]
 800c23a:	6826      	ldr	r6, [r4, #0]
 800c23c:	6961      	ldr	r1, [r4, #20]
 800c23e:	1d18      	adds	r0, r3, #4
 800c240:	6028      	str	r0, [r5, #0]
 800c242:	0635      	lsls	r5, r6, #24
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	d501      	bpl.n	800c24c <_printf_i+0x1cc>
 800c248:	6019      	str	r1, [r3, #0]
 800c24a:	e002      	b.n	800c252 <_printf_i+0x1d2>
 800c24c:	0670      	lsls	r0, r6, #25
 800c24e:	d5fb      	bpl.n	800c248 <_printf_i+0x1c8>
 800c250:	8019      	strh	r1, [r3, #0]
 800c252:	2300      	movs	r3, #0
 800c254:	6123      	str	r3, [r4, #16]
 800c256:	4615      	mov	r5, r2
 800c258:	e7ba      	b.n	800c1d0 <_printf_i+0x150>
 800c25a:	682b      	ldr	r3, [r5, #0]
 800c25c:	1d1a      	adds	r2, r3, #4
 800c25e:	602a      	str	r2, [r5, #0]
 800c260:	681d      	ldr	r5, [r3, #0]
 800c262:	6862      	ldr	r2, [r4, #4]
 800c264:	2100      	movs	r1, #0
 800c266:	4628      	mov	r0, r5
 800c268:	f7f3 ffd2 	bl	8000210 <memchr>
 800c26c:	b108      	cbz	r0, 800c272 <_printf_i+0x1f2>
 800c26e:	1b40      	subs	r0, r0, r5
 800c270:	6060      	str	r0, [r4, #4]
 800c272:	6863      	ldr	r3, [r4, #4]
 800c274:	6123      	str	r3, [r4, #16]
 800c276:	2300      	movs	r3, #0
 800c278:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c27c:	e7a8      	b.n	800c1d0 <_printf_i+0x150>
 800c27e:	6923      	ldr	r3, [r4, #16]
 800c280:	462a      	mov	r2, r5
 800c282:	4649      	mov	r1, r9
 800c284:	4640      	mov	r0, r8
 800c286:	47d0      	blx	sl
 800c288:	3001      	adds	r0, #1
 800c28a:	d0ab      	beq.n	800c1e4 <_printf_i+0x164>
 800c28c:	6823      	ldr	r3, [r4, #0]
 800c28e:	079b      	lsls	r3, r3, #30
 800c290:	d413      	bmi.n	800c2ba <_printf_i+0x23a>
 800c292:	68e0      	ldr	r0, [r4, #12]
 800c294:	9b03      	ldr	r3, [sp, #12]
 800c296:	4298      	cmp	r0, r3
 800c298:	bfb8      	it	lt
 800c29a:	4618      	movlt	r0, r3
 800c29c:	e7a4      	b.n	800c1e8 <_printf_i+0x168>
 800c29e:	2301      	movs	r3, #1
 800c2a0:	4632      	mov	r2, r6
 800c2a2:	4649      	mov	r1, r9
 800c2a4:	4640      	mov	r0, r8
 800c2a6:	47d0      	blx	sl
 800c2a8:	3001      	adds	r0, #1
 800c2aa:	d09b      	beq.n	800c1e4 <_printf_i+0x164>
 800c2ac:	3501      	adds	r5, #1
 800c2ae:	68e3      	ldr	r3, [r4, #12]
 800c2b0:	9903      	ldr	r1, [sp, #12]
 800c2b2:	1a5b      	subs	r3, r3, r1
 800c2b4:	42ab      	cmp	r3, r5
 800c2b6:	dcf2      	bgt.n	800c29e <_printf_i+0x21e>
 800c2b8:	e7eb      	b.n	800c292 <_printf_i+0x212>
 800c2ba:	2500      	movs	r5, #0
 800c2bc:	f104 0619 	add.w	r6, r4, #25
 800c2c0:	e7f5      	b.n	800c2ae <_printf_i+0x22e>
 800c2c2:	bf00      	nop
 800c2c4:	0800e51e 	.word	0x0800e51e
 800c2c8:	0800e52f 	.word	0x0800e52f

0800c2cc <iprintf>:
 800c2cc:	b40f      	push	{r0, r1, r2, r3}
 800c2ce:	4b0a      	ldr	r3, [pc, #40]	; (800c2f8 <iprintf+0x2c>)
 800c2d0:	b513      	push	{r0, r1, r4, lr}
 800c2d2:	681c      	ldr	r4, [r3, #0]
 800c2d4:	b124      	cbz	r4, 800c2e0 <iprintf+0x14>
 800c2d6:	69a3      	ldr	r3, [r4, #24]
 800c2d8:	b913      	cbnz	r3, 800c2e0 <iprintf+0x14>
 800c2da:	4620      	mov	r0, r4
 800c2dc:	f001 f8e8 	bl	800d4b0 <__sinit>
 800c2e0:	ab05      	add	r3, sp, #20
 800c2e2:	9a04      	ldr	r2, [sp, #16]
 800c2e4:	68a1      	ldr	r1, [r4, #8]
 800c2e6:	9301      	str	r3, [sp, #4]
 800c2e8:	4620      	mov	r0, r4
 800c2ea:	f001 fdc9 	bl	800de80 <_vfiprintf_r>
 800c2ee:	b002      	add	sp, #8
 800c2f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c2f4:	b004      	add	sp, #16
 800c2f6:	4770      	bx	lr
 800c2f8:	20000014 	.word	0x20000014

0800c2fc <_puts_r>:
 800c2fc:	b570      	push	{r4, r5, r6, lr}
 800c2fe:	460e      	mov	r6, r1
 800c300:	4605      	mov	r5, r0
 800c302:	b118      	cbz	r0, 800c30c <_puts_r+0x10>
 800c304:	6983      	ldr	r3, [r0, #24]
 800c306:	b90b      	cbnz	r3, 800c30c <_puts_r+0x10>
 800c308:	f001 f8d2 	bl	800d4b0 <__sinit>
 800c30c:	69ab      	ldr	r3, [r5, #24]
 800c30e:	68ac      	ldr	r4, [r5, #8]
 800c310:	b913      	cbnz	r3, 800c318 <_puts_r+0x1c>
 800c312:	4628      	mov	r0, r5
 800c314:	f001 f8cc 	bl	800d4b0 <__sinit>
 800c318:	4b2c      	ldr	r3, [pc, #176]	; (800c3cc <_puts_r+0xd0>)
 800c31a:	429c      	cmp	r4, r3
 800c31c:	d120      	bne.n	800c360 <_puts_r+0x64>
 800c31e:	686c      	ldr	r4, [r5, #4]
 800c320:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c322:	07db      	lsls	r3, r3, #31
 800c324:	d405      	bmi.n	800c332 <_puts_r+0x36>
 800c326:	89a3      	ldrh	r3, [r4, #12]
 800c328:	0598      	lsls	r0, r3, #22
 800c32a:	d402      	bmi.n	800c332 <_puts_r+0x36>
 800c32c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c32e:	f001 f962 	bl	800d5f6 <__retarget_lock_acquire_recursive>
 800c332:	89a3      	ldrh	r3, [r4, #12]
 800c334:	0719      	lsls	r1, r3, #28
 800c336:	d51d      	bpl.n	800c374 <_puts_r+0x78>
 800c338:	6923      	ldr	r3, [r4, #16]
 800c33a:	b1db      	cbz	r3, 800c374 <_puts_r+0x78>
 800c33c:	3e01      	subs	r6, #1
 800c33e:	68a3      	ldr	r3, [r4, #8]
 800c340:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c344:	3b01      	subs	r3, #1
 800c346:	60a3      	str	r3, [r4, #8]
 800c348:	bb39      	cbnz	r1, 800c39a <_puts_r+0x9e>
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	da38      	bge.n	800c3c0 <_puts_r+0xc4>
 800c34e:	4622      	mov	r2, r4
 800c350:	210a      	movs	r1, #10
 800c352:	4628      	mov	r0, r5
 800c354:	f000 f858 	bl	800c408 <__swbuf_r>
 800c358:	3001      	adds	r0, #1
 800c35a:	d011      	beq.n	800c380 <_puts_r+0x84>
 800c35c:	250a      	movs	r5, #10
 800c35e:	e011      	b.n	800c384 <_puts_r+0x88>
 800c360:	4b1b      	ldr	r3, [pc, #108]	; (800c3d0 <_puts_r+0xd4>)
 800c362:	429c      	cmp	r4, r3
 800c364:	d101      	bne.n	800c36a <_puts_r+0x6e>
 800c366:	68ac      	ldr	r4, [r5, #8]
 800c368:	e7da      	b.n	800c320 <_puts_r+0x24>
 800c36a:	4b1a      	ldr	r3, [pc, #104]	; (800c3d4 <_puts_r+0xd8>)
 800c36c:	429c      	cmp	r4, r3
 800c36e:	bf08      	it	eq
 800c370:	68ec      	ldreq	r4, [r5, #12]
 800c372:	e7d5      	b.n	800c320 <_puts_r+0x24>
 800c374:	4621      	mov	r1, r4
 800c376:	4628      	mov	r0, r5
 800c378:	f000 f898 	bl	800c4ac <__swsetup_r>
 800c37c:	2800      	cmp	r0, #0
 800c37e:	d0dd      	beq.n	800c33c <_puts_r+0x40>
 800c380:	f04f 35ff 	mov.w	r5, #4294967295
 800c384:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c386:	07da      	lsls	r2, r3, #31
 800c388:	d405      	bmi.n	800c396 <_puts_r+0x9a>
 800c38a:	89a3      	ldrh	r3, [r4, #12]
 800c38c:	059b      	lsls	r3, r3, #22
 800c38e:	d402      	bmi.n	800c396 <_puts_r+0x9a>
 800c390:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c392:	f001 f931 	bl	800d5f8 <__retarget_lock_release_recursive>
 800c396:	4628      	mov	r0, r5
 800c398:	bd70      	pop	{r4, r5, r6, pc}
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	da04      	bge.n	800c3a8 <_puts_r+0xac>
 800c39e:	69a2      	ldr	r2, [r4, #24]
 800c3a0:	429a      	cmp	r2, r3
 800c3a2:	dc06      	bgt.n	800c3b2 <_puts_r+0xb6>
 800c3a4:	290a      	cmp	r1, #10
 800c3a6:	d004      	beq.n	800c3b2 <_puts_r+0xb6>
 800c3a8:	6823      	ldr	r3, [r4, #0]
 800c3aa:	1c5a      	adds	r2, r3, #1
 800c3ac:	6022      	str	r2, [r4, #0]
 800c3ae:	7019      	strb	r1, [r3, #0]
 800c3b0:	e7c5      	b.n	800c33e <_puts_r+0x42>
 800c3b2:	4622      	mov	r2, r4
 800c3b4:	4628      	mov	r0, r5
 800c3b6:	f000 f827 	bl	800c408 <__swbuf_r>
 800c3ba:	3001      	adds	r0, #1
 800c3bc:	d1bf      	bne.n	800c33e <_puts_r+0x42>
 800c3be:	e7df      	b.n	800c380 <_puts_r+0x84>
 800c3c0:	6823      	ldr	r3, [r4, #0]
 800c3c2:	250a      	movs	r5, #10
 800c3c4:	1c5a      	adds	r2, r3, #1
 800c3c6:	6022      	str	r2, [r4, #0]
 800c3c8:	701d      	strb	r5, [r3, #0]
 800c3ca:	e7db      	b.n	800c384 <_puts_r+0x88>
 800c3cc:	0800e5f0 	.word	0x0800e5f0
 800c3d0:	0800e610 	.word	0x0800e610
 800c3d4:	0800e5d0 	.word	0x0800e5d0

0800c3d8 <puts>:
 800c3d8:	4b02      	ldr	r3, [pc, #8]	; (800c3e4 <puts+0xc>)
 800c3da:	4601      	mov	r1, r0
 800c3dc:	6818      	ldr	r0, [r3, #0]
 800c3de:	f7ff bf8d 	b.w	800c2fc <_puts_r>
 800c3e2:	bf00      	nop
 800c3e4:	20000014 	.word	0x20000014

0800c3e8 <_sbrk_r>:
 800c3e8:	b538      	push	{r3, r4, r5, lr}
 800c3ea:	4d06      	ldr	r5, [pc, #24]	; (800c404 <_sbrk_r+0x1c>)
 800c3ec:	2300      	movs	r3, #0
 800c3ee:	4604      	mov	r4, r0
 800c3f0:	4608      	mov	r0, r1
 800c3f2:	602b      	str	r3, [r5, #0]
 800c3f4:	f7f7 f9de 	bl	80037b4 <_sbrk>
 800c3f8:	1c43      	adds	r3, r0, #1
 800c3fa:	d102      	bne.n	800c402 <_sbrk_r+0x1a>
 800c3fc:	682b      	ldr	r3, [r5, #0]
 800c3fe:	b103      	cbz	r3, 800c402 <_sbrk_r+0x1a>
 800c400:	6023      	str	r3, [r4, #0]
 800c402:	bd38      	pop	{r3, r4, r5, pc}
 800c404:	20000860 	.word	0x20000860

0800c408 <__swbuf_r>:
 800c408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c40a:	460e      	mov	r6, r1
 800c40c:	4614      	mov	r4, r2
 800c40e:	4605      	mov	r5, r0
 800c410:	b118      	cbz	r0, 800c41a <__swbuf_r+0x12>
 800c412:	6983      	ldr	r3, [r0, #24]
 800c414:	b90b      	cbnz	r3, 800c41a <__swbuf_r+0x12>
 800c416:	f001 f84b 	bl	800d4b0 <__sinit>
 800c41a:	4b21      	ldr	r3, [pc, #132]	; (800c4a0 <__swbuf_r+0x98>)
 800c41c:	429c      	cmp	r4, r3
 800c41e:	d12b      	bne.n	800c478 <__swbuf_r+0x70>
 800c420:	686c      	ldr	r4, [r5, #4]
 800c422:	69a3      	ldr	r3, [r4, #24]
 800c424:	60a3      	str	r3, [r4, #8]
 800c426:	89a3      	ldrh	r3, [r4, #12]
 800c428:	071a      	lsls	r2, r3, #28
 800c42a:	d52f      	bpl.n	800c48c <__swbuf_r+0x84>
 800c42c:	6923      	ldr	r3, [r4, #16]
 800c42e:	b36b      	cbz	r3, 800c48c <__swbuf_r+0x84>
 800c430:	6923      	ldr	r3, [r4, #16]
 800c432:	6820      	ldr	r0, [r4, #0]
 800c434:	1ac0      	subs	r0, r0, r3
 800c436:	6963      	ldr	r3, [r4, #20]
 800c438:	b2f6      	uxtb	r6, r6
 800c43a:	4283      	cmp	r3, r0
 800c43c:	4637      	mov	r7, r6
 800c43e:	dc04      	bgt.n	800c44a <__swbuf_r+0x42>
 800c440:	4621      	mov	r1, r4
 800c442:	4628      	mov	r0, r5
 800c444:	f000 ffa0 	bl	800d388 <_fflush_r>
 800c448:	bb30      	cbnz	r0, 800c498 <__swbuf_r+0x90>
 800c44a:	68a3      	ldr	r3, [r4, #8]
 800c44c:	3b01      	subs	r3, #1
 800c44e:	60a3      	str	r3, [r4, #8]
 800c450:	6823      	ldr	r3, [r4, #0]
 800c452:	1c5a      	adds	r2, r3, #1
 800c454:	6022      	str	r2, [r4, #0]
 800c456:	701e      	strb	r6, [r3, #0]
 800c458:	6963      	ldr	r3, [r4, #20]
 800c45a:	3001      	adds	r0, #1
 800c45c:	4283      	cmp	r3, r0
 800c45e:	d004      	beq.n	800c46a <__swbuf_r+0x62>
 800c460:	89a3      	ldrh	r3, [r4, #12]
 800c462:	07db      	lsls	r3, r3, #31
 800c464:	d506      	bpl.n	800c474 <__swbuf_r+0x6c>
 800c466:	2e0a      	cmp	r6, #10
 800c468:	d104      	bne.n	800c474 <__swbuf_r+0x6c>
 800c46a:	4621      	mov	r1, r4
 800c46c:	4628      	mov	r0, r5
 800c46e:	f000 ff8b 	bl	800d388 <_fflush_r>
 800c472:	b988      	cbnz	r0, 800c498 <__swbuf_r+0x90>
 800c474:	4638      	mov	r0, r7
 800c476:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c478:	4b0a      	ldr	r3, [pc, #40]	; (800c4a4 <__swbuf_r+0x9c>)
 800c47a:	429c      	cmp	r4, r3
 800c47c:	d101      	bne.n	800c482 <__swbuf_r+0x7a>
 800c47e:	68ac      	ldr	r4, [r5, #8]
 800c480:	e7cf      	b.n	800c422 <__swbuf_r+0x1a>
 800c482:	4b09      	ldr	r3, [pc, #36]	; (800c4a8 <__swbuf_r+0xa0>)
 800c484:	429c      	cmp	r4, r3
 800c486:	bf08      	it	eq
 800c488:	68ec      	ldreq	r4, [r5, #12]
 800c48a:	e7ca      	b.n	800c422 <__swbuf_r+0x1a>
 800c48c:	4621      	mov	r1, r4
 800c48e:	4628      	mov	r0, r5
 800c490:	f000 f80c 	bl	800c4ac <__swsetup_r>
 800c494:	2800      	cmp	r0, #0
 800c496:	d0cb      	beq.n	800c430 <__swbuf_r+0x28>
 800c498:	f04f 37ff 	mov.w	r7, #4294967295
 800c49c:	e7ea      	b.n	800c474 <__swbuf_r+0x6c>
 800c49e:	bf00      	nop
 800c4a0:	0800e5f0 	.word	0x0800e5f0
 800c4a4:	0800e610 	.word	0x0800e610
 800c4a8:	0800e5d0 	.word	0x0800e5d0

0800c4ac <__swsetup_r>:
 800c4ac:	4b32      	ldr	r3, [pc, #200]	; (800c578 <__swsetup_r+0xcc>)
 800c4ae:	b570      	push	{r4, r5, r6, lr}
 800c4b0:	681d      	ldr	r5, [r3, #0]
 800c4b2:	4606      	mov	r6, r0
 800c4b4:	460c      	mov	r4, r1
 800c4b6:	b125      	cbz	r5, 800c4c2 <__swsetup_r+0x16>
 800c4b8:	69ab      	ldr	r3, [r5, #24]
 800c4ba:	b913      	cbnz	r3, 800c4c2 <__swsetup_r+0x16>
 800c4bc:	4628      	mov	r0, r5
 800c4be:	f000 fff7 	bl	800d4b0 <__sinit>
 800c4c2:	4b2e      	ldr	r3, [pc, #184]	; (800c57c <__swsetup_r+0xd0>)
 800c4c4:	429c      	cmp	r4, r3
 800c4c6:	d10f      	bne.n	800c4e8 <__swsetup_r+0x3c>
 800c4c8:	686c      	ldr	r4, [r5, #4]
 800c4ca:	89a3      	ldrh	r3, [r4, #12]
 800c4cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c4d0:	0719      	lsls	r1, r3, #28
 800c4d2:	d42c      	bmi.n	800c52e <__swsetup_r+0x82>
 800c4d4:	06dd      	lsls	r5, r3, #27
 800c4d6:	d411      	bmi.n	800c4fc <__swsetup_r+0x50>
 800c4d8:	2309      	movs	r3, #9
 800c4da:	6033      	str	r3, [r6, #0]
 800c4dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c4e0:	81a3      	strh	r3, [r4, #12]
 800c4e2:	f04f 30ff 	mov.w	r0, #4294967295
 800c4e6:	e03e      	b.n	800c566 <__swsetup_r+0xba>
 800c4e8:	4b25      	ldr	r3, [pc, #148]	; (800c580 <__swsetup_r+0xd4>)
 800c4ea:	429c      	cmp	r4, r3
 800c4ec:	d101      	bne.n	800c4f2 <__swsetup_r+0x46>
 800c4ee:	68ac      	ldr	r4, [r5, #8]
 800c4f0:	e7eb      	b.n	800c4ca <__swsetup_r+0x1e>
 800c4f2:	4b24      	ldr	r3, [pc, #144]	; (800c584 <__swsetup_r+0xd8>)
 800c4f4:	429c      	cmp	r4, r3
 800c4f6:	bf08      	it	eq
 800c4f8:	68ec      	ldreq	r4, [r5, #12]
 800c4fa:	e7e6      	b.n	800c4ca <__swsetup_r+0x1e>
 800c4fc:	0758      	lsls	r0, r3, #29
 800c4fe:	d512      	bpl.n	800c526 <__swsetup_r+0x7a>
 800c500:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c502:	b141      	cbz	r1, 800c516 <__swsetup_r+0x6a>
 800c504:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c508:	4299      	cmp	r1, r3
 800c50a:	d002      	beq.n	800c512 <__swsetup_r+0x66>
 800c50c:	4630      	mov	r0, r6
 800c50e:	f7ff f993 	bl	800b838 <_free_r>
 800c512:	2300      	movs	r3, #0
 800c514:	6363      	str	r3, [r4, #52]	; 0x34
 800c516:	89a3      	ldrh	r3, [r4, #12]
 800c518:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c51c:	81a3      	strh	r3, [r4, #12]
 800c51e:	2300      	movs	r3, #0
 800c520:	6063      	str	r3, [r4, #4]
 800c522:	6923      	ldr	r3, [r4, #16]
 800c524:	6023      	str	r3, [r4, #0]
 800c526:	89a3      	ldrh	r3, [r4, #12]
 800c528:	f043 0308 	orr.w	r3, r3, #8
 800c52c:	81a3      	strh	r3, [r4, #12]
 800c52e:	6923      	ldr	r3, [r4, #16]
 800c530:	b94b      	cbnz	r3, 800c546 <__swsetup_r+0x9a>
 800c532:	89a3      	ldrh	r3, [r4, #12]
 800c534:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c538:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c53c:	d003      	beq.n	800c546 <__swsetup_r+0x9a>
 800c53e:	4621      	mov	r1, r4
 800c540:	4630      	mov	r0, r6
 800c542:	f001 f87f 	bl	800d644 <__smakebuf_r>
 800c546:	89a0      	ldrh	r0, [r4, #12]
 800c548:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c54c:	f010 0301 	ands.w	r3, r0, #1
 800c550:	d00a      	beq.n	800c568 <__swsetup_r+0xbc>
 800c552:	2300      	movs	r3, #0
 800c554:	60a3      	str	r3, [r4, #8]
 800c556:	6963      	ldr	r3, [r4, #20]
 800c558:	425b      	negs	r3, r3
 800c55a:	61a3      	str	r3, [r4, #24]
 800c55c:	6923      	ldr	r3, [r4, #16]
 800c55e:	b943      	cbnz	r3, 800c572 <__swsetup_r+0xc6>
 800c560:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c564:	d1ba      	bne.n	800c4dc <__swsetup_r+0x30>
 800c566:	bd70      	pop	{r4, r5, r6, pc}
 800c568:	0781      	lsls	r1, r0, #30
 800c56a:	bf58      	it	pl
 800c56c:	6963      	ldrpl	r3, [r4, #20]
 800c56e:	60a3      	str	r3, [r4, #8]
 800c570:	e7f4      	b.n	800c55c <__swsetup_r+0xb0>
 800c572:	2000      	movs	r0, #0
 800c574:	e7f7      	b.n	800c566 <__swsetup_r+0xba>
 800c576:	bf00      	nop
 800c578:	20000014 	.word	0x20000014
 800c57c:	0800e5f0 	.word	0x0800e5f0
 800c580:	0800e610 	.word	0x0800e610
 800c584:	0800e5d0 	.word	0x0800e5d0

0800c588 <quorem>:
 800c588:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c58c:	6903      	ldr	r3, [r0, #16]
 800c58e:	690c      	ldr	r4, [r1, #16]
 800c590:	42a3      	cmp	r3, r4
 800c592:	4607      	mov	r7, r0
 800c594:	f2c0 8081 	blt.w	800c69a <quorem+0x112>
 800c598:	3c01      	subs	r4, #1
 800c59a:	f101 0814 	add.w	r8, r1, #20
 800c59e:	f100 0514 	add.w	r5, r0, #20
 800c5a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c5a6:	9301      	str	r3, [sp, #4]
 800c5a8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c5ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c5b0:	3301      	adds	r3, #1
 800c5b2:	429a      	cmp	r2, r3
 800c5b4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c5b8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c5bc:	fbb2 f6f3 	udiv	r6, r2, r3
 800c5c0:	d331      	bcc.n	800c626 <quorem+0x9e>
 800c5c2:	f04f 0e00 	mov.w	lr, #0
 800c5c6:	4640      	mov	r0, r8
 800c5c8:	46ac      	mov	ip, r5
 800c5ca:	46f2      	mov	sl, lr
 800c5cc:	f850 2b04 	ldr.w	r2, [r0], #4
 800c5d0:	b293      	uxth	r3, r2
 800c5d2:	fb06 e303 	mla	r3, r6, r3, lr
 800c5d6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c5da:	b29b      	uxth	r3, r3
 800c5dc:	ebaa 0303 	sub.w	r3, sl, r3
 800c5e0:	f8dc a000 	ldr.w	sl, [ip]
 800c5e4:	0c12      	lsrs	r2, r2, #16
 800c5e6:	fa13 f38a 	uxtah	r3, r3, sl
 800c5ea:	fb06 e202 	mla	r2, r6, r2, lr
 800c5ee:	9300      	str	r3, [sp, #0]
 800c5f0:	9b00      	ldr	r3, [sp, #0]
 800c5f2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c5f6:	b292      	uxth	r2, r2
 800c5f8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c5fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c600:	f8bd 3000 	ldrh.w	r3, [sp]
 800c604:	4581      	cmp	r9, r0
 800c606:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c60a:	f84c 3b04 	str.w	r3, [ip], #4
 800c60e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c612:	d2db      	bcs.n	800c5cc <quorem+0x44>
 800c614:	f855 300b 	ldr.w	r3, [r5, fp]
 800c618:	b92b      	cbnz	r3, 800c626 <quorem+0x9e>
 800c61a:	9b01      	ldr	r3, [sp, #4]
 800c61c:	3b04      	subs	r3, #4
 800c61e:	429d      	cmp	r5, r3
 800c620:	461a      	mov	r2, r3
 800c622:	d32e      	bcc.n	800c682 <quorem+0xfa>
 800c624:	613c      	str	r4, [r7, #16]
 800c626:	4638      	mov	r0, r7
 800c628:	f001 fae8 	bl	800dbfc <__mcmp>
 800c62c:	2800      	cmp	r0, #0
 800c62e:	db24      	blt.n	800c67a <quorem+0xf2>
 800c630:	3601      	adds	r6, #1
 800c632:	4628      	mov	r0, r5
 800c634:	f04f 0c00 	mov.w	ip, #0
 800c638:	f858 2b04 	ldr.w	r2, [r8], #4
 800c63c:	f8d0 e000 	ldr.w	lr, [r0]
 800c640:	b293      	uxth	r3, r2
 800c642:	ebac 0303 	sub.w	r3, ip, r3
 800c646:	0c12      	lsrs	r2, r2, #16
 800c648:	fa13 f38e 	uxtah	r3, r3, lr
 800c64c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c650:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c654:	b29b      	uxth	r3, r3
 800c656:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c65a:	45c1      	cmp	r9, r8
 800c65c:	f840 3b04 	str.w	r3, [r0], #4
 800c660:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c664:	d2e8      	bcs.n	800c638 <quorem+0xb0>
 800c666:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c66a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c66e:	b922      	cbnz	r2, 800c67a <quorem+0xf2>
 800c670:	3b04      	subs	r3, #4
 800c672:	429d      	cmp	r5, r3
 800c674:	461a      	mov	r2, r3
 800c676:	d30a      	bcc.n	800c68e <quorem+0x106>
 800c678:	613c      	str	r4, [r7, #16]
 800c67a:	4630      	mov	r0, r6
 800c67c:	b003      	add	sp, #12
 800c67e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c682:	6812      	ldr	r2, [r2, #0]
 800c684:	3b04      	subs	r3, #4
 800c686:	2a00      	cmp	r2, #0
 800c688:	d1cc      	bne.n	800c624 <quorem+0x9c>
 800c68a:	3c01      	subs	r4, #1
 800c68c:	e7c7      	b.n	800c61e <quorem+0x96>
 800c68e:	6812      	ldr	r2, [r2, #0]
 800c690:	3b04      	subs	r3, #4
 800c692:	2a00      	cmp	r2, #0
 800c694:	d1f0      	bne.n	800c678 <quorem+0xf0>
 800c696:	3c01      	subs	r4, #1
 800c698:	e7eb      	b.n	800c672 <quorem+0xea>
 800c69a:	2000      	movs	r0, #0
 800c69c:	e7ee      	b.n	800c67c <quorem+0xf4>
	...

0800c6a0 <_dtoa_r>:
 800c6a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6a4:	ed2d 8b04 	vpush	{d8-d9}
 800c6a8:	ec57 6b10 	vmov	r6, r7, d0
 800c6ac:	b093      	sub	sp, #76	; 0x4c
 800c6ae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c6b0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c6b4:	9106      	str	r1, [sp, #24]
 800c6b6:	ee10 aa10 	vmov	sl, s0
 800c6ba:	4604      	mov	r4, r0
 800c6bc:	9209      	str	r2, [sp, #36]	; 0x24
 800c6be:	930c      	str	r3, [sp, #48]	; 0x30
 800c6c0:	46bb      	mov	fp, r7
 800c6c2:	b975      	cbnz	r5, 800c6e2 <_dtoa_r+0x42>
 800c6c4:	2010      	movs	r0, #16
 800c6c6:	f7ff f8a7 	bl	800b818 <malloc>
 800c6ca:	4602      	mov	r2, r0
 800c6cc:	6260      	str	r0, [r4, #36]	; 0x24
 800c6ce:	b920      	cbnz	r0, 800c6da <_dtoa_r+0x3a>
 800c6d0:	4ba7      	ldr	r3, [pc, #668]	; (800c970 <_dtoa_r+0x2d0>)
 800c6d2:	21ea      	movs	r1, #234	; 0xea
 800c6d4:	48a7      	ldr	r0, [pc, #668]	; (800c974 <_dtoa_r+0x2d4>)
 800c6d6:	f001 fd59 	bl	800e18c <__assert_func>
 800c6da:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c6de:	6005      	str	r5, [r0, #0]
 800c6e0:	60c5      	str	r5, [r0, #12]
 800c6e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c6e4:	6819      	ldr	r1, [r3, #0]
 800c6e6:	b151      	cbz	r1, 800c6fe <_dtoa_r+0x5e>
 800c6e8:	685a      	ldr	r2, [r3, #4]
 800c6ea:	604a      	str	r2, [r1, #4]
 800c6ec:	2301      	movs	r3, #1
 800c6ee:	4093      	lsls	r3, r2
 800c6f0:	608b      	str	r3, [r1, #8]
 800c6f2:	4620      	mov	r0, r4
 800c6f4:	f001 f840 	bl	800d778 <_Bfree>
 800c6f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c6fa:	2200      	movs	r2, #0
 800c6fc:	601a      	str	r2, [r3, #0]
 800c6fe:	1e3b      	subs	r3, r7, #0
 800c700:	bfaa      	itet	ge
 800c702:	2300      	movge	r3, #0
 800c704:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800c708:	f8c8 3000 	strge.w	r3, [r8]
 800c70c:	4b9a      	ldr	r3, [pc, #616]	; (800c978 <_dtoa_r+0x2d8>)
 800c70e:	bfbc      	itt	lt
 800c710:	2201      	movlt	r2, #1
 800c712:	f8c8 2000 	strlt.w	r2, [r8]
 800c716:	ea33 030b 	bics.w	r3, r3, fp
 800c71a:	d11b      	bne.n	800c754 <_dtoa_r+0xb4>
 800c71c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c71e:	f242 730f 	movw	r3, #9999	; 0x270f
 800c722:	6013      	str	r3, [r2, #0]
 800c724:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c728:	4333      	orrs	r3, r6
 800c72a:	f000 8592 	beq.w	800d252 <_dtoa_r+0xbb2>
 800c72e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c730:	b963      	cbnz	r3, 800c74c <_dtoa_r+0xac>
 800c732:	4b92      	ldr	r3, [pc, #584]	; (800c97c <_dtoa_r+0x2dc>)
 800c734:	e022      	b.n	800c77c <_dtoa_r+0xdc>
 800c736:	4b92      	ldr	r3, [pc, #584]	; (800c980 <_dtoa_r+0x2e0>)
 800c738:	9301      	str	r3, [sp, #4]
 800c73a:	3308      	adds	r3, #8
 800c73c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c73e:	6013      	str	r3, [r2, #0]
 800c740:	9801      	ldr	r0, [sp, #4]
 800c742:	b013      	add	sp, #76	; 0x4c
 800c744:	ecbd 8b04 	vpop	{d8-d9}
 800c748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c74c:	4b8b      	ldr	r3, [pc, #556]	; (800c97c <_dtoa_r+0x2dc>)
 800c74e:	9301      	str	r3, [sp, #4]
 800c750:	3303      	adds	r3, #3
 800c752:	e7f3      	b.n	800c73c <_dtoa_r+0x9c>
 800c754:	2200      	movs	r2, #0
 800c756:	2300      	movs	r3, #0
 800c758:	4650      	mov	r0, sl
 800c75a:	4659      	mov	r1, fp
 800c75c:	f7f4 f9cc 	bl	8000af8 <__aeabi_dcmpeq>
 800c760:	ec4b ab19 	vmov	d9, sl, fp
 800c764:	4680      	mov	r8, r0
 800c766:	b158      	cbz	r0, 800c780 <_dtoa_r+0xe0>
 800c768:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c76a:	2301      	movs	r3, #1
 800c76c:	6013      	str	r3, [r2, #0]
 800c76e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c770:	2b00      	cmp	r3, #0
 800c772:	f000 856b 	beq.w	800d24c <_dtoa_r+0xbac>
 800c776:	4883      	ldr	r0, [pc, #524]	; (800c984 <_dtoa_r+0x2e4>)
 800c778:	6018      	str	r0, [r3, #0]
 800c77a:	1e43      	subs	r3, r0, #1
 800c77c:	9301      	str	r3, [sp, #4]
 800c77e:	e7df      	b.n	800c740 <_dtoa_r+0xa0>
 800c780:	ec4b ab10 	vmov	d0, sl, fp
 800c784:	aa10      	add	r2, sp, #64	; 0x40
 800c786:	a911      	add	r1, sp, #68	; 0x44
 800c788:	4620      	mov	r0, r4
 800c78a:	f001 fadd 	bl	800dd48 <__d2b>
 800c78e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800c792:	ee08 0a10 	vmov	s16, r0
 800c796:	2d00      	cmp	r5, #0
 800c798:	f000 8084 	beq.w	800c8a4 <_dtoa_r+0x204>
 800c79c:	ee19 3a90 	vmov	r3, s19
 800c7a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c7a4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800c7a8:	4656      	mov	r6, sl
 800c7aa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800c7ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c7b2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800c7b6:	4b74      	ldr	r3, [pc, #464]	; (800c988 <_dtoa_r+0x2e8>)
 800c7b8:	2200      	movs	r2, #0
 800c7ba:	4630      	mov	r0, r6
 800c7bc:	4639      	mov	r1, r7
 800c7be:	f7f3 fd7b 	bl	80002b8 <__aeabi_dsub>
 800c7c2:	a365      	add	r3, pc, #404	; (adr r3, 800c958 <_dtoa_r+0x2b8>)
 800c7c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7c8:	f7f3 ff2e 	bl	8000628 <__aeabi_dmul>
 800c7cc:	a364      	add	r3, pc, #400	; (adr r3, 800c960 <_dtoa_r+0x2c0>)
 800c7ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7d2:	f7f3 fd73 	bl	80002bc <__adddf3>
 800c7d6:	4606      	mov	r6, r0
 800c7d8:	4628      	mov	r0, r5
 800c7da:	460f      	mov	r7, r1
 800c7dc:	f7f3 feba 	bl	8000554 <__aeabi_i2d>
 800c7e0:	a361      	add	r3, pc, #388	; (adr r3, 800c968 <_dtoa_r+0x2c8>)
 800c7e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7e6:	f7f3 ff1f 	bl	8000628 <__aeabi_dmul>
 800c7ea:	4602      	mov	r2, r0
 800c7ec:	460b      	mov	r3, r1
 800c7ee:	4630      	mov	r0, r6
 800c7f0:	4639      	mov	r1, r7
 800c7f2:	f7f3 fd63 	bl	80002bc <__adddf3>
 800c7f6:	4606      	mov	r6, r0
 800c7f8:	460f      	mov	r7, r1
 800c7fa:	f7f4 f9c5 	bl	8000b88 <__aeabi_d2iz>
 800c7fe:	2200      	movs	r2, #0
 800c800:	9000      	str	r0, [sp, #0]
 800c802:	2300      	movs	r3, #0
 800c804:	4630      	mov	r0, r6
 800c806:	4639      	mov	r1, r7
 800c808:	f7f4 f980 	bl	8000b0c <__aeabi_dcmplt>
 800c80c:	b150      	cbz	r0, 800c824 <_dtoa_r+0x184>
 800c80e:	9800      	ldr	r0, [sp, #0]
 800c810:	f7f3 fea0 	bl	8000554 <__aeabi_i2d>
 800c814:	4632      	mov	r2, r6
 800c816:	463b      	mov	r3, r7
 800c818:	f7f4 f96e 	bl	8000af8 <__aeabi_dcmpeq>
 800c81c:	b910      	cbnz	r0, 800c824 <_dtoa_r+0x184>
 800c81e:	9b00      	ldr	r3, [sp, #0]
 800c820:	3b01      	subs	r3, #1
 800c822:	9300      	str	r3, [sp, #0]
 800c824:	9b00      	ldr	r3, [sp, #0]
 800c826:	2b16      	cmp	r3, #22
 800c828:	d85a      	bhi.n	800c8e0 <_dtoa_r+0x240>
 800c82a:	9a00      	ldr	r2, [sp, #0]
 800c82c:	4b57      	ldr	r3, [pc, #348]	; (800c98c <_dtoa_r+0x2ec>)
 800c82e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c832:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c836:	ec51 0b19 	vmov	r0, r1, d9
 800c83a:	f7f4 f967 	bl	8000b0c <__aeabi_dcmplt>
 800c83e:	2800      	cmp	r0, #0
 800c840:	d050      	beq.n	800c8e4 <_dtoa_r+0x244>
 800c842:	9b00      	ldr	r3, [sp, #0]
 800c844:	3b01      	subs	r3, #1
 800c846:	9300      	str	r3, [sp, #0]
 800c848:	2300      	movs	r3, #0
 800c84a:	930b      	str	r3, [sp, #44]	; 0x2c
 800c84c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c84e:	1b5d      	subs	r5, r3, r5
 800c850:	1e6b      	subs	r3, r5, #1
 800c852:	9305      	str	r3, [sp, #20]
 800c854:	bf45      	ittet	mi
 800c856:	f1c5 0301 	rsbmi	r3, r5, #1
 800c85a:	9304      	strmi	r3, [sp, #16]
 800c85c:	2300      	movpl	r3, #0
 800c85e:	2300      	movmi	r3, #0
 800c860:	bf4c      	ite	mi
 800c862:	9305      	strmi	r3, [sp, #20]
 800c864:	9304      	strpl	r3, [sp, #16]
 800c866:	9b00      	ldr	r3, [sp, #0]
 800c868:	2b00      	cmp	r3, #0
 800c86a:	db3d      	blt.n	800c8e8 <_dtoa_r+0x248>
 800c86c:	9b05      	ldr	r3, [sp, #20]
 800c86e:	9a00      	ldr	r2, [sp, #0]
 800c870:	920a      	str	r2, [sp, #40]	; 0x28
 800c872:	4413      	add	r3, r2
 800c874:	9305      	str	r3, [sp, #20]
 800c876:	2300      	movs	r3, #0
 800c878:	9307      	str	r3, [sp, #28]
 800c87a:	9b06      	ldr	r3, [sp, #24]
 800c87c:	2b09      	cmp	r3, #9
 800c87e:	f200 8089 	bhi.w	800c994 <_dtoa_r+0x2f4>
 800c882:	2b05      	cmp	r3, #5
 800c884:	bfc4      	itt	gt
 800c886:	3b04      	subgt	r3, #4
 800c888:	9306      	strgt	r3, [sp, #24]
 800c88a:	9b06      	ldr	r3, [sp, #24]
 800c88c:	f1a3 0302 	sub.w	r3, r3, #2
 800c890:	bfcc      	ite	gt
 800c892:	2500      	movgt	r5, #0
 800c894:	2501      	movle	r5, #1
 800c896:	2b03      	cmp	r3, #3
 800c898:	f200 8087 	bhi.w	800c9aa <_dtoa_r+0x30a>
 800c89c:	e8df f003 	tbb	[pc, r3]
 800c8a0:	59383a2d 	.word	0x59383a2d
 800c8a4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c8a8:	441d      	add	r5, r3
 800c8aa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c8ae:	2b20      	cmp	r3, #32
 800c8b0:	bfc1      	itttt	gt
 800c8b2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c8b6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c8ba:	fa0b f303 	lslgt.w	r3, fp, r3
 800c8be:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c8c2:	bfda      	itte	le
 800c8c4:	f1c3 0320 	rsble	r3, r3, #32
 800c8c8:	fa06 f003 	lslle.w	r0, r6, r3
 800c8cc:	4318      	orrgt	r0, r3
 800c8ce:	f7f3 fe31 	bl	8000534 <__aeabi_ui2d>
 800c8d2:	2301      	movs	r3, #1
 800c8d4:	4606      	mov	r6, r0
 800c8d6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c8da:	3d01      	subs	r5, #1
 800c8dc:	930e      	str	r3, [sp, #56]	; 0x38
 800c8de:	e76a      	b.n	800c7b6 <_dtoa_r+0x116>
 800c8e0:	2301      	movs	r3, #1
 800c8e2:	e7b2      	b.n	800c84a <_dtoa_r+0x1aa>
 800c8e4:	900b      	str	r0, [sp, #44]	; 0x2c
 800c8e6:	e7b1      	b.n	800c84c <_dtoa_r+0x1ac>
 800c8e8:	9b04      	ldr	r3, [sp, #16]
 800c8ea:	9a00      	ldr	r2, [sp, #0]
 800c8ec:	1a9b      	subs	r3, r3, r2
 800c8ee:	9304      	str	r3, [sp, #16]
 800c8f0:	4253      	negs	r3, r2
 800c8f2:	9307      	str	r3, [sp, #28]
 800c8f4:	2300      	movs	r3, #0
 800c8f6:	930a      	str	r3, [sp, #40]	; 0x28
 800c8f8:	e7bf      	b.n	800c87a <_dtoa_r+0x1da>
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	9308      	str	r3, [sp, #32]
 800c8fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c900:	2b00      	cmp	r3, #0
 800c902:	dc55      	bgt.n	800c9b0 <_dtoa_r+0x310>
 800c904:	2301      	movs	r3, #1
 800c906:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c90a:	461a      	mov	r2, r3
 800c90c:	9209      	str	r2, [sp, #36]	; 0x24
 800c90e:	e00c      	b.n	800c92a <_dtoa_r+0x28a>
 800c910:	2301      	movs	r3, #1
 800c912:	e7f3      	b.n	800c8fc <_dtoa_r+0x25c>
 800c914:	2300      	movs	r3, #0
 800c916:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c918:	9308      	str	r3, [sp, #32]
 800c91a:	9b00      	ldr	r3, [sp, #0]
 800c91c:	4413      	add	r3, r2
 800c91e:	9302      	str	r3, [sp, #8]
 800c920:	3301      	adds	r3, #1
 800c922:	2b01      	cmp	r3, #1
 800c924:	9303      	str	r3, [sp, #12]
 800c926:	bfb8      	it	lt
 800c928:	2301      	movlt	r3, #1
 800c92a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c92c:	2200      	movs	r2, #0
 800c92e:	6042      	str	r2, [r0, #4]
 800c930:	2204      	movs	r2, #4
 800c932:	f102 0614 	add.w	r6, r2, #20
 800c936:	429e      	cmp	r6, r3
 800c938:	6841      	ldr	r1, [r0, #4]
 800c93a:	d93d      	bls.n	800c9b8 <_dtoa_r+0x318>
 800c93c:	4620      	mov	r0, r4
 800c93e:	f000 fedb 	bl	800d6f8 <_Balloc>
 800c942:	9001      	str	r0, [sp, #4]
 800c944:	2800      	cmp	r0, #0
 800c946:	d13b      	bne.n	800c9c0 <_dtoa_r+0x320>
 800c948:	4b11      	ldr	r3, [pc, #68]	; (800c990 <_dtoa_r+0x2f0>)
 800c94a:	4602      	mov	r2, r0
 800c94c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c950:	e6c0      	b.n	800c6d4 <_dtoa_r+0x34>
 800c952:	2301      	movs	r3, #1
 800c954:	e7df      	b.n	800c916 <_dtoa_r+0x276>
 800c956:	bf00      	nop
 800c958:	636f4361 	.word	0x636f4361
 800c95c:	3fd287a7 	.word	0x3fd287a7
 800c960:	8b60c8b3 	.word	0x8b60c8b3
 800c964:	3fc68a28 	.word	0x3fc68a28
 800c968:	509f79fb 	.word	0x509f79fb
 800c96c:	3fd34413 	.word	0x3fd34413
 800c970:	0800e54d 	.word	0x0800e54d
 800c974:	0800e564 	.word	0x0800e564
 800c978:	7ff00000 	.word	0x7ff00000
 800c97c:	0800e549 	.word	0x0800e549
 800c980:	0800e540 	.word	0x0800e540
 800c984:	0800e51d 	.word	0x0800e51d
 800c988:	3ff80000 	.word	0x3ff80000
 800c98c:	0800e6b8 	.word	0x0800e6b8
 800c990:	0800e5bf 	.word	0x0800e5bf
 800c994:	2501      	movs	r5, #1
 800c996:	2300      	movs	r3, #0
 800c998:	9306      	str	r3, [sp, #24]
 800c99a:	9508      	str	r5, [sp, #32]
 800c99c:	f04f 33ff 	mov.w	r3, #4294967295
 800c9a0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c9a4:	2200      	movs	r2, #0
 800c9a6:	2312      	movs	r3, #18
 800c9a8:	e7b0      	b.n	800c90c <_dtoa_r+0x26c>
 800c9aa:	2301      	movs	r3, #1
 800c9ac:	9308      	str	r3, [sp, #32]
 800c9ae:	e7f5      	b.n	800c99c <_dtoa_r+0x2fc>
 800c9b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9b2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c9b6:	e7b8      	b.n	800c92a <_dtoa_r+0x28a>
 800c9b8:	3101      	adds	r1, #1
 800c9ba:	6041      	str	r1, [r0, #4]
 800c9bc:	0052      	lsls	r2, r2, #1
 800c9be:	e7b8      	b.n	800c932 <_dtoa_r+0x292>
 800c9c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c9c2:	9a01      	ldr	r2, [sp, #4]
 800c9c4:	601a      	str	r2, [r3, #0]
 800c9c6:	9b03      	ldr	r3, [sp, #12]
 800c9c8:	2b0e      	cmp	r3, #14
 800c9ca:	f200 809d 	bhi.w	800cb08 <_dtoa_r+0x468>
 800c9ce:	2d00      	cmp	r5, #0
 800c9d0:	f000 809a 	beq.w	800cb08 <_dtoa_r+0x468>
 800c9d4:	9b00      	ldr	r3, [sp, #0]
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	dd32      	ble.n	800ca40 <_dtoa_r+0x3a0>
 800c9da:	4ab7      	ldr	r2, [pc, #732]	; (800ccb8 <_dtoa_r+0x618>)
 800c9dc:	f003 030f 	and.w	r3, r3, #15
 800c9e0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c9e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c9e8:	9b00      	ldr	r3, [sp, #0]
 800c9ea:	05d8      	lsls	r0, r3, #23
 800c9ec:	ea4f 1723 	mov.w	r7, r3, asr #4
 800c9f0:	d516      	bpl.n	800ca20 <_dtoa_r+0x380>
 800c9f2:	4bb2      	ldr	r3, [pc, #712]	; (800ccbc <_dtoa_r+0x61c>)
 800c9f4:	ec51 0b19 	vmov	r0, r1, d9
 800c9f8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c9fc:	f7f3 ff3e 	bl	800087c <__aeabi_ddiv>
 800ca00:	f007 070f 	and.w	r7, r7, #15
 800ca04:	4682      	mov	sl, r0
 800ca06:	468b      	mov	fp, r1
 800ca08:	2503      	movs	r5, #3
 800ca0a:	4eac      	ldr	r6, [pc, #688]	; (800ccbc <_dtoa_r+0x61c>)
 800ca0c:	b957      	cbnz	r7, 800ca24 <_dtoa_r+0x384>
 800ca0e:	4642      	mov	r2, r8
 800ca10:	464b      	mov	r3, r9
 800ca12:	4650      	mov	r0, sl
 800ca14:	4659      	mov	r1, fp
 800ca16:	f7f3 ff31 	bl	800087c <__aeabi_ddiv>
 800ca1a:	4682      	mov	sl, r0
 800ca1c:	468b      	mov	fp, r1
 800ca1e:	e028      	b.n	800ca72 <_dtoa_r+0x3d2>
 800ca20:	2502      	movs	r5, #2
 800ca22:	e7f2      	b.n	800ca0a <_dtoa_r+0x36a>
 800ca24:	07f9      	lsls	r1, r7, #31
 800ca26:	d508      	bpl.n	800ca3a <_dtoa_r+0x39a>
 800ca28:	4640      	mov	r0, r8
 800ca2a:	4649      	mov	r1, r9
 800ca2c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ca30:	f7f3 fdfa 	bl	8000628 <__aeabi_dmul>
 800ca34:	3501      	adds	r5, #1
 800ca36:	4680      	mov	r8, r0
 800ca38:	4689      	mov	r9, r1
 800ca3a:	107f      	asrs	r7, r7, #1
 800ca3c:	3608      	adds	r6, #8
 800ca3e:	e7e5      	b.n	800ca0c <_dtoa_r+0x36c>
 800ca40:	f000 809b 	beq.w	800cb7a <_dtoa_r+0x4da>
 800ca44:	9b00      	ldr	r3, [sp, #0]
 800ca46:	4f9d      	ldr	r7, [pc, #628]	; (800ccbc <_dtoa_r+0x61c>)
 800ca48:	425e      	negs	r6, r3
 800ca4a:	4b9b      	ldr	r3, [pc, #620]	; (800ccb8 <_dtoa_r+0x618>)
 800ca4c:	f006 020f 	and.w	r2, r6, #15
 800ca50:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ca54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca58:	ec51 0b19 	vmov	r0, r1, d9
 800ca5c:	f7f3 fde4 	bl	8000628 <__aeabi_dmul>
 800ca60:	1136      	asrs	r6, r6, #4
 800ca62:	4682      	mov	sl, r0
 800ca64:	468b      	mov	fp, r1
 800ca66:	2300      	movs	r3, #0
 800ca68:	2502      	movs	r5, #2
 800ca6a:	2e00      	cmp	r6, #0
 800ca6c:	d17a      	bne.n	800cb64 <_dtoa_r+0x4c4>
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d1d3      	bne.n	800ca1a <_dtoa_r+0x37a>
 800ca72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	f000 8082 	beq.w	800cb7e <_dtoa_r+0x4de>
 800ca7a:	4b91      	ldr	r3, [pc, #580]	; (800ccc0 <_dtoa_r+0x620>)
 800ca7c:	2200      	movs	r2, #0
 800ca7e:	4650      	mov	r0, sl
 800ca80:	4659      	mov	r1, fp
 800ca82:	f7f4 f843 	bl	8000b0c <__aeabi_dcmplt>
 800ca86:	2800      	cmp	r0, #0
 800ca88:	d079      	beq.n	800cb7e <_dtoa_r+0x4de>
 800ca8a:	9b03      	ldr	r3, [sp, #12]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d076      	beq.n	800cb7e <_dtoa_r+0x4de>
 800ca90:	9b02      	ldr	r3, [sp, #8]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	dd36      	ble.n	800cb04 <_dtoa_r+0x464>
 800ca96:	9b00      	ldr	r3, [sp, #0]
 800ca98:	4650      	mov	r0, sl
 800ca9a:	4659      	mov	r1, fp
 800ca9c:	1e5f      	subs	r7, r3, #1
 800ca9e:	2200      	movs	r2, #0
 800caa0:	4b88      	ldr	r3, [pc, #544]	; (800ccc4 <_dtoa_r+0x624>)
 800caa2:	f7f3 fdc1 	bl	8000628 <__aeabi_dmul>
 800caa6:	9e02      	ldr	r6, [sp, #8]
 800caa8:	4682      	mov	sl, r0
 800caaa:	468b      	mov	fp, r1
 800caac:	3501      	adds	r5, #1
 800caae:	4628      	mov	r0, r5
 800cab0:	f7f3 fd50 	bl	8000554 <__aeabi_i2d>
 800cab4:	4652      	mov	r2, sl
 800cab6:	465b      	mov	r3, fp
 800cab8:	f7f3 fdb6 	bl	8000628 <__aeabi_dmul>
 800cabc:	4b82      	ldr	r3, [pc, #520]	; (800ccc8 <_dtoa_r+0x628>)
 800cabe:	2200      	movs	r2, #0
 800cac0:	f7f3 fbfc 	bl	80002bc <__adddf3>
 800cac4:	46d0      	mov	r8, sl
 800cac6:	46d9      	mov	r9, fp
 800cac8:	4682      	mov	sl, r0
 800caca:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800cace:	2e00      	cmp	r6, #0
 800cad0:	d158      	bne.n	800cb84 <_dtoa_r+0x4e4>
 800cad2:	4b7e      	ldr	r3, [pc, #504]	; (800cccc <_dtoa_r+0x62c>)
 800cad4:	2200      	movs	r2, #0
 800cad6:	4640      	mov	r0, r8
 800cad8:	4649      	mov	r1, r9
 800cada:	f7f3 fbed 	bl	80002b8 <__aeabi_dsub>
 800cade:	4652      	mov	r2, sl
 800cae0:	465b      	mov	r3, fp
 800cae2:	4680      	mov	r8, r0
 800cae4:	4689      	mov	r9, r1
 800cae6:	f7f4 f82f 	bl	8000b48 <__aeabi_dcmpgt>
 800caea:	2800      	cmp	r0, #0
 800caec:	f040 8295 	bne.w	800d01a <_dtoa_r+0x97a>
 800caf0:	4652      	mov	r2, sl
 800caf2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800caf6:	4640      	mov	r0, r8
 800caf8:	4649      	mov	r1, r9
 800cafa:	f7f4 f807 	bl	8000b0c <__aeabi_dcmplt>
 800cafe:	2800      	cmp	r0, #0
 800cb00:	f040 8289 	bne.w	800d016 <_dtoa_r+0x976>
 800cb04:	ec5b ab19 	vmov	sl, fp, d9
 800cb08:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	f2c0 8148 	blt.w	800cda0 <_dtoa_r+0x700>
 800cb10:	9a00      	ldr	r2, [sp, #0]
 800cb12:	2a0e      	cmp	r2, #14
 800cb14:	f300 8144 	bgt.w	800cda0 <_dtoa_r+0x700>
 800cb18:	4b67      	ldr	r3, [pc, #412]	; (800ccb8 <_dtoa_r+0x618>)
 800cb1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cb1e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cb22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	f280 80d5 	bge.w	800ccd4 <_dtoa_r+0x634>
 800cb2a:	9b03      	ldr	r3, [sp, #12]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	f300 80d1 	bgt.w	800ccd4 <_dtoa_r+0x634>
 800cb32:	f040 826f 	bne.w	800d014 <_dtoa_r+0x974>
 800cb36:	4b65      	ldr	r3, [pc, #404]	; (800cccc <_dtoa_r+0x62c>)
 800cb38:	2200      	movs	r2, #0
 800cb3a:	4640      	mov	r0, r8
 800cb3c:	4649      	mov	r1, r9
 800cb3e:	f7f3 fd73 	bl	8000628 <__aeabi_dmul>
 800cb42:	4652      	mov	r2, sl
 800cb44:	465b      	mov	r3, fp
 800cb46:	f7f3 fff5 	bl	8000b34 <__aeabi_dcmpge>
 800cb4a:	9e03      	ldr	r6, [sp, #12]
 800cb4c:	4637      	mov	r7, r6
 800cb4e:	2800      	cmp	r0, #0
 800cb50:	f040 8245 	bne.w	800cfde <_dtoa_r+0x93e>
 800cb54:	9d01      	ldr	r5, [sp, #4]
 800cb56:	2331      	movs	r3, #49	; 0x31
 800cb58:	f805 3b01 	strb.w	r3, [r5], #1
 800cb5c:	9b00      	ldr	r3, [sp, #0]
 800cb5e:	3301      	adds	r3, #1
 800cb60:	9300      	str	r3, [sp, #0]
 800cb62:	e240      	b.n	800cfe6 <_dtoa_r+0x946>
 800cb64:	07f2      	lsls	r2, r6, #31
 800cb66:	d505      	bpl.n	800cb74 <_dtoa_r+0x4d4>
 800cb68:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb6c:	f7f3 fd5c 	bl	8000628 <__aeabi_dmul>
 800cb70:	3501      	adds	r5, #1
 800cb72:	2301      	movs	r3, #1
 800cb74:	1076      	asrs	r6, r6, #1
 800cb76:	3708      	adds	r7, #8
 800cb78:	e777      	b.n	800ca6a <_dtoa_r+0x3ca>
 800cb7a:	2502      	movs	r5, #2
 800cb7c:	e779      	b.n	800ca72 <_dtoa_r+0x3d2>
 800cb7e:	9f00      	ldr	r7, [sp, #0]
 800cb80:	9e03      	ldr	r6, [sp, #12]
 800cb82:	e794      	b.n	800caae <_dtoa_r+0x40e>
 800cb84:	9901      	ldr	r1, [sp, #4]
 800cb86:	4b4c      	ldr	r3, [pc, #304]	; (800ccb8 <_dtoa_r+0x618>)
 800cb88:	4431      	add	r1, r6
 800cb8a:	910d      	str	r1, [sp, #52]	; 0x34
 800cb8c:	9908      	ldr	r1, [sp, #32]
 800cb8e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800cb92:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cb96:	2900      	cmp	r1, #0
 800cb98:	d043      	beq.n	800cc22 <_dtoa_r+0x582>
 800cb9a:	494d      	ldr	r1, [pc, #308]	; (800ccd0 <_dtoa_r+0x630>)
 800cb9c:	2000      	movs	r0, #0
 800cb9e:	f7f3 fe6d 	bl	800087c <__aeabi_ddiv>
 800cba2:	4652      	mov	r2, sl
 800cba4:	465b      	mov	r3, fp
 800cba6:	f7f3 fb87 	bl	80002b8 <__aeabi_dsub>
 800cbaa:	9d01      	ldr	r5, [sp, #4]
 800cbac:	4682      	mov	sl, r0
 800cbae:	468b      	mov	fp, r1
 800cbb0:	4649      	mov	r1, r9
 800cbb2:	4640      	mov	r0, r8
 800cbb4:	f7f3 ffe8 	bl	8000b88 <__aeabi_d2iz>
 800cbb8:	4606      	mov	r6, r0
 800cbba:	f7f3 fccb 	bl	8000554 <__aeabi_i2d>
 800cbbe:	4602      	mov	r2, r0
 800cbc0:	460b      	mov	r3, r1
 800cbc2:	4640      	mov	r0, r8
 800cbc4:	4649      	mov	r1, r9
 800cbc6:	f7f3 fb77 	bl	80002b8 <__aeabi_dsub>
 800cbca:	3630      	adds	r6, #48	; 0x30
 800cbcc:	f805 6b01 	strb.w	r6, [r5], #1
 800cbd0:	4652      	mov	r2, sl
 800cbd2:	465b      	mov	r3, fp
 800cbd4:	4680      	mov	r8, r0
 800cbd6:	4689      	mov	r9, r1
 800cbd8:	f7f3 ff98 	bl	8000b0c <__aeabi_dcmplt>
 800cbdc:	2800      	cmp	r0, #0
 800cbde:	d163      	bne.n	800cca8 <_dtoa_r+0x608>
 800cbe0:	4642      	mov	r2, r8
 800cbe2:	464b      	mov	r3, r9
 800cbe4:	4936      	ldr	r1, [pc, #216]	; (800ccc0 <_dtoa_r+0x620>)
 800cbe6:	2000      	movs	r0, #0
 800cbe8:	f7f3 fb66 	bl	80002b8 <__aeabi_dsub>
 800cbec:	4652      	mov	r2, sl
 800cbee:	465b      	mov	r3, fp
 800cbf0:	f7f3 ff8c 	bl	8000b0c <__aeabi_dcmplt>
 800cbf4:	2800      	cmp	r0, #0
 800cbf6:	f040 80b5 	bne.w	800cd64 <_dtoa_r+0x6c4>
 800cbfa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cbfc:	429d      	cmp	r5, r3
 800cbfe:	d081      	beq.n	800cb04 <_dtoa_r+0x464>
 800cc00:	4b30      	ldr	r3, [pc, #192]	; (800ccc4 <_dtoa_r+0x624>)
 800cc02:	2200      	movs	r2, #0
 800cc04:	4650      	mov	r0, sl
 800cc06:	4659      	mov	r1, fp
 800cc08:	f7f3 fd0e 	bl	8000628 <__aeabi_dmul>
 800cc0c:	4b2d      	ldr	r3, [pc, #180]	; (800ccc4 <_dtoa_r+0x624>)
 800cc0e:	4682      	mov	sl, r0
 800cc10:	468b      	mov	fp, r1
 800cc12:	4640      	mov	r0, r8
 800cc14:	4649      	mov	r1, r9
 800cc16:	2200      	movs	r2, #0
 800cc18:	f7f3 fd06 	bl	8000628 <__aeabi_dmul>
 800cc1c:	4680      	mov	r8, r0
 800cc1e:	4689      	mov	r9, r1
 800cc20:	e7c6      	b.n	800cbb0 <_dtoa_r+0x510>
 800cc22:	4650      	mov	r0, sl
 800cc24:	4659      	mov	r1, fp
 800cc26:	f7f3 fcff 	bl	8000628 <__aeabi_dmul>
 800cc2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cc2c:	9d01      	ldr	r5, [sp, #4]
 800cc2e:	930f      	str	r3, [sp, #60]	; 0x3c
 800cc30:	4682      	mov	sl, r0
 800cc32:	468b      	mov	fp, r1
 800cc34:	4649      	mov	r1, r9
 800cc36:	4640      	mov	r0, r8
 800cc38:	f7f3 ffa6 	bl	8000b88 <__aeabi_d2iz>
 800cc3c:	4606      	mov	r6, r0
 800cc3e:	f7f3 fc89 	bl	8000554 <__aeabi_i2d>
 800cc42:	3630      	adds	r6, #48	; 0x30
 800cc44:	4602      	mov	r2, r0
 800cc46:	460b      	mov	r3, r1
 800cc48:	4640      	mov	r0, r8
 800cc4a:	4649      	mov	r1, r9
 800cc4c:	f7f3 fb34 	bl	80002b8 <__aeabi_dsub>
 800cc50:	f805 6b01 	strb.w	r6, [r5], #1
 800cc54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cc56:	429d      	cmp	r5, r3
 800cc58:	4680      	mov	r8, r0
 800cc5a:	4689      	mov	r9, r1
 800cc5c:	f04f 0200 	mov.w	r2, #0
 800cc60:	d124      	bne.n	800ccac <_dtoa_r+0x60c>
 800cc62:	4b1b      	ldr	r3, [pc, #108]	; (800ccd0 <_dtoa_r+0x630>)
 800cc64:	4650      	mov	r0, sl
 800cc66:	4659      	mov	r1, fp
 800cc68:	f7f3 fb28 	bl	80002bc <__adddf3>
 800cc6c:	4602      	mov	r2, r0
 800cc6e:	460b      	mov	r3, r1
 800cc70:	4640      	mov	r0, r8
 800cc72:	4649      	mov	r1, r9
 800cc74:	f7f3 ff68 	bl	8000b48 <__aeabi_dcmpgt>
 800cc78:	2800      	cmp	r0, #0
 800cc7a:	d173      	bne.n	800cd64 <_dtoa_r+0x6c4>
 800cc7c:	4652      	mov	r2, sl
 800cc7e:	465b      	mov	r3, fp
 800cc80:	4913      	ldr	r1, [pc, #76]	; (800ccd0 <_dtoa_r+0x630>)
 800cc82:	2000      	movs	r0, #0
 800cc84:	f7f3 fb18 	bl	80002b8 <__aeabi_dsub>
 800cc88:	4602      	mov	r2, r0
 800cc8a:	460b      	mov	r3, r1
 800cc8c:	4640      	mov	r0, r8
 800cc8e:	4649      	mov	r1, r9
 800cc90:	f7f3 ff3c 	bl	8000b0c <__aeabi_dcmplt>
 800cc94:	2800      	cmp	r0, #0
 800cc96:	f43f af35 	beq.w	800cb04 <_dtoa_r+0x464>
 800cc9a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800cc9c:	1e6b      	subs	r3, r5, #1
 800cc9e:	930f      	str	r3, [sp, #60]	; 0x3c
 800cca0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cca4:	2b30      	cmp	r3, #48	; 0x30
 800cca6:	d0f8      	beq.n	800cc9a <_dtoa_r+0x5fa>
 800cca8:	9700      	str	r7, [sp, #0]
 800ccaa:	e049      	b.n	800cd40 <_dtoa_r+0x6a0>
 800ccac:	4b05      	ldr	r3, [pc, #20]	; (800ccc4 <_dtoa_r+0x624>)
 800ccae:	f7f3 fcbb 	bl	8000628 <__aeabi_dmul>
 800ccb2:	4680      	mov	r8, r0
 800ccb4:	4689      	mov	r9, r1
 800ccb6:	e7bd      	b.n	800cc34 <_dtoa_r+0x594>
 800ccb8:	0800e6b8 	.word	0x0800e6b8
 800ccbc:	0800e690 	.word	0x0800e690
 800ccc0:	3ff00000 	.word	0x3ff00000
 800ccc4:	40240000 	.word	0x40240000
 800ccc8:	401c0000 	.word	0x401c0000
 800cccc:	40140000 	.word	0x40140000
 800ccd0:	3fe00000 	.word	0x3fe00000
 800ccd4:	9d01      	ldr	r5, [sp, #4]
 800ccd6:	4656      	mov	r6, sl
 800ccd8:	465f      	mov	r7, fp
 800ccda:	4642      	mov	r2, r8
 800ccdc:	464b      	mov	r3, r9
 800ccde:	4630      	mov	r0, r6
 800cce0:	4639      	mov	r1, r7
 800cce2:	f7f3 fdcb 	bl	800087c <__aeabi_ddiv>
 800cce6:	f7f3 ff4f 	bl	8000b88 <__aeabi_d2iz>
 800ccea:	4682      	mov	sl, r0
 800ccec:	f7f3 fc32 	bl	8000554 <__aeabi_i2d>
 800ccf0:	4642      	mov	r2, r8
 800ccf2:	464b      	mov	r3, r9
 800ccf4:	f7f3 fc98 	bl	8000628 <__aeabi_dmul>
 800ccf8:	4602      	mov	r2, r0
 800ccfa:	460b      	mov	r3, r1
 800ccfc:	4630      	mov	r0, r6
 800ccfe:	4639      	mov	r1, r7
 800cd00:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800cd04:	f7f3 fad8 	bl	80002b8 <__aeabi_dsub>
 800cd08:	f805 6b01 	strb.w	r6, [r5], #1
 800cd0c:	9e01      	ldr	r6, [sp, #4]
 800cd0e:	9f03      	ldr	r7, [sp, #12]
 800cd10:	1bae      	subs	r6, r5, r6
 800cd12:	42b7      	cmp	r7, r6
 800cd14:	4602      	mov	r2, r0
 800cd16:	460b      	mov	r3, r1
 800cd18:	d135      	bne.n	800cd86 <_dtoa_r+0x6e6>
 800cd1a:	f7f3 facf 	bl	80002bc <__adddf3>
 800cd1e:	4642      	mov	r2, r8
 800cd20:	464b      	mov	r3, r9
 800cd22:	4606      	mov	r6, r0
 800cd24:	460f      	mov	r7, r1
 800cd26:	f7f3 ff0f 	bl	8000b48 <__aeabi_dcmpgt>
 800cd2a:	b9d0      	cbnz	r0, 800cd62 <_dtoa_r+0x6c2>
 800cd2c:	4642      	mov	r2, r8
 800cd2e:	464b      	mov	r3, r9
 800cd30:	4630      	mov	r0, r6
 800cd32:	4639      	mov	r1, r7
 800cd34:	f7f3 fee0 	bl	8000af8 <__aeabi_dcmpeq>
 800cd38:	b110      	cbz	r0, 800cd40 <_dtoa_r+0x6a0>
 800cd3a:	f01a 0f01 	tst.w	sl, #1
 800cd3e:	d110      	bne.n	800cd62 <_dtoa_r+0x6c2>
 800cd40:	4620      	mov	r0, r4
 800cd42:	ee18 1a10 	vmov	r1, s16
 800cd46:	f000 fd17 	bl	800d778 <_Bfree>
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	9800      	ldr	r0, [sp, #0]
 800cd4e:	702b      	strb	r3, [r5, #0]
 800cd50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cd52:	3001      	adds	r0, #1
 800cd54:	6018      	str	r0, [r3, #0]
 800cd56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	f43f acf1 	beq.w	800c740 <_dtoa_r+0xa0>
 800cd5e:	601d      	str	r5, [r3, #0]
 800cd60:	e4ee      	b.n	800c740 <_dtoa_r+0xa0>
 800cd62:	9f00      	ldr	r7, [sp, #0]
 800cd64:	462b      	mov	r3, r5
 800cd66:	461d      	mov	r5, r3
 800cd68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cd6c:	2a39      	cmp	r2, #57	; 0x39
 800cd6e:	d106      	bne.n	800cd7e <_dtoa_r+0x6de>
 800cd70:	9a01      	ldr	r2, [sp, #4]
 800cd72:	429a      	cmp	r2, r3
 800cd74:	d1f7      	bne.n	800cd66 <_dtoa_r+0x6c6>
 800cd76:	9901      	ldr	r1, [sp, #4]
 800cd78:	2230      	movs	r2, #48	; 0x30
 800cd7a:	3701      	adds	r7, #1
 800cd7c:	700a      	strb	r2, [r1, #0]
 800cd7e:	781a      	ldrb	r2, [r3, #0]
 800cd80:	3201      	adds	r2, #1
 800cd82:	701a      	strb	r2, [r3, #0]
 800cd84:	e790      	b.n	800cca8 <_dtoa_r+0x608>
 800cd86:	4ba6      	ldr	r3, [pc, #664]	; (800d020 <_dtoa_r+0x980>)
 800cd88:	2200      	movs	r2, #0
 800cd8a:	f7f3 fc4d 	bl	8000628 <__aeabi_dmul>
 800cd8e:	2200      	movs	r2, #0
 800cd90:	2300      	movs	r3, #0
 800cd92:	4606      	mov	r6, r0
 800cd94:	460f      	mov	r7, r1
 800cd96:	f7f3 feaf 	bl	8000af8 <__aeabi_dcmpeq>
 800cd9a:	2800      	cmp	r0, #0
 800cd9c:	d09d      	beq.n	800ccda <_dtoa_r+0x63a>
 800cd9e:	e7cf      	b.n	800cd40 <_dtoa_r+0x6a0>
 800cda0:	9a08      	ldr	r2, [sp, #32]
 800cda2:	2a00      	cmp	r2, #0
 800cda4:	f000 80d7 	beq.w	800cf56 <_dtoa_r+0x8b6>
 800cda8:	9a06      	ldr	r2, [sp, #24]
 800cdaa:	2a01      	cmp	r2, #1
 800cdac:	f300 80ba 	bgt.w	800cf24 <_dtoa_r+0x884>
 800cdb0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cdb2:	2a00      	cmp	r2, #0
 800cdb4:	f000 80b2 	beq.w	800cf1c <_dtoa_r+0x87c>
 800cdb8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800cdbc:	9e07      	ldr	r6, [sp, #28]
 800cdbe:	9d04      	ldr	r5, [sp, #16]
 800cdc0:	9a04      	ldr	r2, [sp, #16]
 800cdc2:	441a      	add	r2, r3
 800cdc4:	9204      	str	r2, [sp, #16]
 800cdc6:	9a05      	ldr	r2, [sp, #20]
 800cdc8:	2101      	movs	r1, #1
 800cdca:	441a      	add	r2, r3
 800cdcc:	4620      	mov	r0, r4
 800cdce:	9205      	str	r2, [sp, #20]
 800cdd0:	f000 fd8a 	bl	800d8e8 <__i2b>
 800cdd4:	4607      	mov	r7, r0
 800cdd6:	2d00      	cmp	r5, #0
 800cdd8:	dd0c      	ble.n	800cdf4 <_dtoa_r+0x754>
 800cdda:	9b05      	ldr	r3, [sp, #20]
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	dd09      	ble.n	800cdf4 <_dtoa_r+0x754>
 800cde0:	42ab      	cmp	r3, r5
 800cde2:	9a04      	ldr	r2, [sp, #16]
 800cde4:	bfa8      	it	ge
 800cde6:	462b      	movge	r3, r5
 800cde8:	1ad2      	subs	r2, r2, r3
 800cdea:	9204      	str	r2, [sp, #16]
 800cdec:	9a05      	ldr	r2, [sp, #20]
 800cdee:	1aed      	subs	r5, r5, r3
 800cdf0:	1ad3      	subs	r3, r2, r3
 800cdf2:	9305      	str	r3, [sp, #20]
 800cdf4:	9b07      	ldr	r3, [sp, #28]
 800cdf6:	b31b      	cbz	r3, 800ce40 <_dtoa_r+0x7a0>
 800cdf8:	9b08      	ldr	r3, [sp, #32]
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	f000 80af 	beq.w	800cf5e <_dtoa_r+0x8be>
 800ce00:	2e00      	cmp	r6, #0
 800ce02:	dd13      	ble.n	800ce2c <_dtoa_r+0x78c>
 800ce04:	4639      	mov	r1, r7
 800ce06:	4632      	mov	r2, r6
 800ce08:	4620      	mov	r0, r4
 800ce0a:	f000 fe2d 	bl	800da68 <__pow5mult>
 800ce0e:	ee18 2a10 	vmov	r2, s16
 800ce12:	4601      	mov	r1, r0
 800ce14:	4607      	mov	r7, r0
 800ce16:	4620      	mov	r0, r4
 800ce18:	f000 fd7c 	bl	800d914 <__multiply>
 800ce1c:	ee18 1a10 	vmov	r1, s16
 800ce20:	4680      	mov	r8, r0
 800ce22:	4620      	mov	r0, r4
 800ce24:	f000 fca8 	bl	800d778 <_Bfree>
 800ce28:	ee08 8a10 	vmov	s16, r8
 800ce2c:	9b07      	ldr	r3, [sp, #28]
 800ce2e:	1b9a      	subs	r2, r3, r6
 800ce30:	d006      	beq.n	800ce40 <_dtoa_r+0x7a0>
 800ce32:	ee18 1a10 	vmov	r1, s16
 800ce36:	4620      	mov	r0, r4
 800ce38:	f000 fe16 	bl	800da68 <__pow5mult>
 800ce3c:	ee08 0a10 	vmov	s16, r0
 800ce40:	2101      	movs	r1, #1
 800ce42:	4620      	mov	r0, r4
 800ce44:	f000 fd50 	bl	800d8e8 <__i2b>
 800ce48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	4606      	mov	r6, r0
 800ce4e:	f340 8088 	ble.w	800cf62 <_dtoa_r+0x8c2>
 800ce52:	461a      	mov	r2, r3
 800ce54:	4601      	mov	r1, r0
 800ce56:	4620      	mov	r0, r4
 800ce58:	f000 fe06 	bl	800da68 <__pow5mult>
 800ce5c:	9b06      	ldr	r3, [sp, #24]
 800ce5e:	2b01      	cmp	r3, #1
 800ce60:	4606      	mov	r6, r0
 800ce62:	f340 8081 	ble.w	800cf68 <_dtoa_r+0x8c8>
 800ce66:	f04f 0800 	mov.w	r8, #0
 800ce6a:	6933      	ldr	r3, [r6, #16]
 800ce6c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ce70:	6918      	ldr	r0, [r3, #16]
 800ce72:	f000 fce9 	bl	800d848 <__hi0bits>
 800ce76:	f1c0 0020 	rsb	r0, r0, #32
 800ce7a:	9b05      	ldr	r3, [sp, #20]
 800ce7c:	4418      	add	r0, r3
 800ce7e:	f010 001f 	ands.w	r0, r0, #31
 800ce82:	f000 8092 	beq.w	800cfaa <_dtoa_r+0x90a>
 800ce86:	f1c0 0320 	rsb	r3, r0, #32
 800ce8a:	2b04      	cmp	r3, #4
 800ce8c:	f340 808a 	ble.w	800cfa4 <_dtoa_r+0x904>
 800ce90:	f1c0 001c 	rsb	r0, r0, #28
 800ce94:	9b04      	ldr	r3, [sp, #16]
 800ce96:	4403      	add	r3, r0
 800ce98:	9304      	str	r3, [sp, #16]
 800ce9a:	9b05      	ldr	r3, [sp, #20]
 800ce9c:	4403      	add	r3, r0
 800ce9e:	4405      	add	r5, r0
 800cea0:	9305      	str	r3, [sp, #20]
 800cea2:	9b04      	ldr	r3, [sp, #16]
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	dd07      	ble.n	800ceb8 <_dtoa_r+0x818>
 800cea8:	ee18 1a10 	vmov	r1, s16
 800ceac:	461a      	mov	r2, r3
 800ceae:	4620      	mov	r0, r4
 800ceb0:	f000 fe34 	bl	800db1c <__lshift>
 800ceb4:	ee08 0a10 	vmov	s16, r0
 800ceb8:	9b05      	ldr	r3, [sp, #20]
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	dd05      	ble.n	800ceca <_dtoa_r+0x82a>
 800cebe:	4631      	mov	r1, r6
 800cec0:	461a      	mov	r2, r3
 800cec2:	4620      	mov	r0, r4
 800cec4:	f000 fe2a 	bl	800db1c <__lshift>
 800cec8:	4606      	mov	r6, r0
 800ceca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d06e      	beq.n	800cfae <_dtoa_r+0x90e>
 800ced0:	ee18 0a10 	vmov	r0, s16
 800ced4:	4631      	mov	r1, r6
 800ced6:	f000 fe91 	bl	800dbfc <__mcmp>
 800ceda:	2800      	cmp	r0, #0
 800cedc:	da67      	bge.n	800cfae <_dtoa_r+0x90e>
 800cede:	9b00      	ldr	r3, [sp, #0]
 800cee0:	3b01      	subs	r3, #1
 800cee2:	ee18 1a10 	vmov	r1, s16
 800cee6:	9300      	str	r3, [sp, #0]
 800cee8:	220a      	movs	r2, #10
 800ceea:	2300      	movs	r3, #0
 800ceec:	4620      	mov	r0, r4
 800ceee:	f000 fc65 	bl	800d7bc <__multadd>
 800cef2:	9b08      	ldr	r3, [sp, #32]
 800cef4:	ee08 0a10 	vmov	s16, r0
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	f000 81b1 	beq.w	800d260 <_dtoa_r+0xbc0>
 800cefe:	2300      	movs	r3, #0
 800cf00:	4639      	mov	r1, r7
 800cf02:	220a      	movs	r2, #10
 800cf04:	4620      	mov	r0, r4
 800cf06:	f000 fc59 	bl	800d7bc <__multadd>
 800cf0a:	9b02      	ldr	r3, [sp, #8]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	4607      	mov	r7, r0
 800cf10:	f300 808e 	bgt.w	800d030 <_dtoa_r+0x990>
 800cf14:	9b06      	ldr	r3, [sp, #24]
 800cf16:	2b02      	cmp	r3, #2
 800cf18:	dc51      	bgt.n	800cfbe <_dtoa_r+0x91e>
 800cf1a:	e089      	b.n	800d030 <_dtoa_r+0x990>
 800cf1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cf1e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800cf22:	e74b      	b.n	800cdbc <_dtoa_r+0x71c>
 800cf24:	9b03      	ldr	r3, [sp, #12]
 800cf26:	1e5e      	subs	r6, r3, #1
 800cf28:	9b07      	ldr	r3, [sp, #28]
 800cf2a:	42b3      	cmp	r3, r6
 800cf2c:	bfbf      	itttt	lt
 800cf2e:	9b07      	ldrlt	r3, [sp, #28]
 800cf30:	9607      	strlt	r6, [sp, #28]
 800cf32:	1af2      	sublt	r2, r6, r3
 800cf34:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800cf36:	bfb6      	itet	lt
 800cf38:	189b      	addlt	r3, r3, r2
 800cf3a:	1b9e      	subge	r6, r3, r6
 800cf3c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800cf3e:	9b03      	ldr	r3, [sp, #12]
 800cf40:	bfb8      	it	lt
 800cf42:	2600      	movlt	r6, #0
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	bfb7      	itett	lt
 800cf48:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800cf4c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800cf50:	1a9d      	sublt	r5, r3, r2
 800cf52:	2300      	movlt	r3, #0
 800cf54:	e734      	b.n	800cdc0 <_dtoa_r+0x720>
 800cf56:	9e07      	ldr	r6, [sp, #28]
 800cf58:	9d04      	ldr	r5, [sp, #16]
 800cf5a:	9f08      	ldr	r7, [sp, #32]
 800cf5c:	e73b      	b.n	800cdd6 <_dtoa_r+0x736>
 800cf5e:	9a07      	ldr	r2, [sp, #28]
 800cf60:	e767      	b.n	800ce32 <_dtoa_r+0x792>
 800cf62:	9b06      	ldr	r3, [sp, #24]
 800cf64:	2b01      	cmp	r3, #1
 800cf66:	dc18      	bgt.n	800cf9a <_dtoa_r+0x8fa>
 800cf68:	f1ba 0f00 	cmp.w	sl, #0
 800cf6c:	d115      	bne.n	800cf9a <_dtoa_r+0x8fa>
 800cf6e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cf72:	b993      	cbnz	r3, 800cf9a <_dtoa_r+0x8fa>
 800cf74:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800cf78:	0d1b      	lsrs	r3, r3, #20
 800cf7a:	051b      	lsls	r3, r3, #20
 800cf7c:	b183      	cbz	r3, 800cfa0 <_dtoa_r+0x900>
 800cf7e:	9b04      	ldr	r3, [sp, #16]
 800cf80:	3301      	adds	r3, #1
 800cf82:	9304      	str	r3, [sp, #16]
 800cf84:	9b05      	ldr	r3, [sp, #20]
 800cf86:	3301      	adds	r3, #1
 800cf88:	9305      	str	r3, [sp, #20]
 800cf8a:	f04f 0801 	mov.w	r8, #1
 800cf8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	f47f af6a 	bne.w	800ce6a <_dtoa_r+0x7ca>
 800cf96:	2001      	movs	r0, #1
 800cf98:	e76f      	b.n	800ce7a <_dtoa_r+0x7da>
 800cf9a:	f04f 0800 	mov.w	r8, #0
 800cf9e:	e7f6      	b.n	800cf8e <_dtoa_r+0x8ee>
 800cfa0:	4698      	mov	r8, r3
 800cfa2:	e7f4      	b.n	800cf8e <_dtoa_r+0x8ee>
 800cfa4:	f43f af7d 	beq.w	800cea2 <_dtoa_r+0x802>
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	301c      	adds	r0, #28
 800cfac:	e772      	b.n	800ce94 <_dtoa_r+0x7f4>
 800cfae:	9b03      	ldr	r3, [sp, #12]
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	dc37      	bgt.n	800d024 <_dtoa_r+0x984>
 800cfb4:	9b06      	ldr	r3, [sp, #24]
 800cfb6:	2b02      	cmp	r3, #2
 800cfb8:	dd34      	ble.n	800d024 <_dtoa_r+0x984>
 800cfba:	9b03      	ldr	r3, [sp, #12]
 800cfbc:	9302      	str	r3, [sp, #8]
 800cfbe:	9b02      	ldr	r3, [sp, #8]
 800cfc0:	b96b      	cbnz	r3, 800cfde <_dtoa_r+0x93e>
 800cfc2:	4631      	mov	r1, r6
 800cfc4:	2205      	movs	r2, #5
 800cfc6:	4620      	mov	r0, r4
 800cfc8:	f000 fbf8 	bl	800d7bc <__multadd>
 800cfcc:	4601      	mov	r1, r0
 800cfce:	4606      	mov	r6, r0
 800cfd0:	ee18 0a10 	vmov	r0, s16
 800cfd4:	f000 fe12 	bl	800dbfc <__mcmp>
 800cfd8:	2800      	cmp	r0, #0
 800cfda:	f73f adbb 	bgt.w	800cb54 <_dtoa_r+0x4b4>
 800cfde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cfe0:	9d01      	ldr	r5, [sp, #4]
 800cfe2:	43db      	mvns	r3, r3
 800cfe4:	9300      	str	r3, [sp, #0]
 800cfe6:	f04f 0800 	mov.w	r8, #0
 800cfea:	4631      	mov	r1, r6
 800cfec:	4620      	mov	r0, r4
 800cfee:	f000 fbc3 	bl	800d778 <_Bfree>
 800cff2:	2f00      	cmp	r7, #0
 800cff4:	f43f aea4 	beq.w	800cd40 <_dtoa_r+0x6a0>
 800cff8:	f1b8 0f00 	cmp.w	r8, #0
 800cffc:	d005      	beq.n	800d00a <_dtoa_r+0x96a>
 800cffe:	45b8      	cmp	r8, r7
 800d000:	d003      	beq.n	800d00a <_dtoa_r+0x96a>
 800d002:	4641      	mov	r1, r8
 800d004:	4620      	mov	r0, r4
 800d006:	f000 fbb7 	bl	800d778 <_Bfree>
 800d00a:	4639      	mov	r1, r7
 800d00c:	4620      	mov	r0, r4
 800d00e:	f000 fbb3 	bl	800d778 <_Bfree>
 800d012:	e695      	b.n	800cd40 <_dtoa_r+0x6a0>
 800d014:	2600      	movs	r6, #0
 800d016:	4637      	mov	r7, r6
 800d018:	e7e1      	b.n	800cfde <_dtoa_r+0x93e>
 800d01a:	9700      	str	r7, [sp, #0]
 800d01c:	4637      	mov	r7, r6
 800d01e:	e599      	b.n	800cb54 <_dtoa_r+0x4b4>
 800d020:	40240000 	.word	0x40240000
 800d024:	9b08      	ldr	r3, [sp, #32]
 800d026:	2b00      	cmp	r3, #0
 800d028:	f000 80ca 	beq.w	800d1c0 <_dtoa_r+0xb20>
 800d02c:	9b03      	ldr	r3, [sp, #12]
 800d02e:	9302      	str	r3, [sp, #8]
 800d030:	2d00      	cmp	r5, #0
 800d032:	dd05      	ble.n	800d040 <_dtoa_r+0x9a0>
 800d034:	4639      	mov	r1, r7
 800d036:	462a      	mov	r2, r5
 800d038:	4620      	mov	r0, r4
 800d03a:	f000 fd6f 	bl	800db1c <__lshift>
 800d03e:	4607      	mov	r7, r0
 800d040:	f1b8 0f00 	cmp.w	r8, #0
 800d044:	d05b      	beq.n	800d0fe <_dtoa_r+0xa5e>
 800d046:	6879      	ldr	r1, [r7, #4]
 800d048:	4620      	mov	r0, r4
 800d04a:	f000 fb55 	bl	800d6f8 <_Balloc>
 800d04e:	4605      	mov	r5, r0
 800d050:	b928      	cbnz	r0, 800d05e <_dtoa_r+0x9be>
 800d052:	4b87      	ldr	r3, [pc, #540]	; (800d270 <_dtoa_r+0xbd0>)
 800d054:	4602      	mov	r2, r0
 800d056:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d05a:	f7ff bb3b 	b.w	800c6d4 <_dtoa_r+0x34>
 800d05e:	693a      	ldr	r2, [r7, #16]
 800d060:	3202      	adds	r2, #2
 800d062:	0092      	lsls	r2, r2, #2
 800d064:	f107 010c 	add.w	r1, r7, #12
 800d068:	300c      	adds	r0, #12
 800d06a:	f000 fb2b 	bl	800d6c4 <memcpy>
 800d06e:	2201      	movs	r2, #1
 800d070:	4629      	mov	r1, r5
 800d072:	4620      	mov	r0, r4
 800d074:	f000 fd52 	bl	800db1c <__lshift>
 800d078:	9b01      	ldr	r3, [sp, #4]
 800d07a:	f103 0901 	add.w	r9, r3, #1
 800d07e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800d082:	4413      	add	r3, r2
 800d084:	9305      	str	r3, [sp, #20]
 800d086:	f00a 0301 	and.w	r3, sl, #1
 800d08a:	46b8      	mov	r8, r7
 800d08c:	9304      	str	r3, [sp, #16]
 800d08e:	4607      	mov	r7, r0
 800d090:	4631      	mov	r1, r6
 800d092:	ee18 0a10 	vmov	r0, s16
 800d096:	f7ff fa77 	bl	800c588 <quorem>
 800d09a:	4641      	mov	r1, r8
 800d09c:	9002      	str	r0, [sp, #8]
 800d09e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d0a2:	ee18 0a10 	vmov	r0, s16
 800d0a6:	f000 fda9 	bl	800dbfc <__mcmp>
 800d0aa:	463a      	mov	r2, r7
 800d0ac:	9003      	str	r0, [sp, #12]
 800d0ae:	4631      	mov	r1, r6
 800d0b0:	4620      	mov	r0, r4
 800d0b2:	f000 fdbf 	bl	800dc34 <__mdiff>
 800d0b6:	68c2      	ldr	r2, [r0, #12]
 800d0b8:	f109 3bff 	add.w	fp, r9, #4294967295
 800d0bc:	4605      	mov	r5, r0
 800d0be:	bb02      	cbnz	r2, 800d102 <_dtoa_r+0xa62>
 800d0c0:	4601      	mov	r1, r0
 800d0c2:	ee18 0a10 	vmov	r0, s16
 800d0c6:	f000 fd99 	bl	800dbfc <__mcmp>
 800d0ca:	4602      	mov	r2, r0
 800d0cc:	4629      	mov	r1, r5
 800d0ce:	4620      	mov	r0, r4
 800d0d0:	9207      	str	r2, [sp, #28]
 800d0d2:	f000 fb51 	bl	800d778 <_Bfree>
 800d0d6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800d0da:	ea43 0102 	orr.w	r1, r3, r2
 800d0de:	9b04      	ldr	r3, [sp, #16]
 800d0e0:	430b      	orrs	r3, r1
 800d0e2:	464d      	mov	r5, r9
 800d0e4:	d10f      	bne.n	800d106 <_dtoa_r+0xa66>
 800d0e6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d0ea:	d02a      	beq.n	800d142 <_dtoa_r+0xaa2>
 800d0ec:	9b03      	ldr	r3, [sp, #12]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	dd02      	ble.n	800d0f8 <_dtoa_r+0xa58>
 800d0f2:	9b02      	ldr	r3, [sp, #8]
 800d0f4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800d0f8:	f88b a000 	strb.w	sl, [fp]
 800d0fc:	e775      	b.n	800cfea <_dtoa_r+0x94a>
 800d0fe:	4638      	mov	r0, r7
 800d100:	e7ba      	b.n	800d078 <_dtoa_r+0x9d8>
 800d102:	2201      	movs	r2, #1
 800d104:	e7e2      	b.n	800d0cc <_dtoa_r+0xa2c>
 800d106:	9b03      	ldr	r3, [sp, #12]
 800d108:	2b00      	cmp	r3, #0
 800d10a:	db04      	blt.n	800d116 <_dtoa_r+0xa76>
 800d10c:	9906      	ldr	r1, [sp, #24]
 800d10e:	430b      	orrs	r3, r1
 800d110:	9904      	ldr	r1, [sp, #16]
 800d112:	430b      	orrs	r3, r1
 800d114:	d122      	bne.n	800d15c <_dtoa_r+0xabc>
 800d116:	2a00      	cmp	r2, #0
 800d118:	ddee      	ble.n	800d0f8 <_dtoa_r+0xa58>
 800d11a:	ee18 1a10 	vmov	r1, s16
 800d11e:	2201      	movs	r2, #1
 800d120:	4620      	mov	r0, r4
 800d122:	f000 fcfb 	bl	800db1c <__lshift>
 800d126:	4631      	mov	r1, r6
 800d128:	ee08 0a10 	vmov	s16, r0
 800d12c:	f000 fd66 	bl	800dbfc <__mcmp>
 800d130:	2800      	cmp	r0, #0
 800d132:	dc03      	bgt.n	800d13c <_dtoa_r+0xa9c>
 800d134:	d1e0      	bne.n	800d0f8 <_dtoa_r+0xa58>
 800d136:	f01a 0f01 	tst.w	sl, #1
 800d13a:	d0dd      	beq.n	800d0f8 <_dtoa_r+0xa58>
 800d13c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d140:	d1d7      	bne.n	800d0f2 <_dtoa_r+0xa52>
 800d142:	2339      	movs	r3, #57	; 0x39
 800d144:	f88b 3000 	strb.w	r3, [fp]
 800d148:	462b      	mov	r3, r5
 800d14a:	461d      	mov	r5, r3
 800d14c:	3b01      	subs	r3, #1
 800d14e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d152:	2a39      	cmp	r2, #57	; 0x39
 800d154:	d071      	beq.n	800d23a <_dtoa_r+0xb9a>
 800d156:	3201      	adds	r2, #1
 800d158:	701a      	strb	r2, [r3, #0]
 800d15a:	e746      	b.n	800cfea <_dtoa_r+0x94a>
 800d15c:	2a00      	cmp	r2, #0
 800d15e:	dd07      	ble.n	800d170 <_dtoa_r+0xad0>
 800d160:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d164:	d0ed      	beq.n	800d142 <_dtoa_r+0xaa2>
 800d166:	f10a 0301 	add.w	r3, sl, #1
 800d16a:	f88b 3000 	strb.w	r3, [fp]
 800d16e:	e73c      	b.n	800cfea <_dtoa_r+0x94a>
 800d170:	9b05      	ldr	r3, [sp, #20]
 800d172:	f809 ac01 	strb.w	sl, [r9, #-1]
 800d176:	4599      	cmp	r9, r3
 800d178:	d047      	beq.n	800d20a <_dtoa_r+0xb6a>
 800d17a:	ee18 1a10 	vmov	r1, s16
 800d17e:	2300      	movs	r3, #0
 800d180:	220a      	movs	r2, #10
 800d182:	4620      	mov	r0, r4
 800d184:	f000 fb1a 	bl	800d7bc <__multadd>
 800d188:	45b8      	cmp	r8, r7
 800d18a:	ee08 0a10 	vmov	s16, r0
 800d18e:	f04f 0300 	mov.w	r3, #0
 800d192:	f04f 020a 	mov.w	r2, #10
 800d196:	4641      	mov	r1, r8
 800d198:	4620      	mov	r0, r4
 800d19a:	d106      	bne.n	800d1aa <_dtoa_r+0xb0a>
 800d19c:	f000 fb0e 	bl	800d7bc <__multadd>
 800d1a0:	4680      	mov	r8, r0
 800d1a2:	4607      	mov	r7, r0
 800d1a4:	f109 0901 	add.w	r9, r9, #1
 800d1a8:	e772      	b.n	800d090 <_dtoa_r+0x9f0>
 800d1aa:	f000 fb07 	bl	800d7bc <__multadd>
 800d1ae:	4639      	mov	r1, r7
 800d1b0:	4680      	mov	r8, r0
 800d1b2:	2300      	movs	r3, #0
 800d1b4:	220a      	movs	r2, #10
 800d1b6:	4620      	mov	r0, r4
 800d1b8:	f000 fb00 	bl	800d7bc <__multadd>
 800d1bc:	4607      	mov	r7, r0
 800d1be:	e7f1      	b.n	800d1a4 <_dtoa_r+0xb04>
 800d1c0:	9b03      	ldr	r3, [sp, #12]
 800d1c2:	9302      	str	r3, [sp, #8]
 800d1c4:	9d01      	ldr	r5, [sp, #4]
 800d1c6:	ee18 0a10 	vmov	r0, s16
 800d1ca:	4631      	mov	r1, r6
 800d1cc:	f7ff f9dc 	bl	800c588 <quorem>
 800d1d0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d1d4:	9b01      	ldr	r3, [sp, #4]
 800d1d6:	f805 ab01 	strb.w	sl, [r5], #1
 800d1da:	1aea      	subs	r2, r5, r3
 800d1dc:	9b02      	ldr	r3, [sp, #8]
 800d1de:	4293      	cmp	r3, r2
 800d1e0:	dd09      	ble.n	800d1f6 <_dtoa_r+0xb56>
 800d1e2:	ee18 1a10 	vmov	r1, s16
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	220a      	movs	r2, #10
 800d1ea:	4620      	mov	r0, r4
 800d1ec:	f000 fae6 	bl	800d7bc <__multadd>
 800d1f0:	ee08 0a10 	vmov	s16, r0
 800d1f4:	e7e7      	b.n	800d1c6 <_dtoa_r+0xb26>
 800d1f6:	9b02      	ldr	r3, [sp, #8]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	bfc8      	it	gt
 800d1fc:	461d      	movgt	r5, r3
 800d1fe:	9b01      	ldr	r3, [sp, #4]
 800d200:	bfd8      	it	le
 800d202:	2501      	movle	r5, #1
 800d204:	441d      	add	r5, r3
 800d206:	f04f 0800 	mov.w	r8, #0
 800d20a:	ee18 1a10 	vmov	r1, s16
 800d20e:	2201      	movs	r2, #1
 800d210:	4620      	mov	r0, r4
 800d212:	f000 fc83 	bl	800db1c <__lshift>
 800d216:	4631      	mov	r1, r6
 800d218:	ee08 0a10 	vmov	s16, r0
 800d21c:	f000 fcee 	bl	800dbfc <__mcmp>
 800d220:	2800      	cmp	r0, #0
 800d222:	dc91      	bgt.n	800d148 <_dtoa_r+0xaa8>
 800d224:	d102      	bne.n	800d22c <_dtoa_r+0xb8c>
 800d226:	f01a 0f01 	tst.w	sl, #1
 800d22a:	d18d      	bne.n	800d148 <_dtoa_r+0xaa8>
 800d22c:	462b      	mov	r3, r5
 800d22e:	461d      	mov	r5, r3
 800d230:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d234:	2a30      	cmp	r2, #48	; 0x30
 800d236:	d0fa      	beq.n	800d22e <_dtoa_r+0xb8e>
 800d238:	e6d7      	b.n	800cfea <_dtoa_r+0x94a>
 800d23a:	9a01      	ldr	r2, [sp, #4]
 800d23c:	429a      	cmp	r2, r3
 800d23e:	d184      	bne.n	800d14a <_dtoa_r+0xaaa>
 800d240:	9b00      	ldr	r3, [sp, #0]
 800d242:	3301      	adds	r3, #1
 800d244:	9300      	str	r3, [sp, #0]
 800d246:	2331      	movs	r3, #49	; 0x31
 800d248:	7013      	strb	r3, [r2, #0]
 800d24a:	e6ce      	b.n	800cfea <_dtoa_r+0x94a>
 800d24c:	4b09      	ldr	r3, [pc, #36]	; (800d274 <_dtoa_r+0xbd4>)
 800d24e:	f7ff ba95 	b.w	800c77c <_dtoa_r+0xdc>
 800d252:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d254:	2b00      	cmp	r3, #0
 800d256:	f47f aa6e 	bne.w	800c736 <_dtoa_r+0x96>
 800d25a:	4b07      	ldr	r3, [pc, #28]	; (800d278 <_dtoa_r+0xbd8>)
 800d25c:	f7ff ba8e 	b.w	800c77c <_dtoa_r+0xdc>
 800d260:	9b02      	ldr	r3, [sp, #8]
 800d262:	2b00      	cmp	r3, #0
 800d264:	dcae      	bgt.n	800d1c4 <_dtoa_r+0xb24>
 800d266:	9b06      	ldr	r3, [sp, #24]
 800d268:	2b02      	cmp	r3, #2
 800d26a:	f73f aea8 	bgt.w	800cfbe <_dtoa_r+0x91e>
 800d26e:	e7a9      	b.n	800d1c4 <_dtoa_r+0xb24>
 800d270:	0800e5bf 	.word	0x0800e5bf
 800d274:	0800e51c 	.word	0x0800e51c
 800d278:	0800e540 	.word	0x0800e540

0800d27c <__sflush_r>:
 800d27c:	898a      	ldrh	r2, [r1, #12]
 800d27e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d282:	4605      	mov	r5, r0
 800d284:	0710      	lsls	r0, r2, #28
 800d286:	460c      	mov	r4, r1
 800d288:	d458      	bmi.n	800d33c <__sflush_r+0xc0>
 800d28a:	684b      	ldr	r3, [r1, #4]
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	dc05      	bgt.n	800d29c <__sflush_r+0x20>
 800d290:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d292:	2b00      	cmp	r3, #0
 800d294:	dc02      	bgt.n	800d29c <__sflush_r+0x20>
 800d296:	2000      	movs	r0, #0
 800d298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d29c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d29e:	2e00      	cmp	r6, #0
 800d2a0:	d0f9      	beq.n	800d296 <__sflush_r+0x1a>
 800d2a2:	2300      	movs	r3, #0
 800d2a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d2a8:	682f      	ldr	r7, [r5, #0]
 800d2aa:	602b      	str	r3, [r5, #0]
 800d2ac:	d032      	beq.n	800d314 <__sflush_r+0x98>
 800d2ae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d2b0:	89a3      	ldrh	r3, [r4, #12]
 800d2b2:	075a      	lsls	r2, r3, #29
 800d2b4:	d505      	bpl.n	800d2c2 <__sflush_r+0x46>
 800d2b6:	6863      	ldr	r3, [r4, #4]
 800d2b8:	1ac0      	subs	r0, r0, r3
 800d2ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d2bc:	b10b      	cbz	r3, 800d2c2 <__sflush_r+0x46>
 800d2be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d2c0:	1ac0      	subs	r0, r0, r3
 800d2c2:	2300      	movs	r3, #0
 800d2c4:	4602      	mov	r2, r0
 800d2c6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d2c8:	6a21      	ldr	r1, [r4, #32]
 800d2ca:	4628      	mov	r0, r5
 800d2cc:	47b0      	blx	r6
 800d2ce:	1c43      	adds	r3, r0, #1
 800d2d0:	89a3      	ldrh	r3, [r4, #12]
 800d2d2:	d106      	bne.n	800d2e2 <__sflush_r+0x66>
 800d2d4:	6829      	ldr	r1, [r5, #0]
 800d2d6:	291d      	cmp	r1, #29
 800d2d8:	d82c      	bhi.n	800d334 <__sflush_r+0xb8>
 800d2da:	4a2a      	ldr	r2, [pc, #168]	; (800d384 <__sflush_r+0x108>)
 800d2dc:	40ca      	lsrs	r2, r1
 800d2de:	07d6      	lsls	r6, r2, #31
 800d2e0:	d528      	bpl.n	800d334 <__sflush_r+0xb8>
 800d2e2:	2200      	movs	r2, #0
 800d2e4:	6062      	str	r2, [r4, #4]
 800d2e6:	04d9      	lsls	r1, r3, #19
 800d2e8:	6922      	ldr	r2, [r4, #16]
 800d2ea:	6022      	str	r2, [r4, #0]
 800d2ec:	d504      	bpl.n	800d2f8 <__sflush_r+0x7c>
 800d2ee:	1c42      	adds	r2, r0, #1
 800d2f0:	d101      	bne.n	800d2f6 <__sflush_r+0x7a>
 800d2f2:	682b      	ldr	r3, [r5, #0]
 800d2f4:	b903      	cbnz	r3, 800d2f8 <__sflush_r+0x7c>
 800d2f6:	6560      	str	r0, [r4, #84]	; 0x54
 800d2f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d2fa:	602f      	str	r7, [r5, #0]
 800d2fc:	2900      	cmp	r1, #0
 800d2fe:	d0ca      	beq.n	800d296 <__sflush_r+0x1a>
 800d300:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d304:	4299      	cmp	r1, r3
 800d306:	d002      	beq.n	800d30e <__sflush_r+0x92>
 800d308:	4628      	mov	r0, r5
 800d30a:	f7fe fa95 	bl	800b838 <_free_r>
 800d30e:	2000      	movs	r0, #0
 800d310:	6360      	str	r0, [r4, #52]	; 0x34
 800d312:	e7c1      	b.n	800d298 <__sflush_r+0x1c>
 800d314:	6a21      	ldr	r1, [r4, #32]
 800d316:	2301      	movs	r3, #1
 800d318:	4628      	mov	r0, r5
 800d31a:	47b0      	blx	r6
 800d31c:	1c41      	adds	r1, r0, #1
 800d31e:	d1c7      	bne.n	800d2b0 <__sflush_r+0x34>
 800d320:	682b      	ldr	r3, [r5, #0]
 800d322:	2b00      	cmp	r3, #0
 800d324:	d0c4      	beq.n	800d2b0 <__sflush_r+0x34>
 800d326:	2b1d      	cmp	r3, #29
 800d328:	d001      	beq.n	800d32e <__sflush_r+0xb2>
 800d32a:	2b16      	cmp	r3, #22
 800d32c:	d101      	bne.n	800d332 <__sflush_r+0xb6>
 800d32e:	602f      	str	r7, [r5, #0]
 800d330:	e7b1      	b.n	800d296 <__sflush_r+0x1a>
 800d332:	89a3      	ldrh	r3, [r4, #12]
 800d334:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d338:	81a3      	strh	r3, [r4, #12]
 800d33a:	e7ad      	b.n	800d298 <__sflush_r+0x1c>
 800d33c:	690f      	ldr	r7, [r1, #16]
 800d33e:	2f00      	cmp	r7, #0
 800d340:	d0a9      	beq.n	800d296 <__sflush_r+0x1a>
 800d342:	0793      	lsls	r3, r2, #30
 800d344:	680e      	ldr	r6, [r1, #0]
 800d346:	bf08      	it	eq
 800d348:	694b      	ldreq	r3, [r1, #20]
 800d34a:	600f      	str	r7, [r1, #0]
 800d34c:	bf18      	it	ne
 800d34e:	2300      	movne	r3, #0
 800d350:	eba6 0807 	sub.w	r8, r6, r7
 800d354:	608b      	str	r3, [r1, #8]
 800d356:	f1b8 0f00 	cmp.w	r8, #0
 800d35a:	dd9c      	ble.n	800d296 <__sflush_r+0x1a>
 800d35c:	6a21      	ldr	r1, [r4, #32]
 800d35e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d360:	4643      	mov	r3, r8
 800d362:	463a      	mov	r2, r7
 800d364:	4628      	mov	r0, r5
 800d366:	47b0      	blx	r6
 800d368:	2800      	cmp	r0, #0
 800d36a:	dc06      	bgt.n	800d37a <__sflush_r+0xfe>
 800d36c:	89a3      	ldrh	r3, [r4, #12]
 800d36e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d372:	81a3      	strh	r3, [r4, #12]
 800d374:	f04f 30ff 	mov.w	r0, #4294967295
 800d378:	e78e      	b.n	800d298 <__sflush_r+0x1c>
 800d37a:	4407      	add	r7, r0
 800d37c:	eba8 0800 	sub.w	r8, r8, r0
 800d380:	e7e9      	b.n	800d356 <__sflush_r+0xda>
 800d382:	bf00      	nop
 800d384:	20400001 	.word	0x20400001

0800d388 <_fflush_r>:
 800d388:	b538      	push	{r3, r4, r5, lr}
 800d38a:	690b      	ldr	r3, [r1, #16]
 800d38c:	4605      	mov	r5, r0
 800d38e:	460c      	mov	r4, r1
 800d390:	b913      	cbnz	r3, 800d398 <_fflush_r+0x10>
 800d392:	2500      	movs	r5, #0
 800d394:	4628      	mov	r0, r5
 800d396:	bd38      	pop	{r3, r4, r5, pc}
 800d398:	b118      	cbz	r0, 800d3a2 <_fflush_r+0x1a>
 800d39a:	6983      	ldr	r3, [r0, #24]
 800d39c:	b90b      	cbnz	r3, 800d3a2 <_fflush_r+0x1a>
 800d39e:	f000 f887 	bl	800d4b0 <__sinit>
 800d3a2:	4b14      	ldr	r3, [pc, #80]	; (800d3f4 <_fflush_r+0x6c>)
 800d3a4:	429c      	cmp	r4, r3
 800d3a6:	d11b      	bne.n	800d3e0 <_fflush_r+0x58>
 800d3a8:	686c      	ldr	r4, [r5, #4]
 800d3aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d0ef      	beq.n	800d392 <_fflush_r+0xa>
 800d3b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d3b4:	07d0      	lsls	r0, r2, #31
 800d3b6:	d404      	bmi.n	800d3c2 <_fflush_r+0x3a>
 800d3b8:	0599      	lsls	r1, r3, #22
 800d3ba:	d402      	bmi.n	800d3c2 <_fflush_r+0x3a>
 800d3bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d3be:	f000 f91a 	bl	800d5f6 <__retarget_lock_acquire_recursive>
 800d3c2:	4628      	mov	r0, r5
 800d3c4:	4621      	mov	r1, r4
 800d3c6:	f7ff ff59 	bl	800d27c <__sflush_r>
 800d3ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d3cc:	07da      	lsls	r2, r3, #31
 800d3ce:	4605      	mov	r5, r0
 800d3d0:	d4e0      	bmi.n	800d394 <_fflush_r+0xc>
 800d3d2:	89a3      	ldrh	r3, [r4, #12]
 800d3d4:	059b      	lsls	r3, r3, #22
 800d3d6:	d4dd      	bmi.n	800d394 <_fflush_r+0xc>
 800d3d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d3da:	f000 f90d 	bl	800d5f8 <__retarget_lock_release_recursive>
 800d3de:	e7d9      	b.n	800d394 <_fflush_r+0xc>
 800d3e0:	4b05      	ldr	r3, [pc, #20]	; (800d3f8 <_fflush_r+0x70>)
 800d3e2:	429c      	cmp	r4, r3
 800d3e4:	d101      	bne.n	800d3ea <_fflush_r+0x62>
 800d3e6:	68ac      	ldr	r4, [r5, #8]
 800d3e8:	e7df      	b.n	800d3aa <_fflush_r+0x22>
 800d3ea:	4b04      	ldr	r3, [pc, #16]	; (800d3fc <_fflush_r+0x74>)
 800d3ec:	429c      	cmp	r4, r3
 800d3ee:	bf08      	it	eq
 800d3f0:	68ec      	ldreq	r4, [r5, #12]
 800d3f2:	e7da      	b.n	800d3aa <_fflush_r+0x22>
 800d3f4:	0800e5f0 	.word	0x0800e5f0
 800d3f8:	0800e610 	.word	0x0800e610
 800d3fc:	0800e5d0 	.word	0x0800e5d0

0800d400 <std>:
 800d400:	2300      	movs	r3, #0
 800d402:	b510      	push	{r4, lr}
 800d404:	4604      	mov	r4, r0
 800d406:	e9c0 3300 	strd	r3, r3, [r0]
 800d40a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d40e:	6083      	str	r3, [r0, #8]
 800d410:	8181      	strh	r1, [r0, #12]
 800d412:	6643      	str	r3, [r0, #100]	; 0x64
 800d414:	81c2      	strh	r2, [r0, #14]
 800d416:	6183      	str	r3, [r0, #24]
 800d418:	4619      	mov	r1, r3
 800d41a:	2208      	movs	r2, #8
 800d41c:	305c      	adds	r0, #92	; 0x5c
 800d41e:	f7fe fa03 	bl	800b828 <memset>
 800d422:	4b05      	ldr	r3, [pc, #20]	; (800d438 <std+0x38>)
 800d424:	6263      	str	r3, [r4, #36]	; 0x24
 800d426:	4b05      	ldr	r3, [pc, #20]	; (800d43c <std+0x3c>)
 800d428:	62a3      	str	r3, [r4, #40]	; 0x28
 800d42a:	4b05      	ldr	r3, [pc, #20]	; (800d440 <std+0x40>)
 800d42c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d42e:	4b05      	ldr	r3, [pc, #20]	; (800d444 <std+0x44>)
 800d430:	6224      	str	r4, [r4, #32]
 800d432:	6323      	str	r3, [r4, #48]	; 0x30
 800d434:	bd10      	pop	{r4, pc}
 800d436:	bf00      	nop
 800d438:	0800e0e1 	.word	0x0800e0e1
 800d43c:	0800e103 	.word	0x0800e103
 800d440:	0800e13b 	.word	0x0800e13b
 800d444:	0800e15f 	.word	0x0800e15f

0800d448 <_cleanup_r>:
 800d448:	4901      	ldr	r1, [pc, #4]	; (800d450 <_cleanup_r+0x8>)
 800d44a:	f000 b8af 	b.w	800d5ac <_fwalk_reent>
 800d44e:	bf00      	nop
 800d450:	0800d389 	.word	0x0800d389

0800d454 <__sfmoreglue>:
 800d454:	b570      	push	{r4, r5, r6, lr}
 800d456:	2268      	movs	r2, #104	; 0x68
 800d458:	1e4d      	subs	r5, r1, #1
 800d45a:	4355      	muls	r5, r2
 800d45c:	460e      	mov	r6, r1
 800d45e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d462:	f7fe fa55 	bl	800b910 <_malloc_r>
 800d466:	4604      	mov	r4, r0
 800d468:	b140      	cbz	r0, 800d47c <__sfmoreglue+0x28>
 800d46a:	2100      	movs	r1, #0
 800d46c:	e9c0 1600 	strd	r1, r6, [r0]
 800d470:	300c      	adds	r0, #12
 800d472:	60a0      	str	r0, [r4, #8]
 800d474:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d478:	f7fe f9d6 	bl	800b828 <memset>
 800d47c:	4620      	mov	r0, r4
 800d47e:	bd70      	pop	{r4, r5, r6, pc}

0800d480 <__sfp_lock_acquire>:
 800d480:	4801      	ldr	r0, [pc, #4]	; (800d488 <__sfp_lock_acquire+0x8>)
 800d482:	f000 b8b8 	b.w	800d5f6 <__retarget_lock_acquire_recursive>
 800d486:	bf00      	nop
 800d488:	2000085d 	.word	0x2000085d

0800d48c <__sfp_lock_release>:
 800d48c:	4801      	ldr	r0, [pc, #4]	; (800d494 <__sfp_lock_release+0x8>)
 800d48e:	f000 b8b3 	b.w	800d5f8 <__retarget_lock_release_recursive>
 800d492:	bf00      	nop
 800d494:	2000085d 	.word	0x2000085d

0800d498 <__sinit_lock_acquire>:
 800d498:	4801      	ldr	r0, [pc, #4]	; (800d4a0 <__sinit_lock_acquire+0x8>)
 800d49a:	f000 b8ac 	b.w	800d5f6 <__retarget_lock_acquire_recursive>
 800d49e:	bf00      	nop
 800d4a0:	2000085e 	.word	0x2000085e

0800d4a4 <__sinit_lock_release>:
 800d4a4:	4801      	ldr	r0, [pc, #4]	; (800d4ac <__sinit_lock_release+0x8>)
 800d4a6:	f000 b8a7 	b.w	800d5f8 <__retarget_lock_release_recursive>
 800d4aa:	bf00      	nop
 800d4ac:	2000085e 	.word	0x2000085e

0800d4b0 <__sinit>:
 800d4b0:	b510      	push	{r4, lr}
 800d4b2:	4604      	mov	r4, r0
 800d4b4:	f7ff fff0 	bl	800d498 <__sinit_lock_acquire>
 800d4b8:	69a3      	ldr	r3, [r4, #24]
 800d4ba:	b11b      	cbz	r3, 800d4c4 <__sinit+0x14>
 800d4bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d4c0:	f7ff bff0 	b.w	800d4a4 <__sinit_lock_release>
 800d4c4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d4c8:	6523      	str	r3, [r4, #80]	; 0x50
 800d4ca:	4b13      	ldr	r3, [pc, #76]	; (800d518 <__sinit+0x68>)
 800d4cc:	4a13      	ldr	r2, [pc, #76]	; (800d51c <__sinit+0x6c>)
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	62a2      	str	r2, [r4, #40]	; 0x28
 800d4d2:	42a3      	cmp	r3, r4
 800d4d4:	bf04      	itt	eq
 800d4d6:	2301      	moveq	r3, #1
 800d4d8:	61a3      	streq	r3, [r4, #24]
 800d4da:	4620      	mov	r0, r4
 800d4dc:	f000 f820 	bl	800d520 <__sfp>
 800d4e0:	6060      	str	r0, [r4, #4]
 800d4e2:	4620      	mov	r0, r4
 800d4e4:	f000 f81c 	bl	800d520 <__sfp>
 800d4e8:	60a0      	str	r0, [r4, #8]
 800d4ea:	4620      	mov	r0, r4
 800d4ec:	f000 f818 	bl	800d520 <__sfp>
 800d4f0:	2200      	movs	r2, #0
 800d4f2:	60e0      	str	r0, [r4, #12]
 800d4f4:	2104      	movs	r1, #4
 800d4f6:	6860      	ldr	r0, [r4, #4]
 800d4f8:	f7ff ff82 	bl	800d400 <std>
 800d4fc:	68a0      	ldr	r0, [r4, #8]
 800d4fe:	2201      	movs	r2, #1
 800d500:	2109      	movs	r1, #9
 800d502:	f7ff ff7d 	bl	800d400 <std>
 800d506:	68e0      	ldr	r0, [r4, #12]
 800d508:	2202      	movs	r2, #2
 800d50a:	2112      	movs	r1, #18
 800d50c:	f7ff ff78 	bl	800d400 <std>
 800d510:	2301      	movs	r3, #1
 800d512:	61a3      	str	r3, [r4, #24]
 800d514:	e7d2      	b.n	800d4bc <__sinit+0xc>
 800d516:	bf00      	nop
 800d518:	0800e508 	.word	0x0800e508
 800d51c:	0800d449 	.word	0x0800d449

0800d520 <__sfp>:
 800d520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d522:	4607      	mov	r7, r0
 800d524:	f7ff ffac 	bl	800d480 <__sfp_lock_acquire>
 800d528:	4b1e      	ldr	r3, [pc, #120]	; (800d5a4 <__sfp+0x84>)
 800d52a:	681e      	ldr	r6, [r3, #0]
 800d52c:	69b3      	ldr	r3, [r6, #24]
 800d52e:	b913      	cbnz	r3, 800d536 <__sfp+0x16>
 800d530:	4630      	mov	r0, r6
 800d532:	f7ff ffbd 	bl	800d4b0 <__sinit>
 800d536:	3648      	adds	r6, #72	; 0x48
 800d538:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d53c:	3b01      	subs	r3, #1
 800d53e:	d503      	bpl.n	800d548 <__sfp+0x28>
 800d540:	6833      	ldr	r3, [r6, #0]
 800d542:	b30b      	cbz	r3, 800d588 <__sfp+0x68>
 800d544:	6836      	ldr	r6, [r6, #0]
 800d546:	e7f7      	b.n	800d538 <__sfp+0x18>
 800d548:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d54c:	b9d5      	cbnz	r5, 800d584 <__sfp+0x64>
 800d54e:	4b16      	ldr	r3, [pc, #88]	; (800d5a8 <__sfp+0x88>)
 800d550:	60e3      	str	r3, [r4, #12]
 800d552:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d556:	6665      	str	r5, [r4, #100]	; 0x64
 800d558:	f000 f84c 	bl	800d5f4 <__retarget_lock_init_recursive>
 800d55c:	f7ff ff96 	bl	800d48c <__sfp_lock_release>
 800d560:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d564:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d568:	6025      	str	r5, [r4, #0]
 800d56a:	61a5      	str	r5, [r4, #24]
 800d56c:	2208      	movs	r2, #8
 800d56e:	4629      	mov	r1, r5
 800d570:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d574:	f7fe f958 	bl	800b828 <memset>
 800d578:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d57c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d580:	4620      	mov	r0, r4
 800d582:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d584:	3468      	adds	r4, #104	; 0x68
 800d586:	e7d9      	b.n	800d53c <__sfp+0x1c>
 800d588:	2104      	movs	r1, #4
 800d58a:	4638      	mov	r0, r7
 800d58c:	f7ff ff62 	bl	800d454 <__sfmoreglue>
 800d590:	4604      	mov	r4, r0
 800d592:	6030      	str	r0, [r6, #0]
 800d594:	2800      	cmp	r0, #0
 800d596:	d1d5      	bne.n	800d544 <__sfp+0x24>
 800d598:	f7ff ff78 	bl	800d48c <__sfp_lock_release>
 800d59c:	230c      	movs	r3, #12
 800d59e:	603b      	str	r3, [r7, #0]
 800d5a0:	e7ee      	b.n	800d580 <__sfp+0x60>
 800d5a2:	bf00      	nop
 800d5a4:	0800e508 	.word	0x0800e508
 800d5a8:	ffff0001 	.word	0xffff0001

0800d5ac <_fwalk_reent>:
 800d5ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d5b0:	4606      	mov	r6, r0
 800d5b2:	4688      	mov	r8, r1
 800d5b4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d5b8:	2700      	movs	r7, #0
 800d5ba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d5be:	f1b9 0901 	subs.w	r9, r9, #1
 800d5c2:	d505      	bpl.n	800d5d0 <_fwalk_reent+0x24>
 800d5c4:	6824      	ldr	r4, [r4, #0]
 800d5c6:	2c00      	cmp	r4, #0
 800d5c8:	d1f7      	bne.n	800d5ba <_fwalk_reent+0xe>
 800d5ca:	4638      	mov	r0, r7
 800d5cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d5d0:	89ab      	ldrh	r3, [r5, #12]
 800d5d2:	2b01      	cmp	r3, #1
 800d5d4:	d907      	bls.n	800d5e6 <_fwalk_reent+0x3a>
 800d5d6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d5da:	3301      	adds	r3, #1
 800d5dc:	d003      	beq.n	800d5e6 <_fwalk_reent+0x3a>
 800d5de:	4629      	mov	r1, r5
 800d5e0:	4630      	mov	r0, r6
 800d5e2:	47c0      	blx	r8
 800d5e4:	4307      	orrs	r7, r0
 800d5e6:	3568      	adds	r5, #104	; 0x68
 800d5e8:	e7e9      	b.n	800d5be <_fwalk_reent+0x12>
	...

0800d5ec <_localeconv_r>:
 800d5ec:	4800      	ldr	r0, [pc, #0]	; (800d5f0 <_localeconv_r+0x4>)
 800d5ee:	4770      	bx	lr
 800d5f0:	20000168 	.word	0x20000168

0800d5f4 <__retarget_lock_init_recursive>:
 800d5f4:	4770      	bx	lr

0800d5f6 <__retarget_lock_acquire_recursive>:
 800d5f6:	4770      	bx	lr

0800d5f8 <__retarget_lock_release_recursive>:
 800d5f8:	4770      	bx	lr

0800d5fa <__swhatbuf_r>:
 800d5fa:	b570      	push	{r4, r5, r6, lr}
 800d5fc:	460e      	mov	r6, r1
 800d5fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d602:	2900      	cmp	r1, #0
 800d604:	b096      	sub	sp, #88	; 0x58
 800d606:	4614      	mov	r4, r2
 800d608:	461d      	mov	r5, r3
 800d60a:	da08      	bge.n	800d61e <__swhatbuf_r+0x24>
 800d60c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d610:	2200      	movs	r2, #0
 800d612:	602a      	str	r2, [r5, #0]
 800d614:	061a      	lsls	r2, r3, #24
 800d616:	d410      	bmi.n	800d63a <__swhatbuf_r+0x40>
 800d618:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d61c:	e00e      	b.n	800d63c <__swhatbuf_r+0x42>
 800d61e:	466a      	mov	r2, sp
 800d620:	f000 fdf4 	bl	800e20c <_fstat_r>
 800d624:	2800      	cmp	r0, #0
 800d626:	dbf1      	blt.n	800d60c <__swhatbuf_r+0x12>
 800d628:	9a01      	ldr	r2, [sp, #4]
 800d62a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d62e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d632:	425a      	negs	r2, r3
 800d634:	415a      	adcs	r2, r3
 800d636:	602a      	str	r2, [r5, #0]
 800d638:	e7ee      	b.n	800d618 <__swhatbuf_r+0x1e>
 800d63a:	2340      	movs	r3, #64	; 0x40
 800d63c:	2000      	movs	r0, #0
 800d63e:	6023      	str	r3, [r4, #0]
 800d640:	b016      	add	sp, #88	; 0x58
 800d642:	bd70      	pop	{r4, r5, r6, pc}

0800d644 <__smakebuf_r>:
 800d644:	898b      	ldrh	r3, [r1, #12]
 800d646:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d648:	079d      	lsls	r5, r3, #30
 800d64a:	4606      	mov	r6, r0
 800d64c:	460c      	mov	r4, r1
 800d64e:	d507      	bpl.n	800d660 <__smakebuf_r+0x1c>
 800d650:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d654:	6023      	str	r3, [r4, #0]
 800d656:	6123      	str	r3, [r4, #16]
 800d658:	2301      	movs	r3, #1
 800d65a:	6163      	str	r3, [r4, #20]
 800d65c:	b002      	add	sp, #8
 800d65e:	bd70      	pop	{r4, r5, r6, pc}
 800d660:	ab01      	add	r3, sp, #4
 800d662:	466a      	mov	r2, sp
 800d664:	f7ff ffc9 	bl	800d5fa <__swhatbuf_r>
 800d668:	9900      	ldr	r1, [sp, #0]
 800d66a:	4605      	mov	r5, r0
 800d66c:	4630      	mov	r0, r6
 800d66e:	f7fe f94f 	bl	800b910 <_malloc_r>
 800d672:	b948      	cbnz	r0, 800d688 <__smakebuf_r+0x44>
 800d674:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d678:	059a      	lsls	r2, r3, #22
 800d67a:	d4ef      	bmi.n	800d65c <__smakebuf_r+0x18>
 800d67c:	f023 0303 	bic.w	r3, r3, #3
 800d680:	f043 0302 	orr.w	r3, r3, #2
 800d684:	81a3      	strh	r3, [r4, #12]
 800d686:	e7e3      	b.n	800d650 <__smakebuf_r+0xc>
 800d688:	4b0d      	ldr	r3, [pc, #52]	; (800d6c0 <__smakebuf_r+0x7c>)
 800d68a:	62b3      	str	r3, [r6, #40]	; 0x28
 800d68c:	89a3      	ldrh	r3, [r4, #12]
 800d68e:	6020      	str	r0, [r4, #0]
 800d690:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d694:	81a3      	strh	r3, [r4, #12]
 800d696:	9b00      	ldr	r3, [sp, #0]
 800d698:	6163      	str	r3, [r4, #20]
 800d69a:	9b01      	ldr	r3, [sp, #4]
 800d69c:	6120      	str	r0, [r4, #16]
 800d69e:	b15b      	cbz	r3, 800d6b8 <__smakebuf_r+0x74>
 800d6a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d6a4:	4630      	mov	r0, r6
 800d6a6:	f000 fdc3 	bl	800e230 <_isatty_r>
 800d6aa:	b128      	cbz	r0, 800d6b8 <__smakebuf_r+0x74>
 800d6ac:	89a3      	ldrh	r3, [r4, #12]
 800d6ae:	f023 0303 	bic.w	r3, r3, #3
 800d6b2:	f043 0301 	orr.w	r3, r3, #1
 800d6b6:	81a3      	strh	r3, [r4, #12]
 800d6b8:	89a0      	ldrh	r0, [r4, #12]
 800d6ba:	4305      	orrs	r5, r0
 800d6bc:	81a5      	strh	r5, [r4, #12]
 800d6be:	e7cd      	b.n	800d65c <__smakebuf_r+0x18>
 800d6c0:	0800d449 	.word	0x0800d449

0800d6c4 <memcpy>:
 800d6c4:	440a      	add	r2, r1
 800d6c6:	4291      	cmp	r1, r2
 800d6c8:	f100 33ff 	add.w	r3, r0, #4294967295
 800d6cc:	d100      	bne.n	800d6d0 <memcpy+0xc>
 800d6ce:	4770      	bx	lr
 800d6d0:	b510      	push	{r4, lr}
 800d6d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d6d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d6da:	4291      	cmp	r1, r2
 800d6dc:	d1f9      	bne.n	800d6d2 <memcpy+0xe>
 800d6de:	bd10      	pop	{r4, pc}

0800d6e0 <__malloc_lock>:
 800d6e0:	4801      	ldr	r0, [pc, #4]	; (800d6e8 <__malloc_lock+0x8>)
 800d6e2:	f7ff bf88 	b.w	800d5f6 <__retarget_lock_acquire_recursive>
 800d6e6:	bf00      	nop
 800d6e8:	2000085c 	.word	0x2000085c

0800d6ec <__malloc_unlock>:
 800d6ec:	4801      	ldr	r0, [pc, #4]	; (800d6f4 <__malloc_unlock+0x8>)
 800d6ee:	f7ff bf83 	b.w	800d5f8 <__retarget_lock_release_recursive>
 800d6f2:	bf00      	nop
 800d6f4:	2000085c 	.word	0x2000085c

0800d6f8 <_Balloc>:
 800d6f8:	b570      	push	{r4, r5, r6, lr}
 800d6fa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d6fc:	4604      	mov	r4, r0
 800d6fe:	460d      	mov	r5, r1
 800d700:	b976      	cbnz	r6, 800d720 <_Balloc+0x28>
 800d702:	2010      	movs	r0, #16
 800d704:	f7fe f888 	bl	800b818 <malloc>
 800d708:	4602      	mov	r2, r0
 800d70a:	6260      	str	r0, [r4, #36]	; 0x24
 800d70c:	b920      	cbnz	r0, 800d718 <_Balloc+0x20>
 800d70e:	4b18      	ldr	r3, [pc, #96]	; (800d770 <_Balloc+0x78>)
 800d710:	4818      	ldr	r0, [pc, #96]	; (800d774 <_Balloc+0x7c>)
 800d712:	2166      	movs	r1, #102	; 0x66
 800d714:	f000 fd3a 	bl	800e18c <__assert_func>
 800d718:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d71c:	6006      	str	r6, [r0, #0]
 800d71e:	60c6      	str	r6, [r0, #12]
 800d720:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d722:	68f3      	ldr	r3, [r6, #12]
 800d724:	b183      	cbz	r3, 800d748 <_Balloc+0x50>
 800d726:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d728:	68db      	ldr	r3, [r3, #12]
 800d72a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d72e:	b9b8      	cbnz	r0, 800d760 <_Balloc+0x68>
 800d730:	2101      	movs	r1, #1
 800d732:	fa01 f605 	lsl.w	r6, r1, r5
 800d736:	1d72      	adds	r2, r6, #5
 800d738:	0092      	lsls	r2, r2, #2
 800d73a:	4620      	mov	r0, r4
 800d73c:	f000 fb60 	bl	800de00 <_calloc_r>
 800d740:	b160      	cbz	r0, 800d75c <_Balloc+0x64>
 800d742:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d746:	e00e      	b.n	800d766 <_Balloc+0x6e>
 800d748:	2221      	movs	r2, #33	; 0x21
 800d74a:	2104      	movs	r1, #4
 800d74c:	4620      	mov	r0, r4
 800d74e:	f000 fb57 	bl	800de00 <_calloc_r>
 800d752:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d754:	60f0      	str	r0, [r6, #12]
 800d756:	68db      	ldr	r3, [r3, #12]
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d1e4      	bne.n	800d726 <_Balloc+0x2e>
 800d75c:	2000      	movs	r0, #0
 800d75e:	bd70      	pop	{r4, r5, r6, pc}
 800d760:	6802      	ldr	r2, [r0, #0]
 800d762:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d766:	2300      	movs	r3, #0
 800d768:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d76c:	e7f7      	b.n	800d75e <_Balloc+0x66>
 800d76e:	bf00      	nop
 800d770:	0800e54d 	.word	0x0800e54d
 800d774:	0800e630 	.word	0x0800e630

0800d778 <_Bfree>:
 800d778:	b570      	push	{r4, r5, r6, lr}
 800d77a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d77c:	4605      	mov	r5, r0
 800d77e:	460c      	mov	r4, r1
 800d780:	b976      	cbnz	r6, 800d7a0 <_Bfree+0x28>
 800d782:	2010      	movs	r0, #16
 800d784:	f7fe f848 	bl	800b818 <malloc>
 800d788:	4602      	mov	r2, r0
 800d78a:	6268      	str	r0, [r5, #36]	; 0x24
 800d78c:	b920      	cbnz	r0, 800d798 <_Bfree+0x20>
 800d78e:	4b09      	ldr	r3, [pc, #36]	; (800d7b4 <_Bfree+0x3c>)
 800d790:	4809      	ldr	r0, [pc, #36]	; (800d7b8 <_Bfree+0x40>)
 800d792:	218a      	movs	r1, #138	; 0x8a
 800d794:	f000 fcfa 	bl	800e18c <__assert_func>
 800d798:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d79c:	6006      	str	r6, [r0, #0]
 800d79e:	60c6      	str	r6, [r0, #12]
 800d7a0:	b13c      	cbz	r4, 800d7b2 <_Bfree+0x3a>
 800d7a2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d7a4:	6862      	ldr	r2, [r4, #4]
 800d7a6:	68db      	ldr	r3, [r3, #12]
 800d7a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d7ac:	6021      	str	r1, [r4, #0]
 800d7ae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d7b2:	bd70      	pop	{r4, r5, r6, pc}
 800d7b4:	0800e54d 	.word	0x0800e54d
 800d7b8:	0800e630 	.word	0x0800e630

0800d7bc <__multadd>:
 800d7bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7c0:	690d      	ldr	r5, [r1, #16]
 800d7c2:	4607      	mov	r7, r0
 800d7c4:	460c      	mov	r4, r1
 800d7c6:	461e      	mov	r6, r3
 800d7c8:	f101 0c14 	add.w	ip, r1, #20
 800d7cc:	2000      	movs	r0, #0
 800d7ce:	f8dc 3000 	ldr.w	r3, [ip]
 800d7d2:	b299      	uxth	r1, r3
 800d7d4:	fb02 6101 	mla	r1, r2, r1, r6
 800d7d8:	0c1e      	lsrs	r6, r3, #16
 800d7da:	0c0b      	lsrs	r3, r1, #16
 800d7dc:	fb02 3306 	mla	r3, r2, r6, r3
 800d7e0:	b289      	uxth	r1, r1
 800d7e2:	3001      	adds	r0, #1
 800d7e4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d7e8:	4285      	cmp	r5, r0
 800d7ea:	f84c 1b04 	str.w	r1, [ip], #4
 800d7ee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d7f2:	dcec      	bgt.n	800d7ce <__multadd+0x12>
 800d7f4:	b30e      	cbz	r6, 800d83a <__multadd+0x7e>
 800d7f6:	68a3      	ldr	r3, [r4, #8]
 800d7f8:	42ab      	cmp	r3, r5
 800d7fa:	dc19      	bgt.n	800d830 <__multadd+0x74>
 800d7fc:	6861      	ldr	r1, [r4, #4]
 800d7fe:	4638      	mov	r0, r7
 800d800:	3101      	adds	r1, #1
 800d802:	f7ff ff79 	bl	800d6f8 <_Balloc>
 800d806:	4680      	mov	r8, r0
 800d808:	b928      	cbnz	r0, 800d816 <__multadd+0x5a>
 800d80a:	4602      	mov	r2, r0
 800d80c:	4b0c      	ldr	r3, [pc, #48]	; (800d840 <__multadd+0x84>)
 800d80e:	480d      	ldr	r0, [pc, #52]	; (800d844 <__multadd+0x88>)
 800d810:	21b5      	movs	r1, #181	; 0xb5
 800d812:	f000 fcbb 	bl	800e18c <__assert_func>
 800d816:	6922      	ldr	r2, [r4, #16]
 800d818:	3202      	adds	r2, #2
 800d81a:	f104 010c 	add.w	r1, r4, #12
 800d81e:	0092      	lsls	r2, r2, #2
 800d820:	300c      	adds	r0, #12
 800d822:	f7ff ff4f 	bl	800d6c4 <memcpy>
 800d826:	4621      	mov	r1, r4
 800d828:	4638      	mov	r0, r7
 800d82a:	f7ff ffa5 	bl	800d778 <_Bfree>
 800d82e:	4644      	mov	r4, r8
 800d830:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d834:	3501      	adds	r5, #1
 800d836:	615e      	str	r6, [r3, #20]
 800d838:	6125      	str	r5, [r4, #16]
 800d83a:	4620      	mov	r0, r4
 800d83c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d840:	0800e5bf 	.word	0x0800e5bf
 800d844:	0800e630 	.word	0x0800e630

0800d848 <__hi0bits>:
 800d848:	0c03      	lsrs	r3, r0, #16
 800d84a:	041b      	lsls	r3, r3, #16
 800d84c:	b9d3      	cbnz	r3, 800d884 <__hi0bits+0x3c>
 800d84e:	0400      	lsls	r0, r0, #16
 800d850:	2310      	movs	r3, #16
 800d852:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d856:	bf04      	itt	eq
 800d858:	0200      	lsleq	r0, r0, #8
 800d85a:	3308      	addeq	r3, #8
 800d85c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d860:	bf04      	itt	eq
 800d862:	0100      	lsleq	r0, r0, #4
 800d864:	3304      	addeq	r3, #4
 800d866:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d86a:	bf04      	itt	eq
 800d86c:	0080      	lsleq	r0, r0, #2
 800d86e:	3302      	addeq	r3, #2
 800d870:	2800      	cmp	r0, #0
 800d872:	db05      	blt.n	800d880 <__hi0bits+0x38>
 800d874:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d878:	f103 0301 	add.w	r3, r3, #1
 800d87c:	bf08      	it	eq
 800d87e:	2320      	moveq	r3, #32
 800d880:	4618      	mov	r0, r3
 800d882:	4770      	bx	lr
 800d884:	2300      	movs	r3, #0
 800d886:	e7e4      	b.n	800d852 <__hi0bits+0xa>

0800d888 <__lo0bits>:
 800d888:	6803      	ldr	r3, [r0, #0]
 800d88a:	f013 0207 	ands.w	r2, r3, #7
 800d88e:	4601      	mov	r1, r0
 800d890:	d00b      	beq.n	800d8aa <__lo0bits+0x22>
 800d892:	07da      	lsls	r2, r3, #31
 800d894:	d423      	bmi.n	800d8de <__lo0bits+0x56>
 800d896:	0798      	lsls	r0, r3, #30
 800d898:	bf49      	itett	mi
 800d89a:	085b      	lsrmi	r3, r3, #1
 800d89c:	089b      	lsrpl	r3, r3, #2
 800d89e:	2001      	movmi	r0, #1
 800d8a0:	600b      	strmi	r3, [r1, #0]
 800d8a2:	bf5c      	itt	pl
 800d8a4:	600b      	strpl	r3, [r1, #0]
 800d8a6:	2002      	movpl	r0, #2
 800d8a8:	4770      	bx	lr
 800d8aa:	b298      	uxth	r0, r3
 800d8ac:	b9a8      	cbnz	r0, 800d8da <__lo0bits+0x52>
 800d8ae:	0c1b      	lsrs	r3, r3, #16
 800d8b0:	2010      	movs	r0, #16
 800d8b2:	b2da      	uxtb	r2, r3
 800d8b4:	b90a      	cbnz	r2, 800d8ba <__lo0bits+0x32>
 800d8b6:	3008      	adds	r0, #8
 800d8b8:	0a1b      	lsrs	r3, r3, #8
 800d8ba:	071a      	lsls	r2, r3, #28
 800d8bc:	bf04      	itt	eq
 800d8be:	091b      	lsreq	r3, r3, #4
 800d8c0:	3004      	addeq	r0, #4
 800d8c2:	079a      	lsls	r2, r3, #30
 800d8c4:	bf04      	itt	eq
 800d8c6:	089b      	lsreq	r3, r3, #2
 800d8c8:	3002      	addeq	r0, #2
 800d8ca:	07da      	lsls	r2, r3, #31
 800d8cc:	d403      	bmi.n	800d8d6 <__lo0bits+0x4e>
 800d8ce:	085b      	lsrs	r3, r3, #1
 800d8d0:	f100 0001 	add.w	r0, r0, #1
 800d8d4:	d005      	beq.n	800d8e2 <__lo0bits+0x5a>
 800d8d6:	600b      	str	r3, [r1, #0]
 800d8d8:	4770      	bx	lr
 800d8da:	4610      	mov	r0, r2
 800d8dc:	e7e9      	b.n	800d8b2 <__lo0bits+0x2a>
 800d8de:	2000      	movs	r0, #0
 800d8e0:	4770      	bx	lr
 800d8e2:	2020      	movs	r0, #32
 800d8e4:	4770      	bx	lr
	...

0800d8e8 <__i2b>:
 800d8e8:	b510      	push	{r4, lr}
 800d8ea:	460c      	mov	r4, r1
 800d8ec:	2101      	movs	r1, #1
 800d8ee:	f7ff ff03 	bl	800d6f8 <_Balloc>
 800d8f2:	4602      	mov	r2, r0
 800d8f4:	b928      	cbnz	r0, 800d902 <__i2b+0x1a>
 800d8f6:	4b05      	ldr	r3, [pc, #20]	; (800d90c <__i2b+0x24>)
 800d8f8:	4805      	ldr	r0, [pc, #20]	; (800d910 <__i2b+0x28>)
 800d8fa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d8fe:	f000 fc45 	bl	800e18c <__assert_func>
 800d902:	2301      	movs	r3, #1
 800d904:	6144      	str	r4, [r0, #20]
 800d906:	6103      	str	r3, [r0, #16]
 800d908:	bd10      	pop	{r4, pc}
 800d90a:	bf00      	nop
 800d90c:	0800e5bf 	.word	0x0800e5bf
 800d910:	0800e630 	.word	0x0800e630

0800d914 <__multiply>:
 800d914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d918:	4691      	mov	r9, r2
 800d91a:	690a      	ldr	r2, [r1, #16]
 800d91c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d920:	429a      	cmp	r2, r3
 800d922:	bfb8      	it	lt
 800d924:	460b      	movlt	r3, r1
 800d926:	460c      	mov	r4, r1
 800d928:	bfbc      	itt	lt
 800d92a:	464c      	movlt	r4, r9
 800d92c:	4699      	movlt	r9, r3
 800d92e:	6927      	ldr	r7, [r4, #16]
 800d930:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d934:	68a3      	ldr	r3, [r4, #8]
 800d936:	6861      	ldr	r1, [r4, #4]
 800d938:	eb07 060a 	add.w	r6, r7, sl
 800d93c:	42b3      	cmp	r3, r6
 800d93e:	b085      	sub	sp, #20
 800d940:	bfb8      	it	lt
 800d942:	3101      	addlt	r1, #1
 800d944:	f7ff fed8 	bl	800d6f8 <_Balloc>
 800d948:	b930      	cbnz	r0, 800d958 <__multiply+0x44>
 800d94a:	4602      	mov	r2, r0
 800d94c:	4b44      	ldr	r3, [pc, #272]	; (800da60 <__multiply+0x14c>)
 800d94e:	4845      	ldr	r0, [pc, #276]	; (800da64 <__multiply+0x150>)
 800d950:	f240 115d 	movw	r1, #349	; 0x15d
 800d954:	f000 fc1a 	bl	800e18c <__assert_func>
 800d958:	f100 0514 	add.w	r5, r0, #20
 800d95c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d960:	462b      	mov	r3, r5
 800d962:	2200      	movs	r2, #0
 800d964:	4543      	cmp	r3, r8
 800d966:	d321      	bcc.n	800d9ac <__multiply+0x98>
 800d968:	f104 0314 	add.w	r3, r4, #20
 800d96c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d970:	f109 0314 	add.w	r3, r9, #20
 800d974:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d978:	9202      	str	r2, [sp, #8]
 800d97a:	1b3a      	subs	r2, r7, r4
 800d97c:	3a15      	subs	r2, #21
 800d97e:	f022 0203 	bic.w	r2, r2, #3
 800d982:	3204      	adds	r2, #4
 800d984:	f104 0115 	add.w	r1, r4, #21
 800d988:	428f      	cmp	r7, r1
 800d98a:	bf38      	it	cc
 800d98c:	2204      	movcc	r2, #4
 800d98e:	9201      	str	r2, [sp, #4]
 800d990:	9a02      	ldr	r2, [sp, #8]
 800d992:	9303      	str	r3, [sp, #12]
 800d994:	429a      	cmp	r2, r3
 800d996:	d80c      	bhi.n	800d9b2 <__multiply+0x9e>
 800d998:	2e00      	cmp	r6, #0
 800d99a:	dd03      	ble.n	800d9a4 <__multiply+0x90>
 800d99c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d05a      	beq.n	800da5a <__multiply+0x146>
 800d9a4:	6106      	str	r6, [r0, #16]
 800d9a6:	b005      	add	sp, #20
 800d9a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9ac:	f843 2b04 	str.w	r2, [r3], #4
 800d9b0:	e7d8      	b.n	800d964 <__multiply+0x50>
 800d9b2:	f8b3 a000 	ldrh.w	sl, [r3]
 800d9b6:	f1ba 0f00 	cmp.w	sl, #0
 800d9ba:	d024      	beq.n	800da06 <__multiply+0xf2>
 800d9bc:	f104 0e14 	add.w	lr, r4, #20
 800d9c0:	46a9      	mov	r9, r5
 800d9c2:	f04f 0c00 	mov.w	ip, #0
 800d9c6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d9ca:	f8d9 1000 	ldr.w	r1, [r9]
 800d9ce:	fa1f fb82 	uxth.w	fp, r2
 800d9d2:	b289      	uxth	r1, r1
 800d9d4:	fb0a 110b 	mla	r1, sl, fp, r1
 800d9d8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d9dc:	f8d9 2000 	ldr.w	r2, [r9]
 800d9e0:	4461      	add	r1, ip
 800d9e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d9e6:	fb0a c20b 	mla	r2, sl, fp, ip
 800d9ea:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d9ee:	b289      	uxth	r1, r1
 800d9f0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d9f4:	4577      	cmp	r7, lr
 800d9f6:	f849 1b04 	str.w	r1, [r9], #4
 800d9fa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d9fe:	d8e2      	bhi.n	800d9c6 <__multiply+0xb2>
 800da00:	9a01      	ldr	r2, [sp, #4]
 800da02:	f845 c002 	str.w	ip, [r5, r2]
 800da06:	9a03      	ldr	r2, [sp, #12]
 800da08:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800da0c:	3304      	adds	r3, #4
 800da0e:	f1b9 0f00 	cmp.w	r9, #0
 800da12:	d020      	beq.n	800da56 <__multiply+0x142>
 800da14:	6829      	ldr	r1, [r5, #0]
 800da16:	f104 0c14 	add.w	ip, r4, #20
 800da1a:	46ae      	mov	lr, r5
 800da1c:	f04f 0a00 	mov.w	sl, #0
 800da20:	f8bc b000 	ldrh.w	fp, [ip]
 800da24:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800da28:	fb09 220b 	mla	r2, r9, fp, r2
 800da2c:	4492      	add	sl, r2
 800da2e:	b289      	uxth	r1, r1
 800da30:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800da34:	f84e 1b04 	str.w	r1, [lr], #4
 800da38:	f85c 2b04 	ldr.w	r2, [ip], #4
 800da3c:	f8be 1000 	ldrh.w	r1, [lr]
 800da40:	0c12      	lsrs	r2, r2, #16
 800da42:	fb09 1102 	mla	r1, r9, r2, r1
 800da46:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800da4a:	4567      	cmp	r7, ip
 800da4c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800da50:	d8e6      	bhi.n	800da20 <__multiply+0x10c>
 800da52:	9a01      	ldr	r2, [sp, #4]
 800da54:	50a9      	str	r1, [r5, r2]
 800da56:	3504      	adds	r5, #4
 800da58:	e79a      	b.n	800d990 <__multiply+0x7c>
 800da5a:	3e01      	subs	r6, #1
 800da5c:	e79c      	b.n	800d998 <__multiply+0x84>
 800da5e:	bf00      	nop
 800da60:	0800e5bf 	.word	0x0800e5bf
 800da64:	0800e630 	.word	0x0800e630

0800da68 <__pow5mult>:
 800da68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da6c:	4615      	mov	r5, r2
 800da6e:	f012 0203 	ands.w	r2, r2, #3
 800da72:	4606      	mov	r6, r0
 800da74:	460f      	mov	r7, r1
 800da76:	d007      	beq.n	800da88 <__pow5mult+0x20>
 800da78:	4c25      	ldr	r4, [pc, #148]	; (800db10 <__pow5mult+0xa8>)
 800da7a:	3a01      	subs	r2, #1
 800da7c:	2300      	movs	r3, #0
 800da7e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800da82:	f7ff fe9b 	bl	800d7bc <__multadd>
 800da86:	4607      	mov	r7, r0
 800da88:	10ad      	asrs	r5, r5, #2
 800da8a:	d03d      	beq.n	800db08 <__pow5mult+0xa0>
 800da8c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800da8e:	b97c      	cbnz	r4, 800dab0 <__pow5mult+0x48>
 800da90:	2010      	movs	r0, #16
 800da92:	f7fd fec1 	bl	800b818 <malloc>
 800da96:	4602      	mov	r2, r0
 800da98:	6270      	str	r0, [r6, #36]	; 0x24
 800da9a:	b928      	cbnz	r0, 800daa8 <__pow5mult+0x40>
 800da9c:	4b1d      	ldr	r3, [pc, #116]	; (800db14 <__pow5mult+0xac>)
 800da9e:	481e      	ldr	r0, [pc, #120]	; (800db18 <__pow5mult+0xb0>)
 800daa0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800daa4:	f000 fb72 	bl	800e18c <__assert_func>
 800daa8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800daac:	6004      	str	r4, [r0, #0]
 800daae:	60c4      	str	r4, [r0, #12]
 800dab0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800dab4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800dab8:	b94c      	cbnz	r4, 800dace <__pow5mult+0x66>
 800daba:	f240 2171 	movw	r1, #625	; 0x271
 800dabe:	4630      	mov	r0, r6
 800dac0:	f7ff ff12 	bl	800d8e8 <__i2b>
 800dac4:	2300      	movs	r3, #0
 800dac6:	f8c8 0008 	str.w	r0, [r8, #8]
 800daca:	4604      	mov	r4, r0
 800dacc:	6003      	str	r3, [r0, #0]
 800dace:	f04f 0900 	mov.w	r9, #0
 800dad2:	07eb      	lsls	r3, r5, #31
 800dad4:	d50a      	bpl.n	800daec <__pow5mult+0x84>
 800dad6:	4639      	mov	r1, r7
 800dad8:	4622      	mov	r2, r4
 800dada:	4630      	mov	r0, r6
 800dadc:	f7ff ff1a 	bl	800d914 <__multiply>
 800dae0:	4639      	mov	r1, r7
 800dae2:	4680      	mov	r8, r0
 800dae4:	4630      	mov	r0, r6
 800dae6:	f7ff fe47 	bl	800d778 <_Bfree>
 800daea:	4647      	mov	r7, r8
 800daec:	106d      	asrs	r5, r5, #1
 800daee:	d00b      	beq.n	800db08 <__pow5mult+0xa0>
 800daf0:	6820      	ldr	r0, [r4, #0]
 800daf2:	b938      	cbnz	r0, 800db04 <__pow5mult+0x9c>
 800daf4:	4622      	mov	r2, r4
 800daf6:	4621      	mov	r1, r4
 800daf8:	4630      	mov	r0, r6
 800dafa:	f7ff ff0b 	bl	800d914 <__multiply>
 800dafe:	6020      	str	r0, [r4, #0]
 800db00:	f8c0 9000 	str.w	r9, [r0]
 800db04:	4604      	mov	r4, r0
 800db06:	e7e4      	b.n	800dad2 <__pow5mult+0x6a>
 800db08:	4638      	mov	r0, r7
 800db0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db0e:	bf00      	nop
 800db10:	0800e780 	.word	0x0800e780
 800db14:	0800e54d 	.word	0x0800e54d
 800db18:	0800e630 	.word	0x0800e630

0800db1c <__lshift>:
 800db1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db20:	460c      	mov	r4, r1
 800db22:	6849      	ldr	r1, [r1, #4]
 800db24:	6923      	ldr	r3, [r4, #16]
 800db26:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800db2a:	68a3      	ldr	r3, [r4, #8]
 800db2c:	4607      	mov	r7, r0
 800db2e:	4691      	mov	r9, r2
 800db30:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800db34:	f108 0601 	add.w	r6, r8, #1
 800db38:	42b3      	cmp	r3, r6
 800db3a:	db0b      	blt.n	800db54 <__lshift+0x38>
 800db3c:	4638      	mov	r0, r7
 800db3e:	f7ff fddb 	bl	800d6f8 <_Balloc>
 800db42:	4605      	mov	r5, r0
 800db44:	b948      	cbnz	r0, 800db5a <__lshift+0x3e>
 800db46:	4602      	mov	r2, r0
 800db48:	4b2a      	ldr	r3, [pc, #168]	; (800dbf4 <__lshift+0xd8>)
 800db4a:	482b      	ldr	r0, [pc, #172]	; (800dbf8 <__lshift+0xdc>)
 800db4c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800db50:	f000 fb1c 	bl	800e18c <__assert_func>
 800db54:	3101      	adds	r1, #1
 800db56:	005b      	lsls	r3, r3, #1
 800db58:	e7ee      	b.n	800db38 <__lshift+0x1c>
 800db5a:	2300      	movs	r3, #0
 800db5c:	f100 0114 	add.w	r1, r0, #20
 800db60:	f100 0210 	add.w	r2, r0, #16
 800db64:	4618      	mov	r0, r3
 800db66:	4553      	cmp	r3, sl
 800db68:	db37      	blt.n	800dbda <__lshift+0xbe>
 800db6a:	6920      	ldr	r0, [r4, #16]
 800db6c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800db70:	f104 0314 	add.w	r3, r4, #20
 800db74:	f019 091f 	ands.w	r9, r9, #31
 800db78:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800db7c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800db80:	d02f      	beq.n	800dbe2 <__lshift+0xc6>
 800db82:	f1c9 0e20 	rsb	lr, r9, #32
 800db86:	468a      	mov	sl, r1
 800db88:	f04f 0c00 	mov.w	ip, #0
 800db8c:	681a      	ldr	r2, [r3, #0]
 800db8e:	fa02 f209 	lsl.w	r2, r2, r9
 800db92:	ea42 020c 	orr.w	r2, r2, ip
 800db96:	f84a 2b04 	str.w	r2, [sl], #4
 800db9a:	f853 2b04 	ldr.w	r2, [r3], #4
 800db9e:	4298      	cmp	r0, r3
 800dba0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800dba4:	d8f2      	bhi.n	800db8c <__lshift+0x70>
 800dba6:	1b03      	subs	r3, r0, r4
 800dba8:	3b15      	subs	r3, #21
 800dbaa:	f023 0303 	bic.w	r3, r3, #3
 800dbae:	3304      	adds	r3, #4
 800dbb0:	f104 0215 	add.w	r2, r4, #21
 800dbb4:	4290      	cmp	r0, r2
 800dbb6:	bf38      	it	cc
 800dbb8:	2304      	movcc	r3, #4
 800dbba:	f841 c003 	str.w	ip, [r1, r3]
 800dbbe:	f1bc 0f00 	cmp.w	ip, #0
 800dbc2:	d001      	beq.n	800dbc8 <__lshift+0xac>
 800dbc4:	f108 0602 	add.w	r6, r8, #2
 800dbc8:	3e01      	subs	r6, #1
 800dbca:	4638      	mov	r0, r7
 800dbcc:	612e      	str	r6, [r5, #16]
 800dbce:	4621      	mov	r1, r4
 800dbd0:	f7ff fdd2 	bl	800d778 <_Bfree>
 800dbd4:	4628      	mov	r0, r5
 800dbd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbda:	f842 0f04 	str.w	r0, [r2, #4]!
 800dbde:	3301      	adds	r3, #1
 800dbe0:	e7c1      	b.n	800db66 <__lshift+0x4a>
 800dbe2:	3904      	subs	r1, #4
 800dbe4:	f853 2b04 	ldr.w	r2, [r3], #4
 800dbe8:	f841 2f04 	str.w	r2, [r1, #4]!
 800dbec:	4298      	cmp	r0, r3
 800dbee:	d8f9      	bhi.n	800dbe4 <__lshift+0xc8>
 800dbf0:	e7ea      	b.n	800dbc8 <__lshift+0xac>
 800dbf2:	bf00      	nop
 800dbf4:	0800e5bf 	.word	0x0800e5bf
 800dbf8:	0800e630 	.word	0x0800e630

0800dbfc <__mcmp>:
 800dbfc:	b530      	push	{r4, r5, lr}
 800dbfe:	6902      	ldr	r2, [r0, #16]
 800dc00:	690c      	ldr	r4, [r1, #16]
 800dc02:	1b12      	subs	r2, r2, r4
 800dc04:	d10e      	bne.n	800dc24 <__mcmp+0x28>
 800dc06:	f100 0314 	add.w	r3, r0, #20
 800dc0a:	3114      	adds	r1, #20
 800dc0c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800dc10:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800dc14:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800dc18:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800dc1c:	42a5      	cmp	r5, r4
 800dc1e:	d003      	beq.n	800dc28 <__mcmp+0x2c>
 800dc20:	d305      	bcc.n	800dc2e <__mcmp+0x32>
 800dc22:	2201      	movs	r2, #1
 800dc24:	4610      	mov	r0, r2
 800dc26:	bd30      	pop	{r4, r5, pc}
 800dc28:	4283      	cmp	r3, r0
 800dc2a:	d3f3      	bcc.n	800dc14 <__mcmp+0x18>
 800dc2c:	e7fa      	b.n	800dc24 <__mcmp+0x28>
 800dc2e:	f04f 32ff 	mov.w	r2, #4294967295
 800dc32:	e7f7      	b.n	800dc24 <__mcmp+0x28>

0800dc34 <__mdiff>:
 800dc34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc38:	460c      	mov	r4, r1
 800dc3a:	4606      	mov	r6, r0
 800dc3c:	4611      	mov	r1, r2
 800dc3e:	4620      	mov	r0, r4
 800dc40:	4690      	mov	r8, r2
 800dc42:	f7ff ffdb 	bl	800dbfc <__mcmp>
 800dc46:	1e05      	subs	r5, r0, #0
 800dc48:	d110      	bne.n	800dc6c <__mdiff+0x38>
 800dc4a:	4629      	mov	r1, r5
 800dc4c:	4630      	mov	r0, r6
 800dc4e:	f7ff fd53 	bl	800d6f8 <_Balloc>
 800dc52:	b930      	cbnz	r0, 800dc62 <__mdiff+0x2e>
 800dc54:	4b3a      	ldr	r3, [pc, #232]	; (800dd40 <__mdiff+0x10c>)
 800dc56:	4602      	mov	r2, r0
 800dc58:	f240 2132 	movw	r1, #562	; 0x232
 800dc5c:	4839      	ldr	r0, [pc, #228]	; (800dd44 <__mdiff+0x110>)
 800dc5e:	f000 fa95 	bl	800e18c <__assert_func>
 800dc62:	2301      	movs	r3, #1
 800dc64:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800dc68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc6c:	bfa4      	itt	ge
 800dc6e:	4643      	movge	r3, r8
 800dc70:	46a0      	movge	r8, r4
 800dc72:	4630      	mov	r0, r6
 800dc74:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800dc78:	bfa6      	itte	ge
 800dc7a:	461c      	movge	r4, r3
 800dc7c:	2500      	movge	r5, #0
 800dc7e:	2501      	movlt	r5, #1
 800dc80:	f7ff fd3a 	bl	800d6f8 <_Balloc>
 800dc84:	b920      	cbnz	r0, 800dc90 <__mdiff+0x5c>
 800dc86:	4b2e      	ldr	r3, [pc, #184]	; (800dd40 <__mdiff+0x10c>)
 800dc88:	4602      	mov	r2, r0
 800dc8a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800dc8e:	e7e5      	b.n	800dc5c <__mdiff+0x28>
 800dc90:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800dc94:	6926      	ldr	r6, [r4, #16]
 800dc96:	60c5      	str	r5, [r0, #12]
 800dc98:	f104 0914 	add.w	r9, r4, #20
 800dc9c:	f108 0514 	add.w	r5, r8, #20
 800dca0:	f100 0e14 	add.w	lr, r0, #20
 800dca4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800dca8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800dcac:	f108 0210 	add.w	r2, r8, #16
 800dcb0:	46f2      	mov	sl, lr
 800dcb2:	2100      	movs	r1, #0
 800dcb4:	f859 3b04 	ldr.w	r3, [r9], #4
 800dcb8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800dcbc:	fa1f f883 	uxth.w	r8, r3
 800dcc0:	fa11 f18b 	uxtah	r1, r1, fp
 800dcc4:	0c1b      	lsrs	r3, r3, #16
 800dcc6:	eba1 0808 	sub.w	r8, r1, r8
 800dcca:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800dcce:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800dcd2:	fa1f f888 	uxth.w	r8, r8
 800dcd6:	1419      	asrs	r1, r3, #16
 800dcd8:	454e      	cmp	r6, r9
 800dcda:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800dcde:	f84a 3b04 	str.w	r3, [sl], #4
 800dce2:	d8e7      	bhi.n	800dcb4 <__mdiff+0x80>
 800dce4:	1b33      	subs	r3, r6, r4
 800dce6:	3b15      	subs	r3, #21
 800dce8:	f023 0303 	bic.w	r3, r3, #3
 800dcec:	3304      	adds	r3, #4
 800dcee:	3415      	adds	r4, #21
 800dcf0:	42a6      	cmp	r6, r4
 800dcf2:	bf38      	it	cc
 800dcf4:	2304      	movcc	r3, #4
 800dcf6:	441d      	add	r5, r3
 800dcf8:	4473      	add	r3, lr
 800dcfa:	469e      	mov	lr, r3
 800dcfc:	462e      	mov	r6, r5
 800dcfe:	4566      	cmp	r6, ip
 800dd00:	d30e      	bcc.n	800dd20 <__mdiff+0xec>
 800dd02:	f10c 0203 	add.w	r2, ip, #3
 800dd06:	1b52      	subs	r2, r2, r5
 800dd08:	f022 0203 	bic.w	r2, r2, #3
 800dd0c:	3d03      	subs	r5, #3
 800dd0e:	45ac      	cmp	ip, r5
 800dd10:	bf38      	it	cc
 800dd12:	2200      	movcc	r2, #0
 800dd14:	441a      	add	r2, r3
 800dd16:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800dd1a:	b17b      	cbz	r3, 800dd3c <__mdiff+0x108>
 800dd1c:	6107      	str	r7, [r0, #16]
 800dd1e:	e7a3      	b.n	800dc68 <__mdiff+0x34>
 800dd20:	f856 8b04 	ldr.w	r8, [r6], #4
 800dd24:	fa11 f288 	uxtah	r2, r1, r8
 800dd28:	1414      	asrs	r4, r2, #16
 800dd2a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800dd2e:	b292      	uxth	r2, r2
 800dd30:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800dd34:	f84e 2b04 	str.w	r2, [lr], #4
 800dd38:	1421      	asrs	r1, r4, #16
 800dd3a:	e7e0      	b.n	800dcfe <__mdiff+0xca>
 800dd3c:	3f01      	subs	r7, #1
 800dd3e:	e7ea      	b.n	800dd16 <__mdiff+0xe2>
 800dd40:	0800e5bf 	.word	0x0800e5bf
 800dd44:	0800e630 	.word	0x0800e630

0800dd48 <__d2b>:
 800dd48:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dd4c:	4689      	mov	r9, r1
 800dd4e:	2101      	movs	r1, #1
 800dd50:	ec57 6b10 	vmov	r6, r7, d0
 800dd54:	4690      	mov	r8, r2
 800dd56:	f7ff fccf 	bl	800d6f8 <_Balloc>
 800dd5a:	4604      	mov	r4, r0
 800dd5c:	b930      	cbnz	r0, 800dd6c <__d2b+0x24>
 800dd5e:	4602      	mov	r2, r0
 800dd60:	4b25      	ldr	r3, [pc, #148]	; (800ddf8 <__d2b+0xb0>)
 800dd62:	4826      	ldr	r0, [pc, #152]	; (800ddfc <__d2b+0xb4>)
 800dd64:	f240 310a 	movw	r1, #778	; 0x30a
 800dd68:	f000 fa10 	bl	800e18c <__assert_func>
 800dd6c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800dd70:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800dd74:	bb35      	cbnz	r5, 800ddc4 <__d2b+0x7c>
 800dd76:	2e00      	cmp	r6, #0
 800dd78:	9301      	str	r3, [sp, #4]
 800dd7a:	d028      	beq.n	800ddce <__d2b+0x86>
 800dd7c:	4668      	mov	r0, sp
 800dd7e:	9600      	str	r6, [sp, #0]
 800dd80:	f7ff fd82 	bl	800d888 <__lo0bits>
 800dd84:	9900      	ldr	r1, [sp, #0]
 800dd86:	b300      	cbz	r0, 800ddca <__d2b+0x82>
 800dd88:	9a01      	ldr	r2, [sp, #4]
 800dd8a:	f1c0 0320 	rsb	r3, r0, #32
 800dd8e:	fa02 f303 	lsl.w	r3, r2, r3
 800dd92:	430b      	orrs	r3, r1
 800dd94:	40c2      	lsrs	r2, r0
 800dd96:	6163      	str	r3, [r4, #20]
 800dd98:	9201      	str	r2, [sp, #4]
 800dd9a:	9b01      	ldr	r3, [sp, #4]
 800dd9c:	61a3      	str	r3, [r4, #24]
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	bf14      	ite	ne
 800dda2:	2202      	movne	r2, #2
 800dda4:	2201      	moveq	r2, #1
 800dda6:	6122      	str	r2, [r4, #16]
 800dda8:	b1d5      	cbz	r5, 800dde0 <__d2b+0x98>
 800ddaa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ddae:	4405      	add	r5, r0
 800ddb0:	f8c9 5000 	str.w	r5, [r9]
 800ddb4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ddb8:	f8c8 0000 	str.w	r0, [r8]
 800ddbc:	4620      	mov	r0, r4
 800ddbe:	b003      	add	sp, #12
 800ddc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ddc4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ddc8:	e7d5      	b.n	800dd76 <__d2b+0x2e>
 800ddca:	6161      	str	r1, [r4, #20]
 800ddcc:	e7e5      	b.n	800dd9a <__d2b+0x52>
 800ddce:	a801      	add	r0, sp, #4
 800ddd0:	f7ff fd5a 	bl	800d888 <__lo0bits>
 800ddd4:	9b01      	ldr	r3, [sp, #4]
 800ddd6:	6163      	str	r3, [r4, #20]
 800ddd8:	2201      	movs	r2, #1
 800ddda:	6122      	str	r2, [r4, #16]
 800dddc:	3020      	adds	r0, #32
 800ddde:	e7e3      	b.n	800dda8 <__d2b+0x60>
 800dde0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800dde4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800dde8:	f8c9 0000 	str.w	r0, [r9]
 800ddec:	6918      	ldr	r0, [r3, #16]
 800ddee:	f7ff fd2b 	bl	800d848 <__hi0bits>
 800ddf2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ddf6:	e7df      	b.n	800ddb8 <__d2b+0x70>
 800ddf8:	0800e5bf 	.word	0x0800e5bf
 800ddfc:	0800e630 	.word	0x0800e630

0800de00 <_calloc_r>:
 800de00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800de02:	fba1 2402 	umull	r2, r4, r1, r2
 800de06:	b94c      	cbnz	r4, 800de1c <_calloc_r+0x1c>
 800de08:	4611      	mov	r1, r2
 800de0a:	9201      	str	r2, [sp, #4]
 800de0c:	f7fd fd80 	bl	800b910 <_malloc_r>
 800de10:	9a01      	ldr	r2, [sp, #4]
 800de12:	4605      	mov	r5, r0
 800de14:	b930      	cbnz	r0, 800de24 <_calloc_r+0x24>
 800de16:	4628      	mov	r0, r5
 800de18:	b003      	add	sp, #12
 800de1a:	bd30      	pop	{r4, r5, pc}
 800de1c:	220c      	movs	r2, #12
 800de1e:	6002      	str	r2, [r0, #0]
 800de20:	2500      	movs	r5, #0
 800de22:	e7f8      	b.n	800de16 <_calloc_r+0x16>
 800de24:	4621      	mov	r1, r4
 800de26:	f7fd fcff 	bl	800b828 <memset>
 800de2a:	e7f4      	b.n	800de16 <_calloc_r+0x16>

0800de2c <__sfputc_r>:
 800de2c:	6893      	ldr	r3, [r2, #8]
 800de2e:	3b01      	subs	r3, #1
 800de30:	2b00      	cmp	r3, #0
 800de32:	b410      	push	{r4}
 800de34:	6093      	str	r3, [r2, #8]
 800de36:	da08      	bge.n	800de4a <__sfputc_r+0x1e>
 800de38:	6994      	ldr	r4, [r2, #24]
 800de3a:	42a3      	cmp	r3, r4
 800de3c:	db01      	blt.n	800de42 <__sfputc_r+0x16>
 800de3e:	290a      	cmp	r1, #10
 800de40:	d103      	bne.n	800de4a <__sfputc_r+0x1e>
 800de42:	f85d 4b04 	ldr.w	r4, [sp], #4
 800de46:	f7fe badf 	b.w	800c408 <__swbuf_r>
 800de4a:	6813      	ldr	r3, [r2, #0]
 800de4c:	1c58      	adds	r0, r3, #1
 800de4e:	6010      	str	r0, [r2, #0]
 800de50:	7019      	strb	r1, [r3, #0]
 800de52:	4608      	mov	r0, r1
 800de54:	f85d 4b04 	ldr.w	r4, [sp], #4
 800de58:	4770      	bx	lr

0800de5a <__sfputs_r>:
 800de5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de5c:	4606      	mov	r6, r0
 800de5e:	460f      	mov	r7, r1
 800de60:	4614      	mov	r4, r2
 800de62:	18d5      	adds	r5, r2, r3
 800de64:	42ac      	cmp	r4, r5
 800de66:	d101      	bne.n	800de6c <__sfputs_r+0x12>
 800de68:	2000      	movs	r0, #0
 800de6a:	e007      	b.n	800de7c <__sfputs_r+0x22>
 800de6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de70:	463a      	mov	r2, r7
 800de72:	4630      	mov	r0, r6
 800de74:	f7ff ffda 	bl	800de2c <__sfputc_r>
 800de78:	1c43      	adds	r3, r0, #1
 800de7a:	d1f3      	bne.n	800de64 <__sfputs_r+0xa>
 800de7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800de80 <_vfiprintf_r>:
 800de80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de84:	460d      	mov	r5, r1
 800de86:	b09d      	sub	sp, #116	; 0x74
 800de88:	4614      	mov	r4, r2
 800de8a:	4698      	mov	r8, r3
 800de8c:	4606      	mov	r6, r0
 800de8e:	b118      	cbz	r0, 800de98 <_vfiprintf_r+0x18>
 800de90:	6983      	ldr	r3, [r0, #24]
 800de92:	b90b      	cbnz	r3, 800de98 <_vfiprintf_r+0x18>
 800de94:	f7ff fb0c 	bl	800d4b0 <__sinit>
 800de98:	4b89      	ldr	r3, [pc, #548]	; (800e0c0 <_vfiprintf_r+0x240>)
 800de9a:	429d      	cmp	r5, r3
 800de9c:	d11b      	bne.n	800ded6 <_vfiprintf_r+0x56>
 800de9e:	6875      	ldr	r5, [r6, #4]
 800dea0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dea2:	07d9      	lsls	r1, r3, #31
 800dea4:	d405      	bmi.n	800deb2 <_vfiprintf_r+0x32>
 800dea6:	89ab      	ldrh	r3, [r5, #12]
 800dea8:	059a      	lsls	r2, r3, #22
 800deaa:	d402      	bmi.n	800deb2 <_vfiprintf_r+0x32>
 800deac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800deae:	f7ff fba2 	bl	800d5f6 <__retarget_lock_acquire_recursive>
 800deb2:	89ab      	ldrh	r3, [r5, #12]
 800deb4:	071b      	lsls	r3, r3, #28
 800deb6:	d501      	bpl.n	800debc <_vfiprintf_r+0x3c>
 800deb8:	692b      	ldr	r3, [r5, #16]
 800deba:	b9eb      	cbnz	r3, 800def8 <_vfiprintf_r+0x78>
 800debc:	4629      	mov	r1, r5
 800debe:	4630      	mov	r0, r6
 800dec0:	f7fe faf4 	bl	800c4ac <__swsetup_r>
 800dec4:	b1c0      	cbz	r0, 800def8 <_vfiprintf_r+0x78>
 800dec6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dec8:	07dc      	lsls	r4, r3, #31
 800deca:	d50e      	bpl.n	800deea <_vfiprintf_r+0x6a>
 800decc:	f04f 30ff 	mov.w	r0, #4294967295
 800ded0:	b01d      	add	sp, #116	; 0x74
 800ded2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ded6:	4b7b      	ldr	r3, [pc, #492]	; (800e0c4 <_vfiprintf_r+0x244>)
 800ded8:	429d      	cmp	r5, r3
 800deda:	d101      	bne.n	800dee0 <_vfiprintf_r+0x60>
 800dedc:	68b5      	ldr	r5, [r6, #8]
 800dede:	e7df      	b.n	800dea0 <_vfiprintf_r+0x20>
 800dee0:	4b79      	ldr	r3, [pc, #484]	; (800e0c8 <_vfiprintf_r+0x248>)
 800dee2:	429d      	cmp	r5, r3
 800dee4:	bf08      	it	eq
 800dee6:	68f5      	ldreq	r5, [r6, #12]
 800dee8:	e7da      	b.n	800dea0 <_vfiprintf_r+0x20>
 800deea:	89ab      	ldrh	r3, [r5, #12]
 800deec:	0598      	lsls	r0, r3, #22
 800deee:	d4ed      	bmi.n	800decc <_vfiprintf_r+0x4c>
 800def0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800def2:	f7ff fb81 	bl	800d5f8 <__retarget_lock_release_recursive>
 800def6:	e7e9      	b.n	800decc <_vfiprintf_r+0x4c>
 800def8:	2300      	movs	r3, #0
 800defa:	9309      	str	r3, [sp, #36]	; 0x24
 800defc:	2320      	movs	r3, #32
 800defe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800df02:	f8cd 800c 	str.w	r8, [sp, #12]
 800df06:	2330      	movs	r3, #48	; 0x30
 800df08:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e0cc <_vfiprintf_r+0x24c>
 800df0c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800df10:	f04f 0901 	mov.w	r9, #1
 800df14:	4623      	mov	r3, r4
 800df16:	469a      	mov	sl, r3
 800df18:	f813 2b01 	ldrb.w	r2, [r3], #1
 800df1c:	b10a      	cbz	r2, 800df22 <_vfiprintf_r+0xa2>
 800df1e:	2a25      	cmp	r2, #37	; 0x25
 800df20:	d1f9      	bne.n	800df16 <_vfiprintf_r+0x96>
 800df22:	ebba 0b04 	subs.w	fp, sl, r4
 800df26:	d00b      	beq.n	800df40 <_vfiprintf_r+0xc0>
 800df28:	465b      	mov	r3, fp
 800df2a:	4622      	mov	r2, r4
 800df2c:	4629      	mov	r1, r5
 800df2e:	4630      	mov	r0, r6
 800df30:	f7ff ff93 	bl	800de5a <__sfputs_r>
 800df34:	3001      	adds	r0, #1
 800df36:	f000 80aa 	beq.w	800e08e <_vfiprintf_r+0x20e>
 800df3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800df3c:	445a      	add	r2, fp
 800df3e:	9209      	str	r2, [sp, #36]	; 0x24
 800df40:	f89a 3000 	ldrb.w	r3, [sl]
 800df44:	2b00      	cmp	r3, #0
 800df46:	f000 80a2 	beq.w	800e08e <_vfiprintf_r+0x20e>
 800df4a:	2300      	movs	r3, #0
 800df4c:	f04f 32ff 	mov.w	r2, #4294967295
 800df50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800df54:	f10a 0a01 	add.w	sl, sl, #1
 800df58:	9304      	str	r3, [sp, #16]
 800df5a:	9307      	str	r3, [sp, #28]
 800df5c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800df60:	931a      	str	r3, [sp, #104]	; 0x68
 800df62:	4654      	mov	r4, sl
 800df64:	2205      	movs	r2, #5
 800df66:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df6a:	4858      	ldr	r0, [pc, #352]	; (800e0cc <_vfiprintf_r+0x24c>)
 800df6c:	f7f2 f950 	bl	8000210 <memchr>
 800df70:	9a04      	ldr	r2, [sp, #16]
 800df72:	b9d8      	cbnz	r0, 800dfac <_vfiprintf_r+0x12c>
 800df74:	06d1      	lsls	r1, r2, #27
 800df76:	bf44      	itt	mi
 800df78:	2320      	movmi	r3, #32
 800df7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800df7e:	0713      	lsls	r3, r2, #28
 800df80:	bf44      	itt	mi
 800df82:	232b      	movmi	r3, #43	; 0x2b
 800df84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800df88:	f89a 3000 	ldrb.w	r3, [sl]
 800df8c:	2b2a      	cmp	r3, #42	; 0x2a
 800df8e:	d015      	beq.n	800dfbc <_vfiprintf_r+0x13c>
 800df90:	9a07      	ldr	r2, [sp, #28]
 800df92:	4654      	mov	r4, sl
 800df94:	2000      	movs	r0, #0
 800df96:	f04f 0c0a 	mov.w	ip, #10
 800df9a:	4621      	mov	r1, r4
 800df9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dfa0:	3b30      	subs	r3, #48	; 0x30
 800dfa2:	2b09      	cmp	r3, #9
 800dfa4:	d94e      	bls.n	800e044 <_vfiprintf_r+0x1c4>
 800dfa6:	b1b0      	cbz	r0, 800dfd6 <_vfiprintf_r+0x156>
 800dfa8:	9207      	str	r2, [sp, #28]
 800dfaa:	e014      	b.n	800dfd6 <_vfiprintf_r+0x156>
 800dfac:	eba0 0308 	sub.w	r3, r0, r8
 800dfb0:	fa09 f303 	lsl.w	r3, r9, r3
 800dfb4:	4313      	orrs	r3, r2
 800dfb6:	9304      	str	r3, [sp, #16]
 800dfb8:	46a2      	mov	sl, r4
 800dfba:	e7d2      	b.n	800df62 <_vfiprintf_r+0xe2>
 800dfbc:	9b03      	ldr	r3, [sp, #12]
 800dfbe:	1d19      	adds	r1, r3, #4
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	9103      	str	r1, [sp, #12]
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	bfbb      	ittet	lt
 800dfc8:	425b      	neglt	r3, r3
 800dfca:	f042 0202 	orrlt.w	r2, r2, #2
 800dfce:	9307      	strge	r3, [sp, #28]
 800dfd0:	9307      	strlt	r3, [sp, #28]
 800dfd2:	bfb8      	it	lt
 800dfd4:	9204      	strlt	r2, [sp, #16]
 800dfd6:	7823      	ldrb	r3, [r4, #0]
 800dfd8:	2b2e      	cmp	r3, #46	; 0x2e
 800dfda:	d10c      	bne.n	800dff6 <_vfiprintf_r+0x176>
 800dfdc:	7863      	ldrb	r3, [r4, #1]
 800dfde:	2b2a      	cmp	r3, #42	; 0x2a
 800dfe0:	d135      	bne.n	800e04e <_vfiprintf_r+0x1ce>
 800dfe2:	9b03      	ldr	r3, [sp, #12]
 800dfe4:	1d1a      	adds	r2, r3, #4
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	9203      	str	r2, [sp, #12]
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	bfb8      	it	lt
 800dfee:	f04f 33ff 	movlt.w	r3, #4294967295
 800dff2:	3402      	adds	r4, #2
 800dff4:	9305      	str	r3, [sp, #20]
 800dff6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e0dc <_vfiprintf_r+0x25c>
 800dffa:	7821      	ldrb	r1, [r4, #0]
 800dffc:	2203      	movs	r2, #3
 800dffe:	4650      	mov	r0, sl
 800e000:	f7f2 f906 	bl	8000210 <memchr>
 800e004:	b140      	cbz	r0, 800e018 <_vfiprintf_r+0x198>
 800e006:	2340      	movs	r3, #64	; 0x40
 800e008:	eba0 000a 	sub.w	r0, r0, sl
 800e00c:	fa03 f000 	lsl.w	r0, r3, r0
 800e010:	9b04      	ldr	r3, [sp, #16]
 800e012:	4303      	orrs	r3, r0
 800e014:	3401      	adds	r4, #1
 800e016:	9304      	str	r3, [sp, #16]
 800e018:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e01c:	482c      	ldr	r0, [pc, #176]	; (800e0d0 <_vfiprintf_r+0x250>)
 800e01e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e022:	2206      	movs	r2, #6
 800e024:	f7f2 f8f4 	bl	8000210 <memchr>
 800e028:	2800      	cmp	r0, #0
 800e02a:	d03f      	beq.n	800e0ac <_vfiprintf_r+0x22c>
 800e02c:	4b29      	ldr	r3, [pc, #164]	; (800e0d4 <_vfiprintf_r+0x254>)
 800e02e:	bb1b      	cbnz	r3, 800e078 <_vfiprintf_r+0x1f8>
 800e030:	9b03      	ldr	r3, [sp, #12]
 800e032:	3307      	adds	r3, #7
 800e034:	f023 0307 	bic.w	r3, r3, #7
 800e038:	3308      	adds	r3, #8
 800e03a:	9303      	str	r3, [sp, #12]
 800e03c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e03e:	443b      	add	r3, r7
 800e040:	9309      	str	r3, [sp, #36]	; 0x24
 800e042:	e767      	b.n	800df14 <_vfiprintf_r+0x94>
 800e044:	fb0c 3202 	mla	r2, ip, r2, r3
 800e048:	460c      	mov	r4, r1
 800e04a:	2001      	movs	r0, #1
 800e04c:	e7a5      	b.n	800df9a <_vfiprintf_r+0x11a>
 800e04e:	2300      	movs	r3, #0
 800e050:	3401      	adds	r4, #1
 800e052:	9305      	str	r3, [sp, #20]
 800e054:	4619      	mov	r1, r3
 800e056:	f04f 0c0a 	mov.w	ip, #10
 800e05a:	4620      	mov	r0, r4
 800e05c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e060:	3a30      	subs	r2, #48	; 0x30
 800e062:	2a09      	cmp	r2, #9
 800e064:	d903      	bls.n	800e06e <_vfiprintf_r+0x1ee>
 800e066:	2b00      	cmp	r3, #0
 800e068:	d0c5      	beq.n	800dff6 <_vfiprintf_r+0x176>
 800e06a:	9105      	str	r1, [sp, #20]
 800e06c:	e7c3      	b.n	800dff6 <_vfiprintf_r+0x176>
 800e06e:	fb0c 2101 	mla	r1, ip, r1, r2
 800e072:	4604      	mov	r4, r0
 800e074:	2301      	movs	r3, #1
 800e076:	e7f0      	b.n	800e05a <_vfiprintf_r+0x1da>
 800e078:	ab03      	add	r3, sp, #12
 800e07a:	9300      	str	r3, [sp, #0]
 800e07c:	462a      	mov	r2, r5
 800e07e:	4b16      	ldr	r3, [pc, #88]	; (800e0d8 <_vfiprintf_r+0x258>)
 800e080:	a904      	add	r1, sp, #16
 800e082:	4630      	mov	r0, r6
 800e084:	f7fd fd58 	bl	800bb38 <_printf_float>
 800e088:	4607      	mov	r7, r0
 800e08a:	1c78      	adds	r0, r7, #1
 800e08c:	d1d6      	bne.n	800e03c <_vfiprintf_r+0x1bc>
 800e08e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e090:	07d9      	lsls	r1, r3, #31
 800e092:	d405      	bmi.n	800e0a0 <_vfiprintf_r+0x220>
 800e094:	89ab      	ldrh	r3, [r5, #12]
 800e096:	059a      	lsls	r2, r3, #22
 800e098:	d402      	bmi.n	800e0a0 <_vfiprintf_r+0x220>
 800e09a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e09c:	f7ff faac 	bl	800d5f8 <__retarget_lock_release_recursive>
 800e0a0:	89ab      	ldrh	r3, [r5, #12]
 800e0a2:	065b      	lsls	r3, r3, #25
 800e0a4:	f53f af12 	bmi.w	800decc <_vfiprintf_r+0x4c>
 800e0a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e0aa:	e711      	b.n	800ded0 <_vfiprintf_r+0x50>
 800e0ac:	ab03      	add	r3, sp, #12
 800e0ae:	9300      	str	r3, [sp, #0]
 800e0b0:	462a      	mov	r2, r5
 800e0b2:	4b09      	ldr	r3, [pc, #36]	; (800e0d8 <_vfiprintf_r+0x258>)
 800e0b4:	a904      	add	r1, sp, #16
 800e0b6:	4630      	mov	r0, r6
 800e0b8:	f7fd ffe2 	bl	800c080 <_printf_i>
 800e0bc:	e7e4      	b.n	800e088 <_vfiprintf_r+0x208>
 800e0be:	bf00      	nop
 800e0c0:	0800e5f0 	.word	0x0800e5f0
 800e0c4:	0800e610 	.word	0x0800e610
 800e0c8:	0800e5d0 	.word	0x0800e5d0
 800e0cc:	0800e78c 	.word	0x0800e78c
 800e0d0:	0800e796 	.word	0x0800e796
 800e0d4:	0800bb39 	.word	0x0800bb39
 800e0d8:	0800de5b 	.word	0x0800de5b
 800e0dc:	0800e792 	.word	0x0800e792

0800e0e0 <__sread>:
 800e0e0:	b510      	push	{r4, lr}
 800e0e2:	460c      	mov	r4, r1
 800e0e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e0e8:	f000 f8d6 	bl	800e298 <_read_r>
 800e0ec:	2800      	cmp	r0, #0
 800e0ee:	bfab      	itete	ge
 800e0f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e0f2:	89a3      	ldrhlt	r3, [r4, #12]
 800e0f4:	181b      	addge	r3, r3, r0
 800e0f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e0fa:	bfac      	ite	ge
 800e0fc:	6563      	strge	r3, [r4, #84]	; 0x54
 800e0fe:	81a3      	strhlt	r3, [r4, #12]
 800e100:	bd10      	pop	{r4, pc}

0800e102 <__swrite>:
 800e102:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e106:	461f      	mov	r7, r3
 800e108:	898b      	ldrh	r3, [r1, #12]
 800e10a:	05db      	lsls	r3, r3, #23
 800e10c:	4605      	mov	r5, r0
 800e10e:	460c      	mov	r4, r1
 800e110:	4616      	mov	r6, r2
 800e112:	d505      	bpl.n	800e120 <__swrite+0x1e>
 800e114:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e118:	2302      	movs	r3, #2
 800e11a:	2200      	movs	r2, #0
 800e11c:	f000 f898 	bl	800e250 <_lseek_r>
 800e120:	89a3      	ldrh	r3, [r4, #12]
 800e122:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e126:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e12a:	81a3      	strh	r3, [r4, #12]
 800e12c:	4632      	mov	r2, r6
 800e12e:	463b      	mov	r3, r7
 800e130:	4628      	mov	r0, r5
 800e132:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e136:	f000 b817 	b.w	800e168 <_write_r>

0800e13a <__sseek>:
 800e13a:	b510      	push	{r4, lr}
 800e13c:	460c      	mov	r4, r1
 800e13e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e142:	f000 f885 	bl	800e250 <_lseek_r>
 800e146:	1c43      	adds	r3, r0, #1
 800e148:	89a3      	ldrh	r3, [r4, #12]
 800e14a:	bf15      	itete	ne
 800e14c:	6560      	strne	r0, [r4, #84]	; 0x54
 800e14e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e152:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e156:	81a3      	strheq	r3, [r4, #12]
 800e158:	bf18      	it	ne
 800e15a:	81a3      	strhne	r3, [r4, #12]
 800e15c:	bd10      	pop	{r4, pc}

0800e15e <__sclose>:
 800e15e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e162:	f000 b831 	b.w	800e1c8 <_close_r>
	...

0800e168 <_write_r>:
 800e168:	b538      	push	{r3, r4, r5, lr}
 800e16a:	4d07      	ldr	r5, [pc, #28]	; (800e188 <_write_r+0x20>)
 800e16c:	4604      	mov	r4, r0
 800e16e:	4608      	mov	r0, r1
 800e170:	4611      	mov	r1, r2
 800e172:	2200      	movs	r2, #0
 800e174:	602a      	str	r2, [r5, #0]
 800e176:	461a      	mov	r2, r3
 800e178:	f7f5 facb 	bl	8003712 <_write>
 800e17c:	1c43      	adds	r3, r0, #1
 800e17e:	d102      	bne.n	800e186 <_write_r+0x1e>
 800e180:	682b      	ldr	r3, [r5, #0]
 800e182:	b103      	cbz	r3, 800e186 <_write_r+0x1e>
 800e184:	6023      	str	r3, [r4, #0]
 800e186:	bd38      	pop	{r3, r4, r5, pc}
 800e188:	20000860 	.word	0x20000860

0800e18c <__assert_func>:
 800e18c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e18e:	4614      	mov	r4, r2
 800e190:	461a      	mov	r2, r3
 800e192:	4b09      	ldr	r3, [pc, #36]	; (800e1b8 <__assert_func+0x2c>)
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	4605      	mov	r5, r0
 800e198:	68d8      	ldr	r0, [r3, #12]
 800e19a:	b14c      	cbz	r4, 800e1b0 <__assert_func+0x24>
 800e19c:	4b07      	ldr	r3, [pc, #28]	; (800e1bc <__assert_func+0x30>)
 800e19e:	9100      	str	r1, [sp, #0]
 800e1a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e1a4:	4906      	ldr	r1, [pc, #24]	; (800e1c0 <__assert_func+0x34>)
 800e1a6:	462b      	mov	r3, r5
 800e1a8:	f000 f81e 	bl	800e1e8 <fiprintf>
 800e1ac:	f000 f893 	bl	800e2d6 <abort>
 800e1b0:	4b04      	ldr	r3, [pc, #16]	; (800e1c4 <__assert_func+0x38>)
 800e1b2:	461c      	mov	r4, r3
 800e1b4:	e7f3      	b.n	800e19e <__assert_func+0x12>
 800e1b6:	bf00      	nop
 800e1b8:	20000014 	.word	0x20000014
 800e1bc:	0800e79d 	.word	0x0800e79d
 800e1c0:	0800e7aa 	.word	0x0800e7aa
 800e1c4:	0800e7d8 	.word	0x0800e7d8

0800e1c8 <_close_r>:
 800e1c8:	b538      	push	{r3, r4, r5, lr}
 800e1ca:	4d06      	ldr	r5, [pc, #24]	; (800e1e4 <_close_r+0x1c>)
 800e1cc:	2300      	movs	r3, #0
 800e1ce:	4604      	mov	r4, r0
 800e1d0:	4608      	mov	r0, r1
 800e1d2:	602b      	str	r3, [r5, #0]
 800e1d4:	f7f5 fab9 	bl	800374a <_close>
 800e1d8:	1c43      	adds	r3, r0, #1
 800e1da:	d102      	bne.n	800e1e2 <_close_r+0x1a>
 800e1dc:	682b      	ldr	r3, [r5, #0]
 800e1de:	b103      	cbz	r3, 800e1e2 <_close_r+0x1a>
 800e1e0:	6023      	str	r3, [r4, #0]
 800e1e2:	bd38      	pop	{r3, r4, r5, pc}
 800e1e4:	20000860 	.word	0x20000860

0800e1e8 <fiprintf>:
 800e1e8:	b40e      	push	{r1, r2, r3}
 800e1ea:	b503      	push	{r0, r1, lr}
 800e1ec:	4601      	mov	r1, r0
 800e1ee:	ab03      	add	r3, sp, #12
 800e1f0:	4805      	ldr	r0, [pc, #20]	; (800e208 <fiprintf+0x20>)
 800e1f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800e1f6:	6800      	ldr	r0, [r0, #0]
 800e1f8:	9301      	str	r3, [sp, #4]
 800e1fa:	f7ff fe41 	bl	800de80 <_vfiprintf_r>
 800e1fe:	b002      	add	sp, #8
 800e200:	f85d eb04 	ldr.w	lr, [sp], #4
 800e204:	b003      	add	sp, #12
 800e206:	4770      	bx	lr
 800e208:	20000014 	.word	0x20000014

0800e20c <_fstat_r>:
 800e20c:	b538      	push	{r3, r4, r5, lr}
 800e20e:	4d07      	ldr	r5, [pc, #28]	; (800e22c <_fstat_r+0x20>)
 800e210:	2300      	movs	r3, #0
 800e212:	4604      	mov	r4, r0
 800e214:	4608      	mov	r0, r1
 800e216:	4611      	mov	r1, r2
 800e218:	602b      	str	r3, [r5, #0]
 800e21a:	f7f5 faa2 	bl	8003762 <_fstat>
 800e21e:	1c43      	adds	r3, r0, #1
 800e220:	d102      	bne.n	800e228 <_fstat_r+0x1c>
 800e222:	682b      	ldr	r3, [r5, #0]
 800e224:	b103      	cbz	r3, 800e228 <_fstat_r+0x1c>
 800e226:	6023      	str	r3, [r4, #0]
 800e228:	bd38      	pop	{r3, r4, r5, pc}
 800e22a:	bf00      	nop
 800e22c:	20000860 	.word	0x20000860

0800e230 <_isatty_r>:
 800e230:	b538      	push	{r3, r4, r5, lr}
 800e232:	4d06      	ldr	r5, [pc, #24]	; (800e24c <_isatty_r+0x1c>)
 800e234:	2300      	movs	r3, #0
 800e236:	4604      	mov	r4, r0
 800e238:	4608      	mov	r0, r1
 800e23a:	602b      	str	r3, [r5, #0]
 800e23c:	f7f5 faa1 	bl	8003782 <_isatty>
 800e240:	1c43      	adds	r3, r0, #1
 800e242:	d102      	bne.n	800e24a <_isatty_r+0x1a>
 800e244:	682b      	ldr	r3, [r5, #0]
 800e246:	b103      	cbz	r3, 800e24a <_isatty_r+0x1a>
 800e248:	6023      	str	r3, [r4, #0]
 800e24a:	bd38      	pop	{r3, r4, r5, pc}
 800e24c:	20000860 	.word	0x20000860

0800e250 <_lseek_r>:
 800e250:	b538      	push	{r3, r4, r5, lr}
 800e252:	4d07      	ldr	r5, [pc, #28]	; (800e270 <_lseek_r+0x20>)
 800e254:	4604      	mov	r4, r0
 800e256:	4608      	mov	r0, r1
 800e258:	4611      	mov	r1, r2
 800e25a:	2200      	movs	r2, #0
 800e25c:	602a      	str	r2, [r5, #0]
 800e25e:	461a      	mov	r2, r3
 800e260:	f7f5 fa9a 	bl	8003798 <_lseek>
 800e264:	1c43      	adds	r3, r0, #1
 800e266:	d102      	bne.n	800e26e <_lseek_r+0x1e>
 800e268:	682b      	ldr	r3, [r5, #0]
 800e26a:	b103      	cbz	r3, 800e26e <_lseek_r+0x1e>
 800e26c:	6023      	str	r3, [r4, #0]
 800e26e:	bd38      	pop	{r3, r4, r5, pc}
 800e270:	20000860 	.word	0x20000860

0800e274 <__ascii_mbtowc>:
 800e274:	b082      	sub	sp, #8
 800e276:	b901      	cbnz	r1, 800e27a <__ascii_mbtowc+0x6>
 800e278:	a901      	add	r1, sp, #4
 800e27a:	b142      	cbz	r2, 800e28e <__ascii_mbtowc+0x1a>
 800e27c:	b14b      	cbz	r3, 800e292 <__ascii_mbtowc+0x1e>
 800e27e:	7813      	ldrb	r3, [r2, #0]
 800e280:	600b      	str	r3, [r1, #0]
 800e282:	7812      	ldrb	r2, [r2, #0]
 800e284:	1e10      	subs	r0, r2, #0
 800e286:	bf18      	it	ne
 800e288:	2001      	movne	r0, #1
 800e28a:	b002      	add	sp, #8
 800e28c:	4770      	bx	lr
 800e28e:	4610      	mov	r0, r2
 800e290:	e7fb      	b.n	800e28a <__ascii_mbtowc+0x16>
 800e292:	f06f 0001 	mvn.w	r0, #1
 800e296:	e7f8      	b.n	800e28a <__ascii_mbtowc+0x16>

0800e298 <_read_r>:
 800e298:	b538      	push	{r3, r4, r5, lr}
 800e29a:	4d07      	ldr	r5, [pc, #28]	; (800e2b8 <_read_r+0x20>)
 800e29c:	4604      	mov	r4, r0
 800e29e:	4608      	mov	r0, r1
 800e2a0:	4611      	mov	r1, r2
 800e2a2:	2200      	movs	r2, #0
 800e2a4:	602a      	str	r2, [r5, #0]
 800e2a6:	461a      	mov	r2, r3
 800e2a8:	f7f5 fa16 	bl	80036d8 <_read>
 800e2ac:	1c43      	adds	r3, r0, #1
 800e2ae:	d102      	bne.n	800e2b6 <_read_r+0x1e>
 800e2b0:	682b      	ldr	r3, [r5, #0]
 800e2b2:	b103      	cbz	r3, 800e2b6 <_read_r+0x1e>
 800e2b4:	6023      	str	r3, [r4, #0]
 800e2b6:	bd38      	pop	{r3, r4, r5, pc}
 800e2b8:	20000860 	.word	0x20000860

0800e2bc <__ascii_wctomb>:
 800e2bc:	b149      	cbz	r1, 800e2d2 <__ascii_wctomb+0x16>
 800e2be:	2aff      	cmp	r2, #255	; 0xff
 800e2c0:	bf85      	ittet	hi
 800e2c2:	238a      	movhi	r3, #138	; 0x8a
 800e2c4:	6003      	strhi	r3, [r0, #0]
 800e2c6:	700a      	strbls	r2, [r1, #0]
 800e2c8:	f04f 30ff 	movhi.w	r0, #4294967295
 800e2cc:	bf98      	it	ls
 800e2ce:	2001      	movls	r0, #1
 800e2d0:	4770      	bx	lr
 800e2d2:	4608      	mov	r0, r1
 800e2d4:	4770      	bx	lr

0800e2d6 <abort>:
 800e2d6:	b508      	push	{r3, lr}
 800e2d8:	2006      	movs	r0, #6
 800e2da:	f000 f82b 	bl	800e334 <raise>
 800e2de:	2001      	movs	r0, #1
 800e2e0:	f7f5 f9f0 	bl	80036c4 <_exit>

0800e2e4 <_raise_r>:
 800e2e4:	291f      	cmp	r1, #31
 800e2e6:	b538      	push	{r3, r4, r5, lr}
 800e2e8:	4604      	mov	r4, r0
 800e2ea:	460d      	mov	r5, r1
 800e2ec:	d904      	bls.n	800e2f8 <_raise_r+0x14>
 800e2ee:	2316      	movs	r3, #22
 800e2f0:	6003      	str	r3, [r0, #0]
 800e2f2:	f04f 30ff 	mov.w	r0, #4294967295
 800e2f6:	bd38      	pop	{r3, r4, r5, pc}
 800e2f8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e2fa:	b112      	cbz	r2, 800e302 <_raise_r+0x1e>
 800e2fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e300:	b94b      	cbnz	r3, 800e316 <_raise_r+0x32>
 800e302:	4620      	mov	r0, r4
 800e304:	f000 f830 	bl	800e368 <_getpid_r>
 800e308:	462a      	mov	r2, r5
 800e30a:	4601      	mov	r1, r0
 800e30c:	4620      	mov	r0, r4
 800e30e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e312:	f000 b817 	b.w	800e344 <_kill_r>
 800e316:	2b01      	cmp	r3, #1
 800e318:	d00a      	beq.n	800e330 <_raise_r+0x4c>
 800e31a:	1c59      	adds	r1, r3, #1
 800e31c:	d103      	bne.n	800e326 <_raise_r+0x42>
 800e31e:	2316      	movs	r3, #22
 800e320:	6003      	str	r3, [r0, #0]
 800e322:	2001      	movs	r0, #1
 800e324:	e7e7      	b.n	800e2f6 <_raise_r+0x12>
 800e326:	2400      	movs	r4, #0
 800e328:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e32c:	4628      	mov	r0, r5
 800e32e:	4798      	blx	r3
 800e330:	2000      	movs	r0, #0
 800e332:	e7e0      	b.n	800e2f6 <_raise_r+0x12>

0800e334 <raise>:
 800e334:	4b02      	ldr	r3, [pc, #8]	; (800e340 <raise+0xc>)
 800e336:	4601      	mov	r1, r0
 800e338:	6818      	ldr	r0, [r3, #0]
 800e33a:	f7ff bfd3 	b.w	800e2e4 <_raise_r>
 800e33e:	bf00      	nop
 800e340:	20000014 	.word	0x20000014

0800e344 <_kill_r>:
 800e344:	b538      	push	{r3, r4, r5, lr}
 800e346:	4d07      	ldr	r5, [pc, #28]	; (800e364 <_kill_r+0x20>)
 800e348:	2300      	movs	r3, #0
 800e34a:	4604      	mov	r4, r0
 800e34c:	4608      	mov	r0, r1
 800e34e:	4611      	mov	r1, r2
 800e350:	602b      	str	r3, [r5, #0]
 800e352:	f7f5 f9a7 	bl	80036a4 <_kill>
 800e356:	1c43      	adds	r3, r0, #1
 800e358:	d102      	bne.n	800e360 <_kill_r+0x1c>
 800e35a:	682b      	ldr	r3, [r5, #0]
 800e35c:	b103      	cbz	r3, 800e360 <_kill_r+0x1c>
 800e35e:	6023      	str	r3, [r4, #0]
 800e360:	bd38      	pop	{r3, r4, r5, pc}
 800e362:	bf00      	nop
 800e364:	20000860 	.word	0x20000860

0800e368 <_getpid_r>:
 800e368:	f7f5 b994 	b.w	8003694 <_getpid>

0800e36c <_init>:
 800e36c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e36e:	bf00      	nop
 800e370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e372:	bc08      	pop	{r3}
 800e374:	469e      	mov	lr, r3
 800e376:	4770      	bx	lr

0800e378 <_fini>:
 800e378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e37a:	bf00      	nop
 800e37c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e37e:	bc08      	pop	{r3}
 800e380:	469e      	mov	lr, r3
 800e382:	4770      	bx	lr
