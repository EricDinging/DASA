
Central_control_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e05c  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000524  0800e220  0800e220  0001e220  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e744  0800e744  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800e744  0800e744  0001e744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e74c  0800e74c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e74c  0800e74c  0001e74c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e750  0800e750  0001e750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800e754  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000680  200001e4  0800e938  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000864  0800e938  00020864  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020ee6  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c3c  00000000  00000000  000410fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a80  00000000  00000000  00044d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001940  00000000  00000000  000467b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030309  00000000  00000000  000480f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020a74  00000000  00000000  00078401  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001265fb  00000000  00000000  00098e75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001bf470  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000081d4  00000000  00000000  001bf4c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800e204 	.word	0x0800e204

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e8 	.word	0x200001e8
 80001fc:	0800e204 	.word	0x0800e204

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b974 	b.w	8000ed8 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	4604      	mov	r4, r0
 8000c10:	468e      	mov	lr, r1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d14d      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c16:	428a      	cmp	r2, r1
 8000c18:	4694      	mov	ip, r2
 8000c1a:	d969      	bls.n	8000cf0 <__udivmoddi4+0xe8>
 8000c1c:	fab2 f282 	clz	r2, r2
 8000c20:	b152      	cbz	r2, 8000c38 <__udivmoddi4+0x30>
 8000c22:	fa01 f302 	lsl.w	r3, r1, r2
 8000c26:	f1c2 0120 	rsb	r1, r2, #32
 8000c2a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c2e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c32:	ea41 0e03 	orr.w	lr, r1, r3
 8000c36:	4094      	lsls	r4, r2
 8000c38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c3c:	0c21      	lsrs	r1, r4, #16
 8000c3e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c42:	fa1f f78c 	uxth.w	r7, ip
 8000c46:	fb08 e316 	mls	r3, r8, r6, lr
 8000c4a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c4e:	fb06 f107 	mul.w	r1, r6, r7
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c5e:	f080 811f 	bcs.w	8000ea0 <__udivmoddi4+0x298>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 811c 	bls.w	8000ea0 <__udivmoddi4+0x298>
 8000c68:	3e02      	subs	r6, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a5b      	subs	r3, r3, r1
 8000c6e:	b2a4      	uxth	r4, r4
 8000c70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c74:	fb08 3310 	mls	r3, r8, r0, r3
 8000c78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c7c:	fb00 f707 	mul.w	r7, r0, r7
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	d90a      	bls.n	8000c9a <__udivmoddi4+0x92>
 8000c84:	eb1c 0404 	adds.w	r4, ip, r4
 8000c88:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8c:	f080 810a 	bcs.w	8000ea4 <__udivmoddi4+0x29c>
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	f240 8107 	bls.w	8000ea4 <__udivmoddi4+0x29c>
 8000c96:	4464      	add	r4, ip
 8000c98:	3802      	subs	r0, #2
 8000c9a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c9e:	1be4      	subs	r4, r4, r7
 8000ca0:	2600      	movs	r6, #0
 8000ca2:	b11d      	cbz	r5, 8000cac <__udivmoddi4+0xa4>
 8000ca4:	40d4      	lsrs	r4, r2
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cac:	4631      	mov	r1, r6
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0xc2>
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	f000 80ef 	beq.w	8000e9a <__udivmoddi4+0x292>
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	4631      	mov	r1, r6
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	fab3 f683 	clz	r6, r3
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	d14a      	bne.n	8000d68 <__udivmoddi4+0x160>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0xd4>
 8000cd6:	4282      	cmp	r2, r0
 8000cd8:	f200 80f9 	bhi.w	8000ece <__udivmoddi4+0x2c6>
 8000cdc:	1a84      	subs	r4, r0, r2
 8000cde:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	469e      	mov	lr, r3
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	d0e0      	beq.n	8000cac <__udivmoddi4+0xa4>
 8000cea:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cee:	e7dd      	b.n	8000cac <__udivmoddi4+0xa4>
 8000cf0:	b902      	cbnz	r2, 8000cf4 <__udivmoddi4+0xec>
 8000cf2:	deff      	udf	#255	; 0xff
 8000cf4:	fab2 f282 	clz	r2, r2
 8000cf8:	2a00      	cmp	r2, #0
 8000cfa:	f040 8092 	bne.w	8000e22 <__udivmoddi4+0x21a>
 8000cfe:	eba1 010c 	sub.w	r1, r1, ip
 8000d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d06:	fa1f fe8c 	uxth.w	lr, ip
 8000d0a:	2601      	movs	r6, #1
 8000d0c:	0c20      	lsrs	r0, r4, #16
 8000d0e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d12:	fb07 1113 	mls	r1, r7, r3, r1
 8000d16:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d1a:	fb0e f003 	mul.w	r0, lr, r3
 8000d1e:	4288      	cmp	r0, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x12c>
 8000d22:	eb1c 0101 	adds.w	r1, ip, r1
 8000d26:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x12a>
 8000d2c:	4288      	cmp	r0, r1
 8000d2e:	f200 80cb 	bhi.w	8000ec8 <__udivmoddi4+0x2c0>
 8000d32:	4643      	mov	r3, r8
 8000d34:	1a09      	subs	r1, r1, r0
 8000d36:	b2a4      	uxth	r4, r4
 8000d38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d3c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d40:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d44:	fb0e fe00 	mul.w	lr, lr, r0
 8000d48:	45a6      	cmp	lr, r4
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x156>
 8000d4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d50:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d54:	d202      	bcs.n	8000d5c <__udivmoddi4+0x154>
 8000d56:	45a6      	cmp	lr, r4
 8000d58:	f200 80bb 	bhi.w	8000ed2 <__udivmoddi4+0x2ca>
 8000d5c:	4608      	mov	r0, r1
 8000d5e:	eba4 040e 	sub.w	r4, r4, lr
 8000d62:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d66:	e79c      	b.n	8000ca2 <__udivmoddi4+0x9a>
 8000d68:	f1c6 0720 	rsb	r7, r6, #32
 8000d6c:	40b3      	lsls	r3, r6
 8000d6e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d72:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d76:	fa20 f407 	lsr.w	r4, r0, r7
 8000d7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d7e:	431c      	orrs	r4, r3
 8000d80:	40f9      	lsrs	r1, r7
 8000d82:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d86:	fa00 f306 	lsl.w	r3, r0, r6
 8000d8a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d8e:	0c20      	lsrs	r0, r4, #16
 8000d90:	fa1f fe8c 	uxth.w	lr, ip
 8000d94:	fb09 1118 	mls	r1, r9, r8, r1
 8000d98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9c:	fb08 f00e 	mul.w	r0, r8, lr
 8000da0:	4288      	cmp	r0, r1
 8000da2:	fa02 f206 	lsl.w	r2, r2, r6
 8000da6:	d90b      	bls.n	8000dc0 <__udivmoddi4+0x1b8>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db0:	f080 8088 	bcs.w	8000ec4 <__udivmoddi4+0x2bc>
 8000db4:	4288      	cmp	r0, r1
 8000db6:	f240 8085 	bls.w	8000ec4 <__udivmoddi4+0x2bc>
 8000dba:	f1a8 0802 	sub.w	r8, r8, #2
 8000dbe:	4461      	add	r1, ip
 8000dc0:	1a09      	subs	r1, r1, r0
 8000dc2:	b2a4      	uxth	r4, r4
 8000dc4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dc8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dcc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dd0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd4:	458e      	cmp	lr, r1
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x1e2>
 8000dd8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ddc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000de0:	d26c      	bcs.n	8000ebc <__udivmoddi4+0x2b4>
 8000de2:	458e      	cmp	lr, r1
 8000de4:	d96a      	bls.n	8000ebc <__udivmoddi4+0x2b4>
 8000de6:	3802      	subs	r0, #2
 8000de8:	4461      	add	r1, ip
 8000dea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dee:	fba0 9402 	umull	r9, r4, r0, r2
 8000df2:	eba1 010e 	sub.w	r1, r1, lr
 8000df6:	42a1      	cmp	r1, r4
 8000df8:	46c8      	mov	r8, r9
 8000dfa:	46a6      	mov	lr, r4
 8000dfc:	d356      	bcc.n	8000eac <__udivmoddi4+0x2a4>
 8000dfe:	d053      	beq.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e00:	b15d      	cbz	r5, 8000e1a <__udivmoddi4+0x212>
 8000e02:	ebb3 0208 	subs.w	r2, r3, r8
 8000e06:	eb61 010e 	sbc.w	r1, r1, lr
 8000e0a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e0e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e12:	40f1      	lsrs	r1, r6
 8000e14:	431f      	orrs	r7, r3
 8000e16:	e9c5 7100 	strd	r7, r1, [r5]
 8000e1a:	2600      	movs	r6, #0
 8000e1c:	4631      	mov	r1, r6
 8000e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e22:	f1c2 0320 	rsb	r3, r2, #32
 8000e26:	40d8      	lsrs	r0, r3
 8000e28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e2c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e30:	4091      	lsls	r1, r2
 8000e32:	4301      	orrs	r1, r0
 8000e34:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e38:	fa1f fe8c 	uxth.w	lr, ip
 8000e3c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e40:	fb07 3610 	mls	r6, r7, r0, r3
 8000e44:	0c0b      	lsrs	r3, r1, #16
 8000e46:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e4a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e4e:	429e      	cmp	r6, r3
 8000e50:	fa04 f402 	lsl.w	r4, r4, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x260>
 8000e56:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e5e:	d22f      	bcs.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e60:	429e      	cmp	r6, r3
 8000e62:	d92d      	bls.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e64:	3802      	subs	r0, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	1b9b      	subs	r3, r3, r6
 8000e6a:	b289      	uxth	r1, r1
 8000e6c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e70:	fb07 3316 	mls	r3, r7, r6, r3
 8000e74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e78:	fb06 f30e 	mul.w	r3, r6, lr
 8000e7c:	428b      	cmp	r3, r1
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x28a>
 8000e80:	eb1c 0101 	adds.w	r1, ip, r1
 8000e84:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e88:	d216      	bcs.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d914      	bls.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8e:	3e02      	subs	r6, #2
 8000e90:	4461      	add	r1, ip
 8000e92:	1ac9      	subs	r1, r1, r3
 8000e94:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e98:	e738      	b.n	8000d0c <__udivmoddi4+0x104>
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e705      	b.n	8000cac <__udivmoddi4+0xa4>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e3      	b.n	8000c6c <__udivmoddi4+0x64>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6f8      	b.n	8000c9a <__udivmoddi4+0x92>
 8000ea8:	454b      	cmp	r3, r9
 8000eaa:	d2a9      	bcs.n	8000e00 <__udivmoddi4+0x1f8>
 8000eac:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7a3      	b.n	8000e00 <__udivmoddi4+0x1f8>
 8000eb8:	4646      	mov	r6, r8
 8000eba:	e7ea      	b.n	8000e92 <__udivmoddi4+0x28a>
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	e794      	b.n	8000dea <__udivmoddi4+0x1e2>
 8000ec0:	4640      	mov	r0, r8
 8000ec2:	e7d1      	b.n	8000e68 <__udivmoddi4+0x260>
 8000ec4:	46d0      	mov	r8, sl
 8000ec6:	e77b      	b.n	8000dc0 <__udivmoddi4+0x1b8>
 8000ec8:	3b02      	subs	r3, #2
 8000eca:	4461      	add	r1, ip
 8000ecc:	e732      	b.n	8000d34 <__udivmoddi4+0x12c>
 8000ece:	4630      	mov	r0, r6
 8000ed0:	e709      	b.n	8000ce6 <__udivmoddi4+0xde>
 8000ed2:	4464      	add	r4, ip
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	e742      	b.n	8000d5e <__udivmoddi4+0x156>

08000ed8 <__aeabi_idiv0>:
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop

08000edc <getSync>:
		sprintf(buf, "sig: %d x: %d y: %d width: %d height: %d index: %d age: %d\r\n", (pixy.curr_blocks + n)->m_signature, (pixy.curr_blocks + n)->m_x, (pixy.curr_blocks + n)->m_y, (pixy.curr_blocks + n)->m_width, (pixy.curr_blocks + n)->m_height, (pixy.curr_blocks + n)->m_index, (pixy.curr_blocks + n)->m_age);
	printf(buf);
}


int16_t getSync() {
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
	uint8_t i, j, c, cprev;
	int16_t res;
	uint16_t start;

	// parse bytes until we find sync
	for (i = j = 0, cprev = 0; true; i++) {
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	73bb      	strb	r3, [r7, #14]
 8000ee6:	7bbb      	ldrb	r3, [r7, #14]
 8000ee8:	73fb      	strb	r3, [r7, #15]
 8000eea:	2300      	movs	r3, #0
 8000eec:	737b      	strb	r3, [r7, #13]
		res = recv(&c, 1, NULL);
 8000eee:	1dfb      	adds	r3, r7, #7
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	2101      	movs	r1, #1
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f000 f9b1 	bl	800125c <recv>
 8000efa:	4603      	mov	r3, r0
 8000efc:	817b      	strh	r3, [r7, #10]
		if (res >= PIXY_RESULT_OK) {
 8000efe:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	db1f      	blt.n	8000f46 <getSync+0x6a>
			// since we're using little endian, previous byte is least significant byte
			start = cprev;
 8000f06:	7b7b      	ldrb	r3, [r7, #13]
 8000f08:	813b      	strh	r3, [r7, #8]
			// current byte is most significant byte
			start |= c << 8;
 8000f0a:	79fb      	ldrb	r3, [r7, #7]
 8000f0c:	021b      	lsls	r3, r3, #8
 8000f0e:	b21a      	sxth	r2, r3
 8000f10:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	b21b      	sxth	r3, r3
 8000f18:	813b      	strh	r3, [r7, #8]
			cprev = c;
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
 8000f1c:	737b      	strb	r3, [r7, #13]
			if (start == PIXY_CHECKSUM_SYNC) {
 8000f1e:	893b      	ldrh	r3, [r7, #8]
 8000f20:	f24c 12af 	movw	r2, #49583	; 0xc1af
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d104      	bne.n	8000f32 <getSync+0x56>
				pixy.m_cs = true;
 8000f28:	4b16      	ldr	r3, [pc, #88]	; (8000f84 <getSync+0xa8>)
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	749a      	strb	r2, [r3, #18]
				return PIXY_RESULT_OK;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	e024      	b.n	8000f7c <getSync+0xa0>
			}
			if (start == PIXY_NO_CHECKSUM_SYNC) {
 8000f32:	893b      	ldrh	r3, [r7, #8]
 8000f34:	f24c 12ae 	movw	r2, #49582	; 0xc1ae
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d104      	bne.n	8000f46 <getSync+0x6a>
				pixy.m_cs = false;
 8000f3c:	4b11      	ldr	r3, [pc, #68]	; (8000f84 <getSync+0xa8>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	749a      	strb	r2, [r3, #18]
				return PIXY_RESULT_OK;
 8000f42:	2300      	movs	r3, #0
 8000f44:	e01a      	b.n	8000f7c <getSync+0xa0>
			}
		}
		// If we've read some bytes and no sync, then wait and try again.
		// And do that several more times before we give up.
		// Pixy guarantees to respond within 100us.
		if (i >= 4) {
 8000f46:	7bfb      	ldrb	r3, [r7, #15]
 8000f48:	2b03      	cmp	r3, #3
 8000f4a:	d913      	bls.n	8000f74 <getSync+0x98>
			if (j >= 4) {
 8000f4c:	7bbb      	ldrb	r3, [r7, #14]
 8000f4e:	2b03      	cmp	r3, #3
 8000f50:	d902      	bls.n	8000f58 <getSync+0x7c>
				return PIXY_RESULT_ERROR;
 8000f52:	f04f 33ff 	mov.w	r3, #4294967295
 8000f56:	e011      	b.n	8000f7c <getSync+0xa0>
			}

			for (volatile int i = 0; i < 10; i++) asm(""); // 25 microsecond delay (9.5 => 10)
 8000f58:	2300      	movs	r3, #0
 8000f5a:	603b      	str	r3, [r7, #0]
 8000f5c:	e002      	b.n	8000f64 <getSync+0x88>
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	3301      	adds	r3, #1
 8000f62:	603b      	str	r3, [r7, #0]
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	2b09      	cmp	r3, #9
 8000f68:	ddf9      	ble.n	8000f5e <getSync+0x82>

			j++;
 8000f6a:	7bbb      	ldrb	r3, [r7, #14]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	73bb      	strb	r3, [r7, #14]
			i = 0;
 8000f70:	2300      	movs	r3, #0
 8000f72:	73fb      	strb	r3, [r7, #15]
	for (i = j = 0, cprev = 0; true; i++) {
 8000f74:	7bfb      	ldrb	r3, [r7, #15]
 8000f76:	3301      	adds	r3, #1
 8000f78:	73fb      	strb	r3, [r7, #15]
		res = recv(&c, 1, NULL);
 8000f7a:	e7b8      	b.n	8000eee <getSync+0x12>
		}
	}
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3710      	adds	r7, #16
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	20000200 	.word	0x20000200

08000f88 <recvPacket>:

int16_t recvPacket() {
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
	uint16_t csCalc, csSerial;
	int16_t res;

	res = getSync();
 8000f8e:	f7ff ffa5 	bl	8000edc <getSync>
 8000f92:	4603      	mov	r3, r0
 8000f94:	80fb      	strh	r3, [r7, #6]
	if (res < 0)
 8000f96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	da02      	bge.n	8000fa4 <recvPacket+0x1c>
		return res;
 8000f9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fa2:	e065      	b.n	8001070 <recvPacket+0xe8>

	if (pixy.m_cs) {
 8000fa4:	4b34      	ldr	r3, [pc, #208]	; (8001078 <recvPacket+0xf0>)
 8000fa6:	7c9b      	ldrb	r3, [r3, #18]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d035      	beq.n	8001018 <recvPacket+0x90>
		res = recv(pixy.m_buf, 4, NULL);
 8000fac:	4b32      	ldr	r3, [pc, #200]	; (8001078 <recvPacket+0xf0>)
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	2104      	movs	r1, #4
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f000 f951 	bl	800125c <recv>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	80fb      	strh	r3, [r7, #6]
		if (res < 0)
 8000fbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	da02      	bge.n	8000fcc <recvPacket+0x44>
			return res;
 8000fc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fca:	e051      	b.n	8001070 <recvPacket+0xe8>

		pixy.m_type = pixy.m_buf[0];
 8000fcc:	4b2a      	ldr	r3, [pc, #168]	; (8001078 <recvPacket+0xf0>)
 8000fce:	689b      	ldr	r3, [r3, #8]
 8000fd0:	781a      	ldrb	r2, [r3, #0]
 8000fd2:	4b29      	ldr	r3, [pc, #164]	; (8001078 <recvPacket+0xf0>)
 8000fd4:	741a      	strb	r2, [r3, #16]
		pixy.m_length = pixy.m_buf[1];
 8000fd6:	4b28      	ldr	r3, [pc, #160]	; (8001078 <recvPacket+0xf0>)
 8000fd8:	689b      	ldr	r3, [r3, #8]
 8000fda:	785a      	ldrb	r2, [r3, #1]
 8000fdc:	4b26      	ldr	r3, [pc, #152]	; (8001078 <recvPacket+0xf0>)
 8000fde:	745a      	strb	r2, [r3, #17]

		csSerial = *(uint16_t*) &(pixy.m_buf[2]);
 8000fe0:	4b25      	ldr	r3, [pc, #148]	; (8001078 <recvPacket+0xf0>)
 8000fe2:	689b      	ldr	r3, [r3, #8]
 8000fe4:	885b      	ldrh	r3, [r3, #2]
 8000fe6:	80bb      	strh	r3, [r7, #4]

		res = recv(pixy.m_buf, pixy.m_length, &csCalc);
 8000fe8:	4b23      	ldr	r3, [pc, #140]	; (8001078 <recvPacket+0xf0>)
 8000fea:	689b      	ldr	r3, [r3, #8]
 8000fec:	4a22      	ldr	r2, [pc, #136]	; (8001078 <recvPacket+0xf0>)
 8000fee:	7c51      	ldrb	r1, [r2, #17]
 8000ff0:	1cba      	adds	r2, r7, #2
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f000 f932 	bl	800125c <recv>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	80fb      	strh	r3, [r7, #6]
		if (res < 0)
 8000ffc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001000:	2b00      	cmp	r3, #0
 8001002:	da02      	bge.n	800100a <recvPacket+0x82>
			return res;
 8001004:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001008:	e032      	b.n	8001070 <recvPacket+0xe8>

		if (csSerial != csCalc) {
 800100a:	887b      	ldrh	r3, [r7, #2]
 800100c:	88ba      	ldrh	r2, [r7, #4]
 800100e:	429a      	cmp	r2, r3
 8001010:	d02d      	beq.n	800106e <recvPacket+0xe6>
			return PIXY_RESULT_CHECKSUM_ERROR;
 8001012:	f06f 0302 	mvn.w	r3, #2
 8001016:	e02b      	b.n	8001070 <recvPacket+0xe8>
		}
	} else {
		res = recv(pixy.m_buf, 2, NULL);
 8001018:	4b17      	ldr	r3, [pc, #92]	; (8001078 <recvPacket+0xf0>)
 800101a:	689b      	ldr	r3, [r3, #8]
 800101c:	2200      	movs	r2, #0
 800101e:	2102      	movs	r1, #2
 8001020:	4618      	mov	r0, r3
 8001022:	f000 f91b 	bl	800125c <recv>
 8001026:	4603      	mov	r3, r0
 8001028:	80fb      	strh	r3, [r7, #6]
		if (res < 0)
 800102a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800102e:	2b00      	cmp	r3, #0
 8001030:	da02      	bge.n	8001038 <recvPacket+0xb0>
			return res;
 8001032:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001036:	e01b      	b.n	8001070 <recvPacket+0xe8>

		pixy.m_type = pixy.m_buf[0];
 8001038:	4b0f      	ldr	r3, [pc, #60]	; (8001078 <recvPacket+0xf0>)
 800103a:	689b      	ldr	r3, [r3, #8]
 800103c:	781a      	ldrb	r2, [r3, #0]
 800103e:	4b0e      	ldr	r3, [pc, #56]	; (8001078 <recvPacket+0xf0>)
 8001040:	741a      	strb	r2, [r3, #16]
		pixy.m_length = pixy.m_buf[1];
 8001042:	4b0d      	ldr	r3, [pc, #52]	; (8001078 <recvPacket+0xf0>)
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	785a      	ldrb	r2, [r3, #1]
 8001048:	4b0b      	ldr	r3, [pc, #44]	; (8001078 <recvPacket+0xf0>)
 800104a:	745a      	strb	r2, [r3, #17]

		res = recv(pixy.m_buf, pixy.m_length, NULL);
 800104c:	4b0a      	ldr	r3, [pc, #40]	; (8001078 <recvPacket+0xf0>)
 800104e:	689b      	ldr	r3, [r3, #8]
 8001050:	4a09      	ldr	r2, [pc, #36]	; (8001078 <recvPacket+0xf0>)
 8001052:	7c51      	ldrb	r1, [r2, #17]
 8001054:	2200      	movs	r2, #0
 8001056:	4618      	mov	r0, r3
 8001058:	f000 f900 	bl	800125c <recv>
 800105c:	4603      	mov	r3, r0
 800105e:	80fb      	strh	r3, [r7, #6]
		if (res < 0)
 8001060:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001064:	2b00      	cmp	r3, #0
 8001066:	da02      	bge.n	800106e <recvPacket+0xe6>
			return res;
 8001068:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800106c:	e000      	b.n	8001070 <recvPacket+0xe8>
	}
	return PIXY_RESULT_OK;
 800106e:	2300      	movs	r3, #0
}
 8001070:	4618      	mov	r0, r3
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	20000200 	.word	0x20000200

0800107c <sendPacket>:

int16_t sendPacket() {
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
	// write header info at beginnig of buffer
	pixy.m_buf[0] = PIXY_NO_CHECKSUM_SYNC & 0xff;
 8001080:	4b10      	ldr	r3, [pc, #64]	; (80010c4 <sendPacket+0x48>)
 8001082:	689b      	ldr	r3, [r3, #8]
 8001084:	22ae      	movs	r2, #174	; 0xae
 8001086:	701a      	strb	r2, [r3, #0]
	pixy.m_buf[1] = PIXY_NO_CHECKSUM_SYNC >> 8;
 8001088:	4b0e      	ldr	r3, [pc, #56]	; (80010c4 <sendPacket+0x48>)
 800108a:	689b      	ldr	r3, [r3, #8]
 800108c:	3301      	adds	r3, #1
 800108e:	22c1      	movs	r2, #193	; 0xc1
 8001090:	701a      	strb	r2, [r3, #0]
	pixy.m_buf[2] = pixy.m_type;
 8001092:	4b0c      	ldr	r3, [pc, #48]	; (80010c4 <sendPacket+0x48>)
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	3302      	adds	r3, #2
 8001098:	4a0a      	ldr	r2, [pc, #40]	; (80010c4 <sendPacket+0x48>)
 800109a:	7c12      	ldrb	r2, [r2, #16]
 800109c:	701a      	strb	r2, [r3, #0]
	pixy.m_buf[3] = pixy.m_length;
 800109e:	4b09      	ldr	r3, [pc, #36]	; (80010c4 <sendPacket+0x48>)
 80010a0:	689b      	ldr	r3, [r3, #8]
 80010a2:	3303      	adds	r3, #3
 80010a4:	4a07      	ldr	r2, [pc, #28]	; (80010c4 <sendPacket+0x48>)
 80010a6:	7c52      	ldrb	r2, [r2, #17]
 80010a8:	701a      	strb	r2, [r3, #0]
	// send whole thing -- header and data in one call
	return send(pixy.m_buf, pixy.m_length + PIXY_SEND_HEADER_SIZE);
 80010aa:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <sendPacket+0x48>)
 80010ac:	689a      	ldr	r2, [r3, #8]
 80010ae:	4b05      	ldr	r3, [pc, #20]	; (80010c4 <sendPacket+0x48>)
 80010b0:	7c5b      	ldrb	r3, [r3, #17]
 80010b2:	3304      	adds	r3, #4
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	4619      	mov	r1, r3
 80010b8:	4610      	mov	r0, r2
 80010ba:	f000 f923 	bl	8001304 <send>
 80010be:	4603      	mov	r3, r0
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	20000200 	.word	0x20000200

080010c8 <getVersion>:

int8_t getVersion() {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
	pixy.m_length = 0;
 80010cc:	4b11      	ldr	r3, [pc, #68]	; (8001114 <getVersion+0x4c>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	745a      	strb	r2, [r3, #17]
	pixy.m_type = PIXY_TYPE_REQUEST_VERSION;
 80010d2:	4b10      	ldr	r3, [pc, #64]	; (8001114 <getVersion+0x4c>)
 80010d4:	220e      	movs	r2, #14
 80010d6:	741a      	strb	r2, [r3, #16]
	sendPacket();
 80010d8:	f7ff ffd0 	bl	800107c <sendPacket>
	if (recvPacket() == 0) {
 80010dc:	f7ff ff54 	bl	8000f88 <recvPacket>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d112      	bne.n	800110c <getVersion+0x44>
		if (pixy.m_type == PIXY_TYPE_RESPONSE_VERSION) {
 80010e6:	4b0b      	ldr	r3, [pc, #44]	; (8001114 <getVersion+0x4c>)
 80010e8:	7c1b      	ldrb	r3, [r3, #16]
 80010ea:	2b0f      	cmp	r3, #15
 80010ec:	d107      	bne.n	80010fe <getVersion+0x36>
			pixy.version = (Version*) pixy.m_buf;
 80010ee:	4b09      	ldr	r3, [pc, #36]	; (8001114 <getVersion+0x4c>)
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	4a08      	ldr	r2, [pc, #32]	; (8001114 <getVersion+0x4c>)
 80010f4:	6013      	str	r3, [r2, #0]
			return pixy.m_length;
 80010f6:	4b07      	ldr	r3, [pc, #28]	; (8001114 <getVersion+0x4c>)
 80010f8:	7c5b      	ldrb	r3, [r3, #17]
 80010fa:	b25b      	sxtb	r3, r3
 80010fc:	e008      	b.n	8001110 <getVersion+0x48>
		} else if (pixy.m_type == PIXY_TYPE_RESPONSE_ERROR)
 80010fe:	4b05      	ldr	r3, [pc, #20]	; (8001114 <getVersion+0x4c>)
 8001100:	7c1b      	ldrb	r3, [r3, #16]
 8001102:	2b03      	cmp	r3, #3
 8001104:	d102      	bne.n	800110c <getVersion+0x44>
			return PIXY_RESULT_BUSY;
 8001106:	f06f 0301 	mvn.w	r3, #1
 800110a:	e001      	b.n	8001110 <getVersion+0x48>
	}
	return PIXY_RESULT_ERROR;  // some kind of bitstream error
 800110c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001110:	4618      	mov	r0, r3
 8001112:	bd80      	pop	{r7, pc}
 8001114:	20000200 	.word	0x20000200

08001118 <getResolution>:

int8_t getResolution() {
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
	pixy.m_length = 1;
 800111c:	4b13      	ldr	r3, [pc, #76]	; (800116c <getResolution+0x54>)
 800111e:	2201      	movs	r2, #1
 8001120:	745a      	strb	r2, [r3, #17]
	pixy.m_bufPayload[0] = 0; // for future types of queries
 8001122:	4b12      	ldr	r3, [pc, #72]	; (800116c <getResolution+0x54>)
 8001124:	68db      	ldr	r3, [r3, #12]
 8001126:	2200      	movs	r2, #0
 8001128:	701a      	strb	r2, [r3, #0]
	pixy.m_type = PIXY_TYPE_REQUEST_RESOLUTION;
 800112a:	4b10      	ldr	r3, [pc, #64]	; (800116c <getResolution+0x54>)
 800112c:	220c      	movs	r2, #12
 800112e:	741a      	strb	r2, [r3, #16]
	sendPacket();
 8001130:	f7ff ffa4 	bl	800107c <sendPacket>
	if (recvPacket() == 0) {
 8001134:	f7ff ff28 	bl	8000f88 <recvPacket>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d112      	bne.n	8001164 <getResolution+0x4c>
		if (pixy.m_type == PIXY_TYPE_RESPONSE_RESOLUTION) {
 800113e:	4b0b      	ldr	r3, [pc, #44]	; (800116c <getResolution+0x54>)
 8001140:	7c1b      	ldrb	r3, [r3, #16]
 8001142:	2b0d      	cmp	r3, #13
 8001144:	d10b      	bne.n	800115e <getResolution+0x46>
			pixy.frameWidth = *(uint16_t*)pixy.m_buf;
 8001146:	4b09      	ldr	r3, [pc, #36]	; (800116c <getResolution+0x54>)
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	881a      	ldrh	r2, [r3, #0]
 800114c:	4b07      	ldr	r3, [pc, #28]	; (800116c <getResolution+0x54>)
 800114e:	809a      	strh	r2, [r3, #4]
			pixy.frameHeight = *(uint16_t*)(pixy.m_buf + sizeof(uint16_t));
 8001150:	4b06      	ldr	r3, [pc, #24]	; (800116c <getResolution+0x54>)
 8001152:	689b      	ldr	r3, [r3, #8]
 8001154:	885a      	ldrh	r2, [r3, #2]
 8001156:	4b05      	ldr	r3, [pc, #20]	; (800116c <getResolution+0x54>)
 8001158:	80da      	strh	r2, [r3, #6]
			return PIXY_RESULT_OK; // success
 800115a:	2300      	movs	r3, #0
 800115c:	e004      	b.n	8001168 <getResolution+0x50>
		} else
			return PIXY_RESULT_ERROR;
 800115e:	f04f 33ff 	mov.w	r3, #4294967295
 8001162:	e001      	b.n	8001168 <getResolution+0x50>
	} else
		return PIXY_RESULT_ERROR;  // some kind of bitstream error
 8001164:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001168:	4618      	mov	r0, r3
 800116a:	bd80      	pop	{r7, pc}
 800116c:	20000200 	.word	0x20000200

08001170 <pixy2_init>:
		// We can give up half a millisecond of latency (worst case)
		for (volatile int i = 0; i < 190; i++) asm("");
	}
}

int8_t pixy2_init(SPI_HandleTypeDef *hspi, GPIO_TypeDef *port, uint16_t pin) {
 8001170:	b580      	push	{r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af00      	add	r7, sp, #0
 8001176:	60f8      	str	r0, [r7, #12]
 8001178:	60b9      	str	r1, [r7, #8]
 800117a:	4613      	mov	r3, r2
 800117c:	80fb      	strh	r3, [r7, #6]
	// allocate buffer space for send/receive
	pixy.m_buf = (uint8_t*) malloc(PIXY_BUFFERSIZE);
 800117e:	f44f 7082 	mov.w	r0, #260	; 0x104
 8001182:	f00a fa93 	bl	800b6ac <malloc>
 8001186:	4603      	mov	r3, r0
 8001188:	461a      	mov	r2, r3
 800118a:	4b24      	ldr	r3, [pc, #144]	; (800121c <pixy2_init+0xac>)
 800118c:	609a      	str	r2, [r3, #8]
	// shifted buffer is used for sending, so we have space to write header information
	pixy.m_bufPayload = pixy.m_buf + PIXY_SEND_HEADER_SIZE;
 800118e:	4b23      	ldr	r3, [pc, #140]	; (800121c <pixy2_init+0xac>)
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	3304      	adds	r3, #4
 8001194:	4a21      	ldr	r2, [pc, #132]	; (800121c <pixy2_init+0xac>)
 8001196:	60d3      	str	r3, [r2, #12]
	pixy.frameWidth = pixy.frameHeight = 0;
 8001198:	4b20      	ldr	r3, [pc, #128]	; (800121c <pixy2_init+0xac>)
 800119a:	2200      	movs	r2, #0
 800119c:	80da      	strh	r2, [r3, #6]
 800119e:	4b1f      	ldr	r3, [pc, #124]	; (800121c <pixy2_init+0xac>)
 80011a0:	88da      	ldrh	r2, [r3, #6]
 80011a2:	4b1e      	ldr	r3, [pc, #120]	; (800121c <pixy2_init+0xac>)
 80011a4:	809a      	strh	r2, [r3, #4]
	pixy.version=NULL;
 80011a6:	4b1d      	ldr	r3, [pc, #116]	; (800121c <pixy2_init+0xac>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
	pixy.m_cs = false;
 80011ac:	4b1b      	ldr	r3, [pc, #108]	; (800121c <pixy2_init+0xac>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	749a      	strb	r2, [r3, #18]
	pixy.curr_blocks = NULL;
 80011b2:	4b1a      	ldr	r3, [pc, #104]	; (800121c <pixy2_init+0xac>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	615a      	str	r2, [r3, #20]
	pixy.numBlocks = 0;
 80011b8:	4b18      	ldr	r3, [pc, #96]	; (800121c <pixy2_init+0xac>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	761a      	strb	r2, [r3, #24]

	int8_t res;

	res = open(hspi, port, pin);
 80011be:	88fb      	ldrh	r3, [r7, #6]
 80011c0:	461a      	mov	r2, r3
 80011c2:	68b9      	ldr	r1, [r7, #8]
 80011c4:	68f8      	ldr	r0, [r7, #12]
 80011c6:	f000 f82b 	bl	8001220 <open>
 80011ca:	4603      	mov	r3, r0
 80011cc:	75fb      	strb	r3, [r7, #23]
	if (res < 0)
 80011ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	da02      	bge.n	80011dc <pixy2_init+0x6c>
		return res;
 80011d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80011da:	e01b      	b.n	8001214 <pixy2_init+0xa4>

	// wait for pixy to be ready -- that is, Pixy takes a second or 2 boot up
	// getVersion is an effective "ping".  We timeout after 5s.

	for (int millis = HAL_GetTick(); HAL_GetTick() - millis < 5000;) {
 80011dc:	f002 fb0e 	bl	80037fc <HAL_GetTick>
 80011e0:	4603      	mov	r3, r0
 80011e2:	613b      	str	r3, [r7, #16]
 80011e4:	e00b      	b.n	80011fe <pixy2_init+0x8e>
		if (getVersion() >= 0) { // successful version get -> pixy is ready
 80011e6:	f7ff ff6f 	bl	80010c8 <getVersion>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	db03      	blt.n	80011f8 <pixy2_init+0x88>
			getResolution(); // get resolution so we have it
 80011f0:	f7ff ff92 	bl	8001118 <getResolution>
			return PIXY_RESULT_OK;
 80011f4:	2300      	movs	r3, #0
 80011f6:	e00d      	b.n	8001214 <pixy2_init+0xa4>
		}
		HAL_Delay(5); // might have to change
 80011f8:	2005      	movs	r0, #5
 80011fa:	f002 fb0b 	bl	8003814 <HAL_Delay>
	for (int millis = HAL_GetTick(); HAL_GetTick() - millis < 5000;) {
 80011fe:	f002 fafd 	bl	80037fc <HAL_GetTick>
 8001202:	4602      	mov	r2, r0
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	1ad3      	subs	r3, r2, r3
 8001208:	f241 3287 	movw	r2, #4999	; 0x1387
 800120c:	4293      	cmp	r3, r2
 800120e:	d9ea      	bls.n	80011e6 <pixy2_init+0x76>
	}
	// timeout
	return PIXY_RESULT_TIMEOUT;
 8001210:	f06f 0303 	mvn.w	r3, #3
}
 8001214:	4618      	mov	r0, r3
 8001216:	3718      	adds	r7, #24
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	20000200 	.word	0x20000200

08001220 <open>:

SPI_HandleTypeDef* SPI_obj;
GPIO_TypeDef* GPIO_ss;
uint16_t GPIO_ss_pin;

int8_t open(SPI_HandleTypeDef* hspi,GPIO_TypeDef* port,uint16_t pin) {
 8001220:	b480      	push	{r7}
 8001222:	b085      	sub	sp, #20
 8001224:	af00      	add	r7, sp, #0
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	4613      	mov	r3, r2
 800122c:	80fb      	strh	r3, [r7, #6]
	GPIO_ss_pin = pin;
 800122e:	4a08      	ldr	r2, [pc, #32]	; (8001250 <open+0x30>)
 8001230:	88fb      	ldrh	r3, [r7, #6]
 8001232:	8013      	strh	r3, [r2, #0]
	GPIO_ss = port;
 8001234:	4a07      	ldr	r2, [pc, #28]	; (8001254 <open+0x34>)
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	6013      	str	r3, [r2, #0]
	SPI_obj = hspi;
 800123a:	4a07      	ldr	r2, [pc, #28]	; (8001258 <open+0x38>)
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	6013      	str	r3, [r2, #0]
	return 0;
 8001240:	2300      	movs	r3, #0
}
 8001242:	4618      	mov	r0, r3
 8001244:	3714      	adds	r7, #20
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	20000224 	.word	0x20000224
 8001254:	20000220 	.word	0x20000220
 8001258:	2000021c 	.word	0x2000021c

0800125c <recv>:

int16_t recv(uint8_t *buf, uint8_t len, uint16_t *checkSumCalculation) { // based on arduino implementation
 800125c:	b580      	push	{r7, lr}
 800125e:	b086      	sub	sp, #24
 8001260:	af00      	add	r7, sp, #0
 8001262:	60f8      	str	r0, [r7, #12]
 8001264:	460b      	mov	r3, r1
 8001266:	607a      	str	r2, [r7, #4]
 8001268:	72fb      	strb	r3, [r7, #11]
	uint8_t i = 0;
 800126a:	2300      	movs	r3, #0
 800126c:	75fb      	strb	r3, [r7, #23]
	if (checkSumCalculation)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d002      	beq.n	800127a <recv+0x1e>
		*checkSumCalculation = 0;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2200      	movs	r2, #0
 8001278:	801a      	strh	r2, [r3, #0]
	
	HAL_GPIO_WritePin(GPIO_ss, GPIO_ss_pin, GPIO_PIN_RESET);
 800127a:	4b1f      	ldr	r3, [pc, #124]	; (80012f8 <recv+0x9c>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a1f      	ldr	r2, [pc, #124]	; (80012fc <recv+0xa0>)
 8001280:	8811      	ldrh	r1, [r2, #0]
 8001282:	2200      	movs	r2, #0
 8001284:	4618      	mov	r0, r3
 8001286:	f003 fda3 	bl	8004dd0 <HAL_GPIO_WritePin>

	for (i = 0; i < len; ++i) {
 800128a:	2300      	movs	r3, #0
 800128c:	75fb      	strb	r3, [r7, #23]
 800128e:	e020      	b.n	80012d2 <recv+0x76>
		uint8_t data = 0;
 8001290:	2300      	movs	r3, #0
 8001292:	75bb      	strb	r3, [r7, #22]
		HAL_SPI_Receive(SPI_obj, &data, 1, 5000);
 8001294:	4b1a      	ldr	r3, [pc, #104]	; (8001300 <recv+0xa4>)
 8001296:	6818      	ldr	r0, [r3, #0]
 8001298:	f107 0116 	add.w	r1, r7, #22
 800129c:	f241 3388 	movw	r3, #5000	; 0x1388
 80012a0:	2201      	movs	r2, #1
 80012a2:	f006 fff9 	bl	8008298 <HAL_SPI_Receive>
		buf[i] = data;
 80012a6:	7dfb      	ldrb	r3, [r7, #23]
 80012a8:	68fa      	ldr	r2, [r7, #12]
 80012aa:	4413      	add	r3, r2
 80012ac:	7dba      	ldrb	r2, [r7, #22]
 80012ae:	701a      	strb	r2, [r3, #0]
		if (checkSumCalculation)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d00a      	beq.n	80012cc <recv+0x70>
			*checkSumCalculation += buf[i];
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	881a      	ldrh	r2, [r3, #0]
 80012ba:	7dfb      	ldrb	r3, [r7, #23]
 80012bc:	68f9      	ldr	r1, [r7, #12]
 80012be:	440b      	add	r3, r1
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	b29b      	uxth	r3, r3
 80012c4:	4413      	add	r3, r2
 80012c6:	b29a      	uxth	r2, r3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < len; ++i) {
 80012cc:	7dfb      	ldrb	r3, [r7, #23]
 80012ce:	3301      	adds	r3, #1
 80012d0:	75fb      	strb	r3, [r7, #23]
 80012d2:	7dfa      	ldrb	r2, [r7, #23]
 80012d4:	7afb      	ldrb	r3, [r7, #11]
 80012d6:	429a      	cmp	r2, r3
 80012d8:	d3da      	bcc.n	8001290 <recv+0x34>
	}

	HAL_GPIO_WritePin(GPIO_ss, GPIO_ss_pin, GPIO_PIN_SET);
 80012da:	4b07      	ldr	r3, [pc, #28]	; (80012f8 <recv+0x9c>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a07      	ldr	r2, [pc, #28]	; (80012fc <recv+0xa0>)
 80012e0:	8811      	ldrh	r1, [r2, #0]
 80012e2:	2201      	movs	r2, #1
 80012e4:	4618      	mov	r0, r3
 80012e6:	f003 fd73 	bl	8004dd0 <HAL_GPIO_WritePin>
	return len;
 80012ea:	7afb      	ldrb	r3, [r7, #11]
 80012ec:	b21b      	sxth	r3, r3
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3718      	adds	r7, #24
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	20000220 	.word	0x20000220
 80012fc:	20000224 	.word	0x20000224
 8001300:	2000021c 	.word	0x2000021c

08001304 <send>:

int16_t send(uint8_t *buf, uint8_t len) { // based on arduino implementation
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	460b      	mov	r3, r1
 800130e:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 0;
 8001310:	2300      	movs	r3, #0
 8001312:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIO_ss, GPIO_ss_pin, GPIO_PIN_RESET);
 8001314:	4b14      	ldr	r3, [pc, #80]	; (8001368 <send+0x64>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a14      	ldr	r2, [pc, #80]	; (800136c <send+0x68>)
 800131a:	8811      	ldrh	r1, [r2, #0]
 800131c:	2200      	movs	r2, #0
 800131e:	4618      	mov	r0, r3
 8001320:	f003 fd56 	bl	8004dd0 <HAL_GPIO_WritePin>


	for (i = 0; i < len; ++i) {
 8001324:	2300      	movs	r3, #0
 8001326:	73fb      	strb	r3, [r7, #15]
 8001328:	e00c      	b.n	8001344 <send+0x40>
		HAL_SPI_Transmit(SPI_obj, (uint8_t *) (buf + i), 1, 5000);
 800132a:	4b11      	ldr	r3, [pc, #68]	; (8001370 <send+0x6c>)
 800132c:	6818      	ldr	r0, [r3, #0]
 800132e:	7bfb      	ldrb	r3, [r7, #15]
 8001330:	687a      	ldr	r2, [r7, #4]
 8001332:	18d1      	adds	r1, r2, r3
 8001334:	f241 3388 	movw	r3, #5000	; 0x1388
 8001338:	2201      	movs	r2, #1
 800133a:	f006 fe3f 	bl	8007fbc <HAL_SPI_Transmit>
	for (i = 0; i < len; ++i) {
 800133e:	7bfb      	ldrb	r3, [r7, #15]
 8001340:	3301      	adds	r3, #1
 8001342:	73fb      	strb	r3, [r7, #15]
 8001344:	7bfa      	ldrb	r2, [r7, #15]
 8001346:	78fb      	ldrb	r3, [r7, #3]
 8001348:	429a      	cmp	r2, r3
 800134a:	d3ee      	bcc.n	800132a <send+0x26>
	}


	HAL_GPIO_WritePin(GPIO_ss, GPIO_ss_pin, GPIO_PIN_SET);
 800134c:	4b06      	ldr	r3, [pc, #24]	; (8001368 <send+0x64>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a06      	ldr	r2, [pc, #24]	; (800136c <send+0x68>)
 8001352:	8811      	ldrh	r1, [r2, #0]
 8001354:	2201      	movs	r2, #1
 8001356:	4618      	mov	r0, r3
 8001358:	f003 fd3a 	bl	8004dd0 <HAL_GPIO_WritePin>

	return len;
 800135c:	78fb      	ldrb	r3, [r7, #3]
 800135e:	b21b      	sxth	r3, r3
}
 8001360:	4618      	mov	r0, r3
 8001362:	3710      	adds	r7, #16
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	20000220 	.word	0x20000220
 800136c:	20000224 	.word	0x20000224
 8001370:	2000021c 	.word	0x2000021c

08001374 <state_update>:
uint8_t reset = 0; // reset button

// testing
uint32_t count = 0;

void state_update() {
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0

	// All the buttons should be rising-edge triggered


	// read reset button, and set reset bit to 1 only if reset button is pressed
	if (reset) {
 800137a:	4b8e      	ldr	r3, [pc, #568]	; (80015b4 <state_update+0x240>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d021      	beq.n	80013c6 <state_update+0x52>
		on_off = 0;
 8001382:	4b8d      	ldr	r3, [pc, #564]	; (80015b8 <state_update+0x244>)
 8001384:	2200      	movs	r2, #0
 8001386:	701a      	strb	r2, [r3, #0]
		ball_locked = 0;
 8001388:	4b8c      	ldr	r3, [pc, #560]	; (80015bc <state_update+0x248>)
 800138a:	2200      	movs	r2, #0
 800138c:	701a      	strb	r2, [r3, #0]
		ball_not_found = 0;
 800138e:	4b8c      	ldr	r3, [pc, #560]	; (80015c0 <state_update+0x24c>)
 8001390:	2200      	movs	r2, #0
 8001392:	701a      	strb	r2, [r3, #0]
		ball_count = 0;
 8001394:	4b8b      	ldr	r3, [pc, #556]	; (80015c4 <state_update+0x250>)
 8001396:	2200      	movs	r2, #0
 8001398:	701a      	strb	r2, [r3, #0]
		ball_collected = 0;
 800139a:	4b8b      	ldr	r3, [pc, #556]	; (80015c8 <state_update+0x254>)
 800139c:	2200      	movs	r2, #0
 800139e:	701a      	strb	r2, [r3, #0]
		station_arrived = 0;
 80013a0:	4b8a      	ldr	r3, [pc, #552]	; (80015cc <state_update+0x258>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	701a      	strb	r2, [r3, #0]
		avoid_finished = 0;
 80013a6:	4b8a      	ldr	r3, [pc, #552]	; (80015d0 <state_update+0x25c>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	701a      	strb	r2, [r3, #0]
		avoid_begin = 0;
 80013ac:	4b89      	ldr	r3, [pc, #548]	; (80015d4 <state_update+0x260>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	701a      	strb	r2, [r3, #0]
		reset = 0;
 80013b2:	4b80      	ldr	r3, [pc, #512]	; (80015b4 <state_update+0x240>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	701a      	strb	r2, [r3, #0]
		state = INIT;
 80013b8:	4b87      	ldr	r3, [pc, #540]	; (80015d8 <state_update+0x264>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	701a      	strb	r2, [r3, #0]
		prev_state = state;
 80013be:	4b86      	ldr	r3, [pc, #536]	; (80015d8 <state_update+0x264>)
 80013c0:	781a      	ldrb	r2, [r3, #0]
 80013c2:	4b86      	ldr	r3, [pc, #536]	; (80015dc <state_update+0x268>)
 80013c4:	701a      	strb	r2, [r3, #0]
		// reading peripheral input, and clear register immediately
	}

	// Testing arg begin

	enum State local_state = state;
 80013c6:	4b84      	ldr	r3, [pc, #528]	; (80015d8 <state_update+0x264>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	71bb      	strb	r3, [r7, #6]
	state = SEARCH;
 80013cc:	4b82      	ldr	r3, [pc, #520]	; (80015d8 <state_update+0x264>)
 80013ce:	2201      	movs	r2, #1
 80013d0:	701a      	strb	r2, [r3, #0]
	local_state = state;
 80013d2:	4b81      	ldr	r3, [pc, #516]	; (80015d8 <state_update+0x264>)
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	71bb      	strb	r3, [r7, #6]

	// Testing arg end

	// disable interrupt ultrasonic, ir
	HAL_NVIC_DisableIRQ(TIM3_IRQn);
 80013d8:	201d      	movs	r0, #29
 80013da:	f003 fb4c 	bl	8004a76 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(TIM1_CC_IRQn);
 80013de:	201b      	movs	r0, #27
 80013e0:	f003 fb49 	bl	8004a76 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(TIM5_IRQn);
 80013e4:	2032      	movs	r0, #50	; 0x32
 80013e6:	f003 fb46 	bl	8004a76 <HAL_NVIC_DisableIRQ>

	enum State next_state = state;
 80013ea:	4b7b      	ldr	r3, [pc, #492]	; (80015d8 <state_update+0x264>)
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	71fb      	strb	r3, [r7, #7]

	switch (state) {
 80013f0:	4b79      	ldr	r3, [pc, #484]	; (80015d8 <state_update+0x264>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	2b04      	cmp	r3, #4
 80013f6:	f200 809e 	bhi.w	8001536 <state_update+0x1c2>
 80013fa:	a201      	add	r2, pc, #4	; (adr r2, 8001400 <state_update+0x8c>)
 80013fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001400:	08001415 	.word	0x08001415
 8001404:	0800142b 	.word	0x0800142b
 8001408:	08001467 	.word	0x08001467
 800140c:	080014af 	.word	0x080014af
 8001410:	080014d7 	.word	0x080014d7
	case INIT:
		if (on_off == 1) {
 8001414:	4b68      	ldr	r3, [pc, #416]	; (80015b8 <state_update+0x244>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	2b01      	cmp	r3, #1
 800141a:	f040 8083 	bne.w	8001524 <state_update+0x1b0>
			on_off = 0;
 800141e:	4b66      	ldr	r3, [pc, #408]	; (80015b8 <state_update+0x244>)
 8001420:	2200      	movs	r2, #0
 8001422:	701a      	strb	r2, [r3, #0]
			next_state = SEARCH;
 8001424:	2301      	movs	r3, #1
 8001426:	71fb      	strb	r3, [r7, #7]
		}
		break;
 8001428:	e07c      	b.n	8001524 <state_update+0x1b0>
	case SEARCH:
		if (on_off) {
 800142a:	4b63      	ldr	r3, [pc, #396]	; (80015b8 <state_update+0x244>)
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d005      	beq.n	800143e <state_update+0xca>
			on_off = 0;
 8001432:	4b61      	ldr	r3, [pc, #388]	; (80015b8 <state_update+0x244>)
 8001434:	2200      	movs	r2, #0
 8001436:	701a      	strb	r2, [r3, #0]
			next_state = RETURN;
 8001438:	2303      	movs	r3, #3
 800143a:	71fb      	strb	r3, [r7, #7]
			next_state = COLLECT;
		} else if (ball_not_found) {
			ball_not_found = 0;
			next_state = RETURN;
		}
		break;
 800143c:	e074      	b.n	8001528 <state_update+0x1b4>
		} else if (ball_locked) {
 800143e:	4b5f      	ldr	r3, [pc, #380]	; (80015bc <state_update+0x248>)
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d005      	beq.n	8001452 <state_update+0xde>
			ball_locked = 0;
 8001446:	4b5d      	ldr	r3, [pc, #372]	; (80015bc <state_update+0x248>)
 8001448:	2200      	movs	r2, #0
 800144a:	701a      	strb	r2, [r3, #0]
			next_state = COLLECT;
 800144c:	2302      	movs	r3, #2
 800144e:	71fb      	strb	r3, [r7, #7]
		break;
 8001450:	e06a      	b.n	8001528 <state_update+0x1b4>
		} else if (ball_not_found) {
 8001452:	4b5b      	ldr	r3, [pc, #364]	; (80015c0 <state_update+0x24c>)
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d066      	beq.n	8001528 <state_update+0x1b4>
			ball_not_found = 0;
 800145a:	4b59      	ldr	r3, [pc, #356]	; (80015c0 <state_update+0x24c>)
 800145c:	2200      	movs	r2, #0
 800145e:	701a      	strb	r2, [r3, #0]
			next_state = RETURN;
 8001460:	2303      	movs	r3, #3
 8001462:	71fb      	strb	r3, [r7, #7]
		break;
 8001464:	e060      	b.n	8001528 <state_update+0x1b4>
	case COLLECT: {
//		printf("Collect: mode enter\n");
		uint32_t local_count;
		local_count = count;
 8001466:	4b5e      	ldr	r3, [pc, #376]	; (80015e0 <state_update+0x26c>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	603b      	str	r3, [r7, #0]

		if (on_off) {
 800146c:	4b52      	ldr	r3, [pc, #328]	; (80015b8 <state_update+0x244>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d005      	beq.n	8001480 <state_update+0x10c>
			on_off = 0;
 8001474:	4b50      	ldr	r3, [pc, #320]	; (80015b8 <state_update+0x244>)
 8001476:	2200      	movs	r2, #0
 8001478:	701a      	strb	r2, [r3, #0]
			next_state = RETURN;
 800147a:	2303      	movs	r3, #3
 800147c:	71fb      	strb	r3, [r7, #7]
			} else {
				next_state = RETURN;
			}
			ball_collected = 0; // clear
		}
		break;
 800147e:	e055      	b.n	800152c <state_update+0x1b8>
		} else if (ball_collected) {
 8001480:	4b51      	ldr	r3, [pc, #324]	; (80015c8 <state_update+0x254>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d051      	beq.n	800152c <state_update+0x1b8>
			if (ball_count <= MAXLOAD) {
 8001488:	4b4e      	ldr	r3, [pc, #312]	; (80015c4 <state_update+0x250>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	2b06      	cmp	r3, #6
 800148e:	d808      	bhi.n	80014a2 <state_update+0x12e>
				printf("Collect: Ball_collected, ball_count: %d\n", ball_count);
 8001490:	4b4c      	ldr	r3, [pc, #304]	; (80015c4 <state_update+0x250>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	4619      	mov	r1, r3
 8001496:	4853      	ldr	r0, [pc, #332]	; (80015e4 <state_update+0x270>)
 8001498:	f00a fe62 	bl	800c160 <iprintf>
				next_state = SEARCH;
 800149c:	2301      	movs	r3, #1
 800149e:	71fb      	strb	r3, [r7, #7]
 80014a0:	e001      	b.n	80014a6 <state_update+0x132>
				next_state = RETURN;
 80014a2:	2303      	movs	r3, #3
 80014a4:	71fb      	strb	r3, [r7, #7]
			ball_collected = 0; // clear
 80014a6:	4b48      	ldr	r3, [pc, #288]	; (80015c8 <state_update+0x254>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	701a      	strb	r2, [r3, #0]
		break;
 80014ac:	e03e      	b.n	800152c <state_update+0x1b8>
		}
	case RETURN:
		if (on_off) {
 80014ae:	4b42      	ldr	r3, [pc, #264]	; (80015b8 <state_update+0x244>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d002      	beq.n	80014bc <state_update+0x148>
			on_off = 0;
 80014b6:	4b40      	ldr	r3, [pc, #256]	; (80015b8 <state_update+0x244>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	701a      	strb	r2, [r3, #0]
		}

		if (station_arrived) {
 80014bc:	4b43      	ldr	r3, [pc, #268]	; (80015cc <state_update+0x258>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d035      	beq.n	8001530 <state_update+0x1bc>
			station_arrived = 0;
 80014c4:	4b41      	ldr	r3, [pc, #260]	; (80015cc <state_update+0x258>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	701a      	strb	r2, [r3, #0]
			reset = 1;
 80014ca:	4b3a      	ldr	r3, [pc, #232]	; (80015b4 <state_update+0x240>)
 80014cc:	2201      	movs	r2, #1
 80014ce:	701a      	strb	r2, [r3, #0]
			next_state = INIT;
 80014d0:	2300      	movs	r3, #0
 80014d2:	71fb      	strb	r3, [r7, #7]
		}

		break;
 80014d4:	e02c      	b.n	8001530 <state_update+0x1bc>
	case AVOID_COLLISION:{
		// only interrupt can cause the robot to enter this state
		// only after certain conditions are met can the robot leave this state
    
		if (on_off) {
 80014d6:	4b38      	ldr	r3, [pc, #224]	; (80015b8 <state_update+0x244>)
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d005      	beq.n	80014ea <state_update+0x176>
			on_off = 0;
 80014de:	4b36      	ldr	r3, [pc, #216]	; (80015b8 <state_update+0x244>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	701a      	strb	r2, [r3, #0]
			prev_state = RETURN;
 80014e4:	4b3d      	ldr	r3, [pc, #244]	; (80015dc <state_update+0x268>)
 80014e6:	2203      	movs	r2, #3
 80014e8:	701a      	strb	r2, [r3, #0]
		}

		uint8_t local_avoid_finished = avoid_finished;
 80014ea:	4b39      	ldr	r3, [pc, #228]	; (80015d0 <state_update+0x25c>)
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	717b      	strb	r3, [r7, #5]

		if (avoid_finished) {
 80014f0:	4b37      	ldr	r3, [pc, #220]	; (80015d0 <state_update+0x25c>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d01d      	beq.n	8001534 <state_update+0x1c0>
			avoid_begin = 0;
 80014f8:	4b36      	ldr	r3, [pc, #216]	; (80015d4 <state_update+0x260>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	701a      	strb	r2, [r3, #0]
			avoid_finished = 0;
 80014fe:	4b34      	ldr	r3, [pc, #208]	; (80015d0 <state_update+0x25c>)
 8001500:	2200      	movs	r2, #0
 8001502:	701a      	strb	r2, [r3, #0]

			HAL_TIM_Base_Stop_IT(&htim5);
 8001504:	4838      	ldr	r0, [pc, #224]	; (80015e8 <state_update+0x274>)
 8001506:	f007 fc8f 	bl	8008e28 <HAL_TIM_Base_Stop_IT>

			next_state = prev_state;
 800150a:	4b34      	ldr	r3, [pc, #208]	; (80015dc <state_update+0x268>)
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	71fb      	strb	r3, [r7, #7]

			if (on_off) {
 8001510:	4b29      	ldr	r3, [pc, #164]	; (80015b8 <state_update+0x244>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d00d      	beq.n	8001534 <state_update+0x1c0>
				on_off = 0;
 8001518:	4b27      	ldr	r3, [pc, #156]	; (80015b8 <state_update+0x244>)
 800151a:	2200      	movs	r2, #0
 800151c:	701a      	strb	r2, [r3, #0]
				next_state = RETURN;
 800151e:	2303      	movs	r3, #3
 8001520:	71fb      	strb	r3, [r7, #7]
			}
		}
		break;
 8001522:	e007      	b.n	8001534 <state_update+0x1c0>
		break;
 8001524:	bf00      	nop
 8001526:	e006      	b.n	8001536 <state_update+0x1c2>
		break;
 8001528:	bf00      	nop
 800152a:	e004      	b.n	8001536 <state_update+0x1c2>
		break;
 800152c:	bf00      	nop
 800152e:	e002      	b.n	8001536 <state_update+0x1c2>
		break;
 8001530:	bf00      	nop
 8001532:	e000      	b.n	8001536 <state_update+0x1c2>
		break;
 8001534:	bf00      	nop
		}
	}

	state = next_state;
 8001536:	4a28      	ldr	r2, [pc, #160]	; (80015d8 <state_update+0x264>)
 8001538:	79fb      	ldrb	r3, [r7, #7]
 800153a:	7013      	strb	r3, [r2, #0]
	if (state != AVOID_COLLISION) {
 800153c:	4b26      	ldr	r3, [pc, #152]	; (80015d8 <state_update+0x264>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	2b04      	cmp	r3, #4
 8001542:	d003      	beq.n	800154c <state_update+0x1d8>
		prev_state = state;
 8001544:	4b24      	ldr	r3, [pc, #144]	; (80015d8 <state_update+0x264>)
 8001546:	781a      	ldrb	r2, [r3, #0]
 8001548:	4b24      	ldr	r3, [pc, #144]	; (80015dc <state_update+0x268>)
 800154a:	701a      	strb	r2, [r3, #0]
	}

	// enable interrupt
	if (state == COLLECT) {
 800154c:	4b22      	ldr	r3, [pc, #136]	; (80015d8 <state_update+0x264>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	2b02      	cmp	r3, #2
 8001552:	d103      	bne.n	800155c <state_update+0x1e8>
		HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001554:	201d      	movs	r0, #29
 8001556:	f003 fa80 	bl	8004a5a <HAL_NVIC_EnableIRQ>
			printf("Avoid_Collision: timer begin\n");
			HAL_TIM_Base_Start_IT(&htim5);
		}
		HAL_NVIC_EnableIRQ(TIM5_IRQn);
	}
}
 800155a:	e027      	b.n	80015ac <state_update+0x238>
	} else if (state == RETURN || state == SEARCH) {
 800155c:	4b1e      	ldr	r3, [pc, #120]	; (80015d8 <state_update+0x264>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	2b03      	cmp	r3, #3
 8001562:	d003      	beq.n	800156c <state_update+0x1f8>
 8001564:	4b1c      	ldr	r3, [pc, #112]	; (80015d8 <state_update+0x264>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	2b01      	cmp	r3, #1
 800156a:	d103      	bne.n	8001574 <state_update+0x200>
		HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800156c:	201b      	movs	r0, #27
 800156e:	f003 fa74 	bl	8004a5a <HAL_NVIC_EnableIRQ>
}
 8001572:	e01b      	b.n	80015ac <state_update+0x238>
	} else if (state == AVOID_COLLISION) {
 8001574:	4b18      	ldr	r3, [pc, #96]	; (80015d8 <state_update+0x264>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	2b04      	cmp	r3, #4
 800157a:	d117      	bne.n	80015ac <state_update+0x238>
		if (avoid_begin == 0) {
 800157c:	4b15      	ldr	r3, [pc, #84]	; (80015d4 <state_update+0x260>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d110      	bne.n	80015a6 <state_update+0x232>
			__HAL_TIM_CLEAR_FLAG(&htim5, TIM_SR_UIF);
 8001584:	4b18      	ldr	r3, [pc, #96]	; (80015e8 <state_update+0x274>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f06f 0201 	mvn.w	r2, #1
 800158c:	611a      	str	r2, [r3, #16]
			avoid_begin = 1;
 800158e:	4b11      	ldr	r3, [pc, #68]	; (80015d4 <state_update+0x260>)
 8001590:	2201      	movs	r2, #1
 8001592:	701a      	strb	r2, [r3, #0]
			TIM5->CNT= 0;
 8001594:	4b15      	ldr	r3, [pc, #84]	; (80015ec <state_update+0x278>)
 8001596:	2200      	movs	r2, #0
 8001598:	625a      	str	r2, [r3, #36]	; 0x24
			printf("Avoid_Collision: timer begin\n");
 800159a:	4815      	ldr	r0, [pc, #84]	; (80015f0 <state_update+0x27c>)
 800159c:	f00a fe66 	bl	800c26c <puts>
			HAL_TIM_Base_Start_IT(&htim5);
 80015a0:	4811      	ldr	r0, [pc, #68]	; (80015e8 <state_update+0x274>)
 80015a2:	f007 fbd1 	bl	8008d48 <HAL_TIM_Base_Start_IT>
		HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80015a6:	2032      	movs	r0, #50	; 0x32
 80015a8:	f003 fa57 	bl	8004a5a <HAL_NVIC_EnableIRQ>
}
 80015ac:	bf00      	nop
 80015ae:	3708      	adds	r7, #8
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	20000230 	.word	0x20000230
 80015b8:	20000228 	.word	0x20000228
 80015bc:	20000229 	.word	0x20000229
 80015c0:	2000022a 	.word	0x2000022a
 80015c4:	2000022b 	.word	0x2000022b
 80015c8:	2000022c 	.word	0x2000022c
 80015cc:	2000022d 	.word	0x2000022d
 80015d0:	2000022e 	.word	0x2000022e
 80015d4:	2000022f 	.word	0x2000022f
 80015d8:	20000226 	.word	0x20000226
 80015dc:	20000227 	.word	0x20000227
 80015e0:	20000234 	.word	0x20000234
 80015e4:	0800e220 	.word	0x0800e220
 80015e8:	200007a8 	.word	0x200007a8
 80015ec:	40000c00 	.word	0x40000c00
 80015f0:	0800e24c 	.word	0x0800e24c

080015f4 <execute>:

  }
}


void execute() {
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0

	rotor_control(1);
 80015f8:	2001      	movs	r0, #1
 80015fa:	f001 f8f7 	bl	80027ec <rotor_control>

	switch (state) {
 80015fe:	4b1c      	ldr	r3, [pc, #112]	; (8001670 <execute+0x7c>)
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	2b04      	cmp	r3, #4
 8001604:	d832      	bhi.n	800166c <execute+0x78>
 8001606:	a201      	add	r2, pc, #4	; (adr r2, 800160c <execute+0x18>)
 8001608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800160c:	0800166b 	.word	0x0800166b
 8001610:	08001621 	.word	0x08001621
 8001614:	0800165b 	.word	0x0800165b
 8001618:	0800166b 	.word	0x0800166b
 800161c:	08001663 	.word	0x08001663
//		motor_control(motor_mode);


		while (1) {
			static uint8_t local_motor_mode = 0;
			if (local_motor_mode == 7) local_motor_mode = 0;
 8001620:	4b14      	ldr	r3, [pc, #80]	; (8001674 <execute+0x80>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	2b07      	cmp	r3, #7
 8001626:	d102      	bne.n	800162e <execute+0x3a>
 8001628:	4b12      	ldr	r3, [pc, #72]	; (8001674 <execute+0x80>)
 800162a:	2200      	movs	r2, #0
 800162c:	701a      	strb	r2, [r3, #0]
			printf("Search: motor mode %d\n", local_motor_mode);
 800162e:	4b11      	ldr	r3, [pc, #68]	; (8001674 <execute+0x80>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	4619      	mov	r1, r3
 8001634:	4810      	ldr	r0, [pc, #64]	; (8001678 <execute+0x84>)
 8001636:	f00a fd93 	bl	800c160 <iprintf>
			motor_control(local_motor_mode);
 800163a:	4b0e      	ldr	r3, [pc, #56]	; (8001674 <execute+0x80>)
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	4618      	mov	r0, r3
 8001640:	f000 fffa 	bl	8002638 <motor_control>

			HAL_Delay(5000);
 8001644:	f241 3088 	movw	r0, #5000	; 0x1388
 8001648:	f002 f8e4 	bl	8003814 <HAL_Delay>
			local_motor_mode++;
 800164c:	4b09      	ldr	r3, [pc, #36]	; (8001674 <execute+0x80>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	3301      	adds	r3, #1
 8001652:	b2da      	uxtb	r2, r3
 8001654:	4b07      	ldr	r3, [pc, #28]	; (8001674 <execute+0x80>)
 8001656:	701a      	strb	r2, [r3, #0]
		while (1) {
 8001658:	e7e2      	b.n	8001620 <execute+0x2c>
//		ball_locked;
//		ball_not_found;
		break;
	}
	case COLLECT:
		rotor_control(0);
 800165a:	2000      	movs	r0, #0
 800165c:	f001 f8c6 	bl	80027ec <rotor_control>

		break;
 8001660:	e004      	b.n	800166c <execute+0x78>
	case RETURN:
		break;
	case AVOID_COLLISION:

		motor_control(1);
 8001662:	2001      	movs	r0, #1
 8001664:	f000 ffe8 	bl	8002638 <motor_control>
		break;
 8001668:	e000      	b.n	800166c <execute+0x78>
		break;
 800166a:	bf00      	nop
	}
}
 800166c:	bf00      	nop
 800166e:	bd80      	pop	{r7, pc}
 8001670:	20000226 	.word	0x20000226
 8001674:	20000238 	.word	0x20000238
 8001678:	0800e2b0 	.word	0x0800e2b0

0800167c <delay_loop>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void delay_loop(int time) {
 800167c:	b480      	push	{r7}
 800167e:	b085      	sub	sp, #20
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
	 for(volatile int j = 0; j < time; ++j)
 8001684:	2300      	movs	r3, #0
 8001686:	60fb      	str	r3, [r7, #12]
 8001688:	e00c      	b.n	80016a4 <delay_loop+0x28>
	  		  for (volatile int i = 0; i < 380; ++i) asm("");//1ms
 800168a:	2300      	movs	r3, #0
 800168c:	60bb      	str	r3, [r7, #8]
 800168e:	e002      	b.n	8001696 <delay_loop+0x1a>
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	3301      	adds	r3, #1
 8001694:	60bb      	str	r3, [r7, #8]
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	f5b3 7fbe 	cmp.w	r3, #380	; 0x17c
 800169c:	dbf8      	blt.n	8001690 <delay_loop+0x14>
	 for(volatile int j = 0; j < time; ++j)
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	3301      	adds	r3, #1
 80016a2:	60fb      	str	r3, [r7, #12]
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	dcee      	bgt.n	800168a <delay_loop+0xe>
}
 80016ac:	bf00      	nop
 80016ae:	bf00      	nop
 80016b0:	3714      	adds	r7, #20
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
	...

080016bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016c0:	f002 f833 	bl	800372a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016c4:	f000 f858 	bl	8001778 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80016c8:	f000 f8b8 	bl	800183c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016cc:	f000 fe90 	bl	80023f0 <MX_GPIO_Init>
  MX_ADC1_Init();
 80016d0:	f000 f8e6 	bl	80018a0 <MX_ADC1_Init>
  MX_CAN1_Init();
 80016d4:	f000 f948 	bl	8001968 <MX_CAN1_Init>
  MX_I2C1_SMBUS_Init();
 80016d8:	f000 f97a 	bl	80019d0 <MX_I2C1_SMBUS_Init>
  MX_I2C2_SMBUS_Init();
 80016dc:	f000 f9b2 	bl	8001a44 <MX_I2C2_SMBUS_Init>
  MX_LPUART1_UART_Init();
 80016e0:	f000 f9f2 	bl	8001ac8 <MX_LPUART1_UART_Init>
  MX_USART2_UART_Init();
 80016e4:	f000 fa3c 	bl	8001b60 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80016e8:	f000 fa88 	bl	8001bfc <MX_USART3_UART_Init>
  MX_SAI2_Init();
 80016ec:	f000 fad2 	bl	8001c94 <MX_SAI2_Init>
  MX_SPI1_Init();
 80016f0:	f000 fb38 	bl	8001d64 <MX_SPI1_Init>
  MX_SPI3_Init();
 80016f4:	f000 fb74 	bl	8001de0 <MX_SPI3_Init>
  MX_TIM1_Init();
 80016f8:	f000 fbb0 	bl	8001e5c <MX_TIM1_Init>
  MX_TIM2_Init();
 80016fc:	f000 fc24 	bl	8001f48 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001700:	f000 fc9a 	bl	8002038 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001704:	f000 fd0a 	bl	800211c <MX_TIM4_Init>
  MX_TIM15_Init();
 8001708:	f000 fde6 	bl	80022d8 <MX_TIM15_Init>
  MX_USB_OTG_FS_USB_Init();
 800170c:	f000 fe68 	bl	80023e0 <MX_USB_OTG_FS_USB_Init>
  MX_TIM5_Init();
 8001710:	f000 fd92 	bl	8002238 <MX_TIM5_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001714:	2100      	movs	r1, #0
 8001716:	4812      	ldr	r0, [pc, #72]	; (8001760 <main+0xa4>)
 8001718:	f007 fc0c 	bl	8008f34 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800171c:	2108      	movs	r1, #8
 800171e:	4810      	ldr	r0, [pc, #64]	; (8001760 <main+0xa4>)
 8001720:	f007 fc08 	bl	8008f34 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8001724:	210c      	movs	r1, #12
 8001726:	480e      	ldr	r0, [pc, #56]	; (8001760 <main+0xa4>)
 8001728:	f007 fc04 	bl	8008f34 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800172c:	2100      	movs	r1, #0
 800172e:	480d      	ldr	r0, [pc, #52]	; (8001764 <main+0xa8>)
 8001730:	f007 fc00 	bl	8008f34 <HAL_TIM_PWM_Start>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8001734:	2100      	movs	r1, #0
 8001736:	480c      	ldr	r0, [pc, #48]	; (8001768 <main+0xac>)
 8001738:	f007 fd64 	bl	8009204 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 800173c:	2104      	movs	r1, #4
 800173e:	480b      	ldr	r0, [pc, #44]	; (800176c <main+0xb0>)
 8001740:	f007 fd60 	bl	8009204 <HAL_TIM_IC_Start_IT>

  extern Pixy2 pixy;
  pixy2_init(&hspi1, GPIOB, GPIO_PIN_2);
 8001744:	2204      	movs	r2, #4
 8001746:	490a      	ldr	r1, [pc, #40]	; (8001770 <main+0xb4>)
 8001748:	480a      	ldr	r0, [pc, #40]	; (8001774 <main+0xb8>)
 800174a:	f7ff fd11 	bl	8001170 <pixy2_init>
//		  for(int i = 0; i < bruh; ++i) {
//			  printBlock(i);
//		  }
//	  }
//	  printf("main\n");
	  state_update();
 800174e:	f7ff fe11 	bl	8001374 <state_update>
	  execute();
 8001752:	f7ff ff4f 	bl	80015f4 <execute>
	  delay_loop(500);
 8001756:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800175a:	f7ff ff8f 	bl	800167c <delay_loop>
  {
 800175e:	e7f6      	b.n	800174e <main+0x92>
 8001760:	2000075c 	.word	0x2000075c
 8001764:	200006c4 	.word	0x200006c4
 8001768:	20000678 	.word	0x20000678
 800176c:	20000710 	.word	0x20000710
 8001770:	48000400 	.word	0x48000400
 8001774:	200005b0 	.word	0x200005b0

08001778 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b096      	sub	sp, #88	; 0x58
 800177c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800177e:	f107 0314 	add.w	r3, r7, #20
 8001782:	2244      	movs	r2, #68	; 0x44
 8001784:	2100      	movs	r1, #0
 8001786:	4618      	mov	r0, r3
 8001788:	f009 ff98 	bl	800b6bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800178c:	463b      	mov	r3, r7
 800178e:	2200      	movs	r2, #0
 8001790:	601a      	str	r2, [r3, #0]
 8001792:	605a      	str	r2, [r3, #4]
 8001794:	609a      	str	r2, [r3, #8]
 8001796:	60da      	str	r2, [r3, #12]
 8001798:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800179a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800179e:	f003 fb5f 	bl	8004e60 <HAL_PWREx_ControlVoltageScaling>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <SystemClock_Config+0x34>
  {
    Error_Handler();
 80017a8:	f000 ff40 	bl	800262c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80017ac:	f003 fb28 	bl	8004e00 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80017b0:	4b21      	ldr	r3, [pc, #132]	; (8001838 <SystemClock_Config+0xc0>)
 80017b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017b6:	4a20      	ldr	r2, [pc, #128]	; (8001838 <SystemClock_Config+0xc0>)
 80017b8:	f023 0318 	bic.w	r3, r3, #24
 80017bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80017c0:	2314      	movs	r3, #20
 80017c2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80017c4:	2301      	movs	r3, #1
 80017c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80017c8:	2301      	movs	r3, #1
 80017ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80017cc:	2300      	movs	r3, #0
 80017ce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80017d0:	2360      	movs	r3, #96	; 0x60
 80017d2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017d4:	2302      	movs	r3, #2
 80017d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80017d8:	2301      	movs	r3, #1
 80017da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80017dc:	2301      	movs	r3, #1
 80017de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80017e0:	2310      	movs	r3, #16
 80017e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017e4:	2302      	movs	r3, #2
 80017e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80017e8:	2302      	movs	r3, #2
 80017ea:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80017ec:	2302      	movs	r3, #2
 80017ee:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017f0:	f107 0314 	add.w	r3, r7, #20
 80017f4:	4618      	mov	r0, r3
 80017f6:	f003 fbe7 	bl	8004fc8 <HAL_RCC_OscConfig>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001800:	f000 ff14 	bl	800262c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001804:	230f      	movs	r3, #15
 8001806:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001808:	2303      	movs	r3, #3
 800180a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800180c:	2300      	movs	r3, #0
 800180e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001810:	2300      	movs	r3, #0
 8001812:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001814:	2300      	movs	r3, #0
 8001816:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001818:	463b      	mov	r3, r7
 800181a:	2101      	movs	r1, #1
 800181c:	4618      	mov	r0, r3
 800181e:	f003 ffed 	bl	80057fc <HAL_RCC_ClockConfig>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001828:	f000 ff00 	bl	800262c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800182c:	f005 fcf6 	bl	800721c <HAL_RCCEx_EnableMSIPLLMode>
}
 8001830:	bf00      	nop
 8001832:	3758      	adds	r7, #88	; 0x58
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	40021000 	.word	0x40021000

0800183c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b0a6      	sub	sp, #152	; 0x98
 8001840:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001842:	1d3b      	adds	r3, r7, #4
 8001844:	2294      	movs	r2, #148	; 0x94
 8001846:	2100      	movs	r1, #0
 8001848:	4618      	mov	r0, r3
 800184a:	f009 ff37 	bl	800b6bc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI2|RCC_PERIPHCLK_USB
 800184e:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001852:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI1;
 8001854:	2300      	movs	r3, #0
 8001856:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001858:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800185c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001860:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001864:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001866:	2301      	movs	r3, #1
 8001868:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800186a:	2301      	movs	r3, #1
 800186c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800186e:	2318      	movs	r3, #24
 8001870:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8001872:	2302      	movs	r3, #2
 8001874:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001876:	2302      	movs	r3, #2
 8001878:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800187a:	2302      	movs	r3, #2
 800187c:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_48M2CLK
 800187e:	4b07      	ldr	r3, [pc, #28]	; (800189c <PeriphCommonClock_Config+0x60>)
 8001880:	623b      	str	r3, [r7, #32]
                              |RCC_PLLSAI1_ADC1CLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001882:	1d3b      	adds	r3, r7, #4
 8001884:	4618      	mov	r0, r3
 8001886:	f004 fa77 	bl	8005d78 <HAL_RCCEx_PeriphCLKConfig>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 8001890:	f000 fecc 	bl	800262c <Error_Handler>
  }
}
 8001894:	bf00      	nop
 8001896:	3798      	adds	r7, #152	; 0x98
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	01110000 	.word	0x01110000

080018a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b086      	sub	sp, #24
 80018a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80018a6:	463b      	mov	r3, r7
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	605a      	str	r2, [r3, #4]
 80018ae:	609a      	str	r2, [r3, #8]
 80018b0:	60da      	str	r2, [r3, #12]
 80018b2:	611a      	str	r2, [r3, #16]
 80018b4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80018b6:	4b29      	ldr	r3, [pc, #164]	; (800195c <MX_ADC1_Init+0xbc>)
 80018b8:	4a29      	ldr	r2, [pc, #164]	; (8001960 <MX_ADC1_Init+0xc0>)
 80018ba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80018bc:	4b27      	ldr	r3, [pc, #156]	; (800195c <MX_ADC1_Init+0xbc>)
 80018be:	2200      	movs	r2, #0
 80018c0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80018c2:	4b26      	ldr	r3, [pc, #152]	; (800195c <MX_ADC1_Init+0xbc>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018c8:	4b24      	ldr	r3, [pc, #144]	; (800195c <MX_ADC1_Init+0xbc>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80018ce:	4b23      	ldr	r3, [pc, #140]	; (800195c <MX_ADC1_Init+0xbc>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80018d4:	4b21      	ldr	r3, [pc, #132]	; (800195c <MX_ADC1_Init+0xbc>)
 80018d6:	2204      	movs	r2, #4
 80018d8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80018da:	4b20      	ldr	r3, [pc, #128]	; (800195c <MX_ADC1_Init+0xbc>)
 80018dc:	2200      	movs	r2, #0
 80018de:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80018e0:	4b1e      	ldr	r3, [pc, #120]	; (800195c <MX_ADC1_Init+0xbc>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80018e6:	4b1d      	ldr	r3, [pc, #116]	; (800195c <MX_ADC1_Init+0xbc>)
 80018e8:	2201      	movs	r2, #1
 80018ea:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80018ec:	4b1b      	ldr	r3, [pc, #108]	; (800195c <MX_ADC1_Init+0xbc>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018f4:	4b19      	ldr	r3, [pc, #100]	; (800195c <MX_ADC1_Init+0xbc>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80018fa:	4b18      	ldr	r3, [pc, #96]	; (800195c <MX_ADC1_Init+0xbc>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001900:	4b16      	ldr	r3, [pc, #88]	; (800195c <MX_ADC1_Init+0xbc>)
 8001902:	2200      	movs	r2, #0
 8001904:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001908:	4b14      	ldr	r3, [pc, #80]	; (800195c <MX_ADC1_Init+0xbc>)
 800190a:	2200      	movs	r2, #0
 800190c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800190e:	4b13      	ldr	r3, [pc, #76]	; (800195c <MX_ADC1_Init+0xbc>)
 8001910:	2200      	movs	r2, #0
 8001912:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001916:	4811      	ldr	r0, [pc, #68]	; (800195c <MX_ADC1_Init+0xbc>)
 8001918:	f002 f940 	bl	8003b9c <HAL_ADC_Init>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8001922:	f000 fe83 	bl	800262c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001926:	4b0f      	ldr	r3, [pc, #60]	; (8001964 <MX_ADC1_Init+0xc4>)
 8001928:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800192a:	2306      	movs	r3, #6
 800192c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800192e:	2300      	movs	r3, #0
 8001930:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001932:	237f      	movs	r3, #127	; 0x7f
 8001934:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001936:	2304      	movs	r3, #4
 8001938:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800193a:	2300      	movs	r3, #0
 800193c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800193e:	463b      	mov	r3, r7
 8001940:	4619      	mov	r1, r3
 8001942:	4806      	ldr	r0, [pc, #24]	; (800195c <MX_ADC1_Init+0xbc>)
 8001944:	f002 fa76 	bl	8003e34 <HAL_ADC_ConfigChannel>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800194e:	f000 fe6d 	bl	800262c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001952:	bf00      	nop
 8001954:	3718      	adds	r7, #24
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	2000023c 	.word	0x2000023c
 8001960:	50040000 	.word	0x50040000
 8001964:	04300002 	.word	0x04300002

08001968 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800196c:	4b16      	ldr	r3, [pc, #88]	; (80019c8 <MX_CAN1_Init+0x60>)
 800196e:	4a17      	ldr	r2, [pc, #92]	; (80019cc <MX_CAN1_Init+0x64>)
 8001970:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8001972:	4b15      	ldr	r3, [pc, #84]	; (80019c8 <MX_CAN1_Init+0x60>)
 8001974:	2210      	movs	r2, #16
 8001976:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001978:	4b13      	ldr	r3, [pc, #76]	; (80019c8 <MX_CAN1_Init+0x60>)
 800197a:	2200      	movs	r2, #0
 800197c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800197e:	4b12      	ldr	r3, [pc, #72]	; (80019c8 <MX_CAN1_Init+0x60>)
 8001980:	2200      	movs	r2, #0
 8001982:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8001984:	4b10      	ldr	r3, [pc, #64]	; (80019c8 <MX_CAN1_Init+0x60>)
 8001986:	2200      	movs	r2, #0
 8001988:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800198a:	4b0f      	ldr	r3, [pc, #60]	; (80019c8 <MX_CAN1_Init+0x60>)
 800198c:	2200      	movs	r2, #0
 800198e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001990:	4b0d      	ldr	r3, [pc, #52]	; (80019c8 <MX_CAN1_Init+0x60>)
 8001992:	2200      	movs	r2, #0
 8001994:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001996:	4b0c      	ldr	r3, [pc, #48]	; (80019c8 <MX_CAN1_Init+0x60>)
 8001998:	2200      	movs	r2, #0
 800199a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800199c:	4b0a      	ldr	r3, [pc, #40]	; (80019c8 <MX_CAN1_Init+0x60>)
 800199e:	2200      	movs	r2, #0
 80019a0:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80019a2:	4b09      	ldr	r3, [pc, #36]	; (80019c8 <MX_CAN1_Init+0x60>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80019a8:	4b07      	ldr	r3, [pc, #28]	; (80019c8 <MX_CAN1_Init+0x60>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80019ae:	4b06      	ldr	r3, [pc, #24]	; (80019c8 <MX_CAN1_Init+0x60>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80019b4:	4804      	ldr	r0, [pc, #16]	; (80019c8 <MX_CAN1_Init+0x60>)
 80019b6:	f002 fe39 	bl	800462c <HAL_CAN_Init>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 80019c0:	f000 fe34 	bl	800262c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80019c4:	bf00      	nop
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	200002a4 	.word	0x200002a4
 80019cc:	40006400 	.word	0x40006400

080019d0 <MX_I2C1_SMBUS_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_SMBUS_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hsmbus1.Instance = I2C1;
 80019d4:	4b18      	ldr	r3, [pc, #96]	; (8001a38 <MX_I2C1_SMBUS_Init+0x68>)
 80019d6:	4a19      	ldr	r2, [pc, #100]	; (8001a3c <MX_I2C1_SMBUS_Init+0x6c>)
 80019d8:	601a      	str	r2, [r3, #0]
  hsmbus1.Init.Timing = 0x00707CBB;
 80019da:	4b17      	ldr	r3, [pc, #92]	; (8001a38 <MX_I2C1_SMBUS_Init+0x68>)
 80019dc:	4a18      	ldr	r2, [pc, #96]	; (8001a40 <MX_I2C1_SMBUS_Init+0x70>)
 80019de:	605a      	str	r2, [r3, #4]
  hsmbus1.Init.AnalogFilter = SMBUS_ANALOGFILTER_ENABLE;
 80019e0:	4b15      	ldr	r3, [pc, #84]	; (8001a38 <MX_I2C1_SMBUS_Init+0x68>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	609a      	str	r2, [r3, #8]
  hsmbus1.Init.OwnAddress1 = 2;
 80019e6:	4b14      	ldr	r3, [pc, #80]	; (8001a38 <MX_I2C1_SMBUS_Init+0x68>)
 80019e8:	2202      	movs	r2, #2
 80019ea:	60da      	str	r2, [r3, #12]
  hsmbus1.Init.AddressingMode = SMBUS_ADDRESSINGMODE_7BIT;
 80019ec:	4b12      	ldr	r3, [pc, #72]	; (8001a38 <MX_I2C1_SMBUS_Init+0x68>)
 80019ee:	2201      	movs	r2, #1
 80019f0:	611a      	str	r2, [r3, #16]
  hsmbus1.Init.DualAddressMode = SMBUS_DUALADDRESS_DISABLE;
 80019f2:	4b11      	ldr	r3, [pc, #68]	; (8001a38 <MX_I2C1_SMBUS_Init+0x68>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	615a      	str	r2, [r3, #20]
  hsmbus1.Init.OwnAddress2 = 0;
 80019f8:	4b0f      	ldr	r3, [pc, #60]	; (8001a38 <MX_I2C1_SMBUS_Init+0x68>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	619a      	str	r2, [r3, #24]
  hsmbus1.Init.OwnAddress2Masks = SMBUS_OA2_NOMASK;
 80019fe:	4b0e      	ldr	r3, [pc, #56]	; (8001a38 <MX_I2C1_SMBUS_Init+0x68>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	61da      	str	r2, [r3, #28]
  hsmbus1.Init.GeneralCallMode = SMBUS_GENERALCALL_DISABLE;
 8001a04:	4b0c      	ldr	r3, [pc, #48]	; (8001a38 <MX_I2C1_SMBUS_Init+0x68>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	621a      	str	r2, [r3, #32]
  hsmbus1.Init.NoStretchMode = SMBUS_NOSTRETCH_DISABLE;
 8001a0a:	4b0b      	ldr	r3, [pc, #44]	; (8001a38 <MX_I2C1_SMBUS_Init+0x68>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	625a      	str	r2, [r3, #36]	; 0x24
  hsmbus1.Init.PacketErrorCheckMode = SMBUS_PEC_DISABLE;
 8001a10:	4b09      	ldr	r3, [pc, #36]	; (8001a38 <MX_I2C1_SMBUS_Init+0x68>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	629a      	str	r2, [r3, #40]	; 0x28
  hsmbus1.Init.PeripheralMode = SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE;
 8001a16:	4b08      	ldr	r3, [pc, #32]	; (8001a38 <MX_I2C1_SMBUS_Init+0x68>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsmbus1.Init.SMBusTimeout = 0x00008186;
 8001a1c:	4b06      	ldr	r3, [pc, #24]	; (8001a38 <MX_I2C1_SMBUS_Init+0x68>)
 8001a1e:	f248 1286 	movw	r2, #33158	; 0x8186
 8001a22:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_SMBUS_Init(&hsmbus1) != HAL_OK)
 8001a24:	4804      	ldr	r0, [pc, #16]	; (8001a38 <MX_I2C1_SMBUS_Init+0x68>)
 8001a26:	f006 f91b 	bl	8007c60 <HAL_SMBUS_Init>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <MX_I2C1_SMBUS_Init+0x64>
  {
    Error_Handler();
 8001a30:	f000 fdfc 	bl	800262c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a34:	bf00      	nop
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	200002cc 	.word	0x200002cc
 8001a3c:	40005400 	.word	0x40005400
 8001a40:	00707cbb 	.word	0x00707cbb

08001a44 <MX_I2C2_SMBUS_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_SMBUS_Init(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hsmbus2.Instance = I2C2;
 8001a48:	4b1c      	ldr	r3, [pc, #112]	; (8001abc <MX_I2C2_SMBUS_Init+0x78>)
 8001a4a:	4a1d      	ldr	r2, [pc, #116]	; (8001ac0 <MX_I2C2_SMBUS_Init+0x7c>)
 8001a4c:	601a      	str	r2, [r3, #0]
  hsmbus2.Init.Timing = 0x00707CBB;
 8001a4e:	4b1b      	ldr	r3, [pc, #108]	; (8001abc <MX_I2C2_SMBUS_Init+0x78>)
 8001a50:	4a1c      	ldr	r2, [pc, #112]	; (8001ac4 <MX_I2C2_SMBUS_Init+0x80>)
 8001a52:	605a      	str	r2, [r3, #4]
  hsmbus2.Init.AnalogFilter = SMBUS_ANALOGFILTER_ENABLE;
 8001a54:	4b19      	ldr	r3, [pc, #100]	; (8001abc <MX_I2C2_SMBUS_Init+0x78>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	609a      	str	r2, [r3, #8]
  hsmbus2.Init.OwnAddress1 = 2;
 8001a5a:	4b18      	ldr	r3, [pc, #96]	; (8001abc <MX_I2C2_SMBUS_Init+0x78>)
 8001a5c:	2202      	movs	r2, #2
 8001a5e:	60da      	str	r2, [r3, #12]
  hsmbus2.Init.AddressingMode = SMBUS_ADDRESSINGMODE_7BIT;
 8001a60:	4b16      	ldr	r3, [pc, #88]	; (8001abc <MX_I2C2_SMBUS_Init+0x78>)
 8001a62:	2201      	movs	r2, #1
 8001a64:	611a      	str	r2, [r3, #16]
  hsmbus2.Init.DualAddressMode = SMBUS_DUALADDRESS_DISABLE;
 8001a66:	4b15      	ldr	r3, [pc, #84]	; (8001abc <MX_I2C2_SMBUS_Init+0x78>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	615a      	str	r2, [r3, #20]
  hsmbus2.Init.OwnAddress2 = 0;
 8001a6c:	4b13      	ldr	r3, [pc, #76]	; (8001abc <MX_I2C2_SMBUS_Init+0x78>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	619a      	str	r2, [r3, #24]
  hsmbus2.Init.OwnAddress2Masks = SMBUS_OA2_NOMASK;
 8001a72:	4b12      	ldr	r3, [pc, #72]	; (8001abc <MX_I2C2_SMBUS_Init+0x78>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	61da      	str	r2, [r3, #28]
  hsmbus2.Init.GeneralCallMode = SMBUS_GENERALCALL_DISABLE;
 8001a78:	4b10      	ldr	r3, [pc, #64]	; (8001abc <MX_I2C2_SMBUS_Init+0x78>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	621a      	str	r2, [r3, #32]
  hsmbus2.Init.NoStretchMode = SMBUS_NOSTRETCH_DISABLE;
 8001a7e:	4b0f      	ldr	r3, [pc, #60]	; (8001abc <MX_I2C2_SMBUS_Init+0x78>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	625a      	str	r2, [r3, #36]	; 0x24
  hsmbus2.Init.PacketErrorCheckMode = SMBUS_PEC_DISABLE;
 8001a84:	4b0d      	ldr	r3, [pc, #52]	; (8001abc <MX_I2C2_SMBUS_Init+0x78>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	629a      	str	r2, [r3, #40]	; 0x28
  hsmbus2.Init.PeripheralMode = SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE;
 8001a8a:	4b0c      	ldr	r3, [pc, #48]	; (8001abc <MX_I2C2_SMBUS_Init+0x78>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsmbus2.Init.SMBusTimeout = 0x00008186;
 8001a90:	4b0a      	ldr	r3, [pc, #40]	; (8001abc <MX_I2C2_SMBUS_Init+0x78>)
 8001a92:	f248 1286 	movw	r2, #33158	; 0x8186
 8001a96:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_SMBUS_Init(&hsmbus2) != HAL_OK)
 8001a98:	4808      	ldr	r0, [pc, #32]	; (8001abc <MX_I2C2_SMBUS_Init+0x78>)
 8001a9a:	f006 f8e1 	bl	8007c60 <HAL_SMBUS_Init>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <MX_I2C2_SMBUS_Init+0x64>
  {
    Error_Handler();
 8001aa4:	f000 fdc2 	bl	800262c <Error_Handler>
  }

  /** configuration Alert Mode
  */
  if (HAL_SMBUS_EnableAlert_IT(&hsmbus2) != HAL_OK)
 8001aa8:	4804      	ldr	r0, [pc, #16]	; (8001abc <MX_I2C2_SMBUS_Init+0x78>)
 8001aaa:	f006 f991 	bl	8007dd0 <HAL_SMBUS_EnableAlert_IT>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <MX_I2C2_SMBUS_Init+0x74>
  {
    Error_Handler();
 8001ab4:	f000 fdba 	bl	800262c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001ab8:	bf00      	nop
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	2000031c 	.word	0x2000031c
 8001ac0:	40005800 	.word	0x40005800
 8001ac4:	00707cbb 	.word	0x00707cbb

08001ac8 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001acc:	4b22      	ldr	r3, [pc, #136]	; (8001b58 <MX_LPUART1_UART_Init+0x90>)
 8001ace:	4a23      	ldr	r2, [pc, #140]	; (8001b5c <MX_LPUART1_UART_Init+0x94>)
 8001ad0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001ad2:	4b21      	ldr	r3, [pc, #132]	; (8001b58 <MX_LPUART1_UART_Init+0x90>)
 8001ad4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ad8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ada:	4b1f      	ldr	r3, [pc, #124]	; (8001b58 <MX_LPUART1_UART_Init+0x90>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001ae0:	4b1d      	ldr	r3, [pc, #116]	; (8001b58 <MX_LPUART1_UART_Init+0x90>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001ae6:	4b1c      	ldr	r3, [pc, #112]	; (8001b58 <MX_LPUART1_UART_Init+0x90>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001aec:	4b1a      	ldr	r3, [pc, #104]	; (8001b58 <MX_LPUART1_UART_Init+0x90>)
 8001aee:	220c      	movs	r2, #12
 8001af0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001af2:	4b19      	ldr	r3, [pc, #100]	; (8001b58 <MX_LPUART1_UART_Init+0x90>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001af8:	4b17      	ldr	r3, [pc, #92]	; (8001b58 <MX_LPUART1_UART_Init+0x90>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001afe:	4b16      	ldr	r3, [pc, #88]	; (8001b58 <MX_LPUART1_UART_Init+0x90>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b04:	4b14      	ldr	r3, [pc, #80]	; (8001b58 <MX_LPUART1_UART_Init+0x90>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8001b0a:	4b13      	ldr	r3, [pc, #76]	; (8001b58 <MX_LPUART1_UART_Init+0x90>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001b10:	4811      	ldr	r0, [pc, #68]	; (8001b58 <MX_LPUART1_UART_Init+0x90>)
 8001b12:	f008 ff05 	bl	800a920 <HAL_UART_Init>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8001b1c:	f000 fd86 	bl	800262c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b20:	2100      	movs	r1, #0
 8001b22:	480d      	ldr	r0, [pc, #52]	; (8001b58 <MX_LPUART1_UART_Init+0x90>)
 8001b24:	f009 fcce 	bl	800b4c4 <HAL_UARTEx_SetTxFifoThreshold>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001b2e:	f000 fd7d 	bl	800262c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b32:	2100      	movs	r1, #0
 8001b34:	4808      	ldr	r0, [pc, #32]	; (8001b58 <MX_LPUART1_UART_Init+0x90>)
 8001b36:	f009 fd03 	bl	800b540 <HAL_UARTEx_SetRxFifoThreshold>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001b40:	f000 fd74 	bl	800262c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001b44:	4804      	ldr	r0, [pc, #16]	; (8001b58 <MX_LPUART1_UART_Init+0x90>)
 8001b46:	f009 fc84 	bl	800b452 <HAL_UARTEx_DisableFifoMode>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001b50:	f000 fd6c 	bl	800262c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001b54:	bf00      	nop
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	2000036c 	.word	0x2000036c
 8001b5c:	40008000 	.word	0x40008000

08001b60 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b64:	4b23      	ldr	r3, [pc, #140]	; (8001bf4 <MX_USART2_UART_Init+0x94>)
 8001b66:	4a24      	ldr	r2, [pc, #144]	; (8001bf8 <MX_USART2_UART_Init+0x98>)
 8001b68:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b6a:	4b22      	ldr	r3, [pc, #136]	; (8001bf4 <MX_USART2_UART_Init+0x94>)
 8001b6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b70:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b72:	4b20      	ldr	r3, [pc, #128]	; (8001bf4 <MX_USART2_UART_Init+0x94>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b78:	4b1e      	ldr	r3, [pc, #120]	; (8001bf4 <MX_USART2_UART_Init+0x94>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b7e:	4b1d      	ldr	r3, [pc, #116]	; (8001bf4 <MX_USART2_UART_Init+0x94>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b84:	4b1b      	ldr	r3, [pc, #108]	; (8001bf4 <MX_USART2_UART_Init+0x94>)
 8001b86:	220c      	movs	r2, #12
 8001b88:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8001b8a:	4b1a      	ldr	r3, [pc, #104]	; (8001bf4 <MX_USART2_UART_Init+0x94>)
 8001b8c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001b90:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b92:	4b18      	ldr	r3, [pc, #96]	; (8001bf4 <MX_USART2_UART_Init+0x94>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b98:	4b16      	ldr	r3, [pc, #88]	; (8001bf4 <MX_USART2_UART_Init+0x94>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b9e:	4b15      	ldr	r3, [pc, #84]	; (8001bf4 <MX_USART2_UART_Init+0x94>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ba4:	4b13      	ldr	r3, [pc, #76]	; (8001bf4 <MX_USART2_UART_Init+0x94>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001baa:	4812      	ldr	r0, [pc, #72]	; (8001bf4 <MX_USART2_UART_Init+0x94>)
 8001bac:	f008 feb8 	bl	800a920 <HAL_UART_Init>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8001bb6:	f000 fd39 	bl	800262c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bba:	2100      	movs	r1, #0
 8001bbc:	480d      	ldr	r0, [pc, #52]	; (8001bf4 <MX_USART2_UART_Init+0x94>)
 8001bbe:	f009 fc81 	bl	800b4c4 <HAL_UARTEx_SetTxFifoThreshold>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8001bc8:	f000 fd30 	bl	800262c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bcc:	2100      	movs	r1, #0
 8001bce:	4809      	ldr	r0, [pc, #36]	; (8001bf4 <MX_USART2_UART_Init+0x94>)
 8001bd0:	f009 fcb6 	bl	800b540 <HAL_UARTEx_SetRxFifoThreshold>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8001bda:	f000 fd27 	bl	800262c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001bde:	4805      	ldr	r0, [pc, #20]	; (8001bf4 <MX_USART2_UART_Init+0x94>)
 8001be0:	f009 fc37 	bl	800b452 <HAL_UARTEx_DisableFifoMode>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8001bea:	f000 fd1f 	bl	800262c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001bee:	bf00      	nop
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	200003fc 	.word	0x200003fc
 8001bf8:	40004400 	.word	0x40004400

08001bfc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001c00:	4b22      	ldr	r3, [pc, #136]	; (8001c8c <MX_USART3_UART_Init+0x90>)
 8001c02:	4a23      	ldr	r2, [pc, #140]	; (8001c90 <MX_USART3_UART_Init+0x94>)
 8001c04:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001c06:	4b21      	ldr	r3, [pc, #132]	; (8001c8c <MX_USART3_UART_Init+0x90>)
 8001c08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c0c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001c0e:	4b1f      	ldr	r3, [pc, #124]	; (8001c8c <MX_USART3_UART_Init+0x90>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001c14:	4b1d      	ldr	r3, [pc, #116]	; (8001c8c <MX_USART3_UART_Init+0x90>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001c1a:	4b1c      	ldr	r3, [pc, #112]	; (8001c8c <MX_USART3_UART_Init+0x90>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001c20:	4b1a      	ldr	r3, [pc, #104]	; (8001c8c <MX_USART3_UART_Init+0x90>)
 8001c22:	220c      	movs	r2, #12
 8001c24:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c26:	4b19      	ldr	r3, [pc, #100]	; (8001c8c <MX_USART3_UART_Init+0x90>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c2c:	4b17      	ldr	r3, [pc, #92]	; (8001c8c <MX_USART3_UART_Init+0x90>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c32:	4b16      	ldr	r3, [pc, #88]	; (8001c8c <MX_USART3_UART_Init+0x90>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c38:	4b14      	ldr	r3, [pc, #80]	; (8001c8c <MX_USART3_UART_Init+0x90>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c3e:	4b13      	ldr	r3, [pc, #76]	; (8001c8c <MX_USART3_UART_Init+0x90>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001c44:	4811      	ldr	r0, [pc, #68]	; (8001c8c <MX_USART3_UART_Init+0x90>)
 8001c46:	f008 fe6b 	bl	800a920 <HAL_UART_Init>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d001      	beq.n	8001c54 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001c50:	f000 fcec 	bl	800262c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c54:	2100      	movs	r1, #0
 8001c56:	480d      	ldr	r0, [pc, #52]	; (8001c8c <MX_USART3_UART_Init+0x90>)
 8001c58:	f009 fc34 	bl	800b4c4 <HAL_UARTEx_SetTxFifoThreshold>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001c62:	f000 fce3 	bl	800262c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c66:	2100      	movs	r1, #0
 8001c68:	4808      	ldr	r0, [pc, #32]	; (8001c8c <MX_USART3_UART_Init+0x90>)
 8001c6a:	f009 fc69 	bl	800b540 <HAL_UARTEx_SetRxFifoThreshold>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001c74:	f000 fcda 	bl	800262c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001c78:	4804      	ldr	r0, [pc, #16]	; (8001c8c <MX_USART3_UART_Init+0x90>)
 8001c7a:	f009 fbea 	bl	800b452 <HAL_UARTEx_DisableFifoMode>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001c84:	f000 fcd2 	bl	800262c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001c88:	bf00      	nop
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	2000048c 	.word	0x2000048c
 8001c90:	40004800 	.word	0x40004800

08001c94 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8001c98:	4b2f      	ldr	r3, [pc, #188]	; (8001d58 <MX_SAI2_Init+0xc4>)
 8001c9a:	4a30      	ldr	r2, [pc, #192]	; (8001d5c <MX_SAI2_Init+0xc8>)
 8001c9c:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001c9e:	4b2e      	ldr	r3, [pc, #184]	; (8001d58 <MX_SAI2_Init+0xc4>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001ca4:	4b2c      	ldr	r3, [pc, #176]	; (8001d58 <MX_SAI2_Init+0xc4>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8001caa:	4b2b      	ldr	r3, [pc, #172]	; (8001d58 <MX_SAI2_Init+0xc4>)
 8001cac:	2240      	movs	r2, #64	; 0x40
 8001cae:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001cb0:	4b29      	ldr	r3, [pc, #164]	; (8001d58 <MX_SAI2_Init+0xc4>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001cb6:	4b28      	ldr	r3, [pc, #160]	; (8001d58 <MX_SAI2_Init+0xc4>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001cbc:	4b26      	ldr	r3, [pc, #152]	; (8001d58 <MX_SAI2_Init+0xc4>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001cc2:	4b25      	ldr	r3, [pc, #148]	; (8001d58 <MX_SAI2_Init+0xc4>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001cc8:	4b23      	ldr	r3, [pc, #140]	; (8001d58 <MX_SAI2_Init+0xc4>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8001cce:	4b22      	ldr	r3, [pc, #136]	; (8001d58 <MX_SAI2_Init+0xc4>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001cd4:	4b20      	ldr	r3, [pc, #128]	; (8001d58 <MX_SAI2_Init+0xc4>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001cda:	4b1f      	ldr	r3, [pc, #124]	; (8001d58 <MX_SAI2_Init+0xc4>)
 8001cdc:	4a20      	ldr	r2, [pc, #128]	; (8001d60 <MX_SAI2_Init+0xcc>)
 8001cde:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001ce0:	4b1d      	ldr	r3, [pc, #116]	; (8001d58 <MX_SAI2_Init+0xc4>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001ce6:	4b1c      	ldr	r3, [pc, #112]	; (8001d58 <MX_SAI2_Init+0xc4>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001cec:	4b1a      	ldr	r3, [pc, #104]	; (8001d58 <MX_SAI2_Init+0xc4>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001cf2:	4b19      	ldr	r3, [pc, #100]	; (8001d58 <MX_SAI2_Init+0xc4>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.PdmInit.Activation = DISABLE;
 8001cf8:	4b17      	ldr	r3, [pc, #92]	; (8001d58 <MX_SAI2_Init+0xc4>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.PdmInit.MicPairsNbr = 0;
 8001d00:	4b15      	ldr	r3, [pc, #84]	; (8001d58 <MX_SAI2_Init+0xc4>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8001d06:	4b14      	ldr	r3, [pc, #80]	; (8001d58 <MX_SAI2_Init+0xc4>)
 8001d08:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d0c:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8001d0e:	4b12      	ldr	r3, [pc, #72]	; (8001d58 <MX_SAI2_Init+0xc4>)
 8001d10:	2208      	movs	r2, #8
 8001d12:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8001d14:	4b10      	ldr	r3, [pc, #64]	; (8001d58 <MX_SAI2_Init+0xc4>)
 8001d16:	2201      	movs	r2, #1
 8001d18:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001d1a:	4b0f      	ldr	r3, [pc, #60]	; (8001d58 <MX_SAI2_Init+0xc4>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001d20:	4b0d      	ldr	r3, [pc, #52]	; (8001d58 <MX_SAI2_Init+0xc4>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001d26:	4b0c      	ldr	r3, [pc, #48]	; (8001d58 <MX_SAI2_Init+0xc4>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8001d2c:	4b0a      	ldr	r3, [pc, #40]	; (8001d58 <MX_SAI2_Init+0xc4>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001d32:	4b09      	ldr	r3, [pc, #36]	; (8001d58 <MX_SAI2_Init+0xc4>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8001d38:	4b07      	ldr	r3, [pc, #28]	; (8001d58 <MX_SAI2_Init+0xc4>)
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8001d3e:	4b06      	ldr	r3, [pc, #24]	; (8001d58 <MX_SAI2_Init+0xc4>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	671a      	str	r2, [r3, #112]	; 0x70
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8001d44:	4804      	ldr	r0, [pc, #16]	; (8001d58 <MX_SAI2_Init+0xc4>)
 8001d46:	f005 fd73 	bl	8007830 <HAL_SAI_Init>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <MX_SAI2_Init+0xc0>
  {
    Error_Handler();
 8001d50:	f000 fc6c 	bl	800262c <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8001d54:	bf00      	nop
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	2000051c 	.word	0x2000051c
 8001d5c:	40015804 	.word	0x40015804
 8001d60:	0002ee00 	.word	0x0002ee00

08001d64 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001d68:	4b1b      	ldr	r3, [pc, #108]	; (8001dd8 <MX_SPI1_Init+0x74>)
 8001d6a:	4a1c      	ldr	r2, [pc, #112]	; (8001ddc <MX_SPI1_Init+0x78>)
 8001d6c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d6e:	4b1a      	ldr	r3, [pc, #104]	; (8001dd8 <MX_SPI1_Init+0x74>)
 8001d70:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d74:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001d76:	4b18      	ldr	r3, [pc, #96]	; (8001dd8 <MX_SPI1_Init+0x74>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d7c:	4b16      	ldr	r3, [pc, #88]	; (8001dd8 <MX_SPI1_Init+0x74>)
 8001d7e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001d82:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d84:	4b14      	ldr	r3, [pc, #80]	; (8001dd8 <MX_SPI1_Init+0x74>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d8a:	4b13      	ldr	r3, [pc, #76]	; (8001dd8 <MX_SPI1_Init+0x74>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d90:	4b11      	ldr	r3, [pc, #68]	; (8001dd8 <MX_SPI1_Init+0x74>)
 8001d92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d96:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001d98:	4b0f      	ldr	r3, [pc, #60]	; (8001dd8 <MX_SPI1_Init+0x74>)
 8001d9a:	2218      	movs	r2, #24
 8001d9c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d9e:	4b0e      	ldr	r3, [pc, #56]	; (8001dd8 <MX_SPI1_Init+0x74>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001da4:	4b0c      	ldr	r3, [pc, #48]	; (8001dd8 <MX_SPI1_Init+0x74>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001daa:	4b0b      	ldr	r3, [pc, #44]	; (8001dd8 <MX_SPI1_Init+0x74>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001db0:	4b09      	ldr	r3, [pc, #36]	; (8001dd8 <MX_SPI1_Init+0x74>)
 8001db2:	2207      	movs	r2, #7
 8001db4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001db6:	4b08      	ldr	r3, [pc, #32]	; (8001dd8 <MX_SPI1_Init+0x74>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001dbc:	4b06      	ldr	r3, [pc, #24]	; (8001dd8 <MX_SPI1_Init+0x74>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001dc2:	4805      	ldr	r0, [pc, #20]	; (8001dd8 <MX_SPI1_Init+0x74>)
 8001dc4:	f006 f857 	bl	8007e76 <HAL_SPI_Init>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001dce:	f000 fc2d 	bl	800262c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001dd2:	bf00      	nop
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	200005b0 	.word	0x200005b0
 8001ddc:	40013000 	.word	0x40013000

08001de0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001de4:	4b1b      	ldr	r3, [pc, #108]	; (8001e54 <MX_SPI3_Init+0x74>)
 8001de6:	4a1c      	ldr	r2, [pc, #112]	; (8001e58 <MX_SPI3_Init+0x78>)
 8001de8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001dea:	4b1a      	ldr	r3, [pc, #104]	; (8001e54 <MX_SPI3_Init+0x74>)
 8001dec:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001df0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001df2:	4b18      	ldr	r3, [pc, #96]	; (8001e54 <MX_SPI3_Init+0x74>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8001df8:	4b16      	ldr	r3, [pc, #88]	; (8001e54 <MX_SPI3_Init+0x74>)
 8001dfa:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001dfe:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e00:	4b14      	ldr	r3, [pc, #80]	; (8001e54 <MX_SPI3_Init+0x74>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e06:	4b13      	ldr	r3, [pc, #76]	; (8001e54 <MX_SPI3_Init+0x74>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001e0c:	4b11      	ldr	r3, [pc, #68]	; (8001e54 <MX_SPI3_Init+0x74>)
 8001e0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e12:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e14:	4b0f      	ldr	r3, [pc, #60]	; (8001e54 <MX_SPI3_Init+0x74>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e1a:	4b0e      	ldr	r3, [pc, #56]	; (8001e54 <MX_SPI3_Init+0x74>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e20:	4b0c      	ldr	r3, [pc, #48]	; (8001e54 <MX_SPI3_Init+0x74>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e26:	4b0b      	ldr	r3, [pc, #44]	; (8001e54 <MX_SPI3_Init+0x74>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001e2c:	4b09      	ldr	r3, [pc, #36]	; (8001e54 <MX_SPI3_Init+0x74>)
 8001e2e:	2207      	movs	r2, #7
 8001e30:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001e32:	4b08      	ldr	r3, [pc, #32]	; (8001e54 <MX_SPI3_Init+0x74>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001e38:	4b06      	ldr	r3, [pc, #24]	; (8001e54 <MX_SPI3_Init+0x74>)
 8001e3a:	2208      	movs	r2, #8
 8001e3c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001e3e:	4805      	ldr	r0, [pc, #20]	; (8001e54 <MX_SPI3_Init+0x74>)
 8001e40:	f006 f819 	bl	8007e76 <HAL_SPI_Init>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001e4a:	f000 fbef 	bl	800262c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001e4e:	bf00      	nop
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	20000614 	.word	0x20000614
 8001e58:	40003c00 	.word	0x40003c00

08001e5c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b08c      	sub	sp, #48	; 0x30
 8001e60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e62:	f107 0320 	add.w	r3, r7, #32
 8001e66:	2200      	movs	r2, #0
 8001e68:	601a      	str	r2, [r3, #0]
 8001e6a:	605a      	str	r2, [r3, #4]
 8001e6c:	609a      	str	r2, [r3, #8]
 8001e6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e70:	f107 0314 	add.w	r3, r7, #20
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	605a      	str	r2, [r3, #4]
 8001e7a:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001e7c:	1d3b      	adds	r3, r7, #4
 8001e7e:	2200      	movs	r2, #0
 8001e80:	601a      	str	r2, [r3, #0]
 8001e82:	605a      	str	r2, [r3, #4]
 8001e84:	609a      	str	r2, [r3, #8]
 8001e86:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001e88:	4b2d      	ldr	r3, [pc, #180]	; (8001f40 <MX_TIM1_Init+0xe4>)
 8001e8a:	4a2e      	ldr	r2, [pc, #184]	; (8001f44 <MX_TIM1_Init+0xe8>)
 8001e8c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 31;
 8001e8e:	4b2c      	ldr	r3, [pc, #176]	; (8001f40 <MX_TIM1_Init+0xe4>)
 8001e90:	221f      	movs	r2, #31
 8001e92:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e94:	4b2a      	ldr	r3, [pc, #168]	; (8001f40 <MX_TIM1_Init+0xe4>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001e9a:	4b29      	ldr	r3, [pc, #164]	; (8001f40 <MX_TIM1_Init+0xe4>)
 8001e9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ea0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ea2:	4b27      	ldr	r3, [pc, #156]	; (8001f40 <MX_TIM1_Init+0xe4>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ea8:	4b25      	ldr	r3, [pc, #148]	; (8001f40 <MX_TIM1_Init+0xe4>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eae:	4b24      	ldr	r3, [pc, #144]	; (8001f40 <MX_TIM1_Init+0xe4>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001eb4:	4822      	ldr	r0, [pc, #136]	; (8001f40 <MX_TIM1_Init+0xe4>)
 8001eb6:	f006 feef 	bl	8008c98 <HAL_TIM_Base_Init>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8001ec0:	f000 fbb4 	bl	800262c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ec4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ec8:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001eca:	f107 0320 	add.w	r3, r7, #32
 8001ece:	4619      	mov	r1, r3
 8001ed0:	481b      	ldr	r0, [pc, #108]	; (8001f40 <MX_TIM1_Init+0xe4>)
 8001ed2:	f007 fdb1 	bl	8009a38 <HAL_TIM_ConfigClockSource>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8001edc:	f000 fba6 	bl	800262c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001ee0:	4817      	ldr	r0, [pc, #92]	; (8001f40 <MX_TIM1_Init+0xe4>)
 8001ee2:	f007 f92d 	bl	8009140 <HAL_TIM_IC_Init>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d001      	beq.n	8001ef0 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001eec:	f000 fb9e 	bl	800262c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001efc:	f107 0314 	add.w	r3, r7, #20
 8001f00:	4619      	mov	r1, r3
 8001f02:	480f      	ldr	r0, [pc, #60]	; (8001f40 <MX_TIM1_Init+0xe4>)
 8001f04:	f008 fbe8 	bl	800a6d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8001f0e:	f000 fb8d 	bl	800262c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001f12:	2300      	movs	r3, #0
 8001f14:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001f16:	2301      	movs	r3, #1
 8001f18:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001f22:	1d3b      	adds	r3, r7, #4
 8001f24:	2200      	movs	r2, #0
 8001f26:	4619      	mov	r1, r3
 8001f28:	4805      	ldr	r0, [pc, #20]	; (8001f40 <MX_TIM1_Init+0xe4>)
 8001f2a:	f007 fbd4 	bl	80096d6 <HAL_TIM_IC_ConfigChannel>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8001f34:	f000 fb7a 	bl	800262c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001f38:	bf00      	nop
 8001f3a:	3730      	adds	r7, #48	; 0x30
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	20000678 	.word	0x20000678
 8001f44:	40012c00 	.word	0x40012c00

08001f48 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b08e      	sub	sp, #56	; 0x38
 8001f4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f52:	2200      	movs	r2, #0
 8001f54:	601a      	str	r2, [r3, #0]
 8001f56:	605a      	str	r2, [r3, #4]
 8001f58:	609a      	str	r2, [r3, #8]
 8001f5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f5c:	f107 031c 	add.w	r3, r7, #28
 8001f60:	2200      	movs	r2, #0
 8001f62:	601a      	str	r2, [r3, #0]
 8001f64:	605a      	str	r2, [r3, #4]
 8001f66:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f68:	463b      	mov	r3, r7
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	601a      	str	r2, [r3, #0]
 8001f6e:	605a      	str	r2, [r3, #4]
 8001f70:	609a      	str	r2, [r3, #8]
 8001f72:	60da      	str	r2, [r3, #12]
 8001f74:	611a      	str	r2, [r3, #16]
 8001f76:	615a      	str	r2, [r3, #20]
 8001f78:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f7a:	4b2e      	ldr	r3, [pc, #184]	; (8002034 <MX_TIM2_Init+0xec>)
 8001f7c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f80:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 319;
 8001f82:	4b2c      	ldr	r3, [pc, #176]	; (8002034 <MX_TIM2_Init+0xec>)
 8001f84:	f240 123f 	movw	r2, #319	; 0x13f
 8001f88:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f8a:	4b2a      	ldr	r3, [pc, #168]	; (8002034 <MX_TIM2_Init+0xec>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4000;
 8001f90:	4b28      	ldr	r3, [pc, #160]	; (8002034 <MX_TIM2_Init+0xec>)
 8001f92:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8001f96:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f98:	4b26      	ldr	r3, [pc, #152]	; (8002034 <MX_TIM2_Init+0xec>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f9e:	4b25      	ldr	r3, [pc, #148]	; (8002034 <MX_TIM2_Init+0xec>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001fa4:	4823      	ldr	r0, [pc, #140]	; (8002034 <MX_TIM2_Init+0xec>)
 8001fa6:	f006 fe77 	bl	8008c98 <HAL_TIM_Base_Init>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8001fb0:	f000 fb3c 	bl	800262c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fb8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001fba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	481c      	ldr	r0, [pc, #112]	; (8002034 <MX_TIM2_Init+0xec>)
 8001fc2:	f007 fd39 	bl	8009a38 <HAL_TIM_ConfigClockSource>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8001fcc:	f000 fb2e 	bl	800262c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001fd0:	4818      	ldr	r0, [pc, #96]	; (8002034 <MX_TIM2_Init+0xec>)
 8001fd2:	f006 ff58 	bl	8008e86 <HAL_TIM_PWM_Init>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d001      	beq.n	8001fe0 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001fdc:	f000 fb26 	bl	800262c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001fe8:	f107 031c 	add.w	r3, r7, #28
 8001fec:	4619      	mov	r1, r3
 8001fee:	4811      	ldr	r0, [pc, #68]	; (8002034 <MX_TIM2_Init+0xec>)
 8001ff0:	f008 fb72 	bl	800a6d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8001ffa:	f000 fb17 	bl	800262c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ffe:	2360      	movs	r3, #96	; 0x60
 8002000:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1;
 8002002:	2301      	movs	r3, #1
 8002004:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002006:	2300      	movs	r3, #0
 8002008:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800200a:	2300      	movs	r3, #0
 800200c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800200e:	463b      	mov	r3, r7
 8002010:	2200      	movs	r2, #0
 8002012:	4619      	mov	r1, r3
 8002014:	4807      	ldr	r0, [pc, #28]	; (8002034 <MX_TIM2_Init+0xec>)
 8002016:	f007 fbfb 	bl	8009810 <HAL_TIM_PWM_ConfigChannel>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d001      	beq.n	8002024 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8002020:	f000 fb04 	bl	800262c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002024:	4803      	ldr	r0, [pc, #12]	; (8002034 <MX_TIM2_Init+0xec>)
 8002026:	f001 f875 	bl	8003114 <HAL_TIM_MspPostInit>

}
 800202a:	bf00      	nop
 800202c:	3738      	adds	r7, #56	; 0x38
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	200006c4 	.word	0x200006c4

08002038 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b08c      	sub	sp, #48	; 0x30
 800203c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800203e:	f107 0320 	add.w	r3, r7, #32
 8002042:	2200      	movs	r2, #0
 8002044:	601a      	str	r2, [r3, #0]
 8002046:	605a      	str	r2, [r3, #4]
 8002048:	609a      	str	r2, [r3, #8]
 800204a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800204c:	f107 0314 	add.w	r3, r7, #20
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]
 8002054:	605a      	str	r2, [r3, #4]
 8002056:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002058:	1d3b      	adds	r3, r7, #4
 800205a:	2200      	movs	r2, #0
 800205c:	601a      	str	r2, [r3, #0]
 800205e:	605a      	str	r2, [r3, #4]
 8002060:	609a      	str	r2, [r3, #8]
 8002062:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002064:	4b2b      	ldr	r3, [pc, #172]	; (8002114 <MX_TIM3_Init+0xdc>)
 8002066:	4a2c      	ldr	r2, [pc, #176]	; (8002118 <MX_TIM3_Init+0xe0>)
 8002068:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 31999;
 800206a:	4b2a      	ldr	r3, [pc, #168]	; (8002114 <MX_TIM3_Init+0xdc>)
 800206c:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8002070:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002072:	4b28      	ldr	r3, [pc, #160]	; (8002114 <MX_TIM3_Init+0xdc>)
 8002074:	2200      	movs	r2, #0
 8002076:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 32000;
 8002078:	4b26      	ldr	r3, [pc, #152]	; (8002114 <MX_TIM3_Init+0xdc>)
 800207a:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 800207e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002080:	4b24      	ldr	r3, [pc, #144]	; (8002114 <MX_TIM3_Init+0xdc>)
 8002082:	2200      	movs	r2, #0
 8002084:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002086:	4b23      	ldr	r3, [pc, #140]	; (8002114 <MX_TIM3_Init+0xdc>)
 8002088:	2200      	movs	r2, #0
 800208a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800208c:	4821      	ldr	r0, [pc, #132]	; (8002114 <MX_TIM3_Init+0xdc>)
 800208e:	f006 fe03 	bl	8008c98 <HAL_TIM_Base_Init>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d001      	beq.n	800209c <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8002098:	f000 fac8 	bl	800262c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800209c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020a0:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80020a2:	f107 0320 	add.w	r3, r7, #32
 80020a6:	4619      	mov	r1, r3
 80020a8:	481a      	ldr	r0, [pc, #104]	; (8002114 <MX_TIM3_Init+0xdc>)
 80020aa:	f007 fcc5 	bl	8009a38 <HAL_TIM_ConfigClockSource>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d001      	beq.n	80020b8 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 80020b4:	f000 faba 	bl	800262c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80020b8:	4816      	ldr	r0, [pc, #88]	; (8002114 <MX_TIM3_Init+0xdc>)
 80020ba:	f007 f841 	bl	8009140 <HAL_TIM_IC_Init>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d001      	beq.n	80020c8 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80020c4:	f000 fab2 	bl	800262c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020c8:	2300      	movs	r3, #0
 80020ca:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020cc:	2300      	movs	r3, #0
 80020ce:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80020d0:	f107 0314 	add.w	r3, r7, #20
 80020d4:	4619      	mov	r1, r3
 80020d6:	480f      	ldr	r0, [pc, #60]	; (8002114 <MX_TIM3_Init+0xdc>)
 80020d8:	f008 fafe 	bl	800a6d8 <HAL_TIMEx_MasterConfigSynchronization>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 80020e2:	f000 faa3 	bl	800262c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80020e6:	2302      	movs	r3, #2
 80020e8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80020ea:	2301      	movs	r3, #1
 80020ec:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80020ee:	2300      	movs	r3, #0
 80020f0:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80020f2:	2300      	movs	r3, #0
 80020f4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80020f6:	1d3b      	adds	r3, r7, #4
 80020f8:	2204      	movs	r2, #4
 80020fa:	4619      	mov	r1, r3
 80020fc:	4805      	ldr	r0, [pc, #20]	; (8002114 <MX_TIM3_Init+0xdc>)
 80020fe:	f007 faea 	bl	80096d6 <HAL_TIM_IC_ConfigChannel>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d001      	beq.n	800210c <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8002108:	f000 fa90 	bl	800262c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800210c:	bf00      	nop
 800210e:	3730      	adds	r7, #48	; 0x30
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	20000710 	.word	0x20000710
 8002118:	40000400 	.word	0x40000400

0800211c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b08e      	sub	sp, #56	; 0x38
 8002120:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002122:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002126:	2200      	movs	r2, #0
 8002128:	601a      	str	r2, [r3, #0]
 800212a:	605a      	str	r2, [r3, #4]
 800212c:	609a      	str	r2, [r3, #8]
 800212e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002130:	f107 031c 	add.w	r3, r7, #28
 8002134:	2200      	movs	r2, #0
 8002136:	601a      	str	r2, [r3, #0]
 8002138:	605a      	str	r2, [r3, #4]
 800213a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800213c:	463b      	mov	r3, r7
 800213e:	2200      	movs	r2, #0
 8002140:	601a      	str	r2, [r3, #0]
 8002142:	605a      	str	r2, [r3, #4]
 8002144:	609a      	str	r2, [r3, #8]
 8002146:	60da      	str	r2, [r3, #12]
 8002148:	611a      	str	r2, [r3, #16]
 800214a:	615a      	str	r2, [r3, #20]
 800214c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800214e:	4b38      	ldr	r3, [pc, #224]	; (8002230 <MX_TIM4_Init+0x114>)
 8002150:	4a38      	ldr	r2, [pc, #224]	; (8002234 <MX_TIM4_Init+0x118>)
 8002152:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 6399;
 8002154:	4b36      	ldr	r3, [pc, #216]	; (8002230 <MX_TIM4_Init+0x114>)
 8002156:	f641 02ff 	movw	r2, #6399	; 0x18ff
 800215a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800215c:	4b34      	ldr	r3, [pc, #208]	; (8002230 <MX_TIM4_Init+0x114>)
 800215e:	2200      	movs	r2, #0
 8002160:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 8002162:	4b33      	ldr	r3, [pc, #204]	; (8002230 <MX_TIM4_Init+0x114>)
 8002164:	2264      	movs	r2, #100	; 0x64
 8002166:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002168:	4b31      	ldr	r3, [pc, #196]	; (8002230 <MX_TIM4_Init+0x114>)
 800216a:	2200      	movs	r2, #0
 800216c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800216e:	4b30      	ldr	r3, [pc, #192]	; (8002230 <MX_TIM4_Init+0x114>)
 8002170:	2200      	movs	r2, #0
 8002172:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002174:	482e      	ldr	r0, [pc, #184]	; (8002230 <MX_TIM4_Init+0x114>)
 8002176:	f006 fd8f 	bl	8008c98 <HAL_TIM_Base_Init>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8002180:	f000 fa54 	bl	800262c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002184:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002188:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800218a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800218e:	4619      	mov	r1, r3
 8002190:	4827      	ldr	r0, [pc, #156]	; (8002230 <MX_TIM4_Init+0x114>)
 8002192:	f007 fc51 	bl	8009a38 <HAL_TIM_ConfigClockSource>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d001      	beq.n	80021a0 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 800219c:	f000 fa46 	bl	800262c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80021a0:	4823      	ldr	r0, [pc, #140]	; (8002230 <MX_TIM4_Init+0x114>)
 80021a2:	f006 fe70 	bl	8008e86 <HAL_TIM_PWM_Init>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d001      	beq.n	80021b0 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80021ac:	f000 fa3e 	bl	800262c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021b0:	2300      	movs	r3, #0
 80021b2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021b4:	2300      	movs	r3, #0
 80021b6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80021b8:	f107 031c 	add.w	r3, r7, #28
 80021bc:	4619      	mov	r1, r3
 80021be:	481c      	ldr	r0, [pc, #112]	; (8002230 <MX_TIM4_Init+0x114>)
 80021c0:	f008 fa8a 	bl	800a6d8 <HAL_TIMEx_MasterConfigSynchronization>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d001      	beq.n	80021ce <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80021ca:	f000 fa2f 	bl	800262c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021ce:	2360      	movs	r3, #96	; 0x60
 80021d0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80021d2:	2300      	movs	r3, #0
 80021d4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021d6:	2300      	movs	r3, #0
 80021d8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021da:	2300      	movs	r3, #0
 80021dc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021de:	463b      	mov	r3, r7
 80021e0:	2200      	movs	r2, #0
 80021e2:	4619      	mov	r1, r3
 80021e4:	4812      	ldr	r0, [pc, #72]	; (8002230 <MX_TIM4_Init+0x114>)
 80021e6:	f007 fb13 	bl	8009810 <HAL_TIM_PWM_ConfigChannel>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d001      	beq.n	80021f4 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80021f0:	f000 fa1c 	bl	800262c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80021f4:	463b      	mov	r3, r7
 80021f6:	2208      	movs	r2, #8
 80021f8:	4619      	mov	r1, r3
 80021fa:	480d      	ldr	r0, [pc, #52]	; (8002230 <MX_TIM4_Init+0x114>)
 80021fc:	f007 fb08 	bl	8009810 <HAL_TIM_PWM_ConfigChannel>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 8002206:	f000 fa11 	bl	800262c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800220a:	463b      	mov	r3, r7
 800220c:	220c      	movs	r2, #12
 800220e:	4619      	mov	r1, r3
 8002210:	4807      	ldr	r0, [pc, #28]	; (8002230 <MX_TIM4_Init+0x114>)
 8002212:	f007 fafd 	bl	8009810 <HAL_TIM_PWM_ConfigChannel>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d001      	beq.n	8002220 <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 800221c:	f000 fa06 	bl	800262c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002220:	4803      	ldr	r0, [pc, #12]	; (8002230 <MX_TIM4_Init+0x114>)
 8002222:	f000 ff77 	bl	8003114 <HAL_TIM_MspPostInit>

}
 8002226:	bf00      	nop
 8002228:	3738      	adds	r7, #56	; 0x38
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	2000075c 	.word	0x2000075c
 8002234:	40000800 	.word	0x40000800

08002238 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b088      	sub	sp, #32
 800223c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800223e:	f107 0310 	add.w	r3, r7, #16
 8002242:	2200      	movs	r2, #0
 8002244:	601a      	str	r2, [r3, #0]
 8002246:	605a      	str	r2, [r3, #4]
 8002248:	609a      	str	r2, [r3, #8]
 800224a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800224c:	1d3b      	adds	r3, r7, #4
 800224e:	2200      	movs	r2, #0
 8002250:	601a      	str	r2, [r3, #0]
 8002252:	605a      	str	r2, [r3, #4]
 8002254:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002256:	4b1e      	ldr	r3, [pc, #120]	; (80022d0 <MX_TIM5_Init+0x98>)
 8002258:	4a1e      	ldr	r2, [pc, #120]	; (80022d4 <MX_TIM5_Init+0x9c>)
 800225a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 31999;
 800225c:	4b1c      	ldr	r3, [pc, #112]	; (80022d0 <MX_TIM5_Init+0x98>)
 800225e:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8002262:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002264:	4b1a      	ldr	r3, [pc, #104]	; (80022d0 <MX_TIM5_Init+0x98>)
 8002266:	2200      	movs	r2, #0
 8002268:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 5000;
 800226a:	4b19      	ldr	r3, [pc, #100]	; (80022d0 <MX_TIM5_Init+0x98>)
 800226c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002270:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002272:	4b17      	ldr	r3, [pc, #92]	; (80022d0 <MX_TIM5_Init+0x98>)
 8002274:	2200      	movs	r2, #0
 8002276:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002278:	4b15      	ldr	r3, [pc, #84]	; (80022d0 <MX_TIM5_Init+0x98>)
 800227a:	2200      	movs	r2, #0
 800227c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800227e:	4814      	ldr	r0, [pc, #80]	; (80022d0 <MX_TIM5_Init+0x98>)
 8002280:	f006 fd0a 	bl	8008c98 <HAL_TIM_Base_Init>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d001      	beq.n	800228e <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 800228a:	f000 f9cf 	bl	800262c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800228e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002292:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002294:	f107 0310 	add.w	r3, r7, #16
 8002298:	4619      	mov	r1, r3
 800229a:	480d      	ldr	r0, [pc, #52]	; (80022d0 <MX_TIM5_Init+0x98>)
 800229c:	f007 fbcc 	bl	8009a38 <HAL_TIM_ConfigClockSource>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 80022a6:	f000 f9c1 	bl	800262c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022aa:	2300      	movs	r3, #0
 80022ac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022ae:	2300      	movs	r3, #0
 80022b0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80022b2:	1d3b      	adds	r3, r7, #4
 80022b4:	4619      	mov	r1, r3
 80022b6:	4806      	ldr	r0, [pc, #24]	; (80022d0 <MX_TIM5_Init+0x98>)
 80022b8:	f008 fa0e 	bl	800a6d8 <HAL_TIMEx_MasterConfigSynchronization>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 80022c2:	f000 f9b3 	bl	800262c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80022c6:	bf00      	nop
 80022c8:	3720      	adds	r7, #32
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	200007a8 	.word	0x200007a8
 80022d4:	40000c00 	.word	0x40000c00

080022d8 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b096      	sub	sp, #88	; 0x58
 80022dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022de:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80022e2:	2200      	movs	r2, #0
 80022e4:	601a      	str	r2, [r3, #0]
 80022e6:	605a      	str	r2, [r3, #4]
 80022e8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80022ee:	2200      	movs	r2, #0
 80022f0:	601a      	str	r2, [r3, #0]
 80022f2:	605a      	str	r2, [r3, #4]
 80022f4:	609a      	str	r2, [r3, #8]
 80022f6:	60da      	str	r2, [r3, #12]
 80022f8:	611a      	str	r2, [r3, #16]
 80022fa:	615a      	str	r2, [r3, #20]
 80022fc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80022fe:	1d3b      	adds	r3, r7, #4
 8002300:	222c      	movs	r2, #44	; 0x2c
 8002302:	2100      	movs	r1, #0
 8002304:	4618      	mov	r0, r3
 8002306:	f009 f9d9 	bl	800b6bc <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800230a:	4b33      	ldr	r3, [pc, #204]	; (80023d8 <MX_TIM15_Init+0x100>)
 800230c:	4a33      	ldr	r2, [pc, #204]	; (80023dc <MX_TIM15_Init+0x104>)
 800230e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8002310:	4b31      	ldr	r3, [pc, #196]	; (80023d8 <MX_TIM15_Init+0x100>)
 8002312:	2200      	movs	r2, #0
 8002314:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002316:	4b30      	ldr	r3, [pc, #192]	; (80023d8 <MX_TIM15_Init+0x100>)
 8002318:	2200      	movs	r2, #0
 800231a:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 800231c:	4b2e      	ldr	r3, [pc, #184]	; (80023d8 <MX_TIM15_Init+0x100>)
 800231e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002322:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002324:	4b2c      	ldr	r3, [pc, #176]	; (80023d8 <MX_TIM15_Init+0x100>)
 8002326:	2200      	movs	r2, #0
 8002328:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800232a:	4b2b      	ldr	r3, [pc, #172]	; (80023d8 <MX_TIM15_Init+0x100>)
 800232c:	2200      	movs	r2, #0
 800232e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002330:	4b29      	ldr	r3, [pc, #164]	; (80023d8 <MX_TIM15_Init+0x100>)
 8002332:	2200      	movs	r2, #0
 8002334:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8002336:	4828      	ldr	r0, [pc, #160]	; (80023d8 <MX_TIM15_Init+0x100>)
 8002338:	f006 fda5 	bl	8008e86 <HAL_TIM_PWM_Init>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8002342:	f000 f973 	bl	800262c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002346:	2300      	movs	r3, #0
 8002348:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800234a:	2300      	movs	r3, #0
 800234c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800234e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002352:	4619      	mov	r1, r3
 8002354:	4820      	ldr	r0, [pc, #128]	; (80023d8 <MX_TIM15_Init+0x100>)
 8002356:	f008 f9bf 	bl	800a6d8 <HAL_TIMEx_MasterConfigSynchronization>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8002360:	f000 f964 	bl	800262c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002364:	2360      	movs	r3, #96	; 0x60
 8002366:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8002368:	2300      	movs	r3, #0
 800236a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800236c:	2300      	movs	r3, #0
 800236e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002370:	2300      	movs	r3, #0
 8002372:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002374:	2300      	movs	r3, #0
 8002376:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002378:	2300      	movs	r3, #0
 800237a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800237c:	2300      	movs	r3, #0
 800237e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002380:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002384:	2200      	movs	r2, #0
 8002386:	4619      	mov	r1, r3
 8002388:	4813      	ldr	r0, [pc, #76]	; (80023d8 <MX_TIM15_Init+0x100>)
 800238a:	f007 fa41 	bl	8009810 <HAL_TIM_PWM_ConfigChannel>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d001      	beq.n	8002398 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8002394:	f000 f94a 	bl	800262c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002398:	2300      	movs	r3, #0
 800239a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800239c:	2300      	movs	r3, #0
 800239e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80023a0:	2300      	movs	r3, #0
 80023a2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80023a4:	2300      	movs	r3, #0
 80023a6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80023a8:	2300      	movs	r3, #0
 80023aa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80023ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023b0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80023b2:	2300      	movs	r3, #0
 80023b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80023b6:	1d3b      	adds	r3, r7, #4
 80023b8:	4619      	mov	r1, r3
 80023ba:	4807      	ldr	r0, [pc, #28]	; (80023d8 <MX_TIM15_Init+0x100>)
 80023bc:	f008 fa14 	bl	800a7e8 <HAL_TIMEx_ConfigBreakDeadTime>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <MX_TIM15_Init+0xf2>
  {
    Error_Handler();
 80023c6:	f000 f931 	bl	800262c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80023ca:	4803      	ldr	r0, [pc, #12]	; (80023d8 <MX_TIM15_Init+0x100>)
 80023cc:	f000 fea2 	bl	8003114 <HAL_TIM_MspPostInit>

}
 80023d0:	bf00      	nop
 80023d2:	3758      	adds	r7, #88	; 0x58
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	200007f4 	.word	0x200007f4
 80023dc:	40014000 	.word	0x40014000

080023e0 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80023e4:	bf00      	nop
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
	...

080023f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b08e      	sub	sp, #56	; 0x38
 80023f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023fa:	2200      	movs	r2, #0
 80023fc:	601a      	str	r2, [r3, #0]
 80023fe:	605a      	str	r2, [r3, #4]
 8002400:	609a      	str	r2, [r3, #8]
 8002402:	60da      	str	r2, [r3, #12]
 8002404:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002406:	4b79      	ldr	r3, [pc, #484]	; (80025ec <MX_GPIO_Init+0x1fc>)
 8002408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800240a:	4a78      	ldr	r2, [pc, #480]	; (80025ec <MX_GPIO_Init+0x1fc>)
 800240c:	f043 0310 	orr.w	r3, r3, #16
 8002410:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002412:	4b76      	ldr	r3, [pc, #472]	; (80025ec <MX_GPIO_Init+0x1fc>)
 8002414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002416:	f003 0310 	and.w	r3, r3, #16
 800241a:	623b      	str	r3, [r7, #32]
 800241c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800241e:	4b73      	ldr	r3, [pc, #460]	; (80025ec <MX_GPIO_Init+0x1fc>)
 8002420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002422:	4a72      	ldr	r2, [pc, #456]	; (80025ec <MX_GPIO_Init+0x1fc>)
 8002424:	f043 0304 	orr.w	r3, r3, #4
 8002428:	64d3      	str	r3, [r2, #76]	; 0x4c
 800242a:	4b70      	ldr	r3, [pc, #448]	; (80025ec <MX_GPIO_Init+0x1fc>)
 800242c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800242e:	f003 0304 	and.w	r3, r3, #4
 8002432:	61fb      	str	r3, [r7, #28]
 8002434:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002436:	4b6d      	ldr	r3, [pc, #436]	; (80025ec <MX_GPIO_Init+0x1fc>)
 8002438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800243a:	4a6c      	ldr	r2, [pc, #432]	; (80025ec <MX_GPIO_Init+0x1fc>)
 800243c:	f043 0320 	orr.w	r3, r3, #32
 8002440:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002442:	4b6a      	ldr	r3, [pc, #424]	; (80025ec <MX_GPIO_Init+0x1fc>)
 8002444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002446:	f003 0320 	and.w	r3, r3, #32
 800244a:	61bb      	str	r3, [r7, #24]
 800244c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800244e:	4b67      	ldr	r3, [pc, #412]	; (80025ec <MX_GPIO_Init+0x1fc>)
 8002450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002452:	4a66      	ldr	r2, [pc, #408]	; (80025ec <MX_GPIO_Init+0x1fc>)
 8002454:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002458:	64d3      	str	r3, [r2, #76]	; 0x4c
 800245a:	4b64      	ldr	r3, [pc, #400]	; (80025ec <MX_GPIO_Init+0x1fc>)
 800245c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800245e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002462:	617b      	str	r3, [r7, #20]
 8002464:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002466:	4b61      	ldr	r3, [pc, #388]	; (80025ec <MX_GPIO_Init+0x1fc>)
 8002468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800246a:	4a60      	ldr	r2, [pc, #384]	; (80025ec <MX_GPIO_Init+0x1fc>)
 800246c:	f043 0301 	orr.w	r3, r3, #1
 8002470:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002472:	4b5e      	ldr	r3, [pc, #376]	; (80025ec <MX_GPIO_Init+0x1fc>)
 8002474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002476:	f003 0301 	and.w	r3, r3, #1
 800247a:	613b      	str	r3, [r7, #16]
 800247c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800247e:	4b5b      	ldr	r3, [pc, #364]	; (80025ec <MX_GPIO_Init+0x1fc>)
 8002480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002482:	4a5a      	ldr	r2, [pc, #360]	; (80025ec <MX_GPIO_Init+0x1fc>)
 8002484:	f043 0302 	orr.w	r3, r3, #2
 8002488:	64d3      	str	r3, [r2, #76]	; 0x4c
 800248a:	4b58      	ldr	r3, [pc, #352]	; (80025ec <MX_GPIO_Init+0x1fc>)
 800248c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800248e:	f003 0302 	and.w	r3, r3, #2
 8002492:	60fb      	str	r3, [r7, #12]
 8002494:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002496:	4b55      	ldr	r3, [pc, #340]	; (80025ec <MX_GPIO_Init+0x1fc>)
 8002498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800249a:	4a54      	ldr	r2, [pc, #336]	; (80025ec <MX_GPIO_Init+0x1fc>)
 800249c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024a2:	4b52      	ldr	r3, [pc, #328]	; (80025ec <MX_GPIO_Init+0x1fc>)
 80024a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024aa:	60bb      	str	r3, [r7, #8]
 80024ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80024ae:	4b4f      	ldr	r3, [pc, #316]	; (80025ec <MX_GPIO_Init+0x1fc>)
 80024b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024b2:	4a4e      	ldr	r2, [pc, #312]	; (80025ec <MX_GPIO_Init+0x1fc>)
 80024b4:	f043 0308 	orr.w	r3, r3, #8
 80024b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024ba:	4b4c      	ldr	r3, [pc, #304]	; (80025ec <MX_GPIO_Init+0x1fc>)
 80024bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024be:	f003 0308 	and.w	r3, r3, #8
 80024c2:	607b      	str	r3, [r7, #4]
 80024c4:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 80024c6:	f002 fd6f 	bl	8004fa8 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 80024ca:	2200      	movs	r2, #0
 80024cc:	f44f 5146 	mov.w	r1, #12672	; 0x3180
 80024d0:	4847      	ldr	r0, [pc, #284]	; (80025f0 <MX_GPIO_Init+0x200>)
 80024d2:	f002 fc7d 	bl	8004dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 80024d6:	2200      	movs	r2, #0
 80024d8:	2104      	movs	r1, #4
 80024da:	4846      	ldr	r0, [pc, #280]	; (80025f4 <MX_GPIO_Init+0x204>)
 80024dc:	f002 fc78 	bl	8004dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80024e0:	2200      	movs	r2, #0
 80024e2:	217f      	movs	r1, #127	; 0x7f
 80024e4:	4844      	ldr	r0, [pc, #272]	; (80025f8 <MX_GPIO_Init+0x208>)
 80024e6:	f002 fc73 	bl	8004dd0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80024ea:	230c      	movs	r3, #12
 80024ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ee:	2302      	movs	r3, #2
 80024f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f2:	2300      	movs	r3, #0
 80024f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024f6:	2300      	movs	r3, #0
 80024f8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80024fa:	230d      	movs	r3, #13
 80024fc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80024fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002502:	4619      	mov	r1, r3
 8002504:	483d      	ldr	r0, [pc, #244]	; (80025fc <MX_GPIO_Init+0x20c>)
 8002506:	f002 fad1 	bl	8004aac <HAL_GPIO_Init>

  /*Configure GPIO pins : PF7 PF8 PF12 PF13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_12|GPIO_PIN_13;
 800250a:	f44f 5346 	mov.w	r3, #12672	; 0x3180
 800250e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002510:	2301      	movs	r3, #1
 8002512:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002514:	2300      	movs	r3, #0
 8002516:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002518:	2300      	movs	r3, #0
 800251a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800251c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002520:	4619      	mov	r1, r3
 8002522:	4833      	ldr	r0, [pc, #204]	; (80025f0 <MX_GPIO_Init+0x200>)
 8002524:	f002 fac2 	bl	8004aac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002528:	2304      	movs	r3, #4
 800252a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800252c:	2301      	movs	r3, #1
 800252e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002530:	2300      	movs	r3, #0
 8002532:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002534:	2300      	movs	r3, #0
 8002536:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002538:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800253c:	4619      	mov	r1, r3
 800253e:	482d      	ldr	r0, [pc, #180]	; (80025f4 <MX_GPIO_Init+0x204>)
 8002540:	f002 fab4 	bl	8004aac <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG2 PG3
                           PG4 PG5 PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002544:	237f      	movs	r3, #127	; 0x7f
 8002546:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002548:	2301      	movs	r3, #1
 800254a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800254c:	2300      	movs	r3, #0
 800254e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002550:	2300      	movs	r3, #0
 8002552:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002554:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002558:	4619      	mov	r1, r3
 800255a:	4827      	ldr	r0, [pc, #156]	; (80025f8 <MX_GPIO_Init+0x208>)
 800255c:	f002 faa6 	bl	8004aac <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002560:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002564:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002566:	2302      	movs	r3, #2
 8002568:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256a:	2300      	movs	r3, #0
 800256c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800256e:	2303      	movs	r3, #3
 8002570:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002572:	230c      	movs	r3, #12
 8002574:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002576:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800257a:	4619      	mov	r1, r3
 800257c:	4820      	ldr	r0, [pc, #128]	; (8002600 <MX_GPIO_Init+0x210>)
 800257e:	f002 fa95 	bl	8004aac <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002582:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002586:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002588:	2302      	movs	r3, #2
 800258a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258c:	2300      	movs	r3, #0
 800258e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002590:	2303      	movs	r3, #3
 8002592:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002594:	230a      	movs	r3, #10
 8002596:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002598:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800259c:	4619      	mov	r1, r3
 800259e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025a2:	f002 fa83 	bl	8004aac <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80025a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025ac:	2300      	movs	r3, #0
 80025ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b0:	2300      	movs	r3, #0
 80025b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025b8:	4619      	mov	r1, r3
 80025ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025be:	f002 fa75 	bl	8004aac <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80025c2:	2304      	movs	r3, #4
 80025c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c6:	2302      	movs	r3, #2
 80025c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ca:	2300      	movs	r3, #0
 80025cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025ce:	2303      	movs	r3, #3
 80025d0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80025d2:	230c      	movs	r3, #12
 80025d4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025da:	4619      	mov	r1, r3
 80025dc:	4809      	ldr	r0, [pc, #36]	; (8002604 <MX_GPIO_Init+0x214>)
 80025de:	f002 fa65 	bl	8004aac <HAL_GPIO_Init>

}
 80025e2:	bf00      	nop
 80025e4:	3738      	adds	r7, #56	; 0x38
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	40021000 	.word	0x40021000
 80025f0:	48001400 	.word	0x48001400
 80025f4:	48000400 	.word	0x48000400
 80025f8:	48001800 	.word	0x48001800
 80025fc:	48001000 	.word	0x48001000
 8002600:	48000800 	.word	0x48000800
 8002604:	48000c00 	.word	0x48000c00

08002608 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 8002610:	1d39      	adds	r1, r7, #4
 8002612:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002616:	2201      	movs	r2, #1
 8002618:	4803      	ldr	r0, [pc, #12]	; (8002628 <__io_putchar+0x20>)
 800261a:	f008 f9d1 	bl	800a9c0 <HAL_UART_Transmit>
  return ch;
 800261e:	687b      	ldr	r3, [r7, #4]
}
 8002620:	4618      	mov	r0, r3
 8002622:	3708      	adds	r7, #8
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	2000036c 	.word	0x2000036c

0800262c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002630:	b672      	cpsid	i
}
 8002632:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002634:	e7fe      	b.n	8002634 <Error_Handler+0x8>
	...

08002638 <motor_control>:
 *  Created on: Mar 12, 2023
 *      Author: ericding
 */
#include "motor_control.h"

void motor_control (uint8_t mode) {
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	4603      	mov	r3, r0
 8002640:	71fb      	strb	r3, [r7, #7]
	static uint8_t rmotor_pwm_val = 20;
	static uint8_t lmotor_h_bridge_in1 = 1;
	static uint8_t lmotor_h_bridge_in2 = 0;
	static uint8_t rmotor_h_bridge_in3 = 1;
	static uint8_t rmotor_h_bridge_in4 = 0;
	switch(mode) {
 8002642:	79fb      	ldrb	r3, [r7, #7]
 8002644:	2b05      	cmp	r3, #5
 8002646:	f200 8081 	bhi.w	800274c <motor_control+0x114>
 800264a:	a201      	add	r2, pc, #4	; (adr r2, 8002650 <motor_control+0x18>)
 800264c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002650:	08002669 	.word	0x08002669
 8002654:	0800268f 	.word	0x0800268f
 8002658:	080026b5 	.word	0x080026b5
 800265c:	080026db 	.word	0x080026db
 8002660:	08002701 	.word	0x08002701
 8002664:	08002727 	.word	0x08002727
		case 0 :
			lmotor_pwm_val = 50;
 8002668:	4b58      	ldr	r3, [pc, #352]	; (80027cc <motor_control+0x194>)
 800266a:	2232      	movs	r2, #50	; 0x32
 800266c:	701a      	strb	r2, [r3, #0]
			rmotor_pwm_val = 50;
 800266e:	4b58      	ldr	r3, [pc, #352]	; (80027d0 <motor_control+0x198>)
 8002670:	2232      	movs	r2, #50	; 0x32
 8002672:	701a      	strb	r2, [r3, #0]
			lmotor_h_bridge_in1 = 1;
 8002674:	4b57      	ldr	r3, [pc, #348]	; (80027d4 <motor_control+0x19c>)
 8002676:	2201      	movs	r2, #1
 8002678:	701a      	strb	r2, [r3, #0]
			lmotor_h_bridge_in2 = 0;
 800267a:	4b57      	ldr	r3, [pc, #348]	; (80027d8 <motor_control+0x1a0>)
 800267c:	2200      	movs	r2, #0
 800267e:	701a      	strb	r2, [r3, #0]
			rmotor_h_bridge_in3 = 1;
 8002680:	4b56      	ldr	r3, [pc, #344]	; (80027dc <motor_control+0x1a4>)
 8002682:	2201      	movs	r2, #1
 8002684:	701a      	strb	r2, [r3, #0]
			rmotor_h_bridge_in4 = 0;
 8002686:	4b56      	ldr	r3, [pc, #344]	; (80027e0 <motor_control+0x1a8>)
 8002688:	2200      	movs	r2, #0
 800268a:	701a      	strb	r2, [r3, #0]
			break;
 800268c:	e071      	b.n	8002772 <motor_control+0x13a>
		case 1:
			lmotor_pwm_val = 30;
 800268e:	4b4f      	ldr	r3, [pc, #316]	; (80027cc <motor_control+0x194>)
 8002690:	221e      	movs	r2, #30
 8002692:	701a      	strb	r2, [r3, #0]
			rmotor_pwm_val = 30;
 8002694:	4b4e      	ldr	r3, [pc, #312]	; (80027d0 <motor_control+0x198>)
 8002696:	221e      	movs	r2, #30
 8002698:	701a      	strb	r2, [r3, #0]
			lmotor_h_bridge_in1 = 1;
 800269a:	4b4e      	ldr	r3, [pc, #312]	; (80027d4 <motor_control+0x19c>)
 800269c:	2201      	movs	r2, #1
 800269e:	701a      	strb	r2, [r3, #0]
			lmotor_h_bridge_in2 = 0;
 80026a0:	4b4d      	ldr	r3, [pc, #308]	; (80027d8 <motor_control+0x1a0>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	701a      	strb	r2, [r3, #0]
			rmotor_h_bridge_in3 = 0;
 80026a6:	4b4d      	ldr	r3, [pc, #308]	; (80027dc <motor_control+0x1a4>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	701a      	strb	r2, [r3, #0]
			rmotor_h_bridge_in4 = 1;
 80026ac:	4b4c      	ldr	r3, [pc, #304]	; (80027e0 <motor_control+0x1a8>)
 80026ae:	2201      	movs	r2, #1
 80026b0:	701a      	strb	r2, [r3, #0]
			break;
 80026b2:	e05e      	b.n	8002772 <motor_control+0x13a>
		case 2:
			lmotor_pwm_val = 30;
 80026b4:	4b45      	ldr	r3, [pc, #276]	; (80027cc <motor_control+0x194>)
 80026b6:	221e      	movs	r2, #30
 80026b8:	701a      	strb	r2, [r3, #0]
			rmotor_pwm_val = 30;
 80026ba:	4b45      	ldr	r3, [pc, #276]	; (80027d0 <motor_control+0x198>)
 80026bc:	221e      	movs	r2, #30
 80026be:	701a      	strb	r2, [r3, #0]
			lmotor_h_bridge_in1 = 0;
 80026c0:	4b44      	ldr	r3, [pc, #272]	; (80027d4 <motor_control+0x19c>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	701a      	strb	r2, [r3, #0]
			lmotor_h_bridge_in2 = 1;
 80026c6:	4b44      	ldr	r3, [pc, #272]	; (80027d8 <motor_control+0x1a0>)
 80026c8:	2201      	movs	r2, #1
 80026ca:	701a      	strb	r2, [r3, #0]
			rmotor_h_bridge_in3 = 1;
 80026cc:	4b43      	ldr	r3, [pc, #268]	; (80027dc <motor_control+0x1a4>)
 80026ce:	2201      	movs	r2, #1
 80026d0:	701a      	strb	r2, [r3, #0]
			rmotor_h_bridge_in4 = 0;
 80026d2:	4b43      	ldr	r3, [pc, #268]	; (80027e0 <motor_control+0x1a8>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	701a      	strb	r2, [r3, #0]
			break;
 80026d8:	e04b      	b.n	8002772 <motor_control+0x13a>
		case 3:
			lmotor_pwm_val = 15;
 80026da:	4b3c      	ldr	r3, [pc, #240]	; (80027cc <motor_control+0x194>)
 80026dc:	220f      	movs	r2, #15
 80026de:	701a      	strb	r2, [r3, #0]
			rmotor_pwm_val = 15;
 80026e0:	4b3b      	ldr	r3, [pc, #236]	; (80027d0 <motor_control+0x198>)
 80026e2:	220f      	movs	r2, #15
 80026e4:	701a      	strb	r2, [r3, #0]
			lmotor_h_bridge_in1 = 1;
 80026e6:	4b3b      	ldr	r3, [pc, #236]	; (80027d4 <motor_control+0x19c>)
 80026e8:	2201      	movs	r2, #1
 80026ea:	701a      	strb	r2, [r3, #0]
			lmotor_h_bridge_in2 = 0;
 80026ec:	4b3a      	ldr	r3, [pc, #232]	; (80027d8 <motor_control+0x1a0>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	701a      	strb	r2, [r3, #0]
			rmotor_h_bridge_in3 = 0;
 80026f2:	4b3a      	ldr	r3, [pc, #232]	; (80027dc <motor_control+0x1a4>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	701a      	strb	r2, [r3, #0]
			rmotor_h_bridge_in4 = 1;
 80026f8:	4b39      	ldr	r3, [pc, #228]	; (80027e0 <motor_control+0x1a8>)
 80026fa:	2201      	movs	r2, #1
 80026fc:	701a      	strb	r2, [r3, #0]
			break;
 80026fe:	e038      	b.n	8002772 <motor_control+0x13a>
		case 4:
			lmotor_pwm_val = 30;
 8002700:	4b32      	ldr	r3, [pc, #200]	; (80027cc <motor_control+0x194>)
 8002702:	221e      	movs	r2, #30
 8002704:	701a      	strb	r2, [r3, #0]
			rmotor_pwm_val = 30;
 8002706:	4b32      	ldr	r3, [pc, #200]	; (80027d0 <motor_control+0x198>)
 8002708:	221e      	movs	r2, #30
 800270a:	701a      	strb	r2, [r3, #0]
			lmotor_h_bridge_in1 = 0;
 800270c:	4b31      	ldr	r3, [pc, #196]	; (80027d4 <motor_control+0x19c>)
 800270e:	2200      	movs	r2, #0
 8002710:	701a      	strb	r2, [r3, #0]
			lmotor_h_bridge_in2 = 1;
 8002712:	4b31      	ldr	r3, [pc, #196]	; (80027d8 <motor_control+0x1a0>)
 8002714:	2201      	movs	r2, #1
 8002716:	701a      	strb	r2, [r3, #0]
			rmotor_h_bridge_in3 = 0;
 8002718:	4b30      	ldr	r3, [pc, #192]	; (80027dc <motor_control+0x1a4>)
 800271a:	2200      	movs	r2, #0
 800271c:	701a      	strb	r2, [r3, #0]
			rmotor_h_bridge_in4 = 1;
 800271e:	4b30      	ldr	r3, [pc, #192]	; (80027e0 <motor_control+0x1a8>)
 8002720:	2201      	movs	r2, #1
 8002722:	701a      	strb	r2, [r3, #0]
			break;
 8002724:	e025      	b.n	8002772 <motor_control+0x13a>
		case 5:
			lmotor_pwm_val = 100;
 8002726:	4b29      	ldr	r3, [pc, #164]	; (80027cc <motor_control+0x194>)
 8002728:	2264      	movs	r2, #100	; 0x64
 800272a:	701a      	strb	r2, [r3, #0]
			rmotor_pwm_val = 100;
 800272c:	4b28      	ldr	r3, [pc, #160]	; (80027d0 <motor_control+0x198>)
 800272e:	2264      	movs	r2, #100	; 0x64
 8002730:	701a      	strb	r2, [r3, #0]
			lmotor_h_bridge_in1 = 1;
 8002732:	4b28      	ldr	r3, [pc, #160]	; (80027d4 <motor_control+0x19c>)
 8002734:	2201      	movs	r2, #1
 8002736:	701a      	strb	r2, [r3, #0]
			lmotor_h_bridge_in2 = 0;
 8002738:	4b27      	ldr	r3, [pc, #156]	; (80027d8 <motor_control+0x1a0>)
 800273a:	2200      	movs	r2, #0
 800273c:	701a      	strb	r2, [r3, #0]
			rmotor_h_bridge_in3 = 1;
 800273e:	4b27      	ldr	r3, [pc, #156]	; (80027dc <motor_control+0x1a4>)
 8002740:	2201      	movs	r2, #1
 8002742:	701a      	strb	r2, [r3, #0]
			rmotor_h_bridge_in4 = 0;
 8002744:	4b26      	ldr	r3, [pc, #152]	; (80027e0 <motor_control+0x1a8>)
 8002746:	2200      	movs	r2, #0
 8002748:	701a      	strb	r2, [r3, #0]
			break;
 800274a:	e012      	b.n	8002772 <motor_control+0x13a>
		default:
			lmotor_pwm_val = 0;
 800274c:	4b1f      	ldr	r3, [pc, #124]	; (80027cc <motor_control+0x194>)
 800274e:	2200      	movs	r2, #0
 8002750:	701a      	strb	r2, [r3, #0]
			rmotor_pwm_val = 0;
 8002752:	4b1f      	ldr	r3, [pc, #124]	; (80027d0 <motor_control+0x198>)
 8002754:	2200      	movs	r2, #0
 8002756:	701a      	strb	r2, [r3, #0]
			lmotor_h_bridge_in1 = 1;
 8002758:	4b1e      	ldr	r3, [pc, #120]	; (80027d4 <motor_control+0x19c>)
 800275a:	2201      	movs	r2, #1
 800275c:	701a      	strb	r2, [r3, #0]
			lmotor_h_bridge_in2 = 0;
 800275e:	4b1e      	ldr	r3, [pc, #120]	; (80027d8 <motor_control+0x1a0>)
 8002760:	2200      	movs	r2, #0
 8002762:	701a      	strb	r2, [r3, #0]
			rmotor_h_bridge_in3 = 1;
 8002764:	4b1d      	ldr	r3, [pc, #116]	; (80027dc <motor_control+0x1a4>)
 8002766:	2201      	movs	r2, #1
 8002768:	701a      	strb	r2, [r3, #0]
			rmotor_h_bridge_in4 = 0;
 800276a:	4b1d      	ldr	r3, [pc, #116]	; (80027e0 <motor_control+0x1a8>)
 800276c:	2200      	movs	r2, #0
 800276e:	701a      	strb	r2, [r3, #0]
			break;
 8002770:	bf00      	nop
	}

	htim4.Instance->CCR3 = lmotor_pwm_val; // PD14 to EnA
 8002772:	4b16      	ldr	r3, [pc, #88]	; (80027cc <motor_control+0x194>)
 8002774:	781a      	ldrb	r2, [r3, #0]
 8002776:	4b1b      	ldr	r3, [pc, #108]	; (80027e4 <motor_control+0x1ac>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	63da      	str	r2, [r3, #60]	; 0x3c
	htim4.Instance->CCR4 = rmotor_pwm_val; // PD15 to EnB
 800277c:	4b14      	ldr	r3, [pc, #80]	; (80027d0 <motor_control+0x198>)
 800277e:	781a      	ldrb	r2, [r3, #0]
 8002780:	4b18      	ldr	r3, [pc, #96]	; (80027e4 <motor_control+0x1ac>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7,  lmotor_h_bridge_in1);
 8002786:	4b13      	ldr	r3, [pc, #76]	; (80027d4 <motor_control+0x19c>)
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	461a      	mov	r2, r3
 800278c:	2180      	movs	r1, #128	; 0x80
 800278e:	4816      	ldr	r0, [pc, #88]	; (80027e8 <motor_control+0x1b0>)
 8002790:	f002 fb1e 	bl	8004dd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8,  lmotor_h_bridge_in2);
 8002794:	4b10      	ldr	r3, [pc, #64]	; (80027d8 <motor_control+0x1a0>)
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	461a      	mov	r2, r3
 800279a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800279e:	4812      	ldr	r0, [pc, #72]	; (80027e8 <motor_control+0x1b0>)
 80027a0:	f002 fb16 	bl	8004dd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12,  rmotor_h_bridge_in3);
 80027a4:	4b0d      	ldr	r3, [pc, #52]	; (80027dc <motor_control+0x1a4>)
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	461a      	mov	r2, r3
 80027aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80027ae:	480e      	ldr	r0, [pc, #56]	; (80027e8 <motor_control+0x1b0>)
 80027b0:	f002 fb0e 	bl	8004dd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13,  rmotor_h_bridge_in4);
 80027b4:	4b0a      	ldr	r3, [pc, #40]	; (80027e0 <motor_control+0x1a8>)
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	461a      	mov	r2, r3
 80027ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80027be:	480a      	ldr	r0, [pc, #40]	; (80027e8 <motor_control+0x1b0>)
 80027c0:	f002 fb06 	bl	8004dd0 <HAL_GPIO_WritePin>
}
 80027c4:	bf00      	nop
 80027c6:	3708      	adds	r7, #8
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	20000000 	.word	0x20000000
 80027d0:	20000001 	.word	0x20000001
 80027d4:	20000002 	.word	0x20000002
 80027d8:	20000840 	.word	0x20000840
 80027dc:	20000003 	.word	0x20000003
 80027e0:	20000841 	.word	0x20000841
 80027e4:	2000075c 	.word	0x2000075c
 80027e8:	48001400 	.word	0x48001400

080027ec <rotor_control>:
 */

#include "rotor_control.h"


void rotor_control (uint8_t mode) {
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	4603      	mov	r3, r0
 80027f4:	71fb      	strb	r3, [r7, #7]
	// mode 0 turn, mode 1 stop
	static uint8_t motor_pwm_val = 0; // 0 - 99 throttle control
	static uint8_t motor_h_bridge_in1 = 1;
	static uint8_t motor_h_bridge_in2 = 0;

	switch(mode) {
 80027f6:	79fb      	ldrb	r3, [r7, #7]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d109      	bne.n	8002810 <rotor_control+0x24>
		case 0 :
			motor_pwm_val = 80;
 80027fc:	4b15      	ldr	r3, [pc, #84]	; (8002854 <rotor_control+0x68>)
 80027fe:	2250      	movs	r2, #80	; 0x50
 8002800:	701a      	strb	r2, [r3, #0]
			motor_h_bridge_in1 = 1;
 8002802:	4b15      	ldr	r3, [pc, #84]	; (8002858 <rotor_control+0x6c>)
 8002804:	2201      	movs	r2, #1
 8002806:	701a      	strb	r2, [r3, #0]
			motor_h_bridge_in2 = 0;
 8002808:	4b14      	ldr	r3, [pc, #80]	; (800285c <rotor_control+0x70>)
 800280a:	2200      	movs	r2, #0
 800280c:	701a      	strb	r2, [r3, #0]
			break;
 800280e:	e009      	b.n	8002824 <rotor_control+0x38>
		default:
			motor_pwm_val = 0;
 8002810:	4b10      	ldr	r3, [pc, #64]	; (8002854 <rotor_control+0x68>)
 8002812:	2200      	movs	r2, #0
 8002814:	701a      	strb	r2, [r3, #0]
			motor_h_bridge_in1 = 1;
 8002816:	4b10      	ldr	r3, [pc, #64]	; (8002858 <rotor_control+0x6c>)
 8002818:	2201      	movs	r2, #1
 800281a:	701a      	strb	r2, [r3, #0]
			motor_h_bridge_in2 = 0;
 800281c:	4b0f      	ldr	r3, [pc, #60]	; (800285c <rotor_control+0x70>)
 800281e:	2200      	movs	r2, #0
 8002820:	701a      	strb	r2, [r3, #0]
			break;
 8002822:	bf00      	nop
	}

	htim4.Instance->CCR1 = motor_pwm_val; // PD13
 8002824:	4b0b      	ldr	r3, [pc, #44]	; (8002854 <rotor_control+0x68>)
 8002826:	781a      	ldrb	r2, [r3, #0]
 8002828:	4b0d      	ldr	r3, [pc, #52]	; (8002860 <rotor_control+0x74>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0,  motor_h_bridge_in1);
 800282e:	4b0a      	ldr	r3, [pc, #40]	; (8002858 <rotor_control+0x6c>)
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	461a      	mov	r2, r3
 8002834:	2101      	movs	r1, #1
 8002836:	480b      	ldr	r0, [pc, #44]	; (8002864 <rotor_control+0x78>)
 8002838:	f002 faca 	bl	8004dd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1,  motor_h_bridge_in2);
 800283c:	4b07      	ldr	r3, [pc, #28]	; (800285c <rotor_control+0x70>)
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	461a      	mov	r2, r3
 8002842:	2102      	movs	r1, #2
 8002844:	4807      	ldr	r0, [pc, #28]	; (8002864 <rotor_control+0x78>)
 8002846:	f002 fac3 	bl	8004dd0 <HAL_GPIO_WritePin>
}
 800284a:	bf00      	nop
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	20000842 	.word	0x20000842
 8002858:	20000004 	.word	0x20000004
 800285c:	20000843 	.word	0x20000843
 8002860:	2000075c 	.word	0x2000075c
 8002864:	48001800 	.word	0x48001800

08002868 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800286e:	4b0f      	ldr	r3, [pc, #60]	; (80028ac <HAL_MspInit+0x44>)
 8002870:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002872:	4a0e      	ldr	r2, [pc, #56]	; (80028ac <HAL_MspInit+0x44>)
 8002874:	f043 0301 	orr.w	r3, r3, #1
 8002878:	6613      	str	r3, [r2, #96]	; 0x60
 800287a:	4b0c      	ldr	r3, [pc, #48]	; (80028ac <HAL_MspInit+0x44>)
 800287c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800287e:	f003 0301 	and.w	r3, r3, #1
 8002882:	607b      	str	r3, [r7, #4]
 8002884:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002886:	4b09      	ldr	r3, [pc, #36]	; (80028ac <HAL_MspInit+0x44>)
 8002888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800288a:	4a08      	ldr	r2, [pc, #32]	; (80028ac <HAL_MspInit+0x44>)
 800288c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002890:	6593      	str	r3, [r2, #88]	; 0x58
 8002892:	4b06      	ldr	r3, [pc, #24]	; (80028ac <HAL_MspInit+0x44>)
 8002894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800289a:	603b      	str	r3, [r7, #0]
 800289c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800289e:	bf00      	nop
 80028a0:	370c      	adds	r7, #12
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	40021000 	.word	0x40021000

080028b0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b08c      	sub	sp, #48	; 0x30
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028b8:	f107 031c 	add.w	r3, r7, #28
 80028bc:	2200      	movs	r2, #0
 80028be:	601a      	str	r2, [r3, #0]
 80028c0:	605a      	str	r2, [r3, #4]
 80028c2:	609a      	str	r2, [r3, #8]
 80028c4:	60da      	str	r2, [r3, #12]
 80028c6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a2d      	ldr	r2, [pc, #180]	; (8002984 <HAL_ADC_MspInit+0xd4>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d154      	bne.n	800297c <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80028d2:	4b2d      	ldr	r3, [pc, #180]	; (8002988 <HAL_ADC_MspInit+0xd8>)
 80028d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028d6:	4a2c      	ldr	r2, [pc, #176]	; (8002988 <HAL_ADC_MspInit+0xd8>)
 80028d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80028dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028de:	4b2a      	ldr	r3, [pc, #168]	; (8002988 <HAL_ADC_MspInit+0xd8>)
 80028e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028e6:	61bb      	str	r3, [r7, #24]
 80028e8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028ea:	4b27      	ldr	r3, [pc, #156]	; (8002988 <HAL_ADC_MspInit+0xd8>)
 80028ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028ee:	4a26      	ldr	r2, [pc, #152]	; (8002988 <HAL_ADC_MspInit+0xd8>)
 80028f0:	f043 0304 	orr.w	r3, r3, #4
 80028f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028f6:	4b24      	ldr	r3, [pc, #144]	; (8002988 <HAL_ADC_MspInit+0xd8>)
 80028f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028fa:	f003 0304 	and.w	r3, r3, #4
 80028fe:	617b      	str	r3, [r7, #20]
 8002900:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002902:	4b21      	ldr	r3, [pc, #132]	; (8002988 <HAL_ADC_MspInit+0xd8>)
 8002904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002906:	4a20      	ldr	r2, [pc, #128]	; (8002988 <HAL_ADC_MspInit+0xd8>)
 8002908:	f043 0301 	orr.w	r3, r3, #1
 800290c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800290e:	4b1e      	ldr	r3, [pc, #120]	; (8002988 <HAL_ADC_MspInit+0xd8>)
 8002910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002912:	f003 0301 	and.w	r3, r3, #1
 8002916:	613b      	str	r3, [r7, #16]
 8002918:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800291a:	4b1b      	ldr	r3, [pc, #108]	; (8002988 <HAL_ADC_MspInit+0xd8>)
 800291c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800291e:	4a1a      	ldr	r2, [pc, #104]	; (8002988 <HAL_ADC_MspInit+0xd8>)
 8002920:	f043 0302 	orr.w	r3, r3, #2
 8002924:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002926:	4b18      	ldr	r3, [pc, #96]	; (8002988 <HAL_ADC_MspInit+0xd8>)
 8002928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800292a:	f003 0302 	and.w	r3, r3, #2
 800292e:	60fb      	str	r3, [r7, #12]
 8002930:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN8
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002932:	233f      	movs	r3, #63	; 0x3f
 8002934:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002936:	230b      	movs	r3, #11
 8002938:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800293a:	2300      	movs	r3, #0
 800293c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800293e:	f107 031c 	add.w	r3, r7, #28
 8002942:	4619      	mov	r1, r3
 8002944:	4811      	ldr	r0, [pc, #68]	; (800298c <HAL_ADC_MspInit+0xdc>)
 8002946:	f002 f8b1 	bl	8004aac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 800294a:	230a      	movs	r3, #10
 800294c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800294e:	230b      	movs	r3, #11
 8002950:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002952:	2300      	movs	r3, #0
 8002954:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002956:	f107 031c 	add.w	r3, r7, #28
 800295a:	4619      	mov	r1, r3
 800295c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002960:	f002 f8a4 	bl	8004aac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002964:	2302      	movs	r3, #2
 8002966:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002968:	230b      	movs	r3, #11
 800296a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296c:	2300      	movs	r3, #0
 800296e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002970:	f107 031c 	add.w	r3, r7, #28
 8002974:	4619      	mov	r1, r3
 8002976:	4806      	ldr	r0, [pc, #24]	; (8002990 <HAL_ADC_MspInit+0xe0>)
 8002978:	f002 f898 	bl	8004aac <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800297c:	bf00      	nop
 800297e:	3730      	adds	r7, #48	; 0x30
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}
 8002984:	50040000 	.word	0x50040000
 8002988:	40021000 	.word	0x40021000
 800298c:	48000800 	.word	0x48000800
 8002990:	48000400 	.word	0x48000400

08002994 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b08a      	sub	sp, #40	; 0x28
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800299c:	f107 0314 	add.w	r3, r7, #20
 80029a0:	2200      	movs	r2, #0
 80029a2:	601a      	str	r2, [r3, #0]
 80029a4:	605a      	str	r2, [r3, #4]
 80029a6:	609a      	str	r2, [r3, #8]
 80029a8:	60da      	str	r2, [r3, #12]
 80029aa:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a17      	ldr	r2, [pc, #92]	; (8002a10 <HAL_CAN_MspInit+0x7c>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d127      	bne.n	8002a06 <HAL_CAN_MspInit+0x72>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80029b6:	4b17      	ldr	r3, [pc, #92]	; (8002a14 <HAL_CAN_MspInit+0x80>)
 80029b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ba:	4a16      	ldr	r2, [pc, #88]	; (8002a14 <HAL_CAN_MspInit+0x80>)
 80029bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80029c0:	6593      	str	r3, [r2, #88]	; 0x58
 80029c2:	4b14      	ldr	r3, [pc, #80]	; (8002a14 <HAL_CAN_MspInit+0x80>)
 80029c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ca:	613b      	str	r3, [r7, #16]
 80029cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80029ce:	4b11      	ldr	r3, [pc, #68]	; (8002a14 <HAL_CAN_MspInit+0x80>)
 80029d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029d2:	4a10      	ldr	r2, [pc, #64]	; (8002a14 <HAL_CAN_MspInit+0x80>)
 80029d4:	f043 0308 	orr.w	r3, r3, #8
 80029d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029da:	4b0e      	ldr	r3, [pc, #56]	; (8002a14 <HAL_CAN_MspInit+0x80>)
 80029dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029de:	f003 0308 	and.w	r3, r3, #8
 80029e2:	60fb      	str	r3, [r7, #12]
 80029e4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80029e6:	2303      	movs	r3, #3
 80029e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ea:	2302      	movs	r3, #2
 80029ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ee:	2300      	movs	r3, #0
 80029f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029f2:	2303      	movs	r3, #3
 80029f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80029f6:	2309      	movs	r3, #9
 80029f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029fa:	f107 0314 	add.w	r3, r7, #20
 80029fe:	4619      	mov	r1, r3
 8002a00:	4805      	ldr	r0, [pc, #20]	; (8002a18 <HAL_CAN_MspInit+0x84>)
 8002a02:	f002 f853 	bl	8004aac <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002a06:	bf00      	nop
 8002a08:	3728      	adds	r7, #40	; 0x28
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	40006400 	.word	0x40006400
 8002a14:	40021000 	.word	0x40021000
 8002a18:	48000c00 	.word	0x48000c00

08002a1c <HAL_SMBUS_MspInit>:
* This function configures the hardware resources used in this example
* @param hsmbus: SMBUS handle pointer
* @retval None
*/
void HAL_SMBUS_MspInit(SMBUS_HandleTypeDef* hsmbus)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b0b0      	sub	sp, #192	; 0xc0
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a24:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002a28:	2200      	movs	r2, #0
 8002a2a:	601a      	str	r2, [r3, #0]
 8002a2c:	605a      	str	r2, [r3, #4]
 8002a2e:	609a      	str	r2, [r3, #8]
 8002a30:	60da      	str	r2, [r3, #12]
 8002a32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a34:	f107 0318 	add.w	r3, r7, #24
 8002a38:	2294      	movs	r2, #148	; 0x94
 8002a3a:	2100      	movs	r1, #0
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f008 fe3d 	bl	800b6bc <memset>
  if(hsmbus->Instance==I2C1)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a42      	ldr	r2, [pc, #264]	; (8002b50 <HAL_SMBUS_MspInit+0x134>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d13c      	bne.n	8002ac6 <HAL_SMBUS_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002a4c:	2340      	movs	r3, #64	; 0x40
 8002a4e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002a50:	2300      	movs	r3, #0
 8002a52:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a54:	f107 0318 	add.w	r3, r7, #24
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f003 f98d 	bl	8005d78 <HAL_RCCEx_PeriphCLKConfig>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d001      	beq.n	8002a68 <HAL_SMBUS_MspInit+0x4c>
    {
      Error_Handler();
 8002a64:	f7ff fde2 	bl	800262c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a68:	4b3a      	ldr	r3, [pc, #232]	; (8002b54 <HAL_SMBUS_MspInit+0x138>)
 8002a6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a6c:	4a39      	ldr	r2, [pc, #228]	; (8002b54 <HAL_SMBUS_MspInit+0x138>)
 8002a6e:	f043 0302 	orr.w	r3, r3, #2
 8002a72:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a74:	4b37      	ldr	r3, [pc, #220]	; (8002b54 <HAL_SMBUS_MspInit+0x138>)
 8002a76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a78:	f003 0302 	and.w	r3, r3, #2
 8002a7c:	617b      	str	r3, [r7, #20]
 8002a7e:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002a80:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002a84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a88:	2312      	movs	r3, #18
 8002a8a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a94:	2303      	movs	r3, #3
 8002a96:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002a9a:	2304      	movs	r3, #4
 8002a9c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aa0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	482c      	ldr	r0, [pc, #176]	; (8002b58 <HAL_SMBUS_MspInit+0x13c>)
 8002aa8:	f002 f800 	bl	8004aac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002aac:	4b29      	ldr	r3, [pc, #164]	; (8002b54 <HAL_SMBUS_MspInit+0x138>)
 8002aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ab0:	4a28      	ldr	r2, [pc, #160]	; (8002b54 <HAL_SMBUS_MspInit+0x138>)
 8002ab2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ab6:	6593      	str	r3, [r2, #88]	; 0x58
 8002ab8:	4b26      	ldr	r3, [pc, #152]	; (8002b54 <HAL_SMBUS_MspInit+0x138>)
 8002aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002abc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ac0:	613b      	str	r3, [r7, #16]
 8002ac2:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002ac4:	e03f      	b.n	8002b46 <HAL_SMBUS_MspInit+0x12a>
  else if(hsmbus->Instance==I2C2)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a24      	ldr	r2, [pc, #144]	; (8002b5c <HAL_SMBUS_MspInit+0x140>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d13a      	bne.n	8002b46 <HAL_SMBUS_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002ad0:	2380      	movs	r3, #128	; 0x80
 8002ad2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ad8:	f107 0318 	add.w	r3, r7, #24
 8002adc:	4618      	mov	r0, r3
 8002ade:	f003 f94b 	bl	8005d78 <HAL_RCCEx_PeriphCLKConfig>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d001      	beq.n	8002aec <HAL_SMBUS_MspInit+0xd0>
      Error_Handler();
 8002ae8:	f7ff fda0 	bl	800262c <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002aec:	4b19      	ldr	r3, [pc, #100]	; (8002b54 <HAL_SMBUS_MspInit+0x138>)
 8002aee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002af0:	4a18      	ldr	r2, [pc, #96]	; (8002b54 <HAL_SMBUS_MspInit+0x138>)
 8002af2:	f043 0320 	orr.w	r3, r3, #32
 8002af6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002af8:	4b16      	ldr	r3, [pc, #88]	; (8002b54 <HAL_SMBUS_MspInit+0x138>)
 8002afa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002afc:	f003 0320 	and.w	r3, r3, #32
 8002b00:	60fb      	str	r3, [r7, #12]
 8002b02:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8002b04:	2307      	movs	r3, #7
 8002b06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b0a:	2312      	movs	r3, #18
 8002b0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b10:	2301      	movs	r3, #1
 8002b12:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b16:	2303      	movs	r3, #3
 8002b18:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002b1c:	2304      	movs	r3, #4
 8002b1e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002b22:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002b26:	4619      	mov	r1, r3
 8002b28:	480d      	ldr	r0, [pc, #52]	; (8002b60 <HAL_SMBUS_MspInit+0x144>)
 8002b2a:	f001 ffbf 	bl	8004aac <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002b2e:	4b09      	ldr	r3, [pc, #36]	; (8002b54 <HAL_SMBUS_MspInit+0x138>)
 8002b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b32:	4a08      	ldr	r2, [pc, #32]	; (8002b54 <HAL_SMBUS_MspInit+0x138>)
 8002b34:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b38:	6593      	str	r3, [r2, #88]	; 0x58
 8002b3a:	4b06      	ldr	r3, [pc, #24]	; (8002b54 <HAL_SMBUS_MspInit+0x138>)
 8002b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b42:	60bb      	str	r3, [r7, #8]
 8002b44:	68bb      	ldr	r3, [r7, #8]
}
 8002b46:	bf00      	nop
 8002b48:	37c0      	adds	r7, #192	; 0xc0
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	40005400 	.word	0x40005400
 8002b54:	40021000 	.word	0x40021000
 8002b58:	48000400 	.word	0x48000400
 8002b5c:	40005800 	.word	0x40005800
 8002b60:	48001400 	.word	0x48001400

08002b64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b0b2      	sub	sp, #200	; 0xc8
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b6c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002b70:	2200      	movs	r2, #0
 8002b72:	601a      	str	r2, [r3, #0]
 8002b74:	605a      	str	r2, [r3, #4]
 8002b76:	609a      	str	r2, [r3, #8]
 8002b78:	60da      	str	r2, [r3, #12]
 8002b7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b7c:	f107 0320 	add.w	r3, r7, #32
 8002b80:	2294      	movs	r2, #148	; 0x94
 8002b82:	2100      	movs	r1, #0
 8002b84:	4618      	mov	r0, r3
 8002b86:	f008 fd99 	bl	800b6bc <memset>
  if(huart->Instance==LPUART1)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a64      	ldr	r2, [pc, #400]	; (8002d20 <HAL_UART_MspInit+0x1bc>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d13e      	bne.n	8002c12 <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002b94:	2320      	movs	r3, #32
 8002b96:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b9c:	f107 0320 	add.w	r3, r7, #32
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f003 f8e9 	bl	8005d78 <HAL_RCCEx_PeriphCLKConfig>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d001      	beq.n	8002bb0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002bac:	f7ff fd3e 	bl	800262c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002bb0:	4b5c      	ldr	r3, [pc, #368]	; (8002d24 <HAL_UART_MspInit+0x1c0>)
 8002bb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bb4:	4a5b      	ldr	r2, [pc, #364]	; (8002d24 <HAL_UART_MspInit+0x1c0>)
 8002bb6:	f043 0301 	orr.w	r3, r3, #1
 8002bba:	65d3      	str	r3, [r2, #92]	; 0x5c
 8002bbc:	4b59      	ldr	r3, [pc, #356]	; (8002d24 <HAL_UART_MspInit+0x1c0>)
 8002bbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bc0:	f003 0301 	and.w	r3, r3, #1
 8002bc4:	61fb      	str	r3, [r7, #28]
 8002bc6:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002bc8:	4b56      	ldr	r3, [pc, #344]	; (8002d24 <HAL_UART_MspInit+0x1c0>)
 8002bca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bcc:	4a55      	ldr	r2, [pc, #340]	; (8002d24 <HAL_UART_MspInit+0x1c0>)
 8002bce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002bd2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bd4:	4b53      	ldr	r3, [pc, #332]	; (8002d24 <HAL_UART_MspInit+0x1c0>)
 8002bd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bdc:	61bb      	str	r3, [r7, #24]
 8002bde:	69bb      	ldr	r3, [r7, #24]
    HAL_PWREx_EnableVddIO2();
 8002be0:	f002 f9e2 	bl	8004fa8 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002be4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002be8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bec:	2302      	movs	r3, #2
 8002bee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002bfe:	2308      	movs	r3, #8
 8002c00:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002c04:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002c08:	4619      	mov	r1, r3
 8002c0a:	4847      	ldr	r0, [pc, #284]	; (8002d28 <HAL_UART_MspInit+0x1c4>)
 8002c0c:	f001 ff4e 	bl	8004aac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002c10:	e081      	b.n	8002d16 <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART2)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a45      	ldr	r2, [pc, #276]	; (8002d2c <HAL_UART_MspInit+0x1c8>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d13b      	bne.n	8002c94 <HAL_UART_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002c1c:	2302      	movs	r3, #2
 8002c1e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002c20:	2300      	movs	r3, #0
 8002c22:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c24:	f107 0320 	add.w	r3, r7, #32
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f003 f8a5 	bl	8005d78 <HAL_RCCEx_PeriphCLKConfig>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d001      	beq.n	8002c38 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8002c34:	f7ff fcfa 	bl	800262c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c38:	4b3a      	ldr	r3, [pc, #232]	; (8002d24 <HAL_UART_MspInit+0x1c0>)
 8002c3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c3c:	4a39      	ldr	r2, [pc, #228]	; (8002d24 <HAL_UART_MspInit+0x1c0>)
 8002c3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c42:	6593      	str	r3, [r2, #88]	; 0x58
 8002c44:	4b37      	ldr	r3, [pc, #220]	; (8002d24 <HAL_UART_MspInit+0x1c0>)
 8002c46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c4c:	617b      	str	r3, [r7, #20]
 8002c4e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c50:	4b34      	ldr	r3, [pc, #208]	; (8002d24 <HAL_UART_MspInit+0x1c0>)
 8002c52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c54:	4a33      	ldr	r2, [pc, #204]	; (8002d24 <HAL_UART_MspInit+0x1c0>)
 8002c56:	f043 0308 	orr.w	r3, r3, #8
 8002c5a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c5c:	4b31      	ldr	r3, [pc, #196]	; (8002d24 <HAL_UART_MspInit+0x1c0>)
 8002c5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c60:	f003 0308 	and.w	r3, r3, #8
 8002c64:	613b      	str	r3, [r7, #16]
 8002c66:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002c68:	2378      	movs	r3, #120	; 0x78
 8002c6a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c6e:	2302      	movs	r3, #2
 8002c70:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c74:	2300      	movs	r3, #0
 8002c76:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002c80:	2307      	movs	r3, #7
 8002c82:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c86:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	4828      	ldr	r0, [pc, #160]	; (8002d30 <HAL_UART_MspInit+0x1cc>)
 8002c8e:	f001 ff0d 	bl	8004aac <HAL_GPIO_Init>
}
 8002c92:	e040      	b.n	8002d16 <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART3)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a26      	ldr	r2, [pc, #152]	; (8002d34 <HAL_UART_MspInit+0x1d0>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d13b      	bne.n	8002d16 <HAL_UART_MspInit+0x1b2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002c9e:	2304      	movs	r3, #4
 8002ca0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ca6:	f107 0320 	add.w	r3, r7, #32
 8002caa:	4618      	mov	r0, r3
 8002cac:	f003 f864 	bl	8005d78 <HAL_RCCEx_PeriphCLKConfig>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d001      	beq.n	8002cba <HAL_UART_MspInit+0x156>
      Error_Handler();
 8002cb6:	f7ff fcb9 	bl	800262c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002cba:	4b1a      	ldr	r3, [pc, #104]	; (8002d24 <HAL_UART_MspInit+0x1c0>)
 8002cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cbe:	4a19      	ldr	r2, [pc, #100]	; (8002d24 <HAL_UART_MspInit+0x1c0>)
 8002cc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cc4:	6593      	str	r3, [r2, #88]	; 0x58
 8002cc6:	4b17      	ldr	r3, [pc, #92]	; (8002d24 <HAL_UART_MspInit+0x1c0>)
 8002cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cce:	60fb      	str	r3, [r7, #12]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002cd2:	4b14      	ldr	r3, [pc, #80]	; (8002d24 <HAL_UART_MspInit+0x1c0>)
 8002cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cd6:	4a13      	ldr	r2, [pc, #76]	; (8002d24 <HAL_UART_MspInit+0x1c0>)
 8002cd8:	f043 0308 	orr.w	r3, r3, #8
 8002cdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002cde:	4b11      	ldr	r3, [pc, #68]	; (8002d24 <HAL_UART_MspInit+0x1c0>)
 8002ce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ce2:	f003 0308 	and.w	r3, r3, #8
 8002ce6:	60bb      	str	r3, [r7, #8]
 8002ce8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002cea:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002cee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002d04:	2307      	movs	r3, #7
 8002d06:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d0a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002d0e:	4619      	mov	r1, r3
 8002d10:	4807      	ldr	r0, [pc, #28]	; (8002d30 <HAL_UART_MspInit+0x1cc>)
 8002d12:	f001 fecb 	bl	8004aac <HAL_GPIO_Init>
}
 8002d16:	bf00      	nop
 8002d18:	37c8      	adds	r7, #200	; 0xc8
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	40008000 	.word	0x40008000
 8002d24:	40021000 	.word	0x40021000
 8002d28:	48001800 	.word	0x48001800
 8002d2c:	40004400 	.word	0x40004400
 8002d30:	48000c00 	.word	0x48000c00
 8002d34:	40004800 	.word	0x40004800

08002d38 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b08c      	sub	sp, #48	; 0x30
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d40:	f107 031c 	add.w	r3, r7, #28
 8002d44:	2200      	movs	r2, #0
 8002d46:	601a      	str	r2, [r3, #0]
 8002d48:	605a      	str	r2, [r3, #4]
 8002d4a:	609a      	str	r2, [r3, #8]
 8002d4c:	60da      	str	r2, [r3, #12]
 8002d4e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a2e      	ldr	r2, [pc, #184]	; (8002e10 <HAL_SPI_MspInit+0xd8>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d129      	bne.n	8002dae <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002d5a:	4b2e      	ldr	r3, [pc, #184]	; (8002e14 <HAL_SPI_MspInit+0xdc>)
 8002d5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d5e:	4a2d      	ldr	r2, [pc, #180]	; (8002e14 <HAL_SPI_MspInit+0xdc>)
 8002d60:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d64:	6613      	str	r3, [r2, #96]	; 0x60
 8002d66:	4b2b      	ldr	r3, [pc, #172]	; (8002e14 <HAL_SPI_MspInit+0xdc>)
 8002d68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d6e:	61bb      	str	r3, [r7, #24]
 8002d70:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d72:	4b28      	ldr	r3, [pc, #160]	; (8002e14 <HAL_SPI_MspInit+0xdc>)
 8002d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d76:	4a27      	ldr	r2, [pc, #156]	; (8002e14 <HAL_SPI_MspInit+0xdc>)
 8002d78:	f043 0301 	orr.w	r3, r3, #1
 8002d7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d7e:	4b25      	ldr	r3, [pc, #148]	; (8002e14 <HAL_SPI_MspInit+0xdc>)
 8002d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d82:	f003 0301 	and.w	r3, r3, #1
 8002d86:	617b      	str	r3, [r7, #20]
 8002d88:	697b      	ldr	r3, [r7, #20]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002d8a:	23f0      	movs	r3, #240	; 0xf0
 8002d8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d8e:	2302      	movs	r3, #2
 8002d90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d92:	2300      	movs	r3, #0
 8002d94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d96:	2303      	movs	r3, #3
 8002d98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002d9a:	2305      	movs	r3, #5
 8002d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d9e:	f107 031c 	add.w	r3, r7, #28
 8002da2:	4619      	mov	r1, r3
 8002da4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002da8:	f001 fe80 	bl	8004aac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002dac:	e02c      	b.n	8002e08 <HAL_SPI_MspInit+0xd0>
  else if(hspi->Instance==SPI3)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a19      	ldr	r2, [pc, #100]	; (8002e18 <HAL_SPI_MspInit+0xe0>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d127      	bne.n	8002e08 <HAL_SPI_MspInit+0xd0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002db8:	4b16      	ldr	r3, [pc, #88]	; (8002e14 <HAL_SPI_MspInit+0xdc>)
 8002dba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dbc:	4a15      	ldr	r2, [pc, #84]	; (8002e14 <HAL_SPI_MspInit+0xdc>)
 8002dbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dc2:	6593      	str	r3, [r2, #88]	; 0x58
 8002dc4:	4b13      	ldr	r3, [pc, #76]	; (8002e14 <HAL_SPI_MspInit+0xdc>)
 8002dc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002dcc:	613b      	str	r3, [r7, #16]
 8002dce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dd0:	4b10      	ldr	r3, [pc, #64]	; (8002e14 <HAL_SPI_MspInit+0xdc>)
 8002dd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dd4:	4a0f      	ldr	r2, [pc, #60]	; (8002e14 <HAL_SPI_MspInit+0xdc>)
 8002dd6:	f043 0302 	orr.w	r3, r3, #2
 8002dda:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ddc:	4b0d      	ldr	r3, [pc, #52]	; (8002e14 <HAL_SPI_MspInit+0xdc>)
 8002dde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002de0:	f003 0302 	and.w	r3, r3, #2
 8002de4:	60fb      	str	r3, [r7, #12]
 8002de6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002de8:	2338      	movs	r3, #56	; 0x38
 8002dea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dec:	2302      	movs	r3, #2
 8002dee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df0:	2300      	movs	r3, #0
 8002df2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002df4:	2303      	movs	r3, #3
 8002df6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002df8:	2306      	movs	r3, #6
 8002dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dfc:	f107 031c 	add.w	r3, r7, #28
 8002e00:	4619      	mov	r1, r3
 8002e02:	4806      	ldr	r0, [pc, #24]	; (8002e1c <HAL_SPI_MspInit+0xe4>)
 8002e04:	f001 fe52 	bl	8004aac <HAL_GPIO_Init>
}
 8002e08:	bf00      	nop
 8002e0a:	3730      	adds	r7, #48	; 0x30
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	40013000 	.word	0x40013000
 8002e14:	40021000 	.word	0x40021000
 8002e18:	40003c00 	.word	0x40003c00
 8002e1c:	48000400 	.word	0x48000400

08002e20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b092      	sub	sp, #72	; 0x48
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e28:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	601a      	str	r2, [r3, #0]
 8002e30:	605a      	str	r2, [r3, #4]
 8002e32:	609a      	str	r2, [r3, #8]
 8002e34:	60da      	str	r2, [r3, #12]
 8002e36:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a9e      	ldr	r2, [pc, #632]	; (80030b8 <HAL_TIM_Base_MspInit+0x298>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d15b      	bne.n	8002efa <HAL_TIM_Base_MspInit+0xda>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002e42:	4b9e      	ldr	r3, [pc, #632]	; (80030bc <HAL_TIM_Base_MspInit+0x29c>)
 8002e44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e46:	4a9d      	ldr	r2, [pc, #628]	; (80030bc <HAL_TIM_Base_MspInit+0x29c>)
 8002e48:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002e4c:	6613      	str	r3, [r2, #96]	; 0x60
 8002e4e:	4b9b      	ldr	r3, [pc, #620]	; (80030bc <HAL_TIM_Base_MspInit+0x29c>)
 8002e50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e56:	633b      	str	r3, [r7, #48]	; 0x30
 8002e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e5a:	4b98      	ldr	r3, [pc, #608]	; (80030bc <HAL_TIM_Base_MspInit+0x29c>)
 8002e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e5e:	4a97      	ldr	r2, [pc, #604]	; (80030bc <HAL_TIM_Base_MspInit+0x29c>)
 8002e60:	f043 0310 	orr.w	r3, r3, #16
 8002e64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e66:	4b95      	ldr	r3, [pc, #596]	; (80030bc <HAL_TIM_Base_MspInit+0x29c>)
 8002e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e6a:	f003 0310 	and.w	r3, r3, #16
 8002e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_BKIN2
    PE15     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_11;
 8002e72:	f44f 6328 	mov.w	r3, #2688	; 0xa80
 8002e76:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e78:	2302      	movs	r3, #2
 8002e7a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e80:	2300      	movs	r3, #0
 8002e82:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002e84:	2301      	movs	r3, #1
 8002e86:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e88:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	488c      	ldr	r0, [pc, #560]	; (80030c0 <HAL_TIM_Base_MspInit+0x2a0>)
 8002e90:	f001 fe0c 	bl	8004aac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002e94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e98:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e9a:	2302      	movs	r3, #2
 8002e9c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002eaa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002eae:	4619      	mov	r1, r3
 8002eb0:	4883      	ldr	r0, [pc, #524]	; (80030c0 <HAL_TIM_Base_MspInit+0x2a0>)
 8002eb2:	f001 fdfb 	bl	8004aac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002eb6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002eba:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ebc:	2302      	movs	r3, #2
 8002ebe:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ecc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	487b      	ldr	r0, [pc, #492]	; (80030c0 <HAL_TIM_Base_MspInit+0x2a0>)
 8002ed4:	f001 fdea 	bl	8004aac <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002ed8:	2200      	movs	r2, #0
 8002eda:	2100      	movs	r1, #0
 8002edc:	201b      	movs	r0, #27
 8002ede:	f001 fda0 	bl	8004a22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002ee2:	201b      	movs	r0, #27
 8002ee4:	f001 fdb9 	bl	8004a5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 1, 0);
 8002ee8:	2200      	movs	r2, #0
 8002eea:	2101      	movs	r1, #1
 8002eec:	201b      	movs	r0, #27
 8002eee:	f001 fd98 	bl	8004a22 <HAL_NVIC_SetPriority>
    HAL_NVIC_DisableIRQ(TIM1_CC_IRQn);
 8002ef2:	201b      	movs	r0, #27
 8002ef4:	f001 fdbf 	bl	8004a76 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(TIM5_IRQn);

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002ef8:	e0d9      	b.n	80030ae <HAL_TIM_Base_MspInit+0x28e>
  else if(htim_base->Instance==TIM2)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f02:	d147      	bne.n	8002f94 <HAL_TIM_Base_MspInit+0x174>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002f04:	4b6d      	ldr	r3, [pc, #436]	; (80030bc <HAL_TIM_Base_MspInit+0x29c>)
 8002f06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f08:	4a6c      	ldr	r2, [pc, #432]	; (80030bc <HAL_TIM_Base_MspInit+0x29c>)
 8002f0a:	f043 0301 	orr.w	r3, r3, #1
 8002f0e:	6593      	str	r3, [r2, #88]	; 0x58
 8002f10:	4b6a      	ldr	r3, [pc, #424]	; (80030bc <HAL_TIM_Base_MspInit+0x29c>)
 8002f12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f14:	f003 0301 	and.w	r3, r3, #1
 8002f18:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f1c:	4b67      	ldr	r3, [pc, #412]	; (80030bc <HAL_TIM_Base_MspInit+0x29c>)
 8002f1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f20:	4a66      	ldr	r2, [pc, #408]	; (80030bc <HAL_TIM_Base_MspInit+0x29c>)
 8002f22:	f043 0302 	orr.w	r3, r3, #2
 8002f26:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f28:	4b64      	ldr	r3, [pc, #400]	; (80030bc <HAL_TIM_Base_MspInit+0x29c>)
 8002f2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f2c:	f003 0302 	and.w	r3, r3, #2
 8002f30:	627b      	str	r3, [r7, #36]	; 0x24
 8002f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f34:	4b61      	ldr	r3, [pc, #388]	; (80030bc <HAL_TIM_Base_MspInit+0x29c>)
 8002f36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f38:	4a60      	ldr	r2, [pc, #384]	; (80030bc <HAL_TIM_Base_MspInit+0x29c>)
 8002f3a:	f043 0301 	orr.w	r3, r3, #1
 8002f3e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f40:	4b5e      	ldr	r3, [pc, #376]	; (80030bc <HAL_TIM_Base_MspInit+0x29c>)
 8002f42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f44:	f003 0301 	and.w	r3, r3, #1
 8002f48:	623b      	str	r3, [r7, #32]
 8002f4a:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002f4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f50:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f52:	2302      	movs	r3, #2
 8002f54:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f56:	2300      	movs	r3, #0
 8002f58:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f62:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002f66:	4619      	mov	r1, r3
 8002f68:	4856      	ldr	r0, [pc, #344]	; (80030c4 <HAL_TIM_Base_MspInit+0x2a4>)
 8002f6a:	f001 fd9f 	bl	8004aac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002f6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f72:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f74:	2302      	movs	r3, #2
 8002f76:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8002f80:	2302      	movs	r3, #2
 8002f82:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f84:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002f88:	4619      	mov	r1, r3
 8002f8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f8e:	f001 fd8d 	bl	8004aac <HAL_GPIO_Init>
}
 8002f92:	e08c      	b.n	80030ae <HAL_TIM_Base_MspInit+0x28e>
  else if(htim_base->Instance==TIM3)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a4b      	ldr	r2, [pc, #300]	; (80030c8 <HAL_TIM_Base_MspInit+0x2a8>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d138      	bne.n	8003010 <HAL_TIM_Base_MspInit+0x1f0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002f9e:	4b47      	ldr	r3, [pc, #284]	; (80030bc <HAL_TIM_Base_MspInit+0x29c>)
 8002fa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa2:	4a46      	ldr	r2, [pc, #280]	; (80030bc <HAL_TIM_Base_MspInit+0x29c>)
 8002fa4:	f043 0302 	orr.w	r3, r3, #2
 8002fa8:	6593      	str	r3, [r2, #88]	; 0x58
 8002faa:	4b44      	ldr	r3, [pc, #272]	; (80030bc <HAL_TIM_Base_MspInit+0x29c>)
 8002fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fae:	f003 0302 	and.w	r3, r3, #2
 8002fb2:	61fb      	str	r3, [r7, #28]
 8002fb4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002fb6:	4b41      	ldr	r3, [pc, #260]	; (80030bc <HAL_TIM_Base_MspInit+0x29c>)
 8002fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fba:	4a40      	ldr	r2, [pc, #256]	; (80030bc <HAL_TIM_Base_MspInit+0x29c>)
 8002fbc:	f043 0310 	orr.w	r3, r3, #16
 8002fc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002fc2:	4b3e      	ldr	r3, [pc, #248]	; (80030bc <HAL_TIM_Base_MspInit+0x29c>)
 8002fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fc6:	f003 0310 	and.w	r3, r3, #16
 8002fca:	61bb      	str	r3, [r7, #24]
 8002fcc:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002fce:	2310      	movs	r3, #16
 8002fd0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fd2:	2302      	movs	r3, #2
 8002fd4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002fde:	2302      	movs	r3, #2
 8002fe0:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002fe2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	4835      	ldr	r0, [pc, #212]	; (80030c0 <HAL_TIM_Base_MspInit+0x2a0>)
 8002fea:	f001 fd5f 	bl	8004aac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002fee:	2200      	movs	r2, #0
 8002ff0:	2100      	movs	r1, #0
 8002ff2:	201d      	movs	r0, #29
 8002ff4:	f001 fd15 	bl	8004a22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002ff8:	201d      	movs	r0, #29
 8002ffa:	f001 fd2e 	bl	8004a5a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002ffe:	2200      	movs	r2, #0
 8003000:	2105      	movs	r1, #5
 8003002:	201d      	movs	r0, #29
 8003004:	f001 fd0d 	bl	8004a22 <HAL_NVIC_SetPriority>
    HAL_NVIC_DisableIRQ(TIM3_IRQn);
 8003008:	201d      	movs	r0, #29
 800300a:	f001 fd34 	bl	8004a76 <HAL_NVIC_DisableIRQ>
}
 800300e:	e04e      	b.n	80030ae <HAL_TIM_Base_MspInit+0x28e>
  else if(htim_base->Instance==TIM4)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a2d      	ldr	r2, [pc, #180]	; (80030cc <HAL_TIM_Base_MspInit+0x2ac>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d128      	bne.n	800306c <HAL_TIM_Base_MspInit+0x24c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800301a:	4b28      	ldr	r3, [pc, #160]	; (80030bc <HAL_TIM_Base_MspInit+0x29c>)
 800301c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800301e:	4a27      	ldr	r2, [pc, #156]	; (80030bc <HAL_TIM_Base_MspInit+0x29c>)
 8003020:	f043 0304 	orr.w	r3, r3, #4
 8003024:	6593      	str	r3, [r2, #88]	; 0x58
 8003026:	4b25      	ldr	r3, [pc, #148]	; (80030bc <HAL_TIM_Base_MspInit+0x29c>)
 8003028:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800302a:	f003 0304 	and.w	r3, r3, #4
 800302e:	617b      	str	r3, [r7, #20]
 8003030:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003032:	4b22      	ldr	r3, [pc, #136]	; (80030bc <HAL_TIM_Base_MspInit+0x29c>)
 8003034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003036:	4a21      	ldr	r2, [pc, #132]	; (80030bc <HAL_TIM_Base_MspInit+0x29c>)
 8003038:	f043 0310 	orr.w	r3, r3, #16
 800303c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800303e:	4b1f      	ldr	r3, [pc, #124]	; (80030bc <HAL_TIM_Base_MspInit+0x29c>)
 8003040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003042:	f003 0310 	and.w	r3, r3, #16
 8003046:	613b      	str	r3, [r7, #16]
 8003048:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800304a:	2301      	movs	r3, #1
 800304c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800304e:	2302      	movs	r3, #2
 8003050:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003052:	2300      	movs	r3, #0
 8003054:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003056:	2300      	movs	r3, #0
 8003058:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800305a:	2302      	movs	r3, #2
 800305c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800305e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003062:	4619      	mov	r1, r3
 8003064:	4816      	ldr	r0, [pc, #88]	; (80030c0 <HAL_TIM_Base_MspInit+0x2a0>)
 8003066:	f001 fd21 	bl	8004aac <HAL_GPIO_Init>
}
 800306a:	e020      	b.n	80030ae <HAL_TIM_Base_MspInit+0x28e>
  else if(htim_base->Instance==TIM5)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a17      	ldr	r2, [pc, #92]	; (80030d0 <HAL_TIM_Base_MspInit+0x2b0>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d11b      	bne.n	80030ae <HAL_TIM_Base_MspInit+0x28e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003076:	4b11      	ldr	r3, [pc, #68]	; (80030bc <HAL_TIM_Base_MspInit+0x29c>)
 8003078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800307a:	4a10      	ldr	r2, [pc, #64]	; (80030bc <HAL_TIM_Base_MspInit+0x29c>)
 800307c:	f043 0308 	orr.w	r3, r3, #8
 8003080:	6593      	str	r3, [r2, #88]	; 0x58
 8003082:	4b0e      	ldr	r3, [pc, #56]	; (80030bc <HAL_TIM_Base_MspInit+0x29c>)
 8003084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003086:	f003 0308 	and.w	r3, r3, #8
 800308a:	60fb      	str	r3, [r7, #12]
 800308c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800308e:	2200      	movs	r2, #0
 8003090:	2100      	movs	r1, #0
 8003092:	2032      	movs	r0, #50	; 0x32
 8003094:	f001 fcc5 	bl	8004a22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003098:	2032      	movs	r0, #50	; 0x32
 800309a:	f001 fcde 	bl	8004a5a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM3_IRQn, 6, 0);
 800309e:	2200      	movs	r2, #0
 80030a0:	2106      	movs	r1, #6
 80030a2:	201d      	movs	r0, #29
 80030a4:	f001 fcbd 	bl	8004a22 <HAL_NVIC_SetPriority>
    HAL_NVIC_DisableIRQ(TIM5_IRQn);
 80030a8:	2032      	movs	r0, #50	; 0x32
 80030aa:	f001 fce4 	bl	8004a76 <HAL_NVIC_DisableIRQ>
}
 80030ae:	bf00      	nop
 80030b0:	3748      	adds	r7, #72	; 0x48
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	40012c00 	.word	0x40012c00
 80030bc:	40021000 	.word	0x40021000
 80030c0:	48001000 	.word	0x48001000
 80030c4:	48000400 	.word	0x48000400
 80030c8:	40000400 	.word	0x40000400
 80030cc:	40000800 	.word	0x40000800
 80030d0:	40000c00 	.word	0x40000c00

080030d4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b085      	sub	sp, #20
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM15)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a0a      	ldr	r2, [pc, #40]	; (800310c <HAL_TIM_PWM_MspInit+0x38>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d10b      	bne.n	80030fe <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 80030e6:	4b0a      	ldr	r3, [pc, #40]	; (8003110 <HAL_TIM_PWM_MspInit+0x3c>)
 80030e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030ea:	4a09      	ldr	r2, [pc, #36]	; (8003110 <HAL_TIM_PWM_MspInit+0x3c>)
 80030ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030f0:	6613      	str	r3, [r2, #96]	; 0x60
 80030f2:	4b07      	ldr	r3, [pc, #28]	; (8003110 <HAL_TIM_PWM_MspInit+0x3c>)
 80030f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030fa:	60fb      	str	r3, [r7, #12]
 80030fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80030fe:	bf00      	nop
 8003100:	3714      	adds	r7, #20
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
 800310a:	bf00      	nop
 800310c:	40014000 	.word	0x40014000
 8003110:	40021000 	.word	0x40021000

08003114 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b08c      	sub	sp, #48	; 0x30
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800311c:	f107 031c 	add.w	r3, r7, #28
 8003120:	2200      	movs	r2, #0
 8003122:	601a      	str	r2, [r3, #0]
 8003124:	605a      	str	r2, [r3, #4]
 8003126:	609a      	str	r2, [r3, #8]
 8003128:	60da      	str	r2, [r3, #12]
 800312a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a54      	ldr	r2, [pc, #336]	; (8003284 <HAL_TIM_MspPostInit+0x170>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d11d      	bne.n	8003172 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003136:	4b54      	ldr	r3, [pc, #336]	; (8003288 <HAL_TIM_MspPostInit+0x174>)
 8003138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800313a:	4a53      	ldr	r2, [pc, #332]	; (8003288 <HAL_TIM_MspPostInit+0x174>)
 800313c:	f043 0310 	orr.w	r3, r3, #16
 8003140:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003142:	4b51      	ldr	r3, [pc, #324]	; (8003288 <HAL_TIM_MspPostInit+0x174>)
 8003144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003146:	f003 0310 	and.w	r3, r3, #16
 800314a:	61bb      	str	r3, [r7, #24]
 800314c:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE8     ------> TIM1_CH1N
    PE10     ------> TIM1_CH2N
    PE12     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_12;
 800314e:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
 8003152:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003154:	2302      	movs	r3, #2
 8003156:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003158:	2300      	movs	r3, #0
 800315a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800315c:	2300      	movs	r3, #0
 800315e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003160:	2301      	movs	r3, #1
 8003162:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003164:	f107 031c 	add.w	r3, r7, #28
 8003168:	4619      	mov	r1, r3
 800316a:	4848      	ldr	r0, [pc, #288]	; (800328c <HAL_TIM_MspPostInit+0x178>)
 800316c:	f001 fc9e 	bl	8004aac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8003170:	e083      	b.n	800327a <HAL_TIM_MspPostInit+0x166>
  else if(htim->Instance==TIM2)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800317a:	d11d      	bne.n	80031b8 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800317c:	4b42      	ldr	r3, [pc, #264]	; (8003288 <HAL_TIM_MspPostInit+0x174>)
 800317e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003180:	4a41      	ldr	r2, [pc, #260]	; (8003288 <HAL_TIM_MspPostInit+0x174>)
 8003182:	f043 0301 	orr.w	r3, r3, #1
 8003186:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003188:	4b3f      	ldr	r3, [pc, #252]	; (8003288 <HAL_TIM_MspPostInit+0x174>)
 800318a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800318c:	f003 0301 	and.w	r3, r3, #1
 8003190:	617b      	str	r3, [r7, #20]
 8003192:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003194:	2301      	movs	r3, #1
 8003196:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003198:	2302      	movs	r3, #2
 800319a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800319c:	2300      	movs	r3, #0
 800319e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031a0:	2300      	movs	r3, #0
 80031a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80031a4:	2301      	movs	r3, #1
 80031a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031a8:	f107 031c 	add.w	r3, r7, #28
 80031ac:	4619      	mov	r1, r3
 80031ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031b2:	f001 fc7b 	bl	8004aac <HAL_GPIO_Init>
}
 80031b6:	e060      	b.n	800327a <HAL_TIM_MspPostInit+0x166>
  else if(htim->Instance==TIM4)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a34      	ldr	r2, [pc, #208]	; (8003290 <HAL_TIM_MspPostInit+0x17c>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d139      	bne.n	8003236 <HAL_TIM_MspPostInit+0x122>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80031c2:	4b31      	ldr	r3, [pc, #196]	; (8003288 <HAL_TIM_MspPostInit+0x174>)
 80031c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031c6:	4a30      	ldr	r2, [pc, #192]	; (8003288 <HAL_TIM_MspPostInit+0x174>)
 80031c8:	f043 0308 	orr.w	r3, r3, #8
 80031cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80031ce:	4b2e      	ldr	r3, [pc, #184]	; (8003288 <HAL_TIM_MspPostInit+0x174>)
 80031d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031d2:	f003 0308 	and.w	r3, r3, #8
 80031d6:	613b      	str	r3, [r7, #16]
 80031d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031da:	4b2b      	ldr	r3, [pc, #172]	; (8003288 <HAL_TIM_MspPostInit+0x174>)
 80031dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031de:	4a2a      	ldr	r2, [pc, #168]	; (8003288 <HAL_TIM_MspPostInit+0x174>)
 80031e0:	f043 0302 	orr.w	r3, r3, #2
 80031e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80031e6:	4b28      	ldr	r3, [pc, #160]	; (8003288 <HAL_TIM_MspPostInit+0x174>)
 80031e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031ea:	f003 0302 	and.w	r3, r3, #2
 80031ee:	60fb      	str	r3, [r7, #12]
 80031f0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80031f2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80031f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031f8:	2302      	movs	r3, #2
 80031fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031fc:	2300      	movs	r3, #0
 80031fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003200:	2300      	movs	r3, #0
 8003202:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003204:	2302      	movs	r3, #2
 8003206:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003208:	f107 031c 	add.w	r3, r7, #28
 800320c:	4619      	mov	r1, r3
 800320e:	4821      	ldr	r0, [pc, #132]	; (8003294 <HAL_TIM_MspPostInit+0x180>)
 8003210:	f001 fc4c 	bl	8004aac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003214:	2340      	movs	r3, #64	; 0x40
 8003216:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003218:	2302      	movs	r3, #2
 800321a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800321c:	2300      	movs	r3, #0
 800321e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003220:	2300      	movs	r3, #0
 8003222:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003224:	2302      	movs	r3, #2
 8003226:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003228:	f107 031c 	add.w	r3, r7, #28
 800322c:	4619      	mov	r1, r3
 800322e:	481a      	ldr	r0, [pc, #104]	; (8003298 <HAL_TIM_MspPostInit+0x184>)
 8003230:	f001 fc3c 	bl	8004aac <HAL_GPIO_Init>
}
 8003234:	e021      	b.n	800327a <HAL_TIM_MspPostInit+0x166>
  else if(htim->Instance==TIM15)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a18      	ldr	r2, [pc, #96]	; (800329c <HAL_TIM_MspPostInit+0x188>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d11c      	bne.n	800327a <HAL_TIM_MspPostInit+0x166>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003240:	4b11      	ldr	r3, [pc, #68]	; (8003288 <HAL_TIM_MspPostInit+0x174>)
 8003242:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003244:	4a10      	ldr	r2, [pc, #64]	; (8003288 <HAL_TIM_MspPostInit+0x174>)
 8003246:	f043 0302 	orr.w	r3, r3, #2
 800324a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800324c:	4b0e      	ldr	r3, [pc, #56]	; (8003288 <HAL_TIM_MspPostInit+0x174>)
 800324e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003250:	f003 0302 	and.w	r3, r3, #2
 8003254:	60bb      	str	r3, [r7, #8]
 8003256:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003258:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800325c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800325e:	2302      	movs	r3, #2
 8003260:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003262:	2300      	movs	r3, #0
 8003264:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003266:	2300      	movs	r3, #0
 8003268:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 800326a:	230e      	movs	r3, #14
 800326c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800326e:	f107 031c 	add.w	r3, r7, #28
 8003272:	4619      	mov	r1, r3
 8003274:	4808      	ldr	r0, [pc, #32]	; (8003298 <HAL_TIM_MspPostInit+0x184>)
 8003276:	f001 fc19 	bl	8004aac <HAL_GPIO_Init>
}
 800327a:	bf00      	nop
 800327c:	3730      	adds	r7, #48	; 0x30
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	40012c00 	.word	0x40012c00
 8003288:	40021000 	.word	0x40021000
 800328c:	48001000 	.word	0x48001000
 8003290:	40000800 	.word	0x40000800
 8003294:	48000c00 	.word	0x48000c00
 8003298:	48000400 	.word	0x48000400
 800329c:	40014000 	.word	0x40014000

080032a0 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b088      	sub	sp, #32
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a1e      	ldr	r2, [pc, #120]	; (8003328 <HAL_SAI_MspInit+0x88>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d135      	bne.n	800331e <HAL_SAI_MspInit+0x7e>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 80032b2:	4b1e      	ldr	r3, [pc, #120]	; (800332c <HAL_SAI_MspInit+0x8c>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d10b      	bne.n	80032d2 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80032ba:	4b1d      	ldr	r3, [pc, #116]	; (8003330 <HAL_SAI_MspInit+0x90>)
 80032bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032be:	4a1c      	ldr	r2, [pc, #112]	; (8003330 <HAL_SAI_MspInit+0x90>)
 80032c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80032c4:	6613      	str	r3, [r2, #96]	; 0x60
 80032c6:	4b1a      	ldr	r3, [pc, #104]	; (8003330 <HAL_SAI_MspInit+0x90>)
 80032c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032ce:	60bb      	str	r3, [r7, #8]
 80032d0:	68bb      	ldr	r3, [r7, #8]
    }
    SAI2_client ++;
 80032d2:	4b16      	ldr	r3, [pc, #88]	; (800332c <HAL_SAI_MspInit+0x8c>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	3301      	adds	r3, #1
 80032d8:	4a14      	ldr	r2, [pc, #80]	; (800332c <HAL_SAI_MspInit+0x8c>)
 80032da:	6013      	str	r3, [r2, #0]
    PB12     ------> SAI2_FS_A
    PB13     ------> SAI2_SCK_A
    PB15     ------> SAI2_SD_A
    PC6     ------> SAI2_MCLK_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80032dc:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 80032e0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032e2:	2302      	movs	r3, #2
 80032e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032e6:	2300      	movs	r3, #0
 80032e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032ea:	2300      	movs	r3, #0
 80032ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80032ee:	230d      	movs	r3, #13
 80032f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032f2:	f107 030c 	add.w	r3, r7, #12
 80032f6:	4619      	mov	r1, r3
 80032f8:	480e      	ldr	r0, [pc, #56]	; (8003334 <HAL_SAI_MspInit+0x94>)
 80032fa:	f001 fbd7 	bl	8004aac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80032fe:	2340      	movs	r3, #64	; 0x40
 8003300:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003302:	2302      	movs	r3, #2
 8003304:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003306:	2300      	movs	r3, #0
 8003308:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800330a:	2300      	movs	r3, #0
 800330c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 800330e:	230d      	movs	r3, #13
 8003310:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003312:	f107 030c 	add.w	r3, r7, #12
 8003316:	4619      	mov	r1, r3
 8003318:	4807      	ldr	r0, [pc, #28]	; (8003338 <HAL_SAI_MspInit+0x98>)
 800331a:	f001 fbc7 	bl	8004aac <HAL_GPIO_Init>

    }
}
 800331e:	bf00      	nop
 8003320:	3720      	adds	r7, #32
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	40015804 	.word	0x40015804
 800332c:	20000844 	.word	0x20000844
 8003330:	40021000 	.word	0x40021000
 8003334:	48000400 	.word	0x48000400
 8003338:	48000800 	.word	0x48000800

0800333c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800333c:	b480      	push	{r7}
 800333e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003340:	e7fe      	b.n	8003340 <NMI_Handler+0x4>

08003342 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003342:	b480      	push	{r7}
 8003344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003346:	e7fe      	b.n	8003346 <HardFault_Handler+0x4>

08003348 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003348:	b480      	push	{r7}
 800334a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800334c:	e7fe      	b.n	800334c <MemManage_Handler+0x4>

0800334e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800334e:	b480      	push	{r7}
 8003350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003352:	e7fe      	b.n	8003352 <BusFault_Handler+0x4>

08003354 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003354:	b480      	push	{r7}
 8003356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003358:	e7fe      	b.n	8003358 <UsageFault_Handler+0x4>

0800335a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800335a:	b480      	push	{r7}
 800335c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800335e:	bf00      	nop
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr

08003368 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003368:	b480      	push	{r7}
 800336a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800336c:	bf00      	nop
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr

08003376 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003376:	b480      	push	{r7}
 8003378:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800337a:	bf00      	nop
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr

08003384 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003388:	f000 fa24 	bl	80037d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800338c:	bf00      	nop
 800338e:	bd80      	pop	{r7, pc}

08003390 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */
	static uint8_t mode = 0;

	extern enum State state;
	const float threshod = 12.0;
 8003396:	4b28      	ldr	r3, [pc, #160]	; (8003438 <TIM1_CC_IRQHandler+0xa8>)
 8003398:	60fb      	str	r3, [r7, #12]

	if (mode == 0) {
 800339a:	4b28      	ldr	r3, [pc, #160]	; (800343c <TIM1_CC_IRQHandler+0xac>)
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d112      	bne.n	80033c8 <TIM1_CC_IRQHandler+0x38>
		// rising edge
		TIM1->CNT = 0;
 80033a2:	4b27      	ldr	r3, [pc, #156]	; (8003440 <TIM1_CC_IRQHandler+0xb0>)
 80033a4:	2200      	movs	r2, #0
 80033a6:	625a      	str	r2, [r3, #36]	; 0x24
		TIM1->CCER |= (0b1 << 1);
 80033a8:	4b25      	ldr	r3, [pc, #148]	; (8003440 <TIM1_CC_IRQHandler+0xb0>)
 80033aa:	6a1b      	ldr	r3, [r3, #32]
 80033ac:	4a24      	ldr	r2, [pc, #144]	; (8003440 <TIM1_CC_IRQHandler+0xb0>)
 80033ae:	f043 0302 	orr.w	r3, r3, #2
 80033b2:	6213      	str	r3, [r2, #32]
		TIM1->CCER &= ~(0b1 << 3);
 80033b4:	4b22      	ldr	r3, [pc, #136]	; (8003440 <TIM1_CC_IRQHandler+0xb0>)
 80033b6:	6a1b      	ldr	r3, [r3, #32]
 80033b8:	4a21      	ldr	r2, [pc, #132]	; (8003440 <TIM1_CC_IRQHandler+0xb0>)
 80033ba:	f023 0308 	bic.w	r3, r3, #8
 80033be:	6213      	str	r3, [r2, #32]
		mode = 1;
 80033c0:	4b1e      	ldr	r3, [pc, #120]	; (800343c <TIM1_CC_IRQHandler+0xac>)
 80033c2:	2201      	movs	r2, #1
 80033c4:	701a      	strb	r2, [r3, #0]
 80033c6:	e030      	b.n	800342a <TIM1_CC_IRQHandler+0x9a>
	} else {
		// falling edge
		uint16_t local_count = TIM1->CNT;
 80033c8:	4b1d      	ldr	r3, [pc, #116]	; (8003440 <TIM1_CC_IRQHandler+0xb0>)
 80033ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033cc:	817b      	strh	r3, [r7, #10]
		float distance = (float)local_count * 1.0 / 144;
 80033ce:	897b      	ldrh	r3, [r7, #10]
 80033d0:	ee07 3a90 	vmov	s15, r3
 80033d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80033d8:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8003444 <TIM1_CC_IRQHandler+0xb4>
 80033dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80033e0:	edc7 7a01 	vstr	s15, [r7, #4]
		printf("Distance: %f\n", distance);
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f7fd f8c7 	bl	8000578 <__aeabi_f2d>
 80033ea:	4602      	mov	r2, r0
 80033ec:	460b      	mov	r3, r1
 80033ee:	4816      	ldr	r0, [pc, #88]	; (8003448 <TIM1_CC_IRQHandler+0xb8>)
 80033f0:	f008 feb6 	bl	800c160 <iprintf>

		if (distance < threshod) {
 80033f4:	ed97 7a01 	vldr	s14, [r7, #4]
 80033f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80033fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003404:	d502      	bpl.n	800340c <TIM1_CC_IRQHandler+0x7c>
			state = AVOID_COLLISION;
 8003406:	4b11      	ldr	r3, [pc, #68]	; (800344c <TIM1_CC_IRQHandler+0xbc>)
 8003408:	2204      	movs	r2, #4
 800340a:	701a      	strb	r2, [r3, #0]
		}

		TIM1->CCER &= ~(0b1 << 1);
 800340c:	4b0c      	ldr	r3, [pc, #48]	; (8003440 <TIM1_CC_IRQHandler+0xb0>)
 800340e:	6a1b      	ldr	r3, [r3, #32]
 8003410:	4a0b      	ldr	r2, [pc, #44]	; (8003440 <TIM1_CC_IRQHandler+0xb0>)
 8003412:	f023 0302 	bic.w	r3, r3, #2
 8003416:	6213      	str	r3, [r2, #32]
		TIM1->CCER &= ~(0b1 << 3);
 8003418:	4b09      	ldr	r3, [pc, #36]	; (8003440 <TIM1_CC_IRQHandler+0xb0>)
 800341a:	6a1b      	ldr	r3, [r3, #32]
 800341c:	4a08      	ldr	r2, [pc, #32]	; (8003440 <TIM1_CC_IRQHandler+0xb0>)
 800341e:	f023 0308 	bic.w	r3, r3, #8
 8003422:	6213      	str	r3, [r2, #32]
		mode = 0;
 8003424:	4b05      	ldr	r3, [pc, #20]	; (800343c <TIM1_CC_IRQHandler+0xac>)
 8003426:	2200      	movs	r2, #0
 8003428:	701a      	strb	r2, [r3, #0]
	}

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800342a:	4809      	ldr	r0, [pc, #36]	; (8003450 <TIM1_CC_IRQHandler+0xc0>)
 800342c:	f006 f834 	bl	8009498 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8003430:	bf00      	nop
 8003432:	3710      	adds	r7, #16
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}
 8003438:	41400000 	.word	0x41400000
 800343c:	20000848 	.word	0x20000848
 8003440:	40012c00 	.word	0x40012c00
 8003444:	43100000 	.word	0x43100000
 8003448:	0800e2c8 	.word	0x0800e2c8
 800344c:	20000226 	.word	0x20000226
 8003450:	20000678 	.word	0x20000678

08003454 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b082      	sub	sp, #8
 8003458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	const uint32_t THRESHOD = 15;
 800345a:	230f      	movs	r3, #15
 800345c:	607b      	str	r3, [r7, #4]

	extern uint32_t count;

	static uint8_t mode = 0;

	if (mode == 0) {
 800345e:	4b20      	ldr	r3, [pc, #128]	; (80034e0 <TIM3_IRQHandler+0x8c>)
 8003460:	781b      	ldrb	r3, [r3, #0]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d112      	bne.n	800348c <TIM3_IRQHandler+0x38>
		// falling edge
		TIM3->CNT = 0;
 8003466:	4b1f      	ldr	r3, [pc, #124]	; (80034e4 <TIM3_IRQHandler+0x90>)
 8003468:	2200      	movs	r2, #0
 800346a:	625a      	str	r2, [r3, #36]	; 0x24
		TIM3->CCER &= ~(0b1 << 5);
 800346c:	4b1d      	ldr	r3, [pc, #116]	; (80034e4 <TIM3_IRQHandler+0x90>)
 800346e:	6a1b      	ldr	r3, [r3, #32]
 8003470:	4a1c      	ldr	r2, [pc, #112]	; (80034e4 <TIM3_IRQHandler+0x90>)
 8003472:	f023 0320 	bic.w	r3, r3, #32
 8003476:	6213      	str	r3, [r2, #32]
		TIM3->CCER &= ~(0b1 << 7);
 8003478:	4b1a      	ldr	r3, [pc, #104]	; (80034e4 <TIM3_IRQHandler+0x90>)
 800347a:	6a1b      	ldr	r3, [r3, #32]
 800347c:	4a19      	ldr	r2, [pc, #100]	; (80034e4 <TIM3_IRQHandler+0x90>)
 800347e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003482:	6213      	str	r3, [r2, #32]
		mode = 1;
 8003484:	4b16      	ldr	r3, [pc, #88]	; (80034e0 <TIM3_IRQHandler+0x8c>)
 8003486:	2201      	movs	r2, #1
 8003488:	701a      	strb	r2, [r3, #0]
 800348a:	e021      	b.n	80034d0 <TIM3_IRQHandler+0x7c>
	} else {
		// rising edge;
		uint32_t local_count = TIM3->CNT;
 800348c:	4b15      	ldr	r3, [pc, #84]	; (80034e4 <TIM3_IRQHandler+0x90>)
 800348e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003490:	603b      	str	r3, [r7, #0]
		count = local_count;
 8003492:	4a15      	ldr	r2, [pc, #84]	; (80034e8 <TIM3_IRQHandler+0x94>)
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	6013      	str	r3, [r2, #0]

		if (local_count > THRESHOD) {
 8003498:	683a      	ldr	r2, [r7, #0]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	429a      	cmp	r2, r3
 800349e:	d908      	bls.n	80034b2 <TIM3_IRQHandler+0x5e>
			 ball_collected = 1;
 80034a0:	4b12      	ldr	r3, [pc, #72]	; (80034ec <TIM3_IRQHandler+0x98>)
 80034a2:	2201      	movs	r2, #1
 80034a4:	701a      	strb	r2, [r3, #0]
			 ball_count++;
 80034a6:	4b12      	ldr	r3, [pc, #72]	; (80034f0 <TIM3_IRQHandler+0x9c>)
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	3301      	adds	r3, #1
 80034ac:	b2da      	uxtb	r2, r3
 80034ae:	4b10      	ldr	r3, [pc, #64]	; (80034f0 <TIM3_IRQHandler+0x9c>)
 80034b0:	701a      	strb	r2, [r3, #0]
		}

		TIM3->CCER |= (0b1 << 5);
 80034b2:	4b0c      	ldr	r3, [pc, #48]	; (80034e4 <TIM3_IRQHandler+0x90>)
 80034b4:	6a1b      	ldr	r3, [r3, #32]
 80034b6:	4a0b      	ldr	r2, [pc, #44]	; (80034e4 <TIM3_IRQHandler+0x90>)
 80034b8:	f043 0320 	orr.w	r3, r3, #32
 80034bc:	6213      	str	r3, [r2, #32]
		TIM3->CCER &= ~(0b1 << 7);
 80034be:	4b09      	ldr	r3, [pc, #36]	; (80034e4 <TIM3_IRQHandler+0x90>)
 80034c0:	6a1b      	ldr	r3, [r3, #32]
 80034c2:	4a08      	ldr	r2, [pc, #32]	; (80034e4 <TIM3_IRQHandler+0x90>)
 80034c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034c8:	6213      	str	r3, [r2, #32]
		mode = 0;
 80034ca:	4b05      	ldr	r3, [pc, #20]	; (80034e0 <TIM3_IRQHandler+0x8c>)
 80034cc:	2200      	movs	r2, #0
 80034ce:	701a      	strb	r2, [r3, #0]
	}


  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80034d0:	4808      	ldr	r0, [pc, #32]	; (80034f4 <TIM3_IRQHandler+0xa0>)
 80034d2:	f005 ffe1 	bl	8009498 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80034d6:	bf00      	nop
 80034d8:	3708      	adds	r7, #8
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	20000849 	.word	0x20000849
 80034e4:	40000400 	.word	0x40000400
 80034e8:	20000234 	.word	0x20000234
 80034ec:	2000022c 	.word	0x2000022c
 80034f0:	2000022b 	.word	0x2000022b
 80034f4:	20000710 	.word	0x20000710

080034f8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
	extern uint8_t avoid_finished;
	if (avoid_finished == 0) {
 80034fc:	4b07      	ldr	r3, [pc, #28]	; (800351c <TIM5_IRQHandler+0x24>)
 80034fe:	781b      	ldrb	r3, [r3, #0]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d102      	bne.n	800350a <TIM5_IRQHandler+0x12>
		avoid_finished = 1;
 8003504:	4b05      	ldr	r3, [pc, #20]	; (800351c <TIM5_IRQHandler+0x24>)
 8003506:	2201      	movs	r2, #1
 8003508:	701a      	strb	r2, [r3, #0]
	}
	printf("Avoid_Collision: Timer 5 seconds\n");
 800350a:	4805      	ldr	r0, [pc, #20]	; (8003520 <TIM5_IRQHandler+0x28>)
 800350c:	f008 feae 	bl	800c26c <puts>
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003510:	4804      	ldr	r0, [pc, #16]	; (8003524 <TIM5_IRQHandler+0x2c>)
 8003512:	f005 ffc1 	bl	8009498 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003516:	bf00      	nop
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	2000022e 	.word	0x2000022e
 8003520:	0800e2d8 	.word	0x0800e2d8
 8003524:	200007a8 	.word	0x200007a8

08003528 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003528:	b480      	push	{r7}
 800352a:	af00      	add	r7, sp, #0
	return 1;
 800352c:	2301      	movs	r3, #1
}
 800352e:	4618      	mov	r0, r3
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr

08003538 <_kill>:

int _kill(int pid, int sig)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003542:	f008 f889 	bl	800b658 <__errno>
 8003546:	4603      	mov	r3, r0
 8003548:	2216      	movs	r2, #22
 800354a:	601a      	str	r2, [r3, #0]
	return -1;
 800354c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003550:	4618      	mov	r0, r3
 8003552:	3708      	adds	r7, #8
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}

08003558 <_exit>:

void _exit (int status)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003560:	f04f 31ff 	mov.w	r1, #4294967295
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f7ff ffe7 	bl	8003538 <_kill>
	while (1) {}		/* Make sure we hang here */
 800356a:	e7fe      	b.n	800356a <_exit+0x12>

0800356c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b086      	sub	sp, #24
 8003570:	af00      	add	r7, sp, #0
 8003572:	60f8      	str	r0, [r7, #12]
 8003574:	60b9      	str	r1, [r7, #8]
 8003576:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003578:	2300      	movs	r3, #0
 800357a:	617b      	str	r3, [r7, #20]
 800357c:	e00a      	b.n	8003594 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800357e:	f3af 8000 	nop.w
 8003582:	4601      	mov	r1, r0
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	1c5a      	adds	r2, r3, #1
 8003588:	60ba      	str	r2, [r7, #8]
 800358a:	b2ca      	uxtb	r2, r1
 800358c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	3301      	adds	r3, #1
 8003592:	617b      	str	r3, [r7, #20]
 8003594:	697a      	ldr	r2, [r7, #20]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	429a      	cmp	r2, r3
 800359a:	dbf0      	blt.n	800357e <_read+0x12>
	}

return len;
 800359c:	687b      	ldr	r3, [r7, #4]
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3718      	adds	r7, #24
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}

080035a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80035a6:	b580      	push	{r7, lr}
 80035a8:	b086      	sub	sp, #24
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	60f8      	str	r0, [r7, #12]
 80035ae:	60b9      	str	r1, [r7, #8]
 80035b0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035b2:	2300      	movs	r3, #0
 80035b4:	617b      	str	r3, [r7, #20]
 80035b6:	e009      	b.n	80035cc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	1c5a      	adds	r2, r3, #1
 80035bc:	60ba      	str	r2, [r7, #8]
 80035be:	781b      	ldrb	r3, [r3, #0]
 80035c0:	4618      	mov	r0, r3
 80035c2:	f7ff f821 	bl	8002608 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	3301      	adds	r3, #1
 80035ca:	617b      	str	r3, [r7, #20]
 80035cc:	697a      	ldr	r2, [r7, #20]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	dbf1      	blt.n	80035b8 <_write+0x12>
	}
	return len;
 80035d4:	687b      	ldr	r3, [r7, #4]
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3718      	adds	r7, #24
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}

080035de <_close>:

int _close(int file)
{
 80035de:	b480      	push	{r7}
 80035e0:	b083      	sub	sp, #12
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	6078      	str	r0, [r7, #4]
	return -1;
 80035e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	370c      	adds	r7, #12
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr

080035f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80035f6:	b480      	push	{r7}
 80035f8:	b083      	sub	sp, #12
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]
 80035fe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003606:	605a      	str	r2, [r3, #4]
	return 0;
 8003608:	2300      	movs	r3, #0
}
 800360a:	4618      	mov	r0, r3
 800360c:	370c      	adds	r7, #12
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr

08003616 <_isatty>:

int _isatty(int file)
{
 8003616:	b480      	push	{r7}
 8003618:	b083      	sub	sp, #12
 800361a:	af00      	add	r7, sp, #0
 800361c:	6078      	str	r0, [r7, #4]
	return 1;
 800361e:	2301      	movs	r3, #1
}
 8003620:	4618      	mov	r0, r3
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800362c:	b480      	push	{r7}
 800362e:	b085      	sub	sp, #20
 8003630:	af00      	add	r7, sp, #0
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	60b9      	str	r1, [r7, #8]
 8003636:	607a      	str	r2, [r7, #4]
	return 0;
 8003638:	2300      	movs	r3, #0
}
 800363a:	4618      	mov	r0, r3
 800363c:	3714      	adds	r7, #20
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
	...

08003648 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b086      	sub	sp, #24
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003650:	4a14      	ldr	r2, [pc, #80]	; (80036a4 <_sbrk+0x5c>)
 8003652:	4b15      	ldr	r3, [pc, #84]	; (80036a8 <_sbrk+0x60>)
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800365c:	4b13      	ldr	r3, [pc, #76]	; (80036ac <_sbrk+0x64>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d102      	bne.n	800366a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003664:	4b11      	ldr	r3, [pc, #68]	; (80036ac <_sbrk+0x64>)
 8003666:	4a12      	ldr	r2, [pc, #72]	; (80036b0 <_sbrk+0x68>)
 8003668:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800366a:	4b10      	ldr	r3, [pc, #64]	; (80036ac <_sbrk+0x64>)
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4413      	add	r3, r2
 8003672:	693a      	ldr	r2, [r7, #16]
 8003674:	429a      	cmp	r2, r3
 8003676:	d207      	bcs.n	8003688 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003678:	f007 ffee 	bl	800b658 <__errno>
 800367c:	4603      	mov	r3, r0
 800367e:	220c      	movs	r2, #12
 8003680:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003682:	f04f 33ff 	mov.w	r3, #4294967295
 8003686:	e009      	b.n	800369c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003688:	4b08      	ldr	r3, [pc, #32]	; (80036ac <_sbrk+0x64>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800368e:	4b07      	ldr	r3, [pc, #28]	; (80036ac <_sbrk+0x64>)
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4413      	add	r3, r2
 8003696:	4a05      	ldr	r2, [pc, #20]	; (80036ac <_sbrk+0x64>)
 8003698:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800369a:	68fb      	ldr	r3, [r7, #12]
}
 800369c:	4618      	mov	r0, r3
 800369e:	3718      	adds	r7, #24
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	200a0000 	.word	0x200a0000
 80036a8:	00000400 	.word	0x00000400
 80036ac:	2000084c 	.word	0x2000084c
 80036b0:	20000868 	.word	0x20000868

080036b4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80036b4:	b480      	push	{r7}
 80036b6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80036b8:	4b06      	ldr	r3, [pc, #24]	; (80036d4 <SystemInit+0x20>)
 80036ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036be:	4a05      	ldr	r2, [pc, #20]	; (80036d4 <SystemInit+0x20>)
 80036c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80036c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80036c8:	bf00      	nop
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr
 80036d2:	bf00      	nop
 80036d4:	e000ed00 	.word	0xe000ed00

080036d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80036d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003710 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80036dc:	f7ff ffea 	bl	80036b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80036e0:	480c      	ldr	r0, [pc, #48]	; (8003714 <LoopForever+0x6>)
  ldr r1, =_edata
 80036e2:	490d      	ldr	r1, [pc, #52]	; (8003718 <LoopForever+0xa>)
  ldr r2, =_sidata
 80036e4:	4a0d      	ldr	r2, [pc, #52]	; (800371c <LoopForever+0xe>)
  movs r3, #0
 80036e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80036e8:	e002      	b.n	80036f0 <LoopCopyDataInit>

080036ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80036ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80036ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80036ee:	3304      	adds	r3, #4

080036f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80036f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80036f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80036f4:	d3f9      	bcc.n	80036ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80036f6:	4a0a      	ldr	r2, [pc, #40]	; (8003720 <LoopForever+0x12>)
  ldr r4, =_ebss
 80036f8:	4c0a      	ldr	r4, [pc, #40]	; (8003724 <LoopForever+0x16>)
  movs r3, #0
 80036fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80036fc:	e001      	b.n	8003702 <LoopFillZerobss>

080036fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80036fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003700:	3204      	adds	r2, #4

08003702 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003702:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003704:	d3fb      	bcc.n	80036fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003706:	f007 ffad 	bl	800b664 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800370a:	f7fd ffd7 	bl	80016bc <main>

0800370e <LoopForever>:

LoopForever:
    b LoopForever
 800370e:	e7fe      	b.n	800370e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003710:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8003714:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003718:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 800371c:	0800e754 	.word	0x0800e754
  ldr r2, =_sbss
 8003720:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8003724:	20000864 	.word	0x20000864

08003728 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003728:	e7fe      	b.n	8003728 <ADC1_IRQHandler>

0800372a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800372a:	b580      	push	{r7, lr}
 800372c:	b082      	sub	sp, #8
 800372e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003730:	2300      	movs	r3, #0
 8003732:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003734:	2003      	movs	r0, #3
 8003736:	f001 f969 	bl	8004a0c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800373a:	2000      	movs	r0, #0
 800373c:	f000 f80e 	bl	800375c <HAL_InitTick>
 8003740:	4603      	mov	r3, r0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d002      	beq.n	800374c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	71fb      	strb	r3, [r7, #7]
 800374a:	e001      	b.n	8003750 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800374c:	f7ff f88c 	bl	8002868 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003750:	79fb      	ldrb	r3, [r7, #7]
}
 8003752:	4618      	mov	r0, r3
 8003754:	3708      	adds	r7, #8
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
	...

0800375c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003764:	2300      	movs	r3, #0
 8003766:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003768:	4b17      	ldr	r3, [pc, #92]	; (80037c8 <HAL_InitTick+0x6c>)
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d023      	beq.n	80037b8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003770:	4b16      	ldr	r3, [pc, #88]	; (80037cc <HAL_InitTick+0x70>)
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	4b14      	ldr	r3, [pc, #80]	; (80037c8 <HAL_InitTick+0x6c>)
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	4619      	mov	r1, r3
 800377a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800377e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003782:	fbb2 f3f3 	udiv	r3, r2, r3
 8003786:	4618      	mov	r0, r3
 8003788:	f001 f983 	bl	8004a92 <HAL_SYSTICK_Config>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d10f      	bne.n	80037b2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2b0f      	cmp	r3, #15
 8003796:	d809      	bhi.n	80037ac <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003798:	2200      	movs	r2, #0
 800379a:	6879      	ldr	r1, [r7, #4]
 800379c:	f04f 30ff 	mov.w	r0, #4294967295
 80037a0:	f001 f93f 	bl	8004a22 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80037a4:	4a0a      	ldr	r2, [pc, #40]	; (80037d0 <HAL_InitTick+0x74>)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6013      	str	r3, [r2, #0]
 80037aa:	e007      	b.n	80037bc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	73fb      	strb	r3, [r7, #15]
 80037b0:	e004      	b.n	80037bc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	73fb      	strb	r3, [r7, #15]
 80037b6:	e001      	b.n	80037bc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80037bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3710      	adds	r7, #16
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	20000010 	.word	0x20000010
 80037cc:	20000008 	.word	0x20000008
 80037d0:	2000000c 	.word	0x2000000c

080037d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80037d4:	b480      	push	{r7}
 80037d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80037d8:	4b06      	ldr	r3, [pc, #24]	; (80037f4 <HAL_IncTick+0x20>)
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	461a      	mov	r2, r3
 80037de:	4b06      	ldr	r3, [pc, #24]	; (80037f8 <HAL_IncTick+0x24>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4413      	add	r3, r2
 80037e4:	4a04      	ldr	r2, [pc, #16]	; (80037f8 <HAL_IncTick+0x24>)
 80037e6:	6013      	str	r3, [r2, #0]
}
 80037e8:	bf00      	nop
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop
 80037f4:	20000010 	.word	0x20000010
 80037f8:	20000850 	.word	0x20000850

080037fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037fc:	b480      	push	{r7}
 80037fe:	af00      	add	r7, sp, #0
  return uwTick;
 8003800:	4b03      	ldr	r3, [pc, #12]	; (8003810 <HAL_GetTick+0x14>)
 8003802:	681b      	ldr	r3, [r3, #0]
}
 8003804:	4618      	mov	r0, r3
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop
 8003810:	20000850 	.word	0x20000850

08003814 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800381c:	f7ff ffee 	bl	80037fc <HAL_GetTick>
 8003820:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800382c:	d005      	beq.n	800383a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800382e:	4b0a      	ldr	r3, [pc, #40]	; (8003858 <HAL_Delay+0x44>)
 8003830:	781b      	ldrb	r3, [r3, #0]
 8003832:	461a      	mov	r2, r3
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	4413      	add	r3, r2
 8003838:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800383a:	bf00      	nop
 800383c:	f7ff ffde 	bl	80037fc <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	68fa      	ldr	r2, [r7, #12]
 8003848:	429a      	cmp	r2, r3
 800384a:	d8f7      	bhi.n	800383c <HAL_Delay+0x28>
  {
  }
}
 800384c:	bf00      	nop
 800384e:	bf00      	nop
 8003850:	3710      	adds	r7, #16
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	20000010 	.word	0x20000010

0800385c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	431a      	orrs	r2, r3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	609a      	str	r2, [r3, #8]
}
 8003876:	bf00      	nop
 8003878:	370c      	adds	r7, #12
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr

08003882 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003882:	b480      	push	{r7}
 8003884:	b083      	sub	sp, #12
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]
 800388a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	431a      	orrs	r2, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	609a      	str	r2, [r3, #8]
}
 800389c:	bf00      	nop
 800389e:	370c      	adds	r7, #12
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr

080038a8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	370c      	adds	r7, #12
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr

080038c4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b087      	sub	sp, #28
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	60b9      	str	r1, [r7, #8]
 80038ce:	607a      	str	r2, [r7, #4]
 80038d0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	3360      	adds	r3, #96	; 0x60
 80038d6:	461a      	mov	r2, r3
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	4413      	add	r3, r2
 80038de:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	4b08      	ldr	r3, [pc, #32]	; (8003908 <LL_ADC_SetOffset+0x44>)
 80038e6:	4013      	ands	r3, r2
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80038ee:	683a      	ldr	r2, [r7, #0]
 80038f0:	430a      	orrs	r2, r1
 80038f2:	4313      	orrs	r3, r2
 80038f4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80038fc:	bf00      	nop
 80038fe:	371c      	adds	r7, #28
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr
 8003908:	03fff000 	.word	0x03fff000

0800390c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800390c:	b480      	push	{r7}
 800390e:	b085      	sub	sp, #20
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	3360      	adds	r3, #96	; 0x60
 800391a:	461a      	mov	r2, r3
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	4413      	add	r3, r2
 8003922:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800392c:	4618      	mov	r0, r3
 800392e:	3714      	adds	r7, #20
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr

08003938 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003938:	b480      	push	{r7}
 800393a:	b087      	sub	sp, #28
 800393c:	af00      	add	r7, sp, #0
 800393e:	60f8      	str	r0, [r7, #12]
 8003940:	60b9      	str	r1, [r7, #8]
 8003942:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	3360      	adds	r3, #96	; 0x60
 8003948:	461a      	mov	r2, r3
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	4413      	add	r3, r2
 8003950:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	431a      	orrs	r2, r3
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003962:	bf00      	nop
 8003964:	371c      	adds	r7, #28
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr

0800396e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800396e:	b480      	push	{r7}
 8003970:	b083      	sub	sp, #12
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
 8003976:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	695b      	ldr	r3, [r3, #20]
 800397c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	431a      	orrs	r2, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	615a      	str	r2, [r3, #20]
}
 8003988:	bf00      	nop
 800398a:	370c      	adds	r7, #12
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr

08003994 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003994:	b480      	push	{r7}
 8003996:	b087      	sub	sp, #28
 8003998:	af00      	add	r7, sp, #0
 800399a:	60f8      	str	r0, [r7, #12]
 800399c:	60b9      	str	r1, [r7, #8]
 800399e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	3330      	adds	r3, #48	; 0x30
 80039a4:	461a      	mov	r2, r3
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	0a1b      	lsrs	r3, r3, #8
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	f003 030c 	and.w	r3, r3, #12
 80039b0:	4413      	add	r3, r2
 80039b2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	f003 031f 	and.w	r3, r3, #31
 80039be:	211f      	movs	r1, #31
 80039c0:	fa01 f303 	lsl.w	r3, r1, r3
 80039c4:	43db      	mvns	r3, r3
 80039c6:	401a      	ands	r2, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	0e9b      	lsrs	r3, r3, #26
 80039cc:	f003 011f 	and.w	r1, r3, #31
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	f003 031f 	and.w	r3, r3, #31
 80039d6:	fa01 f303 	lsl.w	r3, r1, r3
 80039da:	431a      	orrs	r2, r3
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80039e0:	bf00      	nop
 80039e2:	371c      	adds	r7, #28
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr

080039ec <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b087      	sub	sp, #28
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	60b9      	str	r1, [r7, #8]
 80039f6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	3314      	adds	r3, #20
 80039fc:	461a      	mov	r2, r3
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	0e5b      	lsrs	r3, r3, #25
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	f003 0304 	and.w	r3, r3, #4
 8003a08:	4413      	add	r3, r2
 8003a0a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	0d1b      	lsrs	r3, r3, #20
 8003a14:	f003 031f 	and.w	r3, r3, #31
 8003a18:	2107      	movs	r1, #7
 8003a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a1e:	43db      	mvns	r3, r3
 8003a20:	401a      	ands	r2, r3
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	0d1b      	lsrs	r3, r3, #20
 8003a26:	f003 031f 	and.w	r3, r3, #31
 8003a2a:	6879      	ldr	r1, [r7, #4]
 8003a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a30:	431a      	orrs	r2, r3
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003a36:	bf00      	nop
 8003a38:	371c      	adds	r7, #28
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr
	...

08003a44 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b085      	sub	sp, #20
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	60b9      	str	r1, [r7, #8]
 8003a4e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a5c:	43db      	mvns	r3, r3
 8003a5e:	401a      	ands	r2, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f003 0318 	and.w	r3, r3, #24
 8003a66:	4908      	ldr	r1, [pc, #32]	; (8003a88 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003a68:	40d9      	lsrs	r1, r3
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	400b      	ands	r3, r1
 8003a6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a72:	431a      	orrs	r2, r3
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003a7a:	bf00      	nop
 8003a7c:	3714      	adds	r7, #20
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr
 8003a86:	bf00      	nop
 8003a88:	0007ffff 	.word	0x0007ffff

08003a8c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003a9c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	6093      	str	r3, [r2, #8]
}
 8003aa4:	bf00      	nop
 8003aa6:	370c      	adds	r7, #12
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr

08003ab0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ac0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ac4:	d101      	bne.n	8003aca <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e000      	b.n	8003acc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003aca:	2300      	movs	r3, #0
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	370c      	adds	r7, #12
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr

08003ad8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003ae8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003aec:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003af4:	bf00      	nop
 8003af6:	370c      	adds	r7, #12
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr

08003b00 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b10:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b14:	d101      	bne.n	8003b1a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003b16:	2301      	movs	r3, #1
 8003b18:	e000      	b.n	8003b1c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003b1a:	2300      	movs	r3, #0
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	370c      	adds	r7, #12
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr

08003b28 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	f003 0301 	and.w	r3, r3, #1
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d101      	bne.n	8003b40 <LL_ADC_IsEnabled+0x18>
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e000      	b.n	8003b42 <LL_ADC_IsEnabled+0x1a>
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	370c      	adds	r7, #12
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr

08003b4e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003b4e:	b480      	push	{r7}
 8003b50:	b083      	sub	sp, #12
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	f003 0304 	and.w	r3, r3, #4
 8003b5e:	2b04      	cmp	r3, #4
 8003b60:	d101      	bne.n	8003b66 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003b62:	2301      	movs	r3, #1
 8003b64:	e000      	b.n	8003b68 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003b66:	2300      	movs	r3, #0
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	370c      	adds	r7, #12
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr

08003b74 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	f003 0308 	and.w	r3, r3, #8
 8003b84:	2b08      	cmp	r3, #8
 8003b86:	d101      	bne.n	8003b8c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e000      	b.n	8003b8e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003b8c:	2300      	movs	r3, #0
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	370c      	adds	r7, #12
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr
	...

08003b9c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b088      	sub	sp, #32
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d101      	bne.n	8003bb6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e12f      	b.n	8003e16 <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	691b      	ldr	r3, [r3, #16]
 8003bba:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d109      	bne.n	8003bd8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f7fe fe73 	bl	80028b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f7ff ff67 	bl	8003ab0 <LL_ADC_IsDeepPowerDownEnabled>
 8003be2:	4603      	mov	r3, r0
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d004      	beq.n	8003bf2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4618      	mov	r0, r3
 8003bee:	f7ff ff4d 	bl	8003a8c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f7ff ff82 	bl	8003b00 <LL_ADC_IsInternalRegulatorEnabled>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d115      	bne.n	8003c2e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4618      	mov	r0, r3
 8003c08:	f7ff ff66 	bl	8003ad8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003c0c:	4b84      	ldr	r3, [pc, #528]	; (8003e20 <HAL_ADC_Init+0x284>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	099b      	lsrs	r3, r3, #6
 8003c12:	4a84      	ldr	r2, [pc, #528]	; (8003e24 <HAL_ADC_Init+0x288>)
 8003c14:	fba2 2303 	umull	r2, r3, r2, r3
 8003c18:	099b      	lsrs	r3, r3, #6
 8003c1a:	3301      	adds	r3, #1
 8003c1c:	005b      	lsls	r3, r3, #1
 8003c1e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003c20:	e002      	b.n	8003c28 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	3b01      	subs	r3, #1
 8003c26:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d1f9      	bne.n	8003c22 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4618      	mov	r0, r3
 8003c34:	f7ff ff64 	bl	8003b00 <LL_ADC_IsInternalRegulatorEnabled>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d10d      	bne.n	8003c5a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c42:	f043 0210 	orr.w	r2, r3, #16
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c4e:	f043 0201 	orr.w	r2, r3, #1
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f7ff ff75 	bl	8003b4e <LL_ADC_REG_IsConversionOngoing>
 8003c64:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c6a:	f003 0310 	and.w	r3, r3, #16
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	f040 80c8 	bne.w	8003e04 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	f040 80c4 	bne.w	8003e04 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c80:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003c84:	f043 0202 	orr.w	r2, r3, #2
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4618      	mov	r0, r3
 8003c92:	f7ff ff49 	bl	8003b28 <LL_ADC_IsEnabled>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d10b      	bne.n	8003cb4 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c9c:	4862      	ldr	r0, [pc, #392]	; (8003e28 <HAL_ADC_Init+0x28c>)
 8003c9e:	f7ff ff43 	bl	8003b28 <LL_ADC_IsEnabled>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d105      	bne.n	8003cb4 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	4619      	mov	r1, r3
 8003cae:	485f      	ldr	r0, [pc, #380]	; (8003e2c <HAL_ADC_Init+0x290>)
 8003cb0:	f7ff fdd4 	bl	800385c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	7e5b      	ldrb	r3, [r3, #25]
 8003cb8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003cbe:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003cc4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003cca:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003cd2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d106      	bne.n	8003cf0 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce6:	3b01      	subs	r3, #1
 8003ce8:	045b      	lsls	r3, r3, #17
 8003cea:	69ba      	ldr	r2, [r7, #24]
 8003cec:	4313      	orrs	r3, r2
 8003cee:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d009      	beq.n	8003d0c <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cfc:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d04:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003d06:	69ba      	ldr	r2, [r7, #24]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	68da      	ldr	r2, [r3, #12]
 8003d12:	4b47      	ldr	r3, [pc, #284]	; (8003e30 <HAL_ADC_Init+0x294>)
 8003d14:	4013      	ands	r3, r2
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	6812      	ldr	r2, [r2, #0]
 8003d1a:	69b9      	ldr	r1, [r7, #24]
 8003d1c:	430b      	orrs	r3, r1
 8003d1e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4618      	mov	r0, r3
 8003d26:	f7ff ff12 	bl	8003b4e <LL_ADC_REG_IsConversionOngoing>
 8003d2a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4618      	mov	r0, r3
 8003d32:	f7ff ff1f 	bl	8003b74 <LL_ADC_INJ_IsConversionOngoing>
 8003d36:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d140      	bne.n	8003dc0 <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d13d      	bne.n	8003dc0 <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	7e1b      	ldrb	r3, [r3, #24]
 8003d4c:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003d4e:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003d56:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d66:	f023 0306 	bic.w	r3, r3, #6
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	6812      	ldr	r2, [r2, #0]
 8003d6e:	69b9      	ldr	r1, [r7, #24]
 8003d70:	430b      	orrs	r3, r1
 8003d72:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d118      	bne.n	8003db0 <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	691b      	ldr	r3, [r3, #16]
 8003d84:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003d88:	f023 0304 	bic.w	r3, r3, #4
 8003d8c:	687a      	ldr	r2, [r7, #4]
 8003d8e:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003d94:	4311      	orrs	r1, r2
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003d9a:	4311      	orrs	r1, r2
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003da0:	430a      	orrs	r2, r1
 8003da2:	431a      	orrs	r2, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f042 0201 	orr.w	r2, r2, #1
 8003dac:	611a      	str	r2, [r3, #16]
 8003dae:	e007      	b.n	8003dc0 <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	691a      	ldr	r2, [r3, #16]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f022 0201 	bic.w	r2, r2, #1
 8003dbe:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	691b      	ldr	r3, [r3, #16]
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d10c      	bne.n	8003de2 <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dce:	f023 010f 	bic.w	r1, r3, #15
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	69db      	ldr	r3, [r3, #28]
 8003dd6:	1e5a      	subs	r2, r3, #1
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	430a      	orrs	r2, r1
 8003dde:	631a      	str	r2, [r3, #48]	; 0x30
 8003de0:	e007      	b.n	8003df2 <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f022 020f 	bic.w	r2, r2, #15
 8003df0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003df6:	f023 0303 	bic.w	r3, r3, #3
 8003dfa:	f043 0201 	orr.w	r2, r3, #1
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	659a      	str	r2, [r3, #88]	; 0x58
 8003e02:	e007      	b.n	8003e14 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e08:	f043 0210 	orr.w	r2, r3, #16
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003e14:	7ffb      	ldrb	r3, [r7, #31]
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3720      	adds	r7, #32
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	20000008 	.word	0x20000008
 8003e24:	053e2d63 	.word	0x053e2d63
 8003e28:	50040000 	.word	0x50040000
 8003e2c:	50040300 	.word	0x50040300
 8003e30:	fff0c007 	.word	0xfff0c007

08003e34 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b0b6      	sub	sp, #216	; 0xd8
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003e44:	2300      	movs	r3, #0
 8003e46:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d101      	bne.n	8003e56 <HAL_ADC_ConfigChannel+0x22>
 8003e52:	2302      	movs	r3, #2
 8003e54:	e3d5      	b.n	8004602 <HAL_ADC_ConfigChannel+0x7ce>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2201      	movs	r2, #1
 8003e5a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4618      	mov	r0, r3
 8003e64:	f7ff fe73 	bl	8003b4e <LL_ADC_REG_IsConversionOngoing>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	f040 83ba 	bne.w	80045e4 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	2b05      	cmp	r3, #5
 8003e76:	d824      	bhi.n	8003ec2 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	3b02      	subs	r3, #2
 8003e7e:	2b03      	cmp	r3, #3
 8003e80:	d81b      	bhi.n	8003eba <HAL_ADC_ConfigChannel+0x86>
 8003e82:	a201      	add	r2, pc, #4	; (adr r2, 8003e88 <HAL_ADC_ConfigChannel+0x54>)
 8003e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e88:	08003e99 	.word	0x08003e99
 8003e8c:	08003ea1 	.word	0x08003ea1
 8003e90:	08003ea9 	.word	0x08003ea9
 8003e94:	08003eb1 	.word	0x08003eb1
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	220c      	movs	r2, #12
 8003e9c:	605a      	str	r2, [r3, #4]
          break;
 8003e9e:	e011      	b.n	8003ec4 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	2212      	movs	r2, #18
 8003ea4:	605a      	str	r2, [r3, #4]
          break;
 8003ea6:	e00d      	b.n	8003ec4 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	2218      	movs	r2, #24
 8003eac:	605a      	str	r2, [r3, #4]
          break;
 8003eae:	e009      	b.n	8003ec4 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003eb6:	605a      	str	r2, [r3, #4]
          break;
 8003eb8:	e004      	b.n	8003ec4 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	2206      	movs	r2, #6
 8003ebe:	605a      	str	r2, [r3, #4]
          break;
 8003ec0:	e000      	b.n	8003ec4 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8003ec2:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6818      	ldr	r0, [r3, #0]
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	6859      	ldr	r1, [r3, #4]
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	f7ff fd5f 	bl	8003994 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4618      	mov	r0, r3
 8003edc:	f7ff fe37 	bl	8003b4e <LL_ADC_REG_IsConversionOngoing>
 8003ee0:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f7ff fe43 	bl	8003b74 <LL_ADC_INJ_IsConversionOngoing>
 8003eee:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003ef2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	f040 81c1 	bne.w	800427e <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003efc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	f040 81bc 	bne.w	800427e <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f0e:	d10f      	bne.n	8003f30 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6818      	ldr	r0, [r3, #0]
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	4619      	mov	r1, r3
 8003f1c:	f7ff fd66 	bl	80039ec <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f7ff fd20 	bl	800396e <LL_ADC_SetSamplingTimeCommonConfig>
 8003f2e:	e00e      	b.n	8003f4e <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6818      	ldr	r0, [r3, #0]
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	6819      	ldr	r1, [r3, #0]
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	f7ff fd55 	bl	80039ec <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	2100      	movs	r1, #0
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f7ff fd10 	bl	800396e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	695a      	ldr	r2, [r3, #20]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	08db      	lsrs	r3, r3, #3
 8003f5a:	f003 0303 	and.w	r3, r3, #3
 8003f5e:	005b      	lsls	r3, r3, #1
 8003f60:	fa02 f303 	lsl.w	r3, r2, r3
 8003f64:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	691b      	ldr	r3, [r3, #16]
 8003f6c:	2b04      	cmp	r3, #4
 8003f6e:	d00a      	beq.n	8003f86 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6818      	ldr	r0, [r3, #0]
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	6919      	ldr	r1, [r3, #16]
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003f80:	f7ff fca0 	bl	80038c4 <LL_ADC_SetOffset>
 8003f84:	e17b      	b.n	800427e <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	2100      	movs	r1, #0
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f7ff fcbd 	bl	800390c <LL_ADC_GetOffsetChannel>
 8003f92:	4603      	mov	r3, r0
 8003f94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d10a      	bne.n	8003fb2 <HAL_ADC_ConfigChannel+0x17e>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	2100      	movs	r1, #0
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f7ff fcb2 	bl	800390c <LL_ADC_GetOffsetChannel>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	0e9b      	lsrs	r3, r3, #26
 8003fac:	f003 021f 	and.w	r2, r3, #31
 8003fb0:	e01e      	b.n	8003ff0 <HAL_ADC_ConfigChannel+0x1bc>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	2100      	movs	r1, #0
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f7ff fca7 	bl	800390c <LL_ADC_GetOffsetChannel>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fc4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003fc8:	fa93 f3a3 	rbit	r3, r3
 8003fcc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003fd0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003fd4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003fd8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d101      	bne.n	8003fe4 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8003fe0:	2320      	movs	r3, #32
 8003fe2:	e004      	b.n	8003fee <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8003fe4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003fe8:	fab3 f383 	clz	r3, r3
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d105      	bne.n	8004008 <HAL_ADC_ConfigChannel+0x1d4>
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	0e9b      	lsrs	r3, r3, #26
 8004002:	f003 031f 	and.w	r3, r3, #31
 8004006:	e018      	b.n	800403a <HAL_ADC_ConfigChannel+0x206>
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004010:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004014:	fa93 f3a3 	rbit	r3, r3
 8004018:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800401c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004020:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8004024:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004028:	2b00      	cmp	r3, #0
 800402a:	d101      	bne.n	8004030 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 800402c:	2320      	movs	r3, #32
 800402e:	e004      	b.n	800403a <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8004030:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004034:	fab3 f383 	clz	r3, r3
 8004038:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800403a:	429a      	cmp	r2, r3
 800403c:	d106      	bne.n	800404c <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	2200      	movs	r2, #0
 8004044:	2100      	movs	r1, #0
 8004046:	4618      	mov	r0, r3
 8004048:	f7ff fc76 	bl	8003938 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2101      	movs	r1, #1
 8004052:	4618      	mov	r0, r3
 8004054:	f7ff fc5a 	bl	800390c <LL_ADC_GetOffsetChannel>
 8004058:	4603      	mov	r3, r0
 800405a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800405e:	2b00      	cmp	r3, #0
 8004060:	d10a      	bne.n	8004078 <HAL_ADC_ConfigChannel+0x244>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	2101      	movs	r1, #1
 8004068:	4618      	mov	r0, r3
 800406a:	f7ff fc4f 	bl	800390c <LL_ADC_GetOffsetChannel>
 800406e:	4603      	mov	r3, r0
 8004070:	0e9b      	lsrs	r3, r3, #26
 8004072:	f003 021f 	and.w	r2, r3, #31
 8004076:	e01e      	b.n	80040b6 <HAL_ADC_ConfigChannel+0x282>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	2101      	movs	r1, #1
 800407e:	4618      	mov	r0, r3
 8004080:	f7ff fc44 	bl	800390c <LL_ADC_GetOffsetChannel>
 8004084:	4603      	mov	r3, r0
 8004086:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800408a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800408e:	fa93 f3a3 	rbit	r3, r3
 8004092:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8004096:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800409a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800409e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d101      	bne.n	80040aa <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 80040a6:	2320      	movs	r3, #32
 80040a8:	e004      	b.n	80040b4 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 80040aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80040ae:	fab3 f383 	clz	r3, r3
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d105      	bne.n	80040ce <HAL_ADC_ConfigChannel+0x29a>
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	0e9b      	lsrs	r3, r3, #26
 80040c8:	f003 031f 	and.w	r3, r3, #31
 80040cc:	e018      	b.n	8004100 <HAL_ADC_ConfigChannel+0x2cc>
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040d6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80040da:	fa93 f3a3 	rbit	r3, r3
 80040de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80040e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80040e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80040ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d101      	bne.n	80040f6 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 80040f2:	2320      	movs	r3, #32
 80040f4:	e004      	b.n	8004100 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 80040f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80040fa:	fab3 f383 	clz	r3, r3
 80040fe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004100:	429a      	cmp	r2, r3
 8004102:	d106      	bne.n	8004112 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	2200      	movs	r2, #0
 800410a:	2101      	movs	r1, #1
 800410c:	4618      	mov	r0, r3
 800410e:	f7ff fc13 	bl	8003938 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	2102      	movs	r1, #2
 8004118:	4618      	mov	r0, r3
 800411a:	f7ff fbf7 	bl	800390c <LL_ADC_GetOffsetChannel>
 800411e:	4603      	mov	r3, r0
 8004120:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004124:	2b00      	cmp	r3, #0
 8004126:	d10a      	bne.n	800413e <HAL_ADC_ConfigChannel+0x30a>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	2102      	movs	r1, #2
 800412e:	4618      	mov	r0, r3
 8004130:	f7ff fbec 	bl	800390c <LL_ADC_GetOffsetChannel>
 8004134:	4603      	mov	r3, r0
 8004136:	0e9b      	lsrs	r3, r3, #26
 8004138:	f003 021f 	and.w	r2, r3, #31
 800413c:	e01e      	b.n	800417c <HAL_ADC_ConfigChannel+0x348>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	2102      	movs	r1, #2
 8004144:	4618      	mov	r0, r3
 8004146:	f7ff fbe1 	bl	800390c <LL_ADC_GetOffsetChannel>
 800414a:	4603      	mov	r3, r0
 800414c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004150:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004154:	fa93 f3a3 	rbit	r3, r3
 8004158:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800415c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004160:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8004164:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004168:	2b00      	cmp	r3, #0
 800416a:	d101      	bne.n	8004170 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 800416c:	2320      	movs	r3, #32
 800416e:	e004      	b.n	800417a <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8004170:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004174:	fab3 f383 	clz	r3, r3
 8004178:	b2db      	uxtb	r3, r3
 800417a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004184:	2b00      	cmp	r3, #0
 8004186:	d105      	bne.n	8004194 <HAL_ADC_ConfigChannel+0x360>
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	0e9b      	lsrs	r3, r3, #26
 800418e:	f003 031f 	and.w	r3, r3, #31
 8004192:	e016      	b.n	80041c2 <HAL_ADC_ConfigChannel+0x38e>
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800419c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80041a0:	fa93 f3a3 	rbit	r3, r3
 80041a4:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80041a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80041a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80041ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d101      	bne.n	80041b8 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 80041b4:	2320      	movs	r3, #32
 80041b6:	e004      	b.n	80041c2 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 80041b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80041bc:	fab3 f383 	clz	r3, r3
 80041c0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d106      	bne.n	80041d4 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	2200      	movs	r2, #0
 80041cc:	2102      	movs	r1, #2
 80041ce:	4618      	mov	r0, r3
 80041d0:	f7ff fbb2 	bl	8003938 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	2103      	movs	r1, #3
 80041da:	4618      	mov	r0, r3
 80041dc:	f7ff fb96 	bl	800390c <LL_ADC_GetOffsetChannel>
 80041e0:	4603      	mov	r3, r0
 80041e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d10a      	bne.n	8004200 <HAL_ADC_ConfigChannel+0x3cc>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2103      	movs	r1, #3
 80041f0:	4618      	mov	r0, r3
 80041f2:	f7ff fb8b 	bl	800390c <LL_ADC_GetOffsetChannel>
 80041f6:	4603      	mov	r3, r0
 80041f8:	0e9b      	lsrs	r3, r3, #26
 80041fa:	f003 021f 	and.w	r2, r3, #31
 80041fe:	e017      	b.n	8004230 <HAL_ADC_ConfigChannel+0x3fc>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	2103      	movs	r1, #3
 8004206:	4618      	mov	r0, r3
 8004208:	f7ff fb80 	bl	800390c <LL_ADC_GetOffsetChannel>
 800420c:	4603      	mov	r3, r0
 800420e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004210:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004212:	fa93 f3a3 	rbit	r3, r3
 8004216:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8004218:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800421a:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800421c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800421e:	2b00      	cmp	r3, #0
 8004220:	d101      	bne.n	8004226 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8004222:	2320      	movs	r3, #32
 8004224:	e003      	b.n	800422e <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8004226:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004228:	fab3 f383 	clz	r3, r3
 800422c:	b2db      	uxtb	r3, r3
 800422e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004238:	2b00      	cmp	r3, #0
 800423a:	d105      	bne.n	8004248 <HAL_ADC_ConfigChannel+0x414>
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	0e9b      	lsrs	r3, r3, #26
 8004242:	f003 031f 	and.w	r3, r3, #31
 8004246:	e011      	b.n	800426c <HAL_ADC_ConfigChannel+0x438>
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800424e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004250:	fa93 f3a3 	rbit	r3, r3
 8004254:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8004256:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004258:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800425a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800425c:	2b00      	cmp	r3, #0
 800425e:	d101      	bne.n	8004264 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8004260:	2320      	movs	r3, #32
 8004262:	e003      	b.n	800426c <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8004264:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004266:	fab3 f383 	clz	r3, r3
 800426a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800426c:	429a      	cmp	r2, r3
 800426e:	d106      	bne.n	800427e <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	2200      	movs	r2, #0
 8004276:	2103      	movs	r1, #3
 8004278:	4618      	mov	r0, r3
 800427a:	f7ff fb5d 	bl	8003938 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4618      	mov	r0, r3
 8004284:	f7ff fc50 	bl	8003b28 <LL_ADC_IsEnabled>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	f040 8140 	bne.w	8004510 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6818      	ldr	r0, [r3, #0]
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	6819      	ldr	r1, [r3, #0]
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	461a      	mov	r2, r3
 800429e:	f7ff fbd1 	bl	8003a44 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	4a8f      	ldr	r2, [pc, #572]	; (80044e4 <HAL_ADC_ConfigChannel+0x6b0>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	f040 8131 	bne.w	8004510 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d10b      	bne.n	80042d6 <HAL_ADC_ConfigChannel+0x4a2>
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	0e9b      	lsrs	r3, r3, #26
 80042c4:	3301      	adds	r3, #1
 80042c6:	f003 031f 	and.w	r3, r3, #31
 80042ca:	2b09      	cmp	r3, #9
 80042cc:	bf94      	ite	ls
 80042ce:	2301      	movls	r3, #1
 80042d0:	2300      	movhi	r3, #0
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	e019      	b.n	800430a <HAL_ADC_ConfigChannel+0x4d6>
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042de:	fa93 f3a3 	rbit	r3, r3
 80042e2:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80042e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042e6:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80042e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d101      	bne.n	80042f2 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 80042ee:	2320      	movs	r3, #32
 80042f0:	e003      	b.n	80042fa <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 80042f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80042f4:	fab3 f383 	clz	r3, r3
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	3301      	adds	r3, #1
 80042fc:	f003 031f 	and.w	r3, r3, #31
 8004300:	2b09      	cmp	r3, #9
 8004302:	bf94      	ite	ls
 8004304:	2301      	movls	r3, #1
 8004306:	2300      	movhi	r3, #0
 8004308:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800430a:	2b00      	cmp	r3, #0
 800430c:	d079      	beq.n	8004402 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004316:	2b00      	cmp	r3, #0
 8004318:	d107      	bne.n	800432a <HAL_ADC_ConfigChannel+0x4f6>
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	0e9b      	lsrs	r3, r3, #26
 8004320:	3301      	adds	r3, #1
 8004322:	069b      	lsls	r3, r3, #26
 8004324:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004328:	e015      	b.n	8004356 <HAL_ADC_ConfigChannel+0x522>
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004330:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004332:	fa93 f3a3 	rbit	r3, r3
 8004336:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004338:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800433a:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800433c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800433e:	2b00      	cmp	r3, #0
 8004340:	d101      	bne.n	8004346 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8004342:	2320      	movs	r3, #32
 8004344:	e003      	b.n	800434e <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8004346:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004348:	fab3 f383 	clz	r3, r3
 800434c:	b2db      	uxtb	r3, r3
 800434e:	3301      	adds	r3, #1
 8004350:	069b      	lsls	r3, r3, #26
 8004352:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800435e:	2b00      	cmp	r3, #0
 8004360:	d109      	bne.n	8004376 <HAL_ADC_ConfigChannel+0x542>
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	0e9b      	lsrs	r3, r3, #26
 8004368:	3301      	adds	r3, #1
 800436a:	f003 031f 	and.w	r3, r3, #31
 800436e:	2101      	movs	r1, #1
 8004370:	fa01 f303 	lsl.w	r3, r1, r3
 8004374:	e017      	b.n	80043a6 <HAL_ADC_ConfigChannel+0x572>
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800437c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800437e:	fa93 f3a3 	rbit	r3, r3
 8004382:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8004384:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004386:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8004388:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800438a:	2b00      	cmp	r3, #0
 800438c:	d101      	bne.n	8004392 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 800438e:	2320      	movs	r3, #32
 8004390:	e003      	b.n	800439a <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8004392:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004394:	fab3 f383 	clz	r3, r3
 8004398:	b2db      	uxtb	r3, r3
 800439a:	3301      	adds	r3, #1
 800439c:	f003 031f 	and.w	r3, r3, #31
 80043a0:	2101      	movs	r1, #1
 80043a2:	fa01 f303 	lsl.w	r3, r1, r3
 80043a6:	ea42 0103 	orr.w	r1, r2, r3
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d10a      	bne.n	80043cc <HAL_ADC_ConfigChannel+0x598>
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	0e9b      	lsrs	r3, r3, #26
 80043bc:	3301      	adds	r3, #1
 80043be:	f003 021f 	and.w	r2, r3, #31
 80043c2:	4613      	mov	r3, r2
 80043c4:	005b      	lsls	r3, r3, #1
 80043c6:	4413      	add	r3, r2
 80043c8:	051b      	lsls	r3, r3, #20
 80043ca:	e018      	b.n	80043fe <HAL_ADC_ConfigChannel+0x5ca>
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043d4:	fa93 f3a3 	rbit	r3, r3
 80043d8:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80043da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80043de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d101      	bne.n	80043e8 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 80043e4:	2320      	movs	r3, #32
 80043e6:	e003      	b.n	80043f0 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 80043e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043ea:	fab3 f383 	clz	r3, r3
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	3301      	adds	r3, #1
 80043f2:	f003 021f 	and.w	r2, r3, #31
 80043f6:	4613      	mov	r3, r2
 80043f8:	005b      	lsls	r3, r3, #1
 80043fa:	4413      	add	r3, r2
 80043fc:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80043fe:	430b      	orrs	r3, r1
 8004400:	e081      	b.n	8004506 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800440a:	2b00      	cmp	r3, #0
 800440c:	d107      	bne.n	800441e <HAL_ADC_ConfigChannel+0x5ea>
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	0e9b      	lsrs	r3, r3, #26
 8004414:	3301      	adds	r3, #1
 8004416:	069b      	lsls	r3, r3, #26
 8004418:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800441c:	e015      	b.n	800444a <HAL_ADC_ConfigChannel+0x616>
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004426:	fa93 f3a3 	rbit	r3, r3
 800442a:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800442c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800442e:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8004430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004432:	2b00      	cmp	r3, #0
 8004434:	d101      	bne.n	800443a <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8004436:	2320      	movs	r3, #32
 8004438:	e003      	b.n	8004442 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 800443a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800443c:	fab3 f383 	clz	r3, r3
 8004440:	b2db      	uxtb	r3, r3
 8004442:	3301      	adds	r3, #1
 8004444:	069b      	lsls	r3, r3, #26
 8004446:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004452:	2b00      	cmp	r3, #0
 8004454:	d109      	bne.n	800446a <HAL_ADC_ConfigChannel+0x636>
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	0e9b      	lsrs	r3, r3, #26
 800445c:	3301      	adds	r3, #1
 800445e:	f003 031f 	and.w	r3, r3, #31
 8004462:	2101      	movs	r1, #1
 8004464:	fa01 f303 	lsl.w	r3, r1, r3
 8004468:	e017      	b.n	800449a <HAL_ADC_ConfigChannel+0x666>
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004470:	6a3b      	ldr	r3, [r7, #32]
 8004472:	fa93 f3a3 	rbit	r3, r3
 8004476:	61fb      	str	r3, [r7, #28]
  return result;
 8004478:	69fb      	ldr	r3, [r7, #28]
 800447a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800447c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447e:	2b00      	cmp	r3, #0
 8004480:	d101      	bne.n	8004486 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8004482:	2320      	movs	r3, #32
 8004484:	e003      	b.n	800448e <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8004486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004488:	fab3 f383 	clz	r3, r3
 800448c:	b2db      	uxtb	r3, r3
 800448e:	3301      	adds	r3, #1
 8004490:	f003 031f 	and.w	r3, r3, #31
 8004494:	2101      	movs	r1, #1
 8004496:	fa01 f303 	lsl.w	r3, r1, r3
 800449a:	ea42 0103 	orr.w	r1, r2, r3
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d10d      	bne.n	80044c6 <HAL_ADC_ConfigChannel+0x692>
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	0e9b      	lsrs	r3, r3, #26
 80044b0:	3301      	adds	r3, #1
 80044b2:	f003 021f 	and.w	r2, r3, #31
 80044b6:	4613      	mov	r3, r2
 80044b8:	005b      	lsls	r3, r3, #1
 80044ba:	4413      	add	r3, r2
 80044bc:	3b1e      	subs	r3, #30
 80044be:	051b      	lsls	r3, r3, #20
 80044c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80044c4:	e01e      	b.n	8004504 <HAL_ADC_ConfigChannel+0x6d0>
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	fa93 f3a3 	rbit	r3, r3
 80044d2:	613b      	str	r3, [r7, #16]
  return result;
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80044d8:	69bb      	ldr	r3, [r7, #24]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d104      	bne.n	80044e8 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80044de:	2320      	movs	r3, #32
 80044e0:	e006      	b.n	80044f0 <HAL_ADC_ConfigChannel+0x6bc>
 80044e2:	bf00      	nop
 80044e4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80044e8:	69bb      	ldr	r3, [r7, #24]
 80044ea:	fab3 f383 	clz	r3, r3
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	3301      	adds	r3, #1
 80044f2:	f003 021f 	and.w	r2, r3, #31
 80044f6:	4613      	mov	r3, r2
 80044f8:	005b      	lsls	r3, r3, #1
 80044fa:	4413      	add	r3, r2
 80044fc:	3b1e      	subs	r3, #30
 80044fe:	051b      	lsls	r3, r3, #20
 8004500:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004504:	430b      	orrs	r3, r1
 8004506:	683a      	ldr	r2, [r7, #0]
 8004508:	6892      	ldr	r2, [r2, #8]
 800450a:	4619      	mov	r1, r3
 800450c:	f7ff fa6e 	bl	80039ec <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	4b3d      	ldr	r3, [pc, #244]	; (800460c <HAL_ADC_ConfigChannel+0x7d8>)
 8004516:	4013      	ands	r3, r2
 8004518:	2b00      	cmp	r3, #0
 800451a:	d06c      	beq.n	80045f6 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800451c:	483c      	ldr	r0, [pc, #240]	; (8004610 <HAL_ADC_ConfigChannel+0x7dc>)
 800451e:	f7ff f9c3 	bl	80038a8 <LL_ADC_GetCommonPathInternalCh>
 8004522:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a3a      	ldr	r2, [pc, #232]	; (8004614 <HAL_ADC_ConfigChannel+0x7e0>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d127      	bne.n	8004580 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004530:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004534:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004538:	2b00      	cmp	r3, #0
 800453a:	d121      	bne.n	8004580 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a35      	ldr	r2, [pc, #212]	; (8004618 <HAL_ADC_ConfigChannel+0x7e4>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d157      	bne.n	80045f6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004546:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800454a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800454e:	4619      	mov	r1, r3
 8004550:	482f      	ldr	r0, [pc, #188]	; (8004610 <HAL_ADC_ConfigChannel+0x7dc>)
 8004552:	f7ff f996 	bl	8003882 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004556:	4b31      	ldr	r3, [pc, #196]	; (800461c <HAL_ADC_ConfigChannel+0x7e8>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	099b      	lsrs	r3, r3, #6
 800455c:	4a30      	ldr	r2, [pc, #192]	; (8004620 <HAL_ADC_ConfigChannel+0x7ec>)
 800455e:	fba2 2303 	umull	r2, r3, r2, r3
 8004562:	099b      	lsrs	r3, r3, #6
 8004564:	1c5a      	adds	r2, r3, #1
 8004566:	4613      	mov	r3, r2
 8004568:	005b      	lsls	r3, r3, #1
 800456a:	4413      	add	r3, r2
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004570:	e002      	b.n	8004578 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	3b01      	subs	r3, #1
 8004576:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d1f9      	bne.n	8004572 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800457e:	e03a      	b.n	80045f6 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a27      	ldr	r2, [pc, #156]	; (8004624 <HAL_ADC_ConfigChannel+0x7f0>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d113      	bne.n	80045b2 <HAL_ADC_ConfigChannel+0x77e>
 800458a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800458e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004592:	2b00      	cmp	r3, #0
 8004594:	d10d      	bne.n	80045b2 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a1f      	ldr	r2, [pc, #124]	; (8004618 <HAL_ADC_ConfigChannel+0x7e4>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d12a      	bne.n	80045f6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80045a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80045a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045a8:	4619      	mov	r1, r3
 80045aa:	4819      	ldr	r0, [pc, #100]	; (8004610 <HAL_ADC_ConfigChannel+0x7dc>)
 80045ac:	f7ff f969 	bl	8003882 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80045b0:	e021      	b.n	80045f6 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a1c      	ldr	r2, [pc, #112]	; (8004628 <HAL_ADC_ConfigChannel+0x7f4>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d11c      	bne.n	80045f6 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80045bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80045c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d116      	bne.n	80045f6 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a12      	ldr	r2, [pc, #72]	; (8004618 <HAL_ADC_ConfigChannel+0x7e4>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d111      	bne.n	80045f6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80045d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80045d6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80045da:	4619      	mov	r1, r3
 80045dc:	480c      	ldr	r0, [pc, #48]	; (8004610 <HAL_ADC_ConfigChannel+0x7dc>)
 80045de:	f7ff f950 	bl	8003882 <LL_ADC_SetCommonPathInternalCh>
 80045e2:	e008      	b.n	80045f6 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045e8:	f043 0220 	orr.w	r2, r3, #32
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80045fe:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004602:	4618      	mov	r0, r3
 8004604:	37d8      	adds	r7, #216	; 0xd8
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
 800460a:	bf00      	nop
 800460c:	80080000 	.word	0x80080000
 8004610:	50040300 	.word	0x50040300
 8004614:	c7520000 	.word	0xc7520000
 8004618:	50040000 	.word	0x50040000
 800461c:	20000008 	.word	0x20000008
 8004620:	053e2d63 	.word	0x053e2d63
 8004624:	cb840000 	.word	0xcb840000
 8004628:	80000001 	.word	0x80000001

0800462c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d101      	bne.n	800463e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e0ed      	b.n	800481a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004644:	b2db      	uxtb	r3, r3
 8004646:	2b00      	cmp	r3, #0
 8004648:	d102      	bne.n	8004650 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f7fe f9a2 	bl	8002994 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f042 0201 	orr.w	r2, r2, #1
 800465e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004660:	f7ff f8cc 	bl	80037fc <HAL_GetTick>
 8004664:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004666:	e012      	b.n	800468e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004668:	f7ff f8c8 	bl	80037fc <HAL_GetTick>
 800466c:	4602      	mov	r2, r0
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	2b0a      	cmp	r3, #10
 8004674:	d90b      	bls.n	800468e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2205      	movs	r2, #5
 8004686:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e0c5      	b.n	800481a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	f003 0301 	and.w	r3, r3, #1
 8004698:	2b00      	cmp	r3, #0
 800469a:	d0e5      	beq.n	8004668 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f022 0202 	bic.w	r2, r2, #2
 80046aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80046ac:	f7ff f8a6 	bl	80037fc <HAL_GetTick>
 80046b0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80046b2:	e012      	b.n	80046da <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80046b4:	f7ff f8a2 	bl	80037fc <HAL_GetTick>
 80046b8:	4602      	mov	r2, r0
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	2b0a      	cmp	r3, #10
 80046c0:	d90b      	bls.n	80046da <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2205      	movs	r2, #5
 80046d2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e09f      	b.n	800481a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	f003 0302 	and.w	r3, r3, #2
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d1e5      	bne.n	80046b4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	7e1b      	ldrb	r3, [r3, #24]
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d108      	bne.n	8004702 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80046fe:	601a      	str	r2, [r3, #0]
 8004700:	e007      	b.n	8004712 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004710:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	7e5b      	ldrb	r3, [r3, #25]
 8004716:	2b01      	cmp	r3, #1
 8004718:	d108      	bne.n	800472c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004728:	601a      	str	r2, [r3, #0]
 800472a:	e007      	b.n	800473c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800473a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	7e9b      	ldrb	r3, [r3, #26]
 8004740:	2b01      	cmp	r3, #1
 8004742:	d108      	bne.n	8004756 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f042 0220 	orr.w	r2, r2, #32
 8004752:	601a      	str	r2, [r3, #0]
 8004754:	e007      	b.n	8004766 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f022 0220 	bic.w	r2, r2, #32
 8004764:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	7edb      	ldrb	r3, [r3, #27]
 800476a:	2b01      	cmp	r3, #1
 800476c:	d108      	bne.n	8004780 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f022 0210 	bic.w	r2, r2, #16
 800477c:	601a      	str	r2, [r3, #0]
 800477e:	e007      	b.n	8004790 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f042 0210 	orr.w	r2, r2, #16
 800478e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	7f1b      	ldrb	r3, [r3, #28]
 8004794:	2b01      	cmp	r3, #1
 8004796:	d108      	bne.n	80047aa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f042 0208 	orr.w	r2, r2, #8
 80047a6:	601a      	str	r2, [r3, #0]
 80047a8:	e007      	b.n	80047ba <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f022 0208 	bic.w	r2, r2, #8
 80047b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	7f5b      	ldrb	r3, [r3, #29]
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d108      	bne.n	80047d4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f042 0204 	orr.w	r2, r2, #4
 80047d0:	601a      	str	r2, [r3, #0]
 80047d2:	e007      	b.n	80047e4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f022 0204 	bic.w	r2, r2, #4
 80047e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	689a      	ldr	r2, [r3, #8]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	431a      	orrs	r2, r3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	691b      	ldr	r3, [r3, #16]
 80047f2:	431a      	orrs	r2, r3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	695b      	ldr	r3, [r3, #20]
 80047f8:	ea42 0103 	orr.w	r1, r2, r3
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	1e5a      	subs	r2, r3, #1
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	430a      	orrs	r2, r1
 8004808:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2200      	movs	r2, #0
 800480e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004818:	2300      	movs	r3, #0
}
 800481a:	4618      	mov	r0, r3
 800481c:	3710      	adds	r7, #16
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
	...

08004824 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004824:	b480      	push	{r7}
 8004826:	b085      	sub	sp, #20
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f003 0307 	and.w	r3, r3, #7
 8004832:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004834:	4b0c      	ldr	r3, [pc, #48]	; (8004868 <__NVIC_SetPriorityGrouping+0x44>)
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800483a:	68ba      	ldr	r2, [r7, #8]
 800483c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004840:	4013      	ands	r3, r2
 8004842:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800484c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004850:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004854:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004856:	4a04      	ldr	r2, [pc, #16]	; (8004868 <__NVIC_SetPriorityGrouping+0x44>)
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	60d3      	str	r3, [r2, #12]
}
 800485c:	bf00      	nop
 800485e:	3714      	adds	r7, #20
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr
 8004868:	e000ed00 	.word	0xe000ed00

0800486c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800486c:	b480      	push	{r7}
 800486e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004870:	4b04      	ldr	r3, [pc, #16]	; (8004884 <__NVIC_GetPriorityGrouping+0x18>)
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	0a1b      	lsrs	r3, r3, #8
 8004876:	f003 0307 	and.w	r3, r3, #7
}
 800487a:	4618      	mov	r0, r3
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr
 8004884:	e000ed00 	.word	0xe000ed00

08004888 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004888:	b480      	push	{r7}
 800488a:	b083      	sub	sp, #12
 800488c:	af00      	add	r7, sp, #0
 800488e:	4603      	mov	r3, r0
 8004890:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004896:	2b00      	cmp	r3, #0
 8004898:	db0b      	blt.n	80048b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800489a:	79fb      	ldrb	r3, [r7, #7]
 800489c:	f003 021f 	and.w	r2, r3, #31
 80048a0:	4907      	ldr	r1, [pc, #28]	; (80048c0 <__NVIC_EnableIRQ+0x38>)
 80048a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048a6:	095b      	lsrs	r3, r3, #5
 80048a8:	2001      	movs	r0, #1
 80048aa:	fa00 f202 	lsl.w	r2, r0, r2
 80048ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80048b2:	bf00      	nop
 80048b4:	370c      	adds	r7, #12
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr
 80048be:	bf00      	nop
 80048c0:	e000e100 	.word	0xe000e100

080048c4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b083      	sub	sp, #12
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	4603      	mov	r3, r0
 80048cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	db12      	blt.n	80048fc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80048d6:	79fb      	ldrb	r3, [r7, #7]
 80048d8:	f003 021f 	and.w	r2, r3, #31
 80048dc:	490a      	ldr	r1, [pc, #40]	; (8004908 <__NVIC_DisableIRQ+0x44>)
 80048de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048e2:	095b      	lsrs	r3, r3, #5
 80048e4:	2001      	movs	r0, #1
 80048e6:	fa00 f202 	lsl.w	r2, r0, r2
 80048ea:	3320      	adds	r3, #32
 80048ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80048f0:	f3bf 8f4f 	dsb	sy
}
 80048f4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80048f6:	f3bf 8f6f 	isb	sy
}
 80048fa:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80048fc:	bf00      	nop
 80048fe:	370c      	adds	r7, #12
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr
 8004908:	e000e100 	.word	0xe000e100

0800490c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800490c:	b480      	push	{r7}
 800490e:	b083      	sub	sp, #12
 8004910:	af00      	add	r7, sp, #0
 8004912:	4603      	mov	r3, r0
 8004914:	6039      	str	r1, [r7, #0]
 8004916:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004918:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800491c:	2b00      	cmp	r3, #0
 800491e:	db0a      	blt.n	8004936 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	b2da      	uxtb	r2, r3
 8004924:	490c      	ldr	r1, [pc, #48]	; (8004958 <__NVIC_SetPriority+0x4c>)
 8004926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800492a:	0112      	lsls	r2, r2, #4
 800492c:	b2d2      	uxtb	r2, r2
 800492e:	440b      	add	r3, r1
 8004930:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004934:	e00a      	b.n	800494c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	b2da      	uxtb	r2, r3
 800493a:	4908      	ldr	r1, [pc, #32]	; (800495c <__NVIC_SetPriority+0x50>)
 800493c:	79fb      	ldrb	r3, [r7, #7]
 800493e:	f003 030f 	and.w	r3, r3, #15
 8004942:	3b04      	subs	r3, #4
 8004944:	0112      	lsls	r2, r2, #4
 8004946:	b2d2      	uxtb	r2, r2
 8004948:	440b      	add	r3, r1
 800494a:	761a      	strb	r2, [r3, #24]
}
 800494c:	bf00      	nop
 800494e:	370c      	adds	r7, #12
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr
 8004958:	e000e100 	.word	0xe000e100
 800495c:	e000ed00 	.word	0xe000ed00

08004960 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004960:	b480      	push	{r7}
 8004962:	b089      	sub	sp, #36	; 0x24
 8004964:	af00      	add	r7, sp, #0
 8004966:	60f8      	str	r0, [r7, #12]
 8004968:	60b9      	str	r1, [r7, #8]
 800496a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f003 0307 	and.w	r3, r3, #7
 8004972:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004974:	69fb      	ldr	r3, [r7, #28]
 8004976:	f1c3 0307 	rsb	r3, r3, #7
 800497a:	2b04      	cmp	r3, #4
 800497c:	bf28      	it	cs
 800497e:	2304      	movcs	r3, #4
 8004980:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004982:	69fb      	ldr	r3, [r7, #28]
 8004984:	3304      	adds	r3, #4
 8004986:	2b06      	cmp	r3, #6
 8004988:	d902      	bls.n	8004990 <NVIC_EncodePriority+0x30>
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	3b03      	subs	r3, #3
 800498e:	e000      	b.n	8004992 <NVIC_EncodePriority+0x32>
 8004990:	2300      	movs	r3, #0
 8004992:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004994:	f04f 32ff 	mov.w	r2, #4294967295
 8004998:	69bb      	ldr	r3, [r7, #24]
 800499a:	fa02 f303 	lsl.w	r3, r2, r3
 800499e:	43da      	mvns	r2, r3
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	401a      	ands	r2, r3
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80049a8:	f04f 31ff 	mov.w	r1, #4294967295
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	fa01 f303 	lsl.w	r3, r1, r3
 80049b2:	43d9      	mvns	r1, r3
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049b8:	4313      	orrs	r3, r2
         );
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3724      	adds	r7, #36	; 0x24
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr
	...

080049c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b082      	sub	sp, #8
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	3b01      	subs	r3, #1
 80049d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80049d8:	d301      	bcc.n	80049de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80049da:	2301      	movs	r3, #1
 80049dc:	e00f      	b.n	80049fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80049de:	4a0a      	ldr	r2, [pc, #40]	; (8004a08 <SysTick_Config+0x40>)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	3b01      	subs	r3, #1
 80049e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80049e6:	210f      	movs	r1, #15
 80049e8:	f04f 30ff 	mov.w	r0, #4294967295
 80049ec:	f7ff ff8e 	bl	800490c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80049f0:	4b05      	ldr	r3, [pc, #20]	; (8004a08 <SysTick_Config+0x40>)
 80049f2:	2200      	movs	r2, #0
 80049f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80049f6:	4b04      	ldr	r3, [pc, #16]	; (8004a08 <SysTick_Config+0x40>)
 80049f8:	2207      	movs	r2, #7
 80049fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80049fc:	2300      	movs	r3, #0
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3708      	adds	r7, #8
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	e000e010 	.word	0xe000e010

08004a0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b082      	sub	sp, #8
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f7ff ff05 	bl	8004824 <__NVIC_SetPriorityGrouping>
}
 8004a1a:	bf00      	nop
 8004a1c:	3708      	adds	r7, #8
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}

08004a22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a22:	b580      	push	{r7, lr}
 8004a24:	b086      	sub	sp, #24
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	4603      	mov	r3, r0
 8004a2a:	60b9      	str	r1, [r7, #8]
 8004a2c:	607a      	str	r2, [r7, #4]
 8004a2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004a30:	2300      	movs	r3, #0
 8004a32:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004a34:	f7ff ff1a 	bl	800486c <__NVIC_GetPriorityGrouping>
 8004a38:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	68b9      	ldr	r1, [r7, #8]
 8004a3e:	6978      	ldr	r0, [r7, #20]
 8004a40:	f7ff ff8e 	bl	8004960 <NVIC_EncodePriority>
 8004a44:	4602      	mov	r2, r0
 8004a46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a4a:	4611      	mov	r1, r2
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f7ff ff5d 	bl	800490c <__NVIC_SetPriority>
}
 8004a52:	bf00      	nop
 8004a54:	3718      	adds	r7, #24
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}

08004a5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a5a:	b580      	push	{r7, lr}
 8004a5c:	b082      	sub	sp, #8
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	4603      	mov	r3, r0
 8004a62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f7ff ff0d 	bl	8004888 <__NVIC_EnableIRQ>
}
 8004a6e:	bf00      	nop
 8004a70:	3708      	adds	r7, #8
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}

08004a76 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004a76:	b580      	push	{r7, lr}
 8004a78:	b082      	sub	sp, #8
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004a80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a84:	4618      	mov	r0, r3
 8004a86:	f7ff ff1d 	bl	80048c4 <__NVIC_DisableIRQ>
}
 8004a8a:	bf00      	nop
 8004a8c:	3708      	adds	r7, #8
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}

08004a92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004a92:	b580      	push	{r7, lr}
 8004a94:	b082      	sub	sp, #8
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f7ff ff94 	bl	80049c8 <SysTick_Config>
 8004aa0:	4603      	mov	r3, r0
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3708      	adds	r7, #8
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
	...

08004aac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b087      	sub	sp, #28
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004aba:	e166      	b.n	8004d8a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	2101      	movs	r1, #1
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ac8:	4013      	ands	r3, r2
 8004aca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	f000 8158 	beq.w	8004d84 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	f003 0303 	and.w	r3, r3, #3
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d005      	beq.n	8004aec <HAL_GPIO_Init+0x40>
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	f003 0303 	and.w	r3, r3, #3
 8004ae8:	2b02      	cmp	r3, #2
 8004aea:	d130      	bne.n	8004b4e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	005b      	lsls	r3, r3, #1
 8004af6:	2203      	movs	r2, #3
 8004af8:	fa02 f303 	lsl.w	r3, r2, r3
 8004afc:	43db      	mvns	r3, r3
 8004afe:	693a      	ldr	r2, [r7, #16]
 8004b00:	4013      	ands	r3, r2
 8004b02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	68da      	ldr	r2, [r3, #12]
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	005b      	lsls	r3, r3, #1
 8004b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b10:	693a      	ldr	r2, [r7, #16]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	693a      	ldr	r2, [r7, #16]
 8004b1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004b22:	2201      	movs	r2, #1
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	fa02 f303 	lsl.w	r3, r2, r3
 8004b2a:	43db      	mvns	r3, r3
 8004b2c:	693a      	ldr	r2, [r7, #16]
 8004b2e:	4013      	ands	r3, r2
 8004b30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	091b      	lsrs	r3, r3, #4
 8004b38:	f003 0201 	and.w	r2, r3, #1
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b42:	693a      	ldr	r2, [r7, #16]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	693a      	ldr	r2, [r7, #16]
 8004b4c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	f003 0303 	and.w	r3, r3, #3
 8004b56:	2b03      	cmp	r3, #3
 8004b58:	d017      	beq.n	8004b8a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	68db      	ldr	r3, [r3, #12]
 8004b5e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	005b      	lsls	r3, r3, #1
 8004b64:	2203      	movs	r2, #3
 8004b66:	fa02 f303 	lsl.w	r3, r2, r3
 8004b6a:	43db      	mvns	r3, r3
 8004b6c:	693a      	ldr	r2, [r7, #16]
 8004b6e:	4013      	ands	r3, r2
 8004b70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	689a      	ldr	r2, [r3, #8]
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	005b      	lsls	r3, r3, #1
 8004b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b7e:	693a      	ldr	r2, [r7, #16]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	693a      	ldr	r2, [r7, #16]
 8004b88:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	f003 0303 	and.w	r3, r3, #3
 8004b92:	2b02      	cmp	r3, #2
 8004b94:	d123      	bne.n	8004bde <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	08da      	lsrs	r2, r3, #3
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	3208      	adds	r2, #8
 8004b9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ba2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	f003 0307 	and.w	r3, r3, #7
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	220f      	movs	r2, #15
 8004bae:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb2:	43db      	mvns	r3, r3
 8004bb4:	693a      	ldr	r2, [r7, #16]
 8004bb6:	4013      	ands	r3, r2
 8004bb8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	691a      	ldr	r2, [r3, #16]
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	f003 0307 	and.w	r3, r3, #7
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bca:	693a      	ldr	r2, [r7, #16]
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	08da      	lsrs	r2, r3, #3
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	3208      	adds	r2, #8
 8004bd8:	6939      	ldr	r1, [r7, #16]
 8004bda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	005b      	lsls	r3, r3, #1
 8004be8:	2203      	movs	r2, #3
 8004bea:	fa02 f303 	lsl.w	r3, r2, r3
 8004bee:	43db      	mvns	r3, r3
 8004bf0:	693a      	ldr	r2, [r7, #16]
 8004bf2:	4013      	ands	r3, r2
 8004bf4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	f003 0203 	and.w	r2, r3, #3
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	005b      	lsls	r3, r3, #1
 8004c02:	fa02 f303 	lsl.w	r3, r2, r3
 8004c06:	693a      	ldr	r2, [r7, #16]
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	693a      	ldr	r2, [r7, #16]
 8004c10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	f000 80b2 	beq.w	8004d84 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c20:	4b61      	ldr	r3, [pc, #388]	; (8004da8 <HAL_GPIO_Init+0x2fc>)
 8004c22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c24:	4a60      	ldr	r2, [pc, #384]	; (8004da8 <HAL_GPIO_Init+0x2fc>)
 8004c26:	f043 0301 	orr.w	r3, r3, #1
 8004c2a:	6613      	str	r3, [r2, #96]	; 0x60
 8004c2c:	4b5e      	ldr	r3, [pc, #376]	; (8004da8 <HAL_GPIO_Init+0x2fc>)
 8004c2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c30:	f003 0301 	and.w	r3, r3, #1
 8004c34:	60bb      	str	r3, [r7, #8]
 8004c36:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004c38:	4a5c      	ldr	r2, [pc, #368]	; (8004dac <HAL_GPIO_Init+0x300>)
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	089b      	lsrs	r3, r3, #2
 8004c3e:	3302      	adds	r3, #2
 8004c40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c44:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	f003 0303 	and.w	r3, r3, #3
 8004c4c:	009b      	lsls	r3, r3, #2
 8004c4e:	220f      	movs	r2, #15
 8004c50:	fa02 f303 	lsl.w	r3, r2, r3
 8004c54:	43db      	mvns	r3, r3
 8004c56:	693a      	ldr	r2, [r7, #16]
 8004c58:	4013      	ands	r3, r2
 8004c5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004c62:	d02b      	beq.n	8004cbc <HAL_GPIO_Init+0x210>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	4a52      	ldr	r2, [pc, #328]	; (8004db0 <HAL_GPIO_Init+0x304>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d025      	beq.n	8004cb8 <HAL_GPIO_Init+0x20c>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	4a51      	ldr	r2, [pc, #324]	; (8004db4 <HAL_GPIO_Init+0x308>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d01f      	beq.n	8004cb4 <HAL_GPIO_Init+0x208>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	4a50      	ldr	r2, [pc, #320]	; (8004db8 <HAL_GPIO_Init+0x30c>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d019      	beq.n	8004cb0 <HAL_GPIO_Init+0x204>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	4a4f      	ldr	r2, [pc, #316]	; (8004dbc <HAL_GPIO_Init+0x310>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d013      	beq.n	8004cac <HAL_GPIO_Init+0x200>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	4a4e      	ldr	r2, [pc, #312]	; (8004dc0 <HAL_GPIO_Init+0x314>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d00d      	beq.n	8004ca8 <HAL_GPIO_Init+0x1fc>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	4a4d      	ldr	r2, [pc, #308]	; (8004dc4 <HAL_GPIO_Init+0x318>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d007      	beq.n	8004ca4 <HAL_GPIO_Init+0x1f8>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	4a4c      	ldr	r2, [pc, #304]	; (8004dc8 <HAL_GPIO_Init+0x31c>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d101      	bne.n	8004ca0 <HAL_GPIO_Init+0x1f4>
 8004c9c:	2307      	movs	r3, #7
 8004c9e:	e00e      	b.n	8004cbe <HAL_GPIO_Init+0x212>
 8004ca0:	2308      	movs	r3, #8
 8004ca2:	e00c      	b.n	8004cbe <HAL_GPIO_Init+0x212>
 8004ca4:	2306      	movs	r3, #6
 8004ca6:	e00a      	b.n	8004cbe <HAL_GPIO_Init+0x212>
 8004ca8:	2305      	movs	r3, #5
 8004caa:	e008      	b.n	8004cbe <HAL_GPIO_Init+0x212>
 8004cac:	2304      	movs	r3, #4
 8004cae:	e006      	b.n	8004cbe <HAL_GPIO_Init+0x212>
 8004cb0:	2303      	movs	r3, #3
 8004cb2:	e004      	b.n	8004cbe <HAL_GPIO_Init+0x212>
 8004cb4:	2302      	movs	r3, #2
 8004cb6:	e002      	b.n	8004cbe <HAL_GPIO_Init+0x212>
 8004cb8:	2301      	movs	r3, #1
 8004cba:	e000      	b.n	8004cbe <HAL_GPIO_Init+0x212>
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	697a      	ldr	r2, [r7, #20]
 8004cc0:	f002 0203 	and.w	r2, r2, #3
 8004cc4:	0092      	lsls	r2, r2, #2
 8004cc6:	4093      	lsls	r3, r2
 8004cc8:	693a      	ldr	r2, [r7, #16]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004cce:	4937      	ldr	r1, [pc, #220]	; (8004dac <HAL_GPIO_Init+0x300>)
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	089b      	lsrs	r3, r3, #2
 8004cd4:	3302      	adds	r3, #2
 8004cd6:	693a      	ldr	r2, [r7, #16]
 8004cd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004cdc:	4b3b      	ldr	r3, [pc, #236]	; (8004dcc <HAL_GPIO_Init+0x320>)
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	43db      	mvns	r3, r3
 8004ce6:	693a      	ldr	r2, [r7, #16]
 8004ce8:	4013      	ands	r3, r2
 8004cea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d003      	beq.n	8004d00 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8004cf8:	693a      	ldr	r2, [r7, #16]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004d00:	4a32      	ldr	r2, [pc, #200]	; (8004dcc <HAL_GPIO_Init+0x320>)
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004d06:	4b31      	ldr	r3, [pc, #196]	; (8004dcc <HAL_GPIO_Init+0x320>)
 8004d08:	68db      	ldr	r3, [r3, #12]
 8004d0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	43db      	mvns	r3, r3
 8004d10:	693a      	ldr	r2, [r7, #16]
 8004d12:	4013      	ands	r3, r2
 8004d14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d003      	beq.n	8004d2a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8004d22:	693a      	ldr	r2, [r7, #16]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	4313      	orrs	r3, r2
 8004d28:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004d2a:	4a28      	ldr	r2, [pc, #160]	; (8004dcc <HAL_GPIO_Init+0x320>)
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004d30:	4b26      	ldr	r3, [pc, #152]	; (8004dcc <HAL_GPIO_Init+0x320>)
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	43db      	mvns	r3, r3
 8004d3a:	693a      	ldr	r2, [r7, #16]
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d003      	beq.n	8004d54 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8004d4c:	693a      	ldr	r2, [r7, #16]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	4313      	orrs	r3, r2
 8004d52:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004d54:	4a1d      	ldr	r2, [pc, #116]	; (8004dcc <HAL_GPIO_Init+0x320>)
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004d5a:	4b1c      	ldr	r3, [pc, #112]	; (8004dcc <HAL_GPIO_Init+0x320>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	43db      	mvns	r3, r3
 8004d64:	693a      	ldr	r2, [r7, #16]
 8004d66:	4013      	ands	r3, r2
 8004d68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d003      	beq.n	8004d7e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8004d76:	693a      	ldr	r2, [r7, #16]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004d7e:	4a13      	ldr	r2, [pc, #76]	; (8004dcc <HAL_GPIO_Init+0x320>)
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	3301      	adds	r3, #1
 8004d88:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	fa22 f303 	lsr.w	r3, r2, r3
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	f47f ae91 	bne.w	8004abc <HAL_GPIO_Init+0x10>
  }
}
 8004d9a:	bf00      	nop
 8004d9c:	bf00      	nop
 8004d9e:	371c      	adds	r7, #28
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr
 8004da8:	40021000 	.word	0x40021000
 8004dac:	40010000 	.word	0x40010000
 8004db0:	48000400 	.word	0x48000400
 8004db4:	48000800 	.word	0x48000800
 8004db8:	48000c00 	.word	0x48000c00
 8004dbc:	48001000 	.word	0x48001000
 8004dc0:	48001400 	.word	0x48001400
 8004dc4:	48001800 	.word	0x48001800
 8004dc8:	48001c00 	.word	0x48001c00
 8004dcc:	40010400 	.word	0x40010400

08004dd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b083      	sub	sp, #12
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	460b      	mov	r3, r1
 8004dda:	807b      	strh	r3, [r7, #2]
 8004ddc:	4613      	mov	r3, r2
 8004dde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004de0:	787b      	ldrb	r3, [r7, #1]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d003      	beq.n	8004dee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004de6:	887a      	ldrh	r2, [r7, #2]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004dec:	e002      	b.n	8004df4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004dee:	887a      	ldrh	r2, [r7, #2]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004df4:	bf00      	nop
 8004df6:	370c      	adds	r7, #12
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr

08004e00 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004e00:	b480      	push	{r7}
 8004e02:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e04:	4b05      	ldr	r3, [pc, #20]	; (8004e1c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a04      	ldr	r2, [pc, #16]	; (8004e1c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004e0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e0e:	6013      	str	r3, [r2, #0]
}
 8004e10:	bf00      	nop
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr
 8004e1a:	bf00      	nop
 8004e1c:	40007000 	.word	0x40007000

08004e20 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004e20:	b480      	push	{r7}
 8004e22:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004e24:	4b0d      	ldr	r3, [pc, #52]	; (8004e5c <HAL_PWREx_GetVoltageRange+0x3c>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004e2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e30:	d102      	bne.n	8004e38 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8004e32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e36:	e00b      	b.n	8004e50 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8004e38:	4b08      	ldr	r3, [pc, #32]	; (8004e5c <HAL_PWREx_GetVoltageRange+0x3c>)
 8004e3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e46:	d102      	bne.n	8004e4e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8004e48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e4c:	e000      	b.n	8004e50 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8004e4e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr
 8004e5a:	bf00      	nop
 8004e5c:	40007000 	.word	0x40007000

08004e60 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b085      	sub	sp, #20
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d141      	bne.n	8004ef2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004e6e:	4b4b      	ldr	r3, [pc, #300]	; (8004f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004e76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e7a:	d131      	bne.n	8004ee0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004e7c:	4b47      	ldr	r3, [pc, #284]	; (8004f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e82:	4a46      	ldr	r2, [pc, #280]	; (8004f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e88:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004e8c:	4b43      	ldr	r3, [pc, #268]	; (8004f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004e94:	4a41      	ldr	r2, [pc, #260]	; (8004f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004e9a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004e9c:	4b40      	ldr	r3, [pc, #256]	; (8004fa0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	2232      	movs	r2, #50	; 0x32
 8004ea2:	fb02 f303 	mul.w	r3, r2, r3
 8004ea6:	4a3f      	ldr	r2, [pc, #252]	; (8004fa4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8004eac:	0c9b      	lsrs	r3, r3, #18
 8004eae:	3301      	adds	r3, #1
 8004eb0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004eb2:	e002      	b.n	8004eba <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	3b01      	subs	r3, #1
 8004eb8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004eba:	4b38      	ldr	r3, [pc, #224]	; (8004f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ebc:	695b      	ldr	r3, [r3, #20]
 8004ebe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ec2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ec6:	d102      	bne.n	8004ece <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d1f2      	bne.n	8004eb4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004ece:	4b33      	ldr	r3, [pc, #204]	; (8004f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ed0:	695b      	ldr	r3, [r3, #20]
 8004ed2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ed6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004eda:	d158      	bne.n	8004f8e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004edc:	2303      	movs	r3, #3
 8004ede:	e057      	b.n	8004f90 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004ee0:	4b2e      	ldr	r3, [pc, #184]	; (8004f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ee2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ee6:	4a2d      	ldr	r2, [pc, #180]	; (8004f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ee8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004eec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004ef0:	e04d      	b.n	8004f8e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ef8:	d141      	bne.n	8004f7e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004efa:	4b28      	ldr	r3, [pc, #160]	; (8004f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004f02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f06:	d131      	bne.n	8004f6c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004f08:	4b24      	ldr	r3, [pc, #144]	; (8004f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f0e:	4a23      	ldr	r2, [pc, #140]	; (8004f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f14:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004f18:	4b20      	ldr	r3, [pc, #128]	; (8004f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004f20:	4a1e      	ldr	r2, [pc, #120]	; (8004f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004f26:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004f28:	4b1d      	ldr	r3, [pc, #116]	; (8004fa0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	2232      	movs	r2, #50	; 0x32
 8004f2e:	fb02 f303 	mul.w	r3, r2, r3
 8004f32:	4a1c      	ldr	r2, [pc, #112]	; (8004fa4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004f34:	fba2 2303 	umull	r2, r3, r2, r3
 8004f38:	0c9b      	lsrs	r3, r3, #18
 8004f3a:	3301      	adds	r3, #1
 8004f3c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f3e:	e002      	b.n	8004f46 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	3b01      	subs	r3, #1
 8004f44:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f46:	4b15      	ldr	r3, [pc, #84]	; (8004f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f48:	695b      	ldr	r3, [r3, #20]
 8004f4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f52:	d102      	bne.n	8004f5a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d1f2      	bne.n	8004f40 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004f5a:	4b10      	ldr	r3, [pc, #64]	; (8004f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f5c:	695b      	ldr	r3, [r3, #20]
 8004f5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f66:	d112      	bne.n	8004f8e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004f68:	2303      	movs	r3, #3
 8004f6a:	e011      	b.n	8004f90 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004f6c:	4b0b      	ldr	r3, [pc, #44]	; (8004f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f72:	4a0a      	ldr	r2, [pc, #40]	; (8004f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f78:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004f7c:	e007      	b.n	8004f8e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004f7e:	4b07      	ldr	r3, [pc, #28]	; (8004f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004f86:	4a05      	ldr	r2, [pc, #20]	; (8004f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f88:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004f8c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004f8e:	2300      	movs	r3, #0
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3714      	adds	r7, #20
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr
 8004f9c:	40007000 	.word	0x40007000
 8004fa0:	20000008 	.word	0x20000008
 8004fa4:	431bde83 	.word	0x431bde83

08004fa8 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8004fac:	4b05      	ldr	r3, [pc, #20]	; (8004fc4 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	4a04      	ldr	r2, [pc, #16]	; (8004fc4 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004fb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004fb6:	6053      	str	r3, [r2, #4]
}
 8004fb8:	bf00      	nop
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr
 8004fc2:	bf00      	nop
 8004fc4:	40007000 	.word	0x40007000

08004fc8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b088      	sub	sp, #32
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d102      	bne.n	8004fdc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	f000 bc08 	b.w	80057ec <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004fdc:	4b96      	ldr	r3, [pc, #600]	; (8005238 <HAL_RCC_OscConfig+0x270>)
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	f003 030c 	and.w	r3, r3, #12
 8004fe4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004fe6:	4b94      	ldr	r3, [pc, #592]	; (8005238 <HAL_RCC_OscConfig+0x270>)
 8004fe8:	68db      	ldr	r3, [r3, #12]
 8004fea:	f003 0303 	and.w	r3, r3, #3
 8004fee:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 0310 	and.w	r3, r3, #16
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	f000 80e4 	beq.w	80051c6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004ffe:	69bb      	ldr	r3, [r7, #24]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d007      	beq.n	8005014 <HAL_RCC_OscConfig+0x4c>
 8005004:	69bb      	ldr	r3, [r7, #24]
 8005006:	2b0c      	cmp	r3, #12
 8005008:	f040 808b 	bne.w	8005122 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	2b01      	cmp	r3, #1
 8005010:	f040 8087 	bne.w	8005122 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005014:	4b88      	ldr	r3, [pc, #544]	; (8005238 <HAL_RCC_OscConfig+0x270>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f003 0302 	and.w	r3, r3, #2
 800501c:	2b00      	cmp	r3, #0
 800501e:	d005      	beq.n	800502c <HAL_RCC_OscConfig+0x64>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	699b      	ldr	r3, [r3, #24]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d101      	bne.n	800502c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	e3df      	b.n	80057ec <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6a1a      	ldr	r2, [r3, #32]
 8005030:	4b81      	ldr	r3, [pc, #516]	; (8005238 <HAL_RCC_OscConfig+0x270>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f003 0308 	and.w	r3, r3, #8
 8005038:	2b00      	cmp	r3, #0
 800503a:	d004      	beq.n	8005046 <HAL_RCC_OscConfig+0x7e>
 800503c:	4b7e      	ldr	r3, [pc, #504]	; (8005238 <HAL_RCC_OscConfig+0x270>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005044:	e005      	b.n	8005052 <HAL_RCC_OscConfig+0x8a>
 8005046:	4b7c      	ldr	r3, [pc, #496]	; (8005238 <HAL_RCC_OscConfig+0x270>)
 8005048:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800504c:	091b      	lsrs	r3, r3, #4
 800504e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005052:	4293      	cmp	r3, r2
 8005054:	d223      	bcs.n	800509e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6a1b      	ldr	r3, [r3, #32]
 800505a:	4618      	mov	r0, r3
 800505c:	f000 fdcc 	bl	8005bf8 <RCC_SetFlashLatencyFromMSIRange>
 8005060:	4603      	mov	r3, r0
 8005062:	2b00      	cmp	r3, #0
 8005064:	d001      	beq.n	800506a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	e3c0      	b.n	80057ec <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800506a:	4b73      	ldr	r3, [pc, #460]	; (8005238 <HAL_RCC_OscConfig+0x270>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a72      	ldr	r2, [pc, #456]	; (8005238 <HAL_RCC_OscConfig+0x270>)
 8005070:	f043 0308 	orr.w	r3, r3, #8
 8005074:	6013      	str	r3, [r2, #0]
 8005076:	4b70      	ldr	r3, [pc, #448]	; (8005238 <HAL_RCC_OscConfig+0x270>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6a1b      	ldr	r3, [r3, #32]
 8005082:	496d      	ldr	r1, [pc, #436]	; (8005238 <HAL_RCC_OscConfig+0x270>)
 8005084:	4313      	orrs	r3, r2
 8005086:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005088:	4b6b      	ldr	r3, [pc, #428]	; (8005238 <HAL_RCC_OscConfig+0x270>)
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	69db      	ldr	r3, [r3, #28]
 8005094:	021b      	lsls	r3, r3, #8
 8005096:	4968      	ldr	r1, [pc, #416]	; (8005238 <HAL_RCC_OscConfig+0x270>)
 8005098:	4313      	orrs	r3, r2
 800509a:	604b      	str	r3, [r1, #4]
 800509c:	e025      	b.n	80050ea <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800509e:	4b66      	ldr	r3, [pc, #408]	; (8005238 <HAL_RCC_OscConfig+0x270>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a65      	ldr	r2, [pc, #404]	; (8005238 <HAL_RCC_OscConfig+0x270>)
 80050a4:	f043 0308 	orr.w	r3, r3, #8
 80050a8:	6013      	str	r3, [r2, #0]
 80050aa:	4b63      	ldr	r3, [pc, #396]	; (8005238 <HAL_RCC_OscConfig+0x270>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6a1b      	ldr	r3, [r3, #32]
 80050b6:	4960      	ldr	r1, [pc, #384]	; (8005238 <HAL_RCC_OscConfig+0x270>)
 80050b8:	4313      	orrs	r3, r2
 80050ba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80050bc:	4b5e      	ldr	r3, [pc, #376]	; (8005238 <HAL_RCC_OscConfig+0x270>)
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	69db      	ldr	r3, [r3, #28]
 80050c8:	021b      	lsls	r3, r3, #8
 80050ca:	495b      	ldr	r1, [pc, #364]	; (8005238 <HAL_RCC_OscConfig+0x270>)
 80050cc:	4313      	orrs	r3, r2
 80050ce:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80050d0:	69bb      	ldr	r3, [r7, #24]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d109      	bne.n	80050ea <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6a1b      	ldr	r3, [r3, #32]
 80050da:	4618      	mov	r0, r3
 80050dc:	f000 fd8c 	bl	8005bf8 <RCC_SetFlashLatencyFromMSIRange>
 80050e0:	4603      	mov	r3, r0
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d001      	beq.n	80050ea <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	e380      	b.n	80057ec <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80050ea:	f000 fcc1 	bl	8005a70 <HAL_RCC_GetSysClockFreq>
 80050ee:	4602      	mov	r2, r0
 80050f0:	4b51      	ldr	r3, [pc, #324]	; (8005238 <HAL_RCC_OscConfig+0x270>)
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	091b      	lsrs	r3, r3, #4
 80050f6:	f003 030f 	and.w	r3, r3, #15
 80050fa:	4950      	ldr	r1, [pc, #320]	; (800523c <HAL_RCC_OscConfig+0x274>)
 80050fc:	5ccb      	ldrb	r3, [r1, r3]
 80050fe:	f003 031f 	and.w	r3, r3, #31
 8005102:	fa22 f303 	lsr.w	r3, r2, r3
 8005106:	4a4e      	ldr	r2, [pc, #312]	; (8005240 <HAL_RCC_OscConfig+0x278>)
 8005108:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800510a:	4b4e      	ldr	r3, [pc, #312]	; (8005244 <HAL_RCC_OscConfig+0x27c>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4618      	mov	r0, r3
 8005110:	f7fe fb24 	bl	800375c <HAL_InitTick>
 8005114:	4603      	mov	r3, r0
 8005116:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005118:	7bfb      	ldrb	r3, [r7, #15]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d052      	beq.n	80051c4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800511e:	7bfb      	ldrb	r3, [r7, #15]
 8005120:	e364      	b.n	80057ec <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	699b      	ldr	r3, [r3, #24]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d032      	beq.n	8005190 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800512a:	4b43      	ldr	r3, [pc, #268]	; (8005238 <HAL_RCC_OscConfig+0x270>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a42      	ldr	r2, [pc, #264]	; (8005238 <HAL_RCC_OscConfig+0x270>)
 8005130:	f043 0301 	orr.w	r3, r3, #1
 8005134:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005136:	f7fe fb61 	bl	80037fc <HAL_GetTick>
 800513a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800513c:	e008      	b.n	8005150 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800513e:	f7fe fb5d 	bl	80037fc <HAL_GetTick>
 8005142:	4602      	mov	r2, r0
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	1ad3      	subs	r3, r2, r3
 8005148:	2b02      	cmp	r3, #2
 800514a:	d901      	bls.n	8005150 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800514c:	2303      	movs	r3, #3
 800514e:	e34d      	b.n	80057ec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005150:	4b39      	ldr	r3, [pc, #228]	; (8005238 <HAL_RCC_OscConfig+0x270>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f003 0302 	and.w	r3, r3, #2
 8005158:	2b00      	cmp	r3, #0
 800515a:	d0f0      	beq.n	800513e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800515c:	4b36      	ldr	r3, [pc, #216]	; (8005238 <HAL_RCC_OscConfig+0x270>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a35      	ldr	r2, [pc, #212]	; (8005238 <HAL_RCC_OscConfig+0x270>)
 8005162:	f043 0308 	orr.w	r3, r3, #8
 8005166:	6013      	str	r3, [r2, #0]
 8005168:	4b33      	ldr	r3, [pc, #204]	; (8005238 <HAL_RCC_OscConfig+0x270>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6a1b      	ldr	r3, [r3, #32]
 8005174:	4930      	ldr	r1, [pc, #192]	; (8005238 <HAL_RCC_OscConfig+0x270>)
 8005176:	4313      	orrs	r3, r2
 8005178:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800517a:	4b2f      	ldr	r3, [pc, #188]	; (8005238 <HAL_RCC_OscConfig+0x270>)
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	69db      	ldr	r3, [r3, #28]
 8005186:	021b      	lsls	r3, r3, #8
 8005188:	492b      	ldr	r1, [pc, #172]	; (8005238 <HAL_RCC_OscConfig+0x270>)
 800518a:	4313      	orrs	r3, r2
 800518c:	604b      	str	r3, [r1, #4]
 800518e:	e01a      	b.n	80051c6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005190:	4b29      	ldr	r3, [pc, #164]	; (8005238 <HAL_RCC_OscConfig+0x270>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a28      	ldr	r2, [pc, #160]	; (8005238 <HAL_RCC_OscConfig+0x270>)
 8005196:	f023 0301 	bic.w	r3, r3, #1
 800519a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800519c:	f7fe fb2e 	bl	80037fc <HAL_GetTick>
 80051a0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80051a2:	e008      	b.n	80051b6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80051a4:	f7fe fb2a 	bl	80037fc <HAL_GetTick>
 80051a8:	4602      	mov	r2, r0
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	1ad3      	subs	r3, r2, r3
 80051ae:	2b02      	cmp	r3, #2
 80051b0:	d901      	bls.n	80051b6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80051b2:	2303      	movs	r3, #3
 80051b4:	e31a      	b.n	80057ec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80051b6:	4b20      	ldr	r3, [pc, #128]	; (8005238 <HAL_RCC_OscConfig+0x270>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 0302 	and.w	r3, r3, #2
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d1f0      	bne.n	80051a4 <HAL_RCC_OscConfig+0x1dc>
 80051c2:	e000      	b.n	80051c6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80051c4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 0301 	and.w	r3, r3, #1
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d073      	beq.n	80052ba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80051d2:	69bb      	ldr	r3, [r7, #24]
 80051d4:	2b08      	cmp	r3, #8
 80051d6:	d005      	beq.n	80051e4 <HAL_RCC_OscConfig+0x21c>
 80051d8:	69bb      	ldr	r3, [r7, #24]
 80051da:	2b0c      	cmp	r3, #12
 80051dc:	d10e      	bne.n	80051fc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	2b03      	cmp	r3, #3
 80051e2:	d10b      	bne.n	80051fc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051e4:	4b14      	ldr	r3, [pc, #80]	; (8005238 <HAL_RCC_OscConfig+0x270>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d063      	beq.n	80052b8 <HAL_RCC_OscConfig+0x2f0>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d15f      	bne.n	80052b8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	e2f7      	b.n	80057ec <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005204:	d106      	bne.n	8005214 <HAL_RCC_OscConfig+0x24c>
 8005206:	4b0c      	ldr	r3, [pc, #48]	; (8005238 <HAL_RCC_OscConfig+0x270>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a0b      	ldr	r2, [pc, #44]	; (8005238 <HAL_RCC_OscConfig+0x270>)
 800520c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005210:	6013      	str	r3, [r2, #0]
 8005212:	e025      	b.n	8005260 <HAL_RCC_OscConfig+0x298>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800521c:	d114      	bne.n	8005248 <HAL_RCC_OscConfig+0x280>
 800521e:	4b06      	ldr	r3, [pc, #24]	; (8005238 <HAL_RCC_OscConfig+0x270>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a05      	ldr	r2, [pc, #20]	; (8005238 <HAL_RCC_OscConfig+0x270>)
 8005224:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005228:	6013      	str	r3, [r2, #0]
 800522a:	4b03      	ldr	r3, [pc, #12]	; (8005238 <HAL_RCC_OscConfig+0x270>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a02      	ldr	r2, [pc, #8]	; (8005238 <HAL_RCC_OscConfig+0x270>)
 8005230:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005234:	6013      	str	r3, [r2, #0]
 8005236:	e013      	b.n	8005260 <HAL_RCC_OscConfig+0x298>
 8005238:	40021000 	.word	0x40021000
 800523c:	0800e2fc 	.word	0x0800e2fc
 8005240:	20000008 	.word	0x20000008
 8005244:	2000000c 	.word	0x2000000c
 8005248:	4ba0      	ldr	r3, [pc, #640]	; (80054cc <HAL_RCC_OscConfig+0x504>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a9f      	ldr	r2, [pc, #636]	; (80054cc <HAL_RCC_OscConfig+0x504>)
 800524e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005252:	6013      	str	r3, [r2, #0]
 8005254:	4b9d      	ldr	r3, [pc, #628]	; (80054cc <HAL_RCC_OscConfig+0x504>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a9c      	ldr	r2, [pc, #624]	; (80054cc <HAL_RCC_OscConfig+0x504>)
 800525a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800525e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d013      	beq.n	8005290 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005268:	f7fe fac8 	bl	80037fc <HAL_GetTick>
 800526c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800526e:	e008      	b.n	8005282 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005270:	f7fe fac4 	bl	80037fc <HAL_GetTick>
 8005274:	4602      	mov	r2, r0
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	1ad3      	subs	r3, r2, r3
 800527a:	2b64      	cmp	r3, #100	; 0x64
 800527c:	d901      	bls.n	8005282 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800527e:	2303      	movs	r3, #3
 8005280:	e2b4      	b.n	80057ec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005282:	4b92      	ldr	r3, [pc, #584]	; (80054cc <HAL_RCC_OscConfig+0x504>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800528a:	2b00      	cmp	r3, #0
 800528c:	d0f0      	beq.n	8005270 <HAL_RCC_OscConfig+0x2a8>
 800528e:	e014      	b.n	80052ba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005290:	f7fe fab4 	bl	80037fc <HAL_GetTick>
 8005294:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005296:	e008      	b.n	80052aa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005298:	f7fe fab0 	bl	80037fc <HAL_GetTick>
 800529c:	4602      	mov	r2, r0
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	1ad3      	subs	r3, r2, r3
 80052a2:	2b64      	cmp	r3, #100	; 0x64
 80052a4:	d901      	bls.n	80052aa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80052a6:	2303      	movs	r3, #3
 80052a8:	e2a0      	b.n	80057ec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80052aa:	4b88      	ldr	r3, [pc, #544]	; (80054cc <HAL_RCC_OscConfig+0x504>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d1f0      	bne.n	8005298 <HAL_RCC_OscConfig+0x2d0>
 80052b6:	e000      	b.n	80052ba <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 0302 	and.w	r3, r3, #2
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d060      	beq.n	8005388 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80052c6:	69bb      	ldr	r3, [r7, #24]
 80052c8:	2b04      	cmp	r3, #4
 80052ca:	d005      	beq.n	80052d8 <HAL_RCC_OscConfig+0x310>
 80052cc:	69bb      	ldr	r3, [r7, #24]
 80052ce:	2b0c      	cmp	r3, #12
 80052d0:	d119      	bne.n	8005306 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	2b02      	cmp	r3, #2
 80052d6:	d116      	bne.n	8005306 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80052d8:	4b7c      	ldr	r3, [pc, #496]	; (80054cc <HAL_RCC_OscConfig+0x504>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d005      	beq.n	80052f0 <HAL_RCC_OscConfig+0x328>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	68db      	ldr	r3, [r3, #12]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d101      	bne.n	80052f0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	e27d      	b.n	80057ec <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052f0:	4b76      	ldr	r3, [pc, #472]	; (80054cc <HAL_RCC_OscConfig+0x504>)
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	691b      	ldr	r3, [r3, #16]
 80052fc:	061b      	lsls	r3, r3, #24
 80052fe:	4973      	ldr	r1, [pc, #460]	; (80054cc <HAL_RCC_OscConfig+0x504>)
 8005300:	4313      	orrs	r3, r2
 8005302:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005304:	e040      	b.n	8005388 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	68db      	ldr	r3, [r3, #12]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d023      	beq.n	8005356 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800530e:	4b6f      	ldr	r3, [pc, #444]	; (80054cc <HAL_RCC_OscConfig+0x504>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a6e      	ldr	r2, [pc, #440]	; (80054cc <HAL_RCC_OscConfig+0x504>)
 8005314:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005318:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800531a:	f7fe fa6f 	bl	80037fc <HAL_GetTick>
 800531e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005320:	e008      	b.n	8005334 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005322:	f7fe fa6b 	bl	80037fc <HAL_GetTick>
 8005326:	4602      	mov	r2, r0
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	1ad3      	subs	r3, r2, r3
 800532c:	2b02      	cmp	r3, #2
 800532e:	d901      	bls.n	8005334 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005330:	2303      	movs	r3, #3
 8005332:	e25b      	b.n	80057ec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005334:	4b65      	ldr	r3, [pc, #404]	; (80054cc <HAL_RCC_OscConfig+0x504>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800533c:	2b00      	cmp	r3, #0
 800533e:	d0f0      	beq.n	8005322 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005340:	4b62      	ldr	r3, [pc, #392]	; (80054cc <HAL_RCC_OscConfig+0x504>)
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	691b      	ldr	r3, [r3, #16]
 800534c:	061b      	lsls	r3, r3, #24
 800534e:	495f      	ldr	r1, [pc, #380]	; (80054cc <HAL_RCC_OscConfig+0x504>)
 8005350:	4313      	orrs	r3, r2
 8005352:	604b      	str	r3, [r1, #4]
 8005354:	e018      	b.n	8005388 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005356:	4b5d      	ldr	r3, [pc, #372]	; (80054cc <HAL_RCC_OscConfig+0x504>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a5c      	ldr	r2, [pc, #368]	; (80054cc <HAL_RCC_OscConfig+0x504>)
 800535c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005360:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005362:	f7fe fa4b 	bl	80037fc <HAL_GetTick>
 8005366:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005368:	e008      	b.n	800537c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800536a:	f7fe fa47 	bl	80037fc <HAL_GetTick>
 800536e:	4602      	mov	r2, r0
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	1ad3      	subs	r3, r2, r3
 8005374:	2b02      	cmp	r3, #2
 8005376:	d901      	bls.n	800537c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005378:	2303      	movs	r3, #3
 800537a:	e237      	b.n	80057ec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800537c:	4b53      	ldr	r3, [pc, #332]	; (80054cc <HAL_RCC_OscConfig+0x504>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005384:	2b00      	cmp	r3, #0
 8005386:	d1f0      	bne.n	800536a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 0308 	and.w	r3, r3, #8
 8005390:	2b00      	cmp	r3, #0
 8005392:	d03c      	beq.n	800540e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	695b      	ldr	r3, [r3, #20]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d01c      	beq.n	80053d6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800539c:	4b4b      	ldr	r3, [pc, #300]	; (80054cc <HAL_RCC_OscConfig+0x504>)
 800539e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053a2:	4a4a      	ldr	r2, [pc, #296]	; (80054cc <HAL_RCC_OscConfig+0x504>)
 80053a4:	f043 0301 	orr.w	r3, r3, #1
 80053a8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053ac:	f7fe fa26 	bl	80037fc <HAL_GetTick>
 80053b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80053b2:	e008      	b.n	80053c6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053b4:	f7fe fa22 	bl	80037fc <HAL_GetTick>
 80053b8:	4602      	mov	r2, r0
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	1ad3      	subs	r3, r2, r3
 80053be:	2b02      	cmp	r3, #2
 80053c0:	d901      	bls.n	80053c6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80053c2:	2303      	movs	r3, #3
 80053c4:	e212      	b.n	80057ec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80053c6:	4b41      	ldr	r3, [pc, #260]	; (80054cc <HAL_RCC_OscConfig+0x504>)
 80053c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053cc:	f003 0302 	and.w	r3, r3, #2
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d0ef      	beq.n	80053b4 <HAL_RCC_OscConfig+0x3ec>
 80053d4:	e01b      	b.n	800540e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80053d6:	4b3d      	ldr	r3, [pc, #244]	; (80054cc <HAL_RCC_OscConfig+0x504>)
 80053d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053dc:	4a3b      	ldr	r2, [pc, #236]	; (80054cc <HAL_RCC_OscConfig+0x504>)
 80053de:	f023 0301 	bic.w	r3, r3, #1
 80053e2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053e6:	f7fe fa09 	bl	80037fc <HAL_GetTick>
 80053ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80053ec:	e008      	b.n	8005400 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053ee:	f7fe fa05 	bl	80037fc <HAL_GetTick>
 80053f2:	4602      	mov	r2, r0
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	1ad3      	subs	r3, r2, r3
 80053f8:	2b02      	cmp	r3, #2
 80053fa:	d901      	bls.n	8005400 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80053fc:	2303      	movs	r3, #3
 80053fe:	e1f5      	b.n	80057ec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005400:	4b32      	ldr	r3, [pc, #200]	; (80054cc <HAL_RCC_OscConfig+0x504>)
 8005402:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005406:	f003 0302 	and.w	r3, r3, #2
 800540a:	2b00      	cmp	r3, #0
 800540c:	d1ef      	bne.n	80053ee <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f003 0304 	and.w	r3, r3, #4
 8005416:	2b00      	cmp	r3, #0
 8005418:	f000 80a6 	beq.w	8005568 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800541c:	2300      	movs	r3, #0
 800541e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005420:	4b2a      	ldr	r3, [pc, #168]	; (80054cc <HAL_RCC_OscConfig+0x504>)
 8005422:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005424:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005428:	2b00      	cmp	r3, #0
 800542a:	d10d      	bne.n	8005448 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800542c:	4b27      	ldr	r3, [pc, #156]	; (80054cc <HAL_RCC_OscConfig+0x504>)
 800542e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005430:	4a26      	ldr	r2, [pc, #152]	; (80054cc <HAL_RCC_OscConfig+0x504>)
 8005432:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005436:	6593      	str	r3, [r2, #88]	; 0x58
 8005438:	4b24      	ldr	r3, [pc, #144]	; (80054cc <HAL_RCC_OscConfig+0x504>)
 800543a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800543c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005440:	60bb      	str	r3, [r7, #8]
 8005442:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005444:	2301      	movs	r3, #1
 8005446:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005448:	4b21      	ldr	r3, [pc, #132]	; (80054d0 <HAL_RCC_OscConfig+0x508>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005450:	2b00      	cmp	r3, #0
 8005452:	d118      	bne.n	8005486 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005454:	4b1e      	ldr	r3, [pc, #120]	; (80054d0 <HAL_RCC_OscConfig+0x508>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a1d      	ldr	r2, [pc, #116]	; (80054d0 <HAL_RCC_OscConfig+0x508>)
 800545a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800545e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005460:	f7fe f9cc 	bl	80037fc <HAL_GetTick>
 8005464:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005466:	e008      	b.n	800547a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005468:	f7fe f9c8 	bl	80037fc <HAL_GetTick>
 800546c:	4602      	mov	r2, r0
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	1ad3      	subs	r3, r2, r3
 8005472:	2b02      	cmp	r3, #2
 8005474:	d901      	bls.n	800547a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005476:	2303      	movs	r3, #3
 8005478:	e1b8      	b.n	80057ec <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800547a:	4b15      	ldr	r3, [pc, #84]	; (80054d0 <HAL_RCC_OscConfig+0x508>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005482:	2b00      	cmp	r3, #0
 8005484:	d0f0      	beq.n	8005468 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	2b01      	cmp	r3, #1
 800548c:	d108      	bne.n	80054a0 <HAL_RCC_OscConfig+0x4d8>
 800548e:	4b0f      	ldr	r3, [pc, #60]	; (80054cc <HAL_RCC_OscConfig+0x504>)
 8005490:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005494:	4a0d      	ldr	r2, [pc, #52]	; (80054cc <HAL_RCC_OscConfig+0x504>)
 8005496:	f043 0301 	orr.w	r3, r3, #1
 800549a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800549e:	e029      	b.n	80054f4 <HAL_RCC_OscConfig+0x52c>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	2b05      	cmp	r3, #5
 80054a6:	d115      	bne.n	80054d4 <HAL_RCC_OscConfig+0x50c>
 80054a8:	4b08      	ldr	r3, [pc, #32]	; (80054cc <HAL_RCC_OscConfig+0x504>)
 80054aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054ae:	4a07      	ldr	r2, [pc, #28]	; (80054cc <HAL_RCC_OscConfig+0x504>)
 80054b0:	f043 0304 	orr.w	r3, r3, #4
 80054b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80054b8:	4b04      	ldr	r3, [pc, #16]	; (80054cc <HAL_RCC_OscConfig+0x504>)
 80054ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054be:	4a03      	ldr	r2, [pc, #12]	; (80054cc <HAL_RCC_OscConfig+0x504>)
 80054c0:	f043 0301 	orr.w	r3, r3, #1
 80054c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80054c8:	e014      	b.n	80054f4 <HAL_RCC_OscConfig+0x52c>
 80054ca:	bf00      	nop
 80054cc:	40021000 	.word	0x40021000
 80054d0:	40007000 	.word	0x40007000
 80054d4:	4b9d      	ldr	r3, [pc, #628]	; (800574c <HAL_RCC_OscConfig+0x784>)
 80054d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054da:	4a9c      	ldr	r2, [pc, #624]	; (800574c <HAL_RCC_OscConfig+0x784>)
 80054dc:	f023 0301 	bic.w	r3, r3, #1
 80054e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80054e4:	4b99      	ldr	r3, [pc, #612]	; (800574c <HAL_RCC_OscConfig+0x784>)
 80054e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054ea:	4a98      	ldr	r2, [pc, #608]	; (800574c <HAL_RCC_OscConfig+0x784>)
 80054ec:	f023 0304 	bic.w	r3, r3, #4
 80054f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d016      	beq.n	800552a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054fc:	f7fe f97e 	bl	80037fc <HAL_GetTick>
 8005500:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005502:	e00a      	b.n	800551a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005504:	f7fe f97a 	bl	80037fc <HAL_GetTick>
 8005508:	4602      	mov	r2, r0
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	1ad3      	subs	r3, r2, r3
 800550e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005512:	4293      	cmp	r3, r2
 8005514:	d901      	bls.n	800551a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005516:	2303      	movs	r3, #3
 8005518:	e168      	b.n	80057ec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800551a:	4b8c      	ldr	r3, [pc, #560]	; (800574c <HAL_RCC_OscConfig+0x784>)
 800551c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005520:	f003 0302 	and.w	r3, r3, #2
 8005524:	2b00      	cmp	r3, #0
 8005526:	d0ed      	beq.n	8005504 <HAL_RCC_OscConfig+0x53c>
 8005528:	e015      	b.n	8005556 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800552a:	f7fe f967 	bl	80037fc <HAL_GetTick>
 800552e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005530:	e00a      	b.n	8005548 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005532:	f7fe f963 	bl	80037fc <HAL_GetTick>
 8005536:	4602      	mov	r2, r0
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	1ad3      	subs	r3, r2, r3
 800553c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005540:	4293      	cmp	r3, r2
 8005542:	d901      	bls.n	8005548 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005544:	2303      	movs	r3, #3
 8005546:	e151      	b.n	80057ec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005548:	4b80      	ldr	r3, [pc, #512]	; (800574c <HAL_RCC_OscConfig+0x784>)
 800554a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800554e:	f003 0302 	and.w	r3, r3, #2
 8005552:	2b00      	cmp	r3, #0
 8005554:	d1ed      	bne.n	8005532 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005556:	7ffb      	ldrb	r3, [r7, #31]
 8005558:	2b01      	cmp	r3, #1
 800555a:	d105      	bne.n	8005568 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800555c:	4b7b      	ldr	r3, [pc, #492]	; (800574c <HAL_RCC_OscConfig+0x784>)
 800555e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005560:	4a7a      	ldr	r2, [pc, #488]	; (800574c <HAL_RCC_OscConfig+0x784>)
 8005562:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005566:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 0320 	and.w	r3, r3, #32
 8005570:	2b00      	cmp	r3, #0
 8005572:	d03c      	beq.n	80055ee <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005578:	2b00      	cmp	r3, #0
 800557a:	d01c      	beq.n	80055b6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800557c:	4b73      	ldr	r3, [pc, #460]	; (800574c <HAL_RCC_OscConfig+0x784>)
 800557e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005582:	4a72      	ldr	r2, [pc, #456]	; (800574c <HAL_RCC_OscConfig+0x784>)
 8005584:	f043 0301 	orr.w	r3, r3, #1
 8005588:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800558c:	f7fe f936 	bl	80037fc <HAL_GetTick>
 8005590:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005592:	e008      	b.n	80055a6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005594:	f7fe f932 	bl	80037fc <HAL_GetTick>
 8005598:	4602      	mov	r2, r0
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	1ad3      	subs	r3, r2, r3
 800559e:	2b02      	cmp	r3, #2
 80055a0:	d901      	bls.n	80055a6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80055a2:	2303      	movs	r3, #3
 80055a4:	e122      	b.n	80057ec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80055a6:	4b69      	ldr	r3, [pc, #420]	; (800574c <HAL_RCC_OscConfig+0x784>)
 80055a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80055ac:	f003 0302 	and.w	r3, r3, #2
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d0ef      	beq.n	8005594 <HAL_RCC_OscConfig+0x5cc>
 80055b4:	e01b      	b.n	80055ee <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80055b6:	4b65      	ldr	r3, [pc, #404]	; (800574c <HAL_RCC_OscConfig+0x784>)
 80055b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80055bc:	4a63      	ldr	r2, [pc, #396]	; (800574c <HAL_RCC_OscConfig+0x784>)
 80055be:	f023 0301 	bic.w	r3, r3, #1
 80055c2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055c6:	f7fe f919 	bl	80037fc <HAL_GetTick>
 80055ca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80055cc:	e008      	b.n	80055e0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80055ce:	f7fe f915 	bl	80037fc <HAL_GetTick>
 80055d2:	4602      	mov	r2, r0
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	1ad3      	subs	r3, r2, r3
 80055d8:	2b02      	cmp	r3, #2
 80055da:	d901      	bls.n	80055e0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80055dc:	2303      	movs	r3, #3
 80055de:	e105      	b.n	80057ec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80055e0:	4b5a      	ldr	r3, [pc, #360]	; (800574c <HAL_RCC_OscConfig+0x784>)
 80055e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80055e6:	f003 0302 	and.w	r3, r3, #2
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d1ef      	bne.n	80055ce <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	f000 80f9 	beq.w	80057ea <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055fc:	2b02      	cmp	r3, #2
 80055fe:	f040 80cf 	bne.w	80057a0 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005602:	4b52      	ldr	r3, [pc, #328]	; (800574c <HAL_RCC_OscConfig+0x784>)
 8005604:	68db      	ldr	r3, [r3, #12]
 8005606:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	f003 0203 	and.w	r2, r3, #3
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005612:	429a      	cmp	r2, r3
 8005614:	d12c      	bne.n	8005670 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005620:	3b01      	subs	r3, #1
 8005622:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005624:	429a      	cmp	r2, r3
 8005626:	d123      	bne.n	8005670 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005632:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005634:	429a      	cmp	r2, r3
 8005636:	d11b      	bne.n	8005670 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005642:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005644:	429a      	cmp	r2, r3
 8005646:	d113      	bne.n	8005670 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005652:	085b      	lsrs	r3, r3, #1
 8005654:	3b01      	subs	r3, #1
 8005656:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005658:	429a      	cmp	r2, r3
 800565a:	d109      	bne.n	8005670 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005666:	085b      	lsrs	r3, r3, #1
 8005668:	3b01      	subs	r3, #1
 800566a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800566c:	429a      	cmp	r2, r3
 800566e:	d071      	beq.n	8005754 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005670:	69bb      	ldr	r3, [r7, #24]
 8005672:	2b0c      	cmp	r3, #12
 8005674:	d068      	beq.n	8005748 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005676:	4b35      	ldr	r3, [pc, #212]	; (800574c <HAL_RCC_OscConfig+0x784>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800567e:	2b00      	cmp	r3, #0
 8005680:	d105      	bne.n	800568e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005682:	4b32      	ldr	r3, [pc, #200]	; (800574c <HAL_RCC_OscConfig+0x784>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800568a:	2b00      	cmp	r3, #0
 800568c:	d001      	beq.n	8005692 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	e0ac      	b.n	80057ec <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005692:	4b2e      	ldr	r3, [pc, #184]	; (800574c <HAL_RCC_OscConfig+0x784>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a2d      	ldr	r2, [pc, #180]	; (800574c <HAL_RCC_OscConfig+0x784>)
 8005698:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800569c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800569e:	f7fe f8ad 	bl	80037fc <HAL_GetTick>
 80056a2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056a4:	e008      	b.n	80056b8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056a6:	f7fe f8a9 	bl	80037fc <HAL_GetTick>
 80056aa:	4602      	mov	r2, r0
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	1ad3      	subs	r3, r2, r3
 80056b0:	2b02      	cmp	r3, #2
 80056b2:	d901      	bls.n	80056b8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80056b4:	2303      	movs	r3, #3
 80056b6:	e099      	b.n	80057ec <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056b8:	4b24      	ldr	r3, [pc, #144]	; (800574c <HAL_RCC_OscConfig+0x784>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d1f0      	bne.n	80056a6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80056c4:	4b21      	ldr	r3, [pc, #132]	; (800574c <HAL_RCC_OscConfig+0x784>)
 80056c6:	68da      	ldr	r2, [r3, #12]
 80056c8:	4b21      	ldr	r3, [pc, #132]	; (8005750 <HAL_RCC_OscConfig+0x788>)
 80056ca:	4013      	ands	r3, r2
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80056d0:	687a      	ldr	r2, [r7, #4]
 80056d2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80056d4:	3a01      	subs	r2, #1
 80056d6:	0112      	lsls	r2, r2, #4
 80056d8:	4311      	orrs	r1, r2
 80056da:	687a      	ldr	r2, [r7, #4]
 80056dc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80056de:	0212      	lsls	r2, r2, #8
 80056e0:	4311      	orrs	r1, r2
 80056e2:	687a      	ldr	r2, [r7, #4]
 80056e4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80056e6:	0852      	lsrs	r2, r2, #1
 80056e8:	3a01      	subs	r2, #1
 80056ea:	0552      	lsls	r2, r2, #21
 80056ec:	4311      	orrs	r1, r2
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80056f2:	0852      	lsrs	r2, r2, #1
 80056f4:	3a01      	subs	r2, #1
 80056f6:	0652      	lsls	r2, r2, #25
 80056f8:	4311      	orrs	r1, r2
 80056fa:	687a      	ldr	r2, [r7, #4]
 80056fc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80056fe:	06d2      	lsls	r2, r2, #27
 8005700:	430a      	orrs	r2, r1
 8005702:	4912      	ldr	r1, [pc, #72]	; (800574c <HAL_RCC_OscConfig+0x784>)
 8005704:	4313      	orrs	r3, r2
 8005706:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005708:	4b10      	ldr	r3, [pc, #64]	; (800574c <HAL_RCC_OscConfig+0x784>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a0f      	ldr	r2, [pc, #60]	; (800574c <HAL_RCC_OscConfig+0x784>)
 800570e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005712:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005714:	4b0d      	ldr	r3, [pc, #52]	; (800574c <HAL_RCC_OscConfig+0x784>)
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	4a0c      	ldr	r2, [pc, #48]	; (800574c <HAL_RCC_OscConfig+0x784>)
 800571a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800571e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005720:	f7fe f86c 	bl	80037fc <HAL_GetTick>
 8005724:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005726:	e008      	b.n	800573a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005728:	f7fe f868 	bl	80037fc <HAL_GetTick>
 800572c:	4602      	mov	r2, r0
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	1ad3      	subs	r3, r2, r3
 8005732:	2b02      	cmp	r3, #2
 8005734:	d901      	bls.n	800573a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8005736:	2303      	movs	r3, #3
 8005738:	e058      	b.n	80057ec <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800573a:	4b04      	ldr	r3, [pc, #16]	; (800574c <HAL_RCC_OscConfig+0x784>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005742:	2b00      	cmp	r3, #0
 8005744:	d0f0      	beq.n	8005728 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005746:	e050      	b.n	80057ea <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	e04f      	b.n	80057ec <HAL_RCC_OscConfig+0x824>
 800574c:	40021000 	.word	0x40021000
 8005750:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005754:	4b27      	ldr	r3, [pc, #156]	; (80057f4 <HAL_RCC_OscConfig+0x82c>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800575c:	2b00      	cmp	r3, #0
 800575e:	d144      	bne.n	80057ea <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005760:	4b24      	ldr	r3, [pc, #144]	; (80057f4 <HAL_RCC_OscConfig+0x82c>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a23      	ldr	r2, [pc, #140]	; (80057f4 <HAL_RCC_OscConfig+0x82c>)
 8005766:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800576a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800576c:	4b21      	ldr	r3, [pc, #132]	; (80057f4 <HAL_RCC_OscConfig+0x82c>)
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	4a20      	ldr	r2, [pc, #128]	; (80057f4 <HAL_RCC_OscConfig+0x82c>)
 8005772:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005776:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005778:	f7fe f840 	bl	80037fc <HAL_GetTick>
 800577c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800577e:	e008      	b.n	8005792 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005780:	f7fe f83c 	bl	80037fc <HAL_GetTick>
 8005784:	4602      	mov	r2, r0
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	1ad3      	subs	r3, r2, r3
 800578a:	2b02      	cmp	r3, #2
 800578c:	d901      	bls.n	8005792 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800578e:	2303      	movs	r3, #3
 8005790:	e02c      	b.n	80057ec <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005792:	4b18      	ldr	r3, [pc, #96]	; (80057f4 <HAL_RCC_OscConfig+0x82c>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800579a:	2b00      	cmp	r3, #0
 800579c:	d0f0      	beq.n	8005780 <HAL_RCC_OscConfig+0x7b8>
 800579e:	e024      	b.n	80057ea <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80057a0:	69bb      	ldr	r3, [r7, #24]
 80057a2:	2b0c      	cmp	r3, #12
 80057a4:	d01f      	beq.n	80057e6 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057a6:	4b13      	ldr	r3, [pc, #76]	; (80057f4 <HAL_RCC_OscConfig+0x82c>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a12      	ldr	r2, [pc, #72]	; (80057f4 <HAL_RCC_OscConfig+0x82c>)
 80057ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80057b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057b2:	f7fe f823 	bl	80037fc <HAL_GetTick>
 80057b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80057b8:	e008      	b.n	80057cc <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057ba:	f7fe f81f 	bl	80037fc <HAL_GetTick>
 80057be:	4602      	mov	r2, r0
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	1ad3      	subs	r3, r2, r3
 80057c4:	2b02      	cmp	r3, #2
 80057c6:	d901      	bls.n	80057cc <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80057c8:	2303      	movs	r3, #3
 80057ca:	e00f      	b.n	80057ec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80057cc:	4b09      	ldr	r3, [pc, #36]	; (80057f4 <HAL_RCC_OscConfig+0x82c>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d1f0      	bne.n	80057ba <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80057d8:	4b06      	ldr	r3, [pc, #24]	; (80057f4 <HAL_RCC_OscConfig+0x82c>)
 80057da:	68da      	ldr	r2, [r3, #12]
 80057dc:	4905      	ldr	r1, [pc, #20]	; (80057f4 <HAL_RCC_OscConfig+0x82c>)
 80057de:	4b06      	ldr	r3, [pc, #24]	; (80057f8 <HAL_RCC_OscConfig+0x830>)
 80057e0:	4013      	ands	r3, r2
 80057e2:	60cb      	str	r3, [r1, #12]
 80057e4:	e001      	b.n	80057ea <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80057e6:	2301      	movs	r3, #1
 80057e8:	e000      	b.n	80057ec <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80057ea:	2300      	movs	r3, #0
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	3720      	adds	r7, #32
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}
 80057f4:	40021000 	.word	0x40021000
 80057f8:	feeefffc 	.word	0xfeeefffc

080057fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b086      	sub	sp, #24
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
 8005804:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005806:	2300      	movs	r3, #0
 8005808:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d101      	bne.n	8005814 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	e11d      	b.n	8005a50 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005814:	4b90      	ldr	r3, [pc, #576]	; (8005a58 <HAL_RCC_ClockConfig+0x25c>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f003 030f 	and.w	r3, r3, #15
 800581c:	683a      	ldr	r2, [r7, #0]
 800581e:	429a      	cmp	r2, r3
 8005820:	d910      	bls.n	8005844 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005822:	4b8d      	ldr	r3, [pc, #564]	; (8005a58 <HAL_RCC_ClockConfig+0x25c>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f023 020f 	bic.w	r2, r3, #15
 800582a:	498b      	ldr	r1, [pc, #556]	; (8005a58 <HAL_RCC_ClockConfig+0x25c>)
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	4313      	orrs	r3, r2
 8005830:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005832:	4b89      	ldr	r3, [pc, #548]	; (8005a58 <HAL_RCC_ClockConfig+0x25c>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f003 030f 	and.w	r3, r3, #15
 800583a:	683a      	ldr	r2, [r7, #0]
 800583c:	429a      	cmp	r2, r3
 800583e:	d001      	beq.n	8005844 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	e105      	b.n	8005a50 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f003 0302 	and.w	r3, r3, #2
 800584c:	2b00      	cmp	r3, #0
 800584e:	d010      	beq.n	8005872 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	689a      	ldr	r2, [r3, #8]
 8005854:	4b81      	ldr	r3, [pc, #516]	; (8005a5c <HAL_RCC_ClockConfig+0x260>)
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800585c:	429a      	cmp	r2, r3
 800585e:	d908      	bls.n	8005872 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005860:	4b7e      	ldr	r3, [pc, #504]	; (8005a5c <HAL_RCC_ClockConfig+0x260>)
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	497b      	ldr	r1, [pc, #492]	; (8005a5c <HAL_RCC_ClockConfig+0x260>)
 800586e:	4313      	orrs	r3, r2
 8005870:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f003 0301 	and.w	r3, r3, #1
 800587a:	2b00      	cmp	r3, #0
 800587c:	d079      	beq.n	8005972 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	2b03      	cmp	r3, #3
 8005884:	d11e      	bne.n	80058c4 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005886:	4b75      	ldr	r3, [pc, #468]	; (8005a5c <HAL_RCC_ClockConfig+0x260>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800588e:	2b00      	cmp	r3, #0
 8005890:	d101      	bne.n	8005896 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	e0dc      	b.n	8005a50 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8005896:	f000 fa09 	bl	8005cac <RCC_GetSysClockFreqFromPLLSource>
 800589a:	4603      	mov	r3, r0
 800589c:	4a70      	ldr	r2, [pc, #448]	; (8005a60 <HAL_RCC_ClockConfig+0x264>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d946      	bls.n	8005930 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80058a2:	4b6e      	ldr	r3, [pc, #440]	; (8005a5c <HAL_RCC_ClockConfig+0x260>)
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d140      	bne.n	8005930 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80058ae:	4b6b      	ldr	r3, [pc, #428]	; (8005a5c <HAL_RCC_ClockConfig+0x260>)
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058b6:	4a69      	ldr	r2, [pc, #420]	; (8005a5c <HAL_RCC_ClockConfig+0x260>)
 80058b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058bc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80058be:	2380      	movs	r3, #128	; 0x80
 80058c0:	617b      	str	r3, [r7, #20]
 80058c2:	e035      	b.n	8005930 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	2b02      	cmp	r3, #2
 80058ca:	d107      	bne.n	80058dc <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80058cc:	4b63      	ldr	r3, [pc, #396]	; (8005a5c <HAL_RCC_ClockConfig+0x260>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d115      	bne.n	8005904 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80058d8:	2301      	movs	r3, #1
 80058da:	e0b9      	b.n	8005a50 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d107      	bne.n	80058f4 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80058e4:	4b5d      	ldr	r3, [pc, #372]	; (8005a5c <HAL_RCC_ClockConfig+0x260>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f003 0302 	and.w	r3, r3, #2
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d109      	bne.n	8005904 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	e0ad      	b.n	8005a50 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80058f4:	4b59      	ldr	r3, [pc, #356]	; (8005a5c <HAL_RCC_ClockConfig+0x260>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d101      	bne.n	8005904 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	e0a5      	b.n	8005a50 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8005904:	f000 f8b4 	bl	8005a70 <HAL_RCC_GetSysClockFreq>
 8005908:	4603      	mov	r3, r0
 800590a:	4a55      	ldr	r2, [pc, #340]	; (8005a60 <HAL_RCC_ClockConfig+0x264>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d90f      	bls.n	8005930 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005910:	4b52      	ldr	r3, [pc, #328]	; (8005a5c <HAL_RCC_ClockConfig+0x260>)
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005918:	2b00      	cmp	r3, #0
 800591a:	d109      	bne.n	8005930 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800591c:	4b4f      	ldr	r3, [pc, #316]	; (8005a5c <HAL_RCC_ClockConfig+0x260>)
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005924:	4a4d      	ldr	r2, [pc, #308]	; (8005a5c <HAL_RCC_ClockConfig+0x260>)
 8005926:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800592a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800592c:	2380      	movs	r3, #128	; 0x80
 800592e:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005930:	4b4a      	ldr	r3, [pc, #296]	; (8005a5c <HAL_RCC_ClockConfig+0x260>)
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	f023 0203 	bic.w	r2, r3, #3
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	4947      	ldr	r1, [pc, #284]	; (8005a5c <HAL_RCC_ClockConfig+0x260>)
 800593e:	4313      	orrs	r3, r2
 8005940:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005942:	f7fd ff5b 	bl	80037fc <HAL_GetTick>
 8005946:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005948:	e00a      	b.n	8005960 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800594a:	f7fd ff57 	bl	80037fc <HAL_GetTick>
 800594e:	4602      	mov	r2, r0
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	1ad3      	subs	r3, r2, r3
 8005954:	f241 3288 	movw	r2, #5000	; 0x1388
 8005958:	4293      	cmp	r3, r2
 800595a:	d901      	bls.n	8005960 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 800595c:	2303      	movs	r3, #3
 800595e:	e077      	b.n	8005a50 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005960:	4b3e      	ldr	r3, [pc, #248]	; (8005a5c <HAL_RCC_ClockConfig+0x260>)
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	f003 020c 	and.w	r2, r3, #12
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	009b      	lsls	r3, r3, #2
 800596e:	429a      	cmp	r2, r3
 8005970:	d1eb      	bne.n	800594a <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	2b80      	cmp	r3, #128	; 0x80
 8005976:	d105      	bne.n	8005984 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005978:	4b38      	ldr	r3, [pc, #224]	; (8005a5c <HAL_RCC_ClockConfig+0x260>)
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	4a37      	ldr	r2, [pc, #220]	; (8005a5c <HAL_RCC_ClockConfig+0x260>)
 800597e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005982:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f003 0302 	and.w	r3, r3, #2
 800598c:	2b00      	cmp	r3, #0
 800598e:	d010      	beq.n	80059b2 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	689a      	ldr	r2, [r3, #8]
 8005994:	4b31      	ldr	r3, [pc, #196]	; (8005a5c <HAL_RCC_ClockConfig+0x260>)
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800599c:	429a      	cmp	r2, r3
 800599e:	d208      	bcs.n	80059b2 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059a0:	4b2e      	ldr	r3, [pc, #184]	; (8005a5c <HAL_RCC_ClockConfig+0x260>)
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	492b      	ldr	r1, [pc, #172]	; (8005a5c <HAL_RCC_ClockConfig+0x260>)
 80059ae:	4313      	orrs	r3, r2
 80059b0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80059b2:	4b29      	ldr	r3, [pc, #164]	; (8005a58 <HAL_RCC_ClockConfig+0x25c>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f003 030f 	and.w	r3, r3, #15
 80059ba:	683a      	ldr	r2, [r7, #0]
 80059bc:	429a      	cmp	r2, r3
 80059be:	d210      	bcs.n	80059e2 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059c0:	4b25      	ldr	r3, [pc, #148]	; (8005a58 <HAL_RCC_ClockConfig+0x25c>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f023 020f 	bic.w	r2, r3, #15
 80059c8:	4923      	ldr	r1, [pc, #140]	; (8005a58 <HAL_RCC_ClockConfig+0x25c>)
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	4313      	orrs	r3, r2
 80059ce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059d0:	4b21      	ldr	r3, [pc, #132]	; (8005a58 <HAL_RCC_ClockConfig+0x25c>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f003 030f 	and.w	r3, r3, #15
 80059d8:	683a      	ldr	r2, [r7, #0]
 80059da:	429a      	cmp	r2, r3
 80059dc:	d001      	beq.n	80059e2 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80059de:	2301      	movs	r3, #1
 80059e0:	e036      	b.n	8005a50 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f003 0304 	and.w	r3, r3, #4
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d008      	beq.n	8005a00 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059ee:	4b1b      	ldr	r3, [pc, #108]	; (8005a5c <HAL_RCC_ClockConfig+0x260>)
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	68db      	ldr	r3, [r3, #12]
 80059fa:	4918      	ldr	r1, [pc, #96]	; (8005a5c <HAL_RCC_ClockConfig+0x260>)
 80059fc:	4313      	orrs	r3, r2
 80059fe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f003 0308 	and.w	r3, r3, #8
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d009      	beq.n	8005a20 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a0c:	4b13      	ldr	r3, [pc, #76]	; (8005a5c <HAL_RCC_ClockConfig+0x260>)
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	691b      	ldr	r3, [r3, #16]
 8005a18:	00db      	lsls	r3, r3, #3
 8005a1a:	4910      	ldr	r1, [pc, #64]	; (8005a5c <HAL_RCC_ClockConfig+0x260>)
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005a20:	f000 f826 	bl	8005a70 <HAL_RCC_GetSysClockFreq>
 8005a24:	4602      	mov	r2, r0
 8005a26:	4b0d      	ldr	r3, [pc, #52]	; (8005a5c <HAL_RCC_ClockConfig+0x260>)
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	091b      	lsrs	r3, r3, #4
 8005a2c:	f003 030f 	and.w	r3, r3, #15
 8005a30:	490c      	ldr	r1, [pc, #48]	; (8005a64 <HAL_RCC_ClockConfig+0x268>)
 8005a32:	5ccb      	ldrb	r3, [r1, r3]
 8005a34:	f003 031f 	and.w	r3, r3, #31
 8005a38:	fa22 f303 	lsr.w	r3, r2, r3
 8005a3c:	4a0a      	ldr	r2, [pc, #40]	; (8005a68 <HAL_RCC_ClockConfig+0x26c>)
 8005a3e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005a40:	4b0a      	ldr	r3, [pc, #40]	; (8005a6c <HAL_RCC_ClockConfig+0x270>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4618      	mov	r0, r3
 8005a46:	f7fd fe89 	bl	800375c <HAL_InitTick>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	73fb      	strb	r3, [r7, #15]

  return status;
 8005a4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3718      	adds	r7, #24
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}
 8005a58:	40022000 	.word	0x40022000
 8005a5c:	40021000 	.word	0x40021000
 8005a60:	04c4b400 	.word	0x04c4b400
 8005a64:	0800e2fc 	.word	0x0800e2fc
 8005a68:	20000008 	.word	0x20000008
 8005a6c:	2000000c 	.word	0x2000000c

08005a70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b089      	sub	sp, #36	; 0x24
 8005a74:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005a76:	2300      	movs	r3, #0
 8005a78:	61fb      	str	r3, [r7, #28]
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a7e:	4b3e      	ldr	r3, [pc, #248]	; (8005b78 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	f003 030c 	and.w	r3, r3, #12
 8005a86:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005a88:	4b3b      	ldr	r3, [pc, #236]	; (8005b78 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a8a:	68db      	ldr	r3, [r3, #12]
 8005a8c:	f003 0303 	and.w	r3, r3, #3
 8005a90:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d005      	beq.n	8005aa4 <HAL_RCC_GetSysClockFreq+0x34>
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	2b0c      	cmp	r3, #12
 8005a9c:	d121      	bne.n	8005ae2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d11e      	bne.n	8005ae2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005aa4:	4b34      	ldr	r3, [pc, #208]	; (8005b78 <HAL_RCC_GetSysClockFreq+0x108>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f003 0308 	and.w	r3, r3, #8
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d107      	bne.n	8005ac0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005ab0:	4b31      	ldr	r3, [pc, #196]	; (8005b78 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ab2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ab6:	0a1b      	lsrs	r3, r3, #8
 8005ab8:	f003 030f 	and.w	r3, r3, #15
 8005abc:	61fb      	str	r3, [r7, #28]
 8005abe:	e005      	b.n	8005acc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005ac0:	4b2d      	ldr	r3, [pc, #180]	; (8005b78 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	091b      	lsrs	r3, r3, #4
 8005ac6:	f003 030f 	and.w	r3, r3, #15
 8005aca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005acc:	4a2b      	ldr	r2, [pc, #172]	; (8005b7c <HAL_RCC_GetSysClockFreq+0x10c>)
 8005ace:	69fb      	ldr	r3, [r7, #28]
 8005ad0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ad4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d10d      	bne.n	8005af8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005adc:	69fb      	ldr	r3, [r7, #28]
 8005ade:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005ae0:	e00a      	b.n	8005af8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	2b04      	cmp	r3, #4
 8005ae6:	d102      	bne.n	8005aee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005ae8:	4b25      	ldr	r3, [pc, #148]	; (8005b80 <HAL_RCC_GetSysClockFreq+0x110>)
 8005aea:	61bb      	str	r3, [r7, #24]
 8005aec:	e004      	b.n	8005af8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	2b08      	cmp	r3, #8
 8005af2:	d101      	bne.n	8005af8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005af4:	4b23      	ldr	r3, [pc, #140]	; (8005b84 <HAL_RCC_GetSysClockFreq+0x114>)
 8005af6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	2b0c      	cmp	r3, #12
 8005afc:	d134      	bne.n	8005b68 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005afe:	4b1e      	ldr	r3, [pc, #120]	; (8005b78 <HAL_RCC_GetSysClockFreq+0x108>)
 8005b00:	68db      	ldr	r3, [r3, #12]
 8005b02:	f003 0303 	and.w	r3, r3, #3
 8005b06:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	2b02      	cmp	r3, #2
 8005b0c:	d003      	beq.n	8005b16 <HAL_RCC_GetSysClockFreq+0xa6>
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	2b03      	cmp	r3, #3
 8005b12:	d003      	beq.n	8005b1c <HAL_RCC_GetSysClockFreq+0xac>
 8005b14:	e005      	b.n	8005b22 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005b16:	4b1a      	ldr	r3, [pc, #104]	; (8005b80 <HAL_RCC_GetSysClockFreq+0x110>)
 8005b18:	617b      	str	r3, [r7, #20]
      break;
 8005b1a:	e005      	b.n	8005b28 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005b1c:	4b19      	ldr	r3, [pc, #100]	; (8005b84 <HAL_RCC_GetSysClockFreq+0x114>)
 8005b1e:	617b      	str	r3, [r7, #20]
      break;
 8005b20:	e002      	b.n	8005b28 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005b22:	69fb      	ldr	r3, [r7, #28]
 8005b24:	617b      	str	r3, [r7, #20]
      break;
 8005b26:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005b28:	4b13      	ldr	r3, [pc, #76]	; (8005b78 <HAL_RCC_GetSysClockFreq+0x108>)
 8005b2a:	68db      	ldr	r3, [r3, #12]
 8005b2c:	091b      	lsrs	r3, r3, #4
 8005b2e:	f003 030f 	and.w	r3, r3, #15
 8005b32:	3301      	adds	r3, #1
 8005b34:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005b36:	4b10      	ldr	r3, [pc, #64]	; (8005b78 <HAL_RCC_GetSysClockFreq+0x108>)
 8005b38:	68db      	ldr	r3, [r3, #12]
 8005b3a:	0a1b      	lsrs	r3, r3, #8
 8005b3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b40:	697a      	ldr	r2, [r7, #20]
 8005b42:	fb03 f202 	mul.w	r2, r3, r2
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b4c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005b4e:	4b0a      	ldr	r3, [pc, #40]	; (8005b78 <HAL_RCC_GetSysClockFreq+0x108>)
 8005b50:	68db      	ldr	r3, [r3, #12]
 8005b52:	0e5b      	lsrs	r3, r3, #25
 8005b54:	f003 0303 	and.w	r3, r3, #3
 8005b58:	3301      	adds	r3, #1
 8005b5a:	005b      	lsls	r3, r3, #1
 8005b5c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005b5e:	697a      	ldr	r2, [r7, #20]
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b66:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005b68:	69bb      	ldr	r3, [r7, #24]
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3724      	adds	r7, #36	; 0x24
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b74:	4770      	bx	lr
 8005b76:	bf00      	nop
 8005b78:	40021000 	.word	0x40021000
 8005b7c:	0800e314 	.word	0x0800e314
 8005b80:	00f42400 	.word	0x00f42400
 8005b84:	007a1200 	.word	0x007a1200

08005b88 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b8c:	4b03      	ldr	r3, [pc, #12]	; (8005b9c <HAL_RCC_GetHCLKFreq+0x14>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr
 8005b9a:	bf00      	nop
 8005b9c:	20000008 	.word	0x20000008

08005ba0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005ba4:	f7ff fff0 	bl	8005b88 <HAL_RCC_GetHCLKFreq>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	4b06      	ldr	r3, [pc, #24]	; (8005bc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	0a1b      	lsrs	r3, r3, #8
 8005bb0:	f003 0307 	and.w	r3, r3, #7
 8005bb4:	4904      	ldr	r1, [pc, #16]	; (8005bc8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005bb6:	5ccb      	ldrb	r3, [r1, r3]
 8005bb8:	f003 031f 	and.w	r3, r3, #31
 8005bbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	bd80      	pop	{r7, pc}
 8005bc4:	40021000 	.word	0x40021000
 8005bc8:	0800e30c 	.word	0x0800e30c

08005bcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005bd0:	f7ff ffda 	bl	8005b88 <HAL_RCC_GetHCLKFreq>
 8005bd4:	4602      	mov	r2, r0
 8005bd6:	4b06      	ldr	r3, [pc, #24]	; (8005bf0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	0adb      	lsrs	r3, r3, #11
 8005bdc:	f003 0307 	and.w	r3, r3, #7
 8005be0:	4904      	ldr	r1, [pc, #16]	; (8005bf4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005be2:	5ccb      	ldrb	r3, [r1, r3]
 8005be4:	f003 031f 	and.w	r3, r3, #31
 8005be8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	bd80      	pop	{r7, pc}
 8005bf0:	40021000 	.word	0x40021000
 8005bf4:	0800e30c 	.word	0x0800e30c

08005bf8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b086      	sub	sp, #24
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005c00:	2300      	movs	r3, #0
 8005c02:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005c04:	4b27      	ldr	r3, [pc, #156]	; (8005ca4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d003      	beq.n	8005c18 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005c10:	f7ff f906 	bl	8004e20 <HAL_PWREx_GetVoltageRange>
 8005c14:	6178      	str	r0, [r7, #20]
 8005c16:	e014      	b.n	8005c42 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005c18:	4b22      	ldr	r3, [pc, #136]	; (8005ca4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c1c:	4a21      	ldr	r2, [pc, #132]	; (8005ca4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005c1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c22:	6593      	str	r3, [r2, #88]	; 0x58
 8005c24:	4b1f      	ldr	r3, [pc, #124]	; (8005ca4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005c26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c2c:	60fb      	str	r3, [r7, #12]
 8005c2e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005c30:	f7ff f8f6 	bl	8004e20 <HAL_PWREx_GetVoltageRange>
 8005c34:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005c36:	4b1b      	ldr	r3, [pc, #108]	; (8005ca4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c3a:	4a1a      	ldr	r2, [pc, #104]	; (8005ca4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005c3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c40:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c48:	d10b      	bne.n	8005c62 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2b80      	cmp	r3, #128	; 0x80
 8005c4e:	d913      	bls.n	8005c78 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2ba0      	cmp	r3, #160	; 0xa0
 8005c54:	d902      	bls.n	8005c5c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005c56:	2302      	movs	r3, #2
 8005c58:	613b      	str	r3, [r7, #16]
 8005c5a:	e00d      	b.n	8005c78 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	613b      	str	r3, [r7, #16]
 8005c60:	e00a      	b.n	8005c78 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2b7f      	cmp	r3, #127	; 0x7f
 8005c66:	d902      	bls.n	8005c6e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8005c68:	2302      	movs	r3, #2
 8005c6a:	613b      	str	r3, [r7, #16]
 8005c6c:	e004      	b.n	8005c78 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2b70      	cmp	r3, #112	; 0x70
 8005c72:	d101      	bne.n	8005c78 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005c74:	2301      	movs	r3, #1
 8005c76:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005c78:	4b0b      	ldr	r3, [pc, #44]	; (8005ca8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f023 020f 	bic.w	r2, r3, #15
 8005c80:	4909      	ldr	r1, [pc, #36]	; (8005ca8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005c88:	4b07      	ldr	r3, [pc, #28]	; (8005ca8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f003 030f 	and.w	r3, r3, #15
 8005c90:	693a      	ldr	r2, [r7, #16]
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d001      	beq.n	8005c9a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	e000      	b.n	8005c9c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8005c9a:	2300      	movs	r3, #0
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3718      	adds	r7, #24
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}
 8005ca4:	40021000 	.word	0x40021000
 8005ca8:	40022000 	.word	0x40022000

08005cac <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b087      	sub	sp, #28
 8005cb0:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005cb2:	4b2d      	ldr	r3, [pc, #180]	; (8005d68 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005cb4:	68db      	ldr	r3, [r3, #12]
 8005cb6:	f003 0303 	and.w	r3, r3, #3
 8005cba:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2b03      	cmp	r3, #3
 8005cc0:	d00b      	beq.n	8005cda <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2b03      	cmp	r3, #3
 8005cc6:	d825      	bhi.n	8005d14 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	d008      	beq.n	8005ce0 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2b02      	cmp	r3, #2
 8005cd2:	d11f      	bne.n	8005d14 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8005cd4:	4b25      	ldr	r3, [pc, #148]	; (8005d6c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005cd6:	613b      	str	r3, [r7, #16]
    break;
 8005cd8:	e01f      	b.n	8005d1a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8005cda:	4b25      	ldr	r3, [pc, #148]	; (8005d70 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8005cdc:	613b      	str	r3, [r7, #16]
    break;
 8005cde:	e01c      	b.n	8005d1a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005ce0:	4b21      	ldr	r3, [pc, #132]	; (8005d68 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f003 0308 	and.w	r3, r3, #8
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d107      	bne.n	8005cfc <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005cec:	4b1e      	ldr	r3, [pc, #120]	; (8005d68 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005cee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cf2:	0a1b      	lsrs	r3, r3, #8
 8005cf4:	f003 030f 	and.w	r3, r3, #15
 8005cf8:	617b      	str	r3, [r7, #20]
 8005cfa:	e005      	b.n	8005d08 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005cfc:	4b1a      	ldr	r3, [pc, #104]	; (8005d68 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	091b      	lsrs	r3, r3, #4
 8005d02:	f003 030f 	and.w	r3, r3, #15
 8005d06:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8005d08:	4a1a      	ldr	r2, [pc, #104]	; (8005d74 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d10:	613b      	str	r3, [r7, #16]
    break;
 8005d12:	e002      	b.n	8005d1a <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8005d14:	2300      	movs	r3, #0
 8005d16:	613b      	str	r3, [r7, #16]
    break;
 8005d18:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005d1a:	4b13      	ldr	r3, [pc, #76]	; (8005d68 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005d1c:	68db      	ldr	r3, [r3, #12]
 8005d1e:	091b      	lsrs	r3, r3, #4
 8005d20:	f003 030f 	and.w	r3, r3, #15
 8005d24:	3301      	adds	r3, #1
 8005d26:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005d28:	4b0f      	ldr	r3, [pc, #60]	; (8005d68 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005d2a:	68db      	ldr	r3, [r3, #12]
 8005d2c:	0a1b      	lsrs	r3, r3, #8
 8005d2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d32:	693a      	ldr	r2, [r7, #16]
 8005d34:	fb03 f202 	mul.w	r2, r3, r2
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d3e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005d40:	4b09      	ldr	r3, [pc, #36]	; (8005d68 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005d42:	68db      	ldr	r3, [r3, #12]
 8005d44:	0e5b      	lsrs	r3, r3, #25
 8005d46:	f003 0303 	and.w	r3, r3, #3
 8005d4a:	3301      	adds	r3, #1
 8005d4c:	005b      	lsls	r3, r3, #1
 8005d4e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005d50:	693a      	ldr	r2, [r7, #16]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d58:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8005d5a:	683b      	ldr	r3, [r7, #0]
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	371c      	adds	r7, #28
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr
 8005d68:	40021000 	.word	0x40021000
 8005d6c:	00f42400 	.word	0x00f42400
 8005d70:	007a1200 	.word	0x007a1200
 8005d74:	0800e314 	.word	0x0800e314

08005d78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b086      	sub	sp, #24
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005d80:	2300      	movs	r3, #0
 8005d82:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005d84:	2300      	movs	r3, #0
 8005d86:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d040      	beq.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d98:	2b80      	cmp	r3, #128	; 0x80
 8005d9a:	d02a      	beq.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005d9c:	2b80      	cmp	r3, #128	; 0x80
 8005d9e:	d825      	bhi.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005da0:	2b60      	cmp	r3, #96	; 0x60
 8005da2:	d026      	beq.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005da4:	2b60      	cmp	r3, #96	; 0x60
 8005da6:	d821      	bhi.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005da8:	2b40      	cmp	r3, #64	; 0x40
 8005daa:	d006      	beq.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x42>
 8005dac:	2b40      	cmp	r3, #64	; 0x40
 8005dae:	d81d      	bhi.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d009      	beq.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8005db4:	2b20      	cmp	r3, #32
 8005db6:	d010      	beq.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005db8:	e018      	b.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005dba:	4b89      	ldr	r3, [pc, #548]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005dbc:	68db      	ldr	r3, [r3, #12]
 8005dbe:	4a88      	ldr	r2, [pc, #544]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005dc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005dc4:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005dc6:	e015      	b.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	3304      	adds	r3, #4
 8005dcc:	2100      	movs	r1, #0
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f001 fa34 	bl	800723c <RCCEx_PLLSAI1_Config>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005dd8:	e00c      	b.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	3320      	adds	r3, #32
 8005dde:	2100      	movs	r1, #0
 8005de0:	4618      	mov	r0, r3
 8005de2:	f001 fb1f 	bl	8007424 <RCCEx_PLLSAI2_Config>
 8005de6:	4603      	mov	r3, r0
 8005de8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005dea:	e003      	b.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005dec:	2301      	movs	r3, #1
 8005dee:	74fb      	strb	r3, [r7, #19]
      break;
 8005df0:	e000      	b.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8005df2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005df4:	7cfb      	ldrb	r3, [r7, #19]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d10b      	bne.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005dfa:	4b79      	ldr	r3, [pc, #484]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005dfc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e00:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e08:	4975      	ldr	r1, [pc, #468]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005e10:	e001      	b.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e12:	7cfb      	ldrb	r3, [r7, #19]
 8005e14:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d047      	beq.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e2a:	d030      	beq.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005e2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e30:	d82a      	bhi.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005e32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e36:	d02a      	beq.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005e38:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e3c:	d824      	bhi.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005e3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e42:	d008      	beq.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005e44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e48:	d81e      	bhi.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d00a      	beq.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8005e4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e52:	d010      	beq.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005e54:	e018      	b.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005e56:	4b62      	ldr	r3, [pc, #392]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e58:	68db      	ldr	r3, [r3, #12]
 8005e5a:	4a61      	ldr	r2, [pc, #388]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e60:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005e62:	e015      	b.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	3304      	adds	r3, #4
 8005e68:	2100      	movs	r1, #0
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f001 f9e6 	bl	800723c <RCCEx_PLLSAI1_Config>
 8005e70:	4603      	mov	r3, r0
 8005e72:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005e74:	e00c      	b.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	3320      	adds	r3, #32
 8005e7a:	2100      	movs	r1, #0
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f001 fad1 	bl	8007424 <RCCEx_PLLSAI2_Config>
 8005e82:	4603      	mov	r3, r0
 8005e84:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005e86:	e003      	b.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	74fb      	strb	r3, [r7, #19]
      break;
 8005e8c:	e000      	b.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8005e8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e90:	7cfb      	ldrb	r3, [r7, #19]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d10b      	bne.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005e96:	4b52      	ldr	r3, [pc, #328]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e98:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e9c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ea4:	494e      	ldr	r1, [pc, #312]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005eac:	e001      	b.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eae:	7cfb      	ldrb	r3, [r7, #19]
 8005eb0:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	f000 809f 	beq.w	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005ec4:	4b46      	ldr	r3, [pc, #280]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ec8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d101      	bne.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	e000      	b.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d00d      	beq.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005eda:	4b41      	ldr	r3, [pc, #260]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ede:	4a40      	ldr	r2, [pc, #256]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005ee0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ee4:	6593      	str	r3, [r2, #88]	; 0x58
 8005ee6:	4b3e      	ldr	r3, [pc, #248]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005eee:	60bb      	str	r3, [r7, #8]
 8005ef0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005ef6:	4b3b      	ldr	r3, [pc, #236]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a3a      	ldr	r2, [pc, #232]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005efc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f00:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005f02:	f7fd fc7b 	bl	80037fc <HAL_GetTick>
 8005f06:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005f08:	e009      	b.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f0a:	f7fd fc77 	bl	80037fc <HAL_GetTick>
 8005f0e:	4602      	mov	r2, r0
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	1ad3      	subs	r3, r2, r3
 8005f14:	2b02      	cmp	r3, #2
 8005f16:	d902      	bls.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8005f18:	2303      	movs	r3, #3
 8005f1a:	74fb      	strb	r3, [r7, #19]
        break;
 8005f1c:	e005      	b.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005f1e:	4b31      	ldr	r3, [pc, #196]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d0ef      	beq.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8005f2a:	7cfb      	ldrb	r3, [r7, #19]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d15b      	bne.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005f30:	4b2b      	ldr	r3, [pc, #172]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f3a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d01f      	beq.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f48:	697a      	ldr	r2, [r7, #20]
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d019      	beq.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005f4e:	4b24      	ldr	r3, [pc, #144]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f58:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005f5a:	4b21      	ldr	r3, [pc, #132]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f60:	4a1f      	ldr	r2, [pc, #124]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005f6a:	4b1d      	ldr	r3, [pc, #116]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f70:	4a1b      	ldr	r2, [pc, #108]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005f7a:	4a19      	ldr	r2, [pc, #100]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	f003 0301 	and.w	r3, r3, #1
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d016      	beq.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f8c:	f7fd fc36 	bl	80037fc <HAL_GetTick>
 8005f90:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f92:	e00b      	b.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f94:	f7fd fc32 	bl	80037fc <HAL_GetTick>
 8005f98:	4602      	mov	r2, r0
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	1ad3      	subs	r3, r2, r3
 8005f9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d902      	bls.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8005fa6:	2303      	movs	r3, #3
 8005fa8:	74fb      	strb	r3, [r7, #19]
            break;
 8005faa:	e006      	b.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005fac:	4b0c      	ldr	r3, [pc, #48]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fb2:	f003 0302 	and.w	r3, r3, #2
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d0ec      	beq.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8005fba:	7cfb      	ldrb	r3, [r7, #19]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d10c      	bne.n	8005fda <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005fc0:	4b07      	ldr	r3, [pc, #28]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fc6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fd0:	4903      	ldr	r1, [pc, #12]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005fd8:	e008      	b.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005fda:	7cfb      	ldrb	r3, [r7, #19]
 8005fdc:	74bb      	strb	r3, [r7, #18]
 8005fde:	e005      	b.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x274>
 8005fe0:	40021000 	.word	0x40021000
 8005fe4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fe8:	7cfb      	ldrb	r3, [r7, #19]
 8005fea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005fec:	7c7b      	ldrb	r3, [r7, #17]
 8005fee:	2b01      	cmp	r3, #1
 8005ff0:	d105      	bne.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ff2:	4ba0      	ldr	r3, [pc, #640]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ff6:	4a9f      	ldr	r2, [pc, #636]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ff8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ffc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f003 0301 	and.w	r3, r3, #1
 8006006:	2b00      	cmp	r3, #0
 8006008:	d00a      	beq.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800600a:	4b9a      	ldr	r3, [pc, #616]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800600c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006010:	f023 0203 	bic.w	r2, r3, #3
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006018:	4996      	ldr	r1, [pc, #600]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800601a:	4313      	orrs	r3, r2
 800601c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f003 0302 	and.w	r3, r3, #2
 8006028:	2b00      	cmp	r3, #0
 800602a:	d00a      	beq.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800602c:	4b91      	ldr	r3, [pc, #580]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800602e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006032:	f023 020c 	bic.w	r2, r3, #12
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800603a:	498e      	ldr	r1, [pc, #568]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800603c:	4313      	orrs	r3, r2
 800603e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f003 0304 	and.w	r3, r3, #4
 800604a:	2b00      	cmp	r3, #0
 800604c:	d00a      	beq.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800604e:	4b89      	ldr	r3, [pc, #548]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006050:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006054:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800605c:	4985      	ldr	r1, [pc, #532]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800605e:	4313      	orrs	r3, r2
 8006060:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f003 0308 	and.w	r3, r3, #8
 800606c:	2b00      	cmp	r3, #0
 800606e:	d00a      	beq.n	8006086 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006070:	4b80      	ldr	r3, [pc, #512]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006076:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800607e:	497d      	ldr	r1, [pc, #500]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006080:	4313      	orrs	r3, r2
 8006082:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f003 0310 	and.w	r3, r3, #16
 800608e:	2b00      	cmp	r3, #0
 8006090:	d00a      	beq.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006092:	4b78      	ldr	r3, [pc, #480]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006094:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006098:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060a0:	4974      	ldr	r1, [pc, #464]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060a2:	4313      	orrs	r3, r2
 80060a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f003 0320 	and.w	r3, r3, #32
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d00a      	beq.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80060b4:	4b6f      	ldr	r3, [pc, #444]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060ba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060c2:	496c      	ldr	r1, [pc, #432]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060c4:	4313      	orrs	r3, r2
 80060c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d00a      	beq.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80060d6:	4b67      	ldr	r3, [pc, #412]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060dc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060e4:	4963      	ldr	r1, [pc, #396]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060e6:	4313      	orrs	r3, r2
 80060e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d00a      	beq.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80060f8:	4b5e      	ldr	r3, [pc, #376]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060fe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006106:	495b      	ldr	r1, [pc, #364]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006108:	4313      	orrs	r3, r2
 800610a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006116:	2b00      	cmp	r3, #0
 8006118:	d00a      	beq.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800611a:	4b56      	ldr	r3, [pc, #344]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800611c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006120:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006128:	4952      	ldr	r1, [pc, #328]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800612a:	4313      	orrs	r3, r2
 800612c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006138:	2b00      	cmp	r3, #0
 800613a:	d00a      	beq.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800613c:	4b4d      	ldr	r3, [pc, #308]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800613e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006142:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800614a:	494a      	ldr	r1, [pc, #296]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800614c:	4313      	orrs	r3, r2
 800614e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800615a:	2b00      	cmp	r3, #0
 800615c:	d00a      	beq.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800615e:	4b45      	ldr	r3, [pc, #276]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006160:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006164:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800616c:	4941      	ldr	r1, [pc, #260]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800616e:	4313      	orrs	r3, r2
 8006170:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800617c:	2b00      	cmp	r3, #0
 800617e:	d00a      	beq.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006180:	4b3c      	ldr	r3, [pc, #240]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006182:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006186:	f023 0203 	bic.w	r2, r3, #3
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800618e:	4939      	ldr	r1, [pc, #228]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006190:	4313      	orrs	r3, r2
 8006192:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d028      	beq.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80061a2:	4b34      	ldr	r3, [pc, #208]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061a8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061b0:	4930      	ldr	r1, [pc, #192]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061b2:	4313      	orrs	r3, r2
 80061b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80061c0:	d106      	bne.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80061c2:	4b2c      	ldr	r3, [pc, #176]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061c4:	68db      	ldr	r3, [r3, #12]
 80061c6:	4a2b      	ldr	r2, [pc, #172]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80061cc:	60d3      	str	r3, [r2, #12]
 80061ce:	e011      	b.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80061d8:	d10c      	bne.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	3304      	adds	r3, #4
 80061de:	2101      	movs	r1, #1
 80061e0:	4618      	mov	r0, r3
 80061e2:	f001 f82b 	bl	800723c <RCCEx_PLLSAI1_Config>
 80061e6:	4603      	mov	r3, r0
 80061e8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80061ea:	7cfb      	ldrb	r3, [r7, #19]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d001      	beq.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80061f0:	7cfb      	ldrb	r3, [r7, #19]
 80061f2:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d04d      	beq.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006204:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006208:	d108      	bne.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800620a:	4b1a      	ldr	r3, [pc, #104]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800620c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006210:	4a18      	ldr	r2, [pc, #96]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006212:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006216:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800621a:	e012      	b.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800621c:	4b15      	ldr	r3, [pc, #84]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800621e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006222:	4a14      	ldr	r2, [pc, #80]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006224:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006228:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800622c:	4b11      	ldr	r3, [pc, #68]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800622e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006232:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800623a:	490e      	ldr	r1, [pc, #56]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800623c:	4313      	orrs	r3, r2
 800623e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006246:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800624a:	d106      	bne.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800624c:	4b09      	ldr	r3, [pc, #36]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800624e:	68db      	ldr	r3, [r3, #12]
 8006250:	4a08      	ldr	r2, [pc, #32]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006252:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006256:	60d3      	str	r3, [r2, #12]
 8006258:	e020      	b.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800625e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006262:	d109      	bne.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006264:	4b03      	ldr	r3, [pc, #12]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006266:	68db      	ldr	r3, [r3, #12]
 8006268:	4a02      	ldr	r2, [pc, #8]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800626a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800626e:	60d3      	str	r3, [r2, #12]
 8006270:	e014      	b.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8006272:	bf00      	nop
 8006274:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800627c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006280:	d10c      	bne.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	3304      	adds	r3, #4
 8006286:	2101      	movs	r1, #1
 8006288:	4618      	mov	r0, r3
 800628a:	f000 ffd7 	bl	800723c <RCCEx_PLLSAI1_Config>
 800628e:	4603      	mov	r3, r0
 8006290:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006292:	7cfb      	ldrb	r3, [r7, #19]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d001      	beq.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8006298:	7cfb      	ldrb	r3, [r7, #19]
 800629a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d028      	beq.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80062a8:	4b4a      	ldr	r3, [pc, #296]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80062aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062b6:	4947      	ldr	r1, [pc, #284]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80062b8:	4313      	orrs	r3, r2
 80062ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80062c6:	d106      	bne.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80062c8:	4b42      	ldr	r3, [pc, #264]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80062ca:	68db      	ldr	r3, [r3, #12]
 80062cc:	4a41      	ldr	r2, [pc, #260]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80062ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80062d2:	60d3      	str	r3, [r2, #12]
 80062d4:	e011      	b.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80062de:	d10c      	bne.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	3304      	adds	r3, #4
 80062e4:	2101      	movs	r1, #1
 80062e6:	4618      	mov	r0, r3
 80062e8:	f000 ffa8 	bl	800723c <RCCEx_PLLSAI1_Config>
 80062ec:	4603      	mov	r3, r0
 80062ee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80062f0:	7cfb      	ldrb	r3, [r7, #19]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d001      	beq.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80062f6:	7cfb      	ldrb	r3, [r7, #19]
 80062f8:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006302:	2b00      	cmp	r3, #0
 8006304:	d01e      	beq.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006306:	4b33      	ldr	r3, [pc, #204]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006308:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800630c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006316:	492f      	ldr	r1, [pc, #188]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006318:	4313      	orrs	r3, r2
 800631a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006324:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006328:	d10c      	bne.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	3304      	adds	r3, #4
 800632e:	2102      	movs	r1, #2
 8006330:	4618      	mov	r0, r3
 8006332:	f000 ff83 	bl	800723c <RCCEx_PLLSAI1_Config>
 8006336:	4603      	mov	r3, r0
 8006338:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800633a:	7cfb      	ldrb	r3, [r7, #19]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d001      	beq.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8006340:	7cfb      	ldrb	r3, [r7, #19]
 8006342:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800634c:	2b00      	cmp	r3, #0
 800634e:	d00b      	beq.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006350:	4b20      	ldr	r3, [pc, #128]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006352:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006356:	f023 0204 	bic.w	r2, r3, #4
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006360:	491c      	ldr	r1, [pc, #112]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006362:	4313      	orrs	r3, r2
 8006364:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006370:	2b00      	cmp	r3, #0
 8006372:	d00b      	beq.n	800638c <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006374:	4b17      	ldr	r3, [pc, #92]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006376:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800637a:	f023 0218 	bic.w	r2, r3, #24
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006384:	4913      	ldr	r1, [pc, #76]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006386:	4313      	orrs	r3, r2
 8006388:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006394:	2b00      	cmp	r3, #0
 8006396:	d017      	beq.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006398:	4b0e      	ldr	r3, [pc, #56]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800639a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800639e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80063a8:	490a      	ldr	r1, [pc, #40]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80063aa:	4313      	orrs	r3, r2
 80063ac:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80063b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80063ba:	d105      	bne.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80063bc:	4b05      	ldr	r3, [pc, #20]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80063be:	68db      	ldr	r3, [r3, #12]
 80063c0:	4a04      	ldr	r2, [pc, #16]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80063c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80063c6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80063c8:	7cbb      	ldrb	r3, [r7, #18]
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3718      	adds	r7, #24
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}
 80063d2:	bf00      	nop
 80063d4:	40021000 	.word	0x40021000

080063d8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b088      	sub	sp, #32
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 80063e0:	2300      	movs	r3, #0
 80063e2:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80063ea:	d13e      	bne.n	800646a <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80063ec:	4bb6      	ldr	r3, [pc, #728]	; (80066c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80063ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063f6:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063fe:	d028      	beq.n	8006452 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006406:	f200 86f4 	bhi.w	80071f2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006410:	d005      	beq.n	800641e <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006418:	d00e      	beq.n	8006438 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 800641a:	f000 beea 	b.w	80071f2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800641e:	4baa      	ldr	r3, [pc, #680]	; (80066c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006420:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006424:	f003 0302 	and.w	r3, r3, #2
 8006428:	2b02      	cmp	r3, #2
 800642a:	f040 86e4 	bne.w	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        frequency = LSE_VALUE;
 800642e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006432:	61fb      	str	r3, [r7, #28]
      break;
 8006434:	f000 bedf 	b.w	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006438:	4ba3      	ldr	r3, [pc, #652]	; (80066c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800643a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800643e:	f003 0302 	and.w	r3, r3, #2
 8006442:	2b02      	cmp	r3, #2
 8006444:	f040 86d9 	bne.w	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
          frequency = LSI_VALUE;
 8006448:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800644c:	61fb      	str	r3, [r7, #28]
      break;
 800644e:	f000 bed4 	b.w	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006452:	4b9d      	ldr	r3, [pc, #628]	; (80066c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800645a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800645e:	f040 86ce 	bne.w	80071fe <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
        frequency = HSE_VALUE / 32U;
 8006462:	4b9a      	ldr	r3, [pc, #616]	; (80066cc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8006464:	61fb      	str	r3, [r7, #28]
      break;
 8006466:	f000 beca 	b.w	80071fe <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800646a:	4b97      	ldr	r3, [pc, #604]	; (80066c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800646c:	68db      	ldr	r3, [r3, #12]
 800646e:	f003 0303 	and.w	r3, r3, #3
 8006472:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	2b03      	cmp	r3, #3
 8006478:	d036      	beq.n	80064e8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	2b03      	cmp	r3, #3
 800647e:	d840      	bhi.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	2b01      	cmp	r3, #1
 8006484:	d003      	beq.n	800648e <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	2b02      	cmp	r3, #2
 800648a:	d020      	beq.n	80064ce <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 800648c:	e039      	b.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800648e:	4b8e      	ldr	r3, [pc, #568]	; (80066c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f003 0302 	and.w	r3, r3, #2
 8006496:	2b02      	cmp	r3, #2
 8006498:	d116      	bne.n	80064c8 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800649a:	4b8b      	ldr	r3, [pc, #556]	; (80066c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f003 0308 	and.w	r3, r3, #8
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d005      	beq.n	80064b2 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 80064a6:	4b88      	ldr	r3, [pc, #544]	; (80066c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	091b      	lsrs	r3, r3, #4
 80064ac:	f003 030f 	and.w	r3, r3, #15
 80064b0:	e005      	b.n	80064be <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 80064b2:	4b85      	ldr	r3, [pc, #532]	; (80066c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80064b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80064b8:	0a1b      	lsrs	r3, r3, #8
 80064ba:	f003 030f 	and.w	r3, r3, #15
 80064be:	4a84      	ldr	r2, [pc, #528]	; (80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80064c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064c4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80064c6:	e01f      	b.n	8006508 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80064c8:	2300      	movs	r3, #0
 80064ca:	61bb      	str	r3, [r7, #24]
      break;
 80064cc:	e01c      	b.n	8006508 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80064ce:	4b7e      	ldr	r3, [pc, #504]	; (80066c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064da:	d102      	bne.n	80064e2 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 80064dc:	4b7d      	ldr	r3, [pc, #500]	; (80066d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80064de:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80064e0:	e012      	b.n	8006508 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80064e2:	2300      	movs	r3, #0
 80064e4:	61bb      	str	r3, [r7, #24]
      break;
 80064e6:	e00f      	b.n	8006508 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80064e8:	4b77      	ldr	r3, [pc, #476]	; (80066c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80064f4:	d102      	bne.n	80064fc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 80064f6:	4b78      	ldr	r3, [pc, #480]	; (80066d8 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 80064f8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80064fa:	e005      	b.n	8006508 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80064fc:	2300      	movs	r3, #0
 80064fe:	61bb      	str	r3, [r7, #24]
      break;
 8006500:	e002      	b.n	8006508 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8006502:	2300      	movs	r3, #0
 8006504:	61bb      	str	r3, [r7, #24]
      break;
 8006506:	bf00      	nop
    }

    switch(PeriphClk)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800650e:	f000 8606 	beq.w	800711e <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006518:	f200 8673 	bhi.w	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006522:	f000 8469 	beq.w	8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800652c:	f200 8669 	bhi.w	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006536:	f000 8531 	beq.w	8006f9c <HAL_RCCEx_GetPeriphCLKFreq+0xbc4>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006540:	f200 865f 	bhi.w	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800654a:	f000 8187 	beq.w	800685c <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006554:	f200 8655 	bhi.w	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800655e:	f000 80cd 	beq.w	80066fc <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006568:	f200 864b 	bhi.w	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006572:	f000 8430 	beq.w	8006dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800657c:	f200 8641 	bhi.w	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006586:	f000 83e4 	beq.w	8006d52 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006590:	f200 8637 	bhi.w	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800659a:	f000 80af 	beq.w	80066fc <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065a4:	f200 862d 	bhi.w	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065ae:	f000 809d 	beq.w	80066ec <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065b8:	f200 8623 	bhi.w	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065c2:	f000 808b 	beq.w	80066dc <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065cc:	f200 8619 	bhi.w	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065d6:	f000 8554 	beq.w	8007082 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065e0:	f200 860f 	bhi.w	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065ea:	f000 8500 	beq.w	8006fee <HAL_RCCEx_GetPeriphCLKFreq+0xc16>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065f4:	f200 8605 	bhi.w	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065fe:	f000 84a1 	beq.w	8006f44 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006608:	f200 85fb 	bhi.w	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2b80      	cmp	r3, #128	; 0x80
 8006610:	f000 846c 	beq.w	8006eec <HAL_RCCEx_GetPeriphCLKFreq+0xb14>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2b80      	cmp	r3, #128	; 0x80
 8006618:	f200 85f3 	bhi.w	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2b20      	cmp	r3, #32
 8006620:	d84c      	bhi.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2b00      	cmp	r3, #0
 8006626:	f000 85ec 	beq.w	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	3b01      	subs	r3, #1
 800662e:	2b1f      	cmp	r3, #31
 8006630:	f200 85e7 	bhi.w	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006634:	a201      	add	r2, pc, #4	; (adr r2, 800663c <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8006636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800663a:	bf00      	nop
 800663c:	08006a51 	.word	0x08006a51
 8006640:	08006abf 	.word	0x08006abf
 8006644:	08007203 	.word	0x08007203
 8006648:	08006b53 	.word	0x08006b53
 800664c:	08007203 	.word	0x08007203
 8006650:	08007203 	.word	0x08007203
 8006654:	08007203 	.word	0x08007203
 8006658:	08006bcb 	.word	0x08006bcb
 800665c:	08007203 	.word	0x08007203
 8006660:	08007203 	.word	0x08007203
 8006664:	08007203 	.word	0x08007203
 8006668:	08007203 	.word	0x08007203
 800666c:	08007203 	.word	0x08007203
 8006670:	08007203 	.word	0x08007203
 8006674:	08007203 	.word	0x08007203
 8006678:	08006c4f 	.word	0x08006c4f
 800667c:	08007203 	.word	0x08007203
 8006680:	08007203 	.word	0x08007203
 8006684:	08007203 	.word	0x08007203
 8006688:	08007203 	.word	0x08007203
 800668c:	08007203 	.word	0x08007203
 8006690:	08007203 	.word	0x08007203
 8006694:	08007203 	.word	0x08007203
 8006698:	08007203 	.word	0x08007203
 800669c:	08007203 	.word	0x08007203
 80066a0:	08007203 	.word	0x08007203
 80066a4:	08007203 	.word	0x08007203
 80066a8:	08007203 	.word	0x08007203
 80066ac:	08007203 	.word	0x08007203
 80066b0:	08007203 	.word	0x08007203
 80066b4:	08007203 	.word	0x08007203
 80066b8:	08006cd1 	.word	0x08006cd1
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2b40      	cmp	r3, #64	; 0x40
 80066c0:	f000 83e8 	beq.w	8006e94 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 80066c4:	f000 bd9d 	b.w	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80066c8:	40021000 	.word	0x40021000
 80066cc:	0003d090 	.word	0x0003d090
 80066d0:	0800e314 	.word	0x0800e314
 80066d4:	00f42400 	.word	0x00f42400
 80066d8:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 80066dc:	69b9      	ldr	r1, [r7, #24]
 80066de:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80066e2:	f000 ff93 	bl	800760c <RCCEx_GetSAIxPeriphCLKFreq>
 80066e6:	61f8      	str	r0, [r7, #28]
      break;
 80066e8:	f000 bd8e 	b.w	8007208 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 80066ec:	69b9      	ldr	r1, [r7, #24]
 80066ee:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80066f2:	f000 ff8b 	bl	800760c <RCCEx_GetSAIxPeriphCLKFreq>
 80066f6:	61f8      	str	r0, [r7, #28]
      break;
 80066f8:	f000 bd86 	b.w	8007208 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80066fc:	4b9a      	ldr	r3, [pc, #616]	; (8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80066fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006702:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8006706:	60fb      	str	r3, [r7, #12]
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800670e:	d015      	beq.n	800673c <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006716:	f200 8092 	bhi.w	800683e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006720:	d029      	beq.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006728:	f200 8089 	bhi.w	800683e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d07b      	beq.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006738:	d04a      	beq.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
          break;
 800673a:	e080      	b.n	800683e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800673c:	4b8a      	ldr	r3, [pc, #552]	; (8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f003 0302 	and.w	r3, r3, #2
 8006744:	2b02      	cmp	r3, #2
 8006746:	d17d      	bne.n	8006844 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006748:	4b87      	ldr	r3, [pc, #540]	; (8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f003 0308 	and.w	r3, r3, #8
 8006750:	2b00      	cmp	r3, #0
 8006752:	d005      	beq.n	8006760 <HAL_RCCEx_GetPeriphCLKFreq+0x388>
 8006754:	4b84      	ldr	r3, [pc, #528]	; (8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	091b      	lsrs	r3, r3, #4
 800675a:	f003 030f 	and.w	r3, r3, #15
 800675e:	e005      	b.n	800676c <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 8006760:	4b81      	ldr	r3, [pc, #516]	; (8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006762:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006766:	0a1b      	lsrs	r3, r3, #8
 8006768:	f003 030f 	and.w	r3, r3, #15
 800676c:	4a7f      	ldr	r2, [pc, #508]	; (800696c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800676e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006772:	61fb      	str	r3, [r7, #28]
          break;
 8006774:	e066      	b.n	8006844 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8006776:	4b7c      	ldr	r3, [pc, #496]	; (8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800677e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006782:	d162      	bne.n	800684a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8006784:	4b78      	ldr	r3, [pc, #480]	; (8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006786:	68db      	ldr	r3, [r3, #12]
 8006788:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800678c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006790:	d15b      	bne.n	800684a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006792:	4b75      	ldr	r3, [pc, #468]	; (8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006794:	68db      	ldr	r3, [r3, #12]
 8006796:	0a1b      	lsrs	r3, r3, #8
 8006798:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800679c:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800679e:	69bb      	ldr	r3, [r7, #24]
 80067a0:	68ba      	ldr	r2, [r7, #8]
 80067a2:	fb03 f202 	mul.w	r2, r3, r2
 80067a6:	4b70      	ldr	r3, [pc, #448]	; (8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80067a8:	68db      	ldr	r3, [r3, #12]
 80067aa:	091b      	lsrs	r3, r3, #4
 80067ac:	f003 030f 	and.w	r3, r3, #15
 80067b0:	3301      	adds	r3, #1
 80067b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80067b6:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80067b8:	4b6b      	ldr	r3, [pc, #428]	; (8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80067ba:	68db      	ldr	r3, [r3, #12]
 80067bc:	0d5b      	lsrs	r3, r3, #21
 80067be:	f003 0303 	and.w	r3, r3, #3
 80067c2:	3301      	adds	r3, #1
 80067c4:	005b      	lsls	r3, r3, #1
 80067c6:	69ba      	ldr	r2, [r7, #24]
 80067c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80067cc:	61fb      	str	r3, [r7, #28]
          break;
 80067ce:	e03c      	b.n	800684a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 80067d0:	4b65      	ldr	r3, [pc, #404]	; (8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80067d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80067dc:	d138      	bne.n	8006850 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 80067de:	4b62      	ldr	r3, [pc, #392]	; (8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80067e0:	691b      	ldr	r3, [r3, #16]
 80067e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80067e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067ea:	d131      	bne.n	8006850 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80067ec:	4b5e      	ldr	r3, [pc, #376]	; (8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80067ee:	691b      	ldr	r3, [r3, #16]
 80067f0:	0a1b      	lsrs	r3, r3, #8
 80067f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067f6:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80067f8:	69bb      	ldr	r3, [r7, #24]
 80067fa:	68ba      	ldr	r2, [r7, #8]
 80067fc:	fb03 f202 	mul.w	r2, r3, r2
 8006800:	4b59      	ldr	r3, [pc, #356]	; (8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006802:	691b      	ldr	r3, [r3, #16]
 8006804:	091b      	lsrs	r3, r3, #4
 8006806:	f003 030f 	and.w	r3, r3, #15
 800680a:	3301      	adds	r3, #1
 800680c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006810:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8006812:	4b55      	ldr	r3, [pc, #340]	; (8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006814:	691b      	ldr	r3, [r3, #16]
 8006816:	0d5b      	lsrs	r3, r3, #21
 8006818:	f003 0303 	and.w	r3, r3, #3
 800681c:	3301      	adds	r3, #1
 800681e:	005b      	lsls	r3, r3, #1
 8006820:	69ba      	ldr	r2, [r7, #24]
 8006822:	fbb2 f3f3 	udiv	r3, r2, r3
 8006826:	61fb      	str	r3, [r7, #28]
          break;
 8006828:	e012      	b.n	8006850 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 800682a:	4b4f      	ldr	r3, [pc, #316]	; (8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800682c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006830:	f003 0302 	and.w	r3, r3, #2
 8006834:	2b02      	cmp	r3, #2
 8006836:	d10e      	bne.n	8006856 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = HSI48_VALUE;
 8006838:	4b4d      	ldr	r3, [pc, #308]	; (8006970 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800683a:	61fb      	str	r3, [r7, #28]
          break;
 800683c:	e00b      	b.n	8006856 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 800683e:	bf00      	nop
 8006840:	f000 bce2 	b.w	8007208 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006844:	bf00      	nop
 8006846:	f000 bcdf 	b.w	8007208 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800684a:	bf00      	nop
 800684c:	f000 bcdc 	b.w	8007208 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006850:	bf00      	nop
 8006852:	f000 bcd9 	b.w	8007208 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006856:	bf00      	nop
        break;
 8006858:	f000 bcd6 	b.w	8007208 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 800685c:	4b42      	ldr	r3, [pc, #264]	; (8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800685e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006862:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006866:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800686a:	d13d      	bne.n	80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800686c:	4b3e      	ldr	r3, [pc, #248]	; (8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006874:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006878:	f040 84c5 	bne.w	8007206 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 800687c:	4b3a      	ldr	r3, [pc, #232]	; (8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800687e:	68db      	ldr	r3, [r3, #12]
 8006880:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006884:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006888:	f040 84bd 	bne.w	8007206 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800688c:	4b36      	ldr	r3, [pc, #216]	; (8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800688e:	68db      	ldr	r3, [r3, #12]
 8006890:	0a1b      	lsrs	r3, r3, #8
 8006892:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006896:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006898:	69bb      	ldr	r3, [r7, #24]
 800689a:	68ba      	ldr	r2, [r7, #8]
 800689c:	fb03 f202 	mul.w	r2, r3, r2
 80068a0:	4b31      	ldr	r3, [pc, #196]	; (8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80068a2:	68db      	ldr	r3, [r3, #12]
 80068a4:	091b      	lsrs	r3, r3, #4
 80068a6:	f003 030f 	and.w	r3, r3, #15
 80068aa:	3301      	adds	r3, #1
 80068ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80068b0:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 80068b2:	4b2d      	ldr	r3, [pc, #180]	; (8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80068b4:	68db      	ldr	r3, [r3, #12]
 80068b6:	0edb      	lsrs	r3, r3, #27
 80068b8:	f003 031f 	and.w	r3, r3, #31
 80068bc:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d10a      	bne.n	80068da <HAL_RCCEx_GetPeriphCLKFreq+0x502>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80068c4:	4b28      	ldr	r3, [pc, #160]	; (8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80068c6:	68db      	ldr	r3, [r3, #12]
 80068c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d002      	beq.n	80068d6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 17U;
 80068d0:	2311      	movs	r3, #17
 80068d2:	617b      	str	r3, [r7, #20]
 80068d4:	e001      	b.n	80068da <HAL_RCCEx_GetPeriphCLKFreq+0x502>
                pllp = 7U;
 80068d6:	2307      	movs	r3, #7
 80068d8:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 80068da:	69ba      	ldr	r2, [r7, #24]
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	fbb2 f3f3 	udiv	r3, r2, r3
 80068e2:	61fb      	str	r3, [r7, #28]
      break;
 80068e4:	f000 bc8f 	b.w	8007206 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80068e8:	4b1f      	ldr	r3, [pc, #124]	; (8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80068ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068ee:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80068f2:	60fb      	str	r3, [r7, #12]
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80068fa:	d016      	beq.n	800692a <HAL_RCCEx_GetPeriphCLKFreq+0x552>
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006902:	f200 809b 	bhi.w	8006a3c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800690c:	d032      	beq.n	8006974 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006914:	f200 8092 	bhi.w	8006a3c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2b00      	cmp	r3, #0
 800691c:	f000 8084 	beq.w	8006a28 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006926:	d052      	beq.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          break;
 8006928:	e088      	b.n	8006a3c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800692a:	4b0f      	ldr	r3, [pc, #60]	; (8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f003 0302 	and.w	r3, r3, #2
 8006932:	2b02      	cmp	r3, #2
 8006934:	f040 8084 	bne.w	8006a40 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006938:	4b0b      	ldr	r3, [pc, #44]	; (8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f003 0308 	and.w	r3, r3, #8
 8006940:	2b00      	cmp	r3, #0
 8006942:	d005      	beq.n	8006950 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8006944:	4b08      	ldr	r3, [pc, #32]	; (8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	091b      	lsrs	r3, r3, #4
 800694a:	f003 030f 	and.w	r3, r3, #15
 800694e:	e005      	b.n	800695c <HAL_RCCEx_GetPeriphCLKFreq+0x584>
 8006950:	4b05      	ldr	r3, [pc, #20]	; (8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006952:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006956:	0a1b      	lsrs	r3, r3, #8
 8006958:	f003 030f 	and.w	r3, r3, #15
 800695c:	4a03      	ldr	r2, [pc, #12]	; (800696c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800695e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006962:	61fb      	str	r3, [r7, #28]
          break;
 8006964:	e06c      	b.n	8006a40 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 8006966:	bf00      	nop
 8006968:	40021000 	.word	0x40021000
 800696c:	0800e314 	.word	0x0800e314
 8006970:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8006974:	4ba5      	ldr	r3, [pc, #660]	; (8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800697c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006980:	d160      	bne.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8006982:	4ba2      	ldr	r3, [pc, #648]	; (8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006984:	68db      	ldr	r3, [r3, #12]
 8006986:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800698a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800698e:	d159      	bne.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006990:	4b9e      	ldr	r3, [pc, #632]	; (8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006992:	68db      	ldr	r3, [r3, #12]
 8006994:	0a1b      	lsrs	r3, r3, #8
 8006996:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800699a:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800699c:	69bb      	ldr	r3, [r7, #24]
 800699e:	68ba      	ldr	r2, [r7, #8]
 80069a0:	fb03 f202 	mul.w	r2, r3, r2
 80069a4:	4b99      	ldr	r3, [pc, #612]	; (8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80069a6:	68db      	ldr	r3, [r3, #12]
 80069a8:	091b      	lsrs	r3, r3, #4
 80069aa:	f003 030f 	and.w	r3, r3, #15
 80069ae:	3301      	adds	r3, #1
 80069b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80069b4:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80069b6:	4b95      	ldr	r3, [pc, #596]	; (8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80069b8:	68db      	ldr	r3, [r3, #12]
 80069ba:	0d5b      	lsrs	r3, r3, #21
 80069bc:	f003 0303 	and.w	r3, r3, #3
 80069c0:	3301      	adds	r3, #1
 80069c2:	005b      	lsls	r3, r3, #1
 80069c4:	69ba      	ldr	r2, [r7, #24]
 80069c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80069ca:	61fb      	str	r3, [r7, #28]
          break;
 80069cc:	e03a      	b.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 80069ce:	4b8f      	ldr	r3, [pc, #572]	; (8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80069d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80069da:	d135      	bne.n	8006a48 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 80069dc:	4b8b      	ldr	r3, [pc, #556]	; (8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80069de:	691b      	ldr	r3, [r3, #16]
 80069e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80069e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069e8:	d12e      	bne.n	8006a48 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80069ea:	4b88      	ldr	r3, [pc, #544]	; (8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80069ec:	691b      	ldr	r3, [r3, #16]
 80069ee:	0a1b      	lsrs	r3, r3, #8
 80069f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069f4:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80069f6:	69bb      	ldr	r3, [r7, #24]
 80069f8:	68ba      	ldr	r2, [r7, #8]
 80069fa:	fb03 f202 	mul.w	r2, r3, r2
 80069fe:	4b83      	ldr	r3, [pc, #524]	; (8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006a00:	691b      	ldr	r3, [r3, #16]
 8006a02:	091b      	lsrs	r3, r3, #4
 8006a04:	f003 030f 	and.w	r3, r3, #15
 8006a08:	3301      	adds	r3, #1
 8006a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a0e:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8006a10:	4b7e      	ldr	r3, [pc, #504]	; (8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006a12:	691b      	ldr	r3, [r3, #16]
 8006a14:	0d5b      	lsrs	r3, r3, #21
 8006a16:	f003 0303 	and.w	r3, r3, #3
 8006a1a:	3301      	adds	r3, #1
 8006a1c:	005b      	lsls	r3, r3, #1
 8006a1e:	69ba      	ldr	r2, [r7, #24]
 8006a20:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a24:	61fb      	str	r3, [r7, #28]
          break;
 8006a26:	e00f      	b.n	8006a48 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8006a28:	4b78      	ldr	r3, [pc, #480]	; (8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006a2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006a2e:	f003 0302 	and.w	r3, r3, #2
 8006a32:	2b02      	cmp	r3, #2
 8006a34:	d10a      	bne.n	8006a4c <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            frequency = HSI48_VALUE;
 8006a36:	4b76      	ldr	r3, [pc, #472]	; (8006c10 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006a38:	61fb      	str	r3, [r7, #28]
          break;
 8006a3a:	e007      	b.n	8006a4c <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          break;
 8006a3c:	bf00      	nop
 8006a3e:	e3e2      	b.n	8007206 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006a40:	bf00      	nop
 8006a42:	e3e0      	b.n	8007206 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006a44:	bf00      	nop
 8006a46:	e3de      	b.n	8007206 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006a48:	bf00      	nop
 8006a4a:	e3dc      	b.n	8007206 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006a4c:	bf00      	nop
      break;
 8006a4e:	e3da      	b.n	8007206 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006a50:	4b6e      	ldr	r3, [pc, #440]	; (8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a56:	f003 0303 	and.w	r3, r3, #3
 8006a5a:	60fb      	str	r3, [r7, #12]
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2b03      	cmp	r3, #3
 8006a60:	d827      	bhi.n	8006ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8006a62:	a201      	add	r2, pc, #4	; (adr r2, 8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0x690>)
 8006a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a68:	08006a79 	.word	0x08006a79
 8006a6c:	08006a81 	.word	0x08006a81
 8006a70:	08006a89 	.word	0x08006a89
 8006a74:	08006a9d 	.word	0x08006a9d
          frequency = HAL_RCC_GetPCLK2Freq();
 8006a78:	f7ff f8a8 	bl	8005bcc <HAL_RCC_GetPCLK2Freq>
 8006a7c:	61f8      	str	r0, [r7, #28]
          break;
 8006a7e:	e01d      	b.n	8006abc <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          frequency = HAL_RCC_GetSysClockFreq();
 8006a80:	f7fe fff6 	bl	8005a70 <HAL_RCC_GetSysClockFreq>
 8006a84:	61f8      	str	r0, [r7, #28]
          break;
 8006a86:	e019      	b.n	8006abc <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006a88:	4b60      	ldr	r3, [pc, #384]	; (8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a94:	d10f      	bne.n	8006ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = HSI_VALUE;
 8006a96:	4b5f      	ldr	r3, [pc, #380]	; (8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006a98:	61fb      	str	r3, [r7, #28]
          break;
 8006a9a:	e00c      	b.n	8006ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006a9c:	4b5b      	ldr	r3, [pc, #364]	; (8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006aa2:	f003 0302 	and.w	r3, r3, #2
 8006aa6:	2b02      	cmp	r3, #2
 8006aa8:	d107      	bne.n	8006aba <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
            frequency = LSE_VALUE;
 8006aaa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006aae:	61fb      	str	r3, [r7, #28]
          break;
 8006ab0:	e003      	b.n	8006aba <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
          break;
 8006ab2:	bf00      	nop
 8006ab4:	e3a8      	b.n	8007208 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006ab6:	bf00      	nop
 8006ab8:	e3a6      	b.n	8007208 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006aba:	bf00      	nop
        break;
 8006abc:	e3a4      	b.n	8007208 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8006abe:	4b53      	ldr	r3, [pc, #332]	; (8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006ac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ac4:	f003 030c 	and.w	r3, r3, #12
 8006ac8:	60fb      	str	r3, [r7, #12]
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	2b0c      	cmp	r3, #12
 8006ace:	d83a      	bhi.n	8006b46 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8006ad0:	a201      	add	r2, pc, #4	; (adr r2, 8006ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x700>)
 8006ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ad6:	bf00      	nop
 8006ad8:	08006b0d 	.word	0x08006b0d
 8006adc:	08006b47 	.word	0x08006b47
 8006ae0:	08006b47 	.word	0x08006b47
 8006ae4:	08006b47 	.word	0x08006b47
 8006ae8:	08006b15 	.word	0x08006b15
 8006aec:	08006b47 	.word	0x08006b47
 8006af0:	08006b47 	.word	0x08006b47
 8006af4:	08006b47 	.word	0x08006b47
 8006af8:	08006b1d 	.word	0x08006b1d
 8006afc:	08006b47 	.word	0x08006b47
 8006b00:	08006b47 	.word	0x08006b47
 8006b04:	08006b47 	.word	0x08006b47
 8006b08:	08006b31 	.word	0x08006b31
          frequency = HAL_RCC_GetPCLK1Freq();
 8006b0c:	f7ff f848 	bl	8005ba0 <HAL_RCC_GetPCLK1Freq>
 8006b10:	61f8      	str	r0, [r7, #28]
          break;
 8006b12:	e01d      	b.n	8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = HAL_RCC_GetSysClockFreq();
 8006b14:	f7fe ffac 	bl	8005a70 <HAL_RCC_GetSysClockFreq>
 8006b18:	61f8      	str	r0, [r7, #28]
          break;
 8006b1a:	e019      	b.n	8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006b1c:	4b3b      	ldr	r3, [pc, #236]	; (8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b28:	d10f      	bne.n	8006b4a <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = HSI_VALUE;
 8006b2a:	4b3a      	ldr	r3, [pc, #232]	; (8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006b2c:	61fb      	str	r3, [r7, #28]
          break;
 8006b2e:	e00c      	b.n	8006b4a <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006b30:	4b36      	ldr	r3, [pc, #216]	; (8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b36:	f003 0302 	and.w	r3, r3, #2
 8006b3a:	2b02      	cmp	r3, #2
 8006b3c:	d107      	bne.n	8006b4e <HAL_RCCEx_GetPeriphCLKFreq+0x776>
            frequency = LSE_VALUE;
 8006b3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b42:	61fb      	str	r3, [r7, #28]
          break;
 8006b44:	e003      	b.n	8006b4e <HAL_RCCEx_GetPeriphCLKFreq+0x776>
          break;
 8006b46:	bf00      	nop
 8006b48:	e35e      	b.n	8007208 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006b4a:	bf00      	nop
 8006b4c:	e35c      	b.n	8007208 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006b4e:	bf00      	nop
        break;
 8006b50:	e35a      	b.n	8007208 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006b52:	4b2e      	ldr	r3, [pc, #184]	; (8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b58:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006b5c:	60fb      	str	r3, [r7, #12]
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	2b30      	cmp	r3, #48	; 0x30
 8006b62:	d021      	beq.n	8006ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2b30      	cmp	r3, #48	; 0x30
 8006b68:	d829      	bhi.n	8006bbe <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2b20      	cmp	r3, #32
 8006b6e:	d011      	beq.n	8006b94 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	2b20      	cmp	r3, #32
 8006b74:	d823      	bhi.n	8006bbe <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d003      	beq.n	8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2b10      	cmp	r3, #16
 8006b80:	d004      	beq.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
          break;
 8006b82:	e01c      	b.n	8006bbe <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006b84:	f7ff f80c 	bl	8005ba0 <HAL_RCC_GetPCLK1Freq>
 8006b88:	61f8      	str	r0, [r7, #28]
          break;
 8006b8a:	e01d      	b.n	8006bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          frequency = HAL_RCC_GetSysClockFreq();
 8006b8c:	f7fe ff70 	bl	8005a70 <HAL_RCC_GetSysClockFreq>
 8006b90:	61f8      	str	r0, [r7, #28]
          break;
 8006b92:	e019      	b.n	8006bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006b94:	4b1d      	ldr	r3, [pc, #116]	; (8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ba0:	d10f      	bne.n	8006bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = HSI_VALUE;
 8006ba2:	4b1c      	ldr	r3, [pc, #112]	; (8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006ba4:	61fb      	str	r3, [r7, #28]
          break;
 8006ba6:	e00c      	b.n	8006bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006ba8:	4b18      	ldr	r3, [pc, #96]	; (8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bae:	f003 0302 	and.w	r3, r3, #2
 8006bb2:	2b02      	cmp	r3, #2
 8006bb4:	d107      	bne.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
            frequency = LSE_VALUE;
 8006bb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006bba:	61fb      	str	r3, [r7, #28]
          break;
 8006bbc:	e003      	b.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
          break;
 8006bbe:	bf00      	nop
 8006bc0:	e322      	b.n	8007208 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006bc2:	bf00      	nop
 8006bc4:	e320      	b.n	8007208 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006bc6:	bf00      	nop
        break;
 8006bc8:	e31e      	b.n	8007208 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8006bca:	4b10      	ldr	r3, [pc, #64]	; (8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bd0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006bd4:	60fb      	str	r3, [r7, #12]
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2bc0      	cmp	r3, #192	; 0xc0
 8006bda:	d027      	beq.n	8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0x854>
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	2bc0      	cmp	r3, #192	; 0xc0
 8006be0:	d82f      	bhi.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2b80      	cmp	r3, #128	; 0x80
 8006be6:	d017      	beq.n	8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2b80      	cmp	r3, #128	; 0x80
 8006bec:	d829      	bhi.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d003      	beq.n	8006bfc <HAL_RCCEx_GetPeriphCLKFreq+0x824>
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	2b40      	cmp	r3, #64	; 0x40
 8006bf8:	d004      	beq.n	8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
          break;
 8006bfa:	e022      	b.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006bfc:	f7fe ffd0 	bl	8005ba0 <HAL_RCC_GetPCLK1Freq>
 8006c00:	61f8      	str	r0, [r7, #28]
          break;
 8006c02:	e023      	b.n	8006c4c <HAL_RCCEx_GetPeriphCLKFreq+0x874>
          frequency = HAL_RCC_GetSysClockFreq();
 8006c04:	f7fe ff34 	bl	8005a70 <HAL_RCC_GetSysClockFreq>
 8006c08:	61f8      	str	r0, [r7, #28]
          break;
 8006c0a:	e01f      	b.n	8006c4c <HAL_RCCEx_GetPeriphCLKFreq+0x874>
 8006c0c:	40021000 	.word	0x40021000
 8006c10:	02dc6c00 	.word	0x02dc6c00
 8006c14:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006c18:	4b9b      	ldr	r3, [pc, #620]	; (8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c24:	d10f      	bne.n	8006c46 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = HSI_VALUE;
 8006c26:	4b99      	ldr	r3, [pc, #612]	; (8006e8c <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8006c28:	61fb      	str	r3, [r7, #28]
          break;
 8006c2a:	e00c      	b.n	8006c46 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006c2c:	4b96      	ldr	r3, [pc, #600]	; (8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c32:	f003 0302 	and.w	r3, r3, #2
 8006c36:	2b02      	cmp	r3, #2
 8006c38:	d107      	bne.n	8006c4a <HAL_RCCEx_GetPeriphCLKFreq+0x872>
            frequency = LSE_VALUE;
 8006c3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c3e:	61fb      	str	r3, [r7, #28]
          break;
 8006c40:	e003      	b.n	8006c4a <HAL_RCCEx_GetPeriphCLKFreq+0x872>
          break;
 8006c42:	bf00      	nop
 8006c44:	e2e0      	b.n	8007208 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006c46:	bf00      	nop
 8006c48:	e2de      	b.n	8007208 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006c4a:	bf00      	nop
        break;
 8006c4c:	e2dc      	b.n	8007208 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8006c4e:	4b8e      	ldr	r3, [pc, #568]	; (8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c58:	60fb      	str	r3, [r7, #12]
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c60:	d025      	beq.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c68:	d82c      	bhi.n	8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c70:	d013      	beq.n	8006c9a <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c78:	d824      	bhi.n	8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d004      	beq.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c86:	d004      	beq.n	8006c92 <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 8006c88:	e01c      	b.n	8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006c8a:	f7fe ff89 	bl	8005ba0 <HAL_RCC_GetPCLK1Freq>
 8006c8e:	61f8      	str	r0, [r7, #28]
          break;
 8006c90:	e01d      	b.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = HAL_RCC_GetSysClockFreq();
 8006c92:	f7fe feed 	bl	8005a70 <HAL_RCC_GetSysClockFreq>
 8006c96:	61f8      	str	r0, [r7, #28]
          break;
 8006c98:	e019      	b.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006c9a:	4b7b      	ldr	r3, [pc, #492]	; (8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ca2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ca6:	d10f      	bne.n	8006cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = HSI_VALUE;
 8006ca8:	4b78      	ldr	r3, [pc, #480]	; (8006e8c <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8006caa:	61fb      	str	r3, [r7, #28]
          break;
 8006cac:	e00c      	b.n	8006cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006cae:	4b76      	ldr	r3, [pc, #472]	; (8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cb4:	f003 0302 	and.w	r3, r3, #2
 8006cb8:	2b02      	cmp	r3, #2
 8006cba:	d107      	bne.n	8006ccc <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
            frequency = LSE_VALUE;
 8006cbc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cc0:	61fb      	str	r3, [r7, #28]
          break;
 8006cc2:	e003      	b.n	8006ccc <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
          break;
 8006cc4:	bf00      	nop
 8006cc6:	e29f      	b.n	8007208 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006cc8:	bf00      	nop
 8006cca:	e29d      	b.n	8007208 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006ccc:	bf00      	nop
        break;
 8006cce:	e29b      	b.n	8007208 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006cd0:	4b6d      	ldr	r3, [pc, #436]	; (8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cd6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006cda:	60fb      	str	r3, [r7, #12]
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006ce2:	d025      	beq.n	8006d30 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006cea:	d82c      	bhi.n	8006d46 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cf2:	d013      	beq.n	8006d1c <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cfa:	d824      	bhi.n	8006d46 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d004      	beq.n	8006d0c <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d08:	d004      	beq.n	8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
          break;
 8006d0a:	e01c      	b.n	8006d46 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006d0c:	f7fe ff48 	bl	8005ba0 <HAL_RCC_GetPCLK1Freq>
 8006d10:	61f8      	str	r0, [r7, #28]
          break;
 8006d12:	e01d      	b.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = HAL_RCC_GetSysClockFreq();
 8006d14:	f7fe feac 	bl	8005a70 <HAL_RCC_GetSysClockFreq>
 8006d18:	61f8      	str	r0, [r7, #28]
          break;
 8006d1a:	e019      	b.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006d1c:	4b5a      	ldr	r3, [pc, #360]	; (8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d28:	d10f      	bne.n	8006d4a <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = HSI_VALUE;
 8006d2a:	4b58      	ldr	r3, [pc, #352]	; (8006e8c <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8006d2c:	61fb      	str	r3, [r7, #28]
          break;
 8006d2e:	e00c      	b.n	8006d4a <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006d30:	4b55      	ldr	r3, [pc, #340]	; (8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d36:	f003 0302 	and.w	r3, r3, #2
 8006d3a:	2b02      	cmp	r3, #2
 8006d3c:	d107      	bne.n	8006d4e <HAL_RCCEx_GetPeriphCLKFreq+0x976>
            frequency = LSE_VALUE;
 8006d3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d42:	61fb      	str	r3, [r7, #28]
          break;
 8006d44:	e003      	b.n	8006d4e <HAL_RCCEx_GetPeriphCLKFreq+0x976>
          break;
 8006d46:	bf00      	nop
 8006d48:	e25e      	b.n	8007208 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006d4a:	bf00      	nop
 8006d4c:	e25c      	b.n	8007208 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006d4e:	bf00      	nop
        break;
 8006d50:	e25a      	b.n	8007208 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006d52:	4b4d      	ldr	r3, [pc, #308]	; (8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d58:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006d5c:	60fb      	str	r3, [r7, #12]
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d64:	d007      	beq.n	8006d76 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006d6c:	d12f      	bne.n	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          frequency = HAL_RCC_GetSysClockFreq();
 8006d6e:	f7fe fe7f 	bl	8005a70 <HAL_RCC_GetSysClockFreq>
 8006d72:	61f8      	str	r0, [r7, #28]
          break;
 8006d74:	e02e      	b.n	8006dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8006d76:	4b44      	ldr	r3, [pc, #272]	; (8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d82:	d126      	bne.n	8006dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 8006d84:	4b40      	ldr	r3, [pc, #256]	; (8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006d86:	691b      	ldr	r3, [r3, #16]
 8006d88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d020      	beq.n	8006dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006d90:	4b3d      	ldr	r3, [pc, #244]	; (8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006d92:	691b      	ldr	r3, [r3, #16]
 8006d94:	0a1b      	lsrs	r3, r3, #8
 8006d96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d9a:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8006d9c:	69bb      	ldr	r3, [r7, #24]
 8006d9e:	68ba      	ldr	r2, [r7, #8]
 8006da0:	fb03 f202 	mul.w	r2, r3, r2
 8006da4:	4b38      	ldr	r3, [pc, #224]	; (8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006da6:	691b      	ldr	r3, [r3, #16]
 8006da8:	091b      	lsrs	r3, r3, #4
 8006daa:	f003 030f 	and.w	r3, r3, #15
 8006dae:	3301      	adds	r3, #1
 8006db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006db4:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8006db6:	4b34      	ldr	r3, [pc, #208]	; (8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006db8:	691b      	ldr	r3, [r3, #16]
 8006dba:	0e5b      	lsrs	r3, r3, #25
 8006dbc:	f003 0303 	and.w	r3, r3, #3
 8006dc0:	3301      	adds	r3, #1
 8006dc2:	005b      	lsls	r3, r3, #1
 8006dc4:	69ba      	ldr	r2, [r7, #24]
 8006dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dca:	61fb      	str	r3, [r7, #28]
          break;
 8006dcc:	e001      	b.n	8006dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
          break;
 8006dce:	bf00      	nop
 8006dd0:	e21a      	b.n	8007208 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006dd2:	bf00      	nop
        break;
 8006dd4:	e218      	b.n	8007208 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8006dd6:	4b2c      	ldr	r3, [pc, #176]	; (8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006dd8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006ddc:	f003 0304 	and.w	r3, r3, #4
 8006de0:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d103      	bne.n	8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetPCLK2Freq();
 8006de8:	f7fe fef0 	bl	8005bcc <HAL_RCC_GetPCLK2Freq>
 8006dec:	61f8      	str	r0, [r7, #28]
        break;
 8006dee:	e20b      	b.n	8007208 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          frequency = HAL_RCC_GetSysClockFreq();
 8006df0:	f7fe fe3e 	bl	8005a70 <HAL_RCC_GetSysClockFreq>
 8006df4:	61f8      	str	r0, [r7, #28]
        break;
 8006df6:	e207      	b.n	8007208 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 8006df8:	4b23      	ldr	r3, [pc, #140]	; (8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006dfa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006dfe:	f003 0318 	and.w	r3, r3, #24
 8006e02:	60fb      	str	r3, [r7, #12]
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2b10      	cmp	r3, #16
 8006e08:	d010      	beq.n	8006e2c <HAL_RCCEx_GetPeriphCLKFreq+0xa54>
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	2b10      	cmp	r3, #16
 8006e0e:	d834      	bhi.n	8006e7a <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d003      	beq.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2b08      	cmp	r3, #8
 8006e1a:	d024      	beq.n	8006e66 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
          break;
 8006e1c:	e02d      	b.n	8006e7a <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8006e1e:	69b9      	ldr	r1, [r7, #24]
 8006e20:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006e24:	f000 fbf2 	bl	800760c <RCCEx_GetSAIxPeriphCLKFreq>
 8006e28:	61f8      	str	r0, [r7, #28]
          break;
 8006e2a:	e02b      	b.n	8006e84 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006e2c:	4b16      	ldr	r3, [pc, #88]	; (8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f003 0302 	and.w	r3, r3, #2
 8006e34:	2b02      	cmp	r3, #2
 8006e36:	d122      	bne.n	8006e7e <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006e38:	4b13      	ldr	r3, [pc, #76]	; (8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f003 0308 	and.w	r3, r3, #8
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d005      	beq.n	8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 8006e44:	4b10      	ldr	r3, [pc, #64]	; (8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	091b      	lsrs	r3, r3, #4
 8006e4a:	f003 030f 	and.w	r3, r3, #15
 8006e4e:	e005      	b.n	8006e5c <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
 8006e50:	4b0d      	ldr	r3, [pc, #52]	; (8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006e52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e56:	0a1b      	lsrs	r3, r3, #8
 8006e58:	f003 030f 	and.w	r3, r3, #15
 8006e5c:	4a0c      	ldr	r2, [pc, #48]	; (8006e90 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006e5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e62:	61fb      	str	r3, [r7, #28]
          break;
 8006e64:	e00b      	b.n	8006e7e <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006e66:	4b08      	ldr	r3, [pc, #32]	; (8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e72:	d106      	bne.n	8006e82 <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
            frequency = HSI_VALUE;
 8006e74:	4b05      	ldr	r3, [pc, #20]	; (8006e8c <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8006e76:	61fb      	str	r3, [r7, #28]
          break;
 8006e78:	e003      	b.n	8006e82 <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
          break;
 8006e7a:	bf00      	nop
 8006e7c:	e1c4      	b.n	8007208 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006e7e:	bf00      	nop
 8006e80:	e1c2      	b.n	8007208 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006e82:	bf00      	nop
        break;
 8006e84:	e1c0      	b.n	8007208 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 8006e86:	bf00      	nop
 8006e88:	40021000 	.word	0x40021000
 8006e8c:	00f42400 	.word	0x00f42400
 8006e90:	0800e314 	.word	0x0800e314
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006e94:	4b96      	ldr	r3, [pc, #600]	; (80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e9a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006e9e:	60fb      	str	r3, [r7, #12]
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ea6:	d013      	beq.n	8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006eae:	d819      	bhi.n	8006ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d004      	beq.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ebc:	d004      	beq.n	8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>
          break;
 8006ebe:	e011      	b.n	8006ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006ec0:	f7fe fe6e 	bl	8005ba0 <HAL_RCC_GetPCLK1Freq>
 8006ec4:	61f8      	str	r0, [r7, #28]
          break;
 8006ec6:	e010      	b.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          frequency = HAL_RCC_GetSysClockFreq();
 8006ec8:	f7fe fdd2 	bl	8005a70 <HAL_RCC_GetSysClockFreq>
 8006ecc:	61f8      	str	r0, [r7, #28]
          break;
 8006ece:	e00c      	b.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006ed0:	4b87      	ldr	r3, [pc, #540]	; (80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ed8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006edc:	d104      	bne.n	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
            frequency = HSI_VALUE;
 8006ede:	4b85      	ldr	r3, [pc, #532]	; (80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8006ee0:	61fb      	str	r3, [r7, #28]
          break;
 8006ee2:	e001      	b.n	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
          break;
 8006ee4:	bf00      	nop
 8006ee6:	e18f      	b.n	8007208 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006ee8:	bf00      	nop
        break;
 8006eea:	e18d      	b.n	8007208 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006eec:	4b80      	ldr	r3, [pc, #512]	; (80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ef2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006ef6:	60fb      	str	r3, [r7, #12]
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006efe:	d013      	beq.n	8006f28 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f06:	d819      	bhi.n	8006f3c <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d004      	beq.n	8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f14:	d004      	beq.n	8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          break;
 8006f16:	e011      	b.n	8006f3c <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006f18:	f7fe fe42 	bl	8005ba0 <HAL_RCC_GetPCLK1Freq>
 8006f1c:	61f8      	str	r0, [r7, #28]
          break;
 8006f1e:	e010      	b.n	8006f42 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = HAL_RCC_GetSysClockFreq();
 8006f20:	f7fe fda6 	bl	8005a70 <HAL_RCC_GetSysClockFreq>
 8006f24:	61f8      	str	r0, [r7, #28]
          break;
 8006f26:	e00c      	b.n	8006f42 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006f28:	4b71      	ldr	r3, [pc, #452]	; (80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f34:	d104      	bne.n	8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
            frequency = HSI_VALUE;
 8006f36:	4b6f      	ldr	r3, [pc, #444]	; (80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8006f38:	61fb      	str	r3, [r7, #28]
          break;
 8006f3a:	e001      	b.n	8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          break;
 8006f3c:	bf00      	nop
 8006f3e:	e163      	b.n	8007208 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006f40:	bf00      	nop
        break;
 8006f42:	e161      	b.n	8007208 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8006f44:	4b6a      	ldr	r3, [pc, #424]	; (80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f4a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006f4e:	60fb      	str	r3, [r7, #12]
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f56:	d013      	beq.n	8006f80 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f5e:	d819      	bhi.n	8006f94 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d004      	beq.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0xb98>
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f6c:	d004      	beq.n	8006f78 <HAL_RCCEx_GetPeriphCLKFreq+0xba0>
          break;
 8006f6e:	e011      	b.n	8006f94 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006f70:	f7fe fe16 	bl	8005ba0 <HAL_RCC_GetPCLK1Freq>
 8006f74:	61f8      	str	r0, [r7, #28]
          break;
 8006f76:	e010      	b.n	8006f9a <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          frequency = HAL_RCC_GetSysClockFreq();
 8006f78:	f7fe fd7a 	bl	8005a70 <HAL_RCC_GetSysClockFreq>
 8006f7c:	61f8      	str	r0, [r7, #28]
          break;
 8006f7e:	e00c      	b.n	8006f9a <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006f80:	4b5b      	ldr	r3, [pc, #364]	; (80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f8c:	d104      	bne.n	8006f98 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
            frequency = HSI_VALUE;
 8006f8e:	4b59      	ldr	r3, [pc, #356]	; (80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8006f90:	61fb      	str	r3, [r7, #28]
          break;
 8006f92:	e001      	b.n	8006f98 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
          break;
 8006f94:	bf00      	nop
 8006f96:	e137      	b.n	8007208 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006f98:	bf00      	nop
        break;
 8006f9a:	e135      	b.n	8007208 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8006f9c:	4b54      	ldr	r3, [pc, #336]	; (80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006f9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006fa2:	f003 0303 	and.w	r3, r3, #3
 8006fa6:	60fb      	str	r3, [r7, #12]
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	2b02      	cmp	r3, #2
 8006fac:	d011      	beq.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2b02      	cmp	r3, #2
 8006fb2:	d818      	bhi.n	8006fe6 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d003      	beq.n	8006fc2 <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	d004      	beq.n	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
          break;
 8006fc0:	e011      	b.n	8006fe6 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006fc2:	f7fe fded 	bl	8005ba0 <HAL_RCC_GetPCLK1Freq>
 8006fc6:	61f8      	str	r0, [r7, #28]
          break;
 8006fc8:	e010      	b.n	8006fec <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          frequency = HAL_RCC_GetSysClockFreq();
 8006fca:	f7fe fd51 	bl	8005a70 <HAL_RCC_GetSysClockFreq>
 8006fce:	61f8      	str	r0, [r7, #28]
          break;
 8006fd0:	e00c      	b.n	8006fec <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006fd2:	4b47      	ldr	r3, [pc, #284]	; (80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fde:	d104      	bne.n	8006fea <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
            frequency = HSI_VALUE;
 8006fe0:	4b44      	ldr	r3, [pc, #272]	; (80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8006fe2:	61fb      	str	r3, [r7, #28]
          break;
 8006fe4:	e001      	b.n	8006fea <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
          break;
 8006fe6:	bf00      	nop
 8006fe8:	e10e      	b.n	8007208 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006fea:	bf00      	nop
        break;
 8006fec:	e10c      	b.n	8007208 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006fee:	4b40      	ldr	r3, [pc, #256]	; (80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ff4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006ff8:	60fb      	str	r3, [r7, #12]
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007000:	d02c      	beq.n	800705c <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007008:	d833      	bhi.n	8007072 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007010:	d01a      	beq.n	8007048 <HAL_RCCEx_GetPeriphCLKFreq+0xc70>
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007018:	d82b      	bhi.n	8007072 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d004      	beq.n	800702a <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007026:	d004      	beq.n	8007032 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
          break;
 8007028:	e023      	b.n	8007072 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          frequency = HAL_RCC_GetPCLK1Freq();
 800702a:	f7fe fdb9 	bl	8005ba0 <HAL_RCC_GetPCLK1Freq>
 800702e:	61f8      	str	r0, [r7, #28]
          break;
 8007030:	e026      	b.n	8007080 <HAL_RCCEx_GetPeriphCLKFreq+0xca8>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8007032:	4b2f      	ldr	r3, [pc, #188]	; (80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007034:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007038:	f003 0302 	and.w	r3, r3, #2
 800703c:	2b02      	cmp	r3, #2
 800703e:	d11a      	bne.n	8007076 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
              frequency = LSI_VALUE;
 8007040:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007044:	61fb      	str	r3, [r7, #28]
          break;
 8007046:	e016      	b.n	8007076 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007048:	4b29      	ldr	r3, [pc, #164]	; (80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007050:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007054:	d111      	bne.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = HSI_VALUE;
 8007056:	4b27      	ldr	r3, [pc, #156]	; (80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8007058:	61fb      	str	r3, [r7, #28]
          break;
 800705a:	e00e      	b.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800705c:	4b24      	ldr	r3, [pc, #144]	; (80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800705e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007062:	f003 0302 	and.w	r3, r3, #2
 8007066:	2b02      	cmp	r3, #2
 8007068:	d109      	bne.n	800707e <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
            frequency = LSE_VALUE;
 800706a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800706e:	61fb      	str	r3, [r7, #28]
          break;
 8007070:	e005      	b.n	800707e <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
          break;
 8007072:	bf00      	nop
 8007074:	e0c8      	b.n	8007208 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007076:	bf00      	nop
 8007078:	e0c6      	b.n	8007208 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800707a:	bf00      	nop
 800707c:	e0c4      	b.n	8007208 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800707e:	bf00      	nop
        break;
 8007080:	e0c2      	b.n	8007208 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8007082:	4b1b      	ldr	r3, [pc, #108]	; (80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007084:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007088:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800708c:	60fb      	str	r3, [r7, #12]
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007094:	d030      	beq.n	80070f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd20>
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800709c:	d837      	bhi.n	800710e <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80070a4:	d01a      	beq.n	80070dc <HAL_RCCEx_GetPeriphCLKFreq+0xd04>
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80070ac:	d82f      	bhi.n	800710e <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d004      	beq.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0xce6>
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070ba:	d004      	beq.n	80070c6 <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
          break;
 80070bc:	e027      	b.n	800710e <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          frequency = HAL_RCC_GetPCLK1Freq();
 80070be:	f7fe fd6f 	bl	8005ba0 <HAL_RCC_GetPCLK1Freq>
 80070c2:	61f8      	str	r0, [r7, #28]
          break;
 80070c4:	e02a      	b.n	800711c <HAL_RCCEx_GetPeriphCLKFreq+0xd44>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80070c6:	4b0a      	ldr	r3, [pc, #40]	; (80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80070c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80070cc:	f003 0302 	and.w	r3, r3, #2
 80070d0:	2b02      	cmp	r3, #2
 80070d2:	d11e      	bne.n	8007112 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
              frequency = LSI_VALUE;
 80070d4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80070d8:	61fb      	str	r3, [r7, #28]
          break;
 80070da:	e01a      	b.n	8007112 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80070dc:	4b04      	ldr	r3, [pc, #16]	; (80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070e8:	d115      	bne.n	8007116 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = HSI_VALUE;
 80070ea:	4b02      	ldr	r3, [pc, #8]	; (80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 80070ec:	61fb      	str	r3, [r7, #28]
          break;
 80070ee:	e012      	b.n	8007116 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 80070f0:	40021000 	.word	0x40021000
 80070f4:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80070f8:	4b46      	ldr	r3, [pc, #280]	; (8007214 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80070fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070fe:	f003 0302 	and.w	r3, r3, #2
 8007102:	2b02      	cmp	r3, #2
 8007104:	d109      	bne.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
            frequency = LSE_VALUE;
 8007106:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800710a:	61fb      	str	r3, [r7, #28]
          break;
 800710c:	e005      	b.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
          break;
 800710e:	bf00      	nop
 8007110:	e07a      	b.n	8007208 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007112:	bf00      	nop
 8007114:	e078      	b.n	8007208 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007116:	bf00      	nop
 8007118:	e076      	b.n	8007208 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800711a:	bf00      	nop
        break;
 800711c:	e074      	b.n	8007208 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800711e:	4b3d      	ldr	r3, [pc, #244]	; (8007214 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8007120:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007124:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007128:	60fb      	str	r3, [r7, #12]
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007130:	d02c      	beq.n	800718c <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007138:	d855      	bhi.n	80071e6 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d004      	beq.n	800714a <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007146:	d004      	beq.n	8007152 <HAL_RCCEx_GetPeriphCLKFreq+0xd7a>
          break;
 8007148:	e04d      	b.n	80071e6 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          frequency = HAL_RCC_GetSysClockFreq();
 800714a:	f7fe fc91 	bl	8005a70 <HAL_RCC_GetSysClockFreq>
 800714e:	61f8      	str	r0, [r7, #28]
          break;
 8007150:	e04e      	b.n	80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe18>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8007152:	4b30      	ldr	r3, [pc, #192]	; (8007214 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f003 0302 	and.w	r3, r3, #2
 800715a:	2b02      	cmp	r3, #2
 800715c:	d145      	bne.n	80071ea <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800715e:	4b2d      	ldr	r3, [pc, #180]	; (8007214 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f003 0308 	and.w	r3, r3, #8
 8007166:	2b00      	cmp	r3, #0
 8007168:	d005      	beq.n	8007176 <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 800716a:	4b2a      	ldr	r3, [pc, #168]	; (8007214 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	091b      	lsrs	r3, r3, #4
 8007170:	f003 030f 	and.w	r3, r3, #15
 8007174:	e005      	b.n	8007182 <HAL_RCCEx_GetPeriphCLKFreq+0xdaa>
 8007176:	4b27      	ldr	r3, [pc, #156]	; (8007214 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8007178:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800717c:	0a1b      	lsrs	r3, r3, #8
 800717e:	f003 030f 	and.w	r3, r3, #15
 8007182:	4a25      	ldr	r2, [pc, #148]	; (8007218 <HAL_RCCEx_GetPeriphCLKFreq+0xe40>)
 8007184:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007188:	61fb      	str	r3, [r7, #28]
          break;
 800718a:	e02e      	b.n	80071ea <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800718c:	4b21      	ldr	r3, [pc, #132]	; (8007214 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007194:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007198:	d129      	bne.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800719a:	4b1e      	ldr	r3, [pc, #120]	; (8007214 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800719c:	68db      	ldr	r3, [r3, #12]
 800719e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80071a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80071a6:	d122      	bne.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80071a8:	4b1a      	ldr	r3, [pc, #104]	; (8007214 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80071aa:	68db      	ldr	r3, [r3, #12]
 80071ac:	0a1b      	lsrs	r3, r3, #8
 80071ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071b2:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80071b4:	69bb      	ldr	r3, [r7, #24]
 80071b6:	68ba      	ldr	r2, [r7, #8]
 80071b8:	fb03 f202 	mul.w	r2, r3, r2
 80071bc:	4b15      	ldr	r3, [pc, #84]	; (8007214 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80071be:	68db      	ldr	r3, [r3, #12]
 80071c0:	091b      	lsrs	r3, r3, #4
 80071c2:	f003 030f 	and.w	r3, r3, #15
 80071c6:	3301      	adds	r3, #1
 80071c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80071cc:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80071ce:	4b11      	ldr	r3, [pc, #68]	; (8007214 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80071d0:	68db      	ldr	r3, [r3, #12]
 80071d2:	0d5b      	lsrs	r3, r3, #21
 80071d4:	f003 0303 	and.w	r3, r3, #3
 80071d8:	3301      	adds	r3, #1
 80071da:	005b      	lsls	r3, r3, #1
 80071dc:	69ba      	ldr	r2, [r7, #24]
 80071de:	fbb2 f3f3 	udiv	r3, r2, r3
 80071e2:	61fb      	str	r3, [r7, #28]
          break;
 80071e4:	e003      	b.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          break;
 80071e6:	bf00      	nop
 80071e8:	e00e      	b.n	8007208 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80071ea:	bf00      	nop
 80071ec:	e00c      	b.n	8007208 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80071ee:	bf00      	nop
        break;
 80071f0:	e00a      	b.n	8007208 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80071f2:	bf00      	nop
 80071f4:	e008      	b.n	8007208 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80071f6:	bf00      	nop
 80071f8:	e006      	b.n	8007208 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80071fa:	bf00      	nop
 80071fc:	e004      	b.n	8007208 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80071fe:	bf00      	nop
 8007200:	e002      	b.n	8007208 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8007202:	bf00      	nop
 8007204:	e000      	b.n	8007208 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8007206:	bf00      	nop
    }
  }

  return(frequency);
 8007208:	69fb      	ldr	r3, [r7, #28]
}
 800720a:	4618      	mov	r0, r3
 800720c:	3720      	adds	r7, #32
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}
 8007212:	bf00      	nop
 8007214:	40021000 	.word	0x40021000
 8007218:	0800e314 	.word	0x0800e314

0800721c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800721c:	b480      	push	{r7}
 800721e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8007220:	4b05      	ldr	r3, [pc, #20]	; (8007238 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a04      	ldr	r2, [pc, #16]	; (8007238 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8007226:	f043 0304 	orr.w	r3, r3, #4
 800722a:	6013      	str	r3, [r2, #0]
}
 800722c:	bf00      	nop
 800722e:	46bd      	mov	sp, r7
 8007230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007234:	4770      	bx	lr
 8007236:	bf00      	nop
 8007238:	40021000 	.word	0x40021000

0800723c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b084      	sub	sp, #16
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
 8007244:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007246:	2300      	movs	r3, #0
 8007248:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800724a:	4b72      	ldr	r3, [pc, #456]	; (8007414 <RCCEx_PLLSAI1_Config+0x1d8>)
 800724c:	68db      	ldr	r3, [r3, #12]
 800724e:	f003 0303 	and.w	r3, r3, #3
 8007252:	2b00      	cmp	r3, #0
 8007254:	d00e      	beq.n	8007274 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007256:	4b6f      	ldr	r3, [pc, #444]	; (8007414 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007258:	68db      	ldr	r3, [r3, #12]
 800725a:	f003 0203 	and.w	r2, r3, #3
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	429a      	cmp	r2, r3
 8007264:	d103      	bne.n	800726e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
       ||
 800726a:	2b00      	cmp	r3, #0
 800726c:	d142      	bne.n	80072f4 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800726e:	2301      	movs	r3, #1
 8007270:	73fb      	strb	r3, [r7, #15]
 8007272:	e03f      	b.n	80072f4 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	2b03      	cmp	r3, #3
 800727a:	d018      	beq.n	80072ae <RCCEx_PLLSAI1_Config+0x72>
 800727c:	2b03      	cmp	r3, #3
 800727e:	d825      	bhi.n	80072cc <RCCEx_PLLSAI1_Config+0x90>
 8007280:	2b01      	cmp	r3, #1
 8007282:	d002      	beq.n	800728a <RCCEx_PLLSAI1_Config+0x4e>
 8007284:	2b02      	cmp	r3, #2
 8007286:	d009      	beq.n	800729c <RCCEx_PLLSAI1_Config+0x60>
 8007288:	e020      	b.n	80072cc <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800728a:	4b62      	ldr	r3, [pc, #392]	; (8007414 <RCCEx_PLLSAI1_Config+0x1d8>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f003 0302 	and.w	r3, r3, #2
 8007292:	2b00      	cmp	r3, #0
 8007294:	d11d      	bne.n	80072d2 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8007296:	2301      	movs	r3, #1
 8007298:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800729a:	e01a      	b.n	80072d2 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800729c:	4b5d      	ldr	r3, [pc, #372]	; (8007414 <RCCEx_PLLSAI1_Config+0x1d8>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d116      	bne.n	80072d6 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80072a8:	2301      	movs	r3, #1
 80072aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80072ac:	e013      	b.n	80072d6 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80072ae:	4b59      	ldr	r3, [pc, #356]	; (8007414 <RCCEx_PLLSAI1_Config+0x1d8>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d10f      	bne.n	80072da <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80072ba:	4b56      	ldr	r3, [pc, #344]	; (8007414 <RCCEx_PLLSAI1_Config+0x1d8>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d109      	bne.n	80072da <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80072c6:	2301      	movs	r3, #1
 80072c8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80072ca:	e006      	b.n	80072da <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80072cc:	2301      	movs	r3, #1
 80072ce:	73fb      	strb	r3, [r7, #15]
      break;
 80072d0:	e004      	b.n	80072dc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80072d2:	bf00      	nop
 80072d4:	e002      	b.n	80072dc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80072d6:	bf00      	nop
 80072d8:	e000      	b.n	80072dc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80072da:	bf00      	nop
    }

    if(status == HAL_OK)
 80072dc:	7bfb      	ldrb	r3, [r7, #15]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d108      	bne.n	80072f4 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80072e2:	4b4c      	ldr	r3, [pc, #304]	; (8007414 <RCCEx_PLLSAI1_Config+0x1d8>)
 80072e4:	68db      	ldr	r3, [r3, #12]
 80072e6:	f023 0203 	bic.w	r2, r3, #3
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4949      	ldr	r1, [pc, #292]	; (8007414 <RCCEx_PLLSAI1_Config+0x1d8>)
 80072f0:	4313      	orrs	r3, r2
 80072f2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80072f4:	7bfb      	ldrb	r3, [r7, #15]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	f040 8086 	bne.w	8007408 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80072fc:	4b45      	ldr	r3, [pc, #276]	; (8007414 <RCCEx_PLLSAI1_Config+0x1d8>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a44      	ldr	r2, [pc, #272]	; (8007414 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007302:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007306:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007308:	f7fc fa78 	bl	80037fc <HAL_GetTick>
 800730c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800730e:	e009      	b.n	8007324 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007310:	f7fc fa74 	bl	80037fc <HAL_GetTick>
 8007314:	4602      	mov	r2, r0
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	1ad3      	subs	r3, r2, r3
 800731a:	2b02      	cmp	r3, #2
 800731c:	d902      	bls.n	8007324 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800731e:	2303      	movs	r3, #3
 8007320:	73fb      	strb	r3, [r7, #15]
        break;
 8007322:	e005      	b.n	8007330 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007324:	4b3b      	ldr	r3, [pc, #236]	; (8007414 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800732c:	2b00      	cmp	r3, #0
 800732e:	d1ef      	bne.n	8007310 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8007330:	7bfb      	ldrb	r3, [r7, #15]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d168      	bne.n	8007408 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d113      	bne.n	8007364 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800733c:	4b35      	ldr	r3, [pc, #212]	; (8007414 <RCCEx_PLLSAI1_Config+0x1d8>)
 800733e:	691a      	ldr	r2, [r3, #16]
 8007340:	4b35      	ldr	r3, [pc, #212]	; (8007418 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007342:	4013      	ands	r3, r2
 8007344:	687a      	ldr	r2, [r7, #4]
 8007346:	6892      	ldr	r2, [r2, #8]
 8007348:	0211      	lsls	r1, r2, #8
 800734a:	687a      	ldr	r2, [r7, #4]
 800734c:	68d2      	ldr	r2, [r2, #12]
 800734e:	06d2      	lsls	r2, r2, #27
 8007350:	4311      	orrs	r1, r2
 8007352:	687a      	ldr	r2, [r7, #4]
 8007354:	6852      	ldr	r2, [r2, #4]
 8007356:	3a01      	subs	r2, #1
 8007358:	0112      	lsls	r2, r2, #4
 800735a:	430a      	orrs	r2, r1
 800735c:	492d      	ldr	r1, [pc, #180]	; (8007414 <RCCEx_PLLSAI1_Config+0x1d8>)
 800735e:	4313      	orrs	r3, r2
 8007360:	610b      	str	r3, [r1, #16]
 8007362:	e02d      	b.n	80073c0 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	2b01      	cmp	r3, #1
 8007368:	d115      	bne.n	8007396 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800736a:	4b2a      	ldr	r3, [pc, #168]	; (8007414 <RCCEx_PLLSAI1_Config+0x1d8>)
 800736c:	691a      	ldr	r2, [r3, #16]
 800736e:	4b2b      	ldr	r3, [pc, #172]	; (800741c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007370:	4013      	ands	r3, r2
 8007372:	687a      	ldr	r2, [r7, #4]
 8007374:	6892      	ldr	r2, [r2, #8]
 8007376:	0211      	lsls	r1, r2, #8
 8007378:	687a      	ldr	r2, [r7, #4]
 800737a:	6912      	ldr	r2, [r2, #16]
 800737c:	0852      	lsrs	r2, r2, #1
 800737e:	3a01      	subs	r2, #1
 8007380:	0552      	lsls	r2, r2, #21
 8007382:	4311      	orrs	r1, r2
 8007384:	687a      	ldr	r2, [r7, #4]
 8007386:	6852      	ldr	r2, [r2, #4]
 8007388:	3a01      	subs	r2, #1
 800738a:	0112      	lsls	r2, r2, #4
 800738c:	430a      	orrs	r2, r1
 800738e:	4921      	ldr	r1, [pc, #132]	; (8007414 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007390:	4313      	orrs	r3, r2
 8007392:	610b      	str	r3, [r1, #16]
 8007394:	e014      	b.n	80073c0 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007396:	4b1f      	ldr	r3, [pc, #124]	; (8007414 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007398:	691a      	ldr	r2, [r3, #16]
 800739a:	4b21      	ldr	r3, [pc, #132]	; (8007420 <RCCEx_PLLSAI1_Config+0x1e4>)
 800739c:	4013      	ands	r3, r2
 800739e:	687a      	ldr	r2, [r7, #4]
 80073a0:	6892      	ldr	r2, [r2, #8]
 80073a2:	0211      	lsls	r1, r2, #8
 80073a4:	687a      	ldr	r2, [r7, #4]
 80073a6:	6952      	ldr	r2, [r2, #20]
 80073a8:	0852      	lsrs	r2, r2, #1
 80073aa:	3a01      	subs	r2, #1
 80073ac:	0652      	lsls	r2, r2, #25
 80073ae:	4311      	orrs	r1, r2
 80073b0:	687a      	ldr	r2, [r7, #4]
 80073b2:	6852      	ldr	r2, [r2, #4]
 80073b4:	3a01      	subs	r2, #1
 80073b6:	0112      	lsls	r2, r2, #4
 80073b8:	430a      	orrs	r2, r1
 80073ba:	4916      	ldr	r1, [pc, #88]	; (8007414 <RCCEx_PLLSAI1_Config+0x1d8>)
 80073bc:	4313      	orrs	r3, r2
 80073be:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80073c0:	4b14      	ldr	r3, [pc, #80]	; (8007414 <RCCEx_PLLSAI1_Config+0x1d8>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4a13      	ldr	r2, [pc, #76]	; (8007414 <RCCEx_PLLSAI1_Config+0x1d8>)
 80073c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80073ca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073cc:	f7fc fa16 	bl	80037fc <HAL_GetTick>
 80073d0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80073d2:	e009      	b.n	80073e8 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80073d4:	f7fc fa12 	bl	80037fc <HAL_GetTick>
 80073d8:	4602      	mov	r2, r0
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	1ad3      	subs	r3, r2, r3
 80073de:	2b02      	cmp	r3, #2
 80073e0:	d902      	bls.n	80073e8 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80073e2:	2303      	movs	r3, #3
 80073e4:	73fb      	strb	r3, [r7, #15]
          break;
 80073e6:	e005      	b.n	80073f4 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80073e8:	4b0a      	ldr	r3, [pc, #40]	; (8007414 <RCCEx_PLLSAI1_Config+0x1d8>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d0ef      	beq.n	80073d4 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80073f4:	7bfb      	ldrb	r3, [r7, #15]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d106      	bne.n	8007408 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80073fa:	4b06      	ldr	r3, [pc, #24]	; (8007414 <RCCEx_PLLSAI1_Config+0x1d8>)
 80073fc:	691a      	ldr	r2, [r3, #16]
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	699b      	ldr	r3, [r3, #24]
 8007402:	4904      	ldr	r1, [pc, #16]	; (8007414 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007404:	4313      	orrs	r3, r2
 8007406:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007408:	7bfb      	ldrb	r3, [r7, #15]
}
 800740a:	4618      	mov	r0, r3
 800740c:	3710      	adds	r7, #16
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}
 8007412:	bf00      	nop
 8007414:	40021000 	.word	0x40021000
 8007418:	07ff800f 	.word	0x07ff800f
 800741c:	ff9f800f 	.word	0xff9f800f
 8007420:	f9ff800f 	.word	0xf9ff800f

08007424 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b084      	sub	sp, #16
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
 800742c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800742e:	2300      	movs	r3, #0
 8007430:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007432:	4b72      	ldr	r3, [pc, #456]	; (80075fc <RCCEx_PLLSAI2_Config+0x1d8>)
 8007434:	68db      	ldr	r3, [r3, #12]
 8007436:	f003 0303 	and.w	r3, r3, #3
 800743a:	2b00      	cmp	r3, #0
 800743c:	d00e      	beq.n	800745c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800743e:	4b6f      	ldr	r3, [pc, #444]	; (80075fc <RCCEx_PLLSAI2_Config+0x1d8>)
 8007440:	68db      	ldr	r3, [r3, #12]
 8007442:	f003 0203 	and.w	r2, r3, #3
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	429a      	cmp	r2, r3
 800744c:	d103      	bne.n	8007456 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
       ||
 8007452:	2b00      	cmp	r3, #0
 8007454:	d142      	bne.n	80074dc <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8007456:	2301      	movs	r3, #1
 8007458:	73fb      	strb	r3, [r7, #15]
 800745a:	e03f      	b.n	80074dc <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	2b03      	cmp	r3, #3
 8007462:	d018      	beq.n	8007496 <RCCEx_PLLSAI2_Config+0x72>
 8007464:	2b03      	cmp	r3, #3
 8007466:	d825      	bhi.n	80074b4 <RCCEx_PLLSAI2_Config+0x90>
 8007468:	2b01      	cmp	r3, #1
 800746a:	d002      	beq.n	8007472 <RCCEx_PLLSAI2_Config+0x4e>
 800746c:	2b02      	cmp	r3, #2
 800746e:	d009      	beq.n	8007484 <RCCEx_PLLSAI2_Config+0x60>
 8007470:	e020      	b.n	80074b4 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007472:	4b62      	ldr	r3, [pc, #392]	; (80075fc <RCCEx_PLLSAI2_Config+0x1d8>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f003 0302 	and.w	r3, r3, #2
 800747a:	2b00      	cmp	r3, #0
 800747c:	d11d      	bne.n	80074ba <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800747e:	2301      	movs	r3, #1
 8007480:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007482:	e01a      	b.n	80074ba <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007484:	4b5d      	ldr	r3, [pc, #372]	; (80075fc <RCCEx_PLLSAI2_Config+0x1d8>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800748c:	2b00      	cmp	r3, #0
 800748e:	d116      	bne.n	80074be <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8007490:	2301      	movs	r3, #1
 8007492:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007494:	e013      	b.n	80074be <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007496:	4b59      	ldr	r3, [pc, #356]	; (80075fc <RCCEx_PLLSAI2_Config+0x1d8>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d10f      	bne.n	80074c2 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80074a2:	4b56      	ldr	r3, [pc, #344]	; (80075fc <RCCEx_PLLSAI2_Config+0x1d8>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d109      	bne.n	80074c2 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80074ae:	2301      	movs	r3, #1
 80074b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80074b2:	e006      	b.n	80074c2 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80074b4:	2301      	movs	r3, #1
 80074b6:	73fb      	strb	r3, [r7, #15]
      break;
 80074b8:	e004      	b.n	80074c4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80074ba:	bf00      	nop
 80074bc:	e002      	b.n	80074c4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80074be:	bf00      	nop
 80074c0:	e000      	b.n	80074c4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80074c2:	bf00      	nop
    }

    if(status == HAL_OK)
 80074c4:	7bfb      	ldrb	r3, [r7, #15]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d108      	bne.n	80074dc <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80074ca:	4b4c      	ldr	r3, [pc, #304]	; (80075fc <RCCEx_PLLSAI2_Config+0x1d8>)
 80074cc:	68db      	ldr	r3, [r3, #12]
 80074ce:	f023 0203 	bic.w	r2, r3, #3
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4949      	ldr	r1, [pc, #292]	; (80075fc <RCCEx_PLLSAI2_Config+0x1d8>)
 80074d8:	4313      	orrs	r3, r2
 80074da:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80074dc:	7bfb      	ldrb	r3, [r7, #15]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	f040 8086 	bne.w	80075f0 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80074e4:	4b45      	ldr	r3, [pc, #276]	; (80075fc <RCCEx_PLLSAI2_Config+0x1d8>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4a44      	ldr	r2, [pc, #272]	; (80075fc <RCCEx_PLLSAI2_Config+0x1d8>)
 80074ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80074ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074f0:	f7fc f984 	bl	80037fc <HAL_GetTick>
 80074f4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80074f6:	e009      	b.n	800750c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80074f8:	f7fc f980 	bl	80037fc <HAL_GetTick>
 80074fc:	4602      	mov	r2, r0
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	1ad3      	subs	r3, r2, r3
 8007502:	2b02      	cmp	r3, #2
 8007504:	d902      	bls.n	800750c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8007506:	2303      	movs	r3, #3
 8007508:	73fb      	strb	r3, [r7, #15]
        break;
 800750a:	e005      	b.n	8007518 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800750c:	4b3b      	ldr	r3, [pc, #236]	; (80075fc <RCCEx_PLLSAI2_Config+0x1d8>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007514:	2b00      	cmp	r3, #0
 8007516:	d1ef      	bne.n	80074f8 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8007518:	7bfb      	ldrb	r3, [r7, #15]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d168      	bne.n	80075f0 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d113      	bne.n	800754c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007524:	4b35      	ldr	r3, [pc, #212]	; (80075fc <RCCEx_PLLSAI2_Config+0x1d8>)
 8007526:	695a      	ldr	r2, [r3, #20]
 8007528:	4b35      	ldr	r3, [pc, #212]	; (8007600 <RCCEx_PLLSAI2_Config+0x1dc>)
 800752a:	4013      	ands	r3, r2
 800752c:	687a      	ldr	r2, [r7, #4]
 800752e:	6892      	ldr	r2, [r2, #8]
 8007530:	0211      	lsls	r1, r2, #8
 8007532:	687a      	ldr	r2, [r7, #4]
 8007534:	68d2      	ldr	r2, [r2, #12]
 8007536:	06d2      	lsls	r2, r2, #27
 8007538:	4311      	orrs	r1, r2
 800753a:	687a      	ldr	r2, [r7, #4]
 800753c:	6852      	ldr	r2, [r2, #4]
 800753e:	3a01      	subs	r2, #1
 8007540:	0112      	lsls	r2, r2, #4
 8007542:	430a      	orrs	r2, r1
 8007544:	492d      	ldr	r1, [pc, #180]	; (80075fc <RCCEx_PLLSAI2_Config+0x1d8>)
 8007546:	4313      	orrs	r3, r2
 8007548:	614b      	str	r3, [r1, #20]
 800754a:	e02d      	b.n	80075a8 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	2b01      	cmp	r3, #1
 8007550:	d115      	bne.n	800757e <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007552:	4b2a      	ldr	r3, [pc, #168]	; (80075fc <RCCEx_PLLSAI2_Config+0x1d8>)
 8007554:	695a      	ldr	r2, [r3, #20]
 8007556:	4b2b      	ldr	r3, [pc, #172]	; (8007604 <RCCEx_PLLSAI2_Config+0x1e0>)
 8007558:	4013      	ands	r3, r2
 800755a:	687a      	ldr	r2, [r7, #4]
 800755c:	6892      	ldr	r2, [r2, #8]
 800755e:	0211      	lsls	r1, r2, #8
 8007560:	687a      	ldr	r2, [r7, #4]
 8007562:	6912      	ldr	r2, [r2, #16]
 8007564:	0852      	lsrs	r2, r2, #1
 8007566:	3a01      	subs	r2, #1
 8007568:	0552      	lsls	r2, r2, #21
 800756a:	4311      	orrs	r1, r2
 800756c:	687a      	ldr	r2, [r7, #4]
 800756e:	6852      	ldr	r2, [r2, #4]
 8007570:	3a01      	subs	r2, #1
 8007572:	0112      	lsls	r2, r2, #4
 8007574:	430a      	orrs	r2, r1
 8007576:	4921      	ldr	r1, [pc, #132]	; (80075fc <RCCEx_PLLSAI2_Config+0x1d8>)
 8007578:	4313      	orrs	r3, r2
 800757a:	614b      	str	r3, [r1, #20]
 800757c:	e014      	b.n	80075a8 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800757e:	4b1f      	ldr	r3, [pc, #124]	; (80075fc <RCCEx_PLLSAI2_Config+0x1d8>)
 8007580:	695a      	ldr	r2, [r3, #20]
 8007582:	4b21      	ldr	r3, [pc, #132]	; (8007608 <RCCEx_PLLSAI2_Config+0x1e4>)
 8007584:	4013      	ands	r3, r2
 8007586:	687a      	ldr	r2, [r7, #4]
 8007588:	6892      	ldr	r2, [r2, #8]
 800758a:	0211      	lsls	r1, r2, #8
 800758c:	687a      	ldr	r2, [r7, #4]
 800758e:	6952      	ldr	r2, [r2, #20]
 8007590:	0852      	lsrs	r2, r2, #1
 8007592:	3a01      	subs	r2, #1
 8007594:	0652      	lsls	r2, r2, #25
 8007596:	4311      	orrs	r1, r2
 8007598:	687a      	ldr	r2, [r7, #4]
 800759a:	6852      	ldr	r2, [r2, #4]
 800759c:	3a01      	subs	r2, #1
 800759e:	0112      	lsls	r2, r2, #4
 80075a0:	430a      	orrs	r2, r1
 80075a2:	4916      	ldr	r1, [pc, #88]	; (80075fc <RCCEx_PLLSAI2_Config+0x1d8>)
 80075a4:	4313      	orrs	r3, r2
 80075a6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80075a8:	4b14      	ldr	r3, [pc, #80]	; (80075fc <RCCEx_PLLSAI2_Config+0x1d8>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a13      	ldr	r2, [pc, #76]	; (80075fc <RCCEx_PLLSAI2_Config+0x1d8>)
 80075ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075b2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075b4:	f7fc f922 	bl	80037fc <HAL_GetTick>
 80075b8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80075ba:	e009      	b.n	80075d0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80075bc:	f7fc f91e 	bl	80037fc <HAL_GetTick>
 80075c0:	4602      	mov	r2, r0
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	1ad3      	subs	r3, r2, r3
 80075c6:	2b02      	cmp	r3, #2
 80075c8:	d902      	bls.n	80075d0 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80075ca:	2303      	movs	r3, #3
 80075cc:	73fb      	strb	r3, [r7, #15]
          break;
 80075ce:	e005      	b.n	80075dc <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80075d0:	4b0a      	ldr	r3, [pc, #40]	; (80075fc <RCCEx_PLLSAI2_Config+0x1d8>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d0ef      	beq.n	80075bc <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80075dc:	7bfb      	ldrb	r3, [r7, #15]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d106      	bne.n	80075f0 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80075e2:	4b06      	ldr	r3, [pc, #24]	; (80075fc <RCCEx_PLLSAI2_Config+0x1d8>)
 80075e4:	695a      	ldr	r2, [r3, #20]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	699b      	ldr	r3, [r3, #24]
 80075ea:	4904      	ldr	r1, [pc, #16]	; (80075fc <RCCEx_PLLSAI2_Config+0x1d8>)
 80075ec:	4313      	orrs	r3, r2
 80075ee:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80075f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3710      	adds	r7, #16
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}
 80075fa:	bf00      	nop
 80075fc:	40021000 	.word	0x40021000
 8007600:	07ff800f 	.word	0x07ff800f
 8007604:	ff9f800f 	.word	0xff9f800f
 8007608:	f9ff800f 	.word	0xf9ff800f

0800760c <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 800760c:	b480      	push	{r7}
 800760e:	b089      	sub	sp, #36	; 0x24
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
 8007614:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8007616:	2300      	movs	r3, #0
 8007618:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800761a:	2300      	movs	r3, #0
 800761c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 800761e:	2300      	movs	r3, #0
 8007620:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007628:	d10b      	bne.n	8007642 <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800762a:	4b7e      	ldr	r3, [pc, #504]	; (8007824 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800762c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007630:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8007634:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8007636:	69bb      	ldr	r3, [r7, #24]
 8007638:	2b60      	cmp	r3, #96	; 0x60
 800763a:	d112      	bne.n	8007662 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800763c:	4b7a      	ldr	r3, [pc, #488]	; (8007828 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 800763e:	61fb      	str	r3, [r7, #28]
 8007640:	e00f      	b.n	8007662 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007648:	d10b      	bne.n	8007662 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800764a:	4b76      	ldr	r3, [pc, #472]	; (8007824 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800764c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007650:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007654:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8007656:	69bb      	ldr	r3, [r7, #24]
 8007658:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800765c:	d101      	bne.n	8007662 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 800765e:	4b72      	ldr	r3, [pc, #456]	; (8007828 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8007660:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8007662:	69fb      	ldr	r3, [r7, #28]
 8007664:	2b00      	cmp	r3, #0
 8007666:	f040 80d6 	bne.w	8007816 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 800766e:	69bb      	ldr	r3, [r7, #24]
 8007670:	2b40      	cmp	r3, #64	; 0x40
 8007672:	d003      	beq.n	800767c <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 8007674:	69bb      	ldr	r3, [r7, #24]
 8007676:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800767a:	d13b      	bne.n	80076f4 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800767c:	4b69      	ldr	r3, [pc, #420]	; (8007824 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007684:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007688:	f040 80c4 	bne.w	8007814 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 800768c:	4b65      	ldr	r3, [pc, #404]	; (8007824 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800768e:	68db      	ldr	r3, [r3, #12]
 8007690:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007694:	2b00      	cmp	r3, #0
 8007696:	f000 80bd 	beq.w	8007814 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800769a:	4b62      	ldr	r3, [pc, #392]	; (8007824 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800769c:	68db      	ldr	r3, [r3, #12]
 800769e:	091b      	lsrs	r3, r3, #4
 80076a0:	f003 030f 	and.w	r3, r3, #15
 80076a4:	3301      	adds	r3, #1
 80076a6:	693a      	ldr	r2, [r7, #16]
 80076a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80076ac:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80076ae:	4b5d      	ldr	r3, [pc, #372]	; (8007824 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80076b0:	68db      	ldr	r3, [r3, #12]
 80076b2:	0a1b      	lsrs	r3, r3, #8
 80076b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076b8:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 80076ba:	4b5a      	ldr	r3, [pc, #360]	; (8007824 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80076bc:	68db      	ldr	r3, [r3, #12]
 80076be:	0edb      	lsrs	r3, r3, #27
 80076c0:	f003 031f 	and.w	r3, r3, #31
 80076c4:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d10a      	bne.n	80076e2 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80076cc:	4b55      	ldr	r3, [pc, #340]	; (8007824 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80076ce:	68db      	ldr	r3, [r3, #12]
 80076d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d002      	beq.n	80076de <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 80076d8:	2311      	movs	r3, #17
 80076da:	617b      	str	r3, [r7, #20]
 80076dc:	e001      	b.n	80076e2 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 80076de:	2307      	movs	r3, #7
 80076e0:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80076e2:	693b      	ldr	r3, [r7, #16]
 80076e4:	68fa      	ldr	r2, [r7, #12]
 80076e6:	fb03 f202 	mul.w	r2, r3, r2
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80076f0:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80076f2:	e08f      	b.n	8007814 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 80076f4:	69bb      	ldr	r3, [r7, #24]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d13a      	bne.n	8007770 <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 80076fa:	4b4a      	ldr	r3, [pc, #296]	; (8007824 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007702:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007706:	f040 8086 	bne.w	8007816 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 800770a:	4b46      	ldr	r3, [pc, #280]	; (8007824 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800770c:	691b      	ldr	r3, [r3, #16]
 800770e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007712:	2b00      	cmp	r3, #0
 8007714:	d07f      	beq.n	8007816 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8007716:	4b43      	ldr	r3, [pc, #268]	; (8007824 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007718:	691b      	ldr	r3, [r3, #16]
 800771a:	091b      	lsrs	r3, r3, #4
 800771c:	f003 030f 	and.w	r3, r3, #15
 8007720:	3301      	adds	r3, #1
 8007722:	693a      	ldr	r2, [r7, #16]
 8007724:	fbb2 f3f3 	udiv	r3, r2, r3
 8007728:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800772a:	4b3e      	ldr	r3, [pc, #248]	; (8007824 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800772c:	691b      	ldr	r3, [r3, #16]
 800772e:	0a1b      	lsrs	r3, r3, #8
 8007730:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007734:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8007736:	4b3b      	ldr	r3, [pc, #236]	; (8007824 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007738:	691b      	ldr	r3, [r3, #16]
 800773a:	0edb      	lsrs	r3, r3, #27
 800773c:	f003 031f 	and.w	r3, r3, #31
 8007740:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d10a      	bne.n	800775e <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8007748:	4b36      	ldr	r3, [pc, #216]	; (8007824 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800774a:	691b      	ldr	r3, [r3, #16]
 800774c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007750:	2b00      	cmp	r3, #0
 8007752:	d002      	beq.n	800775a <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 8007754:	2311      	movs	r3, #17
 8007756:	617b      	str	r3, [r7, #20]
 8007758:	e001      	b.n	800775e <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 800775a:	2307      	movs	r3, #7
 800775c:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	68fa      	ldr	r2, [r7, #12]
 8007762:	fb03 f202 	mul.w	r2, r3, r2
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	fbb2 f3f3 	udiv	r3, r2, r3
 800776c:	61fb      	str	r3, [r7, #28]
 800776e:	e052      	b.n	8007816 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 8007770:	69bb      	ldr	r3, [r7, #24]
 8007772:	2b80      	cmp	r3, #128	; 0x80
 8007774:	d003      	beq.n	800777e <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 8007776:	69bb      	ldr	r3, [r7, #24]
 8007778:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800777c:	d109      	bne.n	8007792 <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800777e:	4b29      	ldr	r3, [pc, #164]	; (8007824 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007786:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800778a:	d144      	bne.n	8007816 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 800778c:	4b27      	ldr	r3, [pc, #156]	; (800782c <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 800778e:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007790:	e041      	b.n	8007816 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8007792:	69bb      	ldr	r3, [r7, #24]
 8007794:	2b20      	cmp	r3, #32
 8007796:	d003      	beq.n	80077a0 <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 8007798:	69bb      	ldr	r3, [r7, #24]
 800779a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800779e:	d13a      	bne.n	8007816 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 80077a0:	4b20      	ldr	r3, [pc, #128]	; (8007824 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80077a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80077ac:	d133      	bne.n	8007816 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 80077ae:	4b1d      	ldr	r3, [pc, #116]	; (8007824 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80077b0:	695b      	ldr	r3, [r3, #20]
 80077b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d02d      	beq.n	8007816 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 80077ba:	4b1a      	ldr	r3, [pc, #104]	; (8007824 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80077bc:	695b      	ldr	r3, [r3, #20]
 80077be:	091b      	lsrs	r3, r3, #4
 80077c0:	f003 030f 	and.w	r3, r3, #15
 80077c4:	3301      	adds	r3, #1
 80077c6:	693a      	ldr	r2, [r7, #16]
 80077c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80077cc:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80077ce:	4b15      	ldr	r3, [pc, #84]	; (8007824 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80077d0:	695b      	ldr	r3, [r3, #20]
 80077d2:	0a1b      	lsrs	r3, r3, #8
 80077d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077d8:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 80077da:	4b12      	ldr	r3, [pc, #72]	; (8007824 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80077dc:	695b      	ldr	r3, [r3, #20]
 80077de:	0edb      	lsrs	r3, r3, #27
 80077e0:	f003 031f 	and.w	r3, r3, #31
 80077e4:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d10a      	bne.n	8007802 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 80077ec:	4b0d      	ldr	r3, [pc, #52]	; (8007824 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80077ee:	695b      	ldr	r3, [r3, #20]
 80077f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d002      	beq.n	80077fe <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 80077f8:	2311      	movs	r3, #17
 80077fa:	617b      	str	r3, [r7, #20]
 80077fc:	e001      	b.n	8007802 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 80077fe:	2307      	movs	r3, #7
 8007800:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8007802:	693b      	ldr	r3, [r7, #16]
 8007804:	68fa      	ldr	r2, [r7, #12]
 8007806:	fb03 f202 	mul.w	r2, r3, r2
 800780a:	697b      	ldr	r3, [r7, #20]
 800780c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007810:	61fb      	str	r3, [r7, #28]
 8007812:	e000      	b.n	8007816 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8007814:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8007816:	69fb      	ldr	r3, [r7, #28]
}
 8007818:	4618      	mov	r0, r3
 800781a:	3724      	adds	r7, #36	; 0x24
 800781c:	46bd      	mov	sp, r7
 800781e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007822:	4770      	bx	lr
 8007824:	40021000 	.word	0x40021000
 8007828:	001fff68 	.word	0x001fff68
 800782c:	00f42400 	.word	0x00f42400

08007830 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b08a      	sub	sp, #40	; 0x28
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d101      	bne.n	8007842 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800783e:	2301      	movs	r3, #1
 8007840:	e1c7      	b.n	8007bd2 <HAL_SAI_Init+0x3a2>

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007848:	2b01      	cmp	r3, #1
 800784a:	d10e      	bne.n	800786a <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4a81      	ldr	r2, [pc, #516]	; (8007a58 <HAL_SAI_Init+0x228>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d107      	bne.n	8007866 <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 800785a:	2b01      	cmp	r3, #1
 800785c:	d103      	bne.n	8007866 <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8007862:	2b00      	cmp	r3, #0
 8007864:	d001      	beq.n	800786a <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 8007866:	2301      	movs	r3, #1
 8007868:	e1b3      	b.n	8007bd2 <HAL_SAI_Init+0x3a2>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8007870:	b2db      	uxtb	r3, r3
 8007872:	2b00      	cmp	r3, #0
 8007874:	d106      	bne.n	8007884 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2200      	movs	r2, #0
 800787a:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f7fb fd0e 	bl	80032a0 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f000 f9b1 	bl	8007bec <SAI_Disable>
 800788a:	4603      	mov	r3, r0
 800788c:	2b00      	cmp	r3, #0
 800788e:	d001      	beq.n	8007894 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 8007890:	2301      	movs	r3, #1
 8007892:	e19e      	b.n	8007bd2 <HAL_SAI_Init+0x3a2>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2202      	movs	r2, #2
 8007898:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	68db      	ldr	r3, [r3, #12]
 80078a0:	2b02      	cmp	r3, #2
 80078a2:	d00c      	beq.n	80078be <HAL_SAI_Init+0x8e>
 80078a4:	2b02      	cmp	r3, #2
 80078a6:	d80d      	bhi.n	80078c4 <HAL_SAI_Init+0x94>
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d002      	beq.n	80078b2 <HAL_SAI_Init+0x82>
 80078ac:	2b01      	cmp	r3, #1
 80078ae:	d003      	beq.n	80078b8 <HAL_SAI_Init+0x88>
 80078b0:	e008      	b.n	80078c4 <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 80078b2:	2300      	movs	r3, #0
 80078b4:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80078b6:	e008      	b.n	80078ca <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80078b8:	2310      	movs	r3, #16
 80078ba:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80078bc:	e005      	b.n	80078ca <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80078be:	2320      	movs	r3, #32
 80078c0:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80078c2:	e002      	b.n	80078ca <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 80078c4:	2300      	movs	r3, #0
 80078c6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80078c8:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	689b      	ldr	r3, [r3, #8]
 80078ce:	2b03      	cmp	r3, #3
 80078d0:	d81d      	bhi.n	800790e <HAL_SAI_Init+0xde>
 80078d2:	a201      	add	r2, pc, #4	; (adr r2, 80078d8 <HAL_SAI_Init+0xa8>)
 80078d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078d8:	080078e9 	.word	0x080078e9
 80078dc:	080078ef 	.word	0x080078ef
 80078e0:	080078f7 	.word	0x080078f7
 80078e4:	080078ff 	.word	0x080078ff
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 80078e8:	2300      	movs	r3, #0
 80078ea:	61fb      	str	r3, [r7, #28]
      break;
 80078ec:	e012      	b.n	8007914 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 80078ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80078f2:	61fb      	str	r3, [r7, #28]
      break;
 80078f4:	e00e      	b.n	8007914 <HAL_SAI_Init+0xe4>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80078f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80078fa:	61fb      	str	r3, [r7, #28]
      break;
 80078fc:	e00a      	b.n	8007914 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80078fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007902:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8007904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007906:	f043 0301 	orr.w	r3, r3, #1
 800790a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800790c:	e002      	b.n	8007914 <HAL_SAI_Init+0xe4>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 800790e:	2300      	movs	r3, #0
 8007910:	61fb      	str	r3, [r7, #28]
      break;
 8007912:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4a4f      	ldr	r2, [pc, #316]	; (8007a58 <HAL_SAI_Init+0x228>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d004      	beq.n	8007928 <HAL_SAI_Init+0xf8>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4a4e      	ldr	r2, [pc, #312]	; (8007a5c <HAL_SAI_Init+0x22c>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d103      	bne.n	8007930 <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 8007928:	4a4d      	ldr	r2, [pc, #308]	; (8007a60 <HAL_SAI_Init+0x230>)
 800792a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800792c:	6013      	str	r3, [r2, #0]
 800792e:	e002      	b.n	8007936 <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8007930:	4a4c      	ldr	r2, [pc, #304]	; (8007a64 <HAL_SAI_Init+0x234>)
 8007932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007934:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	69db      	ldr	r3, [r3, #28]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d073      	beq.n	8007a26 <HAL_SAI_Init+0x1f6>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	4a45      	ldr	r2, [pc, #276]	; (8007a58 <HAL_SAI_Init+0x228>)
 8007944:	4293      	cmp	r3, r2
 8007946:	d004      	beq.n	8007952 <HAL_SAI_Init+0x122>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4a43      	ldr	r2, [pc, #268]	; (8007a5c <HAL_SAI_Init+0x22c>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d105      	bne.n	800795e <HAL_SAI_Init+0x12e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8007952:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007956:	f7fe fd3f 	bl	80063d8 <HAL_RCCEx_GetPeriphCLKFreq>
 800795a:	61b8      	str	r0, [r7, #24]
 800795c:	e004      	b.n	8007968 <HAL_SAI_Init+0x138>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800795e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8007962:	f7fe fd39 	bl	80063d8 <HAL_RCCEx_GetPeriphCLKFreq>
 8007966:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NOMCK = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NOMCK = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	695b      	ldr	r3, [r3, #20]
 800796c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007970:	d120      	bne.n	80079b4 <HAL_SAI_Init+0x184>
    {
      /* NOMCK = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007976:	2b04      	cmp	r3, #4
 8007978:	d102      	bne.n	8007980 <HAL_SAI_Init+0x150>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 800797a:	2340      	movs	r3, #64	; 0x40
 800797c:	613b      	str	r3, [r7, #16]
 800797e:	e00a      	b.n	8007996 <HAL_SAI_Init+0x166>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007984:	2b08      	cmp	r3, #8
 8007986:	d103      	bne.n	8007990 <HAL_SAI_Init+0x160>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 8007988:	f44f 7380 	mov.w	r3, #256	; 0x100
 800798c:	613b      	str	r3, [r7, #16]
 800798e:	e002      	b.n	8007996 <HAL_SAI_Init+0x166>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007994:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8007996:	69ba      	ldr	r2, [r7, #24]
 8007998:	4613      	mov	r3, r2
 800799a:	009b      	lsls	r3, r3, #2
 800799c:	4413      	add	r3, r2
 800799e:	005b      	lsls	r3, r3, #1
 80079a0:	4619      	mov	r1, r3
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	69db      	ldr	r3, [r3, #28]
 80079a6:	693a      	ldr	r2, [r7, #16]
 80079a8:	fb02 f303 	mul.w	r3, r2, r3
 80079ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80079b0:	617b      	str	r3, [r7, #20]
 80079b2:	e017      	b.n	80079e4 <HAL_SAI_Init+0x1b4>
    }
    else
    {
      /* NOMCK = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80079bc:	d101      	bne.n	80079c2 <HAL_SAI_Init+0x192>
 80079be:	2302      	movs	r3, #2
 80079c0:	e000      	b.n	80079c4 <HAL_SAI_Init+0x194>
 80079c2:	2301      	movs	r3, #1
 80079c4:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 80079c6:	69ba      	ldr	r2, [r7, #24]
 80079c8:	4613      	mov	r3, r2
 80079ca:	009b      	lsls	r3, r3, #2
 80079cc:	4413      	add	r3, r2
 80079ce:	005b      	lsls	r3, r3, #1
 80079d0:	4619      	mov	r1, r3
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	69db      	ldr	r3, [r3, #28]
 80079d6:	68fa      	ldr	r2, [r7, #12]
 80079d8:	fb02 f303 	mul.w	r3, r2, r3
 80079dc:	021b      	lsls	r3, r3, #8
 80079de:	fbb1 f3f3 	udiv	r3, r1, r3
 80079e2:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	4a20      	ldr	r2, [pc, #128]	; (8007a68 <HAL_SAI_Init+0x238>)
 80079e8:	fba2 2303 	umull	r2, r3, r2, r3
 80079ec:	08da      	lsrs	r2, r3, #3
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 80079f2:	6979      	ldr	r1, [r7, #20]
 80079f4:	4b1c      	ldr	r3, [pc, #112]	; (8007a68 <HAL_SAI_Init+0x238>)
 80079f6:	fba3 2301 	umull	r2, r3, r3, r1
 80079fa:	08da      	lsrs	r2, r3, #3
 80079fc:	4613      	mov	r3, r2
 80079fe:	009b      	lsls	r3, r3, #2
 8007a00:	4413      	add	r3, r2
 8007a02:	005b      	lsls	r3, r3, #1
 8007a04:	1aca      	subs	r2, r1, r3
 8007a06:	2a08      	cmp	r2, #8
 8007a08:	d904      	bls.n	8007a14 <HAL_SAI_Init+0x1e4>
    {
      hsai->Init.Mckdiv += 1U;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6a1b      	ldr	r3, [r3, #32]
 8007a0e:	1c5a      	adds	r2, r3, #1
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a18:	2b04      	cmp	r3, #4
 8007a1a:	d104      	bne.n	8007a26 <HAL_SAI_Init+0x1f6>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6a1b      	ldr	r3, [r3, #32]
 8007a20:	085a      	lsrs	r2, r3, #1
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	685b      	ldr	r3, [r3, #4]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d003      	beq.n	8007a36 <HAL_SAI_Init+0x206>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	685b      	ldr	r3, [r3, #4]
 8007a32:	2b02      	cmp	r3, #2
 8007a34:	d109      	bne.n	8007a4a <HAL_SAI_Init+0x21a>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a3a:	2b01      	cmp	r3, #1
 8007a3c:	d101      	bne.n	8007a42 <HAL_SAI_Init+0x212>
 8007a3e:	2300      	movs	r3, #0
 8007a40:	e001      	b.n	8007a46 <HAL_SAI_Init+0x216>
 8007a42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a46:	623b      	str	r3, [r7, #32]
 8007a48:	e012      	b.n	8007a70 <HAL_SAI_Init+0x240>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a4e:	2b01      	cmp	r3, #1
 8007a50:	d10c      	bne.n	8007a6c <HAL_SAI_Init+0x23c>
 8007a52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a56:	e00a      	b.n	8007a6e <HAL_SAI_Init+0x23e>
 8007a58:	40015404 	.word	0x40015404
 8007a5c:	40015424 	.word	0x40015424
 8007a60:	40015400 	.word	0x40015400
 8007a64:	40015800 	.word	0x40015800
 8007a68:	cccccccd 	.word	0xcccccccd
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	6819      	ldr	r1, [r3, #0]
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681a      	ldr	r2, [r3, #0]
 8007a7a:	4b58      	ldr	r3, [pc, #352]	; (8007bdc <HAL_SAI_Init+0x3ac>)
 8007a7c:	400b      	ands	r3, r1
 8007a7e:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NOMCK | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	6819      	ldr	r1, [r3, #0]
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	685a      	ldr	r2, [r3, #4]
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a8e:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007a94:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a9a:	431a      	orrs	r2, r3
 8007a9c:	6a3b      	ldr	r3, [r7, #32]
 8007a9e:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8007aa0:	69fb      	ldr	r3, [r7, #28]
 8007aa2:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          ckstr_bits | syncen_bits |                             \
 8007aa8:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	691b      	ldr	r3, [r3, #16]
 8007aae:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007ab4:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6a1b      	ldr	r3, [r3, #32]
 8007aba:	051b      	lsls	r3, r3, #20
 8007abc:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8007ac2:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	430a      	orrs	r2, r1
 8007aca:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	685b      	ldr	r3, [r3, #4]
 8007ad2:	687a      	ldr	r2, [r7, #4]
 8007ad4:	6812      	ldr	r2, [r2, #0]
 8007ad6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8007ada:	f023 030f 	bic.w	r3, r3, #15
 8007ade:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	6859      	ldr	r1, [r3, #4]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	699a      	ldr	r2, [r3, #24]
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aee:	431a      	orrs	r2, r3
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007af4:	431a      	orrs	r2, r3
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	430a      	orrs	r2, r1
 8007afc:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	6899      	ldr	r1, [r3, #8]
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681a      	ldr	r2, [r3, #0]
 8007b08:	4b35      	ldr	r3, [pc, #212]	; (8007be0 <HAL_SAI_Init+0x3b0>)
 8007b0a:	400b      	ands	r3, r1
 8007b0c:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	6899      	ldr	r1, [r3, #8]
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b18:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007b1e:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
                           hsai->FrameInit.FSOffset |
 8007b24:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSDefinition |
 8007b2a:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b30:	3b01      	subs	r3, #1
 8007b32:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8007b34:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	430a      	orrs	r2, r1
 8007b3c:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	68d9      	ldr	r1, [r3, #12]
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681a      	ldr	r2, [r3, #0]
 8007b48:	f24f 0320 	movw	r3, #61472	; 0xf020
 8007b4c:	400b      	ands	r3, r1
 8007b4e:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	68d9      	ldr	r1, [r3, #12]
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b5e:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b64:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007b66:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b6c:	3b01      	subs	r3, #1
 8007b6e:	021b      	lsls	r3, r3, #8
 8007b70:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	430a      	orrs	r2, r1
 8007b78:	60da      	str	r2, [r3, #12]

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	4a19      	ldr	r2, [pc, #100]	; (8007be4 <HAL_SAI_Init+0x3b4>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d119      	bne.n	8007bb8 <HAL_SAI_Init+0x388>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8007b84:	4b18      	ldr	r3, [pc, #96]	; (8007be8 <HAL_SAI_Init+0x3b8>)
 8007b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b88:	4a17      	ldr	r2, [pc, #92]	; (8007be8 <HAL_SAI_Init+0x3b8>)
 8007b8a:	f023 0301 	bic.w	r3, r3, #1
 8007b8e:	6453      	str	r3, [r2, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007b96:	2b01      	cmp	r3, #1
 8007b98:	d10e      	bne.n	8007bb8 <HAL_SAI_Init+0x388>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ba2:	3b01      	subs	r3, #1
 8007ba4:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8007ba6:	4910      	ldr	r1, [pc, #64]	; (8007be8 <HAL_SAI_Init+0x3b8>)
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	644b      	str	r3, [r1, #68]	; 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 8007bac:	4b0e      	ldr	r3, [pc, #56]	; (8007be8 <HAL_SAI_Init+0x3b8>)
 8007bae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bb0:	4a0d      	ldr	r2, [pc, #52]	; (8007be8 <HAL_SAI_Init+0x3b8>)
 8007bb2:	f043 0301 	orr.w	r3, r3, #1
 8007bb6:	6453      	str	r3, [r2, #68]	; 0x44
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

  return HAL_OK;
 8007bd0:	2300      	movs	r3, #0
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3728      	adds	r7, #40	; 0x28
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}
 8007bda:	bf00      	nop
 8007bdc:	f805c010 	.word	0xf805c010
 8007be0:	fff88000 	.word	0xfff88000
 8007be4:	40015404 	.word	0x40015404
 8007be8:	40015400 	.word	0x40015400

08007bec <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b085      	sub	sp, #20
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8007bf4:	4b18      	ldr	r3, [pc, #96]	; (8007c58 <SAI_Disable+0x6c>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	4a18      	ldr	r2, [pc, #96]	; (8007c5c <SAI_Disable+0x70>)
 8007bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8007bfe:	0b1b      	lsrs	r3, r3, #12
 8007c00:	009b      	lsls	r3, r3, #2
 8007c02:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8007c04:	2300      	movs	r3, #0
 8007c06:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	681a      	ldr	r2, [r3, #0]
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007c16:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d10a      	bne.n	8007c34 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c24:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      status = HAL_TIMEOUT;
 8007c2e:	2303      	movs	r3, #3
 8007c30:	72fb      	strb	r3, [r7, #11]
      break;
 8007c32:	e009      	b.n	8007c48 <SAI_Disable+0x5c>
    }
    count--;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	3b01      	subs	r3, #1
 8007c38:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d1e7      	bne.n	8007c18 <SAI_Disable+0x2c>

  return status;
 8007c48:	7afb      	ldrb	r3, [r7, #11]
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	3714      	adds	r7, #20
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c54:	4770      	bx	lr
 8007c56:	bf00      	nop
 8007c58:	20000008 	.word	0x20000008
 8007c5c:	95cbec1b 	.word	0x95cbec1b

08007c60 <HAL_SMBUS_Init>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_Init(SMBUS_HandleTypeDef *hsmbus)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b082      	sub	sp, #8
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  /* Check the SMBUS handle allocation */
  if (hsmbus == NULL)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d101      	bne.n	8007c72 <HAL_SMBUS_Init+0x12>
  {
    return HAL_ERROR;
 8007c6e:	2301      	movs	r3, #1
 8007c70:	e0aa      	b.n	8007dc8 <HAL_SMBUS_Init+0x168>
  assert_param(IS_SMBUS_GENERAL_CALL(hsmbus->Init.GeneralCallMode));
  assert_param(IS_SMBUS_NO_STRETCH(hsmbus->Init.NoStretchMode));
  assert_param(IS_SMBUS_PEC(hsmbus->Init.PacketErrorCheckMode));
  assert_param(IS_SMBUS_PERIPHERAL_MODE(hsmbus->Init.PeripheralMode));

  if (hsmbus->State == HAL_SMBUS_STATE_RESET)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d106      	bne.n	8007c88 <HAL_SMBUS_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hsmbus->Lock = HAL_UNLOCKED;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hsmbus->MspInitCallback(hsmbus);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_SMBUS_MspInit(hsmbus);
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f7fa feca 	bl	8002a1c <HAL_SMBUS_MspInit>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
  }

  hsmbus->State = HAL_SMBUS_STATE_BUSY;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2202      	movs	r2, #2
 8007c8c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Disable the selected SMBUS peripheral */
  __HAL_SMBUS_DISABLE(hsmbus);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	681a      	ldr	r2, [r3, #0]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f022 0201 	bic.w	r2, r2, #1
 8007c9c:	601a      	str	r2, [r3, #0]

  /*---------------------------- SMBUSx TIMINGR Configuration ------------------------*/
  /* Configure SMBUSx: Frequency range */
  hsmbus->Instance->TIMINGR = hsmbus->Init.Timing & TIMING_CLEAR_MASK;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	685a      	ldr	r2, [r3, #4]
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007caa:	611a      	str	r2, [r3, #16]

  /*---------------------------- SMBUSx TIMEOUTR Configuration ------------------------*/
  /* Configure SMBUSx: Bus Timeout  */
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TIMOUTEN;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	695a      	ldr	r2, [r3, #20]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007cba:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TEXTEN;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	695a      	ldr	r2, [r3, #20]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8007cca:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR = hsmbus->Init.SMBusTimeout;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	687a      	ldr	r2, [r7, #4]
 8007cd2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007cd4:	615a      	str	r2, [r3, #20]

  /*---------------------------- SMBUSx OAR1 Configuration -----------------------*/
  /* Configure SMBUSx: Own Address1 and ack own address1 mode */
  hsmbus->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	689a      	ldr	r2, [r3, #8]
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007ce4:	609a      	str	r2, [r3, #8]

  if (hsmbus->Init.OwnAddress1 != 0UL)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	68db      	ldr	r3, [r3, #12]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d012      	beq.n	8007d14 <HAL_SMBUS_Init+0xb4>
  {
    if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_7BIT)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	691b      	ldr	r3, [r3, #16]
 8007cf2:	2b01      	cmp	r3, #1
 8007cf4:	d107      	bne.n	8007d06 <HAL_SMBUS_Init+0xa6>
    {
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | hsmbus->Init.OwnAddress1);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	68da      	ldr	r2, [r3, #12]
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007d02:	609a      	str	r2, [r3, #8]
 8007d04:	e006      	b.n	8007d14 <HAL_SMBUS_Init+0xb4>
    }
    else /* SMBUS_ADDRESSINGMODE_10BIT */
    {
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hsmbus->Init.OwnAddress1);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	68da      	ldr	r2, [r3, #12]
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007d12:	609a      	str	r2, [r3, #8]
    }
  }

  /*---------------------------- SMBUSx CR2 Configuration ------------------------*/
  /* Configure SMBUSx: Addressing Master mode */
  if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_10BIT)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	691b      	ldr	r3, [r3, #16]
 8007d18:	2b02      	cmp	r3, #2
 8007d1a:	d104      	bne.n	8007d26 <HAL_SMBUS_Init+0xc6>
  {
    hsmbus->Instance->CR2 = (I2C_CR2_ADD10);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007d24:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process) */
  /* AUTOEND and NACK bit will be manage during Transfer process */
  hsmbus->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	685b      	ldr	r3, [r3, #4]
 8007d2c:	687a      	ldr	r2, [r7, #4]
 8007d2e:	6812      	ldr	r2, [r2, #0]
 8007d30:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007d34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d38:	6053      	str	r3, [r2, #4]

  /*---------------------------- SMBUSx OAR2 Configuration -----------------------*/
  /* Configure SMBUSx: Dual mode and Own Address2 */
  hsmbus->Instance->OAR2 = (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2 | \
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	695a      	ldr	r2, [r3, #20]
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	699b      	ldr	r3, [r3, #24]
 8007d42:	ea42 0103 	orr.w	r1, r2, r3
                            (hsmbus->Init.OwnAddress2Masks << 8U));
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	69db      	ldr	r3, [r3, #28]
 8007d4a:	021a      	lsls	r2, r3, #8
  hsmbus->Instance->OAR2 = (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2 | \
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	430a      	orrs	r2, r1
 8007d52:	60da      	str	r2, [r3, #12]

  /*---------------------------- SMBUSx CR1 Configuration ------------------------*/
  /* Configure SMBUSx: Generalcall and NoStretch mode */
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6a1a      	ldr	r2, [r3, #32]
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d5c:	431a      	orrs	r2, r3
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 8007d62:	431a      	orrs	r2, r3
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d68:	ea42 0103 	orr.w	r1, r2, r3
                           hsmbus->Init.AnalogFilter);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	689a      	ldr	r2, [r3, #8]
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 8007d74:	430a      	orrs	r2, r1
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 8007d76:	601a      	str	r2, [r3, #0]

  /* Enable Slave Byte Control only in case of Packet Error Check is enabled
     and SMBUS Peripheral is set in Slave mode */
  if ((hsmbus->Init.PacketErrorCheckMode == SMBUS_PEC_ENABLE) && \
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d7c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007d80:	d110      	bne.n	8007da4 <HAL_SMBUS_Init+0x144>
      ((hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE) || \
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  if ((hsmbus->Init.PacketErrorCheckMode == SMBUS_PEC_ENABLE) && \
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d004      	beq.n	8007d94 <HAL_SMBUS_Init+0x134>
       (hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE_ARP)))
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      ((hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE) || \
 8007d8e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007d92:	d107      	bne.n	8007da4 <HAL_SMBUS_Init+0x144>
  {
    hsmbus->Instance->CR1 |= I2C_CR1_SBC;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	681a      	ldr	r2, [r3, #0]
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007da2:	601a      	str	r2, [r3, #0]
  }

  /* Enable the selected SMBUS peripheral */
  __HAL_SMBUS_ENABLE(hsmbus);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	681a      	ldr	r2, [r3, #0]
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f042 0201 	orr.w	r2, r2, #1
 8007db2:	601a      	str	r2, [r3, #0]

  hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2200      	movs	r2, #0
 8007db8:	64da      	str	r2, [r3, #76]	; 0x4c
  hsmbus->PreviousState = HAL_SMBUS_STATE_READY;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2201      	movs	r2, #1
 8007dbe:	641a      	str	r2, [r3, #64]	; 0x40
  hsmbus->State = HAL_SMBUS_STATE_READY;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2201      	movs	r2, #1
 8007dc4:	649a      	str	r2, [r3, #72]	; 0x48

  return HAL_OK;
 8007dc6:	2300      	movs	r3, #0
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	3708      	adds	r7, #8
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}

08007dd0 <HAL_SMBUS_EnableAlert_IT>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUSx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_EnableAlert_IT(SMBUS_HandleTypeDef *hsmbus)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b082      	sub	sp, #8
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
  /* Enable SMBus alert */
  hsmbus->Instance->CR1 |= I2C_CR1_ALERTEN;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	681a      	ldr	r2, [r3, #0]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8007de6:	601a      	str	r2, [r3, #0]

  /* Clear ALERT flag */
  __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_ALERT);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007df0:	61da      	str	r2, [r3, #28]

  /* Enable Alert Interrupt */
  SMBUS_Enable_IRQ(hsmbus, SMBUS_IT_ALERT);
 8007df2:	2180      	movs	r1, #128	; 0x80
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f000 f805 	bl	8007e04 <SMBUS_Enable_IRQ>

  return HAL_OK;
 8007dfa:	2300      	movs	r3, #0
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	3708      	adds	r7, #8
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bd80      	pop	{r7, pc}

08007e04 <SMBUS_Enable_IRQ>:
  *                the configuration information for the specified SMBUS.
  * @param  InterruptRequest Value of @ref SMBUS_Interrupt_configuration_definition.
  * @retval HAL status
  */
static void SMBUS_Enable_IRQ(SMBUS_HandleTypeDef *hsmbus, uint32_t InterruptRequest)
{
 8007e04:	b480      	push	{r7}
 8007e06:	b085      	sub	sp, #20
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
 8007e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpisr = 0UL;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & SMBUS_IT_ALERT) == SMBUS_IT_ALERT)
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d003      	beq.n	8007e24 <SMBUS_Enable_IRQ+0x20>
  {
    /* Enable ERR interrupt */
    tmpisr |= SMBUS_IT_ERRI;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e22:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_ADDR) == SMBUS_IT_ADDR)
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007e2a:	2b38      	cmp	r3, #56	; 0x38
 8007e2c:	d103      	bne.n	8007e36 <SMBUS_Enable_IRQ+0x32>
  {
    /* Enable ADDR, STOP interrupt */
    tmpisr |= SMBUS_IT_ADDRI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_ERRI;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8007e34:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_TX) == SMBUS_IT_TX)
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8007e3c:	2bf2      	cmp	r3, #242	; 0xf2
 8007e3e:	d103      	bne.n	8007e48 <SMBUS_Enable_IRQ+0x44>
  {
    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    tmpisr |= SMBUS_IT_ERRI | SMBUS_IT_TCI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_TXI;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8007e46:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_RX) == SMBUS_IT_RX)
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	f003 03d4 	and.w	r3, r3, #212	; 0xd4
 8007e4e:	2bd4      	cmp	r3, #212	; 0xd4
 8007e50:	d103      	bne.n	8007e5a <SMBUS_Enable_IRQ+0x56>
  {
    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    tmpisr |= SMBUS_IT_ERRI | SMBUS_IT_TCI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_RXI;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8007e58:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of SMBUS interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_SMBUS_ENABLE_IT(hsmbus, tmpisr);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	6819      	ldr	r1, [r3, #0]
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	68fa      	ldr	r2, [r7, #12]
 8007e66:	430a      	orrs	r2, r1
 8007e68:	601a      	str	r2, [r3, #0]
}
 8007e6a:	bf00      	nop
 8007e6c:	3714      	adds	r7, #20
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e74:	4770      	bx	lr

08007e76 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007e76:	b580      	push	{r7, lr}
 8007e78:	b084      	sub	sp, #16
 8007e7a:	af00      	add	r7, sp, #0
 8007e7c:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d101      	bne.n	8007e88 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007e84:	2301      	movs	r3, #1
 8007e86:	e095      	b.n	8007fb4 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d108      	bne.n	8007ea2 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	685b      	ldr	r3, [r3, #4]
 8007e94:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007e98:	d009      	beq.n	8007eae <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	61da      	str	r2, [r3, #28]
 8007ea0:	e005      	b.n	8007eae <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2200      	movs	r2, #0
 8007eac:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007eba:	b2db      	uxtb	r3, r3
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d106      	bne.n	8007ece <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f7fa ff35 	bl	8002d38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2202      	movs	r2, #2
 8007ed2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	681a      	ldr	r2, [r3, #0]
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ee4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	68db      	ldr	r3, [r3, #12]
 8007eea:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007eee:	d902      	bls.n	8007ef6 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	60fb      	str	r3, [r7, #12]
 8007ef4:	e002      	b.n	8007efc <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007ef6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007efa:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	68db      	ldr	r3, [r3, #12]
 8007f00:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007f04:	d007      	beq.n	8007f16 <HAL_SPI_Init+0xa0>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	68db      	ldr	r3, [r3, #12]
 8007f0a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007f0e:	d002      	beq.n	8007f16 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2200      	movs	r2, #0
 8007f14:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	685b      	ldr	r3, [r3, #4]
 8007f1a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	689b      	ldr	r3, [r3, #8]
 8007f22:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007f26:	431a      	orrs	r2, r3
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	691b      	ldr	r3, [r3, #16]
 8007f2c:	f003 0302 	and.w	r3, r3, #2
 8007f30:	431a      	orrs	r2, r3
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	695b      	ldr	r3, [r3, #20]
 8007f36:	f003 0301 	and.w	r3, r3, #1
 8007f3a:	431a      	orrs	r2, r3
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	699b      	ldr	r3, [r3, #24]
 8007f40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f44:	431a      	orrs	r2, r3
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	69db      	ldr	r3, [r3, #28]
 8007f4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007f4e:	431a      	orrs	r2, r3
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6a1b      	ldr	r3, [r3, #32]
 8007f54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f58:	ea42 0103 	orr.w	r1, r2, r3
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f60:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	430a      	orrs	r2, r1
 8007f6a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	699b      	ldr	r3, [r3, #24]
 8007f70:	0c1b      	lsrs	r3, r3, #16
 8007f72:	f003 0204 	and.w	r2, r3, #4
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f7a:	f003 0310 	and.w	r3, r3, #16
 8007f7e:	431a      	orrs	r2, r3
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f84:	f003 0308 	and.w	r3, r3, #8
 8007f88:	431a      	orrs	r2, r3
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	68db      	ldr	r3, [r3, #12]
 8007f8e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007f92:	ea42 0103 	orr.w	r1, r2, r3
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	430a      	orrs	r2, r1
 8007fa2:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2201      	movs	r2, #1
 8007fae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007fb2:	2300      	movs	r3, #0
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	3710      	adds	r7, #16
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}

08007fbc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b088      	sub	sp, #32
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	60f8      	str	r0, [r7, #12]
 8007fc4:	60b9      	str	r1, [r7, #8]
 8007fc6:	603b      	str	r3, [r7, #0]
 8007fc8:	4613      	mov	r3, r2
 8007fca:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007fd6:	2b01      	cmp	r3, #1
 8007fd8:	d101      	bne.n	8007fde <HAL_SPI_Transmit+0x22>
 8007fda:	2302      	movs	r3, #2
 8007fdc:	e158      	b.n	8008290 <HAL_SPI_Transmit+0x2d4>
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	2201      	movs	r2, #1
 8007fe2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007fe6:	f7fb fc09 	bl	80037fc <HAL_GetTick>
 8007fea:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007fec:	88fb      	ldrh	r3, [r7, #6]
 8007fee:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007ff6:	b2db      	uxtb	r3, r3
 8007ff8:	2b01      	cmp	r3, #1
 8007ffa:	d002      	beq.n	8008002 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007ffc:	2302      	movs	r3, #2
 8007ffe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008000:	e13d      	b.n	800827e <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d002      	beq.n	800800e <HAL_SPI_Transmit+0x52>
 8008008:	88fb      	ldrh	r3, [r7, #6]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d102      	bne.n	8008014 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800800e:	2301      	movs	r3, #1
 8008010:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008012:	e134      	b.n	800827e <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	2203      	movs	r2, #3
 8008018:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	2200      	movs	r2, #0
 8008020:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	68ba      	ldr	r2, [r7, #8]
 8008026:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	88fa      	ldrh	r2, [r7, #6]
 800802c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	88fa      	ldrh	r2, [r7, #6]
 8008032:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	2200      	movs	r2, #0
 8008038:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	2200      	movs	r2, #0
 800803e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	2200      	movs	r2, #0
 8008046:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	2200      	movs	r2, #0
 800804e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	2200      	movs	r2, #0
 8008054:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	689b      	ldr	r3, [r3, #8]
 800805a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800805e:	d10f      	bne.n	8008080 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	681a      	ldr	r2, [r3, #0]
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800806e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	681a      	ldr	r2, [r3, #0]
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800807e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800808a:	2b40      	cmp	r3, #64	; 0x40
 800808c:	d007      	beq.n	800809e <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	681a      	ldr	r2, [r3, #0]
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800809c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	68db      	ldr	r3, [r3, #12]
 80080a2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80080a6:	d94b      	bls.n	8008140 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	685b      	ldr	r3, [r3, #4]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d002      	beq.n	80080b6 <HAL_SPI_Transmit+0xfa>
 80080b0:	8afb      	ldrh	r3, [r7, #22]
 80080b2:	2b01      	cmp	r3, #1
 80080b4:	d13e      	bne.n	8008134 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080ba:	881a      	ldrh	r2, [r3, #0]
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080c6:	1c9a      	adds	r2, r3, #2
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080d0:	b29b      	uxth	r3, r3
 80080d2:	3b01      	subs	r3, #1
 80080d4:	b29a      	uxth	r2, r3
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80080da:	e02b      	b.n	8008134 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	689b      	ldr	r3, [r3, #8]
 80080e2:	f003 0302 	and.w	r3, r3, #2
 80080e6:	2b02      	cmp	r3, #2
 80080e8:	d112      	bne.n	8008110 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080ee:	881a      	ldrh	r2, [r3, #0]
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080fa:	1c9a      	adds	r2, r3, #2
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008104:	b29b      	uxth	r3, r3
 8008106:	3b01      	subs	r3, #1
 8008108:	b29a      	uxth	r2, r3
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800810e:	e011      	b.n	8008134 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008110:	f7fb fb74 	bl	80037fc <HAL_GetTick>
 8008114:	4602      	mov	r2, r0
 8008116:	69bb      	ldr	r3, [r7, #24]
 8008118:	1ad3      	subs	r3, r2, r3
 800811a:	683a      	ldr	r2, [r7, #0]
 800811c:	429a      	cmp	r2, r3
 800811e:	d803      	bhi.n	8008128 <HAL_SPI_Transmit+0x16c>
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008126:	d102      	bne.n	800812e <HAL_SPI_Transmit+0x172>
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d102      	bne.n	8008134 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800812e:	2303      	movs	r3, #3
 8008130:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008132:	e0a4      	b.n	800827e <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008138:	b29b      	uxth	r3, r3
 800813a:	2b00      	cmp	r3, #0
 800813c:	d1ce      	bne.n	80080dc <HAL_SPI_Transmit+0x120>
 800813e:	e07c      	b.n	800823a <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	685b      	ldr	r3, [r3, #4]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d002      	beq.n	800814e <HAL_SPI_Transmit+0x192>
 8008148:	8afb      	ldrh	r3, [r7, #22]
 800814a:	2b01      	cmp	r3, #1
 800814c:	d170      	bne.n	8008230 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008152:	b29b      	uxth	r3, r3
 8008154:	2b01      	cmp	r3, #1
 8008156:	d912      	bls.n	800817e <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800815c:	881a      	ldrh	r2, [r3, #0]
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008168:	1c9a      	adds	r2, r3, #2
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008172:	b29b      	uxth	r3, r3
 8008174:	3b02      	subs	r3, #2
 8008176:	b29a      	uxth	r2, r3
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800817c:	e058      	b.n	8008230 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	330c      	adds	r3, #12
 8008188:	7812      	ldrb	r2, [r2, #0]
 800818a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008190:	1c5a      	adds	r2, r3, #1
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800819a:	b29b      	uxth	r3, r3
 800819c:	3b01      	subs	r3, #1
 800819e:	b29a      	uxth	r2, r3
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80081a4:	e044      	b.n	8008230 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	689b      	ldr	r3, [r3, #8]
 80081ac:	f003 0302 	and.w	r3, r3, #2
 80081b0:	2b02      	cmp	r3, #2
 80081b2:	d12b      	bne.n	800820c <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80081b8:	b29b      	uxth	r3, r3
 80081ba:	2b01      	cmp	r3, #1
 80081bc:	d912      	bls.n	80081e4 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081c2:	881a      	ldrh	r2, [r3, #0]
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081ce:	1c9a      	adds	r2, r3, #2
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80081d8:	b29b      	uxth	r3, r3
 80081da:	3b02      	subs	r3, #2
 80081dc:	b29a      	uxth	r2, r3
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80081e2:	e025      	b.n	8008230 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	330c      	adds	r3, #12
 80081ee:	7812      	ldrb	r2, [r2, #0]
 80081f0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081f6:	1c5a      	adds	r2, r3, #1
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008200:	b29b      	uxth	r3, r3
 8008202:	3b01      	subs	r3, #1
 8008204:	b29a      	uxth	r2, r3
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	87da      	strh	r2, [r3, #62]	; 0x3e
 800820a:	e011      	b.n	8008230 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800820c:	f7fb faf6 	bl	80037fc <HAL_GetTick>
 8008210:	4602      	mov	r2, r0
 8008212:	69bb      	ldr	r3, [r7, #24]
 8008214:	1ad3      	subs	r3, r2, r3
 8008216:	683a      	ldr	r2, [r7, #0]
 8008218:	429a      	cmp	r2, r3
 800821a:	d803      	bhi.n	8008224 <HAL_SPI_Transmit+0x268>
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008222:	d102      	bne.n	800822a <HAL_SPI_Transmit+0x26e>
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d102      	bne.n	8008230 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800822a:	2303      	movs	r3, #3
 800822c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800822e:	e026      	b.n	800827e <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008234:	b29b      	uxth	r3, r3
 8008236:	2b00      	cmp	r3, #0
 8008238:	d1b5      	bne.n	80081a6 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800823a:	69ba      	ldr	r2, [r7, #24]
 800823c:	6839      	ldr	r1, [r7, #0]
 800823e:	68f8      	ldr	r0, [r7, #12]
 8008240:	f000 fce4 	bl	8008c0c <SPI_EndRxTxTransaction>
 8008244:	4603      	mov	r3, r0
 8008246:	2b00      	cmp	r3, #0
 8008248:	d002      	beq.n	8008250 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	2220      	movs	r2, #32
 800824e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	689b      	ldr	r3, [r3, #8]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d10a      	bne.n	800826e <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008258:	2300      	movs	r3, #0
 800825a:	613b      	str	r3, [r7, #16]
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	68db      	ldr	r3, [r3, #12]
 8008262:	613b      	str	r3, [r7, #16]
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	689b      	ldr	r3, [r3, #8]
 800826a:	613b      	str	r3, [r7, #16]
 800826c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008272:	2b00      	cmp	r3, #0
 8008274:	d002      	beq.n	800827c <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8008276:	2301      	movs	r3, #1
 8008278:	77fb      	strb	r3, [r7, #31]
 800827a:	e000      	b.n	800827e <HAL_SPI_Transmit+0x2c2>
  }

error:
 800827c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	2201      	movs	r2, #1
 8008282:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	2200      	movs	r2, #0
 800828a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800828e:	7ffb      	ldrb	r3, [r7, #31]
}
 8008290:	4618      	mov	r0, r3
 8008292:	3720      	adds	r7, #32
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}

08008298 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b088      	sub	sp, #32
 800829c:	af02      	add	r7, sp, #8
 800829e:	60f8      	str	r0, [r7, #12]
 80082a0:	60b9      	str	r1, [r7, #8]
 80082a2:	603b      	str	r3, [r7, #0]
 80082a4:	4613      	mov	r3, r2
 80082a6:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80082a8:	2300      	movs	r3, #0
 80082aa:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	685b      	ldr	r3, [r3, #4]
 80082b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80082b4:	d112      	bne.n	80082dc <HAL_SPI_Receive+0x44>
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	689b      	ldr	r3, [r3, #8]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d10e      	bne.n	80082dc <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	2204      	movs	r2, #4
 80082c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80082c6:	88fa      	ldrh	r2, [r7, #6]
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	9300      	str	r3, [sp, #0]
 80082cc:	4613      	mov	r3, r2
 80082ce:	68ba      	ldr	r2, [r7, #8]
 80082d0:	68b9      	ldr	r1, [r7, #8]
 80082d2:	68f8      	ldr	r0, [r7, #12]
 80082d4:	f000 f910 	bl	80084f8 <HAL_SPI_TransmitReceive>
 80082d8:	4603      	mov	r3, r0
 80082da:	e109      	b.n	80084f0 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80082e2:	2b01      	cmp	r3, #1
 80082e4:	d101      	bne.n	80082ea <HAL_SPI_Receive+0x52>
 80082e6:	2302      	movs	r3, #2
 80082e8:	e102      	b.n	80084f0 <HAL_SPI_Receive+0x258>
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	2201      	movs	r2, #1
 80082ee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80082f2:	f7fb fa83 	bl	80037fc <HAL_GetTick>
 80082f6:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80082fe:	b2db      	uxtb	r3, r3
 8008300:	2b01      	cmp	r3, #1
 8008302:	d002      	beq.n	800830a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8008304:	2302      	movs	r3, #2
 8008306:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008308:	e0e9      	b.n	80084de <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d002      	beq.n	8008316 <HAL_SPI_Receive+0x7e>
 8008310:	88fb      	ldrh	r3, [r7, #6]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d102      	bne.n	800831c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8008316:	2301      	movs	r3, #1
 8008318:	75fb      	strb	r3, [r7, #23]
    goto error;
 800831a:	e0e0      	b.n	80084de <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	2204      	movs	r2, #4
 8008320:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	2200      	movs	r2, #0
 8008328:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	68ba      	ldr	r2, [r7, #8]
 800832e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	88fa      	ldrh	r2, [r7, #6]
 8008334:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	88fa      	ldrh	r2, [r7, #6]
 800833c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	2200      	movs	r2, #0
 8008344:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	2200      	movs	r2, #0
 800834a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	2200      	movs	r2, #0
 8008350:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	2200      	movs	r2, #0
 8008356:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	2200      	movs	r2, #0
 800835c:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	68db      	ldr	r3, [r3, #12]
 8008362:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008366:	d908      	bls.n	800837a <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	685a      	ldr	r2, [r3, #4]
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008376:	605a      	str	r2, [r3, #4]
 8008378:	e007      	b.n	800838a <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	685a      	ldr	r2, [r3, #4]
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008388:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	689b      	ldr	r3, [r3, #8]
 800838e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008392:	d10f      	bne.n	80083b4 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	681a      	ldr	r2, [r3, #0]
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80083a2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	681a      	ldr	r2, [r3, #0]
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80083b2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083be:	2b40      	cmp	r3, #64	; 0x40
 80083c0:	d007      	beq.n	80083d2 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	681a      	ldr	r2, [r3, #0]
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80083d0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	68db      	ldr	r3, [r3, #12]
 80083d6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80083da:	d867      	bhi.n	80084ac <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80083dc:	e030      	b.n	8008440 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	689b      	ldr	r3, [r3, #8]
 80083e4:	f003 0301 	and.w	r3, r3, #1
 80083e8:	2b01      	cmp	r3, #1
 80083ea:	d117      	bne.n	800841c <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f103 020c 	add.w	r2, r3, #12
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083f8:	7812      	ldrb	r2, [r2, #0]
 80083fa:	b2d2      	uxtb	r2, r2
 80083fc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008402:	1c5a      	adds	r2, r3, #1
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800840e:	b29b      	uxth	r3, r3
 8008410:	3b01      	subs	r3, #1
 8008412:	b29a      	uxth	r2, r3
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800841a:	e011      	b.n	8008440 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800841c:	f7fb f9ee 	bl	80037fc <HAL_GetTick>
 8008420:	4602      	mov	r2, r0
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	1ad3      	subs	r3, r2, r3
 8008426:	683a      	ldr	r2, [r7, #0]
 8008428:	429a      	cmp	r2, r3
 800842a:	d803      	bhi.n	8008434 <HAL_SPI_Receive+0x19c>
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008432:	d102      	bne.n	800843a <HAL_SPI_Receive+0x1a2>
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d102      	bne.n	8008440 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 800843a:	2303      	movs	r3, #3
 800843c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800843e:	e04e      	b.n	80084de <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008446:	b29b      	uxth	r3, r3
 8008448:	2b00      	cmp	r3, #0
 800844a:	d1c8      	bne.n	80083de <HAL_SPI_Receive+0x146>
 800844c:	e034      	b.n	80084b8 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	689b      	ldr	r3, [r3, #8]
 8008454:	f003 0301 	and.w	r3, r3, #1
 8008458:	2b01      	cmp	r3, #1
 800845a:	d115      	bne.n	8008488 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	68da      	ldr	r2, [r3, #12]
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008466:	b292      	uxth	r2, r2
 8008468:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800846e:	1c9a      	adds	r2, r3, #2
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800847a:	b29b      	uxth	r3, r3
 800847c:	3b01      	subs	r3, #1
 800847e:	b29a      	uxth	r2, r3
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8008486:	e011      	b.n	80084ac <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008488:	f7fb f9b8 	bl	80037fc <HAL_GetTick>
 800848c:	4602      	mov	r2, r0
 800848e:	693b      	ldr	r3, [r7, #16]
 8008490:	1ad3      	subs	r3, r2, r3
 8008492:	683a      	ldr	r2, [r7, #0]
 8008494:	429a      	cmp	r2, r3
 8008496:	d803      	bhi.n	80084a0 <HAL_SPI_Receive+0x208>
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800849e:	d102      	bne.n	80084a6 <HAL_SPI_Receive+0x20e>
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d102      	bne.n	80084ac <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 80084a6:	2303      	movs	r3, #3
 80084a8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80084aa:	e018      	b.n	80084de <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80084b2:	b29b      	uxth	r3, r3
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d1ca      	bne.n	800844e <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80084b8:	693a      	ldr	r2, [r7, #16]
 80084ba:	6839      	ldr	r1, [r7, #0]
 80084bc:	68f8      	ldr	r0, [r7, #12]
 80084be:	f000 fb4d 	bl	8008b5c <SPI_EndRxTransaction>
 80084c2:	4603      	mov	r3, r0
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d002      	beq.n	80084ce <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	2220      	movs	r2, #32
 80084cc:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d002      	beq.n	80084dc <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 80084d6:	2301      	movs	r3, #1
 80084d8:	75fb      	strb	r3, [r7, #23]
 80084da:	e000      	b.n	80084de <HAL_SPI_Receive+0x246>
  }

error :
 80084dc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	2201      	movs	r2, #1
 80084e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	2200      	movs	r2, #0
 80084ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80084ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80084f0:	4618      	mov	r0, r3
 80084f2:	3718      	adds	r7, #24
 80084f4:	46bd      	mov	sp, r7
 80084f6:	bd80      	pop	{r7, pc}

080084f8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b08a      	sub	sp, #40	; 0x28
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	60f8      	str	r0, [r7, #12]
 8008500:	60b9      	str	r1, [r7, #8]
 8008502:	607a      	str	r2, [r7, #4]
 8008504:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008506:	2301      	movs	r3, #1
 8008508:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800850a:	2300      	movs	r3, #0
 800850c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008516:	2b01      	cmp	r3, #1
 8008518:	d101      	bne.n	800851e <HAL_SPI_TransmitReceive+0x26>
 800851a:	2302      	movs	r3, #2
 800851c:	e1fb      	b.n	8008916 <HAL_SPI_TransmitReceive+0x41e>
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	2201      	movs	r2, #1
 8008522:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008526:	f7fb f969 	bl	80037fc <HAL_GetTick>
 800852a:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008532:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	685b      	ldr	r3, [r3, #4]
 8008538:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800853a:	887b      	ldrh	r3, [r7, #2]
 800853c:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800853e:	887b      	ldrh	r3, [r7, #2]
 8008540:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008542:	7efb      	ldrb	r3, [r7, #27]
 8008544:	2b01      	cmp	r3, #1
 8008546:	d00e      	beq.n	8008566 <HAL_SPI_TransmitReceive+0x6e>
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800854e:	d106      	bne.n	800855e <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	689b      	ldr	r3, [r3, #8]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d102      	bne.n	800855e <HAL_SPI_TransmitReceive+0x66>
 8008558:	7efb      	ldrb	r3, [r7, #27]
 800855a:	2b04      	cmp	r3, #4
 800855c:	d003      	beq.n	8008566 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800855e:	2302      	movs	r3, #2
 8008560:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8008564:	e1cd      	b.n	8008902 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008566:	68bb      	ldr	r3, [r7, #8]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d005      	beq.n	8008578 <HAL_SPI_TransmitReceive+0x80>
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d002      	beq.n	8008578 <HAL_SPI_TransmitReceive+0x80>
 8008572:	887b      	ldrh	r3, [r7, #2]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d103      	bne.n	8008580 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8008578:	2301      	movs	r3, #1
 800857a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800857e:	e1c0      	b.n	8008902 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008586:	b2db      	uxtb	r3, r3
 8008588:	2b04      	cmp	r3, #4
 800858a:	d003      	beq.n	8008594 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	2205      	movs	r2, #5
 8008590:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	2200      	movs	r2, #0
 8008598:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	687a      	ldr	r2, [r7, #4]
 800859e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	887a      	ldrh	r2, [r7, #2]
 80085a4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	887a      	ldrh	r2, [r7, #2]
 80085ac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	68ba      	ldr	r2, [r7, #8]
 80085b4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	887a      	ldrh	r2, [r7, #2]
 80085ba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	887a      	ldrh	r2, [r7, #2]
 80085c0:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	2200      	movs	r2, #0
 80085c6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	2200      	movs	r2, #0
 80085cc:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	68db      	ldr	r3, [r3, #12]
 80085d2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80085d6:	d802      	bhi.n	80085de <HAL_SPI_TransmitReceive+0xe6>
 80085d8:	8a3b      	ldrh	r3, [r7, #16]
 80085da:	2b01      	cmp	r3, #1
 80085dc:	d908      	bls.n	80085f0 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	685a      	ldr	r2, [r3, #4]
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80085ec:	605a      	str	r2, [r3, #4]
 80085ee:	e007      	b.n	8008600 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	685a      	ldr	r2, [r3, #4]
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80085fe:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800860a:	2b40      	cmp	r3, #64	; 0x40
 800860c:	d007      	beq.n	800861e <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	681a      	ldr	r2, [r3, #0]
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800861c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	68db      	ldr	r3, [r3, #12]
 8008622:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008626:	d97c      	bls.n	8008722 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	685b      	ldr	r3, [r3, #4]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d002      	beq.n	8008636 <HAL_SPI_TransmitReceive+0x13e>
 8008630:	8a7b      	ldrh	r3, [r7, #18]
 8008632:	2b01      	cmp	r3, #1
 8008634:	d169      	bne.n	800870a <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800863a:	881a      	ldrh	r2, [r3, #0]
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008646:	1c9a      	adds	r2, r3, #2
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008650:	b29b      	uxth	r3, r3
 8008652:	3b01      	subs	r3, #1
 8008654:	b29a      	uxth	r2, r3
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800865a:	e056      	b.n	800870a <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	689b      	ldr	r3, [r3, #8]
 8008662:	f003 0302 	and.w	r3, r3, #2
 8008666:	2b02      	cmp	r3, #2
 8008668:	d11b      	bne.n	80086a2 <HAL_SPI_TransmitReceive+0x1aa>
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800866e:	b29b      	uxth	r3, r3
 8008670:	2b00      	cmp	r3, #0
 8008672:	d016      	beq.n	80086a2 <HAL_SPI_TransmitReceive+0x1aa>
 8008674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008676:	2b01      	cmp	r3, #1
 8008678:	d113      	bne.n	80086a2 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800867e:	881a      	ldrh	r2, [r3, #0]
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800868a:	1c9a      	adds	r2, r3, #2
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008694:	b29b      	uxth	r3, r3
 8008696:	3b01      	subs	r3, #1
 8008698:	b29a      	uxth	r2, r3
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800869e:	2300      	movs	r3, #0
 80086a0:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	689b      	ldr	r3, [r3, #8]
 80086a8:	f003 0301 	and.w	r3, r3, #1
 80086ac:	2b01      	cmp	r3, #1
 80086ae:	d11c      	bne.n	80086ea <HAL_SPI_TransmitReceive+0x1f2>
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80086b6:	b29b      	uxth	r3, r3
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d016      	beq.n	80086ea <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	68da      	ldr	r2, [r3, #12]
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086c6:	b292      	uxth	r2, r2
 80086c8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ce:	1c9a      	adds	r2, r3, #2
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80086da:	b29b      	uxth	r3, r3
 80086dc:	3b01      	subs	r3, #1
 80086de:	b29a      	uxth	r2, r3
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80086e6:	2301      	movs	r3, #1
 80086e8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80086ea:	f7fb f887 	bl	80037fc <HAL_GetTick>
 80086ee:	4602      	mov	r2, r0
 80086f0:	69fb      	ldr	r3, [r7, #28]
 80086f2:	1ad3      	subs	r3, r2, r3
 80086f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086f6:	429a      	cmp	r2, r3
 80086f8:	d807      	bhi.n	800870a <HAL_SPI_TransmitReceive+0x212>
 80086fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008700:	d003      	beq.n	800870a <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8008702:	2303      	movs	r3, #3
 8008704:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8008708:	e0fb      	b.n	8008902 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800870e:	b29b      	uxth	r3, r3
 8008710:	2b00      	cmp	r3, #0
 8008712:	d1a3      	bne.n	800865c <HAL_SPI_TransmitReceive+0x164>
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800871a:	b29b      	uxth	r3, r3
 800871c:	2b00      	cmp	r3, #0
 800871e:	d19d      	bne.n	800865c <HAL_SPI_TransmitReceive+0x164>
 8008720:	e0df      	b.n	80088e2 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	685b      	ldr	r3, [r3, #4]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d003      	beq.n	8008732 <HAL_SPI_TransmitReceive+0x23a>
 800872a:	8a7b      	ldrh	r3, [r7, #18]
 800872c:	2b01      	cmp	r3, #1
 800872e:	f040 80cb 	bne.w	80088c8 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008736:	b29b      	uxth	r3, r3
 8008738:	2b01      	cmp	r3, #1
 800873a:	d912      	bls.n	8008762 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008740:	881a      	ldrh	r2, [r3, #0]
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800874c:	1c9a      	adds	r2, r3, #2
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008756:	b29b      	uxth	r3, r3
 8008758:	3b02      	subs	r3, #2
 800875a:	b29a      	uxth	r2, r3
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008760:	e0b2      	b.n	80088c8 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	330c      	adds	r3, #12
 800876c:	7812      	ldrb	r2, [r2, #0]
 800876e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008774:	1c5a      	adds	r2, r3, #1
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800877e:	b29b      	uxth	r3, r3
 8008780:	3b01      	subs	r3, #1
 8008782:	b29a      	uxth	r2, r3
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008788:	e09e      	b.n	80088c8 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	689b      	ldr	r3, [r3, #8]
 8008790:	f003 0302 	and.w	r3, r3, #2
 8008794:	2b02      	cmp	r3, #2
 8008796:	d134      	bne.n	8008802 <HAL_SPI_TransmitReceive+0x30a>
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800879c:	b29b      	uxth	r3, r3
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d02f      	beq.n	8008802 <HAL_SPI_TransmitReceive+0x30a>
 80087a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087a4:	2b01      	cmp	r3, #1
 80087a6:	d12c      	bne.n	8008802 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80087ac:	b29b      	uxth	r3, r3
 80087ae:	2b01      	cmp	r3, #1
 80087b0:	d912      	bls.n	80087d8 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087b6:	881a      	ldrh	r2, [r3, #0]
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087c2:	1c9a      	adds	r2, r3, #2
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80087cc:	b29b      	uxth	r3, r3
 80087ce:	3b02      	subs	r3, #2
 80087d0:	b29a      	uxth	r2, r3
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80087d6:	e012      	b.n	80087fe <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	330c      	adds	r3, #12
 80087e2:	7812      	ldrb	r2, [r2, #0]
 80087e4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087ea:	1c5a      	adds	r2, r3, #1
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80087f4:	b29b      	uxth	r3, r3
 80087f6:	3b01      	subs	r3, #1
 80087f8:	b29a      	uxth	r2, r3
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80087fe:	2300      	movs	r3, #0
 8008800:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	689b      	ldr	r3, [r3, #8]
 8008808:	f003 0301 	and.w	r3, r3, #1
 800880c:	2b01      	cmp	r3, #1
 800880e:	d148      	bne.n	80088a2 <HAL_SPI_TransmitReceive+0x3aa>
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008816:	b29b      	uxth	r3, r3
 8008818:	2b00      	cmp	r3, #0
 800881a:	d042      	beq.n	80088a2 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008822:	b29b      	uxth	r3, r3
 8008824:	2b01      	cmp	r3, #1
 8008826:	d923      	bls.n	8008870 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	68da      	ldr	r2, [r3, #12]
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008832:	b292      	uxth	r2, r2
 8008834:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800883a:	1c9a      	adds	r2, r3, #2
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008846:	b29b      	uxth	r3, r3
 8008848:	3b02      	subs	r3, #2
 800884a:	b29a      	uxth	r2, r3
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008858:	b29b      	uxth	r3, r3
 800885a:	2b01      	cmp	r3, #1
 800885c:	d81f      	bhi.n	800889e <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	685a      	ldr	r2, [r3, #4]
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800886c:	605a      	str	r2, [r3, #4]
 800886e:	e016      	b.n	800889e <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f103 020c 	add.w	r2, r3, #12
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800887c:	7812      	ldrb	r2, [r2, #0]
 800887e:	b2d2      	uxtb	r2, r2
 8008880:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008886:	1c5a      	adds	r2, r3, #1
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008892:	b29b      	uxth	r3, r3
 8008894:	3b01      	subs	r3, #1
 8008896:	b29a      	uxth	r2, r3
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800889e:	2301      	movs	r3, #1
 80088a0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80088a2:	f7fa ffab 	bl	80037fc <HAL_GetTick>
 80088a6:	4602      	mov	r2, r0
 80088a8:	69fb      	ldr	r3, [r7, #28]
 80088aa:	1ad3      	subs	r3, r2, r3
 80088ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088ae:	429a      	cmp	r2, r3
 80088b0:	d803      	bhi.n	80088ba <HAL_SPI_TransmitReceive+0x3c2>
 80088b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088b8:	d102      	bne.n	80088c0 <HAL_SPI_TransmitReceive+0x3c8>
 80088ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d103      	bne.n	80088c8 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80088c0:	2303      	movs	r3, #3
 80088c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80088c6:	e01c      	b.n	8008902 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80088cc:	b29b      	uxth	r3, r3
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	f47f af5b 	bne.w	800878a <HAL_SPI_TransmitReceive+0x292>
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80088da:	b29b      	uxth	r3, r3
 80088dc:	2b00      	cmp	r3, #0
 80088de:	f47f af54 	bne.w	800878a <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80088e2:	69fa      	ldr	r2, [r7, #28]
 80088e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80088e6:	68f8      	ldr	r0, [r7, #12]
 80088e8:	f000 f990 	bl	8008c0c <SPI_EndRxTxTransaction>
 80088ec:	4603      	mov	r3, r0
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d006      	beq.n	8008900 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80088f2:	2301      	movs	r3, #1
 80088f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	2220      	movs	r2, #32
 80088fc:	661a      	str	r2, [r3, #96]	; 0x60
 80088fe:	e000      	b.n	8008902 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8008900:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	2201      	movs	r2, #1
 8008906:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	2200      	movs	r2, #0
 800890e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008912:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8008916:	4618      	mov	r0, r3
 8008918:	3728      	adds	r7, #40	; 0x28
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}
	...

08008920 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b088      	sub	sp, #32
 8008924:	af00      	add	r7, sp, #0
 8008926:	60f8      	str	r0, [r7, #12]
 8008928:	60b9      	str	r1, [r7, #8]
 800892a:	603b      	str	r3, [r7, #0]
 800892c:	4613      	mov	r3, r2
 800892e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008930:	f7fa ff64 	bl	80037fc <HAL_GetTick>
 8008934:	4602      	mov	r2, r0
 8008936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008938:	1a9b      	subs	r3, r3, r2
 800893a:	683a      	ldr	r2, [r7, #0]
 800893c:	4413      	add	r3, r2
 800893e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008940:	f7fa ff5c 	bl	80037fc <HAL_GetTick>
 8008944:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008946:	4b39      	ldr	r3, [pc, #228]	; (8008a2c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	015b      	lsls	r3, r3, #5
 800894c:	0d1b      	lsrs	r3, r3, #20
 800894e:	69fa      	ldr	r2, [r7, #28]
 8008950:	fb02 f303 	mul.w	r3, r2, r3
 8008954:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008956:	e054      	b.n	8008a02 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800895e:	d050      	beq.n	8008a02 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008960:	f7fa ff4c 	bl	80037fc <HAL_GetTick>
 8008964:	4602      	mov	r2, r0
 8008966:	69bb      	ldr	r3, [r7, #24]
 8008968:	1ad3      	subs	r3, r2, r3
 800896a:	69fa      	ldr	r2, [r7, #28]
 800896c:	429a      	cmp	r2, r3
 800896e:	d902      	bls.n	8008976 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008970:	69fb      	ldr	r3, [r7, #28]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d13d      	bne.n	80089f2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	685a      	ldr	r2, [r3, #4]
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008984:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	685b      	ldr	r3, [r3, #4]
 800898a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800898e:	d111      	bne.n	80089b4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	689b      	ldr	r3, [r3, #8]
 8008994:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008998:	d004      	beq.n	80089a4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	689b      	ldr	r3, [r3, #8]
 800899e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80089a2:	d107      	bne.n	80089b4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	681a      	ldr	r2, [r3, #0]
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80089b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80089bc:	d10f      	bne.n	80089de <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	681a      	ldr	r2, [r3, #0]
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80089cc:	601a      	str	r2, [r3, #0]
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	681a      	ldr	r2, [r3, #0]
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80089dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	2201      	movs	r2, #1
 80089e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	2200      	movs	r2, #0
 80089ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80089ee:	2303      	movs	r3, #3
 80089f0:	e017      	b.n	8008a22 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80089f2:	697b      	ldr	r3, [r7, #20]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d101      	bne.n	80089fc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80089f8:	2300      	movs	r3, #0
 80089fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80089fc:	697b      	ldr	r3, [r7, #20]
 80089fe:	3b01      	subs	r3, #1
 8008a00:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	689a      	ldr	r2, [r3, #8]
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	4013      	ands	r3, r2
 8008a0c:	68ba      	ldr	r2, [r7, #8]
 8008a0e:	429a      	cmp	r2, r3
 8008a10:	bf0c      	ite	eq
 8008a12:	2301      	moveq	r3, #1
 8008a14:	2300      	movne	r3, #0
 8008a16:	b2db      	uxtb	r3, r3
 8008a18:	461a      	mov	r2, r3
 8008a1a:	79fb      	ldrb	r3, [r7, #7]
 8008a1c:	429a      	cmp	r2, r3
 8008a1e:	d19b      	bne.n	8008958 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008a20:	2300      	movs	r3, #0
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	3720      	adds	r7, #32
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}
 8008a2a:	bf00      	nop
 8008a2c:	20000008 	.word	0x20000008

08008a30 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b08a      	sub	sp, #40	; 0x28
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	60f8      	str	r0, [r7, #12]
 8008a38:	60b9      	str	r1, [r7, #8]
 8008a3a:	607a      	str	r2, [r7, #4]
 8008a3c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008a3e:	2300      	movs	r3, #0
 8008a40:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008a42:	f7fa fedb 	bl	80037fc <HAL_GetTick>
 8008a46:	4602      	mov	r2, r0
 8008a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a4a:	1a9b      	subs	r3, r3, r2
 8008a4c:	683a      	ldr	r2, [r7, #0]
 8008a4e:	4413      	add	r3, r2
 8008a50:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8008a52:	f7fa fed3 	bl	80037fc <HAL_GetTick>
 8008a56:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	330c      	adds	r3, #12
 8008a5e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008a60:	4b3d      	ldr	r3, [pc, #244]	; (8008b58 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8008a62:	681a      	ldr	r2, [r3, #0]
 8008a64:	4613      	mov	r3, r2
 8008a66:	009b      	lsls	r3, r3, #2
 8008a68:	4413      	add	r3, r2
 8008a6a:	00da      	lsls	r2, r3, #3
 8008a6c:	1ad3      	subs	r3, r2, r3
 8008a6e:	0d1b      	lsrs	r3, r3, #20
 8008a70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a72:	fb02 f303 	mul.w	r3, r2, r3
 8008a76:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008a78:	e060      	b.n	8008b3c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008a7a:	68bb      	ldr	r3, [r7, #8]
 8008a7c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008a80:	d107      	bne.n	8008a92 <SPI_WaitFifoStateUntilTimeout+0x62>
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d104      	bne.n	8008a92 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008a88:	69fb      	ldr	r3, [r7, #28]
 8008a8a:	781b      	ldrb	r3, [r3, #0]
 8008a8c:	b2db      	uxtb	r3, r3
 8008a8e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008a90:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a98:	d050      	beq.n	8008b3c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008a9a:	f7fa feaf 	bl	80037fc <HAL_GetTick>
 8008a9e:	4602      	mov	r2, r0
 8008aa0:	6a3b      	ldr	r3, [r7, #32]
 8008aa2:	1ad3      	subs	r3, r2, r3
 8008aa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008aa6:	429a      	cmp	r2, r3
 8008aa8:	d902      	bls.n	8008ab0 <SPI_WaitFifoStateUntilTimeout+0x80>
 8008aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d13d      	bne.n	8008b2c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	685a      	ldr	r2, [r3, #4]
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008abe:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	685b      	ldr	r3, [r3, #4]
 8008ac4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008ac8:	d111      	bne.n	8008aee <SPI_WaitFifoStateUntilTimeout+0xbe>
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	689b      	ldr	r3, [r3, #8]
 8008ace:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ad2:	d004      	beq.n	8008ade <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	689b      	ldr	r3, [r3, #8]
 8008ad8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008adc:	d107      	bne.n	8008aee <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	681a      	ldr	r2, [r3, #0]
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008aec:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008af2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008af6:	d10f      	bne.n	8008b18 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	681a      	ldr	r2, [r3, #0]
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008b06:	601a      	str	r2, [r3, #0]
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	681a      	ldr	r2, [r3, #0]
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008b16:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	2201      	movs	r2, #1
 8008b1c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	2200      	movs	r2, #0
 8008b24:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008b28:	2303      	movs	r3, #3
 8008b2a:	e010      	b.n	8008b4e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008b2c:	69bb      	ldr	r3, [r7, #24]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d101      	bne.n	8008b36 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8008b32:	2300      	movs	r3, #0
 8008b34:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8008b36:	69bb      	ldr	r3, [r7, #24]
 8008b38:	3b01      	subs	r3, #1
 8008b3a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	689a      	ldr	r2, [r3, #8]
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	4013      	ands	r3, r2
 8008b46:	687a      	ldr	r2, [r7, #4]
 8008b48:	429a      	cmp	r2, r3
 8008b4a:	d196      	bne.n	8008a7a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8008b4c:	2300      	movs	r3, #0
}
 8008b4e:	4618      	mov	r0, r3
 8008b50:	3728      	adds	r7, #40	; 0x28
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}
 8008b56:	bf00      	nop
 8008b58:	20000008 	.word	0x20000008

08008b5c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b086      	sub	sp, #24
 8008b60:	af02      	add	r7, sp, #8
 8008b62:	60f8      	str	r0, [r7, #12]
 8008b64:	60b9      	str	r1, [r7, #8]
 8008b66:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	685b      	ldr	r3, [r3, #4]
 8008b6c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008b70:	d111      	bne.n	8008b96 <SPI_EndRxTransaction+0x3a>
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	689b      	ldr	r3, [r3, #8]
 8008b76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b7a:	d004      	beq.n	8008b86 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	689b      	ldr	r3, [r3, #8]
 8008b80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b84:	d107      	bne.n	8008b96 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	681a      	ldr	r2, [r3, #0]
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b94:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	9300      	str	r3, [sp, #0]
 8008b9a:	68bb      	ldr	r3, [r7, #8]
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	2180      	movs	r1, #128	; 0x80
 8008ba0:	68f8      	ldr	r0, [r7, #12]
 8008ba2:	f7ff febd 	bl	8008920 <SPI_WaitFlagStateUntilTimeout>
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d007      	beq.n	8008bbc <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008bb0:	f043 0220 	orr.w	r2, r3, #32
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008bb8:	2303      	movs	r3, #3
 8008bba:	e023      	b.n	8008c04 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	685b      	ldr	r3, [r3, #4]
 8008bc0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008bc4:	d11d      	bne.n	8008c02 <SPI_EndRxTransaction+0xa6>
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	689b      	ldr	r3, [r3, #8]
 8008bca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008bce:	d004      	beq.n	8008bda <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	689b      	ldr	r3, [r3, #8]
 8008bd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008bd8:	d113      	bne.n	8008c02 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	9300      	str	r3, [sp, #0]
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	2200      	movs	r2, #0
 8008be2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008be6:	68f8      	ldr	r0, [r7, #12]
 8008be8:	f7ff ff22 	bl	8008a30 <SPI_WaitFifoStateUntilTimeout>
 8008bec:	4603      	mov	r3, r0
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d007      	beq.n	8008c02 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008bf6:	f043 0220 	orr.w	r2, r3, #32
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8008bfe:	2303      	movs	r3, #3
 8008c00:	e000      	b.n	8008c04 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8008c02:	2300      	movs	r3, #0
}
 8008c04:	4618      	mov	r0, r3
 8008c06:	3710      	adds	r7, #16
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}

08008c0c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b086      	sub	sp, #24
 8008c10:	af02      	add	r7, sp, #8
 8008c12:	60f8      	str	r0, [r7, #12]
 8008c14:	60b9      	str	r1, [r7, #8]
 8008c16:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	9300      	str	r3, [sp, #0]
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	2200      	movs	r2, #0
 8008c20:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8008c24:	68f8      	ldr	r0, [r7, #12]
 8008c26:	f7ff ff03 	bl	8008a30 <SPI_WaitFifoStateUntilTimeout>
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d007      	beq.n	8008c40 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c34:	f043 0220 	orr.w	r2, r3, #32
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008c3c:	2303      	movs	r3, #3
 8008c3e:	e027      	b.n	8008c90 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	9300      	str	r3, [sp, #0]
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	2200      	movs	r2, #0
 8008c48:	2180      	movs	r1, #128	; 0x80
 8008c4a:	68f8      	ldr	r0, [r7, #12]
 8008c4c:	f7ff fe68 	bl	8008920 <SPI_WaitFlagStateUntilTimeout>
 8008c50:	4603      	mov	r3, r0
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d007      	beq.n	8008c66 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c5a:	f043 0220 	orr.w	r2, r3, #32
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008c62:	2303      	movs	r3, #3
 8008c64:	e014      	b.n	8008c90 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	9300      	str	r3, [sp, #0]
 8008c6a:	68bb      	ldr	r3, [r7, #8]
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008c72:	68f8      	ldr	r0, [r7, #12]
 8008c74:	f7ff fedc 	bl	8008a30 <SPI_WaitFifoStateUntilTimeout>
 8008c78:	4603      	mov	r3, r0
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d007      	beq.n	8008c8e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c82:	f043 0220 	orr.w	r2, r3, #32
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008c8a:	2303      	movs	r3, #3
 8008c8c:	e000      	b.n	8008c90 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008c8e:	2300      	movs	r3, #0
}
 8008c90:	4618      	mov	r0, r3
 8008c92:	3710      	adds	r7, #16
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd80      	pop	{r7, pc}

08008c98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b082      	sub	sp, #8
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d101      	bne.n	8008caa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	e049      	b.n	8008d3e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008cb0:	b2db      	uxtb	r3, r3
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d106      	bne.n	8008cc4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2200      	movs	r2, #0
 8008cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008cbe:	6878      	ldr	r0, [r7, #4]
 8008cc0:	f7fa f8ae 	bl	8002e20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2202      	movs	r2, #2
 8008cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681a      	ldr	r2, [r3, #0]
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	3304      	adds	r3, #4
 8008cd4:	4619      	mov	r1, r3
 8008cd6:	4610      	mov	r0, r2
 8008cd8:	f000 ffaa 	bl	8009c30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2201      	movs	r2, #1
 8008ce0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2201      	movs	r2, #1
 8008ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2201      	movs	r2, #1
 8008cf0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2201      	movs	r2, #1
 8008cf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2201      	movs	r2, #1
 8008d00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2201      	movs	r2, #1
 8008d08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2201      	movs	r2, #1
 8008d10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2201      	movs	r2, #1
 8008d18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2201      	movs	r2, #1
 8008d20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2201      	movs	r2, #1
 8008d28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2201      	movs	r2, #1
 8008d30:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2201      	movs	r2, #1
 8008d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008d3c:	2300      	movs	r3, #0
}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	3708      	adds	r7, #8
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}
	...

08008d48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008d48:	b480      	push	{r7}
 8008d4a:	b085      	sub	sp, #20
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d56:	b2db      	uxtb	r3, r3
 8008d58:	2b01      	cmp	r3, #1
 8008d5a:	d001      	beq.n	8008d60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008d5c:	2301      	movs	r3, #1
 8008d5e:	e04f      	b.n	8008e00 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2202      	movs	r2, #2
 8008d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	68da      	ldr	r2, [r3, #12]
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f042 0201 	orr.w	r2, r2, #1
 8008d76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	4a23      	ldr	r2, [pc, #140]	; (8008e0c <HAL_TIM_Base_Start_IT+0xc4>)
 8008d7e:	4293      	cmp	r3, r2
 8008d80:	d01d      	beq.n	8008dbe <HAL_TIM_Base_Start_IT+0x76>
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d8a:	d018      	beq.n	8008dbe <HAL_TIM_Base_Start_IT+0x76>
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	4a1f      	ldr	r2, [pc, #124]	; (8008e10 <HAL_TIM_Base_Start_IT+0xc8>)
 8008d92:	4293      	cmp	r3, r2
 8008d94:	d013      	beq.n	8008dbe <HAL_TIM_Base_Start_IT+0x76>
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	4a1e      	ldr	r2, [pc, #120]	; (8008e14 <HAL_TIM_Base_Start_IT+0xcc>)
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	d00e      	beq.n	8008dbe <HAL_TIM_Base_Start_IT+0x76>
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	4a1c      	ldr	r2, [pc, #112]	; (8008e18 <HAL_TIM_Base_Start_IT+0xd0>)
 8008da6:	4293      	cmp	r3, r2
 8008da8:	d009      	beq.n	8008dbe <HAL_TIM_Base_Start_IT+0x76>
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	4a1b      	ldr	r2, [pc, #108]	; (8008e1c <HAL_TIM_Base_Start_IT+0xd4>)
 8008db0:	4293      	cmp	r3, r2
 8008db2:	d004      	beq.n	8008dbe <HAL_TIM_Base_Start_IT+0x76>
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	4a19      	ldr	r2, [pc, #100]	; (8008e20 <HAL_TIM_Base_Start_IT+0xd8>)
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	d115      	bne.n	8008dea <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	689a      	ldr	r2, [r3, #8]
 8008dc4:	4b17      	ldr	r3, [pc, #92]	; (8008e24 <HAL_TIM_Base_Start_IT+0xdc>)
 8008dc6:	4013      	ands	r3, r2
 8008dc8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	2b06      	cmp	r3, #6
 8008dce:	d015      	beq.n	8008dfc <HAL_TIM_Base_Start_IT+0xb4>
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008dd6:	d011      	beq.n	8008dfc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	681a      	ldr	r2, [r3, #0]
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f042 0201 	orr.w	r2, r2, #1
 8008de6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008de8:	e008      	b.n	8008dfc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	681a      	ldr	r2, [r3, #0]
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f042 0201 	orr.w	r2, r2, #1
 8008df8:	601a      	str	r2, [r3, #0]
 8008dfa:	e000      	b.n	8008dfe <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008dfc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008dfe:	2300      	movs	r3, #0
}
 8008e00:	4618      	mov	r0, r3
 8008e02:	3714      	adds	r7, #20
 8008e04:	46bd      	mov	sp, r7
 8008e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0a:	4770      	bx	lr
 8008e0c:	40012c00 	.word	0x40012c00
 8008e10:	40000400 	.word	0x40000400
 8008e14:	40000800 	.word	0x40000800
 8008e18:	40000c00 	.word	0x40000c00
 8008e1c:	40013400 	.word	0x40013400
 8008e20:	40014000 	.word	0x40014000
 8008e24:	00010007 	.word	0x00010007

08008e28 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008e28:	b480      	push	{r7}
 8008e2a:	b083      	sub	sp, #12
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	68da      	ldr	r2, [r3, #12]
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	f022 0201 	bic.w	r2, r2, #1
 8008e3e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	6a1a      	ldr	r2, [r3, #32]
 8008e46:	f241 1311 	movw	r3, #4369	; 0x1111
 8008e4a:	4013      	ands	r3, r2
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d10f      	bne.n	8008e70 <HAL_TIM_Base_Stop_IT+0x48>
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	6a1a      	ldr	r2, [r3, #32]
 8008e56:	f240 4344 	movw	r3, #1092	; 0x444
 8008e5a:	4013      	ands	r3, r2
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d107      	bne.n	8008e70 <HAL_TIM_Base_Stop_IT+0x48>
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	681a      	ldr	r2, [r3, #0]
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f022 0201 	bic.w	r2, r2, #1
 8008e6e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2201      	movs	r2, #1
 8008e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008e78:	2300      	movs	r3, #0
}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	370c      	adds	r7, #12
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e84:	4770      	bx	lr

08008e86 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008e86:	b580      	push	{r7, lr}
 8008e88:	b082      	sub	sp, #8
 8008e8a:	af00      	add	r7, sp, #0
 8008e8c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d101      	bne.n	8008e98 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008e94:	2301      	movs	r3, #1
 8008e96:	e049      	b.n	8008f2c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e9e:	b2db      	uxtb	r3, r3
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d106      	bne.n	8008eb2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	f7fa f911 	bl	80030d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2202      	movs	r2, #2
 8008eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681a      	ldr	r2, [r3, #0]
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	3304      	adds	r3, #4
 8008ec2:	4619      	mov	r1, r3
 8008ec4:	4610      	mov	r0, r2
 8008ec6:	f000 feb3 	bl	8009c30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2201      	movs	r2, #1
 8008ece:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2201      	movs	r2, #1
 8008ed6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2201      	movs	r2, #1
 8008ede:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2201      	movs	r2, #1
 8008ee6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2201      	movs	r2, #1
 8008eee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2201      	movs	r2, #1
 8008ef6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2201      	movs	r2, #1
 8008efe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2201      	movs	r2, #1
 8008f06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	2201      	movs	r2, #1
 8008f0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2201      	movs	r2, #1
 8008f16:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2201      	movs	r2, #1
 8008f1e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2201      	movs	r2, #1
 8008f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008f2a:	2300      	movs	r3, #0
}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	3708      	adds	r7, #8
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}

08008f34 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b084      	sub	sp, #16
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
 8008f3c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d109      	bne.n	8008f58 <HAL_TIM_PWM_Start+0x24>
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008f4a:	b2db      	uxtb	r3, r3
 8008f4c:	2b01      	cmp	r3, #1
 8008f4e:	bf14      	ite	ne
 8008f50:	2301      	movne	r3, #1
 8008f52:	2300      	moveq	r3, #0
 8008f54:	b2db      	uxtb	r3, r3
 8008f56:	e03c      	b.n	8008fd2 <HAL_TIM_PWM_Start+0x9e>
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	2b04      	cmp	r3, #4
 8008f5c:	d109      	bne.n	8008f72 <HAL_TIM_PWM_Start+0x3e>
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008f64:	b2db      	uxtb	r3, r3
 8008f66:	2b01      	cmp	r3, #1
 8008f68:	bf14      	ite	ne
 8008f6a:	2301      	movne	r3, #1
 8008f6c:	2300      	moveq	r3, #0
 8008f6e:	b2db      	uxtb	r3, r3
 8008f70:	e02f      	b.n	8008fd2 <HAL_TIM_PWM_Start+0x9e>
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	2b08      	cmp	r3, #8
 8008f76:	d109      	bne.n	8008f8c <HAL_TIM_PWM_Start+0x58>
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008f7e:	b2db      	uxtb	r3, r3
 8008f80:	2b01      	cmp	r3, #1
 8008f82:	bf14      	ite	ne
 8008f84:	2301      	movne	r3, #1
 8008f86:	2300      	moveq	r3, #0
 8008f88:	b2db      	uxtb	r3, r3
 8008f8a:	e022      	b.n	8008fd2 <HAL_TIM_PWM_Start+0x9e>
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	2b0c      	cmp	r3, #12
 8008f90:	d109      	bne.n	8008fa6 <HAL_TIM_PWM_Start+0x72>
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008f98:	b2db      	uxtb	r3, r3
 8008f9a:	2b01      	cmp	r3, #1
 8008f9c:	bf14      	ite	ne
 8008f9e:	2301      	movne	r3, #1
 8008fa0:	2300      	moveq	r3, #0
 8008fa2:	b2db      	uxtb	r3, r3
 8008fa4:	e015      	b.n	8008fd2 <HAL_TIM_PWM_Start+0x9e>
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	2b10      	cmp	r3, #16
 8008faa:	d109      	bne.n	8008fc0 <HAL_TIM_PWM_Start+0x8c>
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008fb2:	b2db      	uxtb	r3, r3
 8008fb4:	2b01      	cmp	r3, #1
 8008fb6:	bf14      	ite	ne
 8008fb8:	2301      	movne	r3, #1
 8008fba:	2300      	moveq	r3, #0
 8008fbc:	b2db      	uxtb	r3, r3
 8008fbe:	e008      	b.n	8008fd2 <HAL_TIM_PWM_Start+0x9e>
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008fc6:	b2db      	uxtb	r3, r3
 8008fc8:	2b01      	cmp	r3, #1
 8008fca:	bf14      	ite	ne
 8008fcc:	2301      	movne	r3, #1
 8008fce:	2300      	moveq	r3, #0
 8008fd0:	b2db      	uxtb	r3, r3
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d001      	beq.n	8008fda <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008fd6:	2301      	movs	r3, #1
 8008fd8:	e09c      	b.n	8009114 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d104      	bne.n	8008fea <HAL_TIM_PWM_Start+0xb6>
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2202      	movs	r2, #2
 8008fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008fe8:	e023      	b.n	8009032 <HAL_TIM_PWM_Start+0xfe>
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	2b04      	cmp	r3, #4
 8008fee:	d104      	bne.n	8008ffa <HAL_TIM_PWM_Start+0xc6>
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2202      	movs	r2, #2
 8008ff4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008ff8:	e01b      	b.n	8009032 <HAL_TIM_PWM_Start+0xfe>
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	2b08      	cmp	r3, #8
 8008ffe:	d104      	bne.n	800900a <HAL_TIM_PWM_Start+0xd6>
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2202      	movs	r2, #2
 8009004:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009008:	e013      	b.n	8009032 <HAL_TIM_PWM_Start+0xfe>
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	2b0c      	cmp	r3, #12
 800900e:	d104      	bne.n	800901a <HAL_TIM_PWM_Start+0xe6>
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2202      	movs	r2, #2
 8009014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009018:	e00b      	b.n	8009032 <HAL_TIM_PWM_Start+0xfe>
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	2b10      	cmp	r3, #16
 800901e:	d104      	bne.n	800902a <HAL_TIM_PWM_Start+0xf6>
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2202      	movs	r2, #2
 8009024:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009028:	e003      	b.n	8009032 <HAL_TIM_PWM_Start+0xfe>
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2202      	movs	r2, #2
 800902e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	2201      	movs	r2, #1
 8009038:	6839      	ldr	r1, [r7, #0]
 800903a:	4618      	mov	r0, r3
 800903c:	f001 fb26 	bl	800a68c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	4a35      	ldr	r2, [pc, #212]	; (800911c <HAL_TIM_PWM_Start+0x1e8>)
 8009046:	4293      	cmp	r3, r2
 8009048:	d013      	beq.n	8009072 <HAL_TIM_PWM_Start+0x13e>
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	4a34      	ldr	r2, [pc, #208]	; (8009120 <HAL_TIM_PWM_Start+0x1ec>)
 8009050:	4293      	cmp	r3, r2
 8009052:	d00e      	beq.n	8009072 <HAL_TIM_PWM_Start+0x13e>
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	4a32      	ldr	r2, [pc, #200]	; (8009124 <HAL_TIM_PWM_Start+0x1f0>)
 800905a:	4293      	cmp	r3, r2
 800905c:	d009      	beq.n	8009072 <HAL_TIM_PWM_Start+0x13e>
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	4a31      	ldr	r2, [pc, #196]	; (8009128 <HAL_TIM_PWM_Start+0x1f4>)
 8009064:	4293      	cmp	r3, r2
 8009066:	d004      	beq.n	8009072 <HAL_TIM_PWM_Start+0x13e>
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	4a2f      	ldr	r2, [pc, #188]	; (800912c <HAL_TIM_PWM_Start+0x1f8>)
 800906e:	4293      	cmp	r3, r2
 8009070:	d101      	bne.n	8009076 <HAL_TIM_PWM_Start+0x142>
 8009072:	2301      	movs	r3, #1
 8009074:	e000      	b.n	8009078 <HAL_TIM_PWM_Start+0x144>
 8009076:	2300      	movs	r3, #0
 8009078:	2b00      	cmp	r3, #0
 800907a:	d007      	beq.n	800908c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800908a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	4a22      	ldr	r2, [pc, #136]	; (800911c <HAL_TIM_PWM_Start+0x1e8>)
 8009092:	4293      	cmp	r3, r2
 8009094:	d01d      	beq.n	80090d2 <HAL_TIM_PWM_Start+0x19e>
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800909e:	d018      	beq.n	80090d2 <HAL_TIM_PWM_Start+0x19e>
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	4a22      	ldr	r2, [pc, #136]	; (8009130 <HAL_TIM_PWM_Start+0x1fc>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d013      	beq.n	80090d2 <HAL_TIM_PWM_Start+0x19e>
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	4a21      	ldr	r2, [pc, #132]	; (8009134 <HAL_TIM_PWM_Start+0x200>)
 80090b0:	4293      	cmp	r3, r2
 80090b2:	d00e      	beq.n	80090d2 <HAL_TIM_PWM_Start+0x19e>
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	4a1f      	ldr	r2, [pc, #124]	; (8009138 <HAL_TIM_PWM_Start+0x204>)
 80090ba:	4293      	cmp	r3, r2
 80090bc:	d009      	beq.n	80090d2 <HAL_TIM_PWM_Start+0x19e>
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	4a17      	ldr	r2, [pc, #92]	; (8009120 <HAL_TIM_PWM_Start+0x1ec>)
 80090c4:	4293      	cmp	r3, r2
 80090c6:	d004      	beq.n	80090d2 <HAL_TIM_PWM_Start+0x19e>
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	4a15      	ldr	r2, [pc, #84]	; (8009124 <HAL_TIM_PWM_Start+0x1f0>)
 80090ce:	4293      	cmp	r3, r2
 80090d0:	d115      	bne.n	80090fe <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	689a      	ldr	r2, [r3, #8]
 80090d8:	4b18      	ldr	r3, [pc, #96]	; (800913c <HAL_TIM_PWM_Start+0x208>)
 80090da:	4013      	ands	r3, r2
 80090dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	2b06      	cmp	r3, #6
 80090e2:	d015      	beq.n	8009110 <HAL_TIM_PWM_Start+0x1dc>
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80090ea:	d011      	beq.n	8009110 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	681a      	ldr	r2, [r3, #0]
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f042 0201 	orr.w	r2, r2, #1
 80090fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090fc:	e008      	b.n	8009110 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	681a      	ldr	r2, [r3, #0]
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f042 0201 	orr.w	r2, r2, #1
 800910c:	601a      	str	r2, [r3, #0]
 800910e:	e000      	b.n	8009112 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009110:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009112:	2300      	movs	r3, #0
}
 8009114:	4618      	mov	r0, r3
 8009116:	3710      	adds	r7, #16
 8009118:	46bd      	mov	sp, r7
 800911a:	bd80      	pop	{r7, pc}
 800911c:	40012c00 	.word	0x40012c00
 8009120:	40013400 	.word	0x40013400
 8009124:	40014000 	.word	0x40014000
 8009128:	40014400 	.word	0x40014400
 800912c:	40014800 	.word	0x40014800
 8009130:	40000400 	.word	0x40000400
 8009134:	40000800 	.word	0x40000800
 8009138:	40000c00 	.word	0x40000c00
 800913c:	00010007 	.word	0x00010007

08009140 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b082      	sub	sp, #8
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d101      	bne.n	8009152 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800914e:	2301      	movs	r3, #1
 8009150:	e049      	b.n	80091e6 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009158:	b2db      	uxtb	r3, r3
 800915a:	2b00      	cmp	r3, #0
 800915c:	d106      	bne.n	800916c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	2200      	movs	r2, #0
 8009162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	f000 f841 	bl	80091ee <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2202      	movs	r2, #2
 8009170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681a      	ldr	r2, [r3, #0]
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	3304      	adds	r3, #4
 800917c:	4619      	mov	r1, r3
 800917e:	4610      	mov	r0, r2
 8009180:	f000 fd56 	bl	8009c30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2201      	movs	r2, #1
 8009188:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2201      	movs	r2, #1
 8009190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2201      	movs	r2, #1
 8009198:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2201      	movs	r2, #1
 80091a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2201      	movs	r2, #1
 80091a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2201      	movs	r2, #1
 80091b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2201      	movs	r2, #1
 80091b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2201      	movs	r2, #1
 80091c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2201      	movs	r2, #1
 80091c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2201      	movs	r2, #1
 80091d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2201      	movs	r2, #1
 80091d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2201      	movs	r2, #1
 80091e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80091e4:	2300      	movs	r3, #0
}
 80091e6:	4618      	mov	r0, r3
 80091e8:	3708      	adds	r7, #8
 80091ea:	46bd      	mov	sp, r7
 80091ec:	bd80      	pop	{r7, pc}

080091ee <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80091ee:	b480      	push	{r7}
 80091f0:	b083      	sub	sp, #12
 80091f2:	af00      	add	r7, sp, #0
 80091f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80091f6:	bf00      	nop
 80091f8:	370c      	adds	r7, #12
 80091fa:	46bd      	mov	sp, r7
 80091fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009200:	4770      	bx	lr
	...

08009204 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b084      	sub	sp, #16
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
 800920c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800920e:	2300      	movs	r3, #0
 8009210:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d104      	bne.n	8009222 <HAL_TIM_IC_Start_IT+0x1e>
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800921e:	b2db      	uxtb	r3, r3
 8009220:	e023      	b.n	800926a <HAL_TIM_IC_Start_IT+0x66>
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	2b04      	cmp	r3, #4
 8009226:	d104      	bne.n	8009232 <HAL_TIM_IC_Start_IT+0x2e>
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800922e:	b2db      	uxtb	r3, r3
 8009230:	e01b      	b.n	800926a <HAL_TIM_IC_Start_IT+0x66>
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	2b08      	cmp	r3, #8
 8009236:	d104      	bne.n	8009242 <HAL_TIM_IC_Start_IT+0x3e>
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800923e:	b2db      	uxtb	r3, r3
 8009240:	e013      	b.n	800926a <HAL_TIM_IC_Start_IT+0x66>
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	2b0c      	cmp	r3, #12
 8009246:	d104      	bne.n	8009252 <HAL_TIM_IC_Start_IT+0x4e>
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800924e:	b2db      	uxtb	r3, r3
 8009250:	e00b      	b.n	800926a <HAL_TIM_IC_Start_IT+0x66>
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	2b10      	cmp	r3, #16
 8009256:	d104      	bne.n	8009262 <HAL_TIM_IC_Start_IT+0x5e>
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800925e:	b2db      	uxtb	r3, r3
 8009260:	e003      	b.n	800926a <HAL_TIM_IC_Start_IT+0x66>
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009268:	b2db      	uxtb	r3, r3
 800926a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d104      	bne.n	800927c <HAL_TIM_IC_Start_IT+0x78>
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009278:	b2db      	uxtb	r3, r3
 800927a:	e013      	b.n	80092a4 <HAL_TIM_IC_Start_IT+0xa0>
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	2b04      	cmp	r3, #4
 8009280:	d104      	bne.n	800928c <HAL_TIM_IC_Start_IT+0x88>
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009288:	b2db      	uxtb	r3, r3
 800928a:	e00b      	b.n	80092a4 <HAL_TIM_IC_Start_IT+0xa0>
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	2b08      	cmp	r3, #8
 8009290:	d104      	bne.n	800929c <HAL_TIM_IC_Start_IT+0x98>
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009298:	b2db      	uxtb	r3, r3
 800929a:	e003      	b.n	80092a4 <HAL_TIM_IC_Start_IT+0xa0>
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80092a2:	b2db      	uxtb	r3, r3
 80092a4:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80092a6:	7bbb      	ldrb	r3, [r7, #14]
 80092a8:	2b01      	cmp	r3, #1
 80092aa:	d102      	bne.n	80092b2 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80092ac:	7b7b      	ldrb	r3, [r7, #13]
 80092ae:	2b01      	cmp	r3, #1
 80092b0:	d001      	beq.n	80092b6 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80092b2:	2301      	movs	r3, #1
 80092b4:	e0dd      	b.n	8009472 <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d104      	bne.n	80092c6 <HAL_TIM_IC_Start_IT+0xc2>
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2202      	movs	r2, #2
 80092c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80092c4:	e023      	b.n	800930e <HAL_TIM_IC_Start_IT+0x10a>
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	2b04      	cmp	r3, #4
 80092ca:	d104      	bne.n	80092d6 <HAL_TIM_IC_Start_IT+0xd2>
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2202      	movs	r2, #2
 80092d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80092d4:	e01b      	b.n	800930e <HAL_TIM_IC_Start_IT+0x10a>
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	2b08      	cmp	r3, #8
 80092da:	d104      	bne.n	80092e6 <HAL_TIM_IC_Start_IT+0xe2>
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2202      	movs	r2, #2
 80092e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80092e4:	e013      	b.n	800930e <HAL_TIM_IC_Start_IT+0x10a>
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	2b0c      	cmp	r3, #12
 80092ea:	d104      	bne.n	80092f6 <HAL_TIM_IC_Start_IT+0xf2>
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2202      	movs	r2, #2
 80092f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80092f4:	e00b      	b.n	800930e <HAL_TIM_IC_Start_IT+0x10a>
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	2b10      	cmp	r3, #16
 80092fa:	d104      	bne.n	8009306 <HAL_TIM_IC_Start_IT+0x102>
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2202      	movs	r2, #2
 8009300:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009304:	e003      	b.n	800930e <HAL_TIM_IC_Start_IT+0x10a>
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2202      	movs	r2, #2
 800930a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d104      	bne.n	800931e <HAL_TIM_IC_Start_IT+0x11a>
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2202      	movs	r2, #2
 8009318:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800931c:	e013      	b.n	8009346 <HAL_TIM_IC_Start_IT+0x142>
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	2b04      	cmp	r3, #4
 8009322:	d104      	bne.n	800932e <HAL_TIM_IC_Start_IT+0x12a>
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2202      	movs	r2, #2
 8009328:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800932c:	e00b      	b.n	8009346 <HAL_TIM_IC_Start_IT+0x142>
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	2b08      	cmp	r3, #8
 8009332:	d104      	bne.n	800933e <HAL_TIM_IC_Start_IT+0x13a>
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2202      	movs	r2, #2
 8009338:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800933c:	e003      	b.n	8009346 <HAL_TIM_IC_Start_IT+0x142>
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2202      	movs	r2, #2
 8009342:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	2b0c      	cmp	r3, #12
 800934a:	d841      	bhi.n	80093d0 <HAL_TIM_IC_Start_IT+0x1cc>
 800934c:	a201      	add	r2, pc, #4	; (adr r2, 8009354 <HAL_TIM_IC_Start_IT+0x150>)
 800934e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009352:	bf00      	nop
 8009354:	08009389 	.word	0x08009389
 8009358:	080093d1 	.word	0x080093d1
 800935c:	080093d1 	.word	0x080093d1
 8009360:	080093d1 	.word	0x080093d1
 8009364:	0800939b 	.word	0x0800939b
 8009368:	080093d1 	.word	0x080093d1
 800936c:	080093d1 	.word	0x080093d1
 8009370:	080093d1 	.word	0x080093d1
 8009374:	080093ad 	.word	0x080093ad
 8009378:	080093d1 	.word	0x080093d1
 800937c:	080093d1 	.word	0x080093d1
 8009380:	080093d1 	.word	0x080093d1
 8009384:	080093bf 	.word	0x080093bf
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	68da      	ldr	r2, [r3, #12]
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f042 0202 	orr.w	r2, r2, #2
 8009396:	60da      	str	r2, [r3, #12]
      break;
 8009398:	e01d      	b.n	80093d6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	68da      	ldr	r2, [r3, #12]
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	f042 0204 	orr.w	r2, r2, #4
 80093a8:	60da      	str	r2, [r3, #12]
      break;
 80093aa:	e014      	b.n	80093d6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	68da      	ldr	r2, [r3, #12]
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	f042 0208 	orr.w	r2, r2, #8
 80093ba:	60da      	str	r2, [r3, #12]
      break;
 80093bc:	e00b      	b.n	80093d6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	68da      	ldr	r2, [r3, #12]
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	f042 0210 	orr.w	r2, r2, #16
 80093cc:	60da      	str	r2, [r3, #12]
      break;
 80093ce:	e002      	b.n	80093d6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80093d0:	2301      	movs	r3, #1
 80093d2:	73fb      	strb	r3, [r7, #15]
      break;
 80093d4:	bf00      	nop
  }

  if (status == HAL_OK)
 80093d6:	7bfb      	ldrb	r3, [r7, #15]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d149      	bne.n	8009470 <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	2201      	movs	r2, #1
 80093e2:	6839      	ldr	r1, [r7, #0]
 80093e4:	4618      	mov	r0, r3
 80093e6:	f001 f951 	bl	800a68c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	4a23      	ldr	r2, [pc, #140]	; (800947c <HAL_TIM_IC_Start_IT+0x278>)
 80093f0:	4293      	cmp	r3, r2
 80093f2:	d01d      	beq.n	8009430 <HAL_TIM_IC_Start_IT+0x22c>
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093fc:	d018      	beq.n	8009430 <HAL_TIM_IC_Start_IT+0x22c>
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	4a1f      	ldr	r2, [pc, #124]	; (8009480 <HAL_TIM_IC_Start_IT+0x27c>)
 8009404:	4293      	cmp	r3, r2
 8009406:	d013      	beq.n	8009430 <HAL_TIM_IC_Start_IT+0x22c>
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	4a1d      	ldr	r2, [pc, #116]	; (8009484 <HAL_TIM_IC_Start_IT+0x280>)
 800940e:	4293      	cmp	r3, r2
 8009410:	d00e      	beq.n	8009430 <HAL_TIM_IC_Start_IT+0x22c>
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	4a1c      	ldr	r2, [pc, #112]	; (8009488 <HAL_TIM_IC_Start_IT+0x284>)
 8009418:	4293      	cmp	r3, r2
 800941a:	d009      	beq.n	8009430 <HAL_TIM_IC_Start_IT+0x22c>
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	4a1a      	ldr	r2, [pc, #104]	; (800948c <HAL_TIM_IC_Start_IT+0x288>)
 8009422:	4293      	cmp	r3, r2
 8009424:	d004      	beq.n	8009430 <HAL_TIM_IC_Start_IT+0x22c>
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	4a19      	ldr	r2, [pc, #100]	; (8009490 <HAL_TIM_IC_Start_IT+0x28c>)
 800942c:	4293      	cmp	r3, r2
 800942e:	d115      	bne.n	800945c <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	689a      	ldr	r2, [r3, #8]
 8009436:	4b17      	ldr	r3, [pc, #92]	; (8009494 <HAL_TIM_IC_Start_IT+0x290>)
 8009438:	4013      	ands	r3, r2
 800943a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800943c:	68bb      	ldr	r3, [r7, #8]
 800943e:	2b06      	cmp	r3, #6
 8009440:	d015      	beq.n	800946e <HAL_TIM_IC_Start_IT+0x26a>
 8009442:	68bb      	ldr	r3, [r7, #8]
 8009444:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009448:	d011      	beq.n	800946e <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	681a      	ldr	r2, [r3, #0]
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f042 0201 	orr.w	r2, r2, #1
 8009458:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800945a:	e008      	b.n	800946e <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	681a      	ldr	r2, [r3, #0]
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	f042 0201 	orr.w	r2, r2, #1
 800946a:	601a      	str	r2, [r3, #0]
 800946c:	e000      	b.n	8009470 <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800946e:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8009470:	7bfb      	ldrb	r3, [r7, #15]
}
 8009472:	4618      	mov	r0, r3
 8009474:	3710      	adds	r7, #16
 8009476:	46bd      	mov	sp, r7
 8009478:	bd80      	pop	{r7, pc}
 800947a:	bf00      	nop
 800947c:	40012c00 	.word	0x40012c00
 8009480:	40000400 	.word	0x40000400
 8009484:	40000800 	.word	0x40000800
 8009488:	40000c00 	.word	0x40000c00
 800948c:	40013400 	.word	0x40013400
 8009490:	40014000 	.word	0x40014000
 8009494:	00010007 	.word	0x00010007

08009498 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b082      	sub	sp, #8
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	691b      	ldr	r3, [r3, #16]
 80094a6:	f003 0302 	and.w	r3, r3, #2
 80094aa:	2b02      	cmp	r3, #2
 80094ac:	d122      	bne.n	80094f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	68db      	ldr	r3, [r3, #12]
 80094b4:	f003 0302 	and.w	r3, r3, #2
 80094b8:	2b02      	cmp	r3, #2
 80094ba:	d11b      	bne.n	80094f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	f06f 0202 	mvn.w	r2, #2
 80094c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	2201      	movs	r2, #1
 80094ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	699b      	ldr	r3, [r3, #24]
 80094d2:	f003 0303 	and.w	r3, r3, #3
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d003      	beq.n	80094e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	f000 fb89 	bl	8009bf2 <HAL_TIM_IC_CaptureCallback>
 80094e0:	e005      	b.n	80094ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	f000 fb7b 	bl	8009bde <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094e8:	6878      	ldr	r0, [r7, #4]
 80094ea:	f000 fb8c 	bl	8009c06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2200      	movs	r2, #0
 80094f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	691b      	ldr	r3, [r3, #16]
 80094fa:	f003 0304 	and.w	r3, r3, #4
 80094fe:	2b04      	cmp	r3, #4
 8009500:	d122      	bne.n	8009548 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	68db      	ldr	r3, [r3, #12]
 8009508:	f003 0304 	and.w	r3, r3, #4
 800950c:	2b04      	cmp	r3, #4
 800950e:	d11b      	bne.n	8009548 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	f06f 0204 	mvn.w	r2, #4
 8009518:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2202      	movs	r2, #2
 800951e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	699b      	ldr	r3, [r3, #24]
 8009526:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800952a:	2b00      	cmp	r3, #0
 800952c:	d003      	beq.n	8009536 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	f000 fb5f 	bl	8009bf2 <HAL_TIM_IC_CaptureCallback>
 8009534:	e005      	b.n	8009542 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	f000 fb51 	bl	8009bde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800953c:	6878      	ldr	r0, [r7, #4]
 800953e:	f000 fb62 	bl	8009c06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	2200      	movs	r2, #0
 8009546:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	691b      	ldr	r3, [r3, #16]
 800954e:	f003 0308 	and.w	r3, r3, #8
 8009552:	2b08      	cmp	r3, #8
 8009554:	d122      	bne.n	800959c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	68db      	ldr	r3, [r3, #12]
 800955c:	f003 0308 	and.w	r3, r3, #8
 8009560:	2b08      	cmp	r3, #8
 8009562:	d11b      	bne.n	800959c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	f06f 0208 	mvn.w	r2, #8
 800956c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	2204      	movs	r2, #4
 8009572:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	69db      	ldr	r3, [r3, #28]
 800957a:	f003 0303 	and.w	r3, r3, #3
 800957e:	2b00      	cmp	r3, #0
 8009580:	d003      	beq.n	800958a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009582:	6878      	ldr	r0, [r7, #4]
 8009584:	f000 fb35 	bl	8009bf2 <HAL_TIM_IC_CaptureCallback>
 8009588:	e005      	b.n	8009596 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f000 fb27 	bl	8009bde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f000 fb38 	bl	8009c06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	2200      	movs	r2, #0
 800959a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	691b      	ldr	r3, [r3, #16]
 80095a2:	f003 0310 	and.w	r3, r3, #16
 80095a6:	2b10      	cmp	r3, #16
 80095a8:	d122      	bne.n	80095f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	68db      	ldr	r3, [r3, #12]
 80095b0:	f003 0310 	and.w	r3, r3, #16
 80095b4:	2b10      	cmp	r3, #16
 80095b6:	d11b      	bne.n	80095f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	f06f 0210 	mvn.w	r2, #16
 80095c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2208      	movs	r2, #8
 80095c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	69db      	ldr	r3, [r3, #28]
 80095ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d003      	beq.n	80095de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80095d6:	6878      	ldr	r0, [r7, #4]
 80095d8:	f000 fb0b 	bl	8009bf2 <HAL_TIM_IC_CaptureCallback>
 80095dc:	e005      	b.n	80095ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80095de:	6878      	ldr	r0, [r7, #4]
 80095e0:	f000 fafd 	bl	8009bde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80095e4:	6878      	ldr	r0, [r7, #4]
 80095e6:	f000 fb0e 	bl	8009c06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	2200      	movs	r2, #0
 80095ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	691b      	ldr	r3, [r3, #16]
 80095f6:	f003 0301 	and.w	r3, r3, #1
 80095fa:	2b01      	cmp	r3, #1
 80095fc:	d10e      	bne.n	800961c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	68db      	ldr	r3, [r3, #12]
 8009604:	f003 0301 	and.w	r3, r3, #1
 8009608:	2b01      	cmp	r3, #1
 800960a:	d107      	bne.n	800961c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f06f 0201 	mvn.w	r2, #1
 8009614:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009616:	6878      	ldr	r0, [r7, #4]
 8009618:	f000 fad7 	bl	8009bca <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	691b      	ldr	r3, [r3, #16]
 8009622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009626:	2b80      	cmp	r3, #128	; 0x80
 8009628:	d10e      	bne.n	8009648 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	68db      	ldr	r3, [r3, #12]
 8009630:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009634:	2b80      	cmp	r3, #128	; 0x80
 8009636:	d107      	bne.n	8009648 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009640:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f001 f958 	bl	800a8f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	691b      	ldr	r3, [r3, #16]
 800964e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009652:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009656:	d10e      	bne.n	8009676 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	68db      	ldr	r3, [r3, #12]
 800965e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009662:	2b80      	cmp	r3, #128	; 0x80
 8009664:	d107      	bne.n	8009676 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800966e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009670:	6878      	ldr	r0, [r7, #4]
 8009672:	f001 f94b 	bl	800a90c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	691b      	ldr	r3, [r3, #16]
 800967c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009680:	2b40      	cmp	r3, #64	; 0x40
 8009682:	d10e      	bne.n	80096a2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	68db      	ldr	r3, [r3, #12]
 800968a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800968e:	2b40      	cmp	r3, #64	; 0x40
 8009690:	d107      	bne.n	80096a2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800969a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800969c:	6878      	ldr	r0, [r7, #4]
 800969e:	f000 fabc 	bl	8009c1a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	691b      	ldr	r3, [r3, #16]
 80096a8:	f003 0320 	and.w	r3, r3, #32
 80096ac:	2b20      	cmp	r3, #32
 80096ae:	d10e      	bne.n	80096ce <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	68db      	ldr	r3, [r3, #12]
 80096b6:	f003 0320 	and.w	r3, r3, #32
 80096ba:	2b20      	cmp	r3, #32
 80096bc:	d107      	bne.n	80096ce <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	f06f 0220 	mvn.w	r2, #32
 80096c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80096c8:	6878      	ldr	r0, [r7, #4]
 80096ca:	f001 f90b 	bl	800a8e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80096ce:	bf00      	nop
 80096d0:	3708      	adds	r7, #8
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bd80      	pop	{r7, pc}

080096d6 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80096d6:	b580      	push	{r7, lr}
 80096d8:	b086      	sub	sp, #24
 80096da:	af00      	add	r7, sp, #0
 80096dc:	60f8      	str	r0, [r7, #12]
 80096de:	60b9      	str	r1, [r7, #8]
 80096e0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80096e2:	2300      	movs	r3, #0
 80096e4:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80096ec:	2b01      	cmp	r3, #1
 80096ee:	d101      	bne.n	80096f4 <HAL_TIM_IC_ConfigChannel+0x1e>
 80096f0:	2302      	movs	r3, #2
 80096f2:	e088      	b.n	8009806 <HAL_TIM_IC_ConfigChannel+0x130>
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	2201      	movs	r2, #1
 80096f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d11b      	bne.n	800973a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	6818      	ldr	r0, [r3, #0]
 8009706:	68bb      	ldr	r3, [r7, #8]
 8009708:	6819      	ldr	r1, [r3, #0]
 800970a:	68bb      	ldr	r3, [r7, #8]
 800970c:	685a      	ldr	r2, [r3, #4]
 800970e:	68bb      	ldr	r3, [r7, #8]
 8009710:	68db      	ldr	r3, [r3, #12]
 8009712:	f000 fdfd 	bl	800a310 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	699a      	ldr	r2, [r3, #24]
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	f022 020c 	bic.w	r2, r2, #12
 8009724:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	6999      	ldr	r1, [r3, #24]
 800972c:	68bb      	ldr	r3, [r7, #8]
 800972e:	689a      	ldr	r2, [r3, #8]
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	430a      	orrs	r2, r1
 8009736:	619a      	str	r2, [r3, #24]
 8009738:	e060      	b.n	80097fc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2b04      	cmp	r3, #4
 800973e:	d11c      	bne.n	800977a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	6818      	ldr	r0, [r3, #0]
 8009744:	68bb      	ldr	r3, [r7, #8]
 8009746:	6819      	ldr	r1, [r3, #0]
 8009748:	68bb      	ldr	r3, [r7, #8]
 800974a:	685a      	ldr	r2, [r3, #4]
 800974c:	68bb      	ldr	r3, [r7, #8]
 800974e:	68db      	ldr	r3, [r3, #12]
 8009750:	f000 fe7b 	bl	800a44a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	699a      	ldr	r2, [r3, #24]
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009762:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	6999      	ldr	r1, [r3, #24]
 800976a:	68bb      	ldr	r3, [r7, #8]
 800976c:	689b      	ldr	r3, [r3, #8]
 800976e:	021a      	lsls	r2, r3, #8
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	430a      	orrs	r2, r1
 8009776:	619a      	str	r2, [r3, #24]
 8009778:	e040      	b.n	80097fc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	2b08      	cmp	r3, #8
 800977e:	d11b      	bne.n	80097b8 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	6818      	ldr	r0, [r3, #0]
 8009784:	68bb      	ldr	r3, [r7, #8]
 8009786:	6819      	ldr	r1, [r3, #0]
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	685a      	ldr	r2, [r3, #4]
 800978c:	68bb      	ldr	r3, [r7, #8]
 800978e:	68db      	ldr	r3, [r3, #12]
 8009790:	f000 fec8 	bl	800a524 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	69da      	ldr	r2, [r3, #28]
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	f022 020c 	bic.w	r2, r2, #12
 80097a2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	69d9      	ldr	r1, [r3, #28]
 80097aa:	68bb      	ldr	r3, [r7, #8]
 80097ac:	689a      	ldr	r2, [r3, #8]
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	430a      	orrs	r2, r1
 80097b4:	61da      	str	r2, [r3, #28]
 80097b6:	e021      	b.n	80097fc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2b0c      	cmp	r3, #12
 80097bc:	d11c      	bne.n	80097f8 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	6818      	ldr	r0, [r3, #0]
 80097c2:	68bb      	ldr	r3, [r7, #8]
 80097c4:	6819      	ldr	r1, [r3, #0]
 80097c6:	68bb      	ldr	r3, [r7, #8]
 80097c8:	685a      	ldr	r2, [r3, #4]
 80097ca:	68bb      	ldr	r3, [r7, #8]
 80097cc:	68db      	ldr	r3, [r3, #12]
 80097ce:	f000 fee5 	bl	800a59c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	69da      	ldr	r2, [r3, #28]
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80097e0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	69d9      	ldr	r1, [r3, #28]
 80097e8:	68bb      	ldr	r3, [r7, #8]
 80097ea:	689b      	ldr	r3, [r3, #8]
 80097ec:	021a      	lsls	r2, r3, #8
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	430a      	orrs	r2, r1
 80097f4:	61da      	str	r2, [r3, #28]
 80097f6:	e001      	b.n	80097fc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80097f8:	2301      	movs	r3, #1
 80097fa:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	2200      	movs	r2, #0
 8009800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009804:	7dfb      	ldrb	r3, [r7, #23]
}
 8009806:	4618      	mov	r0, r3
 8009808:	3718      	adds	r7, #24
 800980a:	46bd      	mov	sp, r7
 800980c:	bd80      	pop	{r7, pc}
	...

08009810 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b086      	sub	sp, #24
 8009814:	af00      	add	r7, sp, #0
 8009816:	60f8      	str	r0, [r7, #12]
 8009818:	60b9      	str	r1, [r7, #8]
 800981a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800981c:	2300      	movs	r3, #0
 800981e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009826:	2b01      	cmp	r3, #1
 8009828:	d101      	bne.n	800982e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800982a:	2302      	movs	r3, #2
 800982c:	e0ff      	b.n	8009a2e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	2201      	movs	r2, #1
 8009832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2b14      	cmp	r3, #20
 800983a:	f200 80f0 	bhi.w	8009a1e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800983e:	a201      	add	r2, pc, #4	; (adr r2, 8009844 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009844:	08009899 	.word	0x08009899
 8009848:	08009a1f 	.word	0x08009a1f
 800984c:	08009a1f 	.word	0x08009a1f
 8009850:	08009a1f 	.word	0x08009a1f
 8009854:	080098d9 	.word	0x080098d9
 8009858:	08009a1f 	.word	0x08009a1f
 800985c:	08009a1f 	.word	0x08009a1f
 8009860:	08009a1f 	.word	0x08009a1f
 8009864:	0800991b 	.word	0x0800991b
 8009868:	08009a1f 	.word	0x08009a1f
 800986c:	08009a1f 	.word	0x08009a1f
 8009870:	08009a1f 	.word	0x08009a1f
 8009874:	0800995b 	.word	0x0800995b
 8009878:	08009a1f 	.word	0x08009a1f
 800987c:	08009a1f 	.word	0x08009a1f
 8009880:	08009a1f 	.word	0x08009a1f
 8009884:	0800999d 	.word	0x0800999d
 8009888:	08009a1f 	.word	0x08009a1f
 800988c:	08009a1f 	.word	0x08009a1f
 8009890:	08009a1f 	.word	0x08009a1f
 8009894:	080099dd 	.word	0x080099dd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	68b9      	ldr	r1, [r7, #8]
 800989e:	4618      	mov	r0, r3
 80098a0:	f000 fa60 	bl	8009d64 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	699a      	ldr	r2, [r3, #24]
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	f042 0208 	orr.w	r2, r2, #8
 80098b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	699a      	ldr	r2, [r3, #24]
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	f022 0204 	bic.w	r2, r2, #4
 80098c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	6999      	ldr	r1, [r3, #24]
 80098ca:	68bb      	ldr	r3, [r7, #8]
 80098cc:	691a      	ldr	r2, [r3, #16]
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	430a      	orrs	r2, r1
 80098d4:	619a      	str	r2, [r3, #24]
      break;
 80098d6:	e0a5      	b.n	8009a24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	68b9      	ldr	r1, [r7, #8]
 80098de:	4618      	mov	r0, r3
 80098e0:	f000 fad0 	bl	8009e84 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	699a      	ldr	r2, [r3, #24]
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80098f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	699a      	ldr	r2, [r3, #24]
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009902:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	6999      	ldr	r1, [r3, #24]
 800990a:	68bb      	ldr	r3, [r7, #8]
 800990c:	691b      	ldr	r3, [r3, #16]
 800990e:	021a      	lsls	r2, r3, #8
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	430a      	orrs	r2, r1
 8009916:	619a      	str	r2, [r3, #24]
      break;
 8009918:	e084      	b.n	8009a24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	68b9      	ldr	r1, [r7, #8]
 8009920:	4618      	mov	r0, r3
 8009922:	f000 fb39 	bl	8009f98 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	69da      	ldr	r2, [r3, #28]
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	f042 0208 	orr.w	r2, r2, #8
 8009934:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	69da      	ldr	r2, [r3, #28]
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	f022 0204 	bic.w	r2, r2, #4
 8009944:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	69d9      	ldr	r1, [r3, #28]
 800994c:	68bb      	ldr	r3, [r7, #8]
 800994e:	691a      	ldr	r2, [r3, #16]
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	430a      	orrs	r2, r1
 8009956:	61da      	str	r2, [r3, #28]
      break;
 8009958:	e064      	b.n	8009a24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	68b9      	ldr	r1, [r7, #8]
 8009960:	4618      	mov	r0, r3
 8009962:	f000 fba1 	bl	800a0a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	69da      	ldr	r2, [r3, #28]
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009974:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	69da      	ldr	r2, [r3, #28]
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009984:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	69d9      	ldr	r1, [r3, #28]
 800998c:	68bb      	ldr	r3, [r7, #8]
 800998e:	691b      	ldr	r3, [r3, #16]
 8009990:	021a      	lsls	r2, r3, #8
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	430a      	orrs	r2, r1
 8009998:	61da      	str	r2, [r3, #28]
      break;
 800999a:	e043      	b.n	8009a24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	68b9      	ldr	r1, [r7, #8]
 80099a2:	4618      	mov	r0, r3
 80099a4:	f000 fbea 	bl	800a17c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	f042 0208 	orr.w	r2, r2, #8
 80099b6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	f022 0204 	bic.w	r2, r2, #4
 80099c6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80099ce:	68bb      	ldr	r3, [r7, #8]
 80099d0:	691a      	ldr	r2, [r3, #16]
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	430a      	orrs	r2, r1
 80099d8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80099da:	e023      	b.n	8009a24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	68b9      	ldr	r1, [r7, #8]
 80099e2:	4618      	mov	r0, r3
 80099e4:	f000 fc2e 	bl	800a244 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80099f6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009a06:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009a0e:	68bb      	ldr	r3, [r7, #8]
 8009a10:	691b      	ldr	r3, [r3, #16]
 8009a12:	021a      	lsls	r2, r3, #8
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	430a      	orrs	r2, r1
 8009a1a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009a1c:	e002      	b.n	8009a24 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009a1e:	2301      	movs	r3, #1
 8009a20:	75fb      	strb	r3, [r7, #23]
      break;
 8009a22:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	2200      	movs	r2, #0
 8009a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009a2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a2e:	4618      	mov	r0, r3
 8009a30:	3718      	adds	r7, #24
 8009a32:	46bd      	mov	sp, r7
 8009a34:	bd80      	pop	{r7, pc}
 8009a36:	bf00      	nop

08009a38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b084      	sub	sp, #16
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
 8009a40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009a42:	2300      	movs	r3, #0
 8009a44:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a4c:	2b01      	cmp	r3, #1
 8009a4e:	d101      	bne.n	8009a54 <HAL_TIM_ConfigClockSource+0x1c>
 8009a50:	2302      	movs	r3, #2
 8009a52:	e0b6      	b.n	8009bc2 <HAL_TIM_ConfigClockSource+0x18a>
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2201      	movs	r2, #1
 8009a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2202      	movs	r2, #2
 8009a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	689b      	ldr	r3, [r3, #8]
 8009a6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009a6c:	68bb      	ldr	r3, [r7, #8]
 8009a6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009a72:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009a76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009a78:	68bb      	ldr	r3, [r7, #8]
 8009a7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009a7e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	68ba      	ldr	r2, [r7, #8]
 8009a86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a90:	d03e      	beq.n	8009b10 <HAL_TIM_ConfigClockSource+0xd8>
 8009a92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a96:	f200 8087 	bhi.w	8009ba8 <HAL_TIM_ConfigClockSource+0x170>
 8009a9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a9e:	f000 8086 	beq.w	8009bae <HAL_TIM_ConfigClockSource+0x176>
 8009aa2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009aa6:	d87f      	bhi.n	8009ba8 <HAL_TIM_ConfigClockSource+0x170>
 8009aa8:	2b70      	cmp	r3, #112	; 0x70
 8009aaa:	d01a      	beq.n	8009ae2 <HAL_TIM_ConfigClockSource+0xaa>
 8009aac:	2b70      	cmp	r3, #112	; 0x70
 8009aae:	d87b      	bhi.n	8009ba8 <HAL_TIM_ConfigClockSource+0x170>
 8009ab0:	2b60      	cmp	r3, #96	; 0x60
 8009ab2:	d050      	beq.n	8009b56 <HAL_TIM_ConfigClockSource+0x11e>
 8009ab4:	2b60      	cmp	r3, #96	; 0x60
 8009ab6:	d877      	bhi.n	8009ba8 <HAL_TIM_ConfigClockSource+0x170>
 8009ab8:	2b50      	cmp	r3, #80	; 0x50
 8009aba:	d03c      	beq.n	8009b36 <HAL_TIM_ConfigClockSource+0xfe>
 8009abc:	2b50      	cmp	r3, #80	; 0x50
 8009abe:	d873      	bhi.n	8009ba8 <HAL_TIM_ConfigClockSource+0x170>
 8009ac0:	2b40      	cmp	r3, #64	; 0x40
 8009ac2:	d058      	beq.n	8009b76 <HAL_TIM_ConfigClockSource+0x13e>
 8009ac4:	2b40      	cmp	r3, #64	; 0x40
 8009ac6:	d86f      	bhi.n	8009ba8 <HAL_TIM_ConfigClockSource+0x170>
 8009ac8:	2b30      	cmp	r3, #48	; 0x30
 8009aca:	d064      	beq.n	8009b96 <HAL_TIM_ConfigClockSource+0x15e>
 8009acc:	2b30      	cmp	r3, #48	; 0x30
 8009ace:	d86b      	bhi.n	8009ba8 <HAL_TIM_ConfigClockSource+0x170>
 8009ad0:	2b20      	cmp	r3, #32
 8009ad2:	d060      	beq.n	8009b96 <HAL_TIM_ConfigClockSource+0x15e>
 8009ad4:	2b20      	cmp	r3, #32
 8009ad6:	d867      	bhi.n	8009ba8 <HAL_TIM_ConfigClockSource+0x170>
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d05c      	beq.n	8009b96 <HAL_TIM_ConfigClockSource+0x15e>
 8009adc:	2b10      	cmp	r3, #16
 8009ade:	d05a      	beq.n	8009b96 <HAL_TIM_ConfigClockSource+0x15e>
 8009ae0:	e062      	b.n	8009ba8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	6818      	ldr	r0, [r3, #0]
 8009ae6:	683b      	ldr	r3, [r7, #0]
 8009ae8:	6899      	ldr	r1, [r3, #8]
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	685a      	ldr	r2, [r3, #4]
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	68db      	ldr	r3, [r3, #12]
 8009af2:	f000 fdab 	bl	800a64c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	689b      	ldr	r3, [r3, #8]
 8009afc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009afe:	68bb      	ldr	r3, [r7, #8]
 8009b00:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009b04:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	68ba      	ldr	r2, [r7, #8]
 8009b0c:	609a      	str	r2, [r3, #8]
      break;
 8009b0e:	e04f      	b.n	8009bb0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	6818      	ldr	r0, [r3, #0]
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	6899      	ldr	r1, [r3, #8]
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	685a      	ldr	r2, [r3, #4]
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	68db      	ldr	r3, [r3, #12]
 8009b20:	f000 fd94 	bl	800a64c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	689a      	ldr	r2, [r3, #8]
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009b32:	609a      	str	r2, [r3, #8]
      break;
 8009b34:	e03c      	b.n	8009bb0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	6818      	ldr	r0, [r3, #0]
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	6859      	ldr	r1, [r3, #4]
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	68db      	ldr	r3, [r3, #12]
 8009b42:	461a      	mov	r2, r3
 8009b44:	f000 fc52 	bl	800a3ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	2150      	movs	r1, #80	; 0x50
 8009b4e:	4618      	mov	r0, r3
 8009b50:	f000 fd61 	bl	800a616 <TIM_ITRx_SetConfig>
      break;
 8009b54:	e02c      	b.n	8009bb0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	6818      	ldr	r0, [r3, #0]
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	6859      	ldr	r1, [r3, #4]
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	68db      	ldr	r3, [r3, #12]
 8009b62:	461a      	mov	r2, r3
 8009b64:	f000 fcae 	bl	800a4c4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	2160      	movs	r1, #96	; 0x60
 8009b6e:	4618      	mov	r0, r3
 8009b70:	f000 fd51 	bl	800a616 <TIM_ITRx_SetConfig>
      break;
 8009b74:	e01c      	b.n	8009bb0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	6818      	ldr	r0, [r3, #0]
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	6859      	ldr	r1, [r3, #4]
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	68db      	ldr	r3, [r3, #12]
 8009b82:	461a      	mov	r2, r3
 8009b84:	f000 fc32 	bl	800a3ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	2140      	movs	r1, #64	; 0x40
 8009b8e:	4618      	mov	r0, r3
 8009b90:	f000 fd41 	bl	800a616 <TIM_ITRx_SetConfig>
      break;
 8009b94:	e00c      	b.n	8009bb0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681a      	ldr	r2, [r3, #0]
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	4619      	mov	r1, r3
 8009ba0:	4610      	mov	r0, r2
 8009ba2:	f000 fd38 	bl	800a616 <TIM_ITRx_SetConfig>
      break;
 8009ba6:	e003      	b.n	8009bb0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8009ba8:	2301      	movs	r3, #1
 8009baa:	73fb      	strb	r3, [r7, #15]
      break;
 8009bac:	e000      	b.n	8009bb0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8009bae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2201      	movs	r2, #1
 8009bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2200      	movs	r2, #0
 8009bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	3710      	adds	r7, #16
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	bd80      	pop	{r7, pc}

08009bca <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009bca:	b480      	push	{r7}
 8009bcc:	b083      	sub	sp, #12
 8009bce:	af00      	add	r7, sp, #0
 8009bd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009bd2:	bf00      	nop
 8009bd4:	370c      	adds	r7, #12
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bdc:	4770      	bx	lr

08009bde <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009bde:	b480      	push	{r7}
 8009be0:	b083      	sub	sp, #12
 8009be2:	af00      	add	r7, sp, #0
 8009be4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009be6:	bf00      	nop
 8009be8:	370c      	adds	r7, #12
 8009bea:	46bd      	mov	sp, r7
 8009bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf0:	4770      	bx	lr

08009bf2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009bf2:	b480      	push	{r7}
 8009bf4:	b083      	sub	sp, #12
 8009bf6:	af00      	add	r7, sp, #0
 8009bf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009bfa:	bf00      	nop
 8009bfc:	370c      	adds	r7, #12
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c04:	4770      	bx	lr

08009c06 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009c06:	b480      	push	{r7}
 8009c08:	b083      	sub	sp, #12
 8009c0a:	af00      	add	r7, sp, #0
 8009c0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009c0e:	bf00      	nop
 8009c10:	370c      	adds	r7, #12
 8009c12:	46bd      	mov	sp, r7
 8009c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c18:	4770      	bx	lr

08009c1a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009c1a:	b480      	push	{r7}
 8009c1c:	b083      	sub	sp, #12
 8009c1e:	af00      	add	r7, sp, #0
 8009c20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009c22:	bf00      	nop
 8009c24:	370c      	adds	r7, #12
 8009c26:	46bd      	mov	sp, r7
 8009c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2c:	4770      	bx	lr
	...

08009c30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009c30:	b480      	push	{r7}
 8009c32:	b085      	sub	sp, #20
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
 8009c38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	4a40      	ldr	r2, [pc, #256]	; (8009d44 <TIM_Base_SetConfig+0x114>)
 8009c44:	4293      	cmp	r3, r2
 8009c46:	d013      	beq.n	8009c70 <TIM_Base_SetConfig+0x40>
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c4e:	d00f      	beq.n	8009c70 <TIM_Base_SetConfig+0x40>
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	4a3d      	ldr	r2, [pc, #244]	; (8009d48 <TIM_Base_SetConfig+0x118>)
 8009c54:	4293      	cmp	r3, r2
 8009c56:	d00b      	beq.n	8009c70 <TIM_Base_SetConfig+0x40>
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	4a3c      	ldr	r2, [pc, #240]	; (8009d4c <TIM_Base_SetConfig+0x11c>)
 8009c5c:	4293      	cmp	r3, r2
 8009c5e:	d007      	beq.n	8009c70 <TIM_Base_SetConfig+0x40>
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	4a3b      	ldr	r2, [pc, #236]	; (8009d50 <TIM_Base_SetConfig+0x120>)
 8009c64:	4293      	cmp	r3, r2
 8009c66:	d003      	beq.n	8009c70 <TIM_Base_SetConfig+0x40>
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	4a3a      	ldr	r2, [pc, #232]	; (8009d54 <TIM_Base_SetConfig+0x124>)
 8009c6c:	4293      	cmp	r3, r2
 8009c6e:	d108      	bne.n	8009c82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	685b      	ldr	r3, [r3, #4]
 8009c7c:	68fa      	ldr	r2, [r7, #12]
 8009c7e:	4313      	orrs	r3, r2
 8009c80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	4a2f      	ldr	r2, [pc, #188]	; (8009d44 <TIM_Base_SetConfig+0x114>)
 8009c86:	4293      	cmp	r3, r2
 8009c88:	d01f      	beq.n	8009cca <TIM_Base_SetConfig+0x9a>
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c90:	d01b      	beq.n	8009cca <TIM_Base_SetConfig+0x9a>
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	4a2c      	ldr	r2, [pc, #176]	; (8009d48 <TIM_Base_SetConfig+0x118>)
 8009c96:	4293      	cmp	r3, r2
 8009c98:	d017      	beq.n	8009cca <TIM_Base_SetConfig+0x9a>
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	4a2b      	ldr	r2, [pc, #172]	; (8009d4c <TIM_Base_SetConfig+0x11c>)
 8009c9e:	4293      	cmp	r3, r2
 8009ca0:	d013      	beq.n	8009cca <TIM_Base_SetConfig+0x9a>
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	4a2a      	ldr	r2, [pc, #168]	; (8009d50 <TIM_Base_SetConfig+0x120>)
 8009ca6:	4293      	cmp	r3, r2
 8009ca8:	d00f      	beq.n	8009cca <TIM_Base_SetConfig+0x9a>
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	4a29      	ldr	r2, [pc, #164]	; (8009d54 <TIM_Base_SetConfig+0x124>)
 8009cae:	4293      	cmp	r3, r2
 8009cb0:	d00b      	beq.n	8009cca <TIM_Base_SetConfig+0x9a>
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	4a28      	ldr	r2, [pc, #160]	; (8009d58 <TIM_Base_SetConfig+0x128>)
 8009cb6:	4293      	cmp	r3, r2
 8009cb8:	d007      	beq.n	8009cca <TIM_Base_SetConfig+0x9a>
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	4a27      	ldr	r2, [pc, #156]	; (8009d5c <TIM_Base_SetConfig+0x12c>)
 8009cbe:	4293      	cmp	r3, r2
 8009cc0:	d003      	beq.n	8009cca <TIM_Base_SetConfig+0x9a>
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	4a26      	ldr	r2, [pc, #152]	; (8009d60 <TIM_Base_SetConfig+0x130>)
 8009cc6:	4293      	cmp	r3, r2
 8009cc8:	d108      	bne.n	8009cdc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009cd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	68db      	ldr	r3, [r3, #12]
 8009cd6:	68fa      	ldr	r2, [r7, #12]
 8009cd8:	4313      	orrs	r3, r2
 8009cda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	695b      	ldr	r3, [r3, #20]
 8009ce6:	4313      	orrs	r3, r2
 8009ce8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	68fa      	ldr	r2, [r7, #12]
 8009cee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009cf0:	683b      	ldr	r3, [r7, #0]
 8009cf2:	689a      	ldr	r2, [r3, #8]
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009cf8:	683b      	ldr	r3, [r7, #0]
 8009cfa:	681a      	ldr	r2, [r3, #0]
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	4a10      	ldr	r2, [pc, #64]	; (8009d44 <TIM_Base_SetConfig+0x114>)
 8009d04:	4293      	cmp	r3, r2
 8009d06:	d00f      	beq.n	8009d28 <TIM_Base_SetConfig+0xf8>
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	4a12      	ldr	r2, [pc, #72]	; (8009d54 <TIM_Base_SetConfig+0x124>)
 8009d0c:	4293      	cmp	r3, r2
 8009d0e:	d00b      	beq.n	8009d28 <TIM_Base_SetConfig+0xf8>
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	4a11      	ldr	r2, [pc, #68]	; (8009d58 <TIM_Base_SetConfig+0x128>)
 8009d14:	4293      	cmp	r3, r2
 8009d16:	d007      	beq.n	8009d28 <TIM_Base_SetConfig+0xf8>
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	4a10      	ldr	r2, [pc, #64]	; (8009d5c <TIM_Base_SetConfig+0x12c>)
 8009d1c:	4293      	cmp	r3, r2
 8009d1e:	d003      	beq.n	8009d28 <TIM_Base_SetConfig+0xf8>
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	4a0f      	ldr	r2, [pc, #60]	; (8009d60 <TIM_Base_SetConfig+0x130>)
 8009d24:	4293      	cmp	r3, r2
 8009d26:	d103      	bne.n	8009d30 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	691a      	ldr	r2, [r3, #16]
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2201      	movs	r2, #1
 8009d34:	615a      	str	r2, [r3, #20]
}
 8009d36:	bf00      	nop
 8009d38:	3714      	adds	r7, #20
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d40:	4770      	bx	lr
 8009d42:	bf00      	nop
 8009d44:	40012c00 	.word	0x40012c00
 8009d48:	40000400 	.word	0x40000400
 8009d4c:	40000800 	.word	0x40000800
 8009d50:	40000c00 	.word	0x40000c00
 8009d54:	40013400 	.word	0x40013400
 8009d58:	40014000 	.word	0x40014000
 8009d5c:	40014400 	.word	0x40014400
 8009d60:	40014800 	.word	0x40014800

08009d64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009d64:	b480      	push	{r7}
 8009d66:	b087      	sub	sp, #28
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
 8009d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	6a1b      	ldr	r3, [r3, #32]
 8009d72:	f023 0201 	bic.w	r2, r3, #1
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	6a1b      	ldr	r3, [r3, #32]
 8009d7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	685b      	ldr	r3, [r3, #4]
 8009d84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	699b      	ldr	r3, [r3, #24]
 8009d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009d92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	f023 0303 	bic.w	r3, r3, #3
 8009d9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009da0:	683b      	ldr	r3, [r7, #0]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	68fa      	ldr	r2, [r7, #12]
 8009da6:	4313      	orrs	r3, r2
 8009da8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009daa:	697b      	ldr	r3, [r7, #20]
 8009dac:	f023 0302 	bic.w	r3, r3, #2
 8009db0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	689b      	ldr	r3, [r3, #8]
 8009db6:	697a      	ldr	r2, [r7, #20]
 8009db8:	4313      	orrs	r3, r2
 8009dba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	4a2c      	ldr	r2, [pc, #176]	; (8009e70 <TIM_OC1_SetConfig+0x10c>)
 8009dc0:	4293      	cmp	r3, r2
 8009dc2:	d00f      	beq.n	8009de4 <TIM_OC1_SetConfig+0x80>
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	4a2b      	ldr	r2, [pc, #172]	; (8009e74 <TIM_OC1_SetConfig+0x110>)
 8009dc8:	4293      	cmp	r3, r2
 8009dca:	d00b      	beq.n	8009de4 <TIM_OC1_SetConfig+0x80>
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	4a2a      	ldr	r2, [pc, #168]	; (8009e78 <TIM_OC1_SetConfig+0x114>)
 8009dd0:	4293      	cmp	r3, r2
 8009dd2:	d007      	beq.n	8009de4 <TIM_OC1_SetConfig+0x80>
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	4a29      	ldr	r2, [pc, #164]	; (8009e7c <TIM_OC1_SetConfig+0x118>)
 8009dd8:	4293      	cmp	r3, r2
 8009dda:	d003      	beq.n	8009de4 <TIM_OC1_SetConfig+0x80>
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	4a28      	ldr	r2, [pc, #160]	; (8009e80 <TIM_OC1_SetConfig+0x11c>)
 8009de0:	4293      	cmp	r3, r2
 8009de2:	d10c      	bne.n	8009dfe <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009de4:	697b      	ldr	r3, [r7, #20]
 8009de6:	f023 0308 	bic.w	r3, r3, #8
 8009dea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009dec:	683b      	ldr	r3, [r7, #0]
 8009dee:	68db      	ldr	r3, [r3, #12]
 8009df0:	697a      	ldr	r2, [r7, #20]
 8009df2:	4313      	orrs	r3, r2
 8009df4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009df6:	697b      	ldr	r3, [r7, #20]
 8009df8:	f023 0304 	bic.w	r3, r3, #4
 8009dfc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	4a1b      	ldr	r2, [pc, #108]	; (8009e70 <TIM_OC1_SetConfig+0x10c>)
 8009e02:	4293      	cmp	r3, r2
 8009e04:	d00f      	beq.n	8009e26 <TIM_OC1_SetConfig+0xc2>
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	4a1a      	ldr	r2, [pc, #104]	; (8009e74 <TIM_OC1_SetConfig+0x110>)
 8009e0a:	4293      	cmp	r3, r2
 8009e0c:	d00b      	beq.n	8009e26 <TIM_OC1_SetConfig+0xc2>
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	4a19      	ldr	r2, [pc, #100]	; (8009e78 <TIM_OC1_SetConfig+0x114>)
 8009e12:	4293      	cmp	r3, r2
 8009e14:	d007      	beq.n	8009e26 <TIM_OC1_SetConfig+0xc2>
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	4a18      	ldr	r2, [pc, #96]	; (8009e7c <TIM_OC1_SetConfig+0x118>)
 8009e1a:	4293      	cmp	r3, r2
 8009e1c:	d003      	beq.n	8009e26 <TIM_OC1_SetConfig+0xc2>
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	4a17      	ldr	r2, [pc, #92]	; (8009e80 <TIM_OC1_SetConfig+0x11c>)
 8009e22:	4293      	cmp	r3, r2
 8009e24:	d111      	bne.n	8009e4a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009e26:	693b      	ldr	r3, [r7, #16]
 8009e28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009e2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009e2e:	693b      	ldr	r3, [r7, #16]
 8009e30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009e34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009e36:	683b      	ldr	r3, [r7, #0]
 8009e38:	695b      	ldr	r3, [r3, #20]
 8009e3a:	693a      	ldr	r2, [r7, #16]
 8009e3c:	4313      	orrs	r3, r2
 8009e3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009e40:	683b      	ldr	r3, [r7, #0]
 8009e42:	699b      	ldr	r3, [r3, #24]
 8009e44:	693a      	ldr	r2, [r7, #16]
 8009e46:	4313      	orrs	r3, r2
 8009e48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	693a      	ldr	r2, [r7, #16]
 8009e4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	68fa      	ldr	r2, [r7, #12]
 8009e54:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	685a      	ldr	r2, [r3, #4]
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	697a      	ldr	r2, [r7, #20]
 8009e62:	621a      	str	r2, [r3, #32]
}
 8009e64:	bf00      	nop
 8009e66:	371c      	adds	r7, #28
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6e:	4770      	bx	lr
 8009e70:	40012c00 	.word	0x40012c00
 8009e74:	40013400 	.word	0x40013400
 8009e78:	40014000 	.word	0x40014000
 8009e7c:	40014400 	.word	0x40014400
 8009e80:	40014800 	.word	0x40014800

08009e84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009e84:	b480      	push	{r7}
 8009e86:	b087      	sub	sp, #28
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
 8009e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	6a1b      	ldr	r3, [r3, #32]
 8009e92:	f023 0210 	bic.w	r2, r3, #16
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	6a1b      	ldr	r3, [r3, #32]
 8009e9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	685b      	ldr	r3, [r3, #4]
 8009ea4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	699b      	ldr	r3, [r3, #24]
 8009eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009eb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009eb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ebe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	021b      	lsls	r3, r3, #8
 8009ec6:	68fa      	ldr	r2, [r7, #12]
 8009ec8:	4313      	orrs	r3, r2
 8009eca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009ecc:	697b      	ldr	r3, [r7, #20]
 8009ece:	f023 0320 	bic.w	r3, r3, #32
 8009ed2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	689b      	ldr	r3, [r3, #8]
 8009ed8:	011b      	lsls	r3, r3, #4
 8009eda:	697a      	ldr	r2, [r7, #20]
 8009edc:	4313      	orrs	r3, r2
 8009ede:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	4a28      	ldr	r2, [pc, #160]	; (8009f84 <TIM_OC2_SetConfig+0x100>)
 8009ee4:	4293      	cmp	r3, r2
 8009ee6:	d003      	beq.n	8009ef0 <TIM_OC2_SetConfig+0x6c>
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	4a27      	ldr	r2, [pc, #156]	; (8009f88 <TIM_OC2_SetConfig+0x104>)
 8009eec:	4293      	cmp	r3, r2
 8009eee:	d10d      	bne.n	8009f0c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009ef0:	697b      	ldr	r3, [r7, #20]
 8009ef2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009ef6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	68db      	ldr	r3, [r3, #12]
 8009efc:	011b      	lsls	r3, r3, #4
 8009efe:	697a      	ldr	r2, [r7, #20]
 8009f00:	4313      	orrs	r3, r2
 8009f02:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009f04:	697b      	ldr	r3, [r7, #20]
 8009f06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f0a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	4a1d      	ldr	r2, [pc, #116]	; (8009f84 <TIM_OC2_SetConfig+0x100>)
 8009f10:	4293      	cmp	r3, r2
 8009f12:	d00f      	beq.n	8009f34 <TIM_OC2_SetConfig+0xb0>
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	4a1c      	ldr	r2, [pc, #112]	; (8009f88 <TIM_OC2_SetConfig+0x104>)
 8009f18:	4293      	cmp	r3, r2
 8009f1a:	d00b      	beq.n	8009f34 <TIM_OC2_SetConfig+0xb0>
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	4a1b      	ldr	r2, [pc, #108]	; (8009f8c <TIM_OC2_SetConfig+0x108>)
 8009f20:	4293      	cmp	r3, r2
 8009f22:	d007      	beq.n	8009f34 <TIM_OC2_SetConfig+0xb0>
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	4a1a      	ldr	r2, [pc, #104]	; (8009f90 <TIM_OC2_SetConfig+0x10c>)
 8009f28:	4293      	cmp	r3, r2
 8009f2a:	d003      	beq.n	8009f34 <TIM_OC2_SetConfig+0xb0>
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	4a19      	ldr	r2, [pc, #100]	; (8009f94 <TIM_OC2_SetConfig+0x110>)
 8009f30:	4293      	cmp	r3, r2
 8009f32:	d113      	bne.n	8009f5c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009f34:	693b      	ldr	r3, [r7, #16]
 8009f36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009f3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009f3c:	693b      	ldr	r3, [r7, #16]
 8009f3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009f42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	695b      	ldr	r3, [r3, #20]
 8009f48:	009b      	lsls	r3, r3, #2
 8009f4a:	693a      	ldr	r2, [r7, #16]
 8009f4c:	4313      	orrs	r3, r2
 8009f4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009f50:	683b      	ldr	r3, [r7, #0]
 8009f52:	699b      	ldr	r3, [r3, #24]
 8009f54:	009b      	lsls	r3, r3, #2
 8009f56:	693a      	ldr	r2, [r7, #16]
 8009f58:	4313      	orrs	r3, r2
 8009f5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	693a      	ldr	r2, [r7, #16]
 8009f60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	68fa      	ldr	r2, [r7, #12]
 8009f66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	685a      	ldr	r2, [r3, #4]
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	697a      	ldr	r2, [r7, #20]
 8009f74:	621a      	str	r2, [r3, #32]
}
 8009f76:	bf00      	nop
 8009f78:	371c      	adds	r7, #28
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f80:	4770      	bx	lr
 8009f82:	bf00      	nop
 8009f84:	40012c00 	.word	0x40012c00
 8009f88:	40013400 	.word	0x40013400
 8009f8c:	40014000 	.word	0x40014000
 8009f90:	40014400 	.word	0x40014400
 8009f94:	40014800 	.word	0x40014800

08009f98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009f98:	b480      	push	{r7}
 8009f9a:	b087      	sub	sp, #28
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
 8009fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6a1b      	ldr	r3, [r3, #32]
 8009fa6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	6a1b      	ldr	r3, [r3, #32]
 8009fb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	685b      	ldr	r3, [r3, #4]
 8009fb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	69db      	ldr	r3, [r3, #28]
 8009fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009fca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	f023 0303 	bic.w	r3, r3, #3
 8009fd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	68fa      	ldr	r2, [r7, #12]
 8009fda:	4313      	orrs	r3, r2
 8009fdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009fde:	697b      	ldr	r3, [r7, #20]
 8009fe0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009fe4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	689b      	ldr	r3, [r3, #8]
 8009fea:	021b      	lsls	r3, r3, #8
 8009fec:	697a      	ldr	r2, [r7, #20]
 8009fee:	4313      	orrs	r3, r2
 8009ff0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	4a27      	ldr	r2, [pc, #156]	; (800a094 <TIM_OC3_SetConfig+0xfc>)
 8009ff6:	4293      	cmp	r3, r2
 8009ff8:	d003      	beq.n	800a002 <TIM_OC3_SetConfig+0x6a>
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	4a26      	ldr	r2, [pc, #152]	; (800a098 <TIM_OC3_SetConfig+0x100>)
 8009ffe:	4293      	cmp	r3, r2
 800a000:	d10d      	bne.n	800a01e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a002:	697b      	ldr	r3, [r7, #20]
 800a004:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a008:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	68db      	ldr	r3, [r3, #12]
 800a00e:	021b      	lsls	r3, r3, #8
 800a010:	697a      	ldr	r2, [r7, #20]
 800a012:	4313      	orrs	r3, r2
 800a014:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a016:	697b      	ldr	r3, [r7, #20]
 800a018:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a01c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	4a1c      	ldr	r2, [pc, #112]	; (800a094 <TIM_OC3_SetConfig+0xfc>)
 800a022:	4293      	cmp	r3, r2
 800a024:	d00f      	beq.n	800a046 <TIM_OC3_SetConfig+0xae>
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	4a1b      	ldr	r2, [pc, #108]	; (800a098 <TIM_OC3_SetConfig+0x100>)
 800a02a:	4293      	cmp	r3, r2
 800a02c:	d00b      	beq.n	800a046 <TIM_OC3_SetConfig+0xae>
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	4a1a      	ldr	r2, [pc, #104]	; (800a09c <TIM_OC3_SetConfig+0x104>)
 800a032:	4293      	cmp	r3, r2
 800a034:	d007      	beq.n	800a046 <TIM_OC3_SetConfig+0xae>
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	4a19      	ldr	r2, [pc, #100]	; (800a0a0 <TIM_OC3_SetConfig+0x108>)
 800a03a:	4293      	cmp	r3, r2
 800a03c:	d003      	beq.n	800a046 <TIM_OC3_SetConfig+0xae>
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	4a18      	ldr	r2, [pc, #96]	; (800a0a4 <TIM_OC3_SetConfig+0x10c>)
 800a042:	4293      	cmp	r3, r2
 800a044:	d113      	bne.n	800a06e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a046:	693b      	ldr	r3, [r7, #16]
 800a048:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a04c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a04e:	693b      	ldr	r3, [r7, #16]
 800a050:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a054:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	695b      	ldr	r3, [r3, #20]
 800a05a:	011b      	lsls	r3, r3, #4
 800a05c:	693a      	ldr	r2, [r7, #16]
 800a05e:	4313      	orrs	r3, r2
 800a060:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a062:	683b      	ldr	r3, [r7, #0]
 800a064:	699b      	ldr	r3, [r3, #24]
 800a066:	011b      	lsls	r3, r3, #4
 800a068:	693a      	ldr	r2, [r7, #16]
 800a06a:	4313      	orrs	r3, r2
 800a06c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	693a      	ldr	r2, [r7, #16]
 800a072:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	68fa      	ldr	r2, [r7, #12]
 800a078:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	685a      	ldr	r2, [r3, #4]
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	697a      	ldr	r2, [r7, #20]
 800a086:	621a      	str	r2, [r3, #32]
}
 800a088:	bf00      	nop
 800a08a:	371c      	adds	r7, #28
 800a08c:	46bd      	mov	sp, r7
 800a08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a092:	4770      	bx	lr
 800a094:	40012c00 	.word	0x40012c00
 800a098:	40013400 	.word	0x40013400
 800a09c:	40014000 	.word	0x40014000
 800a0a0:	40014400 	.word	0x40014400
 800a0a4:	40014800 	.word	0x40014800

0800a0a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a0a8:	b480      	push	{r7}
 800a0aa:	b087      	sub	sp, #28
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
 800a0b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	6a1b      	ldr	r3, [r3, #32]
 800a0b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	6a1b      	ldr	r3, [r3, #32]
 800a0c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	685b      	ldr	r3, [r3, #4]
 800a0c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	69db      	ldr	r3, [r3, #28]
 800a0ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a0d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a0da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a0e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	021b      	lsls	r3, r3, #8
 800a0ea:	68fa      	ldr	r2, [r7, #12]
 800a0ec:	4313      	orrs	r3, r2
 800a0ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a0f0:	693b      	ldr	r3, [r7, #16]
 800a0f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a0f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	689b      	ldr	r3, [r3, #8]
 800a0fc:	031b      	lsls	r3, r3, #12
 800a0fe:	693a      	ldr	r2, [r7, #16]
 800a100:	4313      	orrs	r3, r2
 800a102:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	4a18      	ldr	r2, [pc, #96]	; (800a168 <TIM_OC4_SetConfig+0xc0>)
 800a108:	4293      	cmp	r3, r2
 800a10a:	d00f      	beq.n	800a12c <TIM_OC4_SetConfig+0x84>
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	4a17      	ldr	r2, [pc, #92]	; (800a16c <TIM_OC4_SetConfig+0xc4>)
 800a110:	4293      	cmp	r3, r2
 800a112:	d00b      	beq.n	800a12c <TIM_OC4_SetConfig+0x84>
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	4a16      	ldr	r2, [pc, #88]	; (800a170 <TIM_OC4_SetConfig+0xc8>)
 800a118:	4293      	cmp	r3, r2
 800a11a:	d007      	beq.n	800a12c <TIM_OC4_SetConfig+0x84>
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	4a15      	ldr	r2, [pc, #84]	; (800a174 <TIM_OC4_SetConfig+0xcc>)
 800a120:	4293      	cmp	r3, r2
 800a122:	d003      	beq.n	800a12c <TIM_OC4_SetConfig+0x84>
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	4a14      	ldr	r2, [pc, #80]	; (800a178 <TIM_OC4_SetConfig+0xd0>)
 800a128:	4293      	cmp	r3, r2
 800a12a:	d109      	bne.n	800a140 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a12c:	697b      	ldr	r3, [r7, #20]
 800a12e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a132:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a134:	683b      	ldr	r3, [r7, #0]
 800a136:	695b      	ldr	r3, [r3, #20]
 800a138:	019b      	lsls	r3, r3, #6
 800a13a:	697a      	ldr	r2, [r7, #20]
 800a13c:	4313      	orrs	r3, r2
 800a13e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	697a      	ldr	r2, [r7, #20]
 800a144:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	68fa      	ldr	r2, [r7, #12]
 800a14a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	685a      	ldr	r2, [r3, #4]
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	693a      	ldr	r2, [r7, #16]
 800a158:	621a      	str	r2, [r3, #32]
}
 800a15a:	bf00      	nop
 800a15c:	371c      	adds	r7, #28
 800a15e:	46bd      	mov	sp, r7
 800a160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a164:	4770      	bx	lr
 800a166:	bf00      	nop
 800a168:	40012c00 	.word	0x40012c00
 800a16c:	40013400 	.word	0x40013400
 800a170:	40014000 	.word	0x40014000
 800a174:	40014400 	.word	0x40014400
 800a178:	40014800 	.word	0x40014800

0800a17c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a17c:	b480      	push	{r7}
 800a17e:	b087      	sub	sp, #28
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
 800a184:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	6a1b      	ldr	r3, [r3, #32]
 800a18a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	6a1b      	ldr	r3, [r3, #32]
 800a196:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	685b      	ldr	r3, [r3, #4]
 800a19c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a1aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	68fa      	ldr	r2, [r7, #12]
 800a1b6:	4313      	orrs	r3, r2
 800a1b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a1ba:	693b      	ldr	r3, [r7, #16]
 800a1bc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a1c0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	689b      	ldr	r3, [r3, #8]
 800a1c6:	041b      	lsls	r3, r3, #16
 800a1c8:	693a      	ldr	r2, [r7, #16]
 800a1ca:	4313      	orrs	r3, r2
 800a1cc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	4a17      	ldr	r2, [pc, #92]	; (800a230 <TIM_OC5_SetConfig+0xb4>)
 800a1d2:	4293      	cmp	r3, r2
 800a1d4:	d00f      	beq.n	800a1f6 <TIM_OC5_SetConfig+0x7a>
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	4a16      	ldr	r2, [pc, #88]	; (800a234 <TIM_OC5_SetConfig+0xb8>)
 800a1da:	4293      	cmp	r3, r2
 800a1dc:	d00b      	beq.n	800a1f6 <TIM_OC5_SetConfig+0x7a>
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	4a15      	ldr	r2, [pc, #84]	; (800a238 <TIM_OC5_SetConfig+0xbc>)
 800a1e2:	4293      	cmp	r3, r2
 800a1e4:	d007      	beq.n	800a1f6 <TIM_OC5_SetConfig+0x7a>
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	4a14      	ldr	r2, [pc, #80]	; (800a23c <TIM_OC5_SetConfig+0xc0>)
 800a1ea:	4293      	cmp	r3, r2
 800a1ec:	d003      	beq.n	800a1f6 <TIM_OC5_SetConfig+0x7a>
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	4a13      	ldr	r2, [pc, #76]	; (800a240 <TIM_OC5_SetConfig+0xc4>)
 800a1f2:	4293      	cmp	r3, r2
 800a1f4:	d109      	bne.n	800a20a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a1f6:	697b      	ldr	r3, [r7, #20]
 800a1f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a1fc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a1fe:	683b      	ldr	r3, [r7, #0]
 800a200:	695b      	ldr	r3, [r3, #20]
 800a202:	021b      	lsls	r3, r3, #8
 800a204:	697a      	ldr	r2, [r7, #20]
 800a206:	4313      	orrs	r3, r2
 800a208:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	697a      	ldr	r2, [r7, #20]
 800a20e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	68fa      	ldr	r2, [r7, #12]
 800a214:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	685a      	ldr	r2, [r3, #4]
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	693a      	ldr	r2, [r7, #16]
 800a222:	621a      	str	r2, [r3, #32]
}
 800a224:	bf00      	nop
 800a226:	371c      	adds	r7, #28
 800a228:	46bd      	mov	sp, r7
 800a22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22e:	4770      	bx	lr
 800a230:	40012c00 	.word	0x40012c00
 800a234:	40013400 	.word	0x40013400
 800a238:	40014000 	.word	0x40014000
 800a23c:	40014400 	.word	0x40014400
 800a240:	40014800 	.word	0x40014800

0800a244 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a244:	b480      	push	{r7}
 800a246:	b087      	sub	sp, #28
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
 800a24c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	6a1b      	ldr	r3, [r3, #32]
 800a252:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	6a1b      	ldr	r3, [r3, #32]
 800a25e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	685b      	ldr	r3, [r3, #4]
 800a264:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a26a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a272:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a276:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	021b      	lsls	r3, r3, #8
 800a27e:	68fa      	ldr	r2, [r7, #12]
 800a280:	4313      	orrs	r3, r2
 800a282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a284:	693b      	ldr	r3, [r7, #16]
 800a286:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a28a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	689b      	ldr	r3, [r3, #8]
 800a290:	051b      	lsls	r3, r3, #20
 800a292:	693a      	ldr	r2, [r7, #16]
 800a294:	4313      	orrs	r3, r2
 800a296:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	4a18      	ldr	r2, [pc, #96]	; (800a2fc <TIM_OC6_SetConfig+0xb8>)
 800a29c:	4293      	cmp	r3, r2
 800a29e:	d00f      	beq.n	800a2c0 <TIM_OC6_SetConfig+0x7c>
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	4a17      	ldr	r2, [pc, #92]	; (800a300 <TIM_OC6_SetConfig+0xbc>)
 800a2a4:	4293      	cmp	r3, r2
 800a2a6:	d00b      	beq.n	800a2c0 <TIM_OC6_SetConfig+0x7c>
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	4a16      	ldr	r2, [pc, #88]	; (800a304 <TIM_OC6_SetConfig+0xc0>)
 800a2ac:	4293      	cmp	r3, r2
 800a2ae:	d007      	beq.n	800a2c0 <TIM_OC6_SetConfig+0x7c>
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	4a15      	ldr	r2, [pc, #84]	; (800a308 <TIM_OC6_SetConfig+0xc4>)
 800a2b4:	4293      	cmp	r3, r2
 800a2b6:	d003      	beq.n	800a2c0 <TIM_OC6_SetConfig+0x7c>
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	4a14      	ldr	r2, [pc, #80]	; (800a30c <TIM_OC6_SetConfig+0xc8>)
 800a2bc:	4293      	cmp	r3, r2
 800a2be:	d109      	bne.n	800a2d4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a2c0:	697b      	ldr	r3, [r7, #20]
 800a2c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a2c6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	695b      	ldr	r3, [r3, #20]
 800a2cc:	029b      	lsls	r3, r3, #10
 800a2ce:	697a      	ldr	r2, [r7, #20]
 800a2d0:	4313      	orrs	r3, r2
 800a2d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	697a      	ldr	r2, [r7, #20]
 800a2d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	68fa      	ldr	r2, [r7, #12]
 800a2de:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	685a      	ldr	r2, [r3, #4]
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	693a      	ldr	r2, [r7, #16]
 800a2ec:	621a      	str	r2, [r3, #32]
}
 800a2ee:	bf00      	nop
 800a2f0:	371c      	adds	r7, #28
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f8:	4770      	bx	lr
 800a2fa:	bf00      	nop
 800a2fc:	40012c00 	.word	0x40012c00
 800a300:	40013400 	.word	0x40013400
 800a304:	40014000 	.word	0x40014000
 800a308:	40014400 	.word	0x40014400
 800a30c:	40014800 	.word	0x40014800

0800a310 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800a310:	b480      	push	{r7}
 800a312:	b087      	sub	sp, #28
 800a314:	af00      	add	r7, sp, #0
 800a316:	60f8      	str	r0, [r7, #12]
 800a318:	60b9      	str	r1, [r7, #8]
 800a31a:	607a      	str	r2, [r7, #4]
 800a31c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	6a1b      	ldr	r3, [r3, #32]
 800a322:	f023 0201 	bic.w	r2, r3, #1
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	699b      	ldr	r3, [r3, #24]
 800a32e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	6a1b      	ldr	r3, [r3, #32]
 800a334:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	4a26      	ldr	r2, [pc, #152]	; (800a3d4 <TIM_TI1_SetConfig+0xc4>)
 800a33a:	4293      	cmp	r3, r2
 800a33c:	d017      	beq.n	800a36e <TIM_TI1_SetConfig+0x5e>
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a344:	d013      	beq.n	800a36e <TIM_TI1_SetConfig+0x5e>
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	4a23      	ldr	r2, [pc, #140]	; (800a3d8 <TIM_TI1_SetConfig+0xc8>)
 800a34a:	4293      	cmp	r3, r2
 800a34c:	d00f      	beq.n	800a36e <TIM_TI1_SetConfig+0x5e>
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	4a22      	ldr	r2, [pc, #136]	; (800a3dc <TIM_TI1_SetConfig+0xcc>)
 800a352:	4293      	cmp	r3, r2
 800a354:	d00b      	beq.n	800a36e <TIM_TI1_SetConfig+0x5e>
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	4a21      	ldr	r2, [pc, #132]	; (800a3e0 <TIM_TI1_SetConfig+0xd0>)
 800a35a:	4293      	cmp	r3, r2
 800a35c:	d007      	beq.n	800a36e <TIM_TI1_SetConfig+0x5e>
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	4a20      	ldr	r2, [pc, #128]	; (800a3e4 <TIM_TI1_SetConfig+0xd4>)
 800a362:	4293      	cmp	r3, r2
 800a364:	d003      	beq.n	800a36e <TIM_TI1_SetConfig+0x5e>
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	4a1f      	ldr	r2, [pc, #124]	; (800a3e8 <TIM_TI1_SetConfig+0xd8>)
 800a36a:	4293      	cmp	r3, r2
 800a36c:	d101      	bne.n	800a372 <TIM_TI1_SetConfig+0x62>
 800a36e:	2301      	movs	r3, #1
 800a370:	e000      	b.n	800a374 <TIM_TI1_SetConfig+0x64>
 800a372:	2300      	movs	r3, #0
 800a374:	2b00      	cmp	r3, #0
 800a376:	d008      	beq.n	800a38a <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800a378:	697b      	ldr	r3, [r7, #20]
 800a37a:	f023 0303 	bic.w	r3, r3, #3
 800a37e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800a380:	697a      	ldr	r2, [r7, #20]
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	4313      	orrs	r3, r2
 800a386:	617b      	str	r3, [r7, #20]
 800a388:	e003      	b.n	800a392 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800a38a:	697b      	ldr	r3, [r7, #20]
 800a38c:	f043 0301 	orr.w	r3, r3, #1
 800a390:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a392:	697b      	ldr	r3, [r7, #20]
 800a394:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a398:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800a39a:	683b      	ldr	r3, [r7, #0]
 800a39c:	011b      	lsls	r3, r3, #4
 800a39e:	b2db      	uxtb	r3, r3
 800a3a0:	697a      	ldr	r2, [r7, #20]
 800a3a2:	4313      	orrs	r3, r2
 800a3a4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a3a6:	693b      	ldr	r3, [r7, #16]
 800a3a8:	f023 030a 	bic.w	r3, r3, #10
 800a3ac:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800a3ae:	68bb      	ldr	r3, [r7, #8]
 800a3b0:	f003 030a 	and.w	r3, r3, #10
 800a3b4:	693a      	ldr	r2, [r7, #16]
 800a3b6:	4313      	orrs	r3, r2
 800a3b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	697a      	ldr	r2, [r7, #20]
 800a3be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	693a      	ldr	r2, [r7, #16]
 800a3c4:	621a      	str	r2, [r3, #32]
}
 800a3c6:	bf00      	nop
 800a3c8:	371c      	adds	r7, #28
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d0:	4770      	bx	lr
 800a3d2:	bf00      	nop
 800a3d4:	40012c00 	.word	0x40012c00
 800a3d8:	40000400 	.word	0x40000400
 800a3dc:	40000800 	.word	0x40000800
 800a3e0:	40000c00 	.word	0x40000c00
 800a3e4:	40013400 	.word	0x40013400
 800a3e8:	40014000 	.word	0x40014000

0800a3ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a3ec:	b480      	push	{r7}
 800a3ee:	b087      	sub	sp, #28
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	60f8      	str	r0, [r7, #12]
 800a3f4:	60b9      	str	r1, [r7, #8]
 800a3f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	6a1b      	ldr	r3, [r3, #32]
 800a3fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	6a1b      	ldr	r3, [r3, #32]
 800a402:	f023 0201 	bic.w	r2, r3, #1
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	699b      	ldr	r3, [r3, #24]
 800a40e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a410:	693b      	ldr	r3, [r7, #16]
 800a412:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a416:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	011b      	lsls	r3, r3, #4
 800a41c:	693a      	ldr	r2, [r7, #16]
 800a41e:	4313      	orrs	r3, r2
 800a420:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a422:	697b      	ldr	r3, [r7, #20]
 800a424:	f023 030a 	bic.w	r3, r3, #10
 800a428:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a42a:	697a      	ldr	r2, [r7, #20]
 800a42c:	68bb      	ldr	r3, [r7, #8]
 800a42e:	4313      	orrs	r3, r2
 800a430:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	693a      	ldr	r2, [r7, #16]
 800a436:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	697a      	ldr	r2, [r7, #20]
 800a43c:	621a      	str	r2, [r3, #32]
}
 800a43e:	bf00      	nop
 800a440:	371c      	adds	r7, #28
 800a442:	46bd      	mov	sp, r7
 800a444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a448:	4770      	bx	lr

0800a44a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a44a:	b480      	push	{r7}
 800a44c:	b087      	sub	sp, #28
 800a44e:	af00      	add	r7, sp, #0
 800a450:	60f8      	str	r0, [r7, #12]
 800a452:	60b9      	str	r1, [r7, #8]
 800a454:	607a      	str	r2, [r7, #4]
 800a456:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	6a1b      	ldr	r3, [r3, #32]
 800a45c:	f023 0210 	bic.w	r2, r3, #16
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	699b      	ldr	r3, [r3, #24]
 800a468:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	6a1b      	ldr	r3, [r3, #32]
 800a46e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800a470:	697b      	ldr	r3, [r7, #20]
 800a472:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a476:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	021b      	lsls	r3, r3, #8
 800a47c:	697a      	ldr	r2, [r7, #20]
 800a47e:	4313      	orrs	r3, r2
 800a480:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a482:	697b      	ldr	r3, [r7, #20]
 800a484:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a488:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800a48a:	683b      	ldr	r3, [r7, #0]
 800a48c:	031b      	lsls	r3, r3, #12
 800a48e:	b29b      	uxth	r3, r3
 800a490:	697a      	ldr	r2, [r7, #20]
 800a492:	4313      	orrs	r3, r2
 800a494:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a496:	693b      	ldr	r3, [r7, #16]
 800a498:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a49c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800a49e:	68bb      	ldr	r3, [r7, #8]
 800a4a0:	011b      	lsls	r3, r3, #4
 800a4a2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800a4a6:	693a      	ldr	r2, [r7, #16]
 800a4a8:	4313      	orrs	r3, r2
 800a4aa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	697a      	ldr	r2, [r7, #20]
 800a4b0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	693a      	ldr	r2, [r7, #16]
 800a4b6:	621a      	str	r2, [r3, #32]
}
 800a4b8:	bf00      	nop
 800a4ba:	371c      	adds	r7, #28
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c2:	4770      	bx	lr

0800a4c4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a4c4:	b480      	push	{r7}
 800a4c6:	b087      	sub	sp, #28
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	60f8      	str	r0, [r7, #12]
 800a4cc:	60b9      	str	r1, [r7, #8]
 800a4ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	6a1b      	ldr	r3, [r3, #32]
 800a4d4:	f023 0210 	bic.w	r2, r3, #16
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	699b      	ldr	r3, [r3, #24]
 800a4e0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	6a1b      	ldr	r3, [r3, #32]
 800a4e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a4e8:	697b      	ldr	r3, [r7, #20]
 800a4ea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a4ee:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	031b      	lsls	r3, r3, #12
 800a4f4:	697a      	ldr	r2, [r7, #20]
 800a4f6:	4313      	orrs	r3, r2
 800a4f8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a4fa:	693b      	ldr	r3, [r7, #16]
 800a4fc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a500:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a502:	68bb      	ldr	r3, [r7, #8]
 800a504:	011b      	lsls	r3, r3, #4
 800a506:	693a      	ldr	r2, [r7, #16]
 800a508:	4313      	orrs	r3, r2
 800a50a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	697a      	ldr	r2, [r7, #20]
 800a510:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	693a      	ldr	r2, [r7, #16]
 800a516:	621a      	str	r2, [r3, #32]
}
 800a518:	bf00      	nop
 800a51a:	371c      	adds	r7, #28
 800a51c:	46bd      	mov	sp, r7
 800a51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a522:	4770      	bx	lr

0800a524 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a524:	b480      	push	{r7}
 800a526:	b087      	sub	sp, #28
 800a528:	af00      	add	r7, sp, #0
 800a52a:	60f8      	str	r0, [r7, #12]
 800a52c:	60b9      	str	r1, [r7, #8]
 800a52e:	607a      	str	r2, [r7, #4]
 800a530:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	6a1b      	ldr	r3, [r3, #32]
 800a536:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	69db      	ldr	r3, [r3, #28]
 800a542:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	6a1b      	ldr	r3, [r3, #32]
 800a548:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800a54a:	697b      	ldr	r3, [r7, #20]
 800a54c:	f023 0303 	bic.w	r3, r3, #3
 800a550:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800a552:	697a      	ldr	r2, [r7, #20]
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	4313      	orrs	r3, r2
 800a558:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800a55a:	697b      	ldr	r3, [r7, #20]
 800a55c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a560:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800a562:	683b      	ldr	r3, [r7, #0]
 800a564:	011b      	lsls	r3, r3, #4
 800a566:	b2db      	uxtb	r3, r3
 800a568:	697a      	ldr	r2, [r7, #20]
 800a56a:	4313      	orrs	r3, r2
 800a56c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800a56e:	693b      	ldr	r3, [r7, #16]
 800a570:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800a574:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800a576:	68bb      	ldr	r3, [r7, #8]
 800a578:	021b      	lsls	r3, r3, #8
 800a57a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800a57e:	693a      	ldr	r2, [r7, #16]
 800a580:	4313      	orrs	r3, r2
 800a582:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	697a      	ldr	r2, [r7, #20]
 800a588:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	693a      	ldr	r2, [r7, #16]
 800a58e:	621a      	str	r2, [r3, #32]
}
 800a590:	bf00      	nop
 800a592:	371c      	adds	r7, #28
 800a594:	46bd      	mov	sp, r7
 800a596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59a:	4770      	bx	lr

0800a59c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a59c:	b480      	push	{r7}
 800a59e:	b087      	sub	sp, #28
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	60f8      	str	r0, [r7, #12]
 800a5a4:	60b9      	str	r1, [r7, #8]
 800a5a6:	607a      	str	r2, [r7, #4]
 800a5a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	6a1b      	ldr	r3, [r3, #32]
 800a5ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	69db      	ldr	r3, [r3, #28]
 800a5ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	6a1b      	ldr	r3, [r3, #32]
 800a5c0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800a5c2:	697b      	ldr	r3, [r7, #20]
 800a5c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a5c8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	021b      	lsls	r3, r3, #8
 800a5ce:	697a      	ldr	r2, [r7, #20]
 800a5d0:	4313      	orrs	r3, r2
 800a5d2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800a5d4:	697b      	ldr	r3, [r7, #20]
 800a5d6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a5da:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800a5dc:	683b      	ldr	r3, [r7, #0]
 800a5de:	031b      	lsls	r3, r3, #12
 800a5e0:	b29b      	uxth	r3, r3
 800a5e2:	697a      	ldr	r2, [r7, #20]
 800a5e4:	4313      	orrs	r3, r2
 800a5e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800a5e8:	693b      	ldr	r3, [r7, #16]
 800a5ea:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800a5ee:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800a5f0:	68bb      	ldr	r3, [r7, #8]
 800a5f2:	031b      	lsls	r3, r3, #12
 800a5f4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800a5f8:	693a      	ldr	r2, [r7, #16]
 800a5fa:	4313      	orrs	r3, r2
 800a5fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	697a      	ldr	r2, [r7, #20]
 800a602:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	693a      	ldr	r2, [r7, #16]
 800a608:	621a      	str	r2, [r3, #32]
}
 800a60a:	bf00      	nop
 800a60c:	371c      	adds	r7, #28
 800a60e:	46bd      	mov	sp, r7
 800a610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a614:	4770      	bx	lr

0800a616 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a616:	b480      	push	{r7}
 800a618:	b085      	sub	sp, #20
 800a61a:	af00      	add	r7, sp, #0
 800a61c:	6078      	str	r0, [r7, #4]
 800a61e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	689b      	ldr	r3, [r3, #8]
 800a624:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a62c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a62e:	683a      	ldr	r2, [r7, #0]
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	4313      	orrs	r3, r2
 800a634:	f043 0307 	orr.w	r3, r3, #7
 800a638:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	68fa      	ldr	r2, [r7, #12]
 800a63e:	609a      	str	r2, [r3, #8]
}
 800a640:	bf00      	nop
 800a642:	3714      	adds	r7, #20
 800a644:	46bd      	mov	sp, r7
 800a646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64a:	4770      	bx	lr

0800a64c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a64c:	b480      	push	{r7}
 800a64e:	b087      	sub	sp, #28
 800a650:	af00      	add	r7, sp, #0
 800a652:	60f8      	str	r0, [r7, #12]
 800a654:	60b9      	str	r1, [r7, #8]
 800a656:	607a      	str	r2, [r7, #4]
 800a658:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	689b      	ldr	r3, [r3, #8]
 800a65e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a660:	697b      	ldr	r3, [r7, #20]
 800a662:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a666:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a668:	683b      	ldr	r3, [r7, #0]
 800a66a:	021a      	lsls	r2, r3, #8
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	431a      	orrs	r2, r3
 800a670:	68bb      	ldr	r3, [r7, #8]
 800a672:	4313      	orrs	r3, r2
 800a674:	697a      	ldr	r2, [r7, #20]
 800a676:	4313      	orrs	r3, r2
 800a678:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	697a      	ldr	r2, [r7, #20]
 800a67e:	609a      	str	r2, [r3, #8]
}
 800a680:	bf00      	nop
 800a682:	371c      	adds	r7, #28
 800a684:	46bd      	mov	sp, r7
 800a686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68a:	4770      	bx	lr

0800a68c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a68c:	b480      	push	{r7}
 800a68e:	b087      	sub	sp, #28
 800a690:	af00      	add	r7, sp, #0
 800a692:	60f8      	str	r0, [r7, #12]
 800a694:	60b9      	str	r1, [r7, #8]
 800a696:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a698:	68bb      	ldr	r3, [r7, #8]
 800a69a:	f003 031f 	and.w	r3, r3, #31
 800a69e:	2201      	movs	r2, #1
 800a6a0:	fa02 f303 	lsl.w	r3, r2, r3
 800a6a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	6a1a      	ldr	r2, [r3, #32]
 800a6aa:	697b      	ldr	r3, [r7, #20]
 800a6ac:	43db      	mvns	r3, r3
 800a6ae:	401a      	ands	r2, r3
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	6a1a      	ldr	r2, [r3, #32]
 800a6b8:	68bb      	ldr	r3, [r7, #8]
 800a6ba:	f003 031f 	and.w	r3, r3, #31
 800a6be:	6879      	ldr	r1, [r7, #4]
 800a6c0:	fa01 f303 	lsl.w	r3, r1, r3
 800a6c4:	431a      	orrs	r2, r3
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	621a      	str	r2, [r3, #32]
}
 800a6ca:	bf00      	nop
 800a6cc:	371c      	adds	r7, #28
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d4:	4770      	bx	lr
	...

0800a6d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a6d8:	b480      	push	{r7}
 800a6da:	b085      	sub	sp, #20
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
 800a6e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a6e8:	2b01      	cmp	r3, #1
 800a6ea:	d101      	bne.n	800a6f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a6ec:	2302      	movs	r3, #2
 800a6ee:	e068      	b.n	800a7c2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	2201      	movs	r2, #1
 800a6f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2202      	movs	r2, #2
 800a6fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	685b      	ldr	r3, [r3, #4]
 800a706:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	689b      	ldr	r3, [r3, #8]
 800a70e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	4a2e      	ldr	r2, [pc, #184]	; (800a7d0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a716:	4293      	cmp	r3, r2
 800a718:	d004      	beq.n	800a724 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	4a2d      	ldr	r2, [pc, #180]	; (800a7d4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a720:	4293      	cmp	r3, r2
 800a722:	d108      	bne.n	800a736 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a72a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a72c:	683b      	ldr	r3, [r7, #0]
 800a72e:	685b      	ldr	r3, [r3, #4]
 800a730:	68fa      	ldr	r2, [r7, #12]
 800a732:	4313      	orrs	r3, r2
 800a734:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a73c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a73e:	683b      	ldr	r3, [r7, #0]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	68fa      	ldr	r2, [r7, #12]
 800a744:	4313      	orrs	r3, r2
 800a746:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	68fa      	ldr	r2, [r7, #12]
 800a74e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	4a1e      	ldr	r2, [pc, #120]	; (800a7d0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a756:	4293      	cmp	r3, r2
 800a758:	d01d      	beq.n	800a796 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a762:	d018      	beq.n	800a796 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	4a1b      	ldr	r2, [pc, #108]	; (800a7d8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a76a:	4293      	cmp	r3, r2
 800a76c:	d013      	beq.n	800a796 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	4a1a      	ldr	r2, [pc, #104]	; (800a7dc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a774:	4293      	cmp	r3, r2
 800a776:	d00e      	beq.n	800a796 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	4a18      	ldr	r2, [pc, #96]	; (800a7e0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a77e:	4293      	cmp	r3, r2
 800a780:	d009      	beq.n	800a796 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	4a13      	ldr	r2, [pc, #76]	; (800a7d4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a788:	4293      	cmp	r3, r2
 800a78a:	d004      	beq.n	800a796 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	4a14      	ldr	r2, [pc, #80]	; (800a7e4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a792:	4293      	cmp	r3, r2
 800a794:	d10c      	bne.n	800a7b0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a796:	68bb      	ldr	r3, [r7, #8]
 800a798:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a79c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a79e:	683b      	ldr	r3, [r7, #0]
 800a7a0:	689b      	ldr	r3, [r3, #8]
 800a7a2:	68ba      	ldr	r2, [r7, #8]
 800a7a4:	4313      	orrs	r3, r2
 800a7a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	68ba      	ldr	r2, [r7, #8]
 800a7ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2201      	movs	r2, #1
 800a7b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a7c0:	2300      	movs	r3, #0
}
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	3714      	adds	r7, #20
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7cc:	4770      	bx	lr
 800a7ce:	bf00      	nop
 800a7d0:	40012c00 	.word	0x40012c00
 800a7d4:	40013400 	.word	0x40013400
 800a7d8:	40000400 	.word	0x40000400
 800a7dc:	40000800 	.word	0x40000800
 800a7e0:	40000c00 	.word	0x40000c00
 800a7e4:	40014000 	.word	0x40014000

0800a7e8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a7e8:	b480      	push	{r7}
 800a7ea:	b085      	sub	sp, #20
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
 800a7f0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a7fc:	2b01      	cmp	r3, #1
 800a7fe:	d101      	bne.n	800a804 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a800:	2302      	movs	r3, #2
 800a802:	e065      	b.n	800a8d0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2201      	movs	r2, #1
 800a808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a812:	683b      	ldr	r3, [r7, #0]
 800a814:	68db      	ldr	r3, [r3, #12]
 800a816:	4313      	orrs	r3, r2
 800a818:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a820:	683b      	ldr	r3, [r7, #0]
 800a822:	689b      	ldr	r3, [r3, #8]
 800a824:	4313      	orrs	r3, r2
 800a826:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	685b      	ldr	r3, [r3, #4]
 800a832:	4313      	orrs	r3, r2
 800a834:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a83c:	683b      	ldr	r3, [r7, #0]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	4313      	orrs	r3, r2
 800a842:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	691b      	ldr	r3, [r3, #16]
 800a84e:	4313      	orrs	r3, r2
 800a850:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	695b      	ldr	r3, [r3, #20]
 800a85c:	4313      	orrs	r3, r2
 800a85e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a86a:	4313      	orrs	r3, r2
 800a86c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800a874:	683b      	ldr	r3, [r7, #0]
 800a876:	699b      	ldr	r3, [r3, #24]
 800a878:	041b      	lsls	r3, r3, #16
 800a87a:	4313      	orrs	r3, r2
 800a87c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	4a16      	ldr	r2, [pc, #88]	; (800a8dc <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800a884:	4293      	cmp	r3, r2
 800a886:	d004      	beq.n	800a892 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	4a14      	ldr	r2, [pc, #80]	; (800a8e0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800a88e:	4293      	cmp	r3, r2
 800a890:	d115      	bne.n	800a8be <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a898:	683b      	ldr	r3, [r7, #0]
 800a89a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a89c:	051b      	lsls	r3, r3, #20
 800a89e:	4313      	orrs	r3, r2
 800a8a0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a8a8:	683b      	ldr	r3, [r7, #0]
 800a8aa:	69db      	ldr	r3, [r3, #28]
 800a8ac:	4313      	orrs	r3, r2
 800a8ae:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a8b6:	683b      	ldr	r3, [r7, #0]
 800a8b8:	6a1b      	ldr	r3, [r3, #32]
 800a8ba:	4313      	orrs	r3, r2
 800a8bc:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	68fa      	ldr	r2, [r7, #12]
 800a8c4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a8ce:	2300      	movs	r3, #0
}
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	3714      	adds	r7, #20
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8da:	4770      	bx	lr
 800a8dc:	40012c00 	.word	0x40012c00
 800a8e0:	40013400 	.word	0x40013400

0800a8e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a8e4:	b480      	push	{r7}
 800a8e6:	b083      	sub	sp, #12
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a8ec:	bf00      	nop
 800a8ee:	370c      	adds	r7, #12
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f6:	4770      	bx	lr

0800a8f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a8f8:	b480      	push	{r7}
 800a8fa:	b083      	sub	sp, #12
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a900:	bf00      	nop
 800a902:	370c      	adds	r7, #12
 800a904:	46bd      	mov	sp, r7
 800a906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90a:	4770      	bx	lr

0800a90c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a90c:	b480      	push	{r7}
 800a90e:	b083      	sub	sp, #12
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a914:	bf00      	nop
 800a916:	370c      	adds	r7, #12
 800a918:	46bd      	mov	sp, r7
 800a91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91e:	4770      	bx	lr

0800a920 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a920:	b580      	push	{r7, lr}
 800a922:	b082      	sub	sp, #8
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d101      	bne.n	800a932 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a92e:	2301      	movs	r3, #1
 800a930:	e042      	b.n	800a9b8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d106      	bne.n	800a94a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	2200      	movs	r2, #0
 800a940:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a944:	6878      	ldr	r0, [r7, #4]
 800a946:	f7f8 f90d 	bl	8002b64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	2224      	movs	r2, #36	; 0x24
 800a94e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	681a      	ldr	r2, [r3, #0]
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	f022 0201 	bic.w	r2, r2, #1
 800a960:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a962:	6878      	ldr	r0, [r7, #4]
 800a964:	f000 f8c4 	bl	800aaf0 <UART_SetConfig>
 800a968:	4603      	mov	r3, r0
 800a96a:	2b01      	cmp	r3, #1
 800a96c:	d101      	bne.n	800a972 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a96e:	2301      	movs	r3, #1
 800a970:	e022      	b.n	800a9b8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a976:	2b00      	cmp	r3, #0
 800a978:	d002      	beq.n	800a980 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a97a:	6878      	ldr	r0, [r7, #4]
 800a97c:	f000 fbb4 	bl	800b0e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	685a      	ldr	r2, [r3, #4]
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a98e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	689a      	ldr	r2, [r3, #8]
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a99e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	681a      	ldr	r2, [r3, #0]
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	f042 0201 	orr.w	r2, r2, #1
 800a9ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a9b0:	6878      	ldr	r0, [r7, #4]
 800a9b2:	f000 fc3b 	bl	800b22c <UART_CheckIdleState>
 800a9b6:	4603      	mov	r3, r0
}
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	3708      	adds	r7, #8
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	bd80      	pop	{r7, pc}

0800a9c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b08a      	sub	sp, #40	; 0x28
 800a9c4:	af02      	add	r7, sp, #8
 800a9c6:	60f8      	str	r0, [r7, #12]
 800a9c8:	60b9      	str	r1, [r7, #8]
 800a9ca:	603b      	str	r3, [r7, #0]
 800a9cc:	4613      	mov	r3, r2
 800a9ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a9d6:	2b20      	cmp	r3, #32
 800a9d8:	f040 8084 	bne.w	800aae4 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800a9dc:	68bb      	ldr	r3, [r7, #8]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d002      	beq.n	800a9e8 <HAL_UART_Transmit+0x28>
 800a9e2:	88fb      	ldrh	r3, [r7, #6]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d101      	bne.n	800a9ec <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800a9e8:	2301      	movs	r3, #1
 800a9ea:	e07c      	b.n	800aae6 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a9f2:	2b01      	cmp	r3, #1
 800a9f4:	d101      	bne.n	800a9fa <HAL_UART_Transmit+0x3a>
 800a9f6:	2302      	movs	r3, #2
 800a9f8:	e075      	b.n	800aae6 <HAL_UART_Transmit+0x126>
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	2201      	movs	r2, #1
 800a9fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	2200      	movs	r2, #0
 800aa06:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	2221      	movs	r2, #33	; 0x21
 800aa0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800aa12:	f7f8 fef3 	bl	80037fc <HAL_GetTick>
 800aa16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	88fa      	ldrh	r2, [r7, #6]
 800aa1c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	88fa      	ldrh	r2, [r7, #6]
 800aa24:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	689b      	ldr	r3, [r3, #8]
 800aa2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa30:	d108      	bne.n	800aa44 <HAL_UART_Transmit+0x84>
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	691b      	ldr	r3, [r3, #16]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d104      	bne.n	800aa44 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800aa3e:	68bb      	ldr	r3, [r7, #8]
 800aa40:	61bb      	str	r3, [r7, #24]
 800aa42:	e003      	b.n	800aa4c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800aa44:	68bb      	ldr	r3, [r7, #8]
 800aa46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800aa48:	2300      	movs	r3, #0
 800aa4a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	2200      	movs	r2, #0
 800aa50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800aa54:	e02d      	b.n	800aab2 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800aa56:	683b      	ldr	r3, [r7, #0]
 800aa58:	9300      	str	r3, [sp, #0]
 800aa5a:	697b      	ldr	r3, [r7, #20]
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	2180      	movs	r1, #128	; 0x80
 800aa60:	68f8      	ldr	r0, [r7, #12]
 800aa62:	f000 fc2e 	bl	800b2c2 <UART_WaitOnFlagUntilTimeout>
 800aa66:	4603      	mov	r3, r0
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d001      	beq.n	800aa70 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800aa6c:	2303      	movs	r3, #3
 800aa6e:	e03a      	b.n	800aae6 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 800aa70:	69fb      	ldr	r3, [r7, #28]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d10b      	bne.n	800aa8e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800aa76:	69bb      	ldr	r3, [r7, #24]
 800aa78:	881a      	ldrh	r2, [r3, #0]
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800aa82:	b292      	uxth	r2, r2
 800aa84:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800aa86:	69bb      	ldr	r3, [r7, #24]
 800aa88:	3302      	adds	r3, #2
 800aa8a:	61bb      	str	r3, [r7, #24]
 800aa8c:	e008      	b.n	800aaa0 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800aa8e:	69fb      	ldr	r3, [r7, #28]
 800aa90:	781a      	ldrb	r2, [r3, #0]
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	b292      	uxth	r2, r2
 800aa98:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800aa9a:	69fb      	ldr	r3, [r7, #28]
 800aa9c:	3301      	adds	r3, #1
 800aa9e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800aaa6:	b29b      	uxth	r3, r3
 800aaa8:	3b01      	subs	r3, #1
 800aaaa:	b29a      	uxth	r2, r3
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800aab8:	b29b      	uxth	r3, r3
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d1cb      	bne.n	800aa56 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800aabe:	683b      	ldr	r3, [r7, #0]
 800aac0:	9300      	str	r3, [sp, #0]
 800aac2:	697b      	ldr	r3, [r7, #20]
 800aac4:	2200      	movs	r2, #0
 800aac6:	2140      	movs	r1, #64	; 0x40
 800aac8:	68f8      	ldr	r0, [r7, #12]
 800aaca:	f000 fbfa 	bl	800b2c2 <UART_WaitOnFlagUntilTimeout>
 800aace:	4603      	mov	r3, r0
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d001      	beq.n	800aad8 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 800aad4:	2303      	movs	r3, #3
 800aad6:	e006      	b.n	800aae6 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	2220      	movs	r2, #32
 800aadc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800aae0:	2300      	movs	r3, #0
 800aae2:	e000      	b.n	800aae6 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 800aae4:	2302      	movs	r3, #2
  }
}
 800aae6:	4618      	mov	r0, r3
 800aae8:	3720      	adds	r7, #32
 800aaea:	46bd      	mov	sp, r7
 800aaec:	bd80      	pop	{r7, pc}
	...

0800aaf0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aaf0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aaf4:	b08c      	sub	sp, #48	; 0x30
 800aaf6:	af00      	add	r7, sp, #0
 800aaf8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800aafa:	2300      	movs	r3, #0
 800aafc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ab00:	697b      	ldr	r3, [r7, #20]
 800ab02:	689a      	ldr	r2, [r3, #8]
 800ab04:	697b      	ldr	r3, [r7, #20]
 800ab06:	691b      	ldr	r3, [r3, #16]
 800ab08:	431a      	orrs	r2, r3
 800ab0a:	697b      	ldr	r3, [r7, #20]
 800ab0c:	695b      	ldr	r3, [r3, #20]
 800ab0e:	431a      	orrs	r2, r3
 800ab10:	697b      	ldr	r3, [r7, #20]
 800ab12:	69db      	ldr	r3, [r3, #28]
 800ab14:	4313      	orrs	r3, r2
 800ab16:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ab18:	697b      	ldr	r3, [r7, #20]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	681a      	ldr	r2, [r3, #0]
 800ab1e:	4baa      	ldr	r3, [pc, #680]	; (800adc8 <UART_SetConfig+0x2d8>)
 800ab20:	4013      	ands	r3, r2
 800ab22:	697a      	ldr	r2, [r7, #20]
 800ab24:	6812      	ldr	r2, [r2, #0]
 800ab26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ab28:	430b      	orrs	r3, r1
 800ab2a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ab2c:	697b      	ldr	r3, [r7, #20]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	685b      	ldr	r3, [r3, #4]
 800ab32:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ab36:	697b      	ldr	r3, [r7, #20]
 800ab38:	68da      	ldr	r2, [r3, #12]
 800ab3a:	697b      	ldr	r3, [r7, #20]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	430a      	orrs	r2, r1
 800ab40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ab42:	697b      	ldr	r3, [r7, #20]
 800ab44:	699b      	ldr	r3, [r3, #24]
 800ab46:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ab48:	697b      	ldr	r3, [r7, #20]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	4a9f      	ldr	r2, [pc, #636]	; (800adcc <UART_SetConfig+0x2dc>)
 800ab4e:	4293      	cmp	r3, r2
 800ab50:	d004      	beq.n	800ab5c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ab52:	697b      	ldr	r3, [r7, #20]
 800ab54:	6a1b      	ldr	r3, [r3, #32]
 800ab56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab58:	4313      	orrs	r3, r2
 800ab5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ab5c:	697b      	ldr	r3, [r7, #20]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	689b      	ldr	r3, [r3, #8]
 800ab62:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800ab66:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800ab6a:	697a      	ldr	r2, [r7, #20]
 800ab6c:	6812      	ldr	r2, [r2, #0]
 800ab6e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ab70:	430b      	orrs	r3, r1
 800ab72:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ab74:	697b      	ldr	r3, [r7, #20]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab7a:	f023 010f 	bic.w	r1, r3, #15
 800ab7e:	697b      	ldr	r3, [r7, #20]
 800ab80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ab82:	697b      	ldr	r3, [r7, #20]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	430a      	orrs	r2, r1
 800ab88:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ab8a:	697b      	ldr	r3, [r7, #20]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	4a90      	ldr	r2, [pc, #576]	; (800add0 <UART_SetConfig+0x2e0>)
 800ab90:	4293      	cmp	r3, r2
 800ab92:	d125      	bne.n	800abe0 <UART_SetConfig+0xf0>
 800ab94:	4b8f      	ldr	r3, [pc, #572]	; (800add4 <UART_SetConfig+0x2e4>)
 800ab96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab9a:	f003 0303 	and.w	r3, r3, #3
 800ab9e:	2b03      	cmp	r3, #3
 800aba0:	d81a      	bhi.n	800abd8 <UART_SetConfig+0xe8>
 800aba2:	a201      	add	r2, pc, #4	; (adr r2, 800aba8 <UART_SetConfig+0xb8>)
 800aba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aba8:	0800abb9 	.word	0x0800abb9
 800abac:	0800abc9 	.word	0x0800abc9
 800abb0:	0800abc1 	.word	0x0800abc1
 800abb4:	0800abd1 	.word	0x0800abd1
 800abb8:	2301      	movs	r3, #1
 800abba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800abbe:	e116      	b.n	800adee <UART_SetConfig+0x2fe>
 800abc0:	2302      	movs	r3, #2
 800abc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800abc6:	e112      	b.n	800adee <UART_SetConfig+0x2fe>
 800abc8:	2304      	movs	r3, #4
 800abca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800abce:	e10e      	b.n	800adee <UART_SetConfig+0x2fe>
 800abd0:	2308      	movs	r3, #8
 800abd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800abd6:	e10a      	b.n	800adee <UART_SetConfig+0x2fe>
 800abd8:	2310      	movs	r3, #16
 800abda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800abde:	e106      	b.n	800adee <UART_SetConfig+0x2fe>
 800abe0:	697b      	ldr	r3, [r7, #20]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	4a7c      	ldr	r2, [pc, #496]	; (800add8 <UART_SetConfig+0x2e8>)
 800abe6:	4293      	cmp	r3, r2
 800abe8:	d138      	bne.n	800ac5c <UART_SetConfig+0x16c>
 800abea:	4b7a      	ldr	r3, [pc, #488]	; (800add4 <UART_SetConfig+0x2e4>)
 800abec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abf0:	f003 030c 	and.w	r3, r3, #12
 800abf4:	2b0c      	cmp	r3, #12
 800abf6:	d82d      	bhi.n	800ac54 <UART_SetConfig+0x164>
 800abf8:	a201      	add	r2, pc, #4	; (adr r2, 800ac00 <UART_SetConfig+0x110>)
 800abfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abfe:	bf00      	nop
 800ac00:	0800ac35 	.word	0x0800ac35
 800ac04:	0800ac55 	.word	0x0800ac55
 800ac08:	0800ac55 	.word	0x0800ac55
 800ac0c:	0800ac55 	.word	0x0800ac55
 800ac10:	0800ac45 	.word	0x0800ac45
 800ac14:	0800ac55 	.word	0x0800ac55
 800ac18:	0800ac55 	.word	0x0800ac55
 800ac1c:	0800ac55 	.word	0x0800ac55
 800ac20:	0800ac3d 	.word	0x0800ac3d
 800ac24:	0800ac55 	.word	0x0800ac55
 800ac28:	0800ac55 	.word	0x0800ac55
 800ac2c:	0800ac55 	.word	0x0800ac55
 800ac30:	0800ac4d 	.word	0x0800ac4d
 800ac34:	2300      	movs	r3, #0
 800ac36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac3a:	e0d8      	b.n	800adee <UART_SetConfig+0x2fe>
 800ac3c:	2302      	movs	r3, #2
 800ac3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac42:	e0d4      	b.n	800adee <UART_SetConfig+0x2fe>
 800ac44:	2304      	movs	r3, #4
 800ac46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac4a:	e0d0      	b.n	800adee <UART_SetConfig+0x2fe>
 800ac4c:	2308      	movs	r3, #8
 800ac4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac52:	e0cc      	b.n	800adee <UART_SetConfig+0x2fe>
 800ac54:	2310      	movs	r3, #16
 800ac56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac5a:	e0c8      	b.n	800adee <UART_SetConfig+0x2fe>
 800ac5c:	697b      	ldr	r3, [r7, #20]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	4a5e      	ldr	r2, [pc, #376]	; (800addc <UART_SetConfig+0x2ec>)
 800ac62:	4293      	cmp	r3, r2
 800ac64:	d125      	bne.n	800acb2 <UART_SetConfig+0x1c2>
 800ac66:	4b5b      	ldr	r3, [pc, #364]	; (800add4 <UART_SetConfig+0x2e4>)
 800ac68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac6c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800ac70:	2b30      	cmp	r3, #48	; 0x30
 800ac72:	d016      	beq.n	800aca2 <UART_SetConfig+0x1b2>
 800ac74:	2b30      	cmp	r3, #48	; 0x30
 800ac76:	d818      	bhi.n	800acaa <UART_SetConfig+0x1ba>
 800ac78:	2b20      	cmp	r3, #32
 800ac7a:	d00a      	beq.n	800ac92 <UART_SetConfig+0x1a2>
 800ac7c:	2b20      	cmp	r3, #32
 800ac7e:	d814      	bhi.n	800acaa <UART_SetConfig+0x1ba>
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d002      	beq.n	800ac8a <UART_SetConfig+0x19a>
 800ac84:	2b10      	cmp	r3, #16
 800ac86:	d008      	beq.n	800ac9a <UART_SetConfig+0x1aa>
 800ac88:	e00f      	b.n	800acaa <UART_SetConfig+0x1ba>
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac90:	e0ad      	b.n	800adee <UART_SetConfig+0x2fe>
 800ac92:	2302      	movs	r3, #2
 800ac94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac98:	e0a9      	b.n	800adee <UART_SetConfig+0x2fe>
 800ac9a:	2304      	movs	r3, #4
 800ac9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aca0:	e0a5      	b.n	800adee <UART_SetConfig+0x2fe>
 800aca2:	2308      	movs	r3, #8
 800aca4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aca8:	e0a1      	b.n	800adee <UART_SetConfig+0x2fe>
 800acaa:	2310      	movs	r3, #16
 800acac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800acb0:	e09d      	b.n	800adee <UART_SetConfig+0x2fe>
 800acb2:	697b      	ldr	r3, [r7, #20]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	4a4a      	ldr	r2, [pc, #296]	; (800ade0 <UART_SetConfig+0x2f0>)
 800acb8:	4293      	cmp	r3, r2
 800acba:	d125      	bne.n	800ad08 <UART_SetConfig+0x218>
 800acbc:	4b45      	ldr	r3, [pc, #276]	; (800add4 <UART_SetConfig+0x2e4>)
 800acbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acc2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800acc6:	2bc0      	cmp	r3, #192	; 0xc0
 800acc8:	d016      	beq.n	800acf8 <UART_SetConfig+0x208>
 800acca:	2bc0      	cmp	r3, #192	; 0xc0
 800accc:	d818      	bhi.n	800ad00 <UART_SetConfig+0x210>
 800acce:	2b80      	cmp	r3, #128	; 0x80
 800acd0:	d00a      	beq.n	800ace8 <UART_SetConfig+0x1f8>
 800acd2:	2b80      	cmp	r3, #128	; 0x80
 800acd4:	d814      	bhi.n	800ad00 <UART_SetConfig+0x210>
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d002      	beq.n	800ace0 <UART_SetConfig+0x1f0>
 800acda:	2b40      	cmp	r3, #64	; 0x40
 800acdc:	d008      	beq.n	800acf0 <UART_SetConfig+0x200>
 800acde:	e00f      	b.n	800ad00 <UART_SetConfig+0x210>
 800ace0:	2300      	movs	r3, #0
 800ace2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ace6:	e082      	b.n	800adee <UART_SetConfig+0x2fe>
 800ace8:	2302      	movs	r3, #2
 800acea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800acee:	e07e      	b.n	800adee <UART_SetConfig+0x2fe>
 800acf0:	2304      	movs	r3, #4
 800acf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800acf6:	e07a      	b.n	800adee <UART_SetConfig+0x2fe>
 800acf8:	2308      	movs	r3, #8
 800acfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800acfe:	e076      	b.n	800adee <UART_SetConfig+0x2fe>
 800ad00:	2310      	movs	r3, #16
 800ad02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ad06:	e072      	b.n	800adee <UART_SetConfig+0x2fe>
 800ad08:	697b      	ldr	r3, [r7, #20]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	4a35      	ldr	r2, [pc, #212]	; (800ade4 <UART_SetConfig+0x2f4>)
 800ad0e:	4293      	cmp	r3, r2
 800ad10:	d12a      	bne.n	800ad68 <UART_SetConfig+0x278>
 800ad12:	4b30      	ldr	r3, [pc, #192]	; (800add4 <UART_SetConfig+0x2e4>)
 800ad14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ad1c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ad20:	d01a      	beq.n	800ad58 <UART_SetConfig+0x268>
 800ad22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ad26:	d81b      	bhi.n	800ad60 <UART_SetConfig+0x270>
 800ad28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ad2c:	d00c      	beq.n	800ad48 <UART_SetConfig+0x258>
 800ad2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ad32:	d815      	bhi.n	800ad60 <UART_SetConfig+0x270>
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d003      	beq.n	800ad40 <UART_SetConfig+0x250>
 800ad38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad3c:	d008      	beq.n	800ad50 <UART_SetConfig+0x260>
 800ad3e:	e00f      	b.n	800ad60 <UART_SetConfig+0x270>
 800ad40:	2300      	movs	r3, #0
 800ad42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ad46:	e052      	b.n	800adee <UART_SetConfig+0x2fe>
 800ad48:	2302      	movs	r3, #2
 800ad4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ad4e:	e04e      	b.n	800adee <UART_SetConfig+0x2fe>
 800ad50:	2304      	movs	r3, #4
 800ad52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ad56:	e04a      	b.n	800adee <UART_SetConfig+0x2fe>
 800ad58:	2308      	movs	r3, #8
 800ad5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ad5e:	e046      	b.n	800adee <UART_SetConfig+0x2fe>
 800ad60:	2310      	movs	r3, #16
 800ad62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ad66:	e042      	b.n	800adee <UART_SetConfig+0x2fe>
 800ad68:	697b      	ldr	r3, [r7, #20]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	4a17      	ldr	r2, [pc, #92]	; (800adcc <UART_SetConfig+0x2dc>)
 800ad6e:	4293      	cmp	r3, r2
 800ad70:	d13a      	bne.n	800ade8 <UART_SetConfig+0x2f8>
 800ad72:	4b18      	ldr	r3, [pc, #96]	; (800add4 <UART_SetConfig+0x2e4>)
 800ad74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad78:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800ad7c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ad80:	d01a      	beq.n	800adb8 <UART_SetConfig+0x2c8>
 800ad82:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ad86:	d81b      	bhi.n	800adc0 <UART_SetConfig+0x2d0>
 800ad88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ad8c:	d00c      	beq.n	800ada8 <UART_SetConfig+0x2b8>
 800ad8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ad92:	d815      	bhi.n	800adc0 <UART_SetConfig+0x2d0>
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d003      	beq.n	800ada0 <UART_SetConfig+0x2b0>
 800ad98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ad9c:	d008      	beq.n	800adb0 <UART_SetConfig+0x2c0>
 800ad9e:	e00f      	b.n	800adc0 <UART_SetConfig+0x2d0>
 800ada0:	2300      	movs	r3, #0
 800ada2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ada6:	e022      	b.n	800adee <UART_SetConfig+0x2fe>
 800ada8:	2302      	movs	r3, #2
 800adaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800adae:	e01e      	b.n	800adee <UART_SetConfig+0x2fe>
 800adb0:	2304      	movs	r3, #4
 800adb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800adb6:	e01a      	b.n	800adee <UART_SetConfig+0x2fe>
 800adb8:	2308      	movs	r3, #8
 800adba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800adbe:	e016      	b.n	800adee <UART_SetConfig+0x2fe>
 800adc0:	2310      	movs	r3, #16
 800adc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800adc6:	e012      	b.n	800adee <UART_SetConfig+0x2fe>
 800adc8:	cfff69f3 	.word	0xcfff69f3
 800adcc:	40008000 	.word	0x40008000
 800add0:	40013800 	.word	0x40013800
 800add4:	40021000 	.word	0x40021000
 800add8:	40004400 	.word	0x40004400
 800addc:	40004800 	.word	0x40004800
 800ade0:	40004c00 	.word	0x40004c00
 800ade4:	40005000 	.word	0x40005000
 800ade8:	2310      	movs	r3, #16
 800adea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800adee:	697b      	ldr	r3, [r7, #20]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	4aae      	ldr	r2, [pc, #696]	; (800b0ac <UART_SetConfig+0x5bc>)
 800adf4:	4293      	cmp	r3, r2
 800adf6:	f040 8097 	bne.w	800af28 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800adfa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800adfe:	2b08      	cmp	r3, #8
 800ae00:	d823      	bhi.n	800ae4a <UART_SetConfig+0x35a>
 800ae02:	a201      	add	r2, pc, #4	; (adr r2, 800ae08 <UART_SetConfig+0x318>)
 800ae04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae08:	0800ae2d 	.word	0x0800ae2d
 800ae0c:	0800ae4b 	.word	0x0800ae4b
 800ae10:	0800ae35 	.word	0x0800ae35
 800ae14:	0800ae4b 	.word	0x0800ae4b
 800ae18:	0800ae3b 	.word	0x0800ae3b
 800ae1c:	0800ae4b 	.word	0x0800ae4b
 800ae20:	0800ae4b 	.word	0x0800ae4b
 800ae24:	0800ae4b 	.word	0x0800ae4b
 800ae28:	0800ae43 	.word	0x0800ae43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ae2c:	f7fa feb8 	bl	8005ba0 <HAL_RCC_GetPCLK1Freq>
 800ae30:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ae32:	e010      	b.n	800ae56 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ae34:	4b9e      	ldr	r3, [pc, #632]	; (800b0b0 <UART_SetConfig+0x5c0>)
 800ae36:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ae38:	e00d      	b.n	800ae56 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ae3a:	f7fa fe19 	bl	8005a70 <HAL_RCC_GetSysClockFreq>
 800ae3e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ae40:	e009      	b.n	800ae56 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ae42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ae46:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ae48:	e005      	b.n	800ae56 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800ae4e:	2301      	movs	r3, #1
 800ae50:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800ae54:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ae56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	f000 8130 	beq.w	800b0be <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ae5e:	697b      	ldr	r3, [r7, #20]
 800ae60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae62:	4a94      	ldr	r2, [pc, #592]	; (800b0b4 <UART_SetConfig+0x5c4>)
 800ae64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ae68:	461a      	mov	r2, r3
 800ae6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae6c:	fbb3 f3f2 	udiv	r3, r3, r2
 800ae70:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ae72:	697b      	ldr	r3, [r7, #20]
 800ae74:	685a      	ldr	r2, [r3, #4]
 800ae76:	4613      	mov	r3, r2
 800ae78:	005b      	lsls	r3, r3, #1
 800ae7a:	4413      	add	r3, r2
 800ae7c:	69ba      	ldr	r2, [r7, #24]
 800ae7e:	429a      	cmp	r2, r3
 800ae80:	d305      	bcc.n	800ae8e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ae82:	697b      	ldr	r3, [r7, #20]
 800ae84:	685b      	ldr	r3, [r3, #4]
 800ae86:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ae88:	69ba      	ldr	r2, [r7, #24]
 800ae8a:	429a      	cmp	r2, r3
 800ae8c:	d903      	bls.n	800ae96 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800ae8e:	2301      	movs	r3, #1
 800ae90:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800ae94:	e113      	b.n	800b0be <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ae96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae98:	2200      	movs	r2, #0
 800ae9a:	60bb      	str	r3, [r7, #8]
 800ae9c:	60fa      	str	r2, [r7, #12]
 800ae9e:	697b      	ldr	r3, [r7, #20]
 800aea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aea2:	4a84      	ldr	r2, [pc, #528]	; (800b0b4 <UART_SetConfig+0x5c4>)
 800aea4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aea8:	b29b      	uxth	r3, r3
 800aeaa:	2200      	movs	r2, #0
 800aeac:	603b      	str	r3, [r7, #0]
 800aeae:	607a      	str	r2, [r7, #4]
 800aeb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aeb4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800aeb8:	f7f5 fe8e 	bl	8000bd8 <__aeabi_uldivmod>
 800aebc:	4602      	mov	r2, r0
 800aebe:	460b      	mov	r3, r1
 800aec0:	4610      	mov	r0, r2
 800aec2:	4619      	mov	r1, r3
 800aec4:	f04f 0200 	mov.w	r2, #0
 800aec8:	f04f 0300 	mov.w	r3, #0
 800aecc:	020b      	lsls	r3, r1, #8
 800aece:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800aed2:	0202      	lsls	r2, r0, #8
 800aed4:	6979      	ldr	r1, [r7, #20]
 800aed6:	6849      	ldr	r1, [r1, #4]
 800aed8:	0849      	lsrs	r1, r1, #1
 800aeda:	2000      	movs	r0, #0
 800aedc:	460c      	mov	r4, r1
 800aede:	4605      	mov	r5, r0
 800aee0:	eb12 0804 	adds.w	r8, r2, r4
 800aee4:	eb43 0905 	adc.w	r9, r3, r5
 800aee8:	697b      	ldr	r3, [r7, #20]
 800aeea:	685b      	ldr	r3, [r3, #4]
 800aeec:	2200      	movs	r2, #0
 800aeee:	469a      	mov	sl, r3
 800aef0:	4693      	mov	fp, r2
 800aef2:	4652      	mov	r2, sl
 800aef4:	465b      	mov	r3, fp
 800aef6:	4640      	mov	r0, r8
 800aef8:	4649      	mov	r1, r9
 800aefa:	f7f5 fe6d 	bl	8000bd8 <__aeabi_uldivmod>
 800aefe:	4602      	mov	r2, r0
 800af00:	460b      	mov	r3, r1
 800af02:	4613      	mov	r3, r2
 800af04:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800af06:	6a3b      	ldr	r3, [r7, #32]
 800af08:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800af0c:	d308      	bcc.n	800af20 <UART_SetConfig+0x430>
 800af0e:	6a3b      	ldr	r3, [r7, #32]
 800af10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800af14:	d204      	bcs.n	800af20 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800af16:	697b      	ldr	r3, [r7, #20]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	6a3a      	ldr	r2, [r7, #32]
 800af1c:	60da      	str	r2, [r3, #12]
 800af1e:	e0ce      	b.n	800b0be <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800af20:	2301      	movs	r3, #1
 800af22:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800af26:	e0ca      	b.n	800b0be <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800af28:	697b      	ldr	r3, [r7, #20]
 800af2a:	69db      	ldr	r3, [r3, #28]
 800af2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800af30:	d166      	bne.n	800b000 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800af32:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800af36:	2b08      	cmp	r3, #8
 800af38:	d827      	bhi.n	800af8a <UART_SetConfig+0x49a>
 800af3a:	a201      	add	r2, pc, #4	; (adr r2, 800af40 <UART_SetConfig+0x450>)
 800af3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af40:	0800af65 	.word	0x0800af65
 800af44:	0800af6d 	.word	0x0800af6d
 800af48:	0800af75 	.word	0x0800af75
 800af4c:	0800af8b 	.word	0x0800af8b
 800af50:	0800af7b 	.word	0x0800af7b
 800af54:	0800af8b 	.word	0x0800af8b
 800af58:	0800af8b 	.word	0x0800af8b
 800af5c:	0800af8b 	.word	0x0800af8b
 800af60:	0800af83 	.word	0x0800af83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800af64:	f7fa fe1c 	bl	8005ba0 <HAL_RCC_GetPCLK1Freq>
 800af68:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800af6a:	e014      	b.n	800af96 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800af6c:	f7fa fe2e 	bl	8005bcc <HAL_RCC_GetPCLK2Freq>
 800af70:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800af72:	e010      	b.n	800af96 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800af74:	4b4e      	ldr	r3, [pc, #312]	; (800b0b0 <UART_SetConfig+0x5c0>)
 800af76:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800af78:	e00d      	b.n	800af96 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800af7a:	f7fa fd79 	bl	8005a70 <HAL_RCC_GetSysClockFreq>
 800af7e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800af80:	e009      	b.n	800af96 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800af82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800af86:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800af88:	e005      	b.n	800af96 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800af8a:	2300      	movs	r3, #0
 800af8c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800af8e:	2301      	movs	r3, #1
 800af90:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800af94:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800af96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af98:	2b00      	cmp	r3, #0
 800af9a:	f000 8090 	beq.w	800b0be <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800af9e:	697b      	ldr	r3, [r7, #20]
 800afa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afa2:	4a44      	ldr	r2, [pc, #272]	; (800b0b4 <UART_SetConfig+0x5c4>)
 800afa4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800afa8:	461a      	mov	r2, r3
 800afaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afac:	fbb3 f3f2 	udiv	r3, r3, r2
 800afb0:	005a      	lsls	r2, r3, #1
 800afb2:	697b      	ldr	r3, [r7, #20]
 800afb4:	685b      	ldr	r3, [r3, #4]
 800afb6:	085b      	lsrs	r3, r3, #1
 800afb8:	441a      	add	r2, r3
 800afba:	697b      	ldr	r3, [r7, #20]
 800afbc:	685b      	ldr	r3, [r3, #4]
 800afbe:	fbb2 f3f3 	udiv	r3, r2, r3
 800afc2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800afc4:	6a3b      	ldr	r3, [r7, #32]
 800afc6:	2b0f      	cmp	r3, #15
 800afc8:	d916      	bls.n	800aff8 <UART_SetConfig+0x508>
 800afca:	6a3b      	ldr	r3, [r7, #32]
 800afcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800afd0:	d212      	bcs.n	800aff8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800afd2:	6a3b      	ldr	r3, [r7, #32]
 800afd4:	b29b      	uxth	r3, r3
 800afd6:	f023 030f 	bic.w	r3, r3, #15
 800afda:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800afdc:	6a3b      	ldr	r3, [r7, #32]
 800afde:	085b      	lsrs	r3, r3, #1
 800afe0:	b29b      	uxth	r3, r3
 800afe2:	f003 0307 	and.w	r3, r3, #7
 800afe6:	b29a      	uxth	r2, r3
 800afe8:	8bfb      	ldrh	r3, [r7, #30]
 800afea:	4313      	orrs	r3, r2
 800afec:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800afee:	697b      	ldr	r3, [r7, #20]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	8bfa      	ldrh	r2, [r7, #30]
 800aff4:	60da      	str	r2, [r3, #12]
 800aff6:	e062      	b.n	800b0be <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800aff8:	2301      	movs	r3, #1
 800affa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800affe:	e05e      	b.n	800b0be <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b000:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b004:	2b08      	cmp	r3, #8
 800b006:	d828      	bhi.n	800b05a <UART_SetConfig+0x56a>
 800b008:	a201      	add	r2, pc, #4	; (adr r2, 800b010 <UART_SetConfig+0x520>)
 800b00a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b00e:	bf00      	nop
 800b010:	0800b035 	.word	0x0800b035
 800b014:	0800b03d 	.word	0x0800b03d
 800b018:	0800b045 	.word	0x0800b045
 800b01c:	0800b05b 	.word	0x0800b05b
 800b020:	0800b04b 	.word	0x0800b04b
 800b024:	0800b05b 	.word	0x0800b05b
 800b028:	0800b05b 	.word	0x0800b05b
 800b02c:	0800b05b 	.word	0x0800b05b
 800b030:	0800b053 	.word	0x0800b053
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b034:	f7fa fdb4 	bl	8005ba0 <HAL_RCC_GetPCLK1Freq>
 800b038:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b03a:	e014      	b.n	800b066 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b03c:	f7fa fdc6 	bl	8005bcc <HAL_RCC_GetPCLK2Freq>
 800b040:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b042:	e010      	b.n	800b066 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b044:	4b1a      	ldr	r3, [pc, #104]	; (800b0b0 <UART_SetConfig+0x5c0>)
 800b046:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b048:	e00d      	b.n	800b066 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b04a:	f7fa fd11 	bl	8005a70 <HAL_RCC_GetSysClockFreq>
 800b04e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b050:	e009      	b.n	800b066 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b052:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b056:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b058:	e005      	b.n	800b066 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800b05a:	2300      	movs	r3, #0
 800b05c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b05e:	2301      	movs	r3, #1
 800b060:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b064:	bf00      	nop
    }

    if (pclk != 0U)
 800b066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d028      	beq.n	800b0be <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b06c:	697b      	ldr	r3, [r7, #20]
 800b06e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b070:	4a10      	ldr	r2, [pc, #64]	; (800b0b4 <UART_SetConfig+0x5c4>)
 800b072:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b076:	461a      	mov	r2, r3
 800b078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b07a:	fbb3 f2f2 	udiv	r2, r3, r2
 800b07e:	697b      	ldr	r3, [r7, #20]
 800b080:	685b      	ldr	r3, [r3, #4]
 800b082:	085b      	lsrs	r3, r3, #1
 800b084:	441a      	add	r2, r3
 800b086:	697b      	ldr	r3, [r7, #20]
 800b088:	685b      	ldr	r3, [r3, #4]
 800b08a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b08e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b090:	6a3b      	ldr	r3, [r7, #32]
 800b092:	2b0f      	cmp	r3, #15
 800b094:	d910      	bls.n	800b0b8 <UART_SetConfig+0x5c8>
 800b096:	6a3b      	ldr	r3, [r7, #32]
 800b098:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b09c:	d20c      	bcs.n	800b0b8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b09e:	6a3b      	ldr	r3, [r7, #32]
 800b0a0:	b29a      	uxth	r2, r3
 800b0a2:	697b      	ldr	r3, [r7, #20]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	60da      	str	r2, [r3, #12]
 800b0a8:	e009      	b.n	800b0be <UART_SetConfig+0x5ce>
 800b0aa:	bf00      	nop
 800b0ac:	40008000 	.word	0x40008000
 800b0b0:	00f42400 	.word	0x00f42400
 800b0b4:	0800e344 	.word	0x0800e344
      }
      else
      {
        ret = HAL_ERROR;
 800b0b8:	2301      	movs	r3, #1
 800b0ba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b0be:	697b      	ldr	r3, [r7, #20]
 800b0c0:	2201      	movs	r2, #1
 800b0c2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b0c6:	697b      	ldr	r3, [r7, #20]
 800b0c8:	2201      	movs	r2, #1
 800b0ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b0ce:	697b      	ldr	r3, [r7, #20]
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800b0d4:	697b      	ldr	r3, [r7, #20]
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800b0da:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800b0de:	4618      	mov	r0, r3
 800b0e0:	3730      	adds	r7, #48	; 0x30
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800b0e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b0e8:	b480      	push	{r7}
 800b0ea:	b083      	sub	sp, #12
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0f4:	f003 0301 	and.w	r3, r3, #1
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d00a      	beq.n	800b112 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	685b      	ldr	r3, [r3, #4]
 800b102:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	430a      	orrs	r2, r1
 800b110:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b116:	f003 0302 	and.w	r3, r3, #2
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d00a      	beq.n	800b134 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	685b      	ldr	r3, [r3, #4]
 800b124:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	430a      	orrs	r2, r1
 800b132:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b138:	f003 0304 	and.w	r3, r3, #4
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d00a      	beq.n	800b156 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	685b      	ldr	r3, [r3, #4]
 800b146:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	430a      	orrs	r2, r1
 800b154:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b15a:	f003 0308 	and.w	r3, r3, #8
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d00a      	beq.n	800b178 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	685b      	ldr	r3, [r3, #4]
 800b168:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	430a      	orrs	r2, r1
 800b176:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b17c:	f003 0310 	and.w	r3, r3, #16
 800b180:	2b00      	cmp	r3, #0
 800b182:	d00a      	beq.n	800b19a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	689b      	ldr	r3, [r3, #8]
 800b18a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	430a      	orrs	r2, r1
 800b198:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b19e:	f003 0320 	and.w	r3, r3, #32
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d00a      	beq.n	800b1bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	689b      	ldr	r3, [r3, #8]
 800b1ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	430a      	orrs	r2, r1
 800b1ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d01a      	beq.n	800b1fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	685b      	ldr	r3, [r3, #4]
 800b1ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	430a      	orrs	r2, r1
 800b1dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b1e6:	d10a      	bne.n	800b1fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	685b      	ldr	r3, [r3, #4]
 800b1ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	430a      	orrs	r2, r1
 800b1fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b206:	2b00      	cmp	r3, #0
 800b208:	d00a      	beq.n	800b220 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	685b      	ldr	r3, [r3, #4]
 800b210:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	430a      	orrs	r2, r1
 800b21e:	605a      	str	r2, [r3, #4]
  }
}
 800b220:	bf00      	nop
 800b222:	370c      	adds	r7, #12
 800b224:	46bd      	mov	sp, r7
 800b226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22a:	4770      	bx	lr

0800b22c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b22c:	b580      	push	{r7, lr}
 800b22e:	b086      	sub	sp, #24
 800b230:	af02      	add	r7, sp, #8
 800b232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	2200      	movs	r2, #0
 800b238:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b23c:	f7f8 fade 	bl	80037fc <HAL_GetTick>
 800b240:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	f003 0308 	and.w	r3, r3, #8
 800b24c:	2b08      	cmp	r3, #8
 800b24e:	d10e      	bne.n	800b26e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b250:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b254:	9300      	str	r3, [sp, #0]
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	2200      	movs	r2, #0
 800b25a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b25e:	6878      	ldr	r0, [r7, #4]
 800b260:	f000 f82f 	bl	800b2c2 <UART_WaitOnFlagUntilTimeout>
 800b264:	4603      	mov	r3, r0
 800b266:	2b00      	cmp	r3, #0
 800b268:	d001      	beq.n	800b26e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b26a:	2303      	movs	r3, #3
 800b26c:	e025      	b.n	800b2ba <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	f003 0304 	and.w	r3, r3, #4
 800b278:	2b04      	cmp	r3, #4
 800b27a:	d10e      	bne.n	800b29a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b27c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b280:	9300      	str	r3, [sp, #0]
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	2200      	movs	r2, #0
 800b286:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b28a:	6878      	ldr	r0, [r7, #4]
 800b28c:	f000 f819 	bl	800b2c2 <UART_WaitOnFlagUntilTimeout>
 800b290:	4603      	mov	r3, r0
 800b292:	2b00      	cmp	r3, #0
 800b294:	d001      	beq.n	800b29a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b296:	2303      	movs	r3, #3
 800b298:	e00f      	b.n	800b2ba <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	2220      	movs	r2, #32
 800b29e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	2220      	movs	r2, #32
 800b2a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	2200      	movs	r2, #0
 800b2ae:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b2b8:	2300      	movs	r3, #0
}
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	3710      	adds	r7, #16
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	bd80      	pop	{r7, pc}

0800b2c2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b2c2:	b580      	push	{r7, lr}
 800b2c4:	b09c      	sub	sp, #112	; 0x70
 800b2c6:	af00      	add	r7, sp, #0
 800b2c8:	60f8      	str	r0, [r7, #12]
 800b2ca:	60b9      	str	r1, [r7, #8]
 800b2cc:	603b      	str	r3, [r7, #0]
 800b2ce:	4613      	mov	r3, r2
 800b2d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b2d2:	e0a9      	b.n	800b428 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b2d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b2d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2da:	f000 80a5 	beq.w	800b428 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b2de:	f7f8 fa8d 	bl	80037fc <HAL_GetTick>
 800b2e2:	4602      	mov	r2, r0
 800b2e4:	683b      	ldr	r3, [r7, #0]
 800b2e6:	1ad3      	subs	r3, r2, r3
 800b2e8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b2ea:	429a      	cmp	r2, r3
 800b2ec:	d302      	bcc.n	800b2f4 <UART_WaitOnFlagUntilTimeout+0x32>
 800b2ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d140      	bne.n	800b376 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b2fc:	e853 3f00 	ldrex	r3, [r3]
 800b300:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b302:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b304:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b308:	667b      	str	r3, [r7, #100]	; 0x64
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	461a      	mov	r2, r3
 800b310:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b312:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b314:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b316:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b318:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b31a:	e841 2300 	strex	r3, r2, [r1]
 800b31e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b320:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b322:	2b00      	cmp	r3, #0
 800b324:	d1e6      	bne.n	800b2f4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	3308      	adds	r3, #8
 800b32c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b32e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b330:	e853 3f00 	ldrex	r3, [r3]
 800b334:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b338:	f023 0301 	bic.w	r3, r3, #1
 800b33c:	663b      	str	r3, [r7, #96]	; 0x60
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	3308      	adds	r3, #8
 800b344:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b346:	64ba      	str	r2, [r7, #72]	; 0x48
 800b348:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b34a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b34c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b34e:	e841 2300 	strex	r3, r2, [r1]
 800b352:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b354:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b356:	2b00      	cmp	r3, #0
 800b358:	d1e5      	bne.n	800b326 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	2220      	movs	r2, #32
 800b35e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	2220      	movs	r2, #32
 800b366:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	2200      	movs	r2, #0
 800b36e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800b372:	2303      	movs	r3, #3
 800b374:	e069      	b.n	800b44a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	f003 0304 	and.w	r3, r3, #4
 800b380:	2b00      	cmp	r3, #0
 800b382:	d051      	beq.n	800b428 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	69db      	ldr	r3, [r3, #28]
 800b38a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b38e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b392:	d149      	bne.n	800b428 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b39c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3a6:	e853 3f00 	ldrex	r3, [r3]
 800b3aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b3ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3ae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b3b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	461a      	mov	r2, r3
 800b3ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b3bc:	637b      	str	r3, [r7, #52]	; 0x34
 800b3be:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b3c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b3c4:	e841 2300 	strex	r3, r2, [r1]
 800b3c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b3ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d1e6      	bne.n	800b39e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	3308      	adds	r3, #8
 800b3d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3d8:	697b      	ldr	r3, [r7, #20]
 800b3da:	e853 3f00 	ldrex	r3, [r3]
 800b3de:	613b      	str	r3, [r7, #16]
   return(result);
 800b3e0:	693b      	ldr	r3, [r7, #16]
 800b3e2:	f023 0301 	bic.w	r3, r3, #1
 800b3e6:	66bb      	str	r3, [r7, #104]	; 0x68
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	3308      	adds	r3, #8
 800b3ee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b3f0:	623a      	str	r2, [r7, #32]
 800b3f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3f4:	69f9      	ldr	r1, [r7, #28]
 800b3f6:	6a3a      	ldr	r2, [r7, #32]
 800b3f8:	e841 2300 	strex	r3, r2, [r1]
 800b3fc:	61bb      	str	r3, [r7, #24]
   return(result);
 800b3fe:	69bb      	ldr	r3, [r7, #24]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d1e5      	bne.n	800b3d0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	2220      	movs	r2, #32
 800b408:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	2220      	movs	r2, #32
 800b410:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	2220      	movs	r2, #32
 800b418:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	2200      	movs	r2, #0
 800b420:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800b424:	2303      	movs	r3, #3
 800b426:	e010      	b.n	800b44a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	69da      	ldr	r2, [r3, #28]
 800b42e:	68bb      	ldr	r3, [r7, #8]
 800b430:	4013      	ands	r3, r2
 800b432:	68ba      	ldr	r2, [r7, #8]
 800b434:	429a      	cmp	r2, r3
 800b436:	bf0c      	ite	eq
 800b438:	2301      	moveq	r3, #1
 800b43a:	2300      	movne	r3, #0
 800b43c:	b2db      	uxtb	r3, r3
 800b43e:	461a      	mov	r2, r3
 800b440:	79fb      	ldrb	r3, [r7, #7]
 800b442:	429a      	cmp	r2, r3
 800b444:	f43f af46 	beq.w	800b2d4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b448:	2300      	movs	r3, #0
}
 800b44a:	4618      	mov	r0, r3
 800b44c:	3770      	adds	r7, #112	; 0x70
 800b44e:	46bd      	mov	sp, r7
 800b450:	bd80      	pop	{r7, pc}

0800b452 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b452:	b480      	push	{r7}
 800b454:	b085      	sub	sp, #20
 800b456:	af00      	add	r7, sp, #0
 800b458:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b460:	2b01      	cmp	r3, #1
 800b462:	d101      	bne.n	800b468 <HAL_UARTEx_DisableFifoMode+0x16>
 800b464:	2302      	movs	r3, #2
 800b466:	e027      	b.n	800b4b8 <HAL_UARTEx_DisableFifoMode+0x66>
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	2201      	movs	r2, #1
 800b46c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2224      	movs	r2, #36	; 0x24
 800b474:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	681a      	ldr	r2, [r3, #0]
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	f022 0201 	bic.w	r2, r2, #1
 800b48e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b496:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	2200      	movs	r2, #0
 800b49c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	68fa      	ldr	r2, [r7, #12]
 800b4a4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	2220      	movs	r2, #32
 800b4aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b4b6:	2300      	movs	r3, #0
}
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	3714      	adds	r7, #20
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c2:	4770      	bx	lr

0800b4c4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b084      	sub	sp, #16
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
 800b4cc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b4d4:	2b01      	cmp	r3, #1
 800b4d6:	d101      	bne.n	800b4dc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b4d8:	2302      	movs	r3, #2
 800b4da:	e02d      	b.n	800b538 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	2201      	movs	r2, #1
 800b4e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	2224      	movs	r2, #36	; 0x24
 800b4e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	681a      	ldr	r2, [r3, #0]
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	f022 0201 	bic.w	r2, r2, #1
 800b502:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	689b      	ldr	r3, [r3, #8]
 800b50a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	683a      	ldr	r2, [r7, #0]
 800b514:	430a      	orrs	r2, r1
 800b516:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b518:	6878      	ldr	r0, [r7, #4]
 800b51a:	f000 f84f 	bl	800b5bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	68fa      	ldr	r2, [r7, #12]
 800b524:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	2220      	movs	r2, #32
 800b52a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	2200      	movs	r2, #0
 800b532:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b536:	2300      	movs	r3, #0
}
 800b538:	4618      	mov	r0, r3
 800b53a:	3710      	adds	r7, #16
 800b53c:	46bd      	mov	sp, r7
 800b53e:	bd80      	pop	{r7, pc}

0800b540 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b540:	b580      	push	{r7, lr}
 800b542:	b084      	sub	sp, #16
 800b544:	af00      	add	r7, sp, #0
 800b546:	6078      	str	r0, [r7, #4]
 800b548:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b550:	2b01      	cmp	r3, #1
 800b552:	d101      	bne.n	800b558 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b554:	2302      	movs	r3, #2
 800b556:	e02d      	b.n	800b5b4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	2201      	movs	r2, #1
 800b55c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	2224      	movs	r2, #36	; 0x24
 800b564:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	681a      	ldr	r2, [r3, #0]
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	f022 0201 	bic.w	r2, r2, #1
 800b57e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	689b      	ldr	r3, [r3, #8]
 800b586:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	683a      	ldr	r2, [r7, #0]
 800b590:	430a      	orrs	r2, r1
 800b592:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b594:	6878      	ldr	r0, [r7, #4]
 800b596:	f000 f811 	bl	800b5bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	68fa      	ldr	r2, [r7, #12]
 800b5a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	2220      	movs	r2, #32
 800b5a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	2200      	movs	r2, #0
 800b5ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b5b2:	2300      	movs	r3, #0
}
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	3710      	adds	r7, #16
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	bd80      	pop	{r7, pc}

0800b5bc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b5bc:	b480      	push	{r7}
 800b5be:	b085      	sub	sp, #20
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d108      	bne.n	800b5de <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	2201      	movs	r2, #1
 800b5d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	2201      	movs	r2, #1
 800b5d8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b5dc:	e031      	b.n	800b642 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b5de:	2308      	movs	r3, #8
 800b5e0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b5e2:	2308      	movs	r3, #8
 800b5e4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	689b      	ldr	r3, [r3, #8]
 800b5ec:	0e5b      	lsrs	r3, r3, #25
 800b5ee:	b2db      	uxtb	r3, r3
 800b5f0:	f003 0307 	and.w	r3, r3, #7
 800b5f4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	689b      	ldr	r3, [r3, #8]
 800b5fc:	0f5b      	lsrs	r3, r3, #29
 800b5fe:	b2db      	uxtb	r3, r3
 800b600:	f003 0307 	and.w	r3, r3, #7
 800b604:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b606:	7bbb      	ldrb	r3, [r7, #14]
 800b608:	7b3a      	ldrb	r2, [r7, #12]
 800b60a:	4911      	ldr	r1, [pc, #68]	; (800b650 <UARTEx_SetNbDataToProcess+0x94>)
 800b60c:	5c8a      	ldrb	r2, [r1, r2]
 800b60e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b612:	7b3a      	ldrb	r2, [r7, #12]
 800b614:	490f      	ldr	r1, [pc, #60]	; (800b654 <UARTEx_SetNbDataToProcess+0x98>)
 800b616:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b618:	fb93 f3f2 	sdiv	r3, r3, r2
 800b61c:	b29a      	uxth	r2, r3
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b624:	7bfb      	ldrb	r3, [r7, #15]
 800b626:	7b7a      	ldrb	r2, [r7, #13]
 800b628:	4909      	ldr	r1, [pc, #36]	; (800b650 <UARTEx_SetNbDataToProcess+0x94>)
 800b62a:	5c8a      	ldrb	r2, [r1, r2]
 800b62c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b630:	7b7a      	ldrb	r2, [r7, #13]
 800b632:	4908      	ldr	r1, [pc, #32]	; (800b654 <UARTEx_SetNbDataToProcess+0x98>)
 800b634:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b636:	fb93 f3f2 	sdiv	r3, r3, r2
 800b63a:	b29a      	uxth	r2, r3
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b642:	bf00      	nop
 800b644:	3714      	adds	r7, #20
 800b646:	46bd      	mov	sp, r7
 800b648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64c:	4770      	bx	lr
 800b64e:	bf00      	nop
 800b650:	0800e35c 	.word	0x0800e35c
 800b654:	0800e364 	.word	0x0800e364

0800b658 <__errno>:
 800b658:	4b01      	ldr	r3, [pc, #4]	; (800b660 <__errno+0x8>)
 800b65a:	6818      	ldr	r0, [r3, #0]
 800b65c:	4770      	bx	lr
 800b65e:	bf00      	nop
 800b660:	20000014 	.word	0x20000014

0800b664 <__libc_init_array>:
 800b664:	b570      	push	{r4, r5, r6, lr}
 800b666:	4d0d      	ldr	r5, [pc, #52]	; (800b69c <__libc_init_array+0x38>)
 800b668:	4c0d      	ldr	r4, [pc, #52]	; (800b6a0 <__libc_init_array+0x3c>)
 800b66a:	1b64      	subs	r4, r4, r5
 800b66c:	10a4      	asrs	r4, r4, #2
 800b66e:	2600      	movs	r6, #0
 800b670:	42a6      	cmp	r6, r4
 800b672:	d109      	bne.n	800b688 <__libc_init_array+0x24>
 800b674:	4d0b      	ldr	r5, [pc, #44]	; (800b6a4 <__libc_init_array+0x40>)
 800b676:	4c0c      	ldr	r4, [pc, #48]	; (800b6a8 <__libc_init_array+0x44>)
 800b678:	f002 fdc4 	bl	800e204 <_init>
 800b67c:	1b64      	subs	r4, r4, r5
 800b67e:	10a4      	asrs	r4, r4, #2
 800b680:	2600      	movs	r6, #0
 800b682:	42a6      	cmp	r6, r4
 800b684:	d105      	bne.n	800b692 <__libc_init_array+0x2e>
 800b686:	bd70      	pop	{r4, r5, r6, pc}
 800b688:	f855 3b04 	ldr.w	r3, [r5], #4
 800b68c:	4798      	blx	r3
 800b68e:	3601      	adds	r6, #1
 800b690:	e7ee      	b.n	800b670 <__libc_init_array+0xc>
 800b692:	f855 3b04 	ldr.w	r3, [r5], #4
 800b696:	4798      	blx	r3
 800b698:	3601      	adds	r6, #1
 800b69a:	e7f2      	b.n	800b682 <__libc_init_array+0x1e>
 800b69c:	0800e74c 	.word	0x0800e74c
 800b6a0:	0800e74c 	.word	0x0800e74c
 800b6a4:	0800e74c 	.word	0x0800e74c
 800b6a8:	0800e750 	.word	0x0800e750

0800b6ac <malloc>:
 800b6ac:	4b02      	ldr	r3, [pc, #8]	; (800b6b8 <malloc+0xc>)
 800b6ae:	4601      	mov	r1, r0
 800b6b0:	6818      	ldr	r0, [r3, #0]
 800b6b2:	f000 b877 	b.w	800b7a4 <_malloc_r>
 800b6b6:	bf00      	nop
 800b6b8:	20000014 	.word	0x20000014

0800b6bc <memset>:
 800b6bc:	4402      	add	r2, r0
 800b6be:	4603      	mov	r3, r0
 800b6c0:	4293      	cmp	r3, r2
 800b6c2:	d100      	bne.n	800b6c6 <memset+0xa>
 800b6c4:	4770      	bx	lr
 800b6c6:	f803 1b01 	strb.w	r1, [r3], #1
 800b6ca:	e7f9      	b.n	800b6c0 <memset+0x4>

0800b6cc <_free_r>:
 800b6cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b6ce:	2900      	cmp	r1, #0
 800b6d0:	d044      	beq.n	800b75c <_free_r+0x90>
 800b6d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b6d6:	9001      	str	r0, [sp, #4]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	f1a1 0404 	sub.w	r4, r1, #4
 800b6de:	bfb8      	it	lt
 800b6e0:	18e4      	addlt	r4, r4, r3
 800b6e2:	f001 ff49 	bl	800d578 <__malloc_lock>
 800b6e6:	4a1e      	ldr	r2, [pc, #120]	; (800b760 <_free_r+0x94>)
 800b6e8:	9801      	ldr	r0, [sp, #4]
 800b6ea:	6813      	ldr	r3, [r2, #0]
 800b6ec:	b933      	cbnz	r3, 800b6fc <_free_r+0x30>
 800b6ee:	6063      	str	r3, [r4, #4]
 800b6f0:	6014      	str	r4, [r2, #0]
 800b6f2:	b003      	add	sp, #12
 800b6f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b6f8:	f001 bf44 	b.w	800d584 <__malloc_unlock>
 800b6fc:	42a3      	cmp	r3, r4
 800b6fe:	d908      	bls.n	800b712 <_free_r+0x46>
 800b700:	6825      	ldr	r5, [r4, #0]
 800b702:	1961      	adds	r1, r4, r5
 800b704:	428b      	cmp	r3, r1
 800b706:	bf01      	itttt	eq
 800b708:	6819      	ldreq	r1, [r3, #0]
 800b70a:	685b      	ldreq	r3, [r3, #4]
 800b70c:	1949      	addeq	r1, r1, r5
 800b70e:	6021      	streq	r1, [r4, #0]
 800b710:	e7ed      	b.n	800b6ee <_free_r+0x22>
 800b712:	461a      	mov	r2, r3
 800b714:	685b      	ldr	r3, [r3, #4]
 800b716:	b10b      	cbz	r3, 800b71c <_free_r+0x50>
 800b718:	42a3      	cmp	r3, r4
 800b71a:	d9fa      	bls.n	800b712 <_free_r+0x46>
 800b71c:	6811      	ldr	r1, [r2, #0]
 800b71e:	1855      	adds	r5, r2, r1
 800b720:	42a5      	cmp	r5, r4
 800b722:	d10b      	bne.n	800b73c <_free_r+0x70>
 800b724:	6824      	ldr	r4, [r4, #0]
 800b726:	4421      	add	r1, r4
 800b728:	1854      	adds	r4, r2, r1
 800b72a:	42a3      	cmp	r3, r4
 800b72c:	6011      	str	r1, [r2, #0]
 800b72e:	d1e0      	bne.n	800b6f2 <_free_r+0x26>
 800b730:	681c      	ldr	r4, [r3, #0]
 800b732:	685b      	ldr	r3, [r3, #4]
 800b734:	6053      	str	r3, [r2, #4]
 800b736:	4421      	add	r1, r4
 800b738:	6011      	str	r1, [r2, #0]
 800b73a:	e7da      	b.n	800b6f2 <_free_r+0x26>
 800b73c:	d902      	bls.n	800b744 <_free_r+0x78>
 800b73e:	230c      	movs	r3, #12
 800b740:	6003      	str	r3, [r0, #0]
 800b742:	e7d6      	b.n	800b6f2 <_free_r+0x26>
 800b744:	6825      	ldr	r5, [r4, #0]
 800b746:	1961      	adds	r1, r4, r5
 800b748:	428b      	cmp	r3, r1
 800b74a:	bf04      	itt	eq
 800b74c:	6819      	ldreq	r1, [r3, #0]
 800b74e:	685b      	ldreq	r3, [r3, #4]
 800b750:	6063      	str	r3, [r4, #4]
 800b752:	bf04      	itt	eq
 800b754:	1949      	addeq	r1, r1, r5
 800b756:	6021      	streq	r1, [r4, #0]
 800b758:	6054      	str	r4, [r2, #4]
 800b75a:	e7ca      	b.n	800b6f2 <_free_r+0x26>
 800b75c:	b003      	add	sp, #12
 800b75e:	bd30      	pop	{r4, r5, pc}
 800b760:	20000854 	.word	0x20000854

0800b764 <sbrk_aligned>:
 800b764:	b570      	push	{r4, r5, r6, lr}
 800b766:	4e0e      	ldr	r6, [pc, #56]	; (800b7a0 <sbrk_aligned+0x3c>)
 800b768:	460c      	mov	r4, r1
 800b76a:	6831      	ldr	r1, [r6, #0]
 800b76c:	4605      	mov	r5, r0
 800b76e:	b911      	cbnz	r1, 800b776 <sbrk_aligned+0x12>
 800b770:	f000 fd84 	bl	800c27c <_sbrk_r>
 800b774:	6030      	str	r0, [r6, #0]
 800b776:	4621      	mov	r1, r4
 800b778:	4628      	mov	r0, r5
 800b77a:	f000 fd7f 	bl	800c27c <_sbrk_r>
 800b77e:	1c43      	adds	r3, r0, #1
 800b780:	d00a      	beq.n	800b798 <sbrk_aligned+0x34>
 800b782:	1cc4      	adds	r4, r0, #3
 800b784:	f024 0403 	bic.w	r4, r4, #3
 800b788:	42a0      	cmp	r0, r4
 800b78a:	d007      	beq.n	800b79c <sbrk_aligned+0x38>
 800b78c:	1a21      	subs	r1, r4, r0
 800b78e:	4628      	mov	r0, r5
 800b790:	f000 fd74 	bl	800c27c <_sbrk_r>
 800b794:	3001      	adds	r0, #1
 800b796:	d101      	bne.n	800b79c <sbrk_aligned+0x38>
 800b798:	f04f 34ff 	mov.w	r4, #4294967295
 800b79c:	4620      	mov	r0, r4
 800b79e:	bd70      	pop	{r4, r5, r6, pc}
 800b7a0:	20000858 	.word	0x20000858

0800b7a4 <_malloc_r>:
 800b7a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7a8:	1ccd      	adds	r5, r1, #3
 800b7aa:	f025 0503 	bic.w	r5, r5, #3
 800b7ae:	3508      	adds	r5, #8
 800b7b0:	2d0c      	cmp	r5, #12
 800b7b2:	bf38      	it	cc
 800b7b4:	250c      	movcc	r5, #12
 800b7b6:	2d00      	cmp	r5, #0
 800b7b8:	4607      	mov	r7, r0
 800b7ba:	db01      	blt.n	800b7c0 <_malloc_r+0x1c>
 800b7bc:	42a9      	cmp	r1, r5
 800b7be:	d905      	bls.n	800b7cc <_malloc_r+0x28>
 800b7c0:	230c      	movs	r3, #12
 800b7c2:	603b      	str	r3, [r7, #0]
 800b7c4:	2600      	movs	r6, #0
 800b7c6:	4630      	mov	r0, r6
 800b7c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7cc:	4e2e      	ldr	r6, [pc, #184]	; (800b888 <_malloc_r+0xe4>)
 800b7ce:	f001 fed3 	bl	800d578 <__malloc_lock>
 800b7d2:	6833      	ldr	r3, [r6, #0]
 800b7d4:	461c      	mov	r4, r3
 800b7d6:	bb34      	cbnz	r4, 800b826 <_malloc_r+0x82>
 800b7d8:	4629      	mov	r1, r5
 800b7da:	4638      	mov	r0, r7
 800b7dc:	f7ff ffc2 	bl	800b764 <sbrk_aligned>
 800b7e0:	1c43      	adds	r3, r0, #1
 800b7e2:	4604      	mov	r4, r0
 800b7e4:	d14d      	bne.n	800b882 <_malloc_r+0xde>
 800b7e6:	6834      	ldr	r4, [r6, #0]
 800b7e8:	4626      	mov	r6, r4
 800b7ea:	2e00      	cmp	r6, #0
 800b7ec:	d140      	bne.n	800b870 <_malloc_r+0xcc>
 800b7ee:	6823      	ldr	r3, [r4, #0]
 800b7f0:	4631      	mov	r1, r6
 800b7f2:	4638      	mov	r0, r7
 800b7f4:	eb04 0803 	add.w	r8, r4, r3
 800b7f8:	f000 fd40 	bl	800c27c <_sbrk_r>
 800b7fc:	4580      	cmp	r8, r0
 800b7fe:	d13a      	bne.n	800b876 <_malloc_r+0xd2>
 800b800:	6821      	ldr	r1, [r4, #0]
 800b802:	3503      	adds	r5, #3
 800b804:	1a6d      	subs	r5, r5, r1
 800b806:	f025 0503 	bic.w	r5, r5, #3
 800b80a:	3508      	adds	r5, #8
 800b80c:	2d0c      	cmp	r5, #12
 800b80e:	bf38      	it	cc
 800b810:	250c      	movcc	r5, #12
 800b812:	4629      	mov	r1, r5
 800b814:	4638      	mov	r0, r7
 800b816:	f7ff ffa5 	bl	800b764 <sbrk_aligned>
 800b81a:	3001      	adds	r0, #1
 800b81c:	d02b      	beq.n	800b876 <_malloc_r+0xd2>
 800b81e:	6823      	ldr	r3, [r4, #0]
 800b820:	442b      	add	r3, r5
 800b822:	6023      	str	r3, [r4, #0]
 800b824:	e00e      	b.n	800b844 <_malloc_r+0xa0>
 800b826:	6822      	ldr	r2, [r4, #0]
 800b828:	1b52      	subs	r2, r2, r5
 800b82a:	d41e      	bmi.n	800b86a <_malloc_r+0xc6>
 800b82c:	2a0b      	cmp	r2, #11
 800b82e:	d916      	bls.n	800b85e <_malloc_r+0xba>
 800b830:	1961      	adds	r1, r4, r5
 800b832:	42a3      	cmp	r3, r4
 800b834:	6025      	str	r5, [r4, #0]
 800b836:	bf18      	it	ne
 800b838:	6059      	strne	r1, [r3, #4]
 800b83a:	6863      	ldr	r3, [r4, #4]
 800b83c:	bf08      	it	eq
 800b83e:	6031      	streq	r1, [r6, #0]
 800b840:	5162      	str	r2, [r4, r5]
 800b842:	604b      	str	r3, [r1, #4]
 800b844:	4638      	mov	r0, r7
 800b846:	f104 060b 	add.w	r6, r4, #11
 800b84a:	f001 fe9b 	bl	800d584 <__malloc_unlock>
 800b84e:	f026 0607 	bic.w	r6, r6, #7
 800b852:	1d23      	adds	r3, r4, #4
 800b854:	1af2      	subs	r2, r6, r3
 800b856:	d0b6      	beq.n	800b7c6 <_malloc_r+0x22>
 800b858:	1b9b      	subs	r3, r3, r6
 800b85a:	50a3      	str	r3, [r4, r2]
 800b85c:	e7b3      	b.n	800b7c6 <_malloc_r+0x22>
 800b85e:	6862      	ldr	r2, [r4, #4]
 800b860:	42a3      	cmp	r3, r4
 800b862:	bf0c      	ite	eq
 800b864:	6032      	streq	r2, [r6, #0]
 800b866:	605a      	strne	r2, [r3, #4]
 800b868:	e7ec      	b.n	800b844 <_malloc_r+0xa0>
 800b86a:	4623      	mov	r3, r4
 800b86c:	6864      	ldr	r4, [r4, #4]
 800b86e:	e7b2      	b.n	800b7d6 <_malloc_r+0x32>
 800b870:	4634      	mov	r4, r6
 800b872:	6876      	ldr	r6, [r6, #4]
 800b874:	e7b9      	b.n	800b7ea <_malloc_r+0x46>
 800b876:	230c      	movs	r3, #12
 800b878:	603b      	str	r3, [r7, #0]
 800b87a:	4638      	mov	r0, r7
 800b87c:	f001 fe82 	bl	800d584 <__malloc_unlock>
 800b880:	e7a1      	b.n	800b7c6 <_malloc_r+0x22>
 800b882:	6025      	str	r5, [r4, #0]
 800b884:	e7de      	b.n	800b844 <_malloc_r+0xa0>
 800b886:	bf00      	nop
 800b888:	20000854 	.word	0x20000854

0800b88c <__cvt>:
 800b88c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b890:	ec55 4b10 	vmov	r4, r5, d0
 800b894:	2d00      	cmp	r5, #0
 800b896:	460e      	mov	r6, r1
 800b898:	4619      	mov	r1, r3
 800b89a:	462b      	mov	r3, r5
 800b89c:	bfbb      	ittet	lt
 800b89e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b8a2:	461d      	movlt	r5, r3
 800b8a4:	2300      	movge	r3, #0
 800b8a6:	232d      	movlt	r3, #45	; 0x2d
 800b8a8:	700b      	strb	r3, [r1, #0]
 800b8aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b8ac:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b8b0:	4691      	mov	r9, r2
 800b8b2:	f023 0820 	bic.w	r8, r3, #32
 800b8b6:	bfbc      	itt	lt
 800b8b8:	4622      	movlt	r2, r4
 800b8ba:	4614      	movlt	r4, r2
 800b8bc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b8c0:	d005      	beq.n	800b8ce <__cvt+0x42>
 800b8c2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b8c6:	d100      	bne.n	800b8ca <__cvt+0x3e>
 800b8c8:	3601      	adds	r6, #1
 800b8ca:	2102      	movs	r1, #2
 800b8cc:	e000      	b.n	800b8d0 <__cvt+0x44>
 800b8ce:	2103      	movs	r1, #3
 800b8d0:	ab03      	add	r3, sp, #12
 800b8d2:	9301      	str	r3, [sp, #4]
 800b8d4:	ab02      	add	r3, sp, #8
 800b8d6:	9300      	str	r3, [sp, #0]
 800b8d8:	ec45 4b10 	vmov	d0, r4, r5
 800b8dc:	4653      	mov	r3, sl
 800b8de:	4632      	mov	r2, r6
 800b8e0:	f000 fe2a 	bl	800c538 <_dtoa_r>
 800b8e4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b8e8:	4607      	mov	r7, r0
 800b8ea:	d102      	bne.n	800b8f2 <__cvt+0x66>
 800b8ec:	f019 0f01 	tst.w	r9, #1
 800b8f0:	d022      	beq.n	800b938 <__cvt+0xac>
 800b8f2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b8f6:	eb07 0906 	add.w	r9, r7, r6
 800b8fa:	d110      	bne.n	800b91e <__cvt+0x92>
 800b8fc:	783b      	ldrb	r3, [r7, #0]
 800b8fe:	2b30      	cmp	r3, #48	; 0x30
 800b900:	d10a      	bne.n	800b918 <__cvt+0x8c>
 800b902:	2200      	movs	r2, #0
 800b904:	2300      	movs	r3, #0
 800b906:	4620      	mov	r0, r4
 800b908:	4629      	mov	r1, r5
 800b90a:	f7f5 f8f5 	bl	8000af8 <__aeabi_dcmpeq>
 800b90e:	b918      	cbnz	r0, 800b918 <__cvt+0x8c>
 800b910:	f1c6 0601 	rsb	r6, r6, #1
 800b914:	f8ca 6000 	str.w	r6, [sl]
 800b918:	f8da 3000 	ldr.w	r3, [sl]
 800b91c:	4499      	add	r9, r3
 800b91e:	2200      	movs	r2, #0
 800b920:	2300      	movs	r3, #0
 800b922:	4620      	mov	r0, r4
 800b924:	4629      	mov	r1, r5
 800b926:	f7f5 f8e7 	bl	8000af8 <__aeabi_dcmpeq>
 800b92a:	b108      	cbz	r0, 800b930 <__cvt+0xa4>
 800b92c:	f8cd 900c 	str.w	r9, [sp, #12]
 800b930:	2230      	movs	r2, #48	; 0x30
 800b932:	9b03      	ldr	r3, [sp, #12]
 800b934:	454b      	cmp	r3, r9
 800b936:	d307      	bcc.n	800b948 <__cvt+0xbc>
 800b938:	9b03      	ldr	r3, [sp, #12]
 800b93a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b93c:	1bdb      	subs	r3, r3, r7
 800b93e:	4638      	mov	r0, r7
 800b940:	6013      	str	r3, [r2, #0]
 800b942:	b004      	add	sp, #16
 800b944:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b948:	1c59      	adds	r1, r3, #1
 800b94a:	9103      	str	r1, [sp, #12]
 800b94c:	701a      	strb	r2, [r3, #0]
 800b94e:	e7f0      	b.n	800b932 <__cvt+0xa6>

0800b950 <__exponent>:
 800b950:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b952:	4603      	mov	r3, r0
 800b954:	2900      	cmp	r1, #0
 800b956:	bfb8      	it	lt
 800b958:	4249      	neglt	r1, r1
 800b95a:	f803 2b02 	strb.w	r2, [r3], #2
 800b95e:	bfb4      	ite	lt
 800b960:	222d      	movlt	r2, #45	; 0x2d
 800b962:	222b      	movge	r2, #43	; 0x2b
 800b964:	2909      	cmp	r1, #9
 800b966:	7042      	strb	r2, [r0, #1]
 800b968:	dd2a      	ble.n	800b9c0 <__exponent+0x70>
 800b96a:	f10d 0407 	add.w	r4, sp, #7
 800b96e:	46a4      	mov	ip, r4
 800b970:	270a      	movs	r7, #10
 800b972:	46a6      	mov	lr, r4
 800b974:	460a      	mov	r2, r1
 800b976:	fb91 f6f7 	sdiv	r6, r1, r7
 800b97a:	fb07 1516 	mls	r5, r7, r6, r1
 800b97e:	3530      	adds	r5, #48	; 0x30
 800b980:	2a63      	cmp	r2, #99	; 0x63
 800b982:	f104 34ff 	add.w	r4, r4, #4294967295
 800b986:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b98a:	4631      	mov	r1, r6
 800b98c:	dcf1      	bgt.n	800b972 <__exponent+0x22>
 800b98e:	3130      	adds	r1, #48	; 0x30
 800b990:	f1ae 0502 	sub.w	r5, lr, #2
 800b994:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b998:	1c44      	adds	r4, r0, #1
 800b99a:	4629      	mov	r1, r5
 800b99c:	4561      	cmp	r1, ip
 800b99e:	d30a      	bcc.n	800b9b6 <__exponent+0x66>
 800b9a0:	f10d 0209 	add.w	r2, sp, #9
 800b9a4:	eba2 020e 	sub.w	r2, r2, lr
 800b9a8:	4565      	cmp	r5, ip
 800b9aa:	bf88      	it	hi
 800b9ac:	2200      	movhi	r2, #0
 800b9ae:	4413      	add	r3, r2
 800b9b0:	1a18      	subs	r0, r3, r0
 800b9b2:	b003      	add	sp, #12
 800b9b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b9b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b9ba:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b9be:	e7ed      	b.n	800b99c <__exponent+0x4c>
 800b9c0:	2330      	movs	r3, #48	; 0x30
 800b9c2:	3130      	adds	r1, #48	; 0x30
 800b9c4:	7083      	strb	r3, [r0, #2]
 800b9c6:	70c1      	strb	r1, [r0, #3]
 800b9c8:	1d03      	adds	r3, r0, #4
 800b9ca:	e7f1      	b.n	800b9b0 <__exponent+0x60>

0800b9cc <_printf_float>:
 800b9cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9d0:	ed2d 8b02 	vpush	{d8}
 800b9d4:	b08d      	sub	sp, #52	; 0x34
 800b9d6:	460c      	mov	r4, r1
 800b9d8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b9dc:	4616      	mov	r6, r2
 800b9de:	461f      	mov	r7, r3
 800b9e0:	4605      	mov	r5, r0
 800b9e2:	f001 fd4f 	bl	800d484 <_localeconv_r>
 800b9e6:	f8d0 a000 	ldr.w	sl, [r0]
 800b9ea:	4650      	mov	r0, sl
 800b9ec:	f7f4 fc08 	bl	8000200 <strlen>
 800b9f0:	2300      	movs	r3, #0
 800b9f2:	930a      	str	r3, [sp, #40]	; 0x28
 800b9f4:	6823      	ldr	r3, [r4, #0]
 800b9f6:	9305      	str	r3, [sp, #20]
 800b9f8:	f8d8 3000 	ldr.w	r3, [r8]
 800b9fc:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ba00:	3307      	adds	r3, #7
 800ba02:	f023 0307 	bic.w	r3, r3, #7
 800ba06:	f103 0208 	add.w	r2, r3, #8
 800ba0a:	f8c8 2000 	str.w	r2, [r8]
 800ba0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba12:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ba16:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ba1a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ba1e:	9307      	str	r3, [sp, #28]
 800ba20:	f8cd 8018 	str.w	r8, [sp, #24]
 800ba24:	ee08 0a10 	vmov	s16, r0
 800ba28:	4b9f      	ldr	r3, [pc, #636]	; (800bca8 <_printf_float+0x2dc>)
 800ba2a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ba2e:	f04f 32ff 	mov.w	r2, #4294967295
 800ba32:	f7f5 f893 	bl	8000b5c <__aeabi_dcmpun>
 800ba36:	bb88      	cbnz	r0, 800ba9c <_printf_float+0xd0>
 800ba38:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ba3c:	4b9a      	ldr	r3, [pc, #616]	; (800bca8 <_printf_float+0x2dc>)
 800ba3e:	f04f 32ff 	mov.w	r2, #4294967295
 800ba42:	f7f5 f86d 	bl	8000b20 <__aeabi_dcmple>
 800ba46:	bb48      	cbnz	r0, 800ba9c <_printf_float+0xd0>
 800ba48:	2200      	movs	r2, #0
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	4640      	mov	r0, r8
 800ba4e:	4649      	mov	r1, r9
 800ba50:	f7f5 f85c 	bl	8000b0c <__aeabi_dcmplt>
 800ba54:	b110      	cbz	r0, 800ba5c <_printf_float+0x90>
 800ba56:	232d      	movs	r3, #45	; 0x2d
 800ba58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ba5c:	4b93      	ldr	r3, [pc, #588]	; (800bcac <_printf_float+0x2e0>)
 800ba5e:	4894      	ldr	r0, [pc, #592]	; (800bcb0 <_printf_float+0x2e4>)
 800ba60:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ba64:	bf94      	ite	ls
 800ba66:	4698      	movls	r8, r3
 800ba68:	4680      	movhi	r8, r0
 800ba6a:	2303      	movs	r3, #3
 800ba6c:	6123      	str	r3, [r4, #16]
 800ba6e:	9b05      	ldr	r3, [sp, #20]
 800ba70:	f023 0204 	bic.w	r2, r3, #4
 800ba74:	6022      	str	r2, [r4, #0]
 800ba76:	f04f 0900 	mov.w	r9, #0
 800ba7a:	9700      	str	r7, [sp, #0]
 800ba7c:	4633      	mov	r3, r6
 800ba7e:	aa0b      	add	r2, sp, #44	; 0x2c
 800ba80:	4621      	mov	r1, r4
 800ba82:	4628      	mov	r0, r5
 800ba84:	f000 f9d8 	bl	800be38 <_printf_common>
 800ba88:	3001      	adds	r0, #1
 800ba8a:	f040 8090 	bne.w	800bbae <_printf_float+0x1e2>
 800ba8e:	f04f 30ff 	mov.w	r0, #4294967295
 800ba92:	b00d      	add	sp, #52	; 0x34
 800ba94:	ecbd 8b02 	vpop	{d8}
 800ba98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba9c:	4642      	mov	r2, r8
 800ba9e:	464b      	mov	r3, r9
 800baa0:	4640      	mov	r0, r8
 800baa2:	4649      	mov	r1, r9
 800baa4:	f7f5 f85a 	bl	8000b5c <__aeabi_dcmpun>
 800baa8:	b140      	cbz	r0, 800babc <_printf_float+0xf0>
 800baaa:	464b      	mov	r3, r9
 800baac:	2b00      	cmp	r3, #0
 800baae:	bfbc      	itt	lt
 800bab0:	232d      	movlt	r3, #45	; 0x2d
 800bab2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800bab6:	487f      	ldr	r0, [pc, #508]	; (800bcb4 <_printf_float+0x2e8>)
 800bab8:	4b7f      	ldr	r3, [pc, #508]	; (800bcb8 <_printf_float+0x2ec>)
 800baba:	e7d1      	b.n	800ba60 <_printf_float+0x94>
 800babc:	6863      	ldr	r3, [r4, #4]
 800babe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800bac2:	9206      	str	r2, [sp, #24]
 800bac4:	1c5a      	adds	r2, r3, #1
 800bac6:	d13f      	bne.n	800bb48 <_printf_float+0x17c>
 800bac8:	2306      	movs	r3, #6
 800baca:	6063      	str	r3, [r4, #4]
 800bacc:	9b05      	ldr	r3, [sp, #20]
 800bace:	6861      	ldr	r1, [r4, #4]
 800bad0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800bad4:	2300      	movs	r3, #0
 800bad6:	9303      	str	r3, [sp, #12]
 800bad8:	ab0a      	add	r3, sp, #40	; 0x28
 800bada:	e9cd b301 	strd	fp, r3, [sp, #4]
 800bade:	ab09      	add	r3, sp, #36	; 0x24
 800bae0:	ec49 8b10 	vmov	d0, r8, r9
 800bae4:	9300      	str	r3, [sp, #0]
 800bae6:	6022      	str	r2, [r4, #0]
 800bae8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800baec:	4628      	mov	r0, r5
 800baee:	f7ff fecd 	bl	800b88c <__cvt>
 800baf2:	9b06      	ldr	r3, [sp, #24]
 800baf4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800baf6:	2b47      	cmp	r3, #71	; 0x47
 800baf8:	4680      	mov	r8, r0
 800bafa:	d108      	bne.n	800bb0e <_printf_float+0x142>
 800bafc:	1cc8      	adds	r0, r1, #3
 800bafe:	db02      	blt.n	800bb06 <_printf_float+0x13a>
 800bb00:	6863      	ldr	r3, [r4, #4]
 800bb02:	4299      	cmp	r1, r3
 800bb04:	dd41      	ble.n	800bb8a <_printf_float+0x1be>
 800bb06:	f1ab 0b02 	sub.w	fp, fp, #2
 800bb0a:	fa5f fb8b 	uxtb.w	fp, fp
 800bb0e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bb12:	d820      	bhi.n	800bb56 <_printf_float+0x18a>
 800bb14:	3901      	subs	r1, #1
 800bb16:	465a      	mov	r2, fp
 800bb18:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800bb1c:	9109      	str	r1, [sp, #36]	; 0x24
 800bb1e:	f7ff ff17 	bl	800b950 <__exponent>
 800bb22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bb24:	1813      	adds	r3, r2, r0
 800bb26:	2a01      	cmp	r2, #1
 800bb28:	4681      	mov	r9, r0
 800bb2a:	6123      	str	r3, [r4, #16]
 800bb2c:	dc02      	bgt.n	800bb34 <_printf_float+0x168>
 800bb2e:	6822      	ldr	r2, [r4, #0]
 800bb30:	07d2      	lsls	r2, r2, #31
 800bb32:	d501      	bpl.n	800bb38 <_printf_float+0x16c>
 800bb34:	3301      	adds	r3, #1
 800bb36:	6123      	str	r3, [r4, #16]
 800bb38:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d09c      	beq.n	800ba7a <_printf_float+0xae>
 800bb40:	232d      	movs	r3, #45	; 0x2d
 800bb42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bb46:	e798      	b.n	800ba7a <_printf_float+0xae>
 800bb48:	9a06      	ldr	r2, [sp, #24]
 800bb4a:	2a47      	cmp	r2, #71	; 0x47
 800bb4c:	d1be      	bne.n	800bacc <_printf_float+0x100>
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d1bc      	bne.n	800bacc <_printf_float+0x100>
 800bb52:	2301      	movs	r3, #1
 800bb54:	e7b9      	b.n	800baca <_printf_float+0xfe>
 800bb56:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800bb5a:	d118      	bne.n	800bb8e <_printf_float+0x1c2>
 800bb5c:	2900      	cmp	r1, #0
 800bb5e:	6863      	ldr	r3, [r4, #4]
 800bb60:	dd0b      	ble.n	800bb7a <_printf_float+0x1ae>
 800bb62:	6121      	str	r1, [r4, #16]
 800bb64:	b913      	cbnz	r3, 800bb6c <_printf_float+0x1a0>
 800bb66:	6822      	ldr	r2, [r4, #0]
 800bb68:	07d0      	lsls	r0, r2, #31
 800bb6a:	d502      	bpl.n	800bb72 <_printf_float+0x1a6>
 800bb6c:	3301      	adds	r3, #1
 800bb6e:	440b      	add	r3, r1
 800bb70:	6123      	str	r3, [r4, #16]
 800bb72:	65a1      	str	r1, [r4, #88]	; 0x58
 800bb74:	f04f 0900 	mov.w	r9, #0
 800bb78:	e7de      	b.n	800bb38 <_printf_float+0x16c>
 800bb7a:	b913      	cbnz	r3, 800bb82 <_printf_float+0x1b6>
 800bb7c:	6822      	ldr	r2, [r4, #0]
 800bb7e:	07d2      	lsls	r2, r2, #31
 800bb80:	d501      	bpl.n	800bb86 <_printf_float+0x1ba>
 800bb82:	3302      	adds	r3, #2
 800bb84:	e7f4      	b.n	800bb70 <_printf_float+0x1a4>
 800bb86:	2301      	movs	r3, #1
 800bb88:	e7f2      	b.n	800bb70 <_printf_float+0x1a4>
 800bb8a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800bb8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb90:	4299      	cmp	r1, r3
 800bb92:	db05      	blt.n	800bba0 <_printf_float+0x1d4>
 800bb94:	6823      	ldr	r3, [r4, #0]
 800bb96:	6121      	str	r1, [r4, #16]
 800bb98:	07d8      	lsls	r0, r3, #31
 800bb9a:	d5ea      	bpl.n	800bb72 <_printf_float+0x1a6>
 800bb9c:	1c4b      	adds	r3, r1, #1
 800bb9e:	e7e7      	b.n	800bb70 <_printf_float+0x1a4>
 800bba0:	2900      	cmp	r1, #0
 800bba2:	bfd4      	ite	le
 800bba4:	f1c1 0202 	rsble	r2, r1, #2
 800bba8:	2201      	movgt	r2, #1
 800bbaa:	4413      	add	r3, r2
 800bbac:	e7e0      	b.n	800bb70 <_printf_float+0x1a4>
 800bbae:	6823      	ldr	r3, [r4, #0]
 800bbb0:	055a      	lsls	r2, r3, #21
 800bbb2:	d407      	bmi.n	800bbc4 <_printf_float+0x1f8>
 800bbb4:	6923      	ldr	r3, [r4, #16]
 800bbb6:	4642      	mov	r2, r8
 800bbb8:	4631      	mov	r1, r6
 800bbba:	4628      	mov	r0, r5
 800bbbc:	47b8      	blx	r7
 800bbbe:	3001      	adds	r0, #1
 800bbc0:	d12c      	bne.n	800bc1c <_printf_float+0x250>
 800bbc2:	e764      	b.n	800ba8e <_printf_float+0xc2>
 800bbc4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bbc8:	f240 80e0 	bls.w	800bd8c <_printf_float+0x3c0>
 800bbcc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bbd0:	2200      	movs	r2, #0
 800bbd2:	2300      	movs	r3, #0
 800bbd4:	f7f4 ff90 	bl	8000af8 <__aeabi_dcmpeq>
 800bbd8:	2800      	cmp	r0, #0
 800bbda:	d034      	beq.n	800bc46 <_printf_float+0x27a>
 800bbdc:	4a37      	ldr	r2, [pc, #220]	; (800bcbc <_printf_float+0x2f0>)
 800bbde:	2301      	movs	r3, #1
 800bbe0:	4631      	mov	r1, r6
 800bbe2:	4628      	mov	r0, r5
 800bbe4:	47b8      	blx	r7
 800bbe6:	3001      	adds	r0, #1
 800bbe8:	f43f af51 	beq.w	800ba8e <_printf_float+0xc2>
 800bbec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bbf0:	429a      	cmp	r2, r3
 800bbf2:	db02      	blt.n	800bbfa <_printf_float+0x22e>
 800bbf4:	6823      	ldr	r3, [r4, #0]
 800bbf6:	07d8      	lsls	r0, r3, #31
 800bbf8:	d510      	bpl.n	800bc1c <_printf_float+0x250>
 800bbfa:	ee18 3a10 	vmov	r3, s16
 800bbfe:	4652      	mov	r2, sl
 800bc00:	4631      	mov	r1, r6
 800bc02:	4628      	mov	r0, r5
 800bc04:	47b8      	blx	r7
 800bc06:	3001      	adds	r0, #1
 800bc08:	f43f af41 	beq.w	800ba8e <_printf_float+0xc2>
 800bc0c:	f04f 0800 	mov.w	r8, #0
 800bc10:	f104 091a 	add.w	r9, r4, #26
 800bc14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc16:	3b01      	subs	r3, #1
 800bc18:	4543      	cmp	r3, r8
 800bc1a:	dc09      	bgt.n	800bc30 <_printf_float+0x264>
 800bc1c:	6823      	ldr	r3, [r4, #0]
 800bc1e:	079b      	lsls	r3, r3, #30
 800bc20:	f100 8105 	bmi.w	800be2e <_printf_float+0x462>
 800bc24:	68e0      	ldr	r0, [r4, #12]
 800bc26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bc28:	4298      	cmp	r0, r3
 800bc2a:	bfb8      	it	lt
 800bc2c:	4618      	movlt	r0, r3
 800bc2e:	e730      	b.n	800ba92 <_printf_float+0xc6>
 800bc30:	2301      	movs	r3, #1
 800bc32:	464a      	mov	r2, r9
 800bc34:	4631      	mov	r1, r6
 800bc36:	4628      	mov	r0, r5
 800bc38:	47b8      	blx	r7
 800bc3a:	3001      	adds	r0, #1
 800bc3c:	f43f af27 	beq.w	800ba8e <_printf_float+0xc2>
 800bc40:	f108 0801 	add.w	r8, r8, #1
 800bc44:	e7e6      	b.n	800bc14 <_printf_float+0x248>
 800bc46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	dc39      	bgt.n	800bcc0 <_printf_float+0x2f4>
 800bc4c:	4a1b      	ldr	r2, [pc, #108]	; (800bcbc <_printf_float+0x2f0>)
 800bc4e:	2301      	movs	r3, #1
 800bc50:	4631      	mov	r1, r6
 800bc52:	4628      	mov	r0, r5
 800bc54:	47b8      	blx	r7
 800bc56:	3001      	adds	r0, #1
 800bc58:	f43f af19 	beq.w	800ba8e <_printf_float+0xc2>
 800bc5c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bc60:	4313      	orrs	r3, r2
 800bc62:	d102      	bne.n	800bc6a <_printf_float+0x29e>
 800bc64:	6823      	ldr	r3, [r4, #0]
 800bc66:	07d9      	lsls	r1, r3, #31
 800bc68:	d5d8      	bpl.n	800bc1c <_printf_float+0x250>
 800bc6a:	ee18 3a10 	vmov	r3, s16
 800bc6e:	4652      	mov	r2, sl
 800bc70:	4631      	mov	r1, r6
 800bc72:	4628      	mov	r0, r5
 800bc74:	47b8      	blx	r7
 800bc76:	3001      	adds	r0, #1
 800bc78:	f43f af09 	beq.w	800ba8e <_printf_float+0xc2>
 800bc7c:	f04f 0900 	mov.w	r9, #0
 800bc80:	f104 0a1a 	add.w	sl, r4, #26
 800bc84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc86:	425b      	negs	r3, r3
 800bc88:	454b      	cmp	r3, r9
 800bc8a:	dc01      	bgt.n	800bc90 <_printf_float+0x2c4>
 800bc8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc8e:	e792      	b.n	800bbb6 <_printf_float+0x1ea>
 800bc90:	2301      	movs	r3, #1
 800bc92:	4652      	mov	r2, sl
 800bc94:	4631      	mov	r1, r6
 800bc96:	4628      	mov	r0, r5
 800bc98:	47b8      	blx	r7
 800bc9a:	3001      	adds	r0, #1
 800bc9c:	f43f aef7 	beq.w	800ba8e <_printf_float+0xc2>
 800bca0:	f109 0901 	add.w	r9, r9, #1
 800bca4:	e7ee      	b.n	800bc84 <_printf_float+0x2b8>
 800bca6:	bf00      	nop
 800bca8:	7fefffff 	.word	0x7fefffff
 800bcac:	0800e370 	.word	0x0800e370
 800bcb0:	0800e374 	.word	0x0800e374
 800bcb4:	0800e37c 	.word	0x0800e37c
 800bcb8:	0800e378 	.word	0x0800e378
 800bcbc:	0800e380 	.word	0x0800e380
 800bcc0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bcc2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bcc4:	429a      	cmp	r2, r3
 800bcc6:	bfa8      	it	ge
 800bcc8:	461a      	movge	r2, r3
 800bcca:	2a00      	cmp	r2, #0
 800bccc:	4691      	mov	r9, r2
 800bcce:	dc37      	bgt.n	800bd40 <_printf_float+0x374>
 800bcd0:	f04f 0b00 	mov.w	fp, #0
 800bcd4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bcd8:	f104 021a 	add.w	r2, r4, #26
 800bcdc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bcde:	9305      	str	r3, [sp, #20]
 800bce0:	eba3 0309 	sub.w	r3, r3, r9
 800bce4:	455b      	cmp	r3, fp
 800bce6:	dc33      	bgt.n	800bd50 <_printf_float+0x384>
 800bce8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bcec:	429a      	cmp	r2, r3
 800bcee:	db3b      	blt.n	800bd68 <_printf_float+0x39c>
 800bcf0:	6823      	ldr	r3, [r4, #0]
 800bcf2:	07da      	lsls	r2, r3, #31
 800bcf4:	d438      	bmi.n	800bd68 <_printf_float+0x39c>
 800bcf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bcf8:	9a05      	ldr	r2, [sp, #20]
 800bcfa:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bcfc:	1a9a      	subs	r2, r3, r2
 800bcfe:	eba3 0901 	sub.w	r9, r3, r1
 800bd02:	4591      	cmp	r9, r2
 800bd04:	bfa8      	it	ge
 800bd06:	4691      	movge	r9, r2
 800bd08:	f1b9 0f00 	cmp.w	r9, #0
 800bd0c:	dc35      	bgt.n	800bd7a <_printf_float+0x3ae>
 800bd0e:	f04f 0800 	mov.w	r8, #0
 800bd12:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bd16:	f104 0a1a 	add.w	sl, r4, #26
 800bd1a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bd1e:	1a9b      	subs	r3, r3, r2
 800bd20:	eba3 0309 	sub.w	r3, r3, r9
 800bd24:	4543      	cmp	r3, r8
 800bd26:	f77f af79 	ble.w	800bc1c <_printf_float+0x250>
 800bd2a:	2301      	movs	r3, #1
 800bd2c:	4652      	mov	r2, sl
 800bd2e:	4631      	mov	r1, r6
 800bd30:	4628      	mov	r0, r5
 800bd32:	47b8      	blx	r7
 800bd34:	3001      	adds	r0, #1
 800bd36:	f43f aeaa 	beq.w	800ba8e <_printf_float+0xc2>
 800bd3a:	f108 0801 	add.w	r8, r8, #1
 800bd3e:	e7ec      	b.n	800bd1a <_printf_float+0x34e>
 800bd40:	4613      	mov	r3, r2
 800bd42:	4631      	mov	r1, r6
 800bd44:	4642      	mov	r2, r8
 800bd46:	4628      	mov	r0, r5
 800bd48:	47b8      	blx	r7
 800bd4a:	3001      	adds	r0, #1
 800bd4c:	d1c0      	bne.n	800bcd0 <_printf_float+0x304>
 800bd4e:	e69e      	b.n	800ba8e <_printf_float+0xc2>
 800bd50:	2301      	movs	r3, #1
 800bd52:	4631      	mov	r1, r6
 800bd54:	4628      	mov	r0, r5
 800bd56:	9205      	str	r2, [sp, #20]
 800bd58:	47b8      	blx	r7
 800bd5a:	3001      	adds	r0, #1
 800bd5c:	f43f ae97 	beq.w	800ba8e <_printf_float+0xc2>
 800bd60:	9a05      	ldr	r2, [sp, #20]
 800bd62:	f10b 0b01 	add.w	fp, fp, #1
 800bd66:	e7b9      	b.n	800bcdc <_printf_float+0x310>
 800bd68:	ee18 3a10 	vmov	r3, s16
 800bd6c:	4652      	mov	r2, sl
 800bd6e:	4631      	mov	r1, r6
 800bd70:	4628      	mov	r0, r5
 800bd72:	47b8      	blx	r7
 800bd74:	3001      	adds	r0, #1
 800bd76:	d1be      	bne.n	800bcf6 <_printf_float+0x32a>
 800bd78:	e689      	b.n	800ba8e <_printf_float+0xc2>
 800bd7a:	9a05      	ldr	r2, [sp, #20]
 800bd7c:	464b      	mov	r3, r9
 800bd7e:	4442      	add	r2, r8
 800bd80:	4631      	mov	r1, r6
 800bd82:	4628      	mov	r0, r5
 800bd84:	47b8      	blx	r7
 800bd86:	3001      	adds	r0, #1
 800bd88:	d1c1      	bne.n	800bd0e <_printf_float+0x342>
 800bd8a:	e680      	b.n	800ba8e <_printf_float+0xc2>
 800bd8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bd8e:	2a01      	cmp	r2, #1
 800bd90:	dc01      	bgt.n	800bd96 <_printf_float+0x3ca>
 800bd92:	07db      	lsls	r3, r3, #31
 800bd94:	d538      	bpl.n	800be08 <_printf_float+0x43c>
 800bd96:	2301      	movs	r3, #1
 800bd98:	4642      	mov	r2, r8
 800bd9a:	4631      	mov	r1, r6
 800bd9c:	4628      	mov	r0, r5
 800bd9e:	47b8      	blx	r7
 800bda0:	3001      	adds	r0, #1
 800bda2:	f43f ae74 	beq.w	800ba8e <_printf_float+0xc2>
 800bda6:	ee18 3a10 	vmov	r3, s16
 800bdaa:	4652      	mov	r2, sl
 800bdac:	4631      	mov	r1, r6
 800bdae:	4628      	mov	r0, r5
 800bdb0:	47b8      	blx	r7
 800bdb2:	3001      	adds	r0, #1
 800bdb4:	f43f ae6b 	beq.w	800ba8e <_printf_float+0xc2>
 800bdb8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bdbc:	2200      	movs	r2, #0
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	f7f4 fe9a 	bl	8000af8 <__aeabi_dcmpeq>
 800bdc4:	b9d8      	cbnz	r0, 800bdfe <_printf_float+0x432>
 800bdc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bdc8:	f108 0201 	add.w	r2, r8, #1
 800bdcc:	3b01      	subs	r3, #1
 800bdce:	4631      	mov	r1, r6
 800bdd0:	4628      	mov	r0, r5
 800bdd2:	47b8      	blx	r7
 800bdd4:	3001      	adds	r0, #1
 800bdd6:	d10e      	bne.n	800bdf6 <_printf_float+0x42a>
 800bdd8:	e659      	b.n	800ba8e <_printf_float+0xc2>
 800bdda:	2301      	movs	r3, #1
 800bddc:	4652      	mov	r2, sl
 800bdde:	4631      	mov	r1, r6
 800bde0:	4628      	mov	r0, r5
 800bde2:	47b8      	blx	r7
 800bde4:	3001      	adds	r0, #1
 800bde6:	f43f ae52 	beq.w	800ba8e <_printf_float+0xc2>
 800bdea:	f108 0801 	add.w	r8, r8, #1
 800bdee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bdf0:	3b01      	subs	r3, #1
 800bdf2:	4543      	cmp	r3, r8
 800bdf4:	dcf1      	bgt.n	800bdda <_printf_float+0x40e>
 800bdf6:	464b      	mov	r3, r9
 800bdf8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800bdfc:	e6dc      	b.n	800bbb8 <_printf_float+0x1ec>
 800bdfe:	f04f 0800 	mov.w	r8, #0
 800be02:	f104 0a1a 	add.w	sl, r4, #26
 800be06:	e7f2      	b.n	800bdee <_printf_float+0x422>
 800be08:	2301      	movs	r3, #1
 800be0a:	4642      	mov	r2, r8
 800be0c:	e7df      	b.n	800bdce <_printf_float+0x402>
 800be0e:	2301      	movs	r3, #1
 800be10:	464a      	mov	r2, r9
 800be12:	4631      	mov	r1, r6
 800be14:	4628      	mov	r0, r5
 800be16:	47b8      	blx	r7
 800be18:	3001      	adds	r0, #1
 800be1a:	f43f ae38 	beq.w	800ba8e <_printf_float+0xc2>
 800be1e:	f108 0801 	add.w	r8, r8, #1
 800be22:	68e3      	ldr	r3, [r4, #12]
 800be24:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800be26:	1a5b      	subs	r3, r3, r1
 800be28:	4543      	cmp	r3, r8
 800be2a:	dcf0      	bgt.n	800be0e <_printf_float+0x442>
 800be2c:	e6fa      	b.n	800bc24 <_printf_float+0x258>
 800be2e:	f04f 0800 	mov.w	r8, #0
 800be32:	f104 0919 	add.w	r9, r4, #25
 800be36:	e7f4      	b.n	800be22 <_printf_float+0x456>

0800be38 <_printf_common>:
 800be38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be3c:	4616      	mov	r6, r2
 800be3e:	4699      	mov	r9, r3
 800be40:	688a      	ldr	r2, [r1, #8]
 800be42:	690b      	ldr	r3, [r1, #16]
 800be44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800be48:	4293      	cmp	r3, r2
 800be4a:	bfb8      	it	lt
 800be4c:	4613      	movlt	r3, r2
 800be4e:	6033      	str	r3, [r6, #0]
 800be50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800be54:	4607      	mov	r7, r0
 800be56:	460c      	mov	r4, r1
 800be58:	b10a      	cbz	r2, 800be5e <_printf_common+0x26>
 800be5a:	3301      	adds	r3, #1
 800be5c:	6033      	str	r3, [r6, #0]
 800be5e:	6823      	ldr	r3, [r4, #0]
 800be60:	0699      	lsls	r1, r3, #26
 800be62:	bf42      	ittt	mi
 800be64:	6833      	ldrmi	r3, [r6, #0]
 800be66:	3302      	addmi	r3, #2
 800be68:	6033      	strmi	r3, [r6, #0]
 800be6a:	6825      	ldr	r5, [r4, #0]
 800be6c:	f015 0506 	ands.w	r5, r5, #6
 800be70:	d106      	bne.n	800be80 <_printf_common+0x48>
 800be72:	f104 0a19 	add.w	sl, r4, #25
 800be76:	68e3      	ldr	r3, [r4, #12]
 800be78:	6832      	ldr	r2, [r6, #0]
 800be7a:	1a9b      	subs	r3, r3, r2
 800be7c:	42ab      	cmp	r3, r5
 800be7e:	dc26      	bgt.n	800bece <_printf_common+0x96>
 800be80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800be84:	1e13      	subs	r3, r2, #0
 800be86:	6822      	ldr	r2, [r4, #0]
 800be88:	bf18      	it	ne
 800be8a:	2301      	movne	r3, #1
 800be8c:	0692      	lsls	r2, r2, #26
 800be8e:	d42b      	bmi.n	800bee8 <_printf_common+0xb0>
 800be90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800be94:	4649      	mov	r1, r9
 800be96:	4638      	mov	r0, r7
 800be98:	47c0      	blx	r8
 800be9a:	3001      	adds	r0, #1
 800be9c:	d01e      	beq.n	800bedc <_printf_common+0xa4>
 800be9e:	6823      	ldr	r3, [r4, #0]
 800bea0:	68e5      	ldr	r5, [r4, #12]
 800bea2:	6832      	ldr	r2, [r6, #0]
 800bea4:	f003 0306 	and.w	r3, r3, #6
 800bea8:	2b04      	cmp	r3, #4
 800beaa:	bf08      	it	eq
 800beac:	1aad      	subeq	r5, r5, r2
 800beae:	68a3      	ldr	r3, [r4, #8]
 800beb0:	6922      	ldr	r2, [r4, #16]
 800beb2:	bf0c      	ite	eq
 800beb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800beb8:	2500      	movne	r5, #0
 800beba:	4293      	cmp	r3, r2
 800bebc:	bfc4      	itt	gt
 800bebe:	1a9b      	subgt	r3, r3, r2
 800bec0:	18ed      	addgt	r5, r5, r3
 800bec2:	2600      	movs	r6, #0
 800bec4:	341a      	adds	r4, #26
 800bec6:	42b5      	cmp	r5, r6
 800bec8:	d11a      	bne.n	800bf00 <_printf_common+0xc8>
 800beca:	2000      	movs	r0, #0
 800becc:	e008      	b.n	800bee0 <_printf_common+0xa8>
 800bece:	2301      	movs	r3, #1
 800bed0:	4652      	mov	r2, sl
 800bed2:	4649      	mov	r1, r9
 800bed4:	4638      	mov	r0, r7
 800bed6:	47c0      	blx	r8
 800bed8:	3001      	adds	r0, #1
 800beda:	d103      	bne.n	800bee4 <_printf_common+0xac>
 800bedc:	f04f 30ff 	mov.w	r0, #4294967295
 800bee0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bee4:	3501      	adds	r5, #1
 800bee6:	e7c6      	b.n	800be76 <_printf_common+0x3e>
 800bee8:	18e1      	adds	r1, r4, r3
 800beea:	1c5a      	adds	r2, r3, #1
 800beec:	2030      	movs	r0, #48	; 0x30
 800beee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bef2:	4422      	add	r2, r4
 800bef4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bef8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800befc:	3302      	adds	r3, #2
 800befe:	e7c7      	b.n	800be90 <_printf_common+0x58>
 800bf00:	2301      	movs	r3, #1
 800bf02:	4622      	mov	r2, r4
 800bf04:	4649      	mov	r1, r9
 800bf06:	4638      	mov	r0, r7
 800bf08:	47c0      	blx	r8
 800bf0a:	3001      	adds	r0, #1
 800bf0c:	d0e6      	beq.n	800bedc <_printf_common+0xa4>
 800bf0e:	3601      	adds	r6, #1
 800bf10:	e7d9      	b.n	800bec6 <_printf_common+0x8e>
	...

0800bf14 <_printf_i>:
 800bf14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bf18:	7e0f      	ldrb	r7, [r1, #24]
 800bf1a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bf1c:	2f78      	cmp	r7, #120	; 0x78
 800bf1e:	4691      	mov	r9, r2
 800bf20:	4680      	mov	r8, r0
 800bf22:	460c      	mov	r4, r1
 800bf24:	469a      	mov	sl, r3
 800bf26:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bf2a:	d807      	bhi.n	800bf3c <_printf_i+0x28>
 800bf2c:	2f62      	cmp	r7, #98	; 0x62
 800bf2e:	d80a      	bhi.n	800bf46 <_printf_i+0x32>
 800bf30:	2f00      	cmp	r7, #0
 800bf32:	f000 80d8 	beq.w	800c0e6 <_printf_i+0x1d2>
 800bf36:	2f58      	cmp	r7, #88	; 0x58
 800bf38:	f000 80a3 	beq.w	800c082 <_printf_i+0x16e>
 800bf3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bf40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bf44:	e03a      	b.n	800bfbc <_printf_i+0xa8>
 800bf46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bf4a:	2b15      	cmp	r3, #21
 800bf4c:	d8f6      	bhi.n	800bf3c <_printf_i+0x28>
 800bf4e:	a101      	add	r1, pc, #4	; (adr r1, 800bf54 <_printf_i+0x40>)
 800bf50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bf54:	0800bfad 	.word	0x0800bfad
 800bf58:	0800bfc1 	.word	0x0800bfc1
 800bf5c:	0800bf3d 	.word	0x0800bf3d
 800bf60:	0800bf3d 	.word	0x0800bf3d
 800bf64:	0800bf3d 	.word	0x0800bf3d
 800bf68:	0800bf3d 	.word	0x0800bf3d
 800bf6c:	0800bfc1 	.word	0x0800bfc1
 800bf70:	0800bf3d 	.word	0x0800bf3d
 800bf74:	0800bf3d 	.word	0x0800bf3d
 800bf78:	0800bf3d 	.word	0x0800bf3d
 800bf7c:	0800bf3d 	.word	0x0800bf3d
 800bf80:	0800c0cd 	.word	0x0800c0cd
 800bf84:	0800bff1 	.word	0x0800bff1
 800bf88:	0800c0af 	.word	0x0800c0af
 800bf8c:	0800bf3d 	.word	0x0800bf3d
 800bf90:	0800bf3d 	.word	0x0800bf3d
 800bf94:	0800c0ef 	.word	0x0800c0ef
 800bf98:	0800bf3d 	.word	0x0800bf3d
 800bf9c:	0800bff1 	.word	0x0800bff1
 800bfa0:	0800bf3d 	.word	0x0800bf3d
 800bfa4:	0800bf3d 	.word	0x0800bf3d
 800bfa8:	0800c0b7 	.word	0x0800c0b7
 800bfac:	682b      	ldr	r3, [r5, #0]
 800bfae:	1d1a      	adds	r2, r3, #4
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	602a      	str	r2, [r5, #0]
 800bfb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bfb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bfbc:	2301      	movs	r3, #1
 800bfbe:	e0a3      	b.n	800c108 <_printf_i+0x1f4>
 800bfc0:	6820      	ldr	r0, [r4, #0]
 800bfc2:	6829      	ldr	r1, [r5, #0]
 800bfc4:	0606      	lsls	r6, r0, #24
 800bfc6:	f101 0304 	add.w	r3, r1, #4
 800bfca:	d50a      	bpl.n	800bfe2 <_printf_i+0xce>
 800bfcc:	680e      	ldr	r6, [r1, #0]
 800bfce:	602b      	str	r3, [r5, #0]
 800bfd0:	2e00      	cmp	r6, #0
 800bfd2:	da03      	bge.n	800bfdc <_printf_i+0xc8>
 800bfd4:	232d      	movs	r3, #45	; 0x2d
 800bfd6:	4276      	negs	r6, r6
 800bfd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bfdc:	485e      	ldr	r0, [pc, #376]	; (800c158 <_printf_i+0x244>)
 800bfde:	230a      	movs	r3, #10
 800bfe0:	e019      	b.n	800c016 <_printf_i+0x102>
 800bfe2:	680e      	ldr	r6, [r1, #0]
 800bfe4:	602b      	str	r3, [r5, #0]
 800bfe6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bfea:	bf18      	it	ne
 800bfec:	b236      	sxthne	r6, r6
 800bfee:	e7ef      	b.n	800bfd0 <_printf_i+0xbc>
 800bff0:	682b      	ldr	r3, [r5, #0]
 800bff2:	6820      	ldr	r0, [r4, #0]
 800bff4:	1d19      	adds	r1, r3, #4
 800bff6:	6029      	str	r1, [r5, #0]
 800bff8:	0601      	lsls	r1, r0, #24
 800bffa:	d501      	bpl.n	800c000 <_printf_i+0xec>
 800bffc:	681e      	ldr	r6, [r3, #0]
 800bffe:	e002      	b.n	800c006 <_printf_i+0xf2>
 800c000:	0646      	lsls	r6, r0, #25
 800c002:	d5fb      	bpl.n	800bffc <_printf_i+0xe8>
 800c004:	881e      	ldrh	r6, [r3, #0]
 800c006:	4854      	ldr	r0, [pc, #336]	; (800c158 <_printf_i+0x244>)
 800c008:	2f6f      	cmp	r7, #111	; 0x6f
 800c00a:	bf0c      	ite	eq
 800c00c:	2308      	moveq	r3, #8
 800c00e:	230a      	movne	r3, #10
 800c010:	2100      	movs	r1, #0
 800c012:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c016:	6865      	ldr	r5, [r4, #4]
 800c018:	60a5      	str	r5, [r4, #8]
 800c01a:	2d00      	cmp	r5, #0
 800c01c:	bfa2      	ittt	ge
 800c01e:	6821      	ldrge	r1, [r4, #0]
 800c020:	f021 0104 	bicge.w	r1, r1, #4
 800c024:	6021      	strge	r1, [r4, #0]
 800c026:	b90e      	cbnz	r6, 800c02c <_printf_i+0x118>
 800c028:	2d00      	cmp	r5, #0
 800c02a:	d04d      	beq.n	800c0c8 <_printf_i+0x1b4>
 800c02c:	4615      	mov	r5, r2
 800c02e:	fbb6 f1f3 	udiv	r1, r6, r3
 800c032:	fb03 6711 	mls	r7, r3, r1, r6
 800c036:	5dc7      	ldrb	r7, [r0, r7]
 800c038:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c03c:	4637      	mov	r7, r6
 800c03e:	42bb      	cmp	r3, r7
 800c040:	460e      	mov	r6, r1
 800c042:	d9f4      	bls.n	800c02e <_printf_i+0x11a>
 800c044:	2b08      	cmp	r3, #8
 800c046:	d10b      	bne.n	800c060 <_printf_i+0x14c>
 800c048:	6823      	ldr	r3, [r4, #0]
 800c04a:	07de      	lsls	r6, r3, #31
 800c04c:	d508      	bpl.n	800c060 <_printf_i+0x14c>
 800c04e:	6923      	ldr	r3, [r4, #16]
 800c050:	6861      	ldr	r1, [r4, #4]
 800c052:	4299      	cmp	r1, r3
 800c054:	bfde      	ittt	le
 800c056:	2330      	movle	r3, #48	; 0x30
 800c058:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c05c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c060:	1b52      	subs	r2, r2, r5
 800c062:	6122      	str	r2, [r4, #16]
 800c064:	f8cd a000 	str.w	sl, [sp]
 800c068:	464b      	mov	r3, r9
 800c06a:	aa03      	add	r2, sp, #12
 800c06c:	4621      	mov	r1, r4
 800c06e:	4640      	mov	r0, r8
 800c070:	f7ff fee2 	bl	800be38 <_printf_common>
 800c074:	3001      	adds	r0, #1
 800c076:	d14c      	bne.n	800c112 <_printf_i+0x1fe>
 800c078:	f04f 30ff 	mov.w	r0, #4294967295
 800c07c:	b004      	add	sp, #16
 800c07e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c082:	4835      	ldr	r0, [pc, #212]	; (800c158 <_printf_i+0x244>)
 800c084:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c088:	6829      	ldr	r1, [r5, #0]
 800c08a:	6823      	ldr	r3, [r4, #0]
 800c08c:	f851 6b04 	ldr.w	r6, [r1], #4
 800c090:	6029      	str	r1, [r5, #0]
 800c092:	061d      	lsls	r5, r3, #24
 800c094:	d514      	bpl.n	800c0c0 <_printf_i+0x1ac>
 800c096:	07df      	lsls	r7, r3, #31
 800c098:	bf44      	itt	mi
 800c09a:	f043 0320 	orrmi.w	r3, r3, #32
 800c09e:	6023      	strmi	r3, [r4, #0]
 800c0a0:	b91e      	cbnz	r6, 800c0aa <_printf_i+0x196>
 800c0a2:	6823      	ldr	r3, [r4, #0]
 800c0a4:	f023 0320 	bic.w	r3, r3, #32
 800c0a8:	6023      	str	r3, [r4, #0]
 800c0aa:	2310      	movs	r3, #16
 800c0ac:	e7b0      	b.n	800c010 <_printf_i+0xfc>
 800c0ae:	6823      	ldr	r3, [r4, #0]
 800c0b0:	f043 0320 	orr.w	r3, r3, #32
 800c0b4:	6023      	str	r3, [r4, #0]
 800c0b6:	2378      	movs	r3, #120	; 0x78
 800c0b8:	4828      	ldr	r0, [pc, #160]	; (800c15c <_printf_i+0x248>)
 800c0ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c0be:	e7e3      	b.n	800c088 <_printf_i+0x174>
 800c0c0:	0659      	lsls	r1, r3, #25
 800c0c2:	bf48      	it	mi
 800c0c4:	b2b6      	uxthmi	r6, r6
 800c0c6:	e7e6      	b.n	800c096 <_printf_i+0x182>
 800c0c8:	4615      	mov	r5, r2
 800c0ca:	e7bb      	b.n	800c044 <_printf_i+0x130>
 800c0cc:	682b      	ldr	r3, [r5, #0]
 800c0ce:	6826      	ldr	r6, [r4, #0]
 800c0d0:	6961      	ldr	r1, [r4, #20]
 800c0d2:	1d18      	adds	r0, r3, #4
 800c0d4:	6028      	str	r0, [r5, #0]
 800c0d6:	0635      	lsls	r5, r6, #24
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	d501      	bpl.n	800c0e0 <_printf_i+0x1cc>
 800c0dc:	6019      	str	r1, [r3, #0]
 800c0de:	e002      	b.n	800c0e6 <_printf_i+0x1d2>
 800c0e0:	0670      	lsls	r0, r6, #25
 800c0e2:	d5fb      	bpl.n	800c0dc <_printf_i+0x1c8>
 800c0e4:	8019      	strh	r1, [r3, #0]
 800c0e6:	2300      	movs	r3, #0
 800c0e8:	6123      	str	r3, [r4, #16]
 800c0ea:	4615      	mov	r5, r2
 800c0ec:	e7ba      	b.n	800c064 <_printf_i+0x150>
 800c0ee:	682b      	ldr	r3, [r5, #0]
 800c0f0:	1d1a      	adds	r2, r3, #4
 800c0f2:	602a      	str	r2, [r5, #0]
 800c0f4:	681d      	ldr	r5, [r3, #0]
 800c0f6:	6862      	ldr	r2, [r4, #4]
 800c0f8:	2100      	movs	r1, #0
 800c0fa:	4628      	mov	r0, r5
 800c0fc:	f7f4 f888 	bl	8000210 <memchr>
 800c100:	b108      	cbz	r0, 800c106 <_printf_i+0x1f2>
 800c102:	1b40      	subs	r0, r0, r5
 800c104:	6060      	str	r0, [r4, #4]
 800c106:	6863      	ldr	r3, [r4, #4]
 800c108:	6123      	str	r3, [r4, #16]
 800c10a:	2300      	movs	r3, #0
 800c10c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c110:	e7a8      	b.n	800c064 <_printf_i+0x150>
 800c112:	6923      	ldr	r3, [r4, #16]
 800c114:	462a      	mov	r2, r5
 800c116:	4649      	mov	r1, r9
 800c118:	4640      	mov	r0, r8
 800c11a:	47d0      	blx	sl
 800c11c:	3001      	adds	r0, #1
 800c11e:	d0ab      	beq.n	800c078 <_printf_i+0x164>
 800c120:	6823      	ldr	r3, [r4, #0]
 800c122:	079b      	lsls	r3, r3, #30
 800c124:	d413      	bmi.n	800c14e <_printf_i+0x23a>
 800c126:	68e0      	ldr	r0, [r4, #12]
 800c128:	9b03      	ldr	r3, [sp, #12]
 800c12a:	4298      	cmp	r0, r3
 800c12c:	bfb8      	it	lt
 800c12e:	4618      	movlt	r0, r3
 800c130:	e7a4      	b.n	800c07c <_printf_i+0x168>
 800c132:	2301      	movs	r3, #1
 800c134:	4632      	mov	r2, r6
 800c136:	4649      	mov	r1, r9
 800c138:	4640      	mov	r0, r8
 800c13a:	47d0      	blx	sl
 800c13c:	3001      	adds	r0, #1
 800c13e:	d09b      	beq.n	800c078 <_printf_i+0x164>
 800c140:	3501      	adds	r5, #1
 800c142:	68e3      	ldr	r3, [r4, #12]
 800c144:	9903      	ldr	r1, [sp, #12]
 800c146:	1a5b      	subs	r3, r3, r1
 800c148:	42ab      	cmp	r3, r5
 800c14a:	dcf2      	bgt.n	800c132 <_printf_i+0x21e>
 800c14c:	e7eb      	b.n	800c126 <_printf_i+0x212>
 800c14e:	2500      	movs	r5, #0
 800c150:	f104 0619 	add.w	r6, r4, #25
 800c154:	e7f5      	b.n	800c142 <_printf_i+0x22e>
 800c156:	bf00      	nop
 800c158:	0800e382 	.word	0x0800e382
 800c15c:	0800e393 	.word	0x0800e393

0800c160 <iprintf>:
 800c160:	b40f      	push	{r0, r1, r2, r3}
 800c162:	4b0a      	ldr	r3, [pc, #40]	; (800c18c <iprintf+0x2c>)
 800c164:	b513      	push	{r0, r1, r4, lr}
 800c166:	681c      	ldr	r4, [r3, #0]
 800c168:	b124      	cbz	r4, 800c174 <iprintf+0x14>
 800c16a:	69a3      	ldr	r3, [r4, #24]
 800c16c:	b913      	cbnz	r3, 800c174 <iprintf+0x14>
 800c16e:	4620      	mov	r0, r4
 800c170:	f001 f8ea 	bl	800d348 <__sinit>
 800c174:	ab05      	add	r3, sp, #20
 800c176:	9a04      	ldr	r2, [sp, #16]
 800c178:	68a1      	ldr	r1, [r4, #8]
 800c17a:	9301      	str	r3, [sp, #4]
 800c17c:	4620      	mov	r0, r4
 800c17e:	f001 fdcb 	bl	800dd18 <_vfiprintf_r>
 800c182:	b002      	add	sp, #8
 800c184:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c188:	b004      	add	sp, #16
 800c18a:	4770      	bx	lr
 800c18c:	20000014 	.word	0x20000014

0800c190 <_puts_r>:
 800c190:	b570      	push	{r4, r5, r6, lr}
 800c192:	460e      	mov	r6, r1
 800c194:	4605      	mov	r5, r0
 800c196:	b118      	cbz	r0, 800c1a0 <_puts_r+0x10>
 800c198:	6983      	ldr	r3, [r0, #24]
 800c19a:	b90b      	cbnz	r3, 800c1a0 <_puts_r+0x10>
 800c19c:	f001 f8d4 	bl	800d348 <__sinit>
 800c1a0:	69ab      	ldr	r3, [r5, #24]
 800c1a2:	68ac      	ldr	r4, [r5, #8]
 800c1a4:	b913      	cbnz	r3, 800c1ac <_puts_r+0x1c>
 800c1a6:	4628      	mov	r0, r5
 800c1a8:	f001 f8ce 	bl	800d348 <__sinit>
 800c1ac:	4b2c      	ldr	r3, [pc, #176]	; (800c260 <_puts_r+0xd0>)
 800c1ae:	429c      	cmp	r4, r3
 800c1b0:	d120      	bne.n	800c1f4 <_puts_r+0x64>
 800c1b2:	686c      	ldr	r4, [r5, #4]
 800c1b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c1b6:	07db      	lsls	r3, r3, #31
 800c1b8:	d405      	bmi.n	800c1c6 <_puts_r+0x36>
 800c1ba:	89a3      	ldrh	r3, [r4, #12]
 800c1bc:	0598      	lsls	r0, r3, #22
 800c1be:	d402      	bmi.n	800c1c6 <_puts_r+0x36>
 800c1c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c1c2:	f001 f964 	bl	800d48e <__retarget_lock_acquire_recursive>
 800c1c6:	89a3      	ldrh	r3, [r4, #12]
 800c1c8:	0719      	lsls	r1, r3, #28
 800c1ca:	d51d      	bpl.n	800c208 <_puts_r+0x78>
 800c1cc:	6923      	ldr	r3, [r4, #16]
 800c1ce:	b1db      	cbz	r3, 800c208 <_puts_r+0x78>
 800c1d0:	3e01      	subs	r6, #1
 800c1d2:	68a3      	ldr	r3, [r4, #8]
 800c1d4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c1d8:	3b01      	subs	r3, #1
 800c1da:	60a3      	str	r3, [r4, #8]
 800c1dc:	bb39      	cbnz	r1, 800c22e <_puts_r+0x9e>
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	da38      	bge.n	800c254 <_puts_r+0xc4>
 800c1e2:	4622      	mov	r2, r4
 800c1e4:	210a      	movs	r1, #10
 800c1e6:	4628      	mov	r0, r5
 800c1e8:	f000 f858 	bl	800c29c <__swbuf_r>
 800c1ec:	3001      	adds	r0, #1
 800c1ee:	d011      	beq.n	800c214 <_puts_r+0x84>
 800c1f0:	250a      	movs	r5, #10
 800c1f2:	e011      	b.n	800c218 <_puts_r+0x88>
 800c1f4:	4b1b      	ldr	r3, [pc, #108]	; (800c264 <_puts_r+0xd4>)
 800c1f6:	429c      	cmp	r4, r3
 800c1f8:	d101      	bne.n	800c1fe <_puts_r+0x6e>
 800c1fa:	68ac      	ldr	r4, [r5, #8]
 800c1fc:	e7da      	b.n	800c1b4 <_puts_r+0x24>
 800c1fe:	4b1a      	ldr	r3, [pc, #104]	; (800c268 <_puts_r+0xd8>)
 800c200:	429c      	cmp	r4, r3
 800c202:	bf08      	it	eq
 800c204:	68ec      	ldreq	r4, [r5, #12]
 800c206:	e7d5      	b.n	800c1b4 <_puts_r+0x24>
 800c208:	4621      	mov	r1, r4
 800c20a:	4628      	mov	r0, r5
 800c20c:	f000 f898 	bl	800c340 <__swsetup_r>
 800c210:	2800      	cmp	r0, #0
 800c212:	d0dd      	beq.n	800c1d0 <_puts_r+0x40>
 800c214:	f04f 35ff 	mov.w	r5, #4294967295
 800c218:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c21a:	07da      	lsls	r2, r3, #31
 800c21c:	d405      	bmi.n	800c22a <_puts_r+0x9a>
 800c21e:	89a3      	ldrh	r3, [r4, #12]
 800c220:	059b      	lsls	r3, r3, #22
 800c222:	d402      	bmi.n	800c22a <_puts_r+0x9a>
 800c224:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c226:	f001 f933 	bl	800d490 <__retarget_lock_release_recursive>
 800c22a:	4628      	mov	r0, r5
 800c22c:	bd70      	pop	{r4, r5, r6, pc}
 800c22e:	2b00      	cmp	r3, #0
 800c230:	da04      	bge.n	800c23c <_puts_r+0xac>
 800c232:	69a2      	ldr	r2, [r4, #24]
 800c234:	429a      	cmp	r2, r3
 800c236:	dc06      	bgt.n	800c246 <_puts_r+0xb6>
 800c238:	290a      	cmp	r1, #10
 800c23a:	d004      	beq.n	800c246 <_puts_r+0xb6>
 800c23c:	6823      	ldr	r3, [r4, #0]
 800c23e:	1c5a      	adds	r2, r3, #1
 800c240:	6022      	str	r2, [r4, #0]
 800c242:	7019      	strb	r1, [r3, #0]
 800c244:	e7c5      	b.n	800c1d2 <_puts_r+0x42>
 800c246:	4622      	mov	r2, r4
 800c248:	4628      	mov	r0, r5
 800c24a:	f000 f827 	bl	800c29c <__swbuf_r>
 800c24e:	3001      	adds	r0, #1
 800c250:	d1bf      	bne.n	800c1d2 <_puts_r+0x42>
 800c252:	e7df      	b.n	800c214 <_puts_r+0x84>
 800c254:	6823      	ldr	r3, [r4, #0]
 800c256:	250a      	movs	r5, #10
 800c258:	1c5a      	adds	r2, r3, #1
 800c25a:	6022      	str	r2, [r4, #0]
 800c25c:	701d      	strb	r5, [r3, #0]
 800c25e:	e7db      	b.n	800c218 <_puts_r+0x88>
 800c260:	0800e454 	.word	0x0800e454
 800c264:	0800e474 	.word	0x0800e474
 800c268:	0800e434 	.word	0x0800e434

0800c26c <puts>:
 800c26c:	4b02      	ldr	r3, [pc, #8]	; (800c278 <puts+0xc>)
 800c26e:	4601      	mov	r1, r0
 800c270:	6818      	ldr	r0, [r3, #0]
 800c272:	f7ff bf8d 	b.w	800c190 <_puts_r>
 800c276:	bf00      	nop
 800c278:	20000014 	.word	0x20000014

0800c27c <_sbrk_r>:
 800c27c:	b538      	push	{r3, r4, r5, lr}
 800c27e:	4d06      	ldr	r5, [pc, #24]	; (800c298 <_sbrk_r+0x1c>)
 800c280:	2300      	movs	r3, #0
 800c282:	4604      	mov	r4, r0
 800c284:	4608      	mov	r0, r1
 800c286:	602b      	str	r3, [r5, #0]
 800c288:	f7f7 f9de 	bl	8003648 <_sbrk>
 800c28c:	1c43      	adds	r3, r0, #1
 800c28e:	d102      	bne.n	800c296 <_sbrk_r+0x1a>
 800c290:	682b      	ldr	r3, [r5, #0]
 800c292:	b103      	cbz	r3, 800c296 <_sbrk_r+0x1a>
 800c294:	6023      	str	r3, [r4, #0]
 800c296:	bd38      	pop	{r3, r4, r5, pc}
 800c298:	20000860 	.word	0x20000860

0800c29c <__swbuf_r>:
 800c29c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c29e:	460e      	mov	r6, r1
 800c2a0:	4614      	mov	r4, r2
 800c2a2:	4605      	mov	r5, r0
 800c2a4:	b118      	cbz	r0, 800c2ae <__swbuf_r+0x12>
 800c2a6:	6983      	ldr	r3, [r0, #24]
 800c2a8:	b90b      	cbnz	r3, 800c2ae <__swbuf_r+0x12>
 800c2aa:	f001 f84d 	bl	800d348 <__sinit>
 800c2ae:	4b21      	ldr	r3, [pc, #132]	; (800c334 <__swbuf_r+0x98>)
 800c2b0:	429c      	cmp	r4, r3
 800c2b2:	d12b      	bne.n	800c30c <__swbuf_r+0x70>
 800c2b4:	686c      	ldr	r4, [r5, #4]
 800c2b6:	69a3      	ldr	r3, [r4, #24]
 800c2b8:	60a3      	str	r3, [r4, #8]
 800c2ba:	89a3      	ldrh	r3, [r4, #12]
 800c2bc:	071a      	lsls	r2, r3, #28
 800c2be:	d52f      	bpl.n	800c320 <__swbuf_r+0x84>
 800c2c0:	6923      	ldr	r3, [r4, #16]
 800c2c2:	b36b      	cbz	r3, 800c320 <__swbuf_r+0x84>
 800c2c4:	6923      	ldr	r3, [r4, #16]
 800c2c6:	6820      	ldr	r0, [r4, #0]
 800c2c8:	1ac0      	subs	r0, r0, r3
 800c2ca:	6963      	ldr	r3, [r4, #20]
 800c2cc:	b2f6      	uxtb	r6, r6
 800c2ce:	4283      	cmp	r3, r0
 800c2d0:	4637      	mov	r7, r6
 800c2d2:	dc04      	bgt.n	800c2de <__swbuf_r+0x42>
 800c2d4:	4621      	mov	r1, r4
 800c2d6:	4628      	mov	r0, r5
 800c2d8:	f000 ffa2 	bl	800d220 <_fflush_r>
 800c2dc:	bb30      	cbnz	r0, 800c32c <__swbuf_r+0x90>
 800c2de:	68a3      	ldr	r3, [r4, #8]
 800c2e0:	3b01      	subs	r3, #1
 800c2e2:	60a3      	str	r3, [r4, #8]
 800c2e4:	6823      	ldr	r3, [r4, #0]
 800c2e6:	1c5a      	adds	r2, r3, #1
 800c2e8:	6022      	str	r2, [r4, #0]
 800c2ea:	701e      	strb	r6, [r3, #0]
 800c2ec:	6963      	ldr	r3, [r4, #20]
 800c2ee:	3001      	adds	r0, #1
 800c2f0:	4283      	cmp	r3, r0
 800c2f2:	d004      	beq.n	800c2fe <__swbuf_r+0x62>
 800c2f4:	89a3      	ldrh	r3, [r4, #12]
 800c2f6:	07db      	lsls	r3, r3, #31
 800c2f8:	d506      	bpl.n	800c308 <__swbuf_r+0x6c>
 800c2fa:	2e0a      	cmp	r6, #10
 800c2fc:	d104      	bne.n	800c308 <__swbuf_r+0x6c>
 800c2fe:	4621      	mov	r1, r4
 800c300:	4628      	mov	r0, r5
 800c302:	f000 ff8d 	bl	800d220 <_fflush_r>
 800c306:	b988      	cbnz	r0, 800c32c <__swbuf_r+0x90>
 800c308:	4638      	mov	r0, r7
 800c30a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c30c:	4b0a      	ldr	r3, [pc, #40]	; (800c338 <__swbuf_r+0x9c>)
 800c30e:	429c      	cmp	r4, r3
 800c310:	d101      	bne.n	800c316 <__swbuf_r+0x7a>
 800c312:	68ac      	ldr	r4, [r5, #8]
 800c314:	e7cf      	b.n	800c2b6 <__swbuf_r+0x1a>
 800c316:	4b09      	ldr	r3, [pc, #36]	; (800c33c <__swbuf_r+0xa0>)
 800c318:	429c      	cmp	r4, r3
 800c31a:	bf08      	it	eq
 800c31c:	68ec      	ldreq	r4, [r5, #12]
 800c31e:	e7ca      	b.n	800c2b6 <__swbuf_r+0x1a>
 800c320:	4621      	mov	r1, r4
 800c322:	4628      	mov	r0, r5
 800c324:	f000 f80c 	bl	800c340 <__swsetup_r>
 800c328:	2800      	cmp	r0, #0
 800c32a:	d0cb      	beq.n	800c2c4 <__swbuf_r+0x28>
 800c32c:	f04f 37ff 	mov.w	r7, #4294967295
 800c330:	e7ea      	b.n	800c308 <__swbuf_r+0x6c>
 800c332:	bf00      	nop
 800c334:	0800e454 	.word	0x0800e454
 800c338:	0800e474 	.word	0x0800e474
 800c33c:	0800e434 	.word	0x0800e434

0800c340 <__swsetup_r>:
 800c340:	4b32      	ldr	r3, [pc, #200]	; (800c40c <__swsetup_r+0xcc>)
 800c342:	b570      	push	{r4, r5, r6, lr}
 800c344:	681d      	ldr	r5, [r3, #0]
 800c346:	4606      	mov	r6, r0
 800c348:	460c      	mov	r4, r1
 800c34a:	b125      	cbz	r5, 800c356 <__swsetup_r+0x16>
 800c34c:	69ab      	ldr	r3, [r5, #24]
 800c34e:	b913      	cbnz	r3, 800c356 <__swsetup_r+0x16>
 800c350:	4628      	mov	r0, r5
 800c352:	f000 fff9 	bl	800d348 <__sinit>
 800c356:	4b2e      	ldr	r3, [pc, #184]	; (800c410 <__swsetup_r+0xd0>)
 800c358:	429c      	cmp	r4, r3
 800c35a:	d10f      	bne.n	800c37c <__swsetup_r+0x3c>
 800c35c:	686c      	ldr	r4, [r5, #4]
 800c35e:	89a3      	ldrh	r3, [r4, #12]
 800c360:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c364:	0719      	lsls	r1, r3, #28
 800c366:	d42c      	bmi.n	800c3c2 <__swsetup_r+0x82>
 800c368:	06dd      	lsls	r5, r3, #27
 800c36a:	d411      	bmi.n	800c390 <__swsetup_r+0x50>
 800c36c:	2309      	movs	r3, #9
 800c36e:	6033      	str	r3, [r6, #0]
 800c370:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c374:	81a3      	strh	r3, [r4, #12]
 800c376:	f04f 30ff 	mov.w	r0, #4294967295
 800c37a:	e03e      	b.n	800c3fa <__swsetup_r+0xba>
 800c37c:	4b25      	ldr	r3, [pc, #148]	; (800c414 <__swsetup_r+0xd4>)
 800c37e:	429c      	cmp	r4, r3
 800c380:	d101      	bne.n	800c386 <__swsetup_r+0x46>
 800c382:	68ac      	ldr	r4, [r5, #8]
 800c384:	e7eb      	b.n	800c35e <__swsetup_r+0x1e>
 800c386:	4b24      	ldr	r3, [pc, #144]	; (800c418 <__swsetup_r+0xd8>)
 800c388:	429c      	cmp	r4, r3
 800c38a:	bf08      	it	eq
 800c38c:	68ec      	ldreq	r4, [r5, #12]
 800c38e:	e7e6      	b.n	800c35e <__swsetup_r+0x1e>
 800c390:	0758      	lsls	r0, r3, #29
 800c392:	d512      	bpl.n	800c3ba <__swsetup_r+0x7a>
 800c394:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c396:	b141      	cbz	r1, 800c3aa <__swsetup_r+0x6a>
 800c398:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c39c:	4299      	cmp	r1, r3
 800c39e:	d002      	beq.n	800c3a6 <__swsetup_r+0x66>
 800c3a0:	4630      	mov	r0, r6
 800c3a2:	f7ff f993 	bl	800b6cc <_free_r>
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	6363      	str	r3, [r4, #52]	; 0x34
 800c3aa:	89a3      	ldrh	r3, [r4, #12]
 800c3ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c3b0:	81a3      	strh	r3, [r4, #12]
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	6063      	str	r3, [r4, #4]
 800c3b6:	6923      	ldr	r3, [r4, #16]
 800c3b8:	6023      	str	r3, [r4, #0]
 800c3ba:	89a3      	ldrh	r3, [r4, #12]
 800c3bc:	f043 0308 	orr.w	r3, r3, #8
 800c3c0:	81a3      	strh	r3, [r4, #12]
 800c3c2:	6923      	ldr	r3, [r4, #16]
 800c3c4:	b94b      	cbnz	r3, 800c3da <__swsetup_r+0x9a>
 800c3c6:	89a3      	ldrh	r3, [r4, #12]
 800c3c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c3cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c3d0:	d003      	beq.n	800c3da <__swsetup_r+0x9a>
 800c3d2:	4621      	mov	r1, r4
 800c3d4:	4630      	mov	r0, r6
 800c3d6:	f001 f881 	bl	800d4dc <__smakebuf_r>
 800c3da:	89a0      	ldrh	r0, [r4, #12]
 800c3dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c3e0:	f010 0301 	ands.w	r3, r0, #1
 800c3e4:	d00a      	beq.n	800c3fc <__swsetup_r+0xbc>
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	60a3      	str	r3, [r4, #8]
 800c3ea:	6963      	ldr	r3, [r4, #20]
 800c3ec:	425b      	negs	r3, r3
 800c3ee:	61a3      	str	r3, [r4, #24]
 800c3f0:	6923      	ldr	r3, [r4, #16]
 800c3f2:	b943      	cbnz	r3, 800c406 <__swsetup_r+0xc6>
 800c3f4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c3f8:	d1ba      	bne.n	800c370 <__swsetup_r+0x30>
 800c3fa:	bd70      	pop	{r4, r5, r6, pc}
 800c3fc:	0781      	lsls	r1, r0, #30
 800c3fe:	bf58      	it	pl
 800c400:	6963      	ldrpl	r3, [r4, #20]
 800c402:	60a3      	str	r3, [r4, #8]
 800c404:	e7f4      	b.n	800c3f0 <__swsetup_r+0xb0>
 800c406:	2000      	movs	r0, #0
 800c408:	e7f7      	b.n	800c3fa <__swsetup_r+0xba>
 800c40a:	bf00      	nop
 800c40c:	20000014 	.word	0x20000014
 800c410:	0800e454 	.word	0x0800e454
 800c414:	0800e474 	.word	0x0800e474
 800c418:	0800e434 	.word	0x0800e434

0800c41c <quorem>:
 800c41c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c420:	6903      	ldr	r3, [r0, #16]
 800c422:	690c      	ldr	r4, [r1, #16]
 800c424:	42a3      	cmp	r3, r4
 800c426:	4607      	mov	r7, r0
 800c428:	f2c0 8081 	blt.w	800c52e <quorem+0x112>
 800c42c:	3c01      	subs	r4, #1
 800c42e:	f101 0814 	add.w	r8, r1, #20
 800c432:	f100 0514 	add.w	r5, r0, #20
 800c436:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c43a:	9301      	str	r3, [sp, #4]
 800c43c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c440:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c444:	3301      	adds	r3, #1
 800c446:	429a      	cmp	r2, r3
 800c448:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c44c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c450:	fbb2 f6f3 	udiv	r6, r2, r3
 800c454:	d331      	bcc.n	800c4ba <quorem+0x9e>
 800c456:	f04f 0e00 	mov.w	lr, #0
 800c45a:	4640      	mov	r0, r8
 800c45c:	46ac      	mov	ip, r5
 800c45e:	46f2      	mov	sl, lr
 800c460:	f850 2b04 	ldr.w	r2, [r0], #4
 800c464:	b293      	uxth	r3, r2
 800c466:	fb06 e303 	mla	r3, r6, r3, lr
 800c46a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c46e:	b29b      	uxth	r3, r3
 800c470:	ebaa 0303 	sub.w	r3, sl, r3
 800c474:	f8dc a000 	ldr.w	sl, [ip]
 800c478:	0c12      	lsrs	r2, r2, #16
 800c47a:	fa13 f38a 	uxtah	r3, r3, sl
 800c47e:	fb06 e202 	mla	r2, r6, r2, lr
 800c482:	9300      	str	r3, [sp, #0]
 800c484:	9b00      	ldr	r3, [sp, #0]
 800c486:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c48a:	b292      	uxth	r2, r2
 800c48c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c490:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c494:	f8bd 3000 	ldrh.w	r3, [sp]
 800c498:	4581      	cmp	r9, r0
 800c49a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c49e:	f84c 3b04 	str.w	r3, [ip], #4
 800c4a2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c4a6:	d2db      	bcs.n	800c460 <quorem+0x44>
 800c4a8:	f855 300b 	ldr.w	r3, [r5, fp]
 800c4ac:	b92b      	cbnz	r3, 800c4ba <quorem+0x9e>
 800c4ae:	9b01      	ldr	r3, [sp, #4]
 800c4b0:	3b04      	subs	r3, #4
 800c4b2:	429d      	cmp	r5, r3
 800c4b4:	461a      	mov	r2, r3
 800c4b6:	d32e      	bcc.n	800c516 <quorem+0xfa>
 800c4b8:	613c      	str	r4, [r7, #16]
 800c4ba:	4638      	mov	r0, r7
 800c4bc:	f001 faea 	bl	800da94 <__mcmp>
 800c4c0:	2800      	cmp	r0, #0
 800c4c2:	db24      	blt.n	800c50e <quorem+0xf2>
 800c4c4:	3601      	adds	r6, #1
 800c4c6:	4628      	mov	r0, r5
 800c4c8:	f04f 0c00 	mov.w	ip, #0
 800c4cc:	f858 2b04 	ldr.w	r2, [r8], #4
 800c4d0:	f8d0 e000 	ldr.w	lr, [r0]
 800c4d4:	b293      	uxth	r3, r2
 800c4d6:	ebac 0303 	sub.w	r3, ip, r3
 800c4da:	0c12      	lsrs	r2, r2, #16
 800c4dc:	fa13 f38e 	uxtah	r3, r3, lr
 800c4e0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c4e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c4e8:	b29b      	uxth	r3, r3
 800c4ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c4ee:	45c1      	cmp	r9, r8
 800c4f0:	f840 3b04 	str.w	r3, [r0], #4
 800c4f4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c4f8:	d2e8      	bcs.n	800c4cc <quorem+0xb0>
 800c4fa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c4fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c502:	b922      	cbnz	r2, 800c50e <quorem+0xf2>
 800c504:	3b04      	subs	r3, #4
 800c506:	429d      	cmp	r5, r3
 800c508:	461a      	mov	r2, r3
 800c50a:	d30a      	bcc.n	800c522 <quorem+0x106>
 800c50c:	613c      	str	r4, [r7, #16]
 800c50e:	4630      	mov	r0, r6
 800c510:	b003      	add	sp, #12
 800c512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c516:	6812      	ldr	r2, [r2, #0]
 800c518:	3b04      	subs	r3, #4
 800c51a:	2a00      	cmp	r2, #0
 800c51c:	d1cc      	bne.n	800c4b8 <quorem+0x9c>
 800c51e:	3c01      	subs	r4, #1
 800c520:	e7c7      	b.n	800c4b2 <quorem+0x96>
 800c522:	6812      	ldr	r2, [r2, #0]
 800c524:	3b04      	subs	r3, #4
 800c526:	2a00      	cmp	r2, #0
 800c528:	d1f0      	bne.n	800c50c <quorem+0xf0>
 800c52a:	3c01      	subs	r4, #1
 800c52c:	e7eb      	b.n	800c506 <quorem+0xea>
 800c52e:	2000      	movs	r0, #0
 800c530:	e7ee      	b.n	800c510 <quorem+0xf4>
 800c532:	0000      	movs	r0, r0
 800c534:	0000      	movs	r0, r0
	...

0800c538 <_dtoa_r>:
 800c538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c53c:	ed2d 8b04 	vpush	{d8-d9}
 800c540:	ec57 6b10 	vmov	r6, r7, d0
 800c544:	b093      	sub	sp, #76	; 0x4c
 800c546:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c548:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c54c:	9106      	str	r1, [sp, #24]
 800c54e:	ee10 aa10 	vmov	sl, s0
 800c552:	4604      	mov	r4, r0
 800c554:	9209      	str	r2, [sp, #36]	; 0x24
 800c556:	930c      	str	r3, [sp, #48]	; 0x30
 800c558:	46bb      	mov	fp, r7
 800c55a:	b975      	cbnz	r5, 800c57a <_dtoa_r+0x42>
 800c55c:	2010      	movs	r0, #16
 800c55e:	f7ff f8a5 	bl	800b6ac <malloc>
 800c562:	4602      	mov	r2, r0
 800c564:	6260      	str	r0, [r4, #36]	; 0x24
 800c566:	b920      	cbnz	r0, 800c572 <_dtoa_r+0x3a>
 800c568:	4ba7      	ldr	r3, [pc, #668]	; (800c808 <_dtoa_r+0x2d0>)
 800c56a:	21ea      	movs	r1, #234	; 0xea
 800c56c:	48a7      	ldr	r0, [pc, #668]	; (800c80c <_dtoa_r+0x2d4>)
 800c56e:	f001 fd59 	bl	800e024 <__assert_func>
 800c572:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c576:	6005      	str	r5, [r0, #0]
 800c578:	60c5      	str	r5, [r0, #12]
 800c57a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c57c:	6819      	ldr	r1, [r3, #0]
 800c57e:	b151      	cbz	r1, 800c596 <_dtoa_r+0x5e>
 800c580:	685a      	ldr	r2, [r3, #4]
 800c582:	604a      	str	r2, [r1, #4]
 800c584:	2301      	movs	r3, #1
 800c586:	4093      	lsls	r3, r2
 800c588:	608b      	str	r3, [r1, #8]
 800c58a:	4620      	mov	r0, r4
 800c58c:	f001 f840 	bl	800d610 <_Bfree>
 800c590:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c592:	2200      	movs	r2, #0
 800c594:	601a      	str	r2, [r3, #0]
 800c596:	1e3b      	subs	r3, r7, #0
 800c598:	bfaa      	itet	ge
 800c59a:	2300      	movge	r3, #0
 800c59c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800c5a0:	f8c8 3000 	strge.w	r3, [r8]
 800c5a4:	4b9a      	ldr	r3, [pc, #616]	; (800c810 <_dtoa_r+0x2d8>)
 800c5a6:	bfbc      	itt	lt
 800c5a8:	2201      	movlt	r2, #1
 800c5aa:	f8c8 2000 	strlt.w	r2, [r8]
 800c5ae:	ea33 030b 	bics.w	r3, r3, fp
 800c5b2:	d11b      	bne.n	800c5ec <_dtoa_r+0xb4>
 800c5b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c5b6:	f242 730f 	movw	r3, #9999	; 0x270f
 800c5ba:	6013      	str	r3, [r2, #0]
 800c5bc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c5c0:	4333      	orrs	r3, r6
 800c5c2:	f000 8592 	beq.w	800d0ea <_dtoa_r+0xbb2>
 800c5c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c5c8:	b963      	cbnz	r3, 800c5e4 <_dtoa_r+0xac>
 800c5ca:	4b92      	ldr	r3, [pc, #584]	; (800c814 <_dtoa_r+0x2dc>)
 800c5cc:	e022      	b.n	800c614 <_dtoa_r+0xdc>
 800c5ce:	4b92      	ldr	r3, [pc, #584]	; (800c818 <_dtoa_r+0x2e0>)
 800c5d0:	9301      	str	r3, [sp, #4]
 800c5d2:	3308      	adds	r3, #8
 800c5d4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c5d6:	6013      	str	r3, [r2, #0]
 800c5d8:	9801      	ldr	r0, [sp, #4]
 800c5da:	b013      	add	sp, #76	; 0x4c
 800c5dc:	ecbd 8b04 	vpop	{d8-d9}
 800c5e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5e4:	4b8b      	ldr	r3, [pc, #556]	; (800c814 <_dtoa_r+0x2dc>)
 800c5e6:	9301      	str	r3, [sp, #4]
 800c5e8:	3303      	adds	r3, #3
 800c5ea:	e7f3      	b.n	800c5d4 <_dtoa_r+0x9c>
 800c5ec:	2200      	movs	r2, #0
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	4650      	mov	r0, sl
 800c5f2:	4659      	mov	r1, fp
 800c5f4:	f7f4 fa80 	bl	8000af8 <__aeabi_dcmpeq>
 800c5f8:	ec4b ab19 	vmov	d9, sl, fp
 800c5fc:	4680      	mov	r8, r0
 800c5fe:	b158      	cbz	r0, 800c618 <_dtoa_r+0xe0>
 800c600:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c602:	2301      	movs	r3, #1
 800c604:	6013      	str	r3, [r2, #0]
 800c606:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c608:	2b00      	cmp	r3, #0
 800c60a:	f000 856b 	beq.w	800d0e4 <_dtoa_r+0xbac>
 800c60e:	4883      	ldr	r0, [pc, #524]	; (800c81c <_dtoa_r+0x2e4>)
 800c610:	6018      	str	r0, [r3, #0]
 800c612:	1e43      	subs	r3, r0, #1
 800c614:	9301      	str	r3, [sp, #4]
 800c616:	e7df      	b.n	800c5d8 <_dtoa_r+0xa0>
 800c618:	ec4b ab10 	vmov	d0, sl, fp
 800c61c:	aa10      	add	r2, sp, #64	; 0x40
 800c61e:	a911      	add	r1, sp, #68	; 0x44
 800c620:	4620      	mov	r0, r4
 800c622:	f001 fadd 	bl	800dbe0 <__d2b>
 800c626:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800c62a:	ee08 0a10 	vmov	s16, r0
 800c62e:	2d00      	cmp	r5, #0
 800c630:	f000 8084 	beq.w	800c73c <_dtoa_r+0x204>
 800c634:	ee19 3a90 	vmov	r3, s19
 800c638:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c63c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800c640:	4656      	mov	r6, sl
 800c642:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800c646:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c64a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800c64e:	4b74      	ldr	r3, [pc, #464]	; (800c820 <_dtoa_r+0x2e8>)
 800c650:	2200      	movs	r2, #0
 800c652:	4630      	mov	r0, r6
 800c654:	4639      	mov	r1, r7
 800c656:	f7f3 fe2f 	bl	80002b8 <__aeabi_dsub>
 800c65a:	a365      	add	r3, pc, #404	; (adr r3, 800c7f0 <_dtoa_r+0x2b8>)
 800c65c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c660:	f7f3 ffe2 	bl	8000628 <__aeabi_dmul>
 800c664:	a364      	add	r3, pc, #400	; (adr r3, 800c7f8 <_dtoa_r+0x2c0>)
 800c666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c66a:	f7f3 fe27 	bl	80002bc <__adddf3>
 800c66e:	4606      	mov	r6, r0
 800c670:	4628      	mov	r0, r5
 800c672:	460f      	mov	r7, r1
 800c674:	f7f3 ff6e 	bl	8000554 <__aeabi_i2d>
 800c678:	a361      	add	r3, pc, #388	; (adr r3, 800c800 <_dtoa_r+0x2c8>)
 800c67a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c67e:	f7f3 ffd3 	bl	8000628 <__aeabi_dmul>
 800c682:	4602      	mov	r2, r0
 800c684:	460b      	mov	r3, r1
 800c686:	4630      	mov	r0, r6
 800c688:	4639      	mov	r1, r7
 800c68a:	f7f3 fe17 	bl	80002bc <__adddf3>
 800c68e:	4606      	mov	r6, r0
 800c690:	460f      	mov	r7, r1
 800c692:	f7f4 fa79 	bl	8000b88 <__aeabi_d2iz>
 800c696:	2200      	movs	r2, #0
 800c698:	9000      	str	r0, [sp, #0]
 800c69a:	2300      	movs	r3, #0
 800c69c:	4630      	mov	r0, r6
 800c69e:	4639      	mov	r1, r7
 800c6a0:	f7f4 fa34 	bl	8000b0c <__aeabi_dcmplt>
 800c6a4:	b150      	cbz	r0, 800c6bc <_dtoa_r+0x184>
 800c6a6:	9800      	ldr	r0, [sp, #0]
 800c6a8:	f7f3 ff54 	bl	8000554 <__aeabi_i2d>
 800c6ac:	4632      	mov	r2, r6
 800c6ae:	463b      	mov	r3, r7
 800c6b0:	f7f4 fa22 	bl	8000af8 <__aeabi_dcmpeq>
 800c6b4:	b910      	cbnz	r0, 800c6bc <_dtoa_r+0x184>
 800c6b6:	9b00      	ldr	r3, [sp, #0]
 800c6b8:	3b01      	subs	r3, #1
 800c6ba:	9300      	str	r3, [sp, #0]
 800c6bc:	9b00      	ldr	r3, [sp, #0]
 800c6be:	2b16      	cmp	r3, #22
 800c6c0:	d85a      	bhi.n	800c778 <_dtoa_r+0x240>
 800c6c2:	9a00      	ldr	r2, [sp, #0]
 800c6c4:	4b57      	ldr	r3, [pc, #348]	; (800c824 <_dtoa_r+0x2ec>)
 800c6c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c6ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6ce:	ec51 0b19 	vmov	r0, r1, d9
 800c6d2:	f7f4 fa1b 	bl	8000b0c <__aeabi_dcmplt>
 800c6d6:	2800      	cmp	r0, #0
 800c6d8:	d050      	beq.n	800c77c <_dtoa_r+0x244>
 800c6da:	9b00      	ldr	r3, [sp, #0]
 800c6dc:	3b01      	subs	r3, #1
 800c6de:	9300      	str	r3, [sp, #0]
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	930b      	str	r3, [sp, #44]	; 0x2c
 800c6e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c6e6:	1b5d      	subs	r5, r3, r5
 800c6e8:	1e6b      	subs	r3, r5, #1
 800c6ea:	9305      	str	r3, [sp, #20]
 800c6ec:	bf45      	ittet	mi
 800c6ee:	f1c5 0301 	rsbmi	r3, r5, #1
 800c6f2:	9304      	strmi	r3, [sp, #16]
 800c6f4:	2300      	movpl	r3, #0
 800c6f6:	2300      	movmi	r3, #0
 800c6f8:	bf4c      	ite	mi
 800c6fa:	9305      	strmi	r3, [sp, #20]
 800c6fc:	9304      	strpl	r3, [sp, #16]
 800c6fe:	9b00      	ldr	r3, [sp, #0]
 800c700:	2b00      	cmp	r3, #0
 800c702:	db3d      	blt.n	800c780 <_dtoa_r+0x248>
 800c704:	9b05      	ldr	r3, [sp, #20]
 800c706:	9a00      	ldr	r2, [sp, #0]
 800c708:	920a      	str	r2, [sp, #40]	; 0x28
 800c70a:	4413      	add	r3, r2
 800c70c:	9305      	str	r3, [sp, #20]
 800c70e:	2300      	movs	r3, #0
 800c710:	9307      	str	r3, [sp, #28]
 800c712:	9b06      	ldr	r3, [sp, #24]
 800c714:	2b09      	cmp	r3, #9
 800c716:	f200 8089 	bhi.w	800c82c <_dtoa_r+0x2f4>
 800c71a:	2b05      	cmp	r3, #5
 800c71c:	bfc4      	itt	gt
 800c71e:	3b04      	subgt	r3, #4
 800c720:	9306      	strgt	r3, [sp, #24]
 800c722:	9b06      	ldr	r3, [sp, #24]
 800c724:	f1a3 0302 	sub.w	r3, r3, #2
 800c728:	bfcc      	ite	gt
 800c72a:	2500      	movgt	r5, #0
 800c72c:	2501      	movle	r5, #1
 800c72e:	2b03      	cmp	r3, #3
 800c730:	f200 8087 	bhi.w	800c842 <_dtoa_r+0x30a>
 800c734:	e8df f003 	tbb	[pc, r3]
 800c738:	59383a2d 	.word	0x59383a2d
 800c73c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c740:	441d      	add	r5, r3
 800c742:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c746:	2b20      	cmp	r3, #32
 800c748:	bfc1      	itttt	gt
 800c74a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c74e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c752:	fa0b f303 	lslgt.w	r3, fp, r3
 800c756:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c75a:	bfda      	itte	le
 800c75c:	f1c3 0320 	rsble	r3, r3, #32
 800c760:	fa06 f003 	lslle.w	r0, r6, r3
 800c764:	4318      	orrgt	r0, r3
 800c766:	f7f3 fee5 	bl	8000534 <__aeabi_ui2d>
 800c76a:	2301      	movs	r3, #1
 800c76c:	4606      	mov	r6, r0
 800c76e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c772:	3d01      	subs	r5, #1
 800c774:	930e      	str	r3, [sp, #56]	; 0x38
 800c776:	e76a      	b.n	800c64e <_dtoa_r+0x116>
 800c778:	2301      	movs	r3, #1
 800c77a:	e7b2      	b.n	800c6e2 <_dtoa_r+0x1aa>
 800c77c:	900b      	str	r0, [sp, #44]	; 0x2c
 800c77e:	e7b1      	b.n	800c6e4 <_dtoa_r+0x1ac>
 800c780:	9b04      	ldr	r3, [sp, #16]
 800c782:	9a00      	ldr	r2, [sp, #0]
 800c784:	1a9b      	subs	r3, r3, r2
 800c786:	9304      	str	r3, [sp, #16]
 800c788:	4253      	negs	r3, r2
 800c78a:	9307      	str	r3, [sp, #28]
 800c78c:	2300      	movs	r3, #0
 800c78e:	930a      	str	r3, [sp, #40]	; 0x28
 800c790:	e7bf      	b.n	800c712 <_dtoa_r+0x1da>
 800c792:	2300      	movs	r3, #0
 800c794:	9308      	str	r3, [sp, #32]
 800c796:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c798:	2b00      	cmp	r3, #0
 800c79a:	dc55      	bgt.n	800c848 <_dtoa_r+0x310>
 800c79c:	2301      	movs	r3, #1
 800c79e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c7a2:	461a      	mov	r2, r3
 800c7a4:	9209      	str	r2, [sp, #36]	; 0x24
 800c7a6:	e00c      	b.n	800c7c2 <_dtoa_r+0x28a>
 800c7a8:	2301      	movs	r3, #1
 800c7aa:	e7f3      	b.n	800c794 <_dtoa_r+0x25c>
 800c7ac:	2300      	movs	r3, #0
 800c7ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c7b0:	9308      	str	r3, [sp, #32]
 800c7b2:	9b00      	ldr	r3, [sp, #0]
 800c7b4:	4413      	add	r3, r2
 800c7b6:	9302      	str	r3, [sp, #8]
 800c7b8:	3301      	adds	r3, #1
 800c7ba:	2b01      	cmp	r3, #1
 800c7bc:	9303      	str	r3, [sp, #12]
 800c7be:	bfb8      	it	lt
 800c7c0:	2301      	movlt	r3, #1
 800c7c2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c7c4:	2200      	movs	r2, #0
 800c7c6:	6042      	str	r2, [r0, #4]
 800c7c8:	2204      	movs	r2, #4
 800c7ca:	f102 0614 	add.w	r6, r2, #20
 800c7ce:	429e      	cmp	r6, r3
 800c7d0:	6841      	ldr	r1, [r0, #4]
 800c7d2:	d93d      	bls.n	800c850 <_dtoa_r+0x318>
 800c7d4:	4620      	mov	r0, r4
 800c7d6:	f000 fedb 	bl	800d590 <_Balloc>
 800c7da:	9001      	str	r0, [sp, #4]
 800c7dc:	2800      	cmp	r0, #0
 800c7de:	d13b      	bne.n	800c858 <_dtoa_r+0x320>
 800c7e0:	4b11      	ldr	r3, [pc, #68]	; (800c828 <_dtoa_r+0x2f0>)
 800c7e2:	4602      	mov	r2, r0
 800c7e4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c7e8:	e6c0      	b.n	800c56c <_dtoa_r+0x34>
 800c7ea:	2301      	movs	r3, #1
 800c7ec:	e7df      	b.n	800c7ae <_dtoa_r+0x276>
 800c7ee:	bf00      	nop
 800c7f0:	636f4361 	.word	0x636f4361
 800c7f4:	3fd287a7 	.word	0x3fd287a7
 800c7f8:	8b60c8b3 	.word	0x8b60c8b3
 800c7fc:	3fc68a28 	.word	0x3fc68a28
 800c800:	509f79fb 	.word	0x509f79fb
 800c804:	3fd34413 	.word	0x3fd34413
 800c808:	0800e3b1 	.word	0x0800e3b1
 800c80c:	0800e3c8 	.word	0x0800e3c8
 800c810:	7ff00000 	.word	0x7ff00000
 800c814:	0800e3ad 	.word	0x0800e3ad
 800c818:	0800e3a4 	.word	0x0800e3a4
 800c81c:	0800e381 	.word	0x0800e381
 800c820:	3ff80000 	.word	0x3ff80000
 800c824:	0800e518 	.word	0x0800e518
 800c828:	0800e423 	.word	0x0800e423
 800c82c:	2501      	movs	r5, #1
 800c82e:	2300      	movs	r3, #0
 800c830:	9306      	str	r3, [sp, #24]
 800c832:	9508      	str	r5, [sp, #32]
 800c834:	f04f 33ff 	mov.w	r3, #4294967295
 800c838:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c83c:	2200      	movs	r2, #0
 800c83e:	2312      	movs	r3, #18
 800c840:	e7b0      	b.n	800c7a4 <_dtoa_r+0x26c>
 800c842:	2301      	movs	r3, #1
 800c844:	9308      	str	r3, [sp, #32]
 800c846:	e7f5      	b.n	800c834 <_dtoa_r+0x2fc>
 800c848:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c84a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c84e:	e7b8      	b.n	800c7c2 <_dtoa_r+0x28a>
 800c850:	3101      	adds	r1, #1
 800c852:	6041      	str	r1, [r0, #4]
 800c854:	0052      	lsls	r2, r2, #1
 800c856:	e7b8      	b.n	800c7ca <_dtoa_r+0x292>
 800c858:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c85a:	9a01      	ldr	r2, [sp, #4]
 800c85c:	601a      	str	r2, [r3, #0]
 800c85e:	9b03      	ldr	r3, [sp, #12]
 800c860:	2b0e      	cmp	r3, #14
 800c862:	f200 809d 	bhi.w	800c9a0 <_dtoa_r+0x468>
 800c866:	2d00      	cmp	r5, #0
 800c868:	f000 809a 	beq.w	800c9a0 <_dtoa_r+0x468>
 800c86c:	9b00      	ldr	r3, [sp, #0]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	dd32      	ble.n	800c8d8 <_dtoa_r+0x3a0>
 800c872:	4ab7      	ldr	r2, [pc, #732]	; (800cb50 <_dtoa_r+0x618>)
 800c874:	f003 030f 	and.w	r3, r3, #15
 800c878:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c87c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c880:	9b00      	ldr	r3, [sp, #0]
 800c882:	05d8      	lsls	r0, r3, #23
 800c884:	ea4f 1723 	mov.w	r7, r3, asr #4
 800c888:	d516      	bpl.n	800c8b8 <_dtoa_r+0x380>
 800c88a:	4bb2      	ldr	r3, [pc, #712]	; (800cb54 <_dtoa_r+0x61c>)
 800c88c:	ec51 0b19 	vmov	r0, r1, d9
 800c890:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c894:	f7f3 fff2 	bl	800087c <__aeabi_ddiv>
 800c898:	f007 070f 	and.w	r7, r7, #15
 800c89c:	4682      	mov	sl, r0
 800c89e:	468b      	mov	fp, r1
 800c8a0:	2503      	movs	r5, #3
 800c8a2:	4eac      	ldr	r6, [pc, #688]	; (800cb54 <_dtoa_r+0x61c>)
 800c8a4:	b957      	cbnz	r7, 800c8bc <_dtoa_r+0x384>
 800c8a6:	4642      	mov	r2, r8
 800c8a8:	464b      	mov	r3, r9
 800c8aa:	4650      	mov	r0, sl
 800c8ac:	4659      	mov	r1, fp
 800c8ae:	f7f3 ffe5 	bl	800087c <__aeabi_ddiv>
 800c8b2:	4682      	mov	sl, r0
 800c8b4:	468b      	mov	fp, r1
 800c8b6:	e028      	b.n	800c90a <_dtoa_r+0x3d2>
 800c8b8:	2502      	movs	r5, #2
 800c8ba:	e7f2      	b.n	800c8a2 <_dtoa_r+0x36a>
 800c8bc:	07f9      	lsls	r1, r7, #31
 800c8be:	d508      	bpl.n	800c8d2 <_dtoa_r+0x39a>
 800c8c0:	4640      	mov	r0, r8
 800c8c2:	4649      	mov	r1, r9
 800c8c4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c8c8:	f7f3 feae 	bl	8000628 <__aeabi_dmul>
 800c8cc:	3501      	adds	r5, #1
 800c8ce:	4680      	mov	r8, r0
 800c8d0:	4689      	mov	r9, r1
 800c8d2:	107f      	asrs	r7, r7, #1
 800c8d4:	3608      	adds	r6, #8
 800c8d6:	e7e5      	b.n	800c8a4 <_dtoa_r+0x36c>
 800c8d8:	f000 809b 	beq.w	800ca12 <_dtoa_r+0x4da>
 800c8dc:	9b00      	ldr	r3, [sp, #0]
 800c8de:	4f9d      	ldr	r7, [pc, #628]	; (800cb54 <_dtoa_r+0x61c>)
 800c8e0:	425e      	negs	r6, r3
 800c8e2:	4b9b      	ldr	r3, [pc, #620]	; (800cb50 <_dtoa_r+0x618>)
 800c8e4:	f006 020f 	and.w	r2, r6, #15
 800c8e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c8ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8f0:	ec51 0b19 	vmov	r0, r1, d9
 800c8f4:	f7f3 fe98 	bl	8000628 <__aeabi_dmul>
 800c8f8:	1136      	asrs	r6, r6, #4
 800c8fa:	4682      	mov	sl, r0
 800c8fc:	468b      	mov	fp, r1
 800c8fe:	2300      	movs	r3, #0
 800c900:	2502      	movs	r5, #2
 800c902:	2e00      	cmp	r6, #0
 800c904:	d17a      	bne.n	800c9fc <_dtoa_r+0x4c4>
 800c906:	2b00      	cmp	r3, #0
 800c908:	d1d3      	bne.n	800c8b2 <_dtoa_r+0x37a>
 800c90a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	f000 8082 	beq.w	800ca16 <_dtoa_r+0x4de>
 800c912:	4b91      	ldr	r3, [pc, #580]	; (800cb58 <_dtoa_r+0x620>)
 800c914:	2200      	movs	r2, #0
 800c916:	4650      	mov	r0, sl
 800c918:	4659      	mov	r1, fp
 800c91a:	f7f4 f8f7 	bl	8000b0c <__aeabi_dcmplt>
 800c91e:	2800      	cmp	r0, #0
 800c920:	d079      	beq.n	800ca16 <_dtoa_r+0x4de>
 800c922:	9b03      	ldr	r3, [sp, #12]
 800c924:	2b00      	cmp	r3, #0
 800c926:	d076      	beq.n	800ca16 <_dtoa_r+0x4de>
 800c928:	9b02      	ldr	r3, [sp, #8]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	dd36      	ble.n	800c99c <_dtoa_r+0x464>
 800c92e:	9b00      	ldr	r3, [sp, #0]
 800c930:	4650      	mov	r0, sl
 800c932:	4659      	mov	r1, fp
 800c934:	1e5f      	subs	r7, r3, #1
 800c936:	2200      	movs	r2, #0
 800c938:	4b88      	ldr	r3, [pc, #544]	; (800cb5c <_dtoa_r+0x624>)
 800c93a:	f7f3 fe75 	bl	8000628 <__aeabi_dmul>
 800c93e:	9e02      	ldr	r6, [sp, #8]
 800c940:	4682      	mov	sl, r0
 800c942:	468b      	mov	fp, r1
 800c944:	3501      	adds	r5, #1
 800c946:	4628      	mov	r0, r5
 800c948:	f7f3 fe04 	bl	8000554 <__aeabi_i2d>
 800c94c:	4652      	mov	r2, sl
 800c94e:	465b      	mov	r3, fp
 800c950:	f7f3 fe6a 	bl	8000628 <__aeabi_dmul>
 800c954:	4b82      	ldr	r3, [pc, #520]	; (800cb60 <_dtoa_r+0x628>)
 800c956:	2200      	movs	r2, #0
 800c958:	f7f3 fcb0 	bl	80002bc <__adddf3>
 800c95c:	46d0      	mov	r8, sl
 800c95e:	46d9      	mov	r9, fp
 800c960:	4682      	mov	sl, r0
 800c962:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800c966:	2e00      	cmp	r6, #0
 800c968:	d158      	bne.n	800ca1c <_dtoa_r+0x4e4>
 800c96a:	4b7e      	ldr	r3, [pc, #504]	; (800cb64 <_dtoa_r+0x62c>)
 800c96c:	2200      	movs	r2, #0
 800c96e:	4640      	mov	r0, r8
 800c970:	4649      	mov	r1, r9
 800c972:	f7f3 fca1 	bl	80002b8 <__aeabi_dsub>
 800c976:	4652      	mov	r2, sl
 800c978:	465b      	mov	r3, fp
 800c97a:	4680      	mov	r8, r0
 800c97c:	4689      	mov	r9, r1
 800c97e:	f7f4 f8e3 	bl	8000b48 <__aeabi_dcmpgt>
 800c982:	2800      	cmp	r0, #0
 800c984:	f040 8295 	bne.w	800ceb2 <_dtoa_r+0x97a>
 800c988:	4652      	mov	r2, sl
 800c98a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c98e:	4640      	mov	r0, r8
 800c990:	4649      	mov	r1, r9
 800c992:	f7f4 f8bb 	bl	8000b0c <__aeabi_dcmplt>
 800c996:	2800      	cmp	r0, #0
 800c998:	f040 8289 	bne.w	800ceae <_dtoa_r+0x976>
 800c99c:	ec5b ab19 	vmov	sl, fp, d9
 800c9a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	f2c0 8148 	blt.w	800cc38 <_dtoa_r+0x700>
 800c9a8:	9a00      	ldr	r2, [sp, #0]
 800c9aa:	2a0e      	cmp	r2, #14
 800c9ac:	f300 8144 	bgt.w	800cc38 <_dtoa_r+0x700>
 800c9b0:	4b67      	ldr	r3, [pc, #412]	; (800cb50 <_dtoa_r+0x618>)
 800c9b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c9b6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c9ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	f280 80d5 	bge.w	800cb6c <_dtoa_r+0x634>
 800c9c2:	9b03      	ldr	r3, [sp, #12]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	f300 80d1 	bgt.w	800cb6c <_dtoa_r+0x634>
 800c9ca:	f040 826f 	bne.w	800ceac <_dtoa_r+0x974>
 800c9ce:	4b65      	ldr	r3, [pc, #404]	; (800cb64 <_dtoa_r+0x62c>)
 800c9d0:	2200      	movs	r2, #0
 800c9d2:	4640      	mov	r0, r8
 800c9d4:	4649      	mov	r1, r9
 800c9d6:	f7f3 fe27 	bl	8000628 <__aeabi_dmul>
 800c9da:	4652      	mov	r2, sl
 800c9dc:	465b      	mov	r3, fp
 800c9de:	f7f4 f8a9 	bl	8000b34 <__aeabi_dcmpge>
 800c9e2:	9e03      	ldr	r6, [sp, #12]
 800c9e4:	4637      	mov	r7, r6
 800c9e6:	2800      	cmp	r0, #0
 800c9e8:	f040 8245 	bne.w	800ce76 <_dtoa_r+0x93e>
 800c9ec:	9d01      	ldr	r5, [sp, #4]
 800c9ee:	2331      	movs	r3, #49	; 0x31
 800c9f0:	f805 3b01 	strb.w	r3, [r5], #1
 800c9f4:	9b00      	ldr	r3, [sp, #0]
 800c9f6:	3301      	adds	r3, #1
 800c9f8:	9300      	str	r3, [sp, #0]
 800c9fa:	e240      	b.n	800ce7e <_dtoa_r+0x946>
 800c9fc:	07f2      	lsls	r2, r6, #31
 800c9fe:	d505      	bpl.n	800ca0c <_dtoa_r+0x4d4>
 800ca00:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca04:	f7f3 fe10 	bl	8000628 <__aeabi_dmul>
 800ca08:	3501      	adds	r5, #1
 800ca0a:	2301      	movs	r3, #1
 800ca0c:	1076      	asrs	r6, r6, #1
 800ca0e:	3708      	adds	r7, #8
 800ca10:	e777      	b.n	800c902 <_dtoa_r+0x3ca>
 800ca12:	2502      	movs	r5, #2
 800ca14:	e779      	b.n	800c90a <_dtoa_r+0x3d2>
 800ca16:	9f00      	ldr	r7, [sp, #0]
 800ca18:	9e03      	ldr	r6, [sp, #12]
 800ca1a:	e794      	b.n	800c946 <_dtoa_r+0x40e>
 800ca1c:	9901      	ldr	r1, [sp, #4]
 800ca1e:	4b4c      	ldr	r3, [pc, #304]	; (800cb50 <_dtoa_r+0x618>)
 800ca20:	4431      	add	r1, r6
 800ca22:	910d      	str	r1, [sp, #52]	; 0x34
 800ca24:	9908      	ldr	r1, [sp, #32]
 800ca26:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ca2a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ca2e:	2900      	cmp	r1, #0
 800ca30:	d043      	beq.n	800caba <_dtoa_r+0x582>
 800ca32:	494d      	ldr	r1, [pc, #308]	; (800cb68 <_dtoa_r+0x630>)
 800ca34:	2000      	movs	r0, #0
 800ca36:	f7f3 ff21 	bl	800087c <__aeabi_ddiv>
 800ca3a:	4652      	mov	r2, sl
 800ca3c:	465b      	mov	r3, fp
 800ca3e:	f7f3 fc3b 	bl	80002b8 <__aeabi_dsub>
 800ca42:	9d01      	ldr	r5, [sp, #4]
 800ca44:	4682      	mov	sl, r0
 800ca46:	468b      	mov	fp, r1
 800ca48:	4649      	mov	r1, r9
 800ca4a:	4640      	mov	r0, r8
 800ca4c:	f7f4 f89c 	bl	8000b88 <__aeabi_d2iz>
 800ca50:	4606      	mov	r6, r0
 800ca52:	f7f3 fd7f 	bl	8000554 <__aeabi_i2d>
 800ca56:	4602      	mov	r2, r0
 800ca58:	460b      	mov	r3, r1
 800ca5a:	4640      	mov	r0, r8
 800ca5c:	4649      	mov	r1, r9
 800ca5e:	f7f3 fc2b 	bl	80002b8 <__aeabi_dsub>
 800ca62:	3630      	adds	r6, #48	; 0x30
 800ca64:	f805 6b01 	strb.w	r6, [r5], #1
 800ca68:	4652      	mov	r2, sl
 800ca6a:	465b      	mov	r3, fp
 800ca6c:	4680      	mov	r8, r0
 800ca6e:	4689      	mov	r9, r1
 800ca70:	f7f4 f84c 	bl	8000b0c <__aeabi_dcmplt>
 800ca74:	2800      	cmp	r0, #0
 800ca76:	d163      	bne.n	800cb40 <_dtoa_r+0x608>
 800ca78:	4642      	mov	r2, r8
 800ca7a:	464b      	mov	r3, r9
 800ca7c:	4936      	ldr	r1, [pc, #216]	; (800cb58 <_dtoa_r+0x620>)
 800ca7e:	2000      	movs	r0, #0
 800ca80:	f7f3 fc1a 	bl	80002b8 <__aeabi_dsub>
 800ca84:	4652      	mov	r2, sl
 800ca86:	465b      	mov	r3, fp
 800ca88:	f7f4 f840 	bl	8000b0c <__aeabi_dcmplt>
 800ca8c:	2800      	cmp	r0, #0
 800ca8e:	f040 80b5 	bne.w	800cbfc <_dtoa_r+0x6c4>
 800ca92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ca94:	429d      	cmp	r5, r3
 800ca96:	d081      	beq.n	800c99c <_dtoa_r+0x464>
 800ca98:	4b30      	ldr	r3, [pc, #192]	; (800cb5c <_dtoa_r+0x624>)
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	4650      	mov	r0, sl
 800ca9e:	4659      	mov	r1, fp
 800caa0:	f7f3 fdc2 	bl	8000628 <__aeabi_dmul>
 800caa4:	4b2d      	ldr	r3, [pc, #180]	; (800cb5c <_dtoa_r+0x624>)
 800caa6:	4682      	mov	sl, r0
 800caa8:	468b      	mov	fp, r1
 800caaa:	4640      	mov	r0, r8
 800caac:	4649      	mov	r1, r9
 800caae:	2200      	movs	r2, #0
 800cab0:	f7f3 fdba 	bl	8000628 <__aeabi_dmul>
 800cab4:	4680      	mov	r8, r0
 800cab6:	4689      	mov	r9, r1
 800cab8:	e7c6      	b.n	800ca48 <_dtoa_r+0x510>
 800caba:	4650      	mov	r0, sl
 800cabc:	4659      	mov	r1, fp
 800cabe:	f7f3 fdb3 	bl	8000628 <__aeabi_dmul>
 800cac2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cac4:	9d01      	ldr	r5, [sp, #4]
 800cac6:	930f      	str	r3, [sp, #60]	; 0x3c
 800cac8:	4682      	mov	sl, r0
 800caca:	468b      	mov	fp, r1
 800cacc:	4649      	mov	r1, r9
 800cace:	4640      	mov	r0, r8
 800cad0:	f7f4 f85a 	bl	8000b88 <__aeabi_d2iz>
 800cad4:	4606      	mov	r6, r0
 800cad6:	f7f3 fd3d 	bl	8000554 <__aeabi_i2d>
 800cada:	3630      	adds	r6, #48	; 0x30
 800cadc:	4602      	mov	r2, r0
 800cade:	460b      	mov	r3, r1
 800cae0:	4640      	mov	r0, r8
 800cae2:	4649      	mov	r1, r9
 800cae4:	f7f3 fbe8 	bl	80002b8 <__aeabi_dsub>
 800cae8:	f805 6b01 	strb.w	r6, [r5], #1
 800caec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800caee:	429d      	cmp	r5, r3
 800caf0:	4680      	mov	r8, r0
 800caf2:	4689      	mov	r9, r1
 800caf4:	f04f 0200 	mov.w	r2, #0
 800caf8:	d124      	bne.n	800cb44 <_dtoa_r+0x60c>
 800cafa:	4b1b      	ldr	r3, [pc, #108]	; (800cb68 <_dtoa_r+0x630>)
 800cafc:	4650      	mov	r0, sl
 800cafe:	4659      	mov	r1, fp
 800cb00:	f7f3 fbdc 	bl	80002bc <__adddf3>
 800cb04:	4602      	mov	r2, r0
 800cb06:	460b      	mov	r3, r1
 800cb08:	4640      	mov	r0, r8
 800cb0a:	4649      	mov	r1, r9
 800cb0c:	f7f4 f81c 	bl	8000b48 <__aeabi_dcmpgt>
 800cb10:	2800      	cmp	r0, #0
 800cb12:	d173      	bne.n	800cbfc <_dtoa_r+0x6c4>
 800cb14:	4652      	mov	r2, sl
 800cb16:	465b      	mov	r3, fp
 800cb18:	4913      	ldr	r1, [pc, #76]	; (800cb68 <_dtoa_r+0x630>)
 800cb1a:	2000      	movs	r0, #0
 800cb1c:	f7f3 fbcc 	bl	80002b8 <__aeabi_dsub>
 800cb20:	4602      	mov	r2, r0
 800cb22:	460b      	mov	r3, r1
 800cb24:	4640      	mov	r0, r8
 800cb26:	4649      	mov	r1, r9
 800cb28:	f7f3 fff0 	bl	8000b0c <__aeabi_dcmplt>
 800cb2c:	2800      	cmp	r0, #0
 800cb2e:	f43f af35 	beq.w	800c99c <_dtoa_r+0x464>
 800cb32:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800cb34:	1e6b      	subs	r3, r5, #1
 800cb36:	930f      	str	r3, [sp, #60]	; 0x3c
 800cb38:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cb3c:	2b30      	cmp	r3, #48	; 0x30
 800cb3e:	d0f8      	beq.n	800cb32 <_dtoa_r+0x5fa>
 800cb40:	9700      	str	r7, [sp, #0]
 800cb42:	e049      	b.n	800cbd8 <_dtoa_r+0x6a0>
 800cb44:	4b05      	ldr	r3, [pc, #20]	; (800cb5c <_dtoa_r+0x624>)
 800cb46:	f7f3 fd6f 	bl	8000628 <__aeabi_dmul>
 800cb4a:	4680      	mov	r8, r0
 800cb4c:	4689      	mov	r9, r1
 800cb4e:	e7bd      	b.n	800cacc <_dtoa_r+0x594>
 800cb50:	0800e518 	.word	0x0800e518
 800cb54:	0800e4f0 	.word	0x0800e4f0
 800cb58:	3ff00000 	.word	0x3ff00000
 800cb5c:	40240000 	.word	0x40240000
 800cb60:	401c0000 	.word	0x401c0000
 800cb64:	40140000 	.word	0x40140000
 800cb68:	3fe00000 	.word	0x3fe00000
 800cb6c:	9d01      	ldr	r5, [sp, #4]
 800cb6e:	4656      	mov	r6, sl
 800cb70:	465f      	mov	r7, fp
 800cb72:	4642      	mov	r2, r8
 800cb74:	464b      	mov	r3, r9
 800cb76:	4630      	mov	r0, r6
 800cb78:	4639      	mov	r1, r7
 800cb7a:	f7f3 fe7f 	bl	800087c <__aeabi_ddiv>
 800cb7e:	f7f4 f803 	bl	8000b88 <__aeabi_d2iz>
 800cb82:	4682      	mov	sl, r0
 800cb84:	f7f3 fce6 	bl	8000554 <__aeabi_i2d>
 800cb88:	4642      	mov	r2, r8
 800cb8a:	464b      	mov	r3, r9
 800cb8c:	f7f3 fd4c 	bl	8000628 <__aeabi_dmul>
 800cb90:	4602      	mov	r2, r0
 800cb92:	460b      	mov	r3, r1
 800cb94:	4630      	mov	r0, r6
 800cb96:	4639      	mov	r1, r7
 800cb98:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800cb9c:	f7f3 fb8c 	bl	80002b8 <__aeabi_dsub>
 800cba0:	f805 6b01 	strb.w	r6, [r5], #1
 800cba4:	9e01      	ldr	r6, [sp, #4]
 800cba6:	9f03      	ldr	r7, [sp, #12]
 800cba8:	1bae      	subs	r6, r5, r6
 800cbaa:	42b7      	cmp	r7, r6
 800cbac:	4602      	mov	r2, r0
 800cbae:	460b      	mov	r3, r1
 800cbb0:	d135      	bne.n	800cc1e <_dtoa_r+0x6e6>
 800cbb2:	f7f3 fb83 	bl	80002bc <__adddf3>
 800cbb6:	4642      	mov	r2, r8
 800cbb8:	464b      	mov	r3, r9
 800cbba:	4606      	mov	r6, r0
 800cbbc:	460f      	mov	r7, r1
 800cbbe:	f7f3 ffc3 	bl	8000b48 <__aeabi_dcmpgt>
 800cbc2:	b9d0      	cbnz	r0, 800cbfa <_dtoa_r+0x6c2>
 800cbc4:	4642      	mov	r2, r8
 800cbc6:	464b      	mov	r3, r9
 800cbc8:	4630      	mov	r0, r6
 800cbca:	4639      	mov	r1, r7
 800cbcc:	f7f3 ff94 	bl	8000af8 <__aeabi_dcmpeq>
 800cbd0:	b110      	cbz	r0, 800cbd8 <_dtoa_r+0x6a0>
 800cbd2:	f01a 0f01 	tst.w	sl, #1
 800cbd6:	d110      	bne.n	800cbfa <_dtoa_r+0x6c2>
 800cbd8:	4620      	mov	r0, r4
 800cbda:	ee18 1a10 	vmov	r1, s16
 800cbde:	f000 fd17 	bl	800d610 <_Bfree>
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	9800      	ldr	r0, [sp, #0]
 800cbe6:	702b      	strb	r3, [r5, #0]
 800cbe8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cbea:	3001      	adds	r0, #1
 800cbec:	6018      	str	r0, [r3, #0]
 800cbee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	f43f acf1 	beq.w	800c5d8 <_dtoa_r+0xa0>
 800cbf6:	601d      	str	r5, [r3, #0]
 800cbf8:	e4ee      	b.n	800c5d8 <_dtoa_r+0xa0>
 800cbfa:	9f00      	ldr	r7, [sp, #0]
 800cbfc:	462b      	mov	r3, r5
 800cbfe:	461d      	mov	r5, r3
 800cc00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cc04:	2a39      	cmp	r2, #57	; 0x39
 800cc06:	d106      	bne.n	800cc16 <_dtoa_r+0x6de>
 800cc08:	9a01      	ldr	r2, [sp, #4]
 800cc0a:	429a      	cmp	r2, r3
 800cc0c:	d1f7      	bne.n	800cbfe <_dtoa_r+0x6c6>
 800cc0e:	9901      	ldr	r1, [sp, #4]
 800cc10:	2230      	movs	r2, #48	; 0x30
 800cc12:	3701      	adds	r7, #1
 800cc14:	700a      	strb	r2, [r1, #0]
 800cc16:	781a      	ldrb	r2, [r3, #0]
 800cc18:	3201      	adds	r2, #1
 800cc1a:	701a      	strb	r2, [r3, #0]
 800cc1c:	e790      	b.n	800cb40 <_dtoa_r+0x608>
 800cc1e:	4ba6      	ldr	r3, [pc, #664]	; (800ceb8 <_dtoa_r+0x980>)
 800cc20:	2200      	movs	r2, #0
 800cc22:	f7f3 fd01 	bl	8000628 <__aeabi_dmul>
 800cc26:	2200      	movs	r2, #0
 800cc28:	2300      	movs	r3, #0
 800cc2a:	4606      	mov	r6, r0
 800cc2c:	460f      	mov	r7, r1
 800cc2e:	f7f3 ff63 	bl	8000af8 <__aeabi_dcmpeq>
 800cc32:	2800      	cmp	r0, #0
 800cc34:	d09d      	beq.n	800cb72 <_dtoa_r+0x63a>
 800cc36:	e7cf      	b.n	800cbd8 <_dtoa_r+0x6a0>
 800cc38:	9a08      	ldr	r2, [sp, #32]
 800cc3a:	2a00      	cmp	r2, #0
 800cc3c:	f000 80d7 	beq.w	800cdee <_dtoa_r+0x8b6>
 800cc40:	9a06      	ldr	r2, [sp, #24]
 800cc42:	2a01      	cmp	r2, #1
 800cc44:	f300 80ba 	bgt.w	800cdbc <_dtoa_r+0x884>
 800cc48:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cc4a:	2a00      	cmp	r2, #0
 800cc4c:	f000 80b2 	beq.w	800cdb4 <_dtoa_r+0x87c>
 800cc50:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800cc54:	9e07      	ldr	r6, [sp, #28]
 800cc56:	9d04      	ldr	r5, [sp, #16]
 800cc58:	9a04      	ldr	r2, [sp, #16]
 800cc5a:	441a      	add	r2, r3
 800cc5c:	9204      	str	r2, [sp, #16]
 800cc5e:	9a05      	ldr	r2, [sp, #20]
 800cc60:	2101      	movs	r1, #1
 800cc62:	441a      	add	r2, r3
 800cc64:	4620      	mov	r0, r4
 800cc66:	9205      	str	r2, [sp, #20]
 800cc68:	f000 fd8a 	bl	800d780 <__i2b>
 800cc6c:	4607      	mov	r7, r0
 800cc6e:	2d00      	cmp	r5, #0
 800cc70:	dd0c      	ble.n	800cc8c <_dtoa_r+0x754>
 800cc72:	9b05      	ldr	r3, [sp, #20]
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	dd09      	ble.n	800cc8c <_dtoa_r+0x754>
 800cc78:	42ab      	cmp	r3, r5
 800cc7a:	9a04      	ldr	r2, [sp, #16]
 800cc7c:	bfa8      	it	ge
 800cc7e:	462b      	movge	r3, r5
 800cc80:	1ad2      	subs	r2, r2, r3
 800cc82:	9204      	str	r2, [sp, #16]
 800cc84:	9a05      	ldr	r2, [sp, #20]
 800cc86:	1aed      	subs	r5, r5, r3
 800cc88:	1ad3      	subs	r3, r2, r3
 800cc8a:	9305      	str	r3, [sp, #20]
 800cc8c:	9b07      	ldr	r3, [sp, #28]
 800cc8e:	b31b      	cbz	r3, 800ccd8 <_dtoa_r+0x7a0>
 800cc90:	9b08      	ldr	r3, [sp, #32]
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	f000 80af 	beq.w	800cdf6 <_dtoa_r+0x8be>
 800cc98:	2e00      	cmp	r6, #0
 800cc9a:	dd13      	ble.n	800ccc4 <_dtoa_r+0x78c>
 800cc9c:	4639      	mov	r1, r7
 800cc9e:	4632      	mov	r2, r6
 800cca0:	4620      	mov	r0, r4
 800cca2:	f000 fe2d 	bl	800d900 <__pow5mult>
 800cca6:	ee18 2a10 	vmov	r2, s16
 800ccaa:	4601      	mov	r1, r0
 800ccac:	4607      	mov	r7, r0
 800ccae:	4620      	mov	r0, r4
 800ccb0:	f000 fd7c 	bl	800d7ac <__multiply>
 800ccb4:	ee18 1a10 	vmov	r1, s16
 800ccb8:	4680      	mov	r8, r0
 800ccba:	4620      	mov	r0, r4
 800ccbc:	f000 fca8 	bl	800d610 <_Bfree>
 800ccc0:	ee08 8a10 	vmov	s16, r8
 800ccc4:	9b07      	ldr	r3, [sp, #28]
 800ccc6:	1b9a      	subs	r2, r3, r6
 800ccc8:	d006      	beq.n	800ccd8 <_dtoa_r+0x7a0>
 800ccca:	ee18 1a10 	vmov	r1, s16
 800ccce:	4620      	mov	r0, r4
 800ccd0:	f000 fe16 	bl	800d900 <__pow5mult>
 800ccd4:	ee08 0a10 	vmov	s16, r0
 800ccd8:	2101      	movs	r1, #1
 800ccda:	4620      	mov	r0, r4
 800ccdc:	f000 fd50 	bl	800d780 <__i2b>
 800cce0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	4606      	mov	r6, r0
 800cce6:	f340 8088 	ble.w	800cdfa <_dtoa_r+0x8c2>
 800ccea:	461a      	mov	r2, r3
 800ccec:	4601      	mov	r1, r0
 800ccee:	4620      	mov	r0, r4
 800ccf0:	f000 fe06 	bl	800d900 <__pow5mult>
 800ccf4:	9b06      	ldr	r3, [sp, #24]
 800ccf6:	2b01      	cmp	r3, #1
 800ccf8:	4606      	mov	r6, r0
 800ccfa:	f340 8081 	ble.w	800ce00 <_dtoa_r+0x8c8>
 800ccfe:	f04f 0800 	mov.w	r8, #0
 800cd02:	6933      	ldr	r3, [r6, #16]
 800cd04:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800cd08:	6918      	ldr	r0, [r3, #16]
 800cd0a:	f000 fce9 	bl	800d6e0 <__hi0bits>
 800cd0e:	f1c0 0020 	rsb	r0, r0, #32
 800cd12:	9b05      	ldr	r3, [sp, #20]
 800cd14:	4418      	add	r0, r3
 800cd16:	f010 001f 	ands.w	r0, r0, #31
 800cd1a:	f000 8092 	beq.w	800ce42 <_dtoa_r+0x90a>
 800cd1e:	f1c0 0320 	rsb	r3, r0, #32
 800cd22:	2b04      	cmp	r3, #4
 800cd24:	f340 808a 	ble.w	800ce3c <_dtoa_r+0x904>
 800cd28:	f1c0 001c 	rsb	r0, r0, #28
 800cd2c:	9b04      	ldr	r3, [sp, #16]
 800cd2e:	4403      	add	r3, r0
 800cd30:	9304      	str	r3, [sp, #16]
 800cd32:	9b05      	ldr	r3, [sp, #20]
 800cd34:	4403      	add	r3, r0
 800cd36:	4405      	add	r5, r0
 800cd38:	9305      	str	r3, [sp, #20]
 800cd3a:	9b04      	ldr	r3, [sp, #16]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	dd07      	ble.n	800cd50 <_dtoa_r+0x818>
 800cd40:	ee18 1a10 	vmov	r1, s16
 800cd44:	461a      	mov	r2, r3
 800cd46:	4620      	mov	r0, r4
 800cd48:	f000 fe34 	bl	800d9b4 <__lshift>
 800cd4c:	ee08 0a10 	vmov	s16, r0
 800cd50:	9b05      	ldr	r3, [sp, #20]
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	dd05      	ble.n	800cd62 <_dtoa_r+0x82a>
 800cd56:	4631      	mov	r1, r6
 800cd58:	461a      	mov	r2, r3
 800cd5a:	4620      	mov	r0, r4
 800cd5c:	f000 fe2a 	bl	800d9b4 <__lshift>
 800cd60:	4606      	mov	r6, r0
 800cd62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d06e      	beq.n	800ce46 <_dtoa_r+0x90e>
 800cd68:	ee18 0a10 	vmov	r0, s16
 800cd6c:	4631      	mov	r1, r6
 800cd6e:	f000 fe91 	bl	800da94 <__mcmp>
 800cd72:	2800      	cmp	r0, #0
 800cd74:	da67      	bge.n	800ce46 <_dtoa_r+0x90e>
 800cd76:	9b00      	ldr	r3, [sp, #0]
 800cd78:	3b01      	subs	r3, #1
 800cd7a:	ee18 1a10 	vmov	r1, s16
 800cd7e:	9300      	str	r3, [sp, #0]
 800cd80:	220a      	movs	r2, #10
 800cd82:	2300      	movs	r3, #0
 800cd84:	4620      	mov	r0, r4
 800cd86:	f000 fc65 	bl	800d654 <__multadd>
 800cd8a:	9b08      	ldr	r3, [sp, #32]
 800cd8c:	ee08 0a10 	vmov	s16, r0
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	f000 81b1 	beq.w	800d0f8 <_dtoa_r+0xbc0>
 800cd96:	2300      	movs	r3, #0
 800cd98:	4639      	mov	r1, r7
 800cd9a:	220a      	movs	r2, #10
 800cd9c:	4620      	mov	r0, r4
 800cd9e:	f000 fc59 	bl	800d654 <__multadd>
 800cda2:	9b02      	ldr	r3, [sp, #8]
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	4607      	mov	r7, r0
 800cda8:	f300 808e 	bgt.w	800cec8 <_dtoa_r+0x990>
 800cdac:	9b06      	ldr	r3, [sp, #24]
 800cdae:	2b02      	cmp	r3, #2
 800cdb0:	dc51      	bgt.n	800ce56 <_dtoa_r+0x91e>
 800cdb2:	e089      	b.n	800cec8 <_dtoa_r+0x990>
 800cdb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cdb6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800cdba:	e74b      	b.n	800cc54 <_dtoa_r+0x71c>
 800cdbc:	9b03      	ldr	r3, [sp, #12]
 800cdbe:	1e5e      	subs	r6, r3, #1
 800cdc0:	9b07      	ldr	r3, [sp, #28]
 800cdc2:	42b3      	cmp	r3, r6
 800cdc4:	bfbf      	itttt	lt
 800cdc6:	9b07      	ldrlt	r3, [sp, #28]
 800cdc8:	9607      	strlt	r6, [sp, #28]
 800cdca:	1af2      	sublt	r2, r6, r3
 800cdcc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800cdce:	bfb6      	itet	lt
 800cdd0:	189b      	addlt	r3, r3, r2
 800cdd2:	1b9e      	subge	r6, r3, r6
 800cdd4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800cdd6:	9b03      	ldr	r3, [sp, #12]
 800cdd8:	bfb8      	it	lt
 800cdda:	2600      	movlt	r6, #0
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	bfb7      	itett	lt
 800cde0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800cde4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800cde8:	1a9d      	sublt	r5, r3, r2
 800cdea:	2300      	movlt	r3, #0
 800cdec:	e734      	b.n	800cc58 <_dtoa_r+0x720>
 800cdee:	9e07      	ldr	r6, [sp, #28]
 800cdf0:	9d04      	ldr	r5, [sp, #16]
 800cdf2:	9f08      	ldr	r7, [sp, #32]
 800cdf4:	e73b      	b.n	800cc6e <_dtoa_r+0x736>
 800cdf6:	9a07      	ldr	r2, [sp, #28]
 800cdf8:	e767      	b.n	800ccca <_dtoa_r+0x792>
 800cdfa:	9b06      	ldr	r3, [sp, #24]
 800cdfc:	2b01      	cmp	r3, #1
 800cdfe:	dc18      	bgt.n	800ce32 <_dtoa_r+0x8fa>
 800ce00:	f1ba 0f00 	cmp.w	sl, #0
 800ce04:	d115      	bne.n	800ce32 <_dtoa_r+0x8fa>
 800ce06:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ce0a:	b993      	cbnz	r3, 800ce32 <_dtoa_r+0x8fa>
 800ce0c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ce10:	0d1b      	lsrs	r3, r3, #20
 800ce12:	051b      	lsls	r3, r3, #20
 800ce14:	b183      	cbz	r3, 800ce38 <_dtoa_r+0x900>
 800ce16:	9b04      	ldr	r3, [sp, #16]
 800ce18:	3301      	adds	r3, #1
 800ce1a:	9304      	str	r3, [sp, #16]
 800ce1c:	9b05      	ldr	r3, [sp, #20]
 800ce1e:	3301      	adds	r3, #1
 800ce20:	9305      	str	r3, [sp, #20]
 800ce22:	f04f 0801 	mov.w	r8, #1
 800ce26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	f47f af6a 	bne.w	800cd02 <_dtoa_r+0x7ca>
 800ce2e:	2001      	movs	r0, #1
 800ce30:	e76f      	b.n	800cd12 <_dtoa_r+0x7da>
 800ce32:	f04f 0800 	mov.w	r8, #0
 800ce36:	e7f6      	b.n	800ce26 <_dtoa_r+0x8ee>
 800ce38:	4698      	mov	r8, r3
 800ce3a:	e7f4      	b.n	800ce26 <_dtoa_r+0x8ee>
 800ce3c:	f43f af7d 	beq.w	800cd3a <_dtoa_r+0x802>
 800ce40:	4618      	mov	r0, r3
 800ce42:	301c      	adds	r0, #28
 800ce44:	e772      	b.n	800cd2c <_dtoa_r+0x7f4>
 800ce46:	9b03      	ldr	r3, [sp, #12]
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	dc37      	bgt.n	800cebc <_dtoa_r+0x984>
 800ce4c:	9b06      	ldr	r3, [sp, #24]
 800ce4e:	2b02      	cmp	r3, #2
 800ce50:	dd34      	ble.n	800cebc <_dtoa_r+0x984>
 800ce52:	9b03      	ldr	r3, [sp, #12]
 800ce54:	9302      	str	r3, [sp, #8]
 800ce56:	9b02      	ldr	r3, [sp, #8]
 800ce58:	b96b      	cbnz	r3, 800ce76 <_dtoa_r+0x93e>
 800ce5a:	4631      	mov	r1, r6
 800ce5c:	2205      	movs	r2, #5
 800ce5e:	4620      	mov	r0, r4
 800ce60:	f000 fbf8 	bl	800d654 <__multadd>
 800ce64:	4601      	mov	r1, r0
 800ce66:	4606      	mov	r6, r0
 800ce68:	ee18 0a10 	vmov	r0, s16
 800ce6c:	f000 fe12 	bl	800da94 <__mcmp>
 800ce70:	2800      	cmp	r0, #0
 800ce72:	f73f adbb 	bgt.w	800c9ec <_dtoa_r+0x4b4>
 800ce76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce78:	9d01      	ldr	r5, [sp, #4]
 800ce7a:	43db      	mvns	r3, r3
 800ce7c:	9300      	str	r3, [sp, #0]
 800ce7e:	f04f 0800 	mov.w	r8, #0
 800ce82:	4631      	mov	r1, r6
 800ce84:	4620      	mov	r0, r4
 800ce86:	f000 fbc3 	bl	800d610 <_Bfree>
 800ce8a:	2f00      	cmp	r7, #0
 800ce8c:	f43f aea4 	beq.w	800cbd8 <_dtoa_r+0x6a0>
 800ce90:	f1b8 0f00 	cmp.w	r8, #0
 800ce94:	d005      	beq.n	800cea2 <_dtoa_r+0x96a>
 800ce96:	45b8      	cmp	r8, r7
 800ce98:	d003      	beq.n	800cea2 <_dtoa_r+0x96a>
 800ce9a:	4641      	mov	r1, r8
 800ce9c:	4620      	mov	r0, r4
 800ce9e:	f000 fbb7 	bl	800d610 <_Bfree>
 800cea2:	4639      	mov	r1, r7
 800cea4:	4620      	mov	r0, r4
 800cea6:	f000 fbb3 	bl	800d610 <_Bfree>
 800ceaa:	e695      	b.n	800cbd8 <_dtoa_r+0x6a0>
 800ceac:	2600      	movs	r6, #0
 800ceae:	4637      	mov	r7, r6
 800ceb0:	e7e1      	b.n	800ce76 <_dtoa_r+0x93e>
 800ceb2:	9700      	str	r7, [sp, #0]
 800ceb4:	4637      	mov	r7, r6
 800ceb6:	e599      	b.n	800c9ec <_dtoa_r+0x4b4>
 800ceb8:	40240000 	.word	0x40240000
 800cebc:	9b08      	ldr	r3, [sp, #32]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	f000 80ca 	beq.w	800d058 <_dtoa_r+0xb20>
 800cec4:	9b03      	ldr	r3, [sp, #12]
 800cec6:	9302      	str	r3, [sp, #8]
 800cec8:	2d00      	cmp	r5, #0
 800ceca:	dd05      	ble.n	800ced8 <_dtoa_r+0x9a0>
 800cecc:	4639      	mov	r1, r7
 800cece:	462a      	mov	r2, r5
 800ced0:	4620      	mov	r0, r4
 800ced2:	f000 fd6f 	bl	800d9b4 <__lshift>
 800ced6:	4607      	mov	r7, r0
 800ced8:	f1b8 0f00 	cmp.w	r8, #0
 800cedc:	d05b      	beq.n	800cf96 <_dtoa_r+0xa5e>
 800cede:	6879      	ldr	r1, [r7, #4]
 800cee0:	4620      	mov	r0, r4
 800cee2:	f000 fb55 	bl	800d590 <_Balloc>
 800cee6:	4605      	mov	r5, r0
 800cee8:	b928      	cbnz	r0, 800cef6 <_dtoa_r+0x9be>
 800ceea:	4b87      	ldr	r3, [pc, #540]	; (800d108 <_dtoa_r+0xbd0>)
 800ceec:	4602      	mov	r2, r0
 800ceee:	f240 21ea 	movw	r1, #746	; 0x2ea
 800cef2:	f7ff bb3b 	b.w	800c56c <_dtoa_r+0x34>
 800cef6:	693a      	ldr	r2, [r7, #16]
 800cef8:	3202      	adds	r2, #2
 800cefa:	0092      	lsls	r2, r2, #2
 800cefc:	f107 010c 	add.w	r1, r7, #12
 800cf00:	300c      	adds	r0, #12
 800cf02:	f000 fb2b 	bl	800d55c <memcpy>
 800cf06:	2201      	movs	r2, #1
 800cf08:	4629      	mov	r1, r5
 800cf0a:	4620      	mov	r0, r4
 800cf0c:	f000 fd52 	bl	800d9b4 <__lshift>
 800cf10:	9b01      	ldr	r3, [sp, #4]
 800cf12:	f103 0901 	add.w	r9, r3, #1
 800cf16:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800cf1a:	4413      	add	r3, r2
 800cf1c:	9305      	str	r3, [sp, #20]
 800cf1e:	f00a 0301 	and.w	r3, sl, #1
 800cf22:	46b8      	mov	r8, r7
 800cf24:	9304      	str	r3, [sp, #16]
 800cf26:	4607      	mov	r7, r0
 800cf28:	4631      	mov	r1, r6
 800cf2a:	ee18 0a10 	vmov	r0, s16
 800cf2e:	f7ff fa75 	bl	800c41c <quorem>
 800cf32:	4641      	mov	r1, r8
 800cf34:	9002      	str	r0, [sp, #8]
 800cf36:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800cf3a:	ee18 0a10 	vmov	r0, s16
 800cf3e:	f000 fda9 	bl	800da94 <__mcmp>
 800cf42:	463a      	mov	r2, r7
 800cf44:	9003      	str	r0, [sp, #12]
 800cf46:	4631      	mov	r1, r6
 800cf48:	4620      	mov	r0, r4
 800cf4a:	f000 fdbf 	bl	800dacc <__mdiff>
 800cf4e:	68c2      	ldr	r2, [r0, #12]
 800cf50:	f109 3bff 	add.w	fp, r9, #4294967295
 800cf54:	4605      	mov	r5, r0
 800cf56:	bb02      	cbnz	r2, 800cf9a <_dtoa_r+0xa62>
 800cf58:	4601      	mov	r1, r0
 800cf5a:	ee18 0a10 	vmov	r0, s16
 800cf5e:	f000 fd99 	bl	800da94 <__mcmp>
 800cf62:	4602      	mov	r2, r0
 800cf64:	4629      	mov	r1, r5
 800cf66:	4620      	mov	r0, r4
 800cf68:	9207      	str	r2, [sp, #28]
 800cf6a:	f000 fb51 	bl	800d610 <_Bfree>
 800cf6e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800cf72:	ea43 0102 	orr.w	r1, r3, r2
 800cf76:	9b04      	ldr	r3, [sp, #16]
 800cf78:	430b      	orrs	r3, r1
 800cf7a:	464d      	mov	r5, r9
 800cf7c:	d10f      	bne.n	800cf9e <_dtoa_r+0xa66>
 800cf7e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800cf82:	d02a      	beq.n	800cfda <_dtoa_r+0xaa2>
 800cf84:	9b03      	ldr	r3, [sp, #12]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	dd02      	ble.n	800cf90 <_dtoa_r+0xa58>
 800cf8a:	9b02      	ldr	r3, [sp, #8]
 800cf8c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800cf90:	f88b a000 	strb.w	sl, [fp]
 800cf94:	e775      	b.n	800ce82 <_dtoa_r+0x94a>
 800cf96:	4638      	mov	r0, r7
 800cf98:	e7ba      	b.n	800cf10 <_dtoa_r+0x9d8>
 800cf9a:	2201      	movs	r2, #1
 800cf9c:	e7e2      	b.n	800cf64 <_dtoa_r+0xa2c>
 800cf9e:	9b03      	ldr	r3, [sp, #12]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	db04      	blt.n	800cfae <_dtoa_r+0xa76>
 800cfa4:	9906      	ldr	r1, [sp, #24]
 800cfa6:	430b      	orrs	r3, r1
 800cfa8:	9904      	ldr	r1, [sp, #16]
 800cfaa:	430b      	orrs	r3, r1
 800cfac:	d122      	bne.n	800cff4 <_dtoa_r+0xabc>
 800cfae:	2a00      	cmp	r2, #0
 800cfb0:	ddee      	ble.n	800cf90 <_dtoa_r+0xa58>
 800cfb2:	ee18 1a10 	vmov	r1, s16
 800cfb6:	2201      	movs	r2, #1
 800cfb8:	4620      	mov	r0, r4
 800cfba:	f000 fcfb 	bl	800d9b4 <__lshift>
 800cfbe:	4631      	mov	r1, r6
 800cfc0:	ee08 0a10 	vmov	s16, r0
 800cfc4:	f000 fd66 	bl	800da94 <__mcmp>
 800cfc8:	2800      	cmp	r0, #0
 800cfca:	dc03      	bgt.n	800cfd4 <_dtoa_r+0xa9c>
 800cfcc:	d1e0      	bne.n	800cf90 <_dtoa_r+0xa58>
 800cfce:	f01a 0f01 	tst.w	sl, #1
 800cfd2:	d0dd      	beq.n	800cf90 <_dtoa_r+0xa58>
 800cfd4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800cfd8:	d1d7      	bne.n	800cf8a <_dtoa_r+0xa52>
 800cfda:	2339      	movs	r3, #57	; 0x39
 800cfdc:	f88b 3000 	strb.w	r3, [fp]
 800cfe0:	462b      	mov	r3, r5
 800cfe2:	461d      	mov	r5, r3
 800cfe4:	3b01      	subs	r3, #1
 800cfe6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800cfea:	2a39      	cmp	r2, #57	; 0x39
 800cfec:	d071      	beq.n	800d0d2 <_dtoa_r+0xb9a>
 800cfee:	3201      	adds	r2, #1
 800cff0:	701a      	strb	r2, [r3, #0]
 800cff2:	e746      	b.n	800ce82 <_dtoa_r+0x94a>
 800cff4:	2a00      	cmp	r2, #0
 800cff6:	dd07      	ble.n	800d008 <_dtoa_r+0xad0>
 800cff8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800cffc:	d0ed      	beq.n	800cfda <_dtoa_r+0xaa2>
 800cffe:	f10a 0301 	add.w	r3, sl, #1
 800d002:	f88b 3000 	strb.w	r3, [fp]
 800d006:	e73c      	b.n	800ce82 <_dtoa_r+0x94a>
 800d008:	9b05      	ldr	r3, [sp, #20]
 800d00a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800d00e:	4599      	cmp	r9, r3
 800d010:	d047      	beq.n	800d0a2 <_dtoa_r+0xb6a>
 800d012:	ee18 1a10 	vmov	r1, s16
 800d016:	2300      	movs	r3, #0
 800d018:	220a      	movs	r2, #10
 800d01a:	4620      	mov	r0, r4
 800d01c:	f000 fb1a 	bl	800d654 <__multadd>
 800d020:	45b8      	cmp	r8, r7
 800d022:	ee08 0a10 	vmov	s16, r0
 800d026:	f04f 0300 	mov.w	r3, #0
 800d02a:	f04f 020a 	mov.w	r2, #10
 800d02e:	4641      	mov	r1, r8
 800d030:	4620      	mov	r0, r4
 800d032:	d106      	bne.n	800d042 <_dtoa_r+0xb0a>
 800d034:	f000 fb0e 	bl	800d654 <__multadd>
 800d038:	4680      	mov	r8, r0
 800d03a:	4607      	mov	r7, r0
 800d03c:	f109 0901 	add.w	r9, r9, #1
 800d040:	e772      	b.n	800cf28 <_dtoa_r+0x9f0>
 800d042:	f000 fb07 	bl	800d654 <__multadd>
 800d046:	4639      	mov	r1, r7
 800d048:	4680      	mov	r8, r0
 800d04a:	2300      	movs	r3, #0
 800d04c:	220a      	movs	r2, #10
 800d04e:	4620      	mov	r0, r4
 800d050:	f000 fb00 	bl	800d654 <__multadd>
 800d054:	4607      	mov	r7, r0
 800d056:	e7f1      	b.n	800d03c <_dtoa_r+0xb04>
 800d058:	9b03      	ldr	r3, [sp, #12]
 800d05a:	9302      	str	r3, [sp, #8]
 800d05c:	9d01      	ldr	r5, [sp, #4]
 800d05e:	ee18 0a10 	vmov	r0, s16
 800d062:	4631      	mov	r1, r6
 800d064:	f7ff f9da 	bl	800c41c <quorem>
 800d068:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d06c:	9b01      	ldr	r3, [sp, #4]
 800d06e:	f805 ab01 	strb.w	sl, [r5], #1
 800d072:	1aea      	subs	r2, r5, r3
 800d074:	9b02      	ldr	r3, [sp, #8]
 800d076:	4293      	cmp	r3, r2
 800d078:	dd09      	ble.n	800d08e <_dtoa_r+0xb56>
 800d07a:	ee18 1a10 	vmov	r1, s16
 800d07e:	2300      	movs	r3, #0
 800d080:	220a      	movs	r2, #10
 800d082:	4620      	mov	r0, r4
 800d084:	f000 fae6 	bl	800d654 <__multadd>
 800d088:	ee08 0a10 	vmov	s16, r0
 800d08c:	e7e7      	b.n	800d05e <_dtoa_r+0xb26>
 800d08e:	9b02      	ldr	r3, [sp, #8]
 800d090:	2b00      	cmp	r3, #0
 800d092:	bfc8      	it	gt
 800d094:	461d      	movgt	r5, r3
 800d096:	9b01      	ldr	r3, [sp, #4]
 800d098:	bfd8      	it	le
 800d09a:	2501      	movle	r5, #1
 800d09c:	441d      	add	r5, r3
 800d09e:	f04f 0800 	mov.w	r8, #0
 800d0a2:	ee18 1a10 	vmov	r1, s16
 800d0a6:	2201      	movs	r2, #1
 800d0a8:	4620      	mov	r0, r4
 800d0aa:	f000 fc83 	bl	800d9b4 <__lshift>
 800d0ae:	4631      	mov	r1, r6
 800d0b0:	ee08 0a10 	vmov	s16, r0
 800d0b4:	f000 fcee 	bl	800da94 <__mcmp>
 800d0b8:	2800      	cmp	r0, #0
 800d0ba:	dc91      	bgt.n	800cfe0 <_dtoa_r+0xaa8>
 800d0bc:	d102      	bne.n	800d0c4 <_dtoa_r+0xb8c>
 800d0be:	f01a 0f01 	tst.w	sl, #1
 800d0c2:	d18d      	bne.n	800cfe0 <_dtoa_r+0xaa8>
 800d0c4:	462b      	mov	r3, r5
 800d0c6:	461d      	mov	r5, r3
 800d0c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d0cc:	2a30      	cmp	r2, #48	; 0x30
 800d0ce:	d0fa      	beq.n	800d0c6 <_dtoa_r+0xb8e>
 800d0d0:	e6d7      	b.n	800ce82 <_dtoa_r+0x94a>
 800d0d2:	9a01      	ldr	r2, [sp, #4]
 800d0d4:	429a      	cmp	r2, r3
 800d0d6:	d184      	bne.n	800cfe2 <_dtoa_r+0xaaa>
 800d0d8:	9b00      	ldr	r3, [sp, #0]
 800d0da:	3301      	adds	r3, #1
 800d0dc:	9300      	str	r3, [sp, #0]
 800d0de:	2331      	movs	r3, #49	; 0x31
 800d0e0:	7013      	strb	r3, [r2, #0]
 800d0e2:	e6ce      	b.n	800ce82 <_dtoa_r+0x94a>
 800d0e4:	4b09      	ldr	r3, [pc, #36]	; (800d10c <_dtoa_r+0xbd4>)
 800d0e6:	f7ff ba95 	b.w	800c614 <_dtoa_r+0xdc>
 800d0ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	f47f aa6e 	bne.w	800c5ce <_dtoa_r+0x96>
 800d0f2:	4b07      	ldr	r3, [pc, #28]	; (800d110 <_dtoa_r+0xbd8>)
 800d0f4:	f7ff ba8e 	b.w	800c614 <_dtoa_r+0xdc>
 800d0f8:	9b02      	ldr	r3, [sp, #8]
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	dcae      	bgt.n	800d05c <_dtoa_r+0xb24>
 800d0fe:	9b06      	ldr	r3, [sp, #24]
 800d100:	2b02      	cmp	r3, #2
 800d102:	f73f aea8 	bgt.w	800ce56 <_dtoa_r+0x91e>
 800d106:	e7a9      	b.n	800d05c <_dtoa_r+0xb24>
 800d108:	0800e423 	.word	0x0800e423
 800d10c:	0800e380 	.word	0x0800e380
 800d110:	0800e3a4 	.word	0x0800e3a4

0800d114 <__sflush_r>:
 800d114:	898a      	ldrh	r2, [r1, #12]
 800d116:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d11a:	4605      	mov	r5, r0
 800d11c:	0710      	lsls	r0, r2, #28
 800d11e:	460c      	mov	r4, r1
 800d120:	d458      	bmi.n	800d1d4 <__sflush_r+0xc0>
 800d122:	684b      	ldr	r3, [r1, #4]
 800d124:	2b00      	cmp	r3, #0
 800d126:	dc05      	bgt.n	800d134 <__sflush_r+0x20>
 800d128:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	dc02      	bgt.n	800d134 <__sflush_r+0x20>
 800d12e:	2000      	movs	r0, #0
 800d130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d134:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d136:	2e00      	cmp	r6, #0
 800d138:	d0f9      	beq.n	800d12e <__sflush_r+0x1a>
 800d13a:	2300      	movs	r3, #0
 800d13c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d140:	682f      	ldr	r7, [r5, #0]
 800d142:	602b      	str	r3, [r5, #0]
 800d144:	d032      	beq.n	800d1ac <__sflush_r+0x98>
 800d146:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d148:	89a3      	ldrh	r3, [r4, #12]
 800d14a:	075a      	lsls	r2, r3, #29
 800d14c:	d505      	bpl.n	800d15a <__sflush_r+0x46>
 800d14e:	6863      	ldr	r3, [r4, #4]
 800d150:	1ac0      	subs	r0, r0, r3
 800d152:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d154:	b10b      	cbz	r3, 800d15a <__sflush_r+0x46>
 800d156:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d158:	1ac0      	subs	r0, r0, r3
 800d15a:	2300      	movs	r3, #0
 800d15c:	4602      	mov	r2, r0
 800d15e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d160:	6a21      	ldr	r1, [r4, #32]
 800d162:	4628      	mov	r0, r5
 800d164:	47b0      	blx	r6
 800d166:	1c43      	adds	r3, r0, #1
 800d168:	89a3      	ldrh	r3, [r4, #12]
 800d16a:	d106      	bne.n	800d17a <__sflush_r+0x66>
 800d16c:	6829      	ldr	r1, [r5, #0]
 800d16e:	291d      	cmp	r1, #29
 800d170:	d82c      	bhi.n	800d1cc <__sflush_r+0xb8>
 800d172:	4a2a      	ldr	r2, [pc, #168]	; (800d21c <__sflush_r+0x108>)
 800d174:	40ca      	lsrs	r2, r1
 800d176:	07d6      	lsls	r6, r2, #31
 800d178:	d528      	bpl.n	800d1cc <__sflush_r+0xb8>
 800d17a:	2200      	movs	r2, #0
 800d17c:	6062      	str	r2, [r4, #4]
 800d17e:	04d9      	lsls	r1, r3, #19
 800d180:	6922      	ldr	r2, [r4, #16]
 800d182:	6022      	str	r2, [r4, #0]
 800d184:	d504      	bpl.n	800d190 <__sflush_r+0x7c>
 800d186:	1c42      	adds	r2, r0, #1
 800d188:	d101      	bne.n	800d18e <__sflush_r+0x7a>
 800d18a:	682b      	ldr	r3, [r5, #0]
 800d18c:	b903      	cbnz	r3, 800d190 <__sflush_r+0x7c>
 800d18e:	6560      	str	r0, [r4, #84]	; 0x54
 800d190:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d192:	602f      	str	r7, [r5, #0]
 800d194:	2900      	cmp	r1, #0
 800d196:	d0ca      	beq.n	800d12e <__sflush_r+0x1a>
 800d198:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d19c:	4299      	cmp	r1, r3
 800d19e:	d002      	beq.n	800d1a6 <__sflush_r+0x92>
 800d1a0:	4628      	mov	r0, r5
 800d1a2:	f7fe fa93 	bl	800b6cc <_free_r>
 800d1a6:	2000      	movs	r0, #0
 800d1a8:	6360      	str	r0, [r4, #52]	; 0x34
 800d1aa:	e7c1      	b.n	800d130 <__sflush_r+0x1c>
 800d1ac:	6a21      	ldr	r1, [r4, #32]
 800d1ae:	2301      	movs	r3, #1
 800d1b0:	4628      	mov	r0, r5
 800d1b2:	47b0      	blx	r6
 800d1b4:	1c41      	adds	r1, r0, #1
 800d1b6:	d1c7      	bne.n	800d148 <__sflush_r+0x34>
 800d1b8:	682b      	ldr	r3, [r5, #0]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d0c4      	beq.n	800d148 <__sflush_r+0x34>
 800d1be:	2b1d      	cmp	r3, #29
 800d1c0:	d001      	beq.n	800d1c6 <__sflush_r+0xb2>
 800d1c2:	2b16      	cmp	r3, #22
 800d1c4:	d101      	bne.n	800d1ca <__sflush_r+0xb6>
 800d1c6:	602f      	str	r7, [r5, #0]
 800d1c8:	e7b1      	b.n	800d12e <__sflush_r+0x1a>
 800d1ca:	89a3      	ldrh	r3, [r4, #12]
 800d1cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d1d0:	81a3      	strh	r3, [r4, #12]
 800d1d2:	e7ad      	b.n	800d130 <__sflush_r+0x1c>
 800d1d4:	690f      	ldr	r7, [r1, #16]
 800d1d6:	2f00      	cmp	r7, #0
 800d1d8:	d0a9      	beq.n	800d12e <__sflush_r+0x1a>
 800d1da:	0793      	lsls	r3, r2, #30
 800d1dc:	680e      	ldr	r6, [r1, #0]
 800d1de:	bf08      	it	eq
 800d1e0:	694b      	ldreq	r3, [r1, #20]
 800d1e2:	600f      	str	r7, [r1, #0]
 800d1e4:	bf18      	it	ne
 800d1e6:	2300      	movne	r3, #0
 800d1e8:	eba6 0807 	sub.w	r8, r6, r7
 800d1ec:	608b      	str	r3, [r1, #8]
 800d1ee:	f1b8 0f00 	cmp.w	r8, #0
 800d1f2:	dd9c      	ble.n	800d12e <__sflush_r+0x1a>
 800d1f4:	6a21      	ldr	r1, [r4, #32]
 800d1f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d1f8:	4643      	mov	r3, r8
 800d1fa:	463a      	mov	r2, r7
 800d1fc:	4628      	mov	r0, r5
 800d1fe:	47b0      	blx	r6
 800d200:	2800      	cmp	r0, #0
 800d202:	dc06      	bgt.n	800d212 <__sflush_r+0xfe>
 800d204:	89a3      	ldrh	r3, [r4, #12]
 800d206:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d20a:	81a3      	strh	r3, [r4, #12]
 800d20c:	f04f 30ff 	mov.w	r0, #4294967295
 800d210:	e78e      	b.n	800d130 <__sflush_r+0x1c>
 800d212:	4407      	add	r7, r0
 800d214:	eba8 0800 	sub.w	r8, r8, r0
 800d218:	e7e9      	b.n	800d1ee <__sflush_r+0xda>
 800d21a:	bf00      	nop
 800d21c:	20400001 	.word	0x20400001

0800d220 <_fflush_r>:
 800d220:	b538      	push	{r3, r4, r5, lr}
 800d222:	690b      	ldr	r3, [r1, #16]
 800d224:	4605      	mov	r5, r0
 800d226:	460c      	mov	r4, r1
 800d228:	b913      	cbnz	r3, 800d230 <_fflush_r+0x10>
 800d22a:	2500      	movs	r5, #0
 800d22c:	4628      	mov	r0, r5
 800d22e:	bd38      	pop	{r3, r4, r5, pc}
 800d230:	b118      	cbz	r0, 800d23a <_fflush_r+0x1a>
 800d232:	6983      	ldr	r3, [r0, #24]
 800d234:	b90b      	cbnz	r3, 800d23a <_fflush_r+0x1a>
 800d236:	f000 f887 	bl	800d348 <__sinit>
 800d23a:	4b14      	ldr	r3, [pc, #80]	; (800d28c <_fflush_r+0x6c>)
 800d23c:	429c      	cmp	r4, r3
 800d23e:	d11b      	bne.n	800d278 <_fflush_r+0x58>
 800d240:	686c      	ldr	r4, [r5, #4]
 800d242:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d246:	2b00      	cmp	r3, #0
 800d248:	d0ef      	beq.n	800d22a <_fflush_r+0xa>
 800d24a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d24c:	07d0      	lsls	r0, r2, #31
 800d24e:	d404      	bmi.n	800d25a <_fflush_r+0x3a>
 800d250:	0599      	lsls	r1, r3, #22
 800d252:	d402      	bmi.n	800d25a <_fflush_r+0x3a>
 800d254:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d256:	f000 f91a 	bl	800d48e <__retarget_lock_acquire_recursive>
 800d25a:	4628      	mov	r0, r5
 800d25c:	4621      	mov	r1, r4
 800d25e:	f7ff ff59 	bl	800d114 <__sflush_r>
 800d262:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d264:	07da      	lsls	r2, r3, #31
 800d266:	4605      	mov	r5, r0
 800d268:	d4e0      	bmi.n	800d22c <_fflush_r+0xc>
 800d26a:	89a3      	ldrh	r3, [r4, #12]
 800d26c:	059b      	lsls	r3, r3, #22
 800d26e:	d4dd      	bmi.n	800d22c <_fflush_r+0xc>
 800d270:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d272:	f000 f90d 	bl	800d490 <__retarget_lock_release_recursive>
 800d276:	e7d9      	b.n	800d22c <_fflush_r+0xc>
 800d278:	4b05      	ldr	r3, [pc, #20]	; (800d290 <_fflush_r+0x70>)
 800d27a:	429c      	cmp	r4, r3
 800d27c:	d101      	bne.n	800d282 <_fflush_r+0x62>
 800d27e:	68ac      	ldr	r4, [r5, #8]
 800d280:	e7df      	b.n	800d242 <_fflush_r+0x22>
 800d282:	4b04      	ldr	r3, [pc, #16]	; (800d294 <_fflush_r+0x74>)
 800d284:	429c      	cmp	r4, r3
 800d286:	bf08      	it	eq
 800d288:	68ec      	ldreq	r4, [r5, #12]
 800d28a:	e7da      	b.n	800d242 <_fflush_r+0x22>
 800d28c:	0800e454 	.word	0x0800e454
 800d290:	0800e474 	.word	0x0800e474
 800d294:	0800e434 	.word	0x0800e434

0800d298 <std>:
 800d298:	2300      	movs	r3, #0
 800d29a:	b510      	push	{r4, lr}
 800d29c:	4604      	mov	r4, r0
 800d29e:	e9c0 3300 	strd	r3, r3, [r0]
 800d2a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d2a6:	6083      	str	r3, [r0, #8]
 800d2a8:	8181      	strh	r1, [r0, #12]
 800d2aa:	6643      	str	r3, [r0, #100]	; 0x64
 800d2ac:	81c2      	strh	r2, [r0, #14]
 800d2ae:	6183      	str	r3, [r0, #24]
 800d2b0:	4619      	mov	r1, r3
 800d2b2:	2208      	movs	r2, #8
 800d2b4:	305c      	adds	r0, #92	; 0x5c
 800d2b6:	f7fe fa01 	bl	800b6bc <memset>
 800d2ba:	4b05      	ldr	r3, [pc, #20]	; (800d2d0 <std+0x38>)
 800d2bc:	6263      	str	r3, [r4, #36]	; 0x24
 800d2be:	4b05      	ldr	r3, [pc, #20]	; (800d2d4 <std+0x3c>)
 800d2c0:	62a3      	str	r3, [r4, #40]	; 0x28
 800d2c2:	4b05      	ldr	r3, [pc, #20]	; (800d2d8 <std+0x40>)
 800d2c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d2c6:	4b05      	ldr	r3, [pc, #20]	; (800d2dc <std+0x44>)
 800d2c8:	6224      	str	r4, [r4, #32]
 800d2ca:	6323      	str	r3, [r4, #48]	; 0x30
 800d2cc:	bd10      	pop	{r4, pc}
 800d2ce:	bf00      	nop
 800d2d0:	0800df79 	.word	0x0800df79
 800d2d4:	0800df9b 	.word	0x0800df9b
 800d2d8:	0800dfd3 	.word	0x0800dfd3
 800d2dc:	0800dff7 	.word	0x0800dff7

0800d2e0 <_cleanup_r>:
 800d2e0:	4901      	ldr	r1, [pc, #4]	; (800d2e8 <_cleanup_r+0x8>)
 800d2e2:	f000 b8af 	b.w	800d444 <_fwalk_reent>
 800d2e6:	bf00      	nop
 800d2e8:	0800d221 	.word	0x0800d221

0800d2ec <__sfmoreglue>:
 800d2ec:	b570      	push	{r4, r5, r6, lr}
 800d2ee:	2268      	movs	r2, #104	; 0x68
 800d2f0:	1e4d      	subs	r5, r1, #1
 800d2f2:	4355      	muls	r5, r2
 800d2f4:	460e      	mov	r6, r1
 800d2f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d2fa:	f7fe fa53 	bl	800b7a4 <_malloc_r>
 800d2fe:	4604      	mov	r4, r0
 800d300:	b140      	cbz	r0, 800d314 <__sfmoreglue+0x28>
 800d302:	2100      	movs	r1, #0
 800d304:	e9c0 1600 	strd	r1, r6, [r0]
 800d308:	300c      	adds	r0, #12
 800d30a:	60a0      	str	r0, [r4, #8]
 800d30c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d310:	f7fe f9d4 	bl	800b6bc <memset>
 800d314:	4620      	mov	r0, r4
 800d316:	bd70      	pop	{r4, r5, r6, pc}

0800d318 <__sfp_lock_acquire>:
 800d318:	4801      	ldr	r0, [pc, #4]	; (800d320 <__sfp_lock_acquire+0x8>)
 800d31a:	f000 b8b8 	b.w	800d48e <__retarget_lock_acquire_recursive>
 800d31e:	bf00      	nop
 800d320:	2000085d 	.word	0x2000085d

0800d324 <__sfp_lock_release>:
 800d324:	4801      	ldr	r0, [pc, #4]	; (800d32c <__sfp_lock_release+0x8>)
 800d326:	f000 b8b3 	b.w	800d490 <__retarget_lock_release_recursive>
 800d32a:	bf00      	nop
 800d32c:	2000085d 	.word	0x2000085d

0800d330 <__sinit_lock_acquire>:
 800d330:	4801      	ldr	r0, [pc, #4]	; (800d338 <__sinit_lock_acquire+0x8>)
 800d332:	f000 b8ac 	b.w	800d48e <__retarget_lock_acquire_recursive>
 800d336:	bf00      	nop
 800d338:	2000085e 	.word	0x2000085e

0800d33c <__sinit_lock_release>:
 800d33c:	4801      	ldr	r0, [pc, #4]	; (800d344 <__sinit_lock_release+0x8>)
 800d33e:	f000 b8a7 	b.w	800d490 <__retarget_lock_release_recursive>
 800d342:	bf00      	nop
 800d344:	2000085e 	.word	0x2000085e

0800d348 <__sinit>:
 800d348:	b510      	push	{r4, lr}
 800d34a:	4604      	mov	r4, r0
 800d34c:	f7ff fff0 	bl	800d330 <__sinit_lock_acquire>
 800d350:	69a3      	ldr	r3, [r4, #24]
 800d352:	b11b      	cbz	r3, 800d35c <__sinit+0x14>
 800d354:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d358:	f7ff bff0 	b.w	800d33c <__sinit_lock_release>
 800d35c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d360:	6523      	str	r3, [r4, #80]	; 0x50
 800d362:	4b13      	ldr	r3, [pc, #76]	; (800d3b0 <__sinit+0x68>)
 800d364:	4a13      	ldr	r2, [pc, #76]	; (800d3b4 <__sinit+0x6c>)
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	62a2      	str	r2, [r4, #40]	; 0x28
 800d36a:	42a3      	cmp	r3, r4
 800d36c:	bf04      	itt	eq
 800d36e:	2301      	moveq	r3, #1
 800d370:	61a3      	streq	r3, [r4, #24]
 800d372:	4620      	mov	r0, r4
 800d374:	f000 f820 	bl	800d3b8 <__sfp>
 800d378:	6060      	str	r0, [r4, #4]
 800d37a:	4620      	mov	r0, r4
 800d37c:	f000 f81c 	bl	800d3b8 <__sfp>
 800d380:	60a0      	str	r0, [r4, #8]
 800d382:	4620      	mov	r0, r4
 800d384:	f000 f818 	bl	800d3b8 <__sfp>
 800d388:	2200      	movs	r2, #0
 800d38a:	60e0      	str	r0, [r4, #12]
 800d38c:	2104      	movs	r1, #4
 800d38e:	6860      	ldr	r0, [r4, #4]
 800d390:	f7ff ff82 	bl	800d298 <std>
 800d394:	68a0      	ldr	r0, [r4, #8]
 800d396:	2201      	movs	r2, #1
 800d398:	2109      	movs	r1, #9
 800d39a:	f7ff ff7d 	bl	800d298 <std>
 800d39e:	68e0      	ldr	r0, [r4, #12]
 800d3a0:	2202      	movs	r2, #2
 800d3a2:	2112      	movs	r1, #18
 800d3a4:	f7ff ff78 	bl	800d298 <std>
 800d3a8:	2301      	movs	r3, #1
 800d3aa:	61a3      	str	r3, [r4, #24]
 800d3ac:	e7d2      	b.n	800d354 <__sinit+0xc>
 800d3ae:	bf00      	nop
 800d3b0:	0800e36c 	.word	0x0800e36c
 800d3b4:	0800d2e1 	.word	0x0800d2e1

0800d3b8 <__sfp>:
 800d3b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3ba:	4607      	mov	r7, r0
 800d3bc:	f7ff ffac 	bl	800d318 <__sfp_lock_acquire>
 800d3c0:	4b1e      	ldr	r3, [pc, #120]	; (800d43c <__sfp+0x84>)
 800d3c2:	681e      	ldr	r6, [r3, #0]
 800d3c4:	69b3      	ldr	r3, [r6, #24]
 800d3c6:	b913      	cbnz	r3, 800d3ce <__sfp+0x16>
 800d3c8:	4630      	mov	r0, r6
 800d3ca:	f7ff ffbd 	bl	800d348 <__sinit>
 800d3ce:	3648      	adds	r6, #72	; 0x48
 800d3d0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d3d4:	3b01      	subs	r3, #1
 800d3d6:	d503      	bpl.n	800d3e0 <__sfp+0x28>
 800d3d8:	6833      	ldr	r3, [r6, #0]
 800d3da:	b30b      	cbz	r3, 800d420 <__sfp+0x68>
 800d3dc:	6836      	ldr	r6, [r6, #0]
 800d3de:	e7f7      	b.n	800d3d0 <__sfp+0x18>
 800d3e0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d3e4:	b9d5      	cbnz	r5, 800d41c <__sfp+0x64>
 800d3e6:	4b16      	ldr	r3, [pc, #88]	; (800d440 <__sfp+0x88>)
 800d3e8:	60e3      	str	r3, [r4, #12]
 800d3ea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d3ee:	6665      	str	r5, [r4, #100]	; 0x64
 800d3f0:	f000 f84c 	bl	800d48c <__retarget_lock_init_recursive>
 800d3f4:	f7ff ff96 	bl	800d324 <__sfp_lock_release>
 800d3f8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d3fc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d400:	6025      	str	r5, [r4, #0]
 800d402:	61a5      	str	r5, [r4, #24]
 800d404:	2208      	movs	r2, #8
 800d406:	4629      	mov	r1, r5
 800d408:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d40c:	f7fe f956 	bl	800b6bc <memset>
 800d410:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d414:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d418:	4620      	mov	r0, r4
 800d41a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d41c:	3468      	adds	r4, #104	; 0x68
 800d41e:	e7d9      	b.n	800d3d4 <__sfp+0x1c>
 800d420:	2104      	movs	r1, #4
 800d422:	4638      	mov	r0, r7
 800d424:	f7ff ff62 	bl	800d2ec <__sfmoreglue>
 800d428:	4604      	mov	r4, r0
 800d42a:	6030      	str	r0, [r6, #0]
 800d42c:	2800      	cmp	r0, #0
 800d42e:	d1d5      	bne.n	800d3dc <__sfp+0x24>
 800d430:	f7ff ff78 	bl	800d324 <__sfp_lock_release>
 800d434:	230c      	movs	r3, #12
 800d436:	603b      	str	r3, [r7, #0]
 800d438:	e7ee      	b.n	800d418 <__sfp+0x60>
 800d43a:	bf00      	nop
 800d43c:	0800e36c 	.word	0x0800e36c
 800d440:	ffff0001 	.word	0xffff0001

0800d444 <_fwalk_reent>:
 800d444:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d448:	4606      	mov	r6, r0
 800d44a:	4688      	mov	r8, r1
 800d44c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d450:	2700      	movs	r7, #0
 800d452:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d456:	f1b9 0901 	subs.w	r9, r9, #1
 800d45a:	d505      	bpl.n	800d468 <_fwalk_reent+0x24>
 800d45c:	6824      	ldr	r4, [r4, #0]
 800d45e:	2c00      	cmp	r4, #0
 800d460:	d1f7      	bne.n	800d452 <_fwalk_reent+0xe>
 800d462:	4638      	mov	r0, r7
 800d464:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d468:	89ab      	ldrh	r3, [r5, #12]
 800d46a:	2b01      	cmp	r3, #1
 800d46c:	d907      	bls.n	800d47e <_fwalk_reent+0x3a>
 800d46e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d472:	3301      	adds	r3, #1
 800d474:	d003      	beq.n	800d47e <_fwalk_reent+0x3a>
 800d476:	4629      	mov	r1, r5
 800d478:	4630      	mov	r0, r6
 800d47a:	47c0      	blx	r8
 800d47c:	4307      	orrs	r7, r0
 800d47e:	3568      	adds	r5, #104	; 0x68
 800d480:	e7e9      	b.n	800d456 <_fwalk_reent+0x12>
	...

0800d484 <_localeconv_r>:
 800d484:	4800      	ldr	r0, [pc, #0]	; (800d488 <_localeconv_r+0x4>)
 800d486:	4770      	bx	lr
 800d488:	20000168 	.word	0x20000168

0800d48c <__retarget_lock_init_recursive>:
 800d48c:	4770      	bx	lr

0800d48e <__retarget_lock_acquire_recursive>:
 800d48e:	4770      	bx	lr

0800d490 <__retarget_lock_release_recursive>:
 800d490:	4770      	bx	lr

0800d492 <__swhatbuf_r>:
 800d492:	b570      	push	{r4, r5, r6, lr}
 800d494:	460e      	mov	r6, r1
 800d496:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d49a:	2900      	cmp	r1, #0
 800d49c:	b096      	sub	sp, #88	; 0x58
 800d49e:	4614      	mov	r4, r2
 800d4a0:	461d      	mov	r5, r3
 800d4a2:	da08      	bge.n	800d4b6 <__swhatbuf_r+0x24>
 800d4a4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d4a8:	2200      	movs	r2, #0
 800d4aa:	602a      	str	r2, [r5, #0]
 800d4ac:	061a      	lsls	r2, r3, #24
 800d4ae:	d410      	bmi.n	800d4d2 <__swhatbuf_r+0x40>
 800d4b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d4b4:	e00e      	b.n	800d4d4 <__swhatbuf_r+0x42>
 800d4b6:	466a      	mov	r2, sp
 800d4b8:	f000 fdf4 	bl	800e0a4 <_fstat_r>
 800d4bc:	2800      	cmp	r0, #0
 800d4be:	dbf1      	blt.n	800d4a4 <__swhatbuf_r+0x12>
 800d4c0:	9a01      	ldr	r2, [sp, #4]
 800d4c2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d4c6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d4ca:	425a      	negs	r2, r3
 800d4cc:	415a      	adcs	r2, r3
 800d4ce:	602a      	str	r2, [r5, #0]
 800d4d0:	e7ee      	b.n	800d4b0 <__swhatbuf_r+0x1e>
 800d4d2:	2340      	movs	r3, #64	; 0x40
 800d4d4:	2000      	movs	r0, #0
 800d4d6:	6023      	str	r3, [r4, #0]
 800d4d8:	b016      	add	sp, #88	; 0x58
 800d4da:	bd70      	pop	{r4, r5, r6, pc}

0800d4dc <__smakebuf_r>:
 800d4dc:	898b      	ldrh	r3, [r1, #12]
 800d4de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d4e0:	079d      	lsls	r5, r3, #30
 800d4e2:	4606      	mov	r6, r0
 800d4e4:	460c      	mov	r4, r1
 800d4e6:	d507      	bpl.n	800d4f8 <__smakebuf_r+0x1c>
 800d4e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d4ec:	6023      	str	r3, [r4, #0]
 800d4ee:	6123      	str	r3, [r4, #16]
 800d4f0:	2301      	movs	r3, #1
 800d4f2:	6163      	str	r3, [r4, #20]
 800d4f4:	b002      	add	sp, #8
 800d4f6:	bd70      	pop	{r4, r5, r6, pc}
 800d4f8:	ab01      	add	r3, sp, #4
 800d4fa:	466a      	mov	r2, sp
 800d4fc:	f7ff ffc9 	bl	800d492 <__swhatbuf_r>
 800d500:	9900      	ldr	r1, [sp, #0]
 800d502:	4605      	mov	r5, r0
 800d504:	4630      	mov	r0, r6
 800d506:	f7fe f94d 	bl	800b7a4 <_malloc_r>
 800d50a:	b948      	cbnz	r0, 800d520 <__smakebuf_r+0x44>
 800d50c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d510:	059a      	lsls	r2, r3, #22
 800d512:	d4ef      	bmi.n	800d4f4 <__smakebuf_r+0x18>
 800d514:	f023 0303 	bic.w	r3, r3, #3
 800d518:	f043 0302 	orr.w	r3, r3, #2
 800d51c:	81a3      	strh	r3, [r4, #12]
 800d51e:	e7e3      	b.n	800d4e8 <__smakebuf_r+0xc>
 800d520:	4b0d      	ldr	r3, [pc, #52]	; (800d558 <__smakebuf_r+0x7c>)
 800d522:	62b3      	str	r3, [r6, #40]	; 0x28
 800d524:	89a3      	ldrh	r3, [r4, #12]
 800d526:	6020      	str	r0, [r4, #0]
 800d528:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d52c:	81a3      	strh	r3, [r4, #12]
 800d52e:	9b00      	ldr	r3, [sp, #0]
 800d530:	6163      	str	r3, [r4, #20]
 800d532:	9b01      	ldr	r3, [sp, #4]
 800d534:	6120      	str	r0, [r4, #16]
 800d536:	b15b      	cbz	r3, 800d550 <__smakebuf_r+0x74>
 800d538:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d53c:	4630      	mov	r0, r6
 800d53e:	f000 fdc3 	bl	800e0c8 <_isatty_r>
 800d542:	b128      	cbz	r0, 800d550 <__smakebuf_r+0x74>
 800d544:	89a3      	ldrh	r3, [r4, #12]
 800d546:	f023 0303 	bic.w	r3, r3, #3
 800d54a:	f043 0301 	orr.w	r3, r3, #1
 800d54e:	81a3      	strh	r3, [r4, #12]
 800d550:	89a0      	ldrh	r0, [r4, #12]
 800d552:	4305      	orrs	r5, r0
 800d554:	81a5      	strh	r5, [r4, #12]
 800d556:	e7cd      	b.n	800d4f4 <__smakebuf_r+0x18>
 800d558:	0800d2e1 	.word	0x0800d2e1

0800d55c <memcpy>:
 800d55c:	440a      	add	r2, r1
 800d55e:	4291      	cmp	r1, r2
 800d560:	f100 33ff 	add.w	r3, r0, #4294967295
 800d564:	d100      	bne.n	800d568 <memcpy+0xc>
 800d566:	4770      	bx	lr
 800d568:	b510      	push	{r4, lr}
 800d56a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d56e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d572:	4291      	cmp	r1, r2
 800d574:	d1f9      	bne.n	800d56a <memcpy+0xe>
 800d576:	bd10      	pop	{r4, pc}

0800d578 <__malloc_lock>:
 800d578:	4801      	ldr	r0, [pc, #4]	; (800d580 <__malloc_lock+0x8>)
 800d57a:	f7ff bf88 	b.w	800d48e <__retarget_lock_acquire_recursive>
 800d57e:	bf00      	nop
 800d580:	2000085c 	.word	0x2000085c

0800d584 <__malloc_unlock>:
 800d584:	4801      	ldr	r0, [pc, #4]	; (800d58c <__malloc_unlock+0x8>)
 800d586:	f7ff bf83 	b.w	800d490 <__retarget_lock_release_recursive>
 800d58a:	bf00      	nop
 800d58c:	2000085c 	.word	0x2000085c

0800d590 <_Balloc>:
 800d590:	b570      	push	{r4, r5, r6, lr}
 800d592:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d594:	4604      	mov	r4, r0
 800d596:	460d      	mov	r5, r1
 800d598:	b976      	cbnz	r6, 800d5b8 <_Balloc+0x28>
 800d59a:	2010      	movs	r0, #16
 800d59c:	f7fe f886 	bl	800b6ac <malloc>
 800d5a0:	4602      	mov	r2, r0
 800d5a2:	6260      	str	r0, [r4, #36]	; 0x24
 800d5a4:	b920      	cbnz	r0, 800d5b0 <_Balloc+0x20>
 800d5a6:	4b18      	ldr	r3, [pc, #96]	; (800d608 <_Balloc+0x78>)
 800d5a8:	4818      	ldr	r0, [pc, #96]	; (800d60c <_Balloc+0x7c>)
 800d5aa:	2166      	movs	r1, #102	; 0x66
 800d5ac:	f000 fd3a 	bl	800e024 <__assert_func>
 800d5b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d5b4:	6006      	str	r6, [r0, #0]
 800d5b6:	60c6      	str	r6, [r0, #12]
 800d5b8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d5ba:	68f3      	ldr	r3, [r6, #12]
 800d5bc:	b183      	cbz	r3, 800d5e0 <_Balloc+0x50>
 800d5be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d5c0:	68db      	ldr	r3, [r3, #12]
 800d5c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d5c6:	b9b8      	cbnz	r0, 800d5f8 <_Balloc+0x68>
 800d5c8:	2101      	movs	r1, #1
 800d5ca:	fa01 f605 	lsl.w	r6, r1, r5
 800d5ce:	1d72      	adds	r2, r6, #5
 800d5d0:	0092      	lsls	r2, r2, #2
 800d5d2:	4620      	mov	r0, r4
 800d5d4:	f000 fb60 	bl	800dc98 <_calloc_r>
 800d5d8:	b160      	cbz	r0, 800d5f4 <_Balloc+0x64>
 800d5da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d5de:	e00e      	b.n	800d5fe <_Balloc+0x6e>
 800d5e0:	2221      	movs	r2, #33	; 0x21
 800d5e2:	2104      	movs	r1, #4
 800d5e4:	4620      	mov	r0, r4
 800d5e6:	f000 fb57 	bl	800dc98 <_calloc_r>
 800d5ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d5ec:	60f0      	str	r0, [r6, #12]
 800d5ee:	68db      	ldr	r3, [r3, #12]
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d1e4      	bne.n	800d5be <_Balloc+0x2e>
 800d5f4:	2000      	movs	r0, #0
 800d5f6:	bd70      	pop	{r4, r5, r6, pc}
 800d5f8:	6802      	ldr	r2, [r0, #0]
 800d5fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d5fe:	2300      	movs	r3, #0
 800d600:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d604:	e7f7      	b.n	800d5f6 <_Balloc+0x66>
 800d606:	bf00      	nop
 800d608:	0800e3b1 	.word	0x0800e3b1
 800d60c:	0800e494 	.word	0x0800e494

0800d610 <_Bfree>:
 800d610:	b570      	push	{r4, r5, r6, lr}
 800d612:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d614:	4605      	mov	r5, r0
 800d616:	460c      	mov	r4, r1
 800d618:	b976      	cbnz	r6, 800d638 <_Bfree+0x28>
 800d61a:	2010      	movs	r0, #16
 800d61c:	f7fe f846 	bl	800b6ac <malloc>
 800d620:	4602      	mov	r2, r0
 800d622:	6268      	str	r0, [r5, #36]	; 0x24
 800d624:	b920      	cbnz	r0, 800d630 <_Bfree+0x20>
 800d626:	4b09      	ldr	r3, [pc, #36]	; (800d64c <_Bfree+0x3c>)
 800d628:	4809      	ldr	r0, [pc, #36]	; (800d650 <_Bfree+0x40>)
 800d62a:	218a      	movs	r1, #138	; 0x8a
 800d62c:	f000 fcfa 	bl	800e024 <__assert_func>
 800d630:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d634:	6006      	str	r6, [r0, #0]
 800d636:	60c6      	str	r6, [r0, #12]
 800d638:	b13c      	cbz	r4, 800d64a <_Bfree+0x3a>
 800d63a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d63c:	6862      	ldr	r2, [r4, #4]
 800d63e:	68db      	ldr	r3, [r3, #12]
 800d640:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d644:	6021      	str	r1, [r4, #0]
 800d646:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d64a:	bd70      	pop	{r4, r5, r6, pc}
 800d64c:	0800e3b1 	.word	0x0800e3b1
 800d650:	0800e494 	.word	0x0800e494

0800d654 <__multadd>:
 800d654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d658:	690d      	ldr	r5, [r1, #16]
 800d65a:	4607      	mov	r7, r0
 800d65c:	460c      	mov	r4, r1
 800d65e:	461e      	mov	r6, r3
 800d660:	f101 0c14 	add.w	ip, r1, #20
 800d664:	2000      	movs	r0, #0
 800d666:	f8dc 3000 	ldr.w	r3, [ip]
 800d66a:	b299      	uxth	r1, r3
 800d66c:	fb02 6101 	mla	r1, r2, r1, r6
 800d670:	0c1e      	lsrs	r6, r3, #16
 800d672:	0c0b      	lsrs	r3, r1, #16
 800d674:	fb02 3306 	mla	r3, r2, r6, r3
 800d678:	b289      	uxth	r1, r1
 800d67a:	3001      	adds	r0, #1
 800d67c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d680:	4285      	cmp	r5, r0
 800d682:	f84c 1b04 	str.w	r1, [ip], #4
 800d686:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d68a:	dcec      	bgt.n	800d666 <__multadd+0x12>
 800d68c:	b30e      	cbz	r6, 800d6d2 <__multadd+0x7e>
 800d68e:	68a3      	ldr	r3, [r4, #8]
 800d690:	42ab      	cmp	r3, r5
 800d692:	dc19      	bgt.n	800d6c8 <__multadd+0x74>
 800d694:	6861      	ldr	r1, [r4, #4]
 800d696:	4638      	mov	r0, r7
 800d698:	3101      	adds	r1, #1
 800d69a:	f7ff ff79 	bl	800d590 <_Balloc>
 800d69e:	4680      	mov	r8, r0
 800d6a0:	b928      	cbnz	r0, 800d6ae <__multadd+0x5a>
 800d6a2:	4602      	mov	r2, r0
 800d6a4:	4b0c      	ldr	r3, [pc, #48]	; (800d6d8 <__multadd+0x84>)
 800d6a6:	480d      	ldr	r0, [pc, #52]	; (800d6dc <__multadd+0x88>)
 800d6a8:	21b5      	movs	r1, #181	; 0xb5
 800d6aa:	f000 fcbb 	bl	800e024 <__assert_func>
 800d6ae:	6922      	ldr	r2, [r4, #16]
 800d6b0:	3202      	adds	r2, #2
 800d6b2:	f104 010c 	add.w	r1, r4, #12
 800d6b6:	0092      	lsls	r2, r2, #2
 800d6b8:	300c      	adds	r0, #12
 800d6ba:	f7ff ff4f 	bl	800d55c <memcpy>
 800d6be:	4621      	mov	r1, r4
 800d6c0:	4638      	mov	r0, r7
 800d6c2:	f7ff ffa5 	bl	800d610 <_Bfree>
 800d6c6:	4644      	mov	r4, r8
 800d6c8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d6cc:	3501      	adds	r5, #1
 800d6ce:	615e      	str	r6, [r3, #20]
 800d6d0:	6125      	str	r5, [r4, #16]
 800d6d2:	4620      	mov	r0, r4
 800d6d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6d8:	0800e423 	.word	0x0800e423
 800d6dc:	0800e494 	.word	0x0800e494

0800d6e0 <__hi0bits>:
 800d6e0:	0c03      	lsrs	r3, r0, #16
 800d6e2:	041b      	lsls	r3, r3, #16
 800d6e4:	b9d3      	cbnz	r3, 800d71c <__hi0bits+0x3c>
 800d6e6:	0400      	lsls	r0, r0, #16
 800d6e8:	2310      	movs	r3, #16
 800d6ea:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d6ee:	bf04      	itt	eq
 800d6f0:	0200      	lsleq	r0, r0, #8
 800d6f2:	3308      	addeq	r3, #8
 800d6f4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d6f8:	bf04      	itt	eq
 800d6fa:	0100      	lsleq	r0, r0, #4
 800d6fc:	3304      	addeq	r3, #4
 800d6fe:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d702:	bf04      	itt	eq
 800d704:	0080      	lsleq	r0, r0, #2
 800d706:	3302      	addeq	r3, #2
 800d708:	2800      	cmp	r0, #0
 800d70a:	db05      	blt.n	800d718 <__hi0bits+0x38>
 800d70c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d710:	f103 0301 	add.w	r3, r3, #1
 800d714:	bf08      	it	eq
 800d716:	2320      	moveq	r3, #32
 800d718:	4618      	mov	r0, r3
 800d71a:	4770      	bx	lr
 800d71c:	2300      	movs	r3, #0
 800d71e:	e7e4      	b.n	800d6ea <__hi0bits+0xa>

0800d720 <__lo0bits>:
 800d720:	6803      	ldr	r3, [r0, #0]
 800d722:	f013 0207 	ands.w	r2, r3, #7
 800d726:	4601      	mov	r1, r0
 800d728:	d00b      	beq.n	800d742 <__lo0bits+0x22>
 800d72a:	07da      	lsls	r2, r3, #31
 800d72c:	d423      	bmi.n	800d776 <__lo0bits+0x56>
 800d72e:	0798      	lsls	r0, r3, #30
 800d730:	bf49      	itett	mi
 800d732:	085b      	lsrmi	r3, r3, #1
 800d734:	089b      	lsrpl	r3, r3, #2
 800d736:	2001      	movmi	r0, #1
 800d738:	600b      	strmi	r3, [r1, #0]
 800d73a:	bf5c      	itt	pl
 800d73c:	600b      	strpl	r3, [r1, #0]
 800d73e:	2002      	movpl	r0, #2
 800d740:	4770      	bx	lr
 800d742:	b298      	uxth	r0, r3
 800d744:	b9a8      	cbnz	r0, 800d772 <__lo0bits+0x52>
 800d746:	0c1b      	lsrs	r3, r3, #16
 800d748:	2010      	movs	r0, #16
 800d74a:	b2da      	uxtb	r2, r3
 800d74c:	b90a      	cbnz	r2, 800d752 <__lo0bits+0x32>
 800d74e:	3008      	adds	r0, #8
 800d750:	0a1b      	lsrs	r3, r3, #8
 800d752:	071a      	lsls	r2, r3, #28
 800d754:	bf04      	itt	eq
 800d756:	091b      	lsreq	r3, r3, #4
 800d758:	3004      	addeq	r0, #4
 800d75a:	079a      	lsls	r2, r3, #30
 800d75c:	bf04      	itt	eq
 800d75e:	089b      	lsreq	r3, r3, #2
 800d760:	3002      	addeq	r0, #2
 800d762:	07da      	lsls	r2, r3, #31
 800d764:	d403      	bmi.n	800d76e <__lo0bits+0x4e>
 800d766:	085b      	lsrs	r3, r3, #1
 800d768:	f100 0001 	add.w	r0, r0, #1
 800d76c:	d005      	beq.n	800d77a <__lo0bits+0x5a>
 800d76e:	600b      	str	r3, [r1, #0]
 800d770:	4770      	bx	lr
 800d772:	4610      	mov	r0, r2
 800d774:	e7e9      	b.n	800d74a <__lo0bits+0x2a>
 800d776:	2000      	movs	r0, #0
 800d778:	4770      	bx	lr
 800d77a:	2020      	movs	r0, #32
 800d77c:	4770      	bx	lr
	...

0800d780 <__i2b>:
 800d780:	b510      	push	{r4, lr}
 800d782:	460c      	mov	r4, r1
 800d784:	2101      	movs	r1, #1
 800d786:	f7ff ff03 	bl	800d590 <_Balloc>
 800d78a:	4602      	mov	r2, r0
 800d78c:	b928      	cbnz	r0, 800d79a <__i2b+0x1a>
 800d78e:	4b05      	ldr	r3, [pc, #20]	; (800d7a4 <__i2b+0x24>)
 800d790:	4805      	ldr	r0, [pc, #20]	; (800d7a8 <__i2b+0x28>)
 800d792:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d796:	f000 fc45 	bl	800e024 <__assert_func>
 800d79a:	2301      	movs	r3, #1
 800d79c:	6144      	str	r4, [r0, #20]
 800d79e:	6103      	str	r3, [r0, #16]
 800d7a0:	bd10      	pop	{r4, pc}
 800d7a2:	bf00      	nop
 800d7a4:	0800e423 	.word	0x0800e423
 800d7a8:	0800e494 	.word	0x0800e494

0800d7ac <__multiply>:
 800d7ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7b0:	4691      	mov	r9, r2
 800d7b2:	690a      	ldr	r2, [r1, #16]
 800d7b4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d7b8:	429a      	cmp	r2, r3
 800d7ba:	bfb8      	it	lt
 800d7bc:	460b      	movlt	r3, r1
 800d7be:	460c      	mov	r4, r1
 800d7c0:	bfbc      	itt	lt
 800d7c2:	464c      	movlt	r4, r9
 800d7c4:	4699      	movlt	r9, r3
 800d7c6:	6927      	ldr	r7, [r4, #16]
 800d7c8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d7cc:	68a3      	ldr	r3, [r4, #8]
 800d7ce:	6861      	ldr	r1, [r4, #4]
 800d7d0:	eb07 060a 	add.w	r6, r7, sl
 800d7d4:	42b3      	cmp	r3, r6
 800d7d6:	b085      	sub	sp, #20
 800d7d8:	bfb8      	it	lt
 800d7da:	3101      	addlt	r1, #1
 800d7dc:	f7ff fed8 	bl	800d590 <_Balloc>
 800d7e0:	b930      	cbnz	r0, 800d7f0 <__multiply+0x44>
 800d7e2:	4602      	mov	r2, r0
 800d7e4:	4b44      	ldr	r3, [pc, #272]	; (800d8f8 <__multiply+0x14c>)
 800d7e6:	4845      	ldr	r0, [pc, #276]	; (800d8fc <__multiply+0x150>)
 800d7e8:	f240 115d 	movw	r1, #349	; 0x15d
 800d7ec:	f000 fc1a 	bl	800e024 <__assert_func>
 800d7f0:	f100 0514 	add.w	r5, r0, #20
 800d7f4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d7f8:	462b      	mov	r3, r5
 800d7fa:	2200      	movs	r2, #0
 800d7fc:	4543      	cmp	r3, r8
 800d7fe:	d321      	bcc.n	800d844 <__multiply+0x98>
 800d800:	f104 0314 	add.w	r3, r4, #20
 800d804:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d808:	f109 0314 	add.w	r3, r9, #20
 800d80c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d810:	9202      	str	r2, [sp, #8]
 800d812:	1b3a      	subs	r2, r7, r4
 800d814:	3a15      	subs	r2, #21
 800d816:	f022 0203 	bic.w	r2, r2, #3
 800d81a:	3204      	adds	r2, #4
 800d81c:	f104 0115 	add.w	r1, r4, #21
 800d820:	428f      	cmp	r7, r1
 800d822:	bf38      	it	cc
 800d824:	2204      	movcc	r2, #4
 800d826:	9201      	str	r2, [sp, #4]
 800d828:	9a02      	ldr	r2, [sp, #8]
 800d82a:	9303      	str	r3, [sp, #12]
 800d82c:	429a      	cmp	r2, r3
 800d82e:	d80c      	bhi.n	800d84a <__multiply+0x9e>
 800d830:	2e00      	cmp	r6, #0
 800d832:	dd03      	ble.n	800d83c <__multiply+0x90>
 800d834:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d05a      	beq.n	800d8f2 <__multiply+0x146>
 800d83c:	6106      	str	r6, [r0, #16]
 800d83e:	b005      	add	sp, #20
 800d840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d844:	f843 2b04 	str.w	r2, [r3], #4
 800d848:	e7d8      	b.n	800d7fc <__multiply+0x50>
 800d84a:	f8b3 a000 	ldrh.w	sl, [r3]
 800d84e:	f1ba 0f00 	cmp.w	sl, #0
 800d852:	d024      	beq.n	800d89e <__multiply+0xf2>
 800d854:	f104 0e14 	add.w	lr, r4, #20
 800d858:	46a9      	mov	r9, r5
 800d85a:	f04f 0c00 	mov.w	ip, #0
 800d85e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d862:	f8d9 1000 	ldr.w	r1, [r9]
 800d866:	fa1f fb82 	uxth.w	fp, r2
 800d86a:	b289      	uxth	r1, r1
 800d86c:	fb0a 110b 	mla	r1, sl, fp, r1
 800d870:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d874:	f8d9 2000 	ldr.w	r2, [r9]
 800d878:	4461      	add	r1, ip
 800d87a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d87e:	fb0a c20b 	mla	r2, sl, fp, ip
 800d882:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d886:	b289      	uxth	r1, r1
 800d888:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d88c:	4577      	cmp	r7, lr
 800d88e:	f849 1b04 	str.w	r1, [r9], #4
 800d892:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d896:	d8e2      	bhi.n	800d85e <__multiply+0xb2>
 800d898:	9a01      	ldr	r2, [sp, #4]
 800d89a:	f845 c002 	str.w	ip, [r5, r2]
 800d89e:	9a03      	ldr	r2, [sp, #12]
 800d8a0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d8a4:	3304      	adds	r3, #4
 800d8a6:	f1b9 0f00 	cmp.w	r9, #0
 800d8aa:	d020      	beq.n	800d8ee <__multiply+0x142>
 800d8ac:	6829      	ldr	r1, [r5, #0]
 800d8ae:	f104 0c14 	add.w	ip, r4, #20
 800d8b2:	46ae      	mov	lr, r5
 800d8b4:	f04f 0a00 	mov.w	sl, #0
 800d8b8:	f8bc b000 	ldrh.w	fp, [ip]
 800d8bc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d8c0:	fb09 220b 	mla	r2, r9, fp, r2
 800d8c4:	4492      	add	sl, r2
 800d8c6:	b289      	uxth	r1, r1
 800d8c8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800d8cc:	f84e 1b04 	str.w	r1, [lr], #4
 800d8d0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d8d4:	f8be 1000 	ldrh.w	r1, [lr]
 800d8d8:	0c12      	lsrs	r2, r2, #16
 800d8da:	fb09 1102 	mla	r1, r9, r2, r1
 800d8de:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800d8e2:	4567      	cmp	r7, ip
 800d8e4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d8e8:	d8e6      	bhi.n	800d8b8 <__multiply+0x10c>
 800d8ea:	9a01      	ldr	r2, [sp, #4]
 800d8ec:	50a9      	str	r1, [r5, r2]
 800d8ee:	3504      	adds	r5, #4
 800d8f0:	e79a      	b.n	800d828 <__multiply+0x7c>
 800d8f2:	3e01      	subs	r6, #1
 800d8f4:	e79c      	b.n	800d830 <__multiply+0x84>
 800d8f6:	bf00      	nop
 800d8f8:	0800e423 	.word	0x0800e423
 800d8fc:	0800e494 	.word	0x0800e494

0800d900 <__pow5mult>:
 800d900:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d904:	4615      	mov	r5, r2
 800d906:	f012 0203 	ands.w	r2, r2, #3
 800d90a:	4606      	mov	r6, r0
 800d90c:	460f      	mov	r7, r1
 800d90e:	d007      	beq.n	800d920 <__pow5mult+0x20>
 800d910:	4c25      	ldr	r4, [pc, #148]	; (800d9a8 <__pow5mult+0xa8>)
 800d912:	3a01      	subs	r2, #1
 800d914:	2300      	movs	r3, #0
 800d916:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d91a:	f7ff fe9b 	bl	800d654 <__multadd>
 800d91e:	4607      	mov	r7, r0
 800d920:	10ad      	asrs	r5, r5, #2
 800d922:	d03d      	beq.n	800d9a0 <__pow5mult+0xa0>
 800d924:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d926:	b97c      	cbnz	r4, 800d948 <__pow5mult+0x48>
 800d928:	2010      	movs	r0, #16
 800d92a:	f7fd febf 	bl	800b6ac <malloc>
 800d92e:	4602      	mov	r2, r0
 800d930:	6270      	str	r0, [r6, #36]	; 0x24
 800d932:	b928      	cbnz	r0, 800d940 <__pow5mult+0x40>
 800d934:	4b1d      	ldr	r3, [pc, #116]	; (800d9ac <__pow5mult+0xac>)
 800d936:	481e      	ldr	r0, [pc, #120]	; (800d9b0 <__pow5mult+0xb0>)
 800d938:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d93c:	f000 fb72 	bl	800e024 <__assert_func>
 800d940:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d944:	6004      	str	r4, [r0, #0]
 800d946:	60c4      	str	r4, [r0, #12]
 800d948:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d94c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d950:	b94c      	cbnz	r4, 800d966 <__pow5mult+0x66>
 800d952:	f240 2171 	movw	r1, #625	; 0x271
 800d956:	4630      	mov	r0, r6
 800d958:	f7ff ff12 	bl	800d780 <__i2b>
 800d95c:	2300      	movs	r3, #0
 800d95e:	f8c8 0008 	str.w	r0, [r8, #8]
 800d962:	4604      	mov	r4, r0
 800d964:	6003      	str	r3, [r0, #0]
 800d966:	f04f 0900 	mov.w	r9, #0
 800d96a:	07eb      	lsls	r3, r5, #31
 800d96c:	d50a      	bpl.n	800d984 <__pow5mult+0x84>
 800d96e:	4639      	mov	r1, r7
 800d970:	4622      	mov	r2, r4
 800d972:	4630      	mov	r0, r6
 800d974:	f7ff ff1a 	bl	800d7ac <__multiply>
 800d978:	4639      	mov	r1, r7
 800d97a:	4680      	mov	r8, r0
 800d97c:	4630      	mov	r0, r6
 800d97e:	f7ff fe47 	bl	800d610 <_Bfree>
 800d982:	4647      	mov	r7, r8
 800d984:	106d      	asrs	r5, r5, #1
 800d986:	d00b      	beq.n	800d9a0 <__pow5mult+0xa0>
 800d988:	6820      	ldr	r0, [r4, #0]
 800d98a:	b938      	cbnz	r0, 800d99c <__pow5mult+0x9c>
 800d98c:	4622      	mov	r2, r4
 800d98e:	4621      	mov	r1, r4
 800d990:	4630      	mov	r0, r6
 800d992:	f7ff ff0b 	bl	800d7ac <__multiply>
 800d996:	6020      	str	r0, [r4, #0]
 800d998:	f8c0 9000 	str.w	r9, [r0]
 800d99c:	4604      	mov	r4, r0
 800d99e:	e7e4      	b.n	800d96a <__pow5mult+0x6a>
 800d9a0:	4638      	mov	r0, r7
 800d9a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d9a6:	bf00      	nop
 800d9a8:	0800e5e0 	.word	0x0800e5e0
 800d9ac:	0800e3b1 	.word	0x0800e3b1
 800d9b0:	0800e494 	.word	0x0800e494

0800d9b4 <__lshift>:
 800d9b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d9b8:	460c      	mov	r4, r1
 800d9ba:	6849      	ldr	r1, [r1, #4]
 800d9bc:	6923      	ldr	r3, [r4, #16]
 800d9be:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d9c2:	68a3      	ldr	r3, [r4, #8]
 800d9c4:	4607      	mov	r7, r0
 800d9c6:	4691      	mov	r9, r2
 800d9c8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d9cc:	f108 0601 	add.w	r6, r8, #1
 800d9d0:	42b3      	cmp	r3, r6
 800d9d2:	db0b      	blt.n	800d9ec <__lshift+0x38>
 800d9d4:	4638      	mov	r0, r7
 800d9d6:	f7ff fddb 	bl	800d590 <_Balloc>
 800d9da:	4605      	mov	r5, r0
 800d9dc:	b948      	cbnz	r0, 800d9f2 <__lshift+0x3e>
 800d9de:	4602      	mov	r2, r0
 800d9e0:	4b2a      	ldr	r3, [pc, #168]	; (800da8c <__lshift+0xd8>)
 800d9e2:	482b      	ldr	r0, [pc, #172]	; (800da90 <__lshift+0xdc>)
 800d9e4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d9e8:	f000 fb1c 	bl	800e024 <__assert_func>
 800d9ec:	3101      	adds	r1, #1
 800d9ee:	005b      	lsls	r3, r3, #1
 800d9f0:	e7ee      	b.n	800d9d0 <__lshift+0x1c>
 800d9f2:	2300      	movs	r3, #0
 800d9f4:	f100 0114 	add.w	r1, r0, #20
 800d9f8:	f100 0210 	add.w	r2, r0, #16
 800d9fc:	4618      	mov	r0, r3
 800d9fe:	4553      	cmp	r3, sl
 800da00:	db37      	blt.n	800da72 <__lshift+0xbe>
 800da02:	6920      	ldr	r0, [r4, #16]
 800da04:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800da08:	f104 0314 	add.w	r3, r4, #20
 800da0c:	f019 091f 	ands.w	r9, r9, #31
 800da10:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800da14:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800da18:	d02f      	beq.n	800da7a <__lshift+0xc6>
 800da1a:	f1c9 0e20 	rsb	lr, r9, #32
 800da1e:	468a      	mov	sl, r1
 800da20:	f04f 0c00 	mov.w	ip, #0
 800da24:	681a      	ldr	r2, [r3, #0]
 800da26:	fa02 f209 	lsl.w	r2, r2, r9
 800da2a:	ea42 020c 	orr.w	r2, r2, ip
 800da2e:	f84a 2b04 	str.w	r2, [sl], #4
 800da32:	f853 2b04 	ldr.w	r2, [r3], #4
 800da36:	4298      	cmp	r0, r3
 800da38:	fa22 fc0e 	lsr.w	ip, r2, lr
 800da3c:	d8f2      	bhi.n	800da24 <__lshift+0x70>
 800da3e:	1b03      	subs	r3, r0, r4
 800da40:	3b15      	subs	r3, #21
 800da42:	f023 0303 	bic.w	r3, r3, #3
 800da46:	3304      	adds	r3, #4
 800da48:	f104 0215 	add.w	r2, r4, #21
 800da4c:	4290      	cmp	r0, r2
 800da4e:	bf38      	it	cc
 800da50:	2304      	movcc	r3, #4
 800da52:	f841 c003 	str.w	ip, [r1, r3]
 800da56:	f1bc 0f00 	cmp.w	ip, #0
 800da5a:	d001      	beq.n	800da60 <__lshift+0xac>
 800da5c:	f108 0602 	add.w	r6, r8, #2
 800da60:	3e01      	subs	r6, #1
 800da62:	4638      	mov	r0, r7
 800da64:	612e      	str	r6, [r5, #16]
 800da66:	4621      	mov	r1, r4
 800da68:	f7ff fdd2 	bl	800d610 <_Bfree>
 800da6c:	4628      	mov	r0, r5
 800da6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da72:	f842 0f04 	str.w	r0, [r2, #4]!
 800da76:	3301      	adds	r3, #1
 800da78:	e7c1      	b.n	800d9fe <__lshift+0x4a>
 800da7a:	3904      	subs	r1, #4
 800da7c:	f853 2b04 	ldr.w	r2, [r3], #4
 800da80:	f841 2f04 	str.w	r2, [r1, #4]!
 800da84:	4298      	cmp	r0, r3
 800da86:	d8f9      	bhi.n	800da7c <__lshift+0xc8>
 800da88:	e7ea      	b.n	800da60 <__lshift+0xac>
 800da8a:	bf00      	nop
 800da8c:	0800e423 	.word	0x0800e423
 800da90:	0800e494 	.word	0x0800e494

0800da94 <__mcmp>:
 800da94:	b530      	push	{r4, r5, lr}
 800da96:	6902      	ldr	r2, [r0, #16]
 800da98:	690c      	ldr	r4, [r1, #16]
 800da9a:	1b12      	subs	r2, r2, r4
 800da9c:	d10e      	bne.n	800dabc <__mcmp+0x28>
 800da9e:	f100 0314 	add.w	r3, r0, #20
 800daa2:	3114      	adds	r1, #20
 800daa4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800daa8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800daac:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800dab0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800dab4:	42a5      	cmp	r5, r4
 800dab6:	d003      	beq.n	800dac0 <__mcmp+0x2c>
 800dab8:	d305      	bcc.n	800dac6 <__mcmp+0x32>
 800daba:	2201      	movs	r2, #1
 800dabc:	4610      	mov	r0, r2
 800dabe:	bd30      	pop	{r4, r5, pc}
 800dac0:	4283      	cmp	r3, r0
 800dac2:	d3f3      	bcc.n	800daac <__mcmp+0x18>
 800dac4:	e7fa      	b.n	800dabc <__mcmp+0x28>
 800dac6:	f04f 32ff 	mov.w	r2, #4294967295
 800daca:	e7f7      	b.n	800dabc <__mcmp+0x28>

0800dacc <__mdiff>:
 800dacc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dad0:	460c      	mov	r4, r1
 800dad2:	4606      	mov	r6, r0
 800dad4:	4611      	mov	r1, r2
 800dad6:	4620      	mov	r0, r4
 800dad8:	4690      	mov	r8, r2
 800dada:	f7ff ffdb 	bl	800da94 <__mcmp>
 800dade:	1e05      	subs	r5, r0, #0
 800dae0:	d110      	bne.n	800db04 <__mdiff+0x38>
 800dae2:	4629      	mov	r1, r5
 800dae4:	4630      	mov	r0, r6
 800dae6:	f7ff fd53 	bl	800d590 <_Balloc>
 800daea:	b930      	cbnz	r0, 800dafa <__mdiff+0x2e>
 800daec:	4b3a      	ldr	r3, [pc, #232]	; (800dbd8 <__mdiff+0x10c>)
 800daee:	4602      	mov	r2, r0
 800daf0:	f240 2132 	movw	r1, #562	; 0x232
 800daf4:	4839      	ldr	r0, [pc, #228]	; (800dbdc <__mdiff+0x110>)
 800daf6:	f000 fa95 	bl	800e024 <__assert_func>
 800dafa:	2301      	movs	r3, #1
 800dafc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800db00:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db04:	bfa4      	itt	ge
 800db06:	4643      	movge	r3, r8
 800db08:	46a0      	movge	r8, r4
 800db0a:	4630      	mov	r0, r6
 800db0c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800db10:	bfa6      	itte	ge
 800db12:	461c      	movge	r4, r3
 800db14:	2500      	movge	r5, #0
 800db16:	2501      	movlt	r5, #1
 800db18:	f7ff fd3a 	bl	800d590 <_Balloc>
 800db1c:	b920      	cbnz	r0, 800db28 <__mdiff+0x5c>
 800db1e:	4b2e      	ldr	r3, [pc, #184]	; (800dbd8 <__mdiff+0x10c>)
 800db20:	4602      	mov	r2, r0
 800db22:	f44f 7110 	mov.w	r1, #576	; 0x240
 800db26:	e7e5      	b.n	800daf4 <__mdiff+0x28>
 800db28:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800db2c:	6926      	ldr	r6, [r4, #16]
 800db2e:	60c5      	str	r5, [r0, #12]
 800db30:	f104 0914 	add.w	r9, r4, #20
 800db34:	f108 0514 	add.w	r5, r8, #20
 800db38:	f100 0e14 	add.w	lr, r0, #20
 800db3c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800db40:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800db44:	f108 0210 	add.w	r2, r8, #16
 800db48:	46f2      	mov	sl, lr
 800db4a:	2100      	movs	r1, #0
 800db4c:	f859 3b04 	ldr.w	r3, [r9], #4
 800db50:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800db54:	fa1f f883 	uxth.w	r8, r3
 800db58:	fa11 f18b 	uxtah	r1, r1, fp
 800db5c:	0c1b      	lsrs	r3, r3, #16
 800db5e:	eba1 0808 	sub.w	r8, r1, r8
 800db62:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800db66:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800db6a:	fa1f f888 	uxth.w	r8, r8
 800db6e:	1419      	asrs	r1, r3, #16
 800db70:	454e      	cmp	r6, r9
 800db72:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800db76:	f84a 3b04 	str.w	r3, [sl], #4
 800db7a:	d8e7      	bhi.n	800db4c <__mdiff+0x80>
 800db7c:	1b33      	subs	r3, r6, r4
 800db7e:	3b15      	subs	r3, #21
 800db80:	f023 0303 	bic.w	r3, r3, #3
 800db84:	3304      	adds	r3, #4
 800db86:	3415      	adds	r4, #21
 800db88:	42a6      	cmp	r6, r4
 800db8a:	bf38      	it	cc
 800db8c:	2304      	movcc	r3, #4
 800db8e:	441d      	add	r5, r3
 800db90:	4473      	add	r3, lr
 800db92:	469e      	mov	lr, r3
 800db94:	462e      	mov	r6, r5
 800db96:	4566      	cmp	r6, ip
 800db98:	d30e      	bcc.n	800dbb8 <__mdiff+0xec>
 800db9a:	f10c 0203 	add.w	r2, ip, #3
 800db9e:	1b52      	subs	r2, r2, r5
 800dba0:	f022 0203 	bic.w	r2, r2, #3
 800dba4:	3d03      	subs	r5, #3
 800dba6:	45ac      	cmp	ip, r5
 800dba8:	bf38      	it	cc
 800dbaa:	2200      	movcc	r2, #0
 800dbac:	441a      	add	r2, r3
 800dbae:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800dbb2:	b17b      	cbz	r3, 800dbd4 <__mdiff+0x108>
 800dbb4:	6107      	str	r7, [r0, #16]
 800dbb6:	e7a3      	b.n	800db00 <__mdiff+0x34>
 800dbb8:	f856 8b04 	ldr.w	r8, [r6], #4
 800dbbc:	fa11 f288 	uxtah	r2, r1, r8
 800dbc0:	1414      	asrs	r4, r2, #16
 800dbc2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800dbc6:	b292      	uxth	r2, r2
 800dbc8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800dbcc:	f84e 2b04 	str.w	r2, [lr], #4
 800dbd0:	1421      	asrs	r1, r4, #16
 800dbd2:	e7e0      	b.n	800db96 <__mdiff+0xca>
 800dbd4:	3f01      	subs	r7, #1
 800dbd6:	e7ea      	b.n	800dbae <__mdiff+0xe2>
 800dbd8:	0800e423 	.word	0x0800e423
 800dbdc:	0800e494 	.word	0x0800e494

0800dbe0 <__d2b>:
 800dbe0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dbe4:	4689      	mov	r9, r1
 800dbe6:	2101      	movs	r1, #1
 800dbe8:	ec57 6b10 	vmov	r6, r7, d0
 800dbec:	4690      	mov	r8, r2
 800dbee:	f7ff fccf 	bl	800d590 <_Balloc>
 800dbf2:	4604      	mov	r4, r0
 800dbf4:	b930      	cbnz	r0, 800dc04 <__d2b+0x24>
 800dbf6:	4602      	mov	r2, r0
 800dbf8:	4b25      	ldr	r3, [pc, #148]	; (800dc90 <__d2b+0xb0>)
 800dbfa:	4826      	ldr	r0, [pc, #152]	; (800dc94 <__d2b+0xb4>)
 800dbfc:	f240 310a 	movw	r1, #778	; 0x30a
 800dc00:	f000 fa10 	bl	800e024 <__assert_func>
 800dc04:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800dc08:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800dc0c:	bb35      	cbnz	r5, 800dc5c <__d2b+0x7c>
 800dc0e:	2e00      	cmp	r6, #0
 800dc10:	9301      	str	r3, [sp, #4]
 800dc12:	d028      	beq.n	800dc66 <__d2b+0x86>
 800dc14:	4668      	mov	r0, sp
 800dc16:	9600      	str	r6, [sp, #0]
 800dc18:	f7ff fd82 	bl	800d720 <__lo0bits>
 800dc1c:	9900      	ldr	r1, [sp, #0]
 800dc1e:	b300      	cbz	r0, 800dc62 <__d2b+0x82>
 800dc20:	9a01      	ldr	r2, [sp, #4]
 800dc22:	f1c0 0320 	rsb	r3, r0, #32
 800dc26:	fa02 f303 	lsl.w	r3, r2, r3
 800dc2a:	430b      	orrs	r3, r1
 800dc2c:	40c2      	lsrs	r2, r0
 800dc2e:	6163      	str	r3, [r4, #20]
 800dc30:	9201      	str	r2, [sp, #4]
 800dc32:	9b01      	ldr	r3, [sp, #4]
 800dc34:	61a3      	str	r3, [r4, #24]
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	bf14      	ite	ne
 800dc3a:	2202      	movne	r2, #2
 800dc3c:	2201      	moveq	r2, #1
 800dc3e:	6122      	str	r2, [r4, #16]
 800dc40:	b1d5      	cbz	r5, 800dc78 <__d2b+0x98>
 800dc42:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800dc46:	4405      	add	r5, r0
 800dc48:	f8c9 5000 	str.w	r5, [r9]
 800dc4c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800dc50:	f8c8 0000 	str.w	r0, [r8]
 800dc54:	4620      	mov	r0, r4
 800dc56:	b003      	add	sp, #12
 800dc58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dc5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dc60:	e7d5      	b.n	800dc0e <__d2b+0x2e>
 800dc62:	6161      	str	r1, [r4, #20]
 800dc64:	e7e5      	b.n	800dc32 <__d2b+0x52>
 800dc66:	a801      	add	r0, sp, #4
 800dc68:	f7ff fd5a 	bl	800d720 <__lo0bits>
 800dc6c:	9b01      	ldr	r3, [sp, #4]
 800dc6e:	6163      	str	r3, [r4, #20]
 800dc70:	2201      	movs	r2, #1
 800dc72:	6122      	str	r2, [r4, #16]
 800dc74:	3020      	adds	r0, #32
 800dc76:	e7e3      	b.n	800dc40 <__d2b+0x60>
 800dc78:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800dc7c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800dc80:	f8c9 0000 	str.w	r0, [r9]
 800dc84:	6918      	ldr	r0, [r3, #16]
 800dc86:	f7ff fd2b 	bl	800d6e0 <__hi0bits>
 800dc8a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800dc8e:	e7df      	b.n	800dc50 <__d2b+0x70>
 800dc90:	0800e423 	.word	0x0800e423
 800dc94:	0800e494 	.word	0x0800e494

0800dc98 <_calloc_r>:
 800dc98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dc9a:	fba1 2402 	umull	r2, r4, r1, r2
 800dc9e:	b94c      	cbnz	r4, 800dcb4 <_calloc_r+0x1c>
 800dca0:	4611      	mov	r1, r2
 800dca2:	9201      	str	r2, [sp, #4]
 800dca4:	f7fd fd7e 	bl	800b7a4 <_malloc_r>
 800dca8:	9a01      	ldr	r2, [sp, #4]
 800dcaa:	4605      	mov	r5, r0
 800dcac:	b930      	cbnz	r0, 800dcbc <_calloc_r+0x24>
 800dcae:	4628      	mov	r0, r5
 800dcb0:	b003      	add	sp, #12
 800dcb2:	bd30      	pop	{r4, r5, pc}
 800dcb4:	220c      	movs	r2, #12
 800dcb6:	6002      	str	r2, [r0, #0]
 800dcb8:	2500      	movs	r5, #0
 800dcba:	e7f8      	b.n	800dcae <_calloc_r+0x16>
 800dcbc:	4621      	mov	r1, r4
 800dcbe:	f7fd fcfd 	bl	800b6bc <memset>
 800dcc2:	e7f4      	b.n	800dcae <_calloc_r+0x16>

0800dcc4 <__sfputc_r>:
 800dcc4:	6893      	ldr	r3, [r2, #8]
 800dcc6:	3b01      	subs	r3, #1
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	b410      	push	{r4}
 800dccc:	6093      	str	r3, [r2, #8]
 800dcce:	da08      	bge.n	800dce2 <__sfputc_r+0x1e>
 800dcd0:	6994      	ldr	r4, [r2, #24]
 800dcd2:	42a3      	cmp	r3, r4
 800dcd4:	db01      	blt.n	800dcda <__sfputc_r+0x16>
 800dcd6:	290a      	cmp	r1, #10
 800dcd8:	d103      	bne.n	800dce2 <__sfputc_r+0x1e>
 800dcda:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dcde:	f7fe badd 	b.w	800c29c <__swbuf_r>
 800dce2:	6813      	ldr	r3, [r2, #0]
 800dce4:	1c58      	adds	r0, r3, #1
 800dce6:	6010      	str	r0, [r2, #0]
 800dce8:	7019      	strb	r1, [r3, #0]
 800dcea:	4608      	mov	r0, r1
 800dcec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dcf0:	4770      	bx	lr

0800dcf2 <__sfputs_r>:
 800dcf2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcf4:	4606      	mov	r6, r0
 800dcf6:	460f      	mov	r7, r1
 800dcf8:	4614      	mov	r4, r2
 800dcfa:	18d5      	adds	r5, r2, r3
 800dcfc:	42ac      	cmp	r4, r5
 800dcfe:	d101      	bne.n	800dd04 <__sfputs_r+0x12>
 800dd00:	2000      	movs	r0, #0
 800dd02:	e007      	b.n	800dd14 <__sfputs_r+0x22>
 800dd04:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd08:	463a      	mov	r2, r7
 800dd0a:	4630      	mov	r0, r6
 800dd0c:	f7ff ffda 	bl	800dcc4 <__sfputc_r>
 800dd10:	1c43      	adds	r3, r0, #1
 800dd12:	d1f3      	bne.n	800dcfc <__sfputs_r+0xa>
 800dd14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dd18 <_vfiprintf_r>:
 800dd18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd1c:	460d      	mov	r5, r1
 800dd1e:	b09d      	sub	sp, #116	; 0x74
 800dd20:	4614      	mov	r4, r2
 800dd22:	4698      	mov	r8, r3
 800dd24:	4606      	mov	r6, r0
 800dd26:	b118      	cbz	r0, 800dd30 <_vfiprintf_r+0x18>
 800dd28:	6983      	ldr	r3, [r0, #24]
 800dd2a:	b90b      	cbnz	r3, 800dd30 <_vfiprintf_r+0x18>
 800dd2c:	f7ff fb0c 	bl	800d348 <__sinit>
 800dd30:	4b89      	ldr	r3, [pc, #548]	; (800df58 <_vfiprintf_r+0x240>)
 800dd32:	429d      	cmp	r5, r3
 800dd34:	d11b      	bne.n	800dd6e <_vfiprintf_r+0x56>
 800dd36:	6875      	ldr	r5, [r6, #4]
 800dd38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dd3a:	07d9      	lsls	r1, r3, #31
 800dd3c:	d405      	bmi.n	800dd4a <_vfiprintf_r+0x32>
 800dd3e:	89ab      	ldrh	r3, [r5, #12]
 800dd40:	059a      	lsls	r2, r3, #22
 800dd42:	d402      	bmi.n	800dd4a <_vfiprintf_r+0x32>
 800dd44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dd46:	f7ff fba2 	bl	800d48e <__retarget_lock_acquire_recursive>
 800dd4a:	89ab      	ldrh	r3, [r5, #12]
 800dd4c:	071b      	lsls	r3, r3, #28
 800dd4e:	d501      	bpl.n	800dd54 <_vfiprintf_r+0x3c>
 800dd50:	692b      	ldr	r3, [r5, #16]
 800dd52:	b9eb      	cbnz	r3, 800dd90 <_vfiprintf_r+0x78>
 800dd54:	4629      	mov	r1, r5
 800dd56:	4630      	mov	r0, r6
 800dd58:	f7fe faf2 	bl	800c340 <__swsetup_r>
 800dd5c:	b1c0      	cbz	r0, 800dd90 <_vfiprintf_r+0x78>
 800dd5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dd60:	07dc      	lsls	r4, r3, #31
 800dd62:	d50e      	bpl.n	800dd82 <_vfiprintf_r+0x6a>
 800dd64:	f04f 30ff 	mov.w	r0, #4294967295
 800dd68:	b01d      	add	sp, #116	; 0x74
 800dd6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd6e:	4b7b      	ldr	r3, [pc, #492]	; (800df5c <_vfiprintf_r+0x244>)
 800dd70:	429d      	cmp	r5, r3
 800dd72:	d101      	bne.n	800dd78 <_vfiprintf_r+0x60>
 800dd74:	68b5      	ldr	r5, [r6, #8]
 800dd76:	e7df      	b.n	800dd38 <_vfiprintf_r+0x20>
 800dd78:	4b79      	ldr	r3, [pc, #484]	; (800df60 <_vfiprintf_r+0x248>)
 800dd7a:	429d      	cmp	r5, r3
 800dd7c:	bf08      	it	eq
 800dd7e:	68f5      	ldreq	r5, [r6, #12]
 800dd80:	e7da      	b.n	800dd38 <_vfiprintf_r+0x20>
 800dd82:	89ab      	ldrh	r3, [r5, #12]
 800dd84:	0598      	lsls	r0, r3, #22
 800dd86:	d4ed      	bmi.n	800dd64 <_vfiprintf_r+0x4c>
 800dd88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dd8a:	f7ff fb81 	bl	800d490 <__retarget_lock_release_recursive>
 800dd8e:	e7e9      	b.n	800dd64 <_vfiprintf_r+0x4c>
 800dd90:	2300      	movs	r3, #0
 800dd92:	9309      	str	r3, [sp, #36]	; 0x24
 800dd94:	2320      	movs	r3, #32
 800dd96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dd9a:	f8cd 800c 	str.w	r8, [sp, #12]
 800dd9e:	2330      	movs	r3, #48	; 0x30
 800dda0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800df64 <_vfiprintf_r+0x24c>
 800dda4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dda8:	f04f 0901 	mov.w	r9, #1
 800ddac:	4623      	mov	r3, r4
 800ddae:	469a      	mov	sl, r3
 800ddb0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ddb4:	b10a      	cbz	r2, 800ddba <_vfiprintf_r+0xa2>
 800ddb6:	2a25      	cmp	r2, #37	; 0x25
 800ddb8:	d1f9      	bne.n	800ddae <_vfiprintf_r+0x96>
 800ddba:	ebba 0b04 	subs.w	fp, sl, r4
 800ddbe:	d00b      	beq.n	800ddd8 <_vfiprintf_r+0xc0>
 800ddc0:	465b      	mov	r3, fp
 800ddc2:	4622      	mov	r2, r4
 800ddc4:	4629      	mov	r1, r5
 800ddc6:	4630      	mov	r0, r6
 800ddc8:	f7ff ff93 	bl	800dcf2 <__sfputs_r>
 800ddcc:	3001      	adds	r0, #1
 800ddce:	f000 80aa 	beq.w	800df26 <_vfiprintf_r+0x20e>
 800ddd2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ddd4:	445a      	add	r2, fp
 800ddd6:	9209      	str	r2, [sp, #36]	; 0x24
 800ddd8:	f89a 3000 	ldrb.w	r3, [sl]
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	f000 80a2 	beq.w	800df26 <_vfiprintf_r+0x20e>
 800dde2:	2300      	movs	r3, #0
 800dde4:	f04f 32ff 	mov.w	r2, #4294967295
 800dde8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ddec:	f10a 0a01 	add.w	sl, sl, #1
 800ddf0:	9304      	str	r3, [sp, #16]
 800ddf2:	9307      	str	r3, [sp, #28]
 800ddf4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ddf8:	931a      	str	r3, [sp, #104]	; 0x68
 800ddfa:	4654      	mov	r4, sl
 800ddfc:	2205      	movs	r2, #5
 800ddfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de02:	4858      	ldr	r0, [pc, #352]	; (800df64 <_vfiprintf_r+0x24c>)
 800de04:	f7f2 fa04 	bl	8000210 <memchr>
 800de08:	9a04      	ldr	r2, [sp, #16]
 800de0a:	b9d8      	cbnz	r0, 800de44 <_vfiprintf_r+0x12c>
 800de0c:	06d1      	lsls	r1, r2, #27
 800de0e:	bf44      	itt	mi
 800de10:	2320      	movmi	r3, #32
 800de12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800de16:	0713      	lsls	r3, r2, #28
 800de18:	bf44      	itt	mi
 800de1a:	232b      	movmi	r3, #43	; 0x2b
 800de1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800de20:	f89a 3000 	ldrb.w	r3, [sl]
 800de24:	2b2a      	cmp	r3, #42	; 0x2a
 800de26:	d015      	beq.n	800de54 <_vfiprintf_r+0x13c>
 800de28:	9a07      	ldr	r2, [sp, #28]
 800de2a:	4654      	mov	r4, sl
 800de2c:	2000      	movs	r0, #0
 800de2e:	f04f 0c0a 	mov.w	ip, #10
 800de32:	4621      	mov	r1, r4
 800de34:	f811 3b01 	ldrb.w	r3, [r1], #1
 800de38:	3b30      	subs	r3, #48	; 0x30
 800de3a:	2b09      	cmp	r3, #9
 800de3c:	d94e      	bls.n	800dedc <_vfiprintf_r+0x1c4>
 800de3e:	b1b0      	cbz	r0, 800de6e <_vfiprintf_r+0x156>
 800de40:	9207      	str	r2, [sp, #28]
 800de42:	e014      	b.n	800de6e <_vfiprintf_r+0x156>
 800de44:	eba0 0308 	sub.w	r3, r0, r8
 800de48:	fa09 f303 	lsl.w	r3, r9, r3
 800de4c:	4313      	orrs	r3, r2
 800de4e:	9304      	str	r3, [sp, #16]
 800de50:	46a2      	mov	sl, r4
 800de52:	e7d2      	b.n	800ddfa <_vfiprintf_r+0xe2>
 800de54:	9b03      	ldr	r3, [sp, #12]
 800de56:	1d19      	adds	r1, r3, #4
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	9103      	str	r1, [sp, #12]
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	bfbb      	ittet	lt
 800de60:	425b      	neglt	r3, r3
 800de62:	f042 0202 	orrlt.w	r2, r2, #2
 800de66:	9307      	strge	r3, [sp, #28]
 800de68:	9307      	strlt	r3, [sp, #28]
 800de6a:	bfb8      	it	lt
 800de6c:	9204      	strlt	r2, [sp, #16]
 800de6e:	7823      	ldrb	r3, [r4, #0]
 800de70:	2b2e      	cmp	r3, #46	; 0x2e
 800de72:	d10c      	bne.n	800de8e <_vfiprintf_r+0x176>
 800de74:	7863      	ldrb	r3, [r4, #1]
 800de76:	2b2a      	cmp	r3, #42	; 0x2a
 800de78:	d135      	bne.n	800dee6 <_vfiprintf_r+0x1ce>
 800de7a:	9b03      	ldr	r3, [sp, #12]
 800de7c:	1d1a      	adds	r2, r3, #4
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	9203      	str	r2, [sp, #12]
 800de82:	2b00      	cmp	r3, #0
 800de84:	bfb8      	it	lt
 800de86:	f04f 33ff 	movlt.w	r3, #4294967295
 800de8a:	3402      	adds	r4, #2
 800de8c:	9305      	str	r3, [sp, #20]
 800de8e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800df74 <_vfiprintf_r+0x25c>
 800de92:	7821      	ldrb	r1, [r4, #0]
 800de94:	2203      	movs	r2, #3
 800de96:	4650      	mov	r0, sl
 800de98:	f7f2 f9ba 	bl	8000210 <memchr>
 800de9c:	b140      	cbz	r0, 800deb0 <_vfiprintf_r+0x198>
 800de9e:	2340      	movs	r3, #64	; 0x40
 800dea0:	eba0 000a 	sub.w	r0, r0, sl
 800dea4:	fa03 f000 	lsl.w	r0, r3, r0
 800dea8:	9b04      	ldr	r3, [sp, #16]
 800deaa:	4303      	orrs	r3, r0
 800deac:	3401      	adds	r4, #1
 800deae:	9304      	str	r3, [sp, #16]
 800deb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800deb4:	482c      	ldr	r0, [pc, #176]	; (800df68 <_vfiprintf_r+0x250>)
 800deb6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800deba:	2206      	movs	r2, #6
 800debc:	f7f2 f9a8 	bl	8000210 <memchr>
 800dec0:	2800      	cmp	r0, #0
 800dec2:	d03f      	beq.n	800df44 <_vfiprintf_r+0x22c>
 800dec4:	4b29      	ldr	r3, [pc, #164]	; (800df6c <_vfiprintf_r+0x254>)
 800dec6:	bb1b      	cbnz	r3, 800df10 <_vfiprintf_r+0x1f8>
 800dec8:	9b03      	ldr	r3, [sp, #12]
 800deca:	3307      	adds	r3, #7
 800decc:	f023 0307 	bic.w	r3, r3, #7
 800ded0:	3308      	adds	r3, #8
 800ded2:	9303      	str	r3, [sp, #12]
 800ded4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ded6:	443b      	add	r3, r7
 800ded8:	9309      	str	r3, [sp, #36]	; 0x24
 800deda:	e767      	b.n	800ddac <_vfiprintf_r+0x94>
 800dedc:	fb0c 3202 	mla	r2, ip, r2, r3
 800dee0:	460c      	mov	r4, r1
 800dee2:	2001      	movs	r0, #1
 800dee4:	e7a5      	b.n	800de32 <_vfiprintf_r+0x11a>
 800dee6:	2300      	movs	r3, #0
 800dee8:	3401      	adds	r4, #1
 800deea:	9305      	str	r3, [sp, #20]
 800deec:	4619      	mov	r1, r3
 800deee:	f04f 0c0a 	mov.w	ip, #10
 800def2:	4620      	mov	r0, r4
 800def4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800def8:	3a30      	subs	r2, #48	; 0x30
 800defa:	2a09      	cmp	r2, #9
 800defc:	d903      	bls.n	800df06 <_vfiprintf_r+0x1ee>
 800defe:	2b00      	cmp	r3, #0
 800df00:	d0c5      	beq.n	800de8e <_vfiprintf_r+0x176>
 800df02:	9105      	str	r1, [sp, #20]
 800df04:	e7c3      	b.n	800de8e <_vfiprintf_r+0x176>
 800df06:	fb0c 2101 	mla	r1, ip, r1, r2
 800df0a:	4604      	mov	r4, r0
 800df0c:	2301      	movs	r3, #1
 800df0e:	e7f0      	b.n	800def2 <_vfiprintf_r+0x1da>
 800df10:	ab03      	add	r3, sp, #12
 800df12:	9300      	str	r3, [sp, #0]
 800df14:	462a      	mov	r2, r5
 800df16:	4b16      	ldr	r3, [pc, #88]	; (800df70 <_vfiprintf_r+0x258>)
 800df18:	a904      	add	r1, sp, #16
 800df1a:	4630      	mov	r0, r6
 800df1c:	f7fd fd56 	bl	800b9cc <_printf_float>
 800df20:	4607      	mov	r7, r0
 800df22:	1c78      	adds	r0, r7, #1
 800df24:	d1d6      	bne.n	800ded4 <_vfiprintf_r+0x1bc>
 800df26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800df28:	07d9      	lsls	r1, r3, #31
 800df2a:	d405      	bmi.n	800df38 <_vfiprintf_r+0x220>
 800df2c:	89ab      	ldrh	r3, [r5, #12]
 800df2e:	059a      	lsls	r2, r3, #22
 800df30:	d402      	bmi.n	800df38 <_vfiprintf_r+0x220>
 800df32:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800df34:	f7ff faac 	bl	800d490 <__retarget_lock_release_recursive>
 800df38:	89ab      	ldrh	r3, [r5, #12]
 800df3a:	065b      	lsls	r3, r3, #25
 800df3c:	f53f af12 	bmi.w	800dd64 <_vfiprintf_r+0x4c>
 800df40:	9809      	ldr	r0, [sp, #36]	; 0x24
 800df42:	e711      	b.n	800dd68 <_vfiprintf_r+0x50>
 800df44:	ab03      	add	r3, sp, #12
 800df46:	9300      	str	r3, [sp, #0]
 800df48:	462a      	mov	r2, r5
 800df4a:	4b09      	ldr	r3, [pc, #36]	; (800df70 <_vfiprintf_r+0x258>)
 800df4c:	a904      	add	r1, sp, #16
 800df4e:	4630      	mov	r0, r6
 800df50:	f7fd ffe0 	bl	800bf14 <_printf_i>
 800df54:	e7e4      	b.n	800df20 <_vfiprintf_r+0x208>
 800df56:	bf00      	nop
 800df58:	0800e454 	.word	0x0800e454
 800df5c:	0800e474 	.word	0x0800e474
 800df60:	0800e434 	.word	0x0800e434
 800df64:	0800e5ec 	.word	0x0800e5ec
 800df68:	0800e5f6 	.word	0x0800e5f6
 800df6c:	0800b9cd 	.word	0x0800b9cd
 800df70:	0800dcf3 	.word	0x0800dcf3
 800df74:	0800e5f2 	.word	0x0800e5f2

0800df78 <__sread>:
 800df78:	b510      	push	{r4, lr}
 800df7a:	460c      	mov	r4, r1
 800df7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df80:	f000 f8d6 	bl	800e130 <_read_r>
 800df84:	2800      	cmp	r0, #0
 800df86:	bfab      	itete	ge
 800df88:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800df8a:	89a3      	ldrhlt	r3, [r4, #12]
 800df8c:	181b      	addge	r3, r3, r0
 800df8e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800df92:	bfac      	ite	ge
 800df94:	6563      	strge	r3, [r4, #84]	; 0x54
 800df96:	81a3      	strhlt	r3, [r4, #12]
 800df98:	bd10      	pop	{r4, pc}

0800df9a <__swrite>:
 800df9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df9e:	461f      	mov	r7, r3
 800dfa0:	898b      	ldrh	r3, [r1, #12]
 800dfa2:	05db      	lsls	r3, r3, #23
 800dfa4:	4605      	mov	r5, r0
 800dfa6:	460c      	mov	r4, r1
 800dfa8:	4616      	mov	r6, r2
 800dfaa:	d505      	bpl.n	800dfb8 <__swrite+0x1e>
 800dfac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dfb0:	2302      	movs	r3, #2
 800dfb2:	2200      	movs	r2, #0
 800dfb4:	f000 f898 	bl	800e0e8 <_lseek_r>
 800dfb8:	89a3      	ldrh	r3, [r4, #12]
 800dfba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dfbe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dfc2:	81a3      	strh	r3, [r4, #12]
 800dfc4:	4632      	mov	r2, r6
 800dfc6:	463b      	mov	r3, r7
 800dfc8:	4628      	mov	r0, r5
 800dfca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dfce:	f000 b817 	b.w	800e000 <_write_r>

0800dfd2 <__sseek>:
 800dfd2:	b510      	push	{r4, lr}
 800dfd4:	460c      	mov	r4, r1
 800dfd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dfda:	f000 f885 	bl	800e0e8 <_lseek_r>
 800dfde:	1c43      	adds	r3, r0, #1
 800dfe0:	89a3      	ldrh	r3, [r4, #12]
 800dfe2:	bf15      	itete	ne
 800dfe4:	6560      	strne	r0, [r4, #84]	; 0x54
 800dfe6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800dfea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800dfee:	81a3      	strheq	r3, [r4, #12]
 800dff0:	bf18      	it	ne
 800dff2:	81a3      	strhne	r3, [r4, #12]
 800dff4:	bd10      	pop	{r4, pc}

0800dff6 <__sclose>:
 800dff6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dffa:	f000 b831 	b.w	800e060 <_close_r>
	...

0800e000 <_write_r>:
 800e000:	b538      	push	{r3, r4, r5, lr}
 800e002:	4d07      	ldr	r5, [pc, #28]	; (800e020 <_write_r+0x20>)
 800e004:	4604      	mov	r4, r0
 800e006:	4608      	mov	r0, r1
 800e008:	4611      	mov	r1, r2
 800e00a:	2200      	movs	r2, #0
 800e00c:	602a      	str	r2, [r5, #0]
 800e00e:	461a      	mov	r2, r3
 800e010:	f7f5 fac9 	bl	80035a6 <_write>
 800e014:	1c43      	adds	r3, r0, #1
 800e016:	d102      	bne.n	800e01e <_write_r+0x1e>
 800e018:	682b      	ldr	r3, [r5, #0]
 800e01a:	b103      	cbz	r3, 800e01e <_write_r+0x1e>
 800e01c:	6023      	str	r3, [r4, #0]
 800e01e:	bd38      	pop	{r3, r4, r5, pc}
 800e020:	20000860 	.word	0x20000860

0800e024 <__assert_func>:
 800e024:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e026:	4614      	mov	r4, r2
 800e028:	461a      	mov	r2, r3
 800e02a:	4b09      	ldr	r3, [pc, #36]	; (800e050 <__assert_func+0x2c>)
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	4605      	mov	r5, r0
 800e030:	68d8      	ldr	r0, [r3, #12]
 800e032:	b14c      	cbz	r4, 800e048 <__assert_func+0x24>
 800e034:	4b07      	ldr	r3, [pc, #28]	; (800e054 <__assert_func+0x30>)
 800e036:	9100      	str	r1, [sp, #0]
 800e038:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e03c:	4906      	ldr	r1, [pc, #24]	; (800e058 <__assert_func+0x34>)
 800e03e:	462b      	mov	r3, r5
 800e040:	f000 f81e 	bl	800e080 <fiprintf>
 800e044:	f000 f893 	bl	800e16e <abort>
 800e048:	4b04      	ldr	r3, [pc, #16]	; (800e05c <__assert_func+0x38>)
 800e04a:	461c      	mov	r4, r3
 800e04c:	e7f3      	b.n	800e036 <__assert_func+0x12>
 800e04e:	bf00      	nop
 800e050:	20000014 	.word	0x20000014
 800e054:	0800e5fd 	.word	0x0800e5fd
 800e058:	0800e60a 	.word	0x0800e60a
 800e05c:	0800e638 	.word	0x0800e638

0800e060 <_close_r>:
 800e060:	b538      	push	{r3, r4, r5, lr}
 800e062:	4d06      	ldr	r5, [pc, #24]	; (800e07c <_close_r+0x1c>)
 800e064:	2300      	movs	r3, #0
 800e066:	4604      	mov	r4, r0
 800e068:	4608      	mov	r0, r1
 800e06a:	602b      	str	r3, [r5, #0]
 800e06c:	f7f5 fab7 	bl	80035de <_close>
 800e070:	1c43      	adds	r3, r0, #1
 800e072:	d102      	bne.n	800e07a <_close_r+0x1a>
 800e074:	682b      	ldr	r3, [r5, #0]
 800e076:	b103      	cbz	r3, 800e07a <_close_r+0x1a>
 800e078:	6023      	str	r3, [r4, #0]
 800e07a:	bd38      	pop	{r3, r4, r5, pc}
 800e07c:	20000860 	.word	0x20000860

0800e080 <fiprintf>:
 800e080:	b40e      	push	{r1, r2, r3}
 800e082:	b503      	push	{r0, r1, lr}
 800e084:	4601      	mov	r1, r0
 800e086:	ab03      	add	r3, sp, #12
 800e088:	4805      	ldr	r0, [pc, #20]	; (800e0a0 <fiprintf+0x20>)
 800e08a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e08e:	6800      	ldr	r0, [r0, #0]
 800e090:	9301      	str	r3, [sp, #4]
 800e092:	f7ff fe41 	bl	800dd18 <_vfiprintf_r>
 800e096:	b002      	add	sp, #8
 800e098:	f85d eb04 	ldr.w	lr, [sp], #4
 800e09c:	b003      	add	sp, #12
 800e09e:	4770      	bx	lr
 800e0a0:	20000014 	.word	0x20000014

0800e0a4 <_fstat_r>:
 800e0a4:	b538      	push	{r3, r4, r5, lr}
 800e0a6:	4d07      	ldr	r5, [pc, #28]	; (800e0c4 <_fstat_r+0x20>)
 800e0a8:	2300      	movs	r3, #0
 800e0aa:	4604      	mov	r4, r0
 800e0ac:	4608      	mov	r0, r1
 800e0ae:	4611      	mov	r1, r2
 800e0b0:	602b      	str	r3, [r5, #0]
 800e0b2:	f7f5 faa0 	bl	80035f6 <_fstat>
 800e0b6:	1c43      	adds	r3, r0, #1
 800e0b8:	d102      	bne.n	800e0c0 <_fstat_r+0x1c>
 800e0ba:	682b      	ldr	r3, [r5, #0]
 800e0bc:	b103      	cbz	r3, 800e0c0 <_fstat_r+0x1c>
 800e0be:	6023      	str	r3, [r4, #0]
 800e0c0:	bd38      	pop	{r3, r4, r5, pc}
 800e0c2:	bf00      	nop
 800e0c4:	20000860 	.word	0x20000860

0800e0c8 <_isatty_r>:
 800e0c8:	b538      	push	{r3, r4, r5, lr}
 800e0ca:	4d06      	ldr	r5, [pc, #24]	; (800e0e4 <_isatty_r+0x1c>)
 800e0cc:	2300      	movs	r3, #0
 800e0ce:	4604      	mov	r4, r0
 800e0d0:	4608      	mov	r0, r1
 800e0d2:	602b      	str	r3, [r5, #0]
 800e0d4:	f7f5 fa9f 	bl	8003616 <_isatty>
 800e0d8:	1c43      	adds	r3, r0, #1
 800e0da:	d102      	bne.n	800e0e2 <_isatty_r+0x1a>
 800e0dc:	682b      	ldr	r3, [r5, #0]
 800e0de:	b103      	cbz	r3, 800e0e2 <_isatty_r+0x1a>
 800e0e0:	6023      	str	r3, [r4, #0]
 800e0e2:	bd38      	pop	{r3, r4, r5, pc}
 800e0e4:	20000860 	.word	0x20000860

0800e0e8 <_lseek_r>:
 800e0e8:	b538      	push	{r3, r4, r5, lr}
 800e0ea:	4d07      	ldr	r5, [pc, #28]	; (800e108 <_lseek_r+0x20>)
 800e0ec:	4604      	mov	r4, r0
 800e0ee:	4608      	mov	r0, r1
 800e0f0:	4611      	mov	r1, r2
 800e0f2:	2200      	movs	r2, #0
 800e0f4:	602a      	str	r2, [r5, #0]
 800e0f6:	461a      	mov	r2, r3
 800e0f8:	f7f5 fa98 	bl	800362c <_lseek>
 800e0fc:	1c43      	adds	r3, r0, #1
 800e0fe:	d102      	bne.n	800e106 <_lseek_r+0x1e>
 800e100:	682b      	ldr	r3, [r5, #0]
 800e102:	b103      	cbz	r3, 800e106 <_lseek_r+0x1e>
 800e104:	6023      	str	r3, [r4, #0]
 800e106:	bd38      	pop	{r3, r4, r5, pc}
 800e108:	20000860 	.word	0x20000860

0800e10c <__ascii_mbtowc>:
 800e10c:	b082      	sub	sp, #8
 800e10e:	b901      	cbnz	r1, 800e112 <__ascii_mbtowc+0x6>
 800e110:	a901      	add	r1, sp, #4
 800e112:	b142      	cbz	r2, 800e126 <__ascii_mbtowc+0x1a>
 800e114:	b14b      	cbz	r3, 800e12a <__ascii_mbtowc+0x1e>
 800e116:	7813      	ldrb	r3, [r2, #0]
 800e118:	600b      	str	r3, [r1, #0]
 800e11a:	7812      	ldrb	r2, [r2, #0]
 800e11c:	1e10      	subs	r0, r2, #0
 800e11e:	bf18      	it	ne
 800e120:	2001      	movne	r0, #1
 800e122:	b002      	add	sp, #8
 800e124:	4770      	bx	lr
 800e126:	4610      	mov	r0, r2
 800e128:	e7fb      	b.n	800e122 <__ascii_mbtowc+0x16>
 800e12a:	f06f 0001 	mvn.w	r0, #1
 800e12e:	e7f8      	b.n	800e122 <__ascii_mbtowc+0x16>

0800e130 <_read_r>:
 800e130:	b538      	push	{r3, r4, r5, lr}
 800e132:	4d07      	ldr	r5, [pc, #28]	; (800e150 <_read_r+0x20>)
 800e134:	4604      	mov	r4, r0
 800e136:	4608      	mov	r0, r1
 800e138:	4611      	mov	r1, r2
 800e13a:	2200      	movs	r2, #0
 800e13c:	602a      	str	r2, [r5, #0]
 800e13e:	461a      	mov	r2, r3
 800e140:	f7f5 fa14 	bl	800356c <_read>
 800e144:	1c43      	adds	r3, r0, #1
 800e146:	d102      	bne.n	800e14e <_read_r+0x1e>
 800e148:	682b      	ldr	r3, [r5, #0]
 800e14a:	b103      	cbz	r3, 800e14e <_read_r+0x1e>
 800e14c:	6023      	str	r3, [r4, #0]
 800e14e:	bd38      	pop	{r3, r4, r5, pc}
 800e150:	20000860 	.word	0x20000860

0800e154 <__ascii_wctomb>:
 800e154:	b149      	cbz	r1, 800e16a <__ascii_wctomb+0x16>
 800e156:	2aff      	cmp	r2, #255	; 0xff
 800e158:	bf85      	ittet	hi
 800e15a:	238a      	movhi	r3, #138	; 0x8a
 800e15c:	6003      	strhi	r3, [r0, #0]
 800e15e:	700a      	strbls	r2, [r1, #0]
 800e160:	f04f 30ff 	movhi.w	r0, #4294967295
 800e164:	bf98      	it	ls
 800e166:	2001      	movls	r0, #1
 800e168:	4770      	bx	lr
 800e16a:	4608      	mov	r0, r1
 800e16c:	4770      	bx	lr

0800e16e <abort>:
 800e16e:	b508      	push	{r3, lr}
 800e170:	2006      	movs	r0, #6
 800e172:	f000 f82b 	bl	800e1cc <raise>
 800e176:	2001      	movs	r0, #1
 800e178:	f7f5 f9ee 	bl	8003558 <_exit>

0800e17c <_raise_r>:
 800e17c:	291f      	cmp	r1, #31
 800e17e:	b538      	push	{r3, r4, r5, lr}
 800e180:	4604      	mov	r4, r0
 800e182:	460d      	mov	r5, r1
 800e184:	d904      	bls.n	800e190 <_raise_r+0x14>
 800e186:	2316      	movs	r3, #22
 800e188:	6003      	str	r3, [r0, #0]
 800e18a:	f04f 30ff 	mov.w	r0, #4294967295
 800e18e:	bd38      	pop	{r3, r4, r5, pc}
 800e190:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e192:	b112      	cbz	r2, 800e19a <_raise_r+0x1e>
 800e194:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e198:	b94b      	cbnz	r3, 800e1ae <_raise_r+0x32>
 800e19a:	4620      	mov	r0, r4
 800e19c:	f000 f830 	bl	800e200 <_getpid_r>
 800e1a0:	462a      	mov	r2, r5
 800e1a2:	4601      	mov	r1, r0
 800e1a4:	4620      	mov	r0, r4
 800e1a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e1aa:	f000 b817 	b.w	800e1dc <_kill_r>
 800e1ae:	2b01      	cmp	r3, #1
 800e1b0:	d00a      	beq.n	800e1c8 <_raise_r+0x4c>
 800e1b2:	1c59      	adds	r1, r3, #1
 800e1b4:	d103      	bne.n	800e1be <_raise_r+0x42>
 800e1b6:	2316      	movs	r3, #22
 800e1b8:	6003      	str	r3, [r0, #0]
 800e1ba:	2001      	movs	r0, #1
 800e1bc:	e7e7      	b.n	800e18e <_raise_r+0x12>
 800e1be:	2400      	movs	r4, #0
 800e1c0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e1c4:	4628      	mov	r0, r5
 800e1c6:	4798      	blx	r3
 800e1c8:	2000      	movs	r0, #0
 800e1ca:	e7e0      	b.n	800e18e <_raise_r+0x12>

0800e1cc <raise>:
 800e1cc:	4b02      	ldr	r3, [pc, #8]	; (800e1d8 <raise+0xc>)
 800e1ce:	4601      	mov	r1, r0
 800e1d0:	6818      	ldr	r0, [r3, #0]
 800e1d2:	f7ff bfd3 	b.w	800e17c <_raise_r>
 800e1d6:	bf00      	nop
 800e1d8:	20000014 	.word	0x20000014

0800e1dc <_kill_r>:
 800e1dc:	b538      	push	{r3, r4, r5, lr}
 800e1de:	4d07      	ldr	r5, [pc, #28]	; (800e1fc <_kill_r+0x20>)
 800e1e0:	2300      	movs	r3, #0
 800e1e2:	4604      	mov	r4, r0
 800e1e4:	4608      	mov	r0, r1
 800e1e6:	4611      	mov	r1, r2
 800e1e8:	602b      	str	r3, [r5, #0]
 800e1ea:	f7f5 f9a5 	bl	8003538 <_kill>
 800e1ee:	1c43      	adds	r3, r0, #1
 800e1f0:	d102      	bne.n	800e1f8 <_kill_r+0x1c>
 800e1f2:	682b      	ldr	r3, [r5, #0]
 800e1f4:	b103      	cbz	r3, 800e1f8 <_kill_r+0x1c>
 800e1f6:	6023      	str	r3, [r4, #0]
 800e1f8:	bd38      	pop	{r3, r4, r5, pc}
 800e1fa:	bf00      	nop
 800e1fc:	20000860 	.word	0x20000860

0800e200 <_getpid_r>:
 800e200:	f7f5 b992 	b.w	8003528 <_getpid>

0800e204 <_init>:
 800e204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e206:	bf00      	nop
 800e208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e20a:	bc08      	pop	{r3}
 800e20c:	469e      	mov	lr, r3
 800e20e:	4770      	bx	lr

0800e210 <_fini>:
 800e210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e212:	bf00      	nop
 800e214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e216:	bc08      	pop	{r3}
 800e218:	469e      	mov	lr, r3
 800e21a:	4770      	bx	lr
