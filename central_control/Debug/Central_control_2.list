
Central_control_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af44  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  0800b100  0800b100  0001b100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b1d0  0800b1d0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800b1d0  0800b1d0  0001b1d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b1d8  0800b1d8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b1d8  0800b1d8  0001b1d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b1dc  0800b1dc  0001b1dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800b1e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000784  20000074  0800b254  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007f8  0800b254  000207f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002008f  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038c7  00000000  00000000  00040133  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a80  00000000  00000000  00043a00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001938  00000000  00000000  00045480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002fcdd  00000000  00000000  00046db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020a5d  00000000  00000000  00076a95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00127e54  00000000  00000000  000974f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001bf346  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007490  00000000  00000000  001bf398  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20000074 	.word	0x20000074
 80001d8:	00000000 	.word	0x00000000
 80001dc:	0800b0e8 	.word	0x0800b0e8

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000078 	.word	0x20000078
 80001f8:	0800b0e8 	.word	0x0800b0e8

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800020c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000210:	f000 b974 	b.w	80004fc <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	468e      	mov	lr, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d14d      	bne.n	80002d6 <__udivmoddi4+0xaa>
 800023a:	428a      	cmp	r2, r1
 800023c:	4694      	mov	ip, r2
 800023e:	d969      	bls.n	8000314 <__udivmoddi4+0xe8>
 8000240:	fab2 f282 	clz	r2, r2
 8000244:	b152      	cbz	r2, 800025c <__udivmoddi4+0x30>
 8000246:	fa01 f302 	lsl.w	r3, r1, r2
 800024a:	f1c2 0120 	rsb	r1, r2, #32
 800024e:	fa20 f101 	lsr.w	r1, r0, r1
 8000252:	fa0c fc02 	lsl.w	ip, ip, r2
 8000256:	ea41 0e03 	orr.w	lr, r1, r3
 800025a:	4094      	lsls	r4, r2
 800025c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000260:	0c21      	lsrs	r1, r4, #16
 8000262:	fbbe f6f8 	udiv	r6, lr, r8
 8000266:	fa1f f78c 	uxth.w	r7, ip
 800026a:	fb08 e316 	mls	r3, r8, r6, lr
 800026e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000272:	fb06 f107 	mul.w	r1, r6, r7
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000282:	f080 811f 	bcs.w	80004c4 <__udivmoddi4+0x298>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 811c 	bls.w	80004c4 <__udivmoddi4+0x298>
 800028c:	3e02      	subs	r6, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a5b      	subs	r3, r3, r1
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb3 f0f8 	udiv	r0, r3, r8
 8000298:	fb08 3310 	mls	r3, r8, r0, r3
 800029c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a0:	fb00 f707 	mul.w	r7, r0, r7
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	d90a      	bls.n	80002be <__udivmoddi4+0x92>
 80002a8:	eb1c 0404 	adds.w	r4, ip, r4
 80002ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b0:	f080 810a 	bcs.w	80004c8 <__udivmoddi4+0x29c>
 80002b4:	42a7      	cmp	r7, r4
 80002b6:	f240 8107 	bls.w	80004c8 <__udivmoddi4+0x29c>
 80002ba:	4464      	add	r4, ip
 80002bc:	3802      	subs	r0, #2
 80002be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c2:	1be4      	subs	r4, r4, r7
 80002c4:	2600      	movs	r6, #0
 80002c6:	b11d      	cbz	r5, 80002d0 <__udivmoddi4+0xa4>
 80002c8:	40d4      	lsrs	r4, r2
 80002ca:	2300      	movs	r3, #0
 80002cc:	e9c5 4300 	strd	r4, r3, [r5]
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0xc2>
 80002da:	2d00      	cmp	r5, #0
 80002dc:	f000 80ef 	beq.w	80004be <__udivmoddi4+0x292>
 80002e0:	2600      	movs	r6, #0
 80002e2:	e9c5 0100 	strd	r0, r1, [r5]
 80002e6:	4630      	mov	r0, r6
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	fab3 f683 	clz	r6, r3
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d14a      	bne.n	800038c <__udivmoddi4+0x160>
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xd4>
 80002fa:	4282      	cmp	r2, r0
 80002fc:	f200 80f9 	bhi.w	80004f2 <__udivmoddi4+0x2c6>
 8000300:	1a84      	subs	r4, r0, r2
 8000302:	eb61 0303 	sbc.w	r3, r1, r3
 8000306:	2001      	movs	r0, #1
 8000308:	469e      	mov	lr, r3
 800030a:	2d00      	cmp	r5, #0
 800030c:	d0e0      	beq.n	80002d0 <__udivmoddi4+0xa4>
 800030e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000312:	e7dd      	b.n	80002d0 <__udivmoddi4+0xa4>
 8000314:	b902      	cbnz	r2, 8000318 <__udivmoddi4+0xec>
 8000316:	deff      	udf	#255	; 0xff
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	2a00      	cmp	r2, #0
 800031e:	f040 8092 	bne.w	8000446 <__udivmoddi4+0x21a>
 8000322:	eba1 010c 	sub.w	r1, r1, ip
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2601      	movs	r6, #1
 8000330:	0c20      	lsrs	r0, r4, #16
 8000332:	fbb1 f3f7 	udiv	r3, r1, r7
 8000336:	fb07 1113 	mls	r1, r7, r3, r1
 800033a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800033e:	fb0e f003 	mul.w	r0, lr, r3
 8000342:	4288      	cmp	r0, r1
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x12c>
 8000346:	eb1c 0101 	adds.w	r1, ip, r1
 800034a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x12a>
 8000350:	4288      	cmp	r0, r1
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2c0>
 8000356:	4643      	mov	r3, r8
 8000358:	1a09      	subs	r1, r1, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000360:	fb07 1110 	mls	r1, r7, r0, r1
 8000364:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x156>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x154>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2ca>
 8000380:	4608      	mov	r0, r1
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800038a:	e79c      	b.n	80002c6 <__udivmoddi4+0x9a>
 800038c:	f1c6 0720 	rsb	r7, r6, #32
 8000390:	40b3      	lsls	r3, r6
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa20 f407 	lsr.w	r4, r0, r7
 800039e:	fa01 f306 	lsl.w	r3, r1, r6
 80003a2:	431c      	orrs	r4, r3
 80003a4:	40f9      	lsrs	r1, r7
 80003a6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003aa:	fa00 f306 	lsl.w	r3, r0, r6
 80003ae:	fbb1 f8f9 	udiv	r8, r1, r9
 80003b2:	0c20      	lsrs	r0, r4, #16
 80003b4:	fa1f fe8c 	uxth.w	lr, ip
 80003b8:	fb09 1118 	mls	r1, r9, r8, r1
 80003bc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c0:	fb08 f00e 	mul.w	r0, r8, lr
 80003c4:	4288      	cmp	r0, r1
 80003c6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b8>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2bc>
 80003d8:	4288      	cmp	r0, r1
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2bc>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4461      	add	r1, ip
 80003e4:	1a09      	subs	r1, r1, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003ec:	fb09 1110 	mls	r1, r9, r0, r1
 80003f0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003f8:	458e      	cmp	lr, r1
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1e2>
 80003fc:	eb1c 0101 	adds.w	r1, ip, r1
 8000400:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2b4>
 8000406:	458e      	cmp	lr, r1
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2b4>
 800040a:	3802      	subs	r0, #2
 800040c:	4461      	add	r1, ip
 800040e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000412:	fba0 9402 	umull	r9, r4, r0, r2
 8000416:	eba1 010e 	sub.w	r1, r1, lr
 800041a:	42a1      	cmp	r1, r4
 800041c:	46c8      	mov	r8, r9
 800041e:	46a6      	mov	lr, r4
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x2a4>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x2a0>
 8000424:	b15d      	cbz	r5, 800043e <__udivmoddi4+0x212>
 8000426:	ebb3 0208 	subs.w	r2, r3, r8
 800042a:	eb61 010e 	sbc.w	r1, r1, lr
 800042e:	fa01 f707 	lsl.w	r7, r1, r7
 8000432:	fa22 f306 	lsr.w	r3, r2, r6
 8000436:	40f1      	lsrs	r1, r6
 8000438:	431f      	orrs	r7, r3
 800043a:	e9c5 7100 	strd	r7, r1, [r5]
 800043e:	2600      	movs	r6, #0
 8000440:	4631      	mov	r1, r6
 8000442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000446:	f1c2 0320 	rsb	r3, r2, #32
 800044a:	40d8      	lsrs	r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa21 f303 	lsr.w	r3, r1, r3
 8000454:	4091      	lsls	r1, r2
 8000456:	4301      	orrs	r1, r0
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb3 f0f7 	udiv	r0, r3, r7
 8000464:	fb07 3610 	mls	r6, r7, r0, r3
 8000468:	0c0b      	lsrs	r3, r1, #16
 800046a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800046e:	fb00 f60e 	mul.w	r6, r0, lr
 8000472:	429e      	cmp	r6, r3
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x260>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b8>
 8000484:	429e      	cmp	r6, r3
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b8>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1b9b      	subs	r3, r3, r6
 800048e:	b289      	uxth	r1, r1
 8000490:	fbb3 f6f7 	udiv	r6, r3, r7
 8000494:	fb07 3316 	mls	r3, r7, r6, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb06 f30e 	mul.w	r3, r6, lr
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x28a>
 80004a4:	eb1c 0101 	adds.w	r1, ip, r1
 80004a8:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2b0>
 80004b2:	3e02      	subs	r6, #2
 80004b4:	4461      	add	r1, ip
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0x104>
 80004be:	462e      	mov	r6, r5
 80004c0:	4628      	mov	r0, r5
 80004c2:	e705      	b.n	80002d0 <__udivmoddi4+0xa4>
 80004c4:	4606      	mov	r6, r0
 80004c6:	e6e3      	b.n	8000290 <__udivmoddi4+0x64>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6f8      	b.n	80002be <__udivmoddi4+0x92>
 80004cc:	454b      	cmp	r3, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f8>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004d8:	3801      	subs	r0, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f8>
 80004dc:	4646      	mov	r6, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x28a>
 80004e0:	4620      	mov	r0, r4
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1e2>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x260>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b8>
 80004ec:	3b02      	subs	r3, #2
 80004ee:	4461      	add	r1, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x12c>
 80004f2:	4630      	mov	r0, r6
 80004f4:	e709      	b.n	800030a <__udivmoddi4+0xde>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x156>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <getSync>:
		sprintf(buf, "sig: %d x: %d y: %d width: %d height: %d index: %d age: %d\r\n", (pixy.curr_blocks + n)->m_signature, (pixy.curr_blocks + n)->m_x, (pixy.curr_blocks + n)->m_y, (pixy.curr_blocks + n)->m_width, (pixy.curr_blocks + n)->m_height, (pixy.curr_blocks + n)->m_index, (pixy.curr_blocks + n)->m_age);
	printf(buf);
}


int16_t getSync() {
 8000500:	b580      	push	{r7, lr}
 8000502:	b084      	sub	sp, #16
 8000504:	af00      	add	r7, sp, #0
	uint8_t i, j, c, cprev;
	int16_t res;
	uint16_t start;

	// parse bytes until we find sync
	for (i = j = 0, cprev = 0; true; i++) {
 8000506:	2300      	movs	r3, #0
 8000508:	73bb      	strb	r3, [r7, #14]
 800050a:	7bbb      	ldrb	r3, [r7, #14]
 800050c:	73fb      	strb	r3, [r7, #15]
 800050e:	2300      	movs	r3, #0
 8000510:	737b      	strb	r3, [r7, #13]
		res = recv(&c, 1, NULL);
 8000512:	1dfb      	adds	r3, r7, #7
 8000514:	2200      	movs	r2, #0
 8000516:	2101      	movs	r1, #1
 8000518:	4618      	mov	r0, r3
 800051a:	f000 f9b1 	bl	8000880 <recv>
 800051e:	4603      	mov	r3, r0
 8000520:	817b      	strh	r3, [r7, #10]
		if (res >= PIXY_RESULT_OK) {
 8000522:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000526:	2b00      	cmp	r3, #0
 8000528:	db1f      	blt.n	800056a <getSync+0x6a>
			// since we're using little endian, previous byte is least significant byte
			start = cprev;
 800052a:	7b7b      	ldrb	r3, [r7, #13]
 800052c:	813b      	strh	r3, [r7, #8]
			// current byte is most significant byte
			start |= c << 8;
 800052e:	79fb      	ldrb	r3, [r7, #7]
 8000530:	021b      	lsls	r3, r3, #8
 8000532:	b21a      	sxth	r2, r3
 8000534:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000538:	4313      	orrs	r3, r2
 800053a:	b21b      	sxth	r3, r3
 800053c:	813b      	strh	r3, [r7, #8]
			cprev = c;
 800053e:	79fb      	ldrb	r3, [r7, #7]
 8000540:	737b      	strb	r3, [r7, #13]
			if (start == PIXY_CHECKSUM_SYNC) {
 8000542:	893b      	ldrh	r3, [r7, #8]
 8000544:	f24c 12af 	movw	r2, #49583	; 0xc1af
 8000548:	4293      	cmp	r3, r2
 800054a:	d104      	bne.n	8000556 <getSync+0x56>
				pixy.m_cs = true;
 800054c:	4b16      	ldr	r3, [pc, #88]	; (80005a8 <getSync+0xa8>)
 800054e:	2201      	movs	r2, #1
 8000550:	749a      	strb	r2, [r3, #18]
				return PIXY_RESULT_OK;
 8000552:	2300      	movs	r3, #0
 8000554:	e024      	b.n	80005a0 <getSync+0xa0>
			}
			if (start == PIXY_NO_CHECKSUM_SYNC) {
 8000556:	893b      	ldrh	r3, [r7, #8]
 8000558:	f24c 12ae 	movw	r2, #49582	; 0xc1ae
 800055c:	4293      	cmp	r3, r2
 800055e:	d104      	bne.n	800056a <getSync+0x6a>
				pixy.m_cs = false;
 8000560:	4b11      	ldr	r3, [pc, #68]	; (80005a8 <getSync+0xa8>)
 8000562:	2200      	movs	r2, #0
 8000564:	749a      	strb	r2, [r3, #18]
				return PIXY_RESULT_OK;
 8000566:	2300      	movs	r3, #0
 8000568:	e01a      	b.n	80005a0 <getSync+0xa0>
			}
		}
		// If we've read some bytes and no sync, then wait and try again.
		// And do that several more times before we give up.
		// Pixy guarantees to respond within 100us.
		if (i >= 4) {
 800056a:	7bfb      	ldrb	r3, [r7, #15]
 800056c:	2b03      	cmp	r3, #3
 800056e:	d913      	bls.n	8000598 <getSync+0x98>
			if (j >= 4) {
 8000570:	7bbb      	ldrb	r3, [r7, #14]
 8000572:	2b03      	cmp	r3, #3
 8000574:	d902      	bls.n	800057c <getSync+0x7c>
				return PIXY_RESULT_ERROR;
 8000576:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800057a:	e011      	b.n	80005a0 <getSync+0xa0>
			}

			for (volatile int i = 0; i < 10; i++) asm(""); // 25 microsecond delay (9.5 => 10)
 800057c:	2300      	movs	r3, #0
 800057e:	603b      	str	r3, [r7, #0]
 8000580:	e002      	b.n	8000588 <getSync+0x88>
 8000582:	683b      	ldr	r3, [r7, #0]
 8000584:	3301      	adds	r3, #1
 8000586:	603b      	str	r3, [r7, #0]
 8000588:	683b      	ldr	r3, [r7, #0]
 800058a:	2b09      	cmp	r3, #9
 800058c:	ddf9      	ble.n	8000582 <getSync+0x82>

			j++;
 800058e:	7bbb      	ldrb	r3, [r7, #14]
 8000590:	3301      	adds	r3, #1
 8000592:	73bb      	strb	r3, [r7, #14]
			i = 0;
 8000594:	2300      	movs	r3, #0
 8000596:	73fb      	strb	r3, [r7, #15]
	for (i = j = 0, cprev = 0; true; i++) {
 8000598:	7bfb      	ldrb	r3, [r7, #15]
 800059a:	3301      	adds	r3, #1
 800059c:	73fb      	strb	r3, [r7, #15]
		res = recv(&c, 1, NULL);
 800059e:	e7b8      	b.n	8000512 <getSync+0x12>
		}
	}
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	3710      	adds	r7, #16
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	20000090 	.word	0x20000090

080005ac <recvPacket>:

int16_t recvPacket() {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
	uint16_t csCalc, csSerial;
	int16_t res;

	res = getSync();
 80005b2:	f7ff ffa5 	bl	8000500 <getSync>
 80005b6:	4603      	mov	r3, r0
 80005b8:	80fb      	strh	r3, [r7, #6]
	if (res < 0)
 80005ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	da02      	bge.n	80005c8 <recvPacket+0x1c>
		return res;
 80005c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005c6:	e065      	b.n	8000694 <recvPacket+0xe8>

	if (pixy.m_cs) {
 80005c8:	4b34      	ldr	r3, [pc, #208]	; (800069c <recvPacket+0xf0>)
 80005ca:	7c9b      	ldrb	r3, [r3, #18]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d035      	beq.n	800063c <recvPacket+0x90>
		res = recv(pixy.m_buf, 4, NULL);
 80005d0:	4b32      	ldr	r3, [pc, #200]	; (800069c <recvPacket+0xf0>)
 80005d2:	689b      	ldr	r3, [r3, #8]
 80005d4:	2200      	movs	r2, #0
 80005d6:	2104      	movs	r1, #4
 80005d8:	4618      	mov	r0, r3
 80005da:	f000 f951 	bl	8000880 <recv>
 80005de:	4603      	mov	r3, r0
 80005e0:	80fb      	strh	r3, [r7, #6]
		if (res < 0)
 80005e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	da02      	bge.n	80005f0 <recvPacket+0x44>
			return res;
 80005ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005ee:	e051      	b.n	8000694 <recvPacket+0xe8>

		pixy.m_type = pixy.m_buf[0];
 80005f0:	4b2a      	ldr	r3, [pc, #168]	; (800069c <recvPacket+0xf0>)
 80005f2:	689b      	ldr	r3, [r3, #8]
 80005f4:	781a      	ldrb	r2, [r3, #0]
 80005f6:	4b29      	ldr	r3, [pc, #164]	; (800069c <recvPacket+0xf0>)
 80005f8:	741a      	strb	r2, [r3, #16]
		pixy.m_length = pixy.m_buf[1];
 80005fa:	4b28      	ldr	r3, [pc, #160]	; (800069c <recvPacket+0xf0>)
 80005fc:	689b      	ldr	r3, [r3, #8]
 80005fe:	785a      	ldrb	r2, [r3, #1]
 8000600:	4b26      	ldr	r3, [pc, #152]	; (800069c <recvPacket+0xf0>)
 8000602:	745a      	strb	r2, [r3, #17]

		csSerial = *(uint16_t*) &(pixy.m_buf[2]);
 8000604:	4b25      	ldr	r3, [pc, #148]	; (800069c <recvPacket+0xf0>)
 8000606:	689b      	ldr	r3, [r3, #8]
 8000608:	885b      	ldrh	r3, [r3, #2]
 800060a:	80bb      	strh	r3, [r7, #4]

		res = recv(pixy.m_buf, pixy.m_length, &csCalc);
 800060c:	4b23      	ldr	r3, [pc, #140]	; (800069c <recvPacket+0xf0>)
 800060e:	689b      	ldr	r3, [r3, #8]
 8000610:	4a22      	ldr	r2, [pc, #136]	; (800069c <recvPacket+0xf0>)
 8000612:	7c51      	ldrb	r1, [r2, #17]
 8000614:	1cba      	adds	r2, r7, #2
 8000616:	4618      	mov	r0, r3
 8000618:	f000 f932 	bl	8000880 <recv>
 800061c:	4603      	mov	r3, r0
 800061e:	80fb      	strh	r3, [r7, #6]
		if (res < 0)
 8000620:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000624:	2b00      	cmp	r3, #0
 8000626:	da02      	bge.n	800062e <recvPacket+0x82>
			return res;
 8000628:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800062c:	e032      	b.n	8000694 <recvPacket+0xe8>

		if (csSerial != csCalc) {
 800062e:	887b      	ldrh	r3, [r7, #2]
 8000630:	88ba      	ldrh	r2, [r7, #4]
 8000632:	429a      	cmp	r2, r3
 8000634:	d02d      	beq.n	8000692 <recvPacket+0xe6>
			return PIXY_RESULT_CHECKSUM_ERROR;
 8000636:	f06f 0302 	mvn.w	r3, #2
 800063a:	e02b      	b.n	8000694 <recvPacket+0xe8>
		}
	} else {
		res = recv(pixy.m_buf, 2, NULL);
 800063c:	4b17      	ldr	r3, [pc, #92]	; (800069c <recvPacket+0xf0>)
 800063e:	689b      	ldr	r3, [r3, #8]
 8000640:	2200      	movs	r2, #0
 8000642:	2102      	movs	r1, #2
 8000644:	4618      	mov	r0, r3
 8000646:	f000 f91b 	bl	8000880 <recv>
 800064a:	4603      	mov	r3, r0
 800064c:	80fb      	strh	r3, [r7, #6]
		if (res < 0)
 800064e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000652:	2b00      	cmp	r3, #0
 8000654:	da02      	bge.n	800065c <recvPacket+0xb0>
			return res;
 8000656:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800065a:	e01b      	b.n	8000694 <recvPacket+0xe8>

		pixy.m_type = pixy.m_buf[0];
 800065c:	4b0f      	ldr	r3, [pc, #60]	; (800069c <recvPacket+0xf0>)
 800065e:	689b      	ldr	r3, [r3, #8]
 8000660:	781a      	ldrb	r2, [r3, #0]
 8000662:	4b0e      	ldr	r3, [pc, #56]	; (800069c <recvPacket+0xf0>)
 8000664:	741a      	strb	r2, [r3, #16]
		pixy.m_length = pixy.m_buf[1];
 8000666:	4b0d      	ldr	r3, [pc, #52]	; (800069c <recvPacket+0xf0>)
 8000668:	689b      	ldr	r3, [r3, #8]
 800066a:	785a      	ldrb	r2, [r3, #1]
 800066c:	4b0b      	ldr	r3, [pc, #44]	; (800069c <recvPacket+0xf0>)
 800066e:	745a      	strb	r2, [r3, #17]

		res = recv(pixy.m_buf, pixy.m_length, NULL);
 8000670:	4b0a      	ldr	r3, [pc, #40]	; (800069c <recvPacket+0xf0>)
 8000672:	689b      	ldr	r3, [r3, #8]
 8000674:	4a09      	ldr	r2, [pc, #36]	; (800069c <recvPacket+0xf0>)
 8000676:	7c51      	ldrb	r1, [r2, #17]
 8000678:	2200      	movs	r2, #0
 800067a:	4618      	mov	r0, r3
 800067c:	f000 f900 	bl	8000880 <recv>
 8000680:	4603      	mov	r3, r0
 8000682:	80fb      	strh	r3, [r7, #6]
		if (res < 0)
 8000684:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000688:	2b00      	cmp	r3, #0
 800068a:	da02      	bge.n	8000692 <recvPacket+0xe6>
			return res;
 800068c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000690:	e000      	b.n	8000694 <recvPacket+0xe8>
	}
	return PIXY_RESULT_OK;
 8000692:	2300      	movs	r3, #0
}
 8000694:	4618      	mov	r0, r3
 8000696:	3708      	adds	r7, #8
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	20000090 	.word	0x20000090

080006a0 <sendPacket>:

int16_t sendPacket() {
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
	// write header info at beginnig of buffer
	pixy.m_buf[0] = PIXY_NO_CHECKSUM_SYNC & 0xff;
 80006a4:	4b10      	ldr	r3, [pc, #64]	; (80006e8 <sendPacket+0x48>)
 80006a6:	689b      	ldr	r3, [r3, #8]
 80006a8:	22ae      	movs	r2, #174	; 0xae
 80006aa:	701a      	strb	r2, [r3, #0]
	pixy.m_buf[1] = PIXY_NO_CHECKSUM_SYNC >> 8;
 80006ac:	4b0e      	ldr	r3, [pc, #56]	; (80006e8 <sendPacket+0x48>)
 80006ae:	689b      	ldr	r3, [r3, #8]
 80006b0:	3301      	adds	r3, #1
 80006b2:	22c1      	movs	r2, #193	; 0xc1
 80006b4:	701a      	strb	r2, [r3, #0]
	pixy.m_buf[2] = pixy.m_type;
 80006b6:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <sendPacket+0x48>)
 80006b8:	689b      	ldr	r3, [r3, #8]
 80006ba:	3302      	adds	r3, #2
 80006bc:	4a0a      	ldr	r2, [pc, #40]	; (80006e8 <sendPacket+0x48>)
 80006be:	7c12      	ldrb	r2, [r2, #16]
 80006c0:	701a      	strb	r2, [r3, #0]
	pixy.m_buf[3] = pixy.m_length;
 80006c2:	4b09      	ldr	r3, [pc, #36]	; (80006e8 <sendPacket+0x48>)
 80006c4:	689b      	ldr	r3, [r3, #8]
 80006c6:	3303      	adds	r3, #3
 80006c8:	4a07      	ldr	r2, [pc, #28]	; (80006e8 <sendPacket+0x48>)
 80006ca:	7c52      	ldrb	r2, [r2, #17]
 80006cc:	701a      	strb	r2, [r3, #0]
	// send whole thing -- header and data in one call
	return send(pixy.m_buf, pixy.m_length + PIXY_SEND_HEADER_SIZE);
 80006ce:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <sendPacket+0x48>)
 80006d0:	689a      	ldr	r2, [r3, #8]
 80006d2:	4b05      	ldr	r3, [pc, #20]	; (80006e8 <sendPacket+0x48>)
 80006d4:	7c5b      	ldrb	r3, [r3, #17]
 80006d6:	3304      	adds	r3, #4
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	4619      	mov	r1, r3
 80006dc:	4610      	mov	r0, r2
 80006de:	f000 f923 	bl	8000928 <send>
 80006e2:	4603      	mov	r3, r0
}
 80006e4:	4618      	mov	r0, r3
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	20000090 	.word	0x20000090

080006ec <getVersion>:

int8_t getVersion() {
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
	pixy.m_length = 0;
 80006f0:	4b11      	ldr	r3, [pc, #68]	; (8000738 <getVersion+0x4c>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	745a      	strb	r2, [r3, #17]
	pixy.m_type = PIXY_TYPE_REQUEST_VERSION;
 80006f6:	4b10      	ldr	r3, [pc, #64]	; (8000738 <getVersion+0x4c>)
 80006f8:	220e      	movs	r2, #14
 80006fa:	741a      	strb	r2, [r3, #16]
	sendPacket();
 80006fc:	f7ff ffd0 	bl	80006a0 <sendPacket>
	if (recvPacket() == 0) {
 8000700:	f7ff ff54 	bl	80005ac <recvPacket>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d112      	bne.n	8000730 <getVersion+0x44>
		if (pixy.m_type == PIXY_TYPE_RESPONSE_VERSION) {
 800070a:	4b0b      	ldr	r3, [pc, #44]	; (8000738 <getVersion+0x4c>)
 800070c:	7c1b      	ldrb	r3, [r3, #16]
 800070e:	2b0f      	cmp	r3, #15
 8000710:	d107      	bne.n	8000722 <getVersion+0x36>
			pixy.version = (Version*) pixy.m_buf;
 8000712:	4b09      	ldr	r3, [pc, #36]	; (8000738 <getVersion+0x4c>)
 8000714:	689b      	ldr	r3, [r3, #8]
 8000716:	4a08      	ldr	r2, [pc, #32]	; (8000738 <getVersion+0x4c>)
 8000718:	6013      	str	r3, [r2, #0]
			return pixy.m_length;
 800071a:	4b07      	ldr	r3, [pc, #28]	; (8000738 <getVersion+0x4c>)
 800071c:	7c5b      	ldrb	r3, [r3, #17]
 800071e:	b25b      	sxtb	r3, r3
 8000720:	e008      	b.n	8000734 <getVersion+0x48>
		} else if (pixy.m_type == PIXY_TYPE_RESPONSE_ERROR)
 8000722:	4b05      	ldr	r3, [pc, #20]	; (8000738 <getVersion+0x4c>)
 8000724:	7c1b      	ldrb	r3, [r3, #16]
 8000726:	2b03      	cmp	r3, #3
 8000728:	d102      	bne.n	8000730 <getVersion+0x44>
			return PIXY_RESULT_BUSY;
 800072a:	f06f 0301 	mvn.w	r3, #1
 800072e:	e001      	b.n	8000734 <getVersion+0x48>
	}
	return PIXY_RESULT_ERROR;  // some kind of bitstream error
 8000730:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000734:	4618      	mov	r0, r3
 8000736:	bd80      	pop	{r7, pc}
 8000738:	20000090 	.word	0x20000090

0800073c <getResolution>:

int8_t getResolution() {
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
	pixy.m_length = 1;
 8000740:	4b13      	ldr	r3, [pc, #76]	; (8000790 <getResolution+0x54>)
 8000742:	2201      	movs	r2, #1
 8000744:	745a      	strb	r2, [r3, #17]
	pixy.m_bufPayload[0] = 0; // for future types of queries
 8000746:	4b12      	ldr	r3, [pc, #72]	; (8000790 <getResolution+0x54>)
 8000748:	68db      	ldr	r3, [r3, #12]
 800074a:	2200      	movs	r2, #0
 800074c:	701a      	strb	r2, [r3, #0]
	pixy.m_type = PIXY_TYPE_REQUEST_RESOLUTION;
 800074e:	4b10      	ldr	r3, [pc, #64]	; (8000790 <getResolution+0x54>)
 8000750:	220c      	movs	r2, #12
 8000752:	741a      	strb	r2, [r3, #16]
	sendPacket();
 8000754:	f7ff ffa4 	bl	80006a0 <sendPacket>
	if (recvPacket() == 0) {
 8000758:	f7ff ff28 	bl	80005ac <recvPacket>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d112      	bne.n	8000788 <getResolution+0x4c>
		if (pixy.m_type == PIXY_TYPE_RESPONSE_RESOLUTION) {
 8000762:	4b0b      	ldr	r3, [pc, #44]	; (8000790 <getResolution+0x54>)
 8000764:	7c1b      	ldrb	r3, [r3, #16]
 8000766:	2b0d      	cmp	r3, #13
 8000768:	d10b      	bne.n	8000782 <getResolution+0x46>
			pixy.frameWidth = *(uint16_t*)pixy.m_buf;
 800076a:	4b09      	ldr	r3, [pc, #36]	; (8000790 <getResolution+0x54>)
 800076c:	689b      	ldr	r3, [r3, #8]
 800076e:	881a      	ldrh	r2, [r3, #0]
 8000770:	4b07      	ldr	r3, [pc, #28]	; (8000790 <getResolution+0x54>)
 8000772:	809a      	strh	r2, [r3, #4]
			pixy.frameHeight = *(uint16_t*)(pixy.m_buf + sizeof(uint16_t));
 8000774:	4b06      	ldr	r3, [pc, #24]	; (8000790 <getResolution+0x54>)
 8000776:	689b      	ldr	r3, [r3, #8]
 8000778:	885a      	ldrh	r2, [r3, #2]
 800077a:	4b05      	ldr	r3, [pc, #20]	; (8000790 <getResolution+0x54>)
 800077c:	80da      	strh	r2, [r3, #6]
			return PIXY_RESULT_OK; // success
 800077e:	2300      	movs	r3, #0
 8000780:	e004      	b.n	800078c <getResolution+0x50>
		} else
			return PIXY_RESULT_ERROR;
 8000782:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000786:	e001      	b.n	800078c <getResolution+0x50>
	} else
		return PIXY_RESULT_ERROR;  // some kind of bitstream error
 8000788:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800078c:	4618      	mov	r0, r3
 800078e:	bd80      	pop	{r7, pc}
 8000790:	20000090 	.word	0x20000090

08000794 <pixy2_init>:
		// We can give up half a millisecond of latency (worst case)
		for (volatile int i = 0; i < 190; i++) asm("");
	}
}

int8_t pixy2_init(SPI_HandleTypeDef *hspi, GPIO_TypeDef *port, uint16_t pin) {
 8000794:	b580      	push	{r7, lr}
 8000796:	b086      	sub	sp, #24
 8000798:	af00      	add	r7, sp, #0
 800079a:	60f8      	str	r0, [r7, #12]
 800079c:	60b9      	str	r1, [r7, #8]
 800079e:	4613      	mov	r3, r2
 80007a0:	80fb      	strh	r3, [r7, #6]
	// allocate buffer space for send/receive
	pixy.m_buf = (uint8_t*) malloc(PIXY_BUFFERSIZE);
 80007a2:	f44f 7082 	mov.w	r0, #260	; 0x104
 80007a6:	f00a fbdd 	bl	800af64 <malloc>
 80007aa:	4603      	mov	r3, r0
 80007ac:	461a      	mov	r2, r3
 80007ae:	4b24      	ldr	r3, [pc, #144]	; (8000840 <pixy2_init+0xac>)
 80007b0:	609a      	str	r2, [r3, #8]
	// shifted buffer is used for sending, so we have space to write header information
	pixy.m_bufPayload = pixy.m_buf + PIXY_SEND_HEADER_SIZE;
 80007b2:	4b23      	ldr	r3, [pc, #140]	; (8000840 <pixy2_init+0xac>)
 80007b4:	689b      	ldr	r3, [r3, #8]
 80007b6:	3304      	adds	r3, #4
 80007b8:	4a21      	ldr	r2, [pc, #132]	; (8000840 <pixy2_init+0xac>)
 80007ba:	60d3      	str	r3, [r2, #12]
	pixy.frameWidth = pixy.frameHeight = 0;
 80007bc:	4b20      	ldr	r3, [pc, #128]	; (8000840 <pixy2_init+0xac>)
 80007be:	2200      	movs	r2, #0
 80007c0:	80da      	strh	r2, [r3, #6]
 80007c2:	4b1f      	ldr	r3, [pc, #124]	; (8000840 <pixy2_init+0xac>)
 80007c4:	88da      	ldrh	r2, [r3, #6]
 80007c6:	4b1e      	ldr	r3, [pc, #120]	; (8000840 <pixy2_init+0xac>)
 80007c8:	809a      	strh	r2, [r3, #4]
	pixy.version=NULL;
 80007ca:	4b1d      	ldr	r3, [pc, #116]	; (8000840 <pixy2_init+0xac>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
	pixy.m_cs = false;
 80007d0:	4b1b      	ldr	r3, [pc, #108]	; (8000840 <pixy2_init+0xac>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	749a      	strb	r2, [r3, #18]
	pixy.curr_blocks = NULL;
 80007d6:	4b1a      	ldr	r3, [pc, #104]	; (8000840 <pixy2_init+0xac>)
 80007d8:	2200      	movs	r2, #0
 80007da:	615a      	str	r2, [r3, #20]
	pixy.numBlocks = 0;
 80007dc:	4b18      	ldr	r3, [pc, #96]	; (8000840 <pixy2_init+0xac>)
 80007de:	2200      	movs	r2, #0
 80007e0:	761a      	strb	r2, [r3, #24]

	int8_t res;

	res = open(hspi, port, pin);
 80007e2:	88fb      	ldrh	r3, [r7, #6]
 80007e4:	461a      	mov	r2, r3
 80007e6:	68b9      	ldr	r1, [r7, #8]
 80007e8:	68f8      	ldr	r0, [r7, #12]
 80007ea:	f000 f82b 	bl	8000844 <open>
 80007ee:	4603      	mov	r3, r0
 80007f0:	75fb      	strb	r3, [r7, #23]
	if (res < 0)
 80007f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	da02      	bge.n	8000800 <pixy2_init+0x6c>
		return res;
 80007fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80007fe:	e01b      	b.n	8000838 <pixy2_init+0xa4>

	// wait for pixy to be ready -- that is, Pixy takes a second or 2 boot up
	// getVersion is an effective "ping".  We timeout after 5s.

	for (int millis = HAL_GetTick(); HAL_GetTick() - millis < 5000;) {
 8000800:	f002 f9ca 	bl	8002b98 <HAL_GetTick>
 8000804:	4603      	mov	r3, r0
 8000806:	613b      	str	r3, [r7, #16]
 8000808:	e00b      	b.n	8000822 <pixy2_init+0x8e>
		if (getVersion() >= 0) { // successful version get -> pixy is ready
 800080a:	f7ff ff6f 	bl	80006ec <getVersion>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	db03      	blt.n	800081c <pixy2_init+0x88>
			getResolution(); // get resolution so we have it
 8000814:	f7ff ff92 	bl	800073c <getResolution>
			return PIXY_RESULT_OK;
 8000818:	2300      	movs	r3, #0
 800081a:	e00d      	b.n	8000838 <pixy2_init+0xa4>
		}
		HAL_Delay(5); // might have to change
 800081c:	2005      	movs	r0, #5
 800081e:	f002 f9c7 	bl	8002bb0 <HAL_Delay>
	for (int millis = HAL_GetTick(); HAL_GetTick() - millis < 5000;) {
 8000822:	f002 f9b9 	bl	8002b98 <HAL_GetTick>
 8000826:	4602      	mov	r2, r0
 8000828:	693b      	ldr	r3, [r7, #16]
 800082a:	1ad3      	subs	r3, r2, r3
 800082c:	f241 3287 	movw	r2, #4999	; 0x1387
 8000830:	4293      	cmp	r3, r2
 8000832:	d9ea      	bls.n	800080a <pixy2_init+0x76>
	}
	// timeout
	return PIXY_RESULT_TIMEOUT;
 8000834:	f06f 0303 	mvn.w	r3, #3
}
 8000838:	4618      	mov	r0, r3
 800083a:	3718      	adds	r7, #24
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	20000090 	.word	0x20000090

08000844 <open>:

SPI_HandleTypeDef* SPI_obj;
GPIO_TypeDef* GPIO_ss;
uint16_t GPIO_ss_pin;

int8_t open(SPI_HandleTypeDef* hspi,GPIO_TypeDef* port,uint16_t pin) {
 8000844:	b480      	push	{r7}
 8000846:	b085      	sub	sp, #20
 8000848:	af00      	add	r7, sp, #0
 800084a:	60f8      	str	r0, [r7, #12]
 800084c:	60b9      	str	r1, [r7, #8]
 800084e:	4613      	mov	r3, r2
 8000850:	80fb      	strh	r3, [r7, #6]
	GPIO_ss_pin = pin;
 8000852:	4a08      	ldr	r2, [pc, #32]	; (8000874 <open+0x30>)
 8000854:	88fb      	ldrh	r3, [r7, #6]
 8000856:	8013      	strh	r3, [r2, #0]
	GPIO_ss = port;
 8000858:	4a07      	ldr	r2, [pc, #28]	; (8000878 <open+0x34>)
 800085a:	68bb      	ldr	r3, [r7, #8]
 800085c:	6013      	str	r3, [r2, #0]
	SPI_obj = hspi;
 800085e:	4a07      	ldr	r2, [pc, #28]	; (800087c <open+0x38>)
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	6013      	str	r3, [r2, #0]
	return 0;
 8000864:	2300      	movs	r3, #0
}
 8000866:	4618      	mov	r0, r3
 8000868:	3714      	adds	r7, #20
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	200000b4 	.word	0x200000b4
 8000878:	200000b0 	.word	0x200000b0
 800087c:	200000ac 	.word	0x200000ac

08000880 <recv>:

int16_t recv(uint8_t *buf, uint8_t len, uint16_t *checkSumCalculation) { // based on arduino implementation
 8000880:	b580      	push	{r7, lr}
 8000882:	b086      	sub	sp, #24
 8000884:	af00      	add	r7, sp, #0
 8000886:	60f8      	str	r0, [r7, #12]
 8000888:	460b      	mov	r3, r1
 800088a:	607a      	str	r2, [r7, #4]
 800088c:	72fb      	strb	r3, [r7, #11]
	uint8_t i = 0;
 800088e:	2300      	movs	r3, #0
 8000890:	75fb      	strb	r3, [r7, #23]
	if (checkSumCalculation)
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d002      	beq.n	800089e <recv+0x1e>
		*checkSumCalculation = 0;
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	2200      	movs	r2, #0
 800089c:	801a      	strh	r2, [r3, #0]
	
	HAL_GPIO_WritePin(GPIO_ss, GPIO_ss_pin, GPIO_PIN_RESET);
 800089e:	4b1f      	ldr	r3, [pc, #124]	; (800091c <recv+0x9c>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	4a1f      	ldr	r2, [pc, #124]	; (8000920 <recv+0xa0>)
 80008a4:	8811      	ldrh	r1, [r2, #0]
 80008a6:	2200      	movs	r2, #0
 80008a8:	4618      	mov	r0, r3
 80008aa:	f003 fdf9 	bl	80044a0 <HAL_GPIO_WritePin>

	for (i = 0; i < len; ++i) {
 80008ae:	2300      	movs	r3, #0
 80008b0:	75fb      	strb	r3, [r7, #23]
 80008b2:	e020      	b.n	80008f6 <recv+0x76>
		uint8_t data = 0;
 80008b4:	2300      	movs	r3, #0
 80008b6:	75bb      	strb	r3, [r7, #22]
		HAL_SPI_Receive(SPI_obj, &data, 1, 5000);
 80008b8:	4b1a      	ldr	r3, [pc, #104]	; (8000924 <recv+0xa4>)
 80008ba:	6818      	ldr	r0, [r3, #0]
 80008bc:	f107 0116 	add.w	r1, r7, #22
 80008c0:	f241 3388 	movw	r3, #5000	; 0x1388
 80008c4:	2201      	movs	r2, #1
 80008c6:	f007 f9b5 	bl	8007c34 <HAL_SPI_Receive>
		buf[i] = data;
 80008ca:	7dfb      	ldrb	r3, [r7, #23]
 80008cc:	68fa      	ldr	r2, [r7, #12]
 80008ce:	4413      	add	r3, r2
 80008d0:	7dba      	ldrb	r2, [r7, #22]
 80008d2:	701a      	strb	r2, [r3, #0]
		if (checkSumCalculation)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d00a      	beq.n	80008f0 <recv+0x70>
			*checkSumCalculation += buf[i];
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	881a      	ldrh	r2, [r3, #0]
 80008de:	7dfb      	ldrb	r3, [r7, #23]
 80008e0:	68f9      	ldr	r1, [r7, #12]
 80008e2:	440b      	add	r3, r1
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	b29b      	uxth	r3, r3
 80008e8:	4413      	add	r3, r2
 80008ea:	b29a      	uxth	r2, r3
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < len; ++i) {
 80008f0:	7dfb      	ldrb	r3, [r7, #23]
 80008f2:	3301      	adds	r3, #1
 80008f4:	75fb      	strb	r3, [r7, #23]
 80008f6:	7dfa      	ldrb	r2, [r7, #23]
 80008f8:	7afb      	ldrb	r3, [r7, #11]
 80008fa:	429a      	cmp	r2, r3
 80008fc:	d3da      	bcc.n	80008b4 <recv+0x34>
	}

	HAL_GPIO_WritePin(GPIO_ss, GPIO_ss_pin, GPIO_PIN_SET);
 80008fe:	4b07      	ldr	r3, [pc, #28]	; (800091c <recv+0x9c>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	4a07      	ldr	r2, [pc, #28]	; (8000920 <recv+0xa0>)
 8000904:	8811      	ldrh	r1, [r2, #0]
 8000906:	2201      	movs	r2, #1
 8000908:	4618      	mov	r0, r3
 800090a:	f003 fdc9 	bl	80044a0 <HAL_GPIO_WritePin>
	return len;
 800090e:	7afb      	ldrb	r3, [r7, #11]
 8000910:	b21b      	sxth	r3, r3
}
 8000912:	4618      	mov	r0, r3
 8000914:	3718      	adds	r7, #24
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	200000b0 	.word	0x200000b0
 8000920:	200000b4 	.word	0x200000b4
 8000924:	200000ac 	.word	0x200000ac

08000928 <send>:

int16_t send(uint8_t *buf, uint8_t len) { // based on arduino implementation
 8000928:	b580      	push	{r7, lr}
 800092a:	b084      	sub	sp, #16
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
 8000930:	460b      	mov	r3, r1
 8000932:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 0;
 8000934:	2300      	movs	r3, #0
 8000936:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIO_ss, GPIO_ss_pin, GPIO_PIN_RESET);
 8000938:	4b14      	ldr	r3, [pc, #80]	; (800098c <send+0x64>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a14      	ldr	r2, [pc, #80]	; (8000990 <send+0x68>)
 800093e:	8811      	ldrh	r1, [r2, #0]
 8000940:	2200      	movs	r2, #0
 8000942:	4618      	mov	r0, r3
 8000944:	f003 fdac 	bl	80044a0 <HAL_GPIO_WritePin>


	for (i = 0; i < len; ++i) {
 8000948:	2300      	movs	r3, #0
 800094a:	73fb      	strb	r3, [r7, #15]
 800094c:	e00c      	b.n	8000968 <send+0x40>
		HAL_SPI_Transmit(SPI_obj, (uint8_t *) (buf + i), 1, 5000);
 800094e:	4b11      	ldr	r3, [pc, #68]	; (8000994 <send+0x6c>)
 8000950:	6818      	ldr	r0, [r3, #0]
 8000952:	7bfb      	ldrb	r3, [r7, #15]
 8000954:	687a      	ldr	r2, [r7, #4]
 8000956:	18d1      	adds	r1, r2, r3
 8000958:	f241 3388 	movw	r3, #5000	; 0x1388
 800095c:	2201      	movs	r2, #1
 800095e:	f006 fffb 	bl	8007958 <HAL_SPI_Transmit>
	for (i = 0; i < len; ++i) {
 8000962:	7bfb      	ldrb	r3, [r7, #15]
 8000964:	3301      	adds	r3, #1
 8000966:	73fb      	strb	r3, [r7, #15]
 8000968:	7bfa      	ldrb	r2, [r7, #15]
 800096a:	78fb      	ldrb	r3, [r7, #3]
 800096c:	429a      	cmp	r2, r3
 800096e:	d3ee      	bcc.n	800094e <send+0x26>
	}


	HAL_GPIO_WritePin(GPIO_ss, GPIO_ss_pin, GPIO_PIN_SET);
 8000970:	4b06      	ldr	r3, [pc, #24]	; (800098c <send+0x64>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a06      	ldr	r2, [pc, #24]	; (8000990 <send+0x68>)
 8000976:	8811      	ldrh	r1, [r2, #0]
 8000978:	2201      	movs	r2, #1
 800097a:	4618      	mov	r0, r3
 800097c:	f003 fd90 	bl	80044a0 <HAL_GPIO_WritePin>

	return len;
 8000980:	78fb      	ldrb	r3, [r7, #3]
 8000982:	b21b      	sxth	r3, r3
}
 8000984:	4618      	mov	r0, r3
 8000986:	3710      	adds	r7, #16
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	200000b0 	.word	0x200000b0
 8000990:	200000b4 	.word	0x200000b4
 8000994:	200000ac 	.word	0x200000ac

08000998 <state_update>:
 *  Created on: Mar 25, 2023
 *      Author: eric
 */
#include "central_control.h"

void state_update() {
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0

	// All the buttons should be rising-edge triggered


	// read reset button, and set reset bit to 1 only if reset button is pressed
	if (reset) {
 800099e:	4b6b      	ldr	r3, [pc, #428]	; (8000b4c <state_update+0x1b4>)
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d01e      	beq.n	80009e4 <state_update+0x4c>
		on_off = 0;
 80009a6:	4b6a      	ldr	r3, [pc, #424]	; (8000b50 <state_update+0x1b8>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	701a      	strb	r2, [r3, #0]
		ball_locked = 0;
 80009ac:	4b69      	ldr	r3, [pc, #420]	; (8000b54 <state_update+0x1bc>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	701a      	strb	r2, [r3, #0]
		ball_not_found = 0;
 80009b2:	4b69      	ldr	r3, [pc, #420]	; (8000b58 <state_update+0x1c0>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	701a      	strb	r2, [r3, #0]
		ball_count = 0;
 80009b8:	4b68      	ldr	r3, [pc, #416]	; (8000b5c <state_update+0x1c4>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	701a      	strb	r2, [r3, #0]
		ball_collected = 0;
 80009be:	4b68      	ldr	r3, [pc, #416]	; (8000b60 <state_update+0x1c8>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	701a      	strb	r2, [r3, #0]
		station_arrived = 0;
 80009c4:	4b67      	ldr	r3, [pc, #412]	; (8000b64 <state_update+0x1cc>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	701a      	strb	r2, [r3, #0]
		avoid_finished = 0;
 80009ca:	4b67      	ldr	r3, [pc, #412]	; (8000b68 <state_update+0x1d0>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	701a      	strb	r2, [r3, #0]
		reset = 0;
 80009d0:	4b5e      	ldr	r3, [pc, #376]	; (8000b4c <state_update+0x1b4>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	701a      	strb	r2, [r3, #0]
		state = INIT;
 80009d6:	4b65      	ldr	r3, [pc, #404]	; (8000b6c <state_update+0x1d4>)
 80009d8:	2200      	movs	r2, #0
 80009da:	701a      	strb	r2, [r3, #0]
		prev_state = state;
 80009dc:	4b63      	ldr	r3, [pc, #396]	; (8000b6c <state_update+0x1d4>)
 80009de:	781a      	ldrb	r2, [r3, #0]
 80009e0:	4b63      	ldr	r3, [pc, #396]	; (8000b70 <state_update+0x1d8>)
 80009e2:	701a      	strb	r2, [r3, #0]
	} else {
		// reading peripheral input, and clear register immediately
	}

	// Testing arg begin
	state = COLLECT;
 80009e4:	4b61      	ldr	r3, [pc, #388]	; (8000b6c <state_update+0x1d4>)
 80009e6:	2202      	movs	r2, #2
 80009e8:	701a      	strb	r2, [r3, #0]

	// Testing arg end

	// disable interrupt ultrasonic, ir
	HAL_NVIC_DisableIRQ(TIM3_IRQn);
 80009ea:	201d      	movs	r0, #29
 80009ec:	f003 fbab 	bl	8004146 <HAL_NVIC_DisableIRQ>

	enum State next_state = state;
 80009f0:	4b5e      	ldr	r3, [pc, #376]	; (8000b6c <state_update+0x1d4>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	71fb      	strb	r3, [r7, #7]

	switch (state) {
 80009f6:	4b5d      	ldr	r3, [pc, #372]	; (8000b6c <state_update+0x1d4>)
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	2b04      	cmp	r3, #4
 80009fc:	f200 808f 	bhi.w	8000b1e <state_update+0x186>
 8000a00:	a201      	add	r2, pc, #4	; (adr r2, 8000a08 <state_update+0x70>)
 8000a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a06:	bf00      	nop
 8000a08:	08000a1d 	.word	0x08000a1d
 8000a0c:	08000a31 	.word	0x08000a31
 8000a10:	08000a6d 	.word	0x08000a6d
 8000a14:	08000aa9 	.word	0x08000aa9
 8000a18:	08000ad1 	.word	0x08000ad1
	case INIT:
		if (on_off == 1) {
 8000a1c:	4b4c      	ldr	r3, [pc, #304]	; (8000b50 <state_update+0x1b8>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	d173      	bne.n	8000b0c <state_update+0x174>
			on_off = 0;
 8000a24:	4b4a      	ldr	r3, [pc, #296]	; (8000b50 <state_update+0x1b8>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	701a      	strb	r2, [r3, #0]
			next_state = SEARCH;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	71fb      	strb	r3, [r7, #7]
		}
		break;
 8000a2e:	e06d      	b.n	8000b0c <state_update+0x174>
	case SEARCH:
		if (on_off) {
 8000a30:	4b47      	ldr	r3, [pc, #284]	; (8000b50 <state_update+0x1b8>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d005      	beq.n	8000a44 <state_update+0xac>
			on_off = 0;
 8000a38:	4b45      	ldr	r3, [pc, #276]	; (8000b50 <state_update+0x1b8>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	701a      	strb	r2, [r3, #0]
			next_state = RETURN;
 8000a3e:	2303      	movs	r3, #3
 8000a40:	71fb      	strb	r3, [r7, #7]
			next_state = COLLECT;
		} else if (ball_not_found) {
			ball_not_found = 0;
			next_state = RETURN;
		}
		break;
 8000a42:	e065      	b.n	8000b10 <state_update+0x178>
		} else if (ball_locked) {
 8000a44:	4b43      	ldr	r3, [pc, #268]	; (8000b54 <state_update+0x1bc>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d005      	beq.n	8000a58 <state_update+0xc0>
			ball_locked = 0;
 8000a4c:	4b41      	ldr	r3, [pc, #260]	; (8000b54 <state_update+0x1bc>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	701a      	strb	r2, [r3, #0]
			next_state = COLLECT;
 8000a52:	2302      	movs	r3, #2
 8000a54:	71fb      	strb	r3, [r7, #7]
		break;
 8000a56:	e05b      	b.n	8000b10 <state_update+0x178>
		} else if (ball_not_found) {
 8000a58:	4b3f      	ldr	r3, [pc, #252]	; (8000b58 <state_update+0x1c0>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d057      	beq.n	8000b10 <state_update+0x178>
			ball_not_found = 0;
 8000a60:	4b3d      	ldr	r3, [pc, #244]	; (8000b58 <state_update+0x1c0>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	701a      	strb	r2, [r3, #0]
			next_state = RETURN;
 8000a66:	2303      	movs	r3, #3
 8000a68:	71fb      	strb	r3, [r7, #7]
		break;
 8000a6a:	e051      	b.n	8000b10 <state_update+0x178>
	case COLLECT: {
		uint32_t local_count;
		local_count = count;
 8000a6c:	4b41      	ldr	r3, [pc, #260]	; (8000b74 <state_update+0x1dc>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	603b      	str	r3, [r7, #0]

		if (on_off) {
 8000a72:	4b37      	ldr	r3, [pc, #220]	; (8000b50 <state_update+0x1b8>)
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d005      	beq.n	8000a86 <state_update+0xee>
			on_off = 0;
 8000a7a:	4b35      	ldr	r3, [pc, #212]	; (8000b50 <state_update+0x1b8>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	701a      	strb	r2, [r3, #0]
			next_state = RETURN;
 8000a80:	2303      	movs	r3, #3
 8000a82:	71fb      	strb	r3, [r7, #7]
			} else {
				next_state = RETURN;
			}
			ball_collected = 0; // clear
		}
		break;
 8000a84:	e046      	b.n	8000b14 <state_update+0x17c>
		} else if (ball_collected) {
 8000a86:	4b36      	ldr	r3, [pc, #216]	; (8000b60 <state_update+0x1c8>)
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d042      	beq.n	8000b14 <state_update+0x17c>
			if (ball_count < MAXLOAD) {
 8000a8e:	4b33      	ldr	r3, [pc, #204]	; (8000b5c <state_update+0x1c4>)
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	2b05      	cmp	r3, #5
 8000a94:	d802      	bhi.n	8000a9c <state_update+0x104>
				next_state = SEARCH;
 8000a96:	2301      	movs	r3, #1
 8000a98:	71fb      	strb	r3, [r7, #7]
 8000a9a:	e001      	b.n	8000aa0 <state_update+0x108>
				next_state = RETURN;
 8000a9c:	2303      	movs	r3, #3
 8000a9e:	71fb      	strb	r3, [r7, #7]
			ball_collected = 0; // clear
 8000aa0:	4b2f      	ldr	r3, [pc, #188]	; (8000b60 <state_update+0x1c8>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	701a      	strb	r2, [r3, #0]
		break;
 8000aa6:	e035      	b.n	8000b14 <state_update+0x17c>
		}
	case RETURN:
		if (on_off) {
 8000aa8:	4b29      	ldr	r3, [pc, #164]	; (8000b50 <state_update+0x1b8>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d002      	beq.n	8000ab6 <state_update+0x11e>
			on_off = 0;
 8000ab0:	4b27      	ldr	r3, [pc, #156]	; (8000b50 <state_update+0x1b8>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	701a      	strb	r2, [r3, #0]
		}

		if (station_arrived) {
 8000ab6:	4b2b      	ldr	r3, [pc, #172]	; (8000b64 <state_update+0x1cc>)
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d02c      	beq.n	8000b18 <state_update+0x180>
			station_arrived = 0;
 8000abe:	4b29      	ldr	r3, [pc, #164]	; (8000b64 <state_update+0x1cc>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	701a      	strb	r2, [r3, #0]
			reset = 1;
 8000ac4:	4b21      	ldr	r3, [pc, #132]	; (8000b4c <state_update+0x1b4>)
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	701a      	strb	r2, [r3, #0]
			next_state = INIT;
 8000aca:	2300      	movs	r3, #0
 8000acc:	71fb      	strb	r3, [r7, #7]
		}

		break;
 8000ace:	e023      	b.n	8000b18 <state_update+0x180>
	case AVOID_COLLISION:
		// only interrupt can cause the robot to enter this state
		// only after certain conditions are met can the robot leave this state
    
    if (on_off) {
 8000ad0:	4b1f      	ldr	r3, [pc, #124]	; (8000b50 <state_update+0x1b8>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d005      	beq.n	8000ae4 <state_update+0x14c>
			on_off = 0;
 8000ad8:	4b1d      	ldr	r3, [pc, #116]	; (8000b50 <state_update+0x1b8>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	701a      	strb	r2, [r3, #0]
			prev_state = RETURN;
 8000ade:	4b24      	ldr	r3, [pc, #144]	; (8000b70 <state_update+0x1d8>)
 8000ae0:	2203      	movs	r2, #3
 8000ae2:	701a      	strb	r2, [r3, #0]
		}

		if (avoid_finished) {
 8000ae4:	4b20      	ldr	r3, [pc, #128]	; (8000b68 <state_update+0x1d0>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d017      	beq.n	8000b1c <state_update+0x184>
			avoid_finished = 0;
 8000aec:	4b1e      	ldr	r3, [pc, #120]	; (8000b68 <state_update+0x1d0>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	701a      	strb	r2, [r3, #0]
			next_state = prev_state;
 8000af2:	4b1f      	ldr	r3, [pc, #124]	; (8000b70 <state_update+0x1d8>)
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	71fb      	strb	r3, [r7, #7]
			if (on_off) {
 8000af8:	4b15      	ldr	r3, [pc, #84]	; (8000b50 <state_update+0x1b8>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d00d      	beq.n	8000b1c <state_update+0x184>
				on_off = 0;
 8000b00:	4b13      	ldr	r3, [pc, #76]	; (8000b50 <state_update+0x1b8>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	701a      	strb	r2, [r3, #0]
				next_state = RETURN;
 8000b06:	2303      	movs	r3, #3
 8000b08:	71fb      	strb	r3, [r7, #7]
			}
		}
		break;
 8000b0a:	e007      	b.n	8000b1c <state_update+0x184>
		break;
 8000b0c:	bf00      	nop
 8000b0e:	e006      	b.n	8000b1e <state_update+0x186>
		break;
 8000b10:	bf00      	nop
 8000b12:	e004      	b.n	8000b1e <state_update+0x186>
		break;
 8000b14:	bf00      	nop
 8000b16:	e002      	b.n	8000b1e <state_update+0x186>
		break;
 8000b18:	bf00      	nop
 8000b1a:	e000      	b.n	8000b1e <state_update+0x186>
		break;
 8000b1c:	bf00      	nop
	}

	state = next_state;
 8000b1e:	4a13      	ldr	r2, [pc, #76]	; (8000b6c <state_update+0x1d4>)
 8000b20:	79fb      	ldrb	r3, [r7, #7]
 8000b22:	7013      	strb	r3, [r2, #0]
	if (state != AVOID_COLLISION) {
 8000b24:	4b11      	ldr	r3, [pc, #68]	; (8000b6c <state_update+0x1d4>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	2b04      	cmp	r3, #4
 8000b2a:	d003      	beq.n	8000b34 <state_update+0x19c>
		prev_state = state;
 8000b2c:	4b0f      	ldr	r3, [pc, #60]	; (8000b6c <state_update+0x1d4>)
 8000b2e:	781a      	ldrb	r2, [r3, #0]
 8000b30:	4b0f      	ldr	r3, [pc, #60]	; (8000b70 <state_update+0x1d8>)
 8000b32:	701a      	strb	r2, [r3, #0]
	}

	// enable interrupt
	if (state == COLLECT) {
 8000b34:	4b0d      	ldr	r3, [pc, #52]	; (8000b6c <state_update+0x1d4>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	2b02      	cmp	r3, #2
 8000b3a:	d102      	bne.n	8000b42 <state_update+0x1aa>
		HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000b3c:	201d      	movs	r0, #29
 8000b3e:	f003 faf4 	bl	800412a <HAL_NVIC_EnableIRQ>
	}
}
 8000b42:	bf00      	nop
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	200000bf 	.word	0x200000bf
 8000b50:	200000b8 	.word	0x200000b8
 8000b54:	200000b9 	.word	0x200000b9
 8000b58:	200000ba 	.word	0x200000ba
 8000b5c:	200000bb 	.word	0x200000bb
 8000b60:	200000bc 	.word	0x200000bc
 8000b64:	200000bd 	.word	0x200000bd
 8000b68:	200000be 	.word	0x200000be
 8000b6c:	200000b6 	.word	0x200000b6
 8000b70:	200000b7 	.word	0x200000b7
 8000b74:	200000c0 	.word	0x200000c0

08000b78 <execute>:

void execute() {
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0

	rotor_control(1);
 8000b7c:	2001      	movs	r0, #1
 8000b7e:	f001 f8a5 	bl	8001ccc <rotor_control>

	switch (state) {
 8000b82:	4b0c      	ldr	r3, [pc, #48]	; (8000bb4 <execute+0x3c>)
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	2b04      	cmp	r3, #4
 8000b88:	d811      	bhi.n	8000bae <execute+0x36>
 8000b8a:	a201      	add	r2, pc, #4	; (adr r2, 8000b90 <execute+0x18>)
 8000b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b90:	08000bad 	.word	0x08000bad
 8000b94:	08000bad 	.word	0x08000bad
 8000b98:	08000ba5 	.word	0x08000ba5
 8000b9c:	08000bad 	.word	0x08000bad
 8000ba0:	08000bad 	.word	0x08000bad
//		motor_control(mode);
//		ball_locked;
//		ball_not_found;
		break;
	case COLLECT:
		rotor_control(0);
 8000ba4:	2000      	movs	r0, #0
 8000ba6:	f001 f891 	bl	8001ccc <rotor_control>

		break;
 8000baa:	e000      	b.n	8000bae <execute+0x36>
		break;
 8000bac:	bf00      	nop
	case RETURN:
		break;
	case AVOID_COLLISION:
		break;
	}
}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	200000b6 	.word	0x200000b6

08000bb8 <delay_loop>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void delay_loop(int time) {
 8000bb8:	b480      	push	{r7}
 8000bba:	b085      	sub	sp, #20
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
	 for(volatile int j = 0; j < time; ++j)
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	60fb      	str	r3, [r7, #12]
 8000bc4:	e00c      	b.n	8000be0 <delay_loop+0x28>
	  		  for (volatile int i = 0; i < 380; ++i) asm("");//1ms
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	60bb      	str	r3, [r7, #8]
 8000bca:	e002      	b.n	8000bd2 <delay_loop+0x1a>
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	3301      	adds	r3, #1
 8000bd0:	60bb      	str	r3, [r7, #8]
 8000bd2:	68bb      	ldr	r3, [r7, #8]
 8000bd4:	f5b3 7fbe 	cmp.w	r3, #380	; 0x17c
 8000bd8:	dbf8      	blt.n	8000bcc <delay_loop+0x14>
	 for(volatile int j = 0; j < time; ++j)
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	3301      	adds	r3, #1
 8000bde:	60fb      	str	r3, [r7, #12]
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	687a      	ldr	r2, [r7, #4]
 8000be4:	429a      	cmp	r2, r3
 8000be6:	dcee      	bgt.n	8000bc6 <delay_loop+0xe>
}
 8000be8:	bf00      	nop
 8000bea:	bf00      	nop
 8000bec:	3714      	adds	r7, #20
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
	...

08000bf8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bfc:	f001 ff63 	bl	8002ac6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c00:	f000 f854 	bl	8000cac <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000c04:	f000 f8b4 	bl	8000d70 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c08:	f000 ff78 	bl	8001afc <MX_GPIO_Init>
  MX_ADC1_Init();
 8000c0c:	f000 f8e4 	bl	8000dd8 <MX_ADC1_Init>
  MX_CAN1_Init();
 8000c10:	f000 f946 	bl	8000ea0 <MX_CAN1_Init>
  MX_COMP1_Init();
 8000c14:	f000 f978 	bl	8000f08 <MX_COMP1_Init>
  MX_I2C1_SMBUS_Init();
 8000c18:	f000 f9a4 	bl	8000f64 <MX_I2C1_SMBUS_Init>
  MX_I2C2_SMBUS_Init();
 8000c1c:	f000 f9dc 	bl	8000fd8 <MX_I2C2_SMBUS_Init>
  MX_LPUART1_UART_Init();
 8000c20:	f000 fa1c 	bl	800105c <MX_LPUART1_UART_Init>
  MX_USART2_UART_Init();
 8000c24:	f000 fa68 	bl	80010f8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000c28:	f000 fab4 	bl	8001194 <MX_USART3_UART_Init>
  MX_SAI1_Init();
 8000c2c:	f000 fafe 	bl	800122c <MX_SAI1_Init>
  MX_SAI2_Init();
 8000c30:	f000 fb94 	bl	800135c <MX_SAI2_Init>
  MX_SPI1_Init();
 8000c34:	f000 fbfa 	bl	800142c <MX_SPI1_Init>
  MX_SPI3_Init();
 8000c38:	f000 fc36 	bl	80014a8 <MX_SPI3_Init>
  MX_TIM1_Init();
 8000c3c:	f000 fc72 	bl	8001524 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000c40:	f000 fd58 	bl	80016f4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000c44:	f000 fdce 	bl	80017e4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000c48:	f000 fe3e 	bl	80018c8 <MX_TIM4_Init>
  MX_TIM15_Init();
 8000c4c:	f000 feca 	bl	80019e4 <MX_TIM15_Init>
  MX_USB_OTG_FS_USB_Init();
 8000c50:	f000 ff4c 	bl	8001aec <MX_USB_OTG_FS_USB_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000c54:	2104      	movs	r1, #4
 8000c56:	4810      	ldr	r0, [pc, #64]	; (8000c98 <main+0xa0>)
 8000c58:	f007 fd9a 	bl	8008790 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000c5c:	2108      	movs	r1, #8
 8000c5e:	480e      	ldr	r0, [pc, #56]	; (8000c98 <main+0xa0>)
 8000c60:	f007 fd96 	bl	8008790 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8000c64:	210c      	movs	r1, #12
 8000c66:	480c      	ldr	r0, [pc, #48]	; (8000c98 <main+0xa0>)
 8000c68:	f007 fd92 	bl	8008790 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	480b      	ldr	r0, [pc, #44]	; (8000c9c <main+0xa4>)
 8000c70:	f007 fd8e 	bl	8008790 <HAL_TIM_PWM_Start>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 8000c74:	2104      	movs	r1, #4
 8000c76:	480a      	ldr	r0, [pc, #40]	; (8000ca0 <main+0xa8>)
 8000c78:	f007 fef2 	bl	8008a60 <HAL_TIM_IC_Start_IT>

  extern Pixy2 pixy;
  pixy2_init(&hspi1, GPIOB, GPIO_PIN_6);
 8000c7c:	2240      	movs	r2, #64	; 0x40
 8000c7e:	4909      	ldr	r1, [pc, #36]	; (8000ca4 <main+0xac>)
 8000c80:	4809      	ldr	r0, [pc, #36]	; (8000ca8 <main+0xb0>)
 8000c82:	f7ff fd87 	bl	8000794 <pixy2_init>


  while (1)
  {
	  state_update();
 8000c86:	f7ff fe87 	bl	8000998 <state_update>
	  execute();
 8000c8a:	f7ff ff75 	bl	8000b78 <execute>
	  delay_loop(500);
 8000c8e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c92:	f7ff ff91 	bl	8000bb8 <delay_loop>
  {
 8000c96:	e7f6      	b.n	8000c86 <main+0x8e>
 8000c98:	20000738 	.word	0x20000738
 8000c9c:	200006a0 	.word	0x200006a0
 8000ca0:	200006ec 	.word	0x200006ec
 8000ca4:	48000400 	.word	0x48000400
 8000ca8:	2000058c 	.word	0x2000058c

08000cac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b096      	sub	sp, #88	; 0x58
 8000cb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cb2:	f107 0314 	add.w	r3, r7, #20
 8000cb6:	2244      	movs	r2, #68	; 0x44
 8000cb8:	2100      	movs	r1, #0
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f00a f95a 	bl	800af74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cc0:	463b      	mov	r3, r7
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	605a      	str	r2, [r3, #4]
 8000cc8:	609a      	str	r2, [r3, #8]
 8000cca:	60da      	str	r2, [r3, #12]
 8000ccc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000cce:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000cd2:	f003 fc2d 	bl	8004530 <HAL_PWREx_ControlVoltageScaling>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000cdc:	f000 fff0 	bl	8001cc0 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000ce0:	f003 fbf6 	bl	80044d0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000ce4:	4b21      	ldr	r3, [pc, #132]	; (8000d6c <SystemClock_Config+0xc0>)
 8000ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000cea:	4a20      	ldr	r2, [pc, #128]	; (8000d6c <SystemClock_Config+0xc0>)
 8000cec:	f023 0318 	bic.w	r3, r3, #24
 8000cf0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000cf4:	2314      	movs	r3, #20
 8000cf6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000d00:	2300      	movs	r3, #0
 8000d02:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000d04:	2360      	movs	r3, #96	; 0x60
 8000d06:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d10:	2301      	movs	r3, #1
 8000d12:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000d14:	2310      	movs	r3, #16
 8000d16:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d20:	2302      	movs	r3, #2
 8000d22:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d24:	f107 0314 	add.w	r3, r7, #20
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f003 fcb5 	bl	8004698 <HAL_RCC_OscConfig>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000d34:	f000 ffc4 	bl	8001cc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d38:	230f      	movs	r3, #15
 8000d3a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d3c:	2303      	movs	r3, #3
 8000d3e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d40:	2300      	movs	r3, #0
 8000d42:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d44:	2300      	movs	r3, #0
 8000d46:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d4c:	463b      	mov	r3, r7
 8000d4e:	2101      	movs	r1, #1
 8000d50:	4618      	mov	r0, r3
 8000d52:	f004 f8bb 	bl	8004ecc <HAL_RCC_ClockConfig>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000d5c:	f000 ffb0 	bl	8001cc0 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000d60:	f005 fdc4 	bl	80068ec <HAL_RCCEx_EnableMSIPLLMode>
}
 8000d64:	bf00      	nop
 8000d66:	3758      	adds	r7, #88	; 0x58
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	40021000 	.word	0x40021000

08000d70 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b0a6      	sub	sp, #152	; 0x98
 8000d74:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d76:	1d3b      	adds	r3, r7, #4
 8000d78:	2294      	movs	r2, #148	; 0x94
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f00a f8f9 	bl	800af74 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_SAI2
 8000d82:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 8000d86:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI1;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000d90:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000d98:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000d9c:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000da2:	2301      	movs	r3, #1
 8000da4:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000da6:	2318      	movs	r3, #24
 8000da8:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000daa:	2302      	movs	r3, #2
 8000dac:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000dae:	2302      	movs	r3, #2
 8000db0:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000db2:	2302      	movs	r3, #2
 8000db4:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_48M2CLK
 8000db6:	4b07      	ldr	r3, [pc, #28]	; (8000dd4 <PeriphCommonClock_Config+0x64>)
 8000db8:	623b      	str	r3, [r7, #32]
                              |RCC_PLLSAI1_ADC1CLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dba:	1d3b      	adds	r3, r7, #4
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f004 fb43 	bl	8005448 <HAL_RCCEx_PeriphCLKConfig>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8000dc8:	f000 ff7a 	bl	8001cc0 <Error_Handler>
  }
}
 8000dcc:	bf00      	nop
 8000dce:	3798      	adds	r7, #152	; 0x98
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	01110000 	.word	0x01110000

08000dd8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b086      	sub	sp, #24
 8000ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000dde:	463b      	mov	r3, r7
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
 8000de6:	609a      	str	r2, [r3, #8]
 8000de8:	60da      	str	r2, [r3, #12]
 8000dea:	611a      	str	r2, [r3, #16]
 8000dec:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000dee:	4b29      	ldr	r3, [pc, #164]	; (8000e94 <MX_ADC1_Init+0xbc>)
 8000df0:	4a29      	ldr	r2, [pc, #164]	; (8000e98 <MX_ADC1_Init+0xc0>)
 8000df2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000df4:	4b27      	ldr	r3, [pc, #156]	; (8000e94 <MX_ADC1_Init+0xbc>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000dfa:	4b26      	ldr	r3, [pc, #152]	; (8000e94 <MX_ADC1_Init+0xbc>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e00:	4b24      	ldr	r3, [pc, #144]	; (8000e94 <MX_ADC1_Init+0xbc>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e06:	4b23      	ldr	r3, [pc, #140]	; (8000e94 <MX_ADC1_Init+0xbc>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e0c:	4b21      	ldr	r3, [pc, #132]	; (8000e94 <MX_ADC1_Init+0xbc>)
 8000e0e:	2204      	movs	r2, #4
 8000e10:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e12:	4b20      	ldr	r3, [pc, #128]	; (8000e94 <MX_ADC1_Init+0xbc>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e18:	4b1e      	ldr	r3, [pc, #120]	; (8000e94 <MX_ADC1_Init+0xbc>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000e1e:	4b1d      	ldr	r3, [pc, #116]	; (8000e94 <MX_ADC1_Init+0xbc>)
 8000e20:	2201      	movs	r2, #1
 8000e22:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e24:	4b1b      	ldr	r3, [pc, #108]	; (8000e94 <MX_ADC1_Init+0xbc>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e2c:	4b19      	ldr	r3, [pc, #100]	; (8000e94 <MX_ADC1_Init+0xbc>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e32:	4b18      	ldr	r3, [pc, #96]	; (8000e94 <MX_ADC1_Init+0xbc>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e38:	4b16      	ldr	r3, [pc, #88]	; (8000e94 <MX_ADC1_Init+0xbc>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e40:	4b14      	ldr	r3, [pc, #80]	; (8000e94 <MX_ADC1_Init+0xbc>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000e46:	4b13      	ldr	r3, [pc, #76]	; (8000e94 <MX_ADC1_Init+0xbc>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e4e:	4811      	ldr	r0, [pc, #68]	; (8000e94 <MX_ADC1_Init+0xbc>)
 8000e50:	f002 f872 	bl	8002f38 <HAL_ADC_Init>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000e5a:	f000 ff31 	bl	8001cc0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000e5e:	4b0f      	ldr	r3, [pc, #60]	; (8000e9c <MX_ADC1_Init+0xc4>)
 8000e60:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e62:	2306      	movs	r3, #6
 8000e64:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000e66:	2300      	movs	r3, #0
 8000e68:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e6a:	237f      	movs	r3, #127	; 0x7f
 8000e6c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e6e:	2304      	movs	r3, #4
 8000e70:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000e72:	2300      	movs	r3, #0
 8000e74:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e76:	463b      	mov	r3, r7
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4806      	ldr	r0, [pc, #24]	; (8000e94 <MX_ADC1_Init+0xbc>)
 8000e7c:	f002 f9a8 	bl	80031d0 <HAL_ADC_ConfigChannel>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000e86:	f000 ff1b 	bl	8001cc0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e8a:	bf00      	nop
 8000e8c:	3718      	adds	r7, #24
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	200000c4 	.word	0x200000c4
 8000e98:	50040000 	.word	0x50040000
 8000e9c:	04300002 	.word	0x04300002

08000ea0 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000ea4:	4b16      	ldr	r3, [pc, #88]	; (8000f00 <MX_CAN1_Init+0x60>)
 8000ea6:	4a17      	ldr	r2, [pc, #92]	; (8000f04 <MX_CAN1_Init+0x64>)
 8000ea8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000eaa:	4b15      	ldr	r3, [pc, #84]	; (8000f00 <MX_CAN1_Init+0x60>)
 8000eac:	2210      	movs	r2, #16
 8000eae:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000eb0:	4b13      	ldr	r3, [pc, #76]	; (8000f00 <MX_CAN1_Init+0x60>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000eb6:	4b12      	ldr	r3, [pc, #72]	; (8000f00 <MX_CAN1_Init+0x60>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000ebc:	4b10      	ldr	r3, [pc, #64]	; (8000f00 <MX_CAN1_Init+0x60>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000ec2:	4b0f      	ldr	r3, [pc, #60]	; (8000f00 <MX_CAN1_Init+0x60>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000ec8:	4b0d      	ldr	r3, [pc, #52]	; (8000f00 <MX_CAN1_Init+0x60>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000ece:	4b0c      	ldr	r3, [pc, #48]	; (8000f00 <MX_CAN1_Init+0x60>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000ed4:	4b0a      	ldr	r3, [pc, #40]	; (8000f00 <MX_CAN1_Init+0x60>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000eda:	4b09      	ldr	r3, [pc, #36]	; (8000f00 <MX_CAN1_Init+0x60>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000ee0:	4b07      	ldr	r3, [pc, #28]	; (8000f00 <MX_CAN1_Init+0x60>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000ee6:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <MX_CAN1_Init+0x60>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000eec:	4804      	ldr	r0, [pc, #16]	; (8000f00 <MX_CAN1_Init+0x60>)
 8000eee:	f002 fd6b 	bl	80039c8 <HAL_CAN_Init>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000ef8:	f000 fee2 	bl	8001cc0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000efc:	bf00      	nop
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	2000012c 	.word	0x2000012c
 8000f04:	40006400 	.word	0x40006400

08000f08 <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 8000f0c:	4b12      	ldr	r3, [pc, #72]	; (8000f58 <MX_COMP1_Init+0x50>)
 8000f0e:	4a13      	ldr	r2, [pc, #76]	; (8000f5c <MX_COMP1_Init+0x54>)
 8000f10:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InvertingInput = COMP_INPUT_MINUS_VREFINT;
 8000f12:	4b11      	ldr	r3, [pc, #68]	; (8000f58 <MX_COMP1_Init+0x50>)
 8000f14:	4a12      	ldr	r2, [pc, #72]	; (8000f60 <MX_COMP1_Init+0x58>)
 8000f16:	611a      	str	r2, [r3, #16]
  hcomp1.Init.NonInvertingInput = COMP_INPUT_PLUS_IO2;
 8000f18:	4b0f      	ldr	r3, [pc, #60]	; (8000f58 <MX_COMP1_Init+0x50>)
 8000f1a:	2280      	movs	r2, #128	; 0x80
 8000f1c:	60da      	str	r2, [r3, #12]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000f1e:	4b0e      	ldr	r3, [pc, #56]	; (8000f58 <MX_COMP1_Init+0x50>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	619a      	str	r2, [r3, #24]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000f24:	4b0c      	ldr	r3, [pc, #48]	; (8000f58 <MX_COMP1_Init+0x50>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	615a      	str	r2, [r3, #20]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8000f2a:	4b0b      	ldr	r3, [pc, #44]	; (8000f58 <MX_COMP1_Init+0x50>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	61da      	str	r2, [r3, #28]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8000f30:	4b09      	ldr	r3, [pc, #36]	; (8000f58 <MX_COMP1_Init+0x50>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	609a      	str	r2, [r3, #8]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000f36:	4b08      	ldr	r3, [pc, #32]	; (8000f58 <MX_COMP1_Init+0x50>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000f3c:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <MX_COMP1_Init+0x50>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8000f42:	4805      	ldr	r0, [pc, #20]	; (8000f58 <MX_COMP1_Init+0x50>)
 8000f44:	f002 fee4 	bl	8003d10 <HAL_COMP_Init>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <MX_COMP1_Init+0x4a>
  {
    Error_Handler();
 8000f4e:	f000 feb7 	bl	8001cc0 <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 8000f52:	bf00      	nop
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	20000154 	.word	0x20000154
 8000f5c:	40010200 	.word	0x40010200
 8000f60:	00800030 	.word	0x00800030

08000f64 <MX_I2C1_SMBUS_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_SMBUS_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hsmbus1.Instance = I2C1;
 8000f68:	4b18      	ldr	r3, [pc, #96]	; (8000fcc <MX_I2C1_SMBUS_Init+0x68>)
 8000f6a:	4a19      	ldr	r2, [pc, #100]	; (8000fd0 <MX_I2C1_SMBUS_Init+0x6c>)
 8000f6c:	601a      	str	r2, [r3, #0]
  hsmbus1.Init.Timing = 0x00707CBB;
 8000f6e:	4b17      	ldr	r3, [pc, #92]	; (8000fcc <MX_I2C1_SMBUS_Init+0x68>)
 8000f70:	4a18      	ldr	r2, [pc, #96]	; (8000fd4 <MX_I2C1_SMBUS_Init+0x70>)
 8000f72:	605a      	str	r2, [r3, #4]
  hsmbus1.Init.AnalogFilter = SMBUS_ANALOGFILTER_ENABLE;
 8000f74:	4b15      	ldr	r3, [pc, #84]	; (8000fcc <MX_I2C1_SMBUS_Init+0x68>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	609a      	str	r2, [r3, #8]
  hsmbus1.Init.OwnAddress1 = 2;
 8000f7a:	4b14      	ldr	r3, [pc, #80]	; (8000fcc <MX_I2C1_SMBUS_Init+0x68>)
 8000f7c:	2202      	movs	r2, #2
 8000f7e:	60da      	str	r2, [r3, #12]
  hsmbus1.Init.AddressingMode = SMBUS_ADDRESSINGMODE_7BIT;
 8000f80:	4b12      	ldr	r3, [pc, #72]	; (8000fcc <MX_I2C1_SMBUS_Init+0x68>)
 8000f82:	2201      	movs	r2, #1
 8000f84:	611a      	str	r2, [r3, #16]
  hsmbus1.Init.DualAddressMode = SMBUS_DUALADDRESS_DISABLE;
 8000f86:	4b11      	ldr	r3, [pc, #68]	; (8000fcc <MX_I2C1_SMBUS_Init+0x68>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	615a      	str	r2, [r3, #20]
  hsmbus1.Init.OwnAddress2 = 0;
 8000f8c:	4b0f      	ldr	r3, [pc, #60]	; (8000fcc <MX_I2C1_SMBUS_Init+0x68>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	619a      	str	r2, [r3, #24]
  hsmbus1.Init.OwnAddress2Masks = SMBUS_OA2_NOMASK;
 8000f92:	4b0e      	ldr	r3, [pc, #56]	; (8000fcc <MX_I2C1_SMBUS_Init+0x68>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	61da      	str	r2, [r3, #28]
  hsmbus1.Init.GeneralCallMode = SMBUS_GENERALCALL_DISABLE;
 8000f98:	4b0c      	ldr	r3, [pc, #48]	; (8000fcc <MX_I2C1_SMBUS_Init+0x68>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	621a      	str	r2, [r3, #32]
  hsmbus1.Init.NoStretchMode = SMBUS_NOSTRETCH_DISABLE;
 8000f9e:	4b0b      	ldr	r3, [pc, #44]	; (8000fcc <MX_I2C1_SMBUS_Init+0x68>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	625a      	str	r2, [r3, #36]	; 0x24
  hsmbus1.Init.PacketErrorCheckMode = SMBUS_PEC_DISABLE;
 8000fa4:	4b09      	ldr	r3, [pc, #36]	; (8000fcc <MX_I2C1_SMBUS_Init+0x68>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	629a      	str	r2, [r3, #40]	; 0x28
  hsmbus1.Init.PeripheralMode = SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE;
 8000faa:	4b08      	ldr	r3, [pc, #32]	; (8000fcc <MX_I2C1_SMBUS_Init+0x68>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	62da      	str	r2, [r3, #44]	; 0x2c
  hsmbus1.Init.SMBusTimeout = 0x00008186;
 8000fb0:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <MX_I2C1_SMBUS_Init+0x68>)
 8000fb2:	f248 1286 	movw	r2, #33158	; 0x8186
 8000fb6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_SMBUS_Init(&hsmbus1) != HAL_OK)
 8000fb8:	4804      	ldr	r0, [pc, #16]	; (8000fcc <MX_I2C1_SMBUS_Init+0x68>)
 8000fba:	f006 fb1f 	bl	80075fc <HAL_SMBUS_Init>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_I2C1_SMBUS_Init+0x64>
  {
    Error_Handler();
 8000fc4:	f000 fe7c 	bl	8001cc0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fc8:	bf00      	nop
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	20000180 	.word	0x20000180
 8000fd0:	40005400 	.word	0x40005400
 8000fd4:	00707cbb 	.word	0x00707cbb

08000fd8 <MX_I2C2_SMBUS_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_SMBUS_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hsmbus2.Instance = I2C2;
 8000fdc:	4b1c      	ldr	r3, [pc, #112]	; (8001050 <MX_I2C2_SMBUS_Init+0x78>)
 8000fde:	4a1d      	ldr	r2, [pc, #116]	; (8001054 <MX_I2C2_SMBUS_Init+0x7c>)
 8000fe0:	601a      	str	r2, [r3, #0]
  hsmbus2.Init.Timing = 0x00707CBB;
 8000fe2:	4b1b      	ldr	r3, [pc, #108]	; (8001050 <MX_I2C2_SMBUS_Init+0x78>)
 8000fe4:	4a1c      	ldr	r2, [pc, #112]	; (8001058 <MX_I2C2_SMBUS_Init+0x80>)
 8000fe6:	605a      	str	r2, [r3, #4]
  hsmbus2.Init.AnalogFilter = SMBUS_ANALOGFILTER_ENABLE;
 8000fe8:	4b19      	ldr	r3, [pc, #100]	; (8001050 <MX_I2C2_SMBUS_Init+0x78>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	609a      	str	r2, [r3, #8]
  hsmbus2.Init.OwnAddress1 = 2;
 8000fee:	4b18      	ldr	r3, [pc, #96]	; (8001050 <MX_I2C2_SMBUS_Init+0x78>)
 8000ff0:	2202      	movs	r2, #2
 8000ff2:	60da      	str	r2, [r3, #12]
  hsmbus2.Init.AddressingMode = SMBUS_ADDRESSINGMODE_7BIT;
 8000ff4:	4b16      	ldr	r3, [pc, #88]	; (8001050 <MX_I2C2_SMBUS_Init+0x78>)
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	611a      	str	r2, [r3, #16]
  hsmbus2.Init.DualAddressMode = SMBUS_DUALADDRESS_DISABLE;
 8000ffa:	4b15      	ldr	r3, [pc, #84]	; (8001050 <MX_I2C2_SMBUS_Init+0x78>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	615a      	str	r2, [r3, #20]
  hsmbus2.Init.OwnAddress2 = 0;
 8001000:	4b13      	ldr	r3, [pc, #76]	; (8001050 <MX_I2C2_SMBUS_Init+0x78>)
 8001002:	2200      	movs	r2, #0
 8001004:	619a      	str	r2, [r3, #24]
  hsmbus2.Init.OwnAddress2Masks = SMBUS_OA2_NOMASK;
 8001006:	4b12      	ldr	r3, [pc, #72]	; (8001050 <MX_I2C2_SMBUS_Init+0x78>)
 8001008:	2200      	movs	r2, #0
 800100a:	61da      	str	r2, [r3, #28]
  hsmbus2.Init.GeneralCallMode = SMBUS_GENERALCALL_DISABLE;
 800100c:	4b10      	ldr	r3, [pc, #64]	; (8001050 <MX_I2C2_SMBUS_Init+0x78>)
 800100e:	2200      	movs	r2, #0
 8001010:	621a      	str	r2, [r3, #32]
  hsmbus2.Init.NoStretchMode = SMBUS_NOSTRETCH_DISABLE;
 8001012:	4b0f      	ldr	r3, [pc, #60]	; (8001050 <MX_I2C2_SMBUS_Init+0x78>)
 8001014:	2200      	movs	r2, #0
 8001016:	625a      	str	r2, [r3, #36]	; 0x24
  hsmbus2.Init.PacketErrorCheckMode = SMBUS_PEC_DISABLE;
 8001018:	4b0d      	ldr	r3, [pc, #52]	; (8001050 <MX_I2C2_SMBUS_Init+0x78>)
 800101a:	2200      	movs	r2, #0
 800101c:	629a      	str	r2, [r3, #40]	; 0x28
  hsmbus2.Init.PeripheralMode = SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE;
 800101e:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <MX_I2C2_SMBUS_Init+0x78>)
 8001020:	2200      	movs	r2, #0
 8001022:	62da      	str	r2, [r3, #44]	; 0x2c
  hsmbus2.Init.SMBusTimeout = 0x00008186;
 8001024:	4b0a      	ldr	r3, [pc, #40]	; (8001050 <MX_I2C2_SMBUS_Init+0x78>)
 8001026:	f248 1286 	movw	r2, #33158	; 0x8186
 800102a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_SMBUS_Init(&hsmbus2) != HAL_OK)
 800102c:	4808      	ldr	r0, [pc, #32]	; (8001050 <MX_I2C2_SMBUS_Init+0x78>)
 800102e:	f006 fae5 	bl	80075fc <HAL_SMBUS_Init>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_I2C2_SMBUS_Init+0x64>
  {
    Error_Handler();
 8001038:	f000 fe42 	bl	8001cc0 <Error_Handler>
  }

  /** configuration Alert Mode
  */
  if (HAL_SMBUS_EnableAlert_IT(&hsmbus2) != HAL_OK)
 800103c:	4804      	ldr	r0, [pc, #16]	; (8001050 <MX_I2C2_SMBUS_Init+0x78>)
 800103e:	f006 fb95 	bl	800776c <HAL_SMBUS_EnableAlert_IT>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <MX_I2C2_SMBUS_Init+0x74>
  {
    Error_Handler();
 8001048:	f000 fe3a 	bl	8001cc0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800104c:	bf00      	nop
 800104e:	bd80      	pop	{r7, pc}
 8001050:	200001d0 	.word	0x200001d0
 8001054:	40005800 	.word	0x40005800
 8001058:	00707cbb 	.word	0x00707cbb

0800105c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001060:	4b22      	ldr	r3, [pc, #136]	; (80010ec <MX_LPUART1_UART_Init+0x90>)
 8001062:	4a23      	ldr	r2, [pc, #140]	; (80010f0 <MX_LPUART1_UART_Init+0x94>)
 8001064:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8001066:	4b21      	ldr	r3, [pc, #132]	; (80010ec <MX_LPUART1_UART_Init+0x90>)
 8001068:	4a22      	ldr	r2, [pc, #136]	; (80010f4 <MX_LPUART1_UART_Init+0x98>)
 800106a:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 800106c:	4b1f      	ldr	r3, [pc, #124]	; (80010ec <MX_LPUART1_UART_Init+0x90>)
 800106e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001072:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001074:	4b1d      	ldr	r3, [pc, #116]	; (80010ec <MX_LPUART1_UART_Init+0x90>)
 8001076:	2200      	movs	r2, #0
 8001078:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800107a:	4b1c      	ldr	r3, [pc, #112]	; (80010ec <MX_LPUART1_UART_Init+0x90>)
 800107c:	2200      	movs	r2, #0
 800107e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001080:	4b1a      	ldr	r3, [pc, #104]	; (80010ec <MX_LPUART1_UART_Init+0x90>)
 8001082:	220c      	movs	r2, #12
 8001084:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001086:	4b19      	ldr	r3, [pc, #100]	; (80010ec <MX_LPUART1_UART_Init+0x90>)
 8001088:	2200      	movs	r2, #0
 800108a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800108c:	4b17      	ldr	r3, [pc, #92]	; (80010ec <MX_LPUART1_UART_Init+0x90>)
 800108e:	2200      	movs	r2, #0
 8001090:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001092:	4b16      	ldr	r3, [pc, #88]	; (80010ec <MX_LPUART1_UART_Init+0x90>)
 8001094:	2200      	movs	r2, #0
 8001096:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001098:	4b14      	ldr	r3, [pc, #80]	; (80010ec <MX_LPUART1_UART_Init+0x90>)
 800109a:	2200      	movs	r2, #0
 800109c:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800109e:	4b13      	ldr	r3, [pc, #76]	; (80010ec <MX_LPUART1_UART_Init+0x90>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80010a4:	4811      	ldr	r0, [pc, #68]	; (80010ec <MX_LPUART1_UART_Init+0x90>)
 80010a6:	f009 f92f 	bl	800a308 <HAL_UART_Init>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 80010b0:	f000 fe06 	bl	8001cc0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010b4:	2100      	movs	r1, #0
 80010b6:	480d      	ldr	r0, [pc, #52]	; (80010ec <MX_LPUART1_UART_Init+0x90>)
 80010b8:	f009 fe60 	bl	800ad7c <HAL_UARTEx_SetTxFifoThreshold>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80010c2:	f000 fdfd 	bl	8001cc0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010c6:	2100      	movs	r1, #0
 80010c8:	4808      	ldr	r0, [pc, #32]	; (80010ec <MX_LPUART1_UART_Init+0x90>)
 80010ca:	f009 fe95 	bl	800adf8 <HAL_UARTEx_SetRxFifoThreshold>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80010d4:	f000 fdf4 	bl	8001cc0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80010d8:	4804      	ldr	r0, [pc, #16]	; (80010ec <MX_LPUART1_UART_Init+0x90>)
 80010da:	f009 fe16 	bl	800ad0a <HAL_UARTEx_DisableFifoMode>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80010e4:	f000 fdec 	bl	8001cc0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80010e8:	bf00      	nop
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	20000220 	.word	0x20000220
 80010f0:	40008000 	.word	0x40008000
 80010f4:	00033324 	.word	0x00033324

080010f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010fc:	4b23      	ldr	r3, [pc, #140]	; (800118c <MX_USART2_UART_Init+0x94>)
 80010fe:	4a24      	ldr	r2, [pc, #144]	; (8001190 <MX_USART2_UART_Init+0x98>)
 8001100:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001102:	4b22      	ldr	r3, [pc, #136]	; (800118c <MX_USART2_UART_Init+0x94>)
 8001104:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001108:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800110a:	4b20      	ldr	r3, [pc, #128]	; (800118c <MX_USART2_UART_Init+0x94>)
 800110c:	2200      	movs	r2, #0
 800110e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001110:	4b1e      	ldr	r3, [pc, #120]	; (800118c <MX_USART2_UART_Init+0x94>)
 8001112:	2200      	movs	r2, #0
 8001114:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001116:	4b1d      	ldr	r3, [pc, #116]	; (800118c <MX_USART2_UART_Init+0x94>)
 8001118:	2200      	movs	r2, #0
 800111a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800111c:	4b1b      	ldr	r3, [pc, #108]	; (800118c <MX_USART2_UART_Init+0x94>)
 800111e:	220c      	movs	r2, #12
 8001120:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8001122:	4b1a      	ldr	r3, [pc, #104]	; (800118c <MX_USART2_UART_Init+0x94>)
 8001124:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001128:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800112a:	4b18      	ldr	r3, [pc, #96]	; (800118c <MX_USART2_UART_Init+0x94>)
 800112c:	2200      	movs	r2, #0
 800112e:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001130:	4b16      	ldr	r3, [pc, #88]	; (800118c <MX_USART2_UART_Init+0x94>)
 8001132:	2200      	movs	r2, #0
 8001134:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001136:	4b15      	ldr	r3, [pc, #84]	; (800118c <MX_USART2_UART_Init+0x94>)
 8001138:	2200      	movs	r2, #0
 800113a:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800113c:	4b13      	ldr	r3, [pc, #76]	; (800118c <MX_USART2_UART_Init+0x94>)
 800113e:	2200      	movs	r2, #0
 8001140:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001142:	4812      	ldr	r0, [pc, #72]	; (800118c <MX_USART2_UART_Init+0x94>)
 8001144:	f009 f8e0 	bl	800a308 <HAL_UART_Init>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 800114e:	f000 fdb7 	bl	8001cc0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001152:	2100      	movs	r1, #0
 8001154:	480d      	ldr	r0, [pc, #52]	; (800118c <MX_USART2_UART_Init+0x94>)
 8001156:	f009 fe11 	bl	800ad7c <HAL_UARTEx_SetTxFifoThreshold>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8001160:	f000 fdae 	bl	8001cc0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001164:	2100      	movs	r1, #0
 8001166:	4809      	ldr	r0, [pc, #36]	; (800118c <MX_USART2_UART_Init+0x94>)
 8001168:	f009 fe46 	bl	800adf8 <HAL_UARTEx_SetRxFifoThreshold>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8001172:	f000 fda5 	bl	8001cc0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001176:	4805      	ldr	r0, [pc, #20]	; (800118c <MX_USART2_UART_Init+0x94>)
 8001178:	f009 fdc7 	bl	800ad0a <HAL_UARTEx_DisableFifoMode>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8001182:	f000 fd9d 	bl	8001cc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	200002b0 	.word	0x200002b0
 8001190:	40004400 	.word	0x40004400

08001194 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001198:	4b22      	ldr	r3, [pc, #136]	; (8001224 <MX_USART3_UART_Init+0x90>)
 800119a:	4a23      	ldr	r2, [pc, #140]	; (8001228 <MX_USART3_UART_Init+0x94>)
 800119c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800119e:	4b21      	ldr	r3, [pc, #132]	; (8001224 <MX_USART3_UART_Init+0x90>)
 80011a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011a4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80011a6:	4b1f      	ldr	r3, [pc, #124]	; (8001224 <MX_USART3_UART_Init+0x90>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80011ac:	4b1d      	ldr	r3, [pc, #116]	; (8001224 <MX_USART3_UART_Init+0x90>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80011b2:	4b1c      	ldr	r3, [pc, #112]	; (8001224 <MX_USART3_UART_Init+0x90>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80011b8:	4b1a      	ldr	r3, [pc, #104]	; (8001224 <MX_USART3_UART_Init+0x90>)
 80011ba:	220c      	movs	r2, #12
 80011bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011be:	4b19      	ldr	r3, [pc, #100]	; (8001224 <MX_USART3_UART_Init+0x90>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80011c4:	4b17      	ldr	r3, [pc, #92]	; (8001224 <MX_USART3_UART_Init+0x90>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011ca:	4b16      	ldr	r3, [pc, #88]	; (8001224 <MX_USART3_UART_Init+0x90>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011d0:	4b14      	ldr	r3, [pc, #80]	; (8001224 <MX_USART3_UART_Init+0x90>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011d6:	4b13      	ldr	r3, [pc, #76]	; (8001224 <MX_USART3_UART_Init+0x90>)
 80011d8:	2200      	movs	r2, #0
 80011da:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80011dc:	4811      	ldr	r0, [pc, #68]	; (8001224 <MX_USART3_UART_Init+0x90>)
 80011de:	f009 f893 	bl	800a308 <HAL_UART_Init>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80011e8:	f000 fd6a 	bl	8001cc0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011ec:	2100      	movs	r1, #0
 80011ee:	480d      	ldr	r0, [pc, #52]	; (8001224 <MX_USART3_UART_Init+0x90>)
 80011f0:	f009 fdc4 	bl	800ad7c <HAL_UARTEx_SetTxFifoThreshold>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80011fa:	f000 fd61 	bl	8001cc0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011fe:	2100      	movs	r1, #0
 8001200:	4808      	ldr	r0, [pc, #32]	; (8001224 <MX_USART3_UART_Init+0x90>)
 8001202:	f009 fdf9 	bl	800adf8 <HAL_UARTEx_SetRxFifoThreshold>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800120c:	f000 fd58 	bl	8001cc0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001210:	4804      	ldr	r0, [pc, #16]	; (8001224 <MX_USART3_UART_Init+0x90>)
 8001212:	f009 fd7a 	bl	800ad0a <HAL_UARTEx_DisableFifoMode>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800121c:	f000 fd50 	bl	8001cc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001220:	bf00      	nop
 8001222:	bd80      	pop	{r7, pc}
 8001224:	20000340 	.word	0x20000340
 8001228:	40004800 	.word	0x40004800

0800122c <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockB1.Instance = SAI1_Block_B;
 8001230:	4b45      	ldr	r3, [pc, #276]	; (8001348 <MX_SAI1_Init+0x11c>)
 8001232:	4a46      	ldr	r2, [pc, #280]	; (800134c <MX_SAI1_Init+0x120>)
 8001234:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 8001236:	4b44      	ldr	r3, [pc, #272]	; (8001348 <MX_SAI1_Init+0x11c>)
 8001238:	2200      	movs	r2, #0
 800123a:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_TX;
 800123c:	4b42      	ldr	r3, [pc, #264]	; (8001348 <MX_SAI1_Init+0x11c>)
 800123e:	2200      	movs	r2, #0
 8001240:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 8001242:	4b41      	ldr	r3, [pc, #260]	; (8001348 <MX_SAI1_Init+0x11c>)
 8001244:	2240      	movs	r2, #64	; 0x40
 8001246:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001248:	4b3f      	ldr	r3, [pc, #252]	; (8001348 <MX_SAI1_Init+0x11c>)
 800124a:	2200      	movs	r2, #0
 800124c:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800124e:	4b3e      	ldr	r3, [pc, #248]	; (8001348 <MX_SAI1_Init+0x11c>)
 8001250:	2200      	movs	r2, #0
 8001252:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 8001254:	4b3c      	ldr	r3, [pc, #240]	; (8001348 <MX_SAI1_Init+0x11c>)
 8001256:	2200      	movs	r2, #0
 8001258:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800125a:	4b3b      	ldr	r3, [pc, #236]	; (8001348 <MX_SAI1_Init+0x11c>)
 800125c:	2200      	movs	r2, #0
 800125e:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001260:	4b39      	ldr	r3, [pc, #228]	; (8001348 <MX_SAI1_Init+0x11c>)
 8001262:	2200      	movs	r2, #0
 8001264:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8001266:	4b38      	ldr	r3, [pc, #224]	; (8001348 <MX_SAI1_Init+0x11c>)
 8001268:	2200      	movs	r2, #0
 800126a:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800126c:	4b36      	ldr	r3, [pc, #216]	; (8001348 <MX_SAI1_Init+0x11c>)
 800126e:	2200      	movs	r2, #0
 8001270:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001272:	4b35      	ldr	r3, [pc, #212]	; (8001348 <MX_SAI1_Init+0x11c>)
 8001274:	4a36      	ldr	r2, [pc, #216]	; (8001350 <MX_SAI1_Init+0x124>)
 8001276:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001278:	4b33      	ldr	r3, [pc, #204]	; (8001348 <MX_SAI1_Init+0x11c>)
 800127a:	2200      	movs	r2, #0
 800127c:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 800127e:	4b32      	ldr	r3, [pc, #200]	; (8001348 <MX_SAI1_Init+0x11c>)
 8001280:	2200      	movs	r2, #0
 8001282:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001284:	4b30      	ldr	r3, [pc, #192]	; (8001348 <MX_SAI1_Init+0x11c>)
 8001286:	2200      	movs	r2, #0
 8001288:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800128a:	4b2f      	ldr	r3, [pc, #188]	; (8001348 <MX_SAI1_Init+0x11c>)
 800128c:	2200      	movs	r2, #0
 800128e:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.PdmInit.Activation = DISABLE;
 8001290:	4b2d      	ldr	r3, [pc, #180]	; (8001348 <MX_SAI1_Init+0x11c>)
 8001292:	2200      	movs	r2, #0
 8001294:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.PdmInit.MicPairsNbr = 0;
 8001298:	4b2b      	ldr	r3, [pc, #172]	; (8001348 <MX_SAI1_Init+0x11c>)
 800129a:	2200      	movs	r2, #0
 800129c:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 800129e:	4b2a      	ldr	r3, [pc, #168]	; (8001348 <MX_SAI1_Init+0x11c>)
 80012a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012a4:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.FrameInit.FrameLength = 8;
 80012a6:	4b28      	ldr	r3, [pc, #160]	; (8001348 <MX_SAI1_Init+0x11c>)
 80012a8:	2208      	movs	r2, #8
 80012aa:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 80012ac:	4b26      	ldr	r3, [pc, #152]	; (8001348 <MX_SAI1_Init+0x11c>)
 80012ae:	2201      	movs	r2, #1
 80012b0:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80012b2:	4b25      	ldr	r3, [pc, #148]	; (8001348 <MX_SAI1_Init+0x11c>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80012b8:	4b23      	ldr	r3, [pc, #140]	; (8001348 <MX_SAI1_Init+0x11c>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80012be:	4b22      	ldr	r3, [pc, #136]	; (8001348 <MX_SAI1_Init+0x11c>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 80012c4:	4b20      	ldr	r3, [pc, #128]	; (8001348 <MX_SAI1_Init+0x11c>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80012ca:	4b1f      	ldr	r3, [pc, #124]	; (8001348 <MX_SAI1_Init+0x11c>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 80012d0:	4b1d      	ldr	r3, [pc, #116]	; (8001348 <MX_SAI1_Init+0x11c>)
 80012d2:	2201      	movs	r2, #1
 80012d4:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 80012d6:	4b1c      	ldr	r3, [pc, #112]	; (8001348 <MX_SAI1_Init+0x11c>)
 80012d8:	2200      	movs	r2, #0
 80012da:	671a      	str	r2, [r3, #112]	; 0x70
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 80012dc:	481a      	ldr	r0, [pc, #104]	; (8001348 <MX_SAI1_Init+0x11c>)
 80012de:	f005 fe41 	bl	8006f64 <HAL_SAI_Init>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_SAI1_Init+0xc0>
  {
    Error_Handler();
 80012e8:	f000 fcea 	bl	8001cc0 <Error_Handler>
  }
  hsai_BlockA1.Instance = SAI1_Block_A;
 80012ec:	4b19      	ldr	r3, [pc, #100]	; (8001354 <MX_SAI1_Init+0x128>)
 80012ee:	4a1a      	ldr	r2, [pc, #104]	; (8001358 <MX_SAI1_Init+0x12c>)
 80012f0:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 80012f2:	4b18      	ldr	r3, [pc, #96]	; (8001354 <MX_SAI1_Init+0x128>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 80012f8:	4b16      	ldr	r3, [pc, #88]	; (8001354 <MX_SAI1_Init+0x128>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80012fe:	4b15      	ldr	r3, [pc, #84]	; (8001354 <MX_SAI1_Init+0x128>)
 8001300:	2200      	movs	r2, #0
 8001302:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001304:	4b13      	ldr	r3, [pc, #76]	; (8001354 <MX_SAI1_Init+0x128>)
 8001306:	2200      	movs	r2, #0
 8001308:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800130a:	4b12      	ldr	r3, [pc, #72]	; (8001354 <MX_SAI1_Init+0x128>)
 800130c:	2200      	movs	r2, #0
 800130e:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001310:	4b10      	ldr	r3, [pc, #64]	; (8001354 <MX_SAI1_Init+0x128>)
 8001312:	4a0f      	ldr	r2, [pc, #60]	; (8001350 <MX_SAI1_Init+0x124>)
 8001314:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001316:	4b0f      	ldr	r3, [pc, #60]	; (8001354 <MX_SAI1_Init+0x128>)
 8001318:	2200      	movs	r2, #0
 800131a:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 800131c:	4b0d      	ldr	r3, [pc, #52]	; (8001354 <MX_SAI1_Init+0x128>)
 800131e:	2200      	movs	r2, #0
 8001320:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001322:	4b0c      	ldr	r3, [pc, #48]	; (8001354 <MX_SAI1_Init+0x128>)
 8001324:	2200      	movs	r2, #0
 8001326:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001328:	4b0a      	ldr	r3, [pc, #40]	; (8001354 <MX_SAI1_Init+0x128>)
 800132a:	2200      	movs	r2, #0
 800132c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 800132e:	2302      	movs	r3, #2
 8001330:	2200      	movs	r2, #0
 8001332:	2100      	movs	r1, #0
 8001334:	4807      	ldr	r0, [pc, #28]	; (8001354 <MX_SAI1_Init+0x128>)
 8001336:	f005 fde3 	bl	8006f00 <HAL_SAI_InitProtocol>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_SAI1_Init+0x118>
  {
    Error_Handler();
 8001340:	f000 fcbe 	bl	8001cc0 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8001344:	bf00      	nop
 8001346:	bd80      	pop	{r7, pc}
 8001348:	200003d0 	.word	0x200003d0
 800134c:	40015424 	.word	0x40015424
 8001350:	0002ee00 	.word	0x0002ee00
 8001354:	20000464 	.word	0x20000464
 8001358:	40015404 	.word	0x40015404

0800135c <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8001360:	4b2f      	ldr	r3, [pc, #188]	; (8001420 <MX_SAI2_Init+0xc4>)
 8001362:	4a30      	ldr	r2, [pc, #192]	; (8001424 <MX_SAI2_Init+0xc8>)
 8001364:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001366:	4b2e      	ldr	r3, [pc, #184]	; (8001420 <MX_SAI2_Init+0xc4>)
 8001368:	2200      	movs	r2, #0
 800136a:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 800136c:	4b2c      	ldr	r3, [pc, #176]	; (8001420 <MX_SAI2_Init+0xc4>)
 800136e:	2200      	movs	r2, #0
 8001370:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8001372:	4b2b      	ldr	r3, [pc, #172]	; (8001420 <MX_SAI2_Init+0xc4>)
 8001374:	2240      	movs	r2, #64	; 0x40
 8001376:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001378:	4b29      	ldr	r3, [pc, #164]	; (8001420 <MX_SAI2_Init+0xc4>)
 800137a:	2200      	movs	r2, #0
 800137c:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800137e:	4b28      	ldr	r3, [pc, #160]	; (8001420 <MX_SAI2_Init+0xc4>)
 8001380:	2200      	movs	r2, #0
 8001382:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001384:	4b26      	ldr	r3, [pc, #152]	; (8001420 <MX_SAI2_Init+0xc4>)
 8001386:	2200      	movs	r2, #0
 8001388:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800138a:	4b25      	ldr	r3, [pc, #148]	; (8001420 <MX_SAI2_Init+0xc4>)
 800138c:	2200      	movs	r2, #0
 800138e:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001390:	4b23      	ldr	r3, [pc, #140]	; (8001420 <MX_SAI2_Init+0xc4>)
 8001392:	2200      	movs	r2, #0
 8001394:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8001396:	4b22      	ldr	r3, [pc, #136]	; (8001420 <MX_SAI2_Init+0xc4>)
 8001398:	2200      	movs	r2, #0
 800139a:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800139c:	4b20      	ldr	r3, [pc, #128]	; (8001420 <MX_SAI2_Init+0xc4>)
 800139e:	2200      	movs	r2, #0
 80013a0:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 80013a2:	4b1f      	ldr	r3, [pc, #124]	; (8001420 <MX_SAI2_Init+0xc4>)
 80013a4:	4a20      	ldr	r2, [pc, #128]	; (8001428 <MX_SAI2_Init+0xcc>)
 80013a6:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80013a8:	4b1d      	ldr	r3, [pc, #116]	; (8001420 <MX_SAI2_Init+0xc4>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 80013ae:	4b1c      	ldr	r3, [pc, #112]	; (8001420 <MX_SAI2_Init+0xc4>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 80013b4:	4b1a      	ldr	r3, [pc, #104]	; (8001420 <MX_SAI2_Init+0xc4>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80013ba:	4b19      	ldr	r3, [pc, #100]	; (8001420 <MX_SAI2_Init+0xc4>)
 80013bc:	2200      	movs	r2, #0
 80013be:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.PdmInit.Activation = DISABLE;
 80013c0:	4b17      	ldr	r3, [pc, #92]	; (8001420 <MX_SAI2_Init+0xc4>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.PdmInit.MicPairsNbr = 0;
 80013c8:	4b15      	ldr	r3, [pc, #84]	; (8001420 <MX_SAI2_Init+0xc4>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 80013ce:	4b14      	ldr	r3, [pc, #80]	; (8001420 <MX_SAI2_Init+0xc4>)
 80013d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013d4:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 80013d6:	4b12      	ldr	r3, [pc, #72]	; (8001420 <MX_SAI2_Init+0xc4>)
 80013d8:	2208      	movs	r2, #8
 80013da:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 80013dc:	4b10      	ldr	r3, [pc, #64]	; (8001420 <MX_SAI2_Init+0xc4>)
 80013de:	2201      	movs	r2, #1
 80013e0:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80013e2:	4b0f      	ldr	r3, [pc, #60]	; (8001420 <MX_SAI2_Init+0xc4>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80013e8:	4b0d      	ldr	r3, [pc, #52]	; (8001420 <MX_SAI2_Init+0xc4>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80013ee:	4b0c      	ldr	r3, [pc, #48]	; (8001420 <MX_SAI2_Init+0xc4>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 80013f4:	4b0a      	ldr	r3, [pc, #40]	; (8001420 <MX_SAI2_Init+0xc4>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80013fa:	4b09      	ldr	r3, [pc, #36]	; (8001420 <MX_SAI2_Init+0xc4>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8001400:	4b07      	ldr	r3, [pc, #28]	; (8001420 <MX_SAI2_Init+0xc4>)
 8001402:	2201      	movs	r2, #1
 8001404:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8001406:	4b06      	ldr	r3, [pc, #24]	; (8001420 <MX_SAI2_Init+0xc4>)
 8001408:	2200      	movs	r2, #0
 800140a:	671a      	str	r2, [r3, #112]	; 0x70
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 800140c:	4804      	ldr	r0, [pc, #16]	; (8001420 <MX_SAI2_Init+0xc4>)
 800140e:	f005 fda9 	bl	8006f64 <HAL_SAI_Init>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <MX_SAI2_Init+0xc0>
  {
    Error_Handler();
 8001418:	f000 fc52 	bl	8001cc0 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 800141c:	bf00      	nop
 800141e:	bd80      	pop	{r7, pc}
 8001420:	200004f8 	.word	0x200004f8
 8001424:	40015804 	.word	0x40015804
 8001428:	0002ee00 	.word	0x0002ee00

0800142c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001430:	4b1b      	ldr	r3, [pc, #108]	; (80014a0 <MX_SPI1_Init+0x74>)
 8001432:	4a1c      	ldr	r2, [pc, #112]	; (80014a4 <MX_SPI1_Init+0x78>)
 8001434:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001436:	4b1a      	ldr	r3, [pc, #104]	; (80014a0 <MX_SPI1_Init+0x74>)
 8001438:	f44f 7282 	mov.w	r2, #260	; 0x104
 800143c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800143e:	4b18      	ldr	r3, [pc, #96]	; (80014a0 <MX_SPI1_Init+0x74>)
 8001440:	2200      	movs	r2, #0
 8001442:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001444:	4b16      	ldr	r3, [pc, #88]	; (80014a0 <MX_SPI1_Init+0x74>)
 8001446:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800144a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800144c:	4b14      	ldr	r3, [pc, #80]	; (80014a0 <MX_SPI1_Init+0x74>)
 800144e:	2200      	movs	r2, #0
 8001450:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001452:	4b13      	ldr	r3, [pc, #76]	; (80014a0 <MX_SPI1_Init+0x74>)
 8001454:	2200      	movs	r2, #0
 8001456:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001458:	4b11      	ldr	r3, [pc, #68]	; (80014a0 <MX_SPI1_Init+0x74>)
 800145a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800145e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001460:	4b0f      	ldr	r3, [pc, #60]	; (80014a0 <MX_SPI1_Init+0x74>)
 8001462:	2218      	movs	r2, #24
 8001464:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001466:	4b0e      	ldr	r3, [pc, #56]	; (80014a0 <MX_SPI1_Init+0x74>)
 8001468:	2200      	movs	r2, #0
 800146a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800146c:	4b0c      	ldr	r3, [pc, #48]	; (80014a0 <MX_SPI1_Init+0x74>)
 800146e:	2200      	movs	r2, #0
 8001470:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001472:	4b0b      	ldr	r3, [pc, #44]	; (80014a0 <MX_SPI1_Init+0x74>)
 8001474:	2200      	movs	r2, #0
 8001476:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001478:	4b09      	ldr	r3, [pc, #36]	; (80014a0 <MX_SPI1_Init+0x74>)
 800147a:	2207      	movs	r2, #7
 800147c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800147e:	4b08      	ldr	r3, [pc, #32]	; (80014a0 <MX_SPI1_Init+0x74>)
 8001480:	2200      	movs	r2, #0
 8001482:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001484:	4b06      	ldr	r3, [pc, #24]	; (80014a0 <MX_SPI1_Init+0x74>)
 8001486:	2200      	movs	r2, #0
 8001488:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800148a:	4805      	ldr	r0, [pc, #20]	; (80014a0 <MX_SPI1_Init+0x74>)
 800148c:	f006 f9c1 	bl	8007812 <HAL_SPI_Init>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001496:	f000 fc13 	bl	8001cc0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	2000058c 	.word	0x2000058c
 80014a4:	40013000 	.word	0x40013000

080014a8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80014ac:	4b1b      	ldr	r3, [pc, #108]	; (800151c <MX_SPI3_Init+0x74>)
 80014ae:	4a1c      	ldr	r2, [pc, #112]	; (8001520 <MX_SPI3_Init+0x78>)
 80014b0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80014b2:	4b1a      	ldr	r3, [pc, #104]	; (800151c <MX_SPI3_Init+0x74>)
 80014b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014b8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80014ba:	4b18      	ldr	r3, [pc, #96]	; (800151c <MX_SPI3_Init+0x74>)
 80014bc:	2200      	movs	r2, #0
 80014be:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80014c0:	4b16      	ldr	r3, [pc, #88]	; (800151c <MX_SPI3_Init+0x74>)
 80014c2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80014c6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014c8:	4b14      	ldr	r3, [pc, #80]	; (800151c <MX_SPI3_Init+0x74>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014ce:	4b13      	ldr	r3, [pc, #76]	; (800151c <MX_SPI3_Init+0x74>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80014d4:	4b11      	ldr	r3, [pc, #68]	; (800151c <MX_SPI3_Init+0x74>)
 80014d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014da:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80014dc:	4b0f      	ldr	r3, [pc, #60]	; (800151c <MX_SPI3_Init+0x74>)
 80014de:	2200      	movs	r2, #0
 80014e0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014e2:	4b0e      	ldr	r3, [pc, #56]	; (800151c <MX_SPI3_Init+0x74>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80014e8:	4b0c      	ldr	r3, [pc, #48]	; (800151c <MX_SPI3_Init+0x74>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014ee:	4b0b      	ldr	r3, [pc, #44]	; (800151c <MX_SPI3_Init+0x74>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80014f4:	4b09      	ldr	r3, [pc, #36]	; (800151c <MX_SPI3_Init+0x74>)
 80014f6:	2207      	movs	r2, #7
 80014f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80014fa:	4b08      	ldr	r3, [pc, #32]	; (800151c <MX_SPI3_Init+0x74>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001500:	4b06      	ldr	r3, [pc, #24]	; (800151c <MX_SPI3_Init+0x74>)
 8001502:	2208      	movs	r2, #8
 8001504:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001506:	4805      	ldr	r0, [pc, #20]	; (800151c <MX_SPI3_Init+0x74>)
 8001508:	f006 f983 	bl	8007812 <HAL_SPI_Init>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001512:	f000 fbd5 	bl	8001cc0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001516:	bf00      	nop
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	200005f0 	.word	0x200005f0
 8001520:	40003c00 	.word	0x40003c00

08001524 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b09c      	sub	sp, #112	; 0x70
 8001528:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800152a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800152e:	2200      	movs	r2, #0
 8001530:	601a      	str	r2, [r3, #0]
 8001532:	605a      	str	r2, [r3, #4]
 8001534:	609a      	str	r2, [r3, #8]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8001536:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800153a:	2200      	movs	r2, #0
 800153c:	601a      	str	r2, [r3, #0]
 800153e:	605a      	str	r2, [r3, #4]
 8001540:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001542:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001546:	2200      	movs	r2, #0
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	605a      	str	r2, [r3, #4]
 800154c:	609a      	str	r2, [r3, #8]
 800154e:	60da      	str	r2, [r3, #12]
 8001550:	611a      	str	r2, [r3, #16]
 8001552:	615a      	str	r2, [r3, #20]
 8001554:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001556:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800155a:	2200      	movs	r2, #0
 800155c:	601a      	str	r2, [r3, #0]
 800155e:	605a      	str	r2, [r3, #4]
 8001560:	609a      	str	r2, [r3, #8]
 8001562:	60da      	str	r2, [r3, #12]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001564:	463b      	mov	r3, r7
 8001566:	222c      	movs	r2, #44	; 0x2c
 8001568:	2100      	movs	r1, #0
 800156a:	4618      	mov	r0, r3
 800156c:	f009 fd02 	bl	800af74 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001570:	4b5e      	ldr	r3, [pc, #376]	; (80016ec <MX_TIM1_Init+0x1c8>)
 8001572:	4a5f      	ldr	r2, [pc, #380]	; (80016f0 <MX_TIM1_Init+0x1cc>)
 8001574:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3999;
 8001576:	4b5d      	ldr	r3, [pc, #372]	; (80016ec <MX_TIM1_Init+0x1c8>)
 8001578:	f640 729f 	movw	r2, #3999	; 0xf9f
 800157c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800157e:	4b5b      	ldr	r3, [pc, #364]	; (80016ec <MX_TIM1_Init+0x1c8>)
 8001580:	2200      	movs	r2, #0
 8001582:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8001584:	4b59      	ldr	r3, [pc, #356]	; (80016ec <MX_TIM1_Init+0x1c8>)
 8001586:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800158a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800158c:	4b57      	ldr	r3, [pc, #348]	; (80016ec <MX_TIM1_Init+0x1c8>)
 800158e:	2200      	movs	r2, #0
 8001590:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001592:	4b56      	ldr	r3, [pc, #344]	; (80016ec <MX_TIM1_Init+0x1c8>)
 8001594:	2200      	movs	r2, #0
 8001596:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001598:	4b54      	ldr	r3, [pc, #336]	; (80016ec <MX_TIM1_Init+0x1c8>)
 800159a:	2200      	movs	r2, #0
 800159c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800159e:	4853      	ldr	r0, [pc, #332]	; (80016ec <MX_TIM1_Init+0x1c8>)
 80015a0:	f007 f89f 	bl	80086e2 <HAL_TIM_PWM_Init>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80015aa:	f000 fb89 	bl	8001cc0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80015ae:	484f      	ldr	r0, [pc, #316]	; (80016ec <MX_TIM1_Init+0x1c8>)
 80015b0:	f007 f9f4 	bl	800899c <HAL_TIM_IC_Init>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 80015ba:	f000 fb81 	bl	8001cc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015be:	2300      	movs	r3, #0
 80015c0:	667b      	str	r3, [r7, #100]	; 0x64
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80015c2:	2300      	movs	r3, #0
 80015c4:	66bb      	str	r3, [r7, #104]	; 0x68
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015c6:	2300      	movs	r3, #0
 80015c8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015ca:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80015ce:	4619      	mov	r1, r3
 80015d0:	4846      	ldr	r0, [pc, #280]	; (80016ec <MX_TIM1_Init+0x1c8>)
 80015d2:	f008 fcaf 	bl	8009f34 <HAL_TIMEx_MasterConfigSynchronization>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 80015dc:	f000 fb70 	bl	8001cc0 <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 80015e0:	2301      	movs	r3, #1
 80015e2:	65bb      	str	r3, [r7, #88]	; 0x58
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 80015e4:	2301      	movs	r3, #1
 80015e6:	65fb      	str	r3, [r7, #92]	; 0x5c
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 80015e8:	2300      	movs	r3, #0
 80015ea:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 80015ec:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80015f0:	461a      	mov	r2, r3
 80015f2:	2101      	movs	r1, #1
 80015f4:	483d      	ldr	r0, [pc, #244]	; (80016ec <MX_TIM1_Init+0x1c8>)
 80015f6:	f008 fda3 	bl	800a140 <HAL_TIMEx_ConfigBreakInput>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <MX_TIM1_Init+0xe0>
  {
    Error_Handler();
 8001600:	f000 fb5e 	bl	8001cc0 <Error_Handler>
  }
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 8001604:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001608:	461a      	mov	r2, r3
 800160a:	2102      	movs	r1, #2
 800160c:	4837      	ldr	r0, [pc, #220]	; (80016ec <MX_TIM1_Init+0x1c8>)
 800160e:	f008 fd97 	bl	800a140 <HAL_TIMEx_ConfigBreakInput>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001618:	f000 fb52 	bl	8001cc0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800161c:	2360      	movs	r3, #96	; 0x60
 800161e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.Pulse = 0;
 8001620:	2300      	movs	r3, #0
 8001622:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001624:	2300      	movs	r3, #0
 8001626:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001628:	2300      	movs	r3, #0
 800162a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800162c:	2300      	movs	r3, #0
 800162e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001630:	2300      	movs	r3, #0
 8001632:	653b      	str	r3, [r7, #80]	; 0x50
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001634:	2300      	movs	r3, #0
 8001636:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001638:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800163c:	2200      	movs	r2, #0
 800163e:	4619      	mov	r1, r3
 8001640:	482a      	ldr	r0, [pc, #168]	; (80016ec <MX_TIM1_Init+0x1c8>)
 8001642:	f007 fd13 	bl	800906c <HAL_TIM_PWM_ConfigChannel>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 800164c:	f000 fb38 	bl	8001cc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001650:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001654:	2204      	movs	r2, #4
 8001656:	4619      	mov	r1, r3
 8001658:	4824      	ldr	r0, [pc, #144]	; (80016ec <MX_TIM1_Init+0x1c8>)
 800165a:	f007 fd07 	bl	800906c <HAL_TIM_PWM_ConfigChannel>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8001664:	f000 fb2c 	bl	8001cc0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001668:	2302      	movs	r3, #2
 800166a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800166c:	2301      	movs	r3, #1
 800166e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001670:	2300      	movs	r3, #0
 8001672:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigIC.ICFilter = 0;
 8001674:	2300      	movs	r3, #0
 8001676:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001678:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800167c:	2208      	movs	r2, #8
 800167e:	4619      	mov	r1, r3
 8001680:	481a      	ldr	r0, [pc, #104]	; (80016ec <MX_TIM1_Init+0x1c8>)
 8001682:	f007 fc56 	bl	8008f32 <HAL_TIM_IC_ConfigChannel>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <MX_TIM1_Init+0x16c>
  {
    Error_Handler();
 800168c:	f000 fb18 	bl	8001cc0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8001690:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001694:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8001696:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800169a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800169c:	2300      	movs	r3, #0
 800169e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80016a0:	2300      	movs	r3, #0
 80016a2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 80016a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016a8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016ae:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80016b0:	2300      	movs	r3, #0
 80016b2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_ENABLE;
 80016b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80016b8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80016ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016be:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 80016c0:	2300      	movs	r3, #0
 80016c2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80016c4:	2300      	movs	r3, #0
 80016c6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80016c8:	463b      	mov	r3, r7
 80016ca:	4619      	mov	r1, r3
 80016cc:	4807      	ldr	r0, [pc, #28]	; (80016ec <MX_TIM1_Init+0x1c8>)
 80016ce:	f008 fcb9 	bl	800a044 <HAL_TIMEx_ConfigBreakDeadTime>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <MX_TIM1_Init+0x1b8>
  {
    Error_Handler();
 80016d8:	f000 faf2 	bl	8001cc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80016dc:	4803      	ldr	r0, [pc, #12]	; (80016ec <MX_TIM1_Init+0x1c8>)
 80016de:	f000 ff95 	bl	800260c <HAL_TIM_MspPostInit>

}
 80016e2:	bf00      	nop
 80016e4:	3770      	adds	r7, #112	; 0x70
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	20000654 	.word	0x20000654
 80016f0:	40012c00 	.word	0x40012c00

080016f4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b08e      	sub	sp, #56	; 0x38
 80016f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016fe:	2200      	movs	r2, #0
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	605a      	str	r2, [r3, #4]
 8001704:	609a      	str	r2, [r3, #8]
 8001706:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001708:	f107 031c 	add.w	r3, r7, #28
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	605a      	str	r2, [r3, #4]
 8001712:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001714:	463b      	mov	r3, r7
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	605a      	str	r2, [r3, #4]
 800171c:	609a      	str	r2, [r3, #8]
 800171e:	60da      	str	r2, [r3, #12]
 8001720:	611a      	str	r2, [r3, #16]
 8001722:	615a      	str	r2, [r3, #20]
 8001724:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001726:	4b2e      	ldr	r3, [pc, #184]	; (80017e0 <MX_TIM2_Init+0xec>)
 8001728:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800172c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 319;
 800172e:	4b2c      	ldr	r3, [pc, #176]	; (80017e0 <MX_TIM2_Init+0xec>)
 8001730:	f240 123f 	movw	r2, #319	; 0x13f
 8001734:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001736:	4b2a      	ldr	r3, [pc, #168]	; (80017e0 <MX_TIM2_Init+0xec>)
 8001738:	2200      	movs	r2, #0
 800173a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4000;
 800173c:	4b28      	ldr	r3, [pc, #160]	; (80017e0 <MX_TIM2_Init+0xec>)
 800173e:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8001742:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001744:	4b26      	ldr	r3, [pc, #152]	; (80017e0 <MX_TIM2_Init+0xec>)
 8001746:	2200      	movs	r2, #0
 8001748:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800174a:	4b25      	ldr	r3, [pc, #148]	; (80017e0 <MX_TIM2_Init+0xec>)
 800174c:	2200      	movs	r2, #0
 800174e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001750:	4823      	ldr	r0, [pc, #140]	; (80017e0 <MX_TIM2_Init+0xec>)
 8001752:	f006 ff6f 	bl	8008634 <HAL_TIM_Base_Init>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 800175c:	f000 fab0 	bl	8001cc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001760:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001764:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001766:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800176a:	4619      	mov	r1, r3
 800176c:	481c      	ldr	r0, [pc, #112]	; (80017e0 <MX_TIM2_Init+0xec>)
 800176e:	f007 fd91 	bl	8009294 <HAL_TIM_ConfigClockSource>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8001778:	f000 faa2 	bl	8001cc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800177c:	4818      	ldr	r0, [pc, #96]	; (80017e0 <MX_TIM2_Init+0xec>)
 800177e:	f006 ffb0 	bl	80086e2 <HAL_TIM_PWM_Init>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001788:	f000 fa9a 	bl	8001cc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800178c:	2300      	movs	r3, #0
 800178e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001790:	2300      	movs	r3, #0
 8001792:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001794:	f107 031c 	add.w	r3, r7, #28
 8001798:	4619      	mov	r1, r3
 800179a:	4811      	ldr	r0, [pc, #68]	; (80017e0 <MX_TIM2_Init+0xec>)
 800179c:	f008 fbca 	bl	8009f34 <HAL_TIMEx_MasterConfigSynchronization>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80017a6:	f000 fa8b 	bl	8001cc0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017aa:	2360      	movs	r3, #96	; 0x60
 80017ac:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1;
 80017ae:	2301      	movs	r3, #1
 80017b0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017b2:	2300      	movs	r3, #0
 80017b4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017b6:	2300      	movs	r3, #0
 80017b8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017ba:	463b      	mov	r3, r7
 80017bc:	2200      	movs	r2, #0
 80017be:	4619      	mov	r1, r3
 80017c0:	4807      	ldr	r0, [pc, #28]	; (80017e0 <MX_TIM2_Init+0xec>)
 80017c2:	f007 fc53 	bl	800906c <HAL_TIM_PWM_ConfigChannel>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 80017cc:	f000 fa78 	bl	8001cc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80017d0:	4803      	ldr	r0, [pc, #12]	; (80017e0 <MX_TIM2_Init+0xec>)
 80017d2:	f000 ff1b 	bl	800260c <HAL_TIM_MspPostInit>

}
 80017d6:	bf00      	nop
 80017d8:	3738      	adds	r7, #56	; 0x38
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	200006a0 	.word	0x200006a0

080017e4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b08c      	sub	sp, #48	; 0x30
 80017e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017ea:	f107 0320 	add.w	r3, r7, #32
 80017ee:	2200      	movs	r2, #0
 80017f0:	601a      	str	r2, [r3, #0]
 80017f2:	605a      	str	r2, [r3, #4]
 80017f4:	609a      	str	r2, [r3, #8]
 80017f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017f8:	f107 0314 	add.w	r3, r7, #20
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	605a      	str	r2, [r3, #4]
 8001802:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001804:	1d3b      	adds	r3, r7, #4
 8001806:	2200      	movs	r2, #0
 8001808:	601a      	str	r2, [r3, #0]
 800180a:	605a      	str	r2, [r3, #4]
 800180c:	609a      	str	r2, [r3, #8]
 800180e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001810:	4b2b      	ldr	r3, [pc, #172]	; (80018c0 <MX_TIM3_Init+0xdc>)
 8001812:	4a2c      	ldr	r2, [pc, #176]	; (80018c4 <MX_TIM3_Init+0xe0>)
 8001814:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 31999;
 8001816:	4b2a      	ldr	r3, [pc, #168]	; (80018c0 <MX_TIM3_Init+0xdc>)
 8001818:	f647 42ff 	movw	r2, #31999	; 0x7cff
 800181c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800181e:	4b28      	ldr	r3, [pc, #160]	; (80018c0 <MX_TIM3_Init+0xdc>)
 8001820:	2200      	movs	r2, #0
 8001822:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 31999;
 8001824:	4b26      	ldr	r3, [pc, #152]	; (80018c0 <MX_TIM3_Init+0xdc>)
 8001826:	f647 42ff 	movw	r2, #31999	; 0x7cff
 800182a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800182c:	4b24      	ldr	r3, [pc, #144]	; (80018c0 <MX_TIM3_Init+0xdc>)
 800182e:	2200      	movs	r2, #0
 8001830:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001832:	4b23      	ldr	r3, [pc, #140]	; (80018c0 <MX_TIM3_Init+0xdc>)
 8001834:	2200      	movs	r2, #0
 8001836:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001838:	4821      	ldr	r0, [pc, #132]	; (80018c0 <MX_TIM3_Init+0xdc>)
 800183a:	f006 fefb 	bl	8008634 <HAL_TIM_Base_Init>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001844:	f000 fa3c 	bl	8001cc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001848:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800184c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800184e:	f107 0320 	add.w	r3, r7, #32
 8001852:	4619      	mov	r1, r3
 8001854:	481a      	ldr	r0, [pc, #104]	; (80018c0 <MX_TIM3_Init+0xdc>)
 8001856:	f007 fd1d 	bl	8009294 <HAL_TIM_ConfigClockSource>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8001860:	f000 fa2e 	bl	8001cc0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001864:	4816      	ldr	r0, [pc, #88]	; (80018c0 <MX_TIM3_Init+0xdc>)
 8001866:	f007 f899 	bl	800899c <HAL_TIM_IC_Init>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8001870:	f000 fa26 	bl	8001cc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001874:	2300      	movs	r3, #0
 8001876:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001878:	2300      	movs	r3, #0
 800187a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800187c:	f107 0314 	add.w	r3, r7, #20
 8001880:	4619      	mov	r1, r3
 8001882:	480f      	ldr	r0, [pc, #60]	; (80018c0 <MX_TIM3_Init+0xdc>)
 8001884:	f008 fb56 	bl	8009f34 <HAL_TIMEx_MasterConfigSynchronization>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 800188e:	f000 fa17 	bl	8001cc0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001892:	2302      	movs	r3, #2
 8001894:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001896:	2301      	movs	r3, #1
 8001898:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800189a:	2300      	movs	r3, #0
 800189c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800189e:	2300      	movs	r3, #0
 80018a0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80018a2:	1d3b      	adds	r3, r7, #4
 80018a4:	2204      	movs	r2, #4
 80018a6:	4619      	mov	r1, r3
 80018a8:	4805      	ldr	r0, [pc, #20]	; (80018c0 <MX_TIM3_Init+0xdc>)
 80018aa:	f007 fb42 	bl	8008f32 <HAL_TIM_IC_ConfigChannel>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 80018b4:	f000 fa04 	bl	8001cc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80018b8:	bf00      	nop
 80018ba:	3730      	adds	r7, #48	; 0x30
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	200006ec 	.word	0x200006ec
 80018c4:	40000400 	.word	0x40000400

080018c8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b08e      	sub	sp, #56	; 0x38
 80018cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]
 80018d6:	605a      	str	r2, [r3, #4]
 80018d8:	609a      	str	r2, [r3, #8]
 80018da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018dc:	f107 031c 	add.w	r3, r7, #28
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]
 80018e4:	605a      	str	r2, [r3, #4]
 80018e6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018e8:	463b      	mov	r3, r7
 80018ea:	2200      	movs	r2, #0
 80018ec:	601a      	str	r2, [r3, #0]
 80018ee:	605a      	str	r2, [r3, #4]
 80018f0:	609a      	str	r2, [r3, #8]
 80018f2:	60da      	str	r2, [r3, #12]
 80018f4:	611a      	str	r2, [r3, #16]
 80018f6:	615a      	str	r2, [r3, #20]
 80018f8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80018fa:	4b38      	ldr	r3, [pc, #224]	; (80019dc <MX_TIM4_Init+0x114>)
 80018fc:	4a38      	ldr	r2, [pc, #224]	; (80019e0 <MX_TIM4_Init+0x118>)
 80018fe:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 6399;
 8001900:	4b36      	ldr	r3, [pc, #216]	; (80019dc <MX_TIM4_Init+0x114>)
 8001902:	f641 02ff 	movw	r2, #6399	; 0x18ff
 8001906:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001908:	4b34      	ldr	r3, [pc, #208]	; (80019dc <MX_TIM4_Init+0x114>)
 800190a:	2200      	movs	r2, #0
 800190c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 800190e:	4b33      	ldr	r3, [pc, #204]	; (80019dc <MX_TIM4_Init+0x114>)
 8001910:	2263      	movs	r2, #99	; 0x63
 8001912:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001914:	4b31      	ldr	r3, [pc, #196]	; (80019dc <MX_TIM4_Init+0x114>)
 8001916:	2200      	movs	r2, #0
 8001918:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800191a:	4b30      	ldr	r3, [pc, #192]	; (80019dc <MX_TIM4_Init+0x114>)
 800191c:	2200      	movs	r2, #0
 800191e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001920:	482e      	ldr	r0, [pc, #184]	; (80019dc <MX_TIM4_Init+0x114>)
 8001922:	f006 fe87 	bl	8008634 <HAL_TIM_Base_Init>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 800192c:	f000 f9c8 	bl	8001cc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001930:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001934:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001936:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800193a:	4619      	mov	r1, r3
 800193c:	4827      	ldr	r0, [pc, #156]	; (80019dc <MX_TIM4_Init+0x114>)
 800193e:	f007 fca9 	bl	8009294 <HAL_TIM_ConfigClockSource>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001948:	f000 f9ba 	bl	8001cc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800194c:	4823      	ldr	r0, [pc, #140]	; (80019dc <MX_TIM4_Init+0x114>)
 800194e:	f006 fec8 	bl	80086e2 <HAL_TIM_PWM_Init>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001958:	f000 f9b2 	bl	8001cc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800195c:	2300      	movs	r3, #0
 800195e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001960:	2300      	movs	r3, #0
 8001962:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001964:	f107 031c 	add.w	r3, r7, #28
 8001968:	4619      	mov	r1, r3
 800196a:	481c      	ldr	r0, [pc, #112]	; (80019dc <MX_TIM4_Init+0x114>)
 800196c:	f008 fae2 	bl	8009f34 <HAL_TIMEx_MasterConfigSynchronization>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001976:	f000 f9a3 	bl	8001cc0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800197a:	2360      	movs	r3, #96	; 0x60
 800197c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800197e:	2300      	movs	r3, #0
 8001980:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001982:	2300      	movs	r3, #0
 8001984:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001986:	2300      	movs	r3, #0
 8001988:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800198a:	463b      	mov	r3, r7
 800198c:	2204      	movs	r2, #4
 800198e:	4619      	mov	r1, r3
 8001990:	4812      	ldr	r0, [pc, #72]	; (80019dc <MX_TIM4_Init+0x114>)
 8001992:	f007 fb6b 	bl	800906c <HAL_TIM_PWM_ConfigChannel>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 800199c:	f000 f990 	bl	8001cc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80019a0:	463b      	mov	r3, r7
 80019a2:	2208      	movs	r2, #8
 80019a4:	4619      	mov	r1, r3
 80019a6:	480d      	ldr	r0, [pc, #52]	; (80019dc <MX_TIM4_Init+0x114>)
 80019a8:	f007 fb60 	bl	800906c <HAL_TIM_PWM_ConfigChannel>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 80019b2:	f000 f985 	bl	8001cc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80019b6:	463b      	mov	r3, r7
 80019b8:	220c      	movs	r2, #12
 80019ba:	4619      	mov	r1, r3
 80019bc:	4807      	ldr	r0, [pc, #28]	; (80019dc <MX_TIM4_Init+0x114>)
 80019be:	f007 fb55 	bl	800906c <HAL_TIM_PWM_ConfigChannel>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 80019c8:	f000 f97a 	bl	8001cc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80019cc:	4803      	ldr	r0, [pc, #12]	; (80019dc <MX_TIM4_Init+0x114>)
 80019ce:	f000 fe1d 	bl	800260c <HAL_TIM_MspPostInit>

}
 80019d2:	bf00      	nop
 80019d4:	3738      	adds	r7, #56	; 0x38
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	20000738 	.word	0x20000738
 80019e0:	40000800 	.word	0x40000800

080019e4 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b096      	sub	sp, #88	; 0x58
 80019e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019ea:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80019ee:	2200      	movs	r2, #0
 80019f0:	601a      	str	r2, [r3, #0]
 80019f2:	605a      	str	r2, [r3, #4]
 80019f4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019fa:	2200      	movs	r2, #0
 80019fc:	601a      	str	r2, [r3, #0]
 80019fe:	605a      	str	r2, [r3, #4]
 8001a00:	609a      	str	r2, [r3, #8]
 8001a02:	60da      	str	r2, [r3, #12]
 8001a04:	611a      	str	r2, [r3, #16]
 8001a06:	615a      	str	r2, [r3, #20]
 8001a08:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a0a:	1d3b      	adds	r3, r7, #4
 8001a0c:	222c      	movs	r2, #44	; 0x2c
 8001a0e:	2100      	movs	r1, #0
 8001a10:	4618      	mov	r0, r3
 8001a12:	f009 faaf 	bl	800af74 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001a16:	4b33      	ldr	r3, [pc, #204]	; (8001ae4 <MX_TIM15_Init+0x100>)
 8001a18:	4a33      	ldr	r2, [pc, #204]	; (8001ae8 <MX_TIM15_Init+0x104>)
 8001a1a:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8001a1c:	4b31      	ldr	r3, [pc, #196]	; (8001ae4 <MX_TIM15_Init+0x100>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a22:	4b30      	ldr	r3, [pc, #192]	; (8001ae4 <MX_TIM15_Init+0x100>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8001a28:	4b2e      	ldr	r3, [pc, #184]	; (8001ae4 <MX_TIM15_Init+0x100>)
 8001a2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a2e:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a30:	4b2c      	ldr	r3, [pc, #176]	; (8001ae4 <MX_TIM15_Init+0x100>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001a36:	4b2b      	ldr	r3, [pc, #172]	; (8001ae4 <MX_TIM15_Init+0x100>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a3c:	4b29      	ldr	r3, [pc, #164]	; (8001ae4 <MX_TIM15_Init+0x100>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001a42:	4828      	ldr	r0, [pc, #160]	; (8001ae4 <MX_TIM15_Init+0x100>)
 8001a44:	f006 fe4d 	bl	80086e2 <HAL_TIM_PWM_Init>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8001a4e:	f000 f937 	bl	8001cc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a52:	2300      	movs	r3, #0
 8001a54:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a56:	2300      	movs	r3, #0
 8001a58:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001a5a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001a5e:	4619      	mov	r1, r3
 8001a60:	4820      	ldr	r0, [pc, #128]	; (8001ae4 <MX_TIM15_Init+0x100>)
 8001a62:	f008 fa67 	bl	8009f34 <HAL_TIMEx_MasterConfigSynchronization>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8001a6c:	f000 f928 	bl	8001cc0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a70:	2360      	movs	r3, #96	; 0x60
 8001a72:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001a74:	2300      	movs	r3, #0
 8001a76:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a80:	2300      	movs	r3, #0
 8001a82:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a84:	2300      	movs	r3, #0
 8001a86:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a8c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a90:	2200      	movs	r2, #0
 8001a92:	4619      	mov	r1, r3
 8001a94:	4813      	ldr	r0, [pc, #76]	; (8001ae4 <MX_TIM15_Init+0x100>)
 8001a96:	f007 fae9 	bl	800906c <HAL_TIM_PWM_ConfigChannel>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8001aa0:	f000 f90e 	bl	8001cc0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001aac:	2300      	movs	r3, #0
 8001aae:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ab8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001abc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001ac2:	1d3b      	adds	r3, r7, #4
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	4807      	ldr	r0, [pc, #28]	; (8001ae4 <MX_TIM15_Init+0x100>)
 8001ac8:	f008 fabc 	bl	800a044 <HAL_TIMEx_ConfigBreakDeadTime>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <MX_TIM15_Init+0xf2>
  {
    Error_Handler();
 8001ad2:	f000 f8f5 	bl	8001cc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001ad6:	4803      	ldr	r0, [pc, #12]	; (8001ae4 <MX_TIM15_Init+0x100>)
 8001ad8:	f000 fd98 	bl	800260c <HAL_TIM_MspPostInit>

}
 8001adc:	bf00      	nop
 8001ade:	3758      	adds	r7, #88	; 0x58
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	20000784 	.word	0x20000784
 8001ae8:	40014000 	.word	0x40014000

08001aec <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001af0:	bf00      	nop
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
	...

08001afc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b08e      	sub	sp, #56	; 0x38
 8001b00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b06:	2200      	movs	r2, #0
 8001b08:	601a      	str	r2, [r3, #0]
 8001b0a:	605a      	str	r2, [r3, #4]
 8001b0c:	609a      	str	r2, [r3, #8]
 8001b0e:	60da      	str	r2, [r3, #12]
 8001b10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b12:	4b66      	ldr	r3, [pc, #408]	; (8001cac <MX_GPIO_Init+0x1b0>)
 8001b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b16:	4a65      	ldr	r2, [pc, #404]	; (8001cac <MX_GPIO_Init+0x1b0>)
 8001b18:	f043 0310 	orr.w	r3, r3, #16
 8001b1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b1e:	4b63      	ldr	r3, [pc, #396]	; (8001cac <MX_GPIO_Init+0x1b0>)
 8001b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b22:	f003 0310 	and.w	r3, r3, #16
 8001b26:	623b      	str	r3, [r7, #32]
 8001b28:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b2a:	4b60      	ldr	r3, [pc, #384]	; (8001cac <MX_GPIO_Init+0x1b0>)
 8001b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b2e:	4a5f      	ldr	r2, [pc, #380]	; (8001cac <MX_GPIO_Init+0x1b0>)
 8001b30:	f043 0304 	orr.w	r3, r3, #4
 8001b34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b36:	4b5d      	ldr	r3, [pc, #372]	; (8001cac <MX_GPIO_Init+0x1b0>)
 8001b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b3a:	f003 0304 	and.w	r3, r3, #4
 8001b3e:	61fb      	str	r3, [r7, #28]
 8001b40:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b42:	4b5a      	ldr	r3, [pc, #360]	; (8001cac <MX_GPIO_Init+0x1b0>)
 8001b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b46:	4a59      	ldr	r2, [pc, #356]	; (8001cac <MX_GPIO_Init+0x1b0>)
 8001b48:	f043 0320 	orr.w	r3, r3, #32
 8001b4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b4e:	4b57      	ldr	r3, [pc, #348]	; (8001cac <MX_GPIO_Init+0x1b0>)
 8001b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b52:	f003 0320 	and.w	r3, r3, #32
 8001b56:	61bb      	str	r3, [r7, #24]
 8001b58:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b5a:	4b54      	ldr	r3, [pc, #336]	; (8001cac <MX_GPIO_Init+0x1b0>)
 8001b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b5e:	4a53      	ldr	r2, [pc, #332]	; (8001cac <MX_GPIO_Init+0x1b0>)
 8001b60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b66:	4b51      	ldr	r3, [pc, #324]	; (8001cac <MX_GPIO_Init+0x1b0>)
 8001b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b6e:	617b      	str	r3, [r7, #20]
 8001b70:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b72:	4b4e      	ldr	r3, [pc, #312]	; (8001cac <MX_GPIO_Init+0x1b0>)
 8001b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b76:	4a4d      	ldr	r2, [pc, #308]	; (8001cac <MX_GPIO_Init+0x1b0>)
 8001b78:	f043 0301 	orr.w	r3, r3, #1
 8001b7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b7e:	4b4b      	ldr	r3, [pc, #300]	; (8001cac <MX_GPIO_Init+0x1b0>)
 8001b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b82:	f003 0301 	and.w	r3, r3, #1
 8001b86:	613b      	str	r3, [r7, #16]
 8001b88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b8a:	4b48      	ldr	r3, [pc, #288]	; (8001cac <MX_GPIO_Init+0x1b0>)
 8001b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b8e:	4a47      	ldr	r2, [pc, #284]	; (8001cac <MX_GPIO_Init+0x1b0>)
 8001b90:	f043 0302 	orr.w	r3, r3, #2
 8001b94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b96:	4b45      	ldr	r3, [pc, #276]	; (8001cac <MX_GPIO_Init+0x1b0>)
 8001b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b9a:	f003 0302 	and.w	r3, r3, #2
 8001b9e:	60fb      	str	r3, [r7, #12]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ba2:	4b42      	ldr	r3, [pc, #264]	; (8001cac <MX_GPIO_Init+0x1b0>)
 8001ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ba6:	4a41      	ldr	r2, [pc, #260]	; (8001cac <MX_GPIO_Init+0x1b0>)
 8001ba8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bae:	4b3f      	ldr	r3, [pc, #252]	; (8001cac <MX_GPIO_Init+0x1b0>)
 8001bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bb6:	60bb      	str	r3, [r7, #8]
 8001bb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bba:	4b3c      	ldr	r3, [pc, #240]	; (8001cac <MX_GPIO_Init+0x1b0>)
 8001bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bbe:	4a3b      	ldr	r2, [pc, #236]	; (8001cac <MX_GPIO_Init+0x1b0>)
 8001bc0:	f043 0308 	orr.w	r3, r3, #8
 8001bc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bc6:	4b39      	ldr	r3, [pc, #228]	; (8001cac <MX_GPIO_Init+0x1b0>)
 8001bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bca:	f003 0308 	and.w	r3, r3, #8
 8001bce:	607b      	str	r3, [r7, #4]
 8001bd0:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8001bd2:	f002 fd51 	bl	8004678 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	217e      	movs	r1, #126	; 0x7e
 8001bda:	4835      	ldr	r0, [pc, #212]	; (8001cb0 <MX_GPIO_Init+0x1b4>)
 8001bdc:	f002 fc60 	bl	80044a0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001be0:	2200      	movs	r2, #0
 8001be2:	2140      	movs	r1, #64	; 0x40
 8001be4:	4833      	ldr	r0, [pc, #204]	; (8001cb4 <MX_GPIO_Init+0x1b8>)
 8001be6:	f002 fc5b 	bl	80044a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PG1 PG2 PG3 PG4
                           PG5 PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8001bea:	237e      	movs	r3, #126	; 0x7e
 8001bec:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001bfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bfe:	4619      	mov	r1, r3
 8001c00:	482b      	ldr	r0, [pc, #172]	; (8001cb0 <MX_GPIO_Init+0x1b4>)
 8001c02:	f002 fabb 	bl	800417c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001c06:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001c0a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c10:	2300      	movs	r3, #0
 8001c12:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c14:	2303      	movs	r3, #3
 8001c16:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001c18:	230c      	movs	r3, #12
 8001c1a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c20:	4619      	mov	r1, r3
 8001c22:	4825      	ldr	r0, [pc, #148]	; (8001cb8 <MX_GPIO_Init+0x1bc>)
 8001c24:	f002 faaa 	bl	800417c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001c28:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001c2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c2e:	2302      	movs	r3, #2
 8001c30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c32:	2300      	movs	r3, #0
 8001c34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c36:	2303      	movs	r3, #3
 8001c38:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001c3a:	230a      	movs	r3, #10
 8001c3c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c42:	4619      	mov	r1, r3
 8001c44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c48:	f002 fa98 	bl	800417c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c52:	2300      	movs	r3, #0
 8001c54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c56:	2300      	movs	r3, #0
 8001c58:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c5e:	4619      	mov	r1, r3
 8001c60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c64:	f002 fa8a 	bl	800417c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c68:	2304      	movs	r3, #4
 8001c6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c70:	2300      	movs	r3, #0
 8001c72:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c74:	2303      	movs	r3, #3
 8001c76:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001c78:	230c      	movs	r3, #12
 8001c7a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c80:	4619      	mov	r1, r3
 8001c82:	480e      	ldr	r0, [pc, #56]	; (8001cbc <MX_GPIO_Init+0x1c0>)
 8001c84:	f002 fa7a 	bl	800417c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c88:	2340      	movs	r3, #64	; 0x40
 8001c8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c90:	2300      	movs	r3, #0
 8001c92:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c94:	2300      	movs	r3, #0
 8001c96:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	4805      	ldr	r0, [pc, #20]	; (8001cb4 <MX_GPIO_Init+0x1b8>)
 8001ca0:	f002 fa6c 	bl	800417c <HAL_GPIO_Init>

}
 8001ca4:	bf00      	nop
 8001ca6:	3738      	adds	r7, #56	; 0x38
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	48001800 	.word	0x48001800
 8001cb4:	48000400 	.word	0x48000400
 8001cb8:	48000800 	.word	0x48000800
 8001cbc:	48000c00 	.word	0x48000c00

08001cc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cc4:	b672      	cpsid	i
}
 8001cc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cc8:	e7fe      	b.n	8001cc8 <Error_Handler+0x8>
	...

08001ccc <rotor_control>:
 */

#include "rotor_control.h"


void rotor_control (uint8_t mode) {
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	71fb      	strb	r3, [r7, #7]
	// mode 0 turn, mode 1 stop
	static uint8_t motor_pwm_val = 0; // 0 - 99 throttle control
	static uint8_t motor_h_bridge_in1 = 1;
	static uint8_t motor_h_bridge_in2 = 0;

	switch(mode) {
 8001cd6:	79fb      	ldrb	r3, [r7, #7]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d109      	bne.n	8001cf0 <rotor_control+0x24>
		case 0 :
			motor_pwm_val = 80;
 8001cdc:	4b15      	ldr	r3, [pc, #84]	; (8001d34 <rotor_control+0x68>)
 8001cde:	2250      	movs	r2, #80	; 0x50
 8001ce0:	701a      	strb	r2, [r3, #0]
			motor_h_bridge_in1 = 1;
 8001ce2:	4b15      	ldr	r3, [pc, #84]	; (8001d38 <rotor_control+0x6c>)
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	701a      	strb	r2, [r3, #0]
			motor_h_bridge_in2 = 0;
 8001ce8:	4b14      	ldr	r3, [pc, #80]	; (8001d3c <rotor_control+0x70>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	701a      	strb	r2, [r3, #0]
			break;
 8001cee:	e009      	b.n	8001d04 <rotor_control+0x38>
		default:
			motor_pwm_val = 0;
 8001cf0:	4b10      	ldr	r3, [pc, #64]	; (8001d34 <rotor_control+0x68>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	701a      	strb	r2, [r3, #0]
			motor_h_bridge_in1 = 1;
 8001cf6:	4b10      	ldr	r3, [pc, #64]	; (8001d38 <rotor_control+0x6c>)
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	701a      	strb	r2, [r3, #0]
			motor_h_bridge_in2 = 0;
 8001cfc:	4b0f      	ldr	r3, [pc, #60]	; (8001d3c <rotor_control+0x70>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	701a      	strb	r2, [r3, #0]
			break;
 8001d02:	bf00      	nop
	}

	htim4.Instance->CCR2 = motor_pwm_val; // PD13
 8001d04:	4b0b      	ldr	r3, [pc, #44]	; (8001d34 <rotor_control+0x68>)
 8001d06:	781a      	ldrb	r2, [r3, #0]
 8001d08:	4b0d      	ldr	r3, [pc, #52]	; (8001d40 <rotor_control+0x74>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2,  motor_h_bridge_in1);
 8001d0e:	4b0a      	ldr	r3, [pc, #40]	; (8001d38 <rotor_control+0x6c>)
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	461a      	mov	r2, r3
 8001d14:	2104      	movs	r1, #4
 8001d16:	480b      	ldr	r0, [pc, #44]	; (8001d44 <rotor_control+0x78>)
 8001d18:	f002 fbc2 	bl	80044a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1,  motor_h_bridge_in2);
 8001d1c:	4b07      	ldr	r3, [pc, #28]	; (8001d3c <rotor_control+0x70>)
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	461a      	mov	r2, r3
 8001d22:	2102      	movs	r1, #2
 8001d24:	4807      	ldr	r0, [pc, #28]	; (8001d44 <rotor_control+0x78>)
 8001d26:	f002 fbbb 	bl	80044a0 <HAL_GPIO_WritePin>
}
 8001d2a:	bf00      	nop
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	200007d0 	.word	0x200007d0
 8001d38:	20000000 	.word	0x20000000
 8001d3c:	200007d1 	.word	0x200007d1
 8001d40:	20000738 	.word	0x20000738
 8001d44:	48001800 	.word	0x48001800

08001d48 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d4e:	4b0f      	ldr	r3, [pc, #60]	; (8001d8c <HAL_MspInit+0x44>)
 8001d50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d52:	4a0e      	ldr	r2, [pc, #56]	; (8001d8c <HAL_MspInit+0x44>)
 8001d54:	f043 0301 	orr.w	r3, r3, #1
 8001d58:	6613      	str	r3, [r2, #96]	; 0x60
 8001d5a:	4b0c      	ldr	r3, [pc, #48]	; (8001d8c <HAL_MspInit+0x44>)
 8001d5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	607b      	str	r3, [r7, #4]
 8001d64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d66:	4b09      	ldr	r3, [pc, #36]	; (8001d8c <HAL_MspInit+0x44>)
 8001d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d6a:	4a08      	ldr	r2, [pc, #32]	; (8001d8c <HAL_MspInit+0x44>)
 8001d6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d70:	6593      	str	r3, [r2, #88]	; 0x58
 8001d72:	4b06      	ldr	r3, [pc, #24]	; (8001d8c <HAL_MspInit+0x44>)
 8001d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d7a:	603b      	str	r3, [r7, #0]
 8001d7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d7e:	bf00      	nop
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	40021000 	.word	0x40021000

08001d90 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b08c      	sub	sp, #48	; 0x30
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d98:	f107 031c 	add.w	r3, r7, #28
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]
 8001da0:	605a      	str	r2, [r3, #4]
 8001da2:	609a      	str	r2, [r3, #8]
 8001da4:	60da      	str	r2, [r3, #12]
 8001da6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a2d      	ldr	r2, [pc, #180]	; (8001e64 <HAL_ADC_MspInit+0xd4>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d154      	bne.n	8001e5c <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001db2:	4b2d      	ldr	r3, [pc, #180]	; (8001e68 <HAL_ADC_MspInit+0xd8>)
 8001db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001db6:	4a2c      	ldr	r2, [pc, #176]	; (8001e68 <HAL_ADC_MspInit+0xd8>)
 8001db8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001dbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dbe:	4b2a      	ldr	r3, [pc, #168]	; (8001e68 <HAL_ADC_MspInit+0xd8>)
 8001dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dc2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001dc6:	61bb      	str	r3, [r7, #24]
 8001dc8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dca:	4b27      	ldr	r3, [pc, #156]	; (8001e68 <HAL_ADC_MspInit+0xd8>)
 8001dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dce:	4a26      	ldr	r2, [pc, #152]	; (8001e68 <HAL_ADC_MspInit+0xd8>)
 8001dd0:	f043 0304 	orr.w	r3, r3, #4
 8001dd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dd6:	4b24      	ldr	r3, [pc, #144]	; (8001e68 <HAL_ADC_MspInit+0xd8>)
 8001dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dda:	f003 0304 	and.w	r3, r3, #4
 8001dde:	617b      	str	r3, [r7, #20]
 8001de0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001de2:	4b21      	ldr	r3, [pc, #132]	; (8001e68 <HAL_ADC_MspInit+0xd8>)
 8001de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001de6:	4a20      	ldr	r2, [pc, #128]	; (8001e68 <HAL_ADC_MspInit+0xd8>)
 8001de8:	f043 0301 	orr.w	r3, r3, #1
 8001dec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dee:	4b1e      	ldr	r3, [pc, #120]	; (8001e68 <HAL_ADC_MspInit+0xd8>)
 8001df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001df2:	f003 0301 	and.w	r3, r3, #1
 8001df6:	613b      	str	r3, [r7, #16]
 8001df8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dfa:	4b1b      	ldr	r3, [pc, #108]	; (8001e68 <HAL_ADC_MspInit+0xd8>)
 8001dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dfe:	4a1a      	ldr	r2, [pc, #104]	; (8001e68 <HAL_ADC_MspInit+0xd8>)
 8001e00:	f043 0302 	orr.w	r3, r3, #2
 8001e04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e06:	4b18      	ldr	r3, [pc, #96]	; (8001e68 <HAL_ADC_MspInit+0xd8>)
 8001e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e0a:	f003 0302 	and.w	r3, r3, #2
 8001e0e:	60fb      	str	r3, [r7, #12]
 8001e10:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN8
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001e12:	233f      	movs	r3, #63	; 0x3f
 8001e14:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001e16:	230b      	movs	r3, #11
 8001e18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e1e:	f107 031c 	add.w	r3, r7, #28
 8001e22:	4619      	mov	r1, r3
 8001e24:	4811      	ldr	r0, [pc, #68]	; (8001e6c <HAL_ADC_MspInit+0xdc>)
 8001e26:	f002 f9a9 	bl	800417c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8001e2a:	230a      	movs	r3, #10
 8001e2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001e2e:	230b      	movs	r3, #11
 8001e30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e32:	2300      	movs	r3, #0
 8001e34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e36:	f107 031c 	add.w	r3, r7, #28
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e40:	f002 f99c 	bl	800417c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001e44:	2302      	movs	r3, #2
 8001e46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001e48:	230b      	movs	r3, #11
 8001e4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e50:	f107 031c 	add.w	r3, r7, #28
 8001e54:	4619      	mov	r1, r3
 8001e56:	4806      	ldr	r0, [pc, #24]	; (8001e70 <HAL_ADC_MspInit+0xe0>)
 8001e58:	f002 f990 	bl	800417c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001e5c:	bf00      	nop
 8001e5e:	3730      	adds	r7, #48	; 0x30
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	50040000 	.word	0x50040000
 8001e68:	40021000 	.word	0x40021000
 8001e6c:	48000800 	.word	0x48000800
 8001e70:	48000400 	.word	0x48000400

08001e74 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b08a      	sub	sp, #40	; 0x28
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e7c:	f107 0314 	add.w	r3, r7, #20
 8001e80:	2200      	movs	r2, #0
 8001e82:	601a      	str	r2, [r3, #0]
 8001e84:	605a      	str	r2, [r3, #4]
 8001e86:	609a      	str	r2, [r3, #8]
 8001e88:	60da      	str	r2, [r3, #12]
 8001e8a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a17      	ldr	r2, [pc, #92]	; (8001ef0 <HAL_CAN_MspInit+0x7c>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d127      	bne.n	8001ee6 <HAL_CAN_MspInit+0x72>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001e96:	4b17      	ldr	r3, [pc, #92]	; (8001ef4 <HAL_CAN_MspInit+0x80>)
 8001e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e9a:	4a16      	ldr	r2, [pc, #88]	; (8001ef4 <HAL_CAN_MspInit+0x80>)
 8001e9c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ea0:	6593      	str	r3, [r2, #88]	; 0x58
 8001ea2:	4b14      	ldr	r3, [pc, #80]	; (8001ef4 <HAL_CAN_MspInit+0x80>)
 8001ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eaa:	613b      	str	r3, [r7, #16]
 8001eac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001eae:	4b11      	ldr	r3, [pc, #68]	; (8001ef4 <HAL_CAN_MspInit+0x80>)
 8001eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eb2:	4a10      	ldr	r2, [pc, #64]	; (8001ef4 <HAL_CAN_MspInit+0x80>)
 8001eb4:	f043 0308 	orr.w	r3, r3, #8
 8001eb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001eba:	4b0e      	ldr	r3, [pc, #56]	; (8001ef4 <HAL_CAN_MspInit+0x80>)
 8001ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ebe:	f003 0308 	and.w	r3, r3, #8
 8001ec2:	60fb      	str	r3, [r7, #12]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eca:	2302      	movs	r3, #2
 8001ecc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001ed6:	2309      	movs	r3, #9
 8001ed8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001eda:	f107 0314 	add.w	r3, r7, #20
 8001ede:	4619      	mov	r1, r3
 8001ee0:	4805      	ldr	r0, [pc, #20]	; (8001ef8 <HAL_CAN_MspInit+0x84>)
 8001ee2:	f002 f94b 	bl	800417c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001ee6:	bf00      	nop
 8001ee8:	3728      	adds	r7, #40	; 0x28
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	40006400 	.word	0x40006400
 8001ef4:	40021000 	.word	0x40021000
 8001ef8:	48000c00 	.word	0x48000c00

08001efc <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b088      	sub	sp, #32
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f04:	f107 030c 	add.w	r3, r7, #12
 8001f08:	2200      	movs	r2, #0
 8001f0a:	601a      	str	r2, [r3, #0]
 8001f0c:	605a      	str	r2, [r3, #4]
 8001f0e:	609a      	str	r2, [r3, #8]
 8001f10:	60da      	str	r2, [r3, #12]
 8001f12:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP1)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a0f      	ldr	r2, [pc, #60]	; (8001f58 <HAL_COMP_MspInit+0x5c>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d117      	bne.n	8001f4e <HAL_COMP_MspInit+0x52>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f1e:	4b0f      	ldr	r3, [pc, #60]	; (8001f5c <HAL_COMP_MspInit+0x60>)
 8001f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f22:	4a0e      	ldr	r2, [pc, #56]	; (8001f5c <HAL_COMP_MspInit+0x60>)
 8001f24:	f043 0302 	orr.w	r3, r3, #2
 8001f28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f2a:	4b0c      	ldr	r3, [pc, #48]	; (8001f5c <HAL_COMP_MspInit+0x60>)
 8001f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	60bb      	str	r3, [r7, #8]
 8001f34:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration
    PB2     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001f36:	2304      	movs	r3, #4
 8001f38:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f42:	f107 030c 	add.w	r3, r7, #12
 8001f46:	4619      	mov	r1, r3
 8001f48:	4805      	ldr	r0, [pc, #20]	; (8001f60 <HAL_COMP_MspInit+0x64>)
 8001f4a:	f002 f917 	bl	800417c <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }

}
 8001f4e:	bf00      	nop
 8001f50:	3720      	adds	r7, #32
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	40010200 	.word	0x40010200
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	48000400 	.word	0x48000400

08001f64 <HAL_SMBUS_MspInit>:
* This function configures the hardware resources used in this example
* @param hsmbus: SMBUS handle pointer
* @retval None
*/
void HAL_SMBUS_MspInit(SMBUS_HandleTypeDef* hsmbus)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b0b0      	sub	sp, #192	; 0xc0
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f6c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001f70:	2200      	movs	r2, #0
 8001f72:	601a      	str	r2, [r3, #0]
 8001f74:	605a      	str	r2, [r3, #4]
 8001f76:	609a      	str	r2, [r3, #8]
 8001f78:	60da      	str	r2, [r3, #12]
 8001f7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f7c:	f107 0318 	add.w	r3, r7, #24
 8001f80:	2294      	movs	r2, #148	; 0x94
 8001f82:	2100      	movs	r1, #0
 8001f84:	4618      	mov	r0, r3
 8001f86:	f008 fff5 	bl	800af74 <memset>
  if(hsmbus->Instance==I2C1)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a42      	ldr	r2, [pc, #264]	; (8002098 <HAL_SMBUS_MspInit+0x134>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d13c      	bne.n	800200e <HAL_SMBUS_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001f94:	2340      	movs	r3, #64	; 0x40
 8001f96:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f9c:	f107 0318 	add.w	r3, r7, #24
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f003 fa51 	bl	8005448 <HAL_RCCEx_PeriphCLKConfig>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d001      	beq.n	8001fb0 <HAL_SMBUS_MspInit+0x4c>
    {
      Error_Handler();
 8001fac:	f7ff fe88 	bl	8001cc0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fb0:	4b3a      	ldr	r3, [pc, #232]	; (800209c <HAL_SMBUS_MspInit+0x138>)
 8001fb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fb4:	4a39      	ldr	r2, [pc, #228]	; (800209c <HAL_SMBUS_MspInit+0x138>)
 8001fb6:	f043 0302 	orr.w	r3, r3, #2
 8001fba:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fbc:	4b37      	ldr	r3, [pc, #220]	; (800209c <HAL_SMBUS_MspInit+0x138>)
 8001fbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fc0:	f003 0302 	and.w	r3, r3, #2
 8001fc4:	617b      	str	r3, [r7, #20]
 8001fc6:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001fc8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001fcc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fd0:	2312      	movs	r3, #18
 8001fd2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001fe2:	2304      	movs	r3, #4
 8001fe4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fe8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001fec:	4619      	mov	r1, r3
 8001fee:	482c      	ldr	r0, [pc, #176]	; (80020a0 <HAL_SMBUS_MspInit+0x13c>)
 8001ff0:	f002 f8c4 	bl	800417c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ff4:	4b29      	ldr	r3, [pc, #164]	; (800209c <HAL_SMBUS_MspInit+0x138>)
 8001ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff8:	4a28      	ldr	r2, [pc, #160]	; (800209c <HAL_SMBUS_MspInit+0x138>)
 8001ffa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ffe:	6593      	str	r3, [r2, #88]	; 0x58
 8002000:	4b26      	ldr	r3, [pc, #152]	; (800209c <HAL_SMBUS_MspInit+0x138>)
 8002002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002004:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002008:	613b      	str	r3, [r7, #16]
 800200a:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800200c:	e03f      	b.n	800208e <HAL_SMBUS_MspInit+0x12a>
  else if(hsmbus->Instance==I2C2)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a24      	ldr	r2, [pc, #144]	; (80020a4 <HAL_SMBUS_MspInit+0x140>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d13a      	bne.n	800208e <HAL_SMBUS_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002018:	2380      	movs	r3, #128	; 0x80
 800201a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800201c:	2300      	movs	r3, #0
 800201e:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002020:	f107 0318 	add.w	r3, r7, #24
 8002024:	4618      	mov	r0, r3
 8002026:	f003 fa0f 	bl	8005448 <HAL_RCCEx_PeriphCLKConfig>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d001      	beq.n	8002034 <HAL_SMBUS_MspInit+0xd0>
      Error_Handler();
 8002030:	f7ff fe46 	bl	8001cc0 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002034:	4b19      	ldr	r3, [pc, #100]	; (800209c <HAL_SMBUS_MspInit+0x138>)
 8002036:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002038:	4a18      	ldr	r2, [pc, #96]	; (800209c <HAL_SMBUS_MspInit+0x138>)
 800203a:	f043 0320 	orr.w	r3, r3, #32
 800203e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002040:	4b16      	ldr	r3, [pc, #88]	; (800209c <HAL_SMBUS_MspInit+0x138>)
 8002042:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002044:	f003 0320 	and.w	r3, r3, #32
 8002048:	60fb      	str	r3, [r7, #12]
 800204a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800204c:	2307      	movs	r3, #7
 800204e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002052:	2312      	movs	r3, #18
 8002054:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002058:	2301      	movs	r3, #1
 800205a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800205e:	2303      	movs	r3, #3
 8002060:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002064:	2304      	movs	r3, #4
 8002066:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800206a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800206e:	4619      	mov	r1, r3
 8002070:	480d      	ldr	r0, [pc, #52]	; (80020a8 <HAL_SMBUS_MspInit+0x144>)
 8002072:	f002 f883 	bl	800417c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002076:	4b09      	ldr	r3, [pc, #36]	; (800209c <HAL_SMBUS_MspInit+0x138>)
 8002078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800207a:	4a08      	ldr	r2, [pc, #32]	; (800209c <HAL_SMBUS_MspInit+0x138>)
 800207c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002080:	6593      	str	r3, [r2, #88]	; 0x58
 8002082:	4b06      	ldr	r3, [pc, #24]	; (800209c <HAL_SMBUS_MspInit+0x138>)
 8002084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002086:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800208a:	60bb      	str	r3, [r7, #8]
 800208c:	68bb      	ldr	r3, [r7, #8]
}
 800208e:	bf00      	nop
 8002090:	37c0      	adds	r7, #192	; 0xc0
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	40005400 	.word	0x40005400
 800209c:	40021000 	.word	0x40021000
 80020a0:	48000400 	.word	0x48000400
 80020a4:	40005800 	.word	0x40005800
 80020a8:	48001400 	.word	0x48001400

080020ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b0b2      	sub	sp, #200	; 0xc8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80020b8:	2200      	movs	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	605a      	str	r2, [r3, #4]
 80020be:	609a      	str	r2, [r3, #8]
 80020c0:	60da      	str	r2, [r3, #12]
 80020c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020c4:	f107 0320 	add.w	r3, r7, #32
 80020c8:	2294      	movs	r2, #148	; 0x94
 80020ca:	2100      	movs	r1, #0
 80020cc:	4618      	mov	r0, r3
 80020ce:	f008 ff51 	bl	800af74 <memset>
  if(huart->Instance==LPUART1)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a64      	ldr	r2, [pc, #400]	; (8002268 <HAL_UART_MspInit+0x1bc>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d13e      	bne.n	800215a <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80020dc:	2320      	movs	r3, #32
 80020de:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80020e0:	2300      	movs	r3, #0
 80020e2:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020e4:	f107 0320 	add.w	r3, r7, #32
 80020e8:	4618      	mov	r0, r3
 80020ea:	f003 f9ad 	bl	8005448 <HAL_RCCEx_PeriphCLKConfig>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80020f4:	f7ff fde4 	bl	8001cc0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80020f8:	4b5c      	ldr	r3, [pc, #368]	; (800226c <HAL_UART_MspInit+0x1c0>)
 80020fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020fc:	4a5b      	ldr	r2, [pc, #364]	; (800226c <HAL_UART_MspInit+0x1c0>)
 80020fe:	f043 0301 	orr.w	r3, r3, #1
 8002102:	65d3      	str	r3, [r2, #92]	; 0x5c
 8002104:	4b59      	ldr	r3, [pc, #356]	; (800226c <HAL_UART_MspInit+0x1c0>)
 8002106:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002108:	f003 0301 	and.w	r3, r3, #1
 800210c:	61fb      	str	r3, [r7, #28]
 800210e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002110:	4b56      	ldr	r3, [pc, #344]	; (800226c <HAL_UART_MspInit+0x1c0>)
 8002112:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002114:	4a55      	ldr	r2, [pc, #340]	; (800226c <HAL_UART_MspInit+0x1c0>)
 8002116:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800211a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800211c:	4b53      	ldr	r3, [pc, #332]	; (800226c <HAL_UART_MspInit+0x1c0>)
 800211e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002124:	61bb      	str	r3, [r7, #24]
 8002126:	69bb      	ldr	r3, [r7, #24]
    HAL_PWREx_EnableVddIO2();
 8002128:	f002 faa6 	bl	8004678 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800212c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002130:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002134:	2302      	movs	r3, #2
 8002136:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213a:	2300      	movs	r3, #0
 800213c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002140:	2303      	movs	r3, #3
 8002142:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002146:	2308      	movs	r3, #8
 8002148:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800214c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002150:	4619      	mov	r1, r3
 8002152:	4847      	ldr	r0, [pc, #284]	; (8002270 <HAL_UART_MspInit+0x1c4>)
 8002154:	f002 f812 	bl	800417c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002158:	e081      	b.n	800225e <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART2)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a45      	ldr	r2, [pc, #276]	; (8002274 <HAL_UART_MspInit+0x1c8>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d13b      	bne.n	80021dc <HAL_UART_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002164:	2302      	movs	r3, #2
 8002166:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002168:	2300      	movs	r3, #0
 800216a:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800216c:	f107 0320 	add.w	r3, r7, #32
 8002170:	4618      	mov	r0, r3
 8002172:	f003 f969 	bl	8005448 <HAL_RCCEx_PeriphCLKConfig>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d001      	beq.n	8002180 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 800217c:	f7ff fda0 	bl	8001cc0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002180:	4b3a      	ldr	r3, [pc, #232]	; (800226c <HAL_UART_MspInit+0x1c0>)
 8002182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002184:	4a39      	ldr	r2, [pc, #228]	; (800226c <HAL_UART_MspInit+0x1c0>)
 8002186:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800218a:	6593      	str	r3, [r2, #88]	; 0x58
 800218c:	4b37      	ldr	r3, [pc, #220]	; (800226c <HAL_UART_MspInit+0x1c0>)
 800218e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002190:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002194:	617b      	str	r3, [r7, #20]
 8002196:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002198:	4b34      	ldr	r3, [pc, #208]	; (800226c <HAL_UART_MspInit+0x1c0>)
 800219a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800219c:	4a33      	ldr	r2, [pc, #204]	; (800226c <HAL_UART_MspInit+0x1c0>)
 800219e:	f043 0308 	orr.w	r3, r3, #8
 80021a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021a4:	4b31      	ldr	r3, [pc, #196]	; (800226c <HAL_UART_MspInit+0x1c0>)
 80021a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021a8:	f003 0308 	and.w	r3, r3, #8
 80021ac:	613b      	str	r3, [r7, #16]
 80021ae:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80021b0:	2378      	movs	r3, #120	; 0x78
 80021b2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b6:	2302      	movs	r3, #2
 80021b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021bc:	2300      	movs	r3, #0
 80021be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021c2:	2303      	movs	r3, #3
 80021c4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021c8:	2307      	movs	r3, #7
 80021ca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021ce:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80021d2:	4619      	mov	r1, r3
 80021d4:	4828      	ldr	r0, [pc, #160]	; (8002278 <HAL_UART_MspInit+0x1cc>)
 80021d6:	f001 ffd1 	bl	800417c <HAL_GPIO_Init>
}
 80021da:	e040      	b.n	800225e <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART3)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a26      	ldr	r2, [pc, #152]	; (800227c <HAL_UART_MspInit+0x1d0>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d13b      	bne.n	800225e <HAL_UART_MspInit+0x1b2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80021e6:	2304      	movs	r3, #4
 80021e8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80021ea:	2300      	movs	r3, #0
 80021ec:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021ee:	f107 0320 	add.w	r3, r7, #32
 80021f2:	4618      	mov	r0, r3
 80021f4:	f003 f928 	bl	8005448 <HAL_RCCEx_PeriphCLKConfig>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <HAL_UART_MspInit+0x156>
      Error_Handler();
 80021fe:	f7ff fd5f 	bl	8001cc0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002202:	4b1a      	ldr	r3, [pc, #104]	; (800226c <HAL_UART_MspInit+0x1c0>)
 8002204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002206:	4a19      	ldr	r2, [pc, #100]	; (800226c <HAL_UART_MspInit+0x1c0>)
 8002208:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800220c:	6593      	str	r3, [r2, #88]	; 0x58
 800220e:	4b17      	ldr	r3, [pc, #92]	; (800226c <HAL_UART_MspInit+0x1c0>)
 8002210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002212:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002216:	60fb      	str	r3, [r7, #12]
 8002218:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800221a:	4b14      	ldr	r3, [pc, #80]	; (800226c <HAL_UART_MspInit+0x1c0>)
 800221c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800221e:	4a13      	ldr	r2, [pc, #76]	; (800226c <HAL_UART_MspInit+0x1c0>)
 8002220:	f043 0308 	orr.w	r3, r3, #8
 8002224:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002226:	4b11      	ldr	r3, [pc, #68]	; (800226c <HAL_UART_MspInit+0x1c0>)
 8002228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800222a:	f003 0308 	and.w	r3, r3, #8
 800222e:	60bb      	str	r3, [r7, #8]
 8002230:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002232:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002236:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800223a:	2302      	movs	r3, #2
 800223c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002240:	2300      	movs	r3, #0
 8002242:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002246:	2303      	movs	r3, #3
 8002248:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800224c:	2307      	movs	r3, #7
 800224e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002252:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002256:	4619      	mov	r1, r3
 8002258:	4807      	ldr	r0, [pc, #28]	; (8002278 <HAL_UART_MspInit+0x1cc>)
 800225a:	f001 ff8f 	bl	800417c <HAL_GPIO_Init>
}
 800225e:	bf00      	nop
 8002260:	37c8      	adds	r7, #200	; 0xc8
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	40008000 	.word	0x40008000
 800226c:	40021000 	.word	0x40021000
 8002270:	48001800 	.word	0x48001800
 8002274:	40004400 	.word	0x40004400
 8002278:	48000c00 	.word	0x48000c00
 800227c:	40004800 	.word	0x40004800

08002280 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b08c      	sub	sp, #48	; 0x30
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002288:	f107 031c 	add.w	r3, r7, #28
 800228c:	2200      	movs	r2, #0
 800228e:	601a      	str	r2, [r3, #0]
 8002290:	605a      	str	r2, [r3, #4]
 8002292:	609a      	str	r2, [r3, #8]
 8002294:	60da      	str	r2, [r3, #12]
 8002296:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a2e      	ldr	r2, [pc, #184]	; (8002358 <HAL_SPI_MspInit+0xd8>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d129      	bne.n	80022f6 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80022a2:	4b2e      	ldr	r3, [pc, #184]	; (800235c <HAL_SPI_MspInit+0xdc>)
 80022a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022a6:	4a2d      	ldr	r2, [pc, #180]	; (800235c <HAL_SPI_MspInit+0xdc>)
 80022a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80022ac:	6613      	str	r3, [r2, #96]	; 0x60
 80022ae:	4b2b      	ldr	r3, [pc, #172]	; (800235c <HAL_SPI_MspInit+0xdc>)
 80022b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022b6:	61bb      	str	r3, [r7, #24]
 80022b8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ba:	4b28      	ldr	r3, [pc, #160]	; (800235c <HAL_SPI_MspInit+0xdc>)
 80022bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022be:	4a27      	ldr	r2, [pc, #156]	; (800235c <HAL_SPI_MspInit+0xdc>)
 80022c0:	f043 0301 	orr.w	r3, r3, #1
 80022c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022c6:	4b25      	ldr	r3, [pc, #148]	; (800235c <HAL_SPI_MspInit+0xdc>)
 80022c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ca:	f003 0301 	and.w	r3, r3, #1
 80022ce:	617b      	str	r3, [r7, #20]
 80022d0:	697b      	ldr	r3, [r7, #20]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80022d2:	23f0      	movs	r3, #240	; 0xf0
 80022d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d6:	2302      	movs	r3, #2
 80022d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022da:	2300      	movs	r3, #0
 80022dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022de:	2303      	movs	r3, #3
 80022e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80022e2:	2305      	movs	r3, #5
 80022e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022e6:	f107 031c 	add.w	r3, r7, #28
 80022ea:	4619      	mov	r1, r3
 80022ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022f0:	f001 ff44 	bl	800417c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80022f4:	e02c      	b.n	8002350 <HAL_SPI_MspInit+0xd0>
  else if(hspi->Instance==SPI3)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a19      	ldr	r2, [pc, #100]	; (8002360 <HAL_SPI_MspInit+0xe0>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d127      	bne.n	8002350 <HAL_SPI_MspInit+0xd0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002300:	4b16      	ldr	r3, [pc, #88]	; (800235c <HAL_SPI_MspInit+0xdc>)
 8002302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002304:	4a15      	ldr	r2, [pc, #84]	; (800235c <HAL_SPI_MspInit+0xdc>)
 8002306:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800230a:	6593      	str	r3, [r2, #88]	; 0x58
 800230c:	4b13      	ldr	r3, [pc, #76]	; (800235c <HAL_SPI_MspInit+0xdc>)
 800230e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002310:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002314:	613b      	str	r3, [r7, #16]
 8002316:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002318:	4b10      	ldr	r3, [pc, #64]	; (800235c <HAL_SPI_MspInit+0xdc>)
 800231a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800231c:	4a0f      	ldr	r2, [pc, #60]	; (800235c <HAL_SPI_MspInit+0xdc>)
 800231e:	f043 0302 	orr.w	r3, r3, #2
 8002322:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002324:	4b0d      	ldr	r3, [pc, #52]	; (800235c <HAL_SPI_MspInit+0xdc>)
 8002326:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002328:	f003 0302 	and.w	r3, r3, #2
 800232c:	60fb      	str	r3, [r7, #12]
 800232e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002330:	2338      	movs	r3, #56	; 0x38
 8002332:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002334:	2302      	movs	r3, #2
 8002336:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002338:	2300      	movs	r3, #0
 800233a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800233c:	2303      	movs	r3, #3
 800233e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002340:	2306      	movs	r3, #6
 8002342:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002344:	f107 031c 	add.w	r3, r7, #28
 8002348:	4619      	mov	r1, r3
 800234a:	4806      	ldr	r0, [pc, #24]	; (8002364 <HAL_SPI_MspInit+0xe4>)
 800234c:	f001 ff16 	bl	800417c <HAL_GPIO_Init>
}
 8002350:	bf00      	nop
 8002352:	3730      	adds	r7, #48	; 0x30
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	40013000 	.word	0x40013000
 800235c:	40021000 	.word	0x40021000
 8002360:	40003c00 	.word	0x40003c00
 8002364:	48000400 	.word	0x48000400

08002368 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b08a      	sub	sp, #40	; 0x28
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002370:	f107 0314 	add.w	r3, r7, #20
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]
 8002378:	605a      	str	r2, [r3, #4]
 800237a:	609a      	str	r2, [r3, #8]
 800237c:	60da      	str	r2, [r3, #12]
 800237e:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a35      	ldr	r2, [pc, #212]	; (800245c <HAL_TIM_PWM_MspInit+0xf4>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d152      	bne.n	8002430 <HAL_TIM_PWM_MspInit+0xc8>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800238a:	4b35      	ldr	r3, [pc, #212]	; (8002460 <HAL_TIM_PWM_MspInit+0xf8>)
 800238c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800238e:	4a34      	ldr	r2, [pc, #208]	; (8002460 <HAL_TIM_PWM_MspInit+0xf8>)
 8002390:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002394:	6613      	str	r3, [r2, #96]	; 0x60
 8002396:	4b32      	ldr	r3, [pc, #200]	; (8002460 <HAL_TIM_PWM_MspInit+0xf8>)
 8002398:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800239a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800239e:	613b      	str	r3, [r7, #16]
 80023a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80023a2:	4b2f      	ldr	r3, [pc, #188]	; (8002460 <HAL_TIM_PWM_MspInit+0xf8>)
 80023a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023a6:	4a2e      	ldr	r2, [pc, #184]	; (8002460 <HAL_TIM_PWM_MspInit+0xf8>)
 80023a8:	f043 0310 	orr.w	r3, r3, #16
 80023ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023ae:	4b2c      	ldr	r3, [pc, #176]	; (8002460 <HAL_TIM_PWM_MspInit+0xf8>)
 80023b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023b2:	f003 0310 	and.w	r3, r3, #16
 80023b6:	60fb      	str	r3, [r7, #12]
 80023b8:	68fb      	ldr	r3, [r7, #12]
    PE7     ------> TIM1_ETR
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_BKIN2
    PE15     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80023ba:	2380      	movs	r3, #128	; 0x80
 80023bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023be:	2302      	movs	r3, #2
 80023c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c2:	2300      	movs	r3, #0
 80023c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023c6:	2300      	movs	r3, #0
 80023c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80023ca:	2301      	movs	r3, #1
 80023cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80023ce:	f107 0314 	add.w	r3, r7, #20
 80023d2:	4619      	mov	r1, r3
 80023d4:	4823      	ldr	r0, [pc, #140]	; (8002464 <HAL_TIM_PWM_MspInit+0xfc>)
 80023d6:	f001 fed1 	bl	800417c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80023da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e0:	2302      	movs	r3, #2
 80023e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023e4:	2301      	movs	r3, #1
 80023e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023e8:	2300      	movs	r3, #0
 80023ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80023ec:	2301      	movs	r3, #1
 80023ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80023f0:	f107 0314 	add.w	r3, r7, #20
 80023f4:	4619      	mov	r1, r3
 80023f6:	481b      	ldr	r0, [pc, #108]	; (8002464 <HAL_TIM_PWM_MspInit+0xfc>)
 80023f8:	f001 fec0 	bl	800417c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80023fc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002400:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002402:	2302      	movs	r3, #2
 8002404:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002406:	2300      	movs	r3, #0
 8002408:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800240a:	2300      	movs	r3, #0
 800240c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 800240e:	2303      	movs	r3, #3
 8002410:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002412:	f107 0314 	add.w	r3, r7, #20
 8002416:	4619      	mov	r1, r3
 8002418:	4812      	ldr	r0, [pc, #72]	; (8002464 <HAL_TIM_PWM_MspInit+0xfc>)
 800241a:	f001 feaf 	bl	800417c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800241e:	2200      	movs	r2, #0
 8002420:	2100      	movs	r1, #0
 8002422:	201b      	movs	r0, #27
 8002424:	f001 fe65 	bl	80040f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002428:	201b      	movs	r0, #27
 800242a:	f001 fe7e 	bl	800412a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 800242e:	e010      	b.n	8002452 <HAL_TIM_PWM_MspInit+0xea>
  else if(htim_pwm->Instance==TIM15)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a0c      	ldr	r2, [pc, #48]	; (8002468 <HAL_TIM_PWM_MspInit+0x100>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d10b      	bne.n	8002452 <HAL_TIM_PWM_MspInit+0xea>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800243a:	4b09      	ldr	r3, [pc, #36]	; (8002460 <HAL_TIM_PWM_MspInit+0xf8>)
 800243c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800243e:	4a08      	ldr	r2, [pc, #32]	; (8002460 <HAL_TIM_PWM_MspInit+0xf8>)
 8002440:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002444:	6613      	str	r3, [r2, #96]	; 0x60
 8002446:	4b06      	ldr	r3, [pc, #24]	; (8002460 <HAL_TIM_PWM_MspInit+0xf8>)
 8002448:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800244a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800244e:	60bb      	str	r3, [r7, #8]
 8002450:	68bb      	ldr	r3, [r7, #8]
}
 8002452:	bf00      	nop
 8002454:	3728      	adds	r7, #40	; 0x28
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	40012c00 	.word	0x40012c00
 8002460:	40021000 	.word	0x40021000
 8002464:	48001000 	.word	0x48001000
 8002468:	40014000 	.word	0x40014000

0800246c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b08e      	sub	sp, #56	; 0x38
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002474:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002478:	2200      	movs	r2, #0
 800247a:	601a      	str	r2, [r3, #0]
 800247c:	605a      	str	r2, [r3, #4]
 800247e:	609a      	str	r2, [r3, #8]
 8002480:	60da      	str	r2, [r3, #12]
 8002482:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800248c:	d147      	bne.n	800251e <HAL_TIM_Base_MspInit+0xb2>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800248e:	4b59      	ldr	r3, [pc, #356]	; (80025f4 <HAL_TIM_Base_MspInit+0x188>)
 8002490:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002492:	4a58      	ldr	r2, [pc, #352]	; (80025f4 <HAL_TIM_Base_MspInit+0x188>)
 8002494:	f043 0301 	orr.w	r3, r3, #1
 8002498:	6593      	str	r3, [r2, #88]	; 0x58
 800249a:	4b56      	ldr	r3, [pc, #344]	; (80025f4 <HAL_TIM_Base_MspInit+0x188>)
 800249c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800249e:	f003 0301 	and.w	r3, r3, #1
 80024a2:	623b      	str	r3, [r7, #32]
 80024a4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024a6:	4b53      	ldr	r3, [pc, #332]	; (80025f4 <HAL_TIM_Base_MspInit+0x188>)
 80024a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024aa:	4a52      	ldr	r2, [pc, #328]	; (80025f4 <HAL_TIM_Base_MspInit+0x188>)
 80024ac:	f043 0302 	orr.w	r3, r3, #2
 80024b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024b2:	4b50      	ldr	r3, [pc, #320]	; (80025f4 <HAL_TIM_Base_MspInit+0x188>)
 80024b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024b6:	f003 0302 	and.w	r3, r3, #2
 80024ba:	61fb      	str	r3, [r7, #28]
 80024bc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024be:	4b4d      	ldr	r3, [pc, #308]	; (80025f4 <HAL_TIM_Base_MspInit+0x188>)
 80024c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024c2:	4a4c      	ldr	r2, [pc, #304]	; (80025f4 <HAL_TIM_Base_MspInit+0x188>)
 80024c4:	f043 0301 	orr.w	r3, r3, #1
 80024c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024ca:	4b4a      	ldr	r3, [pc, #296]	; (80025f4 <HAL_TIM_Base_MspInit+0x188>)
 80024cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ce:	f003 0301 	and.w	r3, r3, #1
 80024d2:	61bb      	str	r3, [r7, #24]
 80024d4:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PA15 (JTDI)     ------> TIM2_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80024d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024dc:	2302      	movs	r3, #2
 80024de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e0:	2300      	movs	r3, #0
 80024e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024e4:	2300      	movs	r3, #0
 80024e6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80024e8:	2301      	movs	r3, #1
 80024ea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024f0:	4619      	mov	r1, r3
 80024f2:	4841      	ldr	r0, [pc, #260]	; (80025f8 <HAL_TIM_Base_MspInit+0x18c>)
 80024f4:	f001 fe42 	bl	800417c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80024f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024fe:	2302      	movs	r3, #2
 8002500:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002502:	2300      	movs	r3, #0
 8002504:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002506:	2300      	movs	r3, #0
 8002508:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800250a:	2302      	movs	r3, #2
 800250c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800250e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002512:	4619      	mov	r1, r3
 8002514:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002518:	f001 fe30 	bl	800417c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800251c:	e065      	b.n	80025ea <HAL_TIM_Base_MspInit+0x17e>
  else if(htim_base->Instance==TIM3)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a36      	ldr	r2, [pc, #216]	; (80025fc <HAL_TIM_Base_MspInit+0x190>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d133      	bne.n	8002590 <HAL_TIM_Base_MspInit+0x124>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002528:	4b32      	ldr	r3, [pc, #200]	; (80025f4 <HAL_TIM_Base_MspInit+0x188>)
 800252a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800252c:	4a31      	ldr	r2, [pc, #196]	; (80025f4 <HAL_TIM_Base_MspInit+0x188>)
 800252e:	f043 0302 	orr.w	r3, r3, #2
 8002532:	6593      	str	r3, [r2, #88]	; 0x58
 8002534:	4b2f      	ldr	r3, [pc, #188]	; (80025f4 <HAL_TIM_Base_MspInit+0x188>)
 8002536:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002538:	f003 0302 	and.w	r3, r3, #2
 800253c:	617b      	str	r3, [r7, #20]
 800253e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002540:	4b2c      	ldr	r3, [pc, #176]	; (80025f4 <HAL_TIM_Base_MspInit+0x188>)
 8002542:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002544:	4a2b      	ldr	r2, [pc, #172]	; (80025f4 <HAL_TIM_Base_MspInit+0x188>)
 8002546:	f043 0304 	orr.w	r3, r3, #4
 800254a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800254c:	4b29      	ldr	r3, [pc, #164]	; (80025f4 <HAL_TIM_Base_MspInit+0x188>)
 800254e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002550:	f003 0304 	and.w	r3, r3, #4
 8002554:	613b      	str	r3, [r7, #16]
 8002556:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002558:	2380      	movs	r3, #128	; 0x80
 800255a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800255c:	2302      	movs	r3, #2
 800255e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002560:	2301      	movs	r3, #1
 8002562:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002564:	2300      	movs	r3, #0
 8002566:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002568:	2302      	movs	r3, #2
 800256a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800256c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002570:	4619      	mov	r1, r3
 8002572:	4823      	ldr	r0, [pc, #140]	; (8002600 <HAL_TIM_Base_MspInit+0x194>)
 8002574:	f001 fe02 	bl	800417c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002578:	2200      	movs	r2, #0
 800257a:	2100      	movs	r1, #0
 800257c:	201d      	movs	r0, #29
 800257e:	f001 fdb8 	bl	80040f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002582:	201d      	movs	r0, #29
 8002584:	f001 fdd1 	bl	800412a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_DisableIRQ(TIM3_IRQn);
 8002588:	201d      	movs	r0, #29
 800258a:	f001 fddc 	bl	8004146 <HAL_NVIC_DisableIRQ>
}
 800258e:	e02c      	b.n	80025ea <HAL_TIM_Base_MspInit+0x17e>
  else if(htim_base->Instance==TIM4)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a1b      	ldr	r2, [pc, #108]	; (8002604 <HAL_TIM_Base_MspInit+0x198>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d127      	bne.n	80025ea <HAL_TIM_Base_MspInit+0x17e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800259a:	4b16      	ldr	r3, [pc, #88]	; (80025f4 <HAL_TIM_Base_MspInit+0x188>)
 800259c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800259e:	4a15      	ldr	r2, [pc, #84]	; (80025f4 <HAL_TIM_Base_MspInit+0x188>)
 80025a0:	f043 0304 	orr.w	r3, r3, #4
 80025a4:	6593      	str	r3, [r2, #88]	; 0x58
 80025a6:	4b13      	ldr	r3, [pc, #76]	; (80025f4 <HAL_TIM_Base_MspInit+0x188>)
 80025a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025aa:	f003 0304 	and.w	r3, r3, #4
 80025ae:	60fb      	str	r3, [r7, #12]
 80025b0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80025b2:	4b10      	ldr	r3, [pc, #64]	; (80025f4 <HAL_TIM_Base_MspInit+0x188>)
 80025b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025b6:	4a0f      	ldr	r2, [pc, #60]	; (80025f4 <HAL_TIM_Base_MspInit+0x188>)
 80025b8:	f043 0310 	orr.w	r3, r3, #16
 80025bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025be:	4b0d      	ldr	r3, [pc, #52]	; (80025f4 <HAL_TIM_Base_MspInit+0x188>)
 80025c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025c2:	f003 0310 	and.w	r3, r3, #16
 80025c6:	60bb      	str	r3, [r7, #8]
 80025c8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80025ca:	2301      	movs	r3, #1
 80025cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ce:	2302      	movs	r3, #2
 80025d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d2:	2300      	movs	r3, #0
 80025d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025d6:	2300      	movs	r3, #0
 80025d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80025da:	2302      	movs	r3, #2
 80025dc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80025de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025e2:	4619      	mov	r1, r3
 80025e4:	4808      	ldr	r0, [pc, #32]	; (8002608 <HAL_TIM_Base_MspInit+0x19c>)
 80025e6:	f001 fdc9 	bl	800417c <HAL_GPIO_Init>
}
 80025ea:	bf00      	nop
 80025ec:	3738      	adds	r7, #56	; 0x38
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	40021000 	.word	0x40021000
 80025f8:	48000400 	.word	0x48000400
 80025fc:	40000400 	.word	0x40000400
 8002600:	48000800 	.word	0x48000800
 8002604:	40000800 	.word	0x40000800
 8002608:	48001000 	.word	0x48001000

0800260c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b08c      	sub	sp, #48	; 0x30
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002614:	f107 031c 	add.w	r3, r7, #28
 8002618:	2200      	movs	r2, #0
 800261a:	601a      	str	r2, [r3, #0]
 800261c:	605a      	str	r2, [r3, #4]
 800261e:	609a      	str	r2, [r3, #8]
 8002620:	60da      	str	r2, [r3, #12]
 8002622:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a46      	ldr	r2, [pc, #280]	; (8002744 <HAL_TIM_MspPostInit+0x138>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d11d      	bne.n	800266a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800262e:	4b46      	ldr	r3, [pc, #280]	; (8002748 <HAL_TIM_MspPostInit+0x13c>)
 8002630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002632:	4a45      	ldr	r2, [pc, #276]	; (8002748 <HAL_TIM_MspPostInit+0x13c>)
 8002634:	f043 0310 	orr.w	r3, r3, #16
 8002638:	64d3      	str	r3, [r2, #76]	; 0x4c
 800263a:	4b43      	ldr	r3, [pc, #268]	; (8002748 <HAL_TIM_MspPostInit+0x13c>)
 800263c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800263e:	f003 0310 	and.w	r3, r3, #16
 8002642:	61bb      	str	r3, [r7, #24]
 8002644:	69bb      	ldr	r3, [r7, #24]
    PE9     ------> TIM1_CH1
    PE10     ------> TIM1_CH2N
    PE11     ------> TIM1_CH2
    PE12     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002646:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800264a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800264c:	2302      	movs	r3, #2
 800264e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002650:	2300      	movs	r3, #0
 8002652:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002654:	2300      	movs	r3, #0
 8002656:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002658:	2301      	movs	r3, #1
 800265a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800265c:	f107 031c 	add.w	r3, r7, #28
 8002660:	4619      	mov	r1, r3
 8002662:	483a      	ldr	r0, [pc, #232]	; (800274c <HAL_TIM_MspPostInit+0x140>)
 8002664:	f001 fd8a 	bl	800417c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8002668:	e067      	b.n	800273a <HAL_TIM_MspPostInit+0x12e>
  else if(htim->Instance==TIM2)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002672:	d11d      	bne.n	80026b0 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002674:	4b34      	ldr	r3, [pc, #208]	; (8002748 <HAL_TIM_MspPostInit+0x13c>)
 8002676:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002678:	4a33      	ldr	r2, [pc, #204]	; (8002748 <HAL_TIM_MspPostInit+0x13c>)
 800267a:	f043 0301 	orr.w	r3, r3, #1
 800267e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002680:	4b31      	ldr	r3, [pc, #196]	; (8002748 <HAL_TIM_MspPostInit+0x13c>)
 8002682:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002684:	f003 0301 	and.w	r3, r3, #1
 8002688:	617b      	str	r3, [r7, #20]
 800268a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800268c:	2301      	movs	r3, #1
 800268e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002690:	2302      	movs	r3, #2
 8002692:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002694:	2300      	movs	r3, #0
 8002696:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002698:	2300      	movs	r3, #0
 800269a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800269c:	2301      	movs	r3, #1
 800269e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026a0:	f107 031c 	add.w	r3, r7, #28
 80026a4:	4619      	mov	r1, r3
 80026a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026aa:	f001 fd67 	bl	800417c <HAL_GPIO_Init>
}
 80026ae:	e044      	b.n	800273a <HAL_TIM_MspPostInit+0x12e>
  else if(htim->Instance==TIM4)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a26      	ldr	r2, [pc, #152]	; (8002750 <HAL_TIM_MspPostInit+0x144>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d11d      	bne.n	80026f6 <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80026ba:	4b23      	ldr	r3, [pc, #140]	; (8002748 <HAL_TIM_MspPostInit+0x13c>)
 80026bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026be:	4a22      	ldr	r2, [pc, #136]	; (8002748 <HAL_TIM_MspPostInit+0x13c>)
 80026c0:	f043 0308 	orr.w	r3, r3, #8
 80026c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026c6:	4b20      	ldr	r3, [pc, #128]	; (8002748 <HAL_TIM_MspPostInit+0x13c>)
 80026c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ca:	f003 0308 	and.w	r3, r3, #8
 80026ce:	613b      	str	r3, [r7, #16]
 80026d0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80026d2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80026d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d8:	2302      	movs	r3, #2
 80026da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026dc:	2300      	movs	r3, #0
 80026de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026e0:	2300      	movs	r3, #0
 80026e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80026e4:	2302      	movs	r3, #2
 80026e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026e8:	f107 031c 	add.w	r3, r7, #28
 80026ec:	4619      	mov	r1, r3
 80026ee:	4819      	ldr	r0, [pc, #100]	; (8002754 <HAL_TIM_MspPostInit+0x148>)
 80026f0:	f001 fd44 	bl	800417c <HAL_GPIO_Init>
}
 80026f4:	e021      	b.n	800273a <HAL_TIM_MspPostInit+0x12e>
  else if(htim->Instance==TIM15)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a17      	ldr	r2, [pc, #92]	; (8002758 <HAL_TIM_MspPostInit+0x14c>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d11c      	bne.n	800273a <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002700:	4b11      	ldr	r3, [pc, #68]	; (8002748 <HAL_TIM_MspPostInit+0x13c>)
 8002702:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002704:	4a10      	ldr	r2, [pc, #64]	; (8002748 <HAL_TIM_MspPostInit+0x13c>)
 8002706:	f043 0302 	orr.w	r3, r3, #2
 800270a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800270c:	4b0e      	ldr	r3, [pc, #56]	; (8002748 <HAL_TIM_MspPostInit+0x13c>)
 800270e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002710:	f003 0302 	and.w	r3, r3, #2
 8002714:	60fb      	str	r3, [r7, #12]
 8002716:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002718:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800271c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800271e:	2302      	movs	r3, #2
 8002720:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002722:	2300      	movs	r3, #0
 8002724:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002726:	2300      	movs	r3, #0
 8002728:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 800272a:	230e      	movs	r3, #14
 800272c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800272e:	f107 031c 	add.w	r3, r7, #28
 8002732:	4619      	mov	r1, r3
 8002734:	4809      	ldr	r0, [pc, #36]	; (800275c <HAL_TIM_MspPostInit+0x150>)
 8002736:	f001 fd21 	bl	800417c <HAL_GPIO_Init>
}
 800273a:	bf00      	nop
 800273c:	3730      	adds	r7, #48	; 0x30
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	40012c00 	.word	0x40012c00
 8002748:	40021000 	.word	0x40021000
 800274c:	48001000 	.word	0x48001000
 8002750:	40000800 	.word	0x40000800
 8002754:	48000c00 	.word	0x48000c00
 8002758:	40014000 	.word	0x40014000
 800275c:	48000400 	.word	0x48000400

08002760 <HAL_SAI_MspInit>:

static uint32_t SAI1_client =0;
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b08a      	sub	sp, #40	; 0x28
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a50      	ldr	r2, [pc, #320]	; (80028b0 <HAL_SAI_MspInit+0x150>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d124      	bne.n	80027bc <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 8002772:	4b50      	ldr	r3, [pc, #320]	; (80028b4 <HAL_SAI_MspInit+0x154>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d10b      	bne.n	8002792 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800277a:	4b4f      	ldr	r3, [pc, #316]	; (80028b8 <HAL_SAI_MspInit+0x158>)
 800277c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800277e:	4a4e      	ldr	r2, [pc, #312]	; (80028b8 <HAL_SAI_MspInit+0x158>)
 8002780:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002784:	6613      	str	r3, [r2, #96]	; 0x60
 8002786:	4b4c      	ldr	r3, [pc, #304]	; (80028b8 <HAL_SAI_MspInit+0x158>)
 8002788:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800278a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800278e:	613b      	str	r3, [r7, #16]
 8002790:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 8002792:	4b48      	ldr	r3, [pc, #288]	; (80028b4 <HAL_SAI_MspInit+0x154>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	3301      	adds	r3, #1
 8002798:	4a46      	ldr	r2, [pc, #280]	; (80028b4 <HAL_SAI_MspInit+0x154>)
 800279a:	6013      	str	r3, [r2, #0]
    PE2     ------> SAI1_MCLK_A
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800279c:	2374      	movs	r3, #116	; 0x74
 800279e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a0:	2302      	movs	r3, #2
 80027a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a4:	2300      	movs	r3, #0
 80027a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027a8:	2300      	movs	r3, #0
 80027aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80027ac:	230d      	movs	r3, #13
 80027ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80027b0:	f107 0314 	add.w	r3, r7, #20
 80027b4:	4619      	mov	r1, r3
 80027b6:	4841      	ldr	r0, [pc, #260]	; (80028bc <HAL_SAI_MspInit+0x15c>)
 80027b8:	f001 fce0 	bl	800417c <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a3f      	ldr	r2, [pc, #252]	; (80028c0 <HAL_SAI_MspInit+0x160>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d135      	bne.n	8002832 <HAL_SAI_MspInit+0xd2>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 80027c6:	4b3b      	ldr	r3, [pc, #236]	; (80028b4 <HAL_SAI_MspInit+0x154>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d10b      	bne.n	80027e6 <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80027ce:	4b3a      	ldr	r3, [pc, #232]	; (80028b8 <HAL_SAI_MspInit+0x158>)
 80027d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027d2:	4a39      	ldr	r2, [pc, #228]	; (80028b8 <HAL_SAI_MspInit+0x158>)
 80027d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80027d8:	6613      	str	r3, [r2, #96]	; 0x60
 80027da:	4b37      	ldr	r3, [pc, #220]	; (80028b8 <HAL_SAI_MspInit+0x158>)
 80027dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027e2:	60fb      	str	r3, [r7, #12]
 80027e4:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 80027e6:	4b33      	ldr	r3, [pc, #204]	; (80028b4 <HAL_SAI_MspInit+0x154>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	3301      	adds	r3, #1
 80027ec:	4a31      	ldr	r2, [pc, #196]	; (80028b4 <HAL_SAI_MspInit+0x154>)
 80027ee:	6013      	str	r3, [r2, #0]
    PE3     ------> SAI1_SD_B
    PF7     ------> SAI1_MCLK_B
    PF8     ------> SAI1_SCK_B
    PF9     ------> SAI1_FS_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80027f0:	2308      	movs	r3, #8
 80027f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027f4:	2302      	movs	r3, #2
 80027f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f8:	2300      	movs	r3, #0
 80027fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027fc:	2300      	movs	r3, #0
 80027fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8002800:	230d      	movs	r3, #13
 8002802:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002804:	f107 0314 	add.w	r3, r7, #20
 8002808:	4619      	mov	r1, r3
 800280a:	482c      	ldr	r0, [pc, #176]	; (80028bc <HAL_SAI_MspInit+0x15c>)
 800280c:	f001 fcb6 	bl	800417c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002810:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002814:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002816:	2302      	movs	r3, #2
 8002818:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281a:	2300      	movs	r3, #0
 800281c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800281e:	2300      	movs	r3, #0
 8002820:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8002822:	230d      	movs	r3, #13
 8002824:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002826:	f107 0314 	add.w	r3, r7, #20
 800282a:	4619      	mov	r1, r3
 800282c:	4825      	ldr	r0, [pc, #148]	; (80028c4 <HAL_SAI_MspInit+0x164>)
 800282e:	f001 fca5 	bl	800417c <HAL_GPIO_Init>

    }
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a24      	ldr	r2, [pc, #144]	; (80028c8 <HAL_SAI_MspInit+0x168>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d135      	bne.n	80028a8 <HAL_SAI_MspInit+0x148>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 800283c:	4b23      	ldr	r3, [pc, #140]	; (80028cc <HAL_SAI_MspInit+0x16c>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d10b      	bne.n	800285c <HAL_SAI_MspInit+0xfc>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002844:	4b1c      	ldr	r3, [pc, #112]	; (80028b8 <HAL_SAI_MspInit+0x158>)
 8002846:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002848:	4a1b      	ldr	r2, [pc, #108]	; (80028b8 <HAL_SAI_MspInit+0x158>)
 800284a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800284e:	6613      	str	r3, [r2, #96]	; 0x60
 8002850:	4b19      	ldr	r3, [pc, #100]	; (80028b8 <HAL_SAI_MspInit+0x158>)
 8002852:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002854:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002858:	60bb      	str	r3, [r7, #8]
 800285a:	68bb      	ldr	r3, [r7, #8]
    }
    SAI2_client ++;
 800285c:	4b1b      	ldr	r3, [pc, #108]	; (80028cc <HAL_SAI_MspInit+0x16c>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	3301      	adds	r3, #1
 8002862:	4a1a      	ldr	r2, [pc, #104]	; (80028cc <HAL_SAI_MspInit+0x16c>)
 8002864:	6013      	str	r3, [r2, #0]
    PB12     ------> SAI2_FS_A
    PB13     ------> SAI2_SCK_A
    PB15     ------> SAI2_SD_A
    PC6     ------> SAI2_MCLK_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8002866:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 800286a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800286c:	2302      	movs	r3, #2
 800286e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002870:	2300      	movs	r3, #0
 8002872:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002874:	2300      	movs	r3, #0
 8002876:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8002878:	230d      	movs	r3, #13
 800287a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800287c:	f107 0314 	add.w	r3, r7, #20
 8002880:	4619      	mov	r1, r3
 8002882:	4813      	ldr	r0, [pc, #76]	; (80028d0 <HAL_SAI_MspInit+0x170>)
 8002884:	f001 fc7a 	bl	800417c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002888:	2340      	movs	r3, #64	; 0x40
 800288a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800288c:	2302      	movs	r3, #2
 800288e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002890:	2300      	movs	r3, #0
 8002892:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002894:	2300      	movs	r3, #0
 8002896:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8002898:	230d      	movs	r3, #13
 800289a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800289c:	f107 0314 	add.w	r3, r7, #20
 80028a0:	4619      	mov	r1, r3
 80028a2:	480c      	ldr	r0, [pc, #48]	; (80028d4 <HAL_SAI_MspInit+0x174>)
 80028a4:	f001 fc6a 	bl	800417c <HAL_GPIO_Init>

    }
}
 80028a8:	bf00      	nop
 80028aa:	3728      	adds	r7, #40	; 0x28
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	40015404 	.word	0x40015404
 80028b4:	200007d4 	.word	0x200007d4
 80028b8:	40021000 	.word	0x40021000
 80028bc:	48001000 	.word	0x48001000
 80028c0:	40015424 	.word	0x40015424
 80028c4:	48001400 	.word	0x48001400
 80028c8:	40015804 	.word	0x40015804
 80028cc:	200007d8 	.word	0x200007d8
 80028d0:	48000400 	.word	0x48000400
 80028d4:	48000800 	.word	0x48000800

080028d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80028dc:	e7fe      	b.n	80028dc <NMI_Handler+0x4>

080028de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028de:	b480      	push	{r7}
 80028e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028e2:	e7fe      	b.n	80028e2 <HardFault_Handler+0x4>

080028e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028e8:	e7fe      	b.n	80028e8 <MemManage_Handler+0x4>

080028ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028ea:	b480      	push	{r7}
 80028ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028ee:	e7fe      	b.n	80028ee <BusFault_Handler+0x4>

080028f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028f4:	e7fe      	b.n	80028f4 <UsageFault_Handler+0x4>

080028f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028f6:	b480      	push	{r7}
 80028f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028fa:	bf00      	nop
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002908:	bf00      	nop
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr

08002912 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002912:	b480      	push	{r7}
 8002914:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002916:	bf00      	nop
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr

08002920 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002924:	f000 f924 	bl	8002b70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002928:	bf00      	nop
 800292a:	bd80      	pop	{r7, pc}

0800292c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002930:	4802      	ldr	r0, [pc, #8]	; (800293c <TIM1_CC_IRQHandler+0x10>)
 8002932:	f006 f9df 	bl	8008cf4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002936:	bf00      	nop
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	20000654 	.word	0x20000654

08002940 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	const uint32_t THRESHOD = 500;
 8002946:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800294a:	607b      	str	r3, [r7, #4]

	extern uint32_t count;

	static uint8_t mode = 0;

	if (mode == 0) {
 800294c:	4b1f      	ldr	r3, [pc, #124]	; (80029cc <TIM3_IRQHandler+0x8c>)
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d112      	bne.n	800297a <TIM3_IRQHandler+0x3a>
		// falling edge
		TIM3->CNT = 0;
 8002954:	4b1e      	ldr	r3, [pc, #120]	; (80029d0 <TIM3_IRQHandler+0x90>)
 8002956:	2200      	movs	r2, #0
 8002958:	625a      	str	r2, [r3, #36]	; 0x24
		TIM3->CCER &= ~(0b1 << 5);
 800295a:	4b1d      	ldr	r3, [pc, #116]	; (80029d0 <TIM3_IRQHandler+0x90>)
 800295c:	6a1b      	ldr	r3, [r3, #32]
 800295e:	4a1c      	ldr	r2, [pc, #112]	; (80029d0 <TIM3_IRQHandler+0x90>)
 8002960:	f023 0320 	bic.w	r3, r3, #32
 8002964:	6213      	str	r3, [r2, #32]
		TIM3->CCER &= ~(0b1 << 7);
 8002966:	4b1a      	ldr	r3, [pc, #104]	; (80029d0 <TIM3_IRQHandler+0x90>)
 8002968:	6a1b      	ldr	r3, [r3, #32]
 800296a:	4a19      	ldr	r2, [pc, #100]	; (80029d0 <TIM3_IRQHandler+0x90>)
 800296c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002970:	6213      	str	r3, [r2, #32]
		mode = 1;
 8002972:	4b16      	ldr	r3, [pc, #88]	; (80029cc <TIM3_IRQHandler+0x8c>)
 8002974:	2201      	movs	r2, #1
 8002976:	701a      	strb	r2, [r3, #0]
 8002978:	e021      	b.n	80029be <TIM3_IRQHandler+0x7e>
	} else {
		// rising edge;
		uint32_t local_count = TIM3->CNT;
 800297a:	4b15      	ldr	r3, [pc, #84]	; (80029d0 <TIM3_IRQHandler+0x90>)
 800297c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297e:	603b      	str	r3, [r7, #0]
		count = local_count;
 8002980:	4a14      	ldr	r2, [pc, #80]	; (80029d4 <TIM3_IRQHandler+0x94>)
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	6013      	str	r3, [r2, #0]

		if (local_count > THRESHOD) {
 8002986:	683a      	ldr	r2, [r7, #0]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	429a      	cmp	r2, r3
 800298c:	d908      	bls.n	80029a0 <TIM3_IRQHandler+0x60>
			 ball_collected = 1;
 800298e:	4b12      	ldr	r3, [pc, #72]	; (80029d8 <TIM3_IRQHandler+0x98>)
 8002990:	2201      	movs	r2, #1
 8002992:	701a      	strb	r2, [r3, #0]
			 ball_count++;
 8002994:	4b11      	ldr	r3, [pc, #68]	; (80029dc <TIM3_IRQHandler+0x9c>)
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	3301      	adds	r3, #1
 800299a:	b2da      	uxtb	r2, r3
 800299c:	4b0f      	ldr	r3, [pc, #60]	; (80029dc <TIM3_IRQHandler+0x9c>)
 800299e:	701a      	strb	r2, [r3, #0]
		}

		TIM3->CCER |= (0b1 << 5);
 80029a0:	4b0b      	ldr	r3, [pc, #44]	; (80029d0 <TIM3_IRQHandler+0x90>)
 80029a2:	6a1b      	ldr	r3, [r3, #32]
 80029a4:	4a0a      	ldr	r2, [pc, #40]	; (80029d0 <TIM3_IRQHandler+0x90>)
 80029a6:	f043 0320 	orr.w	r3, r3, #32
 80029aa:	6213      	str	r3, [r2, #32]
		TIM3->CCER &= ~(0b1 << 7);
 80029ac:	4b08      	ldr	r3, [pc, #32]	; (80029d0 <TIM3_IRQHandler+0x90>)
 80029ae:	6a1b      	ldr	r3, [r3, #32]
 80029b0:	4a07      	ldr	r2, [pc, #28]	; (80029d0 <TIM3_IRQHandler+0x90>)
 80029b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029b6:	6213      	str	r3, [r2, #32]
		mode = 0;
 80029b8:	4b04      	ldr	r3, [pc, #16]	; (80029cc <TIM3_IRQHandler+0x8c>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	701a      	strb	r2, [r3, #0]
	}


  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80029be:	4808      	ldr	r0, [pc, #32]	; (80029e0 <TIM3_IRQHandler+0xa0>)
 80029c0:	f006 f998 	bl	8008cf4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80029c4:	bf00      	nop
 80029c6:	3708      	adds	r7, #8
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	200007dc 	.word	0x200007dc
 80029d0:	40000400 	.word	0x40000400
 80029d4:	200000c0 	.word	0x200000c0
 80029d8:	200000bc 	.word	0x200000bc
 80029dc:	200000bb 	.word	0x200000bb
 80029e0:	200006ec 	.word	0x200006ec

080029e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b086      	sub	sp, #24
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029ec:	4a14      	ldr	r2, [pc, #80]	; (8002a40 <_sbrk+0x5c>)
 80029ee:	4b15      	ldr	r3, [pc, #84]	; (8002a44 <_sbrk+0x60>)
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029f8:	4b13      	ldr	r3, [pc, #76]	; (8002a48 <_sbrk+0x64>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d102      	bne.n	8002a06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a00:	4b11      	ldr	r3, [pc, #68]	; (8002a48 <_sbrk+0x64>)
 8002a02:	4a12      	ldr	r2, [pc, #72]	; (8002a4c <_sbrk+0x68>)
 8002a04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a06:	4b10      	ldr	r3, [pc, #64]	; (8002a48 <_sbrk+0x64>)
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4413      	add	r3, r2
 8002a0e:	693a      	ldr	r2, [r7, #16]
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d207      	bcs.n	8002a24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a14:	f008 fa7c 	bl	800af10 <__errno>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	220c      	movs	r2, #12
 8002a1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a22:	e009      	b.n	8002a38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a24:	4b08      	ldr	r3, [pc, #32]	; (8002a48 <_sbrk+0x64>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a2a:	4b07      	ldr	r3, [pc, #28]	; (8002a48 <_sbrk+0x64>)
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4413      	add	r3, r2
 8002a32:	4a05      	ldr	r2, [pc, #20]	; (8002a48 <_sbrk+0x64>)
 8002a34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a36:	68fb      	ldr	r3, [r7, #12]
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3718      	adds	r7, #24
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	200a0000 	.word	0x200a0000
 8002a44:	00000400 	.word	0x00000400
 8002a48:	200007e0 	.word	0x200007e0
 8002a4c:	200007f8 	.word	0x200007f8

08002a50 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002a50:	b480      	push	{r7}
 8002a52:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002a54:	4b06      	ldr	r3, [pc, #24]	; (8002a70 <SystemInit+0x20>)
 8002a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a5a:	4a05      	ldr	r2, [pc, #20]	; (8002a70 <SystemInit+0x20>)
 8002a5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002a64:	bf00      	nop
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop
 8002a70:	e000ed00 	.word	0xe000ed00

08002a74 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002a74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002aac <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002a78:	f7ff ffea 	bl	8002a50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a7c:	480c      	ldr	r0, [pc, #48]	; (8002ab0 <LoopForever+0x6>)
  ldr r1, =_edata
 8002a7e:	490d      	ldr	r1, [pc, #52]	; (8002ab4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002a80:	4a0d      	ldr	r2, [pc, #52]	; (8002ab8 <LoopForever+0xe>)
  movs r3, #0
 8002a82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a84:	e002      	b.n	8002a8c <LoopCopyDataInit>

08002a86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a8a:	3304      	adds	r3, #4

08002a8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a90:	d3f9      	bcc.n	8002a86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a92:	4a0a      	ldr	r2, [pc, #40]	; (8002abc <LoopForever+0x12>)
  ldr r4, =_ebss
 8002a94:	4c0a      	ldr	r4, [pc, #40]	; (8002ac0 <LoopForever+0x16>)
  movs r3, #0
 8002a96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a98:	e001      	b.n	8002a9e <LoopFillZerobss>

08002a9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a9c:	3204      	adds	r2, #4

08002a9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002aa0:	d3fb      	bcc.n	8002a9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002aa2:	f008 fa3b 	bl	800af1c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002aa6:	f7fe f8a7 	bl	8000bf8 <main>

08002aaa <LoopForever>:

LoopForever:
    b LoopForever
 8002aaa:	e7fe      	b.n	8002aaa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002aac:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8002ab0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ab4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002ab8:	0800b1e0 	.word	0x0800b1e0
  ldr r2, =_sbss
 8002abc:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002ac0:	200007f8 	.word	0x200007f8

08002ac4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002ac4:	e7fe      	b.n	8002ac4 <ADC1_IRQHandler>

08002ac6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ac6:	b580      	push	{r7, lr}
 8002ac8:	b082      	sub	sp, #8
 8002aca:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002acc:	2300      	movs	r3, #0
 8002ace:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ad0:	2003      	movs	r0, #3
 8002ad2:	f001 fb03 	bl	80040dc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002ad6:	2000      	movs	r0, #0
 8002ad8:	f000 f80e 	bl	8002af8 <HAL_InitTick>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d002      	beq.n	8002ae8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	71fb      	strb	r3, [r7, #7]
 8002ae6:	e001      	b.n	8002aec <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002ae8:	f7ff f92e 	bl	8001d48 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002aec:	79fb      	ldrb	r3, [r7, #7]
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3708      	adds	r7, #8
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
	...

08002af8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002b00:	2300      	movs	r3, #0
 8002b02:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002b04:	4b17      	ldr	r3, [pc, #92]	; (8002b64 <HAL_InitTick+0x6c>)
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d023      	beq.n	8002b54 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002b0c:	4b16      	ldr	r3, [pc, #88]	; (8002b68 <HAL_InitTick+0x70>)
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	4b14      	ldr	r3, [pc, #80]	; (8002b64 <HAL_InitTick+0x6c>)
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	4619      	mov	r1, r3
 8002b16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b22:	4618      	mov	r0, r3
 8002b24:	f001 fb1d 	bl	8004162 <HAL_SYSTICK_Config>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d10f      	bne.n	8002b4e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2b0f      	cmp	r3, #15
 8002b32:	d809      	bhi.n	8002b48 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b34:	2200      	movs	r2, #0
 8002b36:	6879      	ldr	r1, [r7, #4]
 8002b38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b3c:	f001 fad9 	bl	80040f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002b40:	4a0a      	ldr	r2, [pc, #40]	; (8002b6c <HAL_InitTick+0x74>)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6013      	str	r3, [r2, #0]
 8002b46:	e007      	b.n	8002b58 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	73fb      	strb	r3, [r7, #15]
 8002b4c:	e004      	b.n	8002b58 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	73fb      	strb	r3, [r7, #15]
 8002b52:	e001      	b.n	8002b58 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002b58:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3710      	adds	r7, #16
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	2000000c 	.word	0x2000000c
 8002b68:	20000004 	.word	0x20000004
 8002b6c:	20000008 	.word	0x20000008

08002b70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b70:	b480      	push	{r7}
 8002b72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002b74:	4b06      	ldr	r3, [pc, #24]	; (8002b90 <HAL_IncTick+0x20>)
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	461a      	mov	r2, r3
 8002b7a:	4b06      	ldr	r3, [pc, #24]	; (8002b94 <HAL_IncTick+0x24>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4413      	add	r3, r2
 8002b80:	4a04      	ldr	r2, [pc, #16]	; (8002b94 <HAL_IncTick+0x24>)
 8002b82:	6013      	str	r3, [r2, #0]
}
 8002b84:	bf00      	nop
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	2000000c 	.word	0x2000000c
 8002b94:	200007e4 	.word	0x200007e4

08002b98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	af00      	add	r7, sp, #0
  return uwTick;
 8002b9c:	4b03      	ldr	r3, [pc, #12]	; (8002bac <HAL_GetTick+0x14>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	200007e4 	.word	0x200007e4

08002bb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bb8:	f7ff ffee 	bl	8002b98 <HAL_GetTick>
 8002bbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002bc8:	d005      	beq.n	8002bd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002bca:	4b0a      	ldr	r3, [pc, #40]	; (8002bf4 <HAL_Delay+0x44>)
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	461a      	mov	r2, r3
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002bd6:	bf00      	nop
 8002bd8:	f7ff ffde 	bl	8002b98 <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	68fa      	ldr	r2, [r7, #12]
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d8f7      	bhi.n	8002bd8 <HAL_Delay+0x28>
  {
  }
}
 8002be8:	bf00      	nop
 8002bea:	bf00      	nop
 8002bec:	3710      	adds	r7, #16
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	2000000c 	.word	0x2000000c

08002bf8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	431a      	orrs	r2, r3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	609a      	str	r2, [r3, #8]
}
 8002c12:	bf00      	nop
 8002c14:	370c      	adds	r7, #12
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr

08002c1e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002c1e:	b480      	push	{r7}
 8002c20:	b083      	sub	sp, #12
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
 8002c26:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	431a      	orrs	r2, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	609a      	str	r2, [r3, #8]
}
 8002c38:	bf00      	nop
 8002c3a:	370c      	adds	r7, #12
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b087      	sub	sp, #28
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	607a      	str	r2, [r7, #4]
 8002c6c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	3360      	adds	r3, #96	; 0x60
 8002c72:	461a      	mov	r2, r3
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	4413      	add	r3, r2
 8002c7a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	4b08      	ldr	r3, [pc, #32]	; (8002ca4 <LL_ADC_SetOffset+0x44>)
 8002c82:	4013      	ands	r3, r2
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002c8a:	683a      	ldr	r2, [r7, #0]
 8002c8c:	430a      	orrs	r2, r1
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002c98:	bf00      	nop
 8002c9a:	371c      	adds	r7, #28
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr
 8002ca4:	03fff000 	.word	0x03fff000

08002ca8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b085      	sub	sp, #20
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	3360      	adds	r3, #96	; 0x60
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	4413      	add	r3, r2
 8002cbe:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3714      	adds	r7, #20
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr

08002cd4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b087      	sub	sp, #28
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	60b9      	str	r1, [r7, #8]
 8002cde:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	3360      	adds	r3, #96	; 0x60
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	4413      	add	r3, r2
 8002cec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	431a      	orrs	r2, r3
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002cfe:	bf00      	nop
 8002d00:	371c      	adds	r7, #28
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr

08002d0a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002d0a:	b480      	push	{r7}
 8002d0c:	b083      	sub	sp, #12
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
 8002d12:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	695b      	ldr	r3, [r3, #20]
 8002d18:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	431a      	orrs	r2, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	615a      	str	r2, [r3, #20]
}
 8002d24:	bf00      	nop
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b087      	sub	sp, #28
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	3330      	adds	r3, #48	; 0x30
 8002d40:	461a      	mov	r2, r3
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	0a1b      	lsrs	r3, r3, #8
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	f003 030c 	and.w	r3, r3, #12
 8002d4c:	4413      	add	r3, r2
 8002d4e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	f003 031f 	and.w	r3, r3, #31
 8002d5a:	211f      	movs	r1, #31
 8002d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d60:	43db      	mvns	r3, r3
 8002d62:	401a      	ands	r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	0e9b      	lsrs	r3, r3, #26
 8002d68:	f003 011f 	and.w	r1, r3, #31
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	f003 031f 	and.w	r3, r3, #31
 8002d72:	fa01 f303 	lsl.w	r3, r1, r3
 8002d76:	431a      	orrs	r2, r3
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002d7c:	bf00      	nop
 8002d7e:	371c      	adds	r7, #28
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr

08002d88 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b087      	sub	sp, #28
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	60b9      	str	r1, [r7, #8]
 8002d92:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	3314      	adds	r3, #20
 8002d98:	461a      	mov	r2, r3
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	0e5b      	lsrs	r3, r3, #25
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	f003 0304 	and.w	r3, r3, #4
 8002da4:	4413      	add	r3, r2
 8002da6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	0d1b      	lsrs	r3, r3, #20
 8002db0:	f003 031f 	and.w	r3, r3, #31
 8002db4:	2107      	movs	r1, #7
 8002db6:	fa01 f303 	lsl.w	r3, r1, r3
 8002dba:	43db      	mvns	r3, r3
 8002dbc:	401a      	ands	r2, r3
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	0d1b      	lsrs	r3, r3, #20
 8002dc2:	f003 031f 	and.w	r3, r3, #31
 8002dc6:	6879      	ldr	r1, [r7, #4]
 8002dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002dd2:	bf00      	nop
 8002dd4:	371c      	adds	r7, #28
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
	...

08002de0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b085      	sub	sp, #20
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	60f8      	str	r0, [r7, #12]
 8002de8:	60b9      	str	r1, [r7, #8]
 8002dea:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002df8:	43db      	mvns	r3, r3
 8002dfa:	401a      	ands	r2, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f003 0318 	and.w	r3, r3, #24
 8002e02:	4908      	ldr	r1, [pc, #32]	; (8002e24 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002e04:	40d9      	lsrs	r1, r3
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	400b      	ands	r3, r1
 8002e0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e0e:	431a      	orrs	r2, r3
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002e16:	bf00      	nop
 8002e18:	3714      	adds	r7, #20
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
 8002e24:	0007ffff 	.word	0x0007ffff

08002e28 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002e38:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	6093      	str	r3, [r2, #8]
}
 8002e40:	bf00      	nop
 8002e42:	370c      	adds	r7, #12
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr

08002e4c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e60:	d101      	bne.n	8002e66 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002e62:	2301      	movs	r3, #1
 8002e64:	e000      	b.n	8002e68 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002e66:	2300      	movs	r3, #0
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	370c      	adds	r7, #12
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr

08002e74 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002e84:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002e88:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002e90:	bf00      	nop
 8002e92:	370c      	adds	r7, #12
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr

08002e9c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002eb0:	d101      	bne.n	8002eb6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e000      	b.n	8002eb8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002eb6:	2300      	movs	r3, #0
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	370c      	adds	r7, #12
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr

08002ec4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f003 0301 	and.w	r3, r3, #1
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d101      	bne.n	8002edc <LL_ADC_IsEnabled+0x18>
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e000      	b.n	8002ede <LL_ADC_IsEnabled+0x1a>
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	370c      	adds	r7, #12
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr

08002eea <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002eea:	b480      	push	{r7}
 8002eec:	b083      	sub	sp, #12
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	f003 0304 	and.w	r3, r3, #4
 8002efa:	2b04      	cmp	r3, #4
 8002efc:	d101      	bne.n	8002f02 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002efe:	2301      	movs	r3, #1
 8002f00:	e000      	b.n	8002f04 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002f02:	2300      	movs	r3, #0
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	370c      	adds	r7, #12
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr

08002f10 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	f003 0308 	and.w	r3, r3, #8
 8002f20:	2b08      	cmp	r3, #8
 8002f22:	d101      	bne.n	8002f28 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002f24:	2301      	movs	r3, #1
 8002f26:	e000      	b.n	8002f2a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002f28:	2300      	movs	r3, #0
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	370c      	adds	r7, #12
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr
	...

08002f38 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b088      	sub	sp, #32
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f40:	2300      	movs	r3, #0
 8002f42:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002f44:	2300      	movs	r3, #0
 8002f46:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d101      	bne.n	8002f52 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e12f      	b.n	80031b2 <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d109      	bne.n	8002f74 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f7fe ff15 	bl	8001d90 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f7ff ff67 	bl	8002e4c <LL_ADC_IsDeepPowerDownEnabled>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d004      	beq.n	8002f8e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7ff ff4d 	bl	8002e28 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4618      	mov	r0, r3
 8002f94:	f7ff ff82 	bl	8002e9c <LL_ADC_IsInternalRegulatorEnabled>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d115      	bne.n	8002fca <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f7ff ff66 	bl	8002e74 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002fa8:	4b84      	ldr	r3, [pc, #528]	; (80031bc <HAL_ADC_Init+0x284>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	099b      	lsrs	r3, r3, #6
 8002fae:	4a84      	ldr	r2, [pc, #528]	; (80031c0 <HAL_ADC_Init+0x288>)
 8002fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb4:	099b      	lsrs	r3, r3, #6
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	005b      	lsls	r3, r3, #1
 8002fba:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002fbc:	e002      	b.n	8002fc4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	3b01      	subs	r3, #1
 8002fc2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d1f9      	bne.n	8002fbe <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7ff ff64 	bl	8002e9c <LL_ADC_IsInternalRegulatorEnabled>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d10d      	bne.n	8002ff6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fde:	f043 0210 	orr.w	r2, r3, #16
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fea:	f043 0201 	orr.w	r2, r3, #1
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7ff ff75 	bl	8002eea <LL_ADC_REG_IsConversionOngoing>
 8003000:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003006:	f003 0310 	and.w	r3, r3, #16
 800300a:	2b00      	cmp	r3, #0
 800300c:	f040 80c8 	bne.w	80031a0 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	2b00      	cmp	r3, #0
 8003014:	f040 80c4 	bne.w	80031a0 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800301c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003020:	f043 0202 	orr.w	r2, r3, #2
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4618      	mov	r0, r3
 800302e:	f7ff ff49 	bl	8002ec4 <LL_ADC_IsEnabled>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d10b      	bne.n	8003050 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003038:	4862      	ldr	r0, [pc, #392]	; (80031c4 <HAL_ADC_Init+0x28c>)
 800303a:	f7ff ff43 	bl	8002ec4 <LL_ADC_IsEnabled>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d105      	bne.n	8003050 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	4619      	mov	r1, r3
 800304a:	485f      	ldr	r0, [pc, #380]	; (80031c8 <HAL_ADC_Init+0x290>)
 800304c:	f7ff fdd4 	bl	8002bf8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	7e5b      	ldrb	r3, [r3, #25]
 8003054:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800305a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003060:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003066:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800306e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003070:	4313      	orrs	r3, r2
 8003072:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f893 3020 	ldrb.w	r3, [r3, #32]
 800307a:	2b01      	cmp	r3, #1
 800307c:	d106      	bne.n	800308c <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003082:	3b01      	subs	r3, #1
 8003084:	045b      	lsls	r3, r3, #17
 8003086:	69ba      	ldr	r2, [r7, #24]
 8003088:	4313      	orrs	r3, r2
 800308a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003090:	2b00      	cmp	r3, #0
 8003092:	d009      	beq.n	80030a8 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003098:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80030a2:	69ba      	ldr	r2, [r7, #24]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	68da      	ldr	r2, [r3, #12]
 80030ae:	4b47      	ldr	r3, [pc, #284]	; (80031cc <HAL_ADC_Init+0x294>)
 80030b0:	4013      	ands	r3, r2
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	6812      	ldr	r2, [r2, #0]
 80030b6:	69b9      	ldr	r1, [r7, #24]
 80030b8:	430b      	orrs	r3, r1
 80030ba:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4618      	mov	r0, r3
 80030c2:	f7ff ff12 	bl	8002eea <LL_ADC_REG_IsConversionOngoing>
 80030c6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4618      	mov	r0, r3
 80030ce:	f7ff ff1f 	bl	8002f10 <LL_ADC_INJ_IsConversionOngoing>
 80030d2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d140      	bne.n	800315c <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d13d      	bne.n	800315c <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	7e1b      	ldrb	r3, [r3, #24]
 80030e8:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80030ea:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80030f2:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80030f4:	4313      	orrs	r3, r2
 80030f6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003102:	f023 0306 	bic.w	r3, r3, #6
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	6812      	ldr	r2, [r2, #0]
 800310a:	69b9      	ldr	r1, [r7, #24]
 800310c:	430b      	orrs	r3, r1
 800310e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003116:	2b01      	cmp	r3, #1
 8003118:	d118      	bne.n	800314c <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	691b      	ldr	r3, [r3, #16]
 8003120:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003124:	f023 0304 	bic.w	r3, r3, #4
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003130:	4311      	orrs	r1, r2
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003136:	4311      	orrs	r1, r2
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800313c:	430a      	orrs	r2, r1
 800313e:	431a      	orrs	r2, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f042 0201 	orr.w	r2, r2, #1
 8003148:	611a      	str	r2, [r3, #16]
 800314a:	e007      	b.n	800315c <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	691a      	ldr	r2, [r3, #16]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f022 0201 	bic.w	r2, r2, #1
 800315a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	691b      	ldr	r3, [r3, #16]
 8003160:	2b01      	cmp	r3, #1
 8003162:	d10c      	bne.n	800317e <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316a:	f023 010f 	bic.w	r1, r3, #15
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	69db      	ldr	r3, [r3, #28]
 8003172:	1e5a      	subs	r2, r3, #1
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	430a      	orrs	r2, r1
 800317a:	631a      	str	r2, [r3, #48]	; 0x30
 800317c:	e007      	b.n	800318e <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f022 020f 	bic.w	r2, r2, #15
 800318c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003192:	f023 0303 	bic.w	r3, r3, #3
 8003196:	f043 0201 	orr.w	r2, r3, #1
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	659a      	str	r2, [r3, #88]	; 0x58
 800319e:	e007      	b.n	80031b0 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031a4:	f043 0210 	orr.w	r2, r3, #16
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80031b0:	7ffb      	ldrb	r3, [r7, #31]
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3720      	adds	r7, #32
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	20000004 	.word	0x20000004
 80031c0:	053e2d63 	.word	0x053e2d63
 80031c4:	50040000 	.word	0x50040000
 80031c8:	50040300 	.word	0x50040300
 80031cc:	fff0c007 	.word	0xfff0c007

080031d0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b0b6      	sub	sp, #216	; 0xd8
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031da:	2300      	movs	r3, #0
 80031dc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80031e0:	2300      	movs	r3, #0
 80031e2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d101      	bne.n	80031f2 <HAL_ADC_ConfigChannel+0x22>
 80031ee:	2302      	movs	r3, #2
 80031f0:	e3d5      	b.n	800399e <HAL_ADC_ConfigChannel+0x7ce>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2201      	movs	r2, #1
 80031f6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4618      	mov	r0, r3
 8003200:	f7ff fe73 	bl	8002eea <LL_ADC_REG_IsConversionOngoing>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	f040 83ba 	bne.w	8003980 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	2b05      	cmp	r3, #5
 8003212:	d824      	bhi.n	800325e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	3b02      	subs	r3, #2
 800321a:	2b03      	cmp	r3, #3
 800321c:	d81b      	bhi.n	8003256 <HAL_ADC_ConfigChannel+0x86>
 800321e:	a201      	add	r2, pc, #4	; (adr r2, 8003224 <HAL_ADC_ConfigChannel+0x54>)
 8003220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003224:	08003235 	.word	0x08003235
 8003228:	0800323d 	.word	0x0800323d
 800322c:	08003245 	.word	0x08003245
 8003230:	0800324d 	.word	0x0800324d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	220c      	movs	r2, #12
 8003238:	605a      	str	r2, [r3, #4]
          break;
 800323a:	e011      	b.n	8003260 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	2212      	movs	r2, #18
 8003240:	605a      	str	r2, [r3, #4]
          break;
 8003242:	e00d      	b.n	8003260 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	2218      	movs	r2, #24
 8003248:	605a      	str	r2, [r3, #4]
          break;
 800324a:	e009      	b.n	8003260 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003252:	605a      	str	r2, [r3, #4]
          break;
 8003254:	e004      	b.n	8003260 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	2206      	movs	r2, #6
 800325a:	605a      	str	r2, [r3, #4]
          break;
 800325c:	e000      	b.n	8003260 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800325e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6818      	ldr	r0, [r3, #0]
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	6859      	ldr	r1, [r3, #4]
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	461a      	mov	r2, r3
 800326e:	f7ff fd5f 	bl	8002d30 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4618      	mov	r0, r3
 8003278:	f7ff fe37 	bl	8002eea <LL_ADC_REG_IsConversionOngoing>
 800327c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4618      	mov	r0, r3
 8003286:	f7ff fe43 	bl	8002f10 <LL_ADC_INJ_IsConversionOngoing>
 800328a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800328e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003292:	2b00      	cmp	r3, #0
 8003294:	f040 81c1 	bne.w	800361a <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003298:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800329c:	2b00      	cmp	r3, #0
 800329e:	f040 81bc 	bne.w	800361a <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80032aa:	d10f      	bne.n	80032cc <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6818      	ldr	r0, [r3, #0]
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	2200      	movs	r2, #0
 80032b6:	4619      	mov	r1, r3
 80032b8:	f7ff fd66 	bl	8002d88 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7ff fd20 	bl	8002d0a <LL_ADC_SetSamplingTimeCommonConfig>
 80032ca:	e00e      	b.n	80032ea <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6818      	ldr	r0, [r3, #0]
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	6819      	ldr	r1, [r3, #0]
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	461a      	mov	r2, r3
 80032da:	f7ff fd55 	bl	8002d88 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	2100      	movs	r1, #0
 80032e4:	4618      	mov	r0, r3
 80032e6:	f7ff fd10 	bl	8002d0a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	695a      	ldr	r2, [r3, #20]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	08db      	lsrs	r3, r3, #3
 80032f6:	f003 0303 	and.w	r3, r3, #3
 80032fa:	005b      	lsls	r3, r3, #1
 80032fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003300:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	691b      	ldr	r3, [r3, #16]
 8003308:	2b04      	cmp	r3, #4
 800330a:	d00a      	beq.n	8003322 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6818      	ldr	r0, [r3, #0]
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	6919      	ldr	r1, [r3, #16]
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800331c:	f7ff fca0 	bl	8002c60 <LL_ADC_SetOffset>
 8003320:	e17b      	b.n	800361a <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2100      	movs	r1, #0
 8003328:	4618      	mov	r0, r3
 800332a:	f7ff fcbd 	bl	8002ca8 <LL_ADC_GetOffsetChannel>
 800332e:	4603      	mov	r3, r0
 8003330:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003334:	2b00      	cmp	r3, #0
 8003336:	d10a      	bne.n	800334e <HAL_ADC_ConfigChannel+0x17e>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	2100      	movs	r1, #0
 800333e:	4618      	mov	r0, r3
 8003340:	f7ff fcb2 	bl	8002ca8 <LL_ADC_GetOffsetChannel>
 8003344:	4603      	mov	r3, r0
 8003346:	0e9b      	lsrs	r3, r3, #26
 8003348:	f003 021f 	and.w	r2, r3, #31
 800334c:	e01e      	b.n	800338c <HAL_ADC_ConfigChannel+0x1bc>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	2100      	movs	r1, #0
 8003354:	4618      	mov	r0, r3
 8003356:	f7ff fca7 	bl	8002ca8 <LL_ADC_GetOffsetChannel>
 800335a:	4603      	mov	r3, r0
 800335c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003360:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003364:	fa93 f3a3 	rbit	r3, r3
 8003368:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800336c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003370:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003374:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d101      	bne.n	8003380 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 800337c:	2320      	movs	r3, #32
 800337e:	e004      	b.n	800338a <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8003380:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003384:	fab3 f383 	clz	r3, r3
 8003388:	b2db      	uxtb	r3, r3
 800338a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003394:	2b00      	cmp	r3, #0
 8003396:	d105      	bne.n	80033a4 <HAL_ADC_ConfigChannel+0x1d4>
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	0e9b      	lsrs	r3, r3, #26
 800339e:	f003 031f 	and.w	r3, r3, #31
 80033a2:	e018      	b.n	80033d6 <HAL_ADC_ConfigChannel+0x206>
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80033b0:	fa93 f3a3 	rbit	r3, r3
 80033b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80033b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80033bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80033c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d101      	bne.n	80033cc <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 80033c8:	2320      	movs	r3, #32
 80033ca:	e004      	b.n	80033d6 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 80033cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80033d0:	fab3 f383 	clz	r3, r3
 80033d4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d106      	bne.n	80033e8 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	2200      	movs	r2, #0
 80033e0:	2100      	movs	r1, #0
 80033e2:	4618      	mov	r0, r3
 80033e4:	f7ff fc76 	bl	8002cd4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	2101      	movs	r1, #1
 80033ee:	4618      	mov	r0, r3
 80033f0:	f7ff fc5a 	bl	8002ca8 <LL_ADC_GetOffsetChannel>
 80033f4:	4603      	mov	r3, r0
 80033f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d10a      	bne.n	8003414 <HAL_ADC_ConfigChannel+0x244>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	2101      	movs	r1, #1
 8003404:	4618      	mov	r0, r3
 8003406:	f7ff fc4f 	bl	8002ca8 <LL_ADC_GetOffsetChannel>
 800340a:	4603      	mov	r3, r0
 800340c:	0e9b      	lsrs	r3, r3, #26
 800340e:	f003 021f 	and.w	r2, r3, #31
 8003412:	e01e      	b.n	8003452 <HAL_ADC_ConfigChannel+0x282>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2101      	movs	r1, #1
 800341a:	4618      	mov	r0, r3
 800341c:	f7ff fc44 	bl	8002ca8 <LL_ADC_GetOffsetChannel>
 8003420:	4603      	mov	r3, r0
 8003422:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003426:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800342a:	fa93 f3a3 	rbit	r3, r3
 800342e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003432:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003436:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800343a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800343e:	2b00      	cmp	r3, #0
 8003440:	d101      	bne.n	8003446 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8003442:	2320      	movs	r3, #32
 8003444:	e004      	b.n	8003450 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8003446:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800344a:	fab3 f383 	clz	r3, r3
 800344e:	b2db      	uxtb	r3, r3
 8003450:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800345a:	2b00      	cmp	r3, #0
 800345c:	d105      	bne.n	800346a <HAL_ADC_ConfigChannel+0x29a>
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	0e9b      	lsrs	r3, r3, #26
 8003464:	f003 031f 	and.w	r3, r3, #31
 8003468:	e018      	b.n	800349c <HAL_ADC_ConfigChannel+0x2cc>
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003472:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003476:	fa93 f3a3 	rbit	r3, r3
 800347a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800347e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003482:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003486:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800348a:	2b00      	cmp	r3, #0
 800348c:	d101      	bne.n	8003492 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 800348e:	2320      	movs	r3, #32
 8003490:	e004      	b.n	800349c <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8003492:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003496:	fab3 f383 	clz	r3, r3
 800349a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800349c:	429a      	cmp	r2, r3
 800349e:	d106      	bne.n	80034ae <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2200      	movs	r2, #0
 80034a6:	2101      	movs	r1, #1
 80034a8:	4618      	mov	r0, r3
 80034aa:	f7ff fc13 	bl	8002cd4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2102      	movs	r1, #2
 80034b4:	4618      	mov	r0, r3
 80034b6:	f7ff fbf7 	bl	8002ca8 <LL_ADC_GetOffsetChannel>
 80034ba:	4603      	mov	r3, r0
 80034bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d10a      	bne.n	80034da <HAL_ADC_ConfigChannel+0x30a>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2102      	movs	r1, #2
 80034ca:	4618      	mov	r0, r3
 80034cc:	f7ff fbec 	bl	8002ca8 <LL_ADC_GetOffsetChannel>
 80034d0:	4603      	mov	r3, r0
 80034d2:	0e9b      	lsrs	r3, r3, #26
 80034d4:	f003 021f 	and.w	r2, r3, #31
 80034d8:	e01e      	b.n	8003518 <HAL_ADC_ConfigChannel+0x348>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	2102      	movs	r1, #2
 80034e0:	4618      	mov	r0, r3
 80034e2:	f7ff fbe1 	bl	8002ca8 <LL_ADC_GetOffsetChannel>
 80034e6:	4603      	mov	r3, r0
 80034e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80034f0:	fa93 f3a3 	rbit	r3, r3
 80034f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80034f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80034fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003500:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003504:	2b00      	cmp	r3, #0
 8003506:	d101      	bne.n	800350c <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8003508:	2320      	movs	r3, #32
 800350a:	e004      	b.n	8003516 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 800350c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003510:	fab3 f383 	clz	r3, r3
 8003514:	b2db      	uxtb	r3, r3
 8003516:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003520:	2b00      	cmp	r3, #0
 8003522:	d105      	bne.n	8003530 <HAL_ADC_ConfigChannel+0x360>
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	0e9b      	lsrs	r3, r3, #26
 800352a:	f003 031f 	and.w	r3, r3, #31
 800352e:	e016      	b.n	800355e <HAL_ADC_ConfigChannel+0x38e>
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003538:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800353c:	fa93 f3a3 	rbit	r3, r3
 8003540:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003542:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003544:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003548:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800354c:	2b00      	cmp	r3, #0
 800354e:	d101      	bne.n	8003554 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8003550:	2320      	movs	r3, #32
 8003552:	e004      	b.n	800355e <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8003554:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003558:	fab3 f383 	clz	r3, r3
 800355c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800355e:	429a      	cmp	r2, r3
 8003560:	d106      	bne.n	8003570 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	2200      	movs	r2, #0
 8003568:	2102      	movs	r1, #2
 800356a:	4618      	mov	r0, r3
 800356c:	f7ff fbb2 	bl	8002cd4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2103      	movs	r1, #3
 8003576:	4618      	mov	r0, r3
 8003578:	f7ff fb96 	bl	8002ca8 <LL_ADC_GetOffsetChannel>
 800357c:	4603      	mov	r3, r0
 800357e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003582:	2b00      	cmp	r3, #0
 8003584:	d10a      	bne.n	800359c <HAL_ADC_ConfigChannel+0x3cc>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	2103      	movs	r1, #3
 800358c:	4618      	mov	r0, r3
 800358e:	f7ff fb8b 	bl	8002ca8 <LL_ADC_GetOffsetChannel>
 8003592:	4603      	mov	r3, r0
 8003594:	0e9b      	lsrs	r3, r3, #26
 8003596:	f003 021f 	and.w	r2, r3, #31
 800359a:	e017      	b.n	80035cc <HAL_ADC_ConfigChannel+0x3fc>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	2103      	movs	r1, #3
 80035a2:	4618      	mov	r0, r3
 80035a4:	f7ff fb80 	bl	8002ca8 <LL_ADC_GetOffsetChannel>
 80035a8:	4603      	mov	r3, r0
 80035aa:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035ae:	fa93 f3a3 	rbit	r3, r3
 80035b2:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80035b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80035b6:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80035b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d101      	bne.n	80035c2 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 80035be:	2320      	movs	r3, #32
 80035c0:	e003      	b.n	80035ca <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 80035c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035c4:	fab3 f383 	clz	r3, r3
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d105      	bne.n	80035e4 <HAL_ADC_ConfigChannel+0x414>
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	0e9b      	lsrs	r3, r3, #26
 80035de:	f003 031f 	and.w	r3, r3, #31
 80035e2:	e011      	b.n	8003608 <HAL_ADC_ConfigChannel+0x438>
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80035ec:	fa93 f3a3 	rbit	r3, r3
 80035f0:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80035f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80035f4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80035f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d101      	bne.n	8003600 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 80035fc:	2320      	movs	r3, #32
 80035fe:	e003      	b.n	8003608 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8003600:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003602:	fab3 f383 	clz	r3, r3
 8003606:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003608:	429a      	cmp	r2, r3
 800360a:	d106      	bne.n	800361a <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2200      	movs	r2, #0
 8003612:	2103      	movs	r1, #3
 8003614:	4618      	mov	r0, r3
 8003616:	f7ff fb5d 	bl	8002cd4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4618      	mov	r0, r3
 8003620:	f7ff fc50 	bl	8002ec4 <LL_ADC_IsEnabled>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	f040 8140 	bne.w	80038ac <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6818      	ldr	r0, [r3, #0]
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	6819      	ldr	r1, [r3, #0]
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	461a      	mov	r2, r3
 800363a:	f7ff fbd1 	bl	8002de0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	4a8f      	ldr	r2, [pc, #572]	; (8003880 <HAL_ADC_ConfigChannel+0x6b0>)
 8003644:	4293      	cmp	r3, r2
 8003646:	f040 8131 	bne.w	80038ac <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003656:	2b00      	cmp	r3, #0
 8003658:	d10b      	bne.n	8003672 <HAL_ADC_ConfigChannel+0x4a2>
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	0e9b      	lsrs	r3, r3, #26
 8003660:	3301      	adds	r3, #1
 8003662:	f003 031f 	and.w	r3, r3, #31
 8003666:	2b09      	cmp	r3, #9
 8003668:	bf94      	ite	ls
 800366a:	2301      	movls	r3, #1
 800366c:	2300      	movhi	r3, #0
 800366e:	b2db      	uxtb	r3, r3
 8003670:	e019      	b.n	80036a6 <HAL_ADC_ConfigChannel+0x4d6>
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003678:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800367a:	fa93 f3a3 	rbit	r3, r3
 800367e:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003680:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003682:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003684:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003686:	2b00      	cmp	r3, #0
 8003688:	d101      	bne.n	800368e <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 800368a:	2320      	movs	r3, #32
 800368c:	e003      	b.n	8003696 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 800368e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003690:	fab3 f383 	clz	r3, r3
 8003694:	b2db      	uxtb	r3, r3
 8003696:	3301      	adds	r3, #1
 8003698:	f003 031f 	and.w	r3, r3, #31
 800369c:	2b09      	cmp	r3, #9
 800369e:	bf94      	ite	ls
 80036a0:	2301      	movls	r3, #1
 80036a2:	2300      	movhi	r3, #0
 80036a4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d079      	beq.n	800379e <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d107      	bne.n	80036c6 <HAL_ADC_ConfigChannel+0x4f6>
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	0e9b      	lsrs	r3, r3, #26
 80036bc:	3301      	adds	r3, #1
 80036be:	069b      	lsls	r3, r3, #26
 80036c0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036c4:	e015      	b.n	80036f2 <HAL_ADC_ConfigChannel+0x522>
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036ce:	fa93 f3a3 	rbit	r3, r3
 80036d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80036d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036d6:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80036d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d101      	bne.n	80036e2 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 80036de:	2320      	movs	r3, #32
 80036e0:	e003      	b.n	80036ea <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 80036e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036e4:	fab3 f383 	clz	r3, r3
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	3301      	adds	r3, #1
 80036ec:	069b      	lsls	r3, r3, #26
 80036ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d109      	bne.n	8003712 <HAL_ADC_ConfigChannel+0x542>
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	0e9b      	lsrs	r3, r3, #26
 8003704:	3301      	adds	r3, #1
 8003706:	f003 031f 	and.w	r3, r3, #31
 800370a:	2101      	movs	r1, #1
 800370c:	fa01 f303 	lsl.w	r3, r1, r3
 8003710:	e017      	b.n	8003742 <HAL_ADC_ConfigChannel+0x572>
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003718:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800371a:	fa93 f3a3 	rbit	r3, r3
 800371e:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003720:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003722:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003724:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003726:	2b00      	cmp	r3, #0
 8003728:	d101      	bne.n	800372e <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 800372a:	2320      	movs	r3, #32
 800372c:	e003      	b.n	8003736 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 800372e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003730:	fab3 f383 	clz	r3, r3
 8003734:	b2db      	uxtb	r3, r3
 8003736:	3301      	adds	r3, #1
 8003738:	f003 031f 	and.w	r3, r3, #31
 800373c:	2101      	movs	r1, #1
 800373e:	fa01 f303 	lsl.w	r3, r1, r3
 8003742:	ea42 0103 	orr.w	r1, r2, r3
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800374e:	2b00      	cmp	r3, #0
 8003750:	d10a      	bne.n	8003768 <HAL_ADC_ConfigChannel+0x598>
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	0e9b      	lsrs	r3, r3, #26
 8003758:	3301      	adds	r3, #1
 800375a:	f003 021f 	and.w	r2, r3, #31
 800375e:	4613      	mov	r3, r2
 8003760:	005b      	lsls	r3, r3, #1
 8003762:	4413      	add	r3, r2
 8003764:	051b      	lsls	r3, r3, #20
 8003766:	e018      	b.n	800379a <HAL_ADC_ConfigChannel+0x5ca>
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800376e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003770:	fa93 f3a3 	rbit	r3, r3
 8003774:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003778:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800377a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800377c:	2b00      	cmp	r3, #0
 800377e:	d101      	bne.n	8003784 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8003780:	2320      	movs	r3, #32
 8003782:	e003      	b.n	800378c <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8003784:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003786:	fab3 f383 	clz	r3, r3
 800378a:	b2db      	uxtb	r3, r3
 800378c:	3301      	adds	r3, #1
 800378e:	f003 021f 	and.w	r2, r3, #31
 8003792:	4613      	mov	r3, r2
 8003794:	005b      	lsls	r3, r3, #1
 8003796:	4413      	add	r3, r2
 8003798:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800379a:	430b      	orrs	r3, r1
 800379c:	e081      	b.n	80038a2 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d107      	bne.n	80037ba <HAL_ADC_ConfigChannel+0x5ea>
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	0e9b      	lsrs	r3, r3, #26
 80037b0:	3301      	adds	r3, #1
 80037b2:	069b      	lsls	r3, r3, #26
 80037b4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80037b8:	e015      	b.n	80037e6 <HAL_ADC_ConfigChannel+0x616>
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037c2:	fa93 f3a3 	rbit	r3, r3
 80037c6:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80037c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ca:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80037cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d101      	bne.n	80037d6 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 80037d2:	2320      	movs	r3, #32
 80037d4:	e003      	b.n	80037de <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 80037d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d8:	fab3 f383 	clz	r3, r3
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	3301      	adds	r3, #1
 80037e0:	069b      	lsls	r3, r3, #26
 80037e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d109      	bne.n	8003806 <HAL_ADC_ConfigChannel+0x636>
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	0e9b      	lsrs	r3, r3, #26
 80037f8:	3301      	adds	r3, #1
 80037fa:	f003 031f 	and.w	r3, r3, #31
 80037fe:	2101      	movs	r1, #1
 8003800:	fa01 f303 	lsl.w	r3, r1, r3
 8003804:	e017      	b.n	8003836 <HAL_ADC_ConfigChannel+0x666>
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800380c:	6a3b      	ldr	r3, [r7, #32]
 800380e:	fa93 f3a3 	rbit	r3, r3
 8003812:	61fb      	str	r3, [r7, #28]
  return result;
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381a:	2b00      	cmp	r3, #0
 800381c:	d101      	bne.n	8003822 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 800381e:	2320      	movs	r3, #32
 8003820:	e003      	b.n	800382a <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8003822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003824:	fab3 f383 	clz	r3, r3
 8003828:	b2db      	uxtb	r3, r3
 800382a:	3301      	adds	r3, #1
 800382c:	f003 031f 	and.w	r3, r3, #31
 8003830:	2101      	movs	r1, #1
 8003832:	fa01 f303 	lsl.w	r3, r1, r3
 8003836:	ea42 0103 	orr.w	r1, r2, r3
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003842:	2b00      	cmp	r3, #0
 8003844:	d10d      	bne.n	8003862 <HAL_ADC_ConfigChannel+0x692>
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	0e9b      	lsrs	r3, r3, #26
 800384c:	3301      	adds	r3, #1
 800384e:	f003 021f 	and.w	r2, r3, #31
 8003852:	4613      	mov	r3, r2
 8003854:	005b      	lsls	r3, r3, #1
 8003856:	4413      	add	r3, r2
 8003858:	3b1e      	subs	r3, #30
 800385a:	051b      	lsls	r3, r3, #20
 800385c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003860:	e01e      	b.n	80038a0 <HAL_ADC_ConfigChannel+0x6d0>
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	fa93 f3a3 	rbit	r3, r3
 800386e:	613b      	str	r3, [r7, #16]
  return result;
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003874:	69bb      	ldr	r3, [r7, #24]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d104      	bne.n	8003884 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 800387a:	2320      	movs	r3, #32
 800387c:	e006      	b.n	800388c <HAL_ADC_ConfigChannel+0x6bc>
 800387e:	bf00      	nop
 8003880:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	fab3 f383 	clz	r3, r3
 800388a:	b2db      	uxtb	r3, r3
 800388c:	3301      	adds	r3, #1
 800388e:	f003 021f 	and.w	r2, r3, #31
 8003892:	4613      	mov	r3, r2
 8003894:	005b      	lsls	r3, r3, #1
 8003896:	4413      	add	r3, r2
 8003898:	3b1e      	subs	r3, #30
 800389a:	051b      	lsls	r3, r3, #20
 800389c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038a0:	430b      	orrs	r3, r1
 80038a2:	683a      	ldr	r2, [r7, #0]
 80038a4:	6892      	ldr	r2, [r2, #8]
 80038a6:	4619      	mov	r1, r3
 80038a8:	f7ff fa6e 	bl	8002d88 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	4b3d      	ldr	r3, [pc, #244]	; (80039a8 <HAL_ADC_ConfigChannel+0x7d8>)
 80038b2:	4013      	ands	r3, r2
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d06c      	beq.n	8003992 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80038b8:	483c      	ldr	r0, [pc, #240]	; (80039ac <HAL_ADC_ConfigChannel+0x7dc>)
 80038ba:	f7ff f9c3 	bl	8002c44 <LL_ADC_GetCommonPathInternalCh>
 80038be:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a3a      	ldr	r2, [pc, #232]	; (80039b0 <HAL_ADC_ConfigChannel+0x7e0>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d127      	bne.n	800391c <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80038cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80038d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d121      	bne.n	800391c <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a35      	ldr	r2, [pc, #212]	; (80039b4 <HAL_ADC_ConfigChannel+0x7e4>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d157      	bne.n	8003992 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80038e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80038e6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80038ea:	4619      	mov	r1, r3
 80038ec:	482f      	ldr	r0, [pc, #188]	; (80039ac <HAL_ADC_ConfigChannel+0x7dc>)
 80038ee:	f7ff f996 	bl	8002c1e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80038f2:	4b31      	ldr	r3, [pc, #196]	; (80039b8 <HAL_ADC_ConfigChannel+0x7e8>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	099b      	lsrs	r3, r3, #6
 80038f8:	4a30      	ldr	r2, [pc, #192]	; (80039bc <HAL_ADC_ConfigChannel+0x7ec>)
 80038fa:	fba2 2303 	umull	r2, r3, r2, r3
 80038fe:	099b      	lsrs	r3, r3, #6
 8003900:	1c5a      	adds	r2, r3, #1
 8003902:	4613      	mov	r3, r2
 8003904:	005b      	lsls	r3, r3, #1
 8003906:	4413      	add	r3, r2
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800390c:	e002      	b.n	8003914 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	3b01      	subs	r3, #1
 8003912:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d1f9      	bne.n	800390e <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800391a:	e03a      	b.n	8003992 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a27      	ldr	r2, [pc, #156]	; (80039c0 <HAL_ADC_ConfigChannel+0x7f0>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d113      	bne.n	800394e <HAL_ADC_ConfigChannel+0x77e>
 8003926:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800392a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d10d      	bne.n	800394e <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a1f      	ldr	r2, [pc, #124]	; (80039b4 <HAL_ADC_ConfigChannel+0x7e4>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d12a      	bne.n	8003992 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800393c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003940:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003944:	4619      	mov	r1, r3
 8003946:	4819      	ldr	r0, [pc, #100]	; (80039ac <HAL_ADC_ConfigChannel+0x7dc>)
 8003948:	f7ff f969 	bl	8002c1e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800394c:	e021      	b.n	8003992 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a1c      	ldr	r2, [pc, #112]	; (80039c4 <HAL_ADC_ConfigChannel+0x7f4>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d11c      	bne.n	8003992 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003958:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800395c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d116      	bne.n	8003992 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a12      	ldr	r2, [pc, #72]	; (80039b4 <HAL_ADC_ConfigChannel+0x7e4>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d111      	bne.n	8003992 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800396e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003972:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003976:	4619      	mov	r1, r3
 8003978:	480c      	ldr	r0, [pc, #48]	; (80039ac <HAL_ADC_ConfigChannel+0x7dc>)
 800397a:	f7ff f950 	bl	8002c1e <LL_ADC_SetCommonPathInternalCh>
 800397e:	e008      	b.n	8003992 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003984:	f043 0220 	orr.w	r2, r3, #32
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800399a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800399e:	4618      	mov	r0, r3
 80039a0:	37d8      	adds	r7, #216	; 0xd8
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	80080000 	.word	0x80080000
 80039ac:	50040300 	.word	0x50040300
 80039b0:	c7520000 	.word	0xc7520000
 80039b4:	50040000 	.word	0x50040000
 80039b8:	20000004 	.word	0x20000004
 80039bc:	053e2d63 	.word	0x053e2d63
 80039c0:	cb840000 	.word	0xcb840000
 80039c4:	80000001 	.word	0x80000001

080039c8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d101      	bne.n	80039da <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e0ed      	b.n	8003bb6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d102      	bne.n	80039ec <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f7fe fa44 	bl	8001e74 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f042 0201 	orr.w	r2, r2, #1
 80039fa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80039fc:	f7ff f8cc 	bl	8002b98 <HAL_GetTick>
 8003a00:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003a02:	e012      	b.n	8003a2a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003a04:	f7ff f8c8 	bl	8002b98 <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	2b0a      	cmp	r3, #10
 8003a10:	d90b      	bls.n	8003a2a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a16:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2205      	movs	r2, #5
 8003a22:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e0c5      	b.n	8003bb6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	f003 0301 	and.w	r3, r3, #1
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d0e5      	beq.n	8003a04 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f022 0202 	bic.w	r2, r2, #2
 8003a46:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a48:	f7ff f8a6 	bl	8002b98 <HAL_GetTick>
 8003a4c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003a4e:	e012      	b.n	8003a76 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003a50:	f7ff f8a2 	bl	8002b98 <HAL_GetTick>
 8003a54:	4602      	mov	r2, r0
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	2b0a      	cmp	r3, #10
 8003a5c:	d90b      	bls.n	8003a76 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a62:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2205      	movs	r2, #5
 8003a6e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e09f      	b.n	8003bb6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f003 0302 	and.w	r3, r3, #2
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d1e5      	bne.n	8003a50 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	7e1b      	ldrb	r3, [r3, #24]
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d108      	bne.n	8003a9e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003a9a:	601a      	str	r2, [r3, #0]
 8003a9c:	e007      	b.n	8003aae <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003aac:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	7e5b      	ldrb	r3, [r3, #25]
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d108      	bne.n	8003ac8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ac4:	601a      	str	r2, [r3, #0]
 8003ac6:	e007      	b.n	8003ad8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ad6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	7e9b      	ldrb	r3, [r3, #26]
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d108      	bne.n	8003af2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f042 0220 	orr.w	r2, r2, #32
 8003aee:	601a      	str	r2, [r3, #0]
 8003af0:	e007      	b.n	8003b02 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f022 0220 	bic.w	r2, r2, #32
 8003b00:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	7edb      	ldrb	r3, [r3, #27]
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d108      	bne.n	8003b1c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f022 0210 	bic.w	r2, r2, #16
 8003b18:	601a      	str	r2, [r3, #0]
 8003b1a:	e007      	b.n	8003b2c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f042 0210 	orr.w	r2, r2, #16
 8003b2a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	7f1b      	ldrb	r3, [r3, #28]
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d108      	bne.n	8003b46 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f042 0208 	orr.w	r2, r2, #8
 8003b42:	601a      	str	r2, [r3, #0]
 8003b44:	e007      	b.n	8003b56 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f022 0208 	bic.w	r2, r2, #8
 8003b54:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	7f5b      	ldrb	r3, [r3, #29]
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d108      	bne.n	8003b70 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f042 0204 	orr.w	r2, r2, #4
 8003b6c:	601a      	str	r2, [r3, #0]
 8003b6e:	e007      	b.n	8003b80 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f022 0204 	bic.w	r2, r2, #4
 8003b7e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	689a      	ldr	r2, [r3, #8]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	431a      	orrs	r2, r3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	691b      	ldr	r3, [r3, #16]
 8003b8e:	431a      	orrs	r2, r3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	695b      	ldr	r3, [r3, #20]
 8003b94:	ea42 0103 	orr.w	r1, r2, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	1e5a      	subs	r2, r3, #1
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	430a      	orrs	r2, r1
 8003ba4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003bb4:	2300      	movs	r3, #0
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3710      	adds	r7, #16
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
	...

08003bc0 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8003bc8:	4b05      	ldr	r3, [pc, #20]	; (8003be0 <LL_EXTI_EnableIT_0_31+0x20>)
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	4904      	ldr	r1, [pc, #16]	; (8003be0 <LL_EXTI_EnableIT_0_31+0x20>)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	600b      	str	r3, [r1, #0]
}
 8003bd4:	bf00      	nop
 8003bd6:	370c      	adds	r7, #12
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr
 8003be0:	40010400 	.word	0x40010400

08003be4 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8003bec:	4b06      	ldr	r3, [pc, #24]	; (8003c08 <LL_EXTI_DisableIT_0_31+0x24>)
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	43db      	mvns	r3, r3
 8003bf4:	4904      	ldr	r1, [pc, #16]	; (8003c08 <LL_EXTI_DisableIT_0_31+0x24>)
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	600b      	str	r3, [r1, #0]
}
 8003bfa:	bf00      	nop
 8003bfc:	370c      	adds	r7, #12
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr
 8003c06:	bf00      	nop
 8003c08:	40010400 	.word	0x40010400

08003c0c <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8003c14:	4b05      	ldr	r3, [pc, #20]	; (8003c2c <LL_EXTI_EnableEvent_0_31+0x20>)
 8003c16:	685a      	ldr	r2, [r3, #4]
 8003c18:	4904      	ldr	r1, [pc, #16]	; (8003c2c <LL_EXTI_EnableEvent_0_31+0x20>)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	604b      	str	r3, [r1, #4]

}
 8003c20:	bf00      	nop
 8003c22:	370c      	adds	r7, #12
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr
 8003c2c:	40010400 	.word	0x40010400

08003c30 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b083      	sub	sp, #12
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8003c38:	4b06      	ldr	r3, [pc, #24]	; (8003c54 <LL_EXTI_DisableEvent_0_31+0x24>)
 8003c3a:	685a      	ldr	r2, [r3, #4]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	43db      	mvns	r3, r3
 8003c40:	4904      	ldr	r1, [pc, #16]	; (8003c54 <LL_EXTI_DisableEvent_0_31+0x24>)
 8003c42:	4013      	ands	r3, r2
 8003c44:	604b      	str	r3, [r1, #4]
}
 8003c46:	bf00      	nop
 8003c48:	370c      	adds	r7, #12
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr
 8003c52:	bf00      	nop
 8003c54:	40010400 	.word	0x40010400

08003c58 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8003c60:	4b05      	ldr	r3, [pc, #20]	; (8003c78 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8003c62:	689a      	ldr	r2, [r3, #8]
 8003c64:	4904      	ldr	r1, [pc, #16]	; (8003c78 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	608b      	str	r3, [r1, #8]

}
 8003c6c:	bf00      	nop
 8003c6e:	370c      	adds	r7, #12
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr
 8003c78:	40010400 	.word	0x40010400

08003c7c <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8003c84:	4b06      	ldr	r3, [pc, #24]	; (8003ca0 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8003c86:	689a      	ldr	r2, [r3, #8]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	43db      	mvns	r3, r3
 8003c8c:	4904      	ldr	r1, [pc, #16]	; (8003ca0 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8003c8e:	4013      	ands	r3, r2
 8003c90:	608b      	str	r3, [r1, #8]

}
 8003c92:	bf00      	nop
 8003c94:	370c      	adds	r7, #12
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr
 8003c9e:	bf00      	nop
 8003ca0:	40010400 	.word	0x40010400

08003ca4 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8003cac:	4b05      	ldr	r3, [pc, #20]	; (8003cc4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8003cae:	68da      	ldr	r2, [r3, #12]
 8003cb0:	4904      	ldr	r1, [pc, #16]	; (8003cc4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	60cb      	str	r3, [r1, #12]
}
 8003cb8:	bf00      	nop
 8003cba:	370c      	adds	r7, #12
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr
 8003cc4:	40010400 	.word	0x40010400

08003cc8 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8003cd0:	4b06      	ldr	r3, [pc, #24]	; (8003cec <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8003cd2:	68da      	ldr	r2, [r3, #12]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	43db      	mvns	r3, r3
 8003cd8:	4904      	ldr	r1, [pc, #16]	; (8003cec <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8003cda:	4013      	ands	r3, r2
 8003cdc:	60cb      	str	r3, [r1, #12]
}
 8003cde:	bf00      	nop
 8003ce0:	370c      	adds	r7, #12
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop
 8003cec:	40010400 	.word	0x40010400

08003cf0 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8003cf8:	4a04      	ldr	r2, [pc, #16]	; (8003d0c <LL_EXTI_ClearFlag_0_31+0x1c>)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6153      	str	r3, [r2, #20]
}
 8003cfe:	bf00      	nop
 8003d00:	370c      	adds	r7, #12
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr
 8003d0a:	bf00      	nop
 8003d0c:	40010400 	.word	0x40010400

08003d10 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b088      	sub	sp, #32
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d102      	bne.n	8003d2c <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	77fb      	strb	r3, [r7, #31]
 8003d2a:	e0d1      	b.n	8003ed0 <HAL_COMP_Init+0x1c0>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d3a:	d102      	bne.n	8003d42 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	77fb      	strb	r3, [r7, #31]
 8003d40:	e0c6      	b.n	8003ed0 <HAL_COMP_Init+0x1c0>
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));
#if defined(COMP2)
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));
#endif

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d115      	bne.n	8003d7a <HAL_COMP_Init+0x6a>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	629a      	str	r2, [r3, #40]	; 0x28
      /*       COMP clock enable must be implemented by user                  */
      /*       in "HAL_COMP_MspInit()".                                       */
      /*       Therefore, for compatibility anticipation, it is recommended   */
      /*       to implement __HAL_RCC_SYSCFG_CLK_ENABLE()                     */
      /*       in "HAL_COMP_MspInit()".                                       */
      __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d5c:	4b5f      	ldr	r3, [pc, #380]	; (8003edc <HAL_COMP_Init+0x1cc>)
 8003d5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d60:	4a5e      	ldr	r2, [pc, #376]	; (8003edc <HAL_COMP_Init+0x1cc>)
 8003d62:	f043 0301 	orr.w	r3, r3, #1
 8003d66:	6613      	str	r3, [r2, #96]	; 0x60
 8003d68:	4b5c      	ldr	r3, [pc, #368]	; (8003edc <HAL_COMP_Init+0x1cc>)
 8003d6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d6c:	f003 0301 	and.w	r3, r3, #1
 8003d70:	60bb      	str	r3, [r7, #8]
 8003d72:	68bb      	ldr	r3, [r7, #8]

      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
      /* Init the low level hardware */
      HAL_COMP_MspInit(hcomp);
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f7fe f8c1 	bl	8001efc <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d84:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.NonInvertingInput
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	68da      	ldr	r2, [r3, #12]
               | hcomp->Init.InvertingInput
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	69db      	ldr	r3, [r3, #28]
 8003d94:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	695b      	ldr	r3, [r3, #20]
 8003d9a:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	699b      	ldr	r3, [r3, #24]
 8003da0:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (  hcomp->Init.NonInvertingInput
 8003da6:	4313      	orrs	r3, r2
 8003da8:	617b      	str	r3, [r7, #20]
               COMP_CSR_BLANKING | COMP_CSR_BRGEN    | COMP_CSR_SCALEN  | COMP_CSR_INMESEL,
               tmp_csr
              );
#endif /* COMP_CSR_WINMODE */
#else
    MODIFY_REG(hcomp->Instance->CSR,
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	4b4b      	ldr	r3, [pc, #300]	; (8003ee0 <HAL_COMP_Init+0x1d0>)
 8003db2:	4013      	ands	r3, r2
 8003db4:	687a      	ldr	r2, [r7, #4]
 8003db6:	6812      	ldr	r2, [r2, #0]
 8003db8:	6979      	ldr	r1, [r7, #20]
 8003dba:	430b      	orrs	r3, r1
 8003dbc:	6013      	str	r3, [r2, #0]
#if defined(COMP2)
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dc6:	d106      	bne.n	8003dd6 <HAL_COMP_Init+0xc6>
    {
      SET_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 8003dc8:	4b46      	ldr	r3, [pc, #280]	; (8003ee4 <HAL_COMP_Init+0x1d4>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a45      	ldr	r2, [pc, #276]	; (8003ee4 <HAL_COMP_Init+0x1d4>)
 8003dce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003dd2:	6013      	str	r3, [r2, #0]
 8003dd4:	e005      	b.n	8003de2 <HAL_COMP_Init+0xd2>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 8003dd6:	4b43      	ldr	r3, [pc, #268]	; (8003ee4 <HAL_COMP_Init+0x1d4>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a42      	ldr	r2, [pc, #264]	; (8003ee4 <HAL_COMP_Init+0x1d4>)
 8003ddc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003de0:	6013      	str	r3, [r2, #0]
    }
#endif /* COMP2 */

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d016      	beq.n	8003e1e <HAL_COMP_Init+0x10e>
 8003df0:	69bb      	ldr	r3, [r7, #24]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d113      	bne.n	8003e1e <HAL_COMP_Init+0x10e>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003df6:	4b3c      	ldr	r3, [pc, #240]	; (8003ee8 <HAL_COMP_Init+0x1d8>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	099b      	lsrs	r3, r3, #6
 8003dfc:	4a3b      	ldr	r2, [pc, #236]	; (8003eec <HAL_COMP_Init+0x1dc>)
 8003dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8003e02:	099b      	lsrs	r3, r3, #6
 8003e04:	1c5a      	adds	r2, r3, #1
 8003e06:	4613      	mov	r3, r2
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	4413      	add	r3, r2
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8003e10:	e002      	b.n	8003e18 <HAL_COMP_Init+0x108>
      {
        wait_loop_index--;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	3b01      	subs	r3, #1
 8003e16:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d1f9      	bne.n	8003e12 <HAL_COMP_Init+0x102>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a33      	ldr	r2, [pc, #204]	; (8003ef0 <HAL_COMP_Init+0x1e0>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d102      	bne.n	8003e2e <HAL_COMP_Init+0x11e>
 8003e28:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003e2c:	e001      	b.n	8003e32 <HAL_COMP_Init+0x122>
 8003e2e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003e32:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6a1b      	ldr	r3, [r3, #32]
 8003e38:	f003 0303 	and.w	r3, r3, #3
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d037      	beq.n	8003eb0 <HAL_COMP_Init+0x1a0>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6a1b      	ldr	r3, [r3, #32]
 8003e44:	f003 0310 	and.w	r3, r3, #16
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d003      	beq.n	8003e54 <HAL_COMP_Init+0x144>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8003e4c:	6938      	ldr	r0, [r7, #16]
 8003e4e:	f7ff ff03 	bl	8003c58 <LL_EXTI_EnableRisingTrig_0_31>
 8003e52:	e002      	b.n	8003e5a <HAL_COMP_Init+0x14a>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8003e54:	6938      	ldr	r0, [r7, #16]
 8003e56:	f7ff ff11 	bl	8003c7c <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a1b      	ldr	r3, [r3, #32]
 8003e5e:	f003 0320 	and.w	r3, r3, #32
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d003      	beq.n	8003e6e <HAL_COMP_Init+0x15e>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8003e66:	6938      	ldr	r0, [r7, #16]
 8003e68:	f7ff ff1c 	bl	8003ca4 <LL_EXTI_EnableFallingTrig_0_31>
 8003e6c:	e002      	b.n	8003e74 <HAL_COMP_Init+0x164>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8003e6e:	6938      	ldr	r0, [r7, #16]
 8003e70:	f7ff ff2a 	bl	8003cc8 <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearFlag_0_31(exti_line);
 8003e74:	6938      	ldr	r0, [r7, #16]
 8003e76:	f7ff ff3b 	bl	8003cf0 <LL_EXTI_ClearFlag_0_31>

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6a1b      	ldr	r3, [r3, #32]
 8003e7e:	f003 0302 	and.w	r3, r3, #2
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d003      	beq.n	8003e8e <HAL_COMP_Init+0x17e>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 8003e86:	6938      	ldr	r0, [r7, #16]
 8003e88:	f7ff fec0 	bl	8003c0c <LL_EXTI_EnableEvent_0_31>
 8003e8c:	e002      	b.n	8003e94 <HAL_COMP_Init+0x184>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8003e8e:	6938      	ldr	r0, [r7, #16]
 8003e90:	f7ff fece 	bl	8003c30 <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6a1b      	ldr	r3, [r3, #32]
 8003e98:	f003 0301 	and.w	r3, r3, #1
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d003      	beq.n	8003ea8 <HAL_COMP_Init+0x198>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 8003ea0:	6938      	ldr	r0, [r7, #16]
 8003ea2:	f7ff fe8d 	bl	8003bc0 <LL_EXTI_EnableIT_0_31>
 8003ea6:	e009      	b.n	8003ebc <HAL_COMP_Init+0x1ac>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8003ea8:	6938      	ldr	r0, [r7, #16]
 8003eaa:	f7ff fe9b 	bl	8003be4 <LL_EXTI_DisableIT_0_31>
 8003eae:	e005      	b.n	8003ebc <HAL_COMP_Init+0x1ac>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 8003eb0:	6938      	ldr	r0, [r7, #16]
 8003eb2:	f7ff febd 	bl	8003c30 <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 8003eb6:	6938      	ldr	r0, [r7, #16]
 8003eb8:	f7ff fe94 	bl	8003be4 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d103      	bne.n	8003ed0 <HAL_COMP_Init+0x1c0>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 8003ed0:	7ffb      	ldrb	r3, [r7, #31]
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3720      	adds	r7, #32
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	bf00      	nop
 8003edc:	40021000 	.word	0x40021000
 8003ee0:	ff207d03 	.word	0xff207d03
 8003ee4:	40010204 	.word	0x40010204
 8003ee8:	20000004 	.word	0x20000004
 8003eec:	053e2d63 	.word	0x053e2d63
 8003ef0:	40010200 	.word	0x40010200

08003ef4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b085      	sub	sp, #20
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f003 0307 	and.w	r3, r3, #7
 8003f02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f04:	4b0c      	ldr	r3, [pc, #48]	; (8003f38 <__NVIC_SetPriorityGrouping+0x44>)
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f0a:	68ba      	ldr	r2, [r7, #8]
 8003f0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003f10:	4013      	ands	r3, r2
 8003f12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003f20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f26:	4a04      	ldr	r2, [pc, #16]	; (8003f38 <__NVIC_SetPriorityGrouping+0x44>)
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	60d3      	str	r3, [r2, #12]
}
 8003f2c:	bf00      	nop
 8003f2e:	3714      	adds	r7, #20
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr
 8003f38:	e000ed00 	.word	0xe000ed00

08003f3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f40:	4b04      	ldr	r3, [pc, #16]	; (8003f54 <__NVIC_GetPriorityGrouping+0x18>)
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	0a1b      	lsrs	r3, r3, #8
 8003f46:	f003 0307 	and.w	r3, r3, #7
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr
 8003f54:	e000ed00 	.word	0xe000ed00

08003f58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b083      	sub	sp, #12
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	4603      	mov	r3, r0
 8003f60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	db0b      	blt.n	8003f82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f6a:	79fb      	ldrb	r3, [r7, #7]
 8003f6c:	f003 021f 	and.w	r2, r3, #31
 8003f70:	4907      	ldr	r1, [pc, #28]	; (8003f90 <__NVIC_EnableIRQ+0x38>)
 8003f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f76:	095b      	lsrs	r3, r3, #5
 8003f78:	2001      	movs	r0, #1
 8003f7a:	fa00 f202 	lsl.w	r2, r0, r2
 8003f7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003f82:	bf00      	nop
 8003f84:	370c      	adds	r7, #12
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr
 8003f8e:	bf00      	nop
 8003f90:	e000e100 	.word	0xe000e100

08003f94 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	db12      	blt.n	8003fcc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003fa6:	79fb      	ldrb	r3, [r7, #7]
 8003fa8:	f003 021f 	and.w	r2, r3, #31
 8003fac:	490a      	ldr	r1, [pc, #40]	; (8003fd8 <__NVIC_DisableIRQ+0x44>)
 8003fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fb2:	095b      	lsrs	r3, r3, #5
 8003fb4:	2001      	movs	r0, #1
 8003fb6:	fa00 f202 	lsl.w	r2, r0, r2
 8003fba:	3320      	adds	r3, #32
 8003fbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003fc0:	f3bf 8f4f 	dsb	sy
}
 8003fc4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003fc6:	f3bf 8f6f 	isb	sy
}
 8003fca:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003fcc:	bf00      	nop
 8003fce:	370c      	adds	r7, #12
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr
 8003fd8:	e000e100 	.word	0xe000e100

08003fdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	6039      	str	r1, [r7, #0]
 8003fe6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	db0a      	blt.n	8004006 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	b2da      	uxtb	r2, r3
 8003ff4:	490c      	ldr	r1, [pc, #48]	; (8004028 <__NVIC_SetPriority+0x4c>)
 8003ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ffa:	0112      	lsls	r2, r2, #4
 8003ffc:	b2d2      	uxtb	r2, r2
 8003ffe:	440b      	add	r3, r1
 8004000:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004004:	e00a      	b.n	800401c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	b2da      	uxtb	r2, r3
 800400a:	4908      	ldr	r1, [pc, #32]	; (800402c <__NVIC_SetPriority+0x50>)
 800400c:	79fb      	ldrb	r3, [r7, #7]
 800400e:	f003 030f 	and.w	r3, r3, #15
 8004012:	3b04      	subs	r3, #4
 8004014:	0112      	lsls	r2, r2, #4
 8004016:	b2d2      	uxtb	r2, r2
 8004018:	440b      	add	r3, r1
 800401a:	761a      	strb	r2, [r3, #24]
}
 800401c:	bf00      	nop
 800401e:	370c      	adds	r7, #12
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr
 8004028:	e000e100 	.word	0xe000e100
 800402c:	e000ed00 	.word	0xe000ed00

08004030 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004030:	b480      	push	{r7}
 8004032:	b089      	sub	sp, #36	; 0x24
 8004034:	af00      	add	r7, sp, #0
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	60b9      	str	r1, [r7, #8]
 800403a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f003 0307 	and.w	r3, r3, #7
 8004042:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	f1c3 0307 	rsb	r3, r3, #7
 800404a:	2b04      	cmp	r3, #4
 800404c:	bf28      	it	cs
 800404e:	2304      	movcs	r3, #4
 8004050:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	3304      	adds	r3, #4
 8004056:	2b06      	cmp	r3, #6
 8004058:	d902      	bls.n	8004060 <NVIC_EncodePriority+0x30>
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	3b03      	subs	r3, #3
 800405e:	e000      	b.n	8004062 <NVIC_EncodePriority+0x32>
 8004060:	2300      	movs	r3, #0
 8004062:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004064:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004068:	69bb      	ldr	r3, [r7, #24]
 800406a:	fa02 f303 	lsl.w	r3, r2, r3
 800406e:	43da      	mvns	r2, r3
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	401a      	ands	r2, r3
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004078:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	fa01 f303 	lsl.w	r3, r1, r3
 8004082:	43d9      	mvns	r1, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004088:	4313      	orrs	r3, r2
         );
}
 800408a:	4618      	mov	r0, r3
 800408c:	3724      	adds	r7, #36	; 0x24
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr
	...

08004098 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b082      	sub	sp, #8
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	3b01      	subs	r3, #1
 80040a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80040a8:	d301      	bcc.n	80040ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80040aa:	2301      	movs	r3, #1
 80040ac:	e00f      	b.n	80040ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80040ae:	4a0a      	ldr	r2, [pc, #40]	; (80040d8 <SysTick_Config+0x40>)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	3b01      	subs	r3, #1
 80040b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80040b6:	210f      	movs	r1, #15
 80040b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80040bc:	f7ff ff8e 	bl	8003fdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80040c0:	4b05      	ldr	r3, [pc, #20]	; (80040d8 <SysTick_Config+0x40>)
 80040c2:	2200      	movs	r2, #0
 80040c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80040c6:	4b04      	ldr	r3, [pc, #16]	; (80040d8 <SysTick_Config+0x40>)
 80040c8:	2207      	movs	r2, #7
 80040ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80040cc:	2300      	movs	r3, #0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3708      	adds	r7, #8
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	e000e010 	.word	0xe000e010

080040dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b082      	sub	sp, #8
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f7ff ff05 	bl	8003ef4 <__NVIC_SetPriorityGrouping>
}
 80040ea:	bf00      	nop
 80040ec:	3708      	adds	r7, #8
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}

080040f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040f2:	b580      	push	{r7, lr}
 80040f4:	b086      	sub	sp, #24
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	4603      	mov	r3, r0
 80040fa:	60b9      	str	r1, [r7, #8]
 80040fc:	607a      	str	r2, [r7, #4]
 80040fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004100:	2300      	movs	r3, #0
 8004102:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004104:	f7ff ff1a 	bl	8003f3c <__NVIC_GetPriorityGrouping>
 8004108:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	68b9      	ldr	r1, [r7, #8]
 800410e:	6978      	ldr	r0, [r7, #20]
 8004110:	f7ff ff8e 	bl	8004030 <NVIC_EncodePriority>
 8004114:	4602      	mov	r2, r0
 8004116:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800411a:	4611      	mov	r1, r2
 800411c:	4618      	mov	r0, r3
 800411e:	f7ff ff5d 	bl	8003fdc <__NVIC_SetPriority>
}
 8004122:	bf00      	nop
 8004124:	3718      	adds	r7, #24
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}

0800412a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800412a:	b580      	push	{r7, lr}
 800412c:	b082      	sub	sp, #8
 800412e:	af00      	add	r7, sp, #0
 8004130:	4603      	mov	r3, r0
 8004132:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004134:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004138:	4618      	mov	r0, r3
 800413a:	f7ff ff0d 	bl	8003f58 <__NVIC_EnableIRQ>
}
 800413e:	bf00      	nop
 8004140:	3708      	adds	r7, #8
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}

08004146 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004146:	b580      	push	{r7, lr}
 8004148:	b082      	sub	sp, #8
 800414a:	af00      	add	r7, sp, #0
 800414c:	4603      	mov	r3, r0
 800414e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004150:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004154:	4618      	mov	r0, r3
 8004156:	f7ff ff1d 	bl	8003f94 <__NVIC_DisableIRQ>
}
 800415a:	bf00      	nop
 800415c:	3708      	adds	r7, #8
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}

08004162 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004162:	b580      	push	{r7, lr}
 8004164:	b082      	sub	sp, #8
 8004166:	af00      	add	r7, sp, #0
 8004168:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f7ff ff94 	bl	8004098 <SysTick_Config>
 8004170:	4603      	mov	r3, r0
}
 8004172:	4618      	mov	r0, r3
 8004174:	3708      	adds	r7, #8
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
	...

0800417c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800417c:	b480      	push	{r7}
 800417e:	b087      	sub	sp, #28
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004186:	2300      	movs	r3, #0
 8004188:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800418a:	e166      	b.n	800445a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	2101      	movs	r1, #1
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	fa01 f303 	lsl.w	r3, r1, r3
 8004198:	4013      	ands	r3, r2
 800419a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	f000 8158 	beq.w	8004454 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	f003 0303 	and.w	r3, r3, #3
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d005      	beq.n	80041bc <HAL_GPIO_Init+0x40>
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	f003 0303 	and.w	r3, r3, #3
 80041b8:	2b02      	cmp	r3, #2
 80041ba:	d130      	bne.n	800421e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	005b      	lsls	r3, r3, #1
 80041c6:	2203      	movs	r2, #3
 80041c8:	fa02 f303 	lsl.w	r3, r2, r3
 80041cc:	43db      	mvns	r3, r3
 80041ce:	693a      	ldr	r2, [r7, #16]
 80041d0:	4013      	ands	r3, r2
 80041d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	68da      	ldr	r2, [r3, #12]
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	005b      	lsls	r3, r3, #1
 80041dc:	fa02 f303 	lsl.w	r3, r2, r3
 80041e0:	693a      	ldr	r2, [r7, #16]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	693a      	ldr	r2, [r7, #16]
 80041ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80041f2:	2201      	movs	r2, #1
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	fa02 f303 	lsl.w	r3, r2, r3
 80041fa:	43db      	mvns	r3, r3
 80041fc:	693a      	ldr	r2, [r7, #16]
 80041fe:	4013      	ands	r3, r2
 8004200:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	091b      	lsrs	r3, r3, #4
 8004208:	f003 0201 	and.w	r2, r3, #1
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	fa02 f303 	lsl.w	r3, r2, r3
 8004212:	693a      	ldr	r2, [r7, #16]
 8004214:	4313      	orrs	r3, r2
 8004216:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	693a      	ldr	r2, [r7, #16]
 800421c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	f003 0303 	and.w	r3, r3, #3
 8004226:	2b03      	cmp	r3, #3
 8004228:	d017      	beq.n	800425a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	005b      	lsls	r3, r3, #1
 8004234:	2203      	movs	r2, #3
 8004236:	fa02 f303 	lsl.w	r3, r2, r3
 800423a:	43db      	mvns	r3, r3
 800423c:	693a      	ldr	r2, [r7, #16]
 800423e:	4013      	ands	r3, r2
 8004240:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	689a      	ldr	r2, [r3, #8]
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	005b      	lsls	r3, r3, #1
 800424a:	fa02 f303 	lsl.w	r3, r2, r3
 800424e:	693a      	ldr	r2, [r7, #16]
 8004250:	4313      	orrs	r3, r2
 8004252:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	693a      	ldr	r2, [r7, #16]
 8004258:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	f003 0303 	and.w	r3, r3, #3
 8004262:	2b02      	cmp	r3, #2
 8004264:	d123      	bne.n	80042ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	08da      	lsrs	r2, r3, #3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	3208      	adds	r2, #8
 800426e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004272:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	f003 0307 	and.w	r3, r3, #7
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	220f      	movs	r2, #15
 800427e:	fa02 f303 	lsl.w	r3, r2, r3
 8004282:	43db      	mvns	r3, r3
 8004284:	693a      	ldr	r2, [r7, #16]
 8004286:	4013      	ands	r3, r2
 8004288:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	691a      	ldr	r2, [r3, #16]
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	f003 0307 	and.w	r3, r3, #7
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	fa02 f303 	lsl.w	r3, r2, r3
 800429a:	693a      	ldr	r2, [r7, #16]
 800429c:	4313      	orrs	r3, r2
 800429e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	08da      	lsrs	r2, r3, #3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	3208      	adds	r2, #8
 80042a8:	6939      	ldr	r1, [r7, #16]
 80042aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	005b      	lsls	r3, r3, #1
 80042b8:	2203      	movs	r2, #3
 80042ba:	fa02 f303 	lsl.w	r3, r2, r3
 80042be:	43db      	mvns	r3, r3
 80042c0:	693a      	ldr	r2, [r7, #16]
 80042c2:	4013      	ands	r3, r2
 80042c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	f003 0203 	and.w	r2, r3, #3
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	005b      	lsls	r3, r3, #1
 80042d2:	fa02 f303 	lsl.w	r3, r2, r3
 80042d6:	693a      	ldr	r2, [r7, #16]
 80042d8:	4313      	orrs	r3, r2
 80042da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	693a      	ldr	r2, [r7, #16]
 80042e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	f000 80b2 	beq.w	8004454 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042f0:	4b61      	ldr	r3, [pc, #388]	; (8004478 <HAL_GPIO_Init+0x2fc>)
 80042f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042f4:	4a60      	ldr	r2, [pc, #384]	; (8004478 <HAL_GPIO_Init+0x2fc>)
 80042f6:	f043 0301 	orr.w	r3, r3, #1
 80042fa:	6613      	str	r3, [r2, #96]	; 0x60
 80042fc:	4b5e      	ldr	r3, [pc, #376]	; (8004478 <HAL_GPIO_Init+0x2fc>)
 80042fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004300:	f003 0301 	and.w	r3, r3, #1
 8004304:	60bb      	str	r3, [r7, #8]
 8004306:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004308:	4a5c      	ldr	r2, [pc, #368]	; (800447c <HAL_GPIO_Init+0x300>)
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	089b      	lsrs	r3, r3, #2
 800430e:	3302      	adds	r3, #2
 8004310:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004314:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	f003 0303 	and.w	r3, r3, #3
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	220f      	movs	r2, #15
 8004320:	fa02 f303 	lsl.w	r3, r2, r3
 8004324:	43db      	mvns	r3, r3
 8004326:	693a      	ldr	r2, [r7, #16]
 8004328:	4013      	ands	r3, r2
 800432a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004332:	d02b      	beq.n	800438c <HAL_GPIO_Init+0x210>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	4a52      	ldr	r2, [pc, #328]	; (8004480 <HAL_GPIO_Init+0x304>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d025      	beq.n	8004388 <HAL_GPIO_Init+0x20c>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	4a51      	ldr	r2, [pc, #324]	; (8004484 <HAL_GPIO_Init+0x308>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d01f      	beq.n	8004384 <HAL_GPIO_Init+0x208>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	4a50      	ldr	r2, [pc, #320]	; (8004488 <HAL_GPIO_Init+0x30c>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d019      	beq.n	8004380 <HAL_GPIO_Init+0x204>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	4a4f      	ldr	r2, [pc, #316]	; (800448c <HAL_GPIO_Init+0x310>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d013      	beq.n	800437c <HAL_GPIO_Init+0x200>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	4a4e      	ldr	r2, [pc, #312]	; (8004490 <HAL_GPIO_Init+0x314>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d00d      	beq.n	8004378 <HAL_GPIO_Init+0x1fc>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	4a4d      	ldr	r2, [pc, #308]	; (8004494 <HAL_GPIO_Init+0x318>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d007      	beq.n	8004374 <HAL_GPIO_Init+0x1f8>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	4a4c      	ldr	r2, [pc, #304]	; (8004498 <HAL_GPIO_Init+0x31c>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d101      	bne.n	8004370 <HAL_GPIO_Init+0x1f4>
 800436c:	2307      	movs	r3, #7
 800436e:	e00e      	b.n	800438e <HAL_GPIO_Init+0x212>
 8004370:	2308      	movs	r3, #8
 8004372:	e00c      	b.n	800438e <HAL_GPIO_Init+0x212>
 8004374:	2306      	movs	r3, #6
 8004376:	e00a      	b.n	800438e <HAL_GPIO_Init+0x212>
 8004378:	2305      	movs	r3, #5
 800437a:	e008      	b.n	800438e <HAL_GPIO_Init+0x212>
 800437c:	2304      	movs	r3, #4
 800437e:	e006      	b.n	800438e <HAL_GPIO_Init+0x212>
 8004380:	2303      	movs	r3, #3
 8004382:	e004      	b.n	800438e <HAL_GPIO_Init+0x212>
 8004384:	2302      	movs	r3, #2
 8004386:	e002      	b.n	800438e <HAL_GPIO_Init+0x212>
 8004388:	2301      	movs	r3, #1
 800438a:	e000      	b.n	800438e <HAL_GPIO_Init+0x212>
 800438c:	2300      	movs	r3, #0
 800438e:	697a      	ldr	r2, [r7, #20]
 8004390:	f002 0203 	and.w	r2, r2, #3
 8004394:	0092      	lsls	r2, r2, #2
 8004396:	4093      	lsls	r3, r2
 8004398:	693a      	ldr	r2, [r7, #16]
 800439a:	4313      	orrs	r3, r2
 800439c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800439e:	4937      	ldr	r1, [pc, #220]	; (800447c <HAL_GPIO_Init+0x300>)
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	089b      	lsrs	r3, r3, #2
 80043a4:	3302      	adds	r3, #2
 80043a6:	693a      	ldr	r2, [r7, #16]
 80043a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80043ac:	4b3b      	ldr	r3, [pc, #236]	; (800449c <HAL_GPIO_Init+0x320>)
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	43db      	mvns	r3, r3
 80043b6:	693a      	ldr	r2, [r7, #16]
 80043b8:	4013      	ands	r3, r2
 80043ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d003      	beq.n	80043d0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80043c8:	693a      	ldr	r2, [r7, #16]
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80043d0:	4a32      	ldr	r2, [pc, #200]	; (800449c <HAL_GPIO_Init+0x320>)
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80043d6:	4b31      	ldr	r3, [pc, #196]	; (800449c <HAL_GPIO_Init+0x320>)
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	43db      	mvns	r3, r3
 80043e0:	693a      	ldr	r2, [r7, #16]
 80043e2:	4013      	ands	r3, r2
 80043e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d003      	beq.n	80043fa <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80043f2:	693a      	ldr	r2, [r7, #16]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80043fa:	4a28      	ldr	r2, [pc, #160]	; (800449c <HAL_GPIO_Init+0x320>)
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004400:	4b26      	ldr	r3, [pc, #152]	; (800449c <HAL_GPIO_Init+0x320>)
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	43db      	mvns	r3, r3
 800440a:	693a      	ldr	r2, [r7, #16]
 800440c:	4013      	ands	r3, r2
 800440e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004418:	2b00      	cmp	r3, #0
 800441a:	d003      	beq.n	8004424 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800441c:	693a      	ldr	r2, [r7, #16]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	4313      	orrs	r3, r2
 8004422:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004424:	4a1d      	ldr	r2, [pc, #116]	; (800449c <HAL_GPIO_Init+0x320>)
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800442a:	4b1c      	ldr	r3, [pc, #112]	; (800449c <HAL_GPIO_Init+0x320>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	43db      	mvns	r3, r3
 8004434:	693a      	ldr	r2, [r7, #16]
 8004436:	4013      	ands	r3, r2
 8004438:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d003      	beq.n	800444e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8004446:	693a      	ldr	r2, [r7, #16]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	4313      	orrs	r3, r2
 800444c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800444e:	4a13      	ldr	r2, [pc, #76]	; (800449c <HAL_GPIO_Init+0x320>)
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	3301      	adds	r3, #1
 8004458:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	fa22 f303 	lsr.w	r3, r2, r3
 8004464:	2b00      	cmp	r3, #0
 8004466:	f47f ae91 	bne.w	800418c <HAL_GPIO_Init+0x10>
  }
}
 800446a:	bf00      	nop
 800446c:	bf00      	nop
 800446e:	371c      	adds	r7, #28
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr
 8004478:	40021000 	.word	0x40021000
 800447c:	40010000 	.word	0x40010000
 8004480:	48000400 	.word	0x48000400
 8004484:	48000800 	.word	0x48000800
 8004488:	48000c00 	.word	0x48000c00
 800448c:	48001000 	.word	0x48001000
 8004490:	48001400 	.word	0x48001400
 8004494:	48001800 	.word	0x48001800
 8004498:	48001c00 	.word	0x48001c00
 800449c:	40010400 	.word	0x40010400

080044a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b083      	sub	sp, #12
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	460b      	mov	r3, r1
 80044aa:	807b      	strh	r3, [r7, #2]
 80044ac:	4613      	mov	r3, r2
 80044ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80044b0:	787b      	ldrb	r3, [r7, #1]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d003      	beq.n	80044be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80044b6:	887a      	ldrh	r2, [r7, #2]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80044bc:	e002      	b.n	80044c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80044be:	887a      	ldrh	r2, [r7, #2]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80044c4:	bf00      	nop
 80044c6:	370c      	adds	r7, #12
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr

080044d0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80044d0:	b480      	push	{r7}
 80044d2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044d4:	4b05      	ldr	r3, [pc, #20]	; (80044ec <HAL_PWR_EnableBkUpAccess+0x1c>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a04      	ldr	r2, [pc, #16]	; (80044ec <HAL_PWR_EnableBkUpAccess+0x1c>)
 80044da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044de:	6013      	str	r3, [r2, #0]
}
 80044e0:	bf00      	nop
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr
 80044ea:	bf00      	nop
 80044ec:	40007000 	.word	0x40007000

080044f0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80044f0:	b480      	push	{r7}
 80044f2:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80044f4:	4b0d      	ldr	r3, [pc, #52]	; (800452c <HAL_PWREx_GetVoltageRange+0x3c>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80044fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004500:	d102      	bne.n	8004508 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8004502:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004506:	e00b      	b.n	8004520 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8004508:	4b08      	ldr	r3, [pc, #32]	; (800452c <HAL_PWREx_GetVoltageRange+0x3c>)
 800450a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800450e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004512:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004516:	d102      	bne.n	800451e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8004518:	f44f 7300 	mov.w	r3, #512	; 0x200
 800451c:	e000      	b.n	8004520 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800451e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8004520:	4618      	mov	r0, r3
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr
 800452a:	bf00      	nop
 800452c:	40007000 	.word	0x40007000

08004530 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004530:	b480      	push	{r7}
 8004532:	b085      	sub	sp, #20
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d141      	bne.n	80045c2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800453e:	4b4b      	ldr	r3, [pc, #300]	; (800466c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004546:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800454a:	d131      	bne.n	80045b0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800454c:	4b47      	ldr	r3, [pc, #284]	; (800466c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800454e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004552:	4a46      	ldr	r2, [pc, #280]	; (800466c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004554:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004558:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800455c:	4b43      	ldr	r3, [pc, #268]	; (800466c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004564:	4a41      	ldr	r2, [pc, #260]	; (800466c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004566:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800456a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800456c:	4b40      	ldr	r3, [pc, #256]	; (8004670 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	2232      	movs	r2, #50	; 0x32
 8004572:	fb02 f303 	mul.w	r3, r2, r3
 8004576:	4a3f      	ldr	r2, [pc, #252]	; (8004674 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004578:	fba2 2303 	umull	r2, r3, r2, r3
 800457c:	0c9b      	lsrs	r3, r3, #18
 800457e:	3301      	adds	r3, #1
 8004580:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004582:	e002      	b.n	800458a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	3b01      	subs	r3, #1
 8004588:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800458a:	4b38      	ldr	r3, [pc, #224]	; (800466c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800458c:	695b      	ldr	r3, [r3, #20]
 800458e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004592:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004596:	d102      	bne.n	800459e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d1f2      	bne.n	8004584 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800459e:	4b33      	ldr	r3, [pc, #204]	; (800466c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045a0:	695b      	ldr	r3, [r3, #20]
 80045a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045aa:	d158      	bne.n	800465e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80045ac:	2303      	movs	r3, #3
 80045ae:	e057      	b.n	8004660 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80045b0:	4b2e      	ldr	r3, [pc, #184]	; (800466c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045b6:	4a2d      	ldr	r2, [pc, #180]	; (800466c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80045c0:	e04d      	b.n	800465e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045c8:	d141      	bne.n	800464e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80045ca:	4b28      	ldr	r3, [pc, #160]	; (800466c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80045d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045d6:	d131      	bne.n	800463c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80045d8:	4b24      	ldr	r3, [pc, #144]	; (800466c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045de:	4a23      	ldr	r2, [pc, #140]	; (800466c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80045e8:	4b20      	ldr	r3, [pc, #128]	; (800466c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80045f0:	4a1e      	ldr	r2, [pc, #120]	; (800466c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80045f6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80045f8:	4b1d      	ldr	r3, [pc, #116]	; (8004670 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2232      	movs	r2, #50	; 0x32
 80045fe:	fb02 f303 	mul.w	r3, r2, r3
 8004602:	4a1c      	ldr	r2, [pc, #112]	; (8004674 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004604:	fba2 2303 	umull	r2, r3, r2, r3
 8004608:	0c9b      	lsrs	r3, r3, #18
 800460a:	3301      	adds	r3, #1
 800460c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800460e:	e002      	b.n	8004616 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	3b01      	subs	r3, #1
 8004614:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004616:	4b15      	ldr	r3, [pc, #84]	; (800466c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004618:	695b      	ldr	r3, [r3, #20]
 800461a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800461e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004622:	d102      	bne.n	800462a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d1f2      	bne.n	8004610 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800462a:	4b10      	ldr	r3, [pc, #64]	; (800466c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800462c:	695b      	ldr	r3, [r3, #20]
 800462e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004632:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004636:	d112      	bne.n	800465e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004638:	2303      	movs	r3, #3
 800463a:	e011      	b.n	8004660 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800463c:	4b0b      	ldr	r3, [pc, #44]	; (800466c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800463e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004642:	4a0a      	ldr	r2, [pc, #40]	; (800466c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004644:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004648:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800464c:	e007      	b.n	800465e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800464e:	4b07      	ldr	r3, [pc, #28]	; (800466c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004656:	4a05      	ldr	r2, [pc, #20]	; (800466c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004658:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800465c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800465e:	2300      	movs	r3, #0
}
 8004660:	4618      	mov	r0, r3
 8004662:	3714      	adds	r7, #20
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr
 800466c:	40007000 	.word	0x40007000
 8004670:	20000004 	.word	0x20000004
 8004674:	431bde83 	.word	0x431bde83

08004678 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8004678:	b480      	push	{r7}
 800467a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800467c:	4b05      	ldr	r3, [pc, #20]	; (8004694 <HAL_PWREx_EnableVddIO2+0x1c>)
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	4a04      	ldr	r2, [pc, #16]	; (8004694 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004682:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004686:	6053      	str	r3, [r2, #4]
}
 8004688:	bf00      	nop
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr
 8004692:	bf00      	nop
 8004694:	40007000 	.word	0x40007000

08004698 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b088      	sub	sp, #32
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d102      	bne.n	80046ac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	f000 bc08 	b.w	8004ebc <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046ac:	4b96      	ldr	r3, [pc, #600]	; (8004908 <HAL_RCC_OscConfig+0x270>)
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	f003 030c 	and.w	r3, r3, #12
 80046b4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80046b6:	4b94      	ldr	r3, [pc, #592]	; (8004908 <HAL_RCC_OscConfig+0x270>)
 80046b8:	68db      	ldr	r3, [r3, #12]
 80046ba:	f003 0303 	and.w	r3, r3, #3
 80046be:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 0310 	and.w	r3, r3, #16
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	f000 80e4 	beq.w	8004896 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80046ce:	69bb      	ldr	r3, [r7, #24]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d007      	beq.n	80046e4 <HAL_RCC_OscConfig+0x4c>
 80046d4:	69bb      	ldr	r3, [r7, #24]
 80046d6:	2b0c      	cmp	r3, #12
 80046d8:	f040 808b 	bne.w	80047f2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	2b01      	cmp	r3, #1
 80046e0:	f040 8087 	bne.w	80047f2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80046e4:	4b88      	ldr	r3, [pc, #544]	; (8004908 <HAL_RCC_OscConfig+0x270>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0302 	and.w	r3, r3, #2
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d005      	beq.n	80046fc <HAL_RCC_OscConfig+0x64>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	699b      	ldr	r3, [r3, #24]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d101      	bne.n	80046fc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	e3df      	b.n	8004ebc <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6a1a      	ldr	r2, [r3, #32]
 8004700:	4b81      	ldr	r3, [pc, #516]	; (8004908 <HAL_RCC_OscConfig+0x270>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 0308 	and.w	r3, r3, #8
 8004708:	2b00      	cmp	r3, #0
 800470a:	d004      	beq.n	8004716 <HAL_RCC_OscConfig+0x7e>
 800470c:	4b7e      	ldr	r3, [pc, #504]	; (8004908 <HAL_RCC_OscConfig+0x270>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004714:	e005      	b.n	8004722 <HAL_RCC_OscConfig+0x8a>
 8004716:	4b7c      	ldr	r3, [pc, #496]	; (8004908 <HAL_RCC_OscConfig+0x270>)
 8004718:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800471c:	091b      	lsrs	r3, r3, #4
 800471e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004722:	4293      	cmp	r3, r2
 8004724:	d223      	bcs.n	800476e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6a1b      	ldr	r3, [r3, #32]
 800472a:	4618      	mov	r0, r3
 800472c:	f000 fdcc 	bl	80052c8 <RCC_SetFlashLatencyFromMSIRange>
 8004730:	4603      	mov	r3, r0
 8004732:	2b00      	cmp	r3, #0
 8004734:	d001      	beq.n	800473a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e3c0      	b.n	8004ebc <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800473a:	4b73      	ldr	r3, [pc, #460]	; (8004908 <HAL_RCC_OscConfig+0x270>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a72      	ldr	r2, [pc, #456]	; (8004908 <HAL_RCC_OscConfig+0x270>)
 8004740:	f043 0308 	orr.w	r3, r3, #8
 8004744:	6013      	str	r3, [r2, #0]
 8004746:	4b70      	ldr	r3, [pc, #448]	; (8004908 <HAL_RCC_OscConfig+0x270>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6a1b      	ldr	r3, [r3, #32]
 8004752:	496d      	ldr	r1, [pc, #436]	; (8004908 <HAL_RCC_OscConfig+0x270>)
 8004754:	4313      	orrs	r3, r2
 8004756:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004758:	4b6b      	ldr	r3, [pc, #428]	; (8004908 <HAL_RCC_OscConfig+0x270>)
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	69db      	ldr	r3, [r3, #28]
 8004764:	021b      	lsls	r3, r3, #8
 8004766:	4968      	ldr	r1, [pc, #416]	; (8004908 <HAL_RCC_OscConfig+0x270>)
 8004768:	4313      	orrs	r3, r2
 800476a:	604b      	str	r3, [r1, #4]
 800476c:	e025      	b.n	80047ba <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800476e:	4b66      	ldr	r3, [pc, #408]	; (8004908 <HAL_RCC_OscConfig+0x270>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a65      	ldr	r2, [pc, #404]	; (8004908 <HAL_RCC_OscConfig+0x270>)
 8004774:	f043 0308 	orr.w	r3, r3, #8
 8004778:	6013      	str	r3, [r2, #0]
 800477a:	4b63      	ldr	r3, [pc, #396]	; (8004908 <HAL_RCC_OscConfig+0x270>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a1b      	ldr	r3, [r3, #32]
 8004786:	4960      	ldr	r1, [pc, #384]	; (8004908 <HAL_RCC_OscConfig+0x270>)
 8004788:	4313      	orrs	r3, r2
 800478a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800478c:	4b5e      	ldr	r3, [pc, #376]	; (8004908 <HAL_RCC_OscConfig+0x270>)
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	69db      	ldr	r3, [r3, #28]
 8004798:	021b      	lsls	r3, r3, #8
 800479a:	495b      	ldr	r1, [pc, #364]	; (8004908 <HAL_RCC_OscConfig+0x270>)
 800479c:	4313      	orrs	r3, r2
 800479e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80047a0:	69bb      	ldr	r3, [r7, #24]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d109      	bne.n	80047ba <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6a1b      	ldr	r3, [r3, #32]
 80047aa:	4618      	mov	r0, r3
 80047ac:	f000 fd8c 	bl	80052c8 <RCC_SetFlashLatencyFromMSIRange>
 80047b0:	4603      	mov	r3, r0
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d001      	beq.n	80047ba <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e380      	b.n	8004ebc <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80047ba:	f000 fcc1 	bl	8005140 <HAL_RCC_GetSysClockFreq>
 80047be:	4602      	mov	r2, r0
 80047c0:	4b51      	ldr	r3, [pc, #324]	; (8004908 <HAL_RCC_OscConfig+0x270>)
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	091b      	lsrs	r3, r3, #4
 80047c6:	f003 030f 	and.w	r3, r3, #15
 80047ca:	4950      	ldr	r1, [pc, #320]	; (800490c <HAL_RCC_OscConfig+0x274>)
 80047cc:	5ccb      	ldrb	r3, [r1, r3]
 80047ce:	f003 031f 	and.w	r3, r3, #31
 80047d2:	fa22 f303 	lsr.w	r3, r2, r3
 80047d6:	4a4e      	ldr	r2, [pc, #312]	; (8004910 <HAL_RCC_OscConfig+0x278>)
 80047d8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80047da:	4b4e      	ldr	r3, [pc, #312]	; (8004914 <HAL_RCC_OscConfig+0x27c>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4618      	mov	r0, r3
 80047e0:	f7fe f98a 	bl	8002af8 <HAL_InitTick>
 80047e4:	4603      	mov	r3, r0
 80047e6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80047e8:	7bfb      	ldrb	r3, [r7, #15]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d052      	beq.n	8004894 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80047ee:	7bfb      	ldrb	r3, [r7, #15]
 80047f0:	e364      	b.n	8004ebc <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	699b      	ldr	r3, [r3, #24]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d032      	beq.n	8004860 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80047fa:	4b43      	ldr	r3, [pc, #268]	; (8004908 <HAL_RCC_OscConfig+0x270>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a42      	ldr	r2, [pc, #264]	; (8004908 <HAL_RCC_OscConfig+0x270>)
 8004800:	f043 0301 	orr.w	r3, r3, #1
 8004804:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004806:	f7fe f9c7 	bl	8002b98 <HAL_GetTick>
 800480a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800480c:	e008      	b.n	8004820 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800480e:	f7fe f9c3 	bl	8002b98 <HAL_GetTick>
 8004812:	4602      	mov	r2, r0
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	1ad3      	subs	r3, r2, r3
 8004818:	2b02      	cmp	r3, #2
 800481a:	d901      	bls.n	8004820 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800481c:	2303      	movs	r3, #3
 800481e:	e34d      	b.n	8004ebc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004820:	4b39      	ldr	r3, [pc, #228]	; (8004908 <HAL_RCC_OscConfig+0x270>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 0302 	and.w	r3, r3, #2
 8004828:	2b00      	cmp	r3, #0
 800482a:	d0f0      	beq.n	800480e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800482c:	4b36      	ldr	r3, [pc, #216]	; (8004908 <HAL_RCC_OscConfig+0x270>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a35      	ldr	r2, [pc, #212]	; (8004908 <HAL_RCC_OscConfig+0x270>)
 8004832:	f043 0308 	orr.w	r3, r3, #8
 8004836:	6013      	str	r3, [r2, #0]
 8004838:	4b33      	ldr	r3, [pc, #204]	; (8004908 <HAL_RCC_OscConfig+0x270>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6a1b      	ldr	r3, [r3, #32]
 8004844:	4930      	ldr	r1, [pc, #192]	; (8004908 <HAL_RCC_OscConfig+0x270>)
 8004846:	4313      	orrs	r3, r2
 8004848:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800484a:	4b2f      	ldr	r3, [pc, #188]	; (8004908 <HAL_RCC_OscConfig+0x270>)
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	69db      	ldr	r3, [r3, #28]
 8004856:	021b      	lsls	r3, r3, #8
 8004858:	492b      	ldr	r1, [pc, #172]	; (8004908 <HAL_RCC_OscConfig+0x270>)
 800485a:	4313      	orrs	r3, r2
 800485c:	604b      	str	r3, [r1, #4]
 800485e:	e01a      	b.n	8004896 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004860:	4b29      	ldr	r3, [pc, #164]	; (8004908 <HAL_RCC_OscConfig+0x270>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a28      	ldr	r2, [pc, #160]	; (8004908 <HAL_RCC_OscConfig+0x270>)
 8004866:	f023 0301 	bic.w	r3, r3, #1
 800486a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800486c:	f7fe f994 	bl	8002b98 <HAL_GetTick>
 8004870:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004872:	e008      	b.n	8004886 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004874:	f7fe f990 	bl	8002b98 <HAL_GetTick>
 8004878:	4602      	mov	r2, r0
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	1ad3      	subs	r3, r2, r3
 800487e:	2b02      	cmp	r3, #2
 8004880:	d901      	bls.n	8004886 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004882:	2303      	movs	r3, #3
 8004884:	e31a      	b.n	8004ebc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004886:	4b20      	ldr	r3, [pc, #128]	; (8004908 <HAL_RCC_OscConfig+0x270>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 0302 	and.w	r3, r3, #2
 800488e:	2b00      	cmp	r3, #0
 8004890:	d1f0      	bne.n	8004874 <HAL_RCC_OscConfig+0x1dc>
 8004892:	e000      	b.n	8004896 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004894:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 0301 	and.w	r3, r3, #1
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d073      	beq.n	800498a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80048a2:	69bb      	ldr	r3, [r7, #24]
 80048a4:	2b08      	cmp	r3, #8
 80048a6:	d005      	beq.n	80048b4 <HAL_RCC_OscConfig+0x21c>
 80048a8:	69bb      	ldr	r3, [r7, #24]
 80048aa:	2b0c      	cmp	r3, #12
 80048ac:	d10e      	bne.n	80048cc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	2b03      	cmp	r3, #3
 80048b2:	d10b      	bne.n	80048cc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048b4:	4b14      	ldr	r3, [pc, #80]	; (8004908 <HAL_RCC_OscConfig+0x270>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d063      	beq.n	8004988 <HAL_RCC_OscConfig+0x2f0>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d15f      	bne.n	8004988 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	e2f7      	b.n	8004ebc <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048d4:	d106      	bne.n	80048e4 <HAL_RCC_OscConfig+0x24c>
 80048d6:	4b0c      	ldr	r3, [pc, #48]	; (8004908 <HAL_RCC_OscConfig+0x270>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a0b      	ldr	r2, [pc, #44]	; (8004908 <HAL_RCC_OscConfig+0x270>)
 80048dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048e0:	6013      	str	r3, [r2, #0]
 80048e2:	e025      	b.n	8004930 <HAL_RCC_OscConfig+0x298>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048ec:	d114      	bne.n	8004918 <HAL_RCC_OscConfig+0x280>
 80048ee:	4b06      	ldr	r3, [pc, #24]	; (8004908 <HAL_RCC_OscConfig+0x270>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a05      	ldr	r2, [pc, #20]	; (8004908 <HAL_RCC_OscConfig+0x270>)
 80048f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048f8:	6013      	str	r3, [r2, #0]
 80048fa:	4b03      	ldr	r3, [pc, #12]	; (8004908 <HAL_RCC_OscConfig+0x270>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a02      	ldr	r2, [pc, #8]	; (8004908 <HAL_RCC_OscConfig+0x270>)
 8004900:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004904:	6013      	str	r3, [r2, #0]
 8004906:	e013      	b.n	8004930 <HAL_RCC_OscConfig+0x298>
 8004908:	40021000 	.word	0x40021000
 800490c:	0800b100 	.word	0x0800b100
 8004910:	20000004 	.word	0x20000004
 8004914:	20000008 	.word	0x20000008
 8004918:	4ba0      	ldr	r3, [pc, #640]	; (8004b9c <HAL_RCC_OscConfig+0x504>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a9f      	ldr	r2, [pc, #636]	; (8004b9c <HAL_RCC_OscConfig+0x504>)
 800491e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004922:	6013      	str	r3, [r2, #0]
 8004924:	4b9d      	ldr	r3, [pc, #628]	; (8004b9c <HAL_RCC_OscConfig+0x504>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a9c      	ldr	r2, [pc, #624]	; (8004b9c <HAL_RCC_OscConfig+0x504>)
 800492a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800492e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d013      	beq.n	8004960 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004938:	f7fe f92e 	bl	8002b98 <HAL_GetTick>
 800493c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800493e:	e008      	b.n	8004952 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004940:	f7fe f92a 	bl	8002b98 <HAL_GetTick>
 8004944:	4602      	mov	r2, r0
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	2b64      	cmp	r3, #100	; 0x64
 800494c:	d901      	bls.n	8004952 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	e2b4      	b.n	8004ebc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004952:	4b92      	ldr	r3, [pc, #584]	; (8004b9c <HAL_RCC_OscConfig+0x504>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800495a:	2b00      	cmp	r3, #0
 800495c:	d0f0      	beq.n	8004940 <HAL_RCC_OscConfig+0x2a8>
 800495e:	e014      	b.n	800498a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004960:	f7fe f91a 	bl	8002b98 <HAL_GetTick>
 8004964:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004966:	e008      	b.n	800497a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004968:	f7fe f916 	bl	8002b98 <HAL_GetTick>
 800496c:	4602      	mov	r2, r0
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	2b64      	cmp	r3, #100	; 0x64
 8004974:	d901      	bls.n	800497a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004976:	2303      	movs	r3, #3
 8004978:	e2a0      	b.n	8004ebc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800497a:	4b88      	ldr	r3, [pc, #544]	; (8004b9c <HAL_RCC_OscConfig+0x504>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004982:	2b00      	cmp	r3, #0
 8004984:	d1f0      	bne.n	8004968 <HAL_RCC_OscConfig+0x2d0>
 8004986:	e000      	b.n	800498a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004988:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 0302 	and.w	r3, r3, #2
 8004992:	2b00      	cmp	r3, #0
 8004994:	d060      	beq.n	8004a58 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004996:	69bb      	ldr	r3, [r7, #24]
 8004998:	2b04      	cmp	r3, #4
 800499a:	d005      	beq.n	80049a8 <HAL_RCC_OscConfig+0x310>
 800499c:	69bb      	ldr	r3, [r7, #24]
 800499e:	2b0c      	cmp	r3, #12
 80049a0:	d119      	bne.n	80049d6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	2b02      	cmp	r3, #2
 80049a6:	d116      	bne.n	80049d6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80049a8:	4b7c      	ldr	r3, [pc, #496]	; (8004b9c <HAL_RCC_OscConfig+0x504>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d005      	beq.n	80049c0 <HAL_RCC_OscConfig+0x328>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d101      	bne.n	80049c0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	e27d      	b.n	8004ebc <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049c0:	4b76      	ldr	r3, [pc, #472]	; (8004b9c <HAL_RCC_OscConfig+0x504>)
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	691b      	ldr	r3, [r3, #16]
 80049cc:	061b      	lsls	r3, r3, #24
 80049ce:	4973      	ldr	r1, [pc, #460]	; (8004b9c <HAL_RCC_OscConfig+0x504>)
 80049d0:	4313      	orrs	r3, r2
 80049d2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80049d4:	e040      	b.n	8004a58 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d023      	beq.n	8004a26 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049de:	4b6f      	ldr	r3, [pc, #444]	; (8004b9c <HAL_RCC_OscConfig+0x504>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a6e      	ldr	r2, [pc, #440]	; (8004b9c <HAL_RCC_OscConfig+0x504>)
 80049e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049ea:	f7fe f8d5 	bl	8002b98 <HAL_GetTick>
 80049ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80049f0:	e008      	b.n	8004a04 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049f2:	f7fe f8d1 	bl	8002b98 <HAL_GetTick>
 80049f6:	4602      	mov	r2, r0
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	1ad3      	subs	r3, r2, r3
 80049fc:	2b02      	cmp	r3, #2
 80049fe:	d901      	bls.n	8004a04 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004a00:	2303      	movs	r3, #3
 8004a02:	e25b      	b.n	8004ebc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a04:	4b65      	ldr	r3, [pc, #404]	; (8004b9c <HAL_RCC_OscConfig+0x504>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d0f0      	beq.n	80049f2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a10:	4b62      	ldr	r3, [pc, #392]	; (8004b9c <HAL_RCC_OscConfig+0x504>)
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	691b      	ldr	r3, [r3, #16]
 8004a1c:	061b      	lsls	r3, r3, #24
 8004a1e:	495f      	ldr	r1, [pc, #380]	; (8004b9c <HAL_RCC_OscConfig+0x504>)
 8004a20:	4313      	orrs	r3, r2
 8004a22:	604b      	str	r3, [r1, #4]
 8004a24:	e018      	b.n	8004a58 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a26:	4b5d      	ldr	r3, [pc, #372]	; (8004b9c <HAL_RCC_OscConfig+0x504>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a5c      	ldr	r2, [pc, #368]	; (8004b9c <HAL_RCC_OscConfig+0x504>)
 8004a2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a32:	f7fe f8b1 	bl	8002b98 <HAL_GetTick>
 8004a36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004a38:	e008      	b.n	8004a4c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a3a:	f7fe f8ad 	bl	8002b98 <HAL_GetTick>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	1ad3      	subs	r3, r2, r3
 8004a44:	2b02      	cmp	r3, #2
 8004a46:	d901      	bls.n	8004a4c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004a48:	2303      	movs	r3, #3
 8004a4a:	e237      	b.n	8004ebc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004a4c:	4b53      	ldr	r3, [pc, #332]	; (8004b9c <HAL_RCC_OscConfig+0x504>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d1f0      	bne.n	8004a3a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 0308 	and.w	r3, r3, #8
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d03c      	beq.n	8004ade <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	695b      	ldr	r3, [r3, #20]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d01c      	beq.n	8004aa6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a6c:	4b4b      	ldr	r3, [pc, #300]	; (8004b9c <HAL_RCC_OscConfig+0x504>)
 8004a6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a72:	4a4a      	ldr	r2, [pc, #296]	; (8004b9c <HAL_RCC_OscConfig+0x504>)
 8004a74:	f043 0301 	orr.w	r3, r3, #1
 8004a78:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a7c:	f7fe f88c 	bl	8002b98 <HAL_GetTick>
 8004a80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004a82:	e008      	b.n	8004a96 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a84:	f7fe f888 	bl	8002b98 <HAL_GetTick>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	1ad3      	subs	r3, r2, r3
 8004a8e:	2b02      	cmp	r3, #2
 8004a90:	d901      	bls.n	8004a96 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004a92:	2303      	movs	r3, #3
 8004a94:	e212      	b.n	8004ebc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004a96:	4b41      	ldr	r3, [pc, #260]	; (8004b9c <HAL_RCC_OscConfig+0x504>)
 8004a98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a9c:	f003 0302 	and.w	r3, r3, #2
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d0ef      	beq.n	8004a84 <HAL_RCC_OscConfig+0x3ec>
 8004aa4:	e01b      	b.n	8004ade <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004aa6:	4b3d      	ldr	r3, [pc, #244]	; (8004b9c <HAL_RCC_OscConfig+0x504>)
 8004aa8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004aac:	4a3b      	ldr	r2, [pc, #236]	; (8004b9c <HAL_RCC_OscConfig+0x504>)
 8004aae:	f023 0301 	bic.w	r3, r3, #1
 8004ab2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ab6:	f7fe f86f 	bl	8002b98 <HAL_GetTick>
 8004aba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004abc:	e008      	b.n	8004ad0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004abe:	f7fe f86b 	bl	8002b98 <HAL_GetTick>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	1ad3      	subs	r3, r2, r3
 8004ac8:	2b02      	cmp	r3, #2
 8004aca:	d901      	bls.n	8004ad0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004acc:	2303      	movs	r3, #3
 8004ace:	e1f5      	b.n	8004ebc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ad0:	4b32      	ldr	r3, [pc, #200]	; (8004b9c <HAL_RCC_OscConfig+0x504>)
 8004ad2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ad6:	f003 0302 	and.w	r3, r3, #2
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d1ef      	bne.n	8004abe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 0304 	and.w	r3, r3, #4
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	f000 80a6 	beq.w	8004c38 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004aec:	2300      	movs	r3, #0
 8004aee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004af0:	4b2a      	ldr	r3, [pc, #168]	; (8004b9c <HAL_RCC_OscConfig+0x504>)
 8004af2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004af4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d10d      	bne.n	8004b18 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004afc:	4b27      	ldr	r3, [pc, #156]	; (8004b9c <HAL_RCC_OscConfig+0x504>)
 8004afe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b00:	4a26      	ldr	r2, [pc, #152]	; (8004b9c <HAL_RCC_OscConfig+0x504>)
 8004b02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b06:	6593      	str	r3, [r2, #88]	; 0x58
 8004b08:	4b24      	ldr	r3, [pc, #144]	; (8004b9c <HAL_RCC_OscConfig+0x504>)
 8004b0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b10:	60bb      	str	r3, [r7, #8]
 8004b12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b14:	2301      	movs	r3, #1
 8004b16:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b18:	4b21      	ldr	r3, [pc, #132]	; (8004ba0 <HAL_RCC_OscConfig+0x508>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d118      	bne.n	8004b56 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b24:	4b1e      	ldr	r3, [pc, #120]	; (8004ba0 <HAL_RCC_OscConfig+0x508>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a1d      	ldr	r2, [pc, #116]	; (8004ba0 <HAL_RCC_OscConfig+0x508>)
 8004b2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b2e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b30:	f7fe f832 	bl	8002b98 <HAL_GetTick>
 8004b34:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b36:	e008      	b.n	8004b4a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b38:	f7fe f82e 	bl	8002b98 <HAL_GetTick>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	2b02      	cmp	r3, #2
 8004b44:	d901      	bls.n	8004b4a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004b46:	2303      	movs	r3, #3
 8004b48:	e1b8      	b.n	8004ebc <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b4a:	4b15      	ldr	r3, [pc, #84]	; (8004ba0 <HAL_RCC_OscConfig+0x508>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d0f0      	beq.n	8004b38 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d108      	bne.n	8004b70 <HAL_RCC_OscConfig+0x4d8>
 8004b5e:	4b0f      	ldr	r3, [pc, #60]	; (8004b9c <HAL_RCC_OscConfig+0x504>)
 8004b60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b64:	4a0d      	ldr	r2, [pc, #52]	; (8004b9c <HAL_RCC_OscConfig+0x504>)
 8004b66:	f043 0301 	orr.w	r3, r3, #1
 8004b6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b6e:	e029      	b.n	8004bc4 <HAL_RCC_OscConfig+0x52c>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	2b05      	cmp	r3, #5
 8004b76:	d115      	bne.n	8004ba4 <HAL_RCC_OscConfig+0x50c>
 8004b78:	4b08      	ldr	r3, [pc, #32]	; (8004b9c <HAL_RCC_OscConfig+0x504>)
 8004b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b7e:	4a07      	ldr	r2, [pc, #28]	; (8004b9c <HAL_RCC_OscConfig+0x504>)
 8004b80:	f043 0304 	orr.w	r3, r3, #4
 8004b84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b88:	4b04      	ldr	r3, [pc, #16]	; (8004b9c <HAL_RCC_OscConfig+0x504>)
 8004b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b8e:	4a03      	ldr	r2, [pc, #12]	; (8004b9c <HAL_RCC_OscConfig+0x504>)
 8004b90:	f043 0301 	orr.w	r3, r3, #1
 8004b94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b98:	e014      	b.n	8004bc4 <HAL_RCC_OscConfig+0x52c>
 8004b9a:	bf00      	nop
 8004b9c:	40021000 	.word	0x40021000
 8004ba0:	40007000 	.word	0x40007000
 8004ba4:	4b9d      	ldr	r3, [pc, #628]	; (8004e1c <HAL_RCC_OscConfig+0x784>)
 8004ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004baa:	4a9c      	ldr	r2, [pc, #624]	; (8004e1c <HAL_RCC_OscConfig+0x784>)
 8004bac:	f023 0301 	bic.w	r3, r3, #1
 8004bb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004bb4:	4b99      	ldr	r3, [pc, #612]	; (8004e1c <HAL_RCC_OscConfig+0x784>)
 8004bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bba:	4a98      	ldr	r2, [pc, #608]	; (8004e1c <HAL_RCC_OscConfig+0x784>)
 8004bbc:	f023 0304 	bic.w	r3, r3, #4
 8004bc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d016      	beq.n	8004bfa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bcc:	f7fd ffe4 	bl	8002b98 <HAL_GetTick>
 8004bd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bd2:	e00a      	b.n	8004bea <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bd4:	f7fd ffe0 	bl	8002b98 <HAL_GetTick>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	f241 3288 	movw	r2, #5000	; 0x1388
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d901      	bls.n	8004bea <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	e168      	b.n	8004ebc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bea:	4b8c      	ldr	r3, [pc, #560]	; (8004e1c <HAL_RCC_OscConfig+0x784>)
 8004bec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bf0:	f003 0302 	and.w	r3, r3, #2
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d0ed      	beq.n	8004bd4 <HAL_RCC_OscConfig+0x53c>
 8004bf8:	e015      	b.n	8004c26 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bfa:	f7fd ffcd 	bl	8002b98 <HAL_GetTick>
 8004bfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004c00:	e00a      	b.n	8004c18 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c02:	f7fd ffc9 	bl	8002b98 <HAL_GetTick>
 8004c06:	4602      	mov	r2, r0
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	1ad3      	subs	r3, r2, r3
 8004c0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d901      	bls.n	8004c18 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004c14:	2303      	movs	r3, #3
 8004c16:	e151      	b.n	8004ebc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004c18:	4b80      	ldr	r3, [pc, #512]	; (8004e1c <HAL_RCC_OscConfig+0x784>)
 8004c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c1e:	f003 0302 	and.w	r3, r3, #2
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d1ed      	bne.n	8004c02 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c26:	7ffb      	ldrb	r3, [r7, #31]
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d105      	bne.n	8004c38 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c2c:	4b7b      	ldr	r3, [pc, #492]	; (8004e1c <HAL_RCC_OscConfig+0x784>)
 8004c2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c30:	4a7a      	ldr	r2, [pc, #488]	; (8004e1c <HAL_RCC_OscConfig+0x784>)
 8004c32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c36:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 0320 	and.w	r3, r3, #32
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d03c      	beq.n	8004cbe <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d01c      	beq.n	8004c86 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004c4c:	4b73      	ldr	r3, [pc, #460]	; (8004e1c <HAL_RCC_OscConfig+0x784>)
 8004c4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c52:	4a72      	ldr	r2, [pc, #456]	; (8004e1c <HAL_RCC_OscConfig+0x784>)
 8004c54:	f043 0301 	orr.w	r3, r3, #1
 8004c58:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c5c:	f7fd ff9c 	bl	8002b98 <HAL_GetTick>
 8004c60:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004c62:	e008      	b.n	8004c76 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004c64:	f7fd ff98 	bl	8002b98 <HAL_GetTick>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	1ad3      	subs	r3, r2, r3
 8004c6e:	2b02      	cmp	r3, #2
 8004c70:	d901      	bls.n	8004c76 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004c72:	2303      	movs	r3, #3
 8004c74:	e122      	b.n	8004ebc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004c76:	4b69      	ldr	r3, [pc, #420]	; (8004e1c <HAL_RCC_OscConfig+0x784>)
 8004c78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c7c:	f003 0302 	and.w	r3, r3, #2
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d0ef      	beq.n	8004c64 <HAL_RCC_OscConfig+0x5cc>
 8004c84:	e01b      	b.n	8004cbe <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004c86:	4b65      	ldr	r3, [pc, #404]	; (8004e1c <HAL_RCC_OscConfig+0x784>)
 8004c88:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c8c:	4a63      	ldr	r2, [pc, #396]	; (8004e1c <HAL_RCC_OscConfig+0x784>)
 8004c8e:	f023 0301 	bic.w	r3, r3, #1
 8004c92:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c96:	f7fd ff7f 	bl	8002b98 <HAL_GetTick>
 8004c9a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004c9c:	e008      	b.n	8004cb0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004c9e:	f7fd ff7b 	bl	8002b98 <HAL_GetTick>
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	1ad3      	subs	r3, r2, r3
 8004ca8:	2b02      	cmp	r3, #2
 8004caa:	d901      	bls.n	8004cb0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004cac:	2303      	movs	r3, #3
 8004cae:	e105      	b.n	8004ebc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004cb0:	4b5a      	ldr	r3, [pc, #360]	; (8004e1c <HAL_RCC_OscConfig+0x784>)
 8004cb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004cb6:	f003 0302 	and.w	r3, r3, #2
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d1ef      	bne.n	8004c9e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	f000 80f9 	beq.w	8004eba <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ccc:	2b02      	cmp	r3, #2
 8004cce:	f040 80cf 	bne.w	8004e70 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004cd2:	4b52      	ldr	r3, [pc, #328]	; (8004e1c <HAL_RCC_OscConfig+0x784>)
 8004cd4:	68db      	ldr	r3, [r3, #12]
 8004cd6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	f003 0203 	and.w	r2, r3, #3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d12c      	bne.n	8004d40 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cf0:	3b01      	subs	r3, #1
 8004cf2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d123      	bne.n	8004d40 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d02:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d11b      	bne.n	8004d40 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d12:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d113      	bne.n	8004d40 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d22:	085b      	lsrs	r3, r3, #1
 8004d24:	3b01      	subs	r3, #1
 8004d26:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d109      	bne.n	8004d40 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d36:	085b      	lsrs	r3, r3, #1
 8004d38:	3b01      	subs	r3, #1
 8004d3a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d071      	beq.n	8004e24 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004d40:	69bb      	ldr	r3, [r7, #24]
 8004d42:	2b0c      	cmp	r3, #12
 8004d44:	d068      	beq.n	8004e18 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004d46:	4b35      	ldr	r3, [pc, #212]	; (8004e1c <HAL_RCC_OscConfig+0x784>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d105      	bne.n	8004d5e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004d52:	4b32      	ldr	r3, [pc, #200]	; (8004e1c <HAL_RCC_OscConfig+0x784>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d001      	beq.n	8004d62 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e0ac      	b.n	8004ebc <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004d62:	4b2e      	ldr	r3, [pc, #184]	; (8004e1c <HAL_RCC_OscConfig+0x784>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a2d      	ldr	r2, [pc, #180]	; (8004e1c <HAL_RCC_OscConfig+0x784>)
 8004d68:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d6c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004d6e:	f7fd ff13 	bl	8002b98 <HAL_GetTick>
 8004d72:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d74:	e008      	b.n	8004d88 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d76:	f7fd ff0f 	bl	8002b98 <HAL_GetTick>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	1ad3      	subs	r3, r2, r3
 8004d80:	2b02      	cmp	r3, #2
 8004d82:	d901      	bls.n	8004d88 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004d84:	2303      	movs	r3, #3
 8004d86:	e099      	b.n	8004ebc <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d88:	4b24      	ldr	r3, [pc, #144]	; (8004e1c <HAL_RCC_OscConfig+0x784>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d1f0      	bne.n	8004d76 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d94:	4b21      	ldr	r3, [pc, #132]	; (8004e1c <HAL_RCC_OscConfig+0x784>)
 8004d96:	68da      	ldr	r2, [r3, #12]
 8004d98:	4b21      	ldr	r3, [pc, #132]	; (8004e20 <HAL_RCC_OscConfig+0x788>)
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	687a      	ldr	r2, [r7, #4]
 8004d9e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004da4:	3a01      	subs	r2, #1
 8004da6:	0112      	lsls	r2, r2, #4
 8004da8:	4311      	orrs	r1, r2
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004dae:	0212      	lsls	r2, r2, #8
 8004db0:	4311      	orrs	r1, r2
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004db6:	0852      	lsrs	r2, r2, #1
 8004db8:	3a01      	subs	r2, #1
 8004dba:	0552      	lsls	r2, r2, #21
 8004dbc:	4311      	orrs	r1, r2
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004dc2:	0852      	lsrs	r2, r2, #1
 8004dc4:	3a01      	subs	r2, #1
 8004dc6:	0652      	lsls	r2, r2, #25
 8004dc8:	4311      	orrs	r1, r2
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004dce:	06d2      	lsls	r2, r2, #27
 8004dd0:	430a      	orrs	r2, r1
 8004dd2:	4912      	ldr	r1, [pc, #72]	; (8004e1c <HAL_RCC_OscConfig+0x784>)
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004dd8:	4b10      	ldr	r3, [pc, #64]	; (8004e1c <HAL_RCC_OscConfig+0x784>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a0f      	ldr	r2, [pc, #60]	; (8004e1c <HAL_RCC_OscConfig+0x784>)
 8004dde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004de2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004de4:	4b0d      	ldr	r3, [pc, #52]	; (8004e1c <HAL_RCC_OscConfig+0x784>)
 8004de6:	68db      	ldr	r3, [r3, #12]
 8004de8:	4a0c      	ldr	r2, [pc, #48]	; (8004e1c <HAL_RCC_OscConfig+0x784>)
 8004dea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004dee:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004df0:	f7fd fed2 	bl	8002b98 <HAL_GetTick>
 8004df4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004df6:	e008      	b.n	8004e0a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004df8:	f7fd fece 	bl	8002b98 <HAL_GetTick>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	1ad3      	subs	r3, r2, r3
 8004e02:	2b02      	cmp	r3, #2
 8004e04:	d901      	bls.n	8004e0a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004e06:	2303      	movs	r3, #3
 8004e08:	e058      	b.n	8004ebc <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e0a:	4b04      	ldr	r3, [pc, #16]	; (8004e1c <HAL_RCC_OscConfig+0x784>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d0f0      	beq.n	8004df8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004e16:	e050      	b.n	8004eba <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	e04f      	b.n	8004ebc <HAL_RCC_OscConfig+0x824>
 8004e1c:	40021000 	.word	0x40021000
 8004e20:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e24:	4b27      	ldr	r3, [pc, #156]	; (8004ec4 <HAL_RCC_OscConfig+0x82c>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d144      	bne.n	8004eba <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004e30:	4b24      	ldr	r3, [pc, #144]	; (8004ec4 <HAL_RCC_OscConfig+0x82c>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a23      	ldr	r2, [pc, #140]	; (8004ec4 <HAL_RCC_OscConfig+0x82c>)
 8004e36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e3a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004e3c:	4b21      	ldr	r3, [pc, #132]	; (8004ec4 <HAL_RCC_OscConfig+0x82c>)
 8004e3e:	68db      	ldr	r3, [r3, #12]
 8004e40:	4a20      	ldr	r2, [pc, #128]	; (8004ec4 <HAL_RCC_OscConfig+0x82c>)
 8004e42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e46:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004e48:	f7fd fea6 	bl	8002b98 <HAL_GetTick>
 8004e4c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e4e:	e008      	b.n	8004e62 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e50:	f7fd fea2 	bl	8002b98 <HAL_GetTick>
 8004e54:	4602      	mov	r2, r0
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	2b02      	cmp	r3, #2
 8004e5c:	d901      	bls.n	8004e62 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8004e5e:	2303      	movs	r3, #3
 8004e60:	e02c      	b.n	8004ebc <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e62:	4b18      	ldr	r3, [pc, #96]	; (8004ec4 <HAL_RCC_OscConfig+0x82c>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d0f0      	beq.n	8004e50 <HAL_RCC_OscConfig+0x7b8>
 8004e6e:	e024      	b.n	8004eba <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004e70:	69bb      	ldr	r3, [r7, #24]
 8004e72:	2b0c      	cmp	r3, #12
 8004e74:	d01f      	beq.n	8004eb6 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e76:	4b13      	ldr	r3, [pc, #76]	; (8004ec4 <HAL_RCC_OscConfig+0x82c>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a12      	ldr	r2, [pc, #72]	; (8004ec4 <HAL_RCC_OscConfig+0x82c>)
 8004e7c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e82:	f7fd fe89 	bl	8002b98 <HAL_GetTick>
 8004e86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e88:	e008      	b.n	8004e9c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e8a:	f7fd fe85 	bl	8002b98 <HAL_GetTick>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	1ad3      	subs	r3, r2, r3
 8004e94:	2b02      	cmp	r3, #2
 8004e96:	d901      	bls.n	8004e9c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8004e98:	2303      	movs	r3, #3
 8004e9a:	e00f      	b.n	8004ebc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e9c:	4b09      	ldr	r3, [pc, #36]	; (8004ec4 <HAL_RCC_OscConfig+0x82c>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d1f0      	bne.n	8004e8a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004ea8:	4b06      	ldr	r3, [pc, #24]	; (8004ec4 <HAL_RCC_OscConfig+0x82c>)
 8004eaa:	68da      	ldr	r2, [r3, #12]
 8004eac:	4905      	ldr	r1, [pc, #20]	; (8004ec4 <HAL_RCC_OscConfig+0x82c>)
 8004eae:	4b06      	ldr	r3, [pc, #24]	; (8004ec8 <HAL_RCC_OscConfig+0x830>)
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	60cb      	str	r3, [r1, #12]
 8004eb4:	e001      	b.n	8004eba <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e000      	b.n	8004ebc <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8004eba:	2300      	movs	r3, #0
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3720      	adds	r7, #32
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}
 8004ec4:	40021000 	.word	0x40021000
 8004ec8:	feeefffc 	.word	0xfeeefffc

08004ecc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b086      	sub	sp, #24
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d101      	bne.n	8004ee4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	e11d      	b.n	8005120 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ee4:	4b90      	ldr	r3, [pc, #576]	; (8005128 <HAL_RCC_ClockConfig+0x25c>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 030f 	and.w	r3, r3, #15
 8004eec:	683a      	ldr	r2, [r7, #0]
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d910      	bls.n	8004f14 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ef2:	4b8d      	ldr	r3, [pc, #564]	; (8005128 <HAL_RCC_ClockConfig+0x25c>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f023 020f 	bic.w	r2, r3, #15
 8004efa:	498b      	ldr	r1, [pc, #556]	; (8005128 <HAL_RCC_ClockConfig+0x25c>)
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	4313      	orrs	r3, r2
 8004f00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f02:	4b89      	ldr	r3, [pc, #548]	; (8005128 <HAL_RCC_ClockConfig+0x25c>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f003 030f 	and.w	r3, r3, #15
 8004f0a:	683a      	ldr	r2, [r7, #0]
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d001      	beq.n	8004f14 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	e105      	b.n	8005120 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 0302 	and.w	r3, r3, #2
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d010      	beq.n	8004f42 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	689a      	ldr	r2, [r3, #8]
 8004f24:	4b81      	ldr	r3, [pc, #516]	; (800512c <HAL_RCC_ClockConfig+0x260>)
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d908      	bls.n	8004f42 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f30:	4b7e      	ldr	r3, [pc, #504]	; (800512c <HAL_RCC_ClockConfig+0x260>)
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	497b      	ldr	r1, [pc, #492]	; (800512c <HAL_RCC_ClockConfig+0x260>)
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 0301 	and.w	r3, r3, #1
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d079      	beq.n	8005042 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	2b03      	cmp	r3, #3
 8004f54:	d11e      	bne.n	8004f94 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f56:	4b75      	ldr	r3, [pc, #468]	; (800512c <HAL_RCC_ClockConfig+0x260>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d101      	bne.n	8004f66 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e0dc      	b.n	8005120 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8004f66:	f000 fa09 	bl	800537c <RCC_GetSysClockFreqFromPLLSource>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	4a70      	ldr	r2, [pc, #448]	; (8005130 <HAL_RCC_ClockConfig+0x264>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d946      	bls.n	8005000 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004f72:	4b6e      	ldr	r3, [pc, #440]	; (800512c <HAL_RCC_ClockConfig+0x260>)
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d140      	bne.n	8005000 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004f7e:	4b6b      	ldr	r3, [pc, #428]	; (800512c <HAL_RCC_ClockConfig+0x260>)
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f86:	4a69      	ldr	r2, [pc, #420]	; (800512c <HAL_RCC_ClockConfig+0x260>)
 8004f88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f8c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004f8e:	2380      	movs	r3, #128	; 0x80
 8004f90:	617b      	str	r3, [r7, #20]
 8004f92:	e035      	b.n	8005000 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	2b02      	cmp	r3, #2
 8004f9a:	d107      	bne.n	8004fac <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f9c:	4b63      	ldr	r3, [pc, #396]	; (800512c <HAL_RCC_ClockConfig+0x260>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d115      	bne.n	8004fd4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e0b9      	b.n	8005120 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d107      	bne.n	8004fc4 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004fb4:	4b5d      	ldr	r3, [pc, #372]	; (800512c <HAL_RCC_ClockConfig+0x260>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 0302 	and.w	r3, r3, #2
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d109      	bne.n	8004fd4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	e0ad      	b.n	8005120 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004fc4:	4b59      	ldr	r3, [pc, #356]	; (800512c <HAL_RCC_ClockConfig+0x260>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d101      	bne.n	8004fd4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e0a5      	b.n	8005120 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004fd4:	f000 f8b4 	bl	8005140 <HAL_RCC_GetSysClockFreq>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	4a55      	ldr	r2, [pc, #340]	; (8005130 <HAL_RCC_ClockConfig+0x264>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d90f      	bls.n	8005000 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004fe0:	4b52      	ldr	r3, [pc, #328]	; (800512c <HAL_RCC_ClockConfig+0x260>)
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d109      	bne.n	8005000 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004fec:	4b4f      	ldr	r3, [pc, #316]	; (800512c <HAL_RCC_ClockConfig+0x260>)
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ff4:	4a4d      	ldr	r2, [pc, #308]	; (800512c <HAL_RCC_ClockConfig+0x260>)
 8004ff6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ffa:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004ffc:	2380      	movs	r3, #128	; 0x80
 8004ffe:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005000:	4b4a      	ldr	r3, [pc, #296]	; (800512c <HAL_RCC_ClockConfig+0x260>)
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	f023 0203 	bic.w	r2, r3, #3
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	4947      	ldr	r1, [pc, #284]	; (800512c <HAL_RCC_ClockConfig+0x260>)
 800500e:	4313      	orrs	r3, r2
 8005010:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005012:	f7fd fdc1 	bl	8002b98 <HAL_GetTick>
 8005016:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005018:	e00a      	b.n	8005030 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800501a:	f7fd fdbd 	bl	8002b98 <HAL_GetTick>
 800501e:	4602      	mov	r2, r0
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	1ad3      	subs	r3, r2, r3
 8005024:	f241 3288 	movw	r2, #5000	; 0x1388
 8005028:	4293      	cmp	r3, r2
 800502a:	d901      	bls.n	8005030 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 800502c:	2303      	movs	r3, #3
 800502e:	e077      	b.n	8005120 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005030:	4b3e      	ldr	r3, [pc, #248]	; (800512c <HAL_RCC_ClockConfig+0x260>)
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	f003 020c 	and.w	r2, r3, #12
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	429a      	cmp	r2, r3
 8005040:	d1eb      	bne.n	800501a <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	2b80      	cmp	r3, #128	; 0x80
 8005046:	d105      	bne.n	8005054 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005048:	4b38      	ldr	r3, [pc, #224]	; (800512c <HAL_RCC_ClockConfig+0x260>)
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	4a37      	ldr	r2, [pc, #220]	; (800512c <HAL_RCC_ClockConfig+0x260>)
 800504e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005052:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 0302 	and.w	r3, r3, #2
 800505c:	2b00      	cmp	r3, #0
 800505e:	d010      	beq.n	8005082 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	689a      	ldr	r2, [r3, #8]
 8005064:	4b31      	ldr	r3, [pc, #196]	; (800512c <HAL_RCC_ClockConfig+0x260>)
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800506c:	429a      	cmp	r2, r3
 800506e:	d208      	bcs.n	8005082 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005070:	4b2e      	ldr	r3, [pc, #184]	; (800512c <HAL_RCC_ClockConfig+0x260>)
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	492b      	ldr	r1, [pc, #172]	; (800512c <HAL_RCC_ClockConfig+0x260>)
 800507e:	4313      	orrs	r3, r2
 8005080:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005082:	4b29      	ldr	r3, [pc, #164]	; (8005128 <HAL_RCC_ClockConfig+0x25c>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 030f 	and.w	r3, r3, #15
 800508a:	683a      	ldr	r2, [r7, #0]
 800508c:	429a      	cmp	r2, r3
 800508e:	d210      	bcs.n	80050b2 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005090:	4b25      	ldr	r3, [pc, #148]	; (8005128 <HAL_RCC_ClockConfig+0x25c>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f023 020f 	bic.w	r2, r3, #15
 8005098:	4923      	ldr	r1, [pc, #140]	; (8005128 <HAL_RCC_ClockConfig+0x25c>)
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	4313      	orrs	r3, r2
 800509e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050a0:	4b21      	ldr	r3, [pc, #132]	; (8005128 <HAL_RCC_ClockConfig+0x25c>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 030f 	and.w	r3, r3, #15
 80050a8:	683a      	ldr	r2, [r7, #0]
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d001      	beq.n	80050b2 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	e036      	b.n	8005120 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 0304 	and.w	r3, r3, #4
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d008      	beq.n	80050d0 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050be:	4b1b      	ldr	r3, [pc, #108]	; (800512c <HAL_RCC_ClockConfig+0x260>)
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	68db      	ldr	r3, [r3, #12]
 80050ca:	4918      	ldr	r1, [pc, #96]	; (800512c <HAL_RCC_ClockConfig+0x260>)
 80050cc:	4313      	orrs	r3, r2
 80050ce:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f003 0308 	and.w	r3, r3, #8
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d009      	beq.n	80050f0 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80050dc:	4b13      	ldr	r3, [pc, #76]	; (800512c <HAL_RCC_ClockConfig+0x260>)
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	691b      	ldr	r3, [r3, #16]
 80050e8:	00db      	lsls	r3, r3, #3
 80050ea:	4910      	ldr	r1, [pc, #64]	; (800512c <HAL_RCC_ClockConfig+0x260>)
 80050ec:	4313      	orrs	r3, r2
 80050ee:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80050f0:	f000 f826 	bl	8005140 <HAL_RCC_GetSysClockFreq>
 80050f4:	4602      	mov	r2, r0
 80050f6:	4b0d      	ldr	r3, [pc, #52]	; (800512c <HAL_RCC_ClockConfig+0x260>)
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	091b      	lsrs	r3, r3, #4
 80050fc:	f003 030f 	and.w	r3, r3, #15
 8005100:	490c      	ldr	r1, [pc, #48]	; (8005134 <HAL_RCC_ClockConfig+0x268>)
 8005102:	5ccb      	ldrb	r3, [r1, r3]
 8005104:	f003 031f 	and.w	r3, r3, #31
 8005108:	fa22 f303 	lsr.w	r3, r2, r3
 800510c:	4a0a      	ldr	r2, [pc, #40]	; (8005138 <HAL_RCC_ClockConfig+0x26c>)
 800510e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005110:	4b0a      	ldr	r3, [pc, #40]	; (800513c <HAL_RCC_ClockConfig+0x270>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4618      	mov	r0, r3
 8005116:	f7fd fcef 	bl	8002af8 <HAL_InitTick>
 800511a:	4603      	mov	r3, r0
 800511c:	73fb      	strb	r3, [r7, #15]

  return status;
 800511e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005120:	4618      	mov	r0, r3
 8005122:	3718      	adds	r7, #24
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}
 8005128:	40022000 	.word	0x40022000
 800512c:	40021000 	.word	0x40021000
 8005130:	04c4b400 	.word	0x04c4b400
 8005134:	0800b100 	.word	0x0800b100
 8005138:	20000004 	.word	0x20000004
 800513c:	20000008 	.word	0x20000008

08005140 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005140:	b480      	push	{r7}
 8005142:	b089      	sub	sp, #36	; 0x24
 8005144:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005146:	2300      	movs	r3, #0
 8005148:	61fb      	str	r3, [r7, #28]
 800514a:	2300      	movs	r3, #0
 800514c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800514e:	4b3e      	ldr	r3, [pc, #248]	; (8005248 <HAL_RCC_GetSysClockFreq+0x108>)
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	f003 030c 	and.w	r3, r3, #12
 8005156:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005158:	4b3b      	ldr	r3, [pc, #236]	; (8005248 <HAL_RCC_GetSysClockFreq+0x108>)
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	f003 0303 	and.w	r3, r3, #3
 8005160:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d005      	beq.n	8005174 <HAL_RCC_GetSysClockFreq+0x34>
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	2b0c      	cmp	r3, #12
 800516c:	d121      	bne.n	80051b2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2b01      	cmp	r3, #1
 8005172:	d11e      	bne.n	80051b2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005174:	4b34      	ldr	r3, [pc, #208]	; (8005248 <HAL_RCC_GetSysClockFreq+0x108>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 0308 	and.w	r3, r3, #8
 800517c:	2b00      	cmp	r3, #0
 800517e:	d107      	bne.n	8005190 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005180:	4b31      	ldr	r3, [pc, #196]	; (8005248 <HAL_RCC_GetSysClockFreq+0x108>)
 8005182:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005186:	0a1b      	lsrs	r3, r3, #8
 8005188:	f003 030f 	and.w	r3, r3, #15
 800518c:	61fb      	str	r3, [r7, #28]
 800518e:	e005      	b.n	800519c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005190:	4b2d      	ldr	r3, [pc, #180]	; (8005248 <HAL_RCC_GetSysClockFreq+0x108>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	091b      	lsrs	r3, r3, #4
 8005196:	f003 030f 	and.w	r3, r3, #15
 800519a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800519c:	4a2b      	ldr	r2, [pc, #172]	; (800524c <HAL_RCC_GetSysClockFreq+0x10c>)
 800519e:	69fb      	ldr	r3, [r7, #28]
 80051a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051a4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d10d      	bne.n	80051c8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80051ac:	69fb      	ldr	r3, [r7, #28]
 80051ae:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80051b0:	e00a      	b.n	80051c8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	2b04      	cmp	r3, #4
 80051b6:	d102      	bne.n	80051be <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80051b8:	4b25      	ldr	r3, [pc, #148]	; (8005250 <HAL_RCC_GetSysClockFreq+0x110>)
 80051ba:	61bb      	str	r3, [r7, #24]
 80051bc:	e004      	b.n	80051c8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	2b08      	cmp	r3, #8
 80051c2:	d101      	bne.n	80051c8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80051c4:	4b23      	ldr	r3, [pc, #140]	; (8005254 <HAL_RCC_GetSysClockFreq+0x114>)
 80051c6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	2b0c      	cmp	r3, #12
 80051cc:	d134      	bne.n	8005238 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80051ce:	4b1e      	ldr	r3, [pc, #120]	; (8005248 <HAL_RCC_GetSysClockFreq+0x108>)
 80051d0:	68db      	ldr	r3, [r3, #12]
 80051d2:	f003 0303 	and.w	r3, r3, #3
 80051d6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	2b02      	cmp	r3, #2
 80051dc:	d003      	beq.n	80051e6 <HAL_RCC_GetSysClockFreq+0xa6>
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	2b03      	cmp	r3, #3
 80051e2:	d003      	beq.n	80051ec <HAL_RCC_GetSysClockFreq+0xac>
 80051e4:	e005      	b.n	80051f2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80051e6:	4b1a      	ldr	r3, [pc, #104]	; (8005250 <HAL_RCC_GetSysClockFreq+0x110>)
 80051e8:	617b      	str	r3, [r7, #20]
      break;
 80051ea:	e005      	b.n	80051f8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80051ec:	4b19      	ldr	r3, [pc, #100]	; (8005254 <HAL_RCC_GetSysClockFreq+0x114>)
 80051ee:	617b      	str	r3, [r7, #20]
      break;
 80051f0:	e002      	b.n	80051f8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	617b      	str	r3, [r7, #20]
      break;
 80051f6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80051f8:	4b13      	ldr	r3, [pc, #76]	; (8005248 <HAL_RCC_GetSysClockFreq+0x108>)
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	091b      	lsrs	r3, r3, #4
 80051fe:	f003 030f 	and.w	r3, r3, #15
 8005202:	3301      	adds	r3, #1
 8005204:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005206:	4b10      	ldr	r3, [pc, #64]	; (8005248 <HAL_RCC_GetSysClockFreq+0x108>)
 8005208:	68db      	ldr	r3, [r3, #12]
 800520a:	0a1b      	lsrs	r3, r3, #8
 800520c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005210:	697a      	ldr	r2, [r7, #20]
 8005212:	fb03 f202 	mul.w	r2, r3, r2
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	fbb2 f3f3 	udiv	r3, r2, r3
 800521c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800521e:	4b0a      	ldr	r3, [pc, #40]	; (8005248 <HAL_RCC_GetSysClockFreq+0x108>)
 8005220:	68db      	ldr	r3, [r3, #12]
 8005222:	0e5b      	lsrs	r3, r3, #25
 8005224:	f003 0303 	and.w	r3, r3, #3
 8005228:	3301      	adds	r3, #1
 800522a:	005b      	lsls	r3, r3, #1
 800522c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800522e:	697a      	ldr	r2, [r7, #20]
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	fbb2 f3f3 	udiv	r3, r2, r3
 8005236:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005238:	69bb      	ldr	r3, [r7, #24]
}
 800523a:	4618      	mov	r0, r3
 800523c:	3724      	adds	r7, #36	; 0x24
 800523e:	46bd      	mov	sp, r7
 8005240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005244:	4770      	bx	lr
 8005246:	bf00      	nop
 8005248:	40021000 	.word	0x40021000
 800524c:	0800b118 	.word	0x0800b118
 8005250:	00f42400 	.word	0x00f42400
 8005254:	007a1200 	.word	0x007a1200

08005258 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005258:	b480      	push	{r7}
 800525a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800525c:	4b03      	ldr	r3, [pc, #12]	; (800526c <HAL_RCC_GetHCLKFreq+0x14>)
 800525e:	681b      	ldr	r3, [r3, #0]
}
 8005260:	4618      	mov	r0, r3
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr
 800526a:	bf00      	nop
 800526c:	20000004 	.word	0x20000004

08005270 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005274:	f7ff fff0 	bl	8005258 <HAL_RCC_GetHCLKFreq>
 8005278:	4602      	mov	r2, r0
 800527a:	4b06      	ldr	r3, [pc, #24]	; (8005294 <HAL_RCC_GetPCLK1Freq+0x24>)
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	0a1b      	lsrs	r3, r3, #8
 8005280:	f003 0307 	and.w	r3, r3, #7
 8005284:	4904      	ldr	r1, [pc, #16]	; (8005298 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005286:	5ccb      	ldrb	r3, [r1, r3]
 8005288:	f003 031f 	and.w	r3, r3, #31
 800528c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005290:	4618      	mov	r0, r3
 8005292:	bd80      	pop	{r7, pc}
 8005294:	40021000 	.word	0x40021000
 8005298:	0800b110 	.word	0x0800b110

0800529c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80052a0:	f7ff ffda 	bl	8005258 <HAL_RCC_GetHCLKFreq>
 80052a4:	4602      	mov	r2, r0
 80052a6:	4b06      	ldr	r3, [pc, #24]	; (80052c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	0adb      	lsrs	r3, r3, #11
 80052ac:	f003 0307 	and.w	r3, r3, #7
 80052b0:	4904      	ldr	r1, [pc, #16]	; (80052c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80052b2:	5ccb      	ldrb	r3, [r1, r3]
 80052b4:	f003 031f 	and.w	r3, r3, #31
 80052b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052bc:	4618      	mov	r0, r3
 80052be:	bd80      	pop	{r7, pc}
 80052c0:	40021000 	.word	0x40021000
 80052c4:	0800b110 	.word	0x0800b110

080052c8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b086      	sub	sp, #24
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80052d0:	2300      	movs	r3, #0
 80052d2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80052d4:	4b27      	ldr	r3, [pc, #156]	; (8005374 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80052d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d003      	beq.n	80052e8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80052e0:	f7ff f906 	bl	80044f0 <HAL_PWREx_GetVoltageRange>
 80052e4:	6178      	str	r0, [r7, #20]
 80052e6:	e014      	b.n	8005312 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80052e8:	4b22      	ldr	r3, [pc, #136]	; (8005374 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80052ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052ec:	4a21      	ldr	r2, [pc, #132]	; (8005374 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80052ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052f2:	6593      	str	r3, [r2, #88]	; 0x58
 80052f4:	4b1f      	ldr	r3, [pc, #124]	; (8005374 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80052f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052fc:	60fb      	str	r3, [r7, #12]
 80052fe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005300:	f7ff f8f6 	bl	80044f0 <HAL_PWREx_GetVoltageRange>
 8005304:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005306:	4b1b      	ldr	r3, [pc, #108]	; (8005374 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800530a:	4a1a      	ldr	r2, [pc, #104]	; (8005374 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800530c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005310:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005318:	d10b      	bne.n	8005332 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2b80      	cmp	r3, #128	; 0x80
 800531e:	d913      	bls.n	8005348 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2ba0      	cmp	r3, #160	; 0xa0
 8005324:	d902      	bls.n	800532c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005326:	2302      	movs	r3, #2
 8005328:	613b      	str	r3, [r7, #16]
 800532a:	e00d      	b.n	8005348 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800532c:	2301      	movs	r3, #1
 800532e:	613b      	str	r3, [r7, #16]
 8005330:	e00a      	b.n	8005348 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2b7f      	cmp	r3, #127	; 0x7f
 8005336:	d902      	bls.n	800533e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8005338:	2302      	movs	r3, #2
 800533a:	613b      	str	r3, [r7, #16]
 800533c:	e004      	b.n	8005348 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2b70      	cmp	r3, #112	; 0x70
 8005342:	d101      	bne.n	8005348 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005344:	2301      	movs	r3, #1
 8005346:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005348:	4b0b      	ldr	r3, [pc, #44]	; (8005378 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f023 020f 	bic.w	r2, r3, #15
 8005350:	4909      	ldr	r1, [pc, #36]	; (8005378 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	4313      	orrs	r3, r2
 8005356:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005358:	4b07      	ldr	r3, [pc, #28]	; (8005378 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f003 030f 	and.w	r3, r3, #15
 8005360:	693a      	ldr	r2, [r7, #16]
 8005362:	429a      	cmp	r2, r3
 8005364:	d001      	beq.n	800536a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	e000      	b.n	800536c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800536a:	2300      	movs	r3, #0
}
 800536c:	4618      	mov	r0, r3
 800536e:	3718      	adds	r7, #24
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}
 8005374:	40021000 	.word	0x40021000
 8005378:	40022000 	.word	0x40022000

0800537c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800537c:	b480      	push	{r7}
 800537e:	b087      	sub	sp, #28
 8005380:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005382:	4b2d      	ldr	r3, [pc, #180]	; (8005438 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005384:	68db      	ldr	r3, [r3, #12]
 8005386:	f003 0303 	and.w	r3, r3, #3
 800538a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2b03      	cmp	r3, #3
 8005390:	d00b      	beq.n	80053aa <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2b03      	cmp	r3, #3
 8005396:	d825      	bhi.n	80053e4 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2b01      	cmp	r3, #1
 800539c:	d008      	beq.n	80053b0 <RCC_GetSysClockFreqFromPLLSource+0x34>
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2b02      	cmp	r3, #2
 80053a2:	d11f      	bne.n	80053e4 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80053a4:	4b25      	ldr	r3, [pc, #148]	; (800543c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80053a6:	613b      	str	r3, [r7, #16]
    break;
 80053a8:	e01f      	b.n	80053ea <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80053aa:	4b25      	ldr	r3, [pc, #148]	; (8005440 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80053ac:	613b      	str	r3, [r7, #16]
    break;
 80053ae:	e01c      	b.n	80053ea <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80053b0:	4b21      	ldr	r3, [pc, #132]	; (8005438 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f003 0308 	and.w	r3, r3, #8
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d107      	bne.n	80053cc <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80053bc:	4b1e      	ldr	r3, [pc, #120]	; (8005438 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80053be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053c2:	0a1b      	lsrs	r3, r3, #8
 80053c4:	f003 030f 	and.w	r3, r3, #15
 80053c8:	617b      	str	r3, [r7, #20]
 80053ca:	e005      	b.n	80053d8 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80053cc:	4b1a      	ldr	r3, [pc, #104]	; (8005438 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	091b      	lsrs	r3, r3, #4
 80053d2:	f003 030f 	and.w	r3, r3, #15
 80053d6:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80053d8:	4a1a      	ldr	r2, [pc, #104]	; (8005444 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053e0:	613b      	str	r3, [r7, #16]
    break;
 80053e2:	e002      	b.n	80053ea <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80053e4:	2300      	movs	r3, #0
 80053e6:	613b      	str	r3, [r7, #16]
    break;
 80053e8:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80053ea:	4b13      	ldr	r3, [pc, #76]	; (8005438 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80053ec:	68db      	ldr	r3, [r3, #12]
 80053ee:	091b      	lsrs	r3, r3, #4
 80053f0:	f003 030f 	and.w	r3, r3, #15
 80053f4:	3301      	adds	r3, #1
 80053f6:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80053f8:	4b0f      	ldr	r3, [pc, #60]	; (8005438 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	0a1b      	lsrs	r3, r3, #8
 80053fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005402:	693a      	ldr	r2, [r7, #16]
 8005404:	fb03 f202 	mul.w	r2, r3, r2
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	fbb2 f3f3 	udiv	r3, r2, r3
 800540e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005410:	4b09      	ldr	r3, [pc, #36]	; (8005438 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005412:	68db      	ldr	r3, [r3, #12]
 8005414:	0e5b      	lsrs	r3, r3, #25
 8005416:	f003 0303 	and.w	r3, r3, #3
 800541a:	3301      	adds	r3, #1
 800541c:	005b      	lsls	r3, r3, #1
 800541e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005420:	693a      	ldr	r2, [r7, #16]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	fbb2 f3f3 	udiv	r3, r2, r3
 8005428:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800542a:	683b      	ldr	r3, [r7, #0]
}
 800542c:	4618      	mov	r0, r3
 800542e:	371c      	adds	r7, #28
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr
 8005438:	40021000 	.word	0x40021000
 800543c:	00f42400 	.word	0x00f42400
 8005440:	007a1200 	.word	0x007a1200
 8005444:	0800b118 	.word	0x0800b118

08005448 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b086      	sub	sp, #24
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005450:	2300      	movs	r3, #0
 8005452:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005454:	2300      	movs	r3, #0
 8005456:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005460:	2b00      	cmp	r3, #0
 8005462:	d040      	beq.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005468:	2b80      	cmp	r3, #128	; 0x80
 800546a:	d02a      	beq.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800546c:	2b80      	cmp	r3, #128	; 0x80
 800546e:	d825      	bhi.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005470:	2b60      	cmp	r3, #96	; 0x60
 8005472:	d026      	beq.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005474:	2b60      	cmp	r3, #96	; 0x60
 8005476:	d821      	bhi.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005478:	2b40      	cmp	r3, #64	; 0x40
 800547a:	d006      	beq.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x42>
 800547c:	2b40      	cmp	r3, #64	; 0x40
 800547e:	d81d      	bhi.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005480:	2b00      	cmp	r3, #0
 8005482:	d009      	beq.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8005484:	2b20      	cmp	r3, #32
 8005486:	d010      	beq.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005488:	e018      	b.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800548a:	4b89      	ldr	r3, [pc, #548]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800548c:	68db      	ldr	r3, [r3, #12]
 800548e:	4a88      	ldr	r2, [pc, #544]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005490:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005494:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005496:	e015      	b.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	3304      	adds	r3, #4
 800549c:	2100      	movs	r1, #0
 800549e:	4618      	mov	r0, r3
 80054a0:	f001 fa34 	bl	800690c <RCCEx_PLLSAI1_Config>
 80054a4:	4603      	mov	r3, r0
 80054a6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80054a8:	e00c      	b.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	3320      	adds	r3, #32
 80054ae:	2100      	movs	r1, #0
 80054b0:	4618      	mov	r0, r3
 80054b2:	f001 fb1f 	bl	8006af4 <RCCEx_PLLSAI2_Config>
 80054b6:	4603      	mov	r3, r0
 80054b8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80054ba:	e003      	b.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	74fb      	strb	r3, [r7, #19]
      break;
 80054c0:	e000      	b.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80054c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054c4:	7cfb      	ldrb	r3, [r7, #19]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d10b      	bne.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80054ca:	4b79      	ldr	r3, [pc, #484]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80054cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80054d0:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054d8:	4975      	ldr	r1, [pc, #468]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80054da:	4313      	orrs	r3, r2
 80054dc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80054e0:	e001      	b.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054e2:	7cfb      	ldrb	r3, [r7, #19]
 80054e4:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d047      	beq.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054fa:	d030      	beq.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x116>
 80054fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005500:	d82a      	bhi.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005502:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005506:	d02a      	beq.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005508:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800550c:	d824      	bhi.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800550e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005512:	d008      	beq.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005514:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005518:	d81e      	bhi.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800551a:	2b00      	cmp	r3, #0
 800551c:	d00a      	beq.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800551e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005522:	d010      	beq.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005524:	e018      	b.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005526:	4b62      	ldr	r3, [pc, #392]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005528:	68db      	ldr	r3, [r3, #12]
 800552a:	4a61      	ldr	r2, [pc, #388]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800552c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005530:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005532:	e015      	b.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	3304      	adds	r3, #4
 8005538:	2100      	movs	r1, #0
 800553a:	4618      	mov	r0, r3
 800553c:	f001 f9e6 	bl	800690c <RCCEx_PLLSAI1_Config>
 8005540:	4603      	mov	r3, r0
 8005542:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005544:	e00c      	b.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	3320      	adds	r3, #32
 800554a:	2100      	movs	r1, #0
 800554c:	4618      	mov	r0, r3
 800554e:	f001 fad1 	bl	8006af4 <RCCEx_PLLSAI2_Config>
 8005552:	4603      	mov	r3, r0
 8005554:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005556:	e003      	b.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	74fb      	strb	r3, [r7, #19]
      break;
 800555c:	e000      	b.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800555e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005560:	7cfb      	ldrb	r3, [r7, #19]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d10b      	bne.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005566:	4b52      	ldr	r3, [pc, #328]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005568:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800556c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005574:	494e      	ldr	r1, [pc, #312]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005576:	4313      	orrs	r3, r2
 8005578:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800557c:	e001      	b.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800557e:	7cfb      	ldrb	r3, [r7, #19]
 8005580:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800558a:	2b00      	cmp	r3, #0
 800558c:	f000 809f 	beq.w	80056ce <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005590:	2300      	movs	r3, #0
 8005592:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005594:	4b46      	ldr	r3, [pc, #280]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005598:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800559c:	2b00      	cmp	r3, #0
 800559e:	d101      	bne.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80055a0:	2301      	movs	r3, #1
 80055a2:	e000      	b.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80055a4:	2300      	movs	r3, #0
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d00d      	beq.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055aa:	4b41      	ldr	r3, [pc, #260]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80055ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055ae:	4a40      	ldr	r2, [pc, #256]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80055b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055b4:	6593      	str	r3, [r2, #88]	; 0x58
 80055b6:	4b3e      	ldr	r3, [pc, #248]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80055b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055be:	60bb      	str	r3, [r7, #8]
 80055c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055c2:	2301      	movs	r3, #1
 80055c4:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80055c6:	4b3b      	ldr	r3, [pc, #236]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a3a      	ldr	r2, [pc, #232]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80055cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055d0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80055d2:	f7fd fae1 	bl	8002b98 <HAL_GetTick>
 80055d6:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80055d8:	e009      	b.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055da:	f7fd fadd 	bl	8002b98 <HAL_GetTick>
 80055de:	4602      	mov	r2, r0
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	1ad3      	subs	r3, r2, r3
 80055e4:	2b02      	cmp	r3, #2
 80055e6:	d902      	bls.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80055e8:	2303      	movs	r3, #3
 80055ea:	74fb      	strb	r3, [r7, #19]
        break;
 80055ec:	e005      	b.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80055ee:	4b31      	ldr	r3, [pc, #196]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d0ef      	beq.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80055fa:	7cfb      	ldrb	r3, [r7, #19]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d15b      	bne.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005600:	4b2b      	ldr	r3, [pc, #172]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005602:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005606:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800560a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d01f      	beq.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005618:	697a      	ldr	r2, [r7, #20]
 800561a:	429a      	cmp	r2, r3
 800561c:	d019      	beq.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800561e:	4b24      	ldr	r3, [pc, #144]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005620:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005624:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005628:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800562a:	4b21      	ldr	r3, [pc, #132]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800562c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005630:	4a1f      	ldr	r2, [pc, #124]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005632:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005636:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800563a:	4b1d      	ldr	r3, [pc, #116]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800563c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005640:	4a1b      	ldr	r2, [pc, #108]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005642:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005646:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800564a:	4a19      	ldr	r2, [pc, #100]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	f003 0301 	and.w	r3, r3, #1
 8005658:	2b00      	cmp	r3, #0
 800565a:	d016      	beq.n	800568a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800565c:	f7fd fa9c 	bl	8002b98 <HAL_GetTick>
 8005660:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005662:	e00b      	b.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005664:	f7fd fa98 	bl	8002b98 <HAL_GetTick>
 8005668:	4602      	mov	r2, r0
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	1ad3      	subs	r3, r2, r3
 800566e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005672:	4293      	cmp	r3, r2
 8005674:	d902      	bls.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8005676:	2303      	movs	r3, #3
 8005678:	74fb      	strb	r3, [r7, #19]
            break;
 800567a:	e006      	b.n	800568a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800567c:	4b0c      	ldr	r3, [pc, #48]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800567e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005682:	f003 0302 	and.w	r3, r3, #2
 8005686:	2b00      	cmp	r3, #0
 8005688:	d0ec      	beq.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800568a:	7cfb      	ldrb	r3, [r7, #19]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d10c      	bne.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005690:	4b07      	ldr	r3, [pc, #28]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005696:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056a0:	4903      	ldr	r1, [pc, #12]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80056a2:	4313      	orrs	r3, r2
 80056a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80056a8:	e008      	b.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80056aa:	7cfb      	ldrb	r3, [r7, #19]
 80056ac:	74bb      	strb	r3, [r7, #18]
 80056ae:	e005      	b.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x274>
 80056b0:	40021000 	.word	0x40021000
 80056b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056b8:	7cfb      	ldrb	r3, [r7, #19]
 80056ba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80056bc:	7c7b      	ldrb	r3, [r7, #17]
 80056be:	2b01      	cmp	r3, #1
 80056c0:	d105      	bne.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056c2:	4ba0      	ldr	r3, [pc, #640]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056c6:	4a9f      	ldr	r2, [pc, #636]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056cc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f003 0301 	and.w	r3, r3, #1
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d00a      	beq.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80056da:	4b9a      	ldr	r3, [pc, #616]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056e0:	f023 0203 	bic.w	r2, r3, #3
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056e8:	4996      	ldr	r1, [pc, #600]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056ea:	4313      	orrs	r3, r2
 80056ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f003 0302 	and.w	r3, r3, #2
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d00a      	beq.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80056fc:	4b91      	ldr	r3, [pc, #580]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005702:	f023 020c 	bic.w	r2, r3, #12
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800570a:	498e      	ldr	r1, [pc, #568]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800570c:	4313      	orrs	r3, r2
 800570e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f003 0304 	and.w	r3, r3, #4
 800571a:	2b00      	cmp	r3, #0
 800571c:	d00a      	beq.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800571e:	4b89      	ldr	r3, [pc, #548]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005720:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005724:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800572c:	4985      	ldr	r1, [pc, #532]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800572e:	4313      	orrs	r3, r2
 8005730:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f003 0308 	and.w	r3, r3, #8
 800573c:	2b00      	cmp	r3, #0
 800573e:	d00a      	beq.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005740:	4b80      	ldr	r3, [pc, #512]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005746:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800574e:	497d      	ldr	r1, [pc, #500]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005750:	4313      	orrs	r3, r2
 8005752:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f003 0310 	and.w	r3, r3, #16
 800575e:	2b00      	cmp	r3, #0
 8005760:	d00a      	beq.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005762:	4b78      	ldr	r3, [pc, #480]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005764:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005768:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005770:	4974      	ldr	r1, [pc, #464]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005772:	4313      	orrs	r3, r2
 8005774:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f003 0320 	and.w	r3, r3, #32
 8005780:	2b00      	cmp	r3, #0
 8005782:	d00a      	beq.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005784:	4b6f      	ldr	r3, [pc, #444]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800578a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005792:	496c      	ldr	r1, [pc, #432]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005794:	4313      	orrs	r3, r2
 8005796:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d00a      	beq.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80057a6:	4b67      	ldr	r3, [pc, #412]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80057a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057ac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057b4:	4963      	ldr	r1, [pc, #396]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80057b6:	4313      	orrs	r3, r2
 80057b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d00a      	beq.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80057c8:	4b5e      	ldr	r3, [pc, #376]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80057ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057ce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057d6:	495b      	ldr	r1, [pc, #364]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80057d8:	4313      	orrs	r3, r2
 80057da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d00a      	beq.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80057ea:	4b56      	ldr	r3, [pc, #344]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80057ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057f0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057f8:	4952      	ldr	r1, [pc, #328]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80057fa:	4313      	orrs	r3, r2
 80057fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005808:	2b00      	cmp	r3, #0
 800580a:	d00a      	beq.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800580c:	4b4d      	ldr	r3, [pc, #308]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800580e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005812:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800581a:	494a      	ldr	r1, [pc, #296]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800581c:	4313      	orrs	r3, r2
 800581e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800582a:	2b00      	cmp	r3, #0
 800582c:	d00a      	beq.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800582e:	4b45      	ldr	r3, [pc, #276]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005830:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005834:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800583c:	4941      	ldr	r1, [pc, #260]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800583e:	4313      	orrs	r3, r2
 8005840:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800584c:	2b00      	cmp	r3, #0
 800584e:	d00a      	beq.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005850:	4b3c      	ldr	r3, [pc, #240]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005852:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005856:	f023 0203 	bic.w	r2, r3, #3
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800585e:	4939      	ldr	r1, [pc, #228]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005860:	4313      	orrs	r3, r2
 8005862:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800586e:	2b00      	cmp	r3, #0
 8005870:	d028      	beq.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005872:	4b34      	ldr	r3, [pc, #208]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005874:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005878:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005880:	4930      	ldr	r1, [pc, #192]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005882:	4313      	orrs	r3, r2
 8005884:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800588c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005890:	d106      	bne.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005892:	4b2c      	ldr	r3, [pc, #176]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	4a2b      	ldr	r2, [pc, #172]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005898:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800589c:	60d3      	str	r3, [r2, #12]
 800589e:	e011      	b.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80058a8:	d10c      	bne.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	3304      	adds	r3, #4
 80058ae:	2101      	movs	r1, #1
 80058b0:	4618      	mov	r0, r3
 80058b2:	f001 f82b 	bl	800690c <RCCEx_PLLSAI1_Config>
 80058b6:	4603      	mov	r3, r0
 80058b8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80058ba:	7cfb      	ldrb	r3, [r7, #19]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d001      	beq.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80058c0:	7cfb      	ldrb	r3, [r7, #19]
 80058c2:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d04d      	beq.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80058d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80058d8:	d108      	bne.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80058da:	4b1a      	ldr	r3, [pc, #104]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80058e0:	4a18      	ldr	r2, [pc, #96]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80058e6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80058ea:	e012      	b.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80058ec:	4b15      	ldr	r3, [pc, #84]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80058f2:	4a14      	ldr	r2, [pc, #80]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80058f8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80058fc:	4b11      	ldr	r3, [pc, #68]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005902:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800590a:	490e      	ldr	r1, [pc, #56]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800590c:	4313      	orrs	r3, r2
 800590e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005916:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800591a:	d106      	bne.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800591c:	4b09      	ldr	r3, [pc, #36]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	4a08      	ldr	r2, [pc, #32]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005922:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005926:	60d3      	str	r3, [r2, #12]
 8005928:	e020      	b.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800592e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005932:	d109      	bne.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005934:	4b03      	ldr	r3, [pc, #12]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005936:	68db      	ldr	r3, [r3, #12]
 8005938:	4a02      	ldr	r2, [pc, #8]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800593a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800593e:	60d3      	str	r3, [r2, #12]
 8005940:	e014      	b.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005942:	bf00      	nop
 8005944:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800594c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005950:	d10c      	bne.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	3304      	adds	r3, #4
 8005956:	2101      	movs	r1, #1
 8005958:	4618      	mov	r0, r3
 800595a:	f000 ffd7 	bl	800690c <RCCEx_PLLSAI1_Config>
 800595e:	4603      	mov	r3, r0
 8005960:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005962:	7cfb      	ldrb	r3, [r7, #19]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d001      	beq.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8005968:	7cfb      	ldrb	r3, [r7, #19]
 800596a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005974:	2b00      	cmp	r3, #0
 8005976:	d028      	beq.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005978:	4b4a      	ldr	r3, [pc, #296]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800597a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800597e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005986:	4947      	ldr	r1, [pc, #284]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005988:	4313      	orrs	r3, r2
 800598a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005992:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005996:	d106      	bne.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005998:	4b42      	ldr	r3, [pc, #264]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800599a:	68db      	ldr	r3, [r3, #12]
 800599c:	4a41      	ldr	r2, [pc, #260]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800599e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80059a2:	60d3      	str	r3, [r2, #12]
 80059a4:	e011      	b.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059aa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80059ae:	d10c      	bne.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	3304      	adds	r3, #4
 80059b4:	2101      	movs	r1, #1
 80059b6:	4618      	mov	r0, r3
 80059b8:	f000 ffa8 	bl	800690c <RCCEx_PLLSAI1_Config>
 80059bc:	4603      	mov	r3, r0
 80059be:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80059c0:	7cfb      	ldrb	r3, [r7, #19]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d001      	beq.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80059c6:	7cfb      	ldrb	r3, [r7, #19]
 80059c8:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d01e      	beq.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80059d6:	4b33      	ldr	r3, [pc, #204]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80059d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059dc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059e6:	492f      	ldr	r1, [pc, #188]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80059e8:	4313      	orrs	r3, r2
 80059ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80059f8:	d10c      	bne.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	3304      	adds	r3, #4
 80059fe:	2102      	movs	r1, #2
 8005a00:	4618      	mov	r0, r3
 8005a02:	f000 ff83 	bl	800690c <RCCEx_PLLSAI1_Config>
 8005a06:	4603      	mov	r3, r0
 8005a08:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005a0a:	7cfb      	ldrb	r3, [r7, #19]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d001      	beq.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8005a10:	7cfb      	ldrb	r3, [r7, #19]
 8005a12:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d00b      	beq.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005a20:	4b20      	ldr	r3, [pc, #128]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a22:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a26:	f023 0204 	bic.w	r2, r3, #4
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a30:	491c      	ldr	r1, [pc, #112]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a32:	4313      	orrs	r3, r2
 8005a34:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d00b      	beq.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005a44:	4b17      	ldr	r3, [pc, #92]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a46:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a4a:	f023 0218 	bic.w	r2, r3, #24
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a54:	4913      	ldr	r1, [pc, #76]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a56:	4313      	orrs	r3, r2
 8005a58:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d017      	beq.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005a68:	4b0e      	ldr	r3, [pc, #56]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a6e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a78:	490a      	ldr	r1, [pc, #40]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a86:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a8a:	d105      	bne.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a8c:	4b05      	ldr	r3, [pc, #20]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a8e:	68db      	ldr	r3, [r3, #12]
 8005a90:	4a04      	ldr	r2, [pc, #16]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a96:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005a98:	7cbb      	ldrb	r3, [r7, #18]
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3718      	adds	r7, #24
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}
 8005aa2:	bf00      	nop
 8005aa4:	40021000 	.word	0x40021000

08005aa8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b088      	sub	sp, #32
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005aba:	d13e      	bne.n	8005b3a <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005abc:	4bb6      	ldr	r3, [pc, #728]	; (8005d98 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ac2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ac6:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ace:	d028      	beq.n	8005b22 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ad6:	f200 86f4 	bhi.w	80068c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ae0:	d005      	beq.n	8005aee <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ae8:	d00e      	beq.n	8005b08 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8005aea:	f000 beea 	b.w	80068c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005aee:	4baa      	ldr	r3, [pc, #680]	; (8005d98 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005af4:	f003 0302 	and.w	r3, r3, #2
 8005af8:	2b02      	cmp	r3, #2
 8005afa:	f040 86e4 	bne.w	80068c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        frequency = LSE_VALUE;
 8005afe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b02:	61fb      	str	r3, [r7, #28]
      break;
 8005b04:	f000 bedf 	b.w	80068c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005b08:	4ba3      	ldr	r3, [pc, #652]	; (8005d98 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005b0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b0e:	f003 0302 	and.w	r3, r3, #2
 8005b12:	2b02      	cmp	r3, #2
 8005b14:	f040 86d9 	bne.w	80068ca <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
          frequency = LSI_VALUE;
 8005b18:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005b1c:	61fb      	str	r3, [r7, #28]
      break;
 8005b1e:	f000 bed4 	b.w	80068ca <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005b22:	4b9d      	ldr	r3, [pc, #628]	; (8005d98 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b2a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b2e:	f040 86ce 	bne.w	80068ce <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
        frequency = HSE_VALUE / 32U;
 8005b32:	4b9a      	ldr	r3, [pc, #616]	; (8005d9c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005b34:	61fb      	str	r3, [r7, #28]
      break;
 8005b36:	f000 beca 	b.w	80068ce <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005b3a:	4b97      	ldr	r3, [pc, #604]	; (8005d98 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005b3c:	68db      	ldr	r3, [r3, #12]
 8005b3e:	f003 0303 	and.w	r3, r3, #3
 8005b42:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	2b03      	cmp	r3, #3
 8005b48:	d036      	beq.n	8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	2b03      	cmp	r3, #3
 8005b4e:	d840      	bhi.n	8005bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d003      	beq.n	8005b5e <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	2b02      	cmp	r3, #2
 8005b5a:	d020      	beq.n	8005b9e <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8005b5c:	e039      	b.n	8005bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005b5e:	4b8e      	ldr	r3, [pc, #568]	; (8005d98 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f003 0302 	and.w	r3, r3, #2
 8005b66:	2b02      	cmp	r3, #2
 8005b68:	d116      	bne.n	8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005b6a:	4b8b      	ldr	r3, [pc, #556]	; (8005d98 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f003 0308 	and.w	r3, r3, #8
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d005      	beq.n	8005b82 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8005b76:	4b88      	ldr	r3, [pc, #544]	; (8005d98 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	091b      	lsrs	r3, r3, #4
 8005b7c:	f003 030f 	and.w	r3, r3, #15
 8005b80:	e005      	b.n	8005b8e <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8005b82:	4b85      	ldr	r3, [pc, #532]	; (8005d98 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005b84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b88:	0a1b      	lsrs	r3, r3, #8
 8005b8a:	f003 030f 	and.w	r3, r3, #15
 8005b8e:	4a84      	ldr	r2, [pc, #528]	; (8005da0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005b90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b94:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005b96:	e01f      	b.n	8005bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	61bb      	str	r3, [r7, #24]
      break;
 8005b9c:	e01c      	b.n	8005bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005b9e:	4b7e      	ldr	r3, [pc, #504]	; (8005d98 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ba6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005baa:	d102      	bne.n	8005bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8005bac:	4b7d      	ldr	r3, [pc, #500]	; (8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8005bae:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005bb0:	e012      	b.n	8005bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	61bb      	str	r3, [r7, #24]
      break;
 8005bb6:	e00f      	b.n	8005bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005bb8:	4b77      	ldr	r3, [pc, #476]	; (8005d98 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bc0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005bc4:	d102      	bne.n	8005bcc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8005bc6:	4b78      	ldr	r3, [pc, #480]	; (8005da8 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8005bc8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005bca:	e005      	b.n	8005bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	61bb      	str	r3, [r7, #24]
      break;
 8005bd0:	e002      	b.n	8005bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	61bb      	str	r3, [r7, #24]
      break;
 8005bd6:	bf00      	nop
    }

    switch(PeriphClk)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005bde:	f000 8606 	beq.w	80067ee <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005be8:	f200 8673 	bhi.w	80068d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005bf2:	f000 8469 	beq.w	80064c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005bfc:	f200 8669 	bhi.w	80068d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c06:	f000 8531 	beq.w	800666c <HAL_RCCEx_GetPeriphCLKFreq+0xbc4>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c10:	f200 865f 	bhi.w	80068d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005c1a:	f000 8187 	beq.w	8005f2c <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005c24:	f200 8655 	bhi.w	80068d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005c2e:	f000 80cd 	beq.w	8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005c38:	f200 864b 	bhi.w	80068d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c42:	f000 8430 	beq.w	80064a6 <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c4c:	f200 8641 	bhi.w	80068d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c56:	f000 83e4 	beq.w	8006422 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c60:	f200 8637 	bhi.w	80068d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c6a:	f000 80af 	beq.w	8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c74:	f200 862d 	bhi.w	80068d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c7e:	f000 809d 	beq.w	8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c88:	f200 8623 	bhi.w	80068d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c92:	f000 808b 	beq.w	8005dac <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c9c:	f200 8619 	bhi.w	80068d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ca6:	f000 8554 	beq.w	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cb0:	f200 860f 	bhi.w	80068d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cba:	f000 8500 	beq.w	80066be <HAL_RCCEx_GetPeriphCLKFreq+0xc16>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cc4:	f200 8605 	bhi.w	80068d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cce:	f000 84a1 	beq.w	8006614 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cd8:	f200 85fb 	bhi.w	80068d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2b80      	cmp	r3, #128	; 0x80
 8005ce0:	f000 846c 	beq.w	80065bc <HAL_RCCEx_GetPeriphCLKFreq+0xb14>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2b80      	cmp	r3, #128	; 0x80
 8005ce8:	f200 85f3 	bhi.w	80068d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2b20      	cmp	r3, #32
 8005cf0:	d84c      	bhi.n	8005d8c <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	f000 85ec 	beq.w	80068d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	3b01      	subs	r3, #1
 8005cfe:	2b1f      	cmp	r3, #31
 8005d00:	f200 85e7 	bhi.w	80068d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005d04:	a201      	add	r2, pc, #4	; (adr r2, 8005d0c <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8005d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d0a:	bf00      	nop
 8005d0c:	08006121 	.word	0x08006121
 8005d10:	0800618f 	.word	0x0800618f
 8005d14:	080068d3 	.word	0x080068d3
 8005d18:	08006223 	.word	0x08006223
 8005d1c:	080068d3 	.word	0x080068d3
 8005d20:	080068d3 	.word	0x080068d3
 8005d24:	080068d3 	.word	0x080068d3
 8005d28:	0800629b 	.word	0x0800629b
 8005d2c:	080068d3 	.word	0x080068d3
 8005d30:	080068d3 	.word	0x080068d3
 8005d34:	080068d3 	.word	0x080068d3
 8005d38:	080068d3 	.word	0x080068d3
 8005d3c:	080068d3 	.word	0x080068d3
 8005d40:	080068d3 	.word	0x080068d3
 8005d44:	080068d3 	.word	0x080068d3
 8005d48:	0800631f 	.word	0x0800631f
 8005d4c:	080068d3 	.word	0x080068d3
 8005d50:	080068d3 	.word	0x080068d3
 8005d54:	080068d3 	.word	0x080068d3
 8005d58:	080068d3 	.word	0x080068d3
 8005d5c:	080068d3 	.word	0x080068d3
 8005d60:	080068d3 	.word	0x080068d3
 8005d64:	080068d3 	.word	0x080068d3
 8005d68:	080068d3 	.word	0x080068d3
 8005d6c:	080068d3 	.word	0x080068d3
 8005d70:	080068d3 	.word	0x080068d3
 8005d74:	080068d3 	.word	0x080068d3
 8005d78:	080068d3 	.word	0x080068d3
 8005d7c:	080068d3 	.word	0x080068d3
 8005d80:	080068d3 	.word	0x080068d3
 8005d84:	080068d3 	.word	0x080068d3
 8005d88:	080063a1 	.word	0x080063a1
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2b40      	cmp	r3, #64	; 0x40
 8005d90:	f000 83e8 	beq.w	8006564 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8005d94:	f000 bd9d 	b.w	80068d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005d98:	40021000 	.word	0x40021000
 8005d9c:	0003d090 	.word	0x0003d090
 8005da0:	0800b118 	.word	0x0800b118
 8005da4:	00f42400 	.word	0x00f42400
 8005da8:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8005dac:	69b9      	ldr	r1, [r7, #24]
 8005dae:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005db2:	f000 ff93 	bl	8006cdc <RCCEx_GetSAIxPeriphCLKFreq>
 8005db6:	61f8      	str	r0, [r7, #28]
      break;
 8005db8:	f000 bd8e 	b.w	80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8005dbc:	69b9      	ldr	r1, [r7, #24]
 8005dbe:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005dc2:	f000 ff8b 	bl	8006cdc <RCCEx_GetSAIxPeriphCLKFreq>
 8005dc6:	61f8      	str	r0, [r7, #28]
      break;
 8005dc8:	f000 bd86 	b.w	80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8005dcc:	4b9a      	ldr	r3, [pc, #616]	; (8006038 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dd2:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8005dd6:	60fb      	str	r3, [r7, #12]
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005dde:	d015      	beq.n	8005e0c <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005de6:	f200 8092 	bhi.w	8005f0e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005df0:	d029      	beq.n	8005e46 <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005df8:	f200 8089 	bhi.w	8005f0e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d07b      	beq.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005e08:	d04a      	beq.n	8005ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
          break;
 8005e0a:	e080      	b.n	8005f0e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005e0c:	4b8a      	ldr	r3, [pc, #552]	; (8006038 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f003 0302 	and.w	r3, r3, #2
 8005e14:	2b02      	cmp	r3, #2
 8005e16:	d17d      	bne.n	8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005e18:	4b87      	ldr	r3, [pc, #540]	; (8006038 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f003 0308 	and.w	r3, r3, #8
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d005      	beq.n	8005e30 <HAL_RCCEx_GetPeriphCLKFreq+0x388>
 8005e24:	4b84      	ldr	r3, [pc, #528]	; (8006038 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	091b      	lsrs	r3, r3, #4
 8005e2a:	f003 030f 	and.w	r3, r3, #15
 8005e2e:	e005      	b.n	8005e3c <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 8005e30:	4b81      	ldr	r3, [pc, #516]	; (8006038 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005e32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e36:	0a1b      	lsrs	r3, r3, #8
 8005e38:	f003 030f 	and.w	r3, r3, #15
 8005e3c:	4a7f      	ldr	r2, [pc, #508]	; (800603c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8005e3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e42:	61fb      	str	r3, [r7, #28]
          break;
 8005e44:	e066      	b.n	8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8005e46:	4b7c      	ldr	r3, [pc, #496]	; (8006038 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e4e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005e52:	d162      	bne.n	8005f1a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8005e54:	4b78      	ldr	r3, [pc, #480]	; (8006038 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e60:	d15b      	bne.n	8005f1a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005e62:	4b75      	ldr	r3, [pc, #468]	; (8006038 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005e64:	68db      	ldr	r3, [r3, #12]
 8005e66:	0a1b      	lsrs	r3, r3, #8
 8005e68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e6c:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005e6e:	69bb      	ldr	r3, [r7, #24]
 8005e70:	68ba      	ldr	r2, [r7, #8]
 8005e72:	fb03 f202 	mul.w	r2, r3, r2
 8005e76:	4b70      	ldr	r3, [pc, #448]	; (8006038 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005e78:	68db      	ldr	r3, [r3, #12]
 8005e7a:	091b      	lsrs	r3, r3, #4
 8005e7c:	f003 030f 	and.w	r3, r3, #15
 8005e80:	3301      	adds	r3, #1
 8005e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e86:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8005e88:	4b6b      	ldr	r3, [pc, #428]	; (8006038 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005e8a:	68db      	ldr	r3, [r3, #12]
 8005e8c:	0d5b      	lsrs	r3, r3, #21
 8005e8e:	f003 0303 	and.w	r3, r3, #3
 8005e92:	3301      	adds	r3, #1
 8005e94:	005b      	lsls	r3, r3, #1
 8005e96:	69ba      	ldr	r2, [r7, #24]
 8005e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e9c:	61fb      	str	r3, [r7, #28]
          break;
 8005e9e:	e03c      	b.n	8005f1a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8005ea0:	4b65      	ldr	r3, [pc, #404]	; (8006038 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ea8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005eac:	d138      	bne.n	8005f20 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8005eae:	4b62      	ldr	r3, [pc, #392]	; (8006038 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005eb0:	691b      	ldr	r3, [r3, #16]
 8005eb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005eb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005eba:	d131      	bne.n	8005f20 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005ebc:	4b5e      	ldr	r3, [pc, #376]	; (8006038 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005ebe:	691b      	ldr	r3, [r3, #16]
 8005ec0:	0a1b      	lsrs	r3, r3, #8
 8005ec2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ec6:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8005ec8:	69bb      	ldr	r3, [r7, #24]
 8005eca:	68ba      	ldr	r2, [r7, #8]
 8005ecc:	fb03 f202 	mul.w	r2, r3, r2
 8005ed0:	4b59      	ldr	r3, [pc, #356]	; (8006038 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005ed2:	691b      	ldr	r3, [r3, #16]
 8005ed4:	091b      	lsrs	r3, r3, #4
 8005ed6:	f003 030f 	and.w	r3, r3, #15
 8005eda:	3301      	adds	r3, #1
 8005edc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ee0:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8005ee2:	4b55      	ldr	r3, [pc, #340]	; (8006038 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005ee4:	691b      	ldr	r3, [r3, #16]
 8005ee6:	0d5b      	lsrs	r3, r3, #21
 8005ee8:	f003 0303 	and.w	r3, r3, #3
 8005eec:	3301      	adds	r3, #1
 8005eee:	005b      	lsls	r3, r3, #1
 8005ef0:	69ba      	ldr	r2, [r7, #24]
 8005ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ef6:	61fb      	str	r3, [r7, #28]
          break;
 8005ef8:	e012      	b.n	8005f20 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8005efa:	4b4f      	ldr	r3, [pc, #316]	; (8006038 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005efc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f00:	f003 0302 	and.w	r3, r3, #2
 8005f04:	2b02      	cmp	r3, #2
 8005f06:	d10e      	bne.n	8005f26 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = HSI48_VALUE;
 8005f08:	4b4d      	ldr	r3, [pc, #308]	; (8006040 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005f0a:	61fb      	str	r3, [r7, #28]
          break;
 8005f0c:	e00b      	b.n	8005f26 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 8005f0e:	bf00      	nop
 8005f10:	f000 bce2 	b.w	80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005f14:	bf00      	nop
 8005f16:	f000 bcdf 	b.w	80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005f1a:	bf00      	nop
 8005f1c:	f000 bcdc 	b.w	80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005f20:	bf00      	nop
 8005f22:	f000 bcd9 	b.w	80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005f26:	bf00      	nop
        break;
 8005f28:	f000 bcd6 	b.w	80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 8005f2c:	4b42      	ldr	r3, [pc, #264]	; (8006038 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005f2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005f32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f36:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f3a:	d13d      	bne.n	8005fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8005f3c:	4b3e      	ldr	r3, [pc, #248]	; (8006038 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f44:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005f48:	f040 84c5 	bne.w	80068d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 8005f4c:	4b3a      	ldr	r3, [pc, #232]	; (8006038 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005f4e:	68db      	ldr	r3, [r3, #12]
 8005f50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f58:	f040 84bd 	bne.w	80068d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005f5c:	4b36      	ldr	r3, [pc, #216]	; (8006038 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005f5e:	68db      	ldr	r3, [r3, #12]
 8005f60:	0a1b      	lsrs	r3, r3, #8
 8005f62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f66:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005f68:	69bb      	ldr	r3, [r7, #24]
 8005f6a:	68ba      	ldr	r2, [r7, #8]
 8005f6c:	fb03 f202 	mul.w	r2, r3, r2
 8005f70:	4b31      	ldr	r3, [pc, #196]	; (8006038 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005f72:	68db      	ldr	r3, [r3, #12]
 8005f74:	091b      	lsrs	r3, r3, #4
 8005f76:	f003 030f 	and.w	r3, r3, #15
 8005f7a:	3301      	adds	r3, #1
 8005f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f80:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8005f82:	4b2d      	ldr	r3, [pc, #180]	; (8006038 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005f84:	68db      	ldr	r3, [r3, #12]
 8005f86:	0edb      	lsrs	r3, r3, #27
 8005f88:	f003 031f 	and.w	r3, r3, #31
 8005f8c:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d10a      	bne.n	8005faa <HAL_RCCEx_GetPeriphCLKFreq+0x502>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8005f94:	4b28      	ldr	r3, [pc, #160]	; (8006038 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005f96:	68db      	ldr	r3, [r3, #12]
 8005f98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d002      	beq.n	8005fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 17U;
 8005fa0:	2311      	movs	r3, #17
 8005fa2:	617b      	str	r3, [r7, #20]
 8005fa4:	e001      	b.n	8005faa <HAL_RCCEx_GetPeriphCLKFreq+0x502>
                pllp = 7U;
 8005fa6:	2307      	movs	r3, #7
 8005fa8:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 8005faa:	69ba      	ldr	r2, [r7, #24]
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fb2:	61fb      	str	r3, [r7, #28]
      break;
 8005fb4:	f000 bc8f 	b.w	80068d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8005fb8:	4b1f      	ldr	r3, [pc, #124]	; (8006038 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fbe:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8005fc2:	60fb      	str	r3, [r7, #12]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005fca:	d016      	beq.n	8005ffa <HAL_RCCEx_GetPeriphCLKFreq+0x552>
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005fd2:	f200 809b 	bhi.w	800610c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005fdc:	d032      	beq.n	8006044 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005fe4:	f200 8092 	bhi.w	800610c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	f000 8084 	beq.w	80060f8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005ff6:	d052      	beq.n	800609e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          break;
 8005ff8:	e088      	b.n	800610c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005ffa:	4b0f      	ldr	r3, [pc, #60]	; (8006038 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f003 0302 	and.w	r3, r3, #2
 8006002:	2b02      	cmp	r3, #2
 8006004:	f040 8084 	bne.w	8006110 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006008:	4b0b      	ldr	r3, [pc, #44]	; (8006038 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f003 0308 	and.w	r3, r3, #8
 8006010:	2b00      	cmp	r3, #0
 8006012:	d005      	beq.n	8006020 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8006014:	4b08      	ldr	r3, [pc, #32]	; (8006038 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	091b      	lsrs	r3, r3, #4
 800601a:	f003 030f 	and.w	r3, r3, #15
 800601e:	e005      	b.n	800602c <HAL_RCCEx_GetPeriphCLKFreq+0x584>
 8006020:	4b05      	ldr	r3, [pc, #20]	; (8006038 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006022:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006026:	0a1b      	lsrs	r3, r3, #8
 8006028:	f003 030f 	and.w	r3, r3, #15
 800602c:	4a03      	ldr	r2, [pc, #12]	; (800603c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800602e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006032:	61fb      	str	r3, [r7, #28]
          break;
 8006034:	e06c      	b.n	8006110 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 8006036:	bf00      	nop
 8006038:	40021000 	.word	0x40021000
 800603c:	0800b118 	.word	0x0800b118
 8006040:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8006044:	4ba5      	ldr	r3, [pc, #660]	; (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800604c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006050:	d160      	bne.n	8006114 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8006052:	4ba2      	ldr	r3, [pc, #648]	; (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006054:	68db      	ldr	r3, [r3, #12]
 8006056:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800605a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800605e:	d159      	bne.n	8006114 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006060:	4b9e      	ldr	r3, [pc, #632]	; (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006062:	68db      	ldr	r3, [r3, #12]
 8006064:	0a1b      	lsrs	r3, r3, #8
 8006066:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800606a:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800606c:	69bb      	ldr	r3, [r7, #24]
 800606e:	68ba      	ldr	r2, [r7, #8]
 8006070:	fb03 f202 	mul.w	r2, r3, r2
 8006074:	4b99      	ldr	r3, [pc, #612]	; (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006076:	68db      	ldr	r3, [r3, #12]
 8006078:	091b      	lsrs	r3, r3, #4
 800607a:	f003 030f 	and.w	r3, r3, #15
 800607e:	3301      	adds	r3, #1
 8006080:	fbb2 f3f3 	udiv	r3, r2, r3
 8006084:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8006086:	4b95      	ldr	r3, [pc, #596]	; (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006088:	68db      	ldr	r3, [r3, #12]
 800608a:	0d5b      	lsrs	r3, r3, #21
 800608c:	f003 0303 	and.w	r3, r3, #3
 8006090:	3301      	adds	r3, #1
 8006092:	005b      	lsls	r3, r3, #1
 8006094:	69ba      	ldr	r2, [r7, #24]
 8006096:	fbb2 f3f3 	udiv	r3, r2, r3
 800609a:	61fb      	str	r3, [r7, #28]
          break;
 800609c:	e03a      	b.n	8006114 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800609e:	4b8f      	ldr	r3, [pc, #572]	; (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80060a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80060aa:	d135      	bne.n	8006118 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 80060ac:	4b8b      	ldr	r3, [pc, #556]	; (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80060ae:	691b      	ldr	r3, [r3, #16]
 80060b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80060b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060b8:	d12e      	bne.n	8006118 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80060ba:	4b88      	ldr	r3, [pc, #544]	; (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80060bc:	691b      	ldr	r3, [r3, #16]
 80060be:	0a1b      	lsrs	r3, r3, #8
 80060c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060c4:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80060c6:	69bb      	ldr	r3, [r7, #24]
 80060c8:	68ba      	ldr	r2, [r7, #8]
 80060ca:	fb03 f202 	mul.w	r2, r3, r2
 80060ce:	4b83      	ldr	r3, [pc, #524]	; (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80060d0:	691b      	ldr	r3, [r3, #16]
 80060d2:	091b      	lsrs	r3, r3, #4
 80060d4:	f003 030f 	and.w	r3, r3, #15
 80060d8:	3301      	adds	r3, #1
 80060da:	fbb2 f3f3 	udiv	r3, r2, r3
 80060de:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 80060e0:	4b7e      	ldr	r3, [pc, #504]	; (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80060e2:	691b      	ldr	r3, [r3, #16]
 80060e4:	0d5b      	lsrs	r3, r3, #21
 80060e6:	f003 0303 	and.w	r3, r3, #3
 80060ea:	3301      	adds	r3, #1
 80060ec:	005b      	lsls	r3, r3, #1
 80060ee:	69ba      	ldr	r2, [r7, #24]
 80060f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80060f4:	61fb      	str	r3, [r7, #28]
          break;
 80060f6:	e00f      	b.n	8006118 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 80060f8:	4b78      	ldr	r3, [pc, #480]	; (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80060fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80060fe:	f003 0302 	and.w	r3, r3, #2
 8006102:	2b02      	cmp	r3, #2
 8006104:	d10a      	bne.n	800611c <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            frequency = HSI48_VALUE;
 8006106:	4b76      	ldr	r3, [pc, #472]	; (80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006108:	61fb      	str	r3, [r7, #28]
          break;
 800610a:	e007      	b.n	800611c <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          break;
 800610c:	bf00      	nop
 800610e:	e3e2      	b.n	80068d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006110:	bf00      	nop
 8006112:	e3e0      	b.n	80068d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006114:	bf00      	nop
 8006116:	e3de      	b.n	80068d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006118:	bf00      	nop
 800611a:	e3dc      	b.n	80068d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800611c:	bf00      	nop
      break;
 800611e:	e3da      	b.n	80068d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006120:	4b6e      	ldr	r3, [pc, #440]	; (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006126:	f003 0303 	and.w	r3, r3, #3
 800612a:	60fb      	str	r3, [r7, #12]
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2b03      	cmp	r3, #3
 8006130:	d827      	bhi.n	8006182 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8006132:	a201      	add	r2, pc, #4	; (adr r2, 8006138 <HAL_RCCEx_GetPeriphCLKFreq+0x690>)
 8006134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006138:	08006149 	.word	0x08006149
 800613c:	08006151 	.word	0x08006151
 8006140:	08006159 	.word	0x08006159
 8006144:	0800616d 	.word	0x0800616d
          frequency = HAL_RCC_GetPCLK2Freq();
 8006148:	f7ff f8a8 	bl	800529c <HAL_RCC_GetPCLK2Freq>
 800614c:	61f8      	str	r0, [r7, #28]
          break;
 800614e:	e01d      	b.n	800618c <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          frequency = HAL_RCC_GetSysClockFreq();
 8006150:	f7fe fff6 	bl	8005140 <HAL_RCC_GetSysClockFreq>
 8006154:	61f8      	str	r0, [r7, #28]
          break;
 8006156:	e019      	b.n	800618c <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006158:	4b60      	ldr	r3, [pc, #384]	; (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006160:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006164:	d10f      	bne.n	8006186 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = HSI_VALUE;
 8006166:	4b5f      	ldr	r3, [pc, #380]	; (80062e4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006168:	61fb      	str	r3, [r7, #28]
          break;
 800616a:	e00c      	b.n	8006186 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800616c:	4b5b      	ldr	r3, [pc, #364]	; (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800616e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006172:	f003 0302 	and.w	r3, r3, #2
 8006176:	2b02      	cmp	r3, #2
 8006178:	d107      	bne.n	800618a <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
            frequency = LSE_VALUE;
 800617a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800617e:	61fb      	str	r3, [r7, #28]
          break;
 8006180:	e003      	b.n	800618a <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
          break;
 8006182:	bf00      	nop
 8006184:	e3a8      	b.n	80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006186:	bf00      	nop
 8006188:	e3a6      	b.n	80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800618a:	bf00      	nop
        break;
 800618c:	e3a4      	b.n	80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800618e:	4b53      	ldr	r3, [pc, #332]	; (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006190:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006194:	f003 030c 	and.w	r3, r3, #12
 8006198:	60fb      	str	r3, [r7, #12]
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2b0c      	cmp	r3, #12
 800619e:	d83a      	bhi.n	8006216 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 80061a0:	a201      	add	r2, pc, #4	; (adr r2, 80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x700>)
 80061a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061a6:	bf00      	nop
 80061a8:	080061dd 	.word	0x080061dd
 80061ac:	08006217 	.word	0x08006217
 80061b0:	08006217 	.word	0x08006217
 80061b4:	08006217 	.word	0x08006217
 80061b8:	080061e5 	.word	0x080061e5
 80061bc:	08006217 	.word	0x08006217
 80061c0:	08006217 	.word	0x08006217
 80061c4:	08006217 	.word	0x08006217
 80061c8:	080061ed 	.word	0x080061ed
 80061cc:	08006217 	.word	0x08006217
 80061d0:	08006217 	.word	0x08006217
 80061d4:	08006217 	.word	0x08006217
 80061d8:	08006201 	.word	0x08006201
          frequency = HAL_RCC_GetPCLK1Freq();
 80061dc:	f7ff f848 	bl	8005270 <HAL_RCC_GetPCLK1Freq>
 80061e0:	61f8      	str	r0, [r7, #28]
          break;
 80061e2:	e01d      	b.n	8006220 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = HAL_RCC_GetSysClockFreq();
 80061e4:	f7fe ffac 	bl	8005140 <HAL_RCC_GetSysClockFreq>
 80061e8:	61f8      	str	r0, [r7, #28]
          break;
 80061ea:	e019      	b.n	8006220 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80061ec:	4b3b      	ldr	r3, [pc, #236]	; (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061f8:	d10f      	bne.n	800621a <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = HSI_VALUE;
 80061fa:	4b3a      	ldr	r3, [pc, #232]	; (80062e4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80061fc:	61fb      	str	r3, [r7, #28]
          break;
 80061fe:	e00c      	b.n	800621a <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006200:	4b36      	ldr	r3, [pc, #216]	; (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006206:	f003 0302 	and.w	r3, r3, #2
 800620a:	2b02      	cmp	r3, #2
 800620c:	d107      	bne.n	800621e <HAL_RCCEx_GetPeriphCLKFreq+0x776>
            frequency = LSE_VALUE;
 800620e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006212:	61fb      	str	r3, [r7, #28]
          break;
 8006214:	e003      	b.n	800621e <HAL_RCCEx_GetPeriphCLKFreq+0x776>
          break;
 8006216:	bf00      	nop
 8006218:	e35e      	b.n	80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800621a:	bf00      	nop
 800621c:	e35c      	b.n	80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800621e:	bf00      	nop
        break;
 8006220:	e35a      	b.n	80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006222:	4b2e      	ldr	r3, [pc, #184]	; (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006224:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006228:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800622c:	60fb      	str	r3, [r7, #12]
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2b30      	cmp	r3, #48	; 0x30
 8006232:	d021      	beq.n	8006278 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2b30      	cmp	r3, #48	; 0x30
 8006238:	d829      	bhi.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2b20      	cmp	r3, #32
 800623e:	d011      	beq.n	8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2b20      	cmp	r3, #32
 8006244:	d823      	bhi.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d003      	beq.n	8006254 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2b10      	cmp	r3, #16
 8006250:	d004      	beq.n	800625c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
          break;
 8006252:	e01c      	b.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006254:	f7ff f80c 	bl	8005270 <HAL_RCC_GetPCLK1Freq>
 8006258:	61f8      	str	r0, [r7, #28]
          break;
 800625a:	e01d      	b.n	8006298 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          frequency = HAL_RCC_GetSysClockFreq();
 800625c:	f7fe ff70 	bl	8005140 <HAL_RCC_GetSysClockFreq>
 8006260:	61f8      	str	r0, [r7, #28]
          break;
 8006262:	e019      	b.n	8006298 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006264:	4b1d      	ldr	r3, [pc, #116]	; (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800626c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006270:	d10f      	bne.n	8006292 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = HSI_VALUE;
 8006272:	4b1c      	ldr	r3, [pc, #112]	; (80062e4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006274:	61fb      	str	r3, [r7, #28]
          break;
 8006276:	e00c      	b.n	8006292 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006278:	4b18      	ldr	r3, [pc, #96]	; (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800627a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800627e:	f003 0302 	and.w	r3, r3, #2
 8006282:	2b02      	cmp	r3, #2
 8006284:	d107      	bne.n	8006296 <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
            frequency = LSE_VALUE;
 8006286:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800628a:	61fb      	str	r3, [r7, #28]
          break;
 800628c:	e003      	b.n	8006296 <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
          break;
 800628e:	bf00      	nop
 8006290:	e322      	b.n	80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006292:	bf00      	nop
 8006294:	e320      	b.n	80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006296:	bf00      	nop
        break;
 8006298:	e31e      	b.n	80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800629a:	4b10      	ldr	r3, [pc, #64]	; (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800629c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062a0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80062a4:	60fb      	str	r3, [r7, #12]
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2bc0      	cmp	r3, #192	; 0xc0
 80062aa:	d027      	beq.n	80062fc <HAL_RCCEx_GetPeriphCLKFreq+0x854>
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2bc0      	cmp	r3, #192	; 0xc0
 80062b0:	d82f      	bhi.n	8006312 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2b80      	cmp	r3, #128	; 0x80
 80062b6:	d017      	beq.n	80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2b80      	cmp	r3, #128	; 0x80
 80062bc:	d829      	bhi.n	8006312 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d003      	beq.n	80062cc <HAL_RCCEx_GetPeriphCLKFreq+0x824>
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2b40      	cmp	r3, #64	; 0x40
 80062c8:	d004      	beq.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
          break;
 80062ca:	e022      	b.n	8006312 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          frequency = HAL_RCC_GetPCLK1Freq();
 80062cc:	f7fe ffd0 	bl	8005270 <HAL_RCC_GetPCLK1Freq>
 80062d0:	61f8      	str	r0, [r7, #28]
          break;
 80062d2:	e023      	b.n	800631c <HAL_RCCEx_GetPeriphCLKFreq+0x874>
          frequency = HAL_RCC_GetSysClockFreq();
 80062d4:	f7fe ff34 	bl	8005140 <HAL_RCC_GetSysClockFreq>
 80062d8:	61f8      	str	r0, [r7, #28]
          break;
 80062da:	e01f      	b.n	800631c <HAL_RCCEx_GetPeriphCLKFreq+0x874>
 80062dc:	40021000 	.word	0x40021000
 80062e0:	02dc6c00 	.word	0x02dc6c00
 80062e4:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80062e8:	4b9b      	ldr	r3, [pc, #620]	; (8006558 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062f4:	d10f      	bne.n	8006316 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = HSI_VALUE;
 80062f6:	4b99      	ldr	r3, [pc, #612]	; (800655c <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 80062f8:	61fb      	str	r3, [r7, #28]
          break;
 80062fa:	e00c      	b.n	8006316 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80062fc:	4b96      	ldr	r3, [pc, #600]	; (8006558 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80062fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006302:	f003 0302 	and.w	r3, r3, #2
 8006306:	2b02      	cmp	r3, #2
 8006308:	d107      	bne.n	800631a <HAL_RCCEx_GetPeriphCLKFreq+0x872>
            frequency = LSE_VALUE;
 800630a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800630e:	61fb      	str	r3, [r7, #28]
          break;
 8006310:	e003      	b.n	800631a <HAL_RCCEx_GetPeriphCLKFreq+0x872>
          break;
 8006312:	bf00      	nop
 8006314:	e2e0      	b.n	80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006316:	bf00      	nop
 8006318:	e2de      	b.n	80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800631a:	bf00      	nop
        break;
 800631c:	e2dc      	b.n	80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800631e:	4b8e      	ldr	r3, [pc, #568]	; (8006558 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006320:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006324:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006328:	60fb      	str	r3, [r7, #12]
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006330:	d025      	beq.n	800637e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006338:	d82c      	bhi.n	8006394 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006340:	d013      	beq.n	800636a <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006348:	d824      	bhi.n	8006394 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d004      	beq.n	800635a <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006356:	d004      	beq.n	8006362 <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 8006358:	e01c      	b.n	8006394 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetPCLK1Freq();
 800635a:	f7fe ff89 	bl	8005270 <HAL_RCC_GetPCLK1Freq>
 800635e:	61f8      	str	r0, [r7, #28]
          break;
 8006360:	e01d      	b.n	800639e <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = HAL_RCC_GetSysClockFreq();
 8006362:	f7fe feed 	bl	8005140 <HAL_RCC_GetSysClockFreq>
 8006366:	61f8      	str	r0, [r7, #28]
          break;
 8006368:	e019      	b.n	800639e <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800636a:	4b7b      	ldr	r3, [pc, #492]	; (8006558 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006372:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006376:	d10f      	bne.n	8006398 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = HSI_VALUE;
 8006378:	4b78      	ldr	r3, [pc, #480]	; (800655c <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800637a:	61fb      	str	r3, [r7, #28]
          break;
 800637c:	e00c      	b.n	8006398 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800637e:	4b76      	ldr	r3, [pc, #472]	; (8006558 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006380:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006384:	f003 0302 	and.w	r3, r3, #2
 8006388:	2b02      	cmp	r3, #2
 800638a:	d107      	bne.n	800639c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
            frequency = LSE_VALUE;
 800638c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006390:	61fb      	str	r3, [r7, #28]
          break;
 8006392:	e003      	b.n	800639c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
          break;
 8006394:	bf00      	nop
 8006396:	e29f      	b.n	80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006398:	bf00      	nop
 800639a:	e29d      	b.n	80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800639c:	bf00      	nop
        break;
 800639e:	e29b      	b.n	80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80063a0:	4b6d      	ldr	r3, [pc, #436]	; (8006558 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80063a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063a6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80063aa:	60fb      	str	r3, [r7, #12]
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80063b2:	d025      	beq.n	8006400 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80063ba:	d82c      	bhi.n	8006416 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063c2:	d013      	beq.n	80063ec <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063ca:	d824      	bhi.n	8006416 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d004      	beq.n	80063dc <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063d8:	d004      	beq.n	80063e4 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
          break;
 80063da:	e01c      	b.n	8006416 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          frequency = HAL_RCC_GetPCLK1Freq();
 80063dc:	f7fe ff48 	bl	8005270 <HAL_RCC_GetPCLK1Freq>
 80063e0:	61f8      	str	r0, [r7, #28]
          break;
 80063e2:	e01d      	b.n	8006420 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = HAL_RCC_GetSysClockFreq();
 80063e4:	f7fe feac 	bl	8005140 <HAL_RCC_GetSysClockFreq>
 80063e8:	61f8      	str	r0, [r7, #28]
          break;
 80063ea:	e019      	b.n	8006420 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80063ec:	4b5a      	ldr	r3, [pc, #360]	; (8006558 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063f8:	d10f      	bne.n	800641a <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = HSI_VALUE;
 80063fa:	4b58      	ldr	r3, [pc, #352]	; (800655c <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 80063fc:	61fb      	str	r3, [r7, #28]
          break;
 80063fe:	e00c      	b.n	800641a <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006400:	4b55      	ldr	r3, [pc, #340]	; (8006558 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006406:	f003 0302 	and.w	r3, r3, #2
 800640a:	2b02      	cmp	r3, #2
 800640c:	d107      	bne.n	800641e <HAL_RCCEx_GetPeriphCLKFreq+0x976>
            frequency = LSE_VALUE;
 800640e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006412:	61fb      	str	r3, [r7, #28]
          break;
 8006414:	e003      	b.n	800641e <HAL_RCCEx_GetPeriphCLKFreq+0x976>
          break;
 8006416:	bf00      	nop
 8006418:	e25e      	b.n	80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800641a:	bf00      	nop
 800641c:	e25c      	b.n	80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800641e:	bf00      	nop
        break;
 8006420:	e25a      	b.n	80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006422:	4b4d      	ldr	r3, [pc, #308]	; (8006558 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006424:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006428:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800642c:	60fb      	str	r3, [r7, #12]
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006434:	d007      	beq.n	8006446 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800643c:	d12f      	bne.n	800649e <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          frequency = HAL_RCC_GetSysClockFreq();
 800643e:	f7fe fe7f 	bl	8005140 <HAL_RCC_GetSysClockFreq>
 8006442:	61f8      	str	r0, [r7, #28]
          break;
 8006444:	e02e      	b.n	80064a4 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8006446:	4b44      	ldr	r3, [pc, #272]	; (8006558 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800644e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006452:	d126      	bne.n	80064a2 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 8006454:	4b40      	ldr	r3, [pc, #256]	; (8006558 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006456:	691b      	ldr	r3, [r3, #16]
 8006458:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800645c:	2b00      	cmp	r3, #0
 800645e:	d020      	beq.n	80064a2 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006460:	4b3d      	ldr	r3, [pc, #244]	; (8006558 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006462:	691b      	ldr	r3, [r3, #16]
 8006464:	0a1b      	lsrs	r3, r3, #8
 8006466:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800646a:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800646c:	69bb      	ldr	r3, [r7, #24]
 800646e:	68ba      	ldr	r2, [r7, #8]
 8006470:	fb03 f202 	mul.w	r2, r3, r2
 8006474:	4b38      	ldr	r3, [pc, #224]	; (8006558 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006476:	691b      	ldr	r3, [r3, #16]
 8006478:	091b      	lsrs	r3, r3, #4
 800647a:	f003 030f 	and.w	r3, r3, #15
 800647e:	3301      	adds	r3, #1
 8006480:	fbb2 f3f3 	udiv	r3, r2, r3
 8006484:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8006486:	4b34      	ldr	r3, [pc, #208]	; (8006558 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006488:	691b      	ldr	r3, [r3, #16]
 800648a:	0e5b      	lsrs	r3, r3, #25
 800648c:	f003 0303 	and.w	r3, r3, #3
 8006490:	3301      	adds	r3, #1
 8006492:	005b      	lsls	r3, r3, #1
 8006494:	69ba      	ldr	r2, [r7, #24]
 8006496:	fbb2 f3f3 	udiv	r3, r2, r3
 800649a:	61fb      	str	r3, [r7, #28]
          break;
 800649c:	e001      	b.n	80064a2 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
          break;
 800649e:	bf00      	nop
 80064a0:	e21a      	b.n	80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80064a2:	bf00      	nop
        break;
 80064a4:	e218      	b.n	80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 80064a6:	4b2c      	ldr	r3, [pc, #176]	; (8006558 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80064a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80064ac:	f003 0304 	and.w	r3, r3, #4
 80064b0:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d103      	bne.n	80064c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetPCLK2Freq();
 80064b8:	f7fe fef0 	bl	800529c <HAL_RCC_GetPCLK2Freq>
 80064bc:	61f8      	str	r0, [r7, #28]
        break;
 80064be:	e20b      	b.n	80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          frequency = HAL_RCC_GetSysClockFreq();
 80064c0:	f7fe fe3e 	bl	8005140 <HAL_RCC_GetSysClockFreq>
 80064c4:	61f8      	str	r0, [r7, #28]
        break;
 80064c6:	e207      	b.n	80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 80064c8:	4b23      	ldr	r3, [pc, #140]	; (8006558 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80064ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80064ce:	f003 0318 	and.w	r3, r3, #24
 80064d2:	60fb      	str	r3, [r7, #12]
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2b10      	cmp	r3, #16
 80064d8:	d010      	beq.n	80064fc <HAL_RCCEx_GetPeriphCLKFreq+0xa54>
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2b10      	cmp	r3, #16
 80064de:	d834      	bhi.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d003      	beq.n	80064ee <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2b08      	cmp	r3, #8
 80064ea:	d024      	beq.n	8006536 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
          break;
 80064ec:	e02d      	b.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 80064ee:	69b9      	ldr	r1, [r7, #24]
 80064f0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80064f4:	f000 fbf2 	bl	8006cdc <RCCEx_GetSAIxPeriphCLKFreq>
 80064f8:	61f8      	str	r0, [r7, #28]
          break;
 80064fa:	e02b      	b.n	8006554 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80064fc:	4b16      	ldr	r3, [pc, #88]	; (8006558 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f003 0302 	and.w	r3, r3, #2
 8006504:	2b02      	cmp	r3, #2
 8006506:	d122      	bne.n	800654e <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006508:	4b13      	ldr	r3, [pc, #76]	; (8006558 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f003 0308 	and.w	r3, r3, #8
 8006510:	2b00      	cmp	r3, #0
 8006512:	d005      	beq.n	8006520 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 8006514:	4b10      	ldr	r3, [pc, #64]	; (8006558 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	091b      	lsrs	r3, r3, #4
 800651a:	f003 030f 	and.w	r3, r3, #15
 800651e:	e005      	b.n	800652c <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
 8006520:	4b0d      	ldr	r3, [pc, #52]	; (8006558 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006522:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006526:	0a1b      	lsrs	r3, r3, #8
 8006528:	f003 030f 	and.w	r3, r3, #15
 800652c:	4a0c      	ldr	r2, [pc, #48]	; (8006560 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800652e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006532:	61fb      	str	r3, [r7, #28]
          break;
 8006534:	e00b      	b.n	800654e <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006536:	4b08      	ldr	r3, [pc, #32]	; (8006558 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800653e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006542:	d106      	bne.n	8006552 <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
            frequency = HSI_VALUE;
 8006544:	4b05      	ldr	r3, [pc, #20]	; (800655c <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8006546:	61fb      	str	r3, [r7, #28]
          break;
 8006548:	e003      	b.n	8006552 <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
          break;
 800654a:	bf00      	nop
 800654c:	e1c4      	b.n	80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800654e:	bf00      	nop
 8006550:	e1c2      	b.n	80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006552:	bf00      	nop
        break;
 8006554:	e1c0      	b.n	80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 8006556:	bf00      	nop
 8006558:	40021000 	.word	0x40021000
 800655c:	00f42400 	.word	0x00f42400
 8006560:	0800b118 	.word	0x0800b118
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006564:	4b96      	ldr	r3, [pc, #600]	; (80067c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800656a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800656e:	60fb      	str	r3, [r7, #12]
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006576:	d013      	beq.n	80065a0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800657e:	d819      	bhi.n	80065b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d004      	beq.n	8006590 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800658c:	d004      	beq.n	8006598 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>
          break;
 800658e:	e011      	b.n	80065b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006590:	f7fe fe6e 	bl	8005270 <HAL_RCC_GetPCLK1Freq>
 8006594:	61f8      	str	r0, [r7, #28]
          break;
 8006596:	e010      	b.n	80065ba <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          frequency = HAL_RCC_GetSysClockFreq();
 8006598:	f7fe fdd2 	bl	8005140 <HAL_RCC_GetSysClockFreq>
 800659c:	61f8      	str	r0, [r7, #28]
          break;
 800659e:	e00c      	b.n	80065ba <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80065a0:	4b87      	ldr	r3, [pc, #540]	; (80067c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065ac:	d104      	bne.n	80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
            frequency = HSI_VALUE;
 80065ae:	4b85      	ldr	r3, [pc, #532]	; (80067c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 80065b0:	61fb      	str	r3, [r7, #28]
          break;
 80065b2:	e001      	b.n	80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
          break;
 80065b4:	bf00      	nop
 80065b6:	e18f      	b.n	80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80065b8:	bf00      	nop
        break;
 80065ba:	e18d      	b.n	80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80065bc:	4b80      	ldr	r3, [pc, #512]	; (80067c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80065be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065c2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80065c6:	60fb      	str	r3, [r7, #12]
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065ce:	d013      	beq.n	80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065d6:	d819      	bhi.n	800660c <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d004      	beq.n	80065e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80065e4:	d004      	beq.n	80065f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          break;
 80065e6:	e011      	b.n	800660c <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          frequency = HAL_RCC_GetPCLK1Freq();
 80065e8:	f7fe fe42 	bl	8005270 <HAL_RCC_GetPCLK1Freq>
 80065ec:	61f8      	str	r0, [r7, #28]
          break;
 80065ee:	e010      	b.n	8006612 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = HAL_RCC_GetSysClockFreq();
 80065f0:	f7fe fda6 	bl	8005140 <HAL_RCC_GetSysClockFreq>
 80065f4:	61f8      	str	r0, [r7, #28]
          break;
 80065f6:	e00c      	b.n	8006612 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80065f8:	4b71      	ldr	r3, [pc, #452]	; (80067c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006600:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006604:	d104      	bne.n	8006610 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
            frequency = HSI_VALUE;
 8006606:	4b6f      	ldr	r3, [pc, #444]	; (80067c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8006608:	61fb      	str	r3, [r7, #28]
          break;
 800660a:	e001      	b.n	8006610 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          break;
 800660c:	bf00      	nop
 800660e:	e163      	b.n	80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006610:	bf00      	nop
        break;
 8006612:	e161      	b.n	80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8006614:	4b6a      	ldr	r3, [pc, #424]	; (80067c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800661a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800661e:	60fb      	str	r3, [r7, #12]
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006626:	d013      	beq.n	8006650 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800662e:	d819      	bhi.n	8006664 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d004      	beq.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0xb98>
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800663c:	d004      	beq.n	8006648 <HAL_RCCEx_GetPeriphCLKFreq+0xba0>
          break;
 800663e:	e011      	b.n	8006664 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006640:	f7fe fe16 	bl	8005270 <HAL_RCC_GetPCLK1Freq>
 8006644:	61f8      	str	r0, [r7, #28]
          break;
 8006646:	e010      	b.n	800666a <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          frequency = HAL_RCC_GetSysClockFreq();
 8006648:	f7fe fd7a 	bl	8005140 <HAL_RCC_GetSysClockFreq>
 800664c:	61f8      	str	r0, [r7, #28]
          break;
 800664e:	e00c      	b.n	800666a <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006650:	4b5b      	ldr	r3, [pc, #364]	; (80067c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006658:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800665c:	d104      	bne.n	8006668 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
            frequency = HSI_VALUE;
 800665e:	4b59      	ldr	r3, [pc, #356]	; (80067c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8006660:	61fb      	str	r3, [r7, #28]
          break;
 8006662:	e001      	b.n	8006668 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
          break;
 8006664:	bf00      	nop
 8006666:	e137      	b.n	80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006668:	bf00      	nop
        break;
 800666a:	e135      	b.n	80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800666c:	4b54      	ldr	r3, [pc, #336]	; (80067c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800666e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006672:	f003 0303 	and.w	r3, r3, #3
 8006676:	60fb      	str	r3, [r7, #12]
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2b02      	cmp	r3, #2
 800667c:	d011      	beq.n	80066a2 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2b02      	cmp	r3, #2
 8006682:	d818      	bhi.n	80066b6 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d003      	beq.n	8006692 <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2b01      	cmp	r3, #1
 800668e:	d004      	beq.n	800669a <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
          break;
 8006690:	e011      	b.n	80066b6 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006692:	f7fe fded 	bl	8005270 <HAL_RCC_GetPCLK1Freq>
 8006696:	61f8      	str	r0, [r7, #28]
          break;
 8006698:	e010      	b.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          frequency = HAL_RCC_GetSysClockFreq();
 800669a:	f7fe fd51 	bl	8005140 <HAL_RCC_GetSysClockFreq>
 800669e:	61f8      	str	r0, [r7, #28]
          break;
 80066a0:	e00c      	b.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80066a2:	4b47      	ldr	r3, [pc, #284]	; (80067c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066ae:	d104      	bne.n	80066ba <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
            frequency = HSI_VALUE;
 80066b0:	4b44      	ldr	r3, [pc, #272]	; (80067c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 80066b2:	61fb      	str	r3, [r7, #28]
          break;
 80066b4:	e001      	b.n	80066ba <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
          break;
 80066b6:	bf00      	nop
 80066b8:	e10e      	b.n	80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80066ba:	bf00      	nop
        break;
 80066bc:	e10c      	b.n	80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80066be:	4b40      	ldr	r3, [pc, #256]	; (80067c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80066c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066c4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80066c8:	60fb      	str	r3, [r7, #12]
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80066d0:	d02c      	beq.n	800672c <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80066d8:	d833      	bhi.n	8006742 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80066e0:	d01a      	beq.n	8006718 <HAL_RCCEx_GetPeriphCLKFreq+0xc70>
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80066e8:	d82b      	bhi.n	8006742 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d004      	beq.n	80066fa <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80066f6:	d004      	beq.n	8006702 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
          break;
 80066f8:	e023      	b.n	8006742 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          frequency = HAL_RCC_GetPCLK1Freq();
 80066fa:	f7fe fdb9 	bl	8005270 <HAL_RCC_GetPCLK1Freq>
 80066fe:	61f8      	str	r0, [r7, #28]
          break;
 8006700:	e026      	b.n	8006750 <HAL_RCCEx_GetPeriphCLKFreq+0xca8>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006702:	4b2f      	ldr	r3, [pc, #188]	; (80067c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006704:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006708:	f003 0302 	and.w	r3, r3, #2
 800670c:	2b02      	cmp	r3, #2
 800670e:	d11a      	bne.n	8006746 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
              frequency = LSI_VALUE;
 8006710:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006714:	61fb      	str	r3, [r7, #28]
          break;
 8006716:	e016      	b.n	8006746 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006718:	4b29      	ldr	r3, [pc, #164]	; (80067c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006720:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006724:	d111      	bne.n	800674a <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = HSI_VALUE;
 8006726:	4b27      	ldr	r3, [pc, #156]	; (80067c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8006728:	61fb      	str	r3, [r7, #28]
          break;
 800672a:	e00e      	b.n	800674a <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800672c:	4b24      	ldr	r3, [pc, #144]	; (80067c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800672e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006732:	f003 0302 	and.w	r3, r3, #2
 8006736:	2b02      	cmp	r3, #2
 8006738:	d109      	bne.n	800674e <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
            frequency = LSE_VALUE;
 800673a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800673e:	61fb      	str	r3, [r7, #28]
          break;
 8006740:	e005      	b.n	800674e <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
          break;
 8006742:	bf00      	nop
 8006744:	e0c8      	b.n	80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006746:	bf00      	nop
 8006748:	e0c6      	b.n	80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800674a:	bf00      	nop
 800674c:	e0c4      	b.n	80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800674e:	bf00      	nop
        break;
 8006750:	e0c2      	b.n	80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006752:	4b1b      	ldr	r3, [pc, #108]	; (80067c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006754:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006758:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800675c:	60fb      	str	r3, [r7, #12]
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006764:	d030      	beq.n	80067c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd20>
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800676c:	d837      	bhi.n	80067de <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006774:	d01a      	beq.n	80067ac <HAL_RCCEx_GetPeriphCLKFreq+0xd04>
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800677c:	d82f      	bhi.n	80067de <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d004      	beq.n	800678e <HAL_RCCEx_GetPeriphCLKFreq+0xce6>
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800678a:	d004      	beq.n	8006796 <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
          break;
 800678c:	e027      	b.n	80067de <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          frequency = HAL_RCC_GetPCLK1Freq();
 800678e:	f7fe fd6f 	bl	8005270 <HAL_RCC_GetPCLK1Freq>
 8006792:	61f8      	str	r0, [r7, #28]
          break;
 8006794:	e02a      	b.n	80067ec <HAL_RCCEx_GetPeriphCLKFreq+0xd44>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006796:	4b0a      	ldr	r3, [pc, #40]	; (80067c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006798:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800679c:	f003 0302 	and.w	r3, r3, #2
 80067a0:	2b02      	cmp	r3, #2
 80067a2:	d11e      	bne.n	80067e2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
              frequency = LSI_VALUE;
 80067a4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80067a8:	61fb      	str	r3, [r7, #28]
          break;
 80067aa:	e01a      	b.n	80067e2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80067ac:	4b04      	ldr	r3, [pc, #16]	; (80067c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067b8:	d115      	bne.n	80067e6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = HSI_VALUE;
 80067ba:	4b02      	ldr	r3, [pc, #8]	; (80067c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 80067bc:	61fb      	str	r3, [r7, #28]
          break;
 80067be:	e012      	b.n	80067e6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 80067c0:	40021000 	.word	0x40021000
 80067c4:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80067c8:	4b46      	ldr	r3, [pc, #280]	; (80068e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80067ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067ce:	f003 0302 	and.w	r3, r3, #2
 80067d2:	2b02      	cmp	r3, #2
 80067d4:	d109      	bne.n	80067ea <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
            frequency = LSE_VALUE;
 80067d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067da:	61fb      	str	r3, [r7, #28]
          break;
 80067dc:	e005      	b.n	80067ea <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
          break;
 80067de:	bf00      	nop
 80067e0:	e07a      	b.n	80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80067e2:	bf00      	nop
 80067e4:	e078      	b.n	80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80067e6:	bf00      	nop
 80067e8:	e076      	b.n	80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80067ea:	bf00      	nop
        break;
 80067ec:	e074      	b.n	80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80067ee:	4b3d      	ldr	r3, [pc, #244]	; (80068e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80067f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80067f4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80067f8:	60fb      	str	r3, [r7, #12]
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006800:	d02c      	beq.n	800685c <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006808:	d855      	bhi.n	80068b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d004      	beq.n	800681a <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006816:	d004      	beq.n	8006822 <HAL_RCCEx_GetPeriphCLKFreq+0xd7a>
          break;
 8006818:	e04d      	b.n	80068b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          frequency = HAL_RCC_GetSysClockFreq();
 800681a:	f7fe fc91 	bl	8005140 <HAL_RCC_GetSysClockFreq>
 800681e:	61f8      	str	r0, [r7, #28]
          break;
 8006820:	e04e      	b.n	80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe18>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006822:	4b30      	ldr	r3, [pc, #192]	; (80068e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f003 0302 	and.w	r3, r3, #2
 800682a:	2b02      	cmp	r3, #2
 800682c:	d145      	bne.n	80068ba <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800682e:	4b2d      	ldr	r3, [pc, #180]	; (80068e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f003 0308 	and.w	r3, r3, #8
 8006836:	2b00      	cmp	r3, #0
 8006838:	d005      	beq.n	8006846 <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 800683a:	4b2a      	ldr	r3, [pc, #168]	; (80068e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	091b      	lsrs	r3, r3, #4
 8006840:	f003 030f 	and.w	r3, r3, #15
 8006844:	e005      	b.n	8006852 <HAL_RCCEx_GetPeriphCLKFreq+0xdaa>
 8006846:	4b27      	ldr	r3, [pc, #156]	; (80068e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006848:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800684c:	0a1b      	lsrs	r3, r3, #8
 800684e:	f003 030f 	and.w	r3, r3, #15
 8006852:	4a25      	ldr	r2, [pc, #148]	; (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe40>)
 8006854:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006858:	61fb      	str	r3, [r7, #28]
          break;
 800685a:	e02e      	b.n	80068ba <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800685c:	4b21      	ldr	r3, [pc, #132]	; (80068e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006864:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006868:	d129      	bne.n	80068be <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800686a:	4b1e      	ldr	r3, [pc, #120]	; (80068e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800686c:	68db      	ldr	r3, [r3, #12]
 800686e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006872:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006876:	d122      	bne.n	80068be <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006878:	4b1a      	ldr	r3, [pc, #104]	; (80068e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800687a:	68db      	ldr	r3, [r3, #12]
 800687c:	0a1b      	lsrs	r3, r3, #8
 800687e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006882:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006884:	69bb      	ldr	r3, [r7, #24]
 8006886:	68ba      	ldr	r2, [r7, #8]
 8006888:	fb03 f202 	mul.w	r2, r3, r2
 800688c:	4b15      	ldr	r3, [pc, #84]	; (80068e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800688e:	68db      	ldr	r3, [r3, #12]
 8006890:	091b      	lsrs	r3, r3, #4
 8006892:	f003 030f 	and.w	r3, r3, #15
 8006896:	3301      	adds	r3, #1
 8006898:	fbb2 f3f3 	udiv	r3, r2, r3
 800689c:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800689e:	4b11      	ldr	r3, [pc, #68]	; (80068e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80068a0:	68db      	ldr	r3, [r3, #12]
 80068a2:	0d5b      	lsrs	r3, r3, #21
 80068a4:	f003 0303 	and.w	r3, r3, #3
 80068a8:	3301      	adds	r3, #1
 80068aa:	005b      	lsls	r3, r3, #1
 80068ac:	69ba      	ldr	r2, [r7, #24]
 80068ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80068b2:	61fb      	str	r3, [r7, #28]
          break;
 80068b4:	e003      	b.n	80068be <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          break;
 80068b6:	bf00      	nop
 80068b8:	e00e      	b.n	80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80068ba:	bf00      	nop
 80068bc:	e00c      	b.n	80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80068be:	bf00      	nop
        break;
 80068c0:	e00a      	b.n	80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80068c2:	bf00      	nop
 80068c4:	e008      	b.n	80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80068c6:	bf00      	nop
 80068c8:	e006      	b.n	80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80068ca:	bf00      	nop
 80068cc:	e004      	b.n	80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80068ce:	bf00      	nop
 80068d0:	e002      	b.n	80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80068d2:	bf00      	nop
 80068d4:	e000      	b.n	80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80068d6:	bf00      	nop
    }
  }

  return(frequency);
 80068d8:	69fb      	ldr	r3, [r7, #28]
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3720      	adds	r7, #32
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}
 80068e2:	bf00      	nop
 80068e4:	40021000 	.word	0x40021000
 80068e8:	0800b118 	.word	0x0800b118

080068ec <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80068ec:	b480      	push	{r7}
 80068ee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80068f0:	4b05      	ldr	r3, [pc, #20]	; (8006908 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a04      	ldr	r2, [pc, #16]	; (8006908 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80068f6:	f043 0304 	orr.w	r3, r3, #4
 80068fa:	6013      	str	r3, [r2, #0]
}
 80068fc:	bf00      	nop
 80068fe:	46bd      	mov	sp, r7
 8006900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006904:	4770      	bx	lr
 8006906:	bf00      	nop
 8006908:	40021000 	.word	0x40021000

0800690c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b084      	sub	sp, #16
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006916:	2300      	movs	r3, #0
 8006918:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800691a:	4b72      	ldr	r3, [pc, #456]	; (8006ae4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800691c:	68db      	ldr	r3, [r3, #12]
 800691e:	f003 0303 	and.w	r3, r3, #3
 8006922:	2b00      	cmp	r3, #0
 8006924:	d00e      	beq.n	8006944 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006926:	4b6f      	ldr	r3, [pc, #444]	; (8006ae4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006928:	68db      	ldr	r3, [r3, #12]
 800692a:	f003 0203 	and.w	r2, r3, #3
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	429a      	cmp	r2, r3
 8006934:	d103      	bne.n	800693e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
       ||
 800693a:	2b00      	cmp	r3, #0
 800693c:	d142      	bne.n	80069c4 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800693e:	2301      	movs	r3, #1
 8006940:	73fb      	strb	r3, [r7, #15]
 8006942:	e03f      	b.n	80069c4 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	2b03      	cmp	r3, #3
 800694a:	d018      	beq.n	800697e <RCCEx_PLLSAI1_Config+0x72>
 800694c:	2b03      	cmp	r3, #3
 800694e:	d825      	bhi.n	800699c <RCCEx_PLLSAI1_Config+0x90>
 8006950:	2b01      	cmp	r3, #1
 8006952:	d002      	beq.n	800695a <RCCEx_PLLSAI1_Config+0x4e>
 8006954:	2b02      	cmp	r3, #2
 8006956:	d009      	beq.n	800696c <RCCEx_PLLSAI1_Config+0x60>
 8006958:	e020      	b.n	800699c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800695a:	4b62      	ldr	r3, [pc, #392]	; (8006ae4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f003 0302 	and.w	r3, r3, #2
 8006962:	2b00      	cmp	r3, #0
 8006964:	d11d      	bne.n	80069a2 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8006966:	2301      	movs	r3, #1
 8006968:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800696a:	e01a      	b.n	80069a2 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800696c:	4b5d      	ldr	r3, [pc, #372]	; (8006ae4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006974:	2b00      	cmp	r3, #0
 8006976:	d116      	bne.n	80069a6 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8006978:	2301      	movs	r3, #1
 800697a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800697c:	e013      	b.n	80069a6 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800697e:	4b59      	ldr	r3, [pc, #356]	; (8006ae4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006986:	2b00      	cmp	r3, #0
 8006988:	d10f      	bne.n	80069aa <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800698a:	4b56      	ldr	r3, [pc, #344]	; (8006ae4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006992:	2b00      	cmp	r3, #0
 8006994:	d109      	bne.n	80069aa <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8006996:	2301      	movs	r3, #1
 8006998:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800699a:	e006      	b.n	80069aa <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800699c:	2301      	movs	r3, #1
 800699e:	73fb      	strb	r3, [r7, #15]
      break;
 80069a0:	e004      	b.n	80069ac <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80069a2:	bf00      	nop
 80069a4:	e002      	b.n	80069ac <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80069a6:	bf00      	nop
 80069a8:	e000      	b.n	80069ac <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80069aa:	bf00      	nop
    }

    if(status == HAL_OK)
 80069ac:	7bfb      	ldrb	r3, [r7, #15]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d108      	bne.n	80069c4 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80069b2:	4b4c      	ldr	r3, [pc, #304]	; (8006ae4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80069b4:	68db      	ldr	r3, [r3, #12]
 80069b6:	f023 0203 	bic.w	r2, r3, #3
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4949      	ldr	r1, [pc, #292]	; (8006ae4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80069c0:	4313      	orrs	r3, r2
 80069c2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80069c4:	7bfb      	ldrb	r3, [r7, #15]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	f040 8086 	bne.w	8006ad8 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80069cc:	4b45      	ldr	r3, [pc, #276]	; (8006ae4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a44      	ldr	r2, [pc, #272]	; (8006ae4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80069d2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80069d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069d8:	f7fc f8de 	bl	8002b98 <HAL_GetTick>
 80069dc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80069de:	e009      	b.n	80069f4 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80069e0:	f7fc f8da 	bl	8002b98 <HAL_GetTick>
 80069e4:	4602      	mov	r2, r0
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	1ad3      	subs	r3, r2, r3
 80069ea:	2b02      	cmp	r3, #2
 80069ec:	d902      	bls.n	80069f4 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80069ee:	2303      	movs	r3, #3
 80069f0:	73fb      	strb	r3, [r7, #15]
        break;
 80069f2:	e005      	b.n	8006a00 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80069f4:	4b3b      	ldr	r3, [pc, #236]	; (8006ae4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d1ef      	bne.n	80069e0 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006a00:	7bfb      	ldrb	r3, [r7, #15]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d168      	bne.n	8006ad8 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d113      	bne.n	8006a34 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006a0c:	4b35      	ldr	r3, [pc, #212]	; (8006ae4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006a0e:	691a      	ldr	r2, [r3, #16]
 8006a10:	4b35      	ldr	r3, [pc, #212]	; (8006ae8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006a12:	4013      	ands	r3, r2
 8006a14:	687a      	ldr	r2, [r7, #4]
 8006a16:	6892      	ldr	r2, [r2, #8]
 8006a18:	0211      	lsls	r1, r2, #8
 8006a1a:	687a      	ldr	r2, [r7, #4]
 8006a1c:	68d2      	ldr	r2, [r2, #12]
 8006a1e:	06d2      	lsls	r2, r2, #27
 8006a20:	4311      	orrs	r1, r2
 8006a22:	687a      	ldr	r2, [r7, #4]
 8006a24:	6852      	ldr	r2, [r2, #4]
 8006a26:	3a01      	subs	r2, #1
 8006a28:	0112      	lsls	r2, r2, #4
 8006a2a:	430a      	orrs	r2, r1
 8006a2c:	492d      	ldr	r1, [pc, #180]	; (8006ae4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	610b      	str	r3, [r1, #16]
 8006a32:	e02d      	b.n	8006a90 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	2b01      	cmp	r3, #1
 8006a38:	d115      	bne.n	8006a66 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006a3a:	4b2a      	ldr	r3, [pc, #168]	; (8006ae4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006a3c:	691a      	ldr	r2, [r3, #16]
 8006a3e:	4b2b      	ldr	r3, [pc, #172]	; (8006aec <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a40:	4013      	ands	r3, r2
 8006a42:	687a      	ldr	r2, [r7, #4]
 8006a44:	6892      	ldr	r2, [r2, #8]
 8006a46:	0211      	lsls	r1, r2, #8
 8006a48:	687a      	ldr	r2, [r7, #4]
 8006a4a:	6912      	ldr	r2, [r2, #16]
 8006a4c:	0852      	lsrs	r2, r2, #1
 8006a4e:	3a01      	subs	r2, #1
 8006a50:	0552      	lsls	r2, r2, #21
 8006a52:	4311      	orrs	r1, r2
 8006a54:	687a      	ldr	r2, [r7, #4]
 8006a56:	6852      	ldr	r2, [r2, #4]
 8006a58:	3a01      	subs	r2, #1
 8006a5a:	0112      	lsls	r2, r2, #4
 8006a5c:	430a      	orrs	r2, r1
 8006a5e:	4921      	ldr	r1, [pc, #132]	; (8006ae4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006a60:	4313      	orrs	r3, r2
 8006a62:	610b      	str	r3, [r1, #16]
 8006a64:	e014      	b.n	8006a90 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006a66:	4b1f      	ldr	r3, [pc, #124]	; (8006ae4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006a68:	691a      	ldr	r2, [r3, #16]
 8006a6a:	4b21      	ldr	r3, [pc, #132]	; (8006af0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a6c:	4013      	ands	r3, r2
 8006a6e:	687a      	ldr	r2, [r7, #4]
 8006a70:	6892      	ldr	r2, [r2, #8]
 8006a72:	0211      	lsls	r1, r2, #8
 8006a74:	687a      	ldr	r2, [r7, #4]
 8006a76:	6952      	ldr	r2, [r2, #20]
 8006a78:	0852      	lsrs	r2, r2, #1
 8006a7a:	3a01      	subs	r2, #1
 8006a7c:	0652      	lsls	r2, r2, #25
 8006a7e:	4311      	orrs	r1, r2
 8006a80:	687a      	ldr	r2, [r7, #4]
 8006a82:	6852      	ldr	r2, [r2, #4]
 8006a84:	3a01      	subs	r2, #1
 8006a86:	0112      	lsls	r2, r2, #4
 8006a88:	430a      	orrs	r2, r1
 8006a8a:	4916      	ldr	r1, [pc, #88]	; (8006ae4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006a90:	4b14      	ldr	r3, [pc, #80]	; (8006ae4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a13      	ldr	r2, [pc, #76]	; (8006ae4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006a96:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006a9a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a9c:	f7fc f87c 	bl	8002b98 <HAL_GetTick>
 8006aa0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006aa2:	e009      	b.n	8006ab8 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006aa4:	f7fc f878 	bl	8002b98 <HAL_GetTick>
 8006aa8:	4602      	mov	r2, r0
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	1ad3      	subs	r3, r2, r3
 8006aae:	2b02      	cmp	r3, #2
 8006ab0:	d902      	bls.n	8006ab8 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006ab2:	2303      	movs	r3, #3
 8006ab4:	73fb      	strb	r3, [r7, #15]
          break;
 8006ab6:	e005      	b.n	8006ac4 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006ab8:	4b0a      	ldr	r3, [pc, #40]	; (8006ae4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d0ef      	beq.n	8006aa4 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006ac4:	7bfb      	ldrb	r3, [r7, #15]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d106      	bne.n	8006ad8 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006aca:	4b06      	ldr	r3, [pc, #24]	; (8006ae4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006acc:	691a      	ldr	r2, [r3, #16]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	699b      	ldr	r3, [r3, #24]
 8006ad2:	4904      	ldr	r1, [pc, #16]	; (8006ae4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3710      	adds	r7, #16
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}
 8006ae2:	bf00      	nop
 8006ae4:	40021000 	.word	0x40021000
 8006ae8:	07ff800f 	.word	0x07ff800f
 8006aec:	ff9f800f 	.word	0xff9f800f
 8006af0:	f9ff800f 	.word	0xf9ff800f

08006af4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b084      	sub	sp, #16
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
 8006afc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006afe:	2300      	movs	r3, #0
 8006b00:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006b02:	4b72      	ldr	r3, [pc, #456]	; (8006ccc <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b04:	68db      	ldr	r3, [r3, #12]
 8006b06:	f003 0303 	and.w	r3, r3, #3
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d00e      	beq.n	8006b2c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006b0e:	4b6f      	ldr	r3, [pc, #444]	; (8006ccc <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b10:	68db      	ldr	r3, [r3, #12]
 8006b12:	f003 0203 	and.w	r2, r3, #3
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	d103      	bne.n	8006b26 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
       ||
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d142      	bne.n	8006bac <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8006b26:	2301      	movs	r3, #1
 8006b28:	73fb      	strb	r3, [r7, #15]
 8006b2a:	e03f      	b.n	8006bac <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	2b03      	cmp	r3, #3
 8006b32:	d018      	beq.n	8006b66 <RCCEx_PLLSAI2_Config+0x72>
 8006b34:	2b03      	cmp	r3, #3
 8006b36:	d825      	bhi.n	8006b84 <RCCEx_PLLSAI2_Config+0x90>
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	d002      	beq.n	8006b42 <RCCEx_PLLSAI2_Config+0x4e>
 8006b3c:	2b02      	cmp	r3, #2
 8006b3e:	d009      	beq.n	8006b54 <RCCEx_PLLSAI2_Config+0x60>
 8006b40:	e020      	b.n	8006b84 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006b42:	4b62      	ldr	r3, [pc, #392]	; (8006ccc <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f003 0302 	and.w	r3, r3, #2
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d11d      	bne.n	8006b8a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006b52:	e01a      	b.n	8006b8a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006b54:	4b5d      	ldr	r3, [pc, #372]	; (8006ccc <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d116      	bne.n	8006b8e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8006b60:	2301      	movs	r3, #1
 8006b62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006b64:	e013      	b.n	8006b8e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006b66:	4b59      	ldr	r3, [pc, #356]	; (8006ccc <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d10f      	bne.n	8006b92 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006b72:	4b56      	ldr	r3, [pc, #344]	; (8006ccc <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d109      	bne.n	8006b92 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006b82:	e006      	b.n	8006b92 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006b84:	2301      	movs	r3, #1
 8006b86:	73fb      	strb	r3, [r7, #15]
      break;
 8006b88:	e004      	b.n	8006b94 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006b8a:	bf00      	nop
 8006b8c:	e002      	b.n	8006b94 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006b8e:	bf00      	nop
 8006b90:	e000      	b.n	8006b94 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006b92:	bf00      	nop
    }

    if(status == HAL_OK)
 8006b94:	7bfb      	ldrb	r3, [r7, #15]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d108      	bne.n	8006bac <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8006b9a:	4b4c      	ldr	r3, [pc, #304]	; (8006ccc <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b9c:	68db      	ldr	r3, [r3, #12]
 8006b9e:	f023 0203 	bic.w	r2, r3, #3
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4949      	ldr	r1, [pc, #292]	; (8006ccc <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006bac:	7bfb      	ldrb	r3, [r7, #15]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	f040 8086 	bne.w	8006cc0 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006bb4:	4b45      	ldr	r3, [pc, #276]	; (8006ccc <RCCEx_PLLSAI2_Config+0x1d8>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a44      	ldr	r2, [pc, #272]	; (8006ccc <RCCEx_PLLSAI2_Config+0x1d8>)
 8006bba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006bbe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bc0:	f7fb ffea 	bl	8002b98 <HAL_GetTick>
 8006bc4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006bc6:	e009      	b.n	8006bdc <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006bc8:	f7fb ffe6 	bl	8002b98 <HAL_GetTick>
 8006bcc:	4602      	mov	r2, r0
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	1ad3      	subs	r3, r2, r3
 8006bd2:	2b02      	cmp	r3, #2
 8006bd4:	d902      	bls.n	8006bdc <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006bd6:	2303      	movs	r3, #3
 8006bd8:	73fb      	strb	r3, [r7, #15]
        break;
 8006bda:	e005      	b.n	8006be8 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006bdc:	4b3b      	ldr	r3, [pc, #236]	; (8006ccc <RCCEx_PLLSAI2_Config+0x1d8>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d1ef      	bne.n	8006bc8 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006be8:	7bfb      	ldrb	r3, [r7, #15]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d168      	bne.n	8006cc0 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d113      	bne.n	8006c1c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006bf4:	4b35      	ldr	r3, [pc, #212]	; (8006ccc <RCCEx_PLLSAI2_Config+0x1d8>)
 8006bf6:	695a      	ldr	r2, [r3, #20]
 8006bf8:	4b35      	ldr	r3, [pc, #212]	; (8006cd0 <RCCEx_PLLSAI2_Config+0x1dc>)
 8006bfa:	4013      	ands	r3, r2
 8006bfc:	687a      	ldr	r2, [r7, #4]
 8006bfe:	6892      	ldr	r2, [r2, #8]
 8006c00:	0211      	lsls	r1, r2, #8
 8006c02:	687a      	ldr	r2, [r7, #4]
 8006c04:	68d2      	ldr	r2, [r2, #12]
 8006c06:	06d2      	lsls	r2, r2, #27
 8006c08:	4311      	orrs	r1, r2
 8006c0a:	687a      	ldr	r2, [r7, #4]
 8006c0c:	6852      	ldr	r2, [r2, #4]
 8006c0e:	3a01      	subs	r2, #1
 8006c10:	0112      	lsls	r2, r2, #4
 8006c12:	430a      	orrs	r2, r1
 8006c14:	492d      	ldr	r1, [pc, #180]	; (8006ccc <RCCEx_PLLSAI2_Config+0x1d8>)
 8006c16:	4313      	orrs	r3, r2
 8006c18:	614b      	str	r3, [r1, #20]
 8006c1a:	e02d      	b.n	8006c78 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	2b01      	cmp	r3, #1
 8006c20:	d115      	bne.n	8006c4e <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006c22:	4b2a      	ldr	r3, [pc, #168]	; (8006ccc <RCCEx_PLLSAI2_Config+0x1d8>)
 8006c24:	695a      	ldr	r2, [r3, #20]
 8006c26:	4b2b      	ldr	r3, [pc, #172]	; (8006cd4 <RCCEx_PLLSAI2_Config+0x1e0>)
 8006c28:	4013      	ands	r3, r2
 8006c2a:	687a      	ldr	r2, [r7, #4]
 8006c2c:	6892      	ldr	r2, [r2, #8]
 8006c2e:	0211      	lsls	r1, r2, #8
 8006c30:	687a      	ldr	r2, [r7, #4]
 8006c32:	6912      	ldr	r2, [r2, #16]
 8006c34:	0852      	lsrs	r2, r2, #1
 8006c36:	3a01      	subs	r2, #1
 8006c38:	0552      	lsls	r2, r2, #21
 8006c3a:	4311      	orrs	r1, r2
 8006c3c:	687a      	ldr	r2, [r7, #4]
 8006c3e:	6852      	ldr	r2, [r2, #4]
 8006c40:	3a01      	subs	r2, #1
 8006c42:	0112      	lsls	r2, r2, #4
 8006c44:	430a      	orrs	r2, r1
 8006c46:	4921      	ldr	r1, [pc, #132]	; (8006ccc <RCCEx_PLLSAI2_Config+0x1d8>)
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	614b      	str	r3, [r1, #20]
 8006c4c:	e014      	b.n	8006c78 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006c4e:	4b1f      	ldr	r3, [pc, #124]	; (8006ccc <RCCEx_PLLSAI2_Config+0x1d8>)
 8006c50:	695a      	ldr	r2, [r3, #20]
 8006c52:	4b21      	ldr	r3, [pc, #132]	; (8006cd8 <RCCEx_PLLSAI2_Config+0x1e4>)
 8006c54:	4013      	ands	r3, r2
 8006c56:	687a      	ldr	r2, [r7, #4]
 8006c58:	6892      	ldr	r2, [r2, #8]
 8006c5a:	0211      	lsls	r1, r2, #8
 8006c5c:	687a      	ldr	r2, [r7, #4]
 8006c5e:	6952      	ldr	r2, [r2, #20]
 8006c60:	0852      	lsrs	r2, r2, #1
 8006c62:	3a01      	subs	r2, #1
 8006c64:	0652      	lsls	r2, r2, #25
 8006c66:	4311      	orrs	r1, r2
 8006c68:	687a      	ldr	r2, [r7, #4]
 8006c6a:	6852      	ldr	r2, [r2, #4]
 8006c6c:	3a01      	subs	r2, #1
 8006c6e:	0112      	lsls	r2, r2, #4
 8006c70:	430a      	orrs	r2, r1
 8006c72:	4916      	ldr	r1, [pc, #88]	; (8006ccc <RCCEx_PLLSAI2_Config+0x1d8>)
 8006c74:	4313      	orrs	r3, r2
 8006c76:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006c78:	4b14      	ldr	r3, [pc, #80]	; (8006ccc <RCCEx_PLLSAI2_Config+0x1d8>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a13      	ldr	r2, [pc, #76]	; (8006ccc <RCCEx_PLLSAI2_Config+0x1d8>)
 8006c7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c82:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c84:	f7fb ff88 	bl	8002b98 <HAL_GetTick>
 8006c88:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006c8a:	e009      	b.n	8006ca0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006c8c:	f7fb ff84 	bl	8002b98 <HAL_GetTick>
 8006c90:	4602      	mov	r2, r0
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	1ad3      	subs	r3, r2, r3
 8006c96:	2b02      	cmp	r3, #2
 8006c98:	d902      	bls.n	8006ca0 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006c9a:	2303      	movs	r3, #3
 8006c9c:	73fb      	strb	r3, [r7, #15]
          break;
 8006c9e:	e005      	b.n	8006cac <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006ca0:	4b0a      	ldr	r3, [pc, #40]	; (8006ccc <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d0ef      	beq.n	8006c8c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006cac:	7bfb      	ldrb	r3, [r7, #15]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d106      	bne.n	8006cc0 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006cb2:	4b06      	ldr	r3, [pc, #24]	; (8006ccc <RCCEx_PLLSAI2_Config+0x1d8>)
 8006cb4:	695a      	ldr	r2, [r3, #20]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	699b      	ldr	r3, [r3, #24]
 8006cba:	4904      	ldr	r1, [pc, #16]	; (8006ccc <RCCEx_PLLSAI2_Config+0x1d8>)
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	3710      	adds	r7, #16
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}
 8006cca:	bf00      	nop
 8006ccc:	40021000 	.word	0x40021000
 8006cd0:	07ff800f 	.word	0x07ff800f
 8006cd4:	ff9f800f 	.word	0xff9f800f
 8006cd8:	f9ff800f 	.word	0xf9ff800f

08006cdc <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b089      	sub	sp, #36	; 0x24
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8006cea:	2300      	movs	r3, #0
 8006cec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cf8:	d10b      	bne.n	8006d12 <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8006cfa:	4b7e      	ldr	r3, [pc, #504]	; (8006ef4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006cfc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006d00:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8006d04:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8006d06:	69bb      	ldr	r3, [r7, #24]
 8006d08:	2b60      	cmp	r3, #96	; 0x60
 8006d0a:	d112      	bne.n	8006d32 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006d0c:	4b7a      	ldr	r3, [pc, #488]	; (8006ef8 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8006d0e:	61fb      	str	r3, [r7, #28]
 8006d10:	e00f      	b.n	8006d32 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d18:	d10b      	bne.n	8006d32 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8006d1a:	4b76      	ldr	r3, [pc, #472]	; (8006ef4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006d1c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006d20:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006d24:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8006d26:	69bb      	ldr	r3, [r7, #24]
 8006d28:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d2c:	d101      	bne.n	8006d32 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8006d2e:	4b72      	ldr	r3, [pc, #456]	; (8006ef8 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8006d30:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8006d32:	69fb      	ldr	r3, [r7, #28]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	f040 80d6 	bne.w	8006ee6 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8006d3e:	69bb      	ldr	r3, [r7, #24]
 8006d40:	2b40      	cmp	r3, #64	; 0x40
 8006d42:	d003      	beq.n	8006d4c <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 8006d44:	69bb      	ldr	r3, [r7, #24]
 8006d46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d4a:	d13b      	bne.n	8006dc4 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8006d4c:	4b69      	ldr	r3, [pc, #420]	; (8006ef4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d54:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006d58:	f040 80c4 	bne.w	8006ee4 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 8006d5c:	4b65      	ldr	r3, [pc, #404]	; (8006ef4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006d5e:	68db      	ldr	r3, [r3, #12]
 8006d60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	f000 80bd 	beq.w	8006ee4 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006d6a:	4b62      	ldr	r3, [pc, #392]	; (8006ef4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006d6c:	68db      	ldr	r3, [r3, #12]
 8006d6e:	091b      	lsrs	r3, r3, #4
 8006d70:	f003 030f 	and.w	r3, r3, #15
 8006d74:	3301      	adds	r3, #1
 8006d76:	693a      	ldr	r2, [r7, #16]
 8006d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d7c:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006d7e:	4b5d      	ldr	r3, [pc, #372]	; (8006ef4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006d80:	68db      	ldr	r3, [r3, #12]
 8006d82:	0a1b      	lsrs	r3, r3, #8
 8006d84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d88:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8006d8a:	4b5a      	ldr	r3, [pc, #360]	; (8006ef4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006d8c:	68db      	ldr	r3, [r3, #12]
 8006d8e:	0edb      	lsrs	r3, r3, #27
 8006d90:	f003 031f 	and.w	r3, r3, #31
 8006d94:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d10a      	bne.n	8006db2 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8006d9c:	4b55      	ldr	r3, [pc, #340]	; (8006ef4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006d9e:	68db      	ldr	r3, [r3, #12]
 8006da0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d002      	beq.n	8006dae <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 8006da8:	2311      	movs	r3, #17
 8006daa:	617b      	str	r3, [r7, #20]
 8006dac:	e001      	b.n	8006db2 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 8006dae:	2307      	movs	r3, #7
 8006db0:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	68fa      	ldr	r2, [r7, #12]
 8006db6:	fb03 f202 	mul.w	r2, r3, r2
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dc0:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8006dc2:	e08f      	b.n	8006ee4 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8006dc4:	69bb      	ldr	r3, [r7, #24]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d13a      	bne.n	8006e40 <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8006dca:	4b4a      	ldr	r3, [pc, #296]	; (8006ef4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006dd2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006dd6:	f040 8086 	bne.w	8006ee6 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8006dda:	4b46      	ldr	r3, [pc, #280]	; (8006ef4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006ddc:	691b      	ldr	r3, [r3, #16]
 8006dde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d07f      	beq.n	8006ee6 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8006de6:	4b43      	ldr	r3, [pc, #268]	; (8006ef4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006de8:	691b      	ldr	r3, [r3, #16]
 8006dea:	091b      	lsrs	r3, r3, #4
 8006dec:	f003 030f 	and.w	r3, r3, #15
 8006df0:	3301      	adds	r3, #1
 8006df2:	693a      	ldr	r2, [r7, #16]
 8006df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006df8:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006dfa:	4b3e      	ldr	r3, [pc, #248]	; (8006ef4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006dfc:	691b      	ldr	r3, [r3, #16]
 8006dfe:	0a1b      	lsrs	r3, r3, #8
 8006e00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e04:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8006e06:	4b3b      	ldr	r3, [pc, #236]	; (8006ef4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006e08:	691b      	ldr	r3, [r3, #16]
 8006e0a:	0edb      	lsrs	r3, r3, #27
 8006e0c:	f003 031f 	and.w	r3, r3, #31
 8006e10:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d10a      	bne.n	8006e2e <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8006e18:	4b36      	ldr	r3, [pc, #216]	; (8006ef4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006e1a:	691b      	ldr	r3, [r3, #16]
 8006e1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d002      	beq.n	8006e2a <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 8006e24:	2311      	movs	r3, #17
 8006e26:	617b      	str	r3, [r7, #20]
 8006e28:	e001      	b.n	8006e2e <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 8006e2a:	2307      	movs	r3, #7
 8006e2c:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	68fa      	ldr	r2, [r7, #12]
 8006e32:	fb03 f202 	mul.w	r2, r3, r2
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e3c:	61fb      	str	r3, [r7, #28]
 8006e3e:	e052      	b.n	8006ee6 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 8006e40:	69bb      	ldr	r3, [r7, #24]
 8006e42:	2b80      	cmp	r3, #128	; 0x80
 8006e44:	d003      	beq.n	8006e4e <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 8006e46:	69bb      	ldr	r3, [r7, #24]
 8006e48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e4c:	d109      	bne.n	8006e62 <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006e4e:	4b29      	ldr	r3, [pc, #164]	; (8006ef4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e5a:	d144      	bne.n	8006ee6 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 8006e5c:	4b27      	ldr	r3, [pc, #156]	; (8006efc <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 8006e5e:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006e60:	e041      	b.n	8006ee6 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8006e62:	69bb      	ldr	r3, [r7, #24]
 8006e64:	2b20      	cmp	r3, #32
 8006e66:	d003      	beq.n	8006e70 <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 8006e68:	69bb      	ldr	r3, [r7, #24]
 8006e6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e6e:	d13a      	bne.n	8006ee6 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8006e70:	4b20      	ldr	r3, [pc, #128]	; (8006ef4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e7c:	d133      	bne.n	8006ee6 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8006e7e:	4b1d      	ldr	r3, [pc, #116]	; (8006ef4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006e80:	695b      	ldr	r3, [r3, #20]
 8006e82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d02d      	beq.n	8006ee6 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 8006e8a:	4b1a      	ldr	r3, [pc, #104]	; (8006ef4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006e8c:	695b      	ldr	r3, [r3, #20]
 8006e8e:	091b      	lsrs	r3, r3, #4
 8006e90:	f003 030f 	and.w	r3, r3, #15
 8006e94:	3301      	adds	r3, #1
 8006e96:	693a      	ldr	r2, [r7, #16]
 8006e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e9c:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8006e9e:	4b15      	ldr	r3, [pc, #84]	; (8006ef4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006ea0:	695b      	ldr	r3, [r3, #20]
 8006ea2:	0a1b      	lsrs	r3, r3, #8
 8006ea4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ea8:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 8006eaa:	4b12      	ldr	r3, [pc, #72]	; (8006ef4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006eac:	695b      	ldr	r3, [r3, #20]
 8006eae:	0edb      	lsrs	r3, r3, #27
 8006eb0:	f003 031f 	and.w	r3, r3, #31
 8006eb4:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d10a      	bne.n	8006ed2 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8006ebc:	4b0d      	ldr	r3, [pc, #52]	; (8006ef4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006ebe:	695b      	ldr	r3, [r3, #20]
 8006ec0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d002      	beq.n	8006ece <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 8006ec8:	2311      	movs	r3, #17
 8006eca:	617b      	str	r3, [r7, #20]
 8006ecc:	e001      	b.n	8006ed2 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 8006ece:	2307      	movs	r3, #7
 8006ed0:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	68fa      	ldr	r2, [r7, #12]
 8006ed6:	fb03 f202 	mul.w	r2, r3, r2
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ee0:	61fb      	str	r3, [r7, #28]
 8006ee2:	e000      	b.n	8006ee6 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8006ee4:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8006ee6:	69fb      	ldr	r3, [r7, #28]
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	3724      	adds	r7, #36	; 0x24
 8006eec:	46bd      	mov	sp, r7
 8006eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef2:	4770      	bx	lr
 8006ef4:	40021000 	.word	0x40021000
 8006ef8:	001fff68 	.word	0x001fff68
 8006efc:	00f42400 	.word	0x00f42400

08006f00 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b086      	sub	sp, #24
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	60f8      	str	r0, [r7, #12]
 8006f08:	60b9      	str	r1, [r7, #8]
 8006f0a:	607a      	str	r2, [r7, #4]
 8006f0c:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	2b02      	cmp	r3, #2
 8006f12:	d904      	bls.n	8006f1e <HAL_SAI_InitProtocol+0x1e>
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	3b03      	subs	r3, #3
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d812      	bhi.n	8006f42 <HAL_SAI_InitProtocol+0x42>
 8006f1c:	e008      	b.n	8006f30 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	687a      	ldr	r2, [r7, #4]
 8006f22:	68b9      	ldr	r1, [r7, #8]
 8006f24:	68f8      	ldr	r0, [r7, #12]
 8006f26:	f000 f9fb 	bl	8007320 <SAI_InitI2S>
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	75fb      	strb	r3, [r7, #23]
      break;
 8006f2e:	e00b      	b.n	8006f48 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	687a      	ldr	r2, [r7, #4]
 8006f34:	68b9      	ldr	r1, [r7, #8]
 8006f36:	68f8      	ldr	r0, [r7, #12]
 8006f38:	f000 faa4 	bl	8007484 <SAI_InitPCM>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	75fb      	strb	r3, [r7, #23]
      break;
 8006f40:	e002      	b.n	8006f48 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 8006f42:	2301      	movs	r3, #1
 8006f44:	75fb      	strb	r3, [r7, #23]
      break;
 8006f46:	bf00      	nop
  }

  if (status == HAL_OK)
 8006f48:	7dfb      	ldrb	r3, [r7, #23]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d104      	bne.n	8006f58 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 8006f4e:	68f8      	ldr	r0, [r7, #12]
 8006f50:	f000 f808 	bl	8006f64 <HAL_SAI_Init>
 8006f54:	4603      	mov	r3, r0
 8006f56:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006f58:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3718      	adds	r7, #24
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}
	...

08006f64 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b08a      	sub	sp, #40	; 0x28
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d101      	bne.n	8006f76 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8006f72:	2301      	movs	r3, #1
 8006f74:	e1c7      	b.n	8007306 <HAL_SAI_Init+0x3a2>

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006f7c:	2b01      	cmp	r3, #1
 8006f7e:	d10e      	bne.n	8006f9e <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a81      	ldr	r2, [pc, #516]	; (800718c <HAL_SAI_Init+0x228>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d107      	bne.n	8006f9a <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 8006f8e:	2b01      	cmp	r3, #1
 8006f90:	d103      	bne.n	8006f9a <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d001      	beq.n	8006f9e <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	e1b3      	b.n	8007306 <HAL_SAI_Init+0x3a2>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8006fa4:	b2db      	uxtb	r3, r3
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d106      	bne.n	8006fb8 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2200      	movs	r2, #0
 8006fae:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f7fb fbd4 	bl	8002760 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f000 fae5 	bl	8007588 <SAI_Disable>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d001      	beq.n	8006fc8 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	e19e      	b.n	8007306 <HAL_SAI_Init+0x3a2>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2202      	movs	r2, #2
 8006fcc:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	68db      	ldr	r3, [r3, #12]
 8006fd4:	2b02      	cmp	r3, #2
 8006fd6:	d00c      	beq.n	8006ff2 <HAL_SAI_Init+0x8e>
 8006fd8:	2b02      	cmp	r3, #2
 8006fda:	d80d      	bhi.n	8006ff8 <HAL_SAI_Init+0x94>
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d002      	beq.n	8006fe6 <HAL_SAI_Init+0x82>
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	d003      	beq.n	8006fec <HAL_SAI_Init+0x88>
 8006fe4:	e008      	b.n	8006ff8 <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006fea:	e008      	b.n	8006ffe <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8006fec:	2310      	movs	r3, #16
 8006fee:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006ff0:	e005      	b.n	8006ffe <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8006ff2:	2320      	movs	r3, #32
 8006ff4:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006ff6:	e002      	b.n	8006ffe <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006ffc:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	689b      	ldr	r3, [r3, #8]
 8007002:	2b03      	cmp	r3, #3
 8007004:	d81d      	bhi.n	8007042 <HAL_SAI_Init+0xde>
 8007006:	a201      	add	r2, pc, #4	; (adr r2, 800700c <HAL_SAI_Init+0xa8>)
 8007008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800700c:	0800701d 	.word	0x0800701d
 8007010:	08007023 	.word	0x08007023
 8007014:	0800702b 	.word	0x0800702b
 8007018:	08007033 	.word	0x08007033
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800701c:	2300      	movs	r3, #0
 800701e:	61fb      	str	r3, [r7, #28]
      break;
 8007020:	e012      	b.n	8007048 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8007022:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007026:	61fb      	str	r3, [r7, #28]
      break;
 8007028:	e00e      	b.n	8007048 <HAL_SAI_Init+0xe4>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800702a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800702e:	61fb      	str	r3, [r7, #28]
      break;
 8007030:	e00a      	b.n	8007048 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007032:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007036:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8007038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800703a:	f043 0301 	orr.w	r3, r3, #1
 800703e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007040:	e002      	b.n	8007048 <HAL_SAI_Init+0xe4>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 8007042:	2300      	movs	r3, #0
 8007044:	61fb      	str	r3, [r7, #28]
      break;
 8007046:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a4f      	ldr	r2, [pc, #316]	; (800718c <HAL_SAI_Init+0x228>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d004      	beq.n	800705c <HAL_SAI_Init+0xf8>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a4e      	ldr	r2, [pc, #312]	; (8007190 <HAL_SAI_Init+0x22c>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d103      	bne.n	8007064 <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 800705c:	4a4d      	ldr	r2, [pc, #308]	; (8007194 <HAL_SAI_Init+0x230>)
 800705e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007060:	6013      	str	r3, [r2, #0]
 8007062:	e002      	b.n	800706a <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8007064:	4a4c      	ldr	r2, [pc, #304]	; (8007198 <HAL_SAI_Init+0x234>)
 8007066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007068:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	69db      	ldr	r3, [r3, #28]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d073      	beq.n	800715a <HAL_SAI_Init+0x1f6>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a45      	ldr	r2, [pc, #276]	; (800718c <HAL_SAI_Init+0x228>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d004      	beq.n	8007086 <HAL_SAI_Init+0x122>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a43      	ldr	r2, [pc, #268]	; (8007190 <HAL_SAI_Init+0x22c>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d105      	bne.n	8007092 <HAL_SAI_Init+0x12e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8007086:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800708a:	f7fe fd0d 	bl	8005aa8 <HAL_RCCEx_GetPeriphCLKFreq>
 800708e:	61b8      	str	r0, [r7, #24]
 8007090:	e004      	b.n	800709c <HAL_SAI_Init+0x138>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8007092:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8007096:	f7fe fd07 	bl	8005aa8 <HAL_RCCEx_GetPeriphCLKFreq>
 800709a:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NOMCK = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NOMCK = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	695b      	ldr	r3, [r3, #20]
 80070a0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80070a4:	d120      	bne.n	80070e8 <HAL_SAI_Init+0x184>
    {
      /* NOMCK = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070aa:	2b04      	cmp	r3, #4
 80070ac:	d102      	bne.n	80070b4 <HAL_SAI_Init+0x150>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 80070ae:	2340      	movs	r3, #64	; 0x40
 80070b0:	613b      	str	r3, [r7, #16]
 80070b2:	e00a      	b.n	80070ca <HAL_SAI_Init+0x166>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070b8:	2b08      	cmp	r3, #8
 80070ba:	d103      	bne.n	80070c4 <HAL_SAI_Init+0x160>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 80070bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80070c0:	613b      	str	r3, [r7, #16]
 80070c2:	e002      	b.n	80070ca <HAL_SAI_Init+0x166>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070c8:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 80070ca:	69ba      	ldr	r2, [r7, #24]
 80070cc:	4613      	mov	r3, r2
 80070ce:	009b      	lsls	r3, r3, #2
 80070d0:	4413      	add	r3, r2
 80070d2:	005b      	lsls	r3, r3, #1
 80070d4:	4619      	mov	r1, r3
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	69db      	ldr	r3, [r3, #28]
 80070da:	693a      	ldr	r2, [r7, #16]
 80070dc:	fb02 f303 	mul.w	r3, r2, r3
 80070e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80070e4:	617b      	str	r3, [r7, #20]
 80070e6:	e017      	b.n	8007118 <HAL_SAI_Init+0x1b4>
    }
    else
    {
      /* NOMCK = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80070f0:	d101      	bne.n	80070f6 <HAL_SAI_Init+0x192>
 80070f2:	2302      	movs	r3, #2
 80070f4:	e000      	b.n	80070f8 <HAL_SAI_Init+0x194>
 80070f6:	2301      	movs	r3, #1
 80070f8:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 80070fa:	69ba      	ldr	r2, [r7, #24]
 80070fc:	4613      	mov	r3, r2
 80070fe:	009b      	lsls	r3, r3, #2
 8007100:	4413      	add	r3, r2
 8007102:	005b      	lsls	r3, r3, #1
 8007104:	4619      	mov	r1, r3
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	69db      	ldr	r3, [r3, #28]
 800710a:	68fa      	ldr	r2, [r7, #12]
 800710c:	fb02 f303 	mul.w	r3, r2, r3
 8007110:	021b      	lsls	r3, r3, #8
 8007112:	fbb1 f3f3 	udiv	r3, r1, r3
 8007116:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	4a20      	ldr	r2, [pc, #128]	; (800719c <HAL_SAI_Init+0x238>)
 800711c:	fba2 2303 	umull	r2, r3, r2, r3
 8007120:	08da      	lsrs	r2, r3, #3
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8007126:	6979      	ldr	r1, [r7, #20]
 8007128:	4b1c      	ldr	r3, [pc, #112]	; (800719c <HAL_SAI_Init+0x238>)
 800712a:	fba3 2301 	umull	r2, r3, r3, r1
 800712e:	08da      	lsrs	r2, r3, #3
 8007130:	4613      	mov	r3, r2
 8007132:	009b      	lsls	r3, r3, #2
 8007134:	4413      	add	r3, r2
 8007136:	005b      	lsls	r3, r3, #1
 8007138:	1aca      	subs	r2, r1, r3
 800713a:	2a08      	cmp	r2, #8
 800713c:	d904      	bls.n	8007148 <HAL_SAI_Init+0x1e4>
    {
      hsai->Init.Mckdiv += 1U;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6a1b      	ldr	r3, [r3, #32]
 8007142:	1c5a      	adds	r2, r3, #1
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800714c:	2b04      	cmp	r3, #4
 800714e:	d104      	bne.n	800715a <HAL_SAI_Init+0x1f6>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6a1b      	ldr	r3, [r3, #32]
 8007154:	085a      	lsrs	r2, r3, #1
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d003      	beq.n	800716a <HAL_SAI_Init+0x206>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	685b      	ldr	r3, [r3, #4]
 8007166:	2b02      	cmp	r3, #2
 8007168:	d109      	bne.n	800717e <HAL_SAI_Init+0x21a>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800716e:	2b01      	cmp	r3, #1
 8007170:	d101      	bne.n	8007176 <HAL_SAI_Init+0x212>
 8007172:	2300      	movs	r3, #0
 8007174:	e001      	b.n	800717a <HAL_SAI_Init+0x216>
 8007176:	f44f 7300 	mov.w	r3, #512	; 0x200
 800717a:	623b      	str	r3, [r7, #32]
 800717c:	e012      	b.n	80071a4 <HAL_SAI_Init+0x240>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007182:	2b01      	cmp	r3, #1
 8007184:	d10c      	bne.n	80071a0 <HAL_SAI_Init+0x23c>
 8007186:	f44f 7300 	mov.w	r3, #512	; 0x200
 800718a:	e00a      	b.n	80071a2 <HAL_SAI_Init+0x23e>
 800718c:	40015404 	.word	0x40015404
 8007190:	40015424 	.word	0x40015424
 8007194:	40015400 	.word	0x40015400
 8007198:	40015800 	.word	0x40015800
 800719c:	cccccccd 	.word	0xcccccccd
 80071a0:	2300      	movs	r3, #0
 80071a2:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	6819      	ldr	r1, [r3, #0]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681a      	ldr	r2, [r3, #0]
 80071ae:	4b58      	ldr	r3, [pc, #352]	; (8007310 <HAL_SAI_Init+0x3ac>)
 80071b0:	400b      	ands	r3, r1
 80071b2:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NOMCK | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	6819      	ldr	r1, [r3, #0]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	685a      	ldr	r2, [r3, #4]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071c2:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80071c8:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071ce:	431a      	orrs	r2, r3
 80071d0:	6a3b      	ldr	r3, [r7, #32]
 80071d2:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 80071d4:	69fb      	ldr	r3, [r7, #28]
 80071d6:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          ckstr_bits | syncen_bits |                             \
 80071dc:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	691b      	ldr	r3, [r3, #16]
 80071e2:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80071e8:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6a1b      	ldr	r3, [r3, #32]
 80071ee:	051b      	lsls	r3, r3, #20
 80071f0:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80071f6:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	430a      	orrs	r2, r1
 80071fe:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	685b      	ldr	r3, [r3, #4]
 8007206:	687a      	ldr	r2, [r7, #4]
 8007208:	6812      	ldr	r2, [r2, #0]
 800720a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800720e:	f023 030f 	bic.w	r3, r3, #15
 8007212:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	6859      	ldr	r1, [r3, #4]
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	699a      	ldr	r2, [r3, #24]
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007222:	431a      	orrs	r2, r3
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007228:	431a      	orrs	r2, r3
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	430a      	orrs	r2, r1
 8007230:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	6899      	ldr	r1, [r3, #8]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681a      	ldr	r2, [r3, #0]
 800723c:	4b35      	ldr	r3, [pc, #212]	; (8007314 <HAL_SAI_Init+0x3b0>)
 800723e:	400b      	ands	r3, r1
 8007240:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	6899      	ldr	r1, [r3, #8]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800724c:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007252:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6d9b      	ldr	r3, [r3, #88]	; 0x58
                           hsai->FrameInit.FSOffset |
 8007258:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSDefinition |
 800725e:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007264:	3b01      	subs	r3, #1
 8007266:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8007268:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	430a      	orrs	r2, r1
 8007270:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	68d9      	ldr	r1, [r3, #12]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681a      	ldr	r2, [r3, #0]
 800727c:	f24f 0320 	movw	r3, #61472	; 0xf020
 8007280:	400b      	ands	r3, r1
 8007282:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	68d9      	ldr	r1, [r3, #12]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007292:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007298:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800729a:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072a0:	3b01      	subs	r3, #1
 80072a2:	021b      	lsls	r3, r3, #8
 80072a4:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	430a      	orrs	r2, r1
 80072ac:	60da      	str	r2, [r3, #12]

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a19      	ldr	r2, [pc, #100]	; (8007318 <HAL_SAI_Init+0x3b4>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d119      	bne.n	80072ec <HAL_SAI_Init+0x388>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 80072b8:	4b18      	ldr	r3, [pc, #96]	; (800731c <HAL_SAI_Init+0x3b8>)
 80072ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072bc:	4a17      	ldr	r2, [pc, #92]	; (800731c <HAL_SAI_Init+0x3b8>)
 80072be:	f023 0301 	bic.w	r3, r3, #1
 80072c2:	6453      	str	r3, [r2, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80072ca:	2b01      	cmp	r3, #1
 80072cc:	d10e      	bne.n	80072ec <HAL_SAI_Init+0x388>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072d6:	3b01      	subs	r3, #1
 80072d8:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 80072da:	4910      	ldr	r1, [pc, #64]	; (800731c <HAL_SAI_Init+0x3b8>)
 80072dc:	4313      	orrs	r3, r2
 80072de:	644b      	str	r3, [r1, #68]	; 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 80072e0:	4b0e      	ldr	r3, [pc, #56]	; (800731c <HAL_SAI_Init+0x3b8>)
 80072e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072e4:	4a0d      	ldr	r2, [pc, #52]	; (800731c <HAL_SAI_Init+0x3b8>)
 80072e6:	f043 0301 	orr.w	r3, r3, #1
 80072ea:	6453      	str	r3, [r2, #68]	; 0x44
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2200      	movs	r2, #0
 80072f0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2201      	movs	r2, #1
 80072f8:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2200      	movs	r2, #0
 8007300:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

  return HAL_OK;
 8007304:	2300      	movs	r3, #0
}
 8007306:	4618      	mov	r0, r3
 8007308:	3728      	adds	r7, #40	; 0x28
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}
 800730e:	bf00      	nop
 8007310:	f805c010 	.word	0xf805c010
 8007314:	fff88000 	.word	0xfff88000
 8007318:	40015404 	.word	0x40015404
 800731c:	40015400 	.word	0x40015400

08007320 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8007320:	b480      	push	{r7}
 8007322:	b087      	sub	sp, #28
 8007324:	af00      	add	r7, sp, #0
 8007326:	60f8      	str	r0, [r7, #12]
 8007328:	60b9      	str	r1, [r7, #8]
 800732a:	607a      	str	r2, [r7, #4]
 800732c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800732e:	2300      	movs	r3, #0
 8007330:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	2200      	movs	r2, #0
 8007336:	641a      	str	r2, [r3, #64]	; 0x40
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	2200      	movs	r2, #0
 800733c:	649a      	str	r2, [r3, #72]	; 0x48
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d003      	beq.n	800734e <SAI_InitI2S+0x2e>
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	2b02      	cmp	r3, #2
 800734c:	d103      	bne.n	8007356 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	2200      	movs	r2, #0
 8007352:	64da      	str	r2, [r3, #76]	; 0x4c
 8007354:	e002      	b.n	800735c <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	2201      	movs	r2, #1
 800735a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007362:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800736a:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.FirstBitOffset  = 0;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	2200      	movs	r2, #0
 8007370:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.SlotNumber      = nbslot;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	683a      	ldr	r2, [r7, #0]
 8007376:	66da      	str	r2, [r3, #108]	; 0x6c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	f003 0301 	and.w	r3, r3, #1
 800737e:	2b00      	cmp	r3, #0
 8007380:	d001      	beq.n	8007386 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 8007382:	2301      	movs	r3, #1
 8007384:	e077      	b.n	8007476 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d107      	bne.n	800739c <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	2200      	movs	r2, #0
 8007390:	65da      	str	r2, [r3, #92]	; 0x5c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8007398:	661a      	str	r2, [r3, #96]	; 0x60
 800739a:	e006      	b.n	80073aa <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80073a2:	65da      	str	r2, [r3, #92]	; 0x5c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	2200      	movs	r2, #0
 80073a8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Frame definition */
  switch (datasize)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2b03      	cmp	r3, #3
 80073ae:	d84f      	bhi.n	8007450 <SAI_InitI2S+0x130>
 80073b0:	a201      	add	r2, pc, #4	; (adr r2, 80073b8 <SAI_InitI2S+0x98>)
 80073b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073b6:	bf00      	nop
 80073b8:	080073c9 	.word	0x080073c9
 80073bc:	080073eb 	.word	0x080073eb
 80073c0:	0800740d 	.word	0x0800740d
 80073c4:	0800742f 	.word	0x0800742f
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	2280      	movs	r2, #128	; 0x80
 80073cc:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	085b      	lsrs	r3, r3, #1
 80073d2:	015a      	lsls	r2, r3, #5
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	085b      	lsrs	r3, r3, #1
 80073dc:	011a      	lsls	r2, r3, #4
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	2240      	movs	r2, #64	; 0x40
 80073e6:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 80073e8:	e035      	b.n	8007456 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	2280      	movs	r2, #128	; 0x80
 80073ee:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	085b      	lsrs	r3, r3, #1
 80073f4:	019a      	lsls	r2, r3, #6
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	085b      	lsrs	r3, r3, #1
 80073fe:	015a      	lsls	r2, r3, #5
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	2280      	movs	r2, #128	; 0x80
 8007408:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 800740a:	e024      	b.n	8007456 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	22c0      	movs	r2, #192	; 0xc0
 8007410:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	085b      	lsrs	r3, r3, #1
 8007416:	019a      	lsls	r2, r3, #6
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	085b      	lsrs	r3, r3, #1
 8007420:	015a      	lsls	r2, r3, #5
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2280      	movs	r2, #128	; 0x80
 800742a:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 800742c:	e013      	b.n	8007456 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	22e0      	movs	r2, #224	; 0xe0
 8007432:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	085b      	lsrs	r3, r3, #1
 8007438:	019a      	lsls	r2, r3, #6
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	085b      	lsrs	r3, r3, #1
 8007442:	015a      	lsls	r2, r3, #5
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2280      	movs	r2, #128	; 0x80
 800744c:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 800744e:	e002      	b.n	8007456 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 8007450:	2301      	movs	r3, #1
 8007452:	75fb      	strb	r3, [r7, #23]
      break;
 8007454:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	2b02      	cmp	r3, #2
 800745a:	d10b      	bne.n	8007474 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2b01      	cmp	r3, #1
 8007460:	d102      	bne.n	8007468 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	2210      	movs	r2, #16
 8007466:	665a      	str	r2, [r3, #100]	; 0x64
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2b02      	cmp	r3, #2
 800746c:	d102      	bne.n	8007474 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	2208      	movs	r2, #8
 8007472:	665a      	str	r2, [r3, #100]	; 0x64
    }
  }
  return status;
 8007474:	7dfb      	ldrb	r3, [r7, #23]
}
 8007476:	4618      	mov	r0, r3
 8007478:	371c      	adds	r7, #28
 800747a:	46bd      	mov	sp, r7
 800747c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007480:	4770      	bx	lr
 8007482:	bf00      	nop

08007484 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8007484:	b480      	push	{r7}
 8007486:	b087      	sub	sp, #28
 8007488:	af00      	add	r7, sp, #0
 800748a:	60f8      	str	r0, [r7, #12]
 800748c:	60b9      	str	r1, [r7, #8]
 800748e:	607a      	str	r2, [r7, #4]
 8007490:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007492:	2300      	movs	r3, #0
 8007494:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	2200      	movs	r2, #0
 800749a:	641a      	str	r2, [r3, #64]	; 0x40
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	2200      	movs	r2, #0
 80074a0:	649a      	str	r2, [r3, #72]	; 0x48
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	685b      	ldr	r3, [r3, #4]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d003      	beq.n	80074b2 <SAI_InitPCM+0x2e>
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	2b02      	cmp	r3, #2
 80074b0:	d103      	bne.n	80074ba <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2201      	movs	r2, #1
 80074b6:	64da      	str	r2, [r3, #76]	; 0x4c
 80074b8:	e002      	b.n	80074c0 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	2200      	movs	r2, #0
 80074be:	64da      	str	r2, [r3, #76]	; 0x4c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	2200      	movs	r2, #0
 80074c4:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80074cc:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80074d4:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	2200      	movs	r2, #0
 80074da:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.SlotNumber      = nbslot;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	683a      	ldr	r2, [r7, #0]
 80074e0:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80074e8:	671a      	str	r2, [r3, #112]	; 0x70

  if (protocol == SAI_PCM_SHORT)
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	2b04      	cmp	r3, #4
 80074ee:	d103      	bne.n	80074f8 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	2201      	movs	r2, #1
 80074f4:	655a      	str	r2, [r3, #84]	; 0x54
 80074f6:	e002      	b.n	80074fe <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	220d      	movs	r2, #13
 80074fc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  switch (datasize)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2b03      	cmp	r3, #3
 8007502:	d837      	bhi.n	8007574 <SAI_InitPCM+0xf0>
 8007504:	a201      	add	r2, pc, #4	; (adr r2, 800750c <SAI_InitPCM+0x88>)
 8007506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800750a:	bf00      	nop
 800750c:	0800751d 	.word	0x0800751d
 8007510:	08007533 	.word	0x08007533
 8007514:	08007549 	.word	0x08007549
 8007518:	0800755f 	.word	0x0800755f
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	2280      	movs	r2, #128	; 0x80
 8007520:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	011a      	lsls	r2, r3, #4
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	2240      	movs	r2, #64	; 0x40
 800752e:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8007530:	e023      	b.n	800757a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2280      	movs	r2, #128	; 0x80
 8007536:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	015a      	lsls	r2, r3, #5
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2280      	movs	r2, #128	; 0x80
 8007544:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8007546:	e018      	b.n	800757a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	22c0      	movs	r2, #192	; 0xc0
 800754c:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	015a      	lsls	r2, r3, #5
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2280      	movs	r2, #128	; 0x80
 800755a:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 800755c:	e00d      	b.n	800757a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	22e0      	movs	r2, #224	; 0xe0
 8007562:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	015a      	lsls	r2, r3, #5
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	2280      	movs	r2, #128	; 0x80
 8007570:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8007572:	e002      	b.n	800757a <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 8007574:	2301      	movs	r3, #1
 8007576:	75fb      	strb	r3, [r7, #23]
      break;
 8007578:	bf00      	nop
  }

  return status;
 800757a:	7dfb      	ldrb	r3, [r7, #23]
}
 800757c:	4618      	mov	r0, r3
 800757e:	371c      	adds	r7, #28
 8007580:	46bd      	mov	sp, r7
 8007582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007586:	4770      	bx	lr

08007588 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8007588:	b480      	push	{r7}
 800758a:	b085      	sub	sp, #20
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8007590:	4b18      	ldr	r3, [pc, #96]	; (80075f4 <SAI_Disable+0x6c>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4a18      	ldr	r2, [pc, #96]	; (80075f8 <SAI_Disable+0x70>)
 8007596:	fba2 2303 	umull	r2, r3, r2, r3
 800759a:	0b1b      	lsrs	r3, r3, #12
 800759c:	009b      	lsls	r3, r3, #2
 800759e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80075a0:	2300      	movs	r3, #0
 80075a2:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	681a      	ldr	r2, [r3, #0]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80075b2:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d10a      	bne.n	80075d0 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075c0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      status = HAL_TIMEOUT;
 80075ca:	2303      	movs	r3, #3
 80075cc:	72fb      	strb	r3, [r7, #11]
      break;
 80075ce:	e009      	b.n	80075e4 <SAI_Disable+0x5c>
    }
    count--;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	3b01      	subs	r3, #1
 80075d4:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d1e7      	bne.n	80075b4 <SAI_Disable+0x2c>

  return status;
 80075e4:	7afb      	ldrb	r3, [r7, #11]
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	3714      	adds	r7, #20
 80075ea:	46bd      	mov	sp, r7
 80075ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f0:	4770      	bx	lr
 80075f2:	bf00      	nop
 80075f4:	20000004 	.word	0x20000004
 80075f8:	95cbec1b 	.word	0x95cbec1b

080075fc <HAL_SMBUS_Init>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_Init(SMBUS_HandleTypeDef *hsmbus)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b082      	sub	sp, #8
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
  /* Check the SMBUS handle allocation */
  if (hsmbus == NULL)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d101      	bne.n	800760e <HAL_SMBUS_Init+0x12>
  {
    return HAL_ERROR;
 800760a:	2301      	movs	r3, #1
 800760c:	e0aa      	b.n	8007764 <HAL_SMBUS_Init+0x168>
  assert_param(IS_SMBUS_GENERAL_CALL(hsmbus->Init.GeneralCallMode));
  assert_param(IS_SMBUS_NO_STRETCH(hsmbus->Init.NoStretchMode));
  assert_param(IS_SMBUS_PEC(hsmbus->Init.PacketErrorCheckMode));
  assert_param(IS_SMBUS_PERIPHERAL_MODE(hsmbus->Init.PeripheralMode));

  if (hsmbus->State == HAL_SMBUS_STATE_RESET)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007612:	2b00      	cmp	r3, #0
 8007614:	d106      	bne.n	8007624 <HAL_SMBUS_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hsmbus->Lock = HAL_UNLOCKED;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2200      	movs	r2, #0
 800761a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hsmbus->MspInitCallback(hsmbus);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_SMBUS_MspInit(hsmbus);
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f7fa fca0 	bl	8001f64 <HAL_SMBUS_MspInit>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
  }

  hsmbus->State = HAL_SMBUS_STATE_BUSY;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2202      	movs	r2, #2
 8007628:	649a      	str	r2, [r3, #72]	; 0x48

  /* Disable the selected SMBUS peripheral */
  __HAL_SMBUS_DISABLE(hsmbus);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	681a      	ldr	r2, [r3, #0]
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f022 0201 	bic.w	r2, r2, #1
 8007638:	601a      	str	r2, [r3, #0]

  /*---------------------------- SMBUSx TIMINGR Configuration ------------------------*/
  /* Configure SMBUSx: Frequency range */
  hsmbus->Instance->TIMINGR = hsmbus->Init.Timing & TIMING_CLEAR_MASK;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	685a      	ldr	r2, [r3, #4]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007646:	611a      	str	r2, [r3, #16]

  /*---------------------------- SMBUSx TIMEOUTR Configuration ------------------------*/
  /* Configure SMBUSx: Bus Timeout  */
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TIMOUTEN;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	695a      	ldr	r2, [r3, #20]
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007656:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TEXTEN;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	695a      	ldr	r2, [r3, #20]
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8007666:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR = hsmbus->Init.SMBusTimeout;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	687a      	ldr	r2, [r7, #4]
 800766e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007670:	615a      	str	r2, [r3, #20]

  /*---------------------------- SMBUSx OAR1 Configuration -----------------------*/
  /* Configure SMBUSx: Own Address1 and ack own address1 mode */
  hsmbus->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	689a      	ldr	r2, [r3, #8]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007680:	609a      	str	r2, [r3, #8]

  if (hsmbus->Init.OwnAddress1 != 0UL)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	68db      	ldr	r3, [r3, #12]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d012      	beq.n	80076b0 <HAL_SMBUS_Init+0xb4>
  {
    if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_7BIT)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	691b      	ldr	r3, [r3, #16]
 800768e:	2b01      	cmp	r3, #1
 8007690:	d107      	bne.n	80076a2 <HAL_SMBUS_Init+0xa6>
    {
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | hsmbus->Init.OwnAddress1);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	68da      	ldr	r2, [r3, #12]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800769e:	609a      	str	r2, [r3, #8]
 80076a0:	e006      	b.n	80076b0 <HAL_SMBUS_Init+0xb4>
    }
    else /* SMBUS_ADDRESSINGMODE_10BIT */
    {
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hsmbus->Init.OwnAddress1);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	68da      	ldr	r2, [r3, #12]
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80076ae:	609a      	str	r2, [r3, #8]
    }
  }

  /*---------------------------- SMBUSx CR2 Configuration ------------------------*/
  /* Configure SMBUSx: Addressing Master mode */
  if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_10BIT)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	691b      	ldr	r3, [r3, #16]
 80076b4:	2b02      	cmp	r3, #2
 80076b6:	d104      	bne.n	80076c2 <HAL_SMBUS_Init+0xc6>
  {
    hsmbus->Instance->CR2 = (I2C_CR2_ADD10);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80076c0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process) */
  /* AUTOEND and NACK bit will be manage during Transfer process */
  hsmbus->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	687a      	ldr	r2, [r7, #4]
 80076ca:	6812      	ldr	r2, [r2, #0]
 80076cc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80076d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076d4:	6053      	str	r3, [r2, #4]

  /*---------------------------- SMBUSx OAR2 Configuration -----------------------*/
  /* Configure SMBUSx: Dual mode and Own Address2 */
  hsmbus->Instance->OAR2 = (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2 | \
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	695a      	ldr	r2, [r3, #20]
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	699b      	ldr	r3, [r3, #24]
 80076de:	ea42 0103 	orr.w	r1, r2, r3
                            (hsmbus->Init.OwnAddress2Masks << 8U));
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	69db      	ldr	r3, [r3, #28]
 80076e6:	021a      	lsls	r2, r3, #8
  hsmbus->Instance->OAR2 = (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2 | \
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	430a      	orrs	r2, r1
 80076ee:	60da      	str	r2, [r3, #12]

  /*---------------------------- SMBUSx CR1 Configuration ------------------------*/
  /* Configure SMBUSx: Generalcall and NoStretch mode */
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6a1a      	ldr	r2, [r3, #32]
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076f8:	431a      	orrs	r2, r3
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 80076fe:	431a      	orrs	r2, r3
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007704:	ea42 0103 	orr.w	r1, r2, r3
                           hsmbus->Init.AnalogFilter);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	689a      	ldr	r2, [r3, #8]
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 8007710:	430a      	orrs	r2, r1
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 8007712:	601a      	str	r2, [r3, #0]

  /* Enable Slave Byte Control only in case of Packet Error Check is enabled
     and SMBUS Peripheral is set in Slave mode */
  if ((hsmbus->Init.PacketErrorCheckMode == SMBUS_PEC_ENABLE) && \
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007718:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800771c:	d110      	bne.n	8007740 <HAL_SMBUS_Init+0x144>
      ((hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE) || \
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  if ((hsmbus->Init.PacketErrorCheckMode == SMBUS_PEC_ENABLE) && \
 8007722:	2b00      	cmp	r3, #0
 8007724:	d004      	beq.n	8007730 <HAL_SMBUS_Init+0x134>
       (hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE_ARP)))
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      ((hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE) || \
 800772a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800772e:	d107      	bne.n	8007740 <HAL_SMBUS_Init+0x144>
  {
    hsmbus->Instance->CR1 |= I2C_CR1_SBC;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	681a      	ldr	r2, [r3, #0]
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800773e:	601a      	str	r2, [r3, #0]
  }

  /* Enable the selected SMBUS peripheral */
  __HAL_SMBUS_ENABLE(hsmbus);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	681a      	ldr	r2, [r3, #0]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f042 0201 	orr.w	r2, r2, #1
 800774e:	601a      	str	r2, [r3, #0]

  hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2200      	movs	r2, #0
 8007754:	64da      	str	r2, [r3, #76]	; 0x4c
  hsmbus->PreviousState = HAL_SMBUS_STATE_READY;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2201      	movs	r2, #1
 800775a:	641a      	str	r2, [r3, #64]	; 0x40
  hsmbus->State = HAL_SMBUS_STATE_READY;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2201      	movs	r2, #1
 8007760:	649a      	str	r2, [r3, #72]	; 0x48

  return HAL_OK;
 8007762:	2300      	movs	r3, #0
}
 8007764:	4618      	mov	r0, r3
 8007766:	3708      	adds	r7, #8
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}

0800776c <HAL_SMBUS_EnableAlert_IT>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUSx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_EnableAlert_IT(SMBUS_HandleTypeDef *hsmbus)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b082      	sub	sp, #8
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
  /* Enable SMBus alert */
  hsmbus->Instance->CR1 |= I2C_CR1_ALERTEN;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	681a      	ldr	r2, [r3, #0]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8007782:	601a      	str	r2, [r3, #0]

  /* Clear ALERT flag */
  __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_ALERT);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800778c:	61da      	str	r2, [r3, #28]

  /* Enable Alert Interrupt */
  SMBUS_Enable_IRQ(hsmbus, SMBUS_IT_ALERT);
 800778e:	2180      	movs	r1, #128	; 0x80
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f000 f805 	bl	80077a0 <SMBUS_Enable_IRQ>

  return HAL_OK;
 8007796:	2300      	movs	r3, #0
}
 8007798:	4618      	mov	r0, r3
 800779a:	3708      	adds	r7, #8
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}

080077a0 <SMBUS_Enable_IRQ>:
  *                the configuration information for the specified SMBUS.
  * @param  InterruptRequest Value of @ref SMBUS_Interrupt_configuration_definition.
  * @retval HAL status
  */
static void SMBUS_Enable_IRQ(SMBUS_HandleTypeDef *hsmbus, uint32_t InterruptRequest)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b085      	sub	sp, #20
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
 80077a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpisr = 0UL;
 80077aa:	2300      	movs	r3, #0
 80077ac:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & SMBUS_IT_ALERT) == SMBUS_IT_ALERT)
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d003      	beq.n	80077c0 <SMBUS_Enable_IRQ+0x20>
  {
    /* Enable ERR interrupt */
    tmpisr |= SMBUS_IT_ERRI;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077be:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_ADDR) == SMBUS_IT_ADDR)
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80077c6:	2b38      	cmp	r3, #56	; 0x38
 80077c8:	d103      	bne.n	80077d2 <SMBUS_Enable_IRQ+0x32>
  {
    /* Enable ADDR, STOP interrupt */
    tmpisr |= SMBUS_IT_ADDRI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_ERRI;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80077d0:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_TX) == SMBUS_IT_TX)
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 80077d8:	2bf2      	cmp	r3, #242	; 0xf2
 80077da:	d103      	bne.n	80077e4 <SMBUS_Enable_IRQ+0x44>
  {
    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    tmpisr |= SMBUS_IT_ERRI | SMBUS_IT_TCI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_TXI;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 80077e2:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_RX) == SMBUS_IT_RX)
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	f003 03d4 	and.w	r3, r3, #212	; 0xd4
 80077ea:	2bd4      	cmp	r3, #212	; 0xd4
 80077ec:	d103      	bne.n	80077f6 <SMBUS_Enable_IRQ+0x56>
  {
    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    tmpisr |= SMBUS_IT_ERRI | SMBUS_IT_TCI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_RXI;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 80077f4:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of SMBUS interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_SMBUS_ENABLE_IT(hsmbus, tmpisr);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	6819      	ldr	r1, [r3, #0]
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	68fa      	ldr	r2, [r7, #12]
 8007802:	430a      	orrs	r2, r1
 8007804:	601a      	str	r2, [r3, #0]
}
 8007806:	bf00      	nop
 8007808:	3714      	adds	r7, #20
 800780a:	46bd      	mov	sp, r7
 800780c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007810:	4770      	bx	lr

08007812 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007812:	b580      	push	{r7, lr}
 8007814:	b084      	sub	sp, #16
 8007816:	af00      	add	r7, sp, #0
 8007818:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d101      	bne.n	8007824 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007820:	2301      	movs	r3, #1
 8007822:	e095      	b.n	8007950 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007828:	2b00      	cmp	r3, #0
 800782a:	d108      	bne.n	800783e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	685b      	ldr	r3, [r3, #4]
 8007830:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007834:	d009      	beq.n	800784a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2200      	movs	r2, #0
 800783a:	61da      	str	r2, [r3, #28]
 800783c:	e005      	b.n	800784a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2200      	movs	r2, #0
 8007842:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2200      	movs	r2, #0
 8007848:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2200      	movs	r2, #0
 800784e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007856:	b2db      	uxtb	r3, r3
 8007858:	2b00      	cmp	r3, #0
 800785a:	d106      	bne.n	800786a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2200      	movs	r2, #0
 8007860:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f7fa fd0b 	bl	8002280 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2202      	movs	r2, #2
 800786e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	681a      	ldr	r2, [r3, #0]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007880:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	68db      	ldr	r3, [r3, #12]
 8007886:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800788a:	d902      	bls.n	8007892 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800788c:	2300      	movs	r3, #0
 800788e:	60fb      	str	r3, [r7, #12]
 8007890:	e002      	b.n	8007898 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007892:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007896:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	68db      	ldr	r3, [r3, #12]
 800789c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80078a0:	d007      	beq.n	80078b2 <HAL_SPI_Init+0xa0>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	68db      	ldr	r3, [r3, #12]
 80078a6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80078aa:	d002      	beq.n	80078b2 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2200      	movs	r2, #0
 80078b0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	685b      	ldr	r3, [r3, #4]
 80078b6:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	689b      	ldr	r3, [r3, #8]
 80078be:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80078c2:	431a      	orrs	r2, r3
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	691b      	ldr	r3, [r3, #16]
 80078c8:	f003 0302 	and.w	r3, r3, #2
 80078cc:	431a      	orrs	r2, r3
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	695b      	ldr	r3, [r3, #20]
 80078d2:	f003 0301 	and.w	r3, r3, #1
 80078d6:	431a      	orrs	r2, r3
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	699b      	ldr	r3, [r3, #24]
 80078dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80078e0:	431a      	orrs	r2, r3
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	69db      	ldr	r3, [r3, #28]
 80078e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80078ea:	431a      	orrs	r2, r3
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6a1b      	ldr	r3, [r3, #32]
 80078f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078f4:	ea42 0103 	orr.w	r1, r2, r3
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078fc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	430a      	orrs	r2, r1
 8007906:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	699b      	ldr	r3, [r3, #24]
 800790c:	0c1b      	lsrs	r3, r3, #16
 800790e:	f003 0204 	and.w	r2, r3, #4
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007916:	f003 0310 	and.w	r3, r3, #16
 800791a:	431a      	orrs	r2, r3
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007920:	f003 0308 	and.w	r3, r3, #8
 8007924:	431a      	orrs	r2, r3
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	68db      	ldr	r3, [r3, #12]
 800792a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800792e:	ea42 0103 	orr.w	r1, r2, r3
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	430a      	orrs	r2, r1
 800793e:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2200      	movs	r2, #0
 8007944:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2201      	movs	r2, #1
 800794a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800794e:	2300      	movs	r3, #0
}
 8007950:	4618      	mov	r0, r3
 8007952:	3710      	adds	r7, #16
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}

08007958 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b088      	sub	sp, #32
 800795c:	af00      	add	r7, sp, #0
 800795e:	60f8      	str	r0, [r7, #12]
 8007960:	60b9      	str	r1, [r7, #8]
 8007962:	603b      	str	r3, [r7, #0]
 8007964:	4613      	mov	r3, r2
 8007966:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007968:	2300      	movs	r3, #0
 800796a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007972:	2b01      	cmp	r3, #1
 8007974:	d101      	bne.n	800797a <HAL_SPI_Transmit+0x22>
 8007976:	2302      	movs	r3, #2
 8007978:	e158      	b.n	8007c2c <HAL_SPI_Transmit+0x2d4>
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	2201      	movs	r2, #1
 800797e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007982:	f7fb f909 	bl	8002b98 <HAL_GetTick>
 8007986:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007988:	88fb      	ldrh	r3, [r7, #6]
 800798a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007992:	b2db      	uxtb	r3, r3
 8007994:	2b01      	cmp	r3, #1
 8007996:	d002      	beq.n	800799e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007998:	2302      	movs	r3, #2
 800799a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800799c:	e13d      	b.n	8007c1a <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d002      	beq.n	80079aa <HAL_SPI_Transmit+0x52>
 80079a4:	88fb      	ldrh	r3, [r7, #6]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d102      	bne.n	80079b0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80079aa:	2301      	movs	r3, #1
 80079ac:	77fb      	strb	r3, [r7, #31]
    goto error;
 80079ae:	e134      	b.n	8007c1a <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	2203      	movs	r2, #3
 80079b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	2200      	movs	r2, #0
 80079bc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	68ba      	ldr	r2, [r7, #8]
 80079c2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	88fa      	ldrh	r2, [r7, #6]
 80079c8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	88fa      	ldrh	r2, [r7, #6]
 80079ce:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	2200      	movs	r2, #0
 80079d4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	2200      	movs	r2, #0
 80079da:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	2200      	movs	r2, #0
 80079e2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	2200      	movs	r2, #0
 80079ea:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	2200      	movs	r2, #0
 80079f0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	689b      	ldr	r3, [r3, #8]
 80079f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079fa:	d10f      	bne.n	8007a1c <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	681a      	ldr	r2, [r3, #0]
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a0a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	681a      	ldr	r2, [r3, #0]
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007a1a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a26:	2b40      	cmp	r3, #64	; 0x40
 8007a28:	d007      	beq.n	8007a3a <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	681a      	ldr	r2, [r3, #0]
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a38:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	68db      	ldr	r3, [r3, #12]
 8007a3e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007a42:	d94b      	bls.n	8007adc <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d002      	beq.n	8007a52 <HAL_SPI_Transmit+0xfa>
 8007a4c:	8afb      	ldrh	r3, [r7, #22]
 8007a4e:	2b01      	cmp	r3, #1
 8007a50:	d13e      	bne.n	8007ad0 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a56:	881a      	ldrh	r2, [r3, #0]
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a62:	1c9a      	adds	r2, r3, #2
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a6c:	b29b      	uxth	r3, r3
 8007a6e:	3b01      	subs	r3, #1
 8007a70:	b29a      	uxth	r2, r3
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007a76:	e02b      	b.n	8007ad0 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	689b      	ldr	r3, [r3, #8]
 8007a7e:	f003 0302 	and.w	r3, r3, #2
 8007a82:	2b02      	cmp	r3, #2
 8007a84:	d112      	bne.n	8007aac <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a8a:	881a      	ldrh	r2, [r3, #0]
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a96:	1c9a      	adds	r2, r3, #2
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007aa0:	b29b      	uxth	r3, r3
 8007aa2:	3b01      	subs	r3, #1
 8007aa4:	b29a      	uxth	r2, r3
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007aaa:	e011      	b.n	8007ad0 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007aac:	f7fb f874 	bl	8002b98 <HAL_GetTick>
 8007ab0:	4602      	mov	r2, r0
 8007ab2:	69bb      	ldr	r3, [r7, #24]
 8007ab4:	1ad3      	subs	r3, r2, r3
 8007ab6:	683a      	ldr	r2, [r7, #0]
 8007ab8:	429a      	cmp	r2, r3
 8007aba:	d803      	bhi.n	8007ac4 <HAL_SPI_Transmit+0x16c>
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ac2:	d102      	bne.n	8007aca <HAL_SPI_Transmit+0x172>
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d102      	bne.n	8007ad0 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8007aca:	2303      	movs	r3, #3
 8007acc:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007ace:	e0a4      	b.n	8007c1a <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ad4:	b29b      	uxth	r3, r3
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d1ce      	bne.n	8007a78 <HAL_SPI_Transmit+0x120>
 8007ada:	e07c      	b.n	8007bd6 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d002      	beq.n	8007aea <HAL_SPI_Transmit+0x192>
 8007ae4:	8afb      	ldrh	r3, [r7, #22]
 8007ae6:	2b01      	cmp	r3, #1
 8007ae8:	d170      	bne.n	8007bcc <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007aee:	b29b      	uxth	r3, r3
 8007af0:	2b01      	cmp	r3, #1
 8007af2:	d912      	bls.n	8007b1a <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007af8:	881a      	ldrh	r2, [r3, #0]
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b04:	1c9a      	adds	r2, r3, #2
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b0e:	b29b      	uxth	r3, r3
 8007b10:	3b02      	subs	r3, #2
 8007b12:	b29a      	uxth	r2, r3
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007b18:	e058      	b.n	8007bcc <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	330c      	adds	r3, #12
 8007b24:	7812      	ldrb	r2, [r2, #0]
 8007b26:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b2c:	1c5a      	adds	r2, r3, #1
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b36:	b29b      	uxth	r3, r3
 8007b38:	3b01      	subs	r3, #1
 8007b3a:	b29a      	uxth	r2, r3
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8007b40:	e044      	b.n	8007bcc <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	689b      	ldr	r3, [r3, #8]
 8007b48:	f003 0302 	and.w	r3, r3, #2
 8007b4c:	2b02      	cmp	r3, #2
 8007b4e:	d12b      	bne.n	8007ba8 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b54:	b29b      	uxth	r3, r3
 8007b56:	2b01      	cmp	r3, #1
 8007b58:	d912      	bls.n	8007b80 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b5e:	881a      	ldrh	r2, [r3, #0]
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b6a:	1c9a      	adds	r2, r3, #2
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b74:	b29b      	uxth	r3, r3
 8007b76:	3b02      	subs	r3, #2
 8007b78:	b29a      	uxth	r2, r3
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007b7e:	e025      	b.n	8007bcc <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	330c      	adds	r3, #12
 8007b8a:	7812      	ldrb	r2, [r2, #0]
 8007b8c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b92:	1c5a      	adds	r2, r3, #1
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b9c:	b29b      	uxth	r3, r3
 8007b9e:	3b01      	subs	r3, #1
 8007ba0:	b29a      	uxth	r2, r3
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007ba6:	e011      	b.n	8007bcc <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007ba8:	f7fa fff6 	bl	8002b98 <HAL_GetTick>
 8007bac:	4602      	mov	r2, r0
 8007bae:	69bb      	ldr	r3, [r7, #24]
 8007bb0:	1ad3      	subs	r3, r2, r3
 8007bb2:	683a      	ldr	r2, [r7, #0]
 8007bb4:	429a      	cmp	r2, r3
 8007bb6:	d803      	bhi.n	8007bc0 <HAL_SPI_Transmit+0x268>
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007bbe:	d102      	bne.n	8007bc6 <HAL_SPI_Transmit+0x26e>
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d102      	bne.n	8007bcc <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8007bc6:	2303      	movs	r3, #3
 8007bc8:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007bca:	e026      	b.n	8007c1a <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bd0:	b29b      	uxth	r3, r3
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d1b5      	bne.n	8007b42 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007bd6:	69ba      	ldr	r2, [r7, #24]
 8007bd8:	6839      	ldr	r1, [r7, #0]
 8007bda:	68f8      	ldr	r0, [r7, #12]
 8007bdc:	f000 fce4 	bl	80085a8 <SPI_EndRxTxTransaction>
 8007be0:	4603      	mov	r3, r0
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d002      	beq.n	8007bec <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	2220      	movs	r2, #32
 8007bea:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	689b      	ldr	r3, [r3, #8]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d10a      	bne.n	8007c0a <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	613b      	str	r3, [r7, #16]
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	68db      	ldr	r3, [r3, #12]
 8007bfe:	613b      	str	r3, [r7, #16]
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	689b      	ldr	r3, [r3, #8]
 8007c06:	613b      	str	r3, [r7, #16]
 8007c08:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d002      	beq.n	8007c18 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8007c12:	2301      	movs	r3, #1
 8007c14:	77fb      	strb	r3, [r7, #31]
 8007c16:	e000      	b.n	8007c1a <HAL_SPI_Transmit+0x2c2>
  }

error:
 8007c18:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	2201      	movs	r2, #1
 8007c1e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	2200      	movs	r2, #0
 8007c26:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007c2a:	7ffb      	ldrb	r3, [r7, #31]
}
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	3720      	adds	r7, #32
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}

08007c34 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b088      	sub	sp, #32
 8007c38:	af02      	add	r7, sp, #8
 8007c3a:	60f8      	str	r0, [r7, #12]
 8007c3c:	60b9      	str	r1, [r7, #8]
 8007c3e:	603b      	str	r3, [r7, #0]
 8007c40:	4613      	mov	r3, r2
 8007c42:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007c44:	2300      	movs	r3, #0
 8007c46:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	685b      	ldr	r3, [r3, #4]
 8007c4c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c50:	d112      	bne.n	8007c78 <HAL_SPI_Receive+0x44>
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	689b      	ldr	r3, [r3, #8]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d10e      	bne.n	8007c78 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	2204      	movs	r2, #4
 8007c5e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007c62:	88fa      	ldrh	r2, [r7, #6]
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	9300      	str	r3, [sp, #0]
 8007c68:	4613      	mov	r3, r2
 8007c6a:	68ba      	ldr	r2, [r7, #8]
 8007c6c:	68b9      	ldr	r1, [r7, #8]
 8007c6e:	68f8      	ldr	r0, [r7, #12]
 8007c70:	f000 f910 	bl	8007e94 <HAL_SPI_TransmitReceive>
 8007c74:	4603      	mov	r3, r0
 8007c76:	e109      	b.n	8007e8c <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007c7e:	2b01      	cmp	r3, #1
 8007c80:	d101      	bne.n	8007c86 <HAL_SPI_Receive+0x52>
 8007c82:	2302      	movs	r3, #2
 8007c84:	e102      	b.n	8007e8c <HAL_SPI_Receive+0x258>
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	2201      	movs	r2, #1
 8007c8a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007c8e:	f7fa ff83 	bl	8002b98 <HAL_GetTick>
 8007c92:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007c9a:	b2db      	uxtb	r3, r3
 8007c9c:	2b01      	cmp	r3, #1
 8007c9e:	d002      	beq.n	8007ca6 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007ca0:	2302      	movs	r3, #2
 8007ca2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007ca4:	e0e9      	b.n	8007e7a <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d002      	beq.n	8007cb2 <HAL_SPI_Receive+0x7e>
 8007cac:	88fb      	ldrh	r3, [r7, #6]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d102      	bne.n	8007cb8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007cb6:	e0e0      	b.n	8007e7a <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	2204      	movs	r2, #4
 8007cbc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	68ba      	ldr	r2, [r7, #8]
 8007cca:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	88fa      	ldrh	r2, [r7, #6]
 8007cd0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	88fa      	ldrh	r2, [r7, #6]
 8007cd8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	2200      	movs	r2, #0
 8007cec:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	68db      	ldr	r3, [r3, #12]
 8007cfe:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007d02:	d908      	bls.n	8007d16 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	685a      	ldr	r2, [r3, #4]
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007d12:	605a      	str	r2, [r3, #4]
 8007d14:	e007      	b.n	8007d26 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	685a      	ldr	r2, [r3, #4]
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007d24:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	689b      	ldr	r3, [r3, #8]
 8007d2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d2e:	d10f      	bne.n	8007d50 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	681a      	ldr	r2, [r3, #0]
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d3e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	681a      	ldr	r2, [r3, #0]
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007d4e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d5a:	2b40      	cmp	r3, #64	; 0x40
 8007d5c:	d007      	beq.n	8007d6e <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	681a      	ldr	r2, [r3, #0]
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d6c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	68db      	ldr	r3, [r3, #12]
 8007d72:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007d76:	d867      	bhi.n	8007e48 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007d78:	e030      	b.n	8007ddc <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	689b      	ldr	r3, [r3, #8]
 8007d80:	f003 0301 	and.w	r3, r3, #1
 8007d84:	2b01      	cmp	r3, #1
 8007d86:	d117      	bne.n	8007db8 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f103 020c 	add.w	r2, r3, #12
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d94:	7812      	ldrb	r2, [r2, #0]
 8007d96:	b2d2      	uxtb	r2, r2
 8007d98:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d9e:	1c5a      	adds	r2, r3, #1
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007daa:	b29b      	uxth	r3, r3
 8007dac:	3b01      	subs	r3, #1
 8007dae:	b29a      	uxth	r2, r3
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8007db6:	e011      	b.n	8007ddc <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007db8:	f7fa feee 	bl	8002b98 <HAL_GetTick>
 8007dbc:	4602      	mov	r2, r0
 8007dbe:	693b      	ldr	r3, [r7, #16]
 8007dc0:	1ad3      	subs	r3, r2, r3
 8007dc2:	683a      	ldr	r2, [r7, #0]
 8007dc4:	429a      	cmp	r2, r3
 8007dc6:	d803      	bhi.n	8007dd0 <HAL_SPI_Receive+0x19c>
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007dce:	d102      	bne.n	8007dd6 <HAL_SPI_Receive+0x1a2>
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d102      	bne.n	8007ddc <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8007dd6:	2303      	movs	r3, #3
 8007dd8:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007dda:	e04e      	b.n	8007e7a <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007de2:	b29b      	uxth	r3, r3
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d1c8      	bne.n	8007d7a <HAL_SPI_Receive+0x146>
 8007de8:	e034      	b.n	8007e54 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	689b      	ldr	r3, [r3, #8]
 8007df0:	f003 0301 	and.w	r3, r3, #1
 8007df4:	2b01      	cmp	r3, #1
 8007df6:	d115      	bne.n	8007e24 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	68da      	ldr	r2, [r3, #12]
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e02:	b292      	uxth	r2, r2
 8007e04:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e0a:	1c9a      	adds	r2, r3, #2
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007e16:	b29b      	uxth	r3, r3
 8007e18:	3b01      	subs	r3, #1
 8007e1a:	b29a      	uxth	r2, r3
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8007e22:	e011      	b.n	8007e48 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007e24:	f7fa feb8 	bl	8002b98 <HAL_GetTick>
 8007e28:	4602      	mov	r2, r0
 8007e2a:	693b      	ldr	r3, [r7, #16]
 8007e2c:	1ad3      	subs	r3, r2, r3
 8007e2e:	683a      	ldr	r2, [r7, #0]
 8007e30:	429a      	cmp	r2, r3
 8007e32:	d803      	bhi.n	8007e3c <HAL_SPI_Receive+0x208>
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e3a:	d102      	bne.n	8007e42 <HAL_SPI_Receive+0x20e>
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d102      	bne.n	8007e48 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8007e42:	2303      	movs	r3, #3
 8007e44:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007e46:	e018      	b.n	8007e7a <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007e4e:	b29b      	uxth	r3, r3
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d1ca      	bne.n	8007dea <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007e54:	693a      	ldr	r2, [r7, #16]
 8007e56:	6839      	ldr	r1, [r7, #0]
 8007e58:	68f8      	ldr	r0, [r7, #12]
 8007e5a:	f000 fb4d 	bl	80084f8 <SPI_EndRxTransaction>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d002      	beq.n	8007e6a <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	2220      	movs	r2, #32
 8007e68:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d002      	beq.n	8007e78 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8007e72:	2301      	movs	r3, #1
 8007e74:	75fb      	strb	r3, [r7, #23]
 8007e76:	e000      	b.n	8007e7a <HAL_SPI_Receive+0x246>
  }

error :
 8007e78:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	2201      	movs	r2, #1
 8007e7e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	2200      	movs	r2, #0
 8007e86:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007e8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	3718      	adds	r7, #24
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}

08007e94 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b08a      	sub	sp, #40	; 0x28
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	60f8      	str	r0, [r7, #12]
 8007e9c:	60b9      	str	r1, [r7, #8]
 8007e9e:	607a      	str	r2, [r7, #4]
 8007ea0:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007ea2:	2301      	movs	r3, #1
 8007ea4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007eb2:	2b01      	cmp	r3, #1
 8007eb4:	d101      	bne.n	8007eba <HAL_SPI_TransmitReceive+0x26>
 8007eb6:	2302      	movs	r3, #2
 8007eb8:	e1fb      	b.n	80082b2 <HAL_SPI_TransmitReceive+0x41e>
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	2201      	movs	r2, #1
 8007ebe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007ec2:	f7fa fe69 	bl	8002b98 <HAL_GetTick>
 8007ec6:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007ece:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	685b      	ldr	r3, [r3, #4]
 8007ed4:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007ed6:	887b      	ldrh	r3, [r7, #2]
 8007ed8:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8007eda:	887b      	ldrh	r3, [r7, #2]
 8007edc:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007ede:	7efb      	ldrb	r3, [r7, #27]
 8007ee0:	2b01      	cmp	r3, #1
 8007ee2:	d00e      	beq.n	8007f02 <HAL_SPI_TransmitReceive+0x6e>
 8007ee4:	697b      	ldr	r3, [r7, #20]
 8007ee6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007eea:	d106      	bne.n	8007efa <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	689b      	ldr	r3, [r3, #8]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d102      	bne.n	8007efa <HAL_SPI_TransmitReceive+0x66>
 8007ef4:	7efb      	ldrb	r3, [r7, #27]
 8007ef6:	2b04      	cmp	r3, #4
 8007ef8:	d003      	beq.n	8007f02 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8007efa:	2302      	movs	r3, #2
 8007efc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007f00:	e1cd      	b.n	800829e <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007f02:	68bb      	ldr	r3, [r7, #8]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d005      	beq.n	8007f14 <HAL_SPI_TransmitReceive+0x80>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d002      	beq.n	8007f14 <HAL_SPI_TransmitReceive+0x80>
 8007f0e:	887b      	ldrh	r3, [r7, #2]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d103      	bne.n	8007f1c <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8007f14:	2301      	movs	r3, #1
 8007f16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007f1a:	e1c0      	b.n	800829e <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007f22:	b2db      	uxtb	r3, r3
 8007f24:	2b04      	cmp	r3, #4
 8007f26:	d003      	beq.n	8007f30 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	2205      	movs	r2, #5
 8007f2c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	2200      	movs	r2, #0
 8007f34:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	687a      	ldr	r2, [r7, #4]
 8007f3a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	887a      	ldrh	r2, [r7, #2]
 8007f40:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	887a      	ldrh	r2, [r7, #2]
 8007f48:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	68ba      	ldr	r2, [r7, #8]
 8007f50:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	887a      	ldrh	r2, [r7, #2]
 8007f56:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	887a      	ldrh	r2, [r7, #2]
 8007f5c:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	2200      	movs	r2, #0
 8007f62:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	2200      	movs	r2, #0
 8007f68:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	68db      	ldr	r3, [r3, #12]
 8007f6e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007f72:	d802      	bhi.n	8007f7a <HAL_SPI_TransmitReceive+0xe6>
 8007f74:	8a3b      	ldrh	r3, [r7, #16]
 8007f76:	2b01      	cmp	r3, #1
 8007f78:	d908      	bls.n	8007f8c <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	685a      	ldr	r2, [r3, #4]
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007f88:	605a      	str	r2, [r3, #4]
 8007f8a:	e007      	b.n	8007f9c <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	685a      	ldr	r2, [r3, #4]
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007f9a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fa6:	2b40      	cmp	r3, #64	; 0x40
 8007fa8:	d007      	beq.n	8007fba <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	681a      	ldr	r2, [r3, #0]
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007fb8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	68db      	ldr	r3, [r3, #12]
 8007fbe:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007fc2:	d97c      	bls.n	80080be <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	685b      	ldr	r3, [r3, #4]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d002      	beq.n	8007fd2 <HAL_SPI_TransmitReceive+0x13e>
 8007fcc:	8a7b      	ldrh	r3, [r7, #18]
 8007fce:	2b01      	cmp	r3, #1
 8007fd0:	d169      	bne.n	80080a6 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fd6:	881a      	ldrh	r2, [r3, #0]
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fe2:	1c9a      	adds	r2, r3, #2
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007fec:	b29b      	uxth	r3, r3
 8007fee:	3b01      	subs	r3, #1
 8007ff0:	b29a      	uxth	r2, r3
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007ff6:	e056      	b.n	80080a6 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	689b      	ldr	r3, [r3, #8]
 8007ffe:	f003 0302 	and.w	r3, r3, #2
 8008002:	2b02      	cmp	r3, #2
 8008004:	d11b      	bne.n	800803e <HAL_SPI_TransmitReceive+0x1aa>
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800800a:	b29b      	uxth	r3, r3
 800800c:	2b00      	cmp	r3, #0
 800800e:	d016      	beq.n	800803e <HAL_SPI_TransmitReceive+0x1aa>
 8008010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008012:	2b01      	cmp	r3, #1
 8008014:	d113      	bne.n	800803e <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800801a:	881a      	ldrh	r2, [r3, #0]
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008026:	1c9a      	adds	r2, r3, #2
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008030:	b29b      	uxth	r3, r3
 8008032:	3b01      	subs	r3, #1
 8008034:	b29a      	uxth	r2, r3
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800803a:	2300      	movs	r3, #0
 800803c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	689b      	ldr	r3, [r3, #8]
 8008044:	f003 0301 	and.w	r3, r3, #1
 8008048:	2b01      	cmp	r3, #1
 800804a:	d11c      	bne.n	8008086 <HAL_SPI_TransmitReceive+0x1f2>
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008052:	b29b      	uxth	r3, r3
 8008054:	2b00      	cmp	r3, #0
 8008056:	d016      	beq.n	8008086 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	68da      	ldr	r2, [r3, #12]
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008062:	b292      	uxth	r2, r2
 8008064:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800806a:	1c9a      	adds	r2, r3, #2
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008076:	b29b      	uxth	r3, r3
 8008078:	3b01      	subs	r3, #1
 800807a:	b29a      	uxth	r2, r3
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008082:	2301      	movs	r3, #1
 8008084:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008086:	f7fa fd87 	bl	8002b98 <HAL_GetTick>
 800808a:	4602      	mov	r2, r0
 800808c:	69fb      	ldr	r3, [r7, #28]
 800808e:	1ad3      	subs	r3, r2, r3
 8008090:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008092:	429a      	cmp	r2, r3
 8008094:	d807      	bhi.n	80080a6 <HAL_SPI_TransmitReceive+0x212>
 8008096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008098:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800809c:	d003      	beq.n	80080a6 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800809e:	2303      	movs	r3, #3
 80080a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80080a4:	e0fb      	b.n	800829e <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080aa:	b29b      	uxth	r3, r3
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d1a3      	bne.n	8007ff8 <HAL_SPI_TransmitReceive+0x164>
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80080b6:	b29b      	uxth	r3, r3
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d19d      	bne.n	8007ff8 <HAL_SPI_TransmitReceive+0x164>
 80080bc:	e0df      	b.n	800827e <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	685b      	ldr	r3, [r3, #4]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d003      	beq.n	80080ce <HAL_SPI_TransmitReceive+0x23a>
 80080c6:	8a7b      	ldrh	r3, [r7, #18]
 80080c8:	2b01      	cmp	r3, #1
 80080ca:	f040 80cb 	bne.w	8008264 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080d2:	b29b      	uxth	r3, r3
 80080d4:	2b01      	cmp	r3, #1
 80080d6:	d912      	bls.n	80080fe <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080dc:	881a      	ldrh	r2, [r3, #0]
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080e8:	1c9a      	adds	r2, r3, #2
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080f2:	b29b      	uxth	r3, r3
 80080f4:	3b02      	subs	r3, #2
 80080f6:	b29a      	uxth	r2, r3
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80080fc:	e0b2      	b.n	8008264 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	330c      	adds	r3, #12
 8008108:	7812      	ldrb	r2, [r2, #0]
 800810a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008110:	1c5a      	adds	r2, r3, #1
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800811a:	b29b      	uxth	r3, r3
 800811c:	3b01      	subs	r3, #1
 800811e:	b29a      	uxth	r2, r3
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008124:	e09e      	b.n	8008264 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	689b      	ldr	r3, [r3, #8]
 800812c:	f003 0302 	and.w	r3, r3, #2
 8008130:	2b02      	cmp	r3, #2
 8008132:	d134      	bne.n	800819e <HAL_SPI_TransmitReceive+0x30a>
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008138:	b29b      	uxth	r3, r3
 800813a:	2b00      	cmp	r3, #0
 800813c:	d02f      	beq.n	800819e <HAL_SPI_TransmitReceive+0x30a>
 800813e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008140:	2b01      	cmp	r3, #1
 8008142:	d12c      	bne.n	800819e <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008148:	b29b      	uxth	r3, r3
 800814a:	2b01      	cmp	r3, #1
 800814c:	d912      	bls.n	8008174 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008152:	881a      	ldrh	r2, [r3, #0]
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800815e:	1c9a      	adds	r2, r3, #2
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008168:	b29b      	uxth	r3, r3
 800816a:	3b02      	subs	r3, #2
 800816c:	b29a      	uxth	r2, r3
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008172:	e012      	b.n	800819a <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	330c      	adds	r3, #12
 800817e:	7812      	ldrb	r2, [r2, #0]
 8008180:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008186:	1c5a      	adds	r2, r3, #1
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008190:	b29b      	uxth	r3, r3
 8008192:	3b01      	subs	r3, #1
 8008194:	b29a      	uxth	r2, r3
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800819a:	2300      	movs	r3, #0
 800819c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	689b      	ldr	r3, [r3, #8]
 80081a4:	f003 0301 	and.w	r3, r3, #1
 80081a8:	2b01      	cmp	r3, #1
 80081aa:	d148      	bne.n	800823e <HAL_SPI_TransmitReceive+0x3aa>
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80081b2:	b29b      	uxth	r3, r3
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d042      	beq.n	800823e <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80081be:	b29b      	uxth	r3, r3
 80081c0:	2b01      	cmp	r3, #1
 80081c2:	d923      	bls.n	800820c <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	68da      	ldr	r2, [r3, #12]
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ce:	b292      	uxth	r2, r2
 80081d0:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081d6:	1c9a      	adds	r2, r3, #2
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80081e2:	b29b      	uxth	r3, r3
 80081e4:	3b02      	subs	r3, #2
 80081e6:	b29a      	uxth	r2, r3
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80081f4:	b29b      	uxth	r3, r3
 80081f6:	2b01      	cmp	r3, #1
 80081f8:	d81f      	bhi.n	800823a <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	685a      	ldr	r2, [r3, #4]
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008208:	605a      	str	r2, [r3, #4]
 800820a:	e016      	b.n	800823a <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f103 020c 	add.w	r2, r3, #12
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008218:	7812      	ldrb	r2, [r2, #0]
 800821a:	b2d2      	uxtb	r2, r2
 800821c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008222:	1c5a      	adds	r2, r3, #1
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800822e:	b29b      	uxth	r3, r3
 8008230:	3b01      	subs	r3, #1
 8008232:	b29a      	uxth	r2, r3
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800823a:	2301      	movs	r3, #1
 800823c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800823e:	f7fa fcab 	bl	8002b98 <HAL_GetTick>
 8008242:	4602      	mov	r2, r0
 8008244:	69fb      	ldr	r3, [r7, #28]
 8008246:	1ad3      	subs	r3, r2, r3
 8008248:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800824a:	429a      	cmp	r2, r3
 800824c:	d803      	bhi.n	8008256 <HAL_SPI_TransmitReceive+0x3c2>
 800824e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008250:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008254:	d102      	bne.n	800825c <HAL_SPI_TransmitReceive+0x3c8>
 8008256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008258:	2b00      	cmp	r3, #0
 800825a:	d103      	bne.n	8008264 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800825c:	2303      	movs	r3, #3
 800825e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8008262:	e01c      	b.n	800829e <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008268:	b29b      	uxth	r3, r3
 800826a:	2b00      	cmp	r3, #0
 800826c:	f47f af5b 	bne.w	8008126 <HAL_SPI_TransmitReceive+0x292>
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008276:	b29b      	uxth	r3, r3
 8008278:	2b00      	cmp	r3, #0
 800827a:	f47f af54 	bne.w	8008126 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800827e:	69fa      	ldr	r2, [r7, #28]
 8008280:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008282:	68f8      	ldr	r0, [r7, #12]
 8008284:	f000 f990 	bl	80085a8 <SPI_EndRxTxTransaction>
 8008288:	4603      	mov	r3, r0
 800828a:	2b00      	cmp	r3, #0
 800828c:	d006      	beq.n	800829c <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800828e:	2301      	movs	r3, #1
 8008290:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	2220      	movs	r2, #32
 8008298:	661a      	str	r2, [r3, #96]	; 0x60
 800829a:	e000      	b.n	800829e <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800829c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	2201      	movs	r2, #1
 80082a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	2200      	movs	r2, #0
 80082aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80082ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3728      	adds	r7, #40	; 0x28
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}
	...

080082bc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b088      	sub	sp, #32
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	60f8      	str	r0, [r7, #12]
 80082c4:	60b9      	str	r1, [r7, #8]
 80082c6:	603b      	str	r3, [r7, #0]
 80082c8:	4613      	mov	r3, r2
 80082ca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80082cc:	f7fa fc64 	bl	8002b98 <HAL_GetTick>
 80082d0:	4602      	mov	r2, r0
 80082d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082d4:	1a9b      	subs	r3, r3, r2
 80082d6:	683a      	ldr	r2, [r7, #0]
 80082d8:	4413      	add	r3, r2
 80082da:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80082dc:	f7fa fc5c 	bl	8002b98 <HAL_GetTick>
 80082e0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80082e2:	4b39      	ldr	r3, [pc, #228]	; (80083c8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	015b      	lsls	r3, r3, #5
 80082e8:	0d1b      	lsrs	r3, r3, #20
 80082ea:	69fa      	ldr	r2, [r7, #28]
 80082ec:	fb02 f303 	mul.w	r3, r2, r3
 80082f0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80082f2:	e054      	b.n	800839e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80082fa:	d050      	beq.n	800839e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80082fc:	f7fa fc4c 	bl	8002b98 <HAL_GetTick>
 8008300:	4602      	mov	r2, r0
 8008302:	69bb      	ldr	r3, [r7, #24]
 8008304:	1ad3      	subs	r3, r2, r3
 8008306:	69fa      	ldr	r2, [r7, #28]
 8008308:	429a      	cmp	r2, r3
 800830a:	d902      	bls.n	8008312 <SPI_WaitFlagStateUntilTimeout+0x56>
 800830c:	69fb      	ldr	r3, [r7, #28]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d13d      	bne.n	800838e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	685a      	ldr	r2, [r3, #4]
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008320:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	685b      	ldr	r3, [r3, #4]
 8008326:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800832a:	d111      	bne.n	8008350 <SPI_WaitFlagStateUntilTimeout+0x94>
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	689b      	ldr	r3, [r3, #8]
 8008330:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008334:	d004      	beq.n	8008340 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	689b      	ldr	r3, [r3, #8]
 800833a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800833e:	d107      	bne.n	8008350 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	681a      	ldr	r2, [r3, #0]
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800834e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008354:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008358:	d10f      	bne.n	800837a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	681a      	ldr	r2, [r3, #0]
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008368:	601a      	str	r2, [r3, #0]
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	681a      	ldr	r2, [r3, #0]
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008378:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	2201      	movs	r2, #1
 800837e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	2200      	movs	r2, #0
 8008386:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800838a:	2303      	movs	r3, #3
 800838c:	e017      	b.n	80083be <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800838e:	697b      	ldr	r3, [r7, #20]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d101      	bne.n	8008398 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008394:	2300      	movs	r3, #0
 8008396:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008398:	697b      	ldr	r3, [r7, #20]
 800839a:	3b01      	subs	r3, #1
 800839c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	689a      	ldr	r2, [r3, #8]
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	4013      	ands	r3, r2
 80083a8:	68ba      	ldr	r2, [r7, #8]
 80083aa:	429a      	cmp	r2, r3
 80083ac:	bf0c      	ite	eq
 80083ae:	2301      	moveq	r3, #1
 80083b0:	2300      	movne	r3, #0
 80083b2:	b2db      	uxtb	r3, r3
 80083b4:	461a      	mov	r2, r3
 80083b6:	79fb      	ldrb	r3, [r7, #7]
 80083b8:	429a      	cmp	r2, r3
 80083ba:	d19b      	bne.n	80082f4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80083bc:	2300      	movs	r3, #0
}
 80083be:	4618      	mov	r0, r3
 80083c0:	3720      	adds	r7, #32
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd80      	pop	{r7, pc}
 80083c6:	bf00      	nop
 80083c8:	20000004 	.word	0x20000004

080083cc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b08a      	sub	sp, #40	; 0x28
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	60f8      	str	r0, [r7, #12]
 80083d4:	60b9      	str	r1, [r7, #8]
 80083d6:	607a      	str	r2, [r7, #4]
 80083d8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80083da:	2300      	movs	r3, #0
 80083dc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80083de:	f7fa fbdb 	bl	8002b98 <HAL_GetTick>
 80083e2:	4602      	mov	r2, r0
 80083e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083e6:	1a9b      	subs	r3, r3, r2
 80083e8:	683a      	ldr	r2, [r7, #0]
 80083ea:	4413      	add	r3, r2
 80083ec:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80083ee:	f7fa fbd3 	bl	8002b98 <HAL_GetTick>
 80083f2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	330c      	adds	r3, #12
 80083fa:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80083fc:	4b3d      	ldr	r3, [pc, #244]	; (80084f4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80083fe:	681a      	ldr	r2, [r3, #0]
 8008400:	4613      	mov	r3, r2
 8008402:	009b      	lsls	r3, r3, #2
 8008404:	4413      	add	r3, r2
 8008406:	00da      	lsls	r2, r3, #3
 8008408:	1ad3      	subs	r3, r2, r3
 800840a:	0d1b      	lsrs	r3, r3, #20
 800840c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800840e:	fb02 f303 	mul.w	r3, r2, r3
 8008412:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008414:	e060      	b.n	80084d8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800841c:	d107      	bne.n	800842e <SPI_WaitFifoStateUntilTimeout+0x62>
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d104      	bne.n	800842e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008424:	69fb      	ldr	r3, [r7, #28]
 8008426:	781b      	ldrb	r3, [r3, #0]
 8008428:	b2db      	uxtb	r3, r3
 800842a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800842c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008434:	d050      	beq.n	80084d8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008436:	f7fa fbaf 	bl	8002b98 <HAL_GetTick>
 800843a:	4602      	mov	r2, r0
 800843c:	6a3b      	ldr	r3, [r7, #32]
 800843e:	1ad3      	subs	r3, r2, r3
 8008440:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008442:	429a      	cmp	r2, r3
 8008444:	d902      	bls.n	800844c <SPI_WaitFifoStateUntilTimeout+0x80>
 8008446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008448:	2b00      	cmp	r3, #0
 800844a:	d13d      	bne.n	80084c8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	685a      	ldr	r2, [r3, #4]
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800845a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	685b      	ldr	r3, [r3, #4]
 8008460:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008464:	d111      	bne.n	800848a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	689b      	ldr	r3, [r3, #8]
 800846a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800846e:	d004      	beq.n	800847a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	689b      	ldr	r3, [r3, #8]
 8008474:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008478:	d107      	bne.n	800848a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	681a      	ldr	r2, [r3, #0]
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008488:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800848e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008492:	d10f      	bne.n	80084b4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	681a      	ldr	r2, [r3, #0]
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80084a2:	601a      	str	r2, [r3, #0]
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	681a      	ldr	r2, [r3, #0]
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80084b2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	2201      	movs	r2, #1
 80084b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	2200      	movs	r2, #0
 80084c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80084c4:	2303      	movs	r3, #3
 80084c6:	e010      	b.n	80084ea <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80084c8:	69bb      	ldr	r3, [r7, #24]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d101      	bne.n	80084d2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80084ce:	2300      	movs	r3, #0
 80084d0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80084d2:	69bb      	ldr	r3, [r7, #24]
 80084d4:	3b01      	subs	r3, #1
 80084d6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	689a      	ldr	r2, [r3, #8]
 80084de:	68bb      	ldr	r3, [r7, #8]
 80084e0:	4013      	ands	r3, r2
 80084e2:	687a      	ldr	r2, [r7, #4]
 80084e4:	429a      	cmp	r2, r3
 80084e6:	d196      	bne.n	8008416 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80084e8:	2300      	movs	r3, #0
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	3728      	adds	r7, #40	; 0x28
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}
 80084f2:	bf00      	nop
 80084f4:	20000004 	.word	0x20000004

080084f8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b086      	sub	sp, #24
 80084fc:	af02      	add	r7, sp, #8
 80084fe:	60f8      	str	r0, [r7, #12]
 8008500:	60b9      	str	r1, [r7, #8]
 8008502:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	685b      	ldr	r3, [r3, #4]
 8008508:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800850c:	d111      	bne.n	8008532 <SPI_EndRxTransaction+0x3a>
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	689b      	ldr	r3, [r3, #8]
 8008512:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008516:	d004      	beq.n	8008522 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	689b      	ldr	r3, [r3, #8]
 800851c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008520:	d107      	bne.n	8008532 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	681a      	ldr	r2, [r3, #0]
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008530:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	9300      	str	r3, [sp, #0]
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	2200      	movs	r2, #0
 800853a:	2180      	movs	r1, #128	; 0x80
 800853c:	68f8      	ldr	r0, [r7, #12]
 800853e:	f7ff febd 	bl	80082bc <SPI_WaitFlagStateUntilTimeout>
 8008542:	4603      	mov	r3, r0
 8008544:	2b00      	cmp	r3, #0
 8008546:	d007      	beq.n	8008558 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800854c:	f043 0220 	orr.w	r2, r3, #32
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008554:	2303      	movs	r3, #3
 8008556:	e023      	b.n	80085a0 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	685b      	ldr	r3, [r3, #4]
 800855c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008560:	d11d      	bne.n	800859e <SPI_EndRxTransaction+0xa6>
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	689b      	ldr	r3, [r3, #8]
 8008566:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800856a:	d004      	beq.n	8008576 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	689b      	ldr	r3, [r3, #8]
 8008570:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008574:	d113      	bne.n	800859e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	9300      	str	r3, [sp, #0]
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	2200      	movs	r2, #0
 800857e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008582:	68f8      	ldr	r0, [r7, #12]
 8008584:	f7ff ff22 	bl	80083cc <SPI_WaitFifoStateUntilTimeout>
 8008588:	4603      	mov	r3, r0
 800858a:	2b00      	cmp	r3, #0
 800858c:	d007      	beq.n	800859e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008592:	f043 0220 	orr.w	r2, r3, #32
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800859a:	2303      	movs	r3, #3
 800859c:	e000      	b.n	80085a0 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800859e:	2300      	movs	r3, #0
}
 80085a0:	4618      	mov	r0, r3
 80085a2:	3710      	adds	r7, #16
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bd80      	pop	{r7, pc}

080085a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b086      	sub	sp, #24
 80085ac:	af02      	add	r7, sp, #8
 80085ae:	60f8      	str	r0, [r7, #12]
 80085b0:	60b9      	str	r1, [r7, #8]
 80085b2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	9300      	str	r3, [sp, #0]
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	2200      	movs	r2, #0
 80085bc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80085c0:	68f8      	ldr	r0, [r7, #12]
 80085c2:	f7ff ff03 	bl	80083cc <SPI_WaitFifoStateUntilTimeout>
 80085c6:	4603      	mov	r3, r0
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d007      	beq.n	80085dc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085d0:	f043 0220 	orr.w	r2, r3, #32
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80085d8:	2303      	movs	r3, #3
 80085da:	e027      	b.n	800862c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	9300      	str	r3, [sp, #0]
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	2200      	movs	r2, #0
 80085e4:	2180      	movs	r1, #128	; 0x80
 80085e6:	68f8      	ldr	r0, [r7, #12]
 80085e8:	f7ff fe68 	bl	80082bc <SPI_WaitFlagStateUntilTimeout>
 80085ec:	4603      	mov	r3, r0
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d007      	beq.n	8008602 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085f6:	f043 0220 	orr.w	r2, r3, #32
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80085fe:	2303      	movs	r3, #3
 8008600:	e014      	b.n	800862c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	9300      	str	r3, [sp, #0]
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	2200      	movs	r2, #0
 800860a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800860e:	68f8      	ldr	r0, [r7, #12]
 8008610:	f7ff fedc 	bl	80083cc <SPI_WaitFifoStateUntilTimeout>
 8008614:	4603      	mov	r3, r0
 8008616:	2b00      	cmp	r3, #0
 8008618:	d007      	beq.n	800862a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800861e:	f043 0220 	orr.w	r2, r3, #32
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008626:	2303      	movs	r3, #3
 8008628:	e000      	b.n	800862c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800862a:	2300      	movs	r3, #0
}
 800862c:	4618      	mov	r0, r3
 800862e:	3710      	adds	r7, #16
 8008630:	46bd      	mov	sp, r7
 8008632:	bd80      	pop	{r7, pc}

08008634 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b082      	sub	sp, #8
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d101      	bne.n	8008646 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008642:	2301      	movs	r3, #1
 8008644:	e049      	b.n	80086da <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800864c:	b2db      	uxtb	r3, r3
 800864e:	2b00      	cmp	r3, #0
 8008650:	d106      	bne.n	8008660 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2200      	movs	r2, #0
 8008656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f7f9 ff06 	bl	800246c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2202      	movs	r2, #2
 8008664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681a      	ldr	r2, [r3, #0]
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	3304      	adds	r3, #4
 8008670:	4619      	mov	r1, r3
 8008672:	4610      	mov	r0, r2
 8008674:	f000 ff0a 	bl	800948c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2201      	movs	r2, #1
 800867c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2201      	movs	r2, #1
 8008684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2201      	movs	r2, #1
 800868c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2201      	movs	r2, #1
 8008694:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2201      	movs	r2, #1
 800869c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2201      	movs	r2, #1
 80086a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2201      	movs	r2, #1
 80086ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2201      	movs	r2, #1
 80086b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2201      	movs	r2, #1
 80086bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2201      	movs	r2, #1
 80086c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2201      	movs	r2, #1
 80086cc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2201      	movs	r2, #1
 80086d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80086d8:	2300      	movs	r3, #0
}
 80086da:	4618      	mov	r0, r3
 80086dc:	3708      	adds	r7, #8
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}

080086e2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80086e2:	b580      	push	{r7, lr}
 80086e4:	b082      	sub	sp, #8
 80086e6:	af00      	add	r7, sp, #0
 80086e8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d101      	bne.n	80086f4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80086f0:	2301      	movs	r3, #1
 80086f2:	e049      	b.n	8008788 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086fa:	b2db      	uxtb	r3, r3
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d106      	bne.n	800870e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2200      	movs	r2, #0
 8008704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	f7f9 fe2d 	bl	8002368 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2202      	movs	r2, #2
 8008712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681a      	ldr	r2, [r3, #0]
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	3304      	adds	r3, #4
 800871e:	4619      	mov	r1, r3
 8008720:	4610      	mov	r0, r2
 8008722:	f000 feb3 	bl	800948c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2201      	movs	r2, #1
 800872a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2201      	movs	r2, #1
 8008732:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2201      	movs	r2, #1
 800873a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2201      	movs	r2, #1
 8008742:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2201      	movs	r2, #1
 800874a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2201      	movs	r2, #1
 8008752:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2201      	movs	r2, #1
 800875a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2201      	movs	r2, #1
 8008762:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2201      	movs	r2, #1
 800876a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2201      	movs	r2, #1
 8008772:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2201      	movs	r2, #1
 800877a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2201      	movs	r2, #1
 8008782:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008786:	2300      	movs	r3, #0
}
 8008788:	4618      	mov	r0, r3
 800878a:	3708      	adds	r7, #8
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}

08008790 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b084      	sub	sp, #16
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
 8008798:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d109      	bne.n	80087b4 <HAL_TIM_PWM_Start+0x24>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80087a6:	b2db      	uxtb	r3, r3
 80087a8:	2b01      	cmp	r3, #1
 80087aa:	bf14      	ite	ne
 80087ac:	2301      	movne	r3, #1
 80087ae:	2300      	moveq	r3, #0
 80087b0:	b2db      	uxtb	r3, r3
 80087b2:	e03c      	b.n	800882e <HAL_TIM_PWM_Start+0x9e>
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	2b04      	cmp	r3, #4
 80087b8:	d109      	bne.n	80087ce <HAL_TIM_PWM_Start+0x3e>
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80087c0:	b2db      	uxtb	r3, r3
 80087c2:	2b01      	cmp	r3, #1
 80087c4:	bf14      	ite	ne
 80087c6:	2301      	movne	r3, #1
 80087c8:	2300      	moveq	r3, #0
 80087ca:	b2db      	uxtb	r3, r3
 80087cc:	e02f      	b.n	800882e <HAL_TIM_PWM_Start+0x9e>
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	2b08      	cmp	r3, #8
 80087d2:	d109      	bne.n	80087e8 <HAL_TIM_PWM_Start+0x58>
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80087da:	b2db      	uxtb	r3, r3
 80087dc:	2b01      	cmp	r3, #1
 80087de:	bf14      	ite	ne
 80087e0:	2301      	movne	r3, #1
 80087e2:	2300      	moveq	r3, #0
 80087e4:	b2db      	uxtb	r3, r3
 80087e6:	e022      	b.n	800882e <HAL_TIM_PWM_Start+0x9e>
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	2b0c      	cmp	r3, #12
 80087ec:	d109      	bne.n	8008802 <HAL_TIM_PWM_Start+0x72>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80087f4:	b2db      	uxtb	r3, r3
 80087f6:	2b01      	cmp	r3, #1
 80087f8:	bf14      	ite	ne
 80087fa:	2301      	movne	r3, #1
 80087fc:	2300      	moveq	r3, #0
 80087fe:	b2db      	uxtb	r3, r3
 8008800:	e015      	b.n	800882e <HAL_TIM_PWM_Start+0x9e>
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	2b10      	cmp	r3, #16
 8008806:	d109      	bne.n	800881c <HAL_TIM_PWM_Start+0x8c>
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800880e:	b2db      	uxtb	r3, r3
 8008810:	2b01      	cmp	r3, #1
 8008812:	bf14      	ite	ne
 8008814:	2301      	movne	r3, #1
 8008816:	2300      	moveq	r3, #0
 8008818:	b2db      	uxtb	r3, r3
 800881a:	e008      	b.n	800882e <HAL_TIM_PWM_Start+0x9e>
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008822:	b2db      	uxtb	r3, r3
 8008824:	2b01      	cmp	r3, #1
 8008826:	bf14      	ite	ne
 8008828:	2301      	movne	r3, #1
 800882a:	2300      	moveq	r3, #0
 800882c:	b2db      	uxtb	r3, r3
 800882e:	2b00      	cmp	r3, #0
 8008830:	d001      	beq.n	8008836 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008832:	2301      	movs	r3, #1
 8008834:	e09c      	b.n	8008970 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d104      	bne.n	8008846 <HAL_TIM_PWM_Start+0xb6>
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2202      	movs	r2, #2
 8008840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008844:	e023      	b.n	800888e <HAL_TIM_PWM_Start+0xfe>
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	2b04      	cmp	r3, #4
 800884a:	d104      	bne.n	8008856 <HAL_TIM_PWM_Start+0xc6>
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2202      	movs	r2, #2
 8008850:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008854:	e01b      	b.n	800888e <HAL_TIM_PWM_Start+0xfe>
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	2b08      	cmp	r3, #8
 800885a:	d104      	bne.n	8008866 <HAL_TIM_PWM_Start+0xd6>
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2202      	movs	r2, #2
 8008860:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008864:	e013      	b.n	800888e <HAL_TIM_PWM_Start+0xfe>
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	2b0c      	cmp	r3, #12
 800886a:	d104      	bne.n	8008876 <HAL_TIM_PWM_Start+0xe6>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2202      	movs	r2, #2
 8008870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008874:	e00b      	b.n	800888e <HAL_TIM_PWM_Start+0xfe>
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	2b10      	cmp	r3, #16
 800887a:	d104      	bne.n	8008886 <HAL_TIM_PWM_Start+0xf6>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2202      	movs	r2, #2
 8008880:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008884:	e003      	b.n	800888e <HAL_TIM_PWM_Start+0xfe>
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2202      	movs	r2, #2
 800888a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	2201      	movs	r2, #1
 8008894:	6839      	ldr	r1, [r7, #0]
 8008896:	4618      	mov	r0, r3
 8008898:	f001 fb26 	bl	8009ee8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	4a35      	ldr	r2, [pc, #212]	; (8008978 <HAL_TIM_PWM_Start+0x1e8>)
 80088a2:	4293      	cmp	r3, r2
 80088a4:	d013      	beq.n	80088ce <HAL_TIM_PWM_Start+0x13e>
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	4a34      	ldr	r2, [pc, #208]	; (800897c <HAL_TIM_PWM_Start+0x1ec>)
 80088ac:	4293      	cmp	r3, r2
 80088ae:	d00e      	beq.n	80088ce <HAL_TIM_PWM_Start+0x13e>
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	4a32      	ldr	r2, [pc, #200]	; (8008980 <HAL_TIM_PWM_Start+0x1f0>)
 80088b6:	4293      	cmp	r3, r2
 80088b8:	d009      	beq.n	80088ce <HAL_TIM_PWM_Start+0x13e>
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	4a31      	ldr	r2, [pc, #196]	; (8008984 <HAL_TIM_PWM_Start+0x1f4>)
 80088c0:	4293      	cmp	r3, r2
 80088c2:	d004      	beq.n	80088ce <HAL_TIM_PWM_Start+0x13e>
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	4a2f      	ldr	r2, [pc, #188]	; (8008988 <HAL_TIM_PWM_Start+0x1f8>)
 80088ca:	4293      	cmp	r3, r2
 80088cc:	d101      	bne.n	80088d2 <HAL_TIM_PWM_Start+0x142>
 80088ce:	2301      	movs	r3, #1
 80088d0:	e000      	b.n	80088d4 <HAL_TIM_PWM_Start+0x144>
 80088d2:	2300      	movs	r3, #0
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d007      	beq.n	80088e8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80088e6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	4a22      	ldr	r2, [pc, #136]	; (8008978 <HAL_TIM_PWM_Start+0x1e8>)
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d01d      	beq.n	800892e <HAL_TIM_PWM_Start+0x19e>
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088fa:	d018      	beq.n	800892e <HAL_TIM_PWM_Start+0x19e>
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	4a22      	ldr	r2, [pc, #136]	; (800898c <HAL_TIM_PWM_Start+0x1fc>)
 8008902:	4293      	cmp	r3, r2
 8008904:	d013      	beq.n	800892e <HAL_TIM_PWM_Start+0x19e>
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	4a21      	ldr	r2, [pc, #132]	; (8008990 <HAL_TIM_PWM_Start+0x200>)
 800890c:	4293      	cmp	r3, r2
 800890e:	d00e      	beq.n	800892e <HAL_TIM_PWM_Start+0x19e>
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	4a1f      	ldr	r2, [pc, #124]	; (8008994 <HAL_TIM_PWM_Start+0x204>)
 8008916:	4293      	cmp	r3, r2
 8008918:	d009      	beq.n	800892e <HAL_TIM_PWM_Start+0x19e>
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	4a17      	ldr	r2, [pc, #92]	; (800897c <HAL_TIM_PWM_Start+0x1ec>)
 8008920:	4293      	cmp	r3, r2
 8008922:	d004      	beq.n	800892e <HAL_TIM_PWM_Start+0x19e>
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	4a15      	ldr	r2, [pc, #84]	; (8008980 <HAL_TIM_PWM_Start+0x1f0>)
 800892a:	4293      	cmp	r3, r2
 800892c:	d115      	bne.n	800895a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	689a      	ldr	r2, [r3, #8]
 8008934:	4b18      	ldr	r3, [pc, #96]	; (8008998 <HAL_TIM_PWM_Start+0x208>)
 8008936:	4013      	ands	r3, r2
 8008938:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	2b06      	cmp	r3, #6
 800893e:	d015      	beq.n	800896c <HAL_TIM_PWM_Start+0x1dc>
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008946:	d011      	beq.n	800896c <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	681a      	ldr	r2, [r3, #0]
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f042 0201 	orr.w	r2, r2, #1
 8008956:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008958:	e008      	b.n	800896c <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	681a      	ldr	r2, [r3, #0]
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f042 0201 	orr.w	r2, r2, #1
 8008968:	601a      	str	r2, [r3, #0]
 800896a:	e000      	b.n	800896e <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800896c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800896e:	2300      	movs	r3, #0
}
 8008970:	4618      	mov	r0, r3
 8008972:	3710      	adds	r7, #16
 8008974:	46bd      	mov	sp, r7
 8008976:	bd80      	pop	{r7, pc}
 8008978:	40012c00 	.word	0x40012c00
 800897c:	40013400 	.word	0x40013400
 8008980:	40014000 	.word	0x40014000
 8008984:	40014400 	.word	0x40014400
 8008988:	40014800 	.word	0x40014800
 800898c:	40000400 	.word	0x40000400
 8008990:	40000800 	.word	0x40000800
 8008994:	40000c00 	.word	0x40000c00
 8008998:	00010007 	.word	0x00010007

0800899c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b082      	sub	sp, #8
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d101      	bne.n	80089ae <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80089aa:	2301      	movs	r3, #1
 80089ac:	e049      	b.n	8008a42 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089b4:	b2db      	uxtb	r3, r3
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d106      	bne.n	80089c8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2200      	movs	r2, #0
 80089be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f000 f841 	bl	8008a4a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2202      	movs	r2, #2
 80089cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681a      	ldr	r2, [r3, #0]
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	3304      	adds	r3, #4
 80089d8:	4619      	mov	r1, r3
 80089da:	4610      	mov	r0, r2
 80089dc:	f000 fd56 	bl	800948c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2201      	movs	r2, #1
 80089e4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2201      	movs	r2, #1
 80089ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2201      	movs	r2, #1
 80089f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2201      	movs	r2, #1
 80089fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2201      	movs	r2, #1
 8008a04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2201      	movs	r2, #1
 8008a0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2201      	movs	r2, #1
 8008a14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2201      	movs	r2, #1
 8008a1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2201      	movs	r2, #1
 8008a24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2201      	movs	r2, #1
 8008a2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2201      	movs	r2, #1
 8008a34:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2201      	movs	r2, #1
 8008a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008a40:	2300      	movs	r3, #0
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	3708      	adds	r7, #8
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}

08008a4a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8008a4a:	b480      	push	{r7}
 8008a4c:	b083      	sub	sp, #12
 8008a4e:	af00      	add	r7, sp, #0
 8008a50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8008a52:	bf00      	nop
 8008a54:	370c      	adds	r7, #12
 8008a56:	46bd      	mov	sp, r7
 8008a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5c:	4770      	bx	lr
	...

08008a60 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b084      	sub	sp, #16
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
 8008a68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d104      	bne.n	8008a7e <HAL_TIM_IC_Start_IT+0x1e>
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008a7a:	b2db      	uxtb	r3, r3
 8008a7c:	e023      	b.n	8008ac6 <HAL_TIM_IC_Start_IT+0x66>
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	2b04      	cmp	r3, #4
 8008a82:	d104      	bne.n	8008a8e <HAL_TIM_IC_Start_IT+0x2e>
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008a8a:	b2db      	uxtb	r3, r3
 8008a8c:	e01b      	b.n	8008ac6 <HAL_TIM_IC_Start_IT+0x66>
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	2b08      	cmp	r3, #8
 8008a92:	d104      	bne.n	8008a9e <HAL_TIM_IC_Start_IT+0x3e>
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008a9a:	b2db      	uxtb	r3, r3
 8008a9c:	e013      	b.n	8008ac6 <HAL_TIM_IC_Start_IT+0x66>
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	2b0c      	cmp	r3, #12
 8008aa2:	d104      	bne.n	8008aae <HAL_TIM_IC_Start_IT+0x4e>
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008aaa:	b2db      	uxtb	r3, r3
 8008aac:	e00b      	b.n	8008ac6 <HAL_TIM_IC_Start_IT+0x66>
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	2b10      	cmp	r3, #16
 8008ab2:	d104      	bne.n	8008abe <HAL_TIM_IC_Start_IT+0x5e>
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008aba:	b2db      	uxtb	r3, r3
 8008abc:	e003      	b.n	8008ac6 <HAL_TIM_IC_Start_IT+0x66>
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008ac4:	b2db      	uxtb	r3, r3
 8008ac6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d104      	bne.n	8008ad8 <HAL_TIM_IC_Start_IT+0x78>
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008ad4:	b2db      	uxtb	r3, r3
 8008ad6:	e013      	b.n	8008b00 <HAL_TIM_IC_Start_IT+0xa0>
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	2b04      	cmp	r3, #4
 8008adc:	d104      	bne.n	8008ae8 <HAL_TIM_IC_Start_IT+0x88>
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008ae4:	b2db      	uxtb	r3, r3
 8008ae6:	e00b      	b.n	8008b00 <HAL_TIM_IC_Start_IT+0xa0>
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	2b08      	cmp	r3, #8
 8008aec:	d104      	bne.n	8008af8 <HAL_TIM_IC_Start_IT+0x98>
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008af4:	b2db      	uxtb	r3, r3
 8008af6:	e003      	b.n	8008b00 <HAL_TIM_IC_Start_IT+0xa0>
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8008afe:	b2db      	uxtb	r3, r3
 8008b00:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8008b02:	7bbb      	ldrb	r3, [r7, #14]
 8008b04:	2b01      	cmp	r3, #1
 8008b06:	d102      	bne.n	8008b0e <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8008b08:	7b7b      	ldrb	r3, [r7, #13]
 8008b0a:	2b01      	cmp	r3, #1
 8008b0c:	d001      	beq.n	8008b12 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8008b0e:	2301      	movs	r3, #1
 8008b10:	e0dd      	b.n	8008cce <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d104      	bne.n	8008b22 <HAL_TIM_IC_Start_IT+0xc2>
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2202      	movs	r2, #2
 8008b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008b20:	e023      	b.n	8008b6a <HAL_TIM_IC_Start_IT+0x10a>
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	2b04      	cmp	r3, #4
 8008b26:	d104      	bne.n	8008b32 <HAL_TIM_IC_Start_IT+0xd2>
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2202      	movs	r2, #2
 8008b2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008b30:	e01b      	b.n	8008b6a <HAL_TIM_IC_Start_IT+0x10a>
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	2b08      	cmp	r3, #8
 8008b36:	d104      	bne.n	8008b42 <HAL_TIM_IC_Start_IT+0xe2>
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2202      	movs	r2, #2
 8008b3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008b40:	e013      	b.n	8008b6a <HAL_TIM_IC_Start_IT+0x10a>
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	2b0c      	cmp	r3, #12
 8008b46:	d104      	bne.n	8008b52 <HAL_TIM_IC_Start_IT+0xf2>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2202      	movs	r2, #2
 8008b4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008b50:	e00b      	b.n	8008b6a <HAL_TIM_IC_Start_IT+0x10a>
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	2b10      	cmp	r3, #16
 8008b56:	d104      	bne.n	8008b62 <HAL_TIM_IC_Start_IT+0x102>
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2202      	movs	r2, #2
 8008b5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008b60:	e003      	b.n	8008b6a <HAL_TIM_IC_Start_IT+0x10a>
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2202      	movs	r2, #2
 8008b66:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d104      	bne.n	8008b7a <HAL_TIM_IC_Start_IT+0x11a>
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2202      	movs	r2, #2
 8008b74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008b78:	e013      	b.n	8008ba2 <HAL_TIM_IC_Start_IT+0x142>
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	2b04      	cmp	r3, #4
 8008b7e:	d104      	bne.n	8008b8a <HAL_TIM_IC_Start_IT+0x12a>
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2202      	movs	r2, #2
 8008b84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008b88:	e00b      	b.n	8008ba2 <HAL_TIM_IC_Start_IT+0x142>
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	2b08      	cmp	r3, #8
 8008b8e:	d104      	bne.n	8008b9a <HAL_TIM_IC_Start_IT+0x13a>
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2202      	movs	r2, #2
 8008b94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008b98:	e003      	b.n	8008ba2 <HAL_TIM_IC_Start_IT+0x142>
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2202      	movs	r2, #2
 8008b9e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	2b0c      	cmp	r3, #12
 8008ba6:	d841      	bhi.n	8008c2c <HAL_TIM_IC_Start_IT+0x1cc>
 8008ba8:	a201      	add	r2, pc, #4	; (adr r2, 8008bb0 <HAL_TIM_IC_Start_IT+0x150>)
 8008baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bae:	bf00      	nop
 8008bb0:	08008be5 	.word	0x08008be5
 8008bb4:	08008c2d 	.word	0x08008c2d
 8008bb8:	08008c2d 	.word	0x08008c2d
 8008bbc:	08008c2d 	.word	0x08008c2d
 8008bc0:	08008bf7 	.word	0x08008bf7
 8008bc4:	08008c2d 	.word	0x08008c2d
 8008bc8:	08008c2d 	.word	0x08008c2d
 8008bcc:	08008c2d 	.word	0x08008c2d
 8008bd0:	08008c09 	.word	0x08008c09
 8008bd4:	08008c2d 	.word	0x08008c2d
 8008bd8:	08008c2d 	.word	0x08008c2d
 8008bdc:	08008c2d 	.word	0x08008c2d
 8008be0:	08008c1b 	.word	0x08008c1b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	68da      	ldr	r2, [r3, #12]
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f042 0202 	orr.w	r2, r2, #2
 8008bf2:	60da      	str	r2, [r3, #12]
      break;
 8008bf4:	e01d      	b.n	8008c32 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	68da      	ldr	r2, [r3, #12]
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f042 0204 	orr.w	r2, r2, #4
 8008c04:	60da      	str	r2, [r3, #12]
      break;
 8008c06:	e014      	b.n	8008c32 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	68da      	ldr	r2, [r3, #12]
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f042 0208 	orr.w	r2, r2, #8
 8008c16:	60da      	str	r2, [r3, #12]
      break;
 8008c18:	e00b      	b.n	8008c32 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	68da      	ldr	r2, [r3, #12]
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f042 0210 	orr.w	r2, r2, #16
 8008c28:	60da      	str	r2, [r3, #12]
      break;
 8008c2a:	e002      	b.n	8008c32 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	73fb      	strb	r3, [r7, #15]
      break;
 8008c30:	bf00      	nop
  }

  if (status == HAL_OK)
 8008c32:	7bfb      	ldrb	r3, [r7, #15]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d149      	bne.n	8008ccc <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	2201      	movs	r2, #1
 8008c3e:	6839      	ldr	r1, [r7, #0]
 8008c40:	4618      	mov	r0, r3
 8008c42:	f001 f951 	bl	8009ee8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	4a23      	ldr	r2, [pc, #140]	; (8008cd8 <HAL_TIM_IC_Start_IT+0x278>)
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d01d      	beq.n	8008c8c <HAL_TIM_IC_Start_IT+0x22c>
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c58:	d018      	beq.n	8008c8c <HAL_TIM_IC_Start_IT+0x22c>
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	4a1f      	ldr	r2, [pc, #124]	; (8008cdc <HAL_TIM_IC_Start_IT+0x27c>)
 8008c60:	4293      	cmp	r3, r2
 8008c62:	d013      	beq.n	8008c8c <HAL_TIM_IC_Start_IT+0x22c>
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	4a1d      	ldr	r2, [pc, #116]	; (8008ce0 <HAL_TIM_IC_Start_IT+0x280>)
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d00e      	beq.n	8008c8c <HAL_TIM_IC_Start_IT+0x22c>
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	4a1c      	ldr	r2, [pc, #112]	; (8008ce4 <HAL_TIM_IC_Start_IT+0x284>)
 8008c74:	4293      	cmp	r3, r2
 8008c76:	d009      	beq.n	8008c8c <HAL_TIM_IC_Start_IT+0x22c>
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	4a1a      	ldr	r2, [pc, #104]	; (8008ce8 <HAL_TIM_IC_Start_IT+0x288>)
 8008c7e:	4293      	cmp	r3, r2
 8008c80:	d004      	beq.n	8008c8c <HAL_TIM_IC_Start_IT+0x22c>
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	4a19      	ldr	r2, [pc, #100]	; (8008cec <HAL_TIM_IC_Start_IT+0x28c>)
 8008c88:	4293      	cmp	r3, r2
 8008c8a:	d115      	bne.n	8008cb8 <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	689a      	ldr	r2, [r3, #8]
 8008c92:	4b17      	ldr	r3, [pc, #92]	; (8008cf0 <HAL_TIM_IC_Start_IT+0x290>)
 8008c94:	4013      	ands	r3, r2
 8008c96:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	2b06      	cmp	r3, #6
 8008c9c:	d015      	beq.n	8008cca <HAL_TIM_IC_Start_IT+0x26a>
 8008c9e:	68bb      	ldr	r3, [r7, #8]
 8008ca0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ca4:	d011      	beq.n	8008cca <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	681a      	ldr	r2, [r3, #0]
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f042 0201 	orr.w	r2, r2, #1
 8008cb4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cb6:	e008      	b.n	8008cca <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	681a      	ldr	r2, [r3, #0]
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f042 0201 	orr.w	r2, r2, #1
 8008cc6:	601a      	str	r2, [r3, #0]
 8008cc8:	e000      	b.n	8008ccc <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cca:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8008ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cce:	4618      	mov	r0, r3
 8008cd0:	3710      	adds	r7, #16
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd80      	pop	{r7, pc}
 8008cd6:	bf00      	nop
 8008cd8:	40012c00 	.word	0x40012c00
 8008cdc:	40000400 	.word	0x40000400
 8008ce0:	40000800 	.word	0x40000800
 8008ce4:	40000c00 	.word	0x40000c00
 8008ce8:	40013400 	.word	0x40013400
 8008cec:	40014000 	.word	0x40014000
 8008cf0:	00010007 	.word	0x00010007

08008cf4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b082      	sub	sp, #8
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	691b      	ldr	r3, [r3, #16]
 8008d02:	f003 0302 	and.w	r3, r3, #2
 8008d06:	2b02      	cmp	r3, #2
 8008d08:	d122      	bne.n	8008d50 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	68db      	ldr	r3, [r3, #12]
 8008d10:	f003 0302 	and.w	r3, r3, #2
 8008d14:	2b02      	cmp	r3, #2
 8008d16:	d11b      	bne.n	8008d50 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	f06f 0202 	mvn.w	r2, #2
 8008d20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2201      	movs	r2, #1
 8008d26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	699b      	ldr	r3, [r3, #24]
 8008d2e:	f003 0303 	and.w	r3, r3, #3
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d003      	beq.n	8008d3e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	f000 fb89 	bl	800944e <HAL_TIM_IC_CaptureCallback>
 8008d3c:	e005      	b.n	8008d4a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	f000 fb7b 	bl	800943a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d44:	6878      	ldr	r0, [r7, #4]
 8008d46:	f000 fb8c 	bl	8009462 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	691b      	ldr	r3, [r3, #16]
 8008d56:	f003 0304 	and.w	r3, r3, #4
 8008d5a:	2b04      	cmp	r3, #4
 8008d5c:	d122      	bne.n	8008da4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	68db      	ldr	r3, [r3, #12]
 8008d64:	f003 0304 	and.w	r3, r3, #4
 8008d68:	2b04      	cmp	r3, #4
 8008d6a:	d11b      	bne.n	8008da4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f06f 0204 	mvn.w	r2, #4
 8008d74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	2202      	movs	r2, #2
 8008d7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	699b      	ldr	r3, [r3, #24]
 8008d82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d003      	beq.n	8008d92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	f000 fb5f 	bl	800944e <HAL_TIM_IC_CaptureCallback>
 8008d90:	e005      	b.n	8008d9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f000 fb51 	bl	800943a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f000 fb62 	bl	8009462 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2200      	movs	r2, #0
 8008da2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	691b      	ldr	r3, [r3, #16]
 8008daa:	f003 0308 	and.w	r3, r3, #8
 8008dae:	2b08      	cmp	r3, #8
 8008db0:	d122      	bne.n	8008df8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	68db      	ldr	r3, [r3, #12]
 8008db8:	f003 0308 	and.w	r3, r3, #8
 8008dbc:	2b08      	cmp	r3, #8
 8008dbe:	d11b      	bne.n	8008df8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	f06f 0208 	mvn.w	r2, #8
 8008dc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2204      	movs	r2, #4
 8008dce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	69db      	ldr	r3, [r3, #28]
 8008dd6:	f003 0303 	and.w	r3, r3, #3
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d003      	beq.n	8008de6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	f000 fb35 	bl	800944e <HAL_TIM_IC_CaptureCallback>
 8008de4:	e005      	b.n	8008df2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f000 fb27 	bl	800943a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	f000 fb38 	bl	8009462 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2200      	movs	r2, #0
 8008df6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	691b      	ldr	r3, [r3, #16]
 8008dfe:	f003 0310 	and.w	r3, r3, #16
 8008e02:	2b10      	cmp	r3, #16
 8008e04:	d122      	bne.n	8008e4c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	68db      	ldr	r3, [r3, #12]
 8008e0c:	f003 0310 	and.w	r3, r3, #16
 8008e10:	2b10      	cmp	r3, #16
 8008e12:	d11b      	bne.n	8008e4c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f06f 0210 	mvn.w	r2, #16
 8008e1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2208      	movs	r2, #8
 8008e22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	69db      	ldr	r3, [r3, #28]
 8008e2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d003      	beq.n	8008e3a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f000 fb0b 	bl	800944e <HAL_TIM_IC_CaptureCallback>
 8008e38:	e005      	b.n	8008e46 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	f000 fafd 	bl	800943a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e40:	6878      	ldr	r0, [r7, #4]
 8008e42:	f000 fb0e 	bl	8009462 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2200      	movs	r2, #0
 8008e4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	691b      	ldr	r3, [r3, #16]
 8008e52:	f003 0301 	and.w	r3, r3, #1
 8008e56:	2b01      	cmp	r3, #1
 8008e58:	d10e      	bne.n	8008e78 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	68db      	ldr	r3, [r3, #12]
 8008e60:	f003 0301 	and.w	r3, r3, #1
 8008e64:	2b01      	cmp	r3, #1
 8008e66:	d107      	bne.n	8008e78 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f06f 0201 	mvn.w	r2, #1
 8008e70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f000 fad7 	bl	8009426 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	691b      	ldr	r3, [r3, #16]
 8008e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e82:	2b80      	cmp	r3, #128	; 0x80
 8008e84:	d10e      	bne.n	8008ea4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	68db      	ldr	r3, [r3, #12]
 8008e8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e90:	2b80      	cmp	r3, #128	; 0x80
 8008e92:	d107      	bne.n	8008ea4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008e9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f001 fa1e 	bl	800a2e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	691b      	ldr	r3, [r3, #16]
 8008eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008eae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008eb2:	d10e      	bne.n	8008ed2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	68db      	ldr	r3, [r3, #12]
 8008eba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ebe:	2b80      	cmp	r3, #128	; 0x80
 8008ec0:	d107      	bne.n	8008ed2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008eca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f001 fa11 	bl	800a2f4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	691b      	ldr	r3, [r3, #16]
 8008ed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008edc:	2b40      	cmp	r3, #64	; 0x40
 8008ede:	d10e      	bne.n	8008efe <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	68db      	ldr	r3, [r3, #12]
 8008ee6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008eea:	2b40      	cmp	r3, #64	; 0x40
 8008eec:	d107      	bne.n	8008efe <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008ef6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f000 fabc 	bl	8009476 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	691b      	ldr	r3, [r3, #16]
 8008f04:	f003 0320 	and.w	r3, r3, #32
 8008f08:	2b20      	cmp	r3, #32
 8008f0a:	d10e      	bne.n	8008f2a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	68db      	ldr	r3, [r3, #12]
 8008f12:	f003 0320 	and.w	r3, r3, #32
 8008f16:	2b20      	cmp	r3, #32
 8008f18:	d107      	bne.n	8008f2a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f06f 0220 	mvn.w	r2, #32
 8008f22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008f24:	6878      	ldr	r0, [r7, #4]
 8008f26:	f001 f9d1 	bl	800a2cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008f2a:	bf00      	nop
 8008f2c:	3708      	adds	r7, #8
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}

08008f32 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008f32:	b580      	push	{r7, lr}
 8008f34:	b086      	sub	sp, #24
 8008f36:	af00      	add	r7, sp, #0
 8008f38:	60f8      	str	r0, [r7, #12]
 8008f3a:	60b9      	str	r1, [r7, #8]
 8008f3c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f48:	2b01      	cmp	r3, #1
 8008f4a:	d101      	bne.n	8008f50 <HAL_TIM_IC_ConfigChannel+0x1e>
 8008f4c:	2302      	movs	r3, #2
 8008f4e:	e088      	b.n	8009062 <HAL_TIM_IC_ConfigChannel+0x130>
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	2201      	movs	r2, #1
 8008f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d11b      	bne.n	8008f96 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	6818      	ldr	r0, [r3, #0]
 8008f62:	68bb      	ldr	r3, [r7, #8]
 8008f64:	6819      	ldr	r1, [r3, #0]
 8008f66:	68bb      	ldr	r3, [r7, #8]
 8008f68:	685a      	ldr	r2, [r3, #4]
 8008f6a:	68bb      	ldr	r3, [r7, #8]
 8008f6c:	68db      	ldr	r3, [r3, #12]
 8008f6e:	f000 fdfd 	bl	8009b6c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	699a      	ldr	r2, [r3, #24]
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f022 020c 	bic.w	r2, r2, #12
 8008f80:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	6999      	ldr	r1, [r3, #24]
 8008f88:	68bb      	ldr	r3, [r7, #8]
 8008f8a:	689a      	ldr	r2, [r3, #8]
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	430a      	orrs	r2, r1
 8008f92:	619a      	str	r2, [r3, #24]
 8008f94:	e060      	b.n	8009058 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2b04      	cmp	r3, #4
 8008f9a:	d11c      	bne.n	8008fd6 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	6818      	ldr	r0, [r3, #0]
 8008fa0:	68bb      	ldr	r3, [r7, #8]
 8008fa2:	6819      	ldr	r1, [r3, #0]
 8008fa4:	68bb      	ldr	r3, [r7, #8]
 8008fa6:	685a      	ldr	r2, [r3, #4]
 8008fa8:	68bb      	ldr	r3, [r7, #8]
 8008faa:	68db      	ldr	r3, [r3, #12]
 8008fac:	f000 fe7b 	bl	8009ca6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	699a      	ldr	r2, [r3, #24]
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008fbe:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	6999      	ldr	r1, [r3, #24]
 8008fc6:	68bb      	ldr	r3, [r7, #8]
 8008fc8:	689b      	ldr	r3, [r3, #8]
 8008fca:	021a      	lsls	r2, r3, #8
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	430a      	orrs	r2, r1
 8008fd2:	619a      	str	r2, [r3, #24]
 8008fd4:	e040      	b.n	8009058 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2b08      	cmp	r3, #8
 8008fda:	d11b      	bne.n	8009014 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	6818      	ldr	r0, [r3, #0]
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	6819      	ldr	r1, [r3, #0]
 8008fe4:	68bb      	ldr	r3, [r7, #8]
 8008fe6:	685a      	ldr	r2, [r3, #4]
 8008fe8:	68bb      	ldr	r3, [r7, #8]
 8008fea:	68db      	ldr	r3, [r3, #12]
 8008fec:	f000 fec8 	bl	8009d80 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	69da      	ldr	r2, [r3, #28]
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f022 020c 	bic.w	r2, r2, #12
 8008ffe:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	69d9      	ldr	r1, [r3, #28]
 8009006:	68bb      	ldr	r3, [r7, #8]
 8009008:	689a      	ldr	r2, [r3, #8]
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	430a      	orrs	r2, r1
 8009010:	61da      	str	r2, [r3, #28]
 8009012:	e021      	b.n	8009058 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2b0c      	cmp	r3, #12
 8009018:	d11c      	bne.n	8009054 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	6818      	ldr	r0, [r3, #0]
 800901e:	68bb      	ldr	r3, [r7, #8]
 8009020:	6819      	ldr	r1, [r3, #0]
 8009022:	68bb      	ldr	r3, [r7, #8]
 8009024:	685a      	ldr	r2, [r3, #4]
 8009026:	68bb      	ldr	r3, [r7, #8]
 8009028:	68db      	ldr	r3, [r3, #12]
 800902a:	f000 fee5 	bl	8009df8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	69da      	ldr	r2, [r3, #28]
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800903c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	69d9      	ldr	r1, [r3, #28]
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	689b      	ldr	r3, [r3, #8]
 8009048:	021a      	lsls	r2, r3, #8
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	430a      	orrs	r2, r1
 8009050:	61da      	str	r2, [r3, #28]
 8009052:	e001      	b.n	8009058 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8009054:	2301      	movs	r3, #1
 8009056:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	2200      	movs	r2, #0
 800905c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009060:	7dfb      	ldrb	r3, [r7, #23]
}
 8009062:	4618      	mov	r0, r3
 8009064:	3718      	adds	r7, #24
 8009066:	46bd      	mov	sp, r7
 8009068:	bd80      	pop	{r7, pc}
	...

0800906c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b086      	sub	sp, #24
 8009070:	af00      	add	r7, sp, #0
 8009072:	60f8      	str	r0, [r7, #12]
 8009074:	60b9      	str	r1, [r7, #8]
 8009076:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009078:	2300      	movs	r3, #0
 800907a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009082:	2b01      	cmp	r3, #1
 8009084:	d101      	bne.n	800908a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009086:	2302      	movs	r3, #2
 8009088:	e0ff      	b.n	800928a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	2201      	movs	r2, #1
 800908e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2b14      	cmp	r3, #20
 8009096:	f200 80f0 	bhi.w	800927a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800909a:	a201      	add	r2, pc, #4	; (adr r2, 80090a0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800909c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090a0:	080090f5 	.word	0x080090f5
 80090a4:	0800927b 	.word	0x0800927b
 80090a8:	0800927b 	.word	0x0800927b
 80090ac:	0800927b 	.word	0x0800927b
 80090b0:	08009135 	.word	0x08009135
 80090b4:	0800927b 	.word	0x0800927b
 80090b8:	0800927b 	.word	0x0800927b
 80090bc:	0800927b 	.word	0x0800927b
 80090c0:	08009177 	.word	0x08009177
 80090c4:	0800927b 	.word	0x0800927b
 80090c8:	0800927b 	.word	0x0800927b
 80090cc:	0800927b 	.word	0x0800927b
 80090d0:	080091b7 	.word	0x080091b7
 80090d4:	0800927b 	.word	0x0800927b
 80090d8:	0800927b 	.word	0x0800927b
 80090dc:	0800927b 	.word	0x0800927b
 80090e0:	080091f9 	.word	0x080091f9
 80090e4:	0800927b 	.word	0x0800927b
 80090e8:	0800927b 	.word	0x0800927b
 80090ec:	0800927b 	.word	0x0800927b
 80090f0:	08009239 	.word	0x08009239
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	68b9      	ldr	r1, [r7, #8]
 80090fa:	4618      	mov	r0, r3
 80090fc:	f000 fa60 	bl	80095c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	699a      	ldr	r2, [r3, #24]
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f042 0208 	orr.w	r2, r2, #8
 800910e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	699a      	ldr	r2, [r3, #24]
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f022 0204 	bic.w	r2, r2, #4
 800911e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	6999      	ldr	r1, [r3, #24]
 8009126:	68bb      	ldr	r3, [r7, #8]
 8009128:	691a      	ldr	r2, [r3, #16]
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	430a      	orrs	r2, r1
 8009130:	619a      	str	r2, [r3, #24]
      break;
 8009132:	e0a5      	b.n	8009280 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	68b9      	ldr	r1, [r7, #8]
 800913a:	4618      	mov	r0, r3
 800913c:	f000 fad0 	bl	80096e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	699a      	ldr	r2, [r3, #24]
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800914e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	699a      	ldr	r2, [r3, #24]
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800915e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	6999      	ldr	r1, [r3, #24]
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	691b      	ldr	r3, [r3, #16]
 800916a:	021a      	lsls	r2, r3, #8
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	430a      	orrs	r2, r1
 8009172:	619a      	str	r2, [r3, #24]
      break;
 8009174:	e084      	b.n	8009280 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	68b9      	ldr	r1, [r7, #8]
 800917c:	4618      	mov	r0, r3
 800917e:	f000 fb39 	bl	80097f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	69da      	ldr	r2, [r3, #28]
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	f042 0208 	orr.w	r2, r2, #8
 8009190:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	69da      	ldr	r2, [r3, #28]
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	f022 0204 	bic.w	r2, r2, #4
 80091a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	69d9      	ldr	r1, [r3, #28]
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	691a      	ldr	r2, [r3, #16]
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	430a      	orrs	r2, r1
 80091b2:	61da      	str	r2, [r3, #28]
      break;
 80091b4:	e064      	b.n	8009280 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	68b9      	ldr	r1, [r7, #8]
 80091bc:	4618      	mov	r0, r3
 80091be:	f000 fba1 	bl	8009904 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	69da      	ldr	r2, [r3, #28]
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80091d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	69da      	ldr	r2, [r3, #28]
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80091e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	69d9      	ldr	r1, [r3, #28]
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	691b      	ldr	r3, [r3, #16]
 80091ec:	021a      	lsls	r2, r3, #8
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	430a      	orrs	r2, r1
 80091f4:	61da      	str	r2, [r3, #28]
      break;
 80091f6:	e043      	b.n	8009280 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	68b9      	ldr	r1, [r7, #8]
 80091fe:	4618      	mov	r0, r3
 8009200:	f000 fbea 	bl	80099d8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	f042 0208 	orr.w	r2, r2, #8
 8009212:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f022 0204 	bic.w	r2, r2, #4
 8009222:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800922a:	68bb      	ldr	r3, [r7, #8]
 800922c:	691a      	ldr	r2, [r3, #16]
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	430a      	orrs	r2, r1
 8009234:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009236:	e023      	b.n	8009280 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	68b9      	ldr	r1, [r7, #8]
 800923e:	4618      	mov	r0, r3
 8009240:	f000 fc2e 	bl	8009aa0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009252:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009262:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	691b      	ldr	r3, [r3, #16]
 800926e:	021a      	lsls	r2, r3, #8
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	430a      	orrs	r2, r1
 8009276:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009278:	e002      	b.n	8009280 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800927a:	2301      	movs	r3, #1
 800927c:	75fb      	strb	r3, [r7, #23]
      break;
 800927e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	2200      	movs	r2, #0
 8009284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009288:	7dfb      	ldrb	r3, [r7, #23]
}
 800928a:	4618      	mov	r0, r3
 800928c:	3718      	adds	r7, #24
 800928e:	46bd      	mov	sp, r7
 8009290:	bd80      	pop	{r7, pc}
 8009292:	bf00      	nop

08009294 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b084      	sub	sp, #16
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
 800929c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800929e:	2300      	movs	r3, #0
 80092a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80092a8:	2b01      	cmp	r3, #1
 80092aa:	d101      	bne.n	80092b0 <HAL_TIM_ConfigClockSource+0x1c>
 80092ac:	2302      	movs	r3, #2
 80092ae:	e0b6      	b.n	800941e <HAL_TIM_ConfigClockSource+0x18a>
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2201      	movs	r2, #1
 80092b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2202      	movs	r2, #2
 80092bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	689b      	ldr	r3, [r3, #8]
 80092c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80092c8:	68bb      	ldr	r3, [r7, #8]
 80092ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80092ce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80092d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80092d4:	68bb      	ldr	r3, [r7, #8]
 80092d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80092da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	68ba      	ldr	r2, [r7, #8]
 80092e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80092ec:	d03e      	beq.n	800936c <HAL_TIM_ConfigClockSource+0xd8>
 80092ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80092f2:	f200 8087 	bhi.w	8009404 <HAL_TIM_ConfigClockSource+0x170>
 80092f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092fa:	f000 8086 	beq.w	800940a <HAL_TIM_ConfigClockSource+0x176>
 80092fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009302:	d87f      	bhi.n	8009404 <HAL_TIM_ConfigClockSource+0x170>
 8009304:	2b70      	cmp	r3, #112	; 0x70
 8009306:	d01a      	beq.n	800933e <HAL_TIM_ConfigClockSource+0xaa>
 8009308:	2b70      	cmp	r3, #112	; 0x70
 800930a:	d87b      	bhi.n	8009404 <HAL_TIM_ConfigClockSource+0x170>
 800930c:	2b60      	cmp	r3, #96	; 0x60
 800930e:	d050      	beq.n	80093b2 <HAL_TIM_ConfigClockSource+0x11e>
 8009310:	2b60      	cmp	r3, #96	; 0x60
 8009312:	d877      	bhi.n	8009404 <HAL_TIM_ConfigClockSource+0x170>
 8009314:	2b50      	cmp	r3, #80	; 0x50
 8009316:	d03c      	beq.n	8009392 <HAL_TIM_ConfigClockSource+0xfe>
 8009318:	2b50      	cmp	r3, #80	; 0x50
 800931a:	d873      	bhi.n	8009404 <HAL_TIM_ConfigClockSource+0x170>
 800931c:	2b40      	cmp	r3, #64	; 0x40
 800931e:	d058      	beq.n	80093d2 <HAL_TIM_ConfigClockSource+0x13e>
 8009320:	2b40      	cmp	r3, #64	; 0x40
 8009322:	d86f      	bhi.n	8009404 <HAL_TIM_ConfigClockSource+0x170>
 8009324:	2b30      	cmp	r3, #48	; 0x30
 8009326:	d064      	beq.n	80093f2 <HAL_TIM_ConfigClockSource+0x15e>
 8009328:	2b30      	cmp	r3, #48	; 0x30
 800932a:	d86b      	bhi.n	8009404 <HAL_TIM_ConfigClockSource+0x170>
 800932c:	2b20      	cmp	r3, #32
 800932e:	d060      	beq.n	80093f2 <HAL_TIM_ConfigClockSource+0x15e>
 8009330:	2b20      	cmp	r3, #32
 8009332:	d867      	bhi.n	8009404 <HAL_TIM_ConfigClockSource+0x170>
 8009334:	2b00      	cmp	r3, #0
 8009336:	d05c      	beq.n	80093f2 <HAL_TIM_ConfigClockSource+0x15e>
 8009338:	2b10      	cmp	r3, #16
 800933a:	d05a      	beq.n	80093f2 <HAL_TIM_ConfigClockSource+0x15e>
 800933c:	e062      	b.n	8009404 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6818      	ldr	r0, [r3, #0]
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	6899      	ldr	r1, [r3, #8]
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	685a      	ldr	r2, [r3, #4]
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	68db      	ldr	r3, [r3, #12]
 800934e:	f000 fdab 	bl	8009ea8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	689b      	ldr	r3, [r3, #8]
 8009358:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800935a:	68bb      	ldr	r3, [r7, #8]
 800935c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009360:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	68ba      	ldr	r2, [r7, #8]
 8009368:	609a      	str	r2, [r3, #8]
      break;
 800936a:	e04f      	b.n	800940c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	6818      	ldr	r0, [r3, #0]
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	6899      	ldr	r1, [r3, #8]
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	685a      	ldr	r2, [r3, #4]
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	68db      	ldr	r3, [r3, #12]
 800937c:	f000 fd94 	bl	8009ea8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	689a      	ldr	r2, [r3, #8]
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800938e:	609a      	str	r2, [r3, #8]
      break;
 8009390:	e03c      	b.n	800940c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6818      	ldr	r0, [r3, #0]
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	6859      	ldr	r1, [r3, #4]
 800939a:	683b      	ldr	r3, [r7, #0]
 800939c:	68db      	ldr	r3, [r3, #12]
 800939e:	461a      	mov	r2, r3
 80093a0:	f000 fc52 	bl	8009c48 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	2150      	movs	r1, #80	; 0x50
 80093aa:	4618      	mov	r0, r3
 80093ac:	f000 fd61 	bl	8009e72 <TIM_ITRx_SetConfig>
      break;
 80093b0:	e02c      	b.n	800940c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6818      	ldr	r0, [r3, #0]
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	6859      	ldr	r1, [r3, #4]
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	68db      	ldr	r3, [r3, #12]
 80093be:	461a      	mov	r2, r3
 80093c0:	f000 fcae 	bl	8009d20 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	2160      	movs	r1, #96	; 0x60
 80093ca:	4618      	mov	r0, r3
 80093cc:	f000 fd51 	bl	8009e72 <TIM_ITRx_SetConfig>
      break;
 80093d0:	e01c      	b.n	800940c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6818      	ldr	r0, [r3, #0]
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	6859      	ldr	r1, [r3, #4]
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	68db      	ldr	r3, [r3, #12]
 80093de:	461a      	mov	r2, r3
 80093e0:	f000 fc32 	bl	8009c48 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	2140      	movs	r1, #64	; 0x40
 80093ea:	4618      	mov	r0, r3
 80093ec:	f000 fd41 	bl	8009e72 <TIM_ITRx_SetConfig>
      break;
 80093f0:	e00c      	b.n	800940c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681a      	ldr	r2, [r3, #0]
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	4619      	mov	r1, r3
 80093fc:	4610      	mov	r0, r2
 80093fe:	f000 fd38 	bl	8009e72 <TIM_ITRx_SetConfig>
      break;
 8009402:	e003      	b.n	800940c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8009404:	2301      	movs	r3, #1
 8009406:	73fb      	strb	r3, [r7, #15]
      break;
 8009408:	e000      	b.n	800940c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800940a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2201      	movs	r2, #1
 8009410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2200      	movs	r2, #0
 8009418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800941c:	7bfb      	ldrb	r3, [r7, #15]
}
 800941e:	4618      	mov	r0, r3
 8009420:	3710      	adds	r7, #16
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}

08009426 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009426:	b480      	push	{r7}
 8009428:	b083      	sub	sp, #12
 800942a:	af00      	add	r7, sp, #0
 800942c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800942e:	bf00      	nop
 8009430:	370c      	adds	r7, #12
 8009432:	46bd      	mov	sp, r7
 8009434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009438:	4770      	bx	lr

0800943a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800943a:	b480      	push	{r7}
 800943c:	b083      	sub	sp, #12
 800943e:	af00      	add	r7, sp, #0
 8009440:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009442:	bf00      	nop
 8009444:	370c      	adds	r7, #12
 8009446:	46bd      	mov	sp, r7
 8009448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944c:	4770      	bx	lr

0800944e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800944e:	b480      	push	{r7}
 8009450:	b083      	sub	sp, #12
 8009452:	af00      	add	r7, sp, #0
 8009454:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009456:	bf00      	nop
 8009458:	370c      	adds	r7, #12
 800945a:	46bd      	mov	sp, r7
 800945c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009460:	4770      	bx	lr

08009462 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009462:	b480      	push	{r7}
 8009464:	b083      	sub	sp, #12
 8009466:	af00      	add	r7, sp, #0
 8009468:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800946a:	bf00      	nop
 800946c:	370c      	adds	r7, #12
 800946e:	46bd      	mov	sp, r7
 8009470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009474:	4770      	bx	lr

08009476 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009476:	b480      	push	{r7}
 8009478:	b083      	sub	sp, #12
 800947a:	af00      	add	r7, sp, #0
 800947c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800947e:	bf00      	nop
 8009480:	370c      	adds	r7, #12
 8009482:	46bd      	mov	sp, r7
 8009484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009488:	4770      	bx	lr
	...

0800948c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800948c:	b480      	push	{r7}
 800948e:	b085      	sub	sp, #20
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
 8009494:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	4a40      	ldr	r2, [pc, #256]	; (80095a0 <TIM_Base_SetConfig+0x114>)
 80094a0:	4293      	cmp	r3, r2
 80094a2:	d013      	beq.n	80094cc <TIM_Base_SetConfig+0x40>
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094aa:	d00f      	beq.n	80094cc <TIM_Base_SetConfig+0x40>
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	4a3d      	ldr	r2, [pc, #244]	; (80095a4 <TIM_Base_SetConfig+0x118>)
 80094b0:	4293      	cmp	r3, r2
 80094b2:	d00b      	beq.n	80094cc <TIM_Base_SetConfig+0x40>
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	4a3c      	ldr	r2, [pc, #240]	; (80095a8 <TIM_Base_SetConfig+0x11c>)
 80094b8:	4293      	cmp	r3, r2
 80094ba:	d007      	beq.n	80094cc <TIM_Base_SetConfig+0x40>
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	4a3b      	ldr	r2, [pc, #236]	; (80095ac <TIM_Base_SetConfig+0x120>)
 80094c0:	4293      	cmp	r3, r2
 80094c2:	d003      	beq.n	80094cc <TIM_Base_SetConfig+0x40>
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	4a3a      	ldr	r2, [pc, #232]	; (80095b0 <TIM_Base_SetConfig+0x124>)
 80094c8:	4293      	cmp	r3, r2
 80094ca:	d108      	bne.n	80094de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	685b      	ldr	r3, [r3, #4]
 80094d8:	68fa      	ldr	r2, [r7, #12]
 80094da:	4313      	orrs	r3, r2
 80094dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	4a2f      	ldr	r2, [pc, #188]	; (80095a0 <TIM_Base_SetConfig+0x114>)
 80094e2:	4293      	cmp	r3, r2
 80094e4:	d01f      	beq.n	8009526 <TIM_Base_SetConfig+0x9a>
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094ec:	d01b      	beq.n	8009526 <TIM_Base_SetConfig+0x9a>
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	4a2c      	ldr	r2, [pc, #176]	; (80095a4 <TIM_Base_SetConfig+0x118>)
 80094f2:	4293      	cmp	r3, r2
 80094f4:	d017      	beq.n	8009526 <TIM_Base_SetConfig+0x9a>
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	4a2b      	ldr	r2, [pc, #172]	; (80095a8 <TIM_Base_SetConfig+0x11c>)
 80094fa:	4293      	cmp	r3, r2
 80094fc:	d013      	beq.n	8009526 <TIM_Base_SetConfig+0x9a>
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	4a2a      	ldr	r2, [pc, #168]	; (80095ac <TIM_Base_SetConfig+0x120>)
 8009502:	4293      	cmp	r3, r2
 8009504:	d00f      	beq.n	8009526 <TIM_Base_SetConfig+0x9a>
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	4a29      	ldr	r2, [pc, #164]	; (80095b0 <TIM_Base_SetConfig+0x124>)
 800950a:	4293      	cmp	r3, r2
 800950c:	d00b      	beq.n	8009526 <TIM_Base_SetConfig+0x9a>
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	4a28      	ldr	r2, [pc, #160]	; (80095b4 <TIM_Base_SetConfig+0x128>)
 8009512:	4293      	cmp	r3, r2
 8009514:	d007      	beq.n	8009526 <TIM_Base_SetConfig+0x9a>
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	4a27      	ldr	r2, [pc, #156]	; (80095b8 <TIM_Base_SetConfig+0x12c>)
 800951a:	4293      	cmp	r3, r2
 800951c:	d003      	beq.n	8009526 <TIM_Base_SetConfig+0x9a>
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	4a26      	ldr	r2, [pc, #152]	; (80095bc <TIM_Base_SetConfig+0x130>)
 8009522:	4293      	cmp	r3, r2
 8009524:	d108      	bne.n	8009538 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800952c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	68db      	ldr	r3, [r3, #12]
 8009532:	68fa      	ldr	r2, [r7, #12]
 8009534:	4313      	orrs	r3, r2
 8009536:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	695b      	ldr	r3, [r3, #20]
 8009542:	4313      	orrs	r3, r2
 8009544:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	68fa      	ldr	r2, [r7, #12]
 800954a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	689a      	ldr	r2, [r3, #8]
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	681a      	ldr	r2, [r3, #0]
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	4a10      	ldr	r2, [pc, #64]	; (80095a0 <TIM_Base_SetConfig+0x114>)
 8009560:	4293      	cmp	r3, r2
 8009562:	d00f      	beq.n	8009584 <TIM_Base_SetConfig+0xf8>
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	4a12      	ldr	r2, [pc, #72]	; (80095b0 <TIM_Base_SetConfig+0x124>)
 8009568:	4293      	cmp	r3, r2
 800956a:	d00b      	beq.n	8009584 <TIM_Base_SetConfig+0xf8>
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	4a11      	ldr	r2, [pc, #68]	; (80095b4 <TIM_Base_SetConfig+0x128>)
 8009570:	4293      	cmp	r3, r2
 8009572:	d007      	beq.n	8009584 <TIM_Base_SetConfig+0xf8>
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	4a10      	ldr	r2, [pc, #64]	; (80095b8 <TIM_Base_SetConfig+0x12c>)
 8009578:	4293      	cmp	r3, r2
 800957a:	d003      	beq.n	8009584 <TIM_Base_SetConfig+0xf8>
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	4a0f      	ldr	r2, [pc, #60]	; (80095bc <TIM_Base_SetConfig+0x130>)
 8009580:	4293      	cmp	r3, r2
 8009582:	d103      	bne.n	800958c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	691a      	ldr	r2, [r3, #16]
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2201      	movs	r2, #1
 8009590:	615a      	str	r2, [r3, #20]
}
 8009592:	bf00      	nop
 8009594:	3714      	adds	r7, #20
 8009596:	46bd      	mov	sp, r7
 8009598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959c:	4770      	bx	lr
 800959e:	bf00      	nop
 80095a0:	40012c00 	.word	0x40012c00
 80095a4:	40000400 	.word	0x40000400
 80095a8:	40000800 	.word	0x40000800
 80095ac:	40000c00 	.word	0x40000c00
 80095b0:	40013400 	.word	0x40013400
 80095b4:	40014000 	.word	0x40014000
 80095b8:	40014400 	.word	0x40014400
 80095bc:	40014800 	.word	0x40014800

080095c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80095c0:	b480      	push	{r7}
 80095c2:	b087      	sub	sp, #28
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
 80095c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6a1b      	ldr	r3, [r3, #32]
 80095ce:	f023 0201 	bic.w	r2, r3, #1
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6a1b      	ldr	r3, [r3, #32]
 80095da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	685b      	ldr	r3, [r3, #4]
 80095e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	699b      	ldr	r3, [r3, #24]
 80095e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80095ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	f023 0303 	bic.w	r3, r3, #3
 80095fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	68fa      	ldr	r2, [r7, #12]
 8009602:	4313      	orrs	r3, r2
 8009604:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009606:	697b      	ldr	r3, [r7, #20]
 8009608:	f023 0302 	bic.w	r3, r3, #2
 800960c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	689b      	ldr	r3, [r3, #8]
 8009612:	697a      	ldr	r2, [r7, #20]
 8009614:	4313      	orrs	r3, r2
 8009616:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	4a2c      	ldr	r2, [pc, #176]	; (80096cc <TIM_OC1_SetConfig+0x10c>)
 800961c:	4293      	cmp	r3, r2
 800961e:	d00f      	beq.n	8009640 <TIM_OC1_SetConfig+0x80>
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	4a2b      	ldr	r2, [pc, #172]	; (80096d0 <TIM_OC1_SetConfig+0x110>)
 8009624:	4293      	cmp	r3, r2
 8009626:	d00b      	beq.n	8009640 <TIM_OC1_SetConfig+0x80>
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	4a2a      	ldr	r2, [pc, #168]	; (80096d4 <TIM_OC1_SetConfig+0x114>)
 800962c:	4293      	cmp	r3, r2
 800962e:	d007      	beq.n	8009640 <TIM_OC1_SetConfig+0x80>
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	4a29      	ldr	r2, [pc, #164]	; (80096d8 <TIM_OC1_SetConfig+0x118>)
 8009634:	4293      	cmp	r3, r2
 8009636:	d003      	beq.n	8009640 <TIM_OC1_SetConfig+0x80>
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	4a28      	ldr	r2, [pc, #160]	; (80096dc <TIM_OC1_SetConfig+0x11c>)
 800963c:	4293      	cmp	r3, r2
 800963e:	d10c      	bne.n	800965a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009640:	697b      	ldr	r3, [r7, #20]
 8009642:	f023 0308 	bic.w	r3, r3, #8
 8009646:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	68db      	ldr	r3, [r3, #12]
 800964c:	697a      	ldr	r2, [r7, #20]
 800964e:	4313      	orrs	r3, r2
 8009650:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009652:	697b      	ldr	r3, [r7, #20]
 8009654:	f023 0304 	bic.w	r3, r3, #4
 8009658:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	4a1b      	ldr	r2, [pc, #108]	; (80096cc <TIM_OC1_SetConfig+0x10c>)
 800965e:	4293      	cmp	r3, r2
 8009660:	d00f      	beq.n	8009682 <TIM_OC1_SetConfig+0xc2>
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	4a1a      	ldr	r2, [pc, #104]	; (80096d0 <TIM_OC1_SetConfig+0x110>)
 8009666:	4293      	cmp	r3, r2
 8009668:	d00b      	beq.n	8009682 <TIM_OC1_SetConfig+0xc2>
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	4a19      	ldr	r2, [pc, #100]	; (80096d4 <TIM_OC1_SetConfig+0x114>)
 800966e:	4293      	cmp	r3, r2
 8009670:	d007      	beq.n	8009682 <TIM_OC1_SetConfig+0xc2>
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	4a18      	ldr	r2, [pc, #96]	; (80096d8 <TIM_OC1_SetConfig+0x118>)
 8009676:	4293      	cmp	r3, r2
 8009678:	d003      	beq.n	8009682 <TIM_OC1_SetConfig+0xc2>
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	4a17      	ldr	r2, [pc, #92]	; (80096dc <TIM_OC1_SetConfig+0x11c>)
 800967e:	4293      	cmp	r3, r2
 8009680:	d111      	bne.n	80096a6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009682:	693b      	ldr	r3, [r7, #16]
 8009684:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009688:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800968a:	693b      	ldr	r3, [r7, #16]
 800968c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009690:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	695b      	ldr	r3, [r3, #20]
 8009696:	693a      	ldr	r2, [r7, #16]
 8009698:	4313      	orrs	r3, r2
 800969a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	699b      	ldr	r3, [r3, #24]
 80096a0:	693a      	ldr	r2, [r7, #16]
 80096a2:	4313      	orrs	r3, r2
 80096a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	693a      	ldr	r2, [r7, #16]
 80096aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	68fa      	ldr	r2, [r7, #12]
 80096b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	685a      	ldr	r2, [r3, #4]
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	697a      	ldr	r2, [r7, #20]
 80096be:	621a      	str	r2, [r3, #32]
}
 80096c0:	bf00      	nop
 80096c2:	371c      	adds	r7, #28
 80096c4:	46bd      	mov	sp, r7
 80096c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ca:	4770      	bx	lr
 80096cc:	40012c00 	.word	0x40012c00
 80096d0:	40013400 	.word	0x40013400
 80096d4:	40014000 	.word	0x40014000
 80096d8:	40014400 	.word	0x40014400
 80096dc:	40014800 	.word	0x40014800

080096e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80096e0:	b480      	push	{r7}
 80096e2:	b087      	sub	sp, #28
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
 80096e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6a1b      	ldr	r3, [r3, #32]
 80096ee:	f023 0210 	bic.w	r2, r3, #16
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	6a1b      	ldr	r3, [r3, #32]
 80096fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	685b      	ldr	r3, [r3, #4]
 8009700:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	699b      	ldr	r3, [r3, #24]
 8009706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800970e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009712:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800971a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	021b      	lsls	r3, r3, #8
 8009722:	68fa      	ldr	r2, [r7, #12]
 8009724:	4313      	orrs	r3, r2
 8009726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009728:	697b      	ldr	r3, [r7, #20]
 800972a:	f023 0320 	bic.w	r3, r3, #32
 800972e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	689b      	ldr	r3, [r3, #8]
 8009734:	011b      	lsls	r3, r3, #4
 8009736:	697a      	ldr	r2, [r7, #20]
 8009738:	4313      	orrs	r3, r2
 800973a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	4a28      	ldr	r2, [pc, #160]	; (80097e0 <TIM_OC2_SetConfig+0x100>)
 8009740:	4293      	cmp	r3, r2
 8009742:	d003      	beq.n	800974c <TIM_OC2_SetConfig+0x6c>
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	4a27      	ldr	r2, [pc, #156]	; (80097e4 <TIM_OC2_SetConfig+0x104>)
 8009748:	4293      	cmp	r3, r2
 800974a:	d10d      	bne.n	8009768 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800974c:	697b      	ldr	r3, [r7, #20]
 800974e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009752:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	68db      	ldr	r3, [r3, #12]
 8009758:	011b      	lsls	r3, r3, #4
 800975a:	697a      	ldr	r2, [r7, #20]
 800975c:	4313      	orrs	r3, r2
 800975e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009760:	697b      	ldr	r3, [r7, #20]
 8009762:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009766:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	4a1d      	ldr	r2, [pc, #116]	; (80097e0 <TIM_OC2_SetConfig+0x100>)
 800976c:	4293      	cmp	r3, r2
 800976e:	d00f      	beq.n	8009790 <TIM_OC2_SetConfig+0xb0>
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	4a1c      	ldr	r2, [pc, #112]	; (80097e4 <TIM_OC2_SetConfig+0x104>)
 8009774:	4293      	cmp	r3, r2
 8009776:	d00b      	beq.n	8009790 <TIM_OC2_SetConfig+0xb0>
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	4a1b      	ldr	r2, [pc, #108]	; (80097e8 <TIM_OC2_SetConfig+0x108>)
 800977c:	4293      	cmp	r3, r2
 800977e:	d007      	beq.n	8009790 <TIM_OC2_SetConfig+0xb0>
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	4a1a      	ldr	r2, [pc, #104]	; (80097ec <TIM_OC2_SetConfig+0x10c>)
 8009784:	4293      	cmp	r3, r2
 8009786:	d003      	beq.n	8009790 <TIM_OC2_SetConfig+0xb0>
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	4a19      	ldr	r2, [pc, #100]	; (80097f0 <TIM_OC2_SetConfig+0x110>)
 800978c:	4293      	cmp	r3, r2
 800978e:	d113      	bne.n	80097b8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009790:	693b      	ldr	r3, [r7, #16]
 8009792:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009796:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009798:	693b      	ldr	r3, [r7, #16]
 800979a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800979e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	695b      	ldr	r3, [r3, #20]
 80097a4:	009b      	lsls	r3, r3, #2
 80097a6:	693a      	ldr	r2, [r7, #16]
 80097a8:	4313      	orrs	r3, r2
 80097aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	699b      	ldr	r3, [r3, #24]
 80097b0:	009b      	lsls	r3, r3, #2
 80097b2:	693a      	ldr	r2, [r7, #16]
 80097b4:	4313      	orrs	r3, r2
 80097b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	693a      	ldr	r2, [r7, #16]
 80097bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	68fa      	ldr	r2, [r7, #12]
 80097c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	685a      	ldr	r2, [r3, #4]
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	697a      	ldr	r2, [r7, #20]
 80097d0:	621a      	str	r2, [r3, #32]
}
 80097d2:	bf00      	nop
 80097d4:	371c      	adds	r7, #28
 80097d6:	46bd      	mov	sp, r7
 80097d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097dc:	4770      	bx	lr
 80097de:	bf00      	nop
 80097e0:	40012c00 	.word	0x40012c00
 80097e4:	40013400 	.word	0x40013400
 80097e8:	40014000 	.word	0x40014000
 80097ec:	40014400 	.word	0x40014400
 80097f0:	40014800 	.word	0x40014800

080097f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80097f4:	b480      	push	{r7}
 80097f6:	b087      	sub	sp, #28
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
 80097fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	6a1b      	ldr	r3, [r3, #32]
 8009802:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6a1b      	ldr	r3, [r3, #32]
 800980e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	685b      	ldr	r3, [r3, #4]
 8009814:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	69db      	ldr	r3, [r3, #28]
 800981a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009826:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	f023 0303 	bic.w	r3, r3, #3
 800982e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	68fa      	ldr	r2, [r7, #12]
 8009836:	4313      	orrs	r3, r2
 8009838:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800983a:	697b      	ldr	r3, [r7, #20]
 800983c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009840:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	689b      	ldr	r3, [r3, #8]
 8009846:	021b      	lsls	r3, r3, #8
 8009848:	697a      	ldr	r2, [r7, #20]
 800984a:	4313      	orrs	r3, r2
 800984c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	4a27      	ldr	r2, [pc, #156]	; (80098f0 <TIM_OC3_SetConfig+0xfc>)
 8009852:	4293      	cmp	r3, r2
 8009854:	d003      	beq.n	800985e <TIM_OC3_SetConfig+0x6a>
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	4a26      	ldr	r2, [pc, #152]	; (80098f4 <TIM_OC3_SetConfig+0x100>)
 800985a:	4293      	cmp	r3, r2
 800985c:	d10d      	bne.n	800987a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800985e:	697b      	ldr	r3, [r7, #20]
 8009860:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009864:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	68db      	ldr	r3, [r3, #12]
 800986a:	021b      	lsls	r3, r3, #8
 800986c:	697a      	ldr	r2, [r7, #20]
 800986e:	4313      	orrs	r3, r2
 8009870:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009872:	697b      	ldr	r3, [r7, #20]
 8009874:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009878:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	4a1c      	ldr	r2, [pc, #112]	; (80098f0 <TIM_OC3_SetConfig+0xfc>)
 800987e:	4293      	cmp	r3, r2
 8009880:	d00f      	beq.n	80098a2 <TIM_OC3_SetConfig+0xae>
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	4a1b      	ldr	r2, [pc, #108]	; (80098f4 <TIM_OC3_SetConfig+0x100>)
 8009886:	4293      	cmp	r3, r2
 8009888:	d00b      	beq.n	80098a2 <TIM_OC3_SetConfig+0xae>
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	4a1a      	ldr	r2, [pc, #104]	; (80098f8 <TIM_OC3_SetConfig+0x104>)
 800988e:	4293      	cmp	r3, r2
 8009890:	d007      	beq.n	80098a2 <TIM_OC3_SetConfig+0xae>
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	4a19      	ldr	r2, [pc, #100]	; (80098fc <TIM_OC3_SetConfig+0x108>)
 8009896:	4293      	cmp	r3, r2
 8009898:	d003      	beq.n	80098a2 <TIM_OC3_SetConfig+0xae>
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	4a18      	ldr	r2, [pc, #96]	; (8009900 <TIM_OC3_SetConfig+0x10c>)
 800989e:	4293      	cmp	r3, r2
 80098a0:	d113      	bne.n	80098ca <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80098a2:	693b      	ldr	r3, [r7, #16]
 80098a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80098a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80098aa:	693b      	ldr	r3, [r7, #16]
 80098ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80098b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	695b      	ldr	r3, [r3, #20]
 80098b6:	011b      	lsls	r3, r3, #4
 80098b8:	693a      	ldr	r2, [r7, #16]
 80098ba:	4313      	orrs	r3, r2
 80098bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	699b      	ldr	r3, [r3, #24]
 80098c2:	011b      	lsls	r3, r3, #4
 80098c4:	693a      	ldr	r2, [r7, #16]
 80098c6:	4313      	orrs	r3, r2
 80098c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	693a      	ldr	r2, [r7, #16]
 80098ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	68fa      	ldr	r2, [r7, #12]
 80098d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	685a      	ldr	r2, [r3, #4]
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	697a      	ldr	r2, [r7, #20]
 80098e2:	621a      	str	r2, [r3, #32]
}
 80098e4:	bf00      	nop
 80098e6:	371c      	adds	r7, #28
 80098e8:	46bd      	mov	sp, r7
 80098ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ee:	4770      	bx	lr
 80098f0:	40012c00 	.word	0x40012c00
 80098f4:	40013400 	.word	0x40013400
 80098f8:	40014000 	.word	0x40014000
 80098fc:	40014400 	.word	0x40014400
 8009900:	40014800 	.word	0x40014800

08009904 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009904:	b480      	push	{r7}
 8009906:	b087      	sub	sp, #28
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
 800990c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6a1b      	ldr	r3, [r3, #32]
 8009912:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6a1b      	ldr	r3, [r3, #32]
 800991e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	685b      	ldr	r3, [r3, #4]
 8009924:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	69db      	ldr	r3, [r3, #28]
 800992a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009932:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009936:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800993e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	021b      	lsls	r3, r3, #8
 8009946:	68fa      	ldr	r2, [r7, #12]
 8009948:	4313      	orrs	r3, r2
 800994a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800994c:	693b      	ldr	r3, [r7, #16]
 800994e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009952:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	689b      	ldr	r3, [r3, #8]
 8009958:	031b      	lsls	r3, r3, #12
 800995a:	693a      	ldr	r2, [r7, #16]
 800995c:	4313      	orrs	r3, r2
 800995e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	4a18      	ldr	r2, [pc, #96]	; (80099c4 <TIM_OC4_SetConfig+0xc0>)
 8009964:	4293      	cmp	r3, r2
 8009966:	d00f      	beq.n	8009988 <TIM_OC4_SetConfig+0x84>
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	4a17      	ldr	r2, [pc, #92]	; (80099c8 <TIM_OC4_SetConfig+0xc4>)
 800996c:	4293      	cmp	r3, r2
 800996e:	d00b      	beq.n	8009988 <TIM_OC4_SetConfig+0x84>
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	4a16      	ldr	r2, [pc, #88]	; (80099cc <TIM_OC4_SetConfig+0xc8>)
 8009974:	4293      	cmp	r3, r2
 8009976:	d007      	beq.n	8009988 <TIM_OC4_SetConfig+0x84>
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	4a15      	ldr	r2, [pc, #84]	; (80099d0 <TIM_OC4_SetConfig+0xcc>)
 800997c:	4293      	cmp	r3, r2
 800997e:	d003      	beq.n	8009988 <TIM_OC4_SetConfig+0x84>
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	4a14      	ldr	r2, [pc, #80]	; (80099d4 <TIM_OC4_SetConfig+0xd0>)
 8009984:	4293      	cmp	r3, r2
 8009986:	d109      	bne.n	800999c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009988:	697b      	ldr	r3, [r7, #20]
 800998a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800998e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	695b      	ldr	r3, [r3, #20]
 8009994:	019b      	lsls	r3, r3, #6
 8009996:	697a      	ldr	r2, [r7, #20]
 8009998:	4313      	orrs	r3, r2
 800999a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	697a      	ldr	r2, [r7, #20]
 80099a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	68fa      	ldr	r2, [r7, #12]
 80099a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	685a      	ldr	r2, [r3, #4]
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	693a      	ldr	r2, [r7, #16]
 80099b4:	621a      	str	r2, [r3, #32]
}
 80099b6:	bf00      	nop
 80099b8:	371c      	adds	r7, #28
 80099ba:	46bd      	mov	sp, r7
 80099bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c0:	4770      	bx	lr
 80099c2:	bf00      	nop
 80099c4:	40012c00 	.word	0x40012c00
 80099c8:	40013400 	.word	0x40013400
 80099cc:	40014000 	.word	0x40014000
 80099d0:	40014400 	.word	0x40014400
 80099d4:	40014800 	.word	0x40014800

080099d8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80099d8:	b480      	push	{r7}
 80099da:	b087      	sub	sp, #28
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
 80099e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6a1b      	ldr	r3, [r3, #32]
 80099e6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	6a1b      	ldr	r3, [r3, #32]
 80099f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	685b      	ldr	r3, [r3, #4]
 80099f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009a06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	68fa      	ldr	r2, [r7, #12]
 8009a12:	4313      	orrs	r3, r2
 8009a14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009a16:	693b      	ldr	r3, [r7, #16]
 8009a18:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009a1c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	689b      	ldr	r3, [r3, #8]
 8009a22:	041b      	lsls	r3, r3, #16
 8009a24:	693a      	ldr	r2, [r7, #16]
 8009a26:	4313      	orrs	r3, r2
 8009a28:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	4a17      	ldr	r2, [pc, #92]	; (8009a8c <TIM_OC5_SetConfig+0xb4>)
 8009a2e:	4293      	cmp	r3, r2
 8009a30:	d00f      	beq.n	8009a52 <TIM_OC5_SetConfig+0x7a>
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	4a16      	ldr	r2, [pc, #88]	; (8009a90 <TIM_OC5_SetConfig+0xb8>)
 8009a36:	4293      	cmp	r3, r2
 8009a38:	d00b      	beq.n	8009a52 <TIM_OC5_SetConfig+0x7a>
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	4a15      	ldr	r2, [pc, #84]	; (8009a94 <TIM_OC5_SetConfig+0xbc>)
 8009a3e:	4293      	cmp	r3, r2
 8009a40:	d007      	beq.n	8009a52 <TIM_OC5_SetConfig+0x7a>
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	4a14      	ldr	r2, [pc, #80]	; (8009a98 <TIM_OC5_SetConfig+0xc0>)
 8009a46:	4293      	cmp	r3, r2
 8009a48:	d003      	beq.n	8009a52 <TIM_OC5_SetConfig+0x7a>
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	4a13      	ldr	r2, [pc, #76]	; (8009a9c <TIM_OC5_SetConfig+0xc4>)
 8009a4e:	4293      	cmp	r3, r2
 8009a50:	d109      	bne.n	8009a66 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009a52:	697b      	ldr	r3, [r7, #20]
 8009a54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009a58:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	695b      	ldr	r3, [r3, #20]
 8009a5e:	021b      	lsls	r3, r3, #8
 8009a60:	697a      	ldr	r2, [r7, #20]
 8009a62:	4313      	orrs	r3, r2
 8009a64:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	697a      	ldr	r2, [r7, #20]
 8009a6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	68fa      	ldr	r2, [r7, #12]
 8009a70:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009a72:	683b      	ldr	r3, [r7, #0]
 8009a74:	685a      	ldr	r2, [r3, #4]
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	693a      	ldr	r2, [r7, #16]
 8009a7e:	621a      	str	r2, [r3, #32]
}
 8009a80:	bf00      	nop
 8009a82:	371c      	adds	r7, #28
 8009a84:	46bd      	mov	sp, r7
 8009a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8a:	4770      	bx	lr
 8009a8c:	40012c00 	.word	0x40012c00
 8009a90:	40013400 	.word	0x40013400
 8009a94:	40014000 	.word	0x40014000
 8009a98:	40014400 	.word	0x40014400
 8009a9c:	40014800 	.word	0x40014800

08009aa0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009aa0:	b480      	push	{r7}
 8009aa2:	b087      	sub	sp, #28
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
 8009aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	6a1b      	ldr	r3, [r3, #32]
 8009aae:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6a1b      	ldr	r3, [r3, #32]
 8009aba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	685b      	ldr	r3, [r3, #4]
 8009ac0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009ace:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ad2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009ad4:	683b      	ldr	r3, [r7, #0]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	021b      	lsls	r3, r3, #8
 8009ada:	68fa      	ldr	r2, [r7, #12]
 8009adc:	4313      	orrs	r3, r2
 8009ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009ae0:	693b      	ldr	r3, [r7, #16]
 8009ae2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009ae6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	689b      	ldr	r3, [r3, #8]
 8009aec:	051b      	lsls	r3, r3, #20
 8009aee:	693a      	ldr	r2, [r7, #16]
 8009af0:	4313      	orrs	r3, r2
 8009af2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	4a18      	ldr	r2, [pc, #96]	; (8009b58 <TIM_OC6_SetConfig+0xb8>)
 8009af8:	4293      	cmp	r3, r2
 8009afa:	d00f      	beq.n	8009b1c <TIM_OC6_SetConfig+0x7c>
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	4a17      	ldr	r2, [pc, #92]	; (8009b5c <TIM_OC6_SetConfig+0xbc>)
 8009b00:	4293      	cmp	r3, r2
 8009b02:	d00b      	beq.n	8009b1c <TIM_OC6_SetConfig+0x7c>
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	4a16      	ldr	r2, [pc, #88]	; (8009b60 <TIM_OC6_SetConfig+0xc0>)
 8009b08:	4293      	cmp	r3, r2
 8009b0a:	d007      	beq.n	8009b1c <TIM_OC6_SetConfig+0x7c>
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	4a15      	ldr	r2, [pc, #84]	; (8009b64 <TIM_OC6_SetConfig+0xc4>)
 8009b10:	4293      	cmp	r3, r2
 8009b12:	d003      	beq.n	8009b1c <TIM_OC6_SetConfig+0x7c>
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	4a14      	ldr	r2, [pc, #80]	; (8009b68 <TIM_OC6_SetConfig+0xc8>)
 8009b18:	4293      	cmp	r3, r2
 8009b1a:	d109      	bne.n	8009b30 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009b1c:	697b      	ldr	r3, [r7, #20]
 8009b1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009b22:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	695b      	ldr	r3, [r3, #20]
 8009b28:	029b      	lsls	r3, r3, #10
 8009b2a:	697a      	ldr	r2, [r7, #20]
 8009b2c:	4313      	orrs	r3, r2
 8009b2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	697a      	ldr	r2, [r7, #20]
 8009b34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	68fa      	ldr	r2, [r7, #12]
 8009b3a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	685a      	ldr	r2, [r3, #4]
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	693a      	ldr	r2, [r7, #16]
 8009b48:	621a      	str	r2, [r3, #32]
}
 8009b4a:	bf00      	nop
 8009b4c:	371c      	adds	r7, #28
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b54:	4770      	bx	lr
 8009b56:	bf00      	nop
 8009b58:	40012c00 	.word	0x40012c00
 8009b5c:	40013400 	.word	0x40013400
 8009b60:	40014000 	.word	0x40014000
 8009b64:	40014400 	.word	0x40014400
 8009b68:	40014800 	.word	0x40014800

08009b6c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8009b6c:	b480      	push	{r7}
 8009b6e:	b087      	sub	sp, #28
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	60f8      	str	r0, [r7, #12]
 8009b74:	60b9      	str	r1, [r7, #8]
 8009b76:	607a      	str	r2, [r7, #4]
 8009b78:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	6a1b      	ldr	r3, [r3, #32]
 8009b7e:	f023 0201 	bic.w	r2, r3, #1
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	699b      	ldr	r3, [r3, #24]
 8009b8a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	6a1b      	ldr	r3, [r3, #32]
 8009b90:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	4a26      	ldr	r2, [pc, #152]	; (8009c30 <TIM_TI1_SetConfig+0xc4>)
 8009b96:	4293      	cmp	r3, r2
 8009b98:	d017      	beq.n	8009bca <TIM_TI1_SetConfig+0x5e>
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ba0:	d013      	beq.n	8009bca <TIM_TI1_SetConfig+0x5e>
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	4a23      	ldr	r2, [pc, #140]	; (8009c34 <TIM_TI1_SetConfig+0xc8>)
 8009ba6:	4293      	cmp	r3, r2
 8009ba8:	d00f      	beq.n	8009bca <TIM_TI1_SetConfig+0x5e>
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	4a22      	ldr	r2, [pc, #136]	; (8009c38 <TIM_TI1_SetConfig+0xcc>)
 8009bae:	4293      	cmp	r3, r2
 8009bb0:	d00b      	beq.n	8009bca <TIM_TI1_SetConfig+0x5e>
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	4a21      	ldr	r2, [pc, #132]	; (8009c3c <TIM_TI1_SetConfig+0xd0>)
 8009bb6:	4293      	cmp	r3, r2
 8009bb8:	d007      	beq.n	8009bca <TIM_TI1_SetConfig+0x5e>
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	4a20      	ldr	r2, [pc, #128]	; (8009c40 <TIM_TI1_SetConfig+0xd4>)
 8009bbe:	4293      	cmp	r3, r2
 8009bc0:	d003      	beq.n	8009bca <TIM_TI1_SetConfig+0x5e>
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	4a1f      	ldr	r2, [pc, #124]	; (8009c44 <TIM_TI1_SetConfig+0xd8>)
 8009bc6:	4293      	cmp	r3, r2
 8009bc8:	d101      	bne.n	8009bce <TIM_TI1_SetConfig+0x62>
 8009bca:	2301      	movs	r3, #1
 8009bcc:	e000      	b.n	8009bd0 <TIM_TI1_SetConfig+0x64>
 8009bce:	2300      	movs	r3, #0
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d008      	beq.n	8009be6 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8009bd4:	697b      	ldr	r3, [r7, #20]
 8009bd6:	f023 0303 	bic.w	r3, r3, #3
 8009bda:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009bdc:	697a      	ldr	r2, [r7, #20]
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	4313      	orrs	r3, r2
 8009be2:	617b      	str	r3, [r7, #20]
 8009be4:	e003      	b.n	8009bee <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8009be6:	697b      	ldr	r3, [r7, #20]
 8009be8:	f043 0301 	orr.w	r3, r3, #1
 8009bec:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009bee:	697b      	ldr	r3, [r7, #20]
 8009bf0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009bf4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	011b      	lsls	r3, r3, #4
 8009bfa:	b2db      	uxtb	r3, r3
 8009bfc:	697a      	ldr	r2, [r7, #20]
 8009bfe:	4313      	orrs	r3, r2
 8009c00:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009c02:	693b      	ldr	r3, [r7, #16]
 8009c04:	f023 030a 	bic.w	r3, r3, #10
 8009c08:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8009c0a:	68bb      	ldr	r3, [r7, #8]
 8009c0c:	f003 030a 	and.w	r3, r3, #10
 8009c10:	693a      	ldr	r2, [r7, #16]
 8009c12:	4313      	orrs	r3, r2
 8009c14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	697a      	ldr	r2, [r7, #20]
 8009c1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	693a      	ldr	r2, [r7, #16]
 8009c20:	621a      	str	r2, [r3, #32]
}
 8009c22:	bf00      	nop
 8009c24:	371c      	adds	r7, #28
 8009c26:	46bd      	mov	sp, r7
 8009c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2c:	4770      	bx	lr
 8009c2e:	bf00      	nop
 8009c30:	40012c00 	.word	0x40012c00
 8009c34:	40000400 	.word	0x40000400
 8009c38:	40000800 	.word	0x40000800
 8009c3c:	40000c00 	.word	0x40000c00
 8009c40:	40013400 	.word	0x40013400
 8009c44:	40014000 	.word	0x40014000

08009c48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009c48:	b480      	push	{r7}
 8009c4a:	b087      	sub	sp, #28
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	60f8      	str	r0, [r7, #12]
 8009c50:	60b9      	str	r1, [r7, #8]
 8009c52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	6a1b      	ldr	r3, [r3, #32]
 8009c58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	6a1b      	ldr	r3, [r3, #32]
 8009c5e:	f023 0201 	bic.w	r2, r3, #1
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	699b      	ldr	r3, [r3, #24]
 8009c6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009c6c:	693b      	ldr	r3, [r7, #16]
 8009c6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009c72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	011b      	lsls	r3, r3, #4
 8009c78:	693a      	ldr	r2, [r7, #16]
 8009c7a:	4313      	orrs	r3, r2
 8009c7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009c7e:	697b      	ldr	r3, [r7, #20]
 8009c80:	f023 030a 	bic.w	r3, r3, #10
 8009c84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009c86:	697a      	ldr	r2, [r7, #20]
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	4313      	orrs	r3, r2
 8009c8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	693a      	ldr	r2, [r7, #16]
 8009c92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	697a      	ldr	r2, [r7, #20]
 8009c98:	621a      	str	r2, [r3, #32]
}
 8009c9a:	bf00      	nop
 8009c9c:	371c      	adds	r7, #28
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca4:	4770      	bx	lr

08009ca6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009ca6:	b480      	push	{r7}
 8009ca8:	b087      	sub	sp, #28
 8009caa:	af00      	add	r7, sp, #0
 8009cac:	60f8      	str	r0, [r7, #12]
 8009cae:	60b9      	str	r1, [r7, #8]
 8009cb0:	607a      	str	r2, [r7, #4]
 8009cb2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	6a1b      	ldr	r3, [r3, #32]
 8009cb8:	f023 0210 	bic.w	r2, r3, #16
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	699b      	ldr	r3, [r3, #24]
 8009cc4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	6a1b      	ldr	r3, [r3, #32]
 8009cca:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8009ccc:	697b      	ldr	r3, [r7, #20]
 8009cce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009cd2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	021b      	lsls	r3, r3, #8
 8009cd8:	697a      	ldr	r2, [r7, #20]
 8009cda:	4313      	orrs	r3, r2
 8009cdc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009cde:	697b      	ldr	r3, [r7, #20]
 8009ce0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009ce4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	031b      	lsls	r3, r3, #12
 8009cea:	b29b      	uxth	r3, r3
 8009cec:	697a      	ldr	r2, [r7, #20]
 8009cee:	4313      	orrs	r3, r2
 8009cf0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009cf2:	693b      	ldr	r3, [r7, #16]
 8009cf4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009cf8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8009cfa:	68bb      	ldr	r3, [r7, #8]
 8009cfc:	011b      	lsls	r3, r3, #4
 8009cfe:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8009d02:	693a      	ldr	r2, [r7, #16]
 8009d04:	4313      	orrs	r3, r2
 8009d06:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	697a      	ldr	r2, [r7, #20]
 8009d0c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	693a      	ldr	r2, [r7, #16]
 8009d12:	621a      	str	r2, [r3, #32]
}
 8009d14:	bf00      	nop
 8009d16:	371c      	adds	r7, #28
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1e:	4770      	bx	lr

08009d20 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009d20:	b480      	push	{r7}
 8009d22:	b087      	sub	sp, #28
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	60f8      	str	r0, [r7, #12]
 8009d28:	60b9      	str	r1, [r7, #8]
 8009d2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	6a1b      	ldr	r3, [r3, #32]
 8009d30:	f023 0210 	bic.w	r2, r3, #16
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	699b      	ldr	r3, [r3, #24]
 8009d3c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	6a1b      	ldr	r3, [r3, #32]
 8009d42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009d44:	697b      	ldr	r3, [r7, #20]
 8009d46:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009d4a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	031b      	lsls	r3, r3, #12
 8009d50:	697a      	ldr	r2, [r7, #20]
 8009d52:	4313      	orrs	r3, r2
 8009d54:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009d56:	693b      	ldr	r3, [r7, #16]
 8009d58:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009d5c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009d5e:	68bb      	ldr	r3, [r7, #8]
 8009d60:	011b      	lsls	r3, r3, #4
 8009d62:	693a      	ldr	r2, [r7, #16]
 8009d64:	4313      	orrs	r3, r2
 8009d66:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	697a      	ldr	r2, [r7, #20]
 8009d6c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	693a      	ldr	r2, [r7, #16]
 8009d72:	621a      	str	r2, [r3, #32]
}
 8009d74:	bf00      	nop
 8009d76:	371c      	adds	r7, #28
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7e:	4770      	bx	lr

08009d80 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009d80:	b480      	push	{r7}
 8009d82:	b087      	sub	sp, #28
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	60f8      	str	r0, [r7, #12]
 8009d88:	60b9      	str	r1, [r7, #8]
 8009d8a:	607a      	str	r2, [r7, #4]
 8009d8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	6a1b      	ldr	r3, [r3, #32]
 8009d92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	69db      	ldr	r3, [r3, #28]
 8009d9e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	6a1b      	ldr	r3, [r3, #32]
 8009da4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8009da6:	697b      	ldr	r3, [r7, #20]
 8009da8:	f023 0303 	bic.w	r3, r3, #3
 8009dac:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8009dae:	697a      	ldr	r2, [r7, #20]
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	4313      	orrs	r3, r2
 8009db4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8009db6:	697b      	ldr	r3, [r7, #20]
 8009db8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009dbc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	011b      	lsls	r3, r3, #4
 8009dc2:	b2db      	uxtb	r3, r3
 8009dc4:	697a      	ldr	r2, [r7, #20]
 8009dc6:	4313      	orrs	r3, r2
 8009dc8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8009dca:	693b      	ldr	r3, [r7, #16]
 8009dcc:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8009dd0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8009dd2:	68bb      	ldr	r3, [r7, #8]
 8009dd4:	021b      	lsls	r3, r3, #8
 8009dd6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8009dda:	693a      	ldr	r2, [r7, #16]
 8009ddc:	4313      	orrs	r3, r2
 8009dde:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	697a      	ldr	r2, [r7, #20]
 8009de4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	693a      	ldr	r2, [r7, #16]
 8009dea:	621a      	str	r2, [r3, #32]
}
 8009dec:	bf00      	nop
 8009dee:	371c      	adds	r7, #28
 8009df0:	46bd      	mov	sp, r7
 8009df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df6:	4770      	bx	lr

08009df8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009df8:	b480      	push	{r7}
 8009dfa:	b087      	sub	sp, #28
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	60f8      	str	r0, [r7, #12]
 8009e00:	60b9      	str	r1, [r7, #8]
 8009e02:	607a      	str	r2, [r7, #4]
 8009e04:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	6a1b      	ldr	r3, [r3, #32]
 8009e0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	69db      	ldr	r3, [r3, #28]
 8009e16:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	6a1b      	ldr	r3, [r3, #32]
 8009e1c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8009e1e:	697b      	ldr	r3, [r7, #20]
 8009e20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009e24:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	021b      	lsls	r3, r3, #8
 8009e2a:	697a      	ldr	r2, [r7, #20]
 8009e2c:	4313      	orrs	r3, r2
 8009e2e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8009e30:	697b      	ldr	r3, [r7, #20]
 8009e32:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009e36:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	031b      	lsls	r3, r3, #12
 8009e3c:	b29b      	uxth	r3, r3
 8009e3e:	697a      	ldr	r2, [r7, #20]
 8009e40:	4313      	orrs	r3, r2
 8009e42:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8009e44:	693b      	ldr	r3, [r7, #16]
 8009e46:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8009e4a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8009e4c:	68bb      	ldr	r3, [r7, #8]
 8009e4e:	031b      	lsls	r3, r3, #12
 8009e50:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8009e54:	693a      	ldr	r2, [r7, #16]
 8009e56:	4313      	orrs	r3, r2
 8009e58:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	697a      	ldr	r2, [r7, #20]
 8009e5e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	693a      	ldr	r2, [r7, #16]
 8009e64:	621a      	str	r2, [r3, #32]
}
 8009e66:	bf00      	nop
 8009e68:	371c      	adds	r7, #28
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e70:	4770      	bx	lr

08009e72 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009e72:	b480      	push	{r7}
 8009e74:	b085      	sub	sp, #20
 8009e76:	af00      	add	r7, sp, #0
 8009e78:	6078      	str	r0, [r7, #4]
 8009e7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	689b      	ldr	r3, [r3, #8]
 8009e80:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e88:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009e8a:	683a      	ldr	r2, [r7, #0]
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	4313      	orrs	r3, r2
 8009e90:	f043 0307 	orr.w	r3, r3, #7
 8009e94:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	68fa      	ldr	r2, [r7, #12]
 8009e9a:	609a      	str	r2, [r3, #8]
}
 8009e9c:	bf00      	nop
 8009e9e:	3714      	adds	r7, #20
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea6:	4770      	bx	lr

08009ea8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009ea8:	b480      	push	{r7}
 8009eaa:	b087      	sub	sp, #28
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	60f8      	str	r0, [r7, #12]
 8009eb0:	60b9      	str	r1, [r7, #8]
 8009eb2:	607a      	str	r2, [r7, #4]
 8009eb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	689b      	ldr	r3, [r3, #8]
 8009eba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009ebc:	697b      	ldr	r3, [r7, #20]
 8009ebe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009ec2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009ec4:	683b      	ldr	r3, [r7, #0]
 8009ec6:	021a      	lsls	r2, r3, #8
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	431a      	orrs	r2, r3
 8009ecc:	68bb      	ldr	r3, [r7, #8]
 8009ece:	4313      	orrs	r3, r2
 8009ed0:	697a      	ldr	r2, [r7, #20]
 8009ed2:	4313      	orrs	r3, r2
 8009ed4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	697a      	ldr	r2, [r7, #20]
 8009eda:	609a      	str	r2, [r3, #8]
}
 8009edc:	bf00      	nop
 8009ede:	371c      	adds	r7, #28
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee6:	4770      	bx	lr

08009ee8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009ee8:	b480      	push	{r7}
 8009eea:	b087      	sub	sp, #28
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	60f8      	str	r0, [r7, #12]
 8009ef0:	60b9      	str	r1, [r7, #8]
 8009ef2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	f003 031f 	and.w	r3, r3, #31
 8009efa:	2201      	movs	r2, #1
 8009efc:	fa02 f303 	lsl.w	r3, r2, r3
 8009f00:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	6a1a      	ldr	r2, [r3, #32]
 8009f06:	697b      	ldr	r3, [r7, #20]
 8009f08:	43db      	mvns	r3, r3
 8009f0a:	401a      	ands	r2, r3
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	6a1a      	ldr	r2, [r3, #32]
 8009f14:	68bb      	ldr	r3, [r7, #8]
 8009f16:	f003 031f 	and.w	r3, r3, #31
 8009f1a:	6879      	ldr	r1, [r7, #4]
 8009f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8009f20:	431a      	orrs	r2, r3
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	621a      	str	r2, [r3, #32]
}
 8009f26:	bf00      	nop
 8009f28:	371c      	adds	r7, #28
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f30:	4770      	bx	lr
	...

08009f34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009f34:	b480      	push	{r7}
 8009f36:	b085      	sub	sp, #20
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
 8009f3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f44:	2b01      	cmp	r3, #1
 8009f46:	d101      	bne.n	8009f4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009f48:	2302      	movs	r3, #2
 8009f4a:	e068      	b.n	800a01e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2201      	movs	r2, #1
 8009f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2202      	movs	r2, #2
 8009f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	685b      	ldr	r3, [r3, #4]
 8009f62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	689b      	ldr	r3, [r3, #8]
 8009f6a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	4a2e      	ldr	r2, [pc, #184]	; (800a02c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009f72:	4293      	cmp	r3, r2
 8009f74:	d004      	beq.n	8009f80 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	4a2d      	ldr	r2, [pc, #180]	; (800a030 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009f7c:	4293      	cmp	r3, r2
 8009f7e:	d108      	bne.n	8009f92 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009f86:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	685b      	ldr	r3, [r3, #4]
 8009f8c:	68fa      	ldr	r2, [r7, #12]
 8009f8e:	4313      	orrs	r3, r2
 8009f90:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f98:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	68fa      	ldr	r2, [r7, #12]
 8009fa0:	4313      	orrs	r3, r2
 8009fa2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	68fa      	ldr	r2, [r7, #12]
 8009faa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	4a1e      	ldr	r2, [pc, #120]	; (800a02c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009fb2:	4293      	cmp	r3, r2
 8009fb4:	d01d      	beq.n	8009ff2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009fbe:	d018      	beq.n	8009ff2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	4a1b      	ldr	r2, [pc, #108]	; (800a034 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009fc6:	4293      	cmp	r3, r2
 8009fc8:	d013      	beq.n	8009ff2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	4a1a      	ldr	r2, [pc, #104]	; (800a038 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009fd0:	4293      	cmp	r3, r2
 8009fd2:	d00e      	beq.n	8009ff2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	4a18      	ldr	r2, [pc, #96]	; (800a03c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009fda:	4293      	cmp	r3, r2
 8009fdc:	d009      	beq.n	8009ff2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	4a13      	ldr	r2, [pc, #76]	; (800a030 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009fe4:	4293      	cmp	r3, r2
 8009fe6:	d004      	beq.n	8009ff2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	4a14      	ldr	r2, [pc, #80]	; (800a040 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009fee:	4293      	cmp	r3, r2
 8009ff0:	d10c      	bne.n	800a00c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009ff2:	68bb      	ldr	r3, [r7, #8]
 8009ff4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009ff8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	689b      	ldr	r3, [r3, #8]
 8009ffe:	68ba      	ldr	r2, [r7, #8]
 800a000:	4313      	orrs	r3, r2
 800a002:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	68ba      	ldr	r2, [r7, #8]
 800a00a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2201      	movs	r2, #1
 800a010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2200      	movs	r2, #0
 800a018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a01c:	2300      	movs	r3, #0
}
 800a01e:	4618      	mov	r0, r3
 800a020:	3714      	adds	r7, #20
 800a022:	46bd      	mov	sp, r7
 800a024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a028:	4770      	bx	lr
 800a02a:	bf00      	nop
 800a02c:	40012c00 	.word	0x40012c00
 800a030:	40013400 	.word	0x40013400
 800a034:	40000400 	.word	0x40000400
 800a038:	40000800 	.word	0x40000800
 800a03c:	40000c00 	.word	0x40000c00
 800a040:	40014000 	.word	0x40014000

0800a044 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a044:	b480      	push	{r7}
 800a046:	b085      	sub	sp, #20
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
 800a04c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a04e:	2300      	movs	r3, #0
 800a050:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a058:	2b01      	cmp	r3, #1
 800a05a:	d101      	bne.n	800a060 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a05c:	2302      	movs	r3, #2
 800a05e:	e065      	b.n	800a12c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	2201      	movs	r2, #1
 800a064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a06e:	683b      	ldr	r3, [r7, #0]
 800a070:	68db      	ldr	r3, [r3, #12]
 800a072:	4313      	orrs	r3, r2
 800a074:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a07c:	683b      	ldr	r3, [r7, #0]
 800a07e:	689b      	ldr	r3, [r3, #8]
 800a080:	4313      	orrs	r3, r2
 800a082:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a08a:	683b      	ldr	r3, [r7, #0]
 800a08c:	685b      	ldr	r3, [r3, #4]
 800a08e:	4313      	orrs	r3, r2
 800a090:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	4313      	orrs	r3, r2
 800a09e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	691b      	ldr	r3, [r3, #16]
 800a0aa:	4313      	orrs	r3, r2
 800a0ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a0b4:	683b      	ldr	r3, [r7, #0]
 800a0b6:	695b      	ldr	r3, [r3, #20]
 800a0b8:	4313      	orrs	r3, r2
 800a0ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0c6:	4313      	orrs	r3, r2
 800a0c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	699b      	ldr	r3, [r3, #24]
 800a0d4:	041b      	lsls	r3, r3, #16
 800a0d6:	4313      	orrs	r3, r2
 800a0d8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	4a16      	ldr	r2, [pc, #88]	; (800a138 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800a0e0:	4293      	cmp	r3, r2
 800a0e2:	d004      	beq.n	800a0ee <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	4a14      	ldr	r2, [pc, #80]	; (800a13c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800a0ea:	4293      	cmp	r3, r2
 800a0ec:	d115      	bne.n	800a11a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0f8:	051b      	lsls	r3, r3, #20
 800a0fa:	4313      	orrs	r3, r2
 800a0fc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a104:	683b      	ldr	r3, [r7, #0]
 800a106:	69db      	ldr	r3, [r3, #28]
 800a108:	4313      	orrs	r3, r2
 800a10a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a112:	683b      	ldr	r3, [r7, #0]
 800a114:	6a1b      	ldr	r3, [r3, #32]
 800a116:	4313      	orrs	r3, r2
 800a118:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	68fa      	ldr	r2, [r7, #12]
 800a120:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	2200      	movs	r2, #0
 800a126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a12a:	2300      	movs	r3, #0
}
 800a12c:	4618      	mov	r0, r3
 800a12e:	3714      	adds	r7, #20
 800a130:	46bd      	mov	sp, r7
 800a132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a136:	4770      	bx	lr
 800a138:	40012c00 	.word	0x40012c00
 800a13c:	40013400 	.word	0x40013400

0800a140 <HAL_TIMEx_ConfigBreakInput>:
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             const TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)

{
 800a140:	b480      	push	{r7}
 800a142:	b08b      	sub	sp, #44	; 0x2c
 800a144:	af00      	add	r7, sp, #0
 800a146:	60f8      	str	r0, [r7, #12]
 800a148:	60b9      	str	r1, [r7, #8]
 800a14a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a14c:	2300      	movs	r3, #0
 800a14e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#else
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));
#endif /* DFSDM1_Channel0 */

  /* Check input state */
  __HAL_LOCK(htim);
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a158:	2b01      	cmp	r3, #1
 800a15a:	d101      	bne.n	800a160 <HAL_TIMEx_ConfigBreakInput+0x20>
 800a15c:	2302      	movs	r3, #2
 800a15e:	e0af      	b.n	800a2c0 <HAL_TIMEx_ConfigBreakInput+0x180>
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	2201      	movs	r2, #1
 800a164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (sBreakInputConfig->Source)
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	3b01      	subs	r3, #1
 800a16e:	2b07      	cmp	r3, #7
 800a170:	d83a      	bhi.n	800a1e8 <HAL_TIMEx_ConfigBreakInput+0xa8>
 800a172:	a201      	add	r2, pc, #4	; (adr r2, 800a178 <HAL_TIMEx_ConfigBreakInput+0x38>)
 800a174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a178:	0800a199 	.word	0x0800a199
 800a17c:	0800a1ad 	.word	0x0800a1ad
 800a180:	0800a1e9 	.word	0x0800a1e9
 800a184:	0800a1c1 	.word	0x0800a1c1
 800a188:	0800a1e9 	.word	0x0800a1e9
 800a18c:	0800a1e9 	.word	0x0800a1e9
 800a190:	0800a1e9 	.word	0x0800a1e9
 800a194:	0800a1d5 	.word	0x0800a1d5
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_OR2_BKINE;
 800a198:	2301      	movs	r3, #1
 800a19a:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKINE_Pos;
 800a19c:	2300      	movs	r3, #0
 800a19e:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_OR2_BKINP;
 800a1a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a1a4:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_OR2_BKINP_Pos;
 800a1a6:	2309      	movs	r3, #9
 800a1a8:	613b      	str	r3, [r7, #16]
      break;
 800a1aa:	e026      	b.n	800a1fa <HAL_TIMEx_ConfigBreakInput+0xba>
    }
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_OR2_BKCMP1E;
 800a1ac:	2302      	movs	r3, #2
 800a1ae:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKCMP1E_Pos;
 800a1b0:	2301      	movs	r3, #1
 800a1b2:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_OR2_BKCMP1P;
 800a1b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a1b8:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_OR2_BKCMP1P_Pos;
 800a1ba:	230a      	movs	r3, #10
 800a1bc:	613b      	str	r3, [r7, #16]
      break;
 800a1be:	e01c      	b.n	800a1fa <HAL_TIMEx_ConfigBreakInput+0xba>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_OR2_BKCMP2E;
 800a1c0:	2304      	movs	r3, #4
 800a1c2:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKCMP2E_Pos;
 800a1c4:	2302      	movs	r3, #2
 800a1c6:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_OR2_BKCMP2P;
 800a1c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a1cc:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_OR2_BKCMP2P_Pos;
 800a1ce:	230b      	movs	r3, #11
 800a1d0:	613b      	str	r3, [r7, #16]
      break;
 800a1d2:	e012      	b.n	800a1fa <HAL_TIMEx_ConfigBreakInput+0xba>
    }
#if defined(DFSDM1_Channel0)
    case TIM_BREAKINPUTSOURCE_DFSDM1:
    {
      bkin_enable_mask = TIM1_OR2_BKDF1BK0E;
 800a1d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a1d8:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKDF1BK0E_Pos;
 800a1da:	2308      	movs	r3, #8
 800a1dc:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = 0U;
 800a1de:	2300      	movs	r3, #0
 800a1e0:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = 0U;
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	613b      	str	r3, [r7, #16]
      break;
 800a1e6:	e008      	b.n	800a1fa <HAL_TIMEx_ConfigBreakInput+0xba>
    }
#endif /* DFSDM1_Channel0 */

    default:
    {
      bkin_enable_mask = 0U;
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = 0U;
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	61bb      	str	r3, [r7, #24]
      bkin_enable_bitpos = 0U;
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	617b      	str	r3, [r7, #20]
      bkin_polarity_bitpos = 0U;
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	613b      	str	r3, [r7, #16]
      break;
 800a1f8:	bf00      	nop
    }
  }

  switch (BreakInput)
 800a1fa:	68bb      	ldr	r3, [r7, #8]
 800a1fc:	2b01      	cmp	r3, #1
 800a1fe:	d003      	beq.n	800a208 <HAL_TIMEx_ConfigBreakInput+0xc8>
 800a200:	68bb      	ldr	r3, [r7, #8]
 800a202:	2b02      	cmp	r3, #2
 800a204:	d029      	beq.n	800a25a <HAL_TIMEx_ConfigBreakInput+0x11a>
 800a206:	e051      	b.n	800a2ac <HAL_TIMEx_ConfigBreakInput+0x16c>
  {
    case TIM_BREAKINPUT_BRK:
    {
      /* Get the TIMx_OR2 register value */
      tmporx = htim->Instance->OR2;
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a20e:	623b      	str	r3, [r7, #32]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 800a210:	69fb      	ldr	r3, [r7, #28]
 800a212:	43db      	mvns	r3, r3
 800a214:	6a3a      	ldr	r2, [r7, #32]
 800a216:	4013      	ands	r3, r2
 800a218:	623b      	str	r3, [r7, #32]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	685a      	ldr	r2, [r3, #4]
 800a21e:	697b      	ldr	r3, [r7, #20]
 800a220:	409a      	lsls	r2, r3
 800a222:	69fb      	ldr	r3, [r7, #28]
 800a224:	4013      	ands	r3, r2
 800a226:	6a3a      	ldr	r2, [r7, #32]
 800a228:	4313      	orrs	r3, r2
 800a22a:	623b      	str	r3, [r7, #32]

      /* Set the break input polarity */
#if defined(DFSDM1_Channel0)
      if (sBreakInputConfig->Source != TIM_BREAKINPUTSOURCE_DFSDM1)
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	2b08      	cmp	r3, #8
 800a232:	d00d      	beq.n	800a250 <HAL_TIMEx_ConfigBreakInput+0x110>
#endif /* DFSDM1_Channel0 */
      {
        tmporx &= ~bkin_polarity_mask;
 800a234:	69bb      	ldr	r3, [r7, #24]
 800a236:	43db      	mvns	r3, r3
 800a238:	6a3a      	ldr	r2, [r7, #32]
 800a23a:	4013      	ands	r3, r2
 800a23c:	623b      	str	r3, [r7, #32]
        tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	689a      	ldr	r2, [r3, #8]
 800a242:	693b      	ldr	r3, [r7, #16]
 800a244:	409a      	lsls	r2, r3
 800a246:	69bb      	ldr	r3, [r7, #24]
 800a248:	4013      	ands	r3, r2
 800a24a:	6a3a      	ldr	r2, [r7, #32]
 800a24c:	4313      	orrs	r3, r2
 800a24e:	623b      	str	r3, [r7, #32]
      }

      /* Set TIMx_OR2 */
      htim->Instance->OR2 = tmporx;
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	6a3a      	ldr	r2, [r7, #32]
 800a256:	661a      	str	r2, [r3, #96]	; 0x60
      break;
 800a258:	e02c      	b.n	800a2b4 <HAL_TIMEx_ConfigBreakInput+0x174>
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_OR3 register value */
      tmporx = htim->Instance->OR3;
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a260:	623b      	str	r3, [r7, #32]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 800a262:	69fb      	ldr	r3, [r7, #28]
 800a264:	43db      	mvns	r3, r3
 800a266:	6a3a      	ldr	r2, [r7, #32]
 800a268:	4013      	ands	r3, r2
 800a26a:	623b      	str	r3, [r7, #32]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	685a      	ldr	r2, [r3, #4]
 800a270:	697b      	ldr	r3, [r7, #20]
 800a272:	409a      	lsls	r2, r3
 800a274:	69fb      	ldr	r3, [r7, #28]
 800a276:	4013      	ands	r3, r2
 800a278:	6a3a      	ldr	r2, [r7, #32]
 800a27a:	4313      	orrs	r3, r2
 800a27c:	623b      	str	r3, [r7, #32]

      /* Set the break input polarity */
#if defined(DFSDM1_Channel0)
      if (sBreakInputConfig->Source != TIM_BREAKINPUTSOURCE_DFSDM1)
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	2b08      	cmp	r3, #8
 800a284:	d00d      	beq.n	800a2a2 <HAL_TIMEx_ConfigBreakInput+0x162>
#endif /* DFSDM1_Channel0 */
      {
        tmporx &= ~bkin_polarity_mask;
 800a286:	69bb      	ldr	r3, [r7, #24]
 800a288:	43db      	mvns	r3, r3
 800a28a:	6a3a      	ldr	r2, [r7, #32]
 800a28c:	4013      	ands	r3, r2
 800a28e:	623b      	str	r3, [r7, #32]
        tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	689a      	ldr	r2, [r3, #8]
 800a294:	693b      	ldr	r3, [r7, #16]
 800a296:	409a      	lsls	r2, r3
 800a298:	69bb      	ldr	r3, [r7, #24]
 800a29a:	4013      	ands	r3, r2
 800a29c:	6a3a      	ldr	r2, [r7, #32]
 800a29e:	4313      	orrs	r3, r2
 800a2a0:	623b      	str	r3, [r7, #32]
      }

      /* Set TIMx_OR3 */
      htim->Instance->OR3 = tmporx;
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	6a3a      	ldr	r2, [r7, #32]
 800a2a8:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 800a2aa:	e003      	b.n	800a2b4 <HAL_TIMEx_ConfigBreakInput+0x174>
    }
    default:
      status = HAL_ERROR;
 800a2ac:	2301      	movs	r3, #1
 800a2ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800a2b2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a2bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	372c      	adds	r7, #44	; 0x2c
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ca:	4770      	bx	lr

0800a2cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a2cc:	b480      	push	{r7}
 800a2ce:	b083      	sub	sp, #12
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a2d4:	bf00      	nop
 800a2d6:	370c      	adds	r7, #12
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2de:	4770      	bx	lr

0800a2e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a2e0:	b480      	push	{r7}
 800a2e2:	b083      	sub	sp, #12
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a2e8:	bf00      	nop
 800a2ea:	370c      	adds	r7, #12
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f2:	4770      	bx	lr

0800a2f4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a2f4:	b480      	push	{r7}
 800a2f6:	b083      	sub	sp, #12
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a2fc:	bf00      	nop
 800a2fe:	370c      	adds	r7, #12
 800a300:	46bd      	mov	sp, r7
 800a302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a306:	4770      	bx	lr

0800a308 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b082      	sub	sp, #8
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d101      	bne.n	800a31a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a316:	2301      	movs	r3, #1
 800a318:	e042      	b.n	800a3a0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a320:	2b00      	cmp	r3, #0
 800a322:	d106      	bne.n	800a332 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2200      	movs	r2, #0
 800a328:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a32c:	6878      	ldr	r0, [r7, #4]
 800a32e:	f7f7 febd 	bl	80020ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	2224      	movs	r2, #36	; 0x24
 800a336:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	681a      	ldr	r2, [r3, #0]
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	f022 0201 	bic.w	r2, r2, #1
 800a348:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a34a:	6878      	ldr	r0, [r7, #4]
 800a34c:	f000 f82c 	bl	800a3a8 <UART_SetConfig>
 800a350:	4603      	mov	r3, r0
 800a352:	2b01      	cmp	r3, #1
 800a354:	d101      	bne.n	800a35a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a356:	2301      	movs	r3, #1
 800a358:	e022      	b.n	800a3a0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d002      	beq.n	800a368 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a362:	6878      	ldr	r0, [r7, #4]
 800a364:	f000 fb1c 	bl	800a9a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	685a      	ldr	r2, [r3, #4]
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a376:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	689a      	ldr	r2, [r3, #8]
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a386:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	681a      	ldr	r2, [r3, #0]
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	f042 0201 	orr.w	r2, r2, #1
 800a396:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a398:	6878      	ldr	r0, [r7, #4]
 800a39a:	f000 fba3 	bl	800aae4 <UART_CheckIdleState>
 800a39e:	4603      	mov	r3, r0
}
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	3708      	adds	r7, #8
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	bd80      	pop	{r7, pc}

0800a3a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a3a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a3ac:	b08c      	sub	sp, #48	; 0x30
 800a3ae:	af00      	add	r7, sp, #0
 800a3b0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a3b8:	697b      	ldr	r3, [r7, #20]
 800a3ba:	689a      	ldr	r2, [r3, #8]
 800a3bc:	697b      	ldr	r3, [r7, #20]
 800a3be:	691b      	ldr	r3, [r3, #16]
 800a3c0:	431a      	orrs	r2, r3
 800a3c2:	697b      	ldr	r3, [r7, #20]
 800a3c4:	695b      	ldr	r3, [r3, #20]
 800a3c6:	431a      	orrs	r2, r3
 800a3c8:	697b      	ldr	r3, [r7, #20]
 800a3ca:	69db      	ldr	r3, [r3, #28]
 800a3cc:	4313      	orrs	r3, r2
 800a3ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a3d0:	697b      	ldr	r3, [r7, #20]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	681a      	ldr	r2, [r3, #0]
 800a3d6:	4baa      	ldr	r3, [pc, #680]	; (800a680 <UART_SetConfig+0x2d8>)
 800a3d8:	4013      	ands	r3, r2
 800a3da:	697a      	ldr	r2, [r7, #20]
 800a3dc:	6812      	ldr	r2, [r2, #0]
 800a3de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a3e0:	430b      	orrs	r3, r1
 800a3e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a3e4:	697b      	ldr	r3, [r7, #20]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	685b      	ldr	r3, [r3, #4]
 800a3ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a3ee:	697b      	ldr	r3, [r7, #20]
 800a3f0:	68da      	ldr	r2, [r3, #12]
 800a3f2:	697b      	ldr	r3, [r7, #20]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	430a      	orrs	r2, r1
 800a3f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a3fa:	697b      	ldr	r3, [r7, #20]
 800a3fc:	699b      	ldr	r3, [r3, #24]
 800a3fe:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a400:	697b      	ldr	r3, [r7, #20]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	4a9f      	ldr	r2, [pc, #636]	; (800a684 <UART_SetConfig+0x2dc>)
 800a406:	4293      	cmp	r3, r2
 800a408:	d004      	beq.n	800a414 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a40a:	697b      	ldr	r3, [r7, #20]
 800a40c:	6a1b      	ldr	r3, [r3, #32]
 800a40e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a410:	4313      	orrs	r3, r2
 800a412:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a414:	697b      	ldr	r3, [r7, #20]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	689b      	ldr	r3, [r3, #8]
 800a41a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800a41e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800a422:	697a      	ldr	r2, [r7, #20]
 800a424:	6812      	ldr	r2, [r2, #0]
 800a426:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a428:	430b      	orrs	r3, r1
 800a42a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a42c:	697b      	ldr	r3, [r7, #20]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a432:	f023 010f 	bic.w	r1, r3, #15
 800a436:	697b      	ldr	r3, [r7, #20]
 800a438:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a43a:	697b      	ldr	r3, [r7, #20]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	430a      	orrs	r2, r1
 800a440:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a442:	697b      	ldr	r3, [r7, #20]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	4a90      	ldr	r2, [pc, #576]	; (800a688 <UART_SetConfig+0x2e0>)
 800a448:	4293      	cmp	r3, r2
 800a44a:	d125      	bne.n	800a498 <UART_SetConfig+0xf0>
 800a44c:	4b8f      	ldr	r3, [pc, #572]	; (800a68c <UART_SetConfig+0x2e4>)
 800a44e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a452:	f003 0303 	and.w	r3, r3, #3
 800a456:	2b03      	cmp	r3, #3
 800a458:	d81a      	bhi.n	800a490 <UART_SetConfig+0xe8>
 800a45a:	a201      	add	r2, pc, #4	; (adr r2, 800a460 <UART_SetConfig+0xb8>)
 800a45c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a460:	0800a471 	.word	0x0800a471
 800a464:	0800a481 	.word	0x0800a481
 800a468:	0800a479 	.word	0x0800a479
 800a46c:	0800a489 	.word	0x0800a489
 800a470:	2301      	movs	r3, #1
 800a472:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a476:	e116      	b.n	800a6a6 <UART_SetConfig+0x2fe>
 800a478:	2302      	movs	r3, #2
 800a47a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a47e:	e112      	b.n	800a6a6 <UART_SetConfig+0x2fe>
 800a480:	2304      	movs	r3, #4
 800a482:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a486:	e10e      	b.n	800a6a6 <UART_SetConfig+0x2fe>
 800a488:	2308      	movs	r3, #8
 800a48a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a48e:	e10a      	b.n	800a6a6 <UART_SetConfig+0x2fe>
 800a490:	2310      	movs	r3, #16
 800a492:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a496:	e106      	b.n	800a6a6 <UART_SetConfig+0x2fe>
 800a498:	697b      	ldr	r3, [r7, #20]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	4a7c      	ldr	r2, [pc, #496]	; (800a690 <UART_SetConfig+0x2e8>)
 800a49e:	4293      	cmp	r3, r2
 800a4a0:	d138      	bne.n	800a514 <UART_SetConfig+0x16c>
 800a4a2:	4b7a      	ldr	r3, [pc, #488]	; (800a68c <UART_SetConfig+0x2e4>)
 800a4a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4a8:	f003 030c 	and.w	r3, r3, #12
 800a4ac:	2b0c      	cmp	r3, #12
 800a4ae:	d82d      	bhi.n	800a50c <UART_SetConfig+0x164>
 800a4b0:	a201      	add	r2, pc, #4	; (adr r2, 800a4b8 <UART_SetConfig+0x110>)
 800a4b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4b6:	bf00      	nop
 800a4b8:	0800a4ed 	.word	0x0800a4ed
 800a4bc:	0800a50d 	.word	0x0800a50d
 800a4c0:	0800a50d 	.word	0x0800a50d
 800a4c4:	0800a50d 	.word	0x0800a50d
 800a4c8:	0800a4fd 	.word	0x0800a4fd
 800a4cc:	0800a50d 	.word	0x0800a50d
 800a4d0:	0800a50d 	.word	0x0800a50d
 800a4d4:	0800a50d 	.word	0x0800a50d
 800a4d8:	0800a4f5 	.word	0x0800a4f5
 800a4dc:	0800a50d 	.word	0x0800a50d
 800a4e0:	0800a50d 	.word	0x0800a50d
 800a4e4:	0800a50d 	.word	0x0800a50d
 800a4e8:	0800a505 	.word	0x0800a505
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a4f2:	e0d8      	b.n	800a6a6 <UART_SetConfig+0x2fe>
 800a4f4:	2302      	movs	r3, #2
 800a4f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a4fa:	e0d4      	b.n	800a6a6 <UART_SetConfig+0x2fe>
 800a4fc:	2304      	movs	r3, #4
 800a4fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a502:	e0d0      	b.n	800a6a6 <UART_SetConfig+0x2fe>
 800a504:	2308      	movs	r3, #8
 800a506:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a50a:	e0cc      	b.n	800a6a6 <UART_SetConfig+0x2fe>
 800a50c:	2310      	movs	r3, #16
 800a50e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a512:	e0c8      	b.n	800a6a6 <UART_SetConfig+0x2fe>
 800a514:	697b      	ldr	r3, [r7, #20]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	4a5e      	ldr	r2, [pc, #376]	; (800a694 <UART_SetConfig+0x2ec>)
 800a51a:	4293      	cmp	r3, r2
 800a51c:	d125      	bne.n	800a56a <UART_SetConfig+0x1c2>
 800a51e:	4b5b      	ldr	r3, [pc, #364]	; (800a68c <UART_SetConfig+0x2e4>)
 800a520:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a524:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a528:	2b30      	cmp	r3, #48	; 0x30
 800a52a:	d016      	beq.n	800a55a <UART_SetConfig+0x1b2>
 800a52c:	2b30      	cmp	r3, #48	; 0x30
 800a52e:	d818      	bhi.n	800a562 <UART_SetConfig+0x1ba>
 800a530:	2b20      	cmp	r3, #32
 800a532:	d00a      	beq.n	800a54a <UART_SetConfig+0x1a2>
 800a534:	2b20      	cmp	r3, #32
 800a536:	d814      	bhi.n	800a562 <UART_SetConfig+0x1ba>
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d002      	beq.n	800a542 <UART_SetConfig+0x19a>
 800a53c:	2b10      	cmp	r3, #16
 800a53e:	d008      	beq.n	800a552 <UART_SetConfig+0x1aa>
 800a540:	e00f      	b.n	800a562 <UART_SetConfig+0x1ba>
 800a542:	2300      	movs	r3, #0
 800a544:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a548:	e0ad      	b.n	800a6a6 <UART_SetConfig+0x2fe>
 800a54a:	2302      	movs	r3, #2
 800a54c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a550:	e0a9      	b.n	800a6a6 <UART_SetConfig+0x2fe>
 800a552:	2304      	movs	r3, #4
 800a554:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a558:	e0a5      	b.n	800a6a6 <UART_SetConfig+0x2fe>
 800a55a:	2308      	movs	r3, #8
 800a55c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a560:	e0a1      	b.n	800a6a6 <UART_SetConfig+0x2fe>
 800a562:	2310      	movs	r3, #16
 800a564:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a568:	e09d      	b.n	800a6a6 <UART_SetConfig+0x2fe>
 800a56a:	697b      	ldr	r3, [r7, #20]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	4a4a      	ldr	r2, [pc, #296]	; (800a698 <UART_SetConfig+0x2f0>)
 800a570:	4293      	cmp	r3, r2
 800a572:	d125      	bne.n	800a5c0 <UART_SetConfig+0x218>
 800a574:	4b45      	ldr	r3, [pc, #276]	; (800a68c <UART_SetConfig+0x2e4>)
 800a576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a57a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a57e:	2bc0      	cmp	r3, #192	; 0xc0
 800a580:	d016      	beq.n	800a5b0 <UART_SetConfig+0x208>
 800a582:	2bc0      	cmp	r3, #192	; 0xc0
 800a584:	d818      	bhi.n	800a5b8 <UART_SetConfig+0x210>
 800a586:	2b80      	cmp	r3, #128	; 0x80
 800a588:	d00a      	beq.n	800a5a0 <UART_SetConfig+0x1f8>
 800a58a:	2b80      	cmp	r3, #128	; 0x80
 800a58c:	d814      	bhi.n	800a5b8 <UART_SetConfig+0x210>
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d002      	beq.n	800a598 <UART_SetConfig+0x1f0>
 800a592:	2b40      	cmp	r3, #64	; 0x40
 800a594:	d008      	beq.n	800a5a8 <UART_SetConfig+0x200>
 800a596:	e00f      	b.n	800a5b8 <UART_SetConfig+0x210>
 800a598:	2300      	movs	r3, #0
 800a59a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a59e:	e082      	b.n	800a6a6 <UART_SetConfig+0x2fe>
 800a5a0:	2302      	movs	r3, #2
 800a5a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a5a6:	e07e      	b.n	800a6a6 <UART_SetConfig+0x2fe>
 800a5a8:	2304      	movs	r3, #4
 800a5aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a5ae:	e07a      	b.n	800a6a6 <UART_SetConfig+0x2fe>
 800a5b0:	2308      	movs	r3, #8
 800a5b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a5b6:	e076      	b.n	800a6a6 <UART_SetConfig+0x2fe>
 800a5b8:	2310      	movs	r3, #16
 800a5ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a5be:	e072      	b.n	800a6a6 <UART_SetConfig+0x2fe>
 800a5c0:	697b      	ldr	r3, [r7, #20]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	4a35      	ldr	r2, [pc, #212]	; (800a69c <UART_SetConfig+0x2f4>)
 800a5c6:	4293      	cmp	r3, r2
 800a5c8:	d12a      	bne.n	800a620 <UART_SetConfig+0x278>
 800a5ca:	4b30      	ldr	r3, [pc, #192]	; (800a68c <UART_SetConfig+0x2e4>)
 800a5cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a5d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a5d8:	d01a      	beq.n	800a610 <UART_SetConfig+0x268>
 800a5da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a5de:	d81b      	bhi.n	800a618 <UART_SetConfig+0x270>
 800a5e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a5e4:	d00c      	beq.n	800a600 <UART_SetConfig+0x258>
 800a5e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a5ea:	d815      	bhi.n	800a618 <UART_SetConfig+0x270>
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d003      	beq.n	800a5f8 <UART_SetConfig+0x250>
 800a5f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a5f4:	d008      	beq.n	800a608 <UART_SetConfig+0x260>
 800a5f6:	e00f      	b.n	800a618 <UART_SetConfig+0x270>
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a5fe:	e052      	b.n	800a6a6 <UART_SetConfig+0x2fe>
 800a600:	2302      	movs	r3, #2
 800a602:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a606:	e04e      	b.n	800a6a6 <UART_SetConfig+0x2fe>
 800a608:	2304      	movs	r3, #4
 800a60a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a60e:	e04a      	b.n	800a6a6 <UART_SetConfig+0x2fe>
 800a610:	2308      	movs	r3, #8
 800a612:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a616:	e046      	b.n	800a6a6 <UART_SetConfig+0x2fe>
 800a618:	2310      	movs	r3, #16
 800a61a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a61e:	e042      	b.n	800a6a6 <UART_SetConfig+0x2fe>
 800a620:	697b      	ldr	r3, [r7, #20]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	4a17      	ldr	r2, [pc, #92]	; (800a684 <UART_SetConfig+0x2dc>)
 800a626:	4293      	cmp	r3, r2
 800a628:	d13a      	bne.n	800a6a0 <UART_SetConfig+0x2f8>
 800a62a:	4b18      	ldr	r3, [pc, #96]	; (800a68c <UART_SetConfig+0x2e4>)
 800a62c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a630:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a634:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a638:	d01a      	beq.n	800a670 <UART_SetConfig+0x2c8>
 800a63a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a63e:	d81b      	bhi.n	800a678 <UART_SetConfig+0x2d0>
 800a640:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a644:	d00c      	beq.n	800a660 <UART_SetConfig+0x2b8>
 800a646:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a64a:	d815      	bhi.n	800a678 <UART_SetConfig+0x2d0>
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d003      	beq.n	800a658 <UART_SetConfig+0x2b0>
 800a650:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a654:	d008      	beq.n	800a668 <UART_SetConfig+0x2c0>
 800a656:	e00f      	b.n	800a678 <UART_SetConfig+0x2d0>
 800a658:	2300      	movs	r3, #0
 800a65a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a65e:	e022      	b.n	800a6a6 <UART_SetConfig+0x2fe>
 800a660:	2302      	movs	r3, #2
 800a662:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a666:	e01e      	b.n	800a6a6 <UART_SetConfig+0x2fe>
 800a668:	2304      	movs	r3, #4
 800a66a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a66e:	e01a      	b.n	800a6a6 <UART_SetConfig+0x2fe>
 800a670:	2308      	movs	r3, #8
 800a672:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a676:	e016      	b.n	800a6a6 <UART_SetConfig+0x2fe>
 800a678:	2310      	movs	r3, #16
 800a67a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a67e:	e012      	b.n	800a6a6 <UART_SetConfig+0x2fe>
 800a680:	cfff69f3 	.word	0xcfff69f3
 800a684:	40008000 	.word	0x40008000
 800a688:	40013800 	.word	0x40013800
 800a68c:	40021000 	.word	0x40021000
 800a690:	40004400 	.word	0x40004400
 800a694:	40004800 	.word	0x40004800
 800a698:	40004c00 	.word	0x40004c00
 800a69c:	40005000 	.word	0x40005000
 800a6a0:	2310      	movs	r3, #16
 800a6a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a6a6:	697b      	ldr	r3, [r7, #20]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	4aae      	ldr	r2, [pc, #696]	; (800a964 <UART_SetConfig+0x5bc>)
 800a6ac:	4293      	cmp	r3, r2
 800a6ae:	f040 8097 	bne.w	800a7e0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a6b2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a6b6:	2b08      	cmp	r3, #8
 800a6b8:	d823      	bhi.n	800a702 <UART_SetConfig+0x35a>
 800a6ba:	a201      	add	r2, pc, #4	; (adr r2, 800a6c0 <UART_SetConfig+0x318>)
 800a6bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6c0:	0800a6e5 	.word	0x0800a6e5
 800a6c4:	0800a703 	.word	0x0800a703
 800a6c8:	0800a6ed 	.word	0x0800a6ed
 800a6cc:	0800a703 	.word	0x0800a703
 800a6d0:	0800a6f3 	.word	0x0800a6f3
 800a6d4:	0800a703 	.word	0x0800a703
 800a6d8:	0800a703 	.word	0x0800a703
 800a6dc:	0800a703 	.word	0x0800a703
 800a6e0:	0800a6fb 	.word	0x0800a6fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a6e4:	f7fa fdc4 	bl	8005270 <HAL_RCC_GetPCLK1Freq>
 800a6e8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a6ea:	e010      	b.n	800a70e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a6ec:	4b9e      	ldr	r3, [pc, #632]	; (800a968 <UART_SetConfig+0x5c0>)
 800a6ee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a6f0:	e00d      	b.n	800a70e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a6f2:	f7fa fd25 	bl	8005140 <HAL_RCC_GetSysClockFreq>
 800a6f6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a6f8:	e009      	b.n	800a70e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a6fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a6fe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a700:	e005      	b.n	800a70e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800a702:	2300      	movs	r3, #0
 800a704:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800a706:	2301      	movs	r3, #1
 800a708:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800a70c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a70e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a710:	2b00      	cmp	r3, #0
 800a712:	f000 8130 	beq.w	800a976 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a716:	697b      	ldr	r3, [r7, #20]
 800a718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a71a:	4a94      	ldr	r2, [pc, #592]	; (800a96c <UART_SetConfig+0x5c4>)
 800a71c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a720:	461a      	mov	r2, r3
 800a722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a724:	fbb3 f3f2 	udiv	r3, r3, r2
 800a728:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a72a:	697b      	ldr	r3, [r7, #20]
 800a72c:	685a      	ldr	r2, [r3, #4]
 800a72e:	4613      	mov	r3, r2
 800a730:	005b      	lsls	r3, r3, #1
 800a732:	4413      	add	r3, r2
 800a734:	69ba      	ldr	r2, [r7, #24]
 800a736:	429a      	cmp	r2, r3
 800a738:	d305      	bcc.n	800a746 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a73a:	697b      	ldr	r3, [r7, #20]
 800a73c:	685b      	ldr	r3, [r3, #4]
 800a73e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a740:	69ba      	ldr	r2, [r7, #24]
 800a742:	429a      	cmp	r2, r3
 800a744:	d903      	bls.n	800a74e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800a746:	2301      	movs	r3, #1
 800a748:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a74c:	e113      	b.n	800a976 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a74e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a750:	2200      	movs	r2, #0
 800a752:	60bb      	str	r3, [r7, #8]
 800a754:	60fa      	str	r2, [r7, #12]
 800a756:	697b      	ldr	r3, [r7, #20]
 800a758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a75a:	4a84      	ldr	r2, [pc, #528]	; (800a96c <UART_SetConfig+0x5c4>)
 800a75c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a760:	b29b      	uxth	r3, r3
 800a762:	2200      	movs	r2, #0
 800a764:	603b      	str	r3, [r7, #0]
 800a766:	607a      	str	r2, [r7, #4]
 800a768:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a76c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a770:	f7f5 fd44 	bl	80001fc <__aeabi_uldivmod>
 800a774:	4602      	mov	r2, r0
 800a776:	460b      	mov	r3, r1
 800a778:	4610      	mov	r0, r2
 800a77a:	4619      	mov	r1, r3
 800a77c:	f04f 0200 	mov.w	r2, #0
 800a780:	f04f 0300 	mov.w	r3, #0
 800a784:	020b      	lsls	r3, r1, #8
 800a786:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a78a:	0202      	lsls	r2, r0, #8
 800a78c:	6979      	ldr	r1, [r7, #20]
 800a78e:	6849      	ldr	r1, [r1, #4]
 800a790:	0849      	lsrs	r1, r1, #1
 800a792:	2000      	movs	r0, #0
 800a794:	460c      	mov	r4, r1
 800a796:	4605      	mov	r5, r0
 800a798:	eb12 0804 	adds.w	r8, r2, r4
 800a79c:	eb43 0905 	adc.w	r9, r3, r5
 800a7a0:	697b      	ldr	r3, [r7, #20]
 800a7a2:	685b      	ldr	r3, [r3, #4]
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	469a      	mov	sl, r3
 800a7a8:	4693      	mov	fp, r2
 800a7aa:	4652      	mov	r2, sl
 800a7ac:	465b      	mov	r3, fp
 800a7ae:	4640      	mov	r0, r8
 800a7b0:	4649      	mov	r1, r9
 800a7b2:	f7f5 fd23 	bl	80001fc <__aeabi_uldivmod>
 800a7b6:	4602      	mov	r2, r0
 800a7b8:	460b      	mov	r3, r1
 800a7ba:	4613      	mov	r3, r2
 800a7bc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a7be:	6a3b      	ldr	r3, [r7, #32]
 800a7c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a7c4:	d308      	bcc.n	800a7d8 <UART_SetConfig+0x430>
 800a7c6:	6a3b      	ldr	r3, [r7, #32]
 800a7c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a7cc:	d204      	bcs.n	800a7d8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800a7ce:	697b      	ldr	r3, [r7, #20]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	6a3a      	ldr	r2, [r7, #32]
 800a7d4:	60da      	str	r2, [r3, #12]
 800a7d6:	e0ce      	b.n	800a976 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800a7d8:	2301      	movs	r3, #1
 800a7da:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a7de:	e0ca      	b.n	800a976 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a7e0:	697b      	ldr	r3, [r7, #20]
 800a7e2:	69db      	ldr	r3, [r3, #28]
 800a7e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a7e8:	d166      	bne.n	800a8b8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800a7ea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a7ee:	2b08      	cmp	r3, #8
 800a7f0:	d827      	bhi.n	800a842 <UART_SetConfig+0x49a>
 800a7f2:	a201      	add	r2, pc, #4	; (adr r2, 800a7f8 <UART_SetConfig+0x450>)
 800a7f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7f8:	0800a81d 	.word	0x0800a81d
 800a7fc:	0800a825 	.word	0x0800a825
 800a800:	0800a82d 	.word	0x0800a82d
 800a804:	0800a843 	.word	0x0800a843
 800a808:	0800a833 	.word	0x0800a833
 800a80c:	0800a843 	.word	0x0800a843
 800a810:	0800a843 	.word	0x0800a843
 800a814:	0800a843 	.word	0x0800a843
 800a818:	0800a83b 	.word	0x0800a83b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a81c:	f7fa fd28 	bl	8005270 <HAL_RCC_GetPCLK1Freq>
 800a820:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a822:	e014      	b.n	800a84e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a824:	f7fa fd3a 	bl	800529c <HAL_RCC_GetPCLK2Freq>
 800a828:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a82a:	e010      	b.n	800a84e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a82c:	4b4e      	ldr	r3, [pc, #312]	; (800a968 <UART_SetConfig+0x5c0>)
 800a82e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a830:	e00d      	b.n	800a84e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a832:	f7fa fc85 	bl	8005140 <HAL_RCC_GetSysClockFreq>
 800a836:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a838:	e009      	b.n	800a84e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a83a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a83e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a840:	e005      	b.n	800a84e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800a842:	2300      	movs	r3, #0
 800a844:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800a846:	2301      	movs	r3, #1
 800a848:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800a84c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a84e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a850:	2b00      	cmp	r3, #0
 800a852:	f000 8090 	beq.w	800a976 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a856:	697b      	ldr	r3, [r7, #20]
 800a858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a85a:	4a44      	ldr	r2, [pc, #272]	; (800a96c <UART_SetConfig+0x5c4>)
 800a85c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a860:	461a      	mov	r2, r3
 800a862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a864:	fbb3 f3f2 	udiv	r3, r3, r2
 800a868:	005a      	lsls	r2, r3, #1
 800a86a:	697b      	ldr	r3, [r7, #20]
 800a86c:	685b      	ldr	r3, [r3, #4]
 800a86e:	085b      	lsrs	r3, r3, #1
 800a870:	441a      	add	r2, r3
 800a872:	697b      	ldr	r3, [r7, #20]
 800a874:	685b      	ldr	r3, [r3, #4]
 800a876:	fbb2 f3f3 	udiv	r3, r2, r3
 800a87a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a87c:	6a3b      	ldr	r3, [r7, #32]
 800a87e:	2b0f      	cmp	r3, #15
 800a880:	d916      	bls.n	800a8b0 <UART_SetConfig+0x508>
 800a882:	6a3b      	ldr	r3, [r7, #32]
 800a884:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a888:	d212      	bcs.n	800a8b0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a88a:	6a3b      	ldr	r3, [r7, #32]
 800a88c:	b29b      	uxth	r3, r3
 800a88e:	f023 030f 	bic.w	r3, r3, #15
 800a892:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a894:	6a3b      	ldr	r3, [r7, #32]
 800a896:	085b      	lsrs	r3, r3, #1
 800a898:	b29b      	uxth	r3, r3
 800a89a:	f003 0307 	and.w	r3, r3, #7
 800a89e:	b29a      	uxth	r2, r3
 800a8a0:	8bfb      	ldrh	r3, [r7, #30]
 800a8a2:	4313      	orrs	r3, r2
 800a8a4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a8a6:	697b      	ldr	r3, [r7, #20]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	8bfa      	ldrh	r2, [r7, #30]
 800a8ac:	60da      	str	r2, [r3, #12]
 800a8ae:	e062      	b.n	800a976 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800a8b0:	2301      	movs	r3, #1
 800a8b2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a8b6:	e05e      	b.n	800a976 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a8b8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a8bc:	2b08      	cmp	r3, #8
 800a8be:	d828      	bhi.n	800a912 <UART_SetConfig+0x56a>
 800a8c0:	a201      	add	r2, pc, #4	; (adr r2, 800a8c8 <UART_SetConfig+0x520>)
 800a8c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8c6:	bf00      	nop
 800a8c8:	0800a8ed 	.word	0x0800a8ed
 800a8cc:	0800a8f5 	.word	0x0800a8f5
 800a8d0:	0800a8fd 	.word	0x0800a8fd
 800a8d4:	0800a913 	.word	0x0800a913
 800a8d8:	0800a903 	.word	0x0800a903
 800a8dc:	0800a913 	.word	0x0800a913
 800a8e0:	0800a913 	.word	0x0800a913
 800a8e4:	0800a913 	.word	0x0800a913
 800a8e8:	0800a90b 	.word	0x0800a90b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a8ec:	f7fa fcc0 	bl	8005270 <HAL_RCC_GetPCLK1Freq>
 800a8f0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a8f2:	e014      	b.n	800a91e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a8f4:	f7fa fcd2 	bl	800529c <HAL_RCC_GetPCLK2Freq>
 800a8f8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a8fa:	e010      	b.n	800a91e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a8fc:	4b1a      	ldr	r3, [pc, #104]	; (800a968 <UART_SetConfig+0x5c0>)
 800a8fe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a900:	e00d      	b.n	800a91e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a902:	f7fa fc1d 	bl	8005140 <HAL_RCC_GetSysClockFreq>
 800a906:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a908:	e009      	b.n	800a91e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a90a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a90e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a910:	e005      	b.n	800a91e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800a912:	2300      	movs	r3, #0
 800a914:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800a916:	2301      	movs	r3, #1
 800a918:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800a91c:	bf00      	nop
    }

    if (pclk != 0U)
 800a91e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a920:	2b00      	cmp	r3, #0
 800a922:	d028      	beq.n	800a976 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a924:	697b      	ldr	r3, [r7, #20]
 800a926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a928:	4a10      	ldr	r2, [pc, #64]	; (800a96c <UART_SetConfig+0x5c4>)
 800a92a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a92e:	461a      	mov	r2, r3
 800a930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a932:	fbb3 f2f2 	udiv	r2, r3, r2
 800a936:	697b      	ldr	r3, [r7, #20]
 800a938:	685b      	ldr	r3, [r3, #4]
 800a93a:	085b      	lsrs	r3, r3, #1
 800a93c:	441a      	add	r2, r3
 800a93e:	697b      	ldr	r3, [r7, #20]
 800a940:	685b      	ldr	r3, [r3, #4]
 800a942:	fbb2 f3f3 	udiv	r3, r2, r3
 800a946:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a948:	6a3b      	ldr	r3, [r7, #32]
 800a94a:	2b0f      	cmp	r3, #15
 800a94c:	d910      	bls.n	800a970 <UART_SetConfig+0x5c8>
 800a94e:	6a3b      	ldr	r3, [r7, #32]
 800a950:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a954:	d20c      	bcs.n	800a970 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a956:	6a3b      	ldr	r3, [r7, #32]
 800a958:	b29a      	uxth	r2, r3
 800a95a:	697b      	ldr	r3, [r7, #20]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	60da      	str	r2, [r3, #12]
 800a960:	e009      	b.n	800a976 <UART_SetConfig+0x5ce>
 800a962:	bf00      	nop
 800a964:	40008000 	.word	0x40008000
 800a968:	00f42400 	.word	0x00f42400
 800a96c:	0800b148 	.word	0x0800b148
      }
      else
      {
        ret = HAL_ERROR;
 800a970:	2301      	movs	r3, #1
 800a972:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a976:	697b      	ldr	r3, [r7, #20]
 800a978:	2201      	movs	r2, #1
 800a97a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a97e:	697b      	ldr	r3, [r7, #20]
 800a980:	2201      	movs	r2, #1
 800a982:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a986:	697b      	ldr	r3, [r7, #20]
 800a988:	2200      	movs	r2, #0
 800a98a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800a98c:	697b      	ldr	r3, [r7, #20]
 800a98e:	2200      	movs	r2, #0
 800a990:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800a992:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800a996:	4618      	mov	r0, r3
 800a998:	3730      	adds	r7, #48	; 0x30
 800a99a:	46bd      	mov	sp, r7
 800a99c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800a9a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a9a0:	b480      	push	{r7}
 800a9a2:	b083      	sub	sp, #12
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9ac:	f003 0301 	and.w	r3, r3, #1
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d00a      	beq.n	800a9ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	685b      	ldr	r3, [r3, #4]
 800a9ba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	430a      	orrs	r2, r1
 800a9c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9ce:	f003 0302 	and.w	r3, r3, #2
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d00a      	beq.n	800a9ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	685b      	ldr	r3, [r3, #4]
 800a9dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	430a      	orrs	r2, r1
 800a9ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9f0:	f003 0304 	and.w	r3, r3, #4
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d00a      	beq.n	800aa0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	685b      	ldr	r3, [r3, #4]
 800a9fe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	430a      	orrs	r2, r1
 800aa0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa12:	f003 0308 	and.w	r3, r3, #8
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d00a      	beq.n	800aa30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	685b      	ldr	r3, [r3, #4]
 800aa20:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	430a      	orrs	r2, r1
 800aa2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa34:	f003 0310 	and.w	r3, r3, #16
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d00a      	beq.n	800aa52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	689b      	ldr	r3, [r3, #8]
 800aa42:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	430a      	orrs	r2, r1
 800aa50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa56:	f003 0320 	and.w	r3, r3, #32
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d00a      	beq.n	800aa74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	689b      	ldr	r3, [r3, #8]
 800aa64:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	430a      	orrs	r2, r1
 800aa72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d01a      	beq.n	800aab6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	685b      	ldr	r3, [r3, #4]
 800aa86:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	430a      	orrs	r2, r1
 800aa94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aa9e:	d10a      	bne.n	800aab6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	685b      	ldr	r3, [r3, #4]
 800aaa6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	430a      	orrs	r2, r1
 800aab4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aaba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d00a      	beq.n	800aad8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	685b      	ldr	r3, [r3, #4]
 800aac8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	430a      	orrs	r2, r1
 800aad6:	605a      	str	r2, [r3, #4]
  }
}
 800aad8:	bf00      	nop
 800aada:	370c      	adds	r7, #12
 800aadc:	46bd      	mov	sp, r7
 800aade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae2:	4770      	bx	lr

0800aae4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b086      	sub	sp, #24
 800aae8:	af02      	add	r7, sp, #8
 800aaea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	2200      	movs	r2, #0
 800aaf0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800aaf4:	f7f8 f850 	bl	8002b98 <HAL_GetTick>
 800aaf8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	f003 0308 	and.w	r3, r3, #8
 800ab04:	2b08      	cmp	r3, #8
 800ab06:	d10e      	bne.n	800ab26 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ab08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ab0c:	9300      	str	r3, [sp, #0]
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	2200      	movs	r2, #0
 800ab12:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ab16:	6878      	ldr	r0, [r7, #4]
 800ab18:	f000 f82f 	bl	800ab7a <UART_WaitOnFlagUntilTimeout>
 800ab1c:	4603      	mov	r3, r0
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d001      	beq.n	800ab26 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ab22:	2303      	movs	r3, #3
 800ab24:	e025      	b.n	800ab72 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	f003 0304 	and.w	r3, r3, #4
 800ab30:	2b04      	cmp	r3, #4
 800ab32:	d10e      	bne.n	800ab52 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ab34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ab38:	9300      	str	r3, [sp, #0]
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ab42:	6878      	ldr	r0, [r7, #4]
 800ab44:	f000 f819 	bl	800ab7a <UART_WaitOnFlagUntilTimeout>
 800ab48:	4603      	mov	r3, r0
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d001      	beq.n	800ab52 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ab4e:	2303      	movs	r3, #3
 800ab50:	e00f      	b.n	800ab72 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	2220      	movs	r2, #32
 800ab56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	2220      	movs	r2, #32
 800ab5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	2200      	movs	r2, #0
 800ab66:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ab70:	2300      	movs	r3, #0
}
 800ab72:	4618      	mov	r0, r3
 800ab74:	3710      	adds	r7, #16
 800ab76:	46bd      	mov	sp, r7
 800ab78:	bd80      	pop	{r7, pc}

0800ab7a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ab7a:	b580      	push	{r7, lr}
 800ab7c:	b09c      	sub	sp, #112	; 0x70
 800ab7e:	af00      	add	r7, sp, #0
 800ab80:	60f8      	str	r0, [r7, #12]
 800ab82:	60b9      	str	r1, [r7, #8]
 800ab84:	603b      	str	r3, [r7, #0]
 800ab86:	4613      	mov	r3, r2
 800ab88:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ab8a:	e0a9      	b.n	800ace0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ab8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ab8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ab92:	f000 80a5 	beq.w	800ace0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ab96:	f7f7 ffff 	bl	8002b98 <HAL_GetTick>
 800ab9a:	4602      	mov	r2, r0
 800ab9c:	683b      	ldr	r3, [r7, #0]
 800ab9e:	1ad3      	subs	r3, r2, r3
 800aba0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800aba2:	429a      	cmp	r2, r3
 800aba4:	d302      	bcc.n	800abac <UART_WaitOnFlagUntilTimeout+0x32>
 800aba6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d140      	bne.n	800ac2e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800abb4:	e853 3f00 	ldrex	r3, [r3]
 800abb8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800abba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800abbc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800abc0:	667b      	str	r3, [r7, #100]	; 0x64
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	461a      	mov	r2, r3
 800abc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800abca:	65fb      	str	r3, [r7, #92]	; 0x5c
 800abcc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800abd0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800abd2:	e841 2300 	strex	r3, r2, [r1]
 800abd6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800abd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d1e6      	bne.n	800abac <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	3308      	adds	r3, #8
 800abe4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abe6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abe8:	e853 3f00 	ldrex	r3, [r3]
 800abec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800abee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abf0:	f023 0301 	bic.w	r3, r3, #1
 800abf4:	663b      	str	r3, [r7, #96]	; 0x60
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	3308      	adds	r3, #8
 800abfc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800abfe:	64ba      	str	r2, [r7, #72]	; 0x48
 800ac00:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac02:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ac04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ac06:	e841 2300 	strex	r3, r2, [r1]
 800ac0a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ac0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d1e5      	bne.n	800abde <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	2220      	movs	r2, #32
 800ac16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	2220      	movs	r2, #32
 800ac1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	2200      	movs	r2, #0
 800ac26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800ac2a:	2303      	movs	r3, #3
 800ac2c:	e069      	b.n	800ad02 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	f003 0304 	and.w	r3, r3, #4
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d051      	beq.n	800ace0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	69db      	ldr	r3, [r3, #28]
 800ac42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ac46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ac4a:	d149      	bne.n	800ace0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ac54:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac5e:	e853 3f00 	ldrex	r3, [r3]
 800ac62:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ac64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac66:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ac6a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	461a      	mov	r2, r3
 800ac72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac74:	637b      	str	r3, [r7, #52]	; 0x34
 800ac76:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac78:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ac7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ac7c:	e841 2300 	strex	r3, r2, [r1]
 800ac80:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ac82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d1e6      	bne.n	800ac56 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	3308      	adds	r3, #8
 800ac8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac90:	697b      	ldr	r3, [r7, #20]
 800ac92:	e853 3f00 	ldrex	r3, [r3]
 800ac96:	613b      	str	r3, [r7, #16]
   return(result);
 800ac98:	693b      	ldr	r3, [r7, #16]
 800ac9a:	f023 0301 	bic.w	r3, r3, #1
 800ac9e:	66bb      	str	r3, [r7, #104]	; 0x68
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	3308      	adds	r3, #8
 800aca6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800aca8:	623a      	str	r2, [r7, #32]
 800acaa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acac:	69f9      	ldr	r1, [r7, #28]
 800acae:	6a3a      	ldr	r2, [r7, #32]
 800acb0:	e841 2300 	strex	r3, r2, [r1]
 800acb4:	61bb      	str	r3, [r7, #24]
   return(result);
 800acb6:	69bb      	ldr	r3, [r7, #24]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d1e5      	bne.n	800ac88 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	2220      	movs	r2, #32
 800acc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	2220      	movs	r2, #32
 800acc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	2220      	movs	r2, #32
 800acd0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	2200      	movs	r2, #0
 800acd8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800acdc:	2303      	movs	r3, #3
 800acde:	e010      	b.n	800ad02 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	69da      	ldr	r2, [r3, #28]
 800ace6:	68bb      	ldr	r3, [r7, #8]
 800ace8:	4013      	ands	r3, r2
 800acea:	68ba      	ldr	r2, [r7, #8]
 800acec:	429a      	cmp	r2, r3
 800acee:	bf0c      	ite	eq
 800acf0:	2301      	moveq	r3, #1
 800acf2:	2300      	movne	r3, #0
 800acf4:	b2db      	uxtb	r3, r3
 800acf6:	461a      	mov	r2, r3
 800acf8:	79fb      	ldrb	r3, [r7, #7]
 800acfa:	429a      	cmp	r2, r3
 800acfc:	f43f af46 	beq.w	800ab8c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ad00:	2300      	movs	r3, #0
}
 800ad02:	4618      	mov	r0, r3
 800ad04:	3770      	adds	r7, #112	; 0x70
 800ad06:	46bd      	mov	sp, r7
 800ad08:	bd80      	pop	{r7, pc}

0800ad0a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ad0a:	b480      	push	{r7}
 800ad0c:	b085      	sub	sp, #20
 800ad0e:	af00      	add	r7, sp, #0
 800ad10:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ad18:	2b01      	cmp	r3, #1
 800ad1a:	d101      	bne.n	800ad20 <HAL_UARTEx_DisableFifoMode+0x16>
 800ad1c:	2302      	movs	r3, #2
 800ad1e:	e027      	b.n	800ad70 <HAL_UARTEx_DisableFifoMode+0x66>
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	2201      	movs	r2, #1
 800ad24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	2224      	movs	r2, #36	; 0x24
 800ad2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	681a      	ldr	r2, [r3, #0]
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	f022 0201 	bic.w	r2, r2, #1
 800ad46:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ad4e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	2200      	movs	r2, #0
 800ad54:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	68fa      	ldr	r2, [r7, #12]
 800ad5c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	2220      	movs	r2, #32
 800ad62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	2200      	movs	r2, #0
 800ad6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ad6e:	2300      	movs	r3, #0
}
 800ad70:	4618      	mov	r0, r3
 800ad72:	3714      	adds	r7, #20
 800ad74:	46bd      	mov	sp, r7
 800ad76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7a:	4770      	bx	lr

0800ad7c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b084      	sub	sp, #16
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
 800ad84:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ad8c:	2b01      	cmp	r3, #1
 800ad8e:	d101      	bne.n	800ad94 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ad90:	2302      	movs	r3, #2
 800ad92:	e02d      	b.n	800adf0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	2201      	movs	r2, #1
 800ad98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	2224      	movs	r2, #36	; 0x24
 800ada0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	681a      	ldr	r2, [r3, #0]
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	f022 0201 	bic.w	r2, r2, #1
 800adba:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	689b      	ldr	r3, [r3, #8]
 800adc2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	683a      	ldr	r2, [r7, #0]
 800adcc:	430a      	orrs	r2, r1
 800adce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800add0:	6878      	ldr	r0, [r7, #4]
 800add2:	f000 f84f 	bl	800ae74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	68fa      	ldr	r2, [r7, #12]
 800addc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	2220      	movs	r2, #32
 800ade2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	2200      	movs	r2, #0
 800adea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800adee:	2300      	movs	r3, #0
}
 800adf0:	4618      	mov	r0, r3
 800adf2:	3710      	adds	r7, #16
 800adf4:	46bd      	mov	sp, r7
 800adf6:	bd80      	pop	{r7, pc}

0800adf8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b084      	sub	sp, #16
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
 800ae00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ae08:	2b01      	cmp	r3, #1
 800ae0a:	d101      	bne.n	800ae10 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ae0c:	2302      	movs	r3, #2
 800ae0e:	e02d      	b.n	800ae6c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	2201      	movs	r2, #1
 800ae14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	2224      	movs	r2, #36	; 0x24
 800ae1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	681a      	ldr	r2, [r3, #0]
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	f022 0201 	bic.w	r2, r2, #1
 800ae36:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	689b      	ldr	r3, [r3, #8]
 800ae3e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	683a      	ldr	r2, [r7, #0]
 800ae48:	430a      	orrs	r2, r1
 800ae4a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ae4c:	6878      	ldr	r0, [r7, #4]
 800ae4e:	f000 f811 	bl	800ae74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	68fa      	ldr	r2, [r7, #12]
 800ae58:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	2220      	movs	r2, #32
 800ae5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	2200      	movs	r2, #0
 800ae66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ae6a:	2300      	movs	r3, #0
}
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	3710      	adds	r7, #16
 800ae70:	46bd      	mov	sp, r7
 800ae72:	bd80      	pop	{r7, pc}

0800ae74 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ae74:	b480      	push	{r7}
 800ae76:	b085      	sub	sp, #20
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d108      	bne.n	800ae96 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	2201      	movs	r2, #1
 800ae88:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	2201      	movs	r2, #1
 800ae90:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ae94:	e031      	b.n	800aefa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ae96:	2308      	movs	r3, #8
 800ae98:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ae9a:	2308      	movs	r3, #8
 800ae9c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	689b      	ldr	r3, [r3, #8]
 800aea4:	0e5b      	lsrs	r3, r3, #25
 800aea6:	b2db      	uxtb	r3, r3
 800aea8:	f003 0307 	and.w	r3, r3, #7
 800aeac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	689b      	ldr	r3, [r3, #8]
 800aeb4:	0f5b      	lsrs	r3, r3, #29
 800aeb6:	b2db      	uxtb	r3, r3
 800aeb8:	f003 0307 	and.w	r3, r3, #7
 800aebc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aebe:	7bbb      	ldrb	r3, [r7, #14]
 800aec0:	7b3a      	ldrb	r2, [r7, #12]
 800aec2:	4911      	ldr	r1, [pc, #68]	; (800af08 <UARTEx_SetNbDataToProcess+0x94>)
 800aec4:	5c8a      	ldrb	r2, [r1, r2]
 800aec6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800aeca:	7b3a      	ldrb	r2, [r7, #12]
 800aecc:	490f      	ldr	r1, [pc, #60]	; (800af0c <UARTEx_SetNbDataToProcess+0x98>)
 800aece:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aed0:	fb93 f3f2 	sdiv	r3, r3, r2
 800aed4:	b29a      	uxth	r2, r3
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aedc:	7bfb      	ldrb	r3, [r7, #15]
 800aede:	7b7a      	ldrb	r2, [r7, #13]
 800aee0:	4909      	ldr	r1, [pc, #36]	; (800af08 <UARTEx_SetNbDataToProcess+0x94>)
 800aee2:	5c8a      	ldrb	r2, [r1, r2]
 800aee4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800aee8:	7b7a      	ldrb	r2, [r7, #13]
 800aeea:	4908      	ldr	r1, [pc, #32]	; (800af0c <UARTEx_SetNbDataToProcess+0x98>)
 800aeec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aeee:	fb93 f3f2 	sdiv	r3, r3, r2
 800aef2:	b29a      	uxth	r2, r3
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800aefa:	bf00      	nop
 800aefc:	3714      	adds	r7, #20
 800aefe:	46bd      	mov	sp, r7
 800af00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af04:	4770      	bx	lr
 800af06:	bf00      	nop
 800af08:	0800b160 	.word	0x0800b160
 800af0c:	0800b168 	.word	0x0800b168

0800af10 <__errno>:
 800af10:	4b01      	ldr	r3, [pc, #4]	; (800af18 <__errno+0x8>)
 800af12:	6818      	ldr	r0, [r3, #0]
 800af14:	4770      	bx	lr
 800af16:	bf00      	nop
 800af18:	20000010 	.word	0x20000010

0800af1c <__libc_init_array>:
 800af1c:	b570      	push	{r4, r5, r6, lr}
 800af1e:	4d0d      	ldr	r5, [pc, #52]	; (800af54 <__libc_init_array+0x38>)
 800af20:	4c0d      	ldr	r4, [pc, #52]	; (800af58 <__libc_init_array+0x3c>)
 800af22:	1b64      	subs	r4, r4, r5
 800af24:	10a4      	asrs	r4, r4, #2
 800af26:	2600      	movs	r6, #0
 800af28:	42a6      	cmp	r6, r4
 800af2a:	d109      	bne.n	800af40 <__libc_init_array+0x24>
 800af2c:	4d0b      	ldr	r5, [pc, #44]	; (800af5c <__libc_init_array+0x40>)
 800af2e:	4c0c      	ldr	r4, [pc, #48]	; (800af60 <__libc_init_array+0x44>)
 800af30:	f000 f8da 	bl	800b0e8 <_init>
 800af34:	1b64      	subs	r4, r4, r5
 800af36:	10a4      	asrs	r4, r4, #2
 800af38:	2600      	movs	r6, #0
 800af3a:	42a6      	cmp	r6, r4
 800af3c:	d105      	bne.n	800af4a <__libc_init_array+0x2e>
 800af3e:	bd70      	pop	{r4, r5, r6, pc}
 800af40:	f855 3b04 	ldr.w	r3, [r5], #4
 800af44:	4798      	blx	r3
 800af46:	3601      	adds	r6, #1
 800af48:	e7ee      	b.n	800af28 <__libc_init_array+0xc>
 800af4a:	f855 3b04 	ldr.w	r3, [r5], #4
 800af4e:	4798      	blx	r3
 800af50:	3601      	adds	r6, #1
 800af52:	e7f2      	b.n	800af3a <__libc_init_array+0x1e>
 800af54:	0800b1d8 	.word	0x0800b1d8
 800af58:	0800b1d8 	.word	0x0800b1d8
 800af5c:	0800b1d8 	.word	0x0800b1d8
 800af60:	0800b1dc 	.word	0x0800b1dc

0800af64 <malloc>:
 800af64:	4b02      	ldr	r3, [pc, #8]	; (800af70 <malloc+0xc>)
 800af66:	4601      	mov	r1, r0
 800af68:	6818      	ldr	r0, [r3, #0]
 800af6a:	f000 b82b 	b.w	800afc4 <_malloc_r>
 800af6e:	bf00      	nop
 800af70:	20000010 	.word	0x20000010

0800af74 <memset>:
 800af74:	4402      	add	r2, r0
 800af76:	4603      	mov	r3, r0
 800af78:	4293      	cmp	r3, r2
 800af7a:	d100      	bne.n	800af7e <memset+0xa>
 800af7c:	4770      	bx	lr
 800af7e:	f803 1b01 	strb.w	r1, [r3], #1
 800af82:	e7f9      	b.n	800af78 <memset+0x4>

0800af84 <sbrk_aligned>:
 800af84:	b570      	push	{r4, r5, r6, lr}
 800af86:	4e0e      	ldr	r6, [pc, #56]	; (800afc0 <sbrk_aligned+0x3c>)
 800af88:	460c      	mov	r4, r1
 800af8a:	6831      	ldr	r1, [r6, #0]
 800af8c:	4605      	mov	r5, r0
 800af8e:	b911      	cbnz	r1, 800af96 <sbrk_aligned+0x12>
 800af90:	f000 f88c 	bl	800b0ac <_sbrk_r>
 800af94:	6030      	str	r0, [r6, #0]
 800af96:	4621      	mov	r1, r4
 800af98:	4628      	mov	r0, r5
 800af9a:	f000 f887 	bl	800b0ac <_sbrk_r>
 800af9e:	1c43      	adds	r3, r0, #1
 800afa0:	d00a      	beq.n	800afb8 <sbrk_aligned+0x34>
 800afa2:	1cc4      	adds	r4, r0, #3
 800afa4:	f024 0403 	bic.w	r4, r4, #3
 800afa8:	42a0      	cmp	r0, r4
 800afaa:	d007      	beq.n	800afbc <sbrk_aligned+0x38>
 800afac:	1a21      	subs	r1, r4, r0
 800afae:	4628      	mov	r0, r5
 800afb0:	f000 f87c 	bl	800b0ac <_sbrk_r>
 800afb4:	3001      	adds	r0, #1
 800afb6:	d101      	bne.n	800afbc <sbrk_aligned+0x38>
 800afb8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800afbc:	4620      	mov	r0, r4
 800afbe:	bd70      	pop	{r4, r5, r6, pc}
 800afc0:	200007ec 	.word	0x200007ec

0800afc4 <_malloc_r>:
 800afc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afc8:	1ccd      	adds	r5, r1, #3
 800afca:	f025 0503 	bic.w	r5, r5, #3
 800afce:	3508      	adds	r5, #8
 800afd0:	2d0c      	cmp	r5, #12
 800afd2:	bf38      	it	cc
 800afd4:	250c      	movcc	r5, #12
 800afd6:	2d00      	cmp	r5, #0
 800afd8:	4607      	mov	r7, r0
 800afda:	db01      	blt.n	800afe0 <_malloc_r+0x1c>
 800afdc:	42a9      	cmp	r1, r5
 800afde:	d905      	bls.n	800afec <_malloc_r+0x28>
 800afe0:	230c      	movs	r3, #12
 800afe2:	603b      	str	r3, [r7, #0]
 800afe4:	2600      	movs	r6, #0
 800afe6:	4630      	mov	r0, r6
 800afe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afec:	4e2e      	ldr	r6, [pc, #184]	; (800b0a8 <_malloc_r+0xe4>)
 800afee:	f000 f86f 	bl	800b0d0 <__malloc_lock>
 800aff2:	6833      	ldr	r3, [r6, #0]
 800aff4:	461c      	mov	r4, r3
 800aff6:	bb34      	cbnz	r4, 800b046 <_malloc_r+0x82>
 800aff8:	4629      	mov	r1, r5
 800affa:	4638      	mov	r0, r7
 800affc:	f7ff ffc2 	bl	800af84 <sbrk_aligned>
 800b000:	1c43      	adds	r3, r0, #1
 800b002:	4604      	mov	r4, r0
 800b004:	d14d      	bne.n	800b0a2 <_malloc_r+0xde>
 800b006:	6834      	ldr	r4, [r6, #0]
 800b008:	4626      	mov	r6, r4
 800b00a:	2e00      	cmp	r6, #0
 800b00c:	d140      	bne.n	800b090 <_malloc_r+0xcc>
 800b00e:	6823      	ldr	r3, [r4, #0]
 800b010:	4631      	mov	r1, r6
 800b012:	4638      	mov	r0, r7
 800b014:	eb04 0803 	add.w	r8, r4, r3
 800b018:	f000 f848 	bl	800b0ac <_sbrk_r>
 800b01c:	4580      	cmp	r8, r0
 800b01e:	d13a      	bne.n	800b096 <_malloc_r+0xd2>
 800b020:	6821      	ldr	r1, [r4, #0]
 800b022:	3503      	adds	r5, #3
 800b024:	1a6d      	subs	r5, r5, r1
 800b026:	f025 0503 	bic.w	r5, r5, #3
 800b02a:	3508      	adds	r5, #8
 800b02c:	2d0c      	cmp	r5, #12
 800b02e:	bf38      	it	cc
 800b030:	250c      	movcc	r5, #12
 800b032:	4629      	mov	r1, r5
 800b034:	4638      	mov	r0, r7
 800b036:	f7ff ffa5 	bl	800af84 <sbrk_aligned>
 800b03a:	3001      	adds	r0, #1
 800b03c:	d02b      	beq.n	800b096 <_malloc_r+0xd2>
 800b03e:	6823      	ldr	r3, [r4, #0]
 800b040:	442b      	add	r3, r5
 800b042:	6023      	str	r3, [r4, #0]
 800b044:	e00e      	b.n	800b064 <_malloc_r+0xa0>
 800b046:	6822      	ldr	r2, [r4, #0]
 800b048:	1b52      	subs	r2, r2, r5
 800b04a:	d41e      	bmi.n	800b08a <_malloc_r+0xc6>
 800b04c:	2a0b      	cmp	r2, #11
 800b04e:	d916      	bls.n	800b07e <_malloc_r+0xba>
 800b050:	1961      	adds	r1, r4, r5
 800b052:	42a3      	cmp	r3, r4
 800b054:	6025      	str	r5, [r4, #0]
 800b056:	bf18      	it	ne
 800b058:	6059      	strne	r1, [r3, #4]
 800b05a:	6863      	ldr	r3, [r4, #4]
 800b05c:	bf08      	it	eq
 800b05e:	6031      	streq	r1, [r6, #0]
 800b060:	5162      	str	r2, [r4, r5]
 800b062:	604b      	str	r3, [r1, #4]
 800b064:	4638      	mov	r0, r7
 800b066:	f104 060b 	add.w	r6, r4, #11
 800b06a:	f000 f837 	bl	800b0dc <__malloc_unlock>
 800b06e:	f026 0607 	bic.w	r6, r6, #7
 800b072:	1d23      	adds	r3, r4, #4
 800b074:	1af2      	subs	r2, r6, r3
 800b076:	d0b6      	beq.n	800afe6 <_malloc_r+0x22>
 800b078:	1b9b      	subs	r3, r3, r6
 800b07a:	50a3      	str	r3, [r4, r2]
 800b07c:	e7b3      	b.n	800afe6 <_malloc_r+0x22>
 800b07e:	6862      	ldr	r2, [r4, #4]
 800b080:	42a3      	cmp	r3, r4
 800b082:	bf0c      	ite	eq
 800b084:	6032      	streq	r2, [r6, #0]
 800b086:	605a      	strne	r2, [r3, #4]
 800b088:	e7ec      	b.n	800b064 <_malloc_r+0xa0>
 800b08a:	4623      	mov	r3, r4
 800b08c:	6864      	ldr	r4, [r4, #4]
 800b08e:	e7b2      	b.n	800aff6 <_malloc_r+0x32>
 800b090:	4634      	mov	r4, r6
 800b092:	6876      	ldr	r6, [r6, #4]
 800b094:	e7b9      	b.n	800b00a <_malloc_r+0x46>
 800b096:	230c      	movs	r3, #12
 800b098:	603b      	str	r3, [r7, #0]
 800b09a:	4638      	mov	r0, r7
 800b09c:	f000 f81e 	bl	800b0dc <__malloc_unlock>
 800b0a0:	e7a1      	b.n	800afe6 <_malloc_r+0x22>
 800b0a2:	6025      	str	r5, [r4, #0]
 800b0a4:	e7de      	b.n	800b064 <_malloc_r+0xa0>
 800b0a6:	bf00      	nop
 800b0a8:	200007e8 	.word	0x200007e8

0800b0ac <_sbrk_r>:
 800b0ac:	b538      	push	{r3, r4, r5, lr}
 800b0ae:	4d06      	ldr	r5, [pc, #24]	; (800b0c8 <_sbrk_r+0x1c>)
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	4604      	mov	r4, r0
 800b0b4:	4608      	mov	r0, r1
 800b0b6:	602b      	str	r3, [r5, #0]
 800b0b8:	f7f7 fc94 	bl	80029e4 <_sbrk>
 800b0bc:	1c43      	adds	r3, r0, #1
 800b0be:	d102      	bne.n	800b0c6 <_sbrk_r+0x1a>
 800b0c0:	682b      	ldr	r3, [r5, #0]
 800b0c2:	b103      	cbz	r3, 800b0c6 <_sbrk_r+0x1a>
 800b0c4:	6023      	str	r3, [r4, #0]
 800b0c6:	bd38      	pop	{r3, r4, r5, pc}
 800b0c8:	200007f4 	.word	0x200007f4

0800b0cc <__retarget_lock_acquire_recursive>:
 800b0cc:	4770      	bx	lr

0800b0ce <__retarget_lock_release_recursive>:
 800b0ce:	4770      	bx	lr

0800b0d0 <__malloc_lock>:
 800b0d0:	4801      	ldr	r0, [pc, #4]	; (800b0d8 <__malloc_lock+0x8>)
 800b0d2:	f7ff bffb 	b.w	800b0cc <__retarget_lock_acquire_recursive>
 800b0d6:	bf00      	nop
 800b0d8:	200007f0 	.word	0x200007f0

0800b0dc <__malloc_unlock>:
 800b0dc:	4801      	ldr	r0, [pc, #4]	; (800b0e4 <__malloc_unlock+0x8>)
 800b0de:	f7ff bff6 	b.w	800b0ce <__retarget_lock_release_recursive>
 800b0e2:	bf00      	nop
 800b0e4:	200007f0 	.word	0x200007f0

0800b0e8 <_init>:
 800b0e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0ea:	bf00      	nop
 800b0ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0ee:	bc08      	pop	{r3}
 800b0f0:	469e      	mov	lr, r3
 800b0f2:	4770      	bx	lr

0800b0f4 <_fini>:
 800b0f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0f6:	bf00      	nop
 800b0f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0fa:	bc08      	pop	{r3}
 800b0fc:	469e      	mov	lr, r3
 800b0fe:	4770      	bx	lr
