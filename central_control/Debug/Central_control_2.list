
Central_control_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f44  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08009100  08009100  00019100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009170  08009170  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08009170  08009170  00019170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009178  08009178  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009178  08009178  00019178  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800917c  0800917c  0001917c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08009180  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000764  20000014  08009194  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000778  08009194  00020778  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d6b0  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000314a  00000000  00000000  0003d6f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001998  00000000  00000000  00040840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001878  00000000  00000000  000421d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002df0d  00000000  00000000  00043a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001dc84  00000000  00000000  0007195d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001233f3  00000000  00000000  0008f5e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001b29d4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006eb0  00000000  00000000  001b2a24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20000014 	.word	0x20000014
 80001d8:	00000000 	.word	0x00000000
 80001dc:	080090e8 	.word	0x080090e8

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000018 	.word	0x20000018
 80001f8:	080090e8 	.word	0x080090e8

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b974 	b.w	80004fc <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	468e      	mov	lr, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d14d      	bne.n	80002d6 <__udivmoddi4+0xaa>
 800023a:	428a      	cmp	r2, r1
 800023c:	4694      	mov	ip, r2
 800023e:	d969      	bls.n	8000314 <__udivmoddi4+0xe8>
 8000240:	fab2 f282 	clz	r2, r2
 8000244:	b152      	cbz	r2, 800025c <__udivmoddi4+0x30>
 8000246:	fa01 f302 	lsl.w	r3, r1, r2
 800024a:	f1c2 0120 	rsb	r1, r2, #32
 800024e:	fa20 f101 	lsr.w	r1, r0, r1
 8000252:	fa0c fc02 	lsl.w	ip, ip, r2
 8000256:	ea41 0e03 	orr.w	lr, r1, r3
 800025a:	4094      	lsls	r4, r2
 800025c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000260:	0c21      	lsrs	r1, r4, #16
 8000262:	fbbe f6f8 	udiv	r6, lr, r8
 8000266:	fa1f f78c 	uxth.w	r7, ip
 800026a:	fb08 e316 	mls	r3, r8, r6, lr
 800026e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000272:	fb06 f107 	mul.w	r1, r6, r7
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000282:	f080 811f 	bcs.w	80004c4 <__udivmoddi4+0x298>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 811c 	bls.w	80004c4 <__udivmoddi4+0x298>
 800028c:	3e02      	subs	r6, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a5b      	subs	r3, r3, r1
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb3 f0f8 	udiv	r0, r3, r8
 8000298:	fb08 3310 	mls	r3, r8, r0, r3
 800029c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a0:	fb00 f707 	mul.w	r7, r0, r7
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	d90a      	bls.n	80002be <__udivmoddi4+0x92>
 80002a8:	eb1c 0404 	adds.w	r4, ip, r4
 80002ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b0:	f080 810a 	bcs.w	80004c8 <__udivmoddi4+0x29c>
 80002b4:	42a7      	cmp	r7, r4
 80002b6:	f240 8107 	bls.w	80004c8 <__udivmoddi4+0x29c>
 80002ba:	4464      	add	r4, ip
 80002bc:	3802      	subs	r0, #2
 80002be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c2:	1be4      	subs	r4, r4, r7
 80002c4:	2600      	movs	r6, #0
 80002c6:	b11d      	cbz	r5, 80002d0 <__udivmoddi4+0xa4>
 80002c8:	40d4      	lsrs	r4, r2
 80002ca:	2300      	movs	r3, #0
 80002cc:	e9c5 4300 	strd	r4, r3, [r5]
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0xc2>
 80002da:	2d00      	cmp	r5, #0
 80002dc:	f000 80ef 	beq.w	80004be <__udivmoddi4+0x292>
 80002e0:	2600      	movs	r6, #0
 80002e2:	e9c5 0100 	strd	r0, r1, [r5]
 80002e6:	4630      	mov	r0, r6
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	fab3 f683 	clz	r6, r3
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d14a      	bne.n	800038c <__udivmoddi4+0x160>
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xd4>
 80002fa:	4282      	cmp	r2, r0
 80002fc:	f200 80f9 	bhi.w	80004f2 <__udivmoddi4+0x2c6>
 8000300:	1a84      	subs	r4, r0, r2
 8000302:	eb61 0303 	sbc.w	r3, r1, r3
 8000306:	2001      	movs	r0, #1
 8000308:	469e      	mov	lr, r3
 800030a:	2d00      	cmp	r5, #0
 800030c:	d0e0      	beq.n	80002d0 <__udivmoddi4+0xa4>
 800030e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000312:	e7dd      	b.n	80002d0 <__udivmoddi4+0xa4>
 8000314:	b902      	cbnz	r2, 8000318 <__udivmoddi4+0xec>
 8000316:	deff      	udf	#255	; 0xff
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	2a00      	cmp	r2, #0
 800031e:	f040 8092 	bne.w	8000446 <__udivmoddi4+0x21a>
 8000322:	eba1 010c 	sub.w	r1, r1, ip
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2601      	movs	r6, #1
 8000330:	0c20      	lsrs	r0, r4, #16
 8000332:	fbb1 f3f7 	udiv	r3, r1, r7
 8000336:	fb07 1113 	mls	r1, r7, r3, r1
 800033a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800033e:	fb0e f003 	mul.w	r0, lr, r3
 8000342:	4288      	cmp	r0, r1
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x12c>
 8000346:	eb1c 0101 	adds.w	r1, ip, r1
 800034a:	f103 38ff 	add.w	r8, r3, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x12a>
 8000350:	4288      	cmp	r0, r1
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2c0>
 8000356:	4643      	mov	r3, r8
 8000358:	1a09      	subs	r1, r1, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000360:	fb07 1110 	mls	r1, r7, r0, r1
 8000364:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x156>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 31ff 	add.w	r1, r0, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x154>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2ca>
 8000380:	4608      	mov	r0, r1
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800038a:	e79c      	b.n	80002c6 <__udivmoddi4+0x9a>
 800038c:	f1c6 0720 	rsb	r7, r6, #32
 8000390:	40b3      	lsls	r3, r6
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa20 f407 	lsr.w	r4, r0, r7
 800039e:	fa01 f306 	lsl.w	r3, r1, r6
 80003a2:	431c      	orrs	r4, r3
 80003a4:	40f9      	lsrs	r1, r7
 80003a6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003aa:	fa00 f306 	lsl.w	r3, r0, r6
 80003ae:	fbb1 f8f9 	udiv	r8, r1, r9
 80003b2:	0c20      	lsrs	r0, r4, #16
 80003b4:	fa1f fe8c 	uxth.w	lr, ip
 80003b8:	fb09 1118 	mls	r1, r9, r8, r1
 80003bc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c0:	fb08 f00e 	mul.w	r0, r8, lr
 80003c4:	4288      	cmp	r0, r1
 80003c6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b8>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2bc>
 80003d8:	4288      	cmp	r0, r1
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2bc>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4461      	add	r1, ip
 80003e4:	1a09      	subs	r1, r1, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003ec:	fb09 1110 	mls	r1, r9, r0, r1
 80003f0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003f8:	458e      	cmp	lr, r1
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1e2>
 80003fc:	eb1c 0101 	adds.w	r1, ip, r1
 8000400:	f100 34ff 	add.w	r4, r0, #4294967295
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2b4>
 8000406:	458e      	cmp	lr, r1
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2b4>
 800040a:	3802      	subs	r0, #2
 800040c:	4461      	add	r1, ip
 800040e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000412:	fba0 9402 	umull	r9, r4, r0, r2
 8000416:	eba1 010e 	sub.w	r1, r1, lr
 800041a:	42a1      	cmp	r1, r4
 800041c:	46c8      	mov	r8, r9
 800041e:	46a6      	mov	lr, r4
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x2a4>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x2a0>
 8000424:	b15d      	cbz	r5, 800043e <__udivmoddi4+0x212>
 8000426:	ebb3 0208 	subs.w	r2, r3, r8
 800042a:	eb61 010e 	sbc.w	r1, r1, lr
 800042e:	fa01 f707 	lsl.w	r7, r1, r7
 8000432:	fa22 f306 	lsr.w	r3, r2, r6
 8000436:	40f1      	lsrs	r1, r6
 8000438:	431f      	orrs	r7, r3
 800043a:	e9c5 7100 	strd	r7, r1, [r5]
 800043e:	2600      	movs	r6, #0
 8000440:	4631      	mov	r1, r6
 8000442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000446:	f1c2 0320 	rsb	r3, r2, #32
 800044a:	40d8      	lsrs	r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa21 f303 	lsr.w	r3, r1, r3
 8000454:	4091      	lsls	r1, r2
 8000456:	4301      	orrs	r1, r0
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb3 f0f7 	udiv	r0, r3, r7
 8000464:	fb07 3610 	mls	r6, r7, r0, r3
 8000468:	0c0b      	lsrs	r3, r1, #16
 800046a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800046e:	fb00 f60e 	mul.w	r6, r0, lr
 8000472:	429e      	cmp	r6, r3
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x260>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b8>
 8000484:	429e      	cmp	r6, r3
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b8>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1b9b      	subs	r3, r3, r6
 800048e:	b289      	uxth	r1, r1
 8000490:	fbb3 f6f7 	udiv	r6, r3, r7
 8000494:	fb07 3316 	mls	r3, r7, r6, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb06 f30e 	mul.w	r3, r6, lr
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x28a>
 80004a4:	eb1c 0101 	adds.w	r1, ip, r1
 80004a8:	f106 38ff 	add.w	r8, r6, #4294967295
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2b0>
 80004b2:	3e02      	subs	r6, #2
 80004b4:	4461      	add	r1, ip
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0x104>
 80004be:	462e      	mov	r6, r5
 80004c0:	4628      	mov	r0, r5
 80004c2:	e705      	b.n	80002d0 <__udivmoddi4+0xa4>
 80004c4:	4606      	mov	r6, r0
 80004c6:	e6e3      	b.n	8000290 <__udivmoddi4+0x64>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6f8      	b.n	80002be <__udivmoddi4+0x92>
 80004cc:	454b      	cmp	r3, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f8>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004d8:	3801      	subs	r0, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f8>
 80004dc:	4646      	mov	r6, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x28a>
 80004e0:	4620      	mov	r0, r4
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1e2>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x260>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b8>
 80004ec:	3b02      	subs	r3, #2
 80004ee:	4461      	add	r1, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x12c>
 80004f2:	4630      	mov	r0, r6
 80004f4:	e709      	b.n	800030a <__udivmoddi4+0xde>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x156>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000506:	f001 ff46 	bl	8002396 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050a:	f000 f84f 	bl	80005ac <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800050e:	f000 f8af 	bl	8000670 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000512:	f000 ff6b 	bl	80013ec <MX_GPIO_Init>
  MX_ADC1_Init();
 8000516:	f000 f8df 	bl	80006d8 <MX_ADC1_Init>
  MX_CAN1_Init();
 800051a:	f000 f941 	bl	80007a0 <MX_CAN1_Init>
  MX_COMP1_Init();
 800051e:	f000 f973 	bl	8000808 <MX_COMP1_Init>
  MX_COMP2_Init();
 8000522:	f000 f99f 	bl	8000864 <MX_COMP2_Init>
  MX_I2C1_SMBUS_Init();
 8000526:	f000 f9c9 	bl	80008bc <MX_I2C1_SMBUS_Init>
  MX_I2C2_SMBUS_Init();
 800052a:	f000 fa01 	bl	8000930 <MX_I2C2_SMBUS_Init>
  MX_LPUART1_UART_Init();
 800052e:	f000 fa41 	bl	80009b4 <MX_LPUART1_UART_Init>
  MX_USART2_UART_Init();
 8000532:	f000 fa8d 	bl	8000a50 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000536:	f000 fad9 	bl	8000aec <MX_USART3_UART_Init>
  MX_SAI1_Init();
 800053a:	f000 fb23 	bl	8000b84 <MX_SAI1_Init>
  MX_SAI2_Init();
 800053e:	f000 fbb9 	bl	8000cb4 <MX_SAI2_Init>
  MX_SPI1_Init();
 8000542:	f000 fc1f 	bl	8000d84 <MX_SPI1_Init>
  MX_SPI3_Init();
 8000546:	f000 fc5b 	bl	8000e00 <MX_SPI3_Init>
  MX_TIM1_Init();
 800054a:	f000 fc97 	bl	8000e7c <MX_TIM1_Init>
  MX_TIM2_Init();
 800054e:	f000 fd75 	bl	800103c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000552:	f000 fdd7 	bl	8001104 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000556:	f000 fe3b 	bl	80011d0 <MX_TIM4_Init>
  MX_TIM15_Init();
 800055a:	f000 febb 	bl	80012d4 <MX_TIM15_Init>
  MX_USB_OTG_FS_USB_Init();
 800055e:	f000 ff3d 	bl	80013dc <MX_USB_OTG_FS_USB_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000562:	2108      	movs	r1, #8
 8000564:	4810      	ldr	r0, [pc, #64]	; (80005a8 <main+0xa8>)
 8000566:	f006 feaf 	bl	80072c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800056a:	210c      	movs	r1, #12
 800056c:	480e      	ldr	r0, [pc, #56]	; (80005a8 <main+0xa8>)
 800056e:	f006 feab 	bl	80072c8 <HAL_TIM_PWM_Start>
  uint32_t count = 0;
 8000572:	2300      	movs	r3, #0
 8000574:	607b      	str	r3, [r7, #4]
  uint16_t mode = 0;
 8000576:	2300      	movs	r3, #0
 8000578:	807b      	strh	r3, [r7, #2]
  while (1)
  {
	  motor_control(5);
 800057a:	2005      	movs	r0, #5
 800057c:	f001 f80a 	bl	8001594 <motor_control>
	  HAL_Delay(5000);
 8000580:	f241 3088 	movw	r0, #5000	; 0x1388
 8000584:	f001 ff7c 	bl	8002480 <HAL_Delay>

	  motor_control(0);
 8000588:	2000      	movs	r0, #0
 800058a:	f001 f803 	bl	8001594 <motor_control>
	  HAL_Delay(5000);
 800058e:	f241 3088 	movw	r0, #5000	; 0x1388
 8000592:	f001 ff75 	bl	8002480 <HAL_Delay>

	  motor_control(2);
 8000596:	2002      	movs	r0, #2
 8000598:	f000 fffc 	bl	8001594 <motor_control>
	  HAL_Delay(5000);
 800059c:	f241 3088 	movw	r0, #5000	; 0x1388
 80005a0:	f001 ff6e 	bl	8002480 <HAL_Delay>
	  motor_control(5);
 80005a4:	e7e9      	b.n	800057a <main+0x7a>
 80005a6:	bf00      	nop
 80005a8:	200006d0 	.word	0x200006d0

080005ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b096      	sub	sp, #88	; 0x58
 80005b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b2:	f107 0314 	add.w	r3, r7, #20
 80005b6:	2244      	movs	r2, #68	; 0x44
 80005b8:	2100      	movs	r1, #0
 80005ba:	4618      	mov	r0, r3
 80005bc:	f008 fd8c 	bl	80090d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c0:	463b      	mov	r3, r7
 80005c2:	2200      	movs	r2, #0
 80005c4:	601a      	str	r2, [r3, #0]
 80005c6:	605a      	str	r2, [r3, #4]
 80005c8:	609a      	str	r2, [r3, #8]
 80005ca:	60da      	str	r2, [r3, #12]
 80005cc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005ce:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005d2:	f003 fbb7 	bl	8003d44 <HAL_PWREx_ControlVoltageScaling>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005dc:	f000 ffd4 	bl	8001588 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005e0:	f003 fb80 	bl	8003ce4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80005e4:	4b21      	ldr	r3, [pc, #132]	; (800066c <SystemClock_Config+0xc0>)
 80005e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80005ea:	4a20      	ldr	r2, [pc, #128]	; (800066c <SystemClock_Config+0xc0>)
 80005ec:	f023 0318 	bic.w	r3, r3, #24
 80005f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80005f4:	2314      	movs	r3, #20
 80005f6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80005f8:	2301      	movs	r3, #1
 80005fa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005fc:	2301      	movs	r3, #1
 80005fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000600:	2300      	movs	r3, #0
 8000602:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000604:	2360      	movs	r3, #96	; 0x60
 8000606:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000608:	2302      	movs	r3, #2
 800060a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800060c:	2301      	movs	r3, #1
 800060e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000610:	2301      	movs	r3, #1
 8000612:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000614:	2310      	movs	r3, #16
 8000616:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000618:	2302      	movs	r3, #2
 800061a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800061c:	2302      	movs	r3, #2
 800061e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000620:	2302      	movs	r3, #2
 8000622:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000624:	f107 0314 	add.w	r3, r7, #20
 8000628:	4618      	mov	r0, r3
 800062a:	f003 fc3f 	bl	8003eac <HAL_RCC_OscConfig>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000634:	f000 ffa8 	bl	8001588 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000638:	230f      	movs	r3, #15
 800063a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800063c:	2303      	movs	r3, #3
 800063e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000640:	2300      	movs	r3, #0
 8000642:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000644:	2300      	movs	r3, #0
 8000646:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000648:	2300      	movs	r3, #0
 800064a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800064c:	463b      	mov	r3, r7
 800064e:	2101      	movs	r1, #1
 8000650:	4618      	mov	r0, r3
 8000652:	f004 f845 	bl	80046e0 <HAL_RCC_ClockConfig>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800065c:	f000 ff94 	bl	8001588 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000660:	f005 fd4e 	bl	8006100 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000664:	bf00      	nop
 8000666:	3758      	adds	r7, #88	; 0x58
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	40021000 	.word	0x40021000

08000670 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b0a6      	sub	sp, #152	; 0x98
 8000674:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000676:	1d3b      	adds	r3, r7, #4
 8000678:	2294      	movs	r2, #148	; 0x94
 800067a:	2100      	movs	r1, #0
 800067c:	4618      	mov	r0, r3
 800067e:	f008 fd2b 	bl	80090d8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_SAI2
 8000682:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 8000686:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8000688:	2300      	movs	r3, #0
 800068a:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI1;
 800068c:	2300      	movs	r3, #0
 800068e:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000690:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000694:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000698:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800069c:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800069e:	2301      	movs	r3, #1
 80006a0:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80006a2:	2301      	movs	r3, #1
 80006a4:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80006a6:	2318      	movs	r3, #24
 80006a8:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80006aa:	2302      	movs	r3, #2
 80006ac:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80006ae:	2302      	movs	r3, #2
 80006b0:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80006b2:	2302      	movs	r3, #2
 80006b4:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_48M2CLK
 80006b6:	4b07      	ldr	r3, [pc, #28]	; (80006d4 <PeriphCommonClock_Config+0x64>)
 80006b8:	623b      	str	r3, [r7, #32]
                              |RCC_PLLSAI1_ADC1CLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	4618      	mov	r0, r3
 80006be:	f004 facd 	bl	8004c5c <HAL_RCCEx_PeriphCLKConfig>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 80006c8:	f000 ff5e 	bl	8001588 <Error_Handler>
  }
}
 80006cc:	bf00      	nop
 80006ce:	3798      	adds	r7, #152	; 0x98
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	01110000 	.word	0x01110000

080006d8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b086      	sub	sp, #24
 80006dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006de:	463b      	mov	r3, r7
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	605a      	str	r2, [r3, #4]
 80006e6:	609a      	str	r2, [r3, #8]
 80006e8:	60da      	str	r2, [r3, #12]
 80006ea:	611a      	str	r2, [r3, #16]
 80006ec:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80006ee:	4b29      	ldr	r3, [pc, #164]	; (8000794 <MX_ADC1_Init+0xbc>)
 80006f0:	4a29      	ldr	r2, [pc, #164]	; (8000798 <MX_ADC1_Init+0xc0>)
 80006f2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006f4:	4b27      	ldr	r3, [pc, #156]	; (8000794 <MX_ADC1_Init+0xbc>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006fa:	4b26      	ldr	r3, [pc, #152]	; (8000794 <MX_ADC1_Init+0xbc>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000700:	4b24      	ldr	r3, [pc, #144]	; (8000794 <MX_ADC1_Init+0xbc>)
 8000702:	2200      	movs	r2, #0
 8000704:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000706:	4b23      	ldr	r3, [pc, #140]	; (8000794 <MX_ADC1_Init+0xbc>)
 8000708:	2200      	movs	r2, #0
 800070a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800070c:	4b21      	ldr	r3, [pc, #132]	; (8000794 <MX_ADC1_Init+0xbc>)
 800070e:	2204      	movs	r2, #4
 8000710:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000712:	4b20      	ldr	r3, [pc, #128]	; (8000794 <MX_ADC1_Init+0xbc>)
 8000714:	2200      	movs	r2, #0
 8000716:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000718:	4b1e      	ldr	r3, [pc, #120]	; (8000794 <MX_ADC1_Init+0xbc>)
 800071a:	2200      	movs	r2, #0
 800071c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800071e:	4b1d      	ldr	r3, [pc, #116]	; (8000794 <MX_ADC1_Init+0xbc>)
 8000720:	2201      	movs	r2, #1
 8000722:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000724:	4b1b      	ldr	r3, [pc, #108]	; (8000794 <MX_ADC1_Init+0xbc>)
 8000726:	2200      	movs	r2, #0
 8000728:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800072c:	4b19      	ldr	r3, [pc, #100]	; (8000794 <MX_ADC1_Init+0xbc>)
 800072e:	2200      	movs	r2, #0
 8000730:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000732:	4b18      	ldr	r3, [pc, #96]	; (8000794 <MX_ADC1_Init+0xbc>)
 8000734:	2200      	movs	r2, #0
 8000736:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000738:	4b16      	ldr	r3, [pc, #88]	; (8000794 <MX_ADC1_Init+0xbc>)
 800073a:	2200      	movs	r2, #0
 800073c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000740:	4b14      	ldr	r3, [pc, #80]	; (8000794 <MX_ADC1_Init+0xbc>)
 8000742:	2200      	movs	r2, #0
 8000744:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000746:	4b13      	ldr	r3, [pc, #76]	; (8000794 <MX_ADC1_Init+0xbc>)
 8000748:	2200      	movs	r2, #0
 800074a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800074e:	4811      	ldr	r0, [pc, #68]	; (8000794 <MX_ADC1_Init+0xbc>)
 8000750:	f002 f85a 	bl	8002808 <HAL_ADC_Init>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800075a:	f000 ff15 	bl	8001588 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800075e:	4b0f      	ldr	r3, [pc, #60]	; (800079c <MX_ADC1_Init+0xc4>)
 8000760:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000762:	2306      	movs	r3, #6
 8000764:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000766:	2300      	movs	r3, #0
 8000768:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800076a:	237f      	movs	r3, #127	; 0x7f
 800076c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800076e:	2304      	movs	r3, #4
 8000770:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000772:	2300      	movs	r3, #0
 8000774:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000776:	463b      	mov	r3, r7
 8000778:	4619      	mov	r1, r3
 800077a:	4806      	ldr	r0, [pc, #24]	; (8000794 <MX_ADC1_Init+0xbc>)
 800077c:	f002 f990 	bl	8002aa0 <HAL_ADC_ConfigChannel>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000786:	f000 feff 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800078a:	bf00      	nop
 800078c:	3718      	adds	r7, #24
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20000030 	.word	0x20000030
 8000798:	50040000 	.word	0x50040000
 800079c:	04300002 	.word	0x04300002

080007a0 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80007a4:	4b16      	ldr	r3, [pc, #88]	; (8000800 <MX_CAN1_Init+0x60>)
 80007a6:	4a17      	ldr	r2, [pc, #92]	; (8000804 <MX_CAN1_Init+0x64>)
 80007a8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80007aa:	4b15      	ldr	r3, [pc, #84]	; (8000800 <MX_CAN1_Init+0x60>)
 80007ac:	2210      	movs	r2, #16
 80007ae:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80007b0:	4b13      	ldr	r3, [pc, #76]	; (8000800 <MX_CAN1_Init+0x60>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80007b6:	4b12      	ldr	r3, [pc, #72]	; (8000800 <MX_CAN1_Init+0x60>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80007bc:	4b10      	ldr	r3, [pc, #64]	; (8000800 <MX_CAN1_Init+0x60>)
 80007be:	2200      	movs	r2, #0
 80007c0:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80007c2:	4b0f      	ldr	r3, [pc, #60]	; (8000800 <MX_CAN1_Init+0x60>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80007c8:	4b0d      	ldr	r3, [pc, #52]	; (8000800 <MX_CAN1_Init+0x60>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80007ce:	4b0c      	ldr	r3, [pc, #48]	; (8000800 <MX_CAN1_Init+0x60>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80007d4:	4b0a      	ldr	r3, [pc, #40]	; (8000800 <MX_CAN1_Init+0x60>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80007da:	4b09      	ldr	r3, [pc, #36]	; (8000800 <MX_CAN1_Init+0x60>)
 80007dc:	2200      	movs	r2, #0
 80007de:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80007e0:	4b07      	ldr	r3, [pc, #28]	; (8000800 <MX_CAN1_Init+0x60>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80007e6:	4b06      	ldr	r3, [pc, #24]	; (8000800 <MX_CAN1_Init+0x60>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80007ec:	4804      	ldr	r0, [pc, #16]	; (8000800 <MX_CAN1_Init+0x60>)
 80007ee:	f002 fd53 	bl	8003298 <HAL_CAN_Init>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 80007f8:	f000 fec6 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80007fc:	bf00      	nop
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	20000098 	.word	0x20000098
 8000804:	40006400 	.word	0x40006400

08000808 <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 800080c:	4b12      	ldr	r3, [pc, #72]	; (8000858 <MX_COMP1_Init+0x50>)
 800080e:	4a13      	ldr	r2, [pc, #76]	; (800085c <MX_COMP1_Init+0x54>)
 8000810:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InvertingInput = COMP_INPUT_MINUS_VREFINT;
 8000812:	4b11      	ldr	r3, [pc, #68]	; (8000858 <MX_COMP1_Init+0x50>)
 8000814:	4a12      	ldr	r2, [pc, #72]	; (8000860 <MX_COMP1_Init+0x58>)
 8000816:	611a      	str	r2, [r3, #16]
  hcomp1.Init.NonInvertingInput = COMP_INPUT_PLUS_IO2;
 8000818:	4b0f      	ldr	r3, [pc, #60]	; (8000858 <MX_COMP1_Init+0x50>)
 800081a:	2280      	movs	r2, #128	; 0x80
 800081c:	60da      	str	r2, [r3, #12]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800081e:	4b0e      	ldr	r3, [pc, #56]	; (8000858 <MX_COMP1_Init+0x50>)
 8000820:	2200      	movs	r2, #0
 8000822:	619a      	str	r2, [r3, #24]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000824:	4b0c      	ldr	r3, [pc, #48]	; (8000858 <MX_COMP1_Init+0x50>)
 8000826:	2200      	movs	r2, #0
 8000828:	615a      	str	r2, [r3, #20]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 800082a:	4b0b      	ldr	r3, [pc, #44]	; (8000858 <MX_COMP1_Init+0x50>)
 800082c:	2200      	movs	r2, #0
 800082e:	61da      	str	r2, [r3, #28]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8000830:	4b09      	ldr	r3, [pc, #36]	; (8000858 <MX_COMP1_Init+0x50>)
 8000832:	2200      	movs	r2, #0
 8000834:	609a      	str	r2, [r3, #8]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000836:	4b08      	ldr	r3, [pc, #32]	; (8000858 <MX_COMP1_Init+0x50>)
 8000838:	2200      	movs	r2, #0
 800083a:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 800083c:	4b06      	ldr	r3, [pc, #24]	; (8000858 <MX_COMP1_Init+0x50>)
 800083e:	2200      	movs	r2, #0
 8000840:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8000842:	4805      	ldr	r0, [pc, #20]	; (8000858 <MX_COMP1_Init+0x50>)
 8000844:	f002 fecc 	bl	80035e0 <HAL_COMP_Init>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_COMP1_Init+0x4a>
  {
    Error_Handler();
 800084e:	f000 fe9b 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	200000c0 	.word	0x200000c0
 800085c:	40010200 	.word	0x40010200
 8000860:	00800030 	.word	0x00800030

08000864 <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 8000868:	4b12      	ldr	r3, [pc, #72]	; (80008b4 <MX_COMP2_Init+0x50>)
 800086a:	4a13      	ldr	r2, [pc, #76]	; (80008b8 <MX_COMP2_Init+0x54>)
 800086c:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INPUT_MINUS_IO2;
 800086e:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <MX_COMP2_Init+0x50>)
 8000870:	2270      	movs	r2, #112	; 0x70
 8000872:	611a      	str	r2, [r3, #16]
  hcomp2.Init.NonInvertingInput = COMP_INPUT_PLUS_IO2;
 8000874:	4b0f      	ldr	r3, [pc, #60]	; (80008b4 <MX_COMP2_Init+0x50>)
 8000876:	2280      	movs	r2, #128	; 0x80
 8000878:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800087a:	4b0e      	ldr	r3, [pc, #56]	; (80008b4 <MX_COMP2_Init+0x50>)
 800087c:	2200      	movs	r2, #0
 800087e:	619a      	str	r2, [r3, #24]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000880:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <MX_COMP2_Init+0x50>)
 8000882:	2200      	movs	r2, #0
 8000884:	615a      	str	r2, [r3, #20]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8000886:	4b0b      	ldr	r3, [pc, #44]	; (80008b4 <MX_COMP2_Init+0x50>)
 8000888:	2200      	movs	r2, #0
 800088a:	61da      	str	r2, [r3, #28]
  hcomp2.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 800088c:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <MX_COMP2_Init+0x50>)
 800088e:	2200      	movs	r2, #0
 8000890:	609a      	str	r2, [r3, #8]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000892:	4b08      	ldr	r3, [pc, #32]	; (80008b4 <MX_COMP2_Init+0x50>)
 8000894:	2200      	movs	r2, #0
 8000896:	605a      	str	r2, [r3, #4]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000898:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <MX_COMP2_Init+0x50>)
 800089a:	2200      	movs	r2, #0
 800089c:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 800089e:	4805      	ldr	r0, [pc, #20]	; (80008b4 <MX_COMP2_Init+0x50>)
 80008a0:	f002 fe9e 	bl	80035e0 <HAL_COMP_Init>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_COMP2_Init+0x4a>
  {
    Error_Handler();
 80008aa:	f000 fe6d 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	200000ec 	.word	0x200000ec
 80008b8:	40010204 	.word	0x40010204

080008bc <MX_I2C1_SMBUS_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_SMBUS_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hsmbus1.Instance = I2C1;
 80008c0:	4b18      	ldr	r3, [pc, #96]	; (8000924 <MX_I2C1_SMBUS_Init+0x68>)
 80008c2:	4a19      	ldr	r2, [pc, #100]	; (8000928 <MX_I2C1_SMBUS_Init+0x6c>)
 80008c4:	601a      	str	r2, [r3, #0]
  hsmbus1.Init.Timing = 0x00707CBB;
 80008c6:	4b17      	ldr	r3, [pc, #92]	; (8000924 <MX_I2C1_SMBUS_Init+0x68>)
 80008c8:	4a18      	ldr	r2, [pc, #96]	; (800092c <MX_I2C1_SMBUS_Init+0x70>)
 80008ca:	605a      	str	r2, [r3, #4]
  hsmbus1.Init.AnalogFilter = SMBUS_ANALOGFILTER_ENABLE;
 80008cc:	4b15      	ldr	r3, [pc, #84]	; (8000924 <MX_I2C1_SMBUS_Init+0x68>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	609a      	str	r2, [r3, #8]
  hsmbus1.Init.OwnAddress1 = 2;
 80008d2:	4b14      	ldr	r3, [pc, #80]	; (8000924 <MX_I2C1_SMBUS_Init+0x68>)
 80008d4:	2202      	movs	r2, #2
 80008d6:	60da      	str	r2, [r3, #12]
  hsmbus1.Init.AddressingMode = SMBUS_ADDRESSINGMODE_7BIT;
 80008d8:	4b12      	ldr	r3, [pc, #72]	; (8000924 <MX_I2C1_SMBUS_Init+0x68>)
 80008da:	2201      	movs	r2, #1
 80008dc:	611a      	str	r2, [r3, #16]
  hsmbus1.Init.DualAddressMode = SMBUS_DUALADDRESS_DISABLE;
 80008de:	4b11      	ldr	r3, [pc, #68]	; (8000924 <MX_I2C1_SMBUS_Init+0x68>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	615a      	str	r2, [r3, #20]
  hsmbus1.Init.OwnAddress2 = 0;
 80008e4:	4b0f      	ldr	r3, [pc, #60]	; (8000924 <MX_I2C1_SMBUS_Init+0x68>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	619a      	str	r2, [r3, #24]
  hsmbus1.Init.OwnAddress2Masks = SMBUS_OA2_NOMASK;
 80008ea:	4b0e      	ldr	r3, [pc, #56]	; (8000924 <MX_I2C1_SMBUS_Init+0x68>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	61da      	str	r2, [r3, #28]
  hsmbus1.Init.GeneralCallMode = SMBUS_GENERALCALL_DISABLE;
 80008f0:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <MX_I2C1_SMBUS_Init+0x68>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	621a      	str	r2, [r3, #32]
  hsmbus1.Init.NoStretchMode = SMBUS_NOSTRETCH_DISABLE;
 80008f6:	4b0b      	ldr	r3, [pc, #44]	; (8000924 <MX_I2C1_SMBUS_Init+0x68>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	625a      	str	r2, [r3, #36]	; 0x24
  hsmbus1.Init.PacketErrorCheckMode = SMBUS_PEC_DISABLE;
 80008fc:	4b09      	ldr	r3, [pc, #36]	; (8000924 <MX_I2C1_SMBUS_Init+0x68>)
 80008fe:	2200      	movs	r2, #0
 8000900:	629a      	str	r2, [r3, #40]	; 0x28
  hsmbus1.Init.PeripheralMode = SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE;
 8000902:	4b08      	ldr	r3, [pc, #32]	; (8000924 <MX_I2C1_SMBUS_Init+0x68>)
 8000904:	2200      	movs	r2, #0
 8000906:	62da      	str	r2, [r3, #44]	; 0x2c
  hsmbus1.Init.SMBusTimeout = 0x00008186;
 8000908:	4b06      	ldr	r3, [pc, #24]	; (8000924 <MX_I2C1_SMBUS_Init+0x68>)
 800090a:	f248 1286 	movw	r2, #33158	; 0x8186
 800090e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_SMBUS_Init(&hsmbus1) != HAL_OK)
 8000910:	4804      	ldr	r0, [pc, #16]	; (8000924 <MX_I2C1_SMBUS_Init+0x68>)
 8000912:	f006 fa7d 	bl	8006e10 <HAL_SMBUS_Init>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_I2C1_SMBUS_Init+0x64>
  {
    Error_Handler();
 800091c:	f000 fe34 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000920:	bf00      	nop
 8000922:	bd80      	pop	{r7, pc}
 8000924:	20000118 	.word	0x20000118
 8000928:	40005400 	.word	0x40005400
 800092c:	00707cbb 	.word	0x00707cbb

08000930 <MX_I2C2_SMBUS_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_SMBUS_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hsmbus2.Instance = I2C2;
 8000934:	4b1c      	ldr	r3, [pc, #112]	; (80009a8 <MX_I2C2_SMBUS_Init+0x78>)
 8000936:	4a1d      	ldr	r2, [pc, #116]	; (80009ac <MX_I2C2_SMBUS_Init+0x7c>)
 8000938:	601a      	str	r2, [r3, #0]
  hsmbus2.Init.Timing = 0x00707CBB;
 800093a:	4b1b      	ldr	r3, [pc, #108]	; (80009a8 <MX_I2C2_SMBUS_Init+0x78>)
 800093c:	4a1c      	ldr	r2, [pc, #112]	; (80009b0 <MX_I2C2_SMBUS_Init+0x80>)
 800093e:	605a      	str	r2, [r3, #4]
  hsmbus2.Init.AnalogFilter = SMBUS_ANALOGFILTER_ENABLE;
 8000940:	4b19      	ldr	r3, [pc, #100]	; (80009a8 <MX_I2C2_SMBUS_Init+0x78>)
 8000942:	2200      	movs	r2, #0
 8000944:	609a      	str	r2, [r3, #8]
  hsmbus2.Init.OwnAddress1 = 2;
 8000946:	4b18      	ldr	r3, [pc, #96]	; (80009a8 <MX_I2C2_SMBUS_Init+0x78>)
 8000948:	2202      	movs	r2, #2
 800094a:	60da      	str	r2, [r3, #12]
  hsmbus2.Init.AddressingMode = SMBUS_ADDRESSINGMODE_7BIT;
 800094c:	4b16      	ldr	r3, [pc, #88]	; (80009a8 <MX_I2C2_SMBUS_Init+0x78>)
 800094e:	2201      	movs	r2, #1
 8000950:	611a      	str	r2, [r3, #16]
  hsmbus2.Init.DualAddressMode = SMBUS_DUALADDRESS_DISABLE;
 8000952:	4b15      	ldr	r3, [pc, #84]	; (80009a8 <MX_I2C2_SMBUS_Init+0x78>)
 8000954:	2200      	movs	r2, #0
 8000956:	615a      	str	r2, [r3, #20]
  hsmbus2.Init.OwnAddress2 = 0;
 8000958:	4b13      	ldr	r3, [pc, #76]	; (80009a8 <MX_I2C2_SMBUS_Init+0x78>)
 800095a:	2200      	movs	r2, #0
 800095c:	619a      	str	r2, [r3, #24]
  hsmbus2.Init.OwnAddress2Masks = SMBUS_OA2_NOMASK;
 800095e:	4b12      	ldr	r3, [pc, #72]	; (80009a8 <MX_I2C2_SMBUS_Init+0x78>)
 8000960:	2200      	movs	r2, #0
 8000962:	61da      	str	r2, [r3, #28]
  hsmbus2.Init.GeneralCallMode = SMBUS_GENERALCALL_DISABLE;
 8000964:	4b10      	ldr	r3, [pc, #64]	; (80009a8 <MX_I2C2_SMBUS_Init+0x78>)
 8000966:	2200      	movs	r2, #0
 8000968:	621a      	str	r2, [r3, #32]
  hsmbus2.Init.NoStretchMode = SMBUS_NOSTRETCH_DISABLE;
 800096a:	4b0f      	ldr	r3, [pc, #60]	; (80009a8 <MX_I2C2_SMBUS_Init+0x78>)
 800096c:	2200      	movs	r2, #0
 800096e:	625a      	str	r2, [r3, #36]	; 0x24
  hsmbus2.Init.PacketErrorCheckMode = SMBUS_PEC_DISABLE;
 8000970:	4b0d      	ldr	r3, [pc, #52]	; (80009a8 <MX_I2C2_SMBUS_Init+0x78>)
 8000972:	2200      	movs	r2, #0
 8000974:	629a      	str	r2, [r3, #40]	; 0x28
  hsmbus2.Init.PeripheralMode = SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE;
 8000976:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <MX_I2C2_SMBUS_Init+0x78>)
 8000978:	2200      	movs	r2, #0
 800097a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsmbus2.Init.SMBusTimeout = 0x00008186;
 800097c:	4b0a      	ldr	r3, [pc, #40]	; (80009a8 <MX_I2C2_SMBUS_Init+0x78>)
 800097e:	f248 1286 	movw	r2, #33158	; 0x8186
 8000982:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_SMBUS_Init(&hsmbus2) != HAL_OK)
 8000984:	4808      	ldr	r0, [pc, #32]	; (80009a8 <MX_I2C2_SMBUS_Init+0x78>)
 8000986:	f006 fa43 	bl	8006e10 <HAL_SMBUS_Init>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_I2C2_SMBUS_Init+0x64>
  {
    Error_Handler();
 8000990:	f000 fdfa 	bl	8001588 <Error_Handler>
  }

  /** configuration Alert Mode
  */
  if (HAL_SMBUS_EnableAlert_IT(&hsmbus2) != HAL_OK)
 8000994:	4804      	ldr	r0, [pc, #16]	; (80009a8 <MX_I2C2_SMBUS_Init+0x78>)
 8000996:	f006 faf3 	bl	8006f80 <HAL_SMBUS_EnableAlert_IT>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_I2C2_SMBUS_Init+0x74>
  {
    Error_Handler();
 80009a0:	f000 fdf2 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80009a4:	bf00      	nop
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	20000168 	.word	0x20000168
 80009ac:	40005800 	.word	0x40005800
 80009b0:	00707cbb 	.word	0x00707cbb

080009b4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80009b8:	4b22      	ldr	r3, [pc, #136]	; (8000a44 <MX_LPUART1_UART_Init+0x90>)
 80009ba:	4a23      	ldr	r2, [pc, #140]	; (8000a48 <MX_LPUART1_UART_Init+0x94>)
 80009bc:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 80009be:	4b21      	ldr	r3, [pc, #132]	; (8000a44 <MX_LPUART1_UART_Init+0x90>)
 80009c0:	4a22      	ldr	r2, [pc, #136]	; (8000a4c <MX_LPUART1_UART_Init+0x98>)
 80009c2:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 80009c4:	4b1f      	ldr	r3, [pc, #124]	; (8000a44 <MX_LPUART1_UART_Init+0x90>)
 80009c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009ca:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80009cc:	4b1d      	ldr	r3, [pc, #116]	; (8000a44 <MX_LPUART1_UART_Init+0x90>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80009d2:	4b1c      	ldr	r3, [pc, #112]	; (8000a44 <MX_LPUART1_UART_Init+0x90>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80009d8:	4b1a      	ldr	r3, [pc, #104]	; (8000a44 <MX_LPUART1_UART_Init+0x90>)
 80009da:	220c      	movs	r2, #12
 80009dc:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009de:	4b19      	ldr	r3, [pc, #100]	; (8000a44 <MX_LPUART1_UART_Init+0x90>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009e4:	4b17      	ldr	r3, [pc, #92]	; (8000a44 <MX_LPUART1_UART_Init+0x90>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009ea:	4b16      	ldr	r3, [pc, #88]	; (8000a44 <MX_LPUART1_UART_Init+0x90>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009f0:	4b14      	ldr	r3, [pc, #80]	; (8000a44 <MX_LPUART1_UART_Init+0x90>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80009f6:	4b13      	ldr	r3, [pc, #76]	; (8000a44 <MX_LPUART1_UART_Init+0x90>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80009fc:	4811      	ldr	r0, [pc, #68]	; (8000a44 <MX_LPUART1_UART_Init+0x90>)
 80009fe:	f007 fd43 	bl	8008488 <HAL_UART_Init>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8000a08:	f000 fdbe 	bl	8001588 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	480d      	ldr	r0, [pc, #52]	; (8000a44 <MX_LPUART1_UART_Init+0x90>)
 8000a10:	f008 fa74 	bl	8008efc <HAL_UARTEx_SetTxFifoThreshold>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000a1a:	f000 fdb5 	bl	8001588 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a1e:	2100      	movs	r1, #0
 8000a20:	4808      	ldr	r0, [pc, #32]	; (8000a44 <MX_LPUART1_UART_Init+0x90>)
 8000a22:	f008 faa9 	bl	8008f78 <HAL_UARTEx_SetRxFifoThreshold>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000a2c:	f000 fdac 	bl	8001588 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000a30:	4804      	ldr	r0, [pc, #16]	; (8000a44 <MX_LPUART1_UART_Init+0x90>)
 8000a32:	f008 fa2a 	bl	8008e8a <HAL_UARTEx_DisableFifoMode>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000a3c:	f000 fda4 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000a40:	bf00      	nop
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	200001b8 	.word	0x200001b8
 8000a48:	40008000 	.word	0x40008000
 8000a4c:	00033324 	.word	0x00033324

08000a50 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a54:	4b23      	ldr	r3, [pc, #140]	; (8000ae4 <MX_USART2_UART_Init+0x94>)
 8000a56:	4a24      	ldr	r2, [pc, #144]	; (8000ae8 <MX_USART2_UART_Init+0x98>)
 8000a58:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a5a:	4b22      	ldr	r3, [pc, #136]	; (8000ae4 <MX_USART2_UART_Init+0x94>)
 8000a5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a60:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a62:	4b20      	ldr	r3, [pc, #128]	; (8000ae4 <MX_USART2_UART_Init+0x94>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a68:	4b1e      	ldr	r3, [pc, #120]	; (8000ae4 <MX_USART2_UART_Init+0x94>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a6e:	4b1d      	ldr	r3, [pc, #116]	; (8000ae4 <MX_USART2_UART_Init+0x94>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a74:	4b1b      	ldr	r3, [pc, #108]	; (8000ae4 <MX_USART2_UART_Init+0x94>)
 8000a76:	220c      	movs	r2, #12
 8000a78:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8000a7a:	4b1a      	ldr	r3, [pc, #104]	; (8000ae4 <MX_USART2_UART_Init+0x94>)
 8000a7c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000a80:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a82:	4b18      	ldr	r3, [pc, #96]	; (8000ae4 <MX_USART2_UART_Init+0x94>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a88:	4b16      	ldr	r3, [pc, #88]	; (8000ae4 <MX_USART2_UART_Init+0x94>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a8e:	4b15      	ldr	r3, [pc, #84]	; (8000ae4 <MX_USART2_UART_Init+0x94>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a94:	4b13      	ldr	r3, [pc, #76]	; (8000ae4 <MX_USART2_UART_Init+0x94>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a9a:	4812      	ldr	r0, [pc, #72]	; (8000ae4 <MX_USART2_UART_Init+0x94>)
 8000a9c:	f007 fcf4 	bl	8008488 <HAL_UART_Init>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8000aa6:	f000 fd6f 	bl	8001588 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aaa:	2100      	movs	r1, #0
 8000aac:	480d      	ldr	r0, [pc, #52]	; (8000ae4 <MX_USART2_UART_Init+0x94>)
 8000aae:	f008 fa25 	bl	8008efc <HAL_UARTEx_SetTxFifoThreshold>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8000ab8:	f000 fd66 	bl	8001588 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000abc:	2100      	movs	r1, #0
 8000abe:	4809      	ldr	r0, [pc, #36]	; (8000ae4 <MX_USART2_UART_Init+0x94>)
 8000ac0:	f008 fa5a 	bl	8008f78 <HAL_UARTEx_SetRxFifoThreshold>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8000aca:	f000 fd5d 	bl	8001588 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000ace:	4805      	ldr	r0, [pc, #20]	; (8000ae4 <MX_USART2_UART_Init+0x94>)
 8000ad0:	f008 f9db 	bl	8008e8a <HAL_UARTEx_DisableFifoMode>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8000ada:	f000 fd55 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	20000248 	.word	0x20000248
 8000ae8:	40004400 	.word	0x40004400

08000aec <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000af0:	4b22      	ldr	r3, [pc, #136]	; (8000b7c <MX_USART3_UART_Init+0x90>)
 8000af2:	4a23      	ldr	r2, [pc, #140]	; (8000b80 <MX_USART3_UART_Init+0x94>)
 8000af4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000af6:	4b21      	ldr	r3, [pc, #132]	; (8000b7c <MX_USART3_UART_Init+0x90>)
 8000af8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000afc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000afe:	4b1f      	ldr	r3, [pc, #124]	; (8000b7c <MX_USART3_UART_Init+0x90>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b04:	4b1d      	ldr	r3, [pc, #116]	; (8000b7c <MX_USART3_UART_Init+0x90>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b0a:	4b1c      	ldr	r3, [pc, #112]	; (8000b7c <MX_USART3_UART_Init+0x90>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b10:	4b1a      	ldr	r3, [pc, #104]	; (8000b7c <MX_USART3_UART_Init+0x90>)
 8000b12:	220c      	movs	r2, #12
 8000b14:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b16:	4b19      	ldr	r3, [pc, #100]	; (8000b7c <MX_USART3_UART_Init+0x90>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b1c:	4b17      	ldr	r3, [pc, #92]	; (8000b7c <MX_USART3_UART_Init+0x90>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b22:	4b16      	ldr	r3, [pc, #88]	; (8000b7c <MX_USART3_UART_Init+0x90>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b28:	4b14      	ldr	r3, [pc, #80]	; (8000b7c <MX_USART3_UART_Init+0x90>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b2e:	4b13      	ldr	r3, [pc, #76]	; (8000b7c <MX_USART3_UART_Init+0x90>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b34:	4811      	ldr	r0, [pc, #68]	; (8000b7c <MX_USART3_UART_Init+0x90>)
 8000b36:	f007 fca7 	bl	8008488 <HAL_UART_Init>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000b40:	f000 fd22 	bl	8001588 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b44:	2100      	movs	r1, #0
 8000b46:	480d      	ldr	r0, [pc, #52]	; (8000b7c <MX_USART3_UART_Init+0x90>)
 8000b48:	f008 f9d8 	bl	8008efc <HAL_UARTEx_SetTxFifoThreshold>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000b52:	f000 fd19 	bl	8001588 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b56:	2100      	movs	r1, #0
 8000b58:	4808      	ldr	r0, [pc, #32]	; (8000b7c <MX_USART3_UART_Init+0x90>)
 8000b5a:	f008 fa0d 	bl	8008f78 <HAL_UARTEx_SetRxFifoThreshold>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000b64:	f000 fd10 	bl	8001588 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b68:	4804      	ldr	r0, [pc, #16]	; (8000b7c <MX_USART3_UART_Init+0x90>)
 8000b6a:	f008 f98e 	bl	8008e8a <HAL_UARTEx_DisableFifoMode>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000b74:	f000 fd08 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b78:	bf00      	nop
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	200002d8 	.word	0x200002d8
 8000b80:	40004800 	.word	0x40004800

08000b84 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockB1.Instance = SAI1_Block_B;
 8000b88:	4b45      	ldr	r3, [pc, #276]	; (8000ca0 <MX_SAI1_Init+0x11c>)
 8000b8a:	4a46      	ldr	r2, [pc, #280]	; (8000ca4 <MX_SAI1_Init+0x120>)
 8000b8c:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000b8e:	4b44      	ldr	r3, [pc, #272]	; (8000ca0 <MX_SAI1_Init+0x11c>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000b94:	4b42      	ldr	r3, [pc, #264]	; (8000ca0 <MX_SAI1_Init+0x11c>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 8000b9a:	4b41      	ldr	r3, [pc, #260]	; (8000ca0 <MX_SAI1_Init+0x11c>)
 8000b9c:	2240      	movs	r2, #64	; 0x40
 8000b9e:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000ba0:	4b3f      	ldr	r3, [pc, #252]	; (8000ca0 <MX_SAI1_Init+0x11c>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000ba6:	4b3e      	ldr	r3, [pc, #248]	; (8000ca0 <MX_SAI1_Init+0x11c>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000bac:	4b3c      	ldr	r3, [pc, #240]	; (8000ca0 <MX_SAI1_Init+0x11c>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000bb2:	4b3b      	ldr	r3, [pc, #236]	; (8000ca0 <MX_SAI1_Init+0x11c>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000bb8:	4b39      	ldr	r3, [pc, #228]	; (8000ca0 <MX_SAI1_Init+0x11c>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8000bbe:	4b38      	ldr	r3, [pc, #224]	; (8000ca0 <MX_SAI1_Init+0x11c>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000bc4:	4b36      	ldr	r3, [pc, #216]	; (8000ca0 <MX_SAI1_Init+0x11c>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000bca:	4b35      	ldr	r3, [pc, #212]	; (8000ca0 <MX_SAI1_Init+0x11c>)
 8000bcc:	4a36      	ldr	r2, [pc, #216]	; (8000ca8 <MX_SAI1_Init+0x124>)
 8000bce:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000bd0:	4b33      	ldr	r3, [pc, #204]	; (8000ca0 <MX_SAI1_Init+0x11c>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000bd6:	4b32      	ldr	r3, [pc, #200]	; (8000ca0 <MX_SAI1_Init+0x11c>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000bdc:	4b30      	ldr	r3, [pc, #192]	; (8000ca0 <MX_SAI1_Init+0x11c>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000be2:	4b2f      	ldr	r3, [pc, #188]	; (8000ca0 <MX_SAI1_Init+0x11c>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.PdmInit.Activation = DISABLE;
 8000be8:	4b2d      	ldr	r3, [pc, #180]	; (8000ca0 <MX_SAI1_Init+0x11c>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.PdmInit.MicPairsNbr = 0;
 8000bf0:	4b2b      	ldr	r3, [pc, #172]	; (8000ca0 <MX_SAI1_Init+0x11c>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8000bf6:	4b2a      	ldr	r3, [pc, #168]	; (8000ca0 <MX_SAI1_Init+0x11c>)
 8000bf8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bfc:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.FrameInit.FrameLength = 8;
 8000bfe:	4b28      	ldr	r3, [pc, #160]	; (8000ca0 <MX_SAI1_Init+0x11c>)
 8000c00:	2208      	movs	r2, #8
 8000c02:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 8000c04:	4b26      	ldr	r3, [pc, #152]	; (8000ca0 <MX_SAI1_Init+0x11c>)
 8000c06:	2201      	movs	r2, #1
 8000c08:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000c0a:	4b25      	ldr	r3, [pc, #148]	; (8000ca0 <MX_SAI1_Init+0x11c>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000c10:	4b23      	ldr	r3, [pc, #140]	; (8000ca0 <MX_SAI1_Init+0x11c>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000c16:	4b22      	ldr	r3, [pc, #136]	; (8000ca0 <MX_SAI1_Init+0x11c>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 8000c1c:	4b20      	ldr	r3, [pc, #128]	; (8000ca0 <MX_SAI1_Init+0x11c>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000c22:	4b1f      	ldr	r3, [pc, #124]	; (8000ca0 <MX_SAI1_Init+0x11c>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 8000c28:	4b1d      	ldr	r3, [pc, #116]	; (8000ca0 <MX_SAI1_Init+0x11c>)
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 8000c2e:	4b1c      	ldr	r3, [pc, #112]	; (8000ca0 <MX_SAI1_Init+0x11c>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	671a      	str	r2, [r3, #112]	; 0x70
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8000c34:	481a      	ldr	r0, [pc, #104]	; (8000ca0 <MX_SAI1_Init+0x11c>)
 8000c36:	f005 fd9f 	bl	8006778 <HAL_SAI_Init>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <MX_SAI1_Init+0xc0>
  {
    Error_Handler();
 8000c40:	f000 fca2 	bl	8001588 <Error_Handler>
  }
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000c44:	4b19      	ldr	r3, [pc, #100]	; (8000cac <MX_SAI1_Init+0x128>)
 8000c46:	4a1a      	ldr	r2, [pc, #104]	; (8000cb0 <MX_SAI1_Init+0x12c>)
 8000c48:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000c4a:	4b18      	ldr	r3, [pc, #96]	; (8000cac <MX_SAI1_Init+0x128>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000c50:	4b16      	ldr	r3, [pc, #88]	; (8000cac <MX_SAI1_Init+0x128>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000c56:	4b15      	ldr	r3, [pc, #84]	; (8000cac <MX_SAI1_Init+0x128>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000c5c:	4b13      	ldr	r3, [pc, #76]	; (8000cac <MX_SAI1_Init+0x128>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000c62:	4b12      	ldr	r3, [pc, #72]	; (8000cac <MX_SAI1_Init+0x128>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000c68:	4b10      	ldr	r3, [pc, #64]	; (8000cac <MX_SAI1_Init+0x128>)
 8000c6a:	4a0f      	ldr	r2, [pc, #60]	; (8000ca8 <MX_SAI1_Init+0x124>)
 8000c6c:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000c6e:	4b0f      	ldr	r3, [pc, #60]	; (8000cac <MX_SAI1_Init+0x128>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000c74:	4b0d      	ldr	r3, [pc, #52]	; (8000cac <MX_SAI1_Init+0x128>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000c7a:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <MX_SAI1_Init+0x128>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000c80:	4b0a      	ldr	r3, [pc, #40]	; (8000cac <MX_SAI1_Init+0x128>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8000c86:	2302      	movs	r3, #2
 8000c88:	2200      	movs	r2, #0
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	4807      	ldr	r0, [pc, #28]	; (8000cac <MX_SAI1_Init+0x128>)
 8000c8e:	f005 fd41 	bl	8006714 <HAL_SAI_InitProtocol>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_SAI1_Init+0x118>
  {
    Error_Handler();
 8000c98:	f000 fc76 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8000c9c:	bf00      	nop
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	20000368 	.word	0x20000368
 8000ca4:	40015424 	.word	0x40015424
 8000ca8:	0002ee00 	.word	0x0002ee00
 8000cac:	200003fc 	.word	0x200003fc
 8000cb0:	40015404 	.word	0x40015404

08000cb4 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8000cb8:	4b2f      	ldr	r3, [pc, #188]	; (8000d78 <MX_SAI2_Init+0xc4>)
 8000cba:	4a30      	ldr	r2, [pc, #192]	; (8000d7c <MX_SAI2_Init+0xc8>)
 8000cbc:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000cbe:	4b2e      	ldr	r3, [pc, #184]	; (8000d78 <MX_SAI2_Init+0xc4>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8000cc4:	4b2c      	ldr	r3, [pc, #176]	; (8000d78 <MX_SAI2_Init+0xc4>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8000cca:	4b2b      	ldr	r3, [pc, #172]	; (8000d78 <MX_SAI2_Init+0xc4>)
 8000ccc:	2240      	movs	r2, #64	; 0x40
 8000cce:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000cd0:	4b29      	ldr	r3, [pc, #164]	; (8000d78 <MX_SAI2_Init+0xc4>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000cd6:	4b28      	ldr	r3, [pc, #160]	; (8000d78 <MX_SAI2_Init+0xc4>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000cdc:	4b26      	ldr	r3, [pc, #152]	; (8000d78 <MX_SAI2_Init+0xc4>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000ce2:	4b25      	ldr	r3, [pc, #148]	; (8000d78 <MX_SAI2_Init+0xc4>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000ce8:	4b23      	ldr	r3, [pc, #140]	; (8000d78 <MX_SAI2_Init+0xc4>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8000cee:	4b22      	ldr	r3, [pc, #136]	; (8000d78 <MX_SAI2_Init+0xc4>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000cf4:	4b20      	ldr	r3, [pc, #128]	; (8000d78 <MX_SAI2_Init+0xc4>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000cfa:	4b1f      	ldr	r3, [pc, #124]	; (8000d78 <MX_SAI2_Init+0xc4>)
 8000cfc:	4a20      	ldr	r2, [pc, #128]	; (8000d80 <MX_SAI2_Init+0xcc>)
 8000cfe:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000d00:	4b1d      	ldr	r3, [pc, #116]	; (8000d78 <MX_SAI2_Init+0xc4>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000d06:	4b1c      	ldr	r3, [pc, #112]	; (8000d78 <MX_SAI2_Init+0xc4>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000d0c:	4b1a      	ldr	r3, [pc, #104]	; (8000d78 <MX_SAI2_Init+0xc4>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000d12:	4b19      	ldr	r3, [pc, #100]	; (8000d78 <MX_SAI2_Init+0xc4>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.PdmInit.Activation = DISABLE;
 8000d18:	4b17      	ldr	r3, [pc, #92]	; (8000d78 <MX_SAI2_Init+0xc4>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.PdmInit.MicPairsNbr = 0;
 8000d20:	4b15      	ldr	r3, [pc, #84]	; (8000d78 <MX_SAI2_Init+0xc4>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8000d26:	4b14      	ldr	r3, [pc, #80]	; (8000d78 <MX_SAI2_Init+0xc4>)
 8000d28:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d2c:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8000d2e:	4b12      	ldr	r3, [pc, #72]	; (8000d78 <MX_SAI2_Init+0xc4>)
 8000d30:	2208      	movs	r2, #8
 8000d32:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8000d34:	4b10      	ldr	r3, [pc, #64]	; (8000d78 <MX_SAI2_Init+0xc4>)
 8000d36:	2201      	movs	r2, #1
 8000d38:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000d3a:	4b0f      	ldr	r3, [pc, #60]	; (8000d78 <MX_SAI2_Init+0xc4>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000d40:	4b0d      	ldr	r3, [pc, #52]	; (8000d78 <MX_SAI2_Init+0xc4>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000d46:	4b0c      	ldr	r3, [pc, #48]	; (8000d78 <MX_SAI2_Init+0xc4>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8000d4c:	4b0a      	ldr	r3, [pc, #40]	; (8000d78 <MX_SAI2_Init+0xc4>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000d52:	4b09      	ldr	r3, [pc, #36]	; (8000d78 <MX_SAI2_Init+0xc4>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8000d58:	4b07      	ldr	r3, [pc, #28]	; (8000d78 <MX_SAI2_Init+0xc4>)
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8000d5e:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <MX_SAI2_Init+0xc4>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	671a      	str	r2, [r3, #112]	; 0x70
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8000d64:	4804      	ldr	r0, [pc, #16]	; (8000d78 <MX_SAI2_Init+0xc4>)
 8000d66:	f005 fd07 	bl	8006778 <HAL_SAI_Init>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <MX_SAI2_Init+0xc0>
  {
    Error_Handler();
 8000d70:	f000 fc0a 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8000d74:	bf00      	nop
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	20000490 	.word	0x20000490
 8000d7c:	40015804 	.word	0x40015804
 8000d80:	0002ee00 	.word	0x0002ee00

08000d84 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d88:	4b1b      	ldr	r3, [pc, #108]	; (8000df8 <MX_SPI1_Init+0x74>)
 8000d8a:	4a1c      	ldr	r2, [pc, #112]	; (8000dfc <MX_SPI1_Init+0x78>)
 8000d8c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d8e:	4b1a      	ldr	r3, [pc, #104]	; (8000df8 <MX_SPI1_Init+0x74>)
 8000d90:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d94:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d96:	4b18      	ldr	r3, [pc, #96]	; (8000df8 <MX_SPI1_Init+0x74>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000d9c:	4b16      	ldr	r3, [pc, #88]	; (8000df8 <MX_SPI1_Init+0x74>)
 8000d9e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000da2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000da4:	4b14      	ldr	r3, [pc, #80]	; (8000df8 <MX_SPI1_Init+0x74>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000daa:	4b13      	ldr	r3, [pc, #76]	; (8000df8 <MX_SPI1_Init+0x74>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000db0:	4b11      	ldr	r3, [pc, #68]	; (8000df8 <MX_SPI1_Init+0x74>)
 8000db2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000db6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000db8:	4b0f      	ldr	r3, [pc, #60]	; (8000df8 <MX_SPI1_Init+0x74>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000dbe:	4b0e      	ldr	r3, [pc, #56]	; (8000df8 <MX_SPI1_Init+0x74>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000dc4:	4b0c      	ldr	r3, [pc, #48]	; (8000df8 <MX_SPI1_Init+0x74>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dca:	4b0b      	ldr	r3, [pc, #44]	; (8000df8 <MX_SPI1_Init+0x74>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000dd0:	4b09      	ldr	r3, [pc, #36]	; (8000df8 <MX_SPI1_Init+0x74>)
 8000dd2:	2207      	movs	r2, #7
 8000dd4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000dd6:	4b08      	ldr	r3, [pc, #32]	; (8000df8 <MX_SPI1_Init+0x74>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ddc:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <MX_SPI1_Init+0x74>)
 8000dde:	2208      	movs	r2, #8
 8000de0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000de2:	4805      	ldr	r0, [pc, #20]	; (8000df8 <MX_SPI1_Init+0x74>)
 8000de4:	f006 f91f 	bl	8007026 <HAL_SPI_Init>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000dee:	f000 fbcb 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	20000524 	.word	0x20000524
 8000dfc:	40013000 	.word	0x40013000

08000e00 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000e04:	4b1b      	ldr	r3, [pc, #108]	; (8000e74 <MX_SPI3_Init+0x74>)
 8000e06:	4a1c      	ldr	r2, [pc, #112]	; (8000e78 <MX_SPI3_Init+0x78>)
 8000e08:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000e0a:	4b1a      	ldr	r3, [pc, #104]	; (8000e74 <MX_SPI3_Init+0x74>)
 8000e0c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e10:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000e12:	4b18      	ldr	r3, [pc, #96]	; (8000e74 <MX_SPI3_Init+0x74>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000e18:	4b16      	ldr	r3, [pc, #88]	; (8000e74 <MX_SPI3_Init+0x74>)
 8000e1a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000e1e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e20:	4b14      	ldr	r3, [pc, #80]	; (8000e74 <MX_SPI3_Init+0x74>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e26:	4b13      	ldr	r3, [pc, #76]	; (8000e74 <MX_SPI3_Init+0x74>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000e2c:	4b11      	ldr	r3, [pc, #68]	; (8000e74 <MX_SPI3_Init+0x74>)
 8000e2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e32:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e34:	4b0f      	ldr	r3, [pc, #60]	; (8000e74 <MX_SPI3_Init+0x74>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e3a:	4b0e      	ldr	r3, [pc, #56]	; (8000e74 <MX_SPI3_Init+0x74>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e40:	4b0c      	ldr	r3, [pc, #48]	; (8000e74 <MX_SPI3_Init+0x74>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e46:	4b0b      	ldr	r3, [pc, #44]	; (8000e74 <MX_SPI3_Init+0x74>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000e4c:	4b09      	ldr	r3, [pc, #36]	; (8000e74 <MX_SPI3_Init+0x74>)
 8000e4e:	2207      	movs	r2, #7
 8000e50:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e52:	4b08      	ldr	r3, [pc, #32]	; (8000e74 <MX_SPI3_Init+0x74>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e58:	4b06      	ldr	r3, [pc, #24]	; (8000e74 <MX_SPI3_Init+0x74>)
 8000e5a:	2208      	movs	r2, #8
 8000e5c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000e5e:	4805      	ldr	r0, [pc, #20]	; (8000e74 <MX_SPI3_Init+0x74>)
 8000e60:	f006 f8e1 	bl	8007026 <HAL_SPI_Init>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000e6a:	f000 fb8d 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	20000588 	.word	0x20000588
 8000e78:	40003c00 	.word	0x40003c00

08000e7c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b09c      	sub	sp, #112	; 0x70
 8000e80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e82:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000e86:	2200      	movs	r2, #0
 8000e88:	601a      	str	r2, [r3, #0]
 8000e8a:	605a      	str	r2, [r3, #4]
 8000e8c:	609a      	str	r2, [r3, #8]
 8000e8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e90:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8000e9c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	605a      	str	r2, [r3, #4]
 8000ea6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ea8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	60da      	str	r2, [r3, #12]
 8000eb6:	611a      	str	r2, [r3, #16]
 8000eb8:	615a      	str	r2, [r3, #20]
 8000eba:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ebc:	463b      	mov	r3, r7
 8000ebe:	222c      	movs	r2, #44	; 0x2c
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f008 f908 	bl	80090d8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ec8:	4b5a      	ldr	r3, [pc, #360]	; (8001034 <MX_TIM1_Init+0x1b8>)
 8000eca:	4a5b      	ldr	r2, [pc, #364]	; (8001038 <MX_TIM1_Init+0x1bc>)
 8000ecc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 6399;
 8000ece:	4b59      	ldr	r3, [pc, #356]	; (8001034 <MX_TIM1_Init+0x1b8>)
 8000ed0:	f641 02ff 	movw	r2, #6399	; 0x18ff
 8000ed4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ed6:	4b57      	ldr	r3, [pc, #348]	; (8001034 <MX_TIM1_Init+0x1b8>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8000edc:	4b55      	ldr	r3, [pc, #340]	; (8001034 <MX_TIM1_Init+0x1b8>)
 8000ede:	2263      	movs	r2, #99	; 0x63
 8000ee0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ee2:	4b54      	ldr	r3, [pc, #336]	; (8001034 <MX_TIM1_Init+0x1b8>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ee8:	4b52      	ldr	r3, [pc, #328]	; (8001034 <MX_TIM1_Init+0x1b8>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eee:	4b51      	ldr	r3, [pc, #324]	; (8001034 <MX_TIM1_Init+0x1b8>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ef4:	484f      	ldr	r0, [pc, #316]	; (8001034 <MX_TIM1_Init+0x1b8>)
 8000ef6:	f006 f939 	bl	800716c <HAL_TIM_Base_Init>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8000f00:	f000 fb42 	bl	8001588 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f08:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f0a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4848      	ldr	r0, [pc, #288]	; (8001034 <MX_TIM1_Init+0x1b8>)
 8000f12:	f006 fbf3 	bl	80076fc <HAL_TIM_ConfigClockSource>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000f1c:	f000 fb34 	bl	8001588 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000f20:	4844      	ldr	r0, [pc, #272]	; (8001034 <MX_TIM1_Init+0x1b8>)
 8000f22:	f006 f97a 	bl	800721a <HAL_TIM_PWM_Init>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8000f2c:	f000 fb2c 	bl	8001588 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f30:	2300      	movs	r3, #0
 8000f32:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000f34:	2300      	movs	r3, #0
 8000f36:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f3c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f40:	4619      	mov	r1, r3
 8000f42:	483c      	ldr	r0, [pc, #240]	; (8001034 <MX_TIM1_Init+0x1b8>)
 8000f44:	f007 f8d4 	bl	80080f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8000f4e:	f000 fb1b 	bl	8001588 <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 8000f52:	2301      	movs	r3, #1
 8000f54:	64bb      	str	r3, [r7, #72]	; 0x48
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 8000f56:	2301      	movs	r3, #1
 8000f58:	64fb      	str	r3, [r7, #76]	; 0x4c
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8000f5e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f62:	461a      	mov	r2, r3
 8000f64:	2101      	movs	r1, #1
 8000f66:	4833      	ldr	r0, [pc, #204]	; (8001034 <MX_TIM1_Init+0x1b8>)
 8000f68:	f007 f9c8 	bl	80082fc <HAL_TIMEx_ConfigBreakInput>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8000f72:	f000 fb09 	bl	8001588 <Error_Handler>
  }
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 8000f76:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	2102      	movs	r1, #2
 8000f7e:	482d      	ldr	r0, [pc, #180]	; (8001034 <MX_TIM1_Init+0x1b8>)
 8000f80:	f007 f9bc 	bl	80082fc <HAL_TIMEx_ConfigBreakInput>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 8000f8a:	f000 fafd 	bl	8001588 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f8e:	2360      	movs	r3, #96	; 0x60
 8000f90:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8000f92:	2300      	movs	r3, #0
 8000f94:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f96:	2300      	movs	r3, #0
 8000f98:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000faa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fae:	2200      	movs	r2, #0
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4820      	ldr	r0, [pc, #128]	; (8001034 <MX_TIM1_Init+0x1b8>)
 8000fb4:	f006 fa8e 	bl	80074d4 <HAL_TIM_PWM_ConfigChannel>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8000fbe:	f000 fae3 	bl	8001588 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000fc2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fc6:	2204      	movs	r2, #4
 8000fc8:	4619      	mov	r1, r3
 8000fca:	481a      	ldr	r0, [pc, #104]	; (8001034 <MX_TIM1_Init+0x1b8>)
 8000fcc:	f006 fa82 	bl	80074d4 <HAL_TIM_PWM_ConfigChannel>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_TIM1_Init+0x15e>
  {
    Error_Handler();
 8000fd6:	f000 fad7 	bl	8001588 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000fda:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000fde:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8000fe0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fe4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000fea:	2300      	movs	r3, #0
 8000fec:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8000fee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ff2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ff4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ff8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_ENABLE;
 8000ffe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001002:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001004:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001008:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 800100a:	2300      	movs	r3, #0
 800100c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800100e:	2300      	movs	r3, #0
 8001010:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001012:	463b      	mov	r3, r7
 8001014:	4619      	mov	r1, r3
 8001016:	4807      	ldr	r0, [pc, #28]	; (8001034 <MX_TIM1_Init+0x1b8>)
 8001018:	f007 f8f2 	bl	8008200 <HAL_TIMEx_ConfigBreakDeadTime>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <MX_TIM1_Init+0x1aa>
  {
    Error_Handler();
 8001022:	f000 fab1 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001026:	4803      	ldr	r0, [pc, #12]	; (8001034 <MX_TIM1_Init+0x1b8>)
 8001028:	f000 ff8c 	bl	8001f44 <HAL_TIM_MspPostInit>

}
 800102c:	bf00      	nop
 800102e:	3770      	adds	r7, #112	; 0x70
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	200005ec 	.word	0x200005ec
 8001038:	40012c00 	.word	0x40012c00

0800103c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b08a      	sub	sp, #40	; 0x28
 8001040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001042:	f107 031c 	add.w	r3, r7, #28
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	605a      	str	r2, [r3, #4]
 800104c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800104e:	463b      	mov	r3, r7
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]
 800105a:	611a      	str	r2, [r3, #16]
 800105c:	615a      	str	r2, [r3, #20]
 800105e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001060:	4b27      	ldr	r3, [pc, #156]	; (8001100 <MX_TIM2_Init+0xc4>)
 8001062:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001066:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001068:	4b25      	ldr	r3, [pc, #148]	; (8001100 <MX_TIM2_Init+0xc4>)
 800106a:	2200      	movs	r2, #0
 800106c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800106e:	4b24      	ldr	r3, [pc, #144]	; (8001100 <MX_TIM2_Init+0xc4>)
 8001070:	2200      	movs	r2, #0
 8001072:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001074:	4b22      	ldr	r3, [pc, #136]	; (8001100 <MX_TIM2_Init+0xc4>)
 8001076:	f04f 32ff 	mov.w	r2, #4294967295
 800107a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800107c:	4b20      	ldr	r3, [pc, #128]	; (8001100 <MX_TIM2_Init+0xc4>)
 800107e:	2200      	movs	r2, #0
 8001080:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001082:	4b1f      	ldr	r3, [pc, #124]	; (8001100 <MX_TIM2_Init+0xc4>)
 8001084:	2200      	movs	r2, #0
 8001086:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001088:	481d      	ldr	r0, [pc, #116]	; (8001100 <MX_TIM2_Init+0xc4>)
 800108a:	f006 f8c6 	bl	800721a <HAL_TIM_PWM_Init>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001094:	f000 fa78 	bl	8001588 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001098:	2300      	movs	r3, #0
 800109a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800109c:	2300      	movs	r3, #0
 800109e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010a0:	f107 031c 	add.w	r3, r7, #28
 80010a4:	4619      	mov	r1, r3
 80010a6:	4816      	ldr	r0, [pc, #88]	; (8001100 <MX_TIM2_Init+0xc4>)
 80010a8:	f007 f822 	bl	80080f0 <HAL_TIMEx_MasterConfigSynchronization>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80010b2:	f000 fa69 	bl	8001588 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010b6:	2360      	movs	r3, #96	; 0x60
 80010b8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80010ba:	2300      	movs	r3, #0
 80010bc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010be:	2300      	movs	r3, #0
 80010c0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010c2:	2300      	movs	r3, #0
 80010c4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010c6:	463b      	mov	r3, r7
 80010c8:	2200      	movs	r2, #0
 80010ca:	4619      	mov	r1, r3
 80010cc:	480c      	ldr	r0, [pc, #48]	; (8001100 <MX_TIM2_Init+0xc4>)
 80010ce:	f006 fa01 	bl	80074d4 <HAL_TIM_PWM_ConfigChannel>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80010d8:	f000 fa56 	bl	8001588 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80010dc:	463b      	mov	r3, r7
 80010de:	2208      	movs	r2, #8
 80010e0:	4619      	mov	r1, r3
 80010e2:	4807      	ldr	r0, [pc, #28]	; (8001100 <MX_TIM2_Init+0xc4>)
 80010e4:	f006 f9f6 	bl	80074d4 <HAL_TIM_PWM_ConfigChannel>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80010ee:	f000 fa4b 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80010f2:	4803      	ldr	r0, [pc, #12]	; (8001100 <MX_TIM2_Init+0xc4>)
 80010f4:	f000 ff26 	bl	8001f44 <HAL_TIM_MspPostInit>

}
 80010f8:	bf00      	nop
 80010fa:	3728      	adds	r7, #40	; 0x28
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20000638 	.word	0x20000638

08001104 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b08a      	sub	sp, #40	; 0x28
 8001108:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800110a:	f107 031c 	add.w	r3, r7, #28
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	605a      	str	r2, [r3, #4]
 8001114:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001116:	463b      	mov	r3, r7
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]
 800111e:	609a      	str	r2, [r3, #8]
 8001120:	60da      	str	r2, [r3, #12]
 8001122:	611a      	str	r2, [r3, #16]
 8001124:	615a      	str	r2, [r3, #20]
 8001126:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001128:	4b27      	ldr	r3, [pc, #156]	; (80011c8 <MX_TIM3_Init+0xc4>)
 800112a:	4a28      	ldr	r2, [pc, #160]	; (80011cc <MX_TIM3_Init+0xc8>)
 800112c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800112e:	4b26      	ldr	r3, [pc, #152]	; (80011c8 <MX_TIM3_Init+0xc4>)
 8001130:	2200      	movs	r2, #0
 8001132:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001134:	4b24      	ldr	r3, [pc, #144]	; (80011c8 <MX_TIM3_Init+0xc4>)
 8001136:	2200      	movs	r2, #0
 8001138:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800113a:	4b23      	ldr	r3, [pc, #140]	; (80011c8 <MX_TIM3_Init+0xc4>)
 800113c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001140:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001142:	4b21      	ldr	r3, [pc, #132]	; (80011c8 <MX_TIM3_Init+0xc4>)
 8001144:	2200      	movs	r2, #0
 8001146:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001148:	4b1f      	ldr	r3, [pc, #124]	; (80011c8 <MX_TIM3_Init+0xc4>)
 800114a:	2200      	movs	r2, #0
 800114c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800114e:	481e      	ldr	r0, [pc, #120]	; (80011c8 <MX_TIM3_Init+0xc4>)
 8001150:	f006 f863 	bl	800721a <HAL_TIM_PWM_Init>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800115a:	f000 fa15 	bl	8001588 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800115e:	2300      	movs	r3, #0
 8001160:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001162:	2300      	movs	r3, #0
 8001164:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001166:	f107 031c 	add.w	r3, r7, #28
 800116a:	4619      	mov	r1, r3
 800116c:	4816      	ldr	r0, [pc, #88]	; (80011c8 <MX_TIM3_Init+0xc4>)
 800116e:	f006 ffbf 	bl	80080f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001178:	f000 fa06 	bl	8001588 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800117c:	2360      	movs	r3, #96	; 0x60
 800117e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001180:	2300      	movs	r3, #0
 8001182:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001184:	2300      	movs	r3, #0
 8001186:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001188:	2300      	movs	r3, #0
 800118a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800118c:	463b      	mov	r3, r7
 800118e:	2204      	movs	r2, #4
 8001190:	4619      	mov	r1, r3
 8001192:	480d      	ldr	r0, [pc, #52]	; (80011c8 <MX_TIM3_Init+0xc4>)
 8001194:	f006 f99e 	bl	80074d4 <HAL_TIM_PWM_ConfigChannel>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800119e:	f000 f9f3 	bl	8001588 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80011a2:	463b      	mov	r3, r7
 80011a4:	2208      	movs	r2, #8
 80011a6:	4619      	mov	r1, r3
 80011a8:	4807      	ldr	r0, [pc, #28]	; (80011c8 <MX_TIM3_Init+0xc4>)
 80011aa:	f006 f993 	bl	80074d4 <HAL_TIM_PWM_ConfigChannel>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 80011b4:	f000 f9e8 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80011b8:	4803      	ldr	r0, [pc, #12]	; (80011c8 <MX_TIM3_Init+0xc4>)
 80011ba:	f000 fec3 	bl	8001f44 <HAL_TIM_MspPostInit>

}
 80011be:	bf00      	nop
 80011c0:	3728      	adds	r7, #40	; 0x28
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	20000684 	.word	0x20000684
 80011cc:	40000400 	.word	0x40000400

080011d0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b08e      	sub	sp, #56	; 0x38
 80011d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011da:	2200      	movs	r2, #0
 80011dc:	601a      	str	r2, [r3, #0]
 80011de:	605a      	str	r2, [r3, #4]
 80011e0:	609a      	str	r2, [r3, #8]
 80011e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011e4:	f107 031c 	add.w	r3, r7, #28
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	605a      	str	r2, [r3, #4]
 80011ee:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011f0:	463b      	mov	r3, r7
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	605a      	str	r2, [r3, #4]
 80011f8:	609a      	str	r2, [r3, #8]
 80011fa:	60da      	str	r2, [r3, #12]
 80011fc:	611a      	str	r2, [r3, #16]
 80011fe:	615a      	str	r2, [r3, #20]
 8001200:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001202:	4b32      	ldr	r3, [pc, #200]	; (80012cc <MX_TIM4_Init+0xfc>)
 8001204:	4a32      	ldr	r2, [pc, #200]	; (80012d0 <MX_TIM4_Init+0x100>)
 8001206:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 6399;
 8001208:	4b30      	ldr	r3, [pc, #192]	; (80012cc <MX_TIM4_Init+0xfc>)
 800120a:	f641 02ff 	movw	r2, #6399	; 0x18ff
 800120e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001210:	4b2e      	ldr	r3, [pc, #184]	; (80012cc <MX_TIM4_Init+0xfc>)
 8001212:	2200      	movs	r2, #0
 8001214:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 8001216:	4b2d      	ldr	r3, [pc, #180]	; (80012cc <MX_TIM4_Init+0xfc>)
 8001218:	2263      	movs	r2, #99	; 0x63
 800121a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800121c:	4b2b      	ldr	r3, [pc, #172]	; (80012cc <MX_TIM4_Init+0xfc>)
 800121e:	2200      	movs	r2, #0
 8001220:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001222:	4b2a      	ldr	r3, [pc, #168]	; (80012cc <MX_TIM4_Init+0xfc>)
 8001224:	2200      	movs	r2, #0
 8001226:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001228:	4828      	ldr	r0, [pc, #160]	; (80012cc <MX_TIM4_Init+0xfc>)
 800122a:	f005 ff9f 	bl	800716c <HAL_TIM_Base_Init>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001234:	f000 f9a8 	bl	8001588 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001238:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800123c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800123e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001242:	4619      	mov	r1, r3
 8001244:	4821      	ldr	r0, [pc, #132]	; (80012cc <MX_TIM4_Init+0xfc>)
 8001246:	f006 fa59 	bl	80076fc <HAL_TIM_ConfigClockSource>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001250:	f000 f99a 	bl	8001588 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001254:	481d      	ldr	r0, [pc, #116]	; (80012cc <MX_TIM4_Init+0xfc>)
 8001256:	f005 ffe0 	bl	800721a <HAL_TIM_PWM_Init>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001260:	f000 f992 	bl	8001588 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001264:	2300      	movs	r3, #0
 8001266:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001268:	2300      	movs	r3, #0
 800126a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800126c:	f107 031c 	add.w	r3, r7, #28
 8001270:	4619      	mov	r1, r3
 8001272:	4816      	ldr	r0, [pc, #88]	; (80012cc <MX_TIM4_Init+0xfc>)
 8001274:	f006 ff3c 	bl	80080f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800127e:	f000 f983 	bl	8001588 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001282:	2360      	movs	r3, #96	; 0x60
 8001284:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001286:	2300      	movs	r3, #0
 8001288:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800128a:	2300      	movs	r3, #0
 800128c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800128e:	2300      	movs	r3, #0
 8001290:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001292:	463b      	mov	r3, r7
 8001294:	2208      	movs	r2, #8
 8001296:	4619      	mov	r1, r3
 8001298:	480c      	ldr	r0, [pc, #48]	; (80012cc <MX_TIM4_Init+0xfc>)
 800129a:	f006 f91b 	bl	80074d4 <HAL_TIM_PWM_ConfigChannel>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80012a4:	f000 f970 	bl	8001588 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80012a8:	463b      	mov	r3, r7
 80012aa:	220c      	movs	r2, #12
 80012ac:	4619      	mov	r1, r3
 80012ae:	4807      	ldr	r0, [pc, #28]	; (80012cc <MX_TIM4_Init+0xfc>)
 80012b0:	f006 f910 	bl	80074d4 <HAL_TIM_PWM_ConfigChannel>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 80012ba:	f000 f965 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80012be:	4803      	ldr	r0, [pc, #12]	; (80012cc <MX_TIM4_Init+0xfc>)
 80012c0:	f000 fe40 	bl	8001f44 <HAL_TIM_MspPostInit>

}
 80012c4:	bf00      	nop
 80012c6:	3738      	adds	r7, #56	; 0x38
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	200006d0 	.word	0x200006d0
 80012d0:	40000800 	.word	0x40000800

080012d4 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b096      	sub	sp, #88	; 0x58
 80012d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012da:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	605a      	str	r2, [r3, #4]
 80012e4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	605a      	str	r2, [r3, #4]
 80012f0:	609a      	str	r2, [r3, #8]
 80012f2:	60da      	str	r2, [r3, #12]
 80012f4:	611a      	str	r2, [r3, #16]
 80012f6:	615a      	str	r2, [r3, #20]
 80012f8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012fa:	1d3b      	adds	r3, r7, #4
 80012fc:	222c      	movs	r2, #44	; 0x2c
 80012fe:	2100      	movs	r1, #0
 8001300:	4618      	mov	r0, r3
 8001302:	f007 fee9 	bl	80090d8 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001306:	4b33      	ldr	r3, [pc, #204]	; (80013d4 <MX_TIM15_Init+0x100>)
 8001308:	4a33      	ldr	r2, [pc, #204]	; (80013d8 <MX_TIM15_Init+0x104>)
 800130a:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 800130c:	4b31      	ldr	r3, [pc, #196]	; (80013d4 <MX_TIM15_Init+0x100>)
 800130e:	2200      	movs	r2, #0
 8001310:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001312:	4b30      	ldr	r3, [pc, #192]	; (80013d4 <MX_TIM15_Init+0x100>)
 8001314:	2200      	movs	r2, #0
 8001316:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8001318:	4b2e      	ldr	r3, [pc, #184]	; (80013d4 <MX_TIM15_Init+0x100>)
 800131a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800131e:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001320:	4b2c      	ldr	r3, [pc, #176]	; (80013d4 <MX_TIM15_Init+0x100>)
 8001322:	2200      	movs	r2, #0
 8001324:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001326:	4b2b      	ldr	r3, [pc, #172]	; (80013d4 <MX_TIM15_Init+0x100>)
 8001328:	2200      	movs	r2, #0
 800132a:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800132c:	4b29      	ldr	r3, [pc, #164]	; (80013d4 <MX_TIM15_Init+0x100>)
 800132e:	2200      	movs	r2, #0
 8001330:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001332:	4828      	ldr	r0, [pc, #160]	; (80013d4 <MX_TIM15_Init+0x100>)
 8001334:	f005 ff71 	bl	800721a <HAL_TIM_PWM_Init>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 800133e:	f000 f923 	bl	8001588 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001342:	2300      	movs	r3, #0
 8001344:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001346:	2300      	movs	r3, #0
 8001348:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800134a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800134e:	4619      	mov	r1, r3
 8001350:	4820      	ldr	r0, [pc, #128]	; (80013d4 <MX_TIM15_Init+0x100>)
 8001352:	f006 fecd 	bl	80080f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 800135c:	f000 f914 	bl	8001588 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001360:	2360      	movs	r3, #96	; 0x60
 8001362:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001364:	2300      	movs	r3, #0
 8001366:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001368:	2300      	movs	r3, #0
 800136a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800136c:	2300      	movs	r3, #0
 800136e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001370:	2300      	movs	r3, #0
 8001372:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001374:	2300      	movs	r3, #0
 8001376:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001378:	2300      	movs	r3, #0
 800137a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800137c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001380:	2200      	movs	r2, #0
 8001382:	4619      	mov	r1, r3
 8001384:	4813      	ldr	r0, [pc, #76]	; (80013d4 <MX_TIM15_Init+0x100>)
 8001386:	f006 f8a5 	bl	80074d4 <HAL_TIM_PWM_ConfigChannel>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8001390:	f000 f8fa 	bl	8001588 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001394:	2300      	movs	r3, #0
 8001396:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001398:	2300      	movs	r3, #0
 800139a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800139c:	2300      	movs	r3, #0
 800139e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80013a0:	2300      	movs	r3, #0
 80013a2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013a4:	2300      	movs	r3, #0
 80013a6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013ac:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013ae:	2300      	movs	r3, #0
 80013b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80013b2:	1d3b      	adds	r3, r7, #4
 80013b4:	4619      	mov	r1, r3
 80013b6:	4807      	ldr	r0, [pc, #28]	; (80013d4 <MX_TIM15_Init+0x100>)
 80013b8:	f006 ff22 	bl	8008200 <HAL_TIMEx_ConfigBreakDeadTime>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_TIM15_Init+0xf2>
  {
    Error_Handler();
 80013c2:	f000 f8e1 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80013c6:	4803      	ldr	r0, [pc, #12]	; (80013d4 <MX_TIM15_Init+0x100>)
 80013c8:	f000 fdbc 	bl	8001f44 <HAL_TIM_MspPostInit>

}
 80013cc:	bf00      	nop
 80013ce:	3758      	adds	r7, #88	; 0x58
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	2000071c 	.word	0x2000071c
 80013d8:	40014000 	.word	0x40014000

080013dc <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80013e0:	bf00      	nop
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
	...

080013ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b08e      	sub	sp, #56	; 0x38
 80013f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]
 80013fa:	605a      	str	r2, [r3, #4]
 80013fc:	609a      	str	r2, [r3, #8]
 80013fe:	60da      	str	r2, [r3, #12]
 8001400:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001402:	4b5d      	ldr	r3, [pc, #372]	; (8001578 <MX_GPIO_Init+0x18c>)
 8001404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001406:	4a5c      	ldr	r2, [pc, #368]	; (8001578 <MX_GPIO_Init+0x18c>)
 8001408:	f043 0310 	orr.w	r3, r3, #16
 800140c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800140e:	4b5a      	ldr	r3, [pc, #360]	; (8001578 <MX_GPIO_Init+0x18c>)
 8001410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001412:	f003 0310 	and.w	r3, r3, #16
 8001416:	623b      	str	r3, [r7, #32]
 8001418:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800141a:	4b57      	ldr	r3, [pc, #348]	; (8001578 <MX_GPIO_Init+0x18c>)
 800141c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800141e:	4a56      	ldr	r2, [pc, #344]	; (8001578 <MX_GPIO_Init+0x18c>)
 8001420:	f043 0304 	orr.w	r3, r3, #4
 8001424:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001426:	4b54      	ldr	r3, [pc, #336]	; (8001578 <MX_GPIO_Init+0x18c>)
 8001428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800142a:	f003 0304 	and.w	r3, r3, #4
 800142e:	61fb      	str	r3, [r7, #28]
 8001430:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001432:	4b51      	ldr	r3, [pc, #324]	; (8001578 <MX_GPIO_Init+0x18c>)
 8001434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001436:	4a50      	ldr	r2, [pc, #320]	; (8001578 <MX_GPIO_Init+0x18c>)
 8001438:	f043 0320 	orr.w	r3, r3, #32
 800143c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800143e:	4b4e      	ldr	r3, [pc, #312]	; (8001578 <MX_GPIO_Init+0x18c>)
 8001440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001442:	f003 0320 	and.w	r3, r3, #32
 8001446:	61bb      	str	r3, [r7, #24]
 8001448:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800144a:	4b4b      	ldr	r3, [pc, #300]	; (8001578 <MX_GPIO_Init+0x18c>)
 800144c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800144e:	4a4a      	ldr	r2, [pc, #296]	; (8001578 <MX_GPIO_Init+0x18c>)
 8001450:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001454:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001456:	4b48      	ldr	r3, [pc, #288]	; (8001578 <MX_GPIO_Init+0x18c>)
 8001458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800145a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800145e:	617b      	str	r3, [r7, #20]
 8001460:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001462:	4b45      	ldr	r3, [pc, #276]	; (8001578 <MX_GPIO_Init+0x18c>)
 8001464:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001466:	4a44      	ldr	r2, [pc, #272]	; (8001578 <MX_GPIO_Init+0x18c>)
 8001468:	f043 0301 	orr.w	r3, r3, #1
 800146c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800146e:	4b42      	ldr	r3, [pc, #264]	; (8001578 <MX_GPIO_Init+0x18c>)
 8001470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001472:	f003 0301 	and.w	r3, r3, #1
 8001476:	613b      	str	r3, [r7, #16]
 8001478:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800147a:	4b3f      	ldr	r3, [pc, #252]	; (8001578 <MX_GPIO_Init+0x18c>)
 800147c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800147e:	4a3e      	ldr	r2, [pc, #248]	; (8001578 <MX_GPIO_Init+0x18c>)
 8001480:	f043 0302 	orr.w	r3, r3, #2
 8001484:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001486:	4b3c      	ldr	r3, [pc, #240]	; (8001578 <MX_GPIO_Init+0x18c>)
 8001488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800148a:	f003 0302 	and.w	r3, r3, #2
 800148e:	60fb      	str	r3, [r7, #12]
 8001490:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001492:	4b39      	ldr	r3, [pc, #228]	; (8001578 <MX_GPIO_Init+0x18c>)
 8001494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001496:	4a38      	ldr	r2, [pc, #224]	; (8001578 <MX_GPIO_Init+0x18c>)
 8001498:	f043 0308 	orr.w	r3, r3, #8
 800149c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800149e:	4b36      	ldr	r3, [pc, #216]	; (8001578 <MX_GPIO_Init+0x18c>)
 80014a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a2:	f003 0308 	and.w	r3, r3, #8
 80014a6:	60bb      	str	r3, [r7, #8]
 80014a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80014aa:	4b33      	ldr	r3, [pc, #204]	; (8001578 <MX_GPIO_Init+0x18c>)
 80014ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ae:	4a32      	ldr	r2, [pc, #200]	; (8001578 <MX_GPIO_Init+0x18c>)
 80014b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014b6:	4b30      	ldr	r3, [pc, #192]	; (8001578 <MX_GPIO_Init+0x18c>)
 80014b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014be:	607b      	str	r3, [r7, #4]
 80014c0:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 80014c2:	f002 fce3 	bl	8003e8c <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 80014c6:	2200      	movs	r2, #0
 80014c8:	2178      	movs	r1, #120	; 0x78
 80014ca:	482c      	ldr	r0, [pc, #176]	; (800157c <MX_GPIO_Init+0x190>)
 80014cc:	f002 fbf2 	bl	8003cb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PG3 PG4 PG5 PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80014d0:	2378      	movs	r3, #120	; 0x78
 80014d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d4:	2301      	movs	r3, #1
 80014d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d8:	2300      	movs	r3, #0
 80014da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014dc:	2300      	movs	r3, #0
 80014de:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014e4:	4619      	mov	r1, r3
 80014e6:	4825      	ldr	r0, [pc, #148]	; (800157c <MX_GPIO_Init+0x190>)
 80014e8:	f002 fa52 	bl	8003990 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80014ec:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80014f0:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f2:	2302      	movs	r3, #2
 80014f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f6:	2300      	movs	r3, #0
 80014f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014fa:	2303      	movs	r3, #3
 80014fc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80014fe:	230c      	movs	r3, #12
 8001500:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001502:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001506:	4619      	mov	r1, r3
 8001508:	481d      	ldr	r0, [pc, #116]	; (8001580 <MX_GPIO_Init+0x194>)
 800150a:	f002 fa41 	bl	8003990 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800150e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001512:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001514:	2302      	movs	r3, #2
 8001516:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001518:	2300      	movs	r3, #0
 800151a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800151c:	2303      	movs	r3, #3
 800151e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001520:	230a      	movs	r3, #10
 8001522:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001524:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001528:	4619      	mov	r1, r3
 800152a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800152e:	f002 fa2f 	bl	8003990 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001532:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001536:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001538:	2300      	movs	r3, #0
 800153a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153c:	2300      	movs	r3, #0
 800153e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001540:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001544:	4619      	mov	r1, r3
 8001546:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800154a:	f002 fa21 	bl	8003990 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800154e:	2304      	movs	r3, #4
 8001550:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001552:	2302      	movs	r3, #2
 8001554:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001556:	2300      	movs	r3, #0
 8001558:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800155a:	2303      	movs	r3, #3
 800155c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800155e:	230c      	movs	r3, #12
 8001560:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001562:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001566:	4619      	mov	r1, r3
 8001568:	4806      	ldr	r0, [pc, #24]	; (8001584 <MX_GPIO_Init+0x198>)
 800156a:	f002 fa11 	bl	8003990 <HAL_GPIO_Init>

}
 800156e:	bf00      	nop
 8001570:	3738      	adds	r7, #56	; 0x38
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	40021000 	.word	0x40021000
 800157c:	48001800 	.word	0x48001800
 8001580:	48000800 	.word	0x48000800
 8001584:	48000c00 	.word	0x48000c00

08001588 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800158c:	b672      	cpsid	i
}
 800158e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001590:	e7fe      	b.n	8001590 <Error_Handler+0x8>
	...

08001594 <motor_control>:
 *      Author: ericding
 */
#include "main.h"
#include "motor_control.h"

void motor_control (uint16_t mode) {
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	4603      	mov	r3, r0
 800159c:	80fb      	strh	r3, [r7, #6]
	static uint16_t rmotor_pwm_val = 20;
	static uint16_t lmotor_h_bridge_in1 = 1;
	static uint16_t lmotor_h_bridge_in2 = 0;
	static uint16_t rmotor_h_bridge_in3 = 1;
	static uint16_t rmotor_h_bridge_in4 = 0;
	switch(mode) {
 800159e:	88fb      	ldrh	r3, [r7, #6]
 80015a0:	2b05      	cmp	r3, #5
 80015a2:	f200 8081 	bhi.w	80016a8 <motor_control+0x114>
 80015a6:	a201      	add	r2, pc, #4	; (adr r2, 80015ac <motor_control+0x18>)
 80015a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015ac:	080015c5 	.word	0x080015c5
 80015b0:	080015eb 	.word	0x080015eb
 80015b4:	08001611 	.word	0x08001611
 80015b8:	08001637 	.word	0x08001637
 80015bc:	0800165d 	.word	0x0800165d
 80015c0:	08001683 	.word	0x08001683
		case 0 :
			lmotor_pwm_val = 50;
 80015c4:	4b59      	ldr	r3, [pc, #356]	; (800172c <motor_control+0x198>)
 80015c6:	2232      	movs	r2, #50	; 0x32
 80015c8:	801a      	strh	r2, [r3, #0]
			rmotor_pwm_val = 50;
 80015ca:	4b59      	ldr	r3, [pc, #356]	; (8001730 <motor_control+0x19c>)
 80015cc:	2232      	movs	r2, #50	; 0x32
 80015ce:	801a      	strh	r2, [r3, #0]
			lmotor_h_bridge_in1 = 1;
 80015d0:	4b58      	ldr	r3, [pc, #352]	; (8001734 <motor_control+0x1a0>)
 80015d2:	2201      	movs	r2, #1
 80015d4:	801a      	strh	r2, [r3, #0]
			lmotor_h_bridge_in2 = 0;
 80015d6:	4b58      	ldr	r3, [pc, #352]	; (8001738 <motor_control+0x1a4>)
 80015d8:	2200      	movs	r2, #0
 80015da:	801a      	strh	r2, [r3, #0]
			rmotor_h_bridge_in3 = 1;
 80015dc:	4b57      	ldr	r3, [pc, #348]	; (800173c <motor_control+0x1a8>)
 80015de:	2201      	movs	r2, #1
 80015e0:	801a      	strh	r2, [r3, #0]
			rmotor_h_bridge_in4 = 0;
 80015e2:	4b57      	ldr	r3, [pc, #348]	; (8001740 <motor_control+0x1ac>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	801a      	strh	r2, [r3, #0]
			break;
 80015e8:	e071      	b.n	80016ce <motor_control+0x13a>
		case 1:
			lmotor_pwm_val = 0;
 80015ea:	4b50      	ldr	r3, [pc, #320]	; (800172c <motor_control+0x198>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	801a      	strh	r2, [r3, #0]
			rmotor_pwm_val = 30;
 80015f0:	4b4f      	ldr	r3, [pc, #316]	; (8001730 <motor_control+0x19c>)
 80015f2:	221e      	movs	r2, #30
 80015f4:	801a      	strh	r2, [r3, #0]
			lmotor_h_bridge_in1 = 1;
 80015f6:	4b4f      	ldr	r3, [pc, #316]	; (8001734 <motor_control+0x1a0>)
 80015f8:	2201      	movs	r2, #1
 80015fa:	801a      	strh	r2, [r3, #0]
			lmotor_h_bridge_in2 = 0;
 80015fc:	4b4e      	ldr	r3, [pc, #312]	; (8001738 <motor_control+0x1a4>)
 80015fe:	2200      	movs	r2, #0
 8001600:	801a      	strh	r2, [r3, #0]
			rmotor_h_bridge_in3 = 1;
 8001602:	4b4e      	ldr	r3, [pc, #312]	; (800173c <motor_control+0x1a8>)
 8001604:	2201      	movs	r2, #1
 8001606:	801a      	strh	r2, [r3, #0]
			rmotor_h_bridge_in4 = 0;
 8001608:	4b4d      	ldr	r3, [pc, #308]	; (8001740 <motor_control+0x1ac>)
 800160a:	2200      	movs	r2, #0
 800160c:	801a      	strh	r2, [r3, #0]
			break;
 800160e:	e05e      	b.n	80016ce <motor_control+0x13a>
		case 2:
			lmotor_pwm_val = 30;
 8001610:	4b46      	ldr	r3, [pc, #280]	; (800172c <motor_control+0x198>)
 8001612:	221e      	movs	r2, #30
 8001614:	801a      	strh	r2, [r3, #0]
			rmotor_pwm_val = 0;
 8001616:	4b46      	ldr	r3, [pc, #280]	; (8001730 <motor_control+0x19c>)
 8001618:	2200      	movs	r2, #0
 800161a:	801a      	strh	r2, [r3, #0]
			lmotor_h_bridge_in1 = 1;
 800161c:	4b45      	ldr	r3, [pc, #276]	; (8001734 <motor_control+0x1a0>)
 800161e:	2201      	movs	r2, #1
 8001620:	801a      	strh	r2, [r3, #0]
			lmotor_h_bridge_in2 = 0;
 8001622:	4b45      	ldr	r3, [pc, #276]	; (8001738 <motor_control+0x1a4>)
 8001624:	2200      	movs	r2, #0
 8001626:	801a      	strh	r2, [r3, #0]
			rmotor_h_bridge_in3 = 1;
 8001628:	4b44      	ldr	r3, [pc, #272]	; (800173c <motor_control+0x1a8>)
 800162a:	2201      	movs	r2, #1
 800162c:	801a      	strh	r2, [r3, #0]
			rmotor_h_bridge_in4 = 0;
 800162e:	4b44      	ldr	r3, [pc, #272]	; (8001740 <motor_control+0x1ac>)
 8001630:	2200      	movs	r2, #0
 8001632:	801a      	strh	r2, [r3, #0]
			break;
 8001634:	e04b      	b.n	80016ce <motor_control+0x13a>
		case 3:
			lmotor_pwm_val = 15;
 8001636:	4b3d      	ldr	r3, [pc, #244]	; (800172c <motor_control+0x198>)
 8001638:	220f      	movs	r2, #15
 800163a:	801a      	strh	r2, [r3, #0]
			rmotor_pwm_val = 15;
 800163c:	4b3c      	ldr	r3, [pc, #240]	; (8001730 <motor_control+0x19c>)
 800163e:	220f      	movs	r2, #15
 8001640:	801a      	strh	r2, [r3, #0]
			lmotor_h_bridge_in1 = 1;
 8001642:	4b3c      	ldr	r3, [pc, #240]	; (8001734 <motor_control+0x1a0>)
 8001644:	2201      	movs	r2, #1
 8001646:	801a      	strh	r2, [r3, #0]
			lmotor_h_bridge_in2 = 0;
 8001648:	4b3b      	ldr	r3, [pc, #236]	; (8001738 <motor_control+0x1a4>)
 800164a:	2200      	movs	r2, #0
 800164c:	801a      	strh	r2, [r3, #0]
			rmotor_h_bridge_in3 = 0;
 800164e:	4b3b      	ldr	r3, [pc, #236]	; (800173c <motor_control+0x1a8>)
 8001650:	2200      	movs	r2, #0
 8001652:	801a      	strh	r2, [r3, #0]
			rmotor_h_bridge_in4 = 1;
 8001654:	4b3a      	ldr	r3, [pc, #232]	; (8001740 <motor_control+0x1ac>)
 8001656:	2201      	movs	r2, #1
 8001658:	801a      	strh	r2, [r3, #0]
			break;
 800165a:	e038      	b.n	80016ce <motor_control+0x13a>
		case 4:
			lmotor_pwm_val = 30;
 800165c:	4b33      	ldr	r3, [pc, #204]	; (800172c <motor_control+0x198>)
 800165e:	221e      	movs	r2, #30
 8001660:	801a      	strh	r2, [r3, #0]
			rmotor_pwm_val = 30;
 8001662:	4b33      	ldr	r3, [pc, #204]	; (8001730 <motor_control+0x19c>)
 8001664:	221e      	movs	r2, #30
 8001666:	801a      	strh	r2, [r3, #0]
			lmotor_h_bridge_in1 = 0;
 8001668:	4b32      	ldr	r3, [pc, #200]	; (8001734 <motor_control+0x1a0>)
 800166a:	2200      	movs	r2, #0
 800166c:	801a      	strh	r2, [r3, #0]
			lmotor_h_bridge_in2 = 1;
 800166e:	4b32      	ldr	r3, [pc, #200]	; (8001738 <motor_control+0x1a4>)
 8001670:	2201      	movs	r2, #1
 8001672:	801a      	strh	r2, [r3, #0]
			rmotor_h_bridge_in3 = 0;
 8001674:	4b31      	ldr	r3, [pc, #196]	; (800173c <motor_control+0x1a8>)
 8001676:	2200      	movs	r2, #0
 8001678:	801a      	strh	r2, [r3, #0]
			rmotor_h_bridge_in4 = 1;
 800167a:	4b31      	ldr	r3, [pc, #196]	; (8001740 <motor_control+0x1ac>)
 800167c:	2201      	movs	r2, #1
 800167e:	801a      	strh	r2, [r3, #0]
			break;
 8001680:	e025      	b.n	80016ce <motor_control+0x13a>
		case 5:
			lmotor_pwm_val = 100;
 8001682:	4b2a      	ldr	r3, [pc, #168]	; (800172c <motor_control+0x198>)
 8001684:	2264      	movs	r2, #100	; 0x64
 8001686:	801a      	strh	r2, [r3, #0]
			rmotor_pwm_val = 100;
 8001688:	4b29      	ldr	r3, [pc, #164]	; (8001730 <motor_control+0x19c>)
 800168a:	2264      	movs	r2, #100	; 0x64
 800168c:	801a      	strh	r2, [r3, #0]
			lmotor_h_bridge_in1 = 1;
 800168e:	4b29      	ldr	r3, [pc, #164]	; (8001734 <motor_control+0x1a0>)
 8001690:	2201      	movs	r2, #1
 8001692:	801a      	strh	r2, [r3, #0]
			lmotor_h_bridge_in2 = 0;
 8001694:	4b28      	ldr	r3, [pc, #160]	; (8001738 <motor_control+0x1a4>)
 8001696:	2200      	movs	r2, #0
 8001698:	801a      	strh	r2, [r3, #0]
			rmotor_h_bridge_in3 = 1;
 800169a:	4b28      	ldr	r3, [pc, #160]	; (800173c <motor_control+0x1a8>)
 800169c:	2201      	movs	r2, #1
 800169e:	801a      	strh	r2, [r3, #0]
			rmotor_h_bridge_in4 = 0;
 80016a0:	4b27      	ldr	r3, [pc, #156]	; (8001740 <motor_control+0x1ac>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	801a      	strh	r2, [r3, #0]
			break;
 80016a6:	e012      	b.n	80016ce <motor_control+0x13a>
		default:
			lmotor_pwm_val = 0;
 80016a8:	4b20      	ldr	r3, [pc, #128]	; (800172c <motor_control+0x198>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	801a      	strh	r2, [r3, #0]
			rmotor_pwm_val = 0;
 80016ae:	4b20      	ldr	r3, [pc, #128]	; (8001730 <motor_control+0x19c>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	801a      	strh	r2, [r3, #0]
			lmotor_h_bridge_in1 = 1;
 80016b4:	4b1f      	ldr	r3, [pc, #124]	; (8001734 <motor_control+0x1a0>)
 80016b6:	2201      	movs	r2, #1
 80016b8:	801a      	strh	r2, [r3, #0]
			lmotor_h_bridge_in2 = 0;
 80016ba:	4b1f      	ldr	r3, [pc, #124]	; (8001738 <motor_control+0x1a4>)
 80016bc:	2200      	movs	r2, #0
 80016be:	801a      	strh	r2, [r3, #0]
			rmotor_h_bridge_in3 = 1;
 80016c0:	4b1e      	ldr	r3, [pc, #120]	; (800173c <motor_control+0x1a8>)
 80016c2:	2201      	movs	r2, #1
 80016c4:	801a      	strh	r2, [r3, #0]
			rmotor_h_bridge_in4 = 0;
 80016c6:	4b1e      	ldr	r3, [pc, #120]	; (8001740 <motor_control+0x1ac>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	801a      	strh	r2, [r3, #0]
			break;
 80016cc:	bf00      	nop
	}

	htim4.Instance->CCR3 = lmotor_pwm_val; // PD14 to EnA
 80016ce:	4b17      	ldr	r3, [pc, #92]	; (800172c <motor_control+0x198>)
 80016d0:	881a      	ldrh	r2, [r3, #0]
 80016d2:	4b1c      	ldr	r3, [pc, #112]	; (8001744 <motor_control+0x1b0>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	63da      	str	r2, [r3, #60]	; 0x3c
	htim4.Instance->CCR4 = rmotor_pwm_val; // PD15 to EnB
 80016d8:	4b15      	ldr	r3, [pc, #84]	; (8001730 <motor_control+0x19c>)
 80016da:	881a      	ldrh	r2, [r3, #0]
 80016dc:	4b19      	ldr	r3, [pc, #100]	; (8001744 <motor_control+0x1b0>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6,  lmotor_h_bridge_in1);
 80016e2:	4b14      	ldr	r3, [pc, #80]	; (8001734 <motor_control+0x1a0>)
 80016e4:	881b      	ldrh	r3, [r3, #0]
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	461a      	mov	r2, r3
 80016ea:	2140      	movs	r1, #64	; 0x40
 80016ec:	4816      	ldr	r0, [pc, #88]	; (8001748 <motor_control+0x1b4>)
 80016ee:	f002 fae1 	bl	8003cb4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5,  lmotor_h_bridge_in2);
 80016f2:	4b11      	ldr	r3, [pc, #68]	; (8001738 <motor_control+0x1a4>)
 80016f4:	881b      	ldrh	r3, [r3, #0]
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	461a      	mov	r2, r3
 80016fa:	2120      	movs	r1, #32
 80016fc:	4812      	ldr	r0, [pc, #72]	; (8001748 <motor_control+0x1b4>)
 80016fe:	f002 fad9 	bl	8003cb4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_4,  rmotor_h_bridge_in3);
 8001702:	4b0e      	ldr	r3, [pc, #56]	; (800173c <motor_control+0x1a8>)
 8001704:	881b      	ldrh	r3, [r3, #0]
 8001706:	b2db      	uxtb	r3, r3
 8001708:	461a      	mov	r2, r3
 800170a:	2110      	movs	r1, #16
 800170c:	480e      	ldr	r0, [pc, #56]	; (8001748 <motor_control+0x1b4>)
 800170e:	f002 fad1 	bl	8003cb4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3,  rmotor_h_bridge_in4);
 8001712:	4b0b      	ldr	r3, [pc, #44]	; (8001740 <motor_control+0x1ac>)
 8001714:	881b      	ldrh	r3, [r3, #0]
 8001716:	b2db      	uxtb	r3, r3
 8001718:	461a      	mov	r2, r3
 800171a:	2108      	movs	r1, #8
 800171c:	480a      	ldr	r0, [pc, #40]	; (8001748 <motor_control+0x1b4>)
 800171e:	f002 fac9 	bl	8003cb4 <HAL_GPIO_WritePin>
}
 8001722:	bf00      	nop
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	20000000 	.word	0x20000000
 8001730:	20000002 	.word	0x20000002
 8001734:	20000004 	.word	0x20000004
 8001738:	20000768 	.word	0x20000768
 800173c:	20000006 	.word	0x20000006
 8001740:	2000076a 	.word	0x2000076a
 8001744:	200006d0 	.word	0x200006d0
 8001748:	48001800 	.word	0x48001800

0800174c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001752:	4b0f      	ldr	r3, [pc, #60]	; (8001790 <HAL_MspInit+0x44>)
 8001754:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001756:	4a0e      	ldr	r2, [pc, #56]	; (8001790 <HAL_MspInit+0x44>)
 8001758:	f043 0301 	orr.w	r3, r3, #1
 800175c:	6613      	str	r3, [r2, #96]	; 0x60
 800175e:	4b0c      	ldr	r3, [pc, #48]	; (8001790 <HAL_MspInit+0x44>)
 8001760:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	607b      	str	r3, [r7, #4]
 8001768:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800176a:	4b09      	ldr	r3, [pc, #36]	; (8001790 <HAL_MspInit+0x44>)
 800176c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800176e:	4a08      	ldr	r2, [pc, #32]	; (8001790 <HAL_MspInit+0x44>)
 8001770:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001774:	6593      	str	r3, [r2, #88]	; 0x58
 8001776:	4b06      	ldr	r3, [pc, #24]	; (8001790 <HAL_MspInit+0x44>)
 8001778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800177a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800177e:	603b      	str	r3, [r7, #0]
 8001780:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001782:	bf00      	nop
 8001784:	370c      	adds	r7, #12
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	40021000 	.word	0x40021000

08001794 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b08c      	sub	sp, #48	; 0x30
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800179c:	f107 031c 	add.w	r3, r7, #28
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	605a      	str	r2, [r3, #4]
 80017a6:	609a      	str	r2, [r3, #8]
 80017a8:	60da      	str	r2, [r3, #12]
 80017aa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a2d      	ldr	r2, [pc, #180]	; (8001868 <HAL_ADC_MspInit+0xd4>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d154      	bne.n	8001860 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80017b6:	4b2d      	ldr	r3, [pc, #180]	; (800186c <HAL_ADC_MspInit+0xd8>)
 80017b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ba:	4a2c      	ldr	r2, [pc, #176]	; (800186c <HAL_ADC_MspInit+0xd8>)
 80017bc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80017c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017c2:	4b2a      	ldr	r3, [pc, #168]	; (800186c <HAL_ADC_MspInit+0xd8>)
 80017c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017ca:	61bb      	str	r3, [r7, #24]
 80017cc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ce:	4b27      	ldr	r3, [pc, #156]	; (800186c <HAL_ADC_MspInit+0xd8>)
 80017d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017d2:	4a26      	ldr	r2, [pc, #152]	; (800186c <HAL_ADC_MspInit+0xd8>)
 80017d4:	f043 0304 	orr.w	r3, r3, #4
 80017d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017da:	4b24      	ldr	r3, [pc, #144]	; (800186c <HAL_ADC_MspInit+0xd8>)
 80017dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017de:	f003 0304 	and.w	r3, r3, #4
 80017e2:	617b      	str	r3, [r7, #20]
 80017e4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e6:	4b21      	ldr	r3, [pc, #132]	; (800186c <HAL_ADC_MspInit+0xd8>)
 80017e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ea:	4a20      	ldr	r2, [pc, #128]	; (800186c <HAL_ADC_MspInit+0xd8>)
 80017ec:	f043 0301 	orr.w	r3, r3, #1
 80017f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017f2:	4b1e      	ldr	r3, [pc, #120]	; (800186c <HAL_ADC_MspInit+0xd8>)
 80017f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017f6:	f003 0301 	and.w	r3, r3, #1
 80017fa:	613b      	str	r3, [r7, #16]
 80017fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017fe:	4b1b      	ldr	r3, [pc, #108]	; (800186c <HAL_ADC_MspInit+0xd8>)
 8001800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001802:	4a1a      	ldr	r2, [pc, #104]	; (800186c <HAL_ADC_MspInit+0xd8>)
 8001804:	f043 0302 	orr.w	r3, r3, #2
 8001808:	64d3      	str	r3, [r2, #76]	; 0x4c
 800180a:	4b18      	ldr	r3, [pc, #96]	; (800186c <HAL_ADC_MspInit+0xd8>)
 800180c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800180e:	f003 0302 	and.w	r3, r3, #2
 8001812:	60fb      	str	r3, [r7, #12]
 8001814:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN8
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001816:	233f      	movs	r3, #63	; 0x3f
 8001818:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800181a:	230b      	movs	r3, #11
 800181c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181e:	2300      	movs	r3, #0
 8001820:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001822:	f107 031c 	add.w	r3, r7, #28
 8001826:	4619      	mov	r1, r3
 8001828:	4811      	ldr	r0, [pc, #68]	; (8001870 <HAL_ADC_MspInit+0xdc>)
 800182a:	f002 f8b1 	bl	8003990 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 800182e:	230a      	movs	r3, #10
 8001830:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001832:	230b      	movs	r3, #11
 8001834:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001836:	2300      	movs	r3, #0
 8001838:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800183a:	f107 031c 	add.w	r3, r7, #28
 800183e:	4619      	mov	r1, r3
 8001840:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001844:	f002 f8a4 	bl	8003990 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001848:	2302      	movs	r3, #2
 800184a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800184c:	230b      	movs	r3, #11
 800184e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001850:	2300      	movs	r3, #0
 8001852:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001854:	f107 031c 	add.w	r3, r7, #28
 8001858:	4619      	mov	r1, r3
 800185a:	4806      	ldr	r0, [pc, #24]	; (8001874 <HAL_ADC_MspInit+0xe0>)
 800185c:	f002 f898 	bl	8003990 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001860:	bf00      	nop
 8001862:	3730      	adds	r7, #48	; 0x30
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	50040000 	.word	0x50040000
 800186c:	40021000 	.word	0x40021000
 8001870:	48000800 	.word	0x48000800
 8001874:	48000400 	.word	0x48000400

08001878 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b08a      	sub	sp, #40	; 0x28
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001880:	f107 0314 	add.w	r3, r7, #20
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	605a      	str	r2, [r3, #4]
 800188a:	609a      	str	r2, [r3, #8]
 800188c:	60da      	str	r2, [r3, #12]
 800188e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a17      	ldr	r2, [pc, #92]	; (80018f4 <HAL_CAN_MspInit+0x7c>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d127      	bne.n	80018ea <HAL_CAN_MspInit+0x72>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800189a:	4b17      	ldr	r3, [pc, #92]	; (80018f8 <HAL_CAN_MspInit+0x80>)
 800189c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800189e:	4a16      	ldr	r2, [pc, #88]	; (80018f8 <HAL_CAN_MspInit+0x80>)
 80018a0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80018a4:	6593      	str	r3, [r2, #88]	; 0x58
 80018a6:	4b14      	ldr	r3, [pc, #80]	; (80018f8 <HAL_CAN_MspInit+0x80>)
 80018a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ae:	613b      	str	r3, [r7, #16]
 80018b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018b2:	4b11      	ldr	r3, [pc, #68]	; (80018f8 <HAL_CAN_MspInit+0x80>)
 80018b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018b6:	4a10      	ldr	r2, [pc, #64]	; (80018f8 <HAL_CAN_MspInit+0x80>)
 80018b8:	f043 0308 	orr.w	r3, r3, #8
 80018bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018be:	4b0e      	ldr	r3, [pc, #56]	; (80018f8 <HAL_CAN_MspInit+0x80>)
 80018c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018c2:	f003 0308 	and.w	r3, r3, #8
 80018c6:	60fb      	str	r3, [r7, #12]
 80018c8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80018ca:	2303      	movs	r3, #3
 80018cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ce:	2302      	movs	r3, #2
 80018d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d2:	2300      	movs	r3, #0
 80018d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018d6:	2303      	movs	r3, #3
 80018d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80018da:	2309      	movs	r3, #9
 80018dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018de:	f107 0314 	add.w	r3, r7, #20
 80018e2:	4619      	mov	r1, r3
 80018e4:	4805      	ldr	r0, [pc, #20]	; (80018fc <HAL_CAN_MspInit+0x84>)
 80018e6:	f002 f853 	bl	8003990 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80018ea:	bf00      	nop
 80018ec:	3728      	adds	r7, #40	; 0x28
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	40006400 	.word	0x40006400
 80018f8:	40021000 	.word	0x40021000
 80018fc:	48000c00 	.word	0x48000c00

08001900 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b08a      	sub	sp, #40	; 0x28
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001908:	f107 0314 	add.w	r3, r7, #20
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]
 8001910:	605a      	str	r2, [r3, #4]
 8001912:	609a      	str	r2, [r3, #8]
 8001914:	60da      	str	r2, [r3, #12]
 8001916:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP1)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a1e      	ldr	r2, [pc, #120]	; (8001998 <HAL_COMP_MspInit+0x98>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d118      	bne.n	8001954 <HAL_COMP_MspInit+0x54>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001922:	4b1e      	ldr	r3, [pc, #120]	; (800199c <HAL_COMP_MspInit+0x9c>)
 8001924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001926:	4a1d      	ldr	r2, [pc, #116]	; (800199c <HAL_COMP_MspInit+0x9c>)
 8001928:	f043 0302 	orr.w	r3, r3, #2
 800192c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800192e:	4b1b      	ldr	r3, [pc, #108]	; (800199c <HAL_COMP_MspInit+0x9c>)
 8001930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001932:	f003 0302 	and.w	r3, r3, #2
 8001936:	613b      	str	r3, [r7, #16]
 8001938:	693b      	ldr	r3, [r7, #16]
    /**COMP1 GPIO Configuration
    PB2     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800193a:	2304      	movs	r3, #4
 800193c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800193e:	2303      	movs	r3, #3
 8001940:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001942:	2300      	movs	r3, #0
 8001944:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001946:	f107 0314 	add.w	r3, r7, #20
 800194a:	4619      	mov	r1, r3
 800194c:	4814      	ldr	r0, [pc, #80]	; (80019a0 <HAL_COMP_MspInit+0xa0>)
 800194e:	f002 f81f 	bl	8003990 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }

}
 8001952:	e01c      	b.n	800198e <HAL_COMP_MspInit+0x8e>
  else if(hcomp->Instance==COMP2)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a12      	ldr	r2, [pc, #72]	; (80019a4 <HAL_COMP_MspInit+0xa4>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d117      	bne.n	800198e <HAL_COMP_MspInit+0x8e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800195e:	4b0f      	ldr	r3, [pc, #60]	; (800199c <HAL_COMP_MspInit+0x9c>)
 8001960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001962:	4a0e      	ldr	r2, [pc, #56]	; (800199c <HAL_COMP_MspInit+0x9c>)
 8001964:	f043 0302 	orr.w	r3, r3, #2
 8001968:	64d3      	str	r3, [r2, #76]	; 0x4c
 800196a:	4b0c      	ldr	r3, [pc, #48]	; (800199c <HAL_COMP_MspInit+0x9c>)
 800196c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001976:	23c0      	movs	r3, #192	; 0xc0
 8001978:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800197a:	2303      	movs	r3, #3
 800197c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197e:	2300      	movs	r3, #0
 8001980:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001982:	f107 0314 	add.w	r3, r7, #20
 8001986:	4619      	mov	r1, r3
 8001988:	4805      	ldr	r0, [pc, #20]	; (80019a0 <HAL_COMP_MspInit+0xa0>)
 800198a:	f002 f801 	bl	8003990 <HAL_GPIO_Init>
}
 800198e:	bf00      	nop
 8001990:	3728      	adds	r7, #40	; 0x28
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	40010200 	.word	0x40010200
 800199c:	40021000 	.word	0x40021000
 80019a0:	48000400 	.word	0x48000400
 80019a4:	40010204 	.word	0x40010204

080019a8 <HAL_SMBUS_MspInit>:
* This function configures the hardware resources used in this example
* @param hsmbus: SMBUS handle pointer
* @retval None
*/
void HAL_SMBUS_MspInit(SMBUS_HandleTypeDef* hsmbus)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b0b0      	sub	sp, #192	; 0xc0
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	605a      	str	r2, [r3, #4]
 80019ba:	609a      	str	r2, [r3, #8]
 80019bc:	60da      	str	r2, [r3, #12]
 80019be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019c0:	f107 0318 	add.w	r3, r7, #24
 80019c4:	2294      	movs	r2, #148	; 0x94
 80019c6:	2100      	movs	r1, #0
 80019c8:	4618      	mov	r0, r3
 80019ca:	f007 fb85 	bl	80090d8 <memset>
  if(hsmbus->Instance==I2C1)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a42      	ldr	r2, [pc, #264]	; (8001adc <HAL_SMBUS_MspInit+0x134>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d13c      	bne.n	8001a52 <HAL_SMBUS_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80019d8:	2340      	movs	r3, #64	; 0x40
 80019da:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80019dc:	2300      	movs	r3, #0
 80019de:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019e0:	f107 0318 	add.w	r3, r7, #24
 80019e4:	4618      	mov	r0, r3
 80019e6:	f003 f939 	bl	8004c5c <HAL_RCCEx_PeriphCLKConfig>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <HAL_SMBUS_MspInit+0x4c>
    {
      Error_Handler();
 80019f0:	f7ff fdca 	bl	8001588 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019f4:	4b3a      	ldr	r3, [pc, #232]	; (8001ae0 <HAL_SMBUS_MspInit+0x138>)
 80019f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019f8:	4a39      	ldr	r2, [pc, #228]	; (8001ae0 <HAL_SMBUS_MspInit+0x138>)
 80019fa:	f043 0302 	orr.w	r3, r3, #2
 80019fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a00:	4b37      	ldr	r3, [pc, #220]	; (8001ae0 <HAL_SMBUS_MspInit+0x138>)
 8001a02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a04:	f003 0302 	and.w	r3, r3, #2
 8001a08:	617b      	str	r3, [r7, #20]
 8001a0a:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001a0c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a14:	2312      	movs	r3, #18
 8001a16:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a20:	2303      	movs	r3, #3
 8001a22:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a26:	2304      	movs	r3, #4
 8001a28:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a2c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001a30:	4619      	mov	r1, r3
 8001a32:	482c      	ldr	r0, [pc, #176]	; (8001ae4 <HAL_SMBUS_MspInit+0x13c>)
 8001a34:	f001 ffac 	bl	8003990 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a38:	4b29      	ldr	r3, [pc, #164]	; (8001ae0 <HAL_SMBUS_MspInit+0x138>)
 8001a3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a3c:	4a28      	ldr	r2, [pc, #160]	; (8001ae0 <HAL_SMBUS_MspInit+0x138>)
 8001a3e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a42:	6593      	str	r3, [r2, #88]	; 0x58
 8001a44:	4b26      	ldr	r3, [pc, #152]	; (8001ae0 <HAL_SMBUS_MspInit+0x138>)
 8001a46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a4c:	613b      	str	r3, [r7, #16]
 8001a4e:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001a50:	e03f      	b.n	8001ad2 <HAL_SMBUS_MspInit+0x12a>
  else if(hsmbus->Instance==I2C2)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a24      	ldr	r2, [pc, #144]	; (8001ae8 <HAL_SMBUS_MspInit+0x140>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d13a      	bne.n	8001ad2 <HAL_SMBUS_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001a5c:	2380      	movs	r3, #128	; 0x80
 8001a5e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001a60:	2300      	movs	r3, #0
 8001a62:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a64:	f107 0318 	add.w	r3, r7, #24
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f003 f8f7 	bl	8004c5c <HAL_RCCEx_PeriphCLKConfig>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <HAL_SMBUS_MspInit+0xd0>
      Error_Handler();
 8001a74:	f7ff fd88 	bl	8001588 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a78:	4b19      	ldr	r3, [pc, #100]	; (8001ae0 <HAL_SMBUS_MspInit+0x138>)
 8001a7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a7c:	4a18      	ldr	r2, [pc, #96]	; (8001ae0 <HAL_SMBUS_MspInit+0x138>)
 8001a7e:	f043 0320 	orr.w	r3, r3, #32
 8001a82:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a84:	4b16      	ldr	r3, [pc, #88]	; (8001ae0 <HAL_SMBUS_MspInit+0x138>)
 8001a86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a88:	f003 0320 	and.w	r3, r3, #32
 8001a8c:	60fb      	str	r3, [r7, #12]
 8001a8e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001a90:	2307      	movs	r3, #7
 8001a92:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a96:	2312      	movs	r3, #18
 8001a98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001aa8:	2304      	movs	r3, #4
 8001aaa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001aae:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	480d      	ldr	r0, [pc, #52]	; (8001aec <HAL_SMBUS_MspInit+0x144>)
 8001ab6:	f001 ff6b 	bl	8003990 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001aba:	4b09      	ldr	r3, [pc, #36]	; (8001ae0 <HAL_SMBUS_MspInit+0x138>)
 8001abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001abe:	4a08      	ldr	r2, [pc, #32]	; (8001ae0 <HAL_SMBUS_MspInit+0x138>)
 8001ac0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ac4:	6593      	str	r3, [r2, #88]	; 0x58
 8001ac6:	4b06      	ldr	r3, [pc, #24]	; (8001ae0 <HAL_SMBUS_MspInit+0x138>)
 8001ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ace:	60bb      	str	r3, [r7, #8]
 8001ad0:	68bb      	ldr	r3, [r7, #8]
}
 8001ad2:	bf00      	nop
 8001ad4:	37c0      	adds	r7, #192	; 0xc0
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	40005400 	.word	0x40005400
 8001ae0:	40021000 	.word	0x40021000
 8001ae4:	48000400 	.word	0x48000400
 8001ae8:	40005800 	.word	0x40005800
 8001aec:	48001400 	.word	0x48001400

08001af0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b0b2      	sub	sp, #200	; 0xc8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001afc:	2200      	movs	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]
 8001b00:	605a      	str	r2, [r3, #4]
 8001b02:	609a      	str	r2, [r3, #8]
 8001b04:	60da      	str	r2, [r3, #12]
 8001b06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b08:	f107 0320 	add.w	r3, r7, #32
 8001b0c:	2294      	movs	r2, #148	; 0x94
 8001b0e:	2100      	movs	r1, #0
 8001b10:	4618      	mov	r0, r3
 8001b12:	f007 fae1 	bl	80090d8 <memset>
  if(huart->Instance==LPUART1)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a64      	ldr	r2, [pc, #400]	; (8001cac <HAL_UART_MspInit+0x1bc>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d13e      	bne.n	8001b9e <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001b20:	2320      	movs	r3, #32
 8001b22:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001b24:	2300      	movs	r3, #0
 8001b26:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b28:	f107 0320 	add.w	r3, r7, #32
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f003 f895 	bl	8004c5c <HAL_RCCEx_PeriphCLKConfig>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001b38:	f7ff fd26 	bl	8001588 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001b3c:	4b5c      	ldr	r3, [pc, #368]	; (8001cb0 <HAL_UART_MspInit+0x1c0>)
 8001b3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b40:	4a5b      	ldr	r2, [pc, #364]	; (8001cb0 <HAL_UART_MspInit+0x1c0>)
 8001b42:	f043 0301 	orr.w	r3, r3, #1
 8001b46:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001b48:	4b59      	ldr	r3, [pc, #356]	; (8001cb0 <HAL_UART_MspInit+0x1c0>)
 8001b4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b4c:	f003 0301 	and.w	r3, r3, #1
 8001b50:	61fb      	str	r3, [r7, #28]
 8001b52:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b54:	4b56      	ldr	r3, [pc, #344]	; (8001cb0 <HAL_UART_MspInit+0x1c0>)
 8001b56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b58:	4a55      	ldr	r2, [pc, #340]	; (8001cb0 <HAL_UART_MspInit+0x1c0>)
 8001b5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b5e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b60:	4b53      	ldr	r3, [pc, #332]	; (8001cb0 <HAL_UART_MspInit+0x1c0>)
 8001b62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b68:	61bb      	str	r3, [r7, #24]
 8001b6a:	69bb      	ldr	r3, [r7, #24]
    HAL_PWREx_EnableVddIO2();
 8001b6c:	f002 f98e 	bl	8003e8c <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001b70:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001b74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b78:	2302      	movs	r3, #2
 8001b7a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b84:	2303      	movs	r3, #3
 8001b86:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001b8a:	2308      	movs	r3, #8
 8001b8c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b90:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001b94:	4619      	mov	r1, r3
 8001b96:	4847      	ldr	r0, [pc, #284]	; (8001cb4 <HAL_UART_MspInit+0x1c4>)
 8001b98:	f001 fefa 	bl	8003990 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001b9c:	e081      	b.n	8001ca2 <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART2)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a45      	ldr	r2, [pc, #276]	; (8001cb8 <HAL_UART_MspInit+0x1c8>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d13b      	bne.n	8001c20 <HAL_UART_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001ba8:	2302      	movs	r3, #2
 8001baa:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001bac:	2300      	movs	r3, #0
 8001bae:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bb0:	f107 0320 	add.w	r3, r7, #32
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f003 f851 	bl	8004c5c <HAL_RCCEx_PeriphCLKConfig>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8001bc0:	f7ff fce2 	bl	8001588 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bc4:	4b3a      	ldr	r3, [pc, #232]	; (8001cb0 <HAL_UART_MspInit+0x1c0>)
 8001bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bc8:	4a39      	ldr	r2, [pc, #228]	; (8001cb0 <HAL_UART_MspInit+0x1c0>)
 8001bca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bce:	6593      	str	r3, [r2, #88]	; 0x58
 8001bd0:	4b37      	ldr	r3, [pc, #220]	; (8001cb0 <HAL_UART_MspInit+0x1c0>)
 8001bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd8:	617b      	str	r3, [r7, #20]
 8001bda:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bdc:	4b34      	ldr	r3, [pc, #208]	; (8001cb0 <HAL_UART_MspInit+0x1c0>)
 8001bde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001be0:	4a33      	ldr	r2, [pc, #204]	; (8001cb0 <HAL_UART_MspInit+0x1c0>)
 8001be2:	f043 0308 	orr.w	r3, r3, #8
 8001be6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001be8:	4b31      	ldr	r3, [pc, #196]	; (8001cb0 <HAL_UART_MspInit+0x1c0>)
 8001bea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bec:	f003 0308 	and.w	r3, r3, #8
 8001bf0:	613b      	str	r3, [r7, #16]
 8001bf2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001bf4:	2378      	movs	r3, #120	; 0x78
 8001bf6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c00:	2300      	movs	r3, #0
 8001c02:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c06:	2303      	movs	r3, #3
 8001c08:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c0c:	2307      	movs	r3, #7
 8001c0e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c12:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001c16:	4619      	mov	r1, r3
 8001c18:	4828      	ldr	r0, [pc, #160]	; (8001cbc <HAL_UART_MspInit+0x1cc>)
 8001c1a:	f001 feb9 	bl	8003990 <HAL_GPIO_Init>
}
 8001c1e:	e040      	b.n	8001ca2 <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART3)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a26      	ldr	r2, [pc, #152]	; (8001cc0 <HAL_UART_MspInit+0x1d0>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d13b      	bne.n	8001ca2 <HAL_UART_MspInit+0x1b2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001c2a:	2304      	movs	r3, #4
 8001c2c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c32:	f107 0320 	add.w	r3, r7, #32
 8001c36:	4618      	mov	r0, r3
 8001c38:	f003 f810 	bl	8004c5c <HAL_RCCEx_PeriphCLKConfig>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <HAL_UART_MspInit+0x156>
      Error_Handler();
 8001c42:	f7ff fca1 	bl	8001588 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001c46:	4b1a      	ldr	r3, [pc, #104]	; (8001cb0 <HAL_UART_MspInit+0x1c0>)
 8001c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c4a:	4a19      	ldr	r2, [pc, #100]	; (8001cb0 <HAL_UART_MspInit+0x1c0>)
 8001c4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c50:	6593      	str	r3, [r2, #88]	; 0x58
 8001c52:	4b17      	ldr	r3, [pc, #92]	; (8001cb0 <HAL_UART_MspInit+0x1c0>)
 8001c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c5a:	60fb      	str	r3, [r7, #12]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c5e:	4b14      	ldr	r3, [pc, #80]	; (8001cb0 <HAL_UART_MspInit+0x1c0>)
 8001c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c62:	4a13      	ldr	r2, [pc, #76]	; (8001cb0 <HAL_UART_MspInit+0x1c0>)
 8001c64:	f043 0308 	orr.w	r3, r3, #8
 8001c68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c6a:	4b11      	ldr	r3, [pc, #68]	; (8001cb0 <HAL_UART_MspInit+0x1c0>)
 8001c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c6e:	f003 0308 	and.w	r3, r3, #8
 8001c72:	60bb      	str	r3, [r7, #8]
 8001c74:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c76:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c7a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7e:	2302      	movs	r3, #2
 8001c80:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c84:	2300      	movs	r3, #0
 8001c86:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c90:	2307      	movs	r3, #7
 8001c92:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c96:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	4807      	ldr	r0, [pc, #28]	; (8001cbc <HAL_UART_MspInit+0x1cc>)
 8001c9e:	f001 fe77 	bl	8003990 <HAL_GPIO_Init>
}
 8001ca2:	bf00      	nop
 8001ca4:	37c8      	adds	r7, #200	; 0xc8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	40008000 	.word	0x40008000
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	48001800 	.word	0x48001800
 8001cb8:	40004400 	.word	0x40004400
 8001cbc:	48000c00 	.word	0x48000c00
 8001cc0:	40004800 	.word	0x40004800

08001cc4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b08c      	sub	sp, #48	; 0x30
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ccc:	f107 031c 	add.w	r3, r7, #28
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	605a      	str	r2, [r3, #4]
 8001cd6:	609a      	str	r2, [r3, #8]
 8001cd8:	60da      	str	r2, [r3, #12]
 8001cda:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a2e      	ldr	r2, [pc, #184]	; (8001d9c <HAL_SPI_MspInit+0xd8>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d129      	bne.n	8001d3a <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ce6:	4b2e      	ldr	r3, [pc, #184]	; (8001da0 <HAL_SPI_MspInit+0xdc>)
 8001ce8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cea:	4a2d      	ldr	r2, [pc, #180]	; (8001da0 <HAL_SPI_MspInit+0xdc>)
 8001cec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001cf0:	6613      	str	r3, [r2, #96]	; 0x60
 8001cf2:	4b2b      	ldr	r3, [pc, #172]	; (8001da0 <HAL_SPI_MspInit+0xdc>)
 8001cf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cf6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cfa:	61bb      	str	r3, [r7, #24]
 8001cfc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cfe:	4b28      	ldr	r3, [pc, #160]	; (8001da0 <HAL_SPI_MspInit+0xdc>)
 8001d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d02:	4a27      	ldr	r2, [pc, #156]	; (8001da0 <HAL_SPI_MspInit+0xdc>)
 8001d04:	f043 0301 	orr.w	r3, r3, #1
 8001d08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d0a:	4b25      	ldr	r3, [pc, #148]	; (8001da0 <HAL_SPI_MspInit+0xdc>)
 8001d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d0e:	f003 0301 	and.w	r3, r3, #1
 8001d12:	617b      	str	r3, [r7, #20]
 8001d14:	697b      	ldr	r3, [r7, #20]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001d16:	23f0      	movs	r3, #240	; 0xf0
 8001d18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d22:	2303      	movs	r3, #3
 8001d24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d26:	2305      	movs	r3, #5
 8001d28:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d2a:	f107 031c 	add.w	r3, r7, #28
 8001d2e:	4619      	mov	r1, r3
 8001d30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d34:	f001 fe2c 	bl	8003990 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001d38:	e02c      	b.n	8001d94 <HAL_SPI_MspInit+0xd0>
  else if(hspi->Instance==SPI3)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a19      	ldr	r2, [pc, #100]	; (8001da4 <HAL_SPI_MspInit+0xe0>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d127      	bne.n	8001d94 <HAL_SPI_MspInit+0xd0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001d44:	4b16      	ldr	r3, [pc, #88]	; (8001da0 <HAL_SPI_MspInit+0xdc>)
 8001d46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d48:	4a15      	ldr	r2, [pc, #84]	; (8001da0 <HAL_SPI_MspInit+0xdc>)
 8001d4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d4e:	6593      	str	r3, [r2, #88]	; 0x58
 8001d50:	4b13      	ldr	r3, [pc, #76]	; (8001da0 <HAL_SPI_MspInit+0xdc>)
 8001d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d58:	613b      	str	r3, [r7, #16]
 8001d5a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d5c:	4b10      	ldr	r3, [pc, #64]	; (8001da0 <HAL_SPI_MspInit+0xdc>)
 8001d5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d60:	4a0f      	ldr	r2, [pc, #60]	; (8001da0 <HAL_SPI_MspInit+0xdc>)
 8001d62:	f043 0302 	orr.w	r3, r3, #2
 8001d66:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d68:	4b0d      	ldr	r3, [pc, #52]	; (8001da0 <HAL_SPI_MspInit+0xdc>)
 8001d6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d6c:	f003 0302 	and.w	r3, r3, #2
 8001d70:	60fb      	str	r3, [r7, #12]
 8001d72:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001d74:	2338      	movs	r3, #56	; 0x38
 8001d76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d78:	2302      	movs	r3, #2
 8001d7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d80:	2303      	movs	r3, #3
 8001d82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001d84:	2306      	movs	r3, #6
 8001d86:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d88:	f107 031c 	add.w	r3, r7, #28
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	4806      	ldr	r0, [pc, #24]	; (8001da8 <HAL_SPI_MspInit+0xe4>)
 8001d90:	f001 fdfe 	bl	8003990 <HAL_GPIO_Init>
}
 8001d94:	bf00      	nop
 8001d96:	3730      	adds	r7, #48	; 0x30
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	40013000 	.word	0x40013000
 8001da0:	40021000 	.word	0x40021000
 8001da4:	40003c00 	.word	0x40003c00
 8001da8:	48000400 	.word	0x48000400

08001dac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b08c      	sub	sp, #48	; 0x30
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db4:	f107 031c 	add.w	r3, r7, #28
 8001db8:	2200      	movs	r2, #0
 8001dba:	601a      	str	r2, [r3, #0]
 8001dbc:	605a      	str	r2, [r3, #4]
 8001dbe:	609a      	str	r2, [r3, #8]
 8001dc0:	60da      	str	r2, [r3, #12]
 8001dc2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a37      	ldr	r2, [pc, #220]	; (8001ea8 <HAL_TIM_Base_MspInit+0xfc>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d13a      	bne.n	8001e44 <HAL_TIM_Base_MspInit+0x98>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001dce:	4b37      	ldr	r3, [pc, #220]	; (8001eac <HAL_TIM_Base_MspInit+0x100>)
 8001dd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dd2:	4a36      	ldr	r2, [pc, #216]	; (8001eac <HAL_TIM_Base_MspInit+0x100>)
 8001dd4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001dd8:	6613      	str	r3, [r2, #96]	; 0x60
 8001dda:	4b34      	ldr	r3, [pc, #208]	; (8001eac <HAL_TIM_Base_MspInit+0x100>)
 8001ddc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001de2:	61bb      	str	r3, [r7, #24]
 8001de4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001de6:	4b31      	ldr	r3, [pc, #196]	; (8001eac <HAL_TIM_Base_MspInit+0x100>)
 8001de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dea:	4a30      	ldr	r2, [pc, #192]	; (8001eac <HAL_TIM_Base_MspInit+0x100>)
 8001dec:	f043 0310 	orr.w	r3, r3, #16
 8001df0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001df2:	4b2e      	ldr	r3, [pc, #184]	; (8001eac <HAL_TIM_Base_MspInit+0x100>)
 8001df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001df6:	f003 0310 	and.w	r3, r3, #16
 8001dfa:	617b      	str	r3, [r7, #20]
 8001dfc:	697b      	ldr	r3, [r7, #20]
    PE7     ------> TIM1_ETR
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_BKIN2
    PE15     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_13;
 8001dfe:	f44f 5302 	mov.w	r3, #8320	; 0x2080
 8001e02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e04:	2302      	movs	r3, #2
 8001e06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001e10:	2301      	movs	r3, #1
 8001e12:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e14:	f107 031c 	add.w	r3, r7, #28
 8001e18:	4619      	mov	r1, r3
 8001e1a:	4825      	ldr	r0, [pc, #148]	; (8001eb0 <HAL_TIM_Base_MspInit+0x104>)
 8001e1c:	f001 fdb8 	bl	8003990 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001e20:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001e24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e26:	2302      	movs	r3, #2
 8001e28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 8001e32:	2303      	movs	r3, #3
 8001e34:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e36:	f107 031c 	add.w	r3, r7, #28
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	481c      	ldr	r0, [pc, #112]	; (8001eb0 <HAL_TIM_Base_MspInit+0x104>)
 8001e3e:	f001 fda7 	bl	8003990 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001e42:	e02c      	b.n	8001e9e <HAL_TIM_Base_MspInit+0xf2>
  else if(htim_base->Instance==TIM4)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a1a      	ldr	r2, [pc, #104]	; (8001eb4 <HAL_TIM_Base_MspInit+0x108>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d127      	bne.n	8001e9e <HAL_TIM_Base_MspInit+0xf2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001e4e:	4b17      	ldr	r3, [pc, #92]	; (8001eac <HAL_TIM_Base_MspInit+0x100>)
 8001e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e52:	4a16      	ldr	r2, [pc, #88]	; (8001eac <HAL_TIM_Base_MspInit+0x100>)
 8001e54:	f043 0304 	orr.w	r3, r3, #4
 8001e58:	6593      	str	r3, [r2, #88]	; 0x58
 8001e5a:	4b14      	ldr	r3, [pc, #80]	; (8001eac <HAL_TIM_Base_MspInit+0x100>)
 8001e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e5e:	f003 0304 	and.w	r3, r3, #4
 8001e62:	613b      	str	r3, [r7, #16]
 8001e64:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e66:	4b11      	ldr	r3, [pc, #68]	; (8001eac <HAL_TIM_Base_MspInit+0x100>)
 8001e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e6a:	4a10      	ldr	r2, [pc, #64]	; (8001eac <HAL_TIM_Base_MspInit+0x100>)
 8001e6c:	f043 0310 	orr.w	r3, r3, #16
 8001e70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e72:	4b0e      	ldr	r3, [pc, #56]	; (8001eac <HAL_TIM_Base_MspInit+0x100>)
 8001e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e76:	f003 0310 	and.w	r3, r3, #16
 8001e7a:	60fb      	str	r3, [r7, #12]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e82:	2302      	movs	r3, #2
 8001e84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e86:	2300      	movs	r3, #0
 8001e88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001e8e:	2302      	movs	r3, #2
 8001e90:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e92:	f107 031c 	add.w	r3, r7, #28
 8001e96:	4619      	mov	r1, r3
 8001e98:	4805      	ldr	r0, [pc, #20]	; (8001eb0 <HAL_TIM_Base_MspInit+0x104>)
 8001e9a:	f001 fd79 	bl	8003990 <HAL_GPIO_Init>
}
 8001e9e:	bf00      	nop
 8001ea0:	3730      	adds	r7, #48	; 0x30
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	40012c00 	.word	0x40012c00
 8001eac:	40021000 	.word	0x40021000
 8001eb0:	48001000 	.word	0x48001000
 8001eb4:	40000800 	.word	0x40000800

08001eb8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b087      	sub	sp, #28
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ec8:	d10c      	bne.n	8001ee4 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001eca:	4b1b      	ldr	r3, [pc, #108]	; (8001f38 <HAL_TIM_PWM_MspInit+0x80>)
 8001ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ece:	4a1a      	ldr	r2, [pc, #104]	; (8001f38 <HAL_TIM_PWM_MspInit+0x80>)
 8001ed0:	f043 0301 	orr.w	r3, r3, #1
 8001ed4:	6593      	str	r3, [r2, #88]	; 0x58
 8001ed6:	4b18      	ldr	r3, [pc, #96]	; (8001f38 <HAL_TIM_PWM_MspInit+0x80>)
 8001ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	617b      	str	r3, [r7, #20]
 8001ee0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001ee2:	e022      	b.n	8001f2a <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM3)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a14      	ldr	r2, [pc, #80]	; (8001f3c <HAL_TIM_PWM_MspInit+0x84>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d10c      	bne.n	8001f08 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001eee:	4b12      	ldr	r3, [pc, #72]	; (8001f38 <HAL_TIM_PWM_MspInit+0x80>)
 8001ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef2:	4a11      	ldr	r2, [pc, #68]	; (8001f38 <HAL_TIM_PWM_MspInit+0x80>)
 8001ef4:	f043 0302 	orr.w	r3, r3, #2
 8001ef8:	6593      	str	r3, [r2, #88]	; 0x58
 8001efa:	4b0f      	ldr	r3, [pc, #60]	; (8001f38 <HAL_TIM_PWM_MspInit+0x80>)
 8001efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	613b      	str	r3, [r7, #16]
 8001f04:	693b      	ldr	r3, [r7, #16]
}
 8001f06:	e010      	b.n	8001f2a <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM15)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a0c      	ldr	r2, [pc, #48]	; (8001f40 <HAL_TIM_PWM_MspInit+0x88>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d10b      	bne.n	8001f2a <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001f12:	4b09      	ldr	r3, [pc, #36]	; (8001f38 <HAL_TIM_PWM_MspInit+0x80>)
 8001f14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f16:	4a08      	ldr	r2, [pc, #32]	; (8001f38 <HAL_TIM_PWM_MspInit+0x80>)
 8001f18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f1c:	6613      	str	r3, [r2, #96]	; 0x60
 8001f1e:	4b06      	ldr	r3, [pc, #24]	; (8001f38 <HAL_TIM_PWM_MspInit+0x80>)
 8001f20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f26:	60fb      	str	r3, [r7, #12]
 8001f28:	68fb      	ldr	r3, [r7, #12]
}
 8001f2a:	bf00      	nop
 8001f2c:	371c      	adds	r7, #28
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	40021000 	.word	0x40021000
 8001f3c:	40000400 	.word	0x40000400
 8001f40:	40014000 	.word	0x40014000

08001f44 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b08e      	sub	sp, #56	; 0x38
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	605a      	str	r2, [r3, #4]
 8001f56:	609a      	str	r2, [r3, #8]
 8001f58:	60da      	str	r2, [r3, #12]
 8001f5a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a73      	ldr	r2, [pc, #460]	; (8002130 <HAL_TIM_MspPostInit+0x1ec>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d11d      	bne.n	8001fa2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f66:	4b73      	ldr	r3, [pc, #460]	; (8002134 <HAL_TIM_MspPostInit+0x1f0>)
 8001f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f6a:	4a72      	ldr	r2, [pc, #456]	; (8002134 <HAL_TIM_MspPostInit+0x1f0>)
 8001f6c:	f043 0310 	orr.w	r3, r3, #16
 8001f70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f72:	4b70      	ldr	r3, [pc, #448]	; (8002134 <HAL_TIM_MspPostInit+0x1f0>)
 8001f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f76:	f003 0310 	and.w	r3, r3, #16
 8001f7a:	623b      	str	r3, [r7, #32]
 8001f7c:	6a3b      	ldr	r3, [r7, #32]
    PE9     ------> TIM1_CH1
    PE10     ------> TIM1_CH2N
    PE11     ------> TIM1_CH2
    PE12     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001f7e:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001f82:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f84:	2302      	movs	r3, #2
 8001f86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001f90:	2301      	movs	r3, #1
 8001f92:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f98:	4619      	mov	r1, r3
 8001f9a:	4867      	ldr	r0, [pc, #412]	; (8002138 <HAL_TIM_MspPostInit+0x1f4>)
 8001f9c:	f001 fcf8 	bl	8003990 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8001fa0:	e0c2      	b.n	8002128 <HAL_TIM_MspPostInit+0x1e4>
  else if(htim->Instance==TIM2)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001faa:	d13a      	bne.n	8002022 <HAL_TIM_MspPostInit+0xde>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fac:	4b61      	ldr	r3, [pc, #388]	; (8002134 <HAL_TIM_MspPostInit+0x1f0>)
 8001fae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fb0:	4a60      	ldr	r2, [pc, #384]	; (8002134 <HAL_TIM_MspPostInit+0x1f0>)
 8001fb2:	f043 0301 	orr.w	r3, r3, #1
 8001fb6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fb8:	4b5e      	ldr	r3, [pc, #376]	; (8002134 <HAL_TIM_MspPostInit+0x1f0>)
 8001fba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fbc:	f003 0301 	and.w	r3, r3, #1
 8001fc0:	61fb      	str	r3, [r7, #28]
 8001fc2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fc4:	4b5b      	ldr	r3, [pc, #364]	; (8002134 <HAL_TIM_MspPostInit+0x1f0>)
 8001fc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fc8:	4a5a      	ldr	r2, [pc, #360]	; (8002134 <HAL_TIM_MspPostInit+0x1f0>)
 8001fca:	f043 0302 	orr.w	r3, r3, #2
 8001fce:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fd0:	4b58      	ldr	r3, [pc, #352]	; (8002134 <HAL_TIM_MspPostInit+0x1f0>)
 8001fd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fd4:	f003 0302 	and.w	r3, r3, #2
 8001fd8:	61bb      	str	r3, [r7, #24]
 8001fda:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001fec:	2301      	movs	r3, #1
 8001fee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ff0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ffa:	f001 fcc9 	bl	8003990 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ffe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002002:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002004:	2302      	movs	r3, #2
 8002006:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002008:	2300      	movs	r3, #0
 800200a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800200c:	2300      	movs	r3, #0
 800200e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002010:	2301      	movs	r3, #1
 8002012:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002014:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002018:	4619      	mov	r1, r3
 800201a:	4848      	ldr	r0, [pc, #288]	; (800213c <HAL_TIM_MspPostInit+0x1f8>)
 800201c:	f001 fcb8 	bl	8003990 <HAL_GPIO_Init>
}
 8002020:	e082      	b.n	8002128 <HAL_TIM_MspPostInit+0x1e4>
  else if(htim->Instance==TIM3)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a46      	ldr	r2, [pc, #280]	; (8002140 <HAL_TIM_MspPostInit+0x1fc>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d138      	bne.n	800209e <HAL_TIM_MspPostInit+0x15a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800202c:	4b41      	ldr	r3, [pc, #260]	; (8002134 <HAL_TIM_MspPostInit+0x1f0>)
 800202e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002030:	4a40      	ldr	r2, [pc, #256]	; (8002134 <HAL_TIM_MspPostInit+0x1f0>)
 8002032:	f043 0302 	orr.w	r3, r3, #2
 8002036:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002038:	4b3e      	ldr	r3, [pc, #248]	; (8002134 <HAL_TIM_MspPostInit+0x1f0>)
 800203a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800203c:	f003 0302 	and.w	r3, r3, #2
 8002040:	617b      	str	r3, [r7, #20]
 8002042:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002044:	4b3b      	ldr	r3, [pc, #236]	; (8002134 <HAL_TIM_MspPostInit+0x1f0>)
 8002046:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002048:	4a3a      	ldr	r2, [pc, #232]	; (8002134 <HAL_TIM_MspPostInit+0x1f0>)
 800204a:	f043 0304 	orr.w	r3, r3, #4
 800204e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002050:	4b38      	ldr	r3, [pc, #224]	; (8002134 <HAL_TIM_MspPostInit+0x1f0>)
 8002052:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002054:	f003 0304 	and.w	r3, r3, #4
 8002058:	613b      	str	r3, [r7, #16]
 800205a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800205c:	2301      	movs	r3, #1
 800205e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002060:	2302      	movs	r3, #2
 8002062:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002064:	2300      	movs	r3, #0
 8002066:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002068:	2300      	movs	r3, #0
 800206a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800206c:	2302      	movs	r3, #2
 800206e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002070:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002074:	4619      	mov	r1, r3
 8002076:	4831      	ldr	r0, [pc, #196]	; (800213c <HAL_TIM_MspPostInit+0x1f8>)
 8002078:	f001 fc8a 	bl	8003990 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800207c:	2380      	movs	r3, #128	; 0x80
 800207e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002080:	2302      	movs	r3, #2
 8002082:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002084:	2300      	movs	r3, #0
 8002086:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002088:	2300      	movs	r3, #0
 800208a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800208c:	2302      	movs	r3, #2
 800208e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002090:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002094:	4619      	mov	r1, r3
 8002096:	482b      	ldr	r0, [pc, #172]	; (8002144 <HAL_TIM_MspPostInit+0x200>)
 8002098:	f001 fc7a 	bl	8003990 <HAL_GPIO_Init>
}
 800209c:	e044      	b.n	8002128 <HAL_TIM_MspPostInit+0x1e4>
  else if(htim->Instance==TIM4)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a29      	ldr	r2, [pc, #164]	; (8002148 <HAL_TIM_MspPostInit+0x204>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d11d      	bne.n	80020e4 <HAL_TIM_MspPostInit+0x1a0>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020a8:	4b22      	ldr	r3, [pc, #136]	; (8002134 <HAL_TIM_MspPostInit+0x1f0>)
 80020aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ac:	4a21      	ldr	r2, [pc, #132]	; (8002134 <HAL_TIM_MspPostInit+0x1f0>)
 80020ae:	f043 0308 	orr.w	r3, r3, #8
 80020b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020b4:	4b1f      	ldr	r3, [pc, #124]	; (8002134 <HAL_TIM_MspPostInit+0x1f0>)
 80020b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020b8:	f003 0308 	and.w	r3, r3, #8
 80020bc:	60fb      	str	r3, [r7, #12]
 80020be:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80020c0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80020c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c6:	2302      	movs	r3, #2
 80020c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ca:	2300      	movs	r3, #0
 80020cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ce:	2300      	movs	r3, #0
 80020d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80020d2:	2302      	movs	r3, #2
 80020d4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020da:	4619      	mov	r1, r3
 80020dc:	481b      	ldr	r0, [pc, #108]	; (800214c <HAL_TIM_MspPostInit+0x208>)
 80020de:	f001 fc57 	bl	8003990 <HAL_GPIO_Init>
}
 80020e2:	e021      	b.n	8002128 <HAL_TIM_MspPostInit+0x1e4>
  else if(htim->Instance==TIM15)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a19      	ldr	r2, [pc, #100]	; (8002150 <HAL_TIM_MspPostInit+0x20c>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d11c      	bne.n	8002128 <HAL_TIM_MspPostInit+0x1e4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ee:	4b11      	ldr	r3, [pc, #68]	; (8002134 <HAL_TIM_MspPostInit+0x1f0>)
 80020f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020f2:	4a10      	ldr	r2, [pc, #64]	; (8002134 <HAL_TIM_MspPostInit+0x1f0>)
 80020f4:	f043 0302 	orr.w	r3, r3, #2
 80020f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020fa:	4b0e      	ldr	r3, [pc, #56]	; (8002134 <HAL_TIM_MspPostInit+0x1f0>)
 80020fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020fe:	f003 0302 	and.w	r3, r3, #2
 8002102:	60bb      	str	r3, [r7, #8]
 8002104:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002106:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800210a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800210c:	2302      	movs	r3, #2
 800210e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002110:	2300      	movs	r3, #0
 8002112:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002114:	2300      	movs	r3, #0
 8002116:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8002118:	230e      	movs	r3, #14
 800211a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800211c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002120:	4619      	mov	r1, r3
 8002122:	4806      	ldr	r0, [pc, #24]	; (800213c <HAL_TIM_MspPostInit+0x1f8>)
 8002124:	f001 fc34 	bl	8003990 <HAL_GPIO_Init>
}
 8002128:	bf00      	nop
 800212a:	3738      	adds	r7, #56	; 0x38
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	40012c00 	.word	0x40012c00
 8002134:	40021000 	.word	0x40021000
 8002138:	48001000 	.word	0x48001000
 800213c:	48000400 	.word	0x48000400
 8002140:	40000400 	.word	0x40000400
 8002144:	48000800 	.word	0x48000800
 8002148:	40000800 	.word	0x40000800
 800214c:	48000c00 	.word	0x48000c00
 8002150:	40014000 	.word	0x40014000

08002154 <HAL_SAI_MspInit>:

static uint32_t SAI1_client =0;
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b08a      	sub	sp, #40	; 0x28
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a50      	ldr	r2, [pc, #320]	; (80022a4 <HAL_SAI_MspInit+0x150>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d124      	bne.n	80021b0 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 8002166:	4b50      	ldr	r3, [pc, #320]	; (80022a8 <HAL_SAI_MspInit+0x154>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d10b      	bne.n	8002186 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800216e:	4b4f      	ldr	r3, [pc, #316]	; (80022ac <HAL_SAI_MspInit+0x158>)
 8002170:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002172:	4a4e      	ldr	r2, [pc, #312]	; (80022ac <HAL_SAI_MspInit+0x158>)
 8002174:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002178:	6613      	str	r3, [r2, #96]	; 0x60
 800217a:	4b4c      	ldr	r3, [pc, #304]	; (80022ac <HAL_SAI_MspInit+0x158>)
 800217c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800217e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002182:	613b      	str	r3, [r7, #16]
 8002184:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 8002186:	4b48      	ldr	r3, [pc, #288]	; (80022a8 <HAL_SAI_MspInit+0x154>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	3301      	adds	r3, #1
 800218c:	4a46      	ldr	r2, [pc, #280]	; (80022a8 <HAL_SAI_MspInit+0x154>)
 800218e:	6013      	str	r3, [r2, #0]
    PE2     ------> SAI1_MCLK_A
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002190:	2374      	movs	r3, #116	; 0x74
 8002192:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002194:	2302      	movs	r3, #2
 8002196:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002198:	2300      	movs	r3, #0
 800219a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800219c:	2300      	movs	r3, #0
 800219e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80021a0:	230d      	movs	r3, #13
 80021a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021a4:	f107 0314 	add.w	r3, r7, #20
 80021a8:	4619      	mov	r1, r3
 80021aa:	4841      	ldr	r0, [pc, #260]	; (80022b0 <HAL_SAI_MspInit+0x15c>)
 80021ac:	f001 fbf0 	bl	8003990 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a3f      	ldr	r2, [pc, #252]	; (80022b4 <HAL_SAI_MspInit+0x160>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d135      	bne.n	8002226 <HAL_SAI_MspInit+0xd2>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 80021ba:	4b3b      	ldr	r3, [pc, #236]	; (80022a8 <HAL_SAI_MspInit+0x154>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d10b      	bne.n	80021da <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80021c2:	4b3a      	ldr	r3, [pc, #232]	; (80022ac <HAL_SAI_MspInit+0x158>)
 80021c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021c6:	4a39      	ldr	r2, [pc, #228]	; (80022ac <HAL_SAI_MspInit+0x158>)
 80021c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80021cc:	6613      	str	r3, [r2, #96]	; 0x60
 80021ce:	4b37      	ldr	r3, [pc, #220]	; (80022ac <HAL_SAI_MspInit+0x158>)
 80021d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021d6:	60fb      	str	r3, [r7, #12]
 80021d8:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 80021da:	4b33      	ldr	r3, [pc, #204]	; (80022a8 <HAL_SAI_MspInit+0x154>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	3301      	adds	r3, #1
 80021e0:	4a31      	ldr	r2, [pc, #196]	; (80022a8 <HAL_SAI_MspInit+0x154>)
 80021e2:	6013      	str	r3, [r2, #0]
    PE3     ------> SAI1_SD_B
    PF7     ------> SAI1_MCLK_B
    PF8     ------> SAI1_SCK_B
    PF9     ------> SAI1_FS_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80021e4:	2308      	movs	r3, #8
 80021e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e8:	2302      	movs	r3, #2
 80021ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ec:	2300      	movs	r3, #0
 80021ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f0:	2300      	movs	r3, #0
 80021f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80021f4:	230d      	movs	r3, #13
 80021f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021f8:	f107 0314 	add.w	r3, r7, #20
 80021fc:	4619      	mov	r1, r3
 80021fe:	482c      	ldr	r0, [pc, #176]	; (80022b0 <HAL_SAI_MspInit+0x15c>)
 8002200:	f001 fbc6 	bl	8003990 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002204:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002208:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800220a:	2302      	movs	r3, #2
 800220c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220e:	2300      	movs	r3, #0
 8002210:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002212:	2300      	movs	r3, #0
 8002214:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8002216:	230d      	movs	r3, #13
 8002218:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800221a:	f107 0314 	add.w	r3, r7, #20
 800221e:	4619      	mov	r1, r3
 8002220:	4825      	ldr	r0, [pc, #148]	; (80022b8 <HAL_SAI_MspInit+0x164>)
 8002222:	f001 fbb5 	bl	8003990 <HAL_GPIO_Init>

    }
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a24      	ldr	r2, [pc, #144]	; (80022bc <HAL_SAI_MspInit+0x168>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d135      	bne.n	800229c <HAL_SAI_MspInit+0x148>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8002230:	4b23      	ldr	r3, [pc, #140]	; (80022c0 <HAL_SAI_MspInit+0x16c>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d10b      	bne.n	8002250 <HAL_SAI_MspInit+0xfc>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002238:	4b1c      	ldr	r3, [pc, #112]	; (80022ac <HAL_SAI_MspInit+0x158>)
 800223a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800223c:	4a1b      	ldr	r2, [pc, #108]	; (80022ac <HAL_SAI_MspInit+0x158>)
 800223e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002242:	6613      	str	r3, [r2, #96]	; 0x60
 8002244:	4b19      	ldr	r3, [pc, #100]	; (80022ac <HAL_SAI_MspInit+0x158>)
 8002246:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002248:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800224c:	60bb      	str	r3, [r7, #8]
 800224e:	68bb      	ldr	r3, [r7, #8]
    }
    SAI2_client ++;
 8002250:	4b1b      	ldr	r3, [pc, #108]	; (80022c0 <HAL_SAI_MspInit+0x16c>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	3301      	adds	r3, #1
 8002256:	4a1a      	ldr	r2, [pc, #104]	; (80022c0 <HAL_SAI_MspInit+0x16c>)
 8002258:	6013      	str	r3, [r2, #0]
    PB12     ------> SAI2_FS_A
    PB13     ------> SAI2_SCK_A
    PB15     ------> SAI2_SD_A
    PC6     ------> SAI2_MCLK_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800225a:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 800225e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002260:	2302      	movs	r3, #2
 8002262:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002264:	2300      	movs	r3, #0
 8002266:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002268:	2300      	movs	r3, #0
 800226a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 800226c:	230d      	movs	r3, #13
 800226e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002270:	f107 0314 	add.w	r3, r7, #20
 8002274:	4619      	mov	r1, r3
 8002276:	4813      	ldr	r0, [pc, #76]	; (80022c4 <HAL_SAI_MspInit+0x170>)
 8002278:	f001 fb8a 	bl	8003990 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800227c:	2340      	movs	r3, #64	; 0x40
 800227e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002280:	2302      	movs	r3, #2
 8002282:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002284:	2300      	movs	r3, #0
 8002286:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002288:	2300      	movs	r3, #0
 800228a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 800228c:	230d      	movs	r3, #13
 800228e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002290:	f107 0314 	add.w	r3, r7, #20
 8002294:	4619      	mov	r1, r3
 8002296:	480c      	ldr	r0, [pc, #48]	; (80022c8 <HAL_SAI_MspInit+0x174>)
 8002298:	f001 fb7a 	bl	8003990 <HAL_GPIO_Init>

    }
}
 800229c:	bf00      	nop
 800229e:	3728      	adds	r7, #40	; 0x28
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	40015404 	.word	0x40015404
 80022a8:	2000076c 	.word	0x2000076c
 80022ac:	40021000 	.word	0x40021000
 80022b0:	48001000 	.word	0x48001000
 80022b4:	40015424 	.word	0x40015424
 80022b8:	48001400 	.word	0x48001400
 80022bc:	40015804 	.word	0x40015804
 80022c0:	20000770 	.word	0x20000770
 80022c4:	48000400 	.word	0x48000400
 80022c8:	48000800 	.word	0x48000800

080022cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022d0:	e7fe      	b.n	80022d0 <NMI_Handler+0x4>

080022d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022d2:	b480      	push	{r7}
 80022d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022d6:	e7fe      	b.n	80022d6 <HardFault_Handler+0x4>

080022d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022dc:	e7fe      	b.n	80022dc <MemManage_Handler+0x4>

080022de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022de:	b480      	push	{r7}
 80022e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022e2:	e7fe      	b.n	80022e2 <BusFault_Handler+0x4>

080022e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022e8:	e7fe      	b.n	80022e8 <UsageFault_Handler+0x4>

080022ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022ea:	b480      	push	{r7}
 80022ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022ee:	bf00      	nop
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022fc:	bf00      	nop
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr

08002306 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002306:	b480      	push	{r7}
 8002308:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800230a:	bf00      	nop
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002318:	f000 f892 	bl	8002440 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800231c:	bf00      	nop
 800231e:	bd80      	pop	{r7, pc}

08002320 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002324:	4b06      	ldr	r3, [pc, #24]	; (8002340 <SystemInit+0x20>)
 8002326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800232a:	4a05      	ldr	r2, [pc, #20]	; (8002340 <SystemInit+0x20>)
 800232c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002330:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002334:	bf00      	nop
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	e000ed00 	.word	0xe000ed00

08002344 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002344:	f8df d034 	ldr.w	sp, [pc, #52]	; 800237c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002348:	f7ff ffea 	bl	8002320 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800234c:	480c      	ldr	r0, [pc, #48]	; (8002380 <LoopForever+0x6>)
  ldr r1, =_edata
 800234e:	490d      	ldr	r1, [pc, #52]	; (8002384 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002350:	4a0d      	ldr	r2, [pc, #52]	; (8002388 <LoopForever+0xe>)
  movs r3, #0
 8002352:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002354:	e002      	b.n	800235c <LoopCopyDataInit>

08002356 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002356:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002358:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800235a:	3304      	adds	r3, #4

0800235c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800235c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800235e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002360:	d3f9      	bcc.n	8002356 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002362:	4a0a      	ldr	r2, [pc, #40]	; (800238c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002364:	4c0a      	ldr	r4, [pc, #40]	; (8002390 <LoopForever+0x16>)
  movs r3, #0
 8002366:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002368:	e001      	b.n	800236e <LoopFillZerobss>

0800236a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800236a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800236c:	3204      	adds	r2, #4

0800236e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800236e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002370:	d3fb      	bcc.n	800236a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002372:	f006 fe8d 	bl	8009090 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002376:	f7fe f8c3 	bl	8000500 <main>

0800237a <LoopForever>:

LoopForever:
    b LoopForever
 800237a:	e7fe      	b.n	800237a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800237c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8002380:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002384:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8002388:	08009180 	.word	0x08009180
  ldr r2, =_sbss
 800238c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8002390:	20000778 	.word	0x20000778

08002394 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002394:	e7fe      	b.n	8002394 <ADC1_IRQHandler>

08002396 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002396:	b580      	push	{r7, lr}
 8002398:	b082      	sub	sp, #8
 800239a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800239c:	2300      	movs	r3, #0
 800239e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023a0:	2003      	movs	r0, #3
 80023a2:	f001 fac1 	bl	8003928 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80023a6:	2000      	movs	r0, #0
 80023a8:	f000 f80e 	bl	80023c8 <HAL_InitTick>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d002      	beq.n	80023b8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	71fb      	strb	r3, [r7, #7]
 80023b6:	e001      	b.n	80023bc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80023b8:	f7ff f9c8 	bl	800174c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80023bc:	79fb      	ldrb	r3, [r7, #7]
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3708      	adds	r7, #8
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
	...

080023c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80023d0:	2300      	movs	r3, #0
 80023d2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80023d4:	4b17      	ldr	r3, [pc, #92]	; (8002434 <HAL_InitTick+0x6c>)
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d023      	beq.n	8002424 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80023dc:	4b16      	ldr	r3, [pc, #88]	; (8002438 <HAL_InitTick+0x70>)
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	4b14      	ldr	r3, [pc, #80]	; (8002434 <HAL_InitTick+0x6c>)
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	4619      	mov	r1, r3
 80023e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80023ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80023f2:	4618      	mov	r0, r3
 80023f4:	f001 fabf 	bl	8003976 <HAL_SYSTICK_Config>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d10f      	bne.n	800241e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2b0f      	cmp	r3, #15
 8002402:	d809      	bhi.n	8002418 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002404:	2200      	movs	r2, #0
 8002406:	6879      	ldr	r1, [r7, #4]
 8002408:	f04f 30ff 	mov.w	r0, #4294967295
 800240c:	f001 fa97 	bl	800393e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002410:	4a0a      	ldr	r2, [pc, #40]	; (800243c <HAL_InitTick+0x74>)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6013      	str	r3, [r2, #0]
 8002416:	e007      	b.n	8002428 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	73fb      	strb	r3, [r7, #15]
 800241c:	e004      	b.n	8002428 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	73fb      	strb	r3, [r7, #15]
 8002422:	e001      	b.n	8002428 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002428:	7bfb      	ldrb	r3, [r7, #15]
}
 800242a:	4618      	mov	r0, r3
 800242c:	3710      	adds	r7, #16
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	20000010 	.word	0x20000010
 8002438:	20000008 	.word	0x20000008
 800243c:	2000000c 	.word	0x2000000c

08002440 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002444:	4b06      	ldr	r3, [pc, #24]	; (8002460 <HAL_IncTick+0x20>)
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	461a      	mov	r2, r3
 800244a:	4b06      	ldr	r3, [pc, #24]	; (8002464 <HAL_IncTick+0x24>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4413      	add	r3, r2
 8002450:	4a04      	ldr	r2, [pc, #16]	; (8002464 <HAL_IncTick+0x24>)
 8002452:	6013      	str	r3, [r2, #0]
}
 8002454:	bf00      	nop
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	20000010 	.word	0x20000010
 8002464:	20000774 	.word	0x20000774

08002468 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  return uwTick;
 800246c:	4b03      	ldr	r3, [pc, #12]	; (800247c <HAL_GetTick+0x14>)
 800246e:	681b      	ldr	r3, [r3, #0]
}
 8002470:	4618      	mov	r0, r3
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	20000774 	.word	0x20000774

08002480 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002488:	f7ff ffee 	bl	8002468 <HAL_GetTick>
 800248c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002498:	d005      	beq.n	80024a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800249a:	4b0a      	ldr	r3, [pc, #40]	; (80024c4 <HAL_Delay+0x44>)
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	461a      	mov	r2, r3
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	4413      	add	r3, r2
 80024a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024a6:	bf00      	nop
 80024a8:	f7ff ffde 	bl	8002468 <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	68fa      	ldr	r2, [r7, #12]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d8f7      	bhi.n	80024a8 <HAL_Delay+0x28>
  {
  }
}
 80024b8:	bf00      	nop
 80024ba:	bf00      	nop
 80024bc:	3710      	adds	r7, #16
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	20000010 	.word	0x20000010

080024c8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	431a      	orrs	r2, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	609a      	str	r2, [r3, #8]
}
 80024e2:	bf00      	nop
 80024e4:	370c      	adds	r7, #12
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr

080024ee <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80024ee:	b480      	push	{r7}
 80024f0:	b083      	sub	sp, #12
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	6078      	str	r0, [r7, #4]
 80024f6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	431a      	orrs	r2, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	609a      	str	r2, [r3, #8]
}
 8002508:	bf00      	nop
 800250a:	370c      	adds	r7, #12
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr

08002514 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002524:	4618      	mov	r0, r3
 8002526:	370c      	adds	r7, #12
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr

08002530 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002530:	b480      	push	{r7}
 8002532:	b087      	sub	sp, #28
 8002534:	af00      	add	r7, sp, #0
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	60b9      	str	r1, [r7, #8]
 800253a:	607a      	str	r2, [r7, #4]
 800253c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	3360      	adds	r3, #96	; 0x60
 8002542:	461a      	mov	r2, r3
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	4413      	add	r3, r2
 800254a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	4b08      	ldr	r3, [pc, #32]	; (8002574 <LL_ADC_SetOffset+0x44>)
 8002552:	4013      	ands	r3, r2
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800255a:	683a      	ldr	r2, [r7, #0]
 800255c:	430a      	orrs	r2, r1
 800255e:	4313      	orrs	r3, r2
 8002560:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002568:	bf00      	nop
 800256a:	371c      	adds	r7, #28
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr
 8002574:	03fff000 	.word	0x03fff000

08002578 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002578:	b480      	push	{r7}
 800257a:	b085      	sub	sp, #20
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	3360      	adds	r3, #96	; 0x60
 8002586:	461a      	mov	r2, r3
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	4413      	add	r3, r2
 800258e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002598:	4618      	mov	r0, r3
 800259a:	3714      	adds	r7, #20
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b087      	sub	sp, #28
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	60b9      	str	r1, [r7, #8]
 80025ae:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	3360      	adds	r3, #96	; 0x60
 80025b4:	461a      	mov	r2, r3
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	4413      	add	r3, r2
 80025bc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	431a      	orrs	r2, r3
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80025ce:	bf00      	nop
 80025d0:	371c      	adds	r7, #28
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr

080025da <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80025da:	b480      	push	{r7}
 80025dc:	b083      	sub	sp, #12
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]
 80025e2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	695b      	ldr	r3, [r3, #20]
 80025e8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	431a      	orrs	r2, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	615a      	str	r2, [r3, #20]
}
 80025f4:	bf00      	nop
 80025f6:	370c      	adds	r7, #12
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr

08002600 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002600:	b480      	push	{r7}
 8002602:	b087      	sub	sp, #28
 8002604:	af00      	add	r7, sp, #0
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	60b9      	str	r1, [r7, #8]
 800260a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	3330      	adds	r3, #48	; 0x30
 8002610:	461a      	mov	r2, r3
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	0a1b      	lsrs	r3, r3, #8
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	f003 030c 	and.w	r3, r3, #12
 800261c:	4413      	add	r3, r2
 800261e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	f003 031f 	and.w	r3, r3, #31
 800262a:	211f      	movs	r1, #31
 800262c:	fa01 f303 	lsl.w	r3, r1, r3
 8002630:	43db      	mvns	r3, r3
 8002632:	401a      	ands	r2, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	0e9b      	lsrs	r3, r3, #26
 8002638:	f003 011f 	and.w	r1, r3, #31
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	f003 031f 	and.w	r3, r3, #31
 8002642:	fa01 f303 	lsl.w	r3, r1, r3
 8002646:	431a      	orrs	r2, r3
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800264c:	bf00      	nop
 800264e:	371c      	adds	r7, #28
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr

08002658 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002658:	b480      	push	{r7}
 800265a:	b087      	sub	sp, #28
 800265c:	af00      	add	r7, sp, #0
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	60b9      	str	r1, [r7, #8]
 8002662:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	3314      	adds	r3, #20
 8002668:	461a      	mov	r2, r3
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	0e5b      	lsrs	r3, r3, #25
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	f003 0304 	and.w	r3, r3, #4
 8002674:	4413      	add	r3, r2
 8002676:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	0d1b      	lsrs	r3, r3, #20
 8002680:	f003 031f 	and.w	r3, r3, #31
 8002684:	2107      	movs	r1, #7
 8002686:	fa01 f303 	lsl.w	r3, r1, r3
 800268a:	43db      	mvns	r3, r3
 800268c:	401a      	ands	r2, r3
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	0d1b      	lsrs	r3, r3, #20
 8002692:	f003 031f 	and.w	r3, r3, #31
 8002696:	6879      	ldr	r1, [r7, #4]
 8002698:	fa01 f303 	lsl.w	r3, r1, r3
 800269c:	431a      	orrs	r2, r3
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80026a2:	bf00      	nop
 80026a4:	371c      	adds	r7, #28
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
	...

080026b0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b085      	sub	sp, #20
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	60b9      	str	r1, [r7, #8]
 80026ba:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026c8:	43db      	mvns	r3, r3
 80026ca:	401a      	ands	r2, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f003 0318 	and.w	r3, r3, #24
 80026d2:	4908      	ldr	r1, [pc, #32]	; (80026f4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80026d4:	40d9      	lsrs	r1, r3
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	400b      	ands	r3, r1
 80026da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026de:	431a      	orrs	r2, r3
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80026e6:	bf00      	nop
 80026e8:	3714      	adds	r7, #20
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	0007ffff 	.word	0x0007ffff

080026f8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002708:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	6093      	str	r3, [r2, #8]
}
 8002710:	bf00      	nop
 8002712:	370c      	adds	r7, #12
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr

0800271c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800272c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002730:	d101      	bne.n	8002736 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002732:	2301      	movs	r3, #1
 8002734:	e000      	b.n	8002738 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002736:	2300      	movs	r3, #0
}
 8002738:	4618      	mov	r0, r3
 800273a:	370c      	adds	r7, #12
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr

08002744 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002754:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002758:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002760:	bf00      	nop
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr

0800276c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800277c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002780:	d101      	bne.n	8002786 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002782:	2301      	movs	r3, #1
 8002784:	e000      	b.n	8002788 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002786:	2300      	movs	r3, #0
}
 8002788:	4618      	mov	r0, r3
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr

08002794 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	f003 0301 	and.w	r3, r3, #1
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d101      	bne.n	80027ac <LL_ADC_IsEnabled+0x18>
 80027a8:	2301      	movs	r3, #1
 80027aa:	e000      	b.n	80027ae <LL_ADC_IsEnabled+0x1a>
 80027ac:	2300      	movs	r3, #0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	370c      	adds	r7, #12
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr

080027ba <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80027ba:	b480      	push	{r7}
 80027bc:	b083      	sub	sp, #12
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f003 0304 	and.w	r3, r3, #4
 80027ca:	2b04      	cmp	r3, #4
 80027cc:	d101      	bne.n	80027d2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80027ce:	2301      	movs	r3, #1
 80027d0:	e000      	b.n	80027d4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80027d2:	2300      	movs	r3, #0
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	f003 0308 	and.w	r3, r3, #8
 80027f0:	2b08      	cmp	r3, #8
 80027f2:	d101      	bne.n	80027f8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80027f4:	2301      	movs	r3, #1
 80027f6:	e000      	b.n	80027fa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80027f8:	2300      	movs	r3, #0
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	370c      	adds	r7, #12
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
	...

08002808 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b088      	sub	sp, #32
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002810:	2300      	movs	r3, #0
 8002812:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002814:	2300      	movs	r3, #0
 8002816:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d101      	bne.n	8002822 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e12f      	b.n	8002a82 <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800282c:	2b00      	cmp	r3, #0
 800282e:	d109      	bne.n	8002844 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f7fe ffaf 	bl	8001794 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4618      	mov	r0, r3
 800284a:	f7ff ff67 	bl	800271c <LL_ADC_IsDeepPowerDownEnabled>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d004      	beq.n	800285e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4618      	mov	r0, r3
 800285a:	f7ff ff4d 	bl	80026f8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4618      	mov	r0, r3
 8002864:	f7ff ff82 	bl	800276c <LL_ADC_IsInternalRegulatorEnabled>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d115      	bne.n	800289a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4618      	mov	r0, r3
 8002874:	f7ff ff66 	bl	8002744 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002878:	4b84      	ldr	r3, [pc, #528]	; (8002a8c <HAL_ADC_Init+0x284>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	099b      	lsrs	r3, r3, #6
 800287e:	4a84      	ldr	r2, [pc, #528]	; (8002a90 <HAL_ADC_Init+0x288>)
 8002880:	fba2 2303 	umull	r2, r3, r2, r3
 8002884:	099b      	lsrs	r3, r3, #6
 8002886:	3301      	adds	r3, #1
 8002888:	005b      	lsls	r3, r3, #1
 800288a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800288c:	e002      	b.n	8002894 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	3b01      	subs	r3, #1
 8002892:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d1f9      	bne.n	800288e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4618      	mov	r0, r3
 80028a0:	f7ff ff64 	bl	800276c <LL_ADC_IsInternalRegulatorEnabled>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d10d      	bne.n	80028c6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ae:	f043 0210 	orr.w	r2, r3, #16
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ba:	f043 0201 	orr.w	r2, r3, #1
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7ff ff75 	bl	80027ba <LL_ADC_REG_IsConversionOngoing>
 80028d0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028d6:	f003 0310 	and.w	r3, r3, #16
 80028da:	2b00      	cmp	r3, #0
 80028dc:	f040 80c8 	bne.w	8002a70 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	f040 80c4 	bne.w	8002a70 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ec:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80028f0:	f043 0202 	orr.w	r2, r3, #2
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4618      	mov	r0, r3
 80028fe:	f7ff ff49 	bl	8002794 <LL_ADC_IsEnabled>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d10b      	bne.n	8002920 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002908:	4862      	ldr	r0, [pc, #392]	; (8002a94 <HAL_ADC_Init+0x28c>)
 800290a:	f7ff ff43 	bl	8002794 <LL_ADC_IsEnabled>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d105      	bne.n	8002920 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	4619      	mov	r1, r3
 800291a:	485f      	ldr	r0, [pc, #380]	; (8002a98 <HAL_ADC_Init+0x290>)
 800291c:	f7ff fdd4 	bl	80024c8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	7e5b      	ldrb	r3, [r3, #25]
 8002924:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800292a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002930:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002936:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800293e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002940:	4313      	orrs	r3, r2
 8002942:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f893 3020 	ldrb.w	r3, [r3, #32]
 800294a:	2b01      	cmp	r3, #1
 800294c:	d106      	bne.n	800295c <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002952:	3b01      	subs	r3, #1
 8002954:	045b      	lsls	r3, r3, #17
 8002956:	69ba      	ldr	r2, [r7, #24]
 8002958:	4313      	orrs	r3, r2
 800295a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002960:	2b00      	cmp	r3, #0
 8002962:	d009      	beq.n	8002978 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002968:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002970:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002972:	69ba      	ldr	r2, [r7, #24]
 8002974:	4313      	orrs	r3, r2
 8002976:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	68da      	ldr	r2, [r3, #12]
 800297e:	4b47      	ldr	r3, [pc, #284]	; (8002a9c <HAL_ADC_Init+0x294>)
 8002980:	4013      	ands	r3, r2
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	6812      	ldr	r2, [r2, #0]
 8002986:	69b9      	ldr	r1, [r7, #24]
 8002988:	430b      	orrs	r3, r1
 800298a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4618      	mov	r0, r3
 8002992:	f7ff ff12 	bl	80027ba <LL_ADC_REG_IsConversionOngoing>
 8002996:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4618      	mov	r0, r3
 800299e:	f7ff ff1f 	bl	80027e0 <LL_ADC_INJ_IsConversionOngoing>
 80029a2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d140      	bne.n	8002a2c <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d13d      	bne.n	8002a2c <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	7e1b      	ldrb	r3, [r3, #24]
 80029b8:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80029ba:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80029c2:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80029c4:	4313      	orrs	r3, r2
 80029c6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80029d2:	f023 0306 	bic.w	r3, r3, #6
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	6812      	ldr	r2, [r2, #0]
 80029da:	69b9      	ldr	r1, [r7, #24]
 80029dc:	430b      	orrs	r3, r1
 80029de:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d118      	bne.n	8002a1c <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	691b      	ldr	r3, [r3, #16]
 80029f0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80029f4:	f023 0304 	bic.w	r3, r3, #4
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002a00:	4311      	orrs	r1, r2
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002a06:	4311      	orrs	r1, r2
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002a0c:	430a      	orrs	r2, r1
 8002a0e:	431a      	orrs	r2, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f042 0201 	orr.w	r2, r2, #1
 8002a18:	611a      	str	r2, [r3, #16]
 8002a1a:	e007      	b.n	8002a2c <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	691a      	ldr	r2, [r3, #16]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f022 0201 	bic.w	r2, r2, #1
 8002a2a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	691b      	ldr	r3, [r3, #16]
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d10c      	bne.n	8002a4e <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3a:	f023 010f 	bic.w	r1, r3, #15
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	69db      	ldr	r3, [r3, #28]
 8002a42:	1e5a      	subs	r2, r3, #1
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	430a      	orrs	r2, r1
 8002a4a:	631a      	str	r2, [r3, #48]	; 0x30
 8002a4c:	e007      	b.n	8002a5e <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f022 020f 	bic.w	r2, r2, #15
 8002a5c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a62:	f023 0303 	bic.w	r3, r3, #3
 8002a66:	f043 0201 	orr.w	r2, r3, #1
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	659a      	str	r2, [r3, #88]	; 0x58
 8002a6e:	e007      	b.n	8002a80 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a74:	f043 0210 	orr.w	r2, r3, #16
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002a80:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3720      	adds	r7, #32
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	20000008 	.word	0x20000008
 8002a90:	053e2d63 	.word	0x053e2d63
 8002a94:	50040000 	.word	0x50040000
 8002a98:	50040300 	.word	0x50040300
 8002a9c:	fff0c007 	.word	0xfff0c007

08002aa0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b0b6      	sub	sp, #216	; 0xd8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d101      	bne.n	8002ac2 <HAL_ADC_ConfigChannel+0x22>
 8002abe:	2302      	movs	r3, #2
 8002ac0:	e3d5      	b.n	800326e <HAL_ADC_ConfigChannel+0x7ce>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7ff fe73 	bl	80027ba <LL_ADC_REG_IsConversionOngoing>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	f040 83ba 	bne.w	8003250 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	2b05      	cmp	r3, #5
 8002ae2:	d824      	bhi.n	8002b2e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	3b02      	subs	r3, #2
 8002aea:	2b03      	cmp	r3, #3
 8002aec:	d81b      	bhi.n	8002b26 <HAL_ADC_ConfigChannel+0x86>
 8002aee:	a201      	add	r2, pc, #4	; (adr r2, 8002af4 <HAL_ADC_ConfigChannel+0x54>)
 8002af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002af4:	08002b05 	.word	0x08002b05
 8002af8:	08002b0d 	.word	0x08002b0d
 8002afc:	08002b15 	.word	0x08002b15
 8002b00:	08002b1d 	.word	0x08002b1d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	220c      	movs	r2, #12
 8002b08:	605a      	str	r2, [r3, #4]
          break;
 8002b0a:	e011      	b.n	8002b30 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	2212      	movs	r2, #18
 8002b10:	605a      	str	r2, [r3, #4]
          break;
 8002b12:	e00d      	b.n	8002b30 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	2218      	movs	r2, #24
 8002b18:	605a      	str	r2, [r3, #4]
          break;
 8002b1a:	e009      	b.n	8002b30 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b22:	605a      	str	r2, [r3, #4]
          break;
 8002b24:	e004      	b.n	8002b30 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	2206      	movs	r2, #6
 8002b2a:	605a      	str	r2, [r3, #4]
          break;
 8002b2c:	e000      	b.n	8002b30 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002b2e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6818      	ldr	r0, [r3, #0]
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	6859      	ldr	r1, [r3, #4]
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	f7ff fd5f 	bl	8002600 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7ff fe37 	bl	80027ba <LL_ADC_REG_IsConversionOngoing>
 8002b4c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4618      	mov	r0, r3
 8002b56:	f7ff fe43 	bl	80027e0 <LL_ADC_INJ_IsConversionOngoing>
 8002b5a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b5e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	f040 81c1 	bne.w	8002eea <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b68:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	f040 81bc 	bne.w	8002eea <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002b7a:	d10f      	bne.n	8002b9c <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6818      	ldr	r0, [r3, #0]
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2200      	movs	r2, #0
 8002b86:	4619      	mov	r1, r3
 8002b88:	f7ff fd66 	bl	8002658 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7ff fd20 	bl	80025da <LL_ADC_SetSamplingTimeCommonConfig>
 8002b9a:	e00e      	b.n	8002bba <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6818      	ldr	r0, [r3, #0]
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	6819      	ldr	r1, [r3, #0]
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	461a      	mov	r2, r3
 8002baa:	f7ff fd55 	bl	8002658 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	2100      	movs	r1, #0
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f7ff fd10 	bl	80025da <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	695a      	ldr	r2, [r3, #20]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	08db      	lsrs	r3, r3, #3
 8002bc6:	f003 0303 	and.w	r3, r3, #3
 8002bca:	005b      	lsls	r3, r3, #1
 8002bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	691b      	ldr	r3, [r3, #16]
 8002bd8:	2b04      	cmp	r3, #4
 8002bda:	d00a      	beq.n	8002bf2 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6818      	ldr	r0, [r3, #0]
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	6919      	ldr	r1, [r3, #16]
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002bec:	f7ff fca0 	bl	8002530 <LL_ADC_SetOffset>
 8002bf0:	e17b      	b.n	8002eea <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2100      	movs	r1, #0
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7ff fcbd 	bl	8002578 <LL_ADC_GetOffsetChannel>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d10a      	bne.n	8002c1e <HAL_ADC_ConfigChannel+0x17e>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2100      	movs	r1, #0
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f7ff fcb2 	bl	8002578 <LL_ADC_GetOffsetChannel>
 8002c14:	4603      	mov	r3, r0
 8002c16:	0e9b      	lsrs	r3, r3, #26
 8002c18:	f003 021f 	and.w	r2, r3, #31
 8002c1c:	e01e      	b.n	8002c5c <HAL_ADC_ConfigChannel+0x1bc>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2100      	movs	r1, #0
 8002c24:	4618      	mov	r0, r3
 8002c26:	f7ff fca7 	bl	8002578 <LL_ADC_GetOffsetChannel>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c30:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002c34:	fa93 f3a3 	rbit	r3, r3
 8002c38:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002c3c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002c40:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002c44:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d101      	bne.n	8002c50 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8002c4c:	2320      	movs	r3, #32
 8002c4e:	e004      	b.n	8002c5a <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8002c50:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002c54:	fab3 f383 	clz	r3, r3
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d105      	bne.n	8002c74 <HAL_ADC_ConfigChannel+0x1d4>
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	0e9b      	lsrs	r3, r3, #26
 8002c6e:	f003 031f 	and.w	r3, r3, #31
 8002c72:	e018      	b.n	8002ca6 <HAL_ADC_ConfigChannel+0x206>
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c7c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002c80:	fa93 f3a3 	rbit	r3, r3
 8002c84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002c88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002c8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002c90:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d101      	bne.n	8002c9c <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8002c98:	2320      	movs	r3, #32
 8002c9a:	e004      	b.n	8002ca6 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8002c9c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002ca0:	fab3 f383 	clz	r3, r3
 8002ca4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d106      	bne.n	8002cb8 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	2100      	movs	r1, #0
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f7ff fc76 	bl	80025a4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2101      	movs	r1, #1
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f7ff fc5a 	bl	8002578 <LL_ADC_GetOffsetChannel>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d10a      	bne.n	8002ce4 <HAL_ADC_ConfigChannel+0x244>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2101      	movs	r1, #1
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f7ff fc4f 	bl	8002578 <LL_ADC_GetOffsetChannel>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	0e9b      	lsrs	r3, r3, #26
 8002cde:	f003 021f 	and.w	r2, r3, #31
 8002ce2:	e01e      	b.n	8002d22 <HAL_ADC_ConfigChannel+0x282>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	2101      	movs	r1, #1
 8002cea:	4618      	mov	r0, r3
 8002cec:	f7ff fc44 	bl	8002578 <LL_ADC_GetOffsetChannel>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002cfa:	fa93 f3a3 	rbit	r3, r3
 8002cfe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002d02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002d06:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002d0a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d101      	bne.n	8002d16 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8002d12:	2320      	movs	r3, #32
 8002d14:	e004      	b.n	8002d20 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8002d16:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002d1a:	fab3 f383 	clz	r3, r3
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d105      	bne.n	8002d3a <HAL_ADC_ConfigChannel+0x29a>
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	0e9b      	lsrs	r3, r3, #26
 8002d34:	f003 031f 	and.w	r3, r3, #31
 8002d38:	e018      	b.n	8002d6c <HAL_ADC_ConfigChannel+0x2cc>
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d42:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002d46:	fa93 f3a3 	rbit	r3, r3
 8002d4a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002d4e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002d52:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002d56:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d101      	bne.n	8002d62 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8002d5e:	2320      	movs	r3, #32
 8002d60:	e004      	b.n	8002d6c <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8002d62:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002d66:	fab3 f383 	clz	r3, r3
 8002d6a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d106      	bne.n	8002d7e <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2200      	movs	r2, #0
 8002d76:	2101      	movs	r1, #1
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f7ff fc13 	bl	80025a4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	2102      	movs	r1, #2
 8002d84:	4618      	mov	r0, r3
 8002d86:	f7ff fbf7 	bl	8002578 <LL_ADC_GetOffsetChannel>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d10a      	bne.n	8002daa <HAL_ADC_ConfigChannel+0x30a>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2102      	movs	r1, #2
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7ff fbec 	bl	8002578 <LL_ADC_GetOffsetChannel>
 8002da0:	4603      	mov	r3, r0
 8002da2:	0e9b      	lsrs	r3, r3, #26
 8002da4:	f003 021f 	and.w	r2, r3, #31
 8002da8:	e01e      	b.n	8002de8 <HAL_ADC_ConfigChannel+0x348>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2102      	movs	r1, #2
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7ff fbe1 	bl	8002578 <LL_ADC_GetOffsetChannel>
 8002db6:	4603      	mov	r3, r0
 8002db8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dbc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002dc0:	fa93 f3a3 	rbit	r3, r3
 8002dc4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002dc8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002dcc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002dd0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d101      	bne.n	8002ddc <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8002dd8:	2320      	movs	r3, #32
 8002dda:	e004      	b.n	8002de6 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8002ddc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002de0:	fab3 f383 	clz	r3, r3
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d105      	bne.n	8002e00 <HAL_ADC_ConfigChannel+0x360>
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	0e9b      	lsrs	r3, r3, #26
 8002dfa:	f003 031f 	and.w	r3, r3, #31
 8002dfe:	e016      	b.n	8002e2e <HAL_ADC_ConfigChannel+0x38e>
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e08:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002e0c:	fa93 f3a3 	rbit	r3, r3
 8002e10:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002e12:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002e14:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002e18:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d101      	bne.n	8002e24 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8002e20:	2320      	movs	r3, #32
 8002e22:	e004      	b.n	8002e2e <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8002e24:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e28:	fab3 f383 	clz	r3, r3
 8002e2c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d106      	bne.n	8002e40 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	2200      	movs	r2, #0
 8002e38:	2102      	movs	r1, #2
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f7ff fbb2 	bl	80025a4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2103      	movs	r1, #3
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7ff fb96 	bl	8002578 <LL_ADC_GetOffsetChannel>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d10a      	bne.n	8002e6c <HAL_ADC_ConfigChannel+0x3cc>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2103      	movs	r1, #3
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7ff fb8b 	bl	8002578 <LL_ADC_GetOffsetChannel>
 8002e62:	4603      	mov	r3, r0
 8002e64:	0e9b      	lsrs	r3, r3, #26
 8002e66:	f003 021f 	and.w	r2, r3, #31
 8002e6a:	e017      	b.n	8002e9c <HAL_ADC_ConfigChannel+0x3fc>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2103      	movs	r1, #3
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7ff fb80 	bl	8002578 <LL_ADC_GetOffsetChannel>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e7e:	fa93 f3a3 	rbit	r3, r3
 8002e82:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002e84:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e86:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002e88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d101      	bne.n	8002e92 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8002e8e:	2320      	movs	r3, #32
 8002e90:	e003      	b.n	8002e9a <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8002e92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e94:	fab3 f383 	clz	r3, r3
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d105      	bne.n	8002eb4 <HAL_ADC_ConfigChannel+0x414>
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	0e9b      	lsrs	r3, r3, #26
 8002eae:	f003 031f 	and.w	r3, r3, #31
 8002eb2:	e011      	b.n	8002ed8 <HAL_ADC_ConfigChannel+0x438>
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ebc:	fa93 f3a3 	rbit	r3, r3
 8002ec0:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002ec2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ec4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002ec6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d101      	bne.n	8002ed0 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8002ecc:	2320      	movs	r3, #32
 8002ece:	e003      	b.n	8002ed8 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8002ed0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ed2:	fab3 f383 	clz	r3, r3
 8002ed6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d106      	bne.n	8002eea <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	2103      	movs	r1, #3
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f7ff fb5d 	bl	80025a4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f7ff fc50 	bl	8002794 <LL_ADC_IsEnabled>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	f040 8140 	bne.w	800317c <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6818      	ldr	r0, [r3, #0]
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	6819      	ldr	r1, [r3, #0]
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	461a      	mov	r2, r3
 8002f0a:	f7ff fbd1 	bl	80026b0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	4a8f      	ldr	r2, [pc, #572]	; (8003150 <HAL_ADC_ConfigChannel+0x6b0>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	f040 8131 	bne.w	800317c <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d10b      	bne.n	8002f42 <HAL_ADC_ConfigChannel+0x4a2>
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	0e9b      	lsrs	r3, r3, #26
 8002f30:	3301      	adds	r3, #1
 8002f32:	f003 031f 	and.w	r3, r3, #31
 8002f36:	2b09      	cmp	r3, #9
 8002f38:	bf94      	ite	ls
 8002f3a:	2301      	movls	r3, #1
 8002f3c:	2300      	movhi	r3, #0
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	e019      	b.n	8002f76 <HAL_ADC_ConfigChannel+0x4d6>
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f4a:	fa93 f3a3 	rbit	r3, r3
 8002f4e:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002f50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f52:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002f54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d101      	bne.n	8002f5e <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8002f5a:	2320      	movs	r3, #32
 8002f5c:	e003      	b.n	8002f66 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8002f5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f60:	fab3 f383 	clz	r3, r3
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	3301      	adds	r3, #1
 8002f68:	f003 031f 	and.w	r3, r3, #31
 8002f6c:	2b09      	cmp	r3, #9
 8002f6e:	bf94      	ite	ls
 8002f70:	2301      	movls	r3, #1
 8002f72:	2300      	movhi	r3, #0
 8002f74:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d079      	beq.n	800306e <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d107      	bne.n	8002f96 <HAL_ADC_ConfigChannel+0x4f6>
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	0e9b      	lsrs	r3, r3, #26
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	069b      	lsls	r3, r3, #26
 8002f90:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f94:	e015      	b.n	8002fc2 <HAL_ADC_ConfigChannel+0x522>
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f9e:	fa93 f3a3 	rbit	r3, r3
 8002fa2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002fa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fa6:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002fa8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d101      	bne.n	8002fb2 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8002fae:	2320      	movs	r3, #32
 8002fb0:	e003      	b.n	8002fba <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8002fb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fb4:	fab3 f383 	clz	r3, r3
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	3301      	adds	r3, #1
 8002fbc:	069b      	lsls	r3, r3, #26
 8002fbe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d109      	bne.n	8002fe2 <HAL_ADC_ConfigChannel+0x542>
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	0e9b      	lsrs	r3, r3, #26
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	f003 031f 	and.w	r3, r3, #31
 8002fda:	2101      	movs	r1, #1
 8002fdc:	fa01 f303 	lsl.w	r3, r1, r3
 8002fe0:	e017      	b.n	8003012 <HAL_ADC_ConfigChannel+0x572>
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fea:	fa93 f3a3 	rbit	r3, r3
 8002fee:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002ff0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ff2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002ff4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d101      	bne.n	8002ffe <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8002ffa:	2320      	movs	r3, #32
 8002ffc:	e003      	b.n	8003006 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8002ffe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003000:	fab3 f383 	clz	r3, r3
 8003004:	b2db      	uxtb	r3, r3
 8003006:	3301      	adds	r3, #1
 8003008:	f003 031f 	and.w	r3, r3, #31
 800300c:	2101      	movs	r1, #1
 800300e:	fa01 f303 	lsl.w	r3, r1, r3
 8003012:	ea42 0103 	orr.w	r1, r2, r3
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800301e:	2b00      	cmp	r3, #0
 8003020:	d10a      	bne.n	8003038 <HAL_ADC_ConfigChannel+0x598>
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	0e9b      	lsrs	r3, r3, #26
 8003028:	3301      	adds	r3, #1
 800302a:	f003 021f 	and.w	r2, r3, #31
 800302e:	4613      	mov	r3, r2
 8003030:	005b      	lsls	r3, r3, #1
 8003032:	4413      	add	r3, r2
 8003034:	051b      	lsls	r3, r3, #20
 8003036:	e018      	b.n	800306a <HAL_ADC_ConfigChannel+0x5ca>
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800303e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003040:	fa93 f3a3 	rbit	r3, r3
 8003044:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003048:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800304a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800304c:	2b00      	cmp	r3, #0
 800304e:	d101      	bne.n	8003054 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8003050:	2320      	movs	r3, #32
 8003052:	e003      	b.n	800305c <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8003054:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003056:	fab3 f383 	clz	r3, r3
 800305a:	b2db      	uxtb	r3, r3
 800305c:	3301      	adds	r3, #1
 800305e:	f003 021f 	and.w	r2, r3, #31
 8003062:	4613      	mov	r3, r2
 8003064:	005b      	lsls	r3, r3, #1
 8003066:	4413      	add	r3, r2
 8003068:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800306a:	430b      	orrs	r3, r1
 800306c:	e081      	b.n	8003172 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003076:	2b00      	cmp	r3, #0
 8003078:	d107      	bne.n	800308a <HAL_ADC_ConfigChannel+0x5ea>
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	0e9b      	lsrs	r3, r3, #26
 8003080:	3301      	adds	r3, #1
 8003082:	069b      	lsls	r3, r3, #26
 8003084:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003088:	e015      	b.n	80030b6 <HAL_ADC_ConfigChannel+0x616>
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003092:	fa93 f3a3 	rbit	r3, r3
 8003096:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800309a:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800309c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d101      	bne.n	80030a6 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 80030a2:	2320      	movs	r3, #32
 80030a4:	e003      	b.n	80030ae <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 80030a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a8:	fab3 f383 	clz	r3, r3
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	3301      	adds	r3, #1
 80030b0:	069b      	lsls	r3, r3, #26
 80030b2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d109      	bne.n	80030d6 <HAL_ADC_ConfigChannel+0x636>
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	0e9b      	lsrs	r3, r3, #26
 80030c8:	3301      	adds	r3, #1
 80030ca:	f003 031f 	and.w	r3, r3, #31
 80030ce:	2101      	movs	r1, #1
 80030d0:	fa01 f303 	lsl.w	r3, r1, r3
 80030d4:	e017      	b.n	8003106 <HAL_ADC_ConfigChannel+0x666>
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030dc:	6a3b      	ldr	r3, [r7, #32]
 80030de:	fa93 f3a3 	rbit	r3, r3
 80030e2:	61fb      	str	r3, [r7, #28]
  return result;
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80030e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d101      	bne.n	80030f2 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 80030ee:	2320      	movs	r3, #32
 80030f0:	e003      	b.n	80030fa <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 80030f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f4:	fab3 f383 	clz	r3, r3
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	3301      	adds	r3, #1
 80030fc:	f003 031f 	and.w	r3, r3, #31
 8003100:	2101      	movs	r1, #1
 8003102:	fa01 f303 	lsl.w	r3, r1, r3
 8003106:	ea42 0103 	orr.w	r1, r2, r3
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003112:	2b00      	cmp	r3, #0
 8003114:	d10d      	bne.n	8003132 <HAL_ADC_ConfigChannel+0x692>
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	0e9b      	lsrs	r3, r3, #26
 800311c:	3301      	adds	r3, #1
 800311e:	f003 021f 	and.w	r2, r3, #31
 8003122:	4613      	mov	r3, r2
 8003124:	005b      	lsls	r3, r3, #1
 8003126:	4413      	add	r3, r2
 8003128:	3b1e      	subs	r3, #30
 800312a:	051b      	lsls	r3, r3, #20
 800312c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003130:	e01e      	b.n	8003170 <HAL_ADC_ConfigChannel+0x6d0>
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	fa93 f3a3 	rbit	r3, r3
 800313e:	613b      	str	r3, [r7, #16]
  return result;
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d104      	bne.n	8003154 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 800314a:	2320      	movs	r3, #32
 800314c:	e006      	b.n	800315c <HAL_ADC_ConfigChannel+0x6bc>
 800314e:	bf00      	nop
 8003150:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	fab3 f383 	clz	r3, r3
 800315a:	b2db      	uxtb	r3, r3
 800315c:	3301      	adds	r3, #1
 800315e:	f003 021f 	and.w	r2, r3, #31
 8003162:	4613      	mov	r3, r2
 8003164:	005b      	lsls	r3, r3, #1
 8003166:	4413      	add	r3, r2
 8003168:	3b1e      	subs	r3, #30
 800316a:	051b      	lsls	r3, r3, #20
 800316c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003170:	430b      	orrs	r3, r1
 8003172:	683a      	ldr	r2, [r7, #0]
 8003174:	6892      	ldr	r2, [r2, #8]
 8003176:	4619      	mov	r1, r3
 8003178:	f7ff fa6e 	bl	8002658 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	4b3d      	ldr	r3, [pc, #244]	; (8003278 <HAL_ADC_ConfigChannel+0x7d8>)
 8003182:	4013      	ands	r3, r2
 8003184:	2b00      	cmp	r3, #0
 8003186:	d06c      	beq.n	8003262 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003188:	483c      	ldr	r0, [pc, #240]	; (800327c <HAL_ADC_ConfigChannel+0x7dc>)
 800318a:	f7ff f9c3 	bl	8002514 <LL_ADC_GetCommonPathInternalCh>
 800318e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a3a      	ldr	r2, [pc, #232]	; (8003280 <HAL_ADC_ConfigChannel+0x7e0>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d127      	bne.n	80031ec <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800319c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80031a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d121      	bne.n	80031ec <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a35      	ldr	r2, [pc, #212]	; (8003284 <HAL_ADC_ConfigChannel+0x7e4>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d157      	bne.n	8003262 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80031b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80031b6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80031ba:	4619      	mov	r1, r3
 80031bc:	482f      	ldr	r0, [pc, #188]	; (800327c <HAL_ADC_ConfigChannel+0x7dc>)
 80031be:	f7ff f996 	bl	80024ee <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80031c2:	4b31      	ldr	r3, [pc, #196]	; (8003288 <HAL_ADC_ConfigChannel+0x7e8>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	099b      	lsrs	r3, r3, #6
 80031c8:	4a30      	ldr	r2, [pc, #192]	; (800328c <HAL_ADC_ConfigChannel+0x7ec>)
 80031ca:	fba2 2303 	umull	r2, r3, r2, r3
 80031ce:	099b      	lsrs	r3, r3, #6
 80031d0:	1c5a      	adds	r2, r3, #1
 80031d2:	4613      	mov	r3, r2
 80031d4:	005b      	lsls	r3, r3, #1
 80031d6:	4413      	add	r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80031dc:	e002      	b.n	80031e4 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	3b01      	subs	r3, #1
 80031e2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d1f9      	bne.n	80031de <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80031ea:	e03a      	b.n	8003262 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a27      	ldr	r2, [pc, #156]	; (8003290 <HAL_ADC_ConfigChannel+0x7f0>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d113      	bne.n	800321e <HAL_ADC_ConfigChannel+0x77e>
 80031f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80031fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d10d      	bne.n	800321e <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a1f      	ldr	r2, [pc, #124]	; (8003284 <HAL_ADC_ConfigChannel+0x7e4>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d12a      	bne.n	8003262 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800320c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003210:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003214:	4619      	mov	r1, r3
 8003216:	4819      	ldr	r0, [pc, #100]	; (800327c <HAL_ADC_ConfigChannel+0x7dc>)
 8003218:	f7ff f969 	bl	80024ee <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800321c:	e021      	b.n	8003262 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a1c      	ldr	r2, [pc, #112]	; (8003294 <HAL_ADC_ConfigChannel+0x7f4>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d11c      	bne.n	8003262 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003228:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800322c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003230:	2b00      	cmp	r3, #0
 8003232:	d116      	bne.n	8003262 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a12      	ldr	r2, [pc, #72]	; (8003284 <HAL_ADC_ConfigChannel+0x7e4>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d111      	bne.n	8003262 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800323e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003242:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003246:	4619      	mov	r1, r3
 8003248:	480c      	ldr	r0, [pc, #48]	; (800327c <HAL_ADC_ConfigChannel+0x7dc>)
 800324a:	f7ff f950 	bl	80024ee <LL_ADC_SetCommonPathInternalCh>
 800324e:	e008      	b.n	8003262 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003254:	f043 0220 	orr.w	r2, r3, #32
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800326a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800326e:	4618      	mov	r0, r3
 8003270:	37d8      	adds	r7, #216	; 0xd8
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	80080000 	.word	0x80080000
 800327c:	50040300 	.word	0x50040300
 8003280:	c7520000 	.word	0xc7520000
 8003284:	50040000 	.word	0x50040000
 8003288:	20000008 	.word	0x20000008
 800328c:	053e2d63 	.word	0x053e2d63
 8003290:	cb840000 	.word	0xcb840000
 8003294:	80000001 	.word	0x80000001

08003298 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d101      	bne.n	80032aa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e0ed      	b.n	8003486 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d102      	bne.n	80032bc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f7fe fade 	bl	8001878 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f042 0201 	orr.w	r2, r2, #1
 80032ca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80032cc:	f7ff f8cc 	bl	8002468 <HAL_GetTick>
 80032d0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80032d2:	e012      	b.n	80032fa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80032d4:	f7ff f8c8 	bl	8002468 <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	2b0a      	cmp	r3, #10
 80032e0:	d90b      	bls.n	80032fa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2205      	movs	r2, #5
 80032f2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e0c5      	b.n	8003486 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f003 0301 	and.w	r3, r3, #1
 8003304:	2b00      	cmp	r3, #0
 8003306:	d0e5      	beq.n	80032d4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f022 0202 	bic.w	r2, r2, #2
 8003316:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003318:	f7ff f8a6 	bl	8002468 <HAL_GetTick>
 800331c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800331e:	e012      	b.n	8003346 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003320:	f7ff f8a2 	bl	8002468 <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	2b0a      	cmp	r3, #10
 800332c:	d90b      	bls.n	8003346 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003332:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2205      	movs	r2, #5
 800333e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e09f      	b.n	8003486 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f003 0302 	and.w	r3, r3, #2
 8003350:	2b00      	cmp	r3, #0
 8003352:	d1e5      	bne.n	8003320 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	7e1b      	ldrb	r3, [r3, #24]
 8003358:	2b01      	cmp	r3, #1
 800335a:	d108      	bne.n	800336e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800336a:	601a      	str	r2, [r3, #0]
 800336c:	e007      	b.n	800337e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800337c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	7e5b      	ldrb	r3, [r3, #25]
 8003382:	2b01      	cmp	r3, #1
 8003384:	d108      	bne.n	8003398 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003394:	601a      	str	r2, [r3, #0]
 8003396:	e007      	b.n	80033a8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	7e9b      	ldrb	r3, [r3, #26]
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d108      	bne.n	80033c2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f042 0220 	orr.w	r2, r2, #32
 80033be:	601a      	str	r2, [r3, #0]
 80033c0:	e007      	b.n	80033d2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f022 0220 	bic.w	r2, r2, #32
 80033d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	7edb      	ldrb	r3, [r3, #27]
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d108      	bne.n	80033ec <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f022 0210 	bic.w	r2, r2, #16
 80033e8:	601a      	str	r2, [r3, #0]
 80033ea:	e007      	b.n	80033fc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f042 0210 	orr.w	r2, r2, #16
 80033fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	7f1b      	ldrb	r3, [r3, #28]
 8003400:	2b01      	cmp	r3, #1
 8003402:	d108      	bne.n	8003416 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f042 0208 	orr.w	r2, r2, #8
 8003412:	601a      	str	r2, [r3, #0]
 8003414:	e007      	b.n	8003426 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f022 0208 	bic.w	r2, r2, #8
 8003424:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	7f5b      	ldrb	r3, [r3, #29]
 800342a:	2b01      	cmp	r3, #1
 800342c:	d108      	bne.n	8003440 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f042 0204 	orr.w	r2, r2, #4
 800343c:	601a      	str	r2, [r3, #0]
 800343e:	e007      	b.n	8003450 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f022 0204 	bic.w	r2, r2, #4
 800344e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	689a      	ldr	r2, [r3, #8]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	431a      	orrs	r2, r3
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	691b      	ldr	r3, [r3, #16]
 800345e:	431a      	orrs	r2, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	695b      	ldr	r3, [r3, #20]
 8003464:	ea42 0103 	orr.w	r1, r2, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	1e5a      	subs	r2, r3, #1
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	430a      	orrs	r2, r1
 8003474:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	3710      	adds	r7, #16
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
	...

08003490 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8003498:	4b05      	ldr	r3, [pc, #20]	; (80034b0 <LL_EXTI_EnableIT_0_31+0x20>)
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	4904      	ldr	r1, [pc, #16]	; (80034b0 <LL_EXTI_EnableIT_0_31+0x20>)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	600b      	str	r3, [r1, #0]
}
 80034a4:	bf00      	nop
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr
 80034b0:	40010400 	.word	0x40010400

080034b4 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80034bc:	4b06      	ldr	r3, [pc, #24]	; (80034d8 <LL_EXTI_DisableIT_0_31+0x24>)
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	43db      	mvns	r3, r3
 80034c4:	4904      	ldr	r1, [pc, #16]	; (80034d8 <LL_EXTI_DisableIT_0_31+0x24>)
 80034c6:	4013      	ands	r3, r2
 80034c8:	600b      	str	r3, [r1, #0]
}
 80034ca:	bf00      	nop
 80034cc:	370c      	adds	r7, #12
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr
 80034d6:	bf00      	nop
 80034d8:	40010400 	.word	0x40010400

080034dc <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 80034e4:	4b05      	ldr	r3, [pc, #20]	; (80034fc <LL_EXTI_EnableEvent_0_31+0x20>)
 80034e6:	685a      	ldr	r2, [r3, #4]
 80034e8:	4904      	ldr	r1, [pc, #16]	; (80034fc <LL_EXTI_EnableEvent_0_31+0x20>)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	604b      	str	r3, [r1, #4]

}
 80034f0:	bf00      	nop
 80034f2:	370c      	adds	r7, #12
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr
 80034fc:	40010400 	.word	0x40010400

08003500 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8003508:	4b06      	ldr	r3, [pc, #24]	; (8003524 <LL_EXTI_DisableEvent_0_31+0x24>)
 800350a:	685a      	ldr	r2, [r3, #4]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	43db      	mvns	r3, r3
 8003510:	4904      	ldr	r1, [pc, #16]	; (8003524 <LL_EXTI_DisableEvent_0_31+0x24>)
 8003512:	4013      	ands	r3, r2
 8003514:	604b      	str	r3, [r1, #4]
}
 8003516:	bf00      	nop
 8003518:	370c      	adds	r7, #12
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	40010400 	.word	0x40010400

08003528 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8003530:	4b05      	ldr	r3, [pc, #20]	; (8003548 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8003532:	689a      	ldr	r2, [r3, #8]
 8003534:	4904      	ldr	r1, [pc, #16]	; (8003548 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4313      	orrs	r3, r2
 800353a:	608b      	str	r3, [r1, #8]

}
 800353c:	bf00      	nop
 800353e:	370c      	adds	r7, #12
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr
 8003548:	40010400 	.word	0x40010400

0800354c <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8003554:	4b06      	ldr	r3, [pc, #24]	; (8003570 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8003556:	689a      	ldr	r2, [r3, #8]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	43db      	mvns	r3, r3
 800355c:	4904      	ldr	r1, [pc, #16]	; (8003570 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800355e:	4013      	ands	r3, r2
 8003560:	608b      	str	r3, [r1, #8]

}
 8003562:	bf00      	nop
 8003564:	370c      	adds	r7, #12
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr
 800356e:	bf00      	nop
 8003570:	40010400 	.word	0x40010400

08003574 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800357c:	4b05      	ldr	r3, [pc, #20]	; (8003594 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800357e:	68da      	ldr	r2, [r3, #12]
 8003580:	4904      	ldr	r1, [pc, #16]	; (8003594 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4313      	orrs	r3, r2
 8003586:	60cb      	str	r3, [r1, #12]
}
 8003588:	bf00      	nop
 800358a:	370c      	adds	r7, #12
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr
 8003594:	40010400 	.word	0x40010400

08003598 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80035a0:	4b06      	ldr	r3, [pc, #24]	; (80035bc <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80035a2:	68da      	ldr	r2, [r3, #12]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	43db      	mvns	r3, r3
 80035a8:	4904      	ldr	r1, [pc, #16]	; (80035bc <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80035aa:	4013      	ands	r3, r2
 80035ac:	60cb      	str	r3, [r1, #12]
}
 80035ae:	bf00      	nop
 80035b0:	370c      	adds	r7, #12
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr
 80035ba:	bf00      	nop
 80035bc:	40010400 	.word	0x40010400

080035c0 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 80035c8:	4a04      	ldr	r2, [pc, #16]	; (80035dc <LL_EXTI_ClearFlag_0_31+0x1c>)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6153      	str	r3, [r2, #20]
}
 80035ce:	bf00      	nop
 80035d0:	370c      	adds	r7, #12
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr
 80035da:	bf00      	nop
 80035dc:	40010400 	.word	0x40010400

080035e0 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b088      	sub	sp, #32
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 80035e8:	2300      	movs	r3, #0
 80035ea:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80035ec:	2300      	movs	r3, #0
 80035ee:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d102      	bne.n	80035fc <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	77fb      	strb	r3, [r7, #31]
 80035fa:	e0d1      	b.n	80037a0 <HAL_COMP_Init+0x1c0>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003606:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800360a:	d102      	bne.n	8003612 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	77fb      	strb	r3, [r7, #31]
 8003610:	e0c6      	b.n	80037a0 <HAL_COMP_Init+0x1c0>
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));
#if defined(COMP2)
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));
#endif

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003618:	b2db      	uxtb	r3, r3
 800361a:	2b00      	cmp	r3, #0
 800361c:	d115      	bne.n	800364a <HAL_COMP_Init+0x6a>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	629a      	str	r2, [r3, #40]	; 0x28
      /*       COMP clock enable must be implemented by user                  */
      /*       in "HAL_COMP_MspInit()".                                       */
      /*       Therefore, for compatibility anticipation, it is recommended   */
      /*       to implement __HAL_RCC_SYSCFG_CLK_ENABLE()                     */
      /*       in "HAL_COMP_MspInit()".                                       */
      __HAL_RCC_SYSCFG_CLK_ENABLE();
 800362c:	4b5f      	ldr	r3, [pc, #380]	; (80037ac <HAL_COMP_Init+0x1cc>)
 800362e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003630:	4a5e      	ldr	r2, [pc, #376]	; (80037ac <HAL_COMP_Init+0x1cc>)
 8003632:	f043 0301 	orr.w	r3, r3, #1
 8003636:	6613      	str	r3, [r2, #96]	; 0x60
 8003638:	4b5c      	ldr	r3, [pc, #368]	; (80037ac <HAL_COMP_Init+0x1cc>)
 800363a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800363c:	f003 0301 	and.w	r3, r3, #1
 8003640:	60bb      	str	r3, [r7, #8]
 8003642:	68bb      	ldr	r3, [r7, #8]

      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
      /* Init the low level hardware */
      HAL_COMP_MspInit(hcomp);
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f7fe f95b 	bl	8001900 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003654:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.NonInvertingInput
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	68da      	ldr	r2, [r3, #12]
               | hcomp->Init.InvertingInput
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	691b      	ldr	r3, [r3, #16]
 800365e:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	69db      	ldr	r3, [r3, #28]
 8003664:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	695b      	ldr	r3, [r3, #20]
 800366a:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	699b      	ldr	r3, [r3, #24]
 8003670:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (  hcomp->Init.NonInvertingInput
 8003676:	4313      	orrs	r3, r2
 8003678:	617b      	str	r3, [r7, #20]
               COMP_CSR_BLANKING | COMP_CSR_BRGEN    | COMP_CSR_SCALEN  | COMP_CSR_INMESEL,
               tmp_csr
              );
#endif /* COMP_CSR_WINMODE */
#else
    MODIFY_REG(hcomp->Instance->CSR,
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	4b4b      	ldr	r3, [pc, #300]	; (80037b0 <HAL_COMP_Init+0x1d0>)
 8003682:	4013      	ands	r3, r2
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	6812      	ldr	r2, [r2, #0]
 8003688:	6979      	ldr	r1, [r7, #20]
 800368a:	430b      	orrs	r3, r1
 800368c:	6013      	str	r3, [r2, #0]
#if defined(COMP2)
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003696:	d106      	bne.n	80036a6 <HAL_COMP_Init+0xc6>
    {
      SET_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 8003698:	4b46      	ldr	r3, [pc, #280]	; (80037b4 <HAL_COMP_Init+0x1d4>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a45      	ldr	r2, [pc, #276]	; (80037b4 <HAL_COMP_Init+0x1d4>)
 800369e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036a2:	6013      	str	r3, [r2, #0]
 80036a4:	e005      	b.n	80036b2 <HAL_COMP_Init+0xd2>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 80036a6:	4b43      	ldr	r3, [pc, #268]	; (80037b4 <HAL_COMP_Init+0x1d4>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a42      	ldr	r2, [pc, #264]	; (80037b4 <HAL_COMP_Init+0x1d4>)
 80036ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80036b0:	6013      	str	r3, [r2, #0]
    }
#endif /* COMP2 */

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d016      	beq.n	80036ee <HAL_COMP_Init+0x10e>
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d113      	bne.n	80036ee <HAL_COMP_Init+0x10e>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80036c6:	4b3c      	ldr	r3, [pc, #240]	; (80037b8 <HAL_COMP_Init+0x1d8>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	099b      	lsrs	r3, r3, #6
 80036cc:	4a3b      	ldr	r2, [pc, #236]	; (80037bc <HAL_COMP_Init+0x1dc>)
 80036ce:	fba2 2303 	umull	r2, r3, r2, r3
 80036d2:	099b      	lsrs	r3, r3, #6
 80036d4:	1c5a      	adds	r2, r3, #1
 80036d6:	4613      	mov	r3, r2
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	4413      	add	r3, r2
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 80036e0:	e002      	b.n	80036e8 <HAL_COMP_Init+0x108>
      {
        wait_loop_index--;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	3b01      	subs	r3, #1
 80036e6:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d1f9      	bne.n	80036e2 <HAL_COMP_Init+0x102>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a33      	ldr	r2, [pc, #204]	; (80037c0 <HAL_COMP_Init+0x1e0>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d102      	bne.n	80036fe <HAL_COMP_Init+0x11e>
 80036f8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80036fc:	e001      	b.n	8003702 <HAL_COMP_Init+0x122>
 80036fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003702:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6a1b      	ldr	r3, [r3, #32]
 8003708:	f003 0303 	and.w	r3, r3, #3
 800370c:	2b00      	cmp	r3, #0
 800370e:	d037      	beq.n	8003780 <HAL_COMP_Init+0x1a0>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6a1b      	ldr	r3, [r3, #32]
 8003714:	f003 0310 	and.w	r3, r3, #16
 8003718:	2b00      	cmp	r3, #0
 800371a:	d003      	beq.n	8003724 <HAL_COMP_Init+0x144>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 800371c:	6938      	ldr	r0, [r7, #16]
 800371e:	f7ff ff03 	bl	8003528 <LL_EXTI_EnableRisingTrig_0_31>
 8003722:	e002      	b.n	800372a <HAL_COMP_Init+0x14a>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8003724:	6938      	ldr	r0, [r7, #16]
 8003726:	f7ff ff11 	bl	800354c <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a1b      	ldr	r3, [r3, #32]
 800372e:	f003 0320 	and.w	r3, r3, #32
 8003732:	2b00      	cmp	r3, #0
 8003734:	d003      	beq.n	800373e <HAL_COMP_Init+0x15e>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8003736:	6938      	ldr	r0, [r7, #16]
 8003738:	f7ff ff1c 	bl	8003574 <LL_EXTI_EnableFallingTrig_0_31>
 800373c:	e002      	b.n	8003744 <HAL_COMP_Init+0x164>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 800373e:	6938      	ldr	r0, [r7, #16]
 8003740:	f7ff ff2a 	bl	8003598 <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearFlag_0_31(exti_line);
 8003744:	6938      	ldr	r0, [r7, #16]
 8003746:	f7ff ff3b 	bl	80035c0 <LL_EXTI_ClearFlag_0_31>

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6a1b      	ldr	r3, [r3, #32]
 800374e:	f003 0302 	and.w	r3, r3, #2
 8003752:	2b00      	cmp	r3, #0
 8003754:	d003      	beq.n	800375e <HAL_COMP_Init+0x17e>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 8003756:	6938      	ldr	r0, [r7, #16]
 8003758:	f7ff fec0 	bl	80034dc <LL_EXTI_EnableEvent_0_31>
 800375c:	e002      	b.n	8003764 <HAL_COMP_Init+0x184>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 800375e:	6938      	ldr	r0, [r7, #16]
 8003760:	f7ff fece 	bl	8003500 <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6a1b      	ldr	r3, [r3, #32]
 8003768:	f003 0301 	and.w	r3, r3, #1
 800376c:	2b00      	cmp	r3, #0
 800376e:	d003      	beq.n	8003778 <HAL_COMP_Init+0x198>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 8003770:	6938      	ldr	r0, [r7, #16]
 8003772:	f7ff fe8d 	bl	8003490 <LL_EXTI_EnableIT_0_31>
 8003776:	e009      	b.n	800378c <HAL_COMP_Init+0x1ac>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8003778:	6938      	ldr	r0, [r7, #16]
 800377a:	f7ff fe9b 	bl	80034b4 <LL_EXTI_DisableIT_0_31>
 800377e:	e005      	b.n	800378c <HAL_COMP_Init+0x1ac>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 8003780:	6938      	ldr	r0, [r7, #16]
 8003782:	f7ff febd 	bl	8003500 <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 8003786:	6938      	ldr	r0, [r7, #16]
 8003788:	f7ff fe94 	bl	80034b4 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003792:	b2db      	uxtb	r3, r3
 8003794:	2b00      	cmp	r3, #0
 8003796:	d103      	bne.n	80037a0 <HAL_COMP_Init+0x1c0>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2201      	movs	r2, #1
 800379c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 80037a0:	7ffb      	ldrb	r3, [r7, #31]
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3720      	adds	r7, #32
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	40021000 	.word	0x40021000
 80037b0:	ff207d03 	.word	0xff207d03
 80037b4:	40010204 	.word	0x40010204
 80037b8:	20000008 	.word	0x20000008
 80037bc:	053e2d63 	.word	0x053e2d63
 80037c0:	40010200 	.word	0x40010200

080037c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b085      	sub	sp, #20
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f003 0307 	and.w	r3, r3, #7
 80037d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037d4:	4b0c      	ldr	r3, [pc, #48]	; (8003808 <__NVIC_SetPriorityGrouping+0x44>)
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037da:	68ba      	ldr	r2, [r7, #8]
 80037dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037e0:	4013      	ands	r3, r2
 80037e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80037f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037f6:	4a04      	ldr	r2, [pc, #16]	; (8003808 <__NVIC_SetPriorityGrouping+0x44>)
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	60d3      	str	r3, [r2, #12]
}
 80037fc:	bf00      	nop
 80037fe:	3714      	adds	r7, #20
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr
 8003808:	e000ed00 	.word	0xe000ed00

0800380c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800380c:	b480      	push	{r7}
 800380e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003810:	4b04      	ldr	r3, [pc, #16]	; (8003824 <__NVIC_GetPriorityGrouping+0x18>)
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	0a1b      	lsrs	r3, r3, #8
 8003816:	f003 0307 	and.w	r3, r3, #7
}
 800381a:	4618      	mov	r0, r3
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr
 8003824:	e000ed00 	.word	0xe000ed00

08003828 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	4603      	mov	r3, r0
 8003830:	6039      	str	r1, [r7, #0]
 8003832:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003834:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003838:	2b00      	cmp	r3, #0
 800383a:	db0a      	blt.n	8003852 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	b2da      	uxtb	r2, r3
 8003840:	490c      	ldr	r1, [pc, #48]	; (8003874 <__NVIC_SetPriority+0x4c>)
 8003842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003846:	0112      	lsls	r2, r2, #4
 8003848:	b2d2      	uxtb	r2, r2
 800384a:	440b      	add	r3, r1
 800384c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003850:	e00a      	b.n	8003868 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	b2da      	uxtb	r2, r3
 8003856:	4908      	ldr	r1, [pc, #32]	; (8003878 <__NVIC_SetPriority+0x50>)
 8003858:	79fb      	ldrb	r3, [r7, #7]
 800385a:	f003 030f 	and.w	r3, r3, #15
 800385e:	3b04      	subs	r3, #4
 8003860:	0112      	lsls	r2, r2, #4
 8003862:	b2d2      	uxtb	r2, r2
 8003864:	440b      	add	r3, r1
 8003866:	761a      	strb	r2, [r3, #24]
}
 8003868:	bf00      	nop
 800386a:	370c      	adds	r7, #12
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr
 8003874:	e000e100 	.word	0xe000e100
 8003878:	e000ed00 	.word	0xe000ed00

0800387c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800387c:	b480      	push	{r7}
 800387e:	b089      	sub	sp, #36	; 0x24
 8003880:	af00      	add	r7, sp, #0
 8003882:	60f8      	str	r0, [r7, #12]
 8003884:	60b9      	str	r1, [r7, #8]
 8003886:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f003 0307 	and.w	r3, r3, #7
 800388e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	f1c3 0307 	rsb	r3, r3, #7
 8003896:	2b04      	cmp	r3, #4
 8003898:	bf28      	it	cs
 800389a:	2304      	movcs	r3, #4
 800389c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	3304      	adds	r3, #4
 80038a2:	2b06      	cmp	r3, #6
 80038a4:	d902      	bls.n	80038ac <NVIC_EncodePriority+0x30>
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	3b03      	subs	r3, #3
 80038aa:	e000      	b.n	80038ae <NVIC_EncodePriority+0x32>
 80038ac:	2300      	movs	r3, #0
 80038ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038b0:	f04f 32ff 	mov.w	r2, #4294967295
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ba:	43da      	mvns	r2, r3
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	401a      	ands	r2, r3
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038c4:	f04f 31ff 	mov.w	r1, #4294967295
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	fa01 f303 	lsl.w	r3, r1, r3
 80038ce:	43d9      	mvns	r1, r3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038d4:	4313      	orrs	r3, r2
         );
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3724      	adds	r7, #36	; 0x24
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr
	...

080038e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b082      	sub	sp, #8
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	3b01      	subs	r3, #1
 80038f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038f4:	d301      	bcc.n	80038fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038f6:	2301      	movs	r3, #1
 80038f8:	e00f      	b.n	800391a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038fa:	4a0a      	ldr	r2, [pc, #40]	; (8003924 <SysTick_Config+0x40>)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	3b01      	subs	r3, #1
 8003900:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003902:	210f      	movs	r1, #15
 8003904:	f04f 30ff 	mov.w	r0, #4294967295
 8003908:	f7ff ff8e 	bl	8003828 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800390c:	4b05      	ldr	r3, [pc, #20]	; (8003924 <SysTick_Config+0x40>)
 800390e:	2200      	movs	r2, #0
 8003910:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003912:	4b04      	ldr	r3, [pc, #16]	; (8003924 <SysTick_Config+0x40>)
 8003914:	2207      	movs	r2, #7
 8003916:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003918:	2300      	movs	r3, #0
}
 800391a:	4618      	mov	r0, r3
 800391c:	3708      	adds	r7, #8
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	e000e010 	.word	0xe000e010

08003928 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b082      	sub	sp, #8
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f7ff ff47 	bl	80037c4 <__NVIC_SetPriorityGrouping>
}
 8003936:	bf00      	nop
 8003938:	3708      	adds	r7, #8
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}

0800393e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800393e:	b580      	push	{r7, lr}
 8003940:	b086      	sub	sp, #24
 8003942:	af00      	add	r7, sp, #0
 8003944:	4603      	mov	r3, r0
 8003946:	60b9      	str	r1, [r7, #8]
 8003948:	607a      	str	r2, [r7, #4]
 800394a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800394c:	2300      	movs	r3, #0
 800394e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003950:	f7ff ff5c 	bl	800380c <__NVIC_GetPriorityGrouping>
 8003954:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	68b9      	ldr	r1, [r7, #8]
 800395a:	6978      	ldr	r0, [r7, #20]
 800395c:	f7ff ff8e 	bl	800387c <NVIC_EncodePriority>
 8003960:	4602      	mov	r2, r0
 8003962:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003966:	4611      	mov	r1, r2
 8003968:	4618      	mov	r0, r3
 800396a:	f7ff ff5d 	bl	8003828 <__NVIC_SetPriority>
}
 800396e:	bf00      	nop
 8003970:	3718      	adds	r7, #24
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}

08003976 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003976:	b580      	push	{r7, lr}
 8003978:	b082      	sub	sp, #8
 800397a:	af00      	add	r7, sp, #0
 800397c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f7ff ffb0 	bl	80038e4 <SysTick_Config>
 8003984:	4603      	mov	r3, r0
}
 8003986:	4618      	mov	r0, r3
 8003988:	3708      	adds	r7, #8
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
	...

08003990 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003990:	b480      	push	{r7}
 8003992:	b087      	sub	sp, #28
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800399a:	2300      	movs	r3, #0
 800399c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800399e:	e166      	b.n	8003c6e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	2101      	movs	r1, #1
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	fa01 f303 	lsl.w	r3, r1, r3
 80039ac:	4013      	ands	r3, r2
 80039ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	f000 8158 	beq.w	8003c68 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f003 0303 	and.w	r3, r3, #3
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d005      	beq.n	80039d0 <HAL_GPIO_Init+0x40>
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	f003 0303 	and.w	r3, r3, #3
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d130      	bne.n	8003a32 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	005b      	lsls	r3, r3, #1
 80039da:	2203      	movs	r2, #3
 80039dc:	fa02 f303 	lsl.w	r3, r2, r3
 80039e0:	43db      	mvns	r3, r3
 80039e2:	693a      	ldr	r2, [r7, #16]
 80039e4:	4013      	ands	r3, r2
 80039e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	68da      	ldr	r2, [r3, #12]
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	005b      	lsls	r3, r3, #1
 80039f0:	fa02 f303 	lsl.w	r3, r2, r3
 80039f4:	693a      	ldr	r2, [r7, #16]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	693a      	ldr	r2, [r7, #16]
 80039fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a06:	2201      	movs	r2, #1
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0e:	43db      	mvns	r3, r3
 8003a10:	693a      	ldr	r2, [r7, #16]
 8003a12:	4013      	ands	r3, r2
 8003a14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	091b      	lsrs	r3, r3, #4
 8003a1c:	f003 0201 	and.w	r2, r3, #1
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	fa02 f303 	lsl.w	r3, r2, r3
 8003a26:	693a      	ldr	r2, [r7, #16]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	693a      	ldr	r2, [r7, #16]
 8003a30:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	f003 0303 	and.w	r3, r3, #3
 8003a3a:	2b03      	cmp	r3, #3
 8003a3c:	d017      	beq.n	8003a6e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	005b      	lsls	r3, r3, #1
 8003a48:	2203      	movs	r2, #3
 8003a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4e:	43db      	mvns	r3, r3
 8003a50:	693a      	ldr	r2, [r7, #16]
 8003a52:	4013      	ands	r3, r2
 8003a54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	689a      	ldr	r2, [r3, #8]
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	005b      	lsls	r3, r3, #1
 8003a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a62:	693a      	ldr	r2, [r7, #16]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	693a      	ldr	r2, [r7, #16]
 8003a6c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	f003 0303 	and.w	r3, r3, #3
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d123      	bne.n	8003ac2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	08da      	lsrs	r2, r3, #3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	3208      	adds	r2, #8
 8003a82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a86:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	f003 0307 	and.w	r3, r3, #7
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	220f      	movs	r2, #15
 8003a92:	fa02 f303 	lsl.w	r3, r2, r3
 8003a96:	43db      	mvns	r3, r3
 8003a98:	693a      	ldr	r2, [r7, #16]
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	691a      	ldr	r2, [r3, #16]
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	f003 0307 	and.w	r3, r3, #7
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8003aae:	693a      	ldr	r2, [r7, #16]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	08da      	lsrs	r2, r3, #3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	3208      	adds	r2, #8
 8003abc:	6939      	ldr	r1, [r7, #16]
 8003abe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	005b      	lsls	r3, r3, #1
 8003acc:	2203      	movs	r2, #3
 8003ace:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad2:	43db      	mvns	r3, r3
 8003ad4:	693a      	ldr	r2, [r7, #16]
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	f003 0203 	and.w	r2, r3, #3
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	005b      	lsls	r3, r3, #1
 8003ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aea:	693a      	ldr	r2, [r7, #16]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	693a      	ldr	r2, [r7, #16]
 8003af4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	f000 80b2 	beq.w	8003c68 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b04:	4b61      	ldr	r3, [pc, #388]	; (8003c8c <HAL_GPIO_Init+0x2fc>)
 8003b06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b08:	4a60      	ldr	r2, [pc, #384]	; (8003c8c <HAL_GPIO_Init+0x2fc>)
 8003b0a:	f043 0301 	orr.w	r3, r3, #1
 8003b0e:	6613      	str	r3, [r2, #96]	; 0x60
 8003b10:	4b5e      	ldr	r3, [pc, #376]	; (8003c8c <HAL_GPIO_Init+0x2fc>)
 8003b12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b14:	f003 0301 	and.w	r3, r3, #1
 8003b18:	60bb      	str	r3, [r7, #8]
 8003b1a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003b1c:	4a5c      	ldr	r2, [pc, #368]	; (8003c90 <HAL_GPIO_Init+0x300>)
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	089b      	lsrs	r3, r3, #2
 8003b22:	3302      	adds	r3, #2
 8003b24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b28:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	f003 0303 	and.w	r3, r3, #3
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	220f      	movs	r2, #15
 8003b34:	fa02 f303 	lsl.w	r3, r2, r3
 8003b38:	43db      	mvns	r3, r3
 8003b3a:	693a      	ldr	r2, [r7, #16]
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003b46:	d02b      	beq.n	8003ba0 <HAL_GPIO_Init+0x210>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	4a52      	ldr	r2, [pc, #328]	; (8003c94 <HAL_GPIO_Init+0x304>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d025      	beq.n	8003b9c <HAL_GPIO_Init+0x20c>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	4a51      	ldr	r2, [pc, #324]	; (8003c98 <HAL_GPIO_Init+0x308>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d01f      	beq.n	8003b98 <HAL_GPIO_Init+0x208>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	4a50      	ldr	r2, [pc, #320]	; (8003c9c <HAL_GPIO_Init+0x30c>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d019      	beq.n	8003b94 <HAL_GPIO_Init+0x204>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	4a4f      	ldr	r2, [pc, #316]	; (8003ca0 <HAL_GPIO_Init+0x310>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d013      	beq.n	8003b90 <HAL_GPIO_Init+0x200>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	4a4e      	ldr	r2, [pc, #312]	; (8003ca4 <HAL_GPIO_Init+0x314>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d00d      	beq.n	8003b8c <HAL_GPIO_Init+0x1fc>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	4a4d      	ldr	r2, [pc, #308]	; (8003ca8 <HAL_GPIO_Init+0x318>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d007      	beq.n	8003b88 <HAL_GPIO_Init+0x1f8>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	4a4c      	ldr	r2, [pc, #304]	; (8003cac <HAL_GPIO_Init+0x31c>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d101      	bne.n	8003b84 <HAL_GPIO_Init+0x1f4>
 8003b80:	2307      	movs	r3, #7
 8003b82:	e00e      	b.n	8003ba2 <HAL_GPIO_Init+0x212>
 8003b84:	2308      	movs	r3, #8
 8003b86:	e00c      	b.n	8003ba2 <HAL_GPIO_Init+0x212>
 8003b88:	2306      	movs	r3, #6
 8003b8a:	e00a      	b.n	8003ba2 <HAL_GPIO_Init+0x212>
 8003b8c:	2305      	movs	r3, #5
 8003b8e:	e008      	b.n	8003ba2 <HAL_GPIO_Init+0x212>
 8003b90:	2304      	movs	r3, #4
 8003b92:	e006      	b.n	8003ba2 <HAL_GPIO_Init+0x212>
 8003b94:	2303      	movs	r3, #3
 8003b96:	e004      	b.n	8003ba2 <HAL_GPIO_Init+0x212>
 8003b98:	2302      	movs	r3, #2
 8003b9a:	e002      	b.n	8003ba2 <HAL_GPIO_Init+0x212>
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e000      	b.n	8003ba2 <HAL_GPIO_Init+0x212>
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	697a      	ldr	r2, [r7, #20]
 8003ba4:	f002 0203 	and.w	r2, r2, #3
 8003ba8:	0092      	lsls	r2, r2, #2
 8003baa:	4093      	lsls	r3, r2
 8003bac:	693a      	ldr	r2, [r7, #16]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003bb2:	4937      	ldr	r1, [pc, #220]	; (8003c90 <HAL_GPIO_Init+0x300>)
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	089b      	lsrs	r3, r3, #2
 8003bb8:	3302      	adds	r3, #2
 8003bba:	693a      	ldr	r2, [r7, #16]
 8003bbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003bc0:	4b3b      	ldr	r3, [pc, #236]	; (8003cb0 <HAL_GPIO_Init+0x320>)
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	43db      	mvns	r3, r3
 8003bca:	693a      	ldr	r2, [r7, #16]
 8003bcc:	4013      	ands	r3, r2
 8003bce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d003      	beq.n	8003be4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003bdc:	693a      	ldr	r2, [r7, #16]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003be4:	4a32      	ldr	r2, [pc, #200]	; (8003cb0 <HAL_GPIO_Init+0x320>)
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003bea:	4b31      	ldr	r3, [pc, #196]	; (8003cb0 <HAL_GPIO_Init+0x320>)
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	43db      	mvns	r3, r3
 8003bf4:	693a      	ldr	r2, [r7, #16]
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d003      	beq.n	8003c0e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003c06:	693a      	ldr	r2, [r7, #16]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003c0e:	4a28      	ldr	r2, [pc, #160]	; (8003cb0 <HAL_GPIO_Init+0x320>)
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003c14:	4b26      	ldr	r3, [pc, #152]	; (8003cb0 <HAL_GPIO_Init+0x320>)
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	43db      	mvns	r3, r3
 8003c1e:	693a      	ldr	r2, [r7, #16]
 8003c20:	4013      	ands	r3, r2
 8003c22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d003      	beq.n	8003c38 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003c30:	693a      	ldr	r2, [r7, #16]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003c38:	4a1d      	ldr	r2, [pc, #116]	; (8003cb0 <HAL_GPIO_Init+0x320>)
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003c3e:	4b1c      	ldr	r3, [pc, #112]	; (8003cb0 <HAL_GPIO_Init+0x320>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	43db      	mvns	r3, r3
 8003c48:	693a      	ldr	r2, [r7, #16]
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d003      	beq.n	8003c62 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003c5a:	693a      	ldr	r2, [r7, #16]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003c62:	4a13      	ldr	r2, [pc, #76]	; (8003cb0 <HAL_GPIO_Init+0x320>)
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	3301      	adds	r3, #1
 8003c6c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	fa22 f303 	lsr.w	r3, r2, r3
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	f47f ae91 	bne.w	80039a0 <HAL_GPIO_Init+0x10>
  }
}
 8003c7e:	bf00      	nop
 8003c80:	bf00      	nop
 8003c82:	371c      	adds	r7, #28
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr
 8003c8c:	40021000 	.word	0x40021000
 8003c90:	40010000 	.word	0x40010000
 8003c94:	48000400 	.word	0x48000400
 8003c98:	48000800 	.word	0x48000800
 8003c9c:	48000c00 	.word	0x48000c00
 8003ca0:	48001000 	.word	0x48001000
 8003ca4:	48001400 	.word	0x48001400
 8003ca8:	48001800 	.word	0x48001800
 8003cac:	48001c00 	.word	0x48001c00
 8003cb0:	40010400 	.word	0x40010400

08003cb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	460b      	mov	r3, r1
 8003cbe:	807b      	strh	r3, [r7, #2]
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003cc4:	787b      	ldrb	r3, [r7, #1]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d003      	beq.n	8003cd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003cca:	887a      	ldrh	r2, [r7, #2]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003cd0:	e002      	b.n	8003cd8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003cd2:	887a      	ldrh	r2, [r7, #2]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003cd8:	bf00      	nop
 8003cda:	370c      	adds	r7, #12
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr

08003ce4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ce8:	4b05      	ldr	r3, [pc, #20]	; (8003d00 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a04      	ldr	r2, [pc, #16]	; (8003d00 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003cee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cf2:	6013      	str	r3, [r2, #0]
}
 8003cf4:	bf00      	nop
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr
 8003cfe:	bf00      	nop
 8003d00:	40007000 	.word	0x40007000

08003d04 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003d04:	b480      	push	{r7}
 8003d06:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d08:	4b0d      	ldr	r3, [pc, #52]	; (8003d40 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d14:	d102      	bne.n	8003d1c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8003d16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d1a:	e00b      	b.n	8003d34 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003d1c:	4b08      	ldr	r3, [pc, #32]	; (8003d40 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003d1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d2a:	d102      	bne.n	8003d32 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003d2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d30:	e000      	b.n	8003d34 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003d32:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr
 8003d3e:	bf00      	nop
 8003d40:	40007000 	.word	0x40007000

08003d44 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b085      	sub	sp, #20
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d141      	bne.n	8003dd6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d52:	4b4b      	ldr	r3, [pc, #300]	; (8003e80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d5e:	d131      	bne.n	8003dc4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d60:	4b47      	ldr	r3, [pc, #284]	; (8003e80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d66:	4a46      	ldr	r2, [pc, #280]	; (8003e80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d6c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d70:	4b43      	ldr	r3, [pc, #268]	; (8003e80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d78:	4a41      	ldr	r2, [pc, #260]	; (8003e80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d7e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003d80:	4b40      	ldr	r3, [pc, #256]	; (8003e84 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2232      	movs	r2, #50	; 0x32
 8003d86:	fb02 f303 	mul.w	r3, r2, r3
 8003d8a:	4a3f      	ldr	r2, [pc, #252]	; (8003e88 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d90:	0c9b      	lsrs	r3, r3, #18
 8003d92:	3301      	adds	r3, #1
 8003d94:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d96:	e002      	b.n	8003d9e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	3b01      	subs	r3, #1
 8003d9c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d9e:	4b38      	ldr	r3, [pc, #224]	; (8003e80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003da0:	695b      	ldr	r3, [r3, #20]
 8003da2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003da6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003daa:	d102      	bne.n	8003db2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d1f2      	bne.n	8003d98 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003db2:	4b33      	ldr	r3, [pc, #204]	; (8003e80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003db4:	695b      	ldr	r3, [r3, #20]
 8003db6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dbe:	d158      	bne.n	8003e72 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	e057      	b.n	8003e74 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003dc4:	4b2e      	ldr	r3, [pc, #184]	; (8003e80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003dca:	4a2d      	ldr	r2, [pc, #180]	; (8003e80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003dd0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003dd4:	e04d      	b.n	8003e72 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ddc:	d141      	bne.n	8003e62 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003dde:	4b28      	ldr	r3, [pc, #160]	; (8003e80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003de6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dea:	d131      	bne.n	8003e50 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003dec:	4b24      	ldr	r3, [pc, #144]	; (8003e80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003df2:	4a23      	ldr	r2, [pc, #140]	; (8003e80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003df4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003df8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003dfc:	4b20      	ldr	r3, [pc, #128]	; (8003e80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e04:	4a1e      	ldr	r2, [pc, #120]	; (8003e80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e0a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003e0c:	4b1d      	ldr	r3, [pc, #116]	; (8003e84 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	2232      	movs	r2, #50	; 0x32
 8003e12:	fb02 f303 	mul.w	r3, r2, r3
 8003e16:	4a1c      	ldr	r2, [pc, #112]	; (8003e88 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003e18:	fba2 2303 	umull	r2, r3, r2, r3
 8003e1c:	0c9b      	lsrs	r3, r3, #18
 8003e1e:	3301      	adds	r3, #1
 8003e20:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e22:	e002      	b.n	8003e2a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	3b01      	subs	r3, #1
 8003e28:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e2a:	4b15      	ldr	r3, [pc, #84]	; (8003e80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e2c:	695b      	ldr	r3, [r3, #20]
 8003e2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e36:	d102      	bne.n	8003e3e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d1f2      	bne.n	8003e24 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e3e:	4b10      	ldr	r3, [pc, #64]	; (8003e80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e40:	695b      	ldr	r3, [r3, #20]
 8003e42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e4a:	d112      	bne.n	8003e72 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	e011      	b.n	8003e74 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e50:	4b0b      	ldr	r3, [pc, #44]	; (8003e80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e56:	4a0a      	ldr	r2, [pc, #40]	; (8003e80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e5c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003e60:	e007      	b.n	8003e72 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003e62:	4b07      	ldr	r3, [pc, #28]	; (8003e80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e6a:	4a05      	ldr	r2, [pc, #20]	; (8003e80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e6c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e70:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003e72:	2300      	movs	r3, #0
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3714      	adds	r7, #20
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr
 8003e80:	40007000 	.word	0x40007000
 8003e84:	20000008 	.word	0x20000008
 8003e88:	431bde83 	.word	0x431bde83

08003e8c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8003e90:	4b05      	ldr	r3, [pc, #20]	; (8003ea8 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	4a04      	ldr	r2, [pc, #16]	; (8003ea8 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003e96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e9a:	6053      	str	r3, [r2, #4]
}
 8003e9c:	bf00      	nop
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr
 8003ea6:	bf00      	nop
 8003ea8:	40007000 	.word	0x40007000

08003eac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b088      	sub	sp, #32
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d102      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	f000 bc08 	b.w	80046d0 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ec0:	4b96      	ldr	r3, [pc, #600]	; (800411c <HAL_RCC_OscConfig+0x270>)
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	f003 030c 	and.w	r3, r3, #12
 8003ec8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003eca:	4b94      	ldr	r3, [pc, #592]	; (800411c <HAL_RCC_OscConfig+0x270>)
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	f003 0303 	and.w	r3, r3, #3
 8003ed2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 0310 	and.w	r3, r3, #16
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	f000 80e4 	beq.w	80040aa <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003ee2:	69bb      	ldr	r3, [r7, #24]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d007      	beq.n	8003ef8 <HAL_RCC_OscConfig+0x4c>
 8003ee8:	69bb      	ldr	r3, [r7, #24]
 8003eea:	2b0c      	cmp	r3, #12
 8003eec:	f040 808b 	bne.w	8004006 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	f040 8087 	bne.w	8004006 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003ef8:	4b88      	ldr	r3, [pc, #544]	; (800411c <HAL_RCC_OscConfig+0x270>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 0302 	and.w	r3, r3, #2
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d005      	beq.n	8003f10 <HAL_RCC_OscConfig+0x64>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	699b      	ldr	r3, [r3, #24]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d101      	bne.n	8003f10 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e3df      	b.n	80046d0 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6a1a      	ldr	r2, [r3, #32]
 8003f14:	4b81      	ldr	r3, [pc, #516]	; (800411c <HAL_RCC_OscConfig+0x270>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0308 	and.w	r3, r3, #8
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d004      	beq.n	8003f2a <HAL_RCC_OscConfig+0x7e>
 8003f20:	4b7e      	ldr	r3, [pc, #504]	; (800411c <HAL_RCC_OscConfig+0x270>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f28:	e005      	b.n	8003f36 <HAL_RCC_OscConfig+0x8a>
 8003f2a:	4b7c      	ldr	r3, [pc, #496]	; (800411c <HAL_RCC_OscConfig+0x270>)
 8003f2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f30:	091b      	lsrs	r3, r3, #4
 8003f32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d223      	bcs.n	8003f82 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a1b      	ldr	r3, [r3, #32]
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f000 fdcc 	bl	8004adc <RCC_SetFlashLatencyFromMSIRange>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d001      	beq.n	8003f4e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e3c0      	b.n	80046d0 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f4e:	4b73      	ldr	r3, [pc, #460]	; (800411c <HAL_RCC_OscConfig+0x270>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a72      	ldr	r2, [pc, #456]	; (800411c <HAL_RCC_OscConfig+0x270>)
 8003f54:	f043 0308 	orr.w	r3, r3, #8
 8003f58:	6013      	str	r3, [r2, #0]
 8003f5a:	4b70      	ldr	r3, [pc, #448]	; (800411c <HAL_RCC_OscConfig+0x270>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a1b      	ldr	r3, [r3, #32]
 8003f66:	496d      	ldr	r1, [pc, #436]	; (800411c <HAL_RCC_OscConfig+0x270>)
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f6c:	4b6b      	ldr	r3, [pc, #428]	; (800411c <HAL_RCC_OscConfig+0x270>)
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	69db      	ldr	r3, [r3, #28]
 8003f78:	021b      	lsls	r3, r3, #8
 8003f7a:	4968      	ldr	r1, [pc, #416]	; (800411c <HAL_RCC_OscConfig+0x270>)
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	604b      	str	r3, [r1, #4]
 8003f80:	e025      	b.n	8003fce <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f82:	4b66      	ldr	r3, [pc, #408]	; (800411c <HAL_RCC_OscConfig+0x270>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a65      	ldr	r2, [pc, #404]	; (800411c <HAL_RCC_OscConfig+0x270>)
 8003f88:	f043 0308 	orr.w	r3, r3, #8
 8003f8c:	6013      	str	r3, [r2, #0]
 8003f8e:	4b63      	ldr	r3, [pc, #396]	; (800411c <HAL_RCC_OscConfig+0x270>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a1b      	ldr	r3, [r3, #32]
 8003f9a:	4960      	ldr	r1, [pc, #384]	; (800411c <HAL_RCC_OscConfig+0x270>)
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003fa0:	4b5e      	ldr	r3, [pc, #376]	; (800411c <HAL_RCC_OscConfig+0x270>)
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	69db      	ldr	r3, [r3, #28]
 8003fac:	021b      	lsls	r3, r3, #8
 8003fae:	495b      	ldr	r1, [pc, #364]	; (800411c <HAL_RCC_OscConfig+0x270>)
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003fb4:	69bb      	ldr	r3, [r7, #24]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d109      	bne.n	8003fce <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a1b      	ldr	r3, [r3, #32]
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f000 fd8c 	bl	8004adc <RCC_SetFlashLatencyFromMSIRange>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d001      	beq.n	8003fce <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e380      	b.n	80046d0 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003fce:	f000 fcc1 	bl	8004954 <HAL_RCC_GetSysClockFreq>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	4b51      	ldr	r3, [pc, #324]	; (800411c <HAL_RCC_OscConfig+0x270>)
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	091b      	lsrs	r3, r3, #4
 8003fda:	f003 030f 	and.w	r3, r3, #15
 8003fde:	4950      	ldr	r1, [pc, #320]	; (8004120 <HAL_RCC_OscConfig+0x274>)
 8003fe0:	5ccb      	ldrb	r3, [r1, r3]
 8003fe2:	f003 031f 	and.w	r3, r3, #31
 8003fe6:	fa22 f303 	lsr.w	r3, r2, r3
 8003fea:	4a4e      	ldr	r2, [pc, #312]	; (8004124 <HAL_RCC_OscConfig+0x278>)
 8003fec:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003fee:	4b4e      	ldr	r3, [pc, #312]	; (8004128 <HAL_RCC_OscConfig+0x27c>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f7fe f9e8 	bl	80023c8 <HAL_InitTick>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003ffc:	7bfb      	ldrb	r3, [r7, #15]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d052      	beq.n	80040a8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004002:	7bfb      	ldrb	r3, [r7, #15]
 8004004:	e364      	b.n	80046d0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	699b      	ldr	r3, [r3, #24]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d032      	beq.n	8004074 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800400e:	4b43      	ldr	r3, [pc, #268]	; (800411c <HAL_RCC_OscConfig+0x270>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a42      	ldr	r2, [pc, #264]	; (800411c <HAL_RCC_OscConfig+0x270>)
 8004014:	f043 0301 	orr.w	r3, r3, #1
 8004018:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800401a:	f7fe fa25 	bl	8002468 <HAL_GetTick>
 800401e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004020:	e008      	b.n	8004034 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004022:	f7fe fa21 	bl	8002468 <HAL_GetTick>
 8004026:	4602      	mov	r2, r0
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	1ad3      	subs	r3, r2, r3
 800402c:	2b02      	cmp	r3, #2
 800402e:	d901      	bls.n	8004034 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004030:	2303      	movs	r3, #3
 8004032:	e34d      	b.n	80046d0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004034:	4b39      	ldr	r3, [pc, #228]	; (800411c <HAL_RCC_OscConfig+0x270>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 0302 	and.w	r3, r3, #2
 800403c:	2b00      	cmp	r3, #0
 800403e:	d0f0      	beq.n	8004022 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004040:	4b36      	ldr	r3, [pc, #216]	; (800411c <HAL_RCC_OscConfig+0x270>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a35      	ldr	r2, [pc, #212]	; (800411c <HAL_RCC_OscConfig+0x270>)
 8004046:	f043 0308 	orr.w	r3, r3, #8
 800404a:	6013      	str	r3, [r2, #0]
 800404c:	4b33      	ldr	r3, [pc, #204]	; (800411c <HAL_RCC_OscConfig+0x270>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6a1b      	ldr	r3, [r3, #32]
 8004058:	4930      	ldr	r1, [pc, #192]	; (800411c <HAL_RCC_OscConfig+0x270>)
 800405a:	4313      	orrs	r3, r2
 800405c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800405e:	4b2f      	ldr	r3, [pc, #188]	; (800411c <HAL_RCC_OscConfig+0x270>)
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	69db      	ldr	r3, [r3, #28]
 800406a:	021b      	lsls	r3, r3, #8
 800406c:	492b      	ldr	r1, [pc, #172]	; (800411c <HAL_RCC_OscConfig+0x270>)
 800406e:	4313      	orrs	r3, r2
 8004070:	604b      	str	r3, [r1, #4]
 8004072:	e01a      	b.n	80040aa <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004074:	4b29      	ldr	r3, [pc, #164]	; (800411c <HAL_RCC_OscConfig+0x270>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a28      	ldr	r2, [pc, #160]	; (800411c <HAL_RCC_OscConfig+0x270>)
 800407a:	f023 0301 	bic.w	r3, r3, #1
 800407e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004080:	f7fe f9f2 	bl	8002468 <HAL_GetTick>
 8004084:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004086:	e008      	b.n	800409a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004088:	f7fe f9ee 	bl	8002468 <HAL_GetTick>
 800408c:	4602      	mov	r2, r0
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	2b02      	cmp	r3, #2
 8004094:	d901      	bls.n	800409a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	e31a      	b.n	80046d0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800409a:	4b20      	ldr	r3, [pc, #128]	; (800411c <HAL_RCC_OscConfig+0x270>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 0302 	and.w	r3, r3, #2
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d1f0      	bne.n	8004088 <HAL_RCC_OscConfig+0x1dc>
 80040a6:	e000      	b.n	80040aa <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80040a8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 0301 	and.w	r3, r3, #1
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d073      	beq.n	800419e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80040b6:	69bb      	ldr	r3, [r7, #24]
 80040b8:	2b08      	cmp	r3, #8
 80040ba:	d005      	beq.n	80040c8 <HAL_RCC_OscConfig+0x21c>
 80040bc:	69bb      	ldr	r3, [r7, #24]
 80040be:	2b0c      	cmp	r3, #12
 80040c0:	d10e      	bne.n	80040e0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	2b03      	cmp	r3, #3
 80040c6:	d10b      	bne.n	80040e0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040c8:	4b14      	ldr	r3, [pc, #80]	; (800411c <HAL_RCC_OscConfig+0x270>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d063      	beq.n	800419c <HAL_RCC_OscConfig+0x2f0>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d15f      	bne.n	800419c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	e2f7      	b.n	80046d0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040e8:	d106      	bne.n	80040f8 <HAL_RCC_OscConfig+0x24c>
 80040ea:	4b0c      	ldr	r3, [pc, #48]	; (800411c <HAL_RCC_OscConfig+0x270>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a0b      	ldr	r2, [pc, #44]	; (800411c <HAL_RCC_OscConfig+0x270>)
 80040f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040f4:	6013      	str	r3, [r2, #0]
 80040f6:	e025      	b.n	8004144 <HAL_RCC_OscConfig+0x298>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004100:	d114      	bne.n	800412c <HAL_RCC_OscConfig+0x280>
 8004102:	4b06      	ldr	r3, [pc, #24]	; (800411c <HAL_RCC_OscConfig+0x270>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a05      	ldr	r2, [pc, #20]	; (800411c <HAL_RCC_OscConfig+0x270>)
 8004108:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800410c:	6013      	str	r3, [r2, #0]
 800410e:	4b03      	ldr	r3, [pc, #12]	; (800411c <HAL_RCC_OscConfig+0x270>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a02      	ldr	r2, [pc, #8]	; (800411c <HAL_RCC_OscConfig+0x270>)
 8004114:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004118:	6013      	str	r3, [r2, #0]
 800411a:	e013      	b.n	8004144 <HAL_RCC_OscConfig+0x298>
 800411c:	40021000 	.word	0x40021000
 8004120:	08009100 	.word	0x08009100
 8004124:	20000008 	.word	0x20000008
 8004128:	2000000c 	.word	0x2000000c
 800412c:	4ba0      	ldr	r3, [pc, #640]	; (80043b0 <HAL_RCC_OscConfig+0x504>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a9f      	ldr	r2, [pc, #636]	; (80043b0 <HAL_RCC_OscConfig+0x504>)
 8004132:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004136:	6013      	str	r3, [r2, #0]
 8004138:	4b9d      	ldr	r3, [pc, #628]	; (80043b0 <HAL_RCC_OscConfig+0x504>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a9c      	ldr	r2, [pc, #624]	; (80043b0 <HAL_RCC_OscConfig+0x504>)
 800413e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004142:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d013      	beq.n	8004174 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800414c:	f7fe f98c 	bl	8002468 <HAL_GetTick>
 8004150:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004152:	e008      	b.n	8004166 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004154:	f7fe f988 	bl	8002468 <HAL_GetTick>
 8004158:	4602      	mov	r2, r0
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	1ad3      	subs	r3, r2, r3
 800415e:	2b64      	cmp	r3, #100	; 0x64
 8004160:	d901      	bls.n	8004166 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	e2b4      	b.n	80046d0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004166:	4b92      	ldr	r3, [pc, #584]	; (80043b0 <HAL_RCC_OscConfig+0x504>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d0f0      	beq.n	8004154 <HAL_RCC_OscConfig+0x2a8>
 8004172:	e014      	b.n	800419e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004174:	f7fe f978 	bl	8002468 <HAL_GetTick>
 8004178:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800417a:	e008      	b.n	800418e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800417c:	f7fe f974 	bl	8002468 <HAL_GetTick>
 8004180:	4602      	mov	r2, r0
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	2b64      	cmp	r3, #100	; 0x64
 8004188:	d901      	bls.n	800418e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	e2a0      	b.n	80046d0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800418e:	4b88      	ldr	r3, [pc, #544]	; (80043b0 <HAL_RCC_OscConfig+0x504>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004196:	2b00      	cmp	r3, #0
 8004198:	d1f0      	bne.n	800417c <HAL_RCC_OscConfig+0x2d0>
 800419a:	e000      	b.n	800419e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800419c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0302 	and.w	r3, r3, #2
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d060      	beq.n	800426c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80041aa:	69bb      	ldr	r3, [r7, #24]
 80041ac:	2b04      	cmp	r3, #4
 80041ae:	d005      	beq.n	80041bc <HAL_RCC_OscConfig+0x310>
 80041b0:	69bb      	ldr	r3, [r7, #24]
 80041b2:	2b0c      	cmp	r3, #12
 80041b4:	d119      	bne.n	80041ea <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	2b02      	cmp	r3, #2
 80041ba:	d116      	bne.n	80041ea <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041bc:	4b7c      	ldr	r3, [pc, #496]	; (80043b0 <HAL_RCC_OscConfig+0x504>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d005      	beq.n	80041d4 <HAL_RCC_OscConfig+0x328>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d101      	bne.n	80041d4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e27d      	b.n	80046d0 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041d4:	4b76      	ldr	r3, [pc, #472]	; (80043b0 <HAL_RCC_OscConfig+0x504>)
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	691b      	ldr	r3, [r3, #16]
 80041e0:	061b      	lsls	r3, r3, #24
 80041e2:	4973      	ldr	r1, [pc, #460]	; (80043b0 <HAL_RCC_OscConfig+0x504>)
 80041e4:	4313      	orrs	r3, r2
 80041e6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041e8:	e040      	b.n	800426c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	68db      	ldr	r3, [r3, #12]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d023      	beq.n	800423a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041f2:	4b6f      	ldr	r3, [pc, #444]	; (80043b0 <HAL_RCC_OscConfig+0x504>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a6e      	ldr	r2, [pc, #440]	; (80043b0 <HAL_RCC_OscConfig+0x504>)
 80041f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041fe:	f7fe f933 	bl	8002468 <HAL_GetTick>
 8004202:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004204:	e008      	b.n	8004218 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004206:	f7fe f92f 	bl	8002468 <HAL_GetTick>
 800420a:	4602      	mov	r2, r0
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	2b02      	cmp	r3, #2
 8004212:	d901      	bls.n	8004218 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004214:	2303      	movs	r3, #3
 8004216:	e25b      	b.n	80046d0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004218:	4b65      	ldr	r3, [pc, #404]	; (80043b0 <HAL_RCC_OscConfig+0x504>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004220:	2b00      	cmp	r3, #0
 8004222:	d0f0      	beq.n	8004206 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004224:	4b62      	ldr	r3, [pc, #392]	; (80043b0 <HAL_RCC_OscConfig+0x504>)
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	691b      	ldr	r3, [r3, #16]
 8004230:	061b      	lsls	r3, r3, #24
 8004232:	495f      	ldr	r1, [pc, #380]	; (80043b0 <HAL_RCC_OscConfig+0x504>)
 8004234:	4313      	orrs	r3, r2
 8004236:	604b      	str	r3, [r1, #4]
 8004238:	e018      	b.n	800426c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800423a:	4b5d      	ldr	r3, [pc, #372]	; (80043b0 <HAL_RCC_OscConfig+0x504>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a5c      	ldr	r2, [pc, #368]	; (80043b0 <HAL_RCC_OscConfig+0x504>)
 8004240:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004244:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004246:	f7fe f90f 	bl	8002468 <HAL_GetTick>
 800424a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800424c:	e008      	b.n	8004260 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800424e:	f7fe f90b 	bl	8002468 <HAL_GetTick>
 8004252:	4602      	mov	r2, r0
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	2b02      	cmp	r3, #2
 800425a:	d901      	bls.n	8004260 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800425c:	2303      	movs	r3, #3
 800425e:	e237      	b.n	80046d0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004260:	4b53      	ldr	r3, [pc, #332]	; (80043b0 <HAL_RCC_OscConfig+0x504>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004268:	2b00      	cmp	r3, #0
 800426a:	d1f0      	bne.n	800424e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 0308 	and.w	r3, r3, #8
 8004274:	2b00      	cmp	r3, #0
 8004276:	d03c      	beq.n	80042f2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	695b      	ldr	r3, [r3, #20]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d01c      	beq.n	80042ba <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004280:	4b4b      	ldr	r3, [pc, #300]	; (80043b0 <HAL_RCC_OscConfig+0x504>)
 8004282:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004286:	4a4a      	ldr	r2, [pc, #296]	; (80043b0 <HAL_RCC_OscConfig+0x504>)
 8004288:	f043 0301 	orr.w	r3, r3, #1
 800428c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004290:	f7fe f8ea 	bl	8002468 <HAL_GetTick>
 8004294:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004296:	e008      	b.n	80042aa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004298:	f7fe f8e6 	bl	8002468 <HAL_GetTick>
 800429c:	4602      	mov	r2, r0
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	2b02      	cmp	r3, #2
 80042a4:	d901      	bls.n	80042aa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	e212      	b.n	80046d0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80042aa:	4b41      	ldr	r3, [pc, #260]	; (80043b0 <HAL_RCC_OscConfig+0x504>)
 80042ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042b0:	f003 0302 	and.w	r3, r3, #2
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d0ef      	beq.n	8004298 <HAL_RCC_OscConfig+0x3ec>
 80042b8:	e01b      	b.n	80042f2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042ba:	4b3d      	ldr	r3, [pc, #244]	; (80043b0 <HAL_RCC_OscConfig+0x504>)
 80042bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042c0:	4a3b      	ldr	r2, [pc, #236]	; (80043b0 <HAL_RCC_OscConfig+0x504>)
 80042c2:	f023 0301 	bic.w	r3, r3, #1
 80042c6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042ca:	f7fe f8cd 	bl	8002468 <HAL_GetTick>
 80042ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80042d0:	e008      	b.n	80042e4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042d2:	f7fe f8c9 	bl	8002468 <HAL_GetTick>
 80042d6:	4602      	mov	r2, r0
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	2b02      	cmp	r3, #2
 80042de:	d901      	bls.n	80042e4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80042e0:	2303      	movs	r3, #3
 80042e2:	e1f5      	b.n	80046d0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80042e4:	4b32      	ldr	r3, [pc, #200]	; (80043b0 <HAL_RCC_OscConfig+0x504>)
 80042e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042ea:	f003 0302 	and.w	r3, r3, #2
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d1ef      	bne.n	80042d2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 0304 	and.w	r3, r3, #4
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	f000 80a6 	beq.w	800444c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004300:	2300      	movs	r3, #0
 8004302:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004304:	4b2a      	ldr	r3, [pc, #168]	; (80043b0 <HAL_RCC_OscConfig+0x504>)
 8004306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004308:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800430c:	2b00      	cmp	r3, #0
 800430e:	d10d      	bne.n	800432c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004310:	4b27      	ldr	r3, [pc, #156]	; (80043b0 <HAL_RCC_OscConfig+0x504>)
 8004312:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004314:	4a26      	ldr	r2, [pc, #152]	; (80043b0 <HAL_RCC_OscConfig+0x504>)
 8004316:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800431a:	6593      	str	r3, [r2, #88]	; 0x58
 800431c:	4b24      	ldr	r3, [pc, #144]	; (80043b0 <HAL_RCC_OscConfig+0x504>)
 800431e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004320:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004324:	60bb      	str	r3, [r7, #8]
 8004326:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004328:	2301      	movs	r3, #1
 800432a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800432c:	4b21      	ldr	r3, [pc, #132]	; (80043b4 <HAL_RCC_OscConfig+0x508>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004334:	2b00      	cmp	r3, #0
 8004336:	d118      	bne.n	800436a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004338:	4b1e      	ldr	r3, [pc, #120]	; (80043b4 <HAL_RCC_OscConfig+0x508>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a1d      	ldr	r2, [pc, #116]	; (80043b4 <HAL_RCC_OscConfig+0x508>)
 800433e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004342:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004344:	f7fe f890 	bl	8002468 <HAL_GetTick>
 8004348:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800434a:	e008      	b.n	800435e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800434c:	f7fe f88c 	bl	8002468 <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	2b02      	cmp	r3, #2
 8004358:	d901      	bls.n	800435e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e1b8      	b.n	80046d0 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800435e:	4b15      	ldr	r3, [pc, #84]	; (80043b4 <HAL_RCC_OscConfig+0x508>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004366:	2b00      	cmp	r3, #0
 8004368:	d0f0      	beq.n	800434c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	2b01      	cmp	r3, #1
 8004370:	d108      	bne.n	8004384 <HAL_RCC_OscConfig+0x4d8>
 8004372:	4b0f      	ldr	r3, [pc, #60]	; (80043b0 <HAL_RCC_OscConfig+0x504>)
 8004374:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004378:	4a0d      	ldr	r2, [pc, #52]	; (80043b0 <HAL_RCC_OscConfig+0x504>)
 800437a:	f043 0301 	orr.w	r3, r3, #1
 800437e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004382:	e029      	b.n	80043d8 <HAL_RCC_OscConfig+0x52c>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	2b05      	cmp	r3, #5
 800438a:	d115      	bne.n	80043b8 <HAL_RCC_OscConfig+0x50c>
 800438c:	4b08      	ldr	r3, [pc, #32]	; (80043b0 <HAL_RCC_OscConfig+0x504>)
 800438e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004392:	4a07      	ldr	r2, [pc, #28]	; (80043b0 <HAL_RCC_OscConfig+0x504>)
 8004394:	f043 0304 	orr.w	r3, r3, #4
 8004398:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800439c:	4b04      	ldr	r3, [pc, #16]	; (80043b0 <HAL_RCC_OscConfig+0x504>)
 800439e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043a2:	4a03      	ldr	r2, [pc, #12]	; (80043b0 <HAL_RCC_OscConfig+0x504>)
 80043a4:	f043 0301 	orr.w	r3, r3, #1
 80043a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80043ac:	e014      	b.n	80043d8 <HAL_RCC_OscConfig+0x52c>
 80043ae:	bf00      	nop
 80043b0:	40021000 	.word	0x40021000
 80043b4:	40007000 	.word	0x40007000
 80043b8:	4b9d      	ldr	r3, [pc, #628]	; (8004630 <HAL_RCC_OscConfig+0x784>)
 80043ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043be:	4a9c      	ldr	r2, [pc, #624]	; (8004630 <HAL_RCC_OscConfig+0x784>)
 80043c0:	f023 0301 	bic.w	r3, r3, #1
 80043c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80043c8:	4b99      	ldr	r3, [pc, #612]	; (8004630 <HAL_RCC_OscConfig+0x784>)
 80043ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ce:	4a98      	ldr	r2, [pc, #608]	; (8004630 <HAL_RCC_OscConfig+0x784>)
 80043d0:	f023 0304 	bic.w	r3, r3, #4
 80043d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d016      	beq.n	800440e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043e0:	f7fe f842 	bl	8002468 <HAL_GetTick>
 80043e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043e6:	e00a      	b.n	80043fe <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043e8:	f7fe f83e 	bl	8002468 <HAL_GetTick>
 80043ec:	4602      	mov	r2, r0
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d901      	bls.n	80043fe <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e168      	b.n	80046d0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043fe:	4b8c      	ldr	r3, [pc, #560]	; (8004630 <HAL_RCC_OscConfig+0x784>)
 8004400:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004404:	f003 0302 	and.w	r3, r3, #2
 8004408:	2b00      	cmp	r3, #0
 800440a:	d0ed      	beq.n	80043e8 <HAL_RCC_OscConfig+0x53c>
 800440c:	e015      	b.n	800443a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800440e:	f7fe f82b 	bl	8002468 <HAL_GetTick>
 8004412:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004414:	e00a      	b.n	800442c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004416:	f7fe f827 	bl	8002468 <HAL_GetTick>
 800441a:	4602      	mov	r2, r0
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	1ad3      	subs	r3, r2, r3
 8004420:	f241 3288 	movw	r2, #5000	; 0x1388
 8004424:	4293      	cmp	r3, r2
 8004426:	d901      	bls.n	800442c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004428:	2303      	movs	r3, #3
 800442a:	e151      	b.n	80046d0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800442c:	4b80      	ldr	r3, [pc, #512]	; (8004630 <HAL_RCC_OscConfig+0x784>)
 800442e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004432:	f003 0302 	and.w	r3, r3, #2
 8004436:	2b00      	cmp	r3, #0
 8004438:	d1ed      	bne.n	8004416 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800443a:	7ffb      	ldrb	r3, [r7, #31]
 800443c:	2b01      	cmp	r3, #1
 800443e:	d105      	bne.n	800444c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004440:	4b7b      	ldr	r3, [pc, #492]	; (8004630 <HAL_RCC_OscConfig+0x784>)
 8004442:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004444:	4a7a      	ldr	r2, [pc, #488]	; (8004630 <HAL_RCC_OscConfig+0x784>)
 8004446:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800444a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 0320 	and.w	r3, r3, #32
 8004454:	2b00      	cmp	r3, #0
 8004456:	d03c      	beq.n	80044d2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445c:	2b00      	cmp	r3, #0
 800445e:	d01c      	beq.n	800449a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004460:	4b73      	ldr	r3, [pc, #460]	; (8004630 <HAL_RCC_OscConfig+0x784>)
 8004462:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004466:	4a72      	ldr	r2, [pc, #456]	; (8004630 <HAL_RCC_OscConfig+0x784>)
 8004468:	f043 0301 	orr.w	r3, r3, #1
 800446c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004470:	f7fd fffa 	bl	8002468 <HAL_GetTick>
 8004474:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004476:	e008      	b.n	800448a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004478:	f7fd fff6 	bl	8002468 <HAL_GetTick>
 800447c:	4602      	mov	r2, r0
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	2b02      	cmp	r3, #2
 8004484:	d901      	bls.n	800448a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004486:	2303      	movs	r3, #3
 8004488:	e122      	b.n	80046d0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800448a:	4b69      	ldr	r3, [pc, #420]	; (8004630 <HAL_RCC_OscConfig+0x784>)
 800448c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004490:	f003 0302 	and.w	r3, r3, #2
 8004494:	2b00      	cmp	r3, #0
 8004496:	d0ef      	beq.n	8004478 <HAL_RCC_OscConfig+0x5cc>
 8004498:	e01b      	b.n	80044d2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800449a:	4b65      	ldr	r3, [pc, #404]	; (8004630 <HAL_RCC_OscConfig+0x784>)
 800449c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044a0:	4a63      	ldr	r2, [pc, #396]	; (8004630 <HAL_RCC_OscConfig+0x784>)
 80044a2:	f023 0301 	bic.w	r3, r3, #1
 80044a6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044aa:	f7fd ffdd 	bl	8002468 <HAL_GetTick>
 80044ae:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80044b0:	e008      	b.n	80044c4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80044b2:	f7fd ffd9 	bl	8002468 <HAL_GetTick>
 80044b6:	4602      	mov	r2, r0
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	2b02      	cmp	r3, #2
 80044be:	d901      	bls.n	80044c4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80044c0:	2303      	movs	r3, #3
 80044c2:	e105      	b.n	80046d0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80044c4:	4b5a      	ldr	r3, [pc, #360]	; (8004630 <HAL_RCC_OscConfig+0x784>)
 80044c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044ca:	f003 0302 	and.w	r3, r3, #2
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d1ef      	bne.n	80044b2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	f000 80f9 	beq.w	80046ce <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e0:	2b02      	cmp	r3, #2
 80044e2:	f040 80cf 	bne.w	8004684 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80044e6:	4b52      	ldr	r3, [pc, #328]	; (8004630 <HAL_RCC_OscConfig+0x784>)
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	f003 0203 	and.w	r2, r3, #3
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d12c      	bne.n	8004554 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004504:	3b01      	subs	r3, #1
 8004506:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004508:	429a      	cmp	r2, r3
 800450a:	d123      	bne.n	8004554 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004516:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004518:	429a      	cmp	r2, r3
 800451a:	d11b      	bne.n	8004554 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004526:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004528:	429a      	cmp	r2, r3
 800452a:	d113      	bne.n	8004554 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004536:	085b      	lsrs	r3, r3, #1
 8004538:	3b01      	subs	r3, #1
 800453a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800453c:	429a      	cmp	r2, r3
 800453e:	d109      	bne.n	8004554 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454a:	085b      	lsrs	r3, r3, #1
 800454c:	3b01      	subs	r3, #1
 800454e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004550:	429a      	cmp	r2, r3
 8004552:	d071      	beq.n	8004638 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004554:	69bb      	ldr	r3, [r7, #24]
 8004556:	2b0c      	cmp	r3, #12
 8004558:	d068      	beq.n	800462c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800455a:	4b35      	ldr	r3, [pc, #212]	; (8004630 <HAL_RCC_OscConfig+0x784>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d105      	bne.n	8004572 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004566:	4b32      	ldr	r3, [pc, #200]	; (8004630 <HAL_RCC_OscConfig+0x784>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800456e:	2b00      	cmp	r3, #0
 8004570:	d001      	beq.n	8004576 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e0ac      	b.n	80046d0 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004576:	4b2e      	ldr	r3, [pc, #184]	; (8004630 <HAL_RCC_OscConfig+0x784>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a2d      	ldr	r2, [pc, #180]	; (8004630 <HAL_RCC_OscConfig+0x784>)
 800457c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004580:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004582:	f7fd ff71 	bl	8002468 <HAL_GetTick>
 8004586:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004588:	e008      	b.n	800459c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800458a:	f7fd ff6d 	bl	8002468 <HAL_GetTick>
 800458e:	4602      	mov	r2, r0
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	1ad3      	subs	r3, r2, r3
 8004594:	2b02      	cmp	r3, #2
 8004596:	d901      	bls.n	800459c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004598:	2303      	movs	r3, #3
 800459a:	e099      	b.n	80046d0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800459c:	4b24      	ldr	r3, [pc, #144]	; (8004630 <HAL_RCC_OscConfig+0x784>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d1f0      	bne.n	800458a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045a8:	4b21      	ldr	r3, [pc, #132]	; (8004630 <HAL_RCC_OscConfig+0x784>)
 80045aa:	68da      	ldr	r2, [r3, #12]
 80045ac:	4b21      	ldr	r3, [pc, #132]	; (8004634 <HAL_RCC_OscConfig+0x788>)
 80045ae:	4013      	ands	r3, r2
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80045b8:	3a01      	subs	r2, #1
 80045ba:	0112      	lsls	r2, r2, #4
 80045bc:	4311      	orrs	r1, r2
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80045c2:	0212      	lsls	r2, r2, #8
 80045c4:	4311      	orrs	r1, r2
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80045ca:	0852      	lsrs	r2, r2, #1
 80045cc:	3a01      	subs	r2, #1
 80045ce:	0552      	lsls	r2, r2, #21
 80045d0:	4311      	orrs	r1, r2
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80045d6:	0852      	lsrs	r2, r2, #1
 80045d8:	3a01      	subs	r2, #1
 80045da:	0652      	lsls	r2, r2, #25
 80045dc:	4311      	orrs	r1, r2
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80045e2:	06d2      	lsls	r2, r2, #27
 80045e4:	430a      	orrs	r2, r1
 80045e6:	4912      	ldr	r1, [pc, #72]	; (8004630 <HAL_RCC_OscConfig+0x784>)
 80045e8:	4313      	orrs	r3, r2
 80045ea:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80045ec:	4b10      	ldr	r3, [pc, #64]	; (8004630 <HAL_RCC_OscConfig+0x784>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a0f      	ldr	r2, [pc, #60]	; (8004630 <HAL_RCC_OscConfig+0x784>)
 80045f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045f6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80045f8:	4b0d      	ldr	r3, [pc, #52]	; (8004630 <HAL_RCC_OscConfig+0x784>)
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	4a0c      	ldr	r2, [pc, #48]	; (8004630 <HAL_RCC_OscConfig+0x784>)
 80045fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004602:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004604:	f7fd ff30 	bl	8002468 <HAL_GetTick>
 8004608:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800460a:	e008      	b.n	800461e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800460c:	f7fd ff2c 	bl	8002468 <HAL_GetTick>
 8004610:	4602      	mov	r2, r0
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	1ad3      	subs	r3, r2, r3
 8004616:	2b02      	cmp	r3, #2
 8004618:	d901      	bls.n	800461e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800461a:	2303      	movs	r3, #3
 800461c:	e058      	b.n	80046d0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800461e:	4b04      	ldr	r3, [pc, #16]	; (8004630 <HAL_RCC_OscConfig+0x784>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004626:	2b00      	cmp	r3, #0
 8004628:	d0f0      	beq.n	800460c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800462a:	e050      	b.n	80046ce <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e04f      	b.n	80046d0 <HAL_RCC_OscConfig+0x824>
 8004630:	40021000 	.word	0x40021000
 8004634:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004638:	4b27      	ldr	r3, [pc, #156]	; (80046d8 <HAL_RCC_OscConfig+0x82c>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004640:	2b00      	cmp	r3, #0
 8004642:	d144      	bne.n	80046ce <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004644:	4b24      	ldr	r3, [pc, #144]	; (80046d8 <HAL_RCC_OscConfig+0x82c>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a23      	ldr	r2, [pc, #140]	; (80046d8 <HAL_RCC_OscConfig+0x82c>)
 800464a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800464e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004650:	4b21      	ldr	r3, [pc, #132]	; (80046d8 <HAL_RCC_OscConfig+0x82c>)
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	4a20      	ldr	r2, [pc, #128]	; (80046d8 <HAL_RCC_OscConfig+0x82c>)
 8004656:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800465a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800465c:	f7fd ff04 	bl	8002468 <HAL_GetTick>
 8004660:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004662:	e008      	b.n	8004676 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004664:	f7fd ff00 	bl	8002468 <HAL_GetTick>
 8004668:	4602      	mov	r2, r0
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	2b02      	cmp	r3, #2
 8004670:	d901      	bls.n	8004676 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	e02c      	b.n	80046d0 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004676:	4b18      	ldr	r3, [pc, #96]	; (80046d8 <HAL_RCC_OscConfig+0x82c>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d0f0      	beq.n	8004664 <HAL_RCC_OscConfig+0x7b8>
 8004682:	e024      	b.n	80046ce <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004684:	69bb      	ldr	r3, [r7, #24]
 8004686:	2b0c      	cmp	r3, #12
 8004688:	d01f      	beq.n	80046ca <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800468a:	4b13      	ldr	r3, [pc, #76]	; (80046d8 <HAL_RCC_OscConfig+0x82c>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a12      	ldr	r2, [pc, #72]	; (80046d8 <HAL_RCC_OscConfig+0x82c>)
 8004690:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004694:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004696:	f7fd fee7 	bl	8002468 <HAL_GetTick>
 800469a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800469c:	e008      	b.n	80046b0 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800469e:	f7fd fee3 	bl	8002468 <HAL_GetTick>
 80046a2:	4602      	mov	r2, r0
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	2b02      	cmp	r3, #2
 80046aa:	d901      	bls.n	80046b0 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80046ac:	2303      	movs	r3, #3
 80046ae:	e00f      	b.n	80046d0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046b0:	4b09      	ldr	r3, [pc, #36]	; (80046d8 <HAL_RCC_OscConfig+0x82c>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d1f0      	bne.n	800469e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80046bc:	4b06      	ldr	r3, [pc, #24]	; (80046d8 <HAL_RCC_OscConfig+0x82c>)
 80046be:	68da      	ldr	r2, [r3, #12]
 80046c0:	4905      	ldr	r1, [pc, #20]	; (80046d8 <HAL_RCC_OscConfig+0x82c>)
 80046c2:	4b06      	ldr	r3, [pc, #24]	; (80046dc <HAL_RCC_OscConfig+0x830>)
 80046c4:	4013      	ands	r3, r2
 80046c6:	60cb      	str	r3, [r1, #12]
 80046c8:	e001      	b.n	80046ce <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e000      	b.n	80046d0 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80046ce:	2300      	movs	r3, #0
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3720      	adds	r7, #32
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}
 80046d8:	40021000 	.word	0x40021000
 80046dc:	feeefffc 	.word	0xfeeefffc

080046e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b086      	sub	sp, #24
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80046ea:	2300      	movs	r3, #0
 80046ec:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d101      	bne.n	80046f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e11d      	b.n	8004934 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80046f8:	4b90      	ldr	r3, [pc, #576]	; (800493c <HAL_RCC_ClockConfig+0x25c>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 030f 	and.w	r3, r3, #15
 8004700:	683a      	ldr	r2, [r7, #0]
 8004702:	429a      	cmp	r2, r3
 8004704:	d910      	bls.n	8004728 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004706:	4b8d      	ldr	r3, [pc, #564]	; (800493c <HAL_RCC_ClockConfig+0x25c>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f023 020f 	bic.w	r2, r3, #15
 800470e:	498b      	ldr	r1, [pc, #556]	; (800493c <HAL_RCC_ClockConfig+0x25c>)
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	4313      	orrs	r3, r2
 8004714:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004716:	4b89      	ldr	r3, [pc, #548]	; (800493c <HAL_RCC_ClockConfig+0x25c>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 030f 	and.w	r3, r3, #15
 800471e:	683a      	ldr	r2, [r7, #0]
 8004720:	429a      	cmp	r2, r3
 8004722:	d001      	beq.n	8004728 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e105      	b.n	8004934 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0302 	and.w	r3, r3, #2
 8004730:	2b00      	cmp	r3, #0
 8004732:	d010      	beq.n	8004756 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	689a      	ldr	r2, [r3, #8]
 8004738:	4b81      	ldr	r3, [pc, #516]	; (8004940 <HAL_RCC_ClockConfig+0x260>)
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004740:	429a      	cmp	r2, r3
 8004742:	d908      	bls.n	8004756 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004744:	4b7e      	ldr	r3, [pc, #504]	; (8004940 <HAL_RCC_ClockConfig+0x260>)
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	497b      	ldr	r1, [pc, #492]	; (8004940 <HAL_RCC_ClockConfig+0x260>)
 8004752:	4313      	orrs	r3, r2
 8004754:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 0301 	and.w	r3, r3, #1
 800475e:	2b00      	cmp	r3, #0
 8004760:	d079      	beq.n	8004856 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	2b03      	cmp	r3, #3
 8004768:	d11e      	bne.n	80047a8 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800476a:	4b75      	ldr	r3, [pc, #468]	; (8004940 <HAL_RCC_ClockConfig+0x260>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d101      	bne.n	800477a <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	e0dc      	b.n	8004934 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800477a:	f000 fa09 	bl	8004b90 <RCC_GetSysClockFreqFromPLLSource>
 800477e:	4603      	mov	r3, r0
 8004780:	4a70      	ldr	r2, [pc, #448]	; (8004944 <HAL_RCC_ClockConfig+0x264>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d946      	bls.n	8004814 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004786:	4b6e      	ldr	r3, [pc, #440]	; (8004940 <HAL_RCC_ClockConfig+0x260>)
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d140      	bne.n	8004814 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004792:	4b6b      	ldr	r3, [pc, #428]	; (8004940 <HAL_RCC_ClockConfig+0x260>)
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800479a:	4a69      	ldr	r2, [pc, #420]	; (8004940 <HAL_RCC_ClockConfig+0x260>)
 800479c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047a0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80047a2:	2380      	movs	r3, #128	; 0x80
 80047a4:	617b      	str	r3, [r7, #20]
 80047a6:	e035      	b.n	8004814 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	2b02      	cmp	r3, #2
 80047ae:	d107      	bne.n	80047c0 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047b0:	4b63      	ldr	r3, [pc, #396]	; (8004940 <HAL_RCC_ClockConfig+0x260>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d115      	bne.n	80047e8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	e0b9      	b.n	8004934 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d107      	bne.n	80047d8 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80047c8:	4b5d      	ldr	r3, [pc, #372]	; (8004940 <HAL_RCC_ClockConfig+0x260>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 0302 	and.w	r3, r3, #2
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d109      	bne.n	80047e8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	e0ad      	b.n	8004934 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80047d8:	4b59      	ldr	r3, [pc, #356]	; (8004940 <HAL_RCC_ClockConfig+0x260>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d101      	bne.n	80047e8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	e0a5      	b.n	8004934 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80047e8:	f000 f8b4 	bl	8004954 <HAL_RCC_GetSysClockFreq>
 80047ec:	4603      	mov	r3, r0
 80047ee:	4a55      	ldr	r2, [pc, #340]	; (8004944 <HAL_RCC_ClockConfig+0x264>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d90f      	bls.n	8004814 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80047f4:	4b52      	ldr	r3, [pc, #328]	; (8004940 <HAL_RCC_ClockConfig+0x260>)
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d109      	bne.n	8004814 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004800:	4b4f      	ldr	r3, [pc, #316]	; (8004940 <HAL_RCC_ClockConfig+0x260>)
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004808:	4a4d      	ldr	r2, [pc, #308]	; (8004940 <HAL_RCC_ClockConfig+0x260>)
 800480a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800480e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004810:	2380      	movs	r3, #128	; 0x80
 8004812:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004814:	4b4a      	ldr	r3, [pc, #296]	; (8004940 <HAL_RCC_ClockConfig+0x260>)
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	f023 0203 	bic.w	r2, r3, #3
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	4947      	ldr	r1, [pc, #284]	; (8004940 <HAL_RCC_ClockConfig+0x260>)
 8004822:	4313      	orrs	r3, r2
 8004824:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004826:	f7fd fe1f 	bl	8002468 <HAL_GetTick>
 800482a:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800482c:	e00a      	b.n	8004844 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800482e:	f7fd fe1b 	bl	8002468 <HAL_GetTick>
 8004832:	4602      	mov	r2, r0
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	1ad3      	subs	r3, r2, r3
 8004838:	f241 3288 	movw	r2, #5000	; 0x1388
 800483c:	4293      	cmp	r3, r2
 800483e:	d901      	bls.n	8004844 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8004840:	2303      	movs	r3, #3
 8004842:	e077      	b.n	8004934 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004844:	4b3e      	ldr	r3, [pc, #248]	; (8004940 <HAL_RCC_ClockConfig+0x260>)
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	f003 020c 	and.w	r2, r3, #12
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	009b      	lsls	r3, r3, #2
 8004852:	429a      	cmp	r2, r3
 8004854:	d1eb      	bne.n	800482e <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	2b80      	cmp	r3, #128	; 0x80
 800485a:	d105      	bne.n	8004868 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800485c:	4b38      	ldr	r3, [pc, #224]	; (8004940 <HAL_RCC_ClockConfig+0x260>)
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	4a37      	ldr	r2, [pc, #220]	; (8004940 <HAL_RCC_ClockConfig+0x260>)
 8004862:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004866:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0302 	and.w	r3, r3, #2
 8004870:	2b00      	cmp	r3, #0
 8004872:	d010      	beq.n	8004896 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	689a      	ldr	r2, [r3, #8]
 8004878:	4b31      	ldr	r3, [pc, #196]	; (8004940 <HAL_RCC_ClockConfig+0x260>)
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004880:	429a      	cmp	r2, r3
 8004882:	d208      	bcs.n	8004896 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004884:	4b2e      	ldr	r3, [pc, #184]	; (8004940 <HAL_RCC_ClockConfig+0x260>)
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	492b      	ldr	r1, [pc, #172]	; (8004940 <HAL_RCC_ClockConfig+0x260>)
 8004892:	4313      	orrs	r3, r2
 8004894:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004896:	4b29      	ldr	r3, [pc, #164]	; (800493c <HAL_RCC_ClockConfig+0x25c>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 030f 	and.w	r3, r3, #15
 800489e:	683a      	ldr	r2, [r7, #0]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d210      	bcs.n	80048c6 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048a4:	4b25      	ldr	r3, [pc, #148]	; (800493c <HAL_RCC_ClockConfig+0x25c>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f023 020f 	bic.w	r2, r3, #15
 80048ac:	4923      	ldr	r1, [pc, #140]	; (800493c <HAL_RCC_ClockConfig+0x25c>)
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048b4:	4b21      	ldr	r3, [pc, #132]	; (800493c <HAL_RCC_ClockConfig+0x25c>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 030f 	and.w	r3, r3, #15
 80048bc:	683a      	ldr	r2, [r7, #0]
 80048be:	429a      	cmp	r2, r3
 80048c0:	d001      	beq.n	80048c6 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e036      	b.n	8004934 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 0304 	and.w	r3, r3, #4
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d008      	beq.n	80048e4 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048d2:	4b1b      	ldr	r3, [pc, #108]	; (8004940 <HAL_RCC_ClockConfig+0x260>)
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	68db      	ldr	r3, [r3, #12]
 80048de:	4918      	ldr	r1, [pc, #96]	; (8004940 <HAL_RCC_ClockConfig+0x260>)
 80048e0:	4313      	orrs	r3, r2
 80048e2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 0308 	and.w	r3, r3, #8
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d009      	beq.n	8004904 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048f0:	4b13      	ldr	r3, [pc, #76]	; (8004940 <HAL_RCC_ClockConfig+0x260>)
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	691b      	ldr	r3, [r3, #16]
 80048fc:	00db      	lsls	r3, r3, #3
 80048fe:	4910      	ldr	r1, [pc, #64]	; (8004940 <HAL_RCC_ClockConfig+0x260>)
 8004900:	4313      	orrs	r3, r2
 8004902:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004904:	f000 f826 	bl	8004954 <HAL_RCC_GetSysClockFreq>
 8004908:	4602      	mov	r2, r0
 800490a:	4b0d      	ldr	r3, [pc, #52]	; (8004940 <HAL_RCC_ClockConfig+0x260>)
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	091b      	lsrs	r3, r3, #4
 8004910:	f003 030f 	and.w	r3, r3, #15
 8004914:	490c      	ldr	r1, [pc, #48]	; (8004948 <HAL_RCC_ClockConfig+0x268>)
 8004916:	5ccb      	ldrb	r3, [r1, r3]
 8004918:	f003 031f 	and.w	r3, r3, #31
 800491c:	fa22 f303 	lsr.w	r3, r2, r3
 8004920:	4a0a      	ldr	r2, [pc, #40]	; (800494c <HAL_RCC_ClockConfig+0x26c>)
 8004922:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004924:	4b0a      	ldr	r3, [pc, #40]	; (8004950 <HAL_RCC_ClockConfig+0x270>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4618      	mov	r0, r3
 800492a:	f7fd fd4d 	bl	80023c8 <HAL_InitTick>
 800492e:	4603      	mov	r3, r0
 8004930:	73fb      	strb	r3, [r7, #15]

  return status;
 8004932:	7bfb      	ldrb	r3, [r7, #15]
}
 8004934:	4618      	mov	r0, r3
 8004936:	3718      	adds	r7, #24
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}
 800493c:	40022000 	.word	0x40022000
 8004940:	40021000 	.word	0x40021000
 8004944:	04c4b400 	.word	0x04c4b400
 8004948:	08009100 	.word	0x08009100
 800494c:	20000008 	.word	0x20000008
 8004950:	2000000c 	.word	0x2000000c

08004954 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004954:	b480      	push	{r7}
 8004956:	b089      	sub	sp, #36	; 0x24
 8004958:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800495a:	2300      	movs	r3, #0
 800495c:	61fb      	str	r3, [r7, #28]
 800495e:	2300      	movs	r3, #0
 8004960:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004962:	4b3e      	ldr	r3, [pc, #248]	; (8004a5c <HAL_RCC_GetSysClockFreq+0x108>)
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	f003 030c 	and.w	r3, r3, #12
 800496a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800496c:	4b3b      	ldr	r3, [pc, #236]	; (8004a5c <HAL_RCC_GetSysClockFreq+0x108>)
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	f003 0303 	and.w	r3, r3, #3
 8004974:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d005      	beq.n	8004988 <HAL_RCC_GetSysClockFreq+0x34>
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	2b0c      	cmp	r3, #12
 8004980:	d121      	bne.n	80049c6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2b01      	cmp	r3, #1
 8004986:	d11e      	bne.n	80049c6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004988:	4b34      	ldr	r3, [pc, #208]	; (8004a5c <HAL_RCC_GetSysClockFreq+0x108>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 0308 	and.w	r3, r3, #8
 8004990:	2b00      	cmp	r3, #0
 8004992:	d107      	bne.n	80049a4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004994:	4b31      	ldr	r3, [pc, #196]	; (8004a5c <HAL_RCC_GetSysClockFreq+0x108>)
 8004996:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800499a:	0a1b      	lsrs	r3, r3, #8
 800499c:	f003 030f 	and.w	r3, r3, #15
 80049a0:	61fb      	str	r3, [r7, #28]
 80049a2:	e005      	b.n	80049b0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80049a4:	4b2d      	ldr	r3, [pc, #180]	; (8004a5c <HAL_RCC_GetSysClockFreq+0x108>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	091b      	lsrs	r3, r3, #4
 80049aa:	f003 030f 	and.w	r3, r3, #15
 80049ae:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80049b0:	4a2b      	ldr	r2, [pc, #172]	; (8004a60 <HAL_RCC_GetSysClockFreq+0x10c>)
 80049b2:	69fb      	ldr	r3, [r7, #28]
 80049b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049b8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d10d      	bne.n	80049dc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80049c0:	69fb      	ldr	r3, [r7, #28]
 80049c2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80049c4:	e00a      	b.n	80049dc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	2b04      	cmp	r3, #4
 80049ca:	d102      	bne.n	80049d2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80049cc:	4b25      	ldr	r3, [pc, #148]	; (8004a64 <HAL_RCC_GetSysClockFreq+0x110>)
 80049ce:	61bb      	str	r3, [r7, #24]
 80049d0:	e004      	b.n	80049dc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	2b08      	cmp	r3, #8
 80049d6:	d101      	bne.n	80049dc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80049d8:	4b23      	ldr	r3, [pc, #140]	; (8004a68 <HAL_RCC_GetSysClockFreq+0x114>)
 80049da:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	2b0c      	cmp	r3, #12
 80049e0:	d134      	bne.n	8004a4c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80049e2:	4b1e      	ldr	r3, [pc, #120]	; (8004a5c <HAL_RCC_GetSysClockFreq+0x108>)
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	f003 0303 	and.w	r3, r3, #3
 80049ea:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	2b02      	cmp	r3, #2
 80049f0:	d003      	beq.n	80049fa <HAL_RCC_GetSysClockFreq+0xa6>
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	2b03      	cmp	r3, #3
 80049f6:	d003      	beq.n	8004a00 <HAL_RCC_GetSysClockFreq+0xac>
 80049f8:	e005      	b.n	8004a06 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80049fa:	4b1a      	ldr	r3, [pc, #104]	; (8004a64 <HAL_RCC_GetSysClockFreq+0x110>)
 80049fc:	617b      	str	r3, [r7, #20]
      break;
 80049fe:	e005      	b.n	8004a0c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004a00:	4b19      	ldr	r3, [pc, #100]	; (8004a68 <HAL_RCC_GetSysClockFreq+0x114>)
 8004a02:	617b      	str	r3, [r7, #20]
      break;
 8004a04:	e002      	b.n	8004a0c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004a06:	69fb      	ldr	r3, [r7, #28]
 8004a08:	617b      	str	r3, [r7, #20]
      break;
 8004a0a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a0c:	4b13      	ldr	r3, [pc, #76]	; (8004a5c <HAL_RCC_GetSysClockFreq+0x108>)
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	091b      	lsrs	r3, r3, #4
 8004a12:	f003 030f 	and.w	r3, r3, #15
 8004a16:	3301      	adds	r3, #1
 8004a18:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004a1a:	4b10      	ldr	r3, [pc, #64]	; (8004a5c <HAL_RCC_GetSysClockFreq+0x108>)
 8004a1c:	68db      	ldr	r3, [r3, #12]
 8004a1e:	0a1b      	lsrs	r3, r3, #8
 8004a20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a24:	697a      	ldr	r2, [r7, #20]
 8004a26:	fb03 f202 	mul.w	r2, r3, r2
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a30:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004a32:	4b0a      	ldr	r3, [pc, #40]	; (8004a5c <HAL_RCC_GetSysClockFreq+0x108>)
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	0e5b      	lsrs	r3, r3, #25
 8004a38:	f003 0303 	and.w	r3, r3, #3
 8004a3c:	3301      	adds	r3, #1
 8004a3e:	005b      	lsls	r3, r3, #1
 8004a40:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004a42:	697a      	ldr	r2, [r7, #20]
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a4a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004a4c:	69bb      	ldr	r3, [r7, #24]
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3724      	adds	r7, #36	; 0x24
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr
 8004a5a:	bf00      	nop
 8004a5c:	40021000 	.word	0x40021000
 8004a60:	08009118 	.word	0x08009118
 8004a64:	00f42400 	.word	0x00f42400
 8004a68:	007a1200 	.word	0x007a1200

08004a6c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a70:	4b03      	ldr	r3, [pc, #12]	; (8004a80 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a72:	681b      	ldr	r3, [r3, #0]
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr
 8004a7e:	bf00      	nop
 8004a80:	20000008 	.word	0x20000008

08004a84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004a88:	f7ff fff0 	bl	8004a6c <HAL_RCC_GetHCLKFreq>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	4b06      	ldr	r3, [pc, #24]	; (8004aa8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	0a1b      	lsrs	r3, r3, #8
 8004a94:	f003 0307 	and.w	r3, r3, #7
 8004a98:	4904      	ldr	r1, [pc, #16]	; (8004aac <HAL_RCC_GetPCLK1Freq+0x28>)
 8004a9a:	5ccb      	ldrb	r3, [r1, r3]
 8004a9c:	f003 031f 	and.w	r3, r3, #31
 8004aa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	40021000 	.word	0x40021000
 8004aac:	08009110 	.word	0x08009110

08004ab0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004ab4:	f7ff ffda 	bl	8004a6c <HAL_RCC_GetHCLKFreq>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	4b06      	ldr	r3, [pc, #24]	; (8004ad4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	0adb      	lsrs	r3, r3, #11
 8004ac0:	f003 0307 	and.w	r3, r3, #7
 8004ac4:	4904      	ldr	r1, [pc, #16]	; (8004ad8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004ac6:	5ccb      	ldrb	r3, [r1, r3]
 8004ac8:	f003 031f 	and.w	r3, r3, #31
 8004acc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	bd80      	pop	{r7, pc}
 8004ad4:	40021000 	.word	0x40021000
 8004ad8:	08009110 	.word	0x08009110

08004adc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b086      	sub	sp, #24
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004ae8:	4b27      	ldr	r3, [pc, #156]	; (8004b88 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d003      	beq.n	8004afc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004af4:	f7ff f906 	bl	8003d04 <HAL_PWREx_GetVoltageRange>
 8004af8:	6178      	str	r0, [r7, #20]
 8004afa:	e014      	b.n	8004b26 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004afc:	4b22      	ldr	r3, [pc, #136]	; (8004b88 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004afe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b00:	4a21      	ldr	r2, [pc, #132]	; (8004b88 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004b02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b06:	6593      	str	r3, [r2, #88]	; 0x58
 8004b08:	4b1f      	ldr	r3, [pc, #124]	; (8004b88 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004b0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b10:	60fb      	str	r3, [r7, #12]
 8004b12:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004b14:	f7ff f8f6 	bl	8003d04 <HAL_PWREx_GetVoltageRange>
 8004b18:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004b1a:	4b1b      	ldr	r3, [pc, #108]	; (8004b88 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b1e:	4a1a      	ldr	r2, [pc, #104]	; (8004b88 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004b20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b24:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b2c:	d10b      	bne.n	8004b46 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2b80      	cmp	r3, #128	; 0x80
 8004b32:	d913      	bls.n	8004b5c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2ba0      	cmp	r3, #160	; 0xa0
 8004b38:	d902      	bls.n	8004b40 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004b3a:	2302      	movs	r3, #2
 8004b3c:	613b      	str	r3, [r7, #16]
 8004b3e:	e00d      	b.n	8004b5c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004b40:	2301      	movs	r3, #1
 8004b42:	613b      	str	r3, [r7, #16]
 8004b44:	e00a      	b.n	8004b5c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2b7f      	cmp	r3, #127	; 0x7f
 8004b4a:	d902      	bls.n	8004b52 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004b4c:	2302      	movs	r3, #2
 8004b4e:	613b      	str	r3, [r7, #16]
 8004b50:	e004      	b.n	8004b5c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2b70      	cmp	r3, #112	; 0x70
 8004b56:	d101      	bne.n	8004b5c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004b58:	2301      	movs	r3, #1
 8004b5a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004b5c:	4b0b      	ldr	r3, [pc, #44]	; (8004b8c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f023 020f 	bic.w	r2, r3, #15
 8004b64:	4909      	ldr	r1, [pc, #36]	; (8004b8c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004b6c:	4b07      	ldr	r3, [pc, #28]	; (8004b8c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 030f 	and.w	r3, r3, #15
 8004b74:	693a      	ldr	r2, [r7, #16]
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d001      	beq.n	8004b7e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e000      	b.n	8004b80 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8004b7e:	2300      	movs	r3, #0
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3718      	adds	r7, #24
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}
 8004b88:	40021000 	.word	0x40021000
 8004b8c:	40022000 	.word	0x40022000

08004b90 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b087      	sub	sp, #28
 8004b94:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004b96:	4b2d      	ldr	r3, [pc, #180]	; (8004c4c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004b98:	68db      	ldr	r3, [r3, #12]
 8004b9a:	f003 0303 	and.w	r3, r3, #3
 8004b9e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2b03      	cmp	r3, #3
 8004ba4:	d00b      	beq.n	8004bbe <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2b03      	cmp	r3, #3
 8004baa:	d825      	bhi.n	8004bf8 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d008      	beq.n	8004bc4 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2b02      	cmp	r3, #2
 8004bb6:	d11f      	bne.n	8004bf8 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004bb8:	4b25      	ldr	r3, [pc, #148]	; (8004c50 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004bba:	613b      	str	r3, [r7, #16]
    break;
 8004bbc:	e01f      	b.n	8004bfe <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8004bbe:	4b25      	ldr	r3, [pc, #148]	; (8004c54 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004bc0:	613b      	str	r3, [r7, #16]
    break;
 8004bc2:	e01c      	b.n	8004bfe <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004bc4:	4b21      	ldr	r3, [pc, #132]	; (8004c4c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 0308 	and.w	r3, r3, #8
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d107      	bne.n	8004be0 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004bd0:	4b1e      	ldr	r3, [pc, #120]	; (8004c4c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004bd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bd6:	0a1b      	lsrs	r3, r3, #8
 8004bd8:	f003 030f 	and.w	r3, r3, #15
 8004bdc:	617b      	str	r3, [r7, #20]
 8004bde:	e005      	b.n	8004bec <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004be0:	4b1a      	ldr	r3, [pc, #104]	; (8004c4c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	091b      	lsrs	r3, r3, #4
 8004be6:	f003 030f 	and.w	r3, r3, #15
 8004bea:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8004bec:	4a1a      	ldr	r2, [pc, #104]	; (8004c58 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bf4:	613b      	str	r3, [r7, #16]
    break;
 8004bf6:	e002      	b.n	8004bfe <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	613b      	str	r3, [r7, #16]
    break;
 8004bfc:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004bfe:	4b13      	ldr	r3, [pc, #76]	; (8004c4c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004c00:	68db      	ldr	r3, [r3, #12]
 8004c02:	091b      	lsrs	r3, r3, #4
 8004c04:	f003 030f 	and.w	r3, r3, #15
 8004c08:	3301      	adds	r3, #1
 8004c0a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004c0c:	4b0f      	ldr	r3, [pc, #60]	; (8004c4c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	0a1b      	lsrs	r3, r3, #8
 8004c12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c16:	693a      	ldr	r2, [r7, #16]
 8004c18:	fb03 f202 	mul.w	r2, r3, r2
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c22:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004c24:	4b09      	ldr	r3, [pc, #36]	; (8004c4c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	0e5b      	lsrs	r3, r3, #25
 8004c2a:	f003 0303 	and.w	r3, r3, #3
 8004c2e:	3301      	adds	r3, #1
 8004c30:	005b      	lsls	r3, r3, #1
 8004c32:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004c34:	693a      	ldr	r2, [r7, #16]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c3c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004c3e:	683b      	ldr	r3, [r7, #0]
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	371c      	adds	r7, #28
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr
 8004c4c:	40021000 	.word	0x40021000
 8004c50:	00f42400 	.word	0x00f42400
 8004c54:	007a1200 	.word	0x007a1200
 8004c58:	08009118 	.word	0x08009118

08004c5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b086      	sub	sp, #24
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004c64:	2300      	movs	r3, #0
 8004c66:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004c68:	2300      	movs	r3, #0
 8004c6a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d040      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c7c:	2b80      	cmp	r3, #128	; 0x80
 8004c7e:	d02a      	beq.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004c80:	2b80      	cmp	r3, #128	; 0x80
 8004c82:	d825      	bhi.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004c84:	2b60      	cmp	r3, #96	; 0x60
 8004c86:	d026      	beq.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004c88:	2b60      	cmp	r3, #96	; 0x60
 8004c8a:	d821      	bhi.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004c8c:	2b40      	cmp	r3, #64	; 0x40
 8004c8e:	d006      	beq.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004c90:	2b40      	cmp	r3, #64	; 0x40
 8004c92:	d81d      	bhi.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d009      	beq.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004c98:	2b20      	cmp	r3, #32
 8004c9a:	d010      	beq.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004c9c:	e018      	b.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004c9e:	4b89      	ldr	r3, [pc, #548]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	4a88      	ldr	r2, [pc, #544]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ca4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ca8:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004caa:	e015      	b.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	3304      	adds	r3, #4
 8004cb0:	2100      	movs	r1, #0
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f001 fa34 	bl	8006120 <RCCEx_PLLSAI1_Config>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004cbc:	e00c      	b.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	3320      	adds	r3, #32
 8004cc2:	2100      	movs	r1, #0
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f001 fb1f 	bl	8006308 <RCCEx_PLLSAI2_Config>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004cce:	e003      	b.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	74fb      	strb	r3, [r7, #19]
      break;
 8004cd4:	e000      	b.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8004cd6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004cd8:	7cfb      	ldrb	r3, [r7, #19]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d10b      	bne.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004cde:	4b79      	ldr	r3, [pc, #484]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ce0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004ce4:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cec:	4975      	ldr	r1, [pc, #468]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004cf4:	e001      	b.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cf6:	7cfb      	ldrb	r3, [r7, #19]
 8004cf8:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d047      	beq.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d0e:	d030      	beq.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004d10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d14:	d82a      	bhi.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004d16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d1a:	d02a      	beq.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004d1c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d20:	d824      	bhi.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004d22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d26:	d008      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004d28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d2c:	d81e      	bhi.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d00a      	beq.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004d32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d36:	d010      	beq.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004d38:	e018      	b.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004d3a:	4b62      	ldr	r3, [pc, #392]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d3c:	68db      	ldr	r3, [r3, #12]
 8004d3e:	4a61      	ldr	r2, [pc, #388]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d44:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004d46:	e015      	b.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	3304      	adds	r3, #4
 8004d4c:	2100      	movs	r1, #0
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f001 f9e6 	bl	8006120 <RCCEx_PLLSAI1_Config>
 8004d54:	4603      	mov	r3, r0
 8004d56:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004d58:	e00c      	b.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	3320      	adds	r3, #32
 8004d5e:	2100      	movs	r1, #0
 8004d60:	4618      	mov	r0, r3
 8004d62:	f001 fad1 	bl	8006308 <RCCEx_PLLSAI2_Config>
 8004d66:	4603      	mov	r3, r0
 8004d68:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004d6a:	e003      	b.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	74fb      	strb	r3, [r7, #19]
      break;
 8004d70:	e000      	b.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8004d72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d74:	7cfb      	ldrb	r3, [r7, #19]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d10b      	bne.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004d7a:	4b52      	ldr	r3, [pc, #328]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d80:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d88:	494e      	ldr	r1, [pc, #312]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004d90:	e001      	b.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d92:	7cfb      	ldrb	r3, [r7, #19]
 8004d94:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	f000 809f 	beq.w	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004da4:	2300      	movs	r3, #0
 8004da6:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004da8:	4b46      	ldr	r3, [pc, #280]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d101      	bne.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004db4:	2301      	movs	r3, #1
 8004db6:	e000      	b.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004db8:	2300      	movs	r3, #0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d00d      	beq.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004dbe:	4b41      	ldr	r3, [pc, #260]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dc2:	4a40      	ldr	r2, [pc, #256]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004dc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dc8:	6593      	str	r3, [r2, #88]	; 0x58
 8004dca:	4b3e      	ldr	r3, [pc, #248]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dd2:	60bb      	str	r3, [r7, #8]
 8004dd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004dda:	4b3b      	ldr	r3, [pc, #236]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a3a      	ldr	r2, [pc, #232]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004de0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004de4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004de6:	f7fd fb3f 	bl	8002468 <HAL_GetTick>
 8004dea:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004dec:	e009      	b.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dee:	f7fd fb3b 	bl	8002468 <HAL_GetTick>
 8004df2:	4602      	mov	r2, r0
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	1ad3      	subs	r3, r2, r3
 8004df8:	2b02      	cmp	r3, #2
 8004dfa:	d902      	bls.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8004dfc:	2303      	movs	r3, #3
 8004dfe:	74fb      	strb	r3, [r7, #19]
        break;
 8004e00:	e005      	b.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004e02:	4b31      	ldr	r3, [pc, #196]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d0ef      	beq.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8004e0e:	7cfb      	ldrb	r3, [r7, #19]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d15b      	bne.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004e14:	4b2b      	ldr	r3, [pc, #172]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e1e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d01f      	beq.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e2c:	697a      	ldr	r2, [r7, #20]
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d019      	beq.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004e32:	4b24      	ldr	r3, [pc, #144]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e3c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004e3e:	4b21      	ldr	r3, [pc, #132]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e44:	4a1f      	ldr	r2, [pc, #124]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004e4e:	4b1d      	ldr	r3, [pc, #116]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e54:	4a1b      	ldr	r2, [pc, #108]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004e5e:	4a19      	ldr	r2, [pc, #100]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	f003 0301 	and.w	r3, r3, #1
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d016      	beq.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e70:	f7fd fafa 	bl	8002468 <HAL_GetTick>
 8004e74:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e76:	e00b      	b.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e78:	f7fd faf6 	bl	8002468 <HAL_GetTick>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	1ad3      	subs	r3, r2, r3
 8004e82:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d902      	bls.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8004e8a:	2303      	movs	r3, #3
 8004e8c:	74fb      	strb	r3, [r7, #19]
            break;
 8004e8e:	e006      	b.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e90:	4b0c      	ldr	r3, [pc, #48]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e96:	f003 0302 	and.w	r3, r3, #2
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d0ec      	beq.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8004e9e:	7cfb      	ldrb	r3, [r7, #19]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d10c      	bne.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ea4:	4b07      	ldr	r3, [pc, #28]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eaa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eb4:	4903      	ldr	r1, [pc, #12]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004ebc:	e008      	b.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004ebe:	7cfb      	ldrb	r3, [r7, #19]
 8004ec0:	74bb      	strb	r3, [r7, #18]
 8004ec2:	e005      	b.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004ec4:	40021000 	.word	0x40021000
 8004ec8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ecc:	7cfb      	ldrb	r3, [r7, #19]
 8004ece:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ed0:	7c7b      	ldrb	r3, [r7, #17]
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d105      	bne.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ed6:	4ba0      	ldr	r3, [pc, #640]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eda:	4a9f      	ldr	r2, [pc, #636]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004edc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ee0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 0301 	and.w	r3, r3, #1
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d00a      	beq.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004eee:	4b9a      	ldr	r3, [pc, #616]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ef4:	f023 0203 	bic.w	r2, r3, #3
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004efc:	4996      	ldr	r1, [pc, #600]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004efe:	4313      	orrs	r3, r2
 8004f00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 0302 	and.w	r3, r3, #2
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d00a      	beq.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004f10:	4b91      	ldr	r3, [pc, #580]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f16:	f023 020c 	bic.w	r2, r3, #12
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f1e:	498e      	ldr	r1, [pc, #568]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f20:	4313      	orrs	r3, r2
 8004f22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 0304 	and.w	r3, r3, #4
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d00a      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004f32:	4b89      	ldr	r3, [pc, #548]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f38:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f40:	4985      	ldr	r1, [pc, #532]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f42:	4313      	orrs	r3, r2
 8004f44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 0308 	and.w	r3, r3, #8
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d00a      	beq.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004f54:	4b80      	ldr	r3, [pc, #512]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f5a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f62:	497d      	ldr	r1, [pc, #500]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f64:	4313      	orrs	r3, r2
 8004f66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 0310 	and.w	r3, r3, #16
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d00a      	beq.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004f76:	4b78      	ldr	r3, [pc, #480]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f84:	4974      	ldr	r1, [pc, #464]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f86:	4313      	orrs	r3, r2
 8004f88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 0320 	and.w	r3, r3, #32
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d00a      	beq.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004f98:	4b6f      	ldr	r3, [pc, #444]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f9e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fa6:	496c      	ldr	r1, [pc, #432]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d00a      	beq.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004fba:	4b67      	ldr	r3, [pc, #412]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fc0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004fc8:	4963      	ldr	r1, [pc, #396]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d00a      	beq.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004fdc:	4b5e      	ldr	r3, [pc, #376]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fe2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004fea:	495b      	ldr	r1, [pc, #364]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fec:	4313      	orrs	r3, r2
 8004fee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d00a      	beq.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ffe:	4b56      	ldr	r3, [pc, #344]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005000:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005004:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800500c:	4952      	ldr	r1, [pc, #328]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800500e:	4313      	orrs	r3, r2
 8005010:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800501c:	2b00      	cmp	r3, #0
 800501e:	d00a      	beq.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005020:	4b4d      	ldr	r3, [pc, #308]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005026:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800502e:	494a      	ldr	r1, [pc, #296]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005030:	4313      	orrs	r3, r2
 8005032:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800503e:	2b00      	cmp	r3, #0
 8005040:	d00a      	beq.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005042:	4b45      	ldr	r3, [pc, #276]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005044:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005048:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005050:	4941      	ldr	r1, [pc, #260]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005052:	4313      	orrs	r3, r2
 8005054:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005060:	2b00      	cmp	r3, #0
 8005062:	d00a      	beq.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005064:	4b3c      	ldr	r3, [pc, #240]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005066:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800506a:	f023 0203 	bic.w	r2, r3, #3
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005072:	4939      	ldr	r1, [pc, #228]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005074:	4313      	orrs	r3, r2
 8005076:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005082:	2b00      	cmp	r3, #0
 8005084:	d028      	beq.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005086:	4b34      	ldr	r3, [pc, #208]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005088:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800508c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005094:	4930      	ldr	r1, [pc, #192]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005096:	4313      	orrs	r3, r2
 8005098:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050a4:	d106      	bne.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80050a6:	4b2c      	ldr	r3, [pc, #176]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050a8:	68db      	ldr	r3, [r3, #12]
 80050aa:	4a2b      	ldr	r2, [pc, #172]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80050b0:	60d3      	str	r3, [r2, #12]
 80050b2:	e011      	b.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80050bc:	d10c      	bne.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	3304      	adds	r3, #4
 80050c2:	2101      	movs	r1, #1
 80050c4:	4618      	mov	r0, r3
 80050c6:	f001 f82b 	bl	8006120 <RCCEx_PLLSAI1_Config>
 80050ca:	4603      	mov	r3, r0
 80050cc:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80050ce:	7cfb      	ldrb	r3, [r7, #19]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d001      	beq.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80050d4:	7cfb      	ldrb	r3, [r7, #19]
 80050d6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d04d      	beq.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80050e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050ec:	d108      	bne.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80050ee:	4b1a      	ldr	r3, [pc, #104]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80050f4:	4a18      	ldr	r2, [pc, #96]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80050fa:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80050fe:	e012      	b.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005100:	4b15      	ldr	r3, [pc, #84]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005102:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005106:	4a14      	ldr	r2, [pc, #80]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005108:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800510c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005110:	4b11      	ldr	r3, [pc, #68]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005116:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800511e:	490e      	ldr	r1, [pc, #56]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005120:	4313      	orrs	r3, r2
 8005122:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800512a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800512e:	d106      	bne.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005130:	4b09      	ldr	r3, [pc, #36]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	4a08      	ldr	r2, [pc, #32]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005136:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800513a:	60d3      	str	r3, [r2, #12]
 800513c:	e020      	b.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005142:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005146:	d109      	bne.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005148:	4b03      	ldr	r3, [pc, #12]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	4a02      	ldr	r2, [pc, #8]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800514e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005152:	60d3      	str	r3, [r2, #12]
 8005154:	e014      	b.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005156:	bf00      	nop
 8005158:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005160:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005164:	d10c      	bne.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	3304      	adds	r3, #4
 800516a:	2101      	movs	r1, #1
 800516c:	4618      	mov	r0, r3
 800516e:	f000 ffd7 	bl	8006120 <RCCEx_PLLSAI1_Config>
 8005172:	4603      	mov	r3, r0
 8005174:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005176:	7cfb      	ldrb	r3, [r7, #19]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d001      	beq.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 800517c:	7cfb      	ldrb	r3, [r7, #19]
 800517e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005188:	2b00      	cmp	r3, #0
 800518a:	d028      	beq.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800518c:	4b4a      	ldr	r3, [pc, #296]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800518e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005192:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800519a:	4947      	ldr	r1, [pc, #284]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800519c:	4313      	orrs	r3, r2
 800519e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051aa:	d106      	bne.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051ac:	4b42      	ldr	r3, [pc, #264]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	4a41      	ldr	r2, [pc, #260]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80051b6:	60d3      	str	r3, [r2, #12]
 80051b8:	e011      	b.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80051c2:	d10c      	bne.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	3304      	adds	r3, #4
 80051c8:	2101      	movs	r1, #1
 80051ca:	4618      	mov	r0, r3
 80051cc:	f000 ffa8 	bl	8006120 <RCCEx_PLLSAI1_Config>
 80051d0:	4603      	mov	r3, r0
 80051d2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80051d4:	7cfb      	ldrb	r3, [r7, #19]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d001      	beq.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80051da:	7cfb      	ldrb	r3, [r7, #19]
 80051dc:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d01e      	beq.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80051ea:	4b33      	ldr	r3, [pc, #204]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051f0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051fa:	492f      	ldr	r1, [pc, #188]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051fc:	4313      	orrs	r3, r2
 80051fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005208:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800520c:	d10c      	bne.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	3304      	adds	r3, #4
 8005212:	2102      	movs	r1, #2
 8005214:	4618      	mov	r0, r3
 8005216:	f000 ff83 	bl	8006120 <RCCEx_PLLSAI1_Config>
 800521a:	4603      	mov	r3, r0
 800521c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800521e:	7cfb      	ldrb	r3, [r7, #19]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d001      	beq.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8005224:	7cfb      	ldrb	r3, [r7, #19]
 8005226:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005230:	2b00      	cmp	r3, #0
 8005232:	d00b      	beq.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005234:	4b20      	ldr	r3, [pc, #128]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005236:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800523a:	f023 0204 	bic.w	r2, r3, #4
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005244:	491c      	ldr	r1, [pc, #112]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005246:	4313      	orrs	r3, r2
 8005248:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005254:	2b00      	cmp	r3, #0
 8005256:	d00b      	beq.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005258:	4b17      	ldr	r3, [pc, #92]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800525a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800525e:	f023 0218 	bic.w	r2, r3, #24
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005268:	4913      	ldr	r1, [pc, #76]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800526a:	4313      	orrs	r3, r2
 800526c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005278:	2b00      	cmp	r3, #0
 800527a:	d017      	beq.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800527c:	4b0e      	ldr	r3, [pc, #56]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800527e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005282:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800528c:	490a      	ldr	r1, [pc, #40]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800528e:	4313      	orrs	r3, r2
 8005290:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800529a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800529e:	d105      	bne.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052a0:	4b05      	ldr	r3, [pc, #20]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	4a04      	ldr	r2, [pc, #16]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80052a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052aa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80052ac:	7cbb      	ldrb	r3, [r7, #18]
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3718      	adds	r7, #24
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}
 80052b6:	bf00      	nop
 80052b8:	40021000 	.word	0x40021000

080052bc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b088      	sub	sp, #32
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 80052c4:	2300      	movs	r3, #0
 80052c6:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80052ce:	d13e      	bne.n	800534e <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80052d0:	4bb6      	ldr	r3, [pc, #728]	; (80055ac <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80052d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052da:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052e2:	d028      	beq.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052ea:	f200 86f4 	bhi.w	80060d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052f4:	d005      	beq.n	8005302 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052fc:	d00e      	beq.n	800531c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 80052fe:	f000 beea 	b.w	80060d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005302:	4baa      	ldr	r3, [pc, #680]	; (80055ac <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005304:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005308:	f003 0302 	and.w	r3, r3, #2
 800530c:	2b02      	cmp	r3, #2
 800530e:	f040 86e4 	bne.w	80060da <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        frequency = LSE_VALUE;
 8005312:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005316:	61fb      	str	r3, [r7, #28]
      break;
 8005318:	f000 bedf 	b.w	80060da <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800531c:	4ba3      	ldr	r3, [pc, #652]	; (80055ac <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800531e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005322:	f003 0302 	and.w	r3, r3, #2
 8005326:	2b02      	cmp	r3, #2
 8005328:	f040 86d9 	bne.w	80060de <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
          frequency = LSI_VALUE;
 800532c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005330:	61fb      	str	r3, [r7, #28]
      break;
 8005332:	f000 bed4 	b.w	80060de <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005336:	4b9d      	ldr	r3, [pc, #628]	; (80055ac <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800533e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005342:	f040 86ce 	bne.w	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
        frequency = HSE_VALUE / 32U;
 8005346:	4b9a      	ldr	r3, [pc, #616]	; (80055b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005348:	61fb      	str	r3, [r7, #28]
      break;
 800534a:	f000 beca 	b.w	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800534e:	4b97      	ldr	r3, [pc, #604]	; (80055ac <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	f003 0303 	and.w	r3, r3, #3
 8005356:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	2b03      	cmp	r3, #3
 800535c:	d036      	beq.n	80053cc <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	2b03      	cmp	r3, #3
 8005362:	d840      	bhi.n	80053e6 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	2b01      	cmp	r3, #1
 8005368:	d003      	beq.n	8005372 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	2b02      	cmp	r3, #2
 800536e:	d020      	beq.n	80053b2 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8005370:	e039      	b.n	80053e6 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005372:	4b8e      	ldr	r3, [pc, #568]	; (80055ac <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f003 0302 	and.w	r3, r3, #2
 800537a:	2b02      	cmp	r3, #2
 800537c:	d116      	bne.n	80053ac <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800537e:	4b8b      	ldr	r3, [pc, #556]	; (80055ac <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f003 0308 	and.w	r3, r3, #8
 8005386:	2b00      	cmp	r3, #0
 8005388:	d005      	beq.n	8005396 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 800538a:	4b88      	ldr	r3, [pc, #544]	; (80055ac <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	091b      	lsrs	r3, r3, #4
 8005390:	f003 030f 	and.w	r3, r3, #15
 8005394:	e005      	b.n	80053a2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8005396:	4b85      	ldr	r3, [pc, #532]	; (80055ac <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005398:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800539c:	0a1b      	lsrs	r3, r3, #8
 800539e:	f003 030f 	and.w	r3, r3, #15
 80053a2:	4a84      	ldr	r2, [pc, #528]	; (80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80053a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053a8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80053aa:	e01f      	b.n	80053ec <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80053ac:	2300      	movs	r3, #0
 80053ae:	61bb      	str	r3, [r7, #24]
      break;
 80053b0:	e01c      	b.n	80053ec <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80053b2:	4b7e      	ldr	r3, [pc, #504]	; (80055ac <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053be:	d102      	bne.n	80053c6 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 80053c0:	4b7d      	ldr	r3, [pc, #500]	; (80055b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80053c2:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80053c4:	e012      	b.n	80053ec <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80053c6:	2300      	movs	r3, #0
 80053c8:	61bb      	str	r3, [r7, #24]
      break;
 80053ca:	e00f      	b.n	80053ec <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80053cc:	4b77      	ldr	r3, [pc, #476]	; (80055ac <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80053d8:	d102      	bne.n	80053e0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 80053da:	4b78      	ldr	r3, [pc, #480]	; (80055bc <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 80053dc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80053de:	e005      	b.n	80053ec <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80053e0:	2300      	movs	r3, #0
 80053e2:	61bb      	str	r3, [r7, #24]
      break;
 80053e4:	e002      	b.n	80053ec <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 80053e6:	2300      	movs	r3, #0
 80053e8:	61bb      	str	r3, [r7, #24]
      break;
 80053ea:	bf00      	nop
    }

    switch(PeriphClk)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80053f2:	f000 8606 	beq.w	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80053fc:	f200 8673 	bhi.w	80060e6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005406:	f000 8469 	beq.w	8005cdc <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005410:	f200 8669 	bhi.w	80060e6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800541a:	f000 8531 	beq.w	8005e80 <HAL_RCCEx_GetPeriphCLKFreq+0xbc4>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005424:	f200 865f 	bhi.w	80060e6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800542e:	f000 8187 	beq.w	8005740 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005438:	f200 8655 	bhi.w	80060e6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005442:	f000 80cd 	beq.w	80055e0 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800544c:	f200 864b 	bhi.w	80060e6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005456:	f000 8430 	beq.w	8005cba <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005460:	f200 8641 	bhi.w	80060e6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800546a:	f000 83e4 	beq.w	8005c36 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005474:	f200 8637 	bhi.w	80060e6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800547e:	f000 80af 	beq.w	80055e0 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005488:	f200 862d 	bhi.w	80060e6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005492:	f000 809d 	beq.w	80055d0 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800549c:	f200 8623 	bhi.w	80060e6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054a6:	f000 808b 	beq.w	80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054b0:	f200 8619 	bhi.w	80060e6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054ba:	f000 8554 	beq.w	8005f66 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054c4:	f200 860f 	bhi.w	80060e6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054ce:	f000 8500 	beq.w	8005ed2 <HAL_RCCEx_GetPeriphCLKFreq+0xc16>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054d8:	f200 8605 	bhi.w	80060e6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054e2:	f000 84a1 	beq.w	8005e28 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054ec:	f200 85fb 	bhi.w	80060e6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2b80      	cmp	r3, #128	; 0x80
 80054f4:	f000 846c 	beq.w	8005dd0 <HAL_RCCEx_GetPeriphCLKFreq+0xb14>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2b80      	cmp	r3, #128	; 0x80
 80054fc:	f200 85f3 	bhi.w	80060e6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2b20      	cmp	r3, #32
 8005504:	d84c      	bhi.n	80055a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2b00      	cmp	r3, #0
 800550a:	f000 85ec 	beq.w	80060e6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	3b01      	subs	r3, #1
 8005512:	2b1f      	cmp	r3, #31
 8005514:	f200 85e7 	bhi.w	80060e6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005518:	a201      	add	r2, pc, #4	; (adr r2, 8005520 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 800551a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800551e:	bf00      	nop
 8005520:	08005935 	.word	0x08005935
 8005524:	080059a3 	.word	0x080059a3
 8005528:	080060e7 	.word	0x080060e7
 800552c:	08005a37 	.word	0x08005a37
 8005530:	080060e7 	.word	0x080060e7
 8005534:	080060e7 	.word	0x080060e7
 8005538:	080060e7 	.word	0x080060e7
 800553c:	08005aaf 	.word	0x08005aaf
 8005540:	080060e7 	.word	0x080060e7
 8005544:	080060e7 	.word	0x080060e7
 8005548:	080060e7 	.word	0x080060e7
 800554c:	080060e7 	.word	0x080060e7
 8005550:	080060e7 	.word	0x080060e7
 8005554:	080060e7 	.word	0x080060e7
 8005558:	080060e7 	.word	0x080060e7
 800555c:	08005b33 	.word	0x08005b33
 8005560:	080060e7 	.word	0x080060e7
 8005564:	080060e7 	.word	0x080060e7
 8005568:	080060e7 	.word	0x080060e7
 800556c:	080060e7 	.word	0x080060e7
 8005570:	080060e7 	.word	0x080060e7
 8005574:	080060e7 	.word	0x080060e7
 8005578:	080060e7 	.word	0x080060e7
 800557c:	080060e7 	.word	0x080060e7
 8005580:	080060e7 	.word	0x080060e7
 8005584:	080060e7 	.word	0x080060e7
 8005588:	080060e7 	.word	0x080060e7
 800558c:	080060e7 	.word	0x080060e7
 8005590:	080060e7 	.word	0x080060e7
 8005594:	080060e7 	.word	0x080060e7
 8005598:	080060e7 	.word	0x080060e7
 800559c:	08005bb5 	.word	0x08005bb5
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2b40      	cmp	r3, #64	; 0x40
 80055a4:	f000 83e8 	beq.w	8005d78 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 80055a8:	f000 bd9d 	b.w	80060e6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80055ac:	40021000 	.word	0x40021000
 80055b0:	0003d090 	.word	0x0003d090
 80055b4:	08009118 	.word	0x08009118
 80055b8:	00f42400 	.word	0x00f42400
 80055bc:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 80055c0:	69b9      	ldr	r1, [r7, #24]
 80055c2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80055c6:	f000 ff93 	bl	80064f0 <RCCEx_GetSAIxPeriphCLKFreq>
 80055ca:	61f8      	str	r0, [r7, #28]
      break;
 80055cc:	f000 bd8e 	b.w	80060ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 80055d0:	69b9      	ldr	r1, [r7, #24]
 80055d2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80055d6:	f000 ff8b 	bl	80064f0 <RCCEx_GetSAIxPeriphCLKFreq>
 80055da:	61f8      	str	r0, [r7, #28]
      break;
 80055dc:	f000 bd86 	b.w	80060ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80055e0:	4b9a      	ldr	r3, [pc, #616]	; (800584c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80055e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055e6:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80055ea:	60fb      	str	r3, [r7, #12]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80055f2:	d015      	beq.n	8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80055fa:	f200 8092 	bhi.w	8005722 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005604:	d029      	beq.n	800565a <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800560c:	f200 8089 	bhi.w	8005722 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d07b      	beq.n	800570e <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800561c:	d04a      	beq.n	80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
          break;
 800561e:	e080      	b.n	8005722 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005620:	4b8a      	ldr	r3, [pc, #552]	; (800584c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f003 0302 	and.w	r3, r3, #2
 8005628:	2b02      	cmp	r3, #2
 800562a:	d17d      	bne.n	8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800562c:	4b87      	ldr	r3, [pc, #540]	; (800584c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f003 0308 	and.w	r3, r3, #8
 8005634:	2b00      	cmp	r3, #0
 8005636:	d005      	beq.n	8005644 <HAL_RCCEx_GetPeriphCLKFreq+0x388>
 8005638:	4b84      	ldr	r3, [pc, #528]	; (800584c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	091b      	lsrs	r3, r3, #4
 800563e:	f003 030f 	and.w	r3, r3, #15
 8005642:	e005      	b.n	8005650 <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 8005644:	4b81      	ldr	r3, [pc, #516]	; (800584c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005646:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800564a:	0a1b      	lsrs	r3, r3, #8
 800564c:	f003 030f 	and.w	r3, r3, #15
 8005650:	4a7f      	ldr	r2, [pc, #508]	; (8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8005652:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005656:	61fb      	str	r3, [r7, #28]
          break;
 8005658:	e066      	b.n	8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800565a:	4b7c      	ldr	r3, [pc, #496]	; (800584c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005662:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005666:	d162      	bne.n	800572e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8005668:	4b78      	ldr	r3, [pc, #480]	; (800584c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005670:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005674:	d15b      	bne.n	800572e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005676:	4b75      	ldr	r3, [pc, #468]	; (800584c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005678:	68db      	ldr	r3, [r3, #12]
 800567a:	0a1b      	lsrs	r3, r3, #8
 800567c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005680:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005682:	69bb      	ldr	r3, [r7, #24]
 8005684:	68ba      	ldr	r2, [r7, #8]
 8005686:	fb03 f202 	mul.w	r2, r3, r2
 800568a:	4b70      	ldr	r3, [pc, #448]	; (800584c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800568c:	68db      	ldr	r3, [r3, #12]
 800568e:	091b      	lsrs	r3, r3, #4
 8005690:	f003 030f 	and.w	r3, r3, #15
 8005694:	3301      	adds	r3, #1
 8005696:	fbb2 f3f3 	udiv	r3, r2, r3
 800569a:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800569c:	4b6b      	ldr	r3, [pc, #428]	; (800584c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800569e:	68db      	ldr	r3, [r3, #12]
 80056a0:	0d5b      	lsrs	r3, r3, #21
 80056a2:	f003 0303 	and.w	r3, r3, #3
 80056a6:	3301      	adds	r3, #1
 80056a8:	005b      	lsls	r3, r3, #1
 80056aa:	69ba      	ldr	r2, [r7, #24]
 80056ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80056b0:	61fb      	str	r3, [r7, #28]
          break;
 80056b2:	e03c      	b.n	800572e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 80056b4:	4b65      	ldr	r3, [pc, #404]	; (800584c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80056c0:	d138      	bne.n	8005734 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 80056c2:	4b62      	ldr	r3, [pc, #392]	; (800584c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80056c4:	691b      	ldr	r3, [r3, #16]
 80056c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056ce:	d131      	bne.n	8005734 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80056d0:	4b5e      	ldr	r3, [pc, #376]	; (800584c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80056d2:	691b      	ldr	r3, [r3, #16]
 80056d4:	0a1b      	lsrs	r3, r3, #8
 80056d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056da:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80056dc:	69bb      	ldr	r3, [r7, #24]
 80056de:	68ba      	ldr	r2, [r7, #8]
 80056e0:	fb03 f202 	mul.w	r2, r3, r2
 80056e4:	4b59      	ldr	r3, [pc, #356]	; (800584c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80056e6:	691b      	ldr	r3, [r3, #16]
 80056e8:	091b      	lsrs	r3, r3, #4
 80056ea:	f003 030f 	and.w	r3, r3, #15
 80056ee:	3301      	adds	r3, #1
 80056f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80056f4:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 80056f6:	4b55      	ldr	r3, [pc, #340]	; (800584c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80056f8:	691b      	ldr	r3, [r3, #16]
 80056fa:	0d5b      	lsrs	r3, r3, #21
 80056fc:	f003 0303 	and.w	r3, r3, #3
 8005700:	3301      	adds	r3, #1
 8005702:	005b      	lsls	r3, r3, #1
 8005704:	69ba      	ldr	r2, [r7, #24]
 8005706:	fbb2 f3f3 	udiv	r3, r2, r3
 800570a:	61fb      	str	r3, [r7, #28]
          break;
 800570c:	e012      	b.n	8005734 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 800570e:	4b4f      	ldr	r3, [pc, #316]	; (800584c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005710:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005714:	f003 0302 	and.w	r3, r3, #2
 8005718:	2b02      	cmp	r3, #2
 800571a:	d10e      	bne.n	800573a <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = HSI48_VALUE;
 800571c:	4b4d      	ldr	r3, [pc, #308]	; (8005854 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800571e:	61fb      	str	r3, [r7, #28]
          break;
 8005720:	e00b      	b.n	800573a <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 8005722:	bf00      	nop
 8005724:	f000 bce2 	b.w	80060ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005728:	bf00      	nop
 800572a:	f000 bcdf 	b.w	80060ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800572e:	bf00      	nop
 8005730:	f000 bcdc 	b.w	80060ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005734:	bf00      	nop
 8005736:	f000 bcd9 	b.w	80060ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800573a:	bf00      	nop
        break;
 800573c:	f000 bcd6 	b.w	80060ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 8005740:	4b42      	ldr	r3, [pc, #264]	; (800584c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005742:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005746:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800574a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800574e:	d13d      	bne.n	80057cc <HAL_RCCEx_GetPeriphCLKFreq+0x510>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8005750:	4b3e      	ldr	r3, [pc, #248]	; (800584c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005758:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800575c:	f040 84c5 	bne.w	80060ea <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 8005760:	4b3a      	ldr	r3, [pc, #232]	; (800584c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005768:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800576c:	f040 84bd 	bne.w	80060ea <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005770:	4b36      	ldr	r3, [pc, #216]	; (800584c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	0a1b      	lsrs	r3, r3, #8
 8005776:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800577a:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800577c:	69bb      	ldr	r3, [r7, #24]
 800577e:	68ba      	ldr	r2, [r7, #8]
 8005780:	fb03 f202 	mul.w	r2, r3, r2
 8005784:	4b31      	ldr	r3, [pc, #196]	; (800584c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	091b      	lsrs	r3, r3, #4
 800578a:	f003 030f 	and.w	r3, r3, #15
 800578e:	3301      	adds	r3, #1
 8005790:	fbb2 f3f3 	udiv	r3, r2, r3
 8005794:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8005796:	4b2d      	ldr	r3, [pc, #180]	; (800584c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005798:	68db      	ldr	r3, [r3, #12]
 800579a:	0edb      	lsrs	r3, r3, #27
 800579c:	f003 031f 	and.w	r3, r3, #31
 80057a0:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d10a      	bne.n	80057be <HAL_RCCEx_GetPeriphCLKFreq+0x502>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80057a8:	4b28      	ldr	r3, [pc, #160]	; (800584c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80057aa:	68db      	ldr	r3, [r3, #12]
 80057ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d002      	beq.n	80057ba <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 17U;
 80057b4:	2311      	movs	r3, #17
 80057b6:	617b      	str	r3, [r7, #20]
 80057b8:	e001      	b.n	80057be <HAL_RCCEx_GetPeriphCLKFreq+0x502>
                pllp = 7U;
 80057ba:	2307      	movs	r3, #7
 80057bc:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 80057be:	69ba      	ldr	r2, [r7, #24]
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80057c6:	61fb      	str	r3, [r7, #28]
      break;
 80057c8:	f000 bc8f 	b.w	80060ea <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80057cc:	4b1f      	ldr	r3, [pc, #124]	; (800584c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80057ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057d2:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80057d6:	60fb      	str	r3, [r7, #12]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80057de:	d016      	beq.n	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x552>
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80057e6:	f200 809b 	bhi.w	8005920 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057f0:	d032      	beq.n	8005858 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057f8:	f200 8092 	bhi.w	8005920 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	f000 8084 	beq.w	800590c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800580a:	d052      	beq.n	80058b2 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          break;
 800580c:	e088      	b.n	8005920 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800580e:	4b0f      	ldr	r3, [pc, #60]	; (800584c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f003 0302 	and.w	r3, r3, #2
 8005816:	2b02      	cmp	r3, #2
 8005818:	f040 8084 	bne.w	8005924 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800581c:	4b0b      	ldr	r3, [pc, #44]	; (800584c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f003 0308 	and.w	r3, r3, #8
 8005824:	2b00      	cmp	r3, #0
 8005826:	d005      	beq.n	8005834 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8005828:	4b08      	ldr	r3, [pc, #32]	; (800584c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	091b      	lsrs	r3, r3, #4
 800582e:	f003 030f 	and.w	r3, r3, #15
 8005832:	e005      	b.n	8005840 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
 8005834:	4b05      	ldr	r3, [pc, #20]	; (800584c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005836:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800583a:	0a1b      	lsrs	r3, r3, #8
 800583c:	f003 030f 	and.w	r3, r3, #15
 8005840:	4a03      	ldr	r2, [pc, #12]	; (8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8005842:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005846:	61fb      	str	r3, [r7, #28]
          break;
 8005848:	e06c      	b.n	8005924 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 800584a:	bf00      	nop
 800584c:	40021000 	.word	0x40021000
 8005850:	08009118 	.word	0x08009118
 8005854:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8005858:	4ba5      	ldr	r3, [pc, #660]	; (8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005860:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005864:	d160      	bne.n	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8005866:	4ba2      	ldr	r3, [pc, #648]	; (8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005868:	68db      	ldr	r3, [r3, #12]
 800586a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800586e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005872:	d159      	bne.n	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005874:	4b9e      	ldr	r3, [pc, #632]	; (8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005876:	68db      	ldr	r3, [r3, #12]
 8005878:	0a1b      	lsrs	r3, r3, #8
 800587a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800587e:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005880:	69bb      	ldr	r3, [r7, #24]
 8005882:	68ba      	ldr	r2, [r7, #8]
 8005884:	fb03 f202 	mul.w	r2, r3, r2
 8005888:	4b99      	ldr	r3, [pc, #612]	; (8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800588a:	68db      	ldr	r3, [r3, #12]
 800588c:	091b      	lsrs	r3, r3, #4
 800588e:	f003 030f 	and.w	r3, r3, #15
 8005892:	3301      	adds	r3, #1
 8005894:	fbb2 f3f3 	udiv	r3, r2, r3
 8005898:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800589a:	4b95      	ldr	r3, [pc, #596]	; (8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800589c:	68db      	ldr	r3, [r3, #12]
 800589e:	0d5b      	lsrs	r3, r3, #21
 80058a0:	f003 0303 	and.w	r3, r3, #3
 80058a4:	3301      	adds	r3, #1
 80058a6:	005b      	lsls	r3, r3, #1
 80058a8:	69ba      	ldr	r2, [r7, #24]
 80058aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80058ae:	61fb      	str	r3, [r7, #28]
          break;
 80058b0:	e03a      	b.n	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 80058b2:	4b8f      	ldr	r3, [pc, #572]	; (8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80058be:	d135      	bne.n	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 80058c0:	4b8b      	ldr	r3, [pc, #556]	; (8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80058c2:	691b      	ldr	r3, [r3, #16]
 80058c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80058c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058cc:	d12e      	bne.n	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x670>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80058ce:	4b88      	ldr	r3, [pc, #544]	; (8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80058d0:	691b      	ldr	r3, [r3, #16]
 80058d2:	0a1b      	lsrs	r3, r3, #8
 80058d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058d8:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80058da:	69bb      	ldr	r3, [r7, #24]
 80058dc:	68ba      	ldr	r2, [r7, #8]
 80058de:	fb03 f202 	mul.w	r2, r3, r2
 80058e2:	4b83      	ldr	r3, [pc, #524]	; (8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80058e4:	691b      	ldr	r3, [r3, #16]
 80058e6:	091b      	lsrs	r3, r3, #4
 80058e8:	f003 030f 	and.w	r3, r3, #15
 80058ec:	3301      	adds	r3, #1
 80058ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80058f2:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 80058f4:	4b7e      	ldr	r3, [pc, #504]	; (8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80058f6:	691b      	ldr	r3, [r3, #16]
 80058f8:	0d5b      	lsrs	r3, r3, #21
 80058fa:	f003 0303 	and.w	r3, r3, #3
 80058fe:	3301      	adds	r3, #1
 8005900:	005b      	lsls	r3, r3, #1
 8005902:	69ba      	ldr	r2, [r7, #24]
 8005904:	fbb2 f3f3 	udiv	r3, r2, r3
 8005908:	61fb      	str	r3, [r7, #28]
          break;
 800590a:	e00f      	b.n	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 800590c:	4b78      	ldr	r3, [pc, #480]	; (8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800590e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005912:	f003 0302 	and.w	r3, r3, #2
 8005916:	2b02      	cmp	r3, #2
 8005918:	d10a      	bne.n	8005930 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            frequency = HSI48_VALUE;
 800591a:	4b76      	ldr	r3, [pc, #472]	; (8005af4 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800591c:	61fb      	str	r3, [r7, #28]
          break;
 800591e:	e007      	b.n	8005930 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          break;
 8005920:	bf00      	nop
 8005922:	e3e2      	b.n	80060ea <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8005924:	bf00      	nop
 8005926:	e3e0      	b.n	80060ea <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8005928:	bf00      	nop
 800592a:	e3de      	b.n	80060ea <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800592c:	bf00      	nop
 800592e:	e3dc      	b.n	80060ea <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8005930:	bf00      	nop
      break;
 8005932:	e3da      	b.n	80060ea <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8005934:	4b6e      	ldr	r3, [pc, #440]	; (8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800593a:	f003 0303 	and.w	r3, r3, #3
 800593e:	60fb      	str	r3, [r7, #12]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2b03      	cmp	r3, #3
 8005944:	d827      	bhi.n	8005996 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8005946:	a201      	add	r2, pc, #4	; (adr r2, 800594c <HAL_RCCEx_GetPeriphCLKFreq+0x690>)
 8005948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800594c:	0800595d 	.word	0x0800595d
 8005950:	08005965 	.word	0x08005965
 8005954:	0800596d 	.word	0x0800596d
 8005958:	08005981 	.word	0x08005981
          frequency = HAL_RCC_GetPCLK2Freq();
 800595c:	f7ff f8a8 	bl	8004ab0 <HAL_RCC_GetPCLK2Freq>
 8005960:	61f8      	str	r0, [r7, #28]
          break;
 8005962:	e01d      	b.n	80059a0 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          frequency = HAL_RCC_GetSysClockFreq();
 8005964:	f7fe fff6 	bl	8004954 <HAL_RCC_GetSysClockFreq>
 8005968:	61f8      	str	r0, [r7, #28]
          break;
 800596a:	e019      	b.n	80059a0 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800596c:	4b60      	ldr	r3, [pc, #384]	; (8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005974:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005978:	d10f      	bne.n	800599a <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = HSI_VALUE;
 800597a:	4b5f      	ldr	r3, [pc, #380]	; (8005af8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800597c:	61fb      	str	r3, [r7, #28]
          break;
 800597e:	e00c      	b.n	800599a <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005980:	4b5b      	ldr	r3, [pc, #364]	; (8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005982:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005986:	f003 0302 	and.w	r3, r3, #2
 800598a:	2b02      	cmp	r3, #2
 800598c:	d107      	bne.n	800599e <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
            frequency = LSE_VALUE;
 800598e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005992:	61fb      	str	r3, [r7, #28]
          break;
 8005994:	e003      	b.n	800599e <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
          break;
 8005996:	bf00      	nop
 8005998:	e3a8      	b.n	80060ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800599a:	bf00      	nop
 800599c:	e3a6      	b.n	80060ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800599e:	bf00      	nop
        break;
 80059a0:	e3a4      	b.n	80060ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80059a2:	4b53      	ldr	r3, [pc, #332]	; (8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80059a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059a8:	f003 030c 	and.w	r3, r3, #12
 80059ac:	60fb      	str	r3, [r7, #12]
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2b0c      	cmp	r3, #12
 80059b2:	d83a      	bhi.n	8005a2a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 80059b4:	a201      	add	r2, pc, #4	; (adr r2, 80059bc <HAL_RCCEx_GetPeriphCLKFreq+0x700>)
 80059b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059ba:	bf00      	nop
 80059bc:	080059f1 	.word	0x080059f1
 80059c0:	08005a2b 	.word	0x08005a2b
 80059c4:	08005a2b 	.word	0x08005a2b
 80059c8:	08005a2b 	.word	0x08005a2b
 80059cc:	080059f9 	.word	0x080059f9
 80059d0:	08005a2b 	.word	0x08005a2b
 80059d4:	08005a2b 	.word	0x08005a2b
 80059d8:	08005a2b 	.word	0x08005a2b
 80059dc:	08005a01 	.word	0x08005a01
 80059e0:	08005a2b 	.word	0x08005a2b
 80059e4:	08005a2b 	.word	0x08005a2b
 80059e8:	08005a2b 	.word	0x08005a2b
 80059ec:	08005a15 	.word	0x08005a15
          frequency = HAL_RCC_GetPCLK1Freq();
 80059f0:	f7ff f848 	bl	8004a84 <HAL_RCC_GetPCLK1Freq>
 80059f4:	61f8      	str	r0, [r7, #28]
          break;
 80059f6:	e01d      	b.n	8005a34 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = HAL_RCC_GetSysClockFreq();
 80059f8:	f7fe ffac 	bl	8004954 <HAL_RCC_GetSysClockFreq>
 80059fc:	61f8      	str	r0, [r7, #28]
          break;
 80059fe:	e019      	b.n	8005a34 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005a00:	4b3b      	ldr	r3, [pc, #236]	; (8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a0c:	d10f      	bne.n	8005a2e <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = HSI_VALUE;
 8005a0e:	4b3a      	ldr	r3, [pc, #232]	; (8005af8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005a10:	61fb      	str	r3, [r7, #28]
          break;
 8005a12:	e00c      	b.n	8005a2e <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005a14:	4b36      	ldr	r3, [pc, #216]	; (8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a1a:	f003 0302 	and.w	r3, r3, #2
 8005a1e:	2b02      	cmp	r3, #2
 8005a20:	d107      	bne.n	8005a32 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
            frequency = LSE_VALUE;
 8005a22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a26:	61fb      	str	r3, [r7, #28]
          break;
 8005a28:	e003      	b.n	8005a32 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
          break;
 8005a2a:	bf00      	nop
 8005a2c:	e35e      	b.n	80060ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005a2e:	bf00      	nop
 8005a30:	e35c      	b.n	80060ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005a32:	bf00      	nop
        break;
 8005a34:	e35a      	b.n	80060ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8005a36:	4b2e      	ldr	r3, [pc, #184]	; (8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a3c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005a40:	60fb      	str	r3, [r7, #12]
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2b30      	cmp	r3, #48	; 0x30
 8005a46:	d021      	beq.n	8005a8c <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2b30      	cmp	r3, #48	; 0x30
 8005a4c:	d829      	bhi.n	8005aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2b20      	cmp	r3, #32
 8005a52:	d011      	beq.n	8005a78 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2b20      	cmp	r3, #32
 8005a58:	d823      	bhi.n	8005aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d003      	beq.n	8005a68 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2b10      	cmp	r3, #16
 8005a64:	d004      	beq.n	8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
          break;
 8005a66:	e01c      	b.n	8005aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005a68:	f7ff f80c 	bl	8004a84 <HAL_RCC_GetPCLK1Freq>
 8005a6c:	61f8      	str	r0, [r7, #28]
          break;
 8005a6e:	e01d      	b.n	8005aac <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          frequency = HAL_RCC_GetSysClockFreq();
 8005a70:	f7fe ff70 	bl	8004954 <HAL_RCC_GetSysClockFreq>
 8005a74:	61f8      	str	r0, [r7, #28]
          break;
 8005a76:	e019      	b.n	8005aac <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005a78:	4b1d      	ldr	r3, [pc, #116]	; (8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a84:	d10f      	bne.n	8005aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = HSI_VALUE;
 8005a86:	4b1c      	ldr	r3, [pc, #112]	; (8005af8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005a88:	61fb      	str	r3, [r7, #28]
          break;
 8005a8a:	e00c      	b.n	8005aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005a8c:	4b18      	ldr	r3, [pc, #96]	; (8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a92:	f003 0302 	and.w	r3, r3, #2
 8005a96:	2b02      	cmp	r3, #2
 8005a98:	d107      	bne.n	8005aaa <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
            frequency = LSE_VALUE;
 8005a9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a9e:	61fb      	str	r3, [r7, #28]
          break;
 8005aa0:	e003      	b.n	8005aaa <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
          break;
 8005aa2:	bf00      	nop
 8005aa4:	e322      	b.n	80060ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005aa6:	bf00      	nop
 8005aa8:	e320      	b.n	80060ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005aaa:	bf00      	nop
        break;
 8005aac:	e31e      	b.n	80060ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8005aae:	4b10      	ldr	r3, [pc, #64]	; (8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ab4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005ab8:	60fb      	str	r3, [r7, #12]
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2bc0      	cmp	r3, #192	; 0xc0
 8005abe:	d027      	beq.n	8005b10 <HAL_RCCEx_GetPeriphCLKFreq+0x854>
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2bc0      	cmp	r3, #192	; 0xc0
 8005ac4:	d82f      	bhi.n	8005b26 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2b80      	cmp	r3, #128	; 0x80
 8005aca:	d017      	beq.n	8005afc <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2b80      	cmp	r3, #128	; 0x80
 8005ad0:	d829      	bhi.n	8005b26 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d003      	beq.n	8005ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x824>
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2b40      	cmp	r3, #64	; 0x40
 8005adc:	d004      	beq.n	8005ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
          break;
 8005ade:	e022      	b.n	8005b26 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005ae0:	f7fe ffd0 	bl	8004a84 <HAL_RCC_GetPCLK1Freq>
 8005ae4:	61f8      	str	r0, [r7, #28]
          break;
 8005ae6:	e023      	b.n	8005b30 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
          frequency = HAL_RCC_GetSysClockFreq();
 8005ae8:	f7fe ff34 	bl	8004954 <HAL_RCC_GetSysClockFreq>
 8005aec:	61f8      	str	r0, [r7, #28]
          break;
 8005aee:	e01f      	b.n	8005b30 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
 8005af0:	40021000 	.word	0x40021000
 8005af4:	02dc6c00 	.word	0x02dc6c00
 8005af8:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005afc:	4b9b      	ldr	r3, [pc, #620]	; (8005d6c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b08:	d10f      	bne.n	8005b2a <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = HSI_VALUE;
 8005b0a:	4b99      	ldr	r3, [pc, #612]	; (8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8005b0c:	61fb      	str	r3, [r7, #28]
          break;
 8005b0e:	e00c      	b.n	8005b2a <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005b10:	4b96      	ldr	r3, [pc, #600]	; (8005d6c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b16:	f003 0302 	and.w	r3, r3, #2
 8005b1a:	2b02      	cmp	r3, #2
 8005b1c:	d107      	bne.n	8005b2e <HAL_RCCEx_GetPeriphCLKFreq+0x872>
            frequency = LSE_VALUE;
 8005b1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b22:	61fb      	str	r3, [r7, #28]
          break;
 8005b24:	e003      	b.n	8005b2e <HAL_RCCEx_GetPeriphCLKFreq+0x872>
          break;
 8005b26:	bf00      	nop
 8005b28:	e2e0      	b.n	80060ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005b2a:	bf00      	nop
 8005b2c:	e2de      	b.n	80060ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005b2e:	bf00      	nop
        break;
 8005b30:	e2dc      	b.n	80060ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8005b32:	4b8e      	ldr	r3, [pc, #568]	; (8005d6c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b3c:	60fb      	str	r3, [r7, #12]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b44:	d025      	beq.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b4c:	d82c      	bhi.n	8005ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b54:	d013      	beq.n	8005b7e <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b5c:	d824      	bhi.n	8005ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d004      	beq.n	8005b6e <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b6a:	d004      	beq.n	8005b76 <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 8005b6c:	e01c      	b.n	8005ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005b6e:	f7fe ff89 	bl	8004a84 <HAL_RCC_GetPCLK1Freq>
 8005b72:	61f8      	str	r0, [r7, #28]
          break;
 8005b74:	e01d      	b.n	8005bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = HAL_RCC_GetSysClockFreq();
 8005b76:	f7fe feed 	bl	8004954 <HAL_RCC_GetSysClockFreq>
 8005b7a:	61f8      	str	r0, [r7, #28]
          break;
 8005b7c:	e019      	b.n	8005bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005b7e:	4b7b      	ldr	r3, [pc, #492]	; (8005d6c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b8a:	d10f      	bne.n	8005bac <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = HSI_VALUE;
 8005b8c:	4b78      	ldr	r3, [pc, #480]	; (8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8005b8e:	61fb      	str	r3, [r7, #28]
          break;
 8005b90:	e00c      	b.n	8005bac <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005b92:	4b76      	ldr	r3, [pc, #472]	; (8005d6c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005b94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b98:	f003 0302 	and.w	r3, r3, #2
 8005b9c:	2b02      	cmp	r3, #2
 8005b9e:	d107      	bne.n	8005bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
            frequency = LSE_VALUE;
 8005ba0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ba4:	61fb      	str	r3, [r7, #28]
          break;
 8005ba6:	e003      	b.n	8005bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
          break;
 8005ba8:	bf00      	nop
 8005baa:	e29f      	b.n	80060ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005bac:	bf00      	nop
 8005bae:	e29d      	b.n	80060ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005bb0:	bf00      	nop
        break;
 8005bb2:	e29b      	b.n	80060ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8005bb4:	4b6d      	ldr	r3, [pc, #436]	; (8005d6c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bba:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005bbe:	60fb      	str	r3, [r7, #12]
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005bc6:	d025      	beq.n	8005c14 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005bce:	d82c      	bhi.n	8005c2a <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bd6:	d013      	beq.n	8005c00 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bde:	d824      	bhi.n	8005c2a <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d004      	beq.n	8005bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bec:	d004      	beq.n	8005bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
          break;
 8005bee:	e01c      	b.n	8005c2a <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005bf0:	f7fe ff48 	bl	8004a84 <HAL_RCC_GetPCLK1Freq>
 8005bf4:	61f8      	str	r0, [r7, #28]
          break;
 8005bf6:	e01d      	b.n	8005c34 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = HAL_RCC_GetSysClockFreq();
 8005bf8:	f7fe feac 	bl	8004954 <HAL_RCC_GetSysClockFreq>
 8005bfc:	61f8      	str	r0, [r7, #28]
          break;
 8005bfe:	e019      	b.n	8005c34 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005c00:	4b5a      	ldr	r3, [pc, #360]	; (8005d6c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c0c:	d10f      	bne.n	8005c2e <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = HSI_VALUE;
 8005c0e:	4b58      	ldr	r3, [pc, #352]	; (8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8005c10:	61fb      	str	r3, [r7, #28]
          break;
 8005c12:	e00c      	b.n	8005c2e <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005c14:	4b55      	ldr	r3, [pc, #340]	; (8005d6c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c1a:	f003 0302 	and.w	r3, r3, #2
 8005c1e:	2b02      	cmp	r3, #2
 8005c20:	d107      	bne.n	8005c32 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
            frequency = LSE_VALUE;
 8005c22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c26:	61fb      	str	r3, [r7, #28]
          break;
 8005c28:	e003      	b.n	8005c32 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
          break;
 8005c2a:	bf00      	nop
 8005c2c:	e25e      	b.n	80060ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005c2e:	bf00      	nop
 8005c30:	e25c      	b.n	80060ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005c32:	bf00      	nop
        break;
 8005c34:	e25a      	b.n	80060ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005c36:	4b4d      	ldr	r3, [pc, #308]	; (8005d6c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c3c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005c40:	60fb      	str	r3, [r7, #12]
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c48:	d007      	beq.n	8005c5a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005c50:	d12f      	bne.n	8005cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          frequency = HAL_RCC_GetSysClockFreq();
 8005c52:	f7fe fe7f 	bl	8004954 <HAL_RCC_GetSysClockFreq>
 8005c56:	61f8      	str	r0, [r7, #28]
          break;
 8005c58:	e02e      	b.n	8005cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8005c5a:	4b44      	ldr	r3, [pc, #272]	; (8005d6c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c62:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c66:	d126      	bne.n	8005cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 8005c68:	4b40      	ldr	r3, [pc, #256]	; (8005d6c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005c6a:	691b      	ldr	r3, [r3, #16]
 8005c6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d020      	beq.n	8005cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005c74:	4b3d      	ldr	r3, [pc, #244]	; (8005d6c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005c76:	691b      	ldr	r3, [r3, #16]
 8005c78:	0a1b      	lsrs	r3, r3, #8
 8005c7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c7e:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8005c80:	69bb      	ldr	r3, [r7, #24]
 8005c82:	68ba      	ldr	r2, [r7, #8]
 8005c84:	fb03 f202 	mul.w	r2, r3, r2
 8005c88:	4b38      	ldr	r3, [pc, #224]	; (8005d6c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005c8a:	691b      	ldr	r3, [r3, #16]
 8005c8c:	091b      	lsrs	r3, r3, #4
 8005c8e:	f003 030f 	and.w	r3, r3, #15
 8005c92:	3301      	adds	r3, #1
 8005c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c98:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8005c9a:	4b34      	ldr	r3, [pc, #208]	; (8005d6c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005c9c:	691b      	ldr	r3, [r3, #16]
 8005c9e:	0e5b      	lsrs	r3, r3, #25
 8005ca0:	f003 0303 	and.w	r3, r3, #3
 8005ca4:	3301      	adds	r3, #1
 8005ca6:	005b      	lsls	r3, r3, #1
 8005ca8:	69ba      	ldr	r2, [r7, #24]
 8005caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cae:	61fb      	str	r3, [r7, #28]
          break;
 8005cb0:	e001      	b.n	8005cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
          break;
 8005cb2:	bf00      	nop
 8005cb4:	e21a      	b.n	80060ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005cb6:	bf00      	nop
        break;
 8005cb8:	e218      	b.n	80060ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8005cba:	4b2c      	ldr	r3, [pc, #176]	; (8005d6c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005cbc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005cc0:	f003 0304 	and.w	r3, r3, #4
 8005cc4:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d103      	bne.n	8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetPCLK2Freq();
 8005ccc:	f7fe fef0 	bl	8004ab0 <HAL_RCC_GetPCLK2Freq>
 8005cd0:	61f8      	str	r0, [r7, #28]
        break;
 8005cd2:	e20b      	b.n	80060ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          frequency = HAL_RCC_GetSysClockFreq();
 8005cd4:	f7fe fe3e 	bl	8004954 <HAL_RCC_GetSysClockFreq>
 8005cd8:	61f8      	str	r0, [r7, #28]
        break;
 8005cda:	e207      	b.n	80060ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 8005cdc:	4b23      	ldr	r3, [pc, #140]	; (8005d6c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005cde:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005ce2:	f003 0318 	and.w	r3, r3, #24
 8005ce6:	60fb      	str	r3, [r7, #12]
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2b10      	cmp	r3, #16
 8005cec:	d010      	beq.n	8005d10 <HAL_RCCEx_GetPeriphCLKFreq+0xa54>
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2b10      	cmp	r3, #16
 8005cf2:	d834      	bhi.n	8005d5e <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d003      	beq.n	8005d02 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2b08      	cmp	r3, #8
 8005cfe:	d024      	beq.n	8005d4a <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
          break;
 8005d00:	e02d      	b.n	8005d5e <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8005d02:	69b9      	ldr	r1, [r7, #24]
 8005d04:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005d08:	f000 fbf2 	bl	80064f0 <RCCEx_GetSAIxPeriphCLKFreq>
 8005d0c:	61f8      	str	r0, [r7, #28]
          break;
 8005d0e:	e02b      	b.n	8005d68 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005d10:	4b16      	ldr	r3, [pc, #88]	; (8005d6c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f003 0302 	and.w	r3, r3, #2
 8005d18:	2b02      	cmp	r3, #2
 8005d1a:	d122      	bne.n	8005d62 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005d1c:	4b13      	ldr	r3, [pc, #76]	; (8005d6c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f003 0308 	and.w	r3, r3, #8
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d005      	beq.n	8005d34 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 8005d28:	4b10      	ldr	r3, [pc, #64]	; (8005d6c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	091b      	lsrs	r3, r3, #4
 8005d2e:	f003 030f 	and.w	r3, r3, #15
 8005d32:	e005      	b.n	8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
 8005d34:	4b0d      	ldr	r3, [pc, #52]	; (8005d6c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005d36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d3a:	0a1b      	lsrs	r3, r3, #8
 8005d3c:	f003 030f 	and.w	r3, r3, #15
 8005d40:	4a0c      	ldr	r2, [pc, #48]	; (8005d74 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8005d42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d46:	61fb      	str	r3, [r7, #28]
          break;
 8005d48:	e00b      	b.n	8005d62 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005d4a:	4b08      	ldr	r3, [pc, #32]	; (8005d6c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d56:	d106      	bne.n	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
            frequency = HSI_VALUE;
 8005d58:	4b05      	ldr	r3, [pc, #20]	; (8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8005d5a:	61fb      	str	r3, [r7, #28]
          break;
 8005d5c:	e003      	b.n	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
          break;
 8005d5e:	bf00      	nop
 8005d60:	e1c4      	b.n	80060ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005d62:	bf00      	nop
 8005d64:	e1c2      	b.n	80060ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005d66:	bf00      	nop
        break;
 8005d68:	e1c0      	b.n	80060ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 8005d6a:	bf00      	nop
 8005d6c:	40021000 	.word	0x40021000
 8005d70:	00f42400 	.word	0x00f42400
 8005d74:	08009118 	.word	0x08009118
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8005d78:	4b96      	ldr	r3, [pc, #600]	; (8005fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d7e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005d82:	60fb      	str	r3, [r7, #12]
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d8a:	d013      	beq.n	8005db4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d92:	d819      	bhi.n	8005dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d004      	beq.n	8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005da0:	d004      	beq.n	8005dac <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>
          break;
 8005da2:	e011      	b.n	8005dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005da4:	f7fe fe6e 	bl	8004a84 <HAL_RCC_GetPCLK1Freq>
 8005da8:	61f8      	str	r0, [r7, #28]
          break;
 8005daa:	e010      	b.n	8005dce <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          frequency = HAL_RCC_GetSysClockFreq();
 8005dac:	f7fe fdd2 	bl	8004954 <HAL_RCC_GetSysClockFreq>
 8005db0:	61f8      	str	r0, [r7, #28]
          break;
 8005db2:	e00c      	b.n	8005dce <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005db4:	4b87      	ldr	r3, [pc, #540]	; (8005fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dc0:	d104      	bne.n	8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
            frequency = HSI_VALUE;
 8005dc2:	4b85      	ldr	r3, [pc, #532]	; (8005fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8005dc4:	61fb      	str	r3, [r7, #28]
          break;
 8005dc6:	e001      	b.n	8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
          break;
 8005dc8:	bf00      	nop
 8005dca:	e18f      	b.n	80060ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005dcc:	bf00      	nop
        break;
 8005dce:	e18d      	b.n	80060ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8005dd0:	4b80      	ldr	r3, [pc, #512]	; (8005fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dd6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005dda:	60fb      	str	r3, [r7, #12]
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005de2:	d013      	beq.n	8005e0c <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dea:	d819      	bhi.n	8005e20 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d004      	beq.n	8005dfc <HAL_RCCEx_GetPeriphCLKFreq+0xb40>
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005df8:	d004      	beq.n	8005e04 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          break;
 8005dfa:	e011      	b.n	8005e20 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005dfc:	f7fe fe42 	bl	8004a84 <HAL_RCC_GetPCLK1Freq>
 8005e00:	61f8      	str	r0, [r7, #28]
          break;
 8005e02:	e010      	b.n	8005e26 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = HAL_RCC_GetSysClockFreq();
 8005e04:	f7fe fda6 	bl	8004954 <HAL_RCC_GetSysClockFreq>
 8005e08:	61f8      	str	r0, [r7, #28]
          break;
 8005e0a:	e00c      	b.n	8005e26 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005e0c:	4b71      	ldr	r3, [pc, #452]	; (8005fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e18:	d104      	bne.n	8005e24 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
            frequency = HSI_VALUE;
 8005e1a:	4b6f      	ldr	r3, [pc, #444]	; (8005fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8005e1c:	61fb      	str	r3, [r7, #28]
          break;
 8005e1e:	e001      	b.n	8005e24 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          break;
 8005e20:	bf00      	nop
 8005e22:	e163      	b.n	80060ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005e24:	bf00      	nop
        break;
 8005e26:	e161      	b.n	80060ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8005e28:	4b6a      	ldr	r3, [pc, #424]	; (8005fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e2e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005e32:	60fb      	str	r3, [r7, #12]
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e3a:	d013      	beq.n	8005e64 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e42:	d819      	bhi.n	8005e78 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d004      	beq.n	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0xb98>
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e50:	d004      	beq.n	8005e5c <HAL_RCCEx_GetPeriphCLKFreq+0xba0>
          break;
 8005e52:	e011      	b.n	8005e78 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005e54:	f7fe fe16 	bl	8004a84 <HAL_RCC_GetPCLK1Freq>
 8005e58:	61f8      	str	r0, [r7, #28]
          break;
 8005e5a:	e010      	b.n	8005e7e <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          frequency = HAL_RCC_GetSysClockFreq();
 8005e5c:	f7fe fd7a 	bl	8004954 <HAL_RCC_GetSysClockFreq>
 8005e60:	61f8      	str	r0, [r7, #28]
          break;
 8005e62:	e00c      	b.n	8005e7e <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005e64:	4b5b      	ldr	r3, [pc, #364]	; (8005fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e70:	d104      	bne.n	8005e7c <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
            frequency = HSI_VALUE;
 8005e72:	4b59      	ldr	r3, [pc, #356]	; (8005fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8005e74:	61fb      	str	r3, [r7, #28]
          break;
 8005e76:	e001      	b.n	8005e7c <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
          break;
 8005e78:	bf00      	nop
 8005e7a:	e137      	b.n	80060ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005e7c:	bf00      	nop
        break;
 8005e7e:	e135      	b.n	80060ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8005e80:	4b54      	ldr	r3, [pc, #336]	; (8005fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005e82:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e86:	f003 0303 	and.w	r3, r3, #3
 8005e8a:	60fb      	str	r3, [r7, #12]
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2b02      	cmp	r3, #2
 8005e90:	d011      	beq.n	8005eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2b02      	cmp	r3, #2
 8005e96:	d818      	bhi.n	8005eca <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d003      	beq.n	8005ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d004      	beq.n	8005eae <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
          break;
 8005ea4:	e011      	b.n	8005eca <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005ea6:	f7fe fded 	bl	8004a84 <HAL_RCC_GetPCLK1Freq>
 8005eaa:	61f8      	str	r0, [r7, #28]
          break;
 8005eac:	e010      	b.n	8005ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          frequency = HAL_RCC_GetSysClockFreq();
 8005eae:	f7fe fd51 	bl	8004954 <HAL_RCC_GetSysClockFreq>
 8005eb2:	61f8      	str	r0, [r7, #28]
          break;
 8005eb4:	e00c      	b.n	8005ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005eb6:	4b47      	ldr	r3, [pc, #284]	; (8005fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ebe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ec2:	d104      	bne.n	8005ece <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
            frequency = HSI_VALUE;
 8005ec4:	4b44      	ldr	r3, [pc, #272]	; (8005fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8005ec6:	61fb      	str	r3, [r7, #28]
          break;
 8005ec8:	e001      	b.n	8005ece <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
          break;
 8005eca:	bf00      	nop
 8005ecc:	e10e      	b.n	80060ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005ece:	bf00      	nop
        break;
 8005ed0:	e10c      	b.n	80060ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005ed2:	4b40      	ldr	r3, [pc, #256]	; (8005fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ed8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005edc:	60fb      	str	r3, [r7, #12]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005ee4:	d02c      	beq.n	8005f40 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005eec:	d833      	bhi.n	8005f56 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005ef4:	d01a      	beq.n	8005f2c <HAL_RCCEx_GetPeriphCLKFreq+0xc70>
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005efc:	d82b      	bhi.n	8005f56 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d004      	beq.n	8005f0e <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005f0a:	d004      	beq.n	8005f16 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
          break;
 8005f0c:	e023      	b.n	8005f56 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005f0e:	f7fe fdb9 	bl	8004a84 <HAL_RCC_GetPCLK1Freq>
 8005f12:	61f8      	str	r0, [r7, #28]
          break;
 8005f14:	e026      	b.n	8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0xca8>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005f16:	4b2f      	ldr	r3, [pc, #188]	; (8005fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005f18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f1c:	f003 0302 	and.w	r3, r3, #2
 8005f20:	2b02      	cmp	r3, #2
 8005f22:	d11a      	bne.n	8005f5a <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
              frequency = LSI_VALUE;
 8005f24:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005f28:	61fb      	str	r3, [r7, #28]
          break;
 8005f2a:	e016      	b.n	8005f5a <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005f2c:	4b29      	ldr	r3, [pc, #164]	; (8005fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f38:	d111      	bne.n	8005f5e <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = HSI_VALUE;
 8005f3a:	4b27      	ldr	r3, [pc, #156]	; (8005fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8005f3c:	61fb      	str	r3, [r7, #28]
          break;
 8005f3e:	e00e      	b.n	8005f5e <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005f40:	4b24      	ldr	r3, [pc, #144]	; (8005fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f46:	f003 0302 	and.w	r3, r3, #2
 8005f4a:	2b02      	cmp	r3, #2
 8005f4c:	d109      	bne.n	8005f62 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
            frequency = LSE_VALUE;
 8005f4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f52:	61fb      	str	r3, [r7, #28]
          break;
 8005f54:	e005      	b.n	8005f62 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
          break;
 8005f56:	bf00      	nop
 8005f58:	e0c8      	b.n	80060ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005f5a:	bf00      	nop
 8005f5c:	e0c6      	b.n	80060ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005f5e:	bf00      	nop
 8005f60:	e0c4      	b.n	80060ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005f62:	bf00      	nop
        break;
 8005f64:	e0c2      	b.n	80060ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8005f66:	4b1b      	ldr	r3, [pc, #108]	; (8005fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f6c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005f70:	60fb      	str	r3, [r7, #12]
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005f78:	d030      	beq.n	8005fdc <HAL_RCCEx_GetPeriphCLKFreq+0xd20>
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005f80:	d837      	bhi.n	8005ff2 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f88:	d01a      	beq.n	8005fc0 <HAL_RCCEx_GetPeriphCLKFreq+0xd04>
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f90:	d82f      	bhi.n	8005ff2 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d004      	beq.n	8005fa2 <HAL_RCCEx_GetPeriphCLKFreq+0xce6>
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f9e:	d004      	beq.n	8005faa <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
          break;
 8005fa0:	e027      	b.n	8005ff2 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005fa2:	f7fe fd6f 	bl	8004a84 <HAL_RCC_GetPCLK1Freq>
 8005fa6:	61f8      	str	r0, [r7, #28]
          break;
 8005fa8:	e02a      	b.n	8006000 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005faa:	4b0a      	ldr	r3, [pc, #40]	; (8005fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005fac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005fb0:	f003 0302 	and.w	r3, r3, #2
 8005fb4:	2b02      	cmp	r3, #2
 8005fb6:	d11e      	bne.n	8005ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
              frequency = LSI_VALUE;
 8005fb8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005fbc:	61fb      	str	r3, [r7, #28]
          break;
 8005fbe:	e01a      	b.n	8005ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005fc0:	4b04      	ldr	r3, [pc, #16]	; (8005fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fcc:	d115      	bne.n	8005ffa <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = HSI_VALUE;
 8005fce:	4b02      	ldr	r3, [pc, #8]	; (8005fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8005fd0:	61fb      	str	r3, [r7, #28]
          break;
 8005fd2:	e012      	b.n	8005ffa <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 8005fd4:	40021000 	.word	0x40021000
 8005fd8:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005fdc:	4b46      	ldr	r3, [pc, #280]	; (80060f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fe2:	f003 0302 	and.w	r3, r3, #2
 8005fe6:	2b02      	cmp	r3, #2
 8005fe8:	d109      	bne.n	8005ffe <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
            frequency = LSE_VALUE;
 8005fea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fee:	61fb      	str	r3, [r7, #28]
          break;
 8005ff0:	e005      	b.n	8005ffe <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
          break;
 8005ff2:	bf00      	nop
 8005ff4:	e07a      	b.n	80060ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005ff6:	bf00      	nop
 8005ff8:	e078      	b.n	80060ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005ffa:	bf00      	nop
 8005ffc:	e076      	b.n	80060ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005ffe:	bf00      	nop
        break;
 8006000:	e074      	b.n	80060ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8006002:	4b3d      	ldr	r3, [pc, #244]	; (80060f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006004:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006008:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800600c:	60fb      	str	r3, [r7, #12]
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006014:	d02c      	beq.n	8006070 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800601c:	d855      	bhi.n	80060ca <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d004      	beq.n	800602e <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800602a:	d004      	beq.n	8006036 <HAL_RCCEx_GetPeriphCLKFreq+0xd7a>
          break;
 800602c:	e04d      	b.n	80060ca <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          frequency = HAL_RCC_GetSysClockFreq();
 800602e:	f7fe fc91 	bl	8004954 <HAL_RCC_GetSysClockFreq>
 8006032:	61f8      	str	r0, [r7, #28]
          break;
 8006034:	e04e      	b.n	80060d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe18>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006036:	4b30      	ldr	r3, [pc, #192]	; (80060f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f003 0302 	and.w	r3, r3, #2
 800603e:	2b02      	cmp	r3, #2
 8006040:	d145      	bne.n	80060ce <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006042:	4b2d      	ldr	r3, [pc, #180]	; (80060f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f003 0308 	and.w	r3, r3, #8
 800604a:	2b00      	cmp	r3, #0
 800604c:	d005      	beq.n	800605a <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 800604e:	4b2a      	ldr	r3, [pc, #168]	; (80060f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	091b      	lsrs	r3, r3, #4
 8006054:	f003 030f 	and.w	r3, r3, #15
 8006058:	e005      	b.n	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0xdaa>
 800605a:	4b27      	ldr	r3, [pc, #156]	; (80060f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800605c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006060:	0a1b      	lsrs	r3, r3, #8
 8006062:	f003 030f 	and.w	r3, r3, #15
 8006066:	4a25      	ldr	r2, [pc, #148]	; (80060fc <HAL_RCCEx_GetPeriphCLKFreq+0xe40>)
 8006068:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800606c:	61fb      	str	r3, [r7, #28]
          break;
 800606e:	e02e      	b.n	80060ce <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8006070:	4b21      	ldr	r3, [pc, #132]	; (80060f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006078:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800607c:	d129      	bne.n	80060d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800607e:	4b1e      	ldr	r3, [pc, #120]	; (80060f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006080:	68db      	ldr	r3, [r3, #12]
 8006082:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006086:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800608a:	d122      	bne.n	80060d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800608c:	4b1a      	ldr	r3, [pc, #104]	; (80060f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800608e:	68db      	ldr	r3, [r3, #12]
 8006090:	0a1b      	lsrs	r3, r3, #8
 8006092:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006096:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006098:	69bb      	ldr	r3, [r7, #24]
 800609a:	68ba      	ldr	r2, [r7, #8]
 800609c:	fb03 f202 	mul.w	r2, r3, r2
 80060a0:	4b15      	ldr	r3, [pc, #84]	; (80060f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80060a2:	68db      	ldr	r3, [r3, #12]
 80060a4:	091b      	lsrs	r3, r3, #4
 80060a6:	f003 030f 	and.w	r3, r3, #15
 80060aa:	3301      	adds	r3, #1
 80060ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80060b0:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80060b2:	4b11      	ldr	r3, [pc, #68]	; (80060f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80060b4:	68db      	ldr	r3, [r3, #12]
 80060b6:	0d5b      	lsrs	r3, r3, #21
 80060b8:	f003 0303 	and.w	r3, r3, #3
 80060bc:	3301      	adds	r3, #1
 80060be:	005b      	lsls	r3, r3, #1
 80060c0:	69ba      	ldr	r2, [r7, #24]
 80060c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80060c6:	61fb      	str	r3, [r7, #28]
          break;
 80060c8:	e003      	b.n	80060d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          break;
 80060ca:	bf00      	nop
 80060cc:	e00e      	b.n	80060ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80060ce:	bf00      	nop
 80060d0:	e00c      	b.n	80060ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80060d2:	bf00      	nop
        break;
 80060d4:	e00a      	b.n	80060ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80060d6:	bf00      	nop
 80060d8:	e008      	b.n	80060ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80060da:	bf00      	nop
 80060dc:	e006      	b.n	80060ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80060de:	bf00      	nop
 80060e0:	e004      	b.n	80060ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80060e2:	bf00      	nop
 80060e4:	e002      	b.n	80060ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80060e6:	bf00      	nop
 80060e8:	e000      	b.n	80060ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80060ea:	bf00      	nop
    }
  }

  return(frequency);
 80060ec:	69fb      	ldr	r3, [r7, #28]
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3720      	adds	r7, #32
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}
 80060f6:	bf00      	nop
 80060f8:	40021000 	.word	0x40021000
 80060fc:	08009118 	.word	0x08009118

08006100 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8006100:	b480      	push	{r7}
 8006102:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8006104:	4b05      	ldr	r3, [pc, #20]	; (800611c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a04      	ldr	r2, [pc, #16]	; (800611c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800610a:	f043 0304 	orr.w	r3, r3, #4
 800610e:	6013      	str	r3, [r2, #0]
}
 8006110:	bf00      	nop
 8006112:	46bd      	mov	sp, r7
 8006114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006118:	4770      	bx	lr
 800611a:	bf00      	nop
 800611c:	40021000 	.word	0x40021000

08006120 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b084      	sub	sp, #16
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
 8006128:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800612a:	2300      	movs	r3, #0
 800612c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800612e:	4b72      	ldr	r3, [pc, #456]	; (80062f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006130:	68db      	ldr	r3, [r3, #12]
 8006132:	f003 0303 	and.w	r3, r3, #3
 8006136:	2b00      	cmp	r3, #0
 8006138:	d00e      	beq.n	8006158 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800613a:	4b6f      	ldr	r3, [pc, #444]	; (80062f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800613c:	68db      	ldr	r3, [r3, #12]
 800613e:	f003 0203 	and.w	r2, r3, #3
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	429a      	cmp	r2, r3
 8006148:	d103      	bne.n	8006152 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
       ||
 800614e:	2b00      	cmp	r3, #0
 8006150:	d142      	bne.n	80061d8 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	73fb      	strb	r3, [r7, #15]
 8006156:	e03f      	b.n	80061d8 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	2b03      	cmp	r3, #3
 800615e:	d018      	beq.n	8006192 <RCCEx_PLLSAI1_Config+0x72>
 8006160:	2b03      	cmp	r3, #3
 8006162:	d825      	bhi.n	80061b0 <RCCEx_PLLSAI1_Config+0x90>
 8006164:	2b01      	cmp	r3, #1
 8006166:	d002      	beq.n	800616e <RCCEx_PLLSAI1_Config+0x4e>
 8006168:	2b02      	cmp	r3, #2
 800616a:	d009      	beq.n	8006180 <RCCEx_PLLSAI1_Config+0x60>
 800616c:	e020      	b.n	80061b0 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800616e:	4b62      	ldr	r3, [pc, #392]	; (80062f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f003 0302 	and.w	r3, r3, #2
 8006176:	2b00      	cmp	r3, #0
 8006178:	d11d      	bne.n	80061b6 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800617a:	2301      	movs	r3, #1
 800617c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800617e:	e01a      	b.n	80061b6 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006180:	4b5d      	ldr	r3, [pc, #372]	; (80062f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006188:	2b00      	cmp	r3, #0
 800618a:	d116      	bne.n	80061ba <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800618c:	2301      	movs	r3, #1
 800618e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006190:	e013      	b.n	80061ba <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006192:	4b59      	ldr	r3, [pc, #356]	; (80062f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800619a:	2b00      	cmp	r3, #0
 800619c:	d10f      	bne.n	80061be <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800619e:	4b56      	ldr	r3, [pc, #344]	; (80062f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d109      	bne.n	80061be <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80061aa:	2301      	movs	r3, #1
 80061ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80061ae:	e006      	b.n	80061be <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80061b0:	2301      	movs	r3, #1
 80061b2:	73fb      	strb	r3, [r7, #15]
      break;
 80061b4:	e004      	b.n	80061c0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80061b6:	bf00      	nop
 80061b8:	e002      	b.n	80061c0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80061ba:	bf00      	nop
 80061bc:	e000      	b.n	80061c0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80061be:	bf00      	nop
    }

    if(status == HAL_OK)
 80061c0:	7bfb      	ldrb	r3, [r7, #15]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d108      	bne.n	80061d8 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80061c6:	4b4c      	ldr	r3, [pc, #304]	; (80062f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80061c8:	68db      	ldr	r3, [r3, #12]
 80061ca:	f023 0203 	bic.w	r2, r3, #3
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4949      	ldr	r1, [pc, #292]	; (80062f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80061d4:	4313      	orrs	r3, r2
 80061d6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80061d8:	7bfb      	ldrb	r3, [r7, #15]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	f040 8086 	bne.w	80062ec <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80061e0:	4b45      	ldr	r3, [pc, #276]	; (80062f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a44      	ldr	r2, [pc, #272]	; (80062f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80061e6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80061ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061ec:	f7fc f93c 	bl	8002468 <HAL_GetTick>
 80061f0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80061f2:	e009      	b.n	8006208 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80061f4:	f7fc f938 	bl	8002468 <HAL_GetTick>
 80061f8:	4602      	mov	r2, r0
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	1ad3      	subs	r3, r2, r3
 80061fe:	2b02      	cmp	r3, #2
 8006200:	d902      	bls.n	8006208 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006202:	2303      	movs	r3, #3
 8006204:	73fb      	strb	r3, [r7, #15]
        break;
 8006206:	e005      	b.n	8006214 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006208:	4b3b      	ldr	r3, [pc, #236]	; (80062f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006210:	2b00      	cmp	r3, #0
 8006212:	d1ef      	bne.n	80061f4 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006214:	7bfb      	ldrb	r3, [r7, #15]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d168      	bne.n	80062ec <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d113      	bne.n	8006248 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006220:	4b35      	ldr	r3, [pc, #212]	; (80062f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006222:	691a      	ldr	r2, [r3, #16]
 8006224:	4b35      	ldr	r3, [pc, #212]	; (80062fc <RCCEx_PLLSAI1_Config+0x1dc>)
 8006226:	4013      	ands	r3, r2
 8006228:	687a      	ldr	r2, [r7, #4]
 800622a:	6892      	ldr	r2, [r2, #8]
 800622c:	0211      	lsls	r1, r2, #8
 800622e:	687a      	ldr	r2, [r7, #4]
 8006230:	68d2      	ldr	r2, [r2, #12]
 8006232:	06d2      	lsls	r2, r2, #27
 8006234:	4311      	orrs	r1, r2
 8006236:	687a      	ldr	r2, [r7, #4]
 8006238:	6852      	ldr	r2, [r2, #4]
 800623a:	3a01      	subs	r2, #1
 800623c:	0112      	lsls	r2, r2, #4
 800623e:	430a      	orrs	r2, r1
 8006240:	492d      	ldr	r1, [pc, #180]	; (80062f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006242:	4313      	orrs	r3, r2
 8006244:	610b      	str	r3, [r1, #16]
 8006246:	e02d      	b.n	80062a4 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	2b01      	cmp	r3, #1
 800624c:	d115      	bne.n	800627a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800624e:	4b2a      	ldr	r3, [pc, #168]	; (80062f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006250:	691a      	ldr	r2, [r3, #16]
 8006252:	4b2b      	ldr	r3, [pc, #172]	; (8006300 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006254:	4013      	ands	r3, r2
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	6892      	ldr	r2, [r2, #8]
 800625a:	0211      	lsls	r1, r2, #8
 800625c:	687a      	ldr	r2, [r7, #4]
 800625e:	6912      	ldr	r2, [r2, #16]
 8006260:	0852      	lsrs	r2, r2, #1
 8006262:	3a01      	subs	r2, #1
 8006264:	0552      	lsls	r2, r2, #21
 8006266:	4311      	orrs	r1, r2
 8006268:	687a      	ldr	r2, [r7, #4]
 800626a:	6852      	ldr	r2, [r2, #4]
 800626c:	3a01      	subs	r2, #1
 800626e:	0112      	lsls	r2, r2, #4
 8006270:	430a      	orrs	r2, r1
 8006272:	4921      	ldr	r1, [pc, #132]	; (80062f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006274:	4313      	orrs	r3, r2
 8006276:	610b      	str	r3, [r1, #16]
 8006278:	e014      	b.n	80062a4 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800627a:	4b1f      	ldr	r3, [pc, #124]	; (80062f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800627c:	691a      	ldr	r2, [r3, #16]
 800627e:	4b21      	ldr	r3, [pc, #132]	; (8006304 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006280:	4013      	ands	r3, r2
 8006282:	687a      	ldr	r2, [r7, #4]
 8006284:	6892      	ldr	r2, [r2, #8]
 8006286:	0211      	lsls	r1, r2, #8
 8006288:	687a      	ldr	r2, [r7, #4]
 800628a:	6952      	ldr	r2, [r2, #20]
 800628c:	0852      	lsrs	r2, r2, #1
 800628e:	3a01      	subs	r2, #1
 8006290:	0652      	lsls	r2, r2, #25
 8006292:	4311      	orrs	r1, r2
 8006294:	687a      	ldr	r2, [r7, #4]
 8006296:	6852      	ldr	r2, [r2, #4]
 8006298:	3a01      	subs	r2, #1
 800629a:	0112      	lsls	r2, r2, #4
 800629c:	430a      	orrs	r2, r1
 800629e:	4916      	ldr	r1, [pc, #88]	; (80062f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80062a0:	4313      	orrs	r3, r2
 80062a2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80062a4:	4b14      	ldr	r3, [pc, #80]	; (80062f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a13      	ldr	r2, [pc, #76]	; (80062f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80062aa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80062ae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062b0:	f7fc f8da 	bl	8002468 <HAL_GetTick>
 80062b4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80062b6:	e009      	b.n	80062cc <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80062b8:	f7fc f8d6 	bl	8002468 <HAL_GetTick>
 80062bc:	4602      	mov	r2, r0
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	1ad3      	subs	r3, r2, r3
 80062c2:	2b02      	cmp	r3, #2
 80062c4:	d902      	bls.n	80062cc <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80062c6:	2303      	movs	r3, #3
 80062c8:	73fb      	strb	r3, [r7, #15]
          break;
 80062ca:	e005      	b.n	80062d8 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80062cc:	4b0a      	ldr	r3, [pc, #40]	; (80062f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d0ef      	beq.n	80062b8 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80062d8:	7bfb      	ldrb	r3, [r7, #15]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d106      	bne.n	80062ec <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80062de:	4b06      	ldr	r3, [pc, #24]	; (80062f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80062e0:	691a      	ldr	r2, [r3, #16]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	699b      	ldr	r3, [r3, #24]
 80062e6:	4904      	ldr	r1, [pc, #16]	; (80062f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80062e8:	4313      	orrs	r3, r2
 80062ea:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80062ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3710      	adds	r7, #16
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}
 80062f6:	bf00      	nop
 80062f8:	40021000 	.word	0x40021000
 80062fc:	07ff800f 	.word	0x07ff800f
 8006300:	ff9f800f 	.word	0xff9f800f
 8006304:	f9ff800f 	.word	0xf9ff800f

08006308 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b084      	sub	sp, #16
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006312:	2300      	movs	r3, #0
 8006314:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006316:	4b72      	ldr	r3, [pc, #456]	; (80064e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006318:	68db      	ldr	r3, [r3, #12]
 800631a:	f003 0303 	and.w	r3, r3, #3
 800631e:	2b00      	cmp	r3, #0
 8006320:	d00e      	beq.n	8006340 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006322:	4b6f      	ldr	r3, [pc, #444]	; (80064e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006324:	68db      	ldr	r3, [r3, #12]
 8006326:	f003 0203 	and.w	r2, r3, #3
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	429a      	cmp	r2, r3
 8006330:	d103      	bne.n	800633a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
       ||
 8006336:	2b00      	cmp	r3, #0
 8006338:	d142      	bne.n	80063c0 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800633a:	2301      	movs	r3, #1
 800633c:	73fb      	strb	r3, [r7, #15]
 800633e:	e03f      	b.n	80063c0 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	2b03      	cmp	r3, #3
 8006346:	d018      	beq.n	800637a <RCCEx_PLLSAI2_Config+0x72>
 8006348:	2b03      	cmp	r3, #3
 800634a:	d825      	bhi.n	8006398 <RCCEx_PLLSAI2_Config+0x90>
 800634c:	2b01      	cmp	r3, #1
 800634e:	d002      	beq.n	8006356 <RCCEx_PLLSAI2_Config+0x4e>
 8006350:	2b02      	cmp	r3, #2
 8006352:	d009      	beq.n	8006368 <RCCEx_PLLSAI2_Config+0x60>
 8006354:	e020      	b.n	8006398 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006356:	4b62      	ldr	r3, [pc, #392]	; (80064e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f003 0302 	and.w	r3, r3, #2
 800635e:	2b00      	cmp	r3, #0
 8006360:	d11d      	bne.n	800639e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8006362:	2301      	movs	r3, #1
 8006364:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006366:	e01a      	b.n	800639e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006368:	4b5d      	ldr	r3, [pc, #372]	; (80064e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006370:	2b00      	cmp	r3, #0
 8006372:	d116      	bne.n	80063a2 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8006374:	2301      	movs	r3, #1
 8006376:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006378:	e013      	b.n	80063a2 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800637a:	4b59      	ldr	r3, [pc, #356]	; (80064e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006382:	2b00      	cmp	r3, #0
 8006384:	d10f      	bne.n	80063a6 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006386:	4b56      	ldr	r3, [pc, #344]	; (80064e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800638e:	2b00      	cmp	r3, #0
 8006390:	d109      	bne.n	80063a6 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8006392:	2301      	movs	r3, #1
 8006394:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006396:	e006      	b.n	80063a6 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006398:	2301      	movs	r3, #1
 800639a:	73fb      	strb	r3, [r7, #15]
      break;
 800639c:	e004      	b.n	80063a8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800639e:	bf00      	nop
 80063a0:	e002      	b.n	80063a8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80063a2:	bf00      	nop
 80063a4:	e000      	b.n	80063a8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80063a6:	bf00      	nop
    }

    if(status == HAL_OK)
 80063a8:	7bfb      	ldrb	r3, [r7, #15]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d108      	bne.n	80063c0 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80063ae:	4b4c      	ldr	r3, [pc, #304]	; (80064e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80063b0:	68db      	ldr	r3, [r3, #12]
 80063b2:	f023 0203 	bic.w	r2, r3, #3
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4949      	ldr	r1, [pc, #292]	; (80064e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80063bc:	4313      	orrs	r3, r2
 80063be:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80063c0:	7bfb      	ldrb	r3, [r7, #15]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	f040 8086 	bne.w	80064d4 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80063c8:	4b45      	ldr	r3, [pc, #276]	; (80064e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a44      	ldr	r2, [pc, #272]	; (80064e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80063ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80063d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063d4:	f7fc f848 	bl	8002468 <HAL_GetTick>
 80063d8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80063da:	e009      	b.n	80063f0 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80063dc:	f7fc f844 	bl	8002468 <HAL_GetTick>
 80063e0:	4602      	mov	r2, r0
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	1ad3      	subs	r3, r2, r3
 80063e6:	2b02      	cmp	r3, #2
 80063e8:	d902      	bls.n	80063f0 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80063ea:	2303      	movs	r3, #3
 80063ec:	73fb      	strb	r3, [r7, #15]
        break;
 80063ee:	e005      	b.n	80063fc <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80063f0:	4b3b      	ldr	r3, [pc, #236]	; (80064e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d1ef      	bne.n	80063dc <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80063fc:	7bfb      	ldrb	r3, [r7, #15]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d168      	bne.n	80064d4 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d113      	bne.n	8006430 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006408:	4b35      	ldr	r3, [pc, #212]	; (80064e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800640a:	695a      	ldr	r2, [r3, #20]
 800640c:	4b35      	ldr	r3, [pc, #212]	; (80064e4 <RCCEx_PLLSAI2_Config+0x1dc>)
 800640e:	4013      	ands	r3, r2
 8006410:	687a      	ldr	r2, [r7, #4]
 8006412:	6892      	ldr	r2, [r2, #8]
 8006414:	0211      	lsls	r1, r2, #8
 8006416:	687a      	ldr	r2, [r7, #4]
 8006418:	68d2      	ldr	r2, [r2, #12]
 800641a:	06d2      	lsls	r2, r2, #27
 800641c:	4311      	orrs	r1, r2
 800641e:	687a      	ldr	r2, [r7, #4]
 8006420:	6852      	ldr	r2, [r2, #4]
 8006422:	3a01      	subs	r2, #1
 8006424:	0112      	lsls	r2, r2, #4
 8006426:	430a      	orrs	r2, r1
 8006428:	492d      	ldr	r1, [pc, #180]	; (80064e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800642a:	4313      	orrs	r3, r2
 800642c:	614b      	str	r3, [r1, #20]
 800642e:	e02d      	b.n	800648c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	2b01      	cmp	r3, #1
 8006434:	d115      	bne.n	8006462 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006436:	4b2a      	ldr	r3, [pc, #168]	; (80064e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006438:	695a      	ldr	r2, [r3, #20]
 800643a:	4b2b      	ldr	r3, [pc, #172]	; (80064e8 <RCCEx_PLLSAI2_Config+0x1e0>)
 800643c:	4013      	ands	r3, r2
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	6892      	ldr	r2, [r2, #8]
 8006442:	0211      	lsls	r1, r2, #8
 8006444:	687a      	ldr	r2, [r7, #4]
 8006446:	6912      	ldr	r2, [r2, #16]
 8006448:	0852      	lsrs	r2, r2, #1
 800644a:	3a01      	subs	r2, #1
 800644c:	0552      	lsls	r2, r2, #21
 800644e:	4311      	orrs	r1, r2
 8006450:	687a      	ldr	r2, [r7, #4]
 8006452:	6852      	ldr	r2, [r2, #4]
 8006454:	3a01      	subs	r2, #1
 8006456:	0112      	lsls	r2, r2, #4
 8006458:	430a      	orrs	r2, r1
 800645a:	4921      	ldr	r1, [pc, #132]	; (80064e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800645c:	4313      	orrs	r3, r2
 800645e:	614b      	str	r3, [r1, #20]
 8006460:	e014      	b.n	800648c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006462:	4b1f      	ldr	r3, [pc, #124]	; (80064e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006464:	695a      	ldr	r2, [r3, #20]
 8006466:	4b21      	ldr	r3, [pc, #132]	; (80064ec <RCCEx_PLLSAI2_Config+0x1e4>)
 8006468:	4013      	ands	r3, r2
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	6892      	ldr	r2, [r2, #8]
 800646e:	0211      	lsls	r1, r2, #8
 8006470:	687a      	ldr	r2, [r7, #4]
 8006472:	6952      	ldr	r2, [r2, #20]
 8006474:	0852      	lsrs	r2, r2, #1
 8006476:	3a01      	subs	r2, #1
 8006478:	0652      	lsls	r2, r2, #25
 800647a:	4311      	orrs	r1, r2
 800647c:	687a      	ldr	r2, [r7, #4]
 800647e:	6852      	ldr	r2, [r2, #4]
 8006480:	3a01      	subs	r2, #1
 8006482:	0112      	lsls	r2, r2, #4
 8006484:	430a      	orrs	r2, r1
 8006486:	4916      	ldr	r1, [pc, #88]	; (80064e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006488:	4313      	orrs	r3, r2
 800648a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800648c:	4b14      	ldr	r3, [pc, #80]	; (80064e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a13      	ldr	r2, [pc, #76]	; (80064e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006492:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006496:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006498:	f7fb ffe6 	bl	8002468 <HAL_GetTick>
 800649c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800649e:	e009      	b.n	80064b4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80064a0:	f7fb ffe2 	bl	8002468 <HAL_GetTick>
 80064a4:	4602      	mov	r2, r0
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	1ad3      	subs	r3, r2, r3
 80064aa:	2b02      	cmp	r3, #2
 80064ac:	d902      	bls.n	80064b4 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80064ae:	2303      	movs	r3, #3
 80064b0:	73fb      	strb	r3, [r7, #15]
          break;
 80064b2:	e005      	b.n	80064c0 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80064b4:	4b0a      	ldr	r3, [pc, #40]	; (80064e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d0ef      	beq.n	80064a0 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80064c0:	7bfb      	ldrb	r3, [r7, #15]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d106      	bne.n	80064d4 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80064c6:	4b06      	ldr	r3, [pc, #24]	; (80064e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80064c8:	695a      	ldr	r2, [r3, #20]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	699b      	ldr	r3, [r3, #24]
 80064ce:	4904      	ldr	r1, [pc, #16]	; (80064e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80064d0:	4313      	orrs	r3, r2
 80064d2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80064d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3710      	adds	r7, #16
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}
 80064de:	bf00      	nop
 80064e0:	40021000 	.word	0x40021000
 80064e4:	07ff800f 	.word	0x07ff800f
 80064e8:	ff9f800f 	.word	0xff9f800f
 80064ec:	f9ff800f 	.word	0xf9ff800f

080064f0 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b089      	sub	sp, #36	; 0x24
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 80064fa:	2300      	movs	r3, #0
 80064fc:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 80064fe:	2300      	movs	r3, #0
 8006500:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8006502:	2300      	movs	r3, #0
 8006504:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800650c:	d10b      	bne.n	8006526 <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800650e:	4b7e      	ldr	r3, [pc, #504]	; (8006708 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006510:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006514:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8006518:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 800651a:	69bb      	ldr	r3, [r7, #24]
 800651c:	2b60      	cmp	r3, #96	; 0x60
 800651e:	d112      	bne.n	8006546 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006520:	4b7a      	ldr	r3, [pc, #488]	; (800670c <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8006522:	61fb      	str	r3, [r7, #28]
 8006524:	e00f      	b.n	8006546 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800652c:	d10b      	bne.n	8006546 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800652e:	4b76      	ldr	r3, [pc, #472]	; (8006708 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006530:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006534:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006538:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 800653a:	69bb      	ldr	r3, [r7, #24]
 800653c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006540:	d101      	bne.n	8006546 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8006542:	4b72      	ldr	r3, [pc, #456]	; (800670c <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8006544:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8006546:	69fb      	ldr	r3, [r7, #28]
 8006548:	2b00      	cmp	r3, #0
 800654a:	f040 80d6 	bne.w	80066fa <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8006552:	69bb      	ldr	r3, [r7, #24]
 8006554:	2b40      	cmp	r3, #64	; 0x40
 8006556:	d003      	beq.n	8006560 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 8006558:	69bb      	ldr	r3, [r7, #24]
 800655a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800655e:	d13b      	bne.n	80065d8 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8006560:	4b69      	ldr	r3, [pc, #420]	; (8006708 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006568:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800656c:	f040 80c4 	bne.w	80066f8 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 8006570:	4b65      	ldr	r3, [pc, #404]	; (8006708 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006572:	68db      	ldr	r3, [r3, #12]
 8006574:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006578:	2b00      	cmp	r3, #0
 800657a:	f000 80bd 	beq.w	80066f8 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800657e:	4b62      	ldr	r3, [pc, #392]	; (8006708 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006580:	68db      	ldr	r3, [r3, #12]
 8006582:	091b      	lsrs	r3, r3, #4
 8006584:	f003 030f 	and.w	r3, r3, #15
 8006588:	3301      	adds	r3, #1
 800658a:	693a      	ldr	r2, [r7, #16]
 800658c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006590:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006592:	4b5d      	ldr	r3, [pc, #372]	; (8006708 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006594:	68db      	ldr	r3, [r3, #12]
 8006596:	0a1b      	lsrs	r3, r3, #8
 8006598:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800659c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800659e:	4b5a      	ldr	r3, [pc, #360]	; (8006708 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80065a0:	68db      	ldr	r3, [r3, #12]
 80065a2:	0edb      	lsrs	r3, r3, #27
 80065a4:	f003 031f 	and.w	r3, r3, #31
 80065a8:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d10a      	bne.n	80065c6 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80065b0:	4b55      	ldr	r3, [pc, #340]	; (8006708 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80065b2:	68db      	ldr	r3, [r3, #12]
 80065b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d002      	beq.n	80065c2 <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 80065bc:	2311      	movs	r3, #17
 80065be:	617b      	str	r3, [r7, #20]
 80065c0:	e001      	b.n	80065c6 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 80065c2:	2307      	movs	r3, #7
 80065c4:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	68fa      	ldr	r2, [r7, #12]
 80065ca:	fb03 f202 	mul.w	r2, r3, r2
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80065d4:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80065d6:	e08f      	b.n	80066f8 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 80065d8:	69bb      	ldr	r3, [r7, #24]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d13a      	bne.n	8006654 <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 80065de:	4b4a      	ldr	r3, [pc, #296]	; (8006708 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80065ea:	f040 8086 	bne.w	80066fa <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 80065ee:	4b46      	ldr	r3, [pc, #280]	; (8006708 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80065f0:	691b      	ldr	r3, [r3, #16]
 80065f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d07f      	beq.n	80066fa <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80065fa:	4b43      	ldr	r3, [pc, #268]	; (8006708 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80065fc:	691b      	ldr	r3, [r3, #16]
 80065fe:	091b      	lsrs	r3, r3, #4
 8006600:	f003 030f 	and.w	r3, r3, #15
 8006604:	3301      	adds	r3, #1
 8006606:	693a      	ldr	r2, [r7, #16]
 8006608:	fbb2 f3f3 	udiv	r3, r2, r3
 800660c:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800660e:	4b3e      	ldr	r3, [pc, #248]	; (8006708 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006610:	691b      	ldr	r3, [r3, #16]
 8006612:	0a1b      	lsrs	r3, r3, #8
 8006614:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006618:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 800661a:	4b3b      	ldr	r3, [pc, #236]	; (8006708 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800661c:	691b      	ldr	r3, [r3, #16]
 800661e:	0edb      	lsrs	r3, r3, #27
 8006620:	f003 031f 	and.w	r3, r3, #31
 8006624:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d10a      	bne.n	8006642 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 800662c:	4b36      	ldr	r3, [pc, #216]	; (8006708 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800662e:	691b      	ldr	r3, [r3, #16]
 8006630:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006634:	2b00      	cmp	r3, #0
 8006636:	d002      	beq.n	800663e <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 8006638:	2311      	movs	r3, #17
 800663a:	617b      	str	r3, [r7, #20]
 800663c:	e001      	b.n	8006642 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 800663e:	2307      	movs	r3, #7
 8006640:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	68fa      	ldr	r2, [r7, #12]
 8006646:	fb03 f202 	mul.w	r2, r3, r2
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006650:	61fb      	str	r3, [r7, #28]
 8006652:	e052      	b.n	80066fa <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 8006654:	69bb      	ldr	r3, [r7, #24]
 8006656:	2b80      	cmp	r3, #128	; 0x80
 8006658:	d003      	beq.n	8006662 <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 800665a:	69bb      	ldr	r3, [r7, #24]
 800665c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006660:	d109      	bne.n	8006676 <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006662:	4b29      	ldr	r3, [pc, #164]	; (8006708 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800666a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800666e:	d144      	bne.n	80066fa <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 8006670:	4b27      	ldr	r3, [pc, #156]	; (8006710 <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 8006672:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006674:	e041      	b.n	80066fa <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8006676:	69bb      	ldr	r3, [r7, #24]
 8006678:	2b20      	cmp	r3, #32
 800667a:	d003      	beq.n	8006684 <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 800667c:	69bb      	ldr	r3, [r7, #24]
 800667e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006682:	d13a      	bne.n	80066fa <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8006684:	4b20      	ldr	r3, [pc, #128]	; (8006708 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800668c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006690:	d133      	bne.n	80066fa <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8006692:	4b1d      	ldr	r3, [pc, #116]	; (8006708 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006694:	695b      	ldr	r3, [r3, #20]
 8006696:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800669a:	2b00      	cmp	r3, #0
 800669c:	d02d      	beq.n	80066fa <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 800669e:	4b1a      	ldr	r3, [pc, #104]	; (8006708 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80066a0:	695b      	ldr	r3, [r3, #20]
 80066a2:	091b      	lsrs	r3, r3, #4
 80066a4:	f003 030f 	and.w	r3, r3, #15
 80066a8:	3301      	adds	r3, #1
 80066aa:	693a      	ldr	r2, [r7, #16]
 80066ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80066b0:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80066b2:	4b15      	ldr	r3, [pc, #84]	; (8006708 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80066b4:	695b      	ldr	r3, [r3, #20]
 80066b6:	0a1b      	lsrs	r3, r3, #8
 80066b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066bc:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 80066be:	4b12      	ldr	r3, [pc, #72]	; (8006708 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80066c0:	695b      	ldr	r3, [r3, #20]
 80066c2:	0edb      	lsrs	r3, r3, #27
 80066c4:	f003 031f 	and.w	r3, r3, #31
 80066c8:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d10a      	bne.n	80066e6 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 80066d0:	4b0d      	ldr	r3, [pc, #52]	; (8006708 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80066d2:	695b      	ldr	r3, [r3, #20]
 80066d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d002      	beq.n	80066e2 <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 80066dc:	2311      	movs	r3, #17
 80066de:	617b      	str	r3, [r7, #20]
 80066e0:	e001      	b.n	80066e6 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 80066e2:	2307      	movs	r3, #7
 80066e4:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	68fa      	ldr	r2, [r7, #12]
 80066ea:	fb03 f202 	mul.w	r2, r3, r2
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80066f4:	61fb      	str	r3, [r7, #28]
 80066f6:	e000      	b.n	80066fa <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80066f8:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 80066fa:	69fb      	ldr	r3, [r7, #28]
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3724      	adds	r7, #36	; 0x24
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr
 8006708:	40021000 	.word	0x40021000
 800670c:	001fff68 	.word	0x001fff68
 8006710:	00f42400 	.word	0x00f42400

08006714 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b086      	sub	sp, #24
 8006718:	af00      	add	r7, sp, #0
 800671a:	60f8      	str	r0, [r7, #12]
 800671c:	60b9      	str	r1, [r7, #8]
 800671e:	607a      	str	r2, [r7, #4]
 8006720:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	2b02      	cmp	r3, #2
 8006726:	d904      	bls.n	8006732 <HAL_SAI_InitProtocol+0x1e>
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	3b03      	subs	r3, #3
 800672c:	2b01      	cmp	r3, #1
 800672e:	d812      	bhi.n	8006756 <HAL_SAI_InitProtocol+0x42>
 8006730:	e008      	b.n	8006744 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	687a      	ldr	r2, [r7, #4]
 8006736:	68b9      	ldr	r1, [r7, #8]
 8006738:	68f8      	ldr	r0, [r7, #12]
 800673a:	f000 f9fb 	bl	8006b34 <SAI_InitI2S>
 800673e:	4603      	mov	r3, r0
 8006740:	75fb      	strb	r3, [r7, #23]
      break;
 8006742:	e00b      	b.n	800675c <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	687a      	ldr	r2, [r7, #4]
 8006748:	68b9      	ldr	r1, [r7, #8]
 800674a:	68f8      	ldr	r0, [r7, #12]
 800674c:	f000 faa4 	bl	8006c98 <SAI_InitPCM>
 8006750:	4603      	mov	r3, r0
 8006752:	75fb      	strb	r3, [r7, #23]
      break;
 8006754:	e002      	b.n	800675c <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 8006756:	2301      	movs	r3, #1
 8006758:	75fb      	strb	r3, [r7, #23]
      break;
 800675a:	bf00      	nop
  }

  if (status == HAL_OK)
 800675c:	7dfb      	ldrb	r3, [r7, #23]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d104      	bne.n	800676c <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 8006762:	68f8      	ldr	r0, [r7, #12]
 8006764:	f000 f808 	bl	8006778 <HAL_SAI_Init>
 8006768:	4603      	mov	r3, r0
 800676a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800676c:	7dfb      	ldrb	r3, [r7, #23]
}
 800676e:	4618      	mov	r0, r3
 8006770:	3718      	adds	r7, #24
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}
	...

08006778 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b08a      	sub	sp, #40	; 0x28
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d101      	bne.n	800678a <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8006786:	2301      	movs	r3, #1
 8006788:	e1c7      	b.n	8006b1a <HAL_SAI_Init+0x3a2>

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006790:	2b01      	cmp	r3, #1
 8006792:	d10e      	bne.n	80067b2 <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a81      	ldr	r2, [pc, #516]	; (80069a0 <HAL_SAI_Init+0x228>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d107      	bne.n	80067ae <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 80067a2:	2b01      	cmp	r3, #1
 80067a4:	d103      	bne.n	80067ae <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d001      	beq.n	80067b2 <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 80067ae:	2301      	movs	r3, #1
 80067b0:	e1b3      	b.n	8006b1a <HAL_SAI_Init+0x3a2>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 80067b8:	b2db      	uxtb	r3, r3
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d106      	bne.n	80067cc <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2200      	movs	r2, #0
 80067c2:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f7fb fcc4 	bl	8002154 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f000 fae5 	bl	8006d9c <SAI_Disable>
 80067d2:	4603      	mov	r3, r0
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d001      	beq.n	80067dc <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 80067d8:	2301      	movs	r3, #1
 80067da:	e19e      	b.n	8006b1a <HAL_SAI_Init+0x3a2>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2202      	movs	r2, #2
 80067e0:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	68db      	ldr	r3, [r3, #12]
 80067e8:	2b02      	cmp	r3, #2
 80067ea:	d00c      	beq.n	8006806 <HAL_SAI_Init+0x8e>
 80067ec:	2b02      	cmp	r3, #2
 80067ee:	d80d      	bhi.n	800680c <HAL_SAI_Init+0x94>
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d002      	beq.n	80067fa <HAL_SAI_Init+0x82>
 80067f4:	2b01      	cmp	r3, #1
 80067f6:	d003      	beq.n	8006800 <HAL_SAI_Init+0x88>
 80067f8:	e008      	b.n	800680c <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 80067fa:	2300      	movs	r3, #0
 80067fc:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80067fe:	e008      	b.n	8006812 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8006800:	2310      	movs	r3, #16
 8006802:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006804:	e005      	b.n	8006812 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8006806:	2320      	movs	r3, #32
 8006808:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800680a:	e002      	b.n	8006812 <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 800680c:	2300      	movs	r3, #0
 800680e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006810:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	689b      	ldr	r3, [r3, #8]
 8006816:	2b03      	cmp	r3, #3
 8006818:	d81d      	bhi.n	8006856 <HAL_SAI_Init+0xde>
 800681a:	a201      	add	r2, pc, #4	; (adr r2, 8006820 <HAL_SAI_Init+0xa8>)
 800681c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006820:	08006831 	.word	0x08006831
 8006824:	08006837 	.word	0x08006837
 8006828:	0800683f 	.word	0x0800683f
 800682c:	08006847 	.word	0x08006847
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8006830:	2300      	movs	r3, #0
 8006832:	61fb      	str	r3, [r7, #28]
      break;
 8006834:	e012      	b.n	800685c <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8006836:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800683a:	61fb      	str	r3, [r7, #28]
      break;
 800683c:	e00e      	b.n	800685c <HAL_SAI_Init+0xe4>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800683e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006842:	61fb      	str	r3, [r7, #28]
      break;
 8006844:	e00a      	b.n	800685c <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8006846:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800684a:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800684c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800684e:	f043 0301 	orr.w	r3, r3, #1
 8006852:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006854:	e002      	b.n	800685c <HAL_SAI_Init+0xe4>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 8006856:	2300      	movs	r3, #0
 8006858:	61fb      	str	r3, [r7, #28]
      break;
 800685a:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a4f      	ldr	r2, [pc, #316]	; (80069a0 <HAL_SAI_Init+0x228>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d004      	beq.n	8006870 <HAL_SAI_Init+0xf8>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a4e      	ldr	r2, [pc, #312]	; (80069a4 <HAL_SAI_Init+0x22c>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d103      	bne.n	8006878 <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 8006870:	4a4d      	ldr	r2, [pc, #308]	; (80069a8 <HAL_SAI_Init+0x230>)
 8006872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006874:	6013      	str	r3, [r2, #0]
 8006876:	e002      	b.n	800687e <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8006878:	4a4c      	ldr	r2, [pc, #304]	; (80069ac <HAL_SAI_Init+0x234>)
 800687a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800687c:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	69db      	ldr	r3, [r3, #28]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d073      	beq.n	800696e <HAL_SAI_Init+0x1f6>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a45      	ldr	r2, [pc, #276]	; (80069a0 <HAL_SAI_Init+0x228>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d004      	beq.n	800689a <HAL_SAI_Init+0x122>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a43      	ldr	r2, [pc, #268]	; (80069a4 <HAL_SAI_Init+0x22c>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d105      	bne.n	80068a6 <HAL_SAI_Init+0x12e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800689a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800689e:	f7fe fd0d 	bl	80052bc <HAL_RCCEx_GetPeriphCLKFreq>
 80068a2:	61b8      	str	r0, [r7, #24]
 80068a4:	e004      	b.n	80068b0 <HAL_SAI_Init+0x138>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80068a6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80068aa:	f7fe fd07 	bl	80052bc <HAL_RCCEx_GetPeriphCLKFreq>
 80068ae:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NOMCK = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NOMCK = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	695b      	ldr	r3, [r3, #20]
 80068b4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80068b8:	d120      	bne.n	80068fc <HAL_SAI_Init+0x184>
    {
      /* NOMCK = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068be:	2b04      	cmp	r3, #4
 80068c0:	d102      	bne.n	80068c8 <HAL_SAI_Init+0x150>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 80068c2:	2340      	movs	r3, #64	; 0x40
 80068c4:	613b      	str	r3, [r7, #16]
 80068c6:	e00a      	b.n	80068de <HAL_SAI_Init+0x166>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068cc:	2b08      	cmp	r3, #8
 80068ce:	d103      	bne.n	80068d8 <HAL_SAI_Init+0x160>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 80068d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80068d4:	613b      	str	r3, [r7, #16]
 80068d6:	e002      	b.n	80068de <HAL_SAI_Init+0x166>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068dc:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 80068de:	69ba      	ldr	r2, [r7, #24]
 80068e0:	4613      	mov	r3, r2
 80068e2:	009b      	lsls	r3, r3, #2
 80068e4:	4413      	add	r3, r2
 80068e6:	005b      	lsls	r3, r3, #1
 80068e8:	4619      	mov	r1, r3
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	69db      	ldr	r3, [r3, #28]
 80068ee:	693a      	ldr	r2, [r7, #16]
 80068f0:	fb02 f303 	mul.w	r3, r2, r3
 80068f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80068f8:	617b      	str	r3, [r7, #20]
 80068fa:	e017      	b.n	800692c <HAL_SAI_Init+0x1b4>
    }
    else
    {
      /* NOMCK = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006900:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006904:	d101      	bne.n	800690a <HAL_SAI_Init+0x192>
 8006906:	2302      	movs	r3, #2
 8006908:	e000      	b.n	800690c <HAL_SAI_Init+0x194>
 800690a:	2301      	movs	r3, #1
 800690c:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800690e:	69ba      	ldr	r2, [r7, #24]
 8006910:	4613      	mov	r3, r2
 8006912:	009b      	lsls	r3, r3, #2
 8006914:	4413      	add	r3, r2
 8006916:	005b      	lsls	r3, r3, #1
 8006918:	4619      	mov	r1, r3
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	69db      	ldr	r3, [r3, #28]
 800691e:	68fa      	ldr	r2, [r7, #12]
 8006920:	fb02 f303 	mul.w	r3, r2, r3
 8006924:	021b      	lsls	r3, r3, #8
 8006926:	fbb1 f3f3 	udiv	r3, r1, r3
 800692a:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	4a20      	ldr	r2, [pc, #128]	; (80069b0 <HAL_SAI_Init+0x238>)
 8006930:	fba2 2303 	umull	r2, r3, r2, r3
 8006934:	08da      	lsrs	r2, r3, #3
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800693a:	6979      	ldr	r1, [r7, #20]
 800693c:	4b1c      	ldr	r3, [pc, #112]	; (80069b0 <HAL_SAI_Init+0x238>)
 800693e:	fba3 2301 	umull	r2, r3, r3, r1
 8006942:	08da      	lsrs	r2, r3, #3
 8006944:	4613      	mov	r3, r2
 8006946:	009b      	lsls	r3, r3, #2
 8006948:	4413      	add	r3, r2
 800694a:	005b      	lsls	r3, r3, #1
 800694c:	1aca      	subs	r2, r1, r3
 800694e:	2a08      	cmp	r2, #8
 8006950:	d904      	bls.n	800695c <HAL_SAI_Init+0x1e4>
    {
      hsai->Init.Mckdiv += 1U;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6a1b      	ldr	r3, [r3, #32]
 8006956:	1c5a      	adds	r2, r3, #1
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006960:	2b04      	cmp	r3, #4
 8006962:	d104      	bne.n	800696e <HAL_SAI_Init+0x1f6>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6a1b      	ldr	r3, [r3, #32]
 8006968:	085a      	lsrs	r2, r3, #1
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d003      	beq.n	800697e <HAL_SAI_Init+0x206>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	2b02      	cmp	r3, #2
 800697c:	d109      	bne.n	8006992 <HAL_SAI_Init+0x21a>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006982:	2b01      	cmp	r3, #1
 8006984:	d101      	bne.n	800698a <HAL_SAI_Init+0x212>
 8006986:	2300      	movs	r3, #0
 8006988:	e001      	b.n	800698e <HAL_SAI_Init+0x216>
 800698a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800698e:	623b      	str	r3, [r7, #32]
 8006990:	e012      	b.n	80069b8 <HAL_SAI_Init+0x240>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006996:	2b01      	cmp	r3, #1
 8006998:	d10c      	bne.n	80069b4 <HAL_SAI_Init+0x23c>
 800699a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800699e:	e00a      	b.n	80069b6 <HAL_SAI_Init+0x23e>
 80069a0:	40015404 	.word	0x40015404
 80069a4:	40015424 	.word	0x40015424
 80069a8:	40015400 	.word	0x40015400
 80069ac:	40015800 	.word	0x40015800
 80069b0:	cccccccd 	.word	0xcccccccd
 80069b4:	2300      	movs	r3, #0
 80069b6:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	6819      	ldr	r1, [r3, #0]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681a      	ldr	r2, [r3, #0]
 80069c2:	4b58      	ldr	r3, [pc, #352]	; (8006b24 <HAL_SAI_Init+0x3ac>)
 80069c4:	400b      	ands	r3, r1
 80069c6:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NOMCK | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	6819      	ldr	r1, [r3, #0]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	685a      	ldr	r2, [r3, #4]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069d6:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80069dc:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069e2:	431a      	orrs	r2, r3
 80069e4:	6a3b      	ldr	r3, [r7, #32]
 80069e6:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 80069e8:	69fb      	ldr	r3, [r7, #28]
 80069ea:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          ckstr_bits | syncen_bits |                             \
 80069f0:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	691b      	ldr	r3, [r3, #16]
 80069f6:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80069fc:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6a1b      	ldr	r3, [r3, #32]
 8006a02:	051b      	lsls	r3, r3, #20
 8006a04:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8006a0a:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	430a      	orrs	r2, r1
 8006a12:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	687a      	ldr	r2, [r7, #4]
 8006a1c:	6812      	ldr	r2, [r2, #0]
 8006a1e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8006a22:	f023 030f 	bic.w	r3, r3, #15
 8006a26:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	6859      	ldr	r1, [r3, #4]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	699a      	ldr	r2, [r3, #24]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a36:	431a      	orrs	r2, r3
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a3c:	431a      	orrs	r2, r3
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	430a      	orrs	r2, r1
 8006a44:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	6899      	ldr	r1, [r3, #8]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681a      	ldr	r2, [r3, #0]
 8006a50:	4b35      	ldr	r3, [pc, #212]	; (8006b28 <HAL_SAI_Init+0x3b0>)
 8006a52:	400b      	ands	r3, r1
 8006a54:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	6899      	ldr	r1, [r3, #8]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a60:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006a66:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
                           hsai->FrameInit.FSOffset |
 8006a6c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSDefinition |
 8006a72:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a78:	3b01      	subs	r3, #1
 8006a7a:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8006a7c:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	430a      	orrs	r2, r1
 8006a84:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	68d9      	ldr	r1, [r3, #12]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681a      	ldr	r2, [r3, #0]
 8006a90:	f24f 0320 	movw	r3, #61472	; 0xf020
 8006a94:	400b      	ands	r3, r1
 8006a96:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	68d9      	ldr	r1, [r3, #12]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006aa6:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aac:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006aae:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ab4:	3b01      	subs	r3, #1
 8006ab6:	021b      	lsls	r3, r3, #8
 8006ab8:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	430a      	orrs	r2, r1
 8006ac0:	60da      	str	r2, [r3, #12]

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a19      	ldr	r2, [pc, #100]	; (8006b2c <HAL_SAI_Init+0x3b4>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d119      	bne.n	8006b00 <HAL_SAI_Init+0x388>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8006acc:	4b18      	ldr	r3, [pc, #96]	; (8006b30 <HAL_SAI_Init+0x3b8>)
 8006ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ad0:	4a17      	ldr	r2, [pc, #92]	; (8006b30 <HAL_SAI_Init+0x3b8>)
 8006ad2:	f023 0301 	bic.w	r3, r3, #1
 8006ad6:	6453      	str	r3, [r2, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006ade:	2b01      	cmp	r3, #1
 8006ae0:	d10e      	bne.n	8006b00 <HAL_SAI_Init+0x388>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aea:	3b01      	subs	r3, #1
 8006aec:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8006aee:	4910      	ldr	r1, [pc, #64]	; (8006b30 <HAL_SAI_Init+0x3b8>)
 8006af0:	4313      	orrs	r3, r2
 8006af2:	644b      	str	r3, [r1, #68]	; 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 8006af4:	4b0e      	ldr	r3, [pc, #56]	; (8006b30 <HAL_SAI_Init+0x3b8>)
 8006af6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006af8:	4a0d      	ldr	r2, [pc, #52]	; (8006b30 <HAL_SAI_Init+0x3b8>)
 8006afa:	f043 0301 	orr.w	r3, r3, #1
 8006afe:	6453      	str	r3, [r2, #68]	; 0x44
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2200      	movs	r2, #0
 8006b04:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2200      	movs	r2, #0
 8006b14:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

  return HAL_OK;
 8006b18:	2300      	movs	r3, #0
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3728      	adds	r7, #40	; 0x28
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}
 8006b22:	bf00      	nop
 8006b24:	f805c010 	.word	0xf805c010
 8006b28:	fff88000 	.word	0xfff88000
 8006b2c:	40015404 	.word	0x40015404
 8006b30:	40015400 	.word	0x40015400

08006b34 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b087      	sub	sp, #28
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	60f8      	str	r0, [r7, #12]
 8006b3c:	60b9      	str	r1, [r7, #8]
 8006b3e:	607a      	str	r2, [r7, #4]
 8006b40:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b42:	2300      	movs	r3, #0
 8006b44:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	641a      	str	r2, [r3, #64]	; 0x40
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	649a      	str	r2, [r3, #72]	; 0x48
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d003      	beq.n	8006b62 <SAI_InitI2S+0x2e>
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	2b02      	cmp	r3, #2
 8006b60:	d103      	bne.n	8006b6a <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2200      	movs	r2, #0
 8006b66:	64da      	str	r2, [r3, #76]	; 0x4c
 8006b68:	e002      	b.n	8006b70 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2201      	movs	r2, #1
 8006b6e:	64da      	str	r2, [r3, #76]	; 0x4c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006b76:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006b7e:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.FirstBitOffset  = 0;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2200      	movs	r2, #0
 8006b84:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.SlotNumber      = nbslot;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	683a      	ldr	r2, [r7, #0]
 8006b8a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	f003 0301 	and.w	r3, r3, #1
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d001      	beq.n	8006b9a <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 8006b96:	2301      	movs	r3, #1
 8006b98:	e077      	b.n	8006c8a <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d107      	bne.n	8006bb0 <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8006bac:	661a      	str	r2, [r3, #96]	; 0x60
 8006bae:	e006      	b.n	8006bbe <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006bb6:	65da      	str	r2, [r3, #92]	; 0x5c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Frame definition */
  switch (datasize)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2b03      	cmp	r3, #3
 8006bc2:	d84f      	bhi.n	8006c64 <SAI_InitI2S+0x130>
 8006bc4:	a201      	add	r2, pc, #4	; (adr r2, 8006bcc <SAI_InitI2S+0x98>)
 8006bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bca:	bf00      	nop
 8006bcc:	08006bdd 	.word	0x08006bdd
 8006bd0:	08006bff 	.word	0x08006bff
 8006bd4:	08006c21 	.word	0x08006c21
 8006bd8:	08006c43 	.word	0x08006c43
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	2280      	movs	r2, #128	; 0x80
 8006be0:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	085b      	lsrs	r3, r3, #1
 8006be6:	015a      	lsls	r2, r3, #5
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	085b      	lsrs	r3, r3, #1
 8006bf0:	011a      	lsls	r2, r3, #4
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2240      	movs	r2, #64	; 0x40
 8006bfa:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8006bfc:	e035      	b.n	8006c6a <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2280      	movs	r2, #128	; 0x80
 8006c02:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	085b      	lsrs	r3, r3, #1
 8006c08:	019a      	lsls	r2, r3, #6
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	085b      	lsrs	r3, r3, #1
 8006c12:	015a      	lsls	r2, r3, #5
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	2280      	movs	r2, #128	; 0x80
 8006c1c:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8006c1e:	e024      	b.n	8006c6a <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	22c0      	movs	r2, #192	; 0xc0
 8006c24:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	085b      	lsrs	r3, r3, #1
 8006c2a:	019a      	lsls	r2, r3, #6
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	085b      	lsrs	r3, r3, #1
 8006c34:	015a      	lsls	r2, r3, #5
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2280      	movs	r2, #128	; 0x80
 8006c3e:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8006c40:	e013      	b.n	8006c6a <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	22e0      	movs	r2, #224	; 0xe0
 8006c46:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	085b      	lsrs	r3, r3, #1
 8006c4c:	019a      	lsls	r2, r3, #6
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	085b      	lsrs	r3, r3, #1
 8006c56:	015a      	lsls	r2, r3, #5
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2280      	movs	r2, #128	; 0x80
 8006c60:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8006c62:	e002      	b.n	8006c6a <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 8006c64:	2301      	movs	r3, #1
 8006c66:	75fb      	strb	r3, [r7, #23]
      break;
 8006c68:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	2b02      	cmp	r3, #2
 8006c6e:	d10b      	bne.n	8006c88 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2b01      	cmp	r3, #1
 8006c74:	d102      	bne.n	8006c7c <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2210      	movs	r2, #16
 8006c7a:	665a      	str	r2, [r3, #100]	; 0x64
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2b02      	cmp	r3, #2
 8006c80:	d102      	bne.n	8006c88 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2208      	movs	r2, #8
 8006c86:	665a      	str	r2, [r3, #100]	; 0x64
    }
  }
  return status;
 8006c88:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	371c      	adds	r7, #28
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c94:	4770      	bx	lr
 8006c96:	bf00      	nop

08006c98 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b087      	sub	sp, #28
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	60f8      	str	r0, [r7, #12]
 8006ca0:	60b9      	str	r1, [r7, #8]
 8006ca2:	607a      	str	r2, [r7, #4]
 8006ca4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2200      	movs	r2, #0
 8006cae:	641a      	str	r2, [r3, #64]	; 0x40
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	649a      	str	r2, [r3, #72]	; 0x48
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d003      	beq.n	8006cc6 <SAI_InitPCM+0x2e>
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	2b02      	cmp	r3, #2
 8006cc4:	d103      	bne.n	8006cce <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2201      	movs	r2, #1
 8006cca:	64da      	str	r2, [r3, #76]	; 0x4c
 8006ccc:	e002      	b.n	8006cd4 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	64da      	str	r2, [r3, #76]	; 0x4c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006ce0:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8006ce8:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	2200      	movs	r2, #0
 8006cee:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.SlotNumber      = nbslot;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	683a      	ldr	r2, [r7, #0]
 8006cf4:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006cfc:	671a      	str	r2, [r3, #112]	; 0x70

  if (protocol == SAI_PCM_SHORT)
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	2b04      	cmp	r3, #4
 8006d02:	d103      	bne.n	8006d0c <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2201      	movs	r2, #1
 8006d08:	655a      	str	r2, [r3, #84]	; 0x54
 8006d0a:	e002      	b.n	8006d12 <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	220d      	movs	r2, #13
 8006d10:	655a      	str	r2, [r3, #84]	; 0x54
  }

  switch (datasize)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2b03      	cmp	r3, #3
 8006d16:	d837      	bhi.n	8006d88 <SAI_InitPCM+0xf0>
 8006d18:	a201      	add	r2, pc, #4	; (adr r2, 8006d20 <SAI_InitPCM+0x88>)
 8006d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d1e:	bf00      	nop
 8006d20:	08006d31 	.word	0x08006d31
 8006d24:	08006d47 	.word	0x08006d47
 8006d28:	08006d5d 	.word	0x08006d5d
 8006d2c:	08006d73 	.word	0x08006d73
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	2280      	movs	r2, #128	; 0x80
 8006d34:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	011a      	lsls	r2, r3, #4
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2240      	movs	r2, #64	; 0x40
 8006d42:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8006d44:	e023      	b.n	8006d8e <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2280      	movs	r2, #128	; 0x80
 8006d4a:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	015a      	lsls	r2, r3, #5
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2280      	movs	r2, #128	; 0x80
 8006d58:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8006d5a:	e018      	b.n	8006d8e <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	22c0      	movs	r2, #192	; 0xc0
 8006d60:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	015a      	lsls	r2, r3, #5
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2280      	movs	r2, #128	; 0x80
 8006d6e:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8006d70:	e00d      	b.n	8006d8e <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	22e0      	movs	r2, #224	; 0xe0
 8006d76:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	015a      	lsls	r2, r3, #5
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2280      	movs	r2, #128	; 0x80
 8006d84:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8006d86:	e002      	b.n	8006d8e <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	75fb      	strb	r3, [r7, #23]
      break;
 8006d8c:	bf00      	nop
  }

  return status;
 8006d8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	371c      	adds	r7, #28
 8006d94:	46bd      	mov	sp, r7
 8006d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9a:	4770      	bx	lr

08006d9c <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b085      	sub	sp, #20
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8006da4:	4b18      	ldr	r3, [pc, #96]	; (8006e08 <SAI_Disable+0x6c>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a18      	ldr	r2, [pc, #96]	; (8006e0c <SAI_Disable+0x70>)
 8006daa:	fba2 2303 	umull	r2, r3, r2, r3
 8006dae:	0b1b      	lsrs	r3, r3, #12
 8006db0:	009b      	lsls	r3, r3, #2
 8006db2:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8006db4:	2300      	movs	r3, #0
 8006db6:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	681a      	ldr	r2, [r3, #0]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006dc6:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d10a      	bne.n	8006de4 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dd4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      status = HAL_TIMEOUT;
 8006dde:	2303      	movs	r3, #3
 8006de0:	72fb      	strb	r3, [r7, #11]
      break;
 8006de2:	e009      	b.n	8006df8 <SAI_Disable+0x5c>
    }
    count--;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	3b01      	subs	r3, #1
 8006de8:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d1e7      	bne.n	8006dc8 <SAI_Disable+0x2c>

  return status;
 8006df8:	7afb      	ldrb	r3, [r7, #11]
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3714      	adds	r7, #20
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e04:	4770      	bx	lr
 8006e06:	bf00      	nop
 8006e08:	20000008 	.word	0x20000008
 8006e0c:	95cbec1b 	.word	0x95cbec1b

08006e10 <HAL_SMBUS_Init>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_Init(SMBUS_HandleTypeDef *hsmbus)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b082      	sub	sp, #8
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  /* Check the SMBUS handle allocation */
  if (hsmbus == NULL)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d101      	bne.n	8006e22 <HAL_SMBUS_Init+0x12>
  {
    return HAL_ERROR;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	e0aa      	b.n	8006f78 <HAL_SMBUS_Init+0x168>
  assert_param(IS_SMBUS_GENERAL_CALL(hsmbus->Init.GeneralCallMode));
  assert_param(IS_SMBUS_NO_STRETCH(hsmbus->Init.NoStretchMode));
  assert_param(IS_SMBUS_PEC(hsmbus->Init.PacketErrorCheckMode));
  assert_param(IS_SMBUS_PERIPHERAL_MODE(hsmbus->Init.PeripheralMode));

  if (hsmbus->State == HAL_SMBUS_STATE_RESET)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d106      	bne.n	8006e38 <HAL_SMBUS_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hsmbus->Lock = HAL_UNLOCKED;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hsmbus->MspInitCallback(hsmbus);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_SMBUS_MspInit(hsmbus);
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f7fa fdb8 	bl	80019a8 <HAL_SMBUS_MspInit>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
  }

  hsmbus->State = HAL_SMBUS_STATE_BUSY;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2202      	movs	r2, #2
 8006e3c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Disable the selected SMBUS peripheral */
  __HAL_SMBUS_DISABLE(hsmbus);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	681a      	ldr	r2, [r3, #0]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f022 0201 	bic.w	r2, r2, #1
 8006e4c:	601a      	str	r2, [r3, #0]

  /*---------------------------- SMBUSx TIMINGR Configuration ------------------------*/
  /* Configure SMBUSx: Frequency range */
  hsmbus->Instance->TIMINGR = hsmbus->Init.Timing & TIMING_CLEAR_MASK;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	685a      	ldr	r2, [r3, #4]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006e5a:	611a      	str	r2, [r3, #16]

  /*---------------------------- SMBUSx TIMEOUTR Configuration ------------------------*/
  /* Configure SMBUSx: Bus Timeout  */
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TIMOUTEN;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	695a      	ldr	r2, [r3, #20]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006e6a:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TEXTEN;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	695a      	ldr	r2, [r3, #20]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006e7a:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR = hsmbus->Init.SMBusTimeout;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	687a      	ldr	r2, [r7, #4]
 8006e82:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006e84:	615a      	str	r2, [r3, #20]

  /*---------------------------- SMBUSx OAR1 Configuration -----------------------*/
  /* Configure SMBUSx: Own Address1 and ack own address1 mode */
  hsmbus->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	689a      	ldr	r2, [r3, #8]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006e94:	609a      	str	r2, [r3, #8]

  if (hsmbus->Init.OwnAddress1 != 0UL)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	68db      	ldr	r3, [r3, #12]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d012      	beq.n	8006ec4 <HAL_SMBUS_Init+0xb4>
  {
    if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_7BIT)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	691b      	ldr	r3, [r3, #16]
 8006ea2:	2b01      	cmp	r3, #1
 8006ea4:	d107      	bne.n	8006eb6 <HAL_SMBUS_Init+0xa6>
    {
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | hsmbus->Init.OwnAddress1);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	68da      	ldr	r2, [r3, #12]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006eb2:	609a      	str	r2, [r3, #8]
 8006eb4:	e006      	b.n	8006ec4 <HAL_SMBUS_Init+0xb4>
    }
    else /* SMBUS_ADDRESSINGMODE_10BIT */
    {
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hsmbus->Init.OwnAddress1);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	68da      	ldr	r2, [r3, #12]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006ec2:	609a      	str	r2, [r3, #8]
    }
  }

  /*---------------------------- SMBUSx CR2 Configuration ------------------------*/
  /* Configure SMBUSx: Addressing Master mode */
  if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_10BIT)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	691b      	ldr	r3, [r3, #16]
 8006ec8:	2b02      	cmp	r3, #2
 8006eca:	d104      	bne.n	8006ed6 <HAL_SMBUS_Init+0xc6>
  {
    hsmbus->Instance->CR2 = (I2C_CR2_ADD10);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ed4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process) */
  /* AUTOEND and NACK bit will be manage during Transfer process */
  hsmbus->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	687a      	ldr	r2, [r7, #4]
 8006ede:	6812      	ldr	r2, [r2, #0]
 8006ee0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006ee4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ee8:	6053      	str	r3, [r2, #4]

  /*---------------------------- SMBUSx OAR2 Configuration -----------------------*/
  /* Configure SMBUSx: Dual mode and Own Address2 */
  hsmbus->Instance->OAR2 = (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2 | \
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	695a      	ldr	r2, [r3, #20]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	699b      	ldr	r3, [r3, #24]
 8006ef2:	ea42 0103 	orr.w	r1, r2, r3
                            (hsmbus->Init.OwnAddress2Masks << 8U));
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	69db      	ldr	r3, [r3, #28]
 8006efa:	021a      	lsls	r2, r3, #8
  hsmbus->Instance->OAR2 = (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2 | \
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	430a      	orrs	r2, r1
 8006f02:	60da      	str	r2, [r3, #12]

  /*---------------------------- SMBUSx CR1 Configuration ------------------------*/
  /* Configure SMBUSx: Generalcall and NoStretch mode */
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6a1a      	ldr	r2, [r3, #32]
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f0c:	431a      	orrs	r2, r3
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 8006f12:	431a      	orrs	r2, r3
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f18:	ea42 0103 	orr.w	r1, r2, r3
                           hsmbus->Init.AnalogFilter);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	689a      	ldr	r2, [r3, #8]
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 8006f24:	430a      	orrs	r2, r1
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 8006f26:	601a      	str	r2, [r3, #0]

  /* Enable Slave Byte Control only in case of Packet Error Check is enabled
     and SMBUS Peripheral is set in Slave mode */
  if ((hsmbus->Init.PacketErrorCheckMode == SMBUS_PEC_ENABLE) && \
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f2c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006f30:	d110      	bne.n	8006f54 <HAL_SMBUS_Init+0x144>
      ((hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE) || \
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  if ((hsmbus->Init.PacketErrorCheckMode == SMBUS_PEC_ENABLE) && \
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d004      	beq.n	8006f44 <HAL_SMBUS_Init+0x134>
       (hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE_ARP)))
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      ((hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE) || \
 8006f3e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006f42:	d107      	bne.n	8006f54 <HAL_SMBUS_Init+0x144>
  {
    hsmbus->Instance->CR1 |= I2C_CR1_SBC;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	681a      	ldr	r2, [r3, #0]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006f52:	601a      	str	r2, [r3, #0]
  }

  /* Enable the selected SMBUS peripheral */
  __HAL_SMBUS_ENABLE(hsmbus);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	681a      	ldr	r2, [r3, #0]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f042 0201 	orr.w	r2, r2, #1
 8006f62:	601a      	str	r2, [r3, #0]

  hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2200      	movs	r2, #0
 8006f68:	64da      	str	r2, [r3, #76]	; 0x4c
  hsmbus->PreviousState = HAL_SMBUS_STATE_READY;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2201      	movs	r2, #1
 8006f6e:	641a      	str	r2, [r3, #64]	; 0x40
  hsmbus->State = HAL_SMBUS_STATE_READY;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2201      	movs	r2, #1
 8006f74:	649a      	str	r2, [r3, #72]	; 0x48

  return HAL_OK;
 8006f76:	2300      	movs	r3, #0
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	3708      	adds	r7, #8
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}

08006f80 <HAL_SMBUS_EnableAlert_IT>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUSx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_EnableAlert_IT(SMBUS_HandleTypeDef *hsmbus)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b082      	sub	sp, #8
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  /* Enable SMBus alert */
  hsmbus->Instance->CR1 |= I2C_CR1_ALERTEN;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	681a      	ldr	r2, [r3, #0]
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8006f96:	601a      	str	r2, [r3, #0]

  /* Clear ALERT flag */
  __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_ALERT);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006fa0:	61da      	str	r2, [r3, #28]

  /* Enable Alert Interrupt */
  SMBUS_Enable_IRQ(hsmbus, SMBUS_IT_ALERT);
 8006fa2:	2180      	movs	r1, #128	; 0x80
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f000 f805 	bl	8006fb4 <SMBUS_Enable_IRQ>

  return HAL_OK;
 8006faa:	2300      	movs	r3, #0
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	3708      	adds	r7, #8
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bd80      	pop	{r7, pc}

08006fb4 <SMBUS_Enable_IRQ>:
  *                the configuration information for the specified SMBUS.
  * @param  InterruptRequest Value of @ref SMBUS_Interrupt_configuration_definition.
  * @retval HAL status
  */
static void SMBUS_Enable_IRQ(SMBUS_HandleTypeDef *hsmbus, uint32_t InterruptRequest)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b085      	sub	sp, #20
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
 8006fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpisr = 0UL;
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & SMBUS_IT_ALERT) == SMBUS_IT_ALERT)
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d003      	beq.n	8006fd4 <SMBUS_Enable_IRQ+0x20>
  {
    /* Enable ERR interrupt */
    tmpisr |= SMBUS_IT_ERRI;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fd2:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_ADDR) == SMBUS_IT_ADDR)
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006fda:	2b38      	cmp	r3, #56	; 0x38
 8006fdc:	d103      	bne.n	8006fe6 <SMBUS_Enable_IRQ+0x32>
  {
    /* Enable ADDR, STOP interrupt */
    tmpisr |= SMBUS_IT_ADDRI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_ERRI;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8006fe4:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_TX) == SMBUS_IT_TX)
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8006fec:	2bf2      	cmp	r3, #242	; 0xf2
 8006fee:	d103      	bne.n	8006ff8 <SMBUS_Enable_IRQ+0x44>
  {
    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    tmpisr |= SMBUS_IT_ERRI | SMBUS_IT_TCI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_TXI;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8006ff6:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_RX) == SMBUS_IT_RX)
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	f003 03d4 	and.w	r3, r3, #212	; 0xd4
 8006ffe:	2bd4      	cmp	r3, #212	; 0xd4
 8007000:	d103      	bne.n	800700a <SMBUS_Enable_IRQ+0x56>
  {
    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    tmpisr |= SMBUS_IT_ERRI | SMBUS_IT_TCI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_RXI;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8007008:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of SMBUS interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_SMBUS_ENABLE_IT(hsmbus, tmpisr);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	6819      	ldr	r1, [r3, #0]
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	68fa      	ldr	r2, [r7, #12]
 8007016:	430a      	orrs	r2, r1
 8007018:	601a      	str	r2, [r3, #0]
}
 800701a:	bf00      	nop
 800701c:	3714      	adds	r7, #20
 800701e:	46bd      	mov	sp, r7
 8007020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007024:	4770      	bx	lr

08007026 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007026:	b580      	push	{r7, lr}
 8007028:	b084      	sub	sp, #16
 800702a:	af00      	add	r7, sp, #0
 800702c:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d101      	bne.n	8007038 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007034:	2301      	movs	r3, #1
 8007036:	e095      	b.n	8007164 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800703c:	2b00      	cmp	r3, #0
 800703e:	d108      	bne.n	8007052 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007048:	d009      	beq.n	800705e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2200      	movs	r2, #0
 800704e:	61da      	str	r2, [r3, #28]
 8007050:	e005      	b.n	800705e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2200      	movs	r2, #0
 8007056:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2200      	movs	r2, #0
 800705c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2200      	movs	r2, #0
 8007062:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800706a:	b2db      	uxtb	r3, r3
 800706c:	2b00      	cmp	r3, #0
 800706e:	d106      	bne.n	800707e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2200      	movs	r2, #0
 8007074:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f7fa fe23 	bl	8001cc4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2202      	movs	r2, #2
 8007082:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	681a      	ldr	r2, [r3, #0]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007094:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	68db      	ldr	r3, [r3, #12]
 800709a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800709e:	d902      	bls.n	80070a6 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80070a0:	2300      	movs	r3, #0
 80070a2:	60fb      	str	r3, [r7, #12]
 80070a4:	e002      	b.n	80070ac <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80070a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80070aa:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	68db      	ldr	r3, [r3, #12]
 80070b0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80070b4:	d007      	beq.n	80070c6 <HAL_SPI_Init+0xa0>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	68db      	ldr	r3, [r3, #12]
 80070ba:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80070be:	d002      	beq.n	80070c6 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2200      	movs	r2, #0
 80070c4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	689b      	ldr	r3, [r3, #8]
 80070d2:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80070d6:	431a      	orrs	r2, r3
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	691b      	ldr	r3, [r3, #16]
 80070dc:	f003 0302 	and.w	r3, r3, #2
 80070e0:	431a      	orrs	r2, r3
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	695b      	ldr	r3, [r3, #20]
 80070e6:	f003 0301 	and.w	r3, r3, #1
 80070ea:	431a      	orrs	r2, r3
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	699b      	ldr	r3, [r3, #24]
 80070f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80070f4:	431a      	orrs	r2, r3
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	69db      	ldr	r3, [r3, #28]
 80070fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80070fe:	431a      	orrs	r2, r3
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6a1b      	ldr	r3, [r3, #32]
 8007104:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007108:	ea42 0103 	orr.w	r1, r2, r3
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007110:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	430a      	orrs	r2, r1
 800711a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	699b      	ldr	r3, [r3, #24]
 8007120:	0c1b      	lsrs	r3, r3, #16
 8007122:	f003 0204 	and.w	r2, r3, #4
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800712a:	f003 0310 	and.w	r3, r3, #16
 800712e:	431a      	orrs	r2, r3
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007134:	f003 0308 	and.w	r3, r3, #8
 8007138:	431a      	orrs	r2, r3
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	68db      	ldr	r3, [r3, #12]
 800713e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007142:	ea42 0103 	orr.w	r1, r2, r3
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	430a      	orrs	r2, r1
 8007152:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2200      	movs	r2, #0
 8007158:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2201      	movs	r2, #1
 800715e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007162:	2300      	movs	r3, #0
}
 8007164:	4618      	mov	r0, r3
 8007166:	3710      	adds	r7, #16
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}

0800716c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b082      	sub	sp, #8
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d101      	bne.n	800717e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800717a:	2301      	movs	r3, #1
 800717c:	e049      	b.n	8007212 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007184:	b2db      	uxtb	r3, r3
 8007186:	2b00      	cmp	r3, #0
 8007188:	d106      	bne.n	8007198 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2200      	movs	r2, #0
 800718e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f7fa fe0a 	bl	8001dac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2202      	movs	r2, #2
 800719c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681a      	ldr	r2, [r3, #0]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	3304      	adds	r3, #4
 80071a8:	4619      	mov	r1, r3
 80071aa:	4610      	mov	r0, r2
 80071ac:	f000 fb70 	bl	8007890 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2201      	movs	r2, #1
 80071b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2201      	movs	r2, #1
 80071bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2201      	movs	r2, #1
 80071c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2201      	movs	r2, #1
 80071cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2201      	movs	r2, #1
 80071d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2201      	movs	r2, #1
 80071dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2201      	movs	r2, #1
 80071e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2201      	movs	r2, #1
 80071ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2201      	movs	r2, #1
 80071f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2201      	movs	r2, #1
 80071fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2201      	movs	r2, #1
 8007204:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2201      	movs	r2, #1
 800720c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007210:	2300      	movs	r3, #0
}
 8007212:	4618      	mov	r0, r3
 8007214:	3708      	adds	r7, #8
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}

0800721a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800721a:	b580      	push	{r7, lr}
 800721c:	b082      	sub	sp, #8
 800721e:	af00      	add	r7, sp, #0
 8007220:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d101      	bne.n	800722c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007228:	2301      	movs	r3, #1
 800722a:	e049      	b.n	80072c0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007232:	b2db      	uxtb	r3, r3
 8007234:	2b00      	cmp	r3, #0
 8007236:	d106      	bne.n	8007246 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2200      	movs	r2, #0
 800723c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f7fa fe39 	bl	8001eb8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2202      	movs	r2, #2
 800724a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681a      	ldr	r2, [r3, #0]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	3304      	adds	r3, #4
 8007256:	4619      	mov	r1, r3
 8007258:	4610      	mov	r0, r2
 800725a:	f000 fb19 	bl	8007890 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2201      	movs	r2, #1
 8007262:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2201      	movs	r2, #1
 800726a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2201      	movs	r2, #1
 8007272:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2201      	movs	r2, #1
 800727a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2201      	movs	r2, #1
 8007282:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2201      	movs	r2, #1
 800728a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2201      	movs	r2, #1
 8007292:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2201      	movs	r2, #1
 800729a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2201      	movs	r2, #1
 80072a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2201      	movs	r2, #1
 80072aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2201      	movs	r2, #1
 80072b2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2201      	movs	r2, #1
 80072ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80072be:	2300      	movs	r3, #0
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	3708      	adds	r7, #8
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}

080072c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b084      	sub	sp, #16
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
 80072d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d109      	bne.n	80072ec <HAL_TIM_PWM_Start+0x24>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80072de:	b2db      	uxtb	r3, r3
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	bf14      	ite	ne
 80072e4:	2301      	movne	r3, #1
 80072e6:	2300      	moveq	r3, #0
 80072e8:	b2db      	uxtb	r3, r3
 80072ea:	e03c      	b.n	8007366 <HAL_TIM_PWM_Start+0x9e>
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	2b04      	cmp	r3, #4
 80072f0:	d109      	bne.n	8007306 <HAL_TIM_PWM_Start+0x3e>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80072f8:	b2db      	uxtb	r3, r3
 80072fa:	2b01      	cmp	r3, #1
 80072fc:	bf14      	ite	ne
 80072fe:	2301      	movne	r3, #1
 8007300:	2300      	moveq	r3, #0
 8007302:	b2db      	uxtb	r3, r3
 8007304:	e02f      	b.n	8007366 <HAL_TIM_PWM_Start+0x9e>
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	2b08      	cmp	r3, #8
 800730a:	d109      	bne.n	8007320 <HAL_TIM_PWM_Start+0x58>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007312:	b2db      	uxtb	r3, r3
 8007314:	2b01      	cmp	r3, #1
 8007316:	bf14      	ite	ne
 8007318:	2301      	movne	r3, #1
 800731a:	2300      	moveq	r3, #0
 800731c:	b2db      	uxtb	r3, r3
 800731e:	e022      	b.n	8007366 <HAL_TIM_PWM_Start+0x9e>
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	2b0c      	cmp	r3, #12
 8007324:	d109      	bne.n	800733a <HAL_TIM_PWM_Start+0x72>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800732c:	b2db      	uxtb	r3, r3
 800732e:	2b01      	cmp	r3, #1
 8007330:	bf14      	ite	ne
 8007332:	2301      	movne	r3, #1
 8007334:	2300      	moveq	r3, #0
 8007336:	b2db      	uxtb	r3, r3
 8007338:	e015      	b.n	8007366 <HAL_TIM_PWM_Start+0x9e>
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	2b10      	cmp	r3, #16
 800733e:	d109      	bne.n	8007354 <HAL_TIM_PWM_Start+0x8c>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007346:	b2db      	uxtb	r3, r3
 8007348:	2b01      	cmp	r3, #1
 800734a:	bf14      	ite	ne
 800734c:	2301      	movne	r3, #1
 800734e:	2300      	moveq	r3, #0
 8007350:	b2db      	uxtb	r3, r3
 8007352:	e008      	b.n	8007366 <HAL_TIM_PWM_Start+0x9e>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800735a:	b2db      	uxtb	r3, r3
 800735c:	2b01      	cmp	r3, #1
 800735e:	bf14      	ite	ne
 8007360:	2301      	movne	r3, #1
 8007362:	2300      	moveq	r3, #0
 8007364:	b2db      	uxtb	r3, r3
 8007366:	2b00      	cmp	r3, #0
 8007368:	d001      	beq.n	800736e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800736a:	2301      	movs	r3, #1
 800736c:	e09c      	b.n	80074a8 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d104      	bne.n	800737e <HAL_TIM_PWM_Start+0xb6>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2202      	movs	r2, #2
 8007378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800737c:	e023      	b.n	80073c6 <HAL_TIM_PWM_Start+0xfe>
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	2b04      	cmp	r3, #4
 8007382:	d104      	bne.n	800738e <HAL_TIM_PWM_Start+0xc6>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2202      	movs	r2, #2
 8007388:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800738c:	e01b      	b.n	80073c6 <HAL_TIM_PWM_Start+0xfe>
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	2b08      	cmp	r3, #8
 8007392:	d104      	bne.n	800739e <HAL_TIM_PWM_Start+0xd6>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2202      	movs	r2, #2
 8007398:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800739c:	e013      	b.n	80073c6 <HAL_TIM_PWM_Start+0xfe>
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	2b0c      	cmp	r3, #12
 80073a2:	d104      	bne.n	80073ae <HAL_TIM_PWM_Start+0xe6>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2202      	movs	r2, #2
 80073a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80073ac:	e00b      	b.n	80073c6 <HAL_TIM_PWM_Start+0xfe>
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	2b10      	cmp	r3, #16
 80073b2:	d104      	bne.n	80073be <HAL_TIM_PWM_Start+0xf6>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2202      	movs	r2, #2
 80073b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80073bc:	e003      	b.n	80073c6 <HAL_TIM_PWM_Start+0xfe>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2202      	movs	r2, #2
 80073c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	2201      	movs	r2, #1
 80073cc:	6839      	ldr	r1, [r7, #0]
 80073ce:	4618      	mov	r0, r3
 80073d0:	f000 fe68 	bl	80080a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a35      	ldr	r2, [pc, #212]	; (80074b0 <HAL_TIM_PWM_Start+0x1e8>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d013      	beq.n	8007406 <HAL_TIM_PWM_Start+0x13e>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4a34      	ldr	r2, [pc, #208]	; (80074b4 <HAL_TIM_PWM_Start+0x1ec>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d00e      	beq.n	8007406 <HAL_TIM_PWM_Start+0x13e>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4a32      	ldr	r2, [pc, #200]	; (80074b8 <HAL_TIM_PWM_Start+0x1f0>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d009      	beq.n	8007406 <HAL_TIM_PWM_Start+0x13e>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4a31      	ldr	r2, [pc, #196]	; (80074bc <HAL_TIM_PWM_Start+0x1f4>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d004      	beq.n	8007406 <HAL_TIM_PWM_Start+0x13e>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4a2f      	ldr	r2, [pc, #188]	; (80074c0 <HAL_TIM_PWM_Start+0x1f8>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d101      	bne.n	800740a <HAL_TIM_PWM_Start+0x142>
 8007406:	2301      	movs	r3, #1
 8007408:	e000      	b.n	800740c <HAL_TIM_PWM_Start+0x144>
 800740a:	2300      	movs	r3, #0
 800740c:	2b00      	cmp	r3, #0
 800740e:	d007      	beq.n	8007420 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800741e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a22      	ldr	r2, [pc, #136]	; (80074b0 <HAL_TIM_PWM_Start+0x1e8>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d01d      	beq.n	8007466 <HAL_TIM_PWM_Start+0x19e>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007432:	d018      	beq.n	8007466 <HAL_TIM_PWM_Start+0x19e>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a22      	ldr	r2, [pc, #136]	; (80074c4 <HAL_TIM_PWM_Start+0x1fc>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d013      	beq.n	8007466 <HAL_TIM_PWM_Start+0x19e>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4a21      	ldr	r2, [pc, #132]	; (80074c8 <HAL_TIM_PWM_Start+0x200>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d00e      	beq.n	8007466 <HAL_TIM_PWM_Start+0x19e>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a1f      	ldr	r2, [pc, #124]	; (80074cc <HAL_TIM_PWM_Start+0x204>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d009      	beq.n	8007466 <HAL_TIM_PWM_Start+0x19e>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4a17      	ldr	r2, [pc, #92]	; (80074b4 <HAL_TIM_PWM_Start+0x1ec>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d004      	beq.n	8007466 <HAL_TIM_PWM_Start+0x19e>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a15      	ldr	r2, [pc, #84]	; (80074b8 <HAL_TIM_PWM_Start+0x1f0>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d115      	bne.n	8007492 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	689a      	ldr	r2, [r3, #8]
 800746c:	4b18      	ldr	r3, [pc, #96]	; (80074d0 <HAL_TIM_PWM_Start+0x208>)
 800746e:	4013      	ands	r3, r2
 8007470:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	2b06      	cmp	r3, #6
 8007476:	d015      	beq.n	80074a4 <HAL_TIM_PWM_Start+0x1dc>
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800747e:	d011      	beq.n	80074a4 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	681a      	ldr	r2, [r3, #0]
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f042 0201 	orr.w	r2, r2, #1
 800748e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007490:	e008      	b.n	80074a4 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	681a      	ldr	r2, [r3, #0]
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f042 0201 	orr.w	r2, r2, #1
 80074a0:	601a      	str	r2, [r3, #0]
 80074a2:	e000      	b.n	80074a6 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074a4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80074a6:	2300      	movs	r3, #0
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3710      	adds	r7, #16
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}
 80074b0:	40012c00 	.word	0x40012c00
 80074b4:	40013400 	.word	0x40013400
 80074b8:	40014000 	.word	0x40014000
 80074bc:	40014400 	.word	0x40014400
 80074c0:	40014800 	.word	0x40014800
 80074c4:	40000400 	.word	0x40000400
 80074c8:	40000800 	.word	0x40000800
 80074cc:	40000c00 	.word	0x40000c00
 80074d0:	00010007 	.word	0x00010007

080074d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b086      	sub	sp, #24
 80074d8:	af00      	add	r7, sp, #0
 80074da:	60f8      	str	r0, [r7, #12]
 80074dc:	60b9      	str	r1, [r7, #8]
 80074de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80074e0:	2300      	movs	r3, #0
 80074e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074ea:	2b01      	cmp	r3, #1
 80074ec:	d101      	bne.n	80074f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80074ee:	2302      	movs	r3, #2
 80074f0:	e0ff      	b.n	80076f2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	2201      	movs	r2, #1
 80074f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2b14      	cmp	r3, #20
 80074fe:	f200 80f0 	bhi.w	80076e2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007502:	a201      	add	r2, pc, #4	; (adr r2, 8007508 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007508:	0800755d 	.word	0x0800755d
 800750c:	080076e3 	.word	0x080076e3
 8007510:	080076e3 	.word	0x080076e3
 8007514:	080076e3 	.word	0x080076e3
 8007518:	0800759d 	.word	0x0800759d
 800751c:	080076e3 	.word	0x080076e3
 8007520:	080076e3 	.word	0x080076e3
 8007524:	080076e3 	.word	0x080076e3
 8007528:	080075df 	.word	0x080075df
 800752c:	080076e3 	.word	0x080076e3
 8007530:	080076e3 	.word	0x080076e3
 8007534:	080076e3 	.word	0x080076e3
 8007538:	0800761f 	.word	0x0800761f
 800753c:	080076e3 	.word	0x080076e3
 8007540:	080076e3 	.word	0x080076e3
 8007544:	080076e3 	.word	0x080076e3
 8007548:	08007661 	.word	0x08007661
 800754c:	080076e3 	.word	0x080076e3
 8007550:	080076e3 	.word	0x080076e3
 8007554:	080076e3 	.word	0x080076e3
 8007558:	080076a1 	.word	0x080076a1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	68b9      	ldr	r1, [r7, #8]
 8007562:	4618      	mov	r0, r3
 8007564:	f000 fa2e 	bl	80079c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	699a      	ldr	r2, [r3, #24]
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f042 0208 	orr.w	r2, r2, #8
 8007576:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	699a      	ldr	r2, [r3, #24]
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f022 0204 	bic.w	r2, r2, #4
 8007586:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	6999      	ldr	r1, [r3, #24]
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	691a      	ldr	r2, [r3, #16]
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	430a      	orrs	r2, r1
 8007598:	619a      	str	r2, [r3, #24]
      break;
 800759a:	e0a5      	b.n	80076e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	68b9      	ldr	r1, [r7, #8]
 80075a2:	4618      	mov	r0, r3
 80075a4:	f000 fa9e 	bl	8007ae4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	699a      	ldr	r2, [r3, #24]
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80075b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	699a      	ldr	r2, [r3, #24]
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	6999      	ldr	r1, [r3, #24]
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	691b      	ldr	r3, [r3, #16]
 80075d2:	021a      	lsls	r2, r3, #8
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	430a      	orrs	r2, r1
 80075da:	619a      	str	r2, [r3, #24]
      break;
 80075dc:	e084      	b.n	80076e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	68b9      	ldr	r1, [r7, #8]
 80075e4:	4618      	mov	r0, r3
 80075e6:	f000 fb07 	bl	8007bf8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	69da      	ldr	r2, [r3, #28]
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f042 0208 	orr.w	r2, r2, #8
 80075f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	69da      	ldr	r2, [r3, #28]
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f022 0204 	bic.w	r2, r2, #4
 8007608:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	69d9      	ldr	r1, [r3, #28]
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	691a      	ldr	r2, [r3, #16]
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	430a      	orrs	r2, r1
 800761a:	61da      	str	r2, [r3, #28]
      break;
 800761c:	e064      	b.n	80076e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	68b9      	ldr	r1, [r7, #8]
 8007624:	4618      	mov	r0, r3
 8007626:	f000 fb6f 	bl	8007d08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	69da      	ldr	r2, [r3, #28]
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007638:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	69da      	ldr	r2, [r3, #28]
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007648:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	69d9      	ldr	r1, [r3, #28]
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	691b      	ldr	r3, [r3, #16]
 8007654:	021a      	lsls	r2, r3, #8
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	430a      	orrs	r2, r1
 800765c:	61da      	str	r2, [r3, #28]
      break;
 800765e:	e043      	b.n	80076e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	68b9      	ldr	r1, [r7, #8]
 8007666:	4618      	mov	r0, r3
 8007668:	f000 fbb8 	bl	8007ddc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f042 0208 	orr.w	r2, r2, #8
 800767a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f022 0204 	bic.w	r2, r2, #4
 800768a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	691a      	ldr	r2, [r3, #16]
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	430a      	orrs	r2, r1
 800769c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800769e:	e023      	b.n	80076e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	68b9      	ldr	r1, [r7, #8]
 80076a6:	4618      	mov	r0, r3
 80076a8:	f000 fbfc 	bl	8007ea4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80076ba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076ca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	691b      	ldr	r3, [r3, #16]
 80076d6:	021a      	lsls	r2, r3, #8
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	430a      	orrs	r2, r1
 80076de:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80076e0:	e002      	b.n	80076e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80076e2:	2301      	movs	r3, #1
 80076e4:	75fb      	strb	r3, [r7, #23]
      break;
 80076e6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	2200      	movs	r2, #0
 80076ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80076f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	3718      	adds	r7, #24
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}
 80076fa:	bf00      	nop

080076fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b084      	sub	sp, #16
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
 8007704:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007706:	2300      	movs	r3, #0
 8007708:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007710:	2b01      	cmp	r3, #1
 8007712:	d101      	bne.n	8007718 <HAL_TIM_ConfigClockSource+0x1c>
 8007714:	2302      	movs	r3, #2
 8007716:	e0b6      	b.n	8007886 <HAL_TIM_ConfigClockSource+0x18a>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2201      	movs	r2, #1
 800771c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2202      	movs	r2, #2
 8007724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	689b      	ldr	r3, [r3, #8]
 800772e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007736:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800773a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007742:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	68ba      	ldr	r2, [r7, #8]
 800774a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007754:	d03e      	beq.n	80077d4 <HAL_TIM_ConfigClockSource+0xd8>
 8007756:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800775a:	f200 8087 	bhi.w	800786c <HAL_TIM_ConfigClockSource+0x170>
 800775e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007762:	f000 8086 	beq.w	8007872 <HAL_TIM_ConfigClockSource+0x176>
 8007766:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800776a:	d87f      	bhi.n	800786c <HAL_TIM_ConfigClockSource+0x170>
 800776c:	2b70      	cmp	r3, #112	; 0x70
 800776e:	d01a      	beq.n	80077a6 <HAL_TIM_ConfigClockSource+0xaa>
 8007770:	2b70      	cmp	r3, #112	; 0x70
 8007772:	d87b      	bhi.n	800786c <HAL_TIM_ConfigClockSource+0x170>
 8007774:	2b60      	cmp	r3, #96	; 0x60
 8007776:	d050      	beq.n	800781a <HAL_TIM_ConfigClockSource+0x11e>
 8007778:	2b60      	cmp	r3, #96	; 0x60
 800777a:	d877      	bhi.n	800786c <HAL_TIM_ConfigClockSource+0x170>
 800777c:	2b50      	cmp	r3, #80	; 0x50
 800777e:	d03c      	beq.n	80077fa <HAL_TIM_ConfigClockSource+0xfe>
 8007780:	2b50      	cmp	r3, #80	; 0x50
 8007782:	d873      	bhi.n	800786c <HAL_TIM_ConfigClockSource+0x170>
 8007784:	2b40      	cmp	r3, #64	; 0x40
 8007786:	d058      	beq.n	800783a <HAL_TIM_ConfigClockSource+0x13e>
 8007788:	2b40      	cmp	r3, #64	; 0x40
 800778a:	d86f      	bhi.n	800786c <HAL_TIM_ConfigClockSource+0x170>
 800778c:	2b30      	cmp	r3, #48	; 0x30
 800778e:	d064      	beq.n	800785a <HAL_TIM_ConfigClockSource+0x15e>
 8007790:	2b30      	cmp	r3, #48	; 0x30
 8007792:	d86b      	bhi.n	800786c <HAL_TIM_ConfigClockSource+0x170>
 8007794:	2b20      	cmp	r3, #32
 8007796:	d060      	beq.n	800785a <HAL_TIM_ConfigClockSource+0x15e>
 8007798:	2b20      	cmp	r3, #32
 800779a:	d867      	bhi.n	800786c <HAL_TIM_ConfigClockSource+0x170>
 800779c:	2b00      	cmp	r3, #0
 800779e:	d05c      	beq.n	800785a <HAL_TIM_ConfigClockSource+0x15e>
 80077a0:	2b10      	cmp	r3, #16
 80077a2:	d05a      	beq.n	800785a <HAL_TIM_ConfigClockSource+0x15e>
 80077a4:	e062      	b.n	800786c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6818      	ldr	r0, [r3, #0]
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	6899      	ldr	r1, [r3, #8]
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	685a      	ldr	r2, [r3, #4]
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	68db      	ldr	r3, [r3, #12]
 80077b6:	f000 fc55 	bl	8008064 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	689b      	ldr	r3, [r3, #8]
 80077c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80077c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	68ba      	ldr	r2, [r7, #8]
 80077d0:	609a      	str	r2, [r3, #8]
      break;
 80077d2:	e04f      	b.n	8007874 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6818      	ldr	r0, [r3, #0]
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	6899      	ldr	r1, [r3, #8]
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	685a      	ldr	r2, [r3, #4]
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	68db      	ldr	r3, [r3, #12]
 80077e4:	f000 fc3e 	bl	8008064 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	689a      	ldr	r2, [r3, #8]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80077f6:	609a      	str	r2, [r3, #8]
      break;
 80077f8:	e03c      	b.n	8007874 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6818      	ldr	r0, [r3, #0]
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	6859      	ldr	r1, [r3, #4]
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	68db      	ldr	r3, [r3, #12]
 8007806:	461a      	mov	r2, r3
 8007808:	f000 fbb2 	bl	8007f70 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	2150      	movs	r1, #80	; 0x50
 8007812:	4618      	mov	r0, r3
 8007814:	f000 fc0b 	bl	800802e <TIM_ITRx_SetConfig>
      break;
 8007818:	e02c      	b.n	8007874 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6818      	ldr	r0, [r3, #0]
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	6859      	ldr	r1, [r3, #4]
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	68db      	ldr	r3, [r3, #12]
 8007826:	461a      	mov	r2, r3
 8007828:	f000 fbd1 	bl	8007fce <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	2160      	movs	r1, #96	; 0x60
 8007832:	4618      	mov	r0, r3
 8007834:	f000 fbfb 	bl	800802e <TIM_ITRx_SetConfig>
      break;
 8007838:	e01c      	b.n	8007874 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6818      	ldr	r0, [r3, #0]
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	6859      	ldr	r1, [r3, #4]
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	68db      	ldr	r3, [r3, #12]
 8007846:	461a      	mov	r2, r3
 8007848:	f000 fb92 	bl	8007f70 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	2140      	movs	r1, #64	; 0x40
 8007852:	4618      	mov	r0, r3
 8007854:	f000 fbeb 	bl	800802e <TIM_ITRx_SetConfig>
      break;
 8007858:	e00c      	b.n	8007874 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681a      	ldr	r2, [r3, #0]
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	4619      	mov	r1, r3
 8007864:	4610      	mov	r0, r2
 8007866:	f000 fbe2 	bl	800802e <TIM_ITRx_SetConfig>
      break;
 800786a:	e003      	b.n	8007874 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800786c:	2301      	movs	r3, #1
 800786e:	73fb      	strb	r3, [r7, #15]
      break;
 8007870:	e000      	b.n	8007874 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8007872:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2201      	movs	r2, #1
 8007878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2200      	movs	r2, #0
 8007880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007884:	7bfb      	ldrb	r3, [r7, #15]
}
 8007886:	4618      	mov	r0, r3
 8007888:	3710      	adds	r7, #16
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}
	...

08007890 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007890:	b480      	push	{r7}
 8007892:	b085      	sub	sp, #20
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
 8007898:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	4a40      	ldr	r2, [pc, #256]	; (80079a4 <TIM_Base_SetConfig+0x114>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d013      	beq.n	80078d0 <TIM_Base_SetConfig+0x40>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078ae:	d00f      	beq.n	80078d0 <TIM_Base_SetConfig+0x40>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	4a3d      	ldr	r2, [pc, #244]	; (80079a8 <TIM_Base_SetConfig+0x118>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d00b      	beq.n	80078d0 <TIM_Base_SetConfig+0x40>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	4a3c      	ldr	r2, [pc, #240]	; (80079ac <TIM_Base_SetConfig+0x11c>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d007      	beq.n	80078d0 <TIM_Base_SetConfig+0x40>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	4a3b      	ldr	r2, [pc, #236]	; (80079b0 <TIM_Base_SetConfig+0x120>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d003      	beq.n	80078d0 <TIM_Base_SetConfig+0x40>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	4a3a      	ldr	r2, [pc, #232]	; (80079b4 <TIM_Base_SetConfig+0x124>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d108      	bne.n	80078e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	68fa      	ldr	r2, [r7, #12]
 80078de:	4313      	orrs	r3, r2
 80078e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	4a2f      	ldr	r2, [pc, #188]	; (80079a4 <TIM_Base_SetConfig+0x114>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d01f      	beq.n	800792a <TIM_Base_SetConfig+0x9a>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078f0:	d01b      	beq.n	800792a <TIM_Base_SetConfig+0x9a>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	4a2c      	ldr	r2, [pc, #176]	; (80079a8 <TIM_Base_SetConfig+0x118>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d017      	beq.n	800792a <TIM_Base_SetConfig+0x9a>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	4a2b      	ldr	r2, [pc, #172]	; (80079ac <TIM_Base_SetConfig+0x11c>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d013      	beq.n	800792a <TIM_Base_SetConfig+0x9a>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	4a2a      	ldr	r2, [pc, #168]	; (80079b0 <TIM_Base_SetConfig+0x120>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d00f      	beq.n	800792a <TIM_Base_SetConfig+0x9a>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	4a29      	ldr	r2, [pc, #164]	; (80079b4 <TIM_Base_SetConfig+0x124>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d00b      	beq.n	800792a <TIM_Base_SetConfig+0x9a>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	4a28      	ldr	r2, [pc, #160]	; (80079b8 <TIM_Base_SetConfig+0x128>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d007      	beq.n	800792a <TIM_Base_SetConfig+0x9a>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	4a27      	ldr	r2, [pc, #156]	; (80079bc <TIM_Base_SetConfig+0x12c>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d003      	beq.n	800792a <TIM_Base_SetConfig+0x9a>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	4a26      	ldr	r2, [pc, #152]	; (80079c0 <TIM_Base_SetConfig+0x130>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d108      	bne.n	800793c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007930:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	68db      	ldr	r3, [r3, #12]
 8007936:	68fa      	ldr	r2, [r7, #12]
 8007938:	4313      	orrs	r3, r2
 800793a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	695b      	ldr	r3, [r3, #20]
 8007946:	4313      	orrs	r3, r2
 8007948:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	68fa      	ldr	r2, [r7, #12]
 800794e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	689a      	ldr	r2, [r3, #8]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	681a      	ldr	r2, [r3, #0]
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	4a10      	ldr	r2, [pc, #64]	; (80079a4 <TIM_Base_SetConfig+0x114>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d00f      	beq.n	8007988 <TIM_Base_SetConfig+0xf8>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	4a12      	ldr	r2, [pc, #72]	; (80079b4 <TIM_Base_SetConfig+0x124>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d00b      	beq.n	8007988 <TIM_Base_SetConfig+0xf8>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	4a11      	ldr	r2, [pc, #68]	; (80079b8 <TIM_Base_SetConfig+0x128>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d007      	beq.n	8007988 <TIM_Base_SetConfig+0xf8>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	4a10      	ldr	r2, [pc, #64]	; (80079bc <TIM_Base_SetConfig+0x12c>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d003      	beq.n	8007988 <TIM_Base_SetConfig+0xf8>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	4a0f      	ldr	r2, [pc, #60]	; (80079c0 <TIM_Base_SetConfig+0x130>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d103      	bne.n	8007990 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	691a      	ldr	r2, [r3, #16]
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2201      	movs	r2, #1
 8007994:	615a      	str	r2, [r3, #20]
}
 8007996:	bf00      	nop
 8007998:	3714      	adds	r7, #20
 800799a:	46bd      	mov	sp, r7
 800799c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a0:	4770      	bx	lr
 80079a2:	bf00      	nop
 80079a4:	40012c00 	.word	0x40012c00
 80079a8:	40000400 	.word	0x40000400
 80079ac:	40000800 	.word	0x40000800
 80079b0:	40000c00 	.word	0x40000c00
 80079b4:	40013400 	.word	0x40013400
 80079b8:	40014000 	.word	0x40014000
 80079bc:	40014400 	.word	0x40014400
 80079c0:	40014800 	.word	0x40014800

080079c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80079c4:	b480      	push	{r7}
 80079c6:	b087      	sub	sp, #28
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
 80079cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6a1b      	ldr	r3, [r3, #32]
 80079d2:	f023 0201 	bic.w	r2, r3, #1
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6a1b      	ldr	r3, [r3, #32]
 80079de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	685b      	ldr	r3, [r3, #4]
 80079e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	699b      	ldr	r3, [r3, #24]
 80079ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80079f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	f023 0303 	bic.w	r3, r3, #3
 80079fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	68fa      	ldr	r2, [r7, #12]
 8007a06:	4313      	orrs	r3, r2
 8007a08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	f023 0302 	bic.w	r3, r3, #2
 8007a10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	689b      	ldr	r3, [r3, #8]
 8007a16:	697a      	ldr	r2, [r7, #20]
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	4a2c      	ldr	r2, [pc, #176]	; (8007ad0 <TIM_OC1_SetConfig+0x10c>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d00f      	beq.n	8007a44 <TIM_OC1_SetConfig+0x80>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	4a2b      	ldr	r2, [pc, #172]	; (8007ad4 <TIM_OC1_SetConfig+0x110>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d00b      	beq.n	8007a44 <TIM_OC1_SetConfig+0x80>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	4a2a      	ldr	r2, [pc, #168]	; (8007ad8 <TIM_OC1_SetConfig+0x114>)
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d007      	beq.n	8007a44 <TIM_OC1_SetConfig+0x80>
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	4a29      	ldr	r2, [pc, #164]	; (8007adc <TIM_OC1_SetConfig+0x118>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d003      	beq.n	8007a44 <TIM_OC1_SetConfig+0x80>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	4a28      	ldr	r2, [pc, #160]	; (8007ae0 <TIM_OC1_SetConfig+0x11c>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d10c      	bne.n	8007a5e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	f023 0308 	bic.w	r3, r3, #8
 8007a4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	68db      	ldr	r3, [r3, #12]
 8007a50:	697a      	ldr	r2, [r7, #20]
 8007a52:	4313      	orrs	r3, r2
 8007a54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	f023 0304 	bic.w	r3, r3, #4
 8007a5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	4a1b      	ldr	r2, [pc, #108]	; (8007ad0 <TIM_OC1_SetConfig+0x10c>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d00f      	beq.n	8007a86 <TIM_OC1_SetConfig+0xc2>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	4a1a      	ldr	r2, [pc, #104]	; (8007ad4 <TIM_OC1_SetConfig+0x110>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d00b      	beq.n	8007a86 <TIM_OC1_SetConfig+0xc2>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	4a19      	ldr	r2, [pc, #100]	; (8007ad8 <TIM_OC1_SetConfig+0x114>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d007      	beq.n	8007a86 <TIM_OC1_SetConfig+0xc2>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	4a18      	ldr	r2, [pc, #96]	; (8007adc <TIM_OC1_SetConfig+0x118>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d003      	beq.n	8007a86 <TIM_OC1_SetConfig+0xc2>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	4a17      	ldr	r2, [pc, #92]	; (8007ae0 <TIM_OC1_SetConfig+0x11c>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d111      	bne.n	8007aaa <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007a86:	693b      	ldr	r3, [r7, #16]
 8007a88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007a8e:	693b      	ldr	r3, [r7, #16]
 8007a90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007a94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	695b      	ldr	r3, [r3, #20]
 8007a9a:	693a      	ldr	r2, [r7, #16]
 8007a9c:	4313      	orrs	r3, r2
 8007a9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	699b      	ldr	r3, [r3, #24]
 8007aa4:	693a      	ldr	r2, [r7, #16]
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	693a      	ldr	r2, [r7, #16]
 8007aae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	68fa      	ldr	r2, [r7, #12]
 8007ab4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	685a      	ldr	r2, [r3, #4]
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	697a      	ldr	r2, [r7, #20]
 8007ac2:	621a      	str	r2, [r3, #32]
}
 8007ac4:	bf00      	nop
 8007ac6:	371c      	adds	r7, #28
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ace:	4770      	bx	lr
 8007ad0:	40012c00 	.word	0x40012c00
 8007ad4:	40013400 	.word	0x40013400
 8007ad8:	40014000 	.word	0x40014000
 8007adc:	40014400 	.word	0x40014400
 8007ae0:	40014800 	.word	0x40014800

08007ae4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b087      	sub	sp, #28
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
 8007aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6a1b      	ldr	r3, [r3, #32]
 8007af2:	f023 0210 	bic.w	r2, r3, #16
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6a1b      	ldr	r3, [r3, #32]
 8007afe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	685b      	ldr	r3, [r3, #4]
 8007b04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	699b      	ldr	r3, [r3, #24]
 8007b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007b12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	021b      	lsls	r3, r3, #8
 8007b26:	68fa      	ldr	r2, [r7, #12]
 8007b28:	4313      	orrs	r3, r2
 8007b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007b2c:	697b      	ldr	r3, [r7, #20]
 8007b2e:	f023 0320 	bic.w	r3, r3, #32
 8007b32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	689b      	ldr	r3, [r3, #8]
 8007b38:	011b      	lsls	r3, r3, #4
 8007b3a:	697a      	ldr	r2, [r7, #20]
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	4a28      	ldr	r2, [pc, #160]	; (8007be4 <TIM_OC2_SetConfig+0x100>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d003      	beq.n	8007b50 <TIM_OC2_SetConfig+0x6c>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	4a27      	ldr	r2, [pc, #156]	; (8007be8 <TIM_OC2_SetConfig+0x104>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d10d      	bne.n	8007b6c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	68db      	ldr	r3, [r3, #12]
 8007b5c:	011b      	lsls	r3, r3, #4
 8007b5e:	697a      	ldr	r2, [r7, #20]
 8007b60:	4313      	orrs	r3, r2
 8007b62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007b64:	697b      	ldr	r3, [r7, #20]
 8007b66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b6a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	4a1d      	ldr	r2, [pc, #116]	; (8007be4 <TIM_OC2_SetConfig+0x100>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d00f      	beq.n	8007b94 <TIM_OC2_SetConfig+0xb0>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	4a1c      	ldr	r2, [pc, #112]	; (8007be8 <TIM_OC2_SetConfig+0x104>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d00b      	beq.n	8007b94 <TIM_OC2_SetConfig+0xb0>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	4a1b      	ldr	r2, [pc, #108]	; (8007bec <TIM_OC2_SetConfig+0x108>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d007      	beq.n	8007b94 <TIM_OC2_SetConfig+0xb0>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	4a1a      	ldr	r2, [pc, #104]	; (8007bf0 <TIM_OC2_SetConfig+0x10c>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d003      	beq.n	8007b94 <TIM_OC2_SetConfig+0xb0>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	4a19      	ldr	r2, [pc, #100]	; (8007bf4 <TIM_OC2_SetConfig+0x110>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d113      	bne.n	8007bbc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007b94:	693b      	ldr	r3, [r7, #16]
 8007b96:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007b9a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007b9c:	693b      	ldr	r3, [r7, #16]
 8007b9e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007ba2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	695b      	ldr	r3, [r3, #20]
 8007ba8:	009b      	lsls	r3, r3, #2
 8007baa:	693a      	ldr	r2, [r7, #16]
 8007bac:	4313      	orrs	r3, r2
 8007bae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	699b      	ldr	r3, [r3, #24]
 8007bb4:	009b      	lsls	r3, r3, #2
 8007bb6:	693a      	ldr	r2, [r7, #16]
 8007bb8:	4313      	orrs	r3, r2
 8007bba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	693a      	ldr	r2, [r7, #16]
 8007bc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	68fa      	ldr	r2, [r7, #12]
 8007bc6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	685a      	ldr	r2, [r3, #4]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	697a      	ldr	r2, [r7, #20]
 8007bd4:	621a      	str	r2, [r3, #32]
}
 8007bd6:	bf00      	nop
 8007bd8:	371c      	adds	r7, #28
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be0:	4770      	bx	lr
 8007be2:	bf00      	nop
 8007be4:	40012c00 	.word	0x40012c00
 8007be8:	40013400 	.word	0x40013400
 8007bec:	40014000 	.word	0x40014000
 8007bf0:	40014400 	.word	0x40014400
 8007bf4:	40014800 	.word	0x40014800

08007bf8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b087      	sub	sp, #28
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
 8007c00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6a1b      	ldr	r3, [r3, #32]
 8007c06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6a1b      	ldr	r3, [r3, #32]
 8007c12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	685b      	ldr	r3, [r3, #4]
 8007c18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	69db      	ldr	r3, [r3, #28]
 8007c1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	f023 0303 	bic.w	r3, r3, #3
 8007c32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	68fa      	ldr	r2, [r7, #12]
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007c44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	689b      	ldr	r3, [r3, #8]
 8007c4a:	021b      	lsls	r3, r3, #8
 8007c4c:	697a      	ldr	r2, [r7, #20]
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	4a27      	ldr	r2, [pc, #156]	; (8007cf4 <TIM_OC3_SetConfig+0xfc>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d003      	beq.n	8007c62 <TIM_OC3_SetConfig+0x6a>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	4a26      	ldr	r2, [pc, #152]	; (8007cf8 <TIM_OC3_SetConfig+0x100>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d10d      	bne.n	8007c7e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007c68:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	68db      	ldr	r3, [r3, #12]
 8007c6e:	021b      	lsls	r3, r3, #8
 8007c70:	697a      	ldr	r2, [r7, #20]
 8007c72:	4313      	orrs	r3, r2
 8007c74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007c76:	697b      	ldr	r3, [r7, #20]
 8007c78:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007c7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	4a1c      	ldr	r2, [pc, #112]	; (8007cf4 <TIM_OC3_SetConfig+0xfc>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d00f      	beq.n	8007ca6 <TIM_OC3_SetConfig+0xae>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	4a1b      	ldr	r2, [pc, #108]	; (8007cf8 <TIM_OC3_SetConfig+0x100>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d00b      	beq.n	8007ca6 <TIM_OC3_SetConfig+0xae>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	4a1a      	ldr	r2, [pc, #104]	; (8007cfc <TIM_OC3_SetConfig+0x104>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d007      	beq.n	8007ca6 <TIM_OC3_SetConfig+0xae>
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	4a19      	ldr	r2, [pc, #100]	; (8007d00 <TIM_OC3_SetConfig+0x108>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d003      	beq.n	8007ca6 <TIM_OC3_SetConfig+0xae>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	4a18      	ldr	r2, [pc, #96]	; (8007d04 <TIM_OC3_SetConfig+0x10c>)
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d113      	bne.n	8007cce <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007ca6:	693b      	ldr	r3, [r7, #16]
 8007ca8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007cac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007cae:	693b      	ldr	r3, [r7, #16]
 8007cb0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007cb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	695b      	ldr	r3, [r3, #20]
 8007cba:	011b      	lsls	r3, r3, #4
 8007cbc:	693a      	ldr	r2, [r7, #16]
 8007cbe:	4313      	orrs	r3, r2
 8007cc0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	699b      	ldr	r3, [r3, #24]
 8007cc6:	011b      	lsls	r3, r3, #4
 8007cc8:	693a      	ldr	r2, [r7, #16]
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	693a      	ldr	r2, [r7, #16]
 8007cd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	68fa      	ldr	r2, [r7, #12]
 8007cd8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	685a      	ldr	r2, [r3, #4]
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	697a      	ldr	r2, [r7, #20]
 8007ce6:	621a      	str	r2, [r3, #32]
}
 8007ce8:	bf00      	nop
 8007cea:	371c      	adds	r7, #28
 8007cec:	46bd      	mov	sp, r7
 8007cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf2:	4770      	bx	lr
 8007cf4:	40012c00 	.word	0x40012c00
 8007cf8:	40013400 	.word	0x40013400
 8007cfc:	40014000 	.word	0x40014000
 8007d00:	40014400 	.word	0x40014400
 8007d04:	40014800 	.word	0x40014800

08007d08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b087      	sub	sp, #28
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
 8007d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6a1b      	ldr	r3, [r3, #32]
 8007d16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6a1b      	ldr	r3, [r3, #32]
 8007d22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	685b      	ldr	r3, [r3, #4]
 8007d28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	69db      	ldr	r3, [r3, #28]
 8007d2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007d36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	021b      	lsls	r3, r3, #8
 8007d4a:	68fa      	ldr	r2, [r7, #12]
 8007d4c:	4313      	orrs	r3, r2
 8007d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007d50:	693b      	ldr	r3, [r7, #16]
 8007d52:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007d56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	689b      	ldr	r3, [r3, #8]
 8007d5c:	031b      	lsls	r3, r3, #12
 8007d5e:	693a      	ldr	r2, [r7, #16]
 8007d60:	4313      	orrs	r3, r2
 8007d62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	4a18      	ldr	r2, [pc, #96]	; (8007dc8 <TIM_OC4_SetConfig+0xc0>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d00f      	beq.n	8007d8c <TIM_OC4_SetConfig+0x84>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	4a17      	ldr	r2, [pc, #92]	; (8007dcc <TIM_OC4_SetConfig+0xc4>)
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d00b      	beq.n	8007d8c <TIM_OC4_SetConfig+0x84>
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	4a16      	ldr	r2, [pc, #88]	; (8007dd0 <TIM_OC4_SetConfig+0xc8>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d007      	beq.n	8007d8c <TIM_OC4_SetConfig+0x84>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	4a15      	ldr	r2, [pc, #84]	; (8007dd4 <TIM_OC4_SetConfig+0xcc>)
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d003      	beq.n	8007d8c <TIM_OC4_SetConfig+0x84>
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	4a14      	ldr	r2, [pc, #80]	; (8007dd8 <TIM_OC4_SetConfig+0xd0>)
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d109      	bne.n	8007da0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d92:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	695b      	ldr	r3, [r3, #20]
 8007d98:	019b      	lsls	r3, r3, #6
 8007d9a:	697a      	ldr	r2, [r7, #20]
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	697a      	ldr	r2, [r7, #20]
 8007da4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	68fa      	ldr	r2, [r7, #12]
 8007daa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	685a      	ldr	r2, [r3, #4]
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	693a      	ldr	r2, [r7, #16]
 8007db8:	621a      	str	r2, [r3, #32]
}
 8007dba:	bf00      	nop
 8007dbc:	371c      	adds	r7, #28
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc4:	4770      	bx	lr
 8007dc6:	bf00      	nop
 8007dc8:	40012c00 	.word	0x40012c00
 8007dcc:	40013400 	.word	0x40013400
 8007dd0:	40014000 	.word	0x40014000
 8007dd4:	40014400 	.word	0x40014400
 8007dd8:	40014800 	.word	0x40014800

08007ddc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b087      	sub	sp, #28
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
 8007de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6a1b      	ldr	r3, [r3, #32]
 8007dea:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6a1b      	ldr	r3, [r3, #32]
 8007df6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	685b      	ldr	r3, [r3, #4]
 8007dfc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	68fa      	ldr	r2, [r7, #12]
 8007e16:	4313      	orrs	r3, r2
 8007e18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007e20:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	689b      	ldr	r3, [r3, #8]
 8007e26:	041b      	lsls	r3, r3, #16
 8007e28:	693a      	ldr	r2, [r7, #16]
 8007e2a:	4313      	orrs	r3, r2
 8007e2c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	4a17      	ldr	r2, [pc, #92]	; (8007e90 <TIM_OC5_SetConfig+0xb4>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d00f      	beq.n	8007e56 <TIM_OC5_SetConfig+0x7a>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	4a16      	ldr	r2, [pc, #88]	; (8007e94 <TIM_OC5_SetConfig+0xb8>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d00b      	beq.n	8007e56 <TIM_OC5_SetConfig+0x7a>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	4a15      	ldr	r2, [pc, #84]	; (8007e98 <TIM_OC5_SetConfig+0xbc>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d007      	beq.n	8007e56 <TIM_OC5_SetConfig+0x7a>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	4a14      	ldr	r2, [pc, #80]	; (8007e9c <TIM_OC5_SetConfig+0xc0>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d003      	beq.n	8007e56 <TIM_OC5_SetConfig+0x7a>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	4a13      	ldr	r2, [pc, #76]	; (8007ea0 <TIM_OC5_SetConfig+0xc4>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d109      	bne.n	8007e6a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007e56:	697b      	ldr	r3, [r7, #20]
 8007e58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e5c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	695b      	ldr	r3, [r3, #20]
 8007e62:	021b      	lsls	r3, r3, #8
 8007e64:	697a      	ldr	r2, [r7, #20]
 8007e66:	4313      	orrs	r3, r2
 8007e68:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	697a      	ldr	r2, [r7, #20]
 8007e6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	68fa      	ldr	r2, [r7, #12]
 8007e74:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	685a      	ldr	r2, [r3, #4]
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	693a      	ldr	r2, [r7, #16]
 8007e82:	621a      	str	r2, [r3, #32]
}
 8007e84:	bf00      	nop
 8007e86:	371c      	adds	r7, #28
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8e:	4770      	bx	lr
 8007e90:	40012c00 	.word	0x40012c00
 8007e94:	40013400 	.word	0x40013400
 8007e98:	40014000 	.word	0x40014000
 8007e9c:	40014400 	.word	0x40014400
 8007ea0:	40014800 	.word	0x40014800

08007ea4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b087      	sub	sp, #28
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
 8007eac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6a1b      	ldr	r3, [r3, #32]
 8007eb2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6a1b      	ldr	r3, [r3, #32]
 8007ebe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	685b      	ldr	r3, [r3, #4]
 8007ec4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007eca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007ed2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ed6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	021b      	lsls	r3, r3, #8
 8007ede:	68fa      	ldr	r2, [r7, #12]
 8007ee0:	4313      	orrs	r3, r2
 8007ee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007eea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	689b      	ldr	r3, [r3, #8]
 8007ef0:	051b      	lsls	r3, r3, #20
 8007ef2:	693a      	ldr	r2, [r7, #16]
 8007ef4:	4313      	orrs	r3, r2
 8007ef6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	4a18      	ldr	r2, [pc, #96]	; (8007f5c <TIM_OC6_SetConfig+0xb8>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d00f      	beq.n	8007f20 <TIM_OC6_SetConfig+0x7c>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	4a17      	ldr	r2, [pc, #92]	; (8007f60 <TIM_OC6_SetConfig+0xbc>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d00b      	beq.n	8007f20 <TIM_OC6_SetConfig+0x7c>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	4a16      	ldr	r2, [pc, #88]	; (8007f64 <TIM_OC6_SetConfig+0xc0>)
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d007      	beq.n	8007f20 <TIM_OC6_SetConfig+0x7c>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	4a15      	ldr	r2, [pc, #84]	; (8007f68 <TIM_OC6_SetConfig+0xc4>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d003      	beq.n	8007f20 <TIM_OC6_SetConfig+0x7c>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	4a14      	ldr	r2, [pc, #80]	; (8007f6c <TIM_OC6_SetConfig+0xc8>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d109      	bne.n	8007f34 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007f26:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	695b      	ldr	r3, [r3, #20]
 8007f2c:	029b      	lsls	r3, r3, #10
 8007f2e:	697a      	ldr	r2, [r7, #20]
 8007f30:	4313      	orrs	r3, r2
 8007f32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	697a      	ldr	r2, [r7, #20]
 8007f38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	68fa      	ldr	r2, [r7, #12]
 8007f3e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	685a      	ldr	r2, [r3, #4]
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	693a      	ldr	r2, [r7, #16]
 8007f4c:	621a      	str	r2, [r3, #32]
}
 8007f4e:	bf00      	nop
 8007f50:	371c      	adds	r7, #28
 8007f52:	46bd      	mov	sp, r7
 8007f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f58:	4770      	bx	lr
 8007f5a:	bf00      	nop
 8007f5c:	40012c00 	.word	0x40012c00
 8007f60:	40013400 	.word	0x40013400
 8007f64:	40014000 	.word	0x40014000
 8007f68:	40014400 	.word	0x40014400
 8007f6c:	40014800 	.word	0x40014800

08007f70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b087      	sub	sp, #28
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	60f8      	str	r0, [r7, #12]
 8007f78:	60b9      	str	r1, [r7, #8]
 8007f7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	6a1b      	ldr	r3, [r3, #32]
 8007f80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	6a1b      	ldr	r3, [r3, #32]
 8007f86:	f023 0201 	bic.w	r2, r3, #1
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	699b      	ldr	r3, [r3, #24]
 8007f92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007f94:	693b      	ldr	r3, [r7, #16]
 8007f96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007f9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	011b      	lsls	r3, r3, #4
 8007fa0:	693a      	ldr	r2, [r7, #16]
 8007fa2:	4313      	orrs	r3, r2
 8007fa4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007fa6:	697b      	ldr	r3, [r7, #20]
 8007fa8:	f023 030a 	bic.w	r3, r3, #10
 8007fac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007fae:	697a      	ldr	r2, [r7, #20]
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	4313      	orrs	r3, r2
 8007fb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	693a      	ldr	r2, [r7, #16]
 8007fba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	697a      	ldr	r2, [r7, #20]
 8007fc0:	621a      	str	r2, [r3, #32]
}
 8007fc2:	bf00      	nop
 8007fc4:	371c      	adds	r7, #28
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fcc:	4770      	bx	lr

08007fce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007fce:	b480      	push	{r7}
 8007fd0:	b087      	sub	sp, #28
 8007fd2:	af00      	add	r7, sp, #0
 8007fd4:	60f8      	str	r0, [r7, #12]
 8007fd6:	60b9      	str	r1, [r7, #8]
 8007fd8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	6a1b      	ldr	r3, [r3, #32]
 8007fde:	f023 0210 	bic.w	r2, r3, #16
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	699b      	ldr	r3, [r3, #24]
 8007fea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	6a1b      	ldr	r3, [r3, #32]
 8007ff0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007ff8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	031b      	lsls	r3, r3, #12
 8007ffe:	697a      	ldr	r2, [r7, #20]
 8008000:	4313      	orrs	r3, r2
 8008002:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008004:	693b      	ldr	r3, [r7, #16]
 8008006:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800800a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	011b      	lsls	r3, r3, #4
 8008010:	693a      	ldr	r2, [r7, #16]
 8008012:	4313      	orrs	r3, r2
 8008014:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	697a      	ldr	r2, [r7, #20]
 800801a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	693a      	ldr	r2, [r7, #16]
 8008020:	621a      	str	r2, [r3, #32]
}
 8008022:	bf00      	nop
 8008024:	371c      	adds	r7, #28
 8008026:	46bd      	mov	sp, r7
 8008028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802c:	4770      	bx	lr

0800802e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800802e:	b480      	push	{r7}
 8008030:	b085      	sub	sp, #20
 8008032:	af00      	add	r7, sp, #0
 8008034:	6078      	str	r0, [r7, #4]
 8008036:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	689b      	ldr	r3, [r3, #8]
 800803c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008044:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008046:	683a      	ldr	r2, [r7, #0]
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	4313      	orrs	r3, r2
 800804c:	f043 0307 	orr.w	r3, r3, #7
 8008050:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	68fa      	ldr	r2, [r7, #12]
 8008056:	609a      	str	r2, [r3, #8]
}
 8008058:	bf00      	nop
 800805a:	3714      	adds	r7, #20
 800805c:	46bd      	mov	sp, r7
 800805e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008062:	4770      	bx	lr

08008064 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008064:	b480      	push	{r7}
 8008066:	b087      	sub	sp, #28
 8008068:	af00      	add	r7, sp, #0
 800806a:	60f8      	str	r0, [r7, #12]
 800806c:	60b9      	str	r1, [r7, #8]
 800806e:	607a      	str	r2, [r7, #4]
 8008070:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	689b      	ldr	r3, [r3, #8]
 8008076:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008078:	697b      	ldr	r3, [r7, #20]
 800807a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800807e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	021a      	lsls	r2, r3, #8
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	431a      	orrs	r2, r3
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	4313      	orrs	r3, r2
 800808c:	697a      	ldr	r2, [r7, #20]
 800808e:	4313      	orrs	r3, r2
 8008090:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	697a      	ldr	r2, [r7, #20]
 8008096:	609a      	str	r2, [r3, #8]
}
 8008098:	bf00      	nop
 800809a:	371c      	adds	r7, #28
 800809c:	46bd      	mov	sp, r7
 800809e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a2:	4770      	bx	lr

080080a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80080a4:	b480      	push	{r7}
 80080a6:	b087      	sub	sp, #28
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	60f8      	str	r0, [r7, #12]
 80080ac:	60b9      	str	r1, [r7, #8]
 80080ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	f003 031f 	and.w	r3, r3, #31
 80080b6:	2201      	movs	r2, #1
 80080b8:	fa02 f303 	lsl.w	r3, r2, r3
 80080bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	6a1a      	ldr	r2, [r3, #32]
 80080c2:	697b      	ldr	r3, [r7, #20]
 80080c4:	43db      	mvns	r3, r3
 80080c6:	401a      	ands	r2, r3
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	6a1a      	ldr	r2, [r3, #32]
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	f003 031f 	and.w	r3, r3, #31
 80080d6:	6879      	ldr	r1, [r7, #4]
 80080d8:	fa01 f303 	lsl.w	r3, r1, r3
 80080dc:	431a      	orrs	r2, r3
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	621a      	str	r2, [r3, #32]
}
 80080e2:	bf00      	nop
 80080e4:	371c      	adds	r7, #28
 80080e6:	46bd      	mov	sp, r7
 80080e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ec:	4770      	bx	lr
	...

080080f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b085      	sub	sp, #20
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
 80080f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008100:	2b01      	cmp	r3, #1
 8008102:	d101      	bne.n	8008108 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008104:	2302      	movs	r3, #2
 8008106:	e068      	b.n	80081da <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2201      	movs	r2, #1
 800810c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2202      	movs	r2, #2
 8008114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	685b      	ldr	r3, [r3, #4]
 800811e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	689b      	ldr	r3, [r3, #8]
 8008126:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	4a2e      	ldr	r2, [pc, #184]	; (80081e8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d004      	beq.n	800813c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	4a2d      	ldr	r2, [pc, #180]	; (80081ec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008138:	4293      	cmp	r3, r2
 800813a:	d108      	bne.n	800814e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008142:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	685b      	ldr	r3, [r3, #4]
 8008148:	68fa      	ldr	r2, [r7, #12]
 800814a:	4313      	orrs	r3, r2
 800814c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008154:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	68fa      	ldr	r2, [r7, #12]
 800815c:	4313      	orrs	r3, r2
 800815e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	68fa      	ldr	r2, [r7, #12]
 8008166:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	4a1e      	ldr	r2, [pc, #120]	; (80081e8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d01d      	beq.n	80081ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800817a:	d018      	beq.n	80081ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4a1b      	ldr	r2, [pc, #108]	; (80081f0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d013      	beq.n	80081ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	4a1a      	ldr	r2, [pc, #104]	; (80081f4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d00e      	beq.n	80081ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	4a18      	ldr	r2, [pc, #96]	; (80081f8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d009      	beq.n	80081ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	4a13      	ldr	r2, [pc, #76]	; (80081ec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d004      	beq.n	80081ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	4a14      	ldr	r2, [pc, #80]	; (80081fc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d10c      	bne.n	80081c8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80081b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	689b      	ldr	r3, [r3, #8]
 80081ba:	68ba      	ldr	r2, [r7, #8]
 80081bc:	4313      	orrs	r3, r2
 80081be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	68ba      	ldr	r2, [r7, #8]
 80081c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2201      	movs	r2, #1
 80081cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2200      	movs	r2, #0
 80081d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80081d8:	2300      	movs	r3, #0
}
 80081da:	4618      	mov	r0, r3
 80081dc:	3714      	adds	r7, #20
 80081de:	46bd      	mov	sp, r7
 80081e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e4:	4770      	bx	lr
 80081e6:	bf00      	nop
 80081e8:	40012c00 	.word	0x40012c00
 80081ec:	40013400 	.word	0x40013400
 80081f0:	40000400 	.word	0x40000400
 80081f4:	40000800 	.word	0x40000800
 80081f8:	40000c00 	.word	0x40000c00
 80081fc:	40014000 	.word	0x40014000

08008200 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008200:	b480      	push	{r7}
 8008202:	b085      	sub	sp, #20
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
 8008208:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800820a:	2300      	movs	r3, #0
 800820c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008214:	2b01      	cmp	r3, #1
 8008216:	d101      	bne.n	800821c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008218:	2302      	movs	r3, #2
 800821a:	e065      	b.n	80082e8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2201      	movs	r2, #1
 8008220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	68db      	ldr	r3, [r3, #12]
 800822e:	4313      	orrs	r3, r2
 8008230:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	689b      	ldr	r3, [r3, #8]
 800823c:	4313      	orrs	r3, r2
 800823e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	685b      	ldr	r3, [r3, #4]
 800824a:	4313      	orrs	r3, r2
 800824c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	4313      	orrs	r3, r2
 800825a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	691b      	ldr	r3, [r3, #16]
 8008266:	4313      	orrs	r3, r2
 8008268:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	695b      	ldr	r3, [r3, #20]
 8008274:	4313      	orrs	r3, r2
 8008276:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008282:	4313      	orrs	r3, r2
 8008284:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	699b      	ldr	r3, [r3, #24]
 8008290:	041b      	lsls	r3, r3, #16
 8008292:	4313      	orrs	r3, r2
 8008294:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	4a16      	ldr	r2, [pc, #88]	; (80082f4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800829c:	4293      	cmp	r3, r2
 800829e:	d004      	beq.n	80082aa <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4a14      	ldr	r2, [pc, #80]	; (80082f8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d115      	bne.n	80082d6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b4:	051b      	lsls	r3, r3, #20
 80082b6:	4313      	orrs	r3, r2
 80082b8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	69db      	ldr	r3, [r3, #28]
 80082c4:	4313      	orrs	r3, r2
 80082c6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	6a1b      	ldr	r3, [r3, #32]
 80082d2:	4313      	orrs	r3, r2
 80082d4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	68fa      	ldr	r2, [r7, #12]
 80082dc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2200      	movs	r2, #0
 80082e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80082e6:	2300      	movs	r3, #0
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	3714      	adds	r7, #20
 80082ec:	46bd      	mov	sp, r7
 80082ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f2:	4770      	bx	lr
 80082f4:	40012c00 	.word	0x40012c00
 80082f8:	40013400 	.word	0x40013400

080082fc <HAL_TIMEx_ConfigBreakInput>:
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             const TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)

{
 80082fc:	b480      	push	{r7}
 80082fe:	b08b      	sub	sp, #44	; 0x2c
 8008300:	af00      	add	r7, sp, #0
 8008302:	60f8      	str	r0, [r7, #12]
 8008304:	60b9      	str	r1, [r7, #8]
 8008306:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008308:	2300      	movs	r3, #0
 800830a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#else
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));
#endif /* DFSDM1_Channel0 */

  /* Check input state */
  __HAL_LOCK(htim);
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008314:	2b01      	cmp	r3, #1
 8008316:	d101      	bne.n	800831c <HAL_TIMEx_ConfigBreakInput+0x20>
 8008318:	2302      	movs	r3, #2
 800831a:	e0af      	b.n	800847c <HAL_TIMEx_ConfigBreakInput+0x180>
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	2201      	movs	r2, #1
 8008320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (sBreakInputConfig->Source)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	3b01      	subs	r3, #1
 800832a:	2b07      	cmp	r3, #7
 800832c:	d83a      	bhi.n	80083a4 <HAL_TIMEx_ConfigBreakInput+0xa8>
 800832e:	a201      	add	r2, pc, #4	; (adr r2, 8008334 <HAL_TIMEx_ConfigBreakInput+0x38>)
 8008330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008334:	08008355 	.word	0x08008355
 8008338:	08008369 	.word	0x08008369
 800833c:	080083a5 	.word	0x080083a5
 8008340:	0800837d 	.word	0x0800837d
 8008344:	080083a5 	.word	0x080083a5
 8008348:	080083a5 	.word	0x080083a5
 800834c:	080083a5 	.word	0x080083a5
 8008350:	08008391 	.word	0x08008391
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_OR2_BKINE;
 8008354:	2301      	movs	r3, #1
 8008356:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKINE_Pos;
 8008358:	2300      	movs	r3, #0
 800835a:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_OR2_BKINP;
 800835c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008360:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_OR2_BKINP_Pos;
 8008362:	2309      	movs	r3, #9
 8008364:	613b      	str	r3, [r7, #16]
      break;
 8008366:	e026      	b.n	80083b6 <HAL_TIMEx_ConfigBreakInput+0xba>
    }
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_OR2_BKCMP1E;
 8008368:	2302      	movs	r3, #2
 800836a:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKCMP1E_Pos;
 800836c:	2301      	movs	r3, #1
 800836e:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_OR2_BKCMP1P;
 8008370:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008374:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_OR2_BKCMP1P_Pos;
 8008376:	230a      	movs	r3, #10
 8008378:	613b      	str	r3, [r7, #16]
      break;
 800837a:	e01c      	b.n	80083b6 <HAL_TIMEx_ConfigBreakInput+0xba>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_OR2_BKCMP2E;
 800837c:	2304      	movs	r3, #4
 800837e:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKCMP2E_Pos;
 8008380:	2302      	movs	r3, #2
 8008382:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_OR2_BKCMP2P;
 8008384:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008388:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_OR2_BKCMP2P_Pos;
 800838a:	230b      	movs	r3, #11
 800838c:	613b      	str	r3, [r7, #16]
      break;
 800838e:	e012      	b.n	80083b6 <HAL_TIMEx_ConfigBreakInput+0xba>
    }
#if defined(DFSDM1_Channel0)
    case TIM_BREAKINPUTSOURCE_DFSDM1:
    {
      bkin_enable_mask = TIM1_OR2_BKDF1BK0E;
 8008390:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008394:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKDF1BK0E_Pos;
 8008396:	2308      	movs	r3, #8
 8008398:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = 0U;
 800839a:	2300      	movs	r3, #0
 800839c:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = 0U;
 800839e:	2300      	movs	r3, #0
 80083a0:	613b      	str	r3, [r7, #16]
      break;
 80083a2:	e008      	b.n	80083b6 <HAL_TIMEx_ConfigBreakInput+0xba>
    }
#endif /* DFSDM1_Channel0 */

    default:
    {
      bkin_enable_mask = 0U;
 80083a4:	2300      	movs	r3, #0
 80083a6:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = 0U;
 80083a8:	2300      	movs	r3, #0
 80083aa:	61bb      	str	r3, [r7, #24]
      bkin_enable_bitpos = 0U;
 80083ac:	2300      	movs	r3, #0
 80083ae:	617b      	str	r3, [r7, #20]
      bkin_polarity_bitpos = 0U;
 80083b0:	2300      	movs	r3, #0
 80083b2:	613b      	str	r3, [r7, #16]
      break;
 80083b4:	bf00      	nop
    }
  }

  switch (BreakInput)
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	2b01      	cmp	r3, #1
 80083ba:	d003      	beq.n	80083c4 <HAL_TIMEx_ConfigBreakInput+0xc8>
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	2b02      	cmp	r3, #2
 80083c0:	d029      	beq.n	8008416 <HAL_TIMEx_ConfigBreakInput+0x11a>
 80083c2:	e051      	b.n	8008468 <HAL_TIMEx_ConfigBreakInput+0x16c>
  {
    case TIM_BREAKINPUT_BRK:
    {
      /* Get the TIMx_OR2 register value */
      tmporx = htim->Instance->OR2;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083ca:	623b      	str	r3, [r7, #32]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 80083cc:	69fb      	ldr	r3, [r7, #28]
 80083ce:	43db      	mvns	r3, r3
 80083d0:	6a3a      	ldr	r2, [r7, #32]
 80083d2:	4013      	ands	r3, r2
 80083d4:	623b      	str	r3, [r7, #32]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	685a      	ldr	r2, [r3, #4]
 80083da:	697b      	ldr	r3, [r7, #20]
 80083dc:	409a      	lsls	r2, r3
 80083de:	69fb      	ldr	r3, [r7, #28]
 80083e0:	4013      	ands	r3, r2
 80083e2:	6a3a      	ldr	r2, [r7, #32]
 80083e4:	4313      	orrs	r3, r2
 80083e6:	623b      	str	r3, [r7, #32]

      /* Set the break input polarity */
#if defined(DFSDM1_Channel0)
      if (sBreakInputConfig->Source != TIM_BREAKINPUTSOURCE_DFSDM1)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	2b08      	cmp	r3, #8
 80083ee:	d00d      	beq.n	800840c <HAL_TIMEx_ConfigBreakInput+0x110>
#endif /* DFSDM1_Channel0 */
      {
        tmporx &= ~bkin_polarity_mask;
 80083f0:	69bb      	ldr	r3, [r7, #24]
 80083f2:	43db      	mvns	r3, r3
 80083f4:	6a3a      	ldr	r2, [r7, #32]
 80083f6:	4013      	ands	r3, r2
 80083f8:	623b      	str	r3, [r7, #32]
        tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	689a      	ldr	r2, [r3, #8]
 80083fe:	693b      	ldr	r3, [r7, #16]
 8008400:	409a      	lsls	r2, r3
 8008402:	69bb      	ldr	r3, [r7, #24]
 8008404:	4013      	ands	r3, r2
 8008406:	6a3a      	ldr	r2, [r7, #32]
 8008408:	4313      	orrs	r3, r2
 800840a:	623b      	str	r3, [r7, #32]
      }

      /* Set TIMx_OR2 */
      htim->Instance->OR2 = tmporx;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	6a3a      	ldr	r2, [r7, #32]
 8008412:	661a      	str	r2, [r3, #96]	; 0x60
      break;
 8008414:	e02c      	b.n	8008470 <HAL_TIMEx_ConfigBreakInput+0x174>
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_OR3 register value */
      tmporx = htim->Instance->OR3;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800841c:	623b      	str	r3, [r7, #32]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 800841e:	69fb      	ldr	r3, [r7, #28]
 8008420:	43db      	mvns	r3, r3
 8008422:	6a3a      	ldr	r2, [r7, #32]
 8008424:	4013      	ands	r3, r2
 8008426:	623b      	str	r3, [r7, #32]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	685a      	ldr	r2, [r3, #4]
 800842c:	697b      	ldr	r3, [r7, #20]
 800842e:	409a      	lsls	r2, r3
 8008430:	69fb      	ldr	r3, [r7, #28]
 8008432:	4013      	ands	r3, r2
 8008434:	6a3a      	ldr	r2, [r7, #32]
 8008436:	4313      	orrs	r3, r2
 8008438:	623b      	str	r3, [r7, #32]

      /* Set the break input polarity */
#if defined(DFSDM1_Channel0)
      if (sBreakInputConfig->Source != TIM_BREAKINPUTSOURCE_DFSDM1)
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	2b08      	cmp	r3, #8
 8008440:	d00d      	beq.n	800845e <HAL_TIMEx_ConfigBreakInput+0x162>
#endif /* DFSDM1_Channel0 */
      {
        tmporx &= ~bkin_polarity_mask;
 8008442:	69bb      	ldr	r3, [r7, #24]
 8008444:	43db      	mvns	r3, r3
 8008446:	6a3a      	ldr	r2, [r7, #32]
 8008448:	4013      	ands	r3, r2
 800844a:	623b      	str	r3, [r7, #32]
        tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	689a      	ldr	r2, [r3, #8]
 8008450:	693b      	ldr	r3, [r7, #16]
 8008452:	409a      	lsls	r2, r3
 8008454:	69bb      	ldr	r3, [r7, #24]
 8008456:	4013      	ands	r3, r2
 8008458:	6a3a      	ldr	r2, [r7, #32]
 800845a:	4313      	orrs	r3, r2
 800845c:	623b      	str	r3, [r7, #32]
      }

      /* Set TIMx_OR3 */
      htim->Instance->OR3 = tmporx;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	6a3a      	ldr	r2, [r7, #32]
 8008464:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 8008466:	e003      	b.n	8008470 <HAL_TIMEx_ConfigBreakInput+0x174>
    }
    default:
      status = HAL_ERROR;
 8008468:	2301      	movs	r3, #1
 800846a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800846e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	2200      	movs	r2, #0
 8008474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008478:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800847c:	4618      	mov	r0, r3
 800847e:	372c      	adds	r7, #44	; 0x2c
 8008480:	46bd      	mov	sp, r7
 8008482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008486:	4770      	bx	lr

08008488 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b082      	sub	sp, #8
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d101      	bne.n	800849a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008496:	2301      	movs	r3, #1
 8008498:	e042      	b.n	8008520 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d106      	bne.n	80084b2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2200      	movs	r2, #0
 80084a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f7f9 fb1f 	bl	8001af0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2224      	movs	r2, #36	; 0x24
 80084b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	681a      	ldr	r2, [r3, #0]
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f022 0201 	bic.w	r2, r2, #1
 80084c8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f000 f82c 	bl	8008528 <UART_SetConfig>
 80084d0:	4603      	mov	r3, r0
 80084d2:	2b01      	cmp	r3, #1
 80084d4:	d101      	bne.n	80084da <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80084d6:	2301      	movs	r3, #1
 80084d8:	e022      	b.n	8008520 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d002      	beq.n	80084e8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f000 fb1c 	bl	8008b20 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	685a      	ldr	r2, [r3, #4]
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80084f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	689a      	ldr	r2, [r3, #8]
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008506:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	681a      	ldr	r2, [r3, #0]
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f042 0201 	orr.w	r2, r2, #1
 8008516:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	f000 fba3 	bl	8008c64 <UART_CheckIdleState>
 800851e:	4603      	mov	r3, r0
}
 8008520:	4618      	mov	r0, r3
 8008522:	3708      	adds	r7, #8
 8008524:	46bd      	mov	sp, r7
 8008526:	bd80      	pop	{r7, pc}

08008528 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008528:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800852c:	b08c      	sub	sp, #48	; 0x30
 800852e:	af00      	add	r7, sp, #0
 8008530:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008532:	2300      	movs	r3, #0
 8008534:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	689a      	ldr	r2, [r3, #8]
 800853c:	697b      	ldr	r3, [r7, #20]
 800853e:	691b      	ldr	r3, [r3, #16]
 8008540:	431a      	orrs	r2, r3
 8008542:	697b      	ldr	r3, [r7, #20]
 8008544:	695b      	ldr	r3, [r3, #20]
 8008546:	431a      	orrs	r2, r3
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	69db      	ldr	r3, [r3, #28]
 800854c:	4313      	orrs	r3, r2
 800854e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008550:	697b      	ldr	r3, [r7, #20]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	681a      	ldr	r2, [r3, #0]
 8008556:	4baa      	ldr	r3, [pc, #680]	; (8008800 <UART_SetConfig+0x2d8>)
 8008558:	4013      	ands	r3, r2
 800855a:	697a      	ldr	r2, [r7, #20]
 800855c:	6812      	ldr	r2, [r2, #0]
 800855e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008560:	430b      	orrs	r3, r1
 8008562:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008564:	697b      	ldr	r3, [r7, #20]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	685b      	ldr	r3, [r3, #4]
 800856a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	68da      	ldr	r2, [r3, #12]
 8008572:	697b      	ldr	r3, [r7, #20]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	430a      	orrs	r2, r1
 8008578:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	699b      	ldr	r3, [r3, #24]
 800857e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008580:	697b      	ldr	r3, [r7, #20]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4a9f      	ldr	r2, [pc, #636]	; (8008804 <UART_SetConfig+0x2dc>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d004      	beq.n	8008594 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800858a:	697b      	ldr	r3, [r7, #20]
 800858c:	6a1b      	ldr	r3, [r3, #32]
 800858e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008590:	4313      	orrs	r3, r2
 8008592:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	689b      	ldr	r3, [r3, #8]
 800859a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800859e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80085a2:	697a      	ldr	r2, [r7, #20]
 80085a4:	6812      	ldr	r2, [r2, #0]
 80085a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80085a8:	430b      	orrs	r3, r1
 80085aa:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80085ac:	697b      	ldr	r3, [r7, #20]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085b2:	f023 010f 	bic.w	r1, r3, #15
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80085ba:	697b      	ldr	r3, [r7, #20]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	430a      	orrs	r2, r1
 80085c0:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80085c2:	697b      	ldr	r3, [r7, #20]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	4a90      	ldr	r2, [pc, #576]	; (8008808 <UART_SetConfig+0x2e0>)
 80085c8:	4293      	cmp	r3, r2
 80085ca:	d125      	bne.n	8008618 <UART_SetConfig+0xf0>
 80085cc:	4b8f      	ldr	r3, [pc, #572]	; (800880c <UART_SetConfig+0x2e4>)
 80085ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085d2:	f003 0303 	and.w	r3, r3, #3
 80085d6:	2b03      	cmp	r3, #3
 80085d8:	d81a      	bhi.n	8008610 <UART_SetConfig+0xe8>
 80085da:	a201      	add	r2, pc, #4	; (adr r2, 80085e0 <UART_SetConfig+0xb8>)
 80085dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085e0:	080085f1 	.word	0x080085f1
 80085e4:	08008601 	.word	0x08008601
 80085e8:	080085f9 	.word	0x080085f9
 80085ec:	08008609 	.word	0x08008609
 80085f0:	2301      	movs	r3, #1
 80085f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085f6:	e116      	b.n	8008826 <UART_SetConfig+0x2fe>
 80085f8:	2302      	movs	r3, #2
 80085fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085fe:	e112      	b.n	8008826 <UART_SetConfig+0x2fe>
 8008600:	2304      	movs	r3, #4
 8008602:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008606:	e10e      	b.n	8008826 <UART_SetConfig+0x2fe>
 8008608:	2308      	movs	r3, #8
 800860a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800860e:	e10a      	b.n	8008826 <UART_SetConfig+0x2fe>
 8008610:	2310      	movs	r3, #16
 8008612:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008616:	e106      	b.n	8008826 <UART_SetConfig+0x2fe>
 8008618:	697b      	ldr	r3, [r7, #20]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	4a7c      	ldr	r2, [pc, #496]	; (8008810 <UART_SetConfig+0x2e8>)
 800861e:	4293      	cmp	r3, r2
 8008620:	d138      	bne.n	8008694 <UART_SetConfig+0x16c>
 8008622:	4b7a      	ldr	r3, [pc, #488]	; (800880c <UART_SetConfig+0x2e4>)
 8008624:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008628:	f003 030c 	and.w	r3, r3, #12
 800862c:	2b0c      	cmp	r3, #12
 800862e:	d82d      	bhi.n	800868c <UART_SetConfig+0x164>
 8008630:	a201      	add	r2, pc, #4	; (adr r2, 8008638 <UART_SetConfig+0x110>)
 8008632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008636:	bf00      	nop
 8008638:	0800866d 	.word	0x0800866d
 800863c:	0800868d 	.word	0x0800868d
 8008640:	0800868d 	.word	0x0800868d
 8008644:	0800868d 	.word	0x0800868d
 8008648:	0800867d 	.word	0x0800867d
 800864c:	0800868d 	.word	0x0800868d
 8008650:	0800868d 	.word	0x0800868d
 8008654:	0800868d 	.word	0x0800868d
 8008658:	08008675 	.word	0x08008675
 800865c:	0800868d 	.word	0x0800868d
 8008660:	0800868d 	.word	0x0800868d
 8008664:	0800868d 	.word	0x0800868d
 8008668:	08008685 	.word	0x08008685
 800866c:	2300      	movs	r3, #0
 800866e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008672:	e0d8      	b.n	8008826 <UART_SetConfig+0x2fe>
 8008674:	2302      	movs	r3, #2
 8008676:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800867a:	e0d4      	b.n	8008826 <UART_SetConfig+0x2fe>
 800867c:	2304      	movs	r3, #4
 800867e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008682:	e0d0      	b.n	8008826 <UART_SetConfig+0x2fe>
 8008684:	2308      	movs	r3, #8
 8008686:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800868a:	e0cc      	b.n	8008826 <UART_SetConfig+0x2fe>
 800868c:	2310      	movs	r3, #16
 800868e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008692:	e0c8      	b.n	8008826 <UART_SetConfig+0x2fe>
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	4a5e      	ldr	r2, [pc, #376]	; (8008814 <UART_SetConfig+0x2ec>)
 800869a:	4293      	cmp	r3, r2
 800869c:	d125      	bne.n	80086ea <UART_SetConfig+0x1c2>
 800869e:	4b5b      	ldr	r3, [pc, #364]	; (800880c <UART_SetConfig+0x2e4>)
 80086a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086a4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80086a8:	2b30      	cmp	r3, #48	; 0x30
 80086aa:	d016      	beq.n	80086da <UART_SetConfig+0x1b2>
 80086ac:	2b30      	cmp	r3, #48	; 0x30
 80086ae:	d818      	bhi.n	80086e2 <UART_SetConfig+0x1ba>
 80086b0:	2b20      	cmp	r3, #32
 80086b2:	d00a      	beq.n	80086ca <UART_SetConfig+0x1a2>
 80086b4:	2b20      	cmp	r3, #32
 80086b6:	d814      	bhi.n	80086e2 <UART_SetConfig+0x1ba>
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d002      	beq.n	80086c2 <UART_SetConfig+0x19a>
 80086bc:	2b10      	cmp	r3, #16
 80086be:	d008      	beq.n	80086d2 <UART_SetConfig+0x1aa>
 80086c0:	e00f      	b.n	80086e2 <UART_SetConfig+0x1ba>
 80086c2:	2300      	movs	r3, #0
 80086c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80086c8:	e0ad      	b.n	8008826 <UART_SetConfig+0x2fe>
 80086ca:	2302      	movs	r3, #2
 80086cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80086d0:	e0a9      	b.n	8008826 <UART_SetConfig+0x2fe>
 80086d2:	2304      	movs	r3, #4
 80086d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80086d8:	e0a5      	b.n	8008826 <UART_SetConfig+0x2fe>
 80086da:	2308      	movs	r3, #8
 80086dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80086e0:	e0a1      	b.n	8008826 <UART_SetConfig+0x2fe>
 80086e2:	2310      	movs	r3, #16
 80086e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80086e8:	e09d      	b.n	8008826 <UART_SetConfig+0x2fe>
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	4a4a      	ldr	r2, [pc, #296]	; (8008818 <UART_SetConfig+0x2f0>)
 80086f0:	4293      	cmp	r3, r2
 80086f2:	d125      	bne.n	8008740 <UART_SetConfig+0x218>
 80086f4:	4b45      	ldr	r3, [pc, #276]	; (800880c <UART_SetConfig+0x2e4>)
 80086f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086fa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80086fe:	2bc0      	cmp	r3, #192	; 0xc0
 8008700:	d016      	beq.n	8008730 <UART_SetConfig+0x208>
 8008702:	2bc0      	cmp	r3, #192	; 0xc0
 8008704:	d818      	bhi.n	8008738 <UART_SetConfig+0x210>
 8008706:	2b80      	cmp	r3, #128	; 0x80
 8008708:	d00a      	beq.n	8008720 <UART_SetConfig+0x1f8>
 800870a:	2b80      	cmp	r3, #128	; 0x80
 800870c:	d814      	bhi.n	8008738 <UART_SetConfig+0x210>
 800870e:	2b00      	cmp	r3, #0
 8008710:	d002      	beq.n	8008718 <UART_SetConfig+0x1f0>
 8008712:	2b40      	cmp	r3, #64	; 0x40
 8008714:	d008      	beq.n	8008728 <UART_SetConfig+0x200>
 8008716:	e00f      	b.n	8008738 <UART_SetConfig+0x210>
 8008718:	2300      	movs	r3, #0
 800871a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800871e:	e082      	b.n	8008826 <UART_SetConfig+0x2fe>
 8008720:	2302      	movs	r3, #2
 8008722:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008726:	e07e      	b.n	8008826 <UART_SetConfig+0x2fe>
 8008728:	2304      	movs	r3, #4
 800872a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800872e:	e07a      	b.n	8008826 <UART_SetConfig+0x2fe>
 8008730:	2308      	movs	r3, #8
 8008732:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008736:	e076      	b.n	8008826 <UART_SetConfig+0x2fe>
 8008738:	2310      	movs	r3, #16
 800873a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800873e:	e072      	b.n	8008826 <UART_SetConfig+0x2fe>
 8008740:	697b      	ldr	r3, [r7, #20]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	4a35      	ldr	r2, [pc, #212]	; (800881c <UART_SetConfig+0x2f4>)
 8008746:	4293      	cmp	r3, r2
 8008748:	d12a      	bne.n	80087a0 <UART_SetConfig+0x278>
 800874a:	4b30      	ldr	r3, [pc, #192]	; (800880c <UART_SetConfig+0x2e4>)
 800874c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008750:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008754:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008758:	d01a      	beq.n	8008790 <UART_SetConfig+0x268>
 800875a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800875e:	d81b      	bhi.n	8008798 <UART_SetConfig+0x270>
 8008760:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008764:	d00c      	beq.n	8008780 <UART_SetConfig+0x258>
 8008766:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800876a:	d815      	bhi.n	8008798 <UART_SetConfig+0x270>
 800876c:	2b00      	cmp	r3, #0
 800876e:	d003      	beq.n	8008778 <UART_SetConfig+0x250>
 8008770:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008774:	d008      	beq.n	8008788 <UART_SetConfig+0x260>
 8008776:	e00f      	b.n	8008798 <UART_SetConfig+0x270>
 8008778:	2300      	movs	r3, #0
 800877a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800877e:	e052      	b.n	8008826 <UART_SetConfig+0x2fe>
 8008780:	2302      	movs	r3, #2
 8008782:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008786:	e04e      	b.n	8008826 <UART_SetConfig+0x2fe>
 8008788:	2304      	movs	r3, #4
 800878a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800878e:	e04a      	b.n	8008826 <UART_SetConfig+0x2fe>
 8008790:	2308      	movs	r3, #8
 8008792:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008796:	e046      	b.n	8008826 <UART_SetConfig+0x2fe>
 8008798:	2310      	movs	r3, #16
 800879a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800879e:	e042      	b.n	8008826 <UART_SetConfig+0x2fe>
 80087a0:	697b      	ldr	r3, [r7, #20]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	4a17      	ldr	r2, [pc, #92]	; (8008804 <UART_SetConfig+0x2dc>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d13a      	bne.n	8008820 <UART_SetConfig+0x2f8>
 80087aa:	4b18      	ldr	r3, [pc, #96]	; (800880c <UART_SetConfig+0x2e4>)
 80087ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087b0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80087b4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80087b8:	d01a      	beq.n	80087f0 <UART_SetConfig+0x2c8>
 80087ba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80087be:	d81b      	bhi.n	80087f8 <UART_SetConfig+0x2d0>
 80087c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087c4:	d00c      	beq.n	80087e0 <UART_SetConfig+0x2b8>
 80087c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087ca:	d815      	bhi.n	80087f8 <UART_SetConfig+0x2d0>
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d003      	beq.n	80087d8 <UART_SetConfig+0x2b0>
 80087d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80087d4:	d008      	beq.n	80087e8 <UART_SetConfig+0x2c0>
 80087d6:	e00f      	b.n	80087f8 <UART_SetConfig+0x2d0>
 80087d8:	2300      	movs	r3, #0
 80087da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087de:	e022      	b.n	8008826 <UART_SetConfig+0x2fe>
 80087e0:	2302      	movs	r3, #2
 80087e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087e6:	e01e      	b.n	8008826 <UART_SetConfig+0x2fe>
 80087e8:	2304      	movs	r3, #4
 80087ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087ee:	e01a      	b.n	8008826 <UART_SetConfig+0x2fe>
 80087f0:	2308      	movs	r3, #8
 80087f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087f6:	e016      	b.n	8008826 <UART_SetConfig+0x2fe>
 80087f8:	2310      	movs	r3, #16
 80087fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087fe:	e012      	b.n	8008826 <UART_SetConfig+0x2fe>
 8008800:	cfff69f3 	.word	0xcfff69f3
 8008804:	40008000 	.word	0x40008000
 8008808:	40013800 	.word	0x40013800
 800880c:	40021000 	.word	0x40021000
 8008810:	40004400 	.word	0x40004400
 8008814:	40004800 	.word	0x40004800
 8008818:	40004c00 	.word	0x40004c00
 800881c:	40005000 	.word	0x40005000
 8008820:	2310      	movs	r3, #16
 8008822:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008826:	697b      	ldr	r3, [r7, #20]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	4aae      	ldr	r2, [pc, #696]	; (8008ae4 <UART_SetConfig+0x5bc>)
 800882c:	4293      	cmp	r3, r2
 800882e:	f040 8097 	bne.w	8008960 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008832:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008836:	2b08      	cmp	r3, #8
 8008838:	d823      	bhi.n	8008882 <UART_SetConfig+0x35a>
 800883a:	a201      	add	r2, pc, #4	; (adr r2, 8008840 <UART_SetConfig+0x318>)
 800883c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008840:	08008865 	.word	0x08008865
 8008844:	08008883 	.word	0x08008883
 8008848:	0800886d 	.word	0x0800886d
 800884c:	08008883 	.word	0x08008883
 8008850:	08008873 	.word	0x08008873
 8008854:	08008883 	.word	0x08008883
 8008858:	08008883 	.word	0x08008883
 800885c:	08008883 	.word	0x08008883
 8008860:	0800887b 	.word	0x0800887b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008864:	f7fc f90e 	bl	8004a84 <HAL_RCC_GetPCLK1Freq>
 8008868:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800886a:	e010      	b.n	800888e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800886c:	4b9e      	ldr	r3, [pc, #632]	; (8008ae8 <UART_SetConfig+0x5c0>)
 800886e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008870:	e00d      	b.n	800888e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008872:	f7fc f86f 	bl	8004954 <HAL_RCC_GetSysClockFreq>
 8008876:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008878:	e009      	b.n	800888e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800887a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800887e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008880:	e005      	b.n	800888e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008882:	2300      	movs	r3, #0
 8008884:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008886:	2301      	movs	r3, #1
 8008888:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800888c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800888e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008890:	2b00      	cmp	r3, #0
 8008892:	f000 8130 	beq.w	8008af6 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800889a:	4a94      	ldr	r2, [pc, #592]	; (8008aec <UART_SetConfig+0x5c4>)
 800889c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80088a0:	461a      	mov	r2, r3
 80088a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80088a8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	685a      	ldr	r2, [r3, #4]
 80088ae:	4613      	mov	r3, r2
 80088b0:	005b      	lsls	r3, r3, #1
 80088b2:	4413      	add	r3, r2
 80088b4:	69ba      	ldr	r2, [r7, #24]
 80088b6:	429a      	cmp	r2, r3
 80088b8:	d305      	bcc.n	80088c6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80088ba:	697b      	ldr	r3, [r7, #20]
 80088bc:	685b      	ldr	r3, [r3, #4]
 80088be:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80088c0:	69ba      	ldr	r2, [r7, #24]
 80088c2:	429a      	cmp	r2, r3
 80088c4:	d903      	bls.n	80088ce <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80088c6:	2301      	movs	r3, #1
 80088c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80088cc:	e113      	b.n	8008af6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80088ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088d0:	2200      	movs	r2, #0
 80088d2:	60bb      	str	r3, [r7, #8]
 80088d4:	60fa      	str	r2, [r7, #12]
 80088d6:	697b      	ldr	r3, [r7, #20]
 80088d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088da:	4a84      	ldr	r2, [pc, #528]	; (8008aec <UART_SetConfig+0x5c4>)
 80088dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80088e0:	b29b      	uxth	r3, r3
 80088e2:	2200      	movs	r2, #0
 80088e4:	603b      	str	r3, [r7, #0]
 80088e6:	607a      	str	r2, [r7, #4]
 80088e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088ec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80088f0:	f7f7 fc84 	bl	80001fc <__aeabi_uldivmod>
 80088f4:	4602      	mov	r2, r0
 80088f6:	460b      	mov	r3, r1
 80088f8:	4610      	mov	r0, r2
 80088fa:	4619      	mov	r1, r3
 80088fc:	f04f 0200 	mov.w	r2, #0
 8008900:	f04f 0300 	mov.w	r3, #0
 8008904:	020b      	lsls	r3, r1, #8
 8008906:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800890a:	0202      	lsls	r2, r0, #8
 800890c:	6979      	ldr	r1, [r7, #20]
 800890e:	6849      	ldr	r1, [r1, #4]
 8008910:	0849      	lsrs	r1, r1, #1
 8008912:	2000      	movs	r0, #0
 8008914:	460c      	mov	r4, r1
 8008916:	4605      	mov	r5, r0
 8008918:	eb12 0804 	adds.w	r8, r2, r4
 800891c:	eb43 0905 	adc.w	r9, r3, r5
 8008920:	697b      	ldr	r3, [r7, #20]
 8008922:	685b      	ldr	r3, [r3, #4]
 8008924:	2200      	movs	r2, #0
 8008926:	469a      	mov	sl, r3
 8008928:	4693      	mov	fp, r2
 800892a:	4652      	mov	r2, sl
 800892c:	465b      	mov	r3, fp
 800892e:	4640      	mov	r0, r8
 8008930:	4649      	mov	r1, r9
 8008932:	f7f7 fc63 	bl	80001fc <__aeabi_uldivmod>
 8008936:	4602      	mov	r2, r0
 8008938:	460b      	mov	r3, r1
 800893a:	4613      	mov	r3, r2
 800893c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800893e:	6a3b      	ldr	r3, [r7, #32]
 8008940:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008944:	d308      	bcc.n	8008958 <UART_SetConfig+0x430>
 8008946:	6a3b      	ldr	r3, [r7, #32]
 8008948:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800894c:	d204      	bcs.n	8008958 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800894e:	697b      	ldr	r3, [r7, #20]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	6a3a      	ldr	r2, [r7, #32]
 8008954:	60da      	str	r2, [r3, #12]
 8008956:	e0ce      	b.n	8008af6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008958:	2301      	movs	r3, #1
 800895a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800895e:	e0ca      	b.n	8008af6 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	69db      	ldr	r3, [r3, #28]
 8008964:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008968:	d166      	bne.n	8008a38 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800896a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800896e:	2b08      	cmp	r3, #8
 8008970:	d827      	bhi.n	80089c2 <UART_SetConfig+0x49a>
 8008972:	a201      	add	r2, pc, #4	; (adr r2, 8008978 <UART_SetConfig+0x450>)
 8008974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008978:	0800899d 	.word	0x0800899d
 800897c:	080089a5 	.word	0x080089a5
 8008980:	080089ad 	.word	0x080089ad
 8008984:	080089c3 	.word	0x080089c3
 8008988:	080089b3 	.word	0x080089b3
 800898c:	080089c3 	.word	0x080089c3
 8008990:	080089c3 	.word	0x080089c3
 8008994:	080089c3 	.word	0x080089c3
 8008998:	080089bb 	.word	0x080089bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800899c:	f7fc f872 	bl	8004a84 <HAL_RCC_GetPCLK1Freq>
 80089a0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80089a2:	e014      	b.n	80089ce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80089a4:	f7fc f884 	bl	8004ab0 <HAL_RCC_GetPCLK2Freq>
 80089a8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80089aa:	e010      	b.n	80089ce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80089ac:	4b4e      	ldr	r3, [pc, #312]	; (8008ae8 <UART_SetConfig+0x5c0>)
 80089ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80089b0:	e00d      	b.n	80089ce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80089b2:	f7fb ffcf 	bl	8004954 <HAL_RCC_GetSysClockFreq>
 80089b6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80089b8:	e009      	b.n	80089ce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80089ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80089be:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80089c0:	e005      	b.n	80089ce <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80089c2:	2300      	movs	r3, #0
 80089c4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80089c6:	2301      	movs	r3, #1
 80089c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80089cc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80089ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	f000 8090 	beq.w	8008af6 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80089d6:	697b      	ldr	r3, [r7, #20]
 80089d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089da:	4a44      	ldr	r2, [pc, #272]	; (8008aec <UART_SetConfig+0x5c4>)
 80089dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80089e0:	461a      	mov	r2, r3
 80089e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80089e8:	005a      	lsls	r2, r3, #1
 80089ea:	697b      	ldr	r3, [r7, #20]
 80089ec:	685b      	ldr	r3, [r3, #4]
 80089ee:	085b      	lsrs	r3, r3, #1
 80089f0:	441a      	add	r2, r3
 80089f2:	697b      	ldr	r3, [r7, #20]
 80089f4:	685b      	ldr	r3, [r3, #4]
 80089f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80089fa:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80089fc:	6a3b      	ldr	r3, [r7, #32]
 80089fe:	2b0f      	cmp	r3, #15
 8008a00:	d916      	bls.n	8008a30 <UART_SetConfig+0x508>
 8008a02:	6a3b      	ldr	r3, [r7, #32]
 8008a04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a08:	d212      	bcs.n	8008a30 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008a0a:	6a3b      	ldr	r3, [r7, #32]
 8008a0c:	b29b      	uxth	r3, r3
 8008a0e:	f023 030f 	bic.w	r3, r3, #15
 8008a12:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008a14:	6a3b      	ldr	r3, [r7, #32]
 8008a16:	085b      	lsrs	r3, r3, #1
 8008a18:	b29b      	uxth	r3, r3
 8008a1a:	f003 0307 	and.w	r3, r3, #7
 8008a1e:	b29a      	uxth	r2, r3
 8008a20:	8bfb      	ldrh	r3, [r7, #30]
 8008a22:	4313      	orrs	r3, r2
 8008a24:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	8bfa      	ldrh	r2, [r7, #30]
 8008a2c:	60da      	str	r2, [r3, #12]
 8008a2e:	e062      	b.n	8008af6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008a30:	2301      	movs	r3, #1
 8008a32:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008a36:	e05e      	b.n	8008af6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008a38:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008a3c:	2b08      	cmp	r3, #8
 8008a3e:	d828      	bhi.n	8008a92 <UART_SetConfig+0x56a>
 8008a40:	a201      	add	r2, pc, #4	; (adr r2, 8008a48 <UART_SetConfig+0x520>)
 8008a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a46:	bf00      	nop
 8008a48:	08008a6d 	.word	0x08008a6d
 8008a4c:	08008a75 	.word	0x08008a75
 8008a50:	08008a7d 	.word	0x08008a7d
 8008a54:	08008a93 	.word	0x08008a93
 8008a58:	08008a83 	.word	0x08008a83
 8008a5c:	08008a93 	.word	0x08008a93
 8008a60:	08008a93 	.word	0x08008a93
 8008a64:	08008a93 	.word	0x08008a93
 8008a68:	08008a8b 	.word	0x08008a8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a6c:	f7fc f80a 	bl	8004a84 <HAL_RCC_GetPCLK1Freq>
 8008a70:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008a72:	e014      	b.n	8008a9e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008a74:	f7fc f81c 	bl	8004ab0 <HAL_RCC_GetPCLK2Freq>
 8008a78:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008a7a:	e010      	b.n	8008a9e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008a7c:	4b1a      	ldr	r3, [pc, #104]	; (8008ae8 <UART_SetConfig+0x5c0>)
 8008a7e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008a80:	e00d      	b.n	8008a9e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a82:	f7fb ff67 	bl	8004954 <HAL_RCC_GetSysClockFreq>
 8008a86:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008a88:	e009      	b.n	8008a9e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a8e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008a90:	e005      	b.n	8008a9e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008a92:	2300      	movs	r3, #0
 8008a94:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008a96:	2301      	movs	r3, #1
 8008a98:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008a9c:	bf00      	nop
    }

    if (pclk != 0U)
 8008a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d028      	beq.n	8008af6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008aa4:	697b      	ldr	r3, [r7, #20]
 8008aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aa8:	4a10      	ldr	r2, [pc, #64]	; (8008aec <UART_SetConfig+0x5c4>)
 8008aaa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008aae:	461a      	mov	r2, r3
 8008ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab2:	fbb3 f2f2 	udiv	r2, r3, r2
 8008ab6:	697b      	ldr	r3, [r7, #20]
 8008ab8:	685b      	ldr	r3, [r3, #4]
 8008aba:	085b      	lsrs	r3, r3, #1
 8008abc:	441a      	add	r2, r3
 8008abe:	697b      	ldr	r3, [r7, #20]
 8008ac0:	685b      	ldr	r3, [r3, #4]
 8008ac2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ac6:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008ac8:	6a3b      	ldr	r3, [r7, #32]
 8008aca:	2b0f      	cmp	r3, #15
 8008acc:	d910      	bls.n	8008af0 <UART_SetConfig+0x5c8>
 8008ace:	6a3b      	ldr	r3, [r7, #32]
 8008ad0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ad4:	d20c      	bcs.n	8008af0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008ad6:	6a3b      	ldr	r3, [r7, #32]
 8008ad8:	b29a      	uxth	r2, r3
 8008ada:	697b      	ldr	r3, [r7, #20]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	60da      	str	r2, [r3, #12]
 8008ae0:	e009      	b.n	8008af6 <UART_SetConfig+0x5ce>
 8008ae2:	bf00      	nop
 8008ae4:	40008000 	.word	0x40008000
 8008ae8:	00f42400 	.word	0x00f42400
 8008aec:	08009148 	.word	0x08009148
      }
      else
      {
        ret = HAL_ERROR;
 8008af0:	2301      	movs	r3, #1
 8008af2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008af6:	697b      	ldr	r3, [r7, #20]
 8008af8:	2201      	movs	r2, #1
 8008afa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008afe:	697b      	ldr	r3, [r7, #20]
 8008b00:	2201      	movs	r2, #1
 8008b02:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008b06:	697b      	ldr	r3, [r7, #20]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008b0c:	697b      	ldr	r3, [r7, #20]
 8008b0e:	2200      	movs	r2, #0
 8008b10:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008b12:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008b16:	4618      	mov	r0, r3
 8008b18:	3730      	adds	r7, #48	; 0x30
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008b20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008b20:	b480      	push	{r7}
 8008b22:	b083      	sub	sp, #12
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b2c:	f003 0301 	and.w	r3, r3, #1
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d00a      	beq.n	8008b4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	685b      	ldr	r3, [r3, #4]
 8008b3a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	430a      	orrs	r2, r1
 8008b48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b4e:	f003 0302 	and.w	r3, r3, #2
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d00a      	beq.n	8008b6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	685b      	ldr	r3, [r3, #4]
 8008b5c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	430a      	orrs	r2, r1
 8008b6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b70:	f003 0304 	and.w	r3, r3, #4
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d00a      	beq.n	8008b8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	685b      	ldr	r3, [r3, #4]
 8008b7e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	430a      	orrs	r2, r1
 8008b8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b92:	f003 0308 	and.w	r3, r3, #8
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d00a      	beq.n	8008bb0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	685b      	ldr	r3, [r3, #4]
 8008ba0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	430a      	orrs	r2, r1
 8008bae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bb4:	f003 0310 	and.w	r3, r3, #16
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d00a      	beq.n	8008bd2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	689b      	ldr	r3, [r3, #8]
 8008bc2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	430a      	orrs	r2, r1
 8008bd0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bd6:	f003 0320 	and.w	r3, r3, #32
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d00a      	beq.n	8008bf4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	689b      	ldr	r3, [r3, #8]
 8008be4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	430a      	orrs	r2, r1
 8008bf2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d01a      	beq.n	8008c36 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	685b      	ldr	r3, [r3, #4]
 8008c06:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	430a      	orrs	r2, r1
 8008c14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c1e:	d10a      	bne.n	8008c36 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	685b      	ldr	r3, [r3, #4]
 8008c26:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	430a      	orrs	r2, r1
 8008c34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d00a      	beq.n	8008c58 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	685b      	ldr	r3, [r3, #4]
 8008c48:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	430a      	orrs	r2, r1
 8008c56:	605a      	str	r2, [r3, #4]
  }
}
 8008c58:	bf00      	nop
 8008c5a:	370c      	adds	r7, #12
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c62:	4770      	bx	lr

08008c64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b086      	sub	sp, #24
 8008c68:	af02      	add	r7, sp, #8
 8008c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2200      	movs	r2, #0
 8008c70:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008c74:	f7f9 fbf8 	bl	8002468 <HAL_GetTick>
 8008c78:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f003 0308 	and.w	r3, r3, #8
 8008c84:	2b08      	cmp	r3, #8
 8008c86:	d10e      	bne.n	8008ca6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c88:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008c8c:	9300      	str	r3, [sp, #0]
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	2200      	movs	r2, #0
 8008c92:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	f000 f82f 	bl	8008cfa <UART_WaitOnFlagUntilTimeout>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d001      	beq.n	8008ca6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ca2:	2303      	movs	r3, #3
 8008ca4:	e025      	b.n	8008cf2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f003 0304 	and.w	r3, r3, #4
 8008cb0:	2b04      	cmp	r3, #4
 8008cb2:	d10e      	bne.n	8008cd2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008cb4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008cb8:	9300      	str	r3, [sp, #0]
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f000 f819 	bl	8008cfa <UART_WaitOnFlagUntilTimeout>
 8008cc8:	4603      	mov	r3, r0
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d001      	beq.n	8008cd2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008cce:	2303      	movs	r3, #3
 8008cd0:	e00f      	b.n	8008cf2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2220      	movs	r2, #32
 8008cd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	2220      	movs	r2, #32
 8008cde:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2200      	movs	r2, #0
 8008cec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008cf0:	2300      	movs	r3, #0
}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	3710      	adds	r7, #16
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bd80      	pop	{r7, pc}

08008cfa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008cfa:	b580      	push	{r7, lr}
 8008cfc:	b09c      	sub	sp, #112	; 0x70
 8008cfe:	af00      	add	r7, sp, #0
 8008d00:	60f8      	str	r0, [r7, #12]
 8008d02:	60b9      	str	r1, [r7, #8]
 8008d04:	603b      	str	r3, [r7, #0]
 8008d06:	4613      	mov	r3, r2
 8008d08:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d0a:	e0a9      	b.n	8008e60 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d12:	f000 80a5 	beq.w	8008e60 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d16:	f7f9 fba7 	bl	8002468 <HAL_GetTick>
 8008d1a:	4602      	mov	r2, r0
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	1ad3      	subs	r3, r2, r3
 8008d20:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008d22:	429a      	cmp	r2, r3
 8008d24:	d302      	bcc.n	8008d2c <UART_WaitOnFlagUntilTimeout+0x32>
 8008d26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d140      	bne.n	8008dae <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d34:	e853 3f00 	ldrex	r3, [r3]
 8008d38:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008d3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d3c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008d40:	667b      	str	r3, [r7, #100]	; 0x64
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	461a      	mov	r2, r3
 8008d48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d4a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008d4c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d4e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008d50:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008d52:	e841 2300 	strex	r3, r2, [r1]
 8008d56:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008d58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d1e6      	bne.n	8008d2c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	3308      	adds	r3, #8
 8008d64:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d68:	e853 3f00 	ldrex	r3, [r3]
 8008d6c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d70:	f023 0301 	bic.w	r3, r3, #1
 8008d74:	663b      	str	r3, [r7, #96]	; 0x60
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	3308      	adds	r3, #8
 8008d7c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008d7e:	64ba      	str	r2, [r7, #72]	; 0x48
 8008d80:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d82:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008d84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d86:	e841 2300 	strex	r3, r2, [r1]
 8008d8a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008d8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d1e5      	bne.n	8008d5e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	2220      	movs	r2, #32
 8008d96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	2220      	movs	r2, #32
 8008d9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	2200      	movs	r2, #0
 8008da6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008daa:	2303      	movs	r3, #3
 8008dac:	e069      	b.n	8008e82 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f003 0304 	and.w	r3, r3, #4
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d051      	beq.n	8008e60 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	69db      	ldr	r3, [r3, #28]
 8008dc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008dc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008dca:	d149      	bne.n	8008e60 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008dd4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dde:	e853 3f00 	ldrex	r3, [r3]
 8008de2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008de6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008dea:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	461a      	mov	r2, r3
 8008df2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008df4:	637b      	str	r3, [r7, #52]	; 0x34
 8008df6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008df8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008dfa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008dfc:	e841 2300 	strex	r3, r2, [r1]
 8008e00:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d1e6      	bne.n	8008dd6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	3308      	adds	r3, #8
 8008e0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e10:	697b      	ldr	r3, [r7, #20]
 8008e12:	e853 3f00 	ldrex	r3, [r3]
 8008e16:	613b      	str	r3, [r7, #16]
   return(result);
 8008e18:	693b      	ldr	r3, [r7, #16]
 8008e1a:	f023 0301 	bic.w	r3, r3, #1
 8008e1e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	3308      	adds	r3, #8
 8008e26:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008e28:	623a      	str	r2, [r7, #32]
 8008e2a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e2c:	69f9      	ldr	r1, [r7, #28]
 8008e2e:	6a3a      	ldr	r2, [r7, #32]
 8008e30:	e841 2300 	strex	r3, r2, [r1]
 8008e34:	61bb      	str	r3, [r7, #24]
   return(result);
 8008e36:	69bb      	ldr	r3, [r7, #24]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d1e5      	bne.n	8008e08 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	2220      	movs	r2, #32
 8008e40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	2220      	movs	r2, #32
 8008e48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	2220      	movs	r2, #32
 8008e50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	2200      	movs	r2, #0
 8008e58:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008e5c:	2303      	movs	r3, #3
 8008e5e:	e010      	b.n	8008e82 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	69da      	ldr	r2, [r3, #28]
 8008e66:	68bb      	ldr	r3, [r7, #8]
 8008e68:	4013      	ands	r3, r2
 8008e6a:	68ba      	ldr	r2, [r7, #8]
 8008e6c:	429a      	cmp	r2, r3
 8008e6e:	bf0c      	ite	eq
 8008e70:	2301      	moveq	r3, #1
 8008e72:	2300      	movne	r3, #0
 8008e74:	b2db      	uxtb	r3, r3
 8008e76:	461a      	mov	r2, r3
 8008e78:	79fb      	ldrb	r3, [r7, #7]
 8008e7a:	429a      	cmp	r2, r3
 8008e7c:	f43f af46 	beq.w	8008d0c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008e80:	2300      	movs	r3, #0
}
 8008e82:	4618      	mov	r0, r3
 8008e84:	3770      	adds	r7, #112	; 0x70
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bd80      	pop	{r7, pc}

08008e8a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008e8a:	b480      	push	{r7}
 8008e8c:	b085      	sub	sp, #20
 8008e8e:	af00      	add	r7, sp, #0
 8008e90:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008e98:	2b01      	cmp	r3, #1
 8008e9a:	d101      	bne.n	8008ea0 <HAL_UARTEx_DisableFifoMode+0x16>
 8008e9c:	2302      	movs	r3, #2
 8008e9e:	e027      	b.n	8008ef0 <HAL_UARTEx_DisableFifoMode+0x66>
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2201      	movs	r2, #1
 8008ea4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2224      	movs	r2, #36	; 0x24
 8008eac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	681a      	ldr	r2, [r3, #0]
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f022 0201 	bic.w	r2, r2, #1
 8008ec6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008ece:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	68fa      	ldr	r2, [r7, #12]
 8008edc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2220      	movs	r2, #32
 8008ee2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2200      	movs	r2, #0
 8008eea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008eee:	2300      	movs	r3, #0
}
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	3714      	adds	r7, #20
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efa:	4770      	bx	lr

08008efc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b084      	sub	sp, #16
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
 8008f04:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008f0c:	2b01      	cmp	r3, #1
 8008f0e:	d101      	bne.n	8008f14 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008f10:	2302      	movs	r3, #2
 8008f12:	e02d      	b.n	8008f70 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2201      	movs	r2, #1
 8008f18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2224      	movs	r2, #36	; 0x24
 8008f20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	681a      	ldr	r2, [r3, #0]
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f022 0201 	bic.w	r2, r2, #1
 8008f3a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	689b      	ldr	r3, [r3, #8]
 8008f42:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	683a      	ldr	r2, [r7, #0]
 8008f4c:	430a      	orrs	r2, r1
 8008f4e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f000 f84f 	bl	8008ff4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	68fa      	ldr	r2, [r7, #12]
 8008f5c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	2220      	movs	r2, #32
 8008f62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2200      	movs	r2, #0
 8008f6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008f6e:	2300      	movs	r3, #0
}
 8008f70:	4618      	mov	r0, r3
 8008f72:	3710      	adds	r7, #16
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bd80      	pop	{r7, pc}

08008f78 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b084      	sub	sp, #16
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
 8008f80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008f88:	2b01      	cmp	r3, #1
 8008f8a:	d101      	bne.n	8008f90 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008f8c:	2302      	movs	r3, #2
 8008f8e:	e02d      	b.n	8008fec <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2201      	movs	r2, #1
 8008f94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2224      	movs	r2, #36	; 0x24
 8008f9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	681a      	ldr	r2, [r3, #0]
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f022 0201 	bic.w	r2, r2, #1
 8008fb6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	689b      	ldr	r3, [r3, #8]
 8008fbe:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	683a      	ldr	r2, [r7, #0]
 8008fc8:	430a      	orrs	r2, r1
 8008fca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008fcc:	6878      	ldr	r0, [r7, #4]
 8008fce:	f000 f811 	bl	8008ff4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	68fa      	ldr	r2, [r7, #12]
 8008fd8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2220      	movs	r2, #32
 8008fde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008fea:	2300      	movs	r3, #0
}
 8008fec:	4618      	mov	r0, r3
 8008fee:	3710      	adds	r7, #16
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	bd80      	pop	{r7, pc}

08008ff4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008ff4:	b480      	push	{r7}
 8008ff6:	b085      	sub	sp, #20
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009000:	2b00      	cmp	r3, #0
 8009002:	d108      	bne.n	8009016 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2201      	movs	r2, #1
 8009008:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2201      	movs	r2, #1
 8009010:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009014:	e031      	b.n	800907a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009016:	2308      	movs	r3, #8
 8009018:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800901a:	2308      	movs	r3, #8
 800901c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	689b      	ldr	r3, [r3, #8]
 8009024:	0e5b      	lsrs	r3, r3, #25
 8009026:	b2db      	uxtb	r3, r3
 8009028:	f003 0307 	and.w	r3, r3, #7
 800902c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	689b      	ldr	r3, [r3, #8]
 8009034:	0f5b      	lsrs	r3, r3, #29
 8009036:	b2db      	uxtb	r3, r3
 8009038:	f003 0307 	and.w	r3, r3, #7
 800903c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800903e:	7bbb      	ldrb	r3, [r7, #14]
 8009040:	7b3a      	ldrb	r2, [r7, #12]
 8009042:	4911      	ldr	r1, [pc, #68]	; (8009088 <UARTEx_SetNbDataToProcess+0x94>)
 8009044:	5c8a      	ldrb	r2, [r1, r2]
 8009046:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800904a:	7b3a      	ldrb	r2, [r7, #12]
 800904c:	490f      	ldr	r1, [pc, #60]	; (800908c <UARTEx_SetNbDataToProcess+0x98>)
 800904e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009050:	fb93 f3f2 	sdiv	r3, r3, r2
 8009054:	b29a      	uxth	r2, r3
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800905c:	7bfb      	ldrb	r3, [r7, #15]
 800905e:	7b7a      	ldrb	r2, [r7, #13]
 8009060:	4909      	ldr	r1, [pc, #36]	; (8009088 <UARTEx_SetNbDataToProcess+0x94>)
 8009062:	5c8a      	ldrb	r2, [r1, r2]
 8009064:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009068:	7b7a      	ldrb	r2, [r7, #13]
 800906a:	4908      	ldr	r1, [pc, #32]	; (800908c <UARTEx_SetNbDataToProcess+0x98>)
 800906c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800906e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009072:	b29a      	uxth	r2, r3
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800907a:	bf00      	nop
 800907c:	3714      	adds	r7, #20
 800907e:	46bd      	mov	sp, r7
 8009080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009084:	4770      	bx	lr
 8009086:	bf00      	nop
 8009088:	08009160 	.word	0x08009160
 800908c:	08009168 	.word	0x08009168

08009090 <__libc_init_array>:
 8009090:	b570      	push	{r4, r5, r6, lr}
 8009092:	4d0d      	ldr	r5, [pc, #52]	; (80090c8 <__libc_init_array+0x38>)
 8009094:	4c0d      	ldr	r4, [pc, #52]	; (80090cc <__libc_init_array+0x3c>)
 8009096:	1b64      	subs	r4, r4, r5
 8009098:	10a4      	asrs	r4, r4, #2
 800909a:	2600      	movs	r6, #0
 800909c:	42a6      	cmp	r6, r4
 800909e:	d109      	bne.n	80090b4 <__libc_init_array+0x24>
 80090a0:	4d0b      	ldr	r5, [pc, #44]	; (80090d0 <__libc_init_array+0x40>)
 80090a2:	4c0c      	ldr	r4, [pc, #48]	; (80090d4 <__libc_init_array+0x44>)
 80090a4:	f000 f820 	bl	80090e8 <_init>
 80090a8:	1b64      	subs	r4, r4, r5
 80090aa:	10a4      	asrs	r4, r4, #2
 80090ac:	2600      	movs	r6, #0
 80090ae:	42a6      	cmp	r6, r4
 80090b0:	d105      	bne.n	80090be <__libc_init_array+0x2e>
 80090b2:	bd70      	pop	{r4, r5, r6, pc}
 80090b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80090b8:	4798      	blx	r3
 80090ba:	3601      	adds	r6, #1
 80090bc:	e7ee      	b.n	800909c <__libc_init_array+0xc>
 80090be:	f855 3b04 	ldr.w	r3, [r5], #4
 80090c2:	4798      	blx	r3
 80090c4:	3601      	adds	r6, #1
 80090c6:	e7f2      	b.n	80090ae <__libc_init_array+0x1e>
 80090c8:	08009178 	.word	0x08009178
 80090cc:	08009178 	.word	0x08009178
 80090d0:	08009178 	.word	0x08009178
 80090d4:	0800917c 	.word	0x0800917c

080090d8 <memset>:
 80090d8:	4402      	add	r2, r0
 80090da:	4603      	mov	r3, r0
 80090dc:	4293      	cmp	r3, r2
 80090de:	d100      	bne.n	80090e2 <memset+0xa>
 80090e0:	4770      	bx	lr
 80090e2:	f803 1b01 	strb.w	r1, [r3], #1
 80090e6:	e7f9      	b.n	80090dc <memset+0x4>

080090e8 <_init>:
 80090e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090ea:	bf00      	nop
 80090ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090ee:	bc08      	pop	{r3}
 80090f0:	469e      	mov	lr, r3
 80090f2:	4770      	bx	lr

080090f4 <_fini>:
 80090f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090f6:	bf00      	nop
 80090f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090fa:	bc08      	pop	{r3}
 80090fc:	469e      	mov	lr, r3
 80090fe:	4770      	bx	lr
