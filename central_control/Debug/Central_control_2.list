
Central_control_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e854  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000061c  0800ea18  0800ea18  0001ea18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f034  0800f034  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800f034  0800f034  0001f034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f03c  0800f03c  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f03c  0800f03c  0001f03c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f040  0800f040  0001f040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800f044  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000684  200001f0  0800f234  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000874  0800f234  00020874  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000216fc  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ce9  00000000  00000000  0004191c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001aa0  00000000  00000000  00045608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001960  00000000  00000000  000470a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030309  00000000  00000000  00048a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002116c  00000000  00000000  00078d11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00126763  00000000  00000000  00099e7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001c05e0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008264  00000000  00000000  001c0630  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001f0 	.word	0x200001f0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800e9fc 	.word	0x0800e9fc

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001f4 	.word	0x200001f4
 80001fc:	0800e9fc 	.word	0x0800e9fc

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bec:	f000 b974 	b.w	8000ed8 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	4604      	mov	r4, r0
 8000c10:	468e      	mov	lr, r1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d14d      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c16:	428a      	cmp	r2, r1
 8000c18:	4694      	mov	ip, r2
 8000c1a:	d969      	bls.n	8000cf0 <__udivmoddi4+0xe8>
 8000c1c:	fab2 f282 	clz	r2, r2
 8000c20:	b152      	cbz	r2, 8000c38 <__udivmoddi4+0x30>
 8000c22:	fa01 f302 	lsl.w	r3, r1, r2
 8000c26:	f1c2 0120 	rsb	r1, r2, #32
 8000c2a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c2e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c32:	ea41 0e03 	orr.w	lr, r1, r3
 8000c36:	4094      	lsls	r4, r2
 8000c38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c3c:	0c21      	lsrs	r1, r4, #16
 8000c3e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c42:	fa1f f78c 	uxth.w	r7, ip
 8000c46:	fb08 e316 	mls	r3, r8, r6, lr
 8000c4a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c4e:	fb06 f107 	mul.w	r1, r6, r7
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c5e:	f080 811f 	bcs.w	8000ea0 <__udivmoddi4+0x298>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 811c 	bls.w	8000ea0 <__udivmoddi4+0x298>
 8000c68:	3e02      	subs	r6, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a5b      	subs	r3, r3, r1
 8000c6e:	b2a4      	uxth	r4, r4
 8000c70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c74:	fb08 3310 	mls	r3, r8, r0, r3
 8000c78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c7c:	fb00 f707 	mul.w	r7, r0, r7
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	d90a      	bls.n	8000c9a <__udivmoddi4+0x92>
 8000c84:	eb1c 0404 	adds.w	r4, ip, r4
 8000c88:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c8c:	f080 810a 	bcs.w	8000ea4 <__udivmoddi4+0x29c>
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	f240 8107 	bls.w	8000ea4 <__udivmoddi4+0x29c>
 8000c96:	4464      	add	r4, ip
 8000c98:	3802      	subs	r0, #2
 8000c9a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c9e:	1be4      	subs	r4, r4, r7
 8000ca0:	2600      	movs	r6, #0
 8000ca2:	b11d      	cbz	r5, 8000cac <__udivmoddi4+0xa4>
 8000ca4:	40d4      	lsrs	r4, r2
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cac:	4631      	mov	r1, r6
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0xc2>
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	f000 80ef 	beq.w	8000e9a <__udivmoddi4+0x292>
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	4631      	mov	r1, r6
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	fab3 f683 	clz	r6, r3
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	d14a      	bne.n	8000d68 <__udivmoddi4+0x160>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0xd4>
 8000cd6:	4282      	cmp	r2, r0
 8000cd8:	f200 80f9 	bhi.w	8000ece <__udivmoddi4+0x2c6>
 8000cdc:	1a84      	subs	r4, r0, r2
 8000cde:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	469e      	mov	lr, r3
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	d0e0      	beq.n	8000cac <__udivmoddi4+0xa4>
 8000cea:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cee:	e7dd      	b.n	8000cac <__udivmoddi4+0xa4>
 8000cf0:	b902      	cbnz	r2, 8000cf4 <__udivmoddi4+0xec>
 8000cf2:	deff      	udf	#255	; 0xff
 8000cf4:	fab2 f282 	clz	r2, r2
 8000cf8:	2a00      	cmp	r2, #0
 8000cfa:	f040 8092 	bne.w	8000e22 <__udivmoddi4+0x21a>
 8000cfe:	eba1 010c 	sub.w	r1, r1, ip
 8000d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d06:	fa1f fe8c 	uxth.w	lr, ip
 8000d0a:	2601      	movs	r6, #1
 8000d0c:	0c20      	lsrs	r0, r4, #16
 8000d0e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d12:	fb07 1113 	mls	r1, r7, r3, r1
 8000d16:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d1a:	fb0e f003 	mul.w	r0, lr, r3
 8000d1e:	4288      	cmp	r0, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x12c>
 8000d22:	eb1c 0101 	adds.w	r1, ip, r1
 8000d26:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x12a>
 8000d2c:	4288      	cmp	r0, r1
 8000d2e:	f200 80cb 	bhi.w	8000ec8 <__udivmoddi4+0x2c0>
 8000d32:	4643      	mov	r3, r8
 8000d34:	1a09      	subs	r1, r1, r0
 8000d36:	b2a4      	uxth	r4, r4
 8000d38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d3c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d40:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d44:	fb0e fe00 	mul.w	lr, lr, r0
 8000d48:	45a6      	cmp	lr, r4
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x156>
 8000d4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d50:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d54:	d202      	bcs.n	8000d5c <__udivmoddi4+0x154>
 8000d56:	45a6      	cmp	lr, r4
 8000d58:	f200 80bb 	bhi.w	8000ed2 <__udivmoddi4+0x2ca>
 8000d5c:	4608      	mov	r0, r1
 8000d5e:	eba4 040e 	sub.w	r4, r4, lr
 8000d62:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d66:	e79c      	b.n	8000ca2 <__udivmoddi4+0x9a>
 8000d68:	f1c6 0720 	rsb	r7, r6, #32
 8000d6c:	40b3      	lsls	r3, r6
 8000d6e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d72:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d76:	fa20 f407 	lsr.w	r4, r0, r7
 8000d7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d7e:	431c      	orrs	r4, r3
 8000d80:	40f9      	lsrs	r1, r7
 8000d82:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d86:	fa00 f306 	lsl.w	r3, r0, r6
 8000d8a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d8e:	0c20      	lsrs	r0, r4, #16
 8000d90:	fa1f fe8c 	uxth.w	lr, ip
 8000d94:	fb09 1118 	mls	r1, r9, r8, r1
 8000d98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9c:	fb08 f00e 	mul.w	r0, r8, lr
 8000da0:	4288      	cmp	r0, r1
 8000da2:	fa02 f206 	lsl.w	r2, r2, r6
 8000da6:	d90b      	bls.n	8000dc0 <__udivmoddi4+0x1b8>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000db0:	f080 8088 	bcs.w	8000ec4 <__udivmoddi4+0x2bc>
 8000db4:	4288      	cmp	r0, r1
 8000db6:	f240 8085 	bls.w	8000ec4 <__udivmoddi4+0x2bc>
 8000dba:	f1a8 0802 	sub.w	r8, r8, #2
 8000dbe:	4461      	add	r1, ip
 8000dc0:	1a09      	subs	r1, r1, r0
 8000dc2:	b2a4      	uxth	r4, r4
 8000dc4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dc8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dcc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dd0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd4:	458e      	cmp	lr, r1
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x1e2>
 8000dd8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ddc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000de0:	d26c      	bcs.n	8000ebc <__udivmoddi4+0x2b4>
 8000de2:	458e      	cmp	lr, r1
 8000de4:	d96a      	bls.n	8000ebc <__udivmoddi4+0x2b4>
 8000de6:	3802      	subs	r0, #2
 8000de8:	4461      	add	r1, ip
 8000dea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dee:	fba0 9402 	umull	r9, r4, r0, r2
 8000df2:	eba1 010e 	sub.w	r1, r1, lr
 8000df6:	42a1      	cmp	r1, r4
 8000df8:	46c8      	mov	r8, r9
 8000dfa:	46a6      	mov	lr, r4
 8000dfc:	d356      	bcc.n	8000eac <__udivmoddi4+0x2a4>
 8000dfe:	d053      	beq.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e00:	b15d      	cbz	r5, 8000e1a <__udivmoddi4+0x212>
 8000e02:	ebb3 0208 	subs.w	r2, r3, r8
 8000e06:	eb61 010e 	sbc.w	r1, r1, lr
 8000e0a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e0e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e12:	40f1      	lsrs	r1, r6
 8000e14:	431f      	orrs	r7, r3
 8000e16:	e9c5 7100 	strd	r7, r1, [r5]
 8000e1a:	2600      	movs	r6, #0
 8000e1c:	4631      	mov	r1, r6
 8000e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e22:	f1c2 0320 	rsb	r3, r2, #32
 8000e26:	40d8      	lsrs	r0, r3
 8000e28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e2c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e30:	4091      	lsls	r1, r2
 8000e32:	4301      	orrs	r1, r0
 8000e34:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e38:	fa1f fe8c 	uxth.w	lr, ip
 8000e3c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e40:	fb07 3610 	mls	r6, r7, r0, r3
 8000e44:	0c0b      	lsrs	r3, r1, #16
 8000e46:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e4a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e4e:	429e      	cmp	r6, r3
 8000e50:	fa04 f402 	lsl.w	r4, r4, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x260>
 8000e56:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e5e:	d22f      	bcs.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e60:	429e      	cmp	r6, r3
 8000e62:	d92d      	bls.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e64:	3802      	subs	r0, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	1b9b      	subs	r3, r3, r6
 8000e6a:	b289      	uxth	r1, r1
 8000e6c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e70:	fb07 3316 	mls	r3, r7, r6, r3
 8000e74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e78:	fb06 f30e 	mul.w	r3, r6, lr
 8000e7c:	428b      	cmp	r3, r1
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x28a>
 8000e80:	eb1c 0101 	adds.w	r1, ip, r1
 8000e84:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e88:	d216      	bcs.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d914      	bls.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8e:	3e02      	subs	r6, #2
 8000e90:	4461      	add	r1, ip
 8000e92:	1ac9      	subs	r1, r1, r3
 8000e94:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e98:	e738      	b.n	8000d0c <__udivmoddi4+0x104>
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e705      	b.n	8000cac <__udivmoddi4+0xa4>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e3      	b.n	8000c6c <__udivmoddi4+0x64>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6f8      	b.n	8000c9a <__udivmoddi4+0x92>
 8000ea8:	454b      	cmp	r3, r9
 8000eaa:	d2a9      	bcs.n	8000e00 <__udivmoddi4+0x1f8>
 8000eac:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7a3      	b.n	8000e00 <__udivmoddi4+0x1f8>
 8000eb8:	4646      	mov	r6, r8
 8000eba:	e7ea      	b.n	8000e92 <__udivmoddi4+0x28a>
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	e794      	b.n	8000dea <__udivmoddi4+0x1e2>
 8000ec0:	4640      	mov	r0, r8
 8000ec2:	e7d1      	b.n	8000e68 <__udivmoddi4+0x260>
 8000ec4:	46d0      	mov	r8, sl
 8000ec6:	e77b      	b.n	8000dc0 <__udivmoddi4+0x1b8>
 8000ec8:	3b02      	subs	r3, #2
 8000eca:	4461      	add	r1, ip
 8000ecc:	e732      	b.n	8000d34 <__udivmoddi4+0x12c>
 8000ece:	4630      	mov	r0, r6
 8000ed0:	e709      	b.n	8000ce6 <__udivmoddi4+0xde>
 8000ed2:	4464      	add	r4, ip
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	e742      	b.n	8000d5e <__udivmoddi4+0x156>

08000ed8 <__aeabi_idiv0>:
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop

08000edc <getSync>:
		sprintf(buf, "sig: %d x: %d y: %d width: %d height: %d index: %d age: %d\r\n", (pixy.curr_blocks + n)->m_signature, (pixy.curr_blocks + n)->m_x, (pixy.curr_blocks + n)->m_y, (pixy.curr_blocks + n)->m_width, (pixy.curr_blocks + n)->m_height, (pixy.curr_blocks + n)->m_index, (pixy.curr_blocks + n)->m_age);
	printf(buf);
}


int16_t getSync() {
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
	uint8_t i, j, c, cprev;
	int16_t res;
	uint16_t start;

	// parse bytes until we find sync
	for (i = j = 0, cprev = 0; true; i++) {
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	73bb      	strb	r3, [r7, #14]
 8000ee6:	7bbb      	ldrb	r3, [r7, #14]
 8000ee8:	73fb      	strb	r3, [r7, #15]
 8000eea:	2300      	movs	r3, #0
 8000eec:	737b      	strb	r3, [r7, #13]
		res = recv(&c, 1, NULL);
 8000eee:	1dfb      	adds	r3, r7, #7
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	2101      	movs	r1, #1
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f000 fa1d 	bl	8001334 <recv>
 8000efa:	4603      	mov	r3, r0
 8000efc:	817b      	strh	r3, [r7, #10]
		if (res >= PIXY_RESULT_OK) {
 8000efe:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	db1f      	blt.n	8000f46 <getSync+0x6a>
			// since we're using little endian, previous byte is least significant byte
			start = cprev;
 8000f06:	7b7b      	ldrb	r3, [r7, #13]
 8000f08:	813b      	strh	r3, [r7, #8]
			// current byte is most significant byte
			start |= c << 8;
 8000f0a:	79fb      	ldrb	r3, [r7, #7]
 8000f0c:	021b      	lsls	r3, r3, #8
 8000f0e:	b21a      	sxth	r2, r3
 8000f10:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	b21b      	sxth	r3, r3
 8000f18:	813b      	strh	r3, [r7, #8]
			cprev = c;
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
 8000f1c:	737b      	strb	r3, [r7, #13]
			if (start == PIXY_CHECKSUM_SYNC) {
 8000f1e:	893b      	ldrh	r3, [r7, #8]
 8000f20:	f24c 12af 	movw	r2, #49583	; 0xc1af
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d104      	bne.n	8000f32 <getSync+0x56>
				pixy.m_cs = true;
 8000f28:	4b16      	ldr	r3, [pc, #88]	; (8000f84 <getSync+0xa8>)
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	749a      	strb	r2, [r3, #18]
				return PIXY_RESULT_OK;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	e024      	b.n	8000f7c <getSync+0xa0>
			}
			if (start == PIXY_NO_CHECKSUM_SYNC) {
 8000f32:	893b      	ldrh	r3, [r7, #8]
 8000f34:	f24c 12ae 	movw	r2, #49582	; 0xc1ae
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d104      	bne.n	8000f46 <getSync+0x6a>
				pixy.m_cs = false;
 8000f3c:	4b11      	ldr	r3, [pc, #68]	; (8000f84 <getSync+0xa8>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	749a      	strb	r2, [r3, #18]
				return PIXY_RESULT_OK;
 8000f42:	2300      	movs	r3, #0
 8000f44:	e01a      	b.n	8000f7c <getSync+0xa0>
			}
		}
		// If we've read some bytes and no sync, then wait and try again.
		// And do that several more times before we give up.
		// Pixy guarantees to respond within 100us.
		if (i >= 4) {
 8000f46:	7bfb      	ldrb	r3, [r7, #15]
 8000f48:	2b03      	cmp	r3, #3
 8000f4a:	d913      	bls.n	8000f74 <getSync+0x98>
			if (j >= 4) {
 8000f4c:	7bbb      	ldrb	r3, [r7, #14]
 8000f4e:	2b03      	cmp	r3, #3
 8000f50:	d902      	bls.n	8000f58 <getSync+0x7c>
				return PIXY_RESULT_ERROR;
 8000f52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f56:	e011      	b.n	8000f7c <getSync+0xa0>
			}

			for (volatile int i = 0; i < 10; i++) asm(""); // 25 microsecond delay (9.5 => 10)
 8000f58:	2300      	movs	r3, #0
 8000f5a:	603b      	str	r3, [r7, #0]
 8000f5c:	e002      	b.n	8000f64 <getSync+0x88>
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	3301      	adds	r3, #1
 8000f62:	603b      	str	r3, [r7, #0]
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	2b09      	cmp	r3, #9
 8000f68:	ddf9      	ble.n	8000f5e <getSync+0x82>

			j++;
 8000f6a:	7bbb      	ldrb	r3, [r7, #14]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	73bb      	strb	r3, [r7, #14]
			i = 0;
 8000f70:	2300      	movs	r3, #0
 8000f72:	73fb      	strb	r3, [r7, #15]
	for (i = j = 0, cprev = 0; true; i++) {
 8000f74:	7bfb      	ldrb	r3, [r7, #15]
 8000f76:	3301      	adds	r3, #1
 8000f78:	73fb      	strb	r3, [r7, #15]
		res = recv(&c, 1, NULL);
 8000f7a:	e7b8      	b.n	8000eee <getSync+0x12>
		}
	}
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3710      	adds	r7, #16
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	2000020c 	.word	0x2000020c

08000f88 <recvPacket>:

int16_t recvPacket() {
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
	uint16_t csCalc, csSerial;
	int16_t res;

	res = getSync();
 8000f8e:	f7ff ffa5 	bl	8000edc <getSync>
 8000f92:	4603      	mov	r3, r0
 8000f94:	80fb      	strh	r3, [r7, #6]
	if (res < 0)
 8000f96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	da02      	bge.n	8000fa4 <recvPacket+0x1c>
		return res;
 8000f9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fa2:	e065      	b.n	8001070 <recvPacket+0xe8>

	if (pixy.m_cs) {
 8000fa4:	4b34      	ldr	r3, [pc, #208]	; (8001078 <recvPacket+0xf0>)
 8000fa6:	7c9b      	ldrb	r3, [r3, #18]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d035      	beq.n	8001018 <recvPacket+0x90>
		res = recv(pixy.m_buf, 4, NULL);
 8000fac:	4b32      	ldr	r3, [pc, #200]	; (8001078 <recvPacket+0xf0>)
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	2104      	movs	r1, #4
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f000 f9bd 	bl	8001334 <recv>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	80fb      	strh	r3, [r7, #6]
		if (res < 0)
 8000fbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	da02      	bge.n	8000fcc <recvPacket+0x44>
			return res;
 8000fc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fca:	e051      	b.n	8001070 <recvPacket+0xe8>

		pixy.m_type = pixy.m_buf[0];
 8000fcc:	4b2a      	ldr	r3, [pc, #168]	; (8001078 <recvPacket+0xf0>)
 8000fce:	689b      	ldr	r3, [r3, #8]
 8000fd0:	781a      	ldrb	r2, [r3, #0]
 8000fd2:	4b29      	ldr	r3, [pc, #164]	; (8001078 <recvPacket+0xf0>)
 8000fd4:	741a      	strb	r2, [r3, #16]
		pixy.m_length = pixy.m_buf[1];
 8000fd6:	4b28      	ldr	r3, [pc, #160]	; (8001078 <recvPacket+0xf0>)
 8000fd8:	689b      	ldr	r3, [r3, #8]
 8000fda:	785a      	ldrb	r2, [r3, #1]
 8000fdc:	4b26      	ldr	r3, [pc, #152]	; (8001078 <recvPacket+0xf0>)
 8000fde:	745a      	strb	r2, [r3, #17]

		csSerial = *(uint16_t*) &(pixy.m_buf[2]);
 8000fe0:	4b25      	ldr	r3, [pc, #148]	; (8001078 <recvPacket+0xf0>)
 8000fe2:	689b      	ldr	r3, [r3, #8]
 8000fe4:	885b      	ldrh	r3, [r3, #2]
 8000fe6:	80bb      	strh	r3, [r7, #4]

		res = recv(pixy.m_buf, pixy.m_length, &csCalc);
 8000fe8:	4b23      	ldr	r3, [pc, #140]	; (8001078 <recvPacket+0xf0>)
 8000fea:	689b      	ldr	r3, [r3, #8]
 8000fec:	4a22      	ldr	r2, [pc, #136]	; (8001078 <recvPacket+0xf0>)
 8000fee:	7c51      	ldrb	r1, [r2, #17]
 8000ff0:	1cba      	adds	r2, r7, #2
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f000 f99e 	bl	8001334 <recv>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	80fb      	strh	r3, [r7, #6]
		if (res < 0)
 8000ffc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001000:	2b00      	cmp	r3, #0
 8001002:	da02      	bge.n	800100a <recvPacket+0x82>
			return res;
 8001004:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001008:	e032      	b.n	8001070 <recvPacket+0xe8>

		if (csSerial != csCalc) {
 800100a:	887b      	ldrh	r3, [r7, #2]
 800100c:	88ba      	ldrh	r2, [r7, #4]
 800100e:	429a      	cmp	r2, r3
 8001010:	d02d      	beq.n	800106e <recvPacket+0xe6>
			return PIXY_RESULT_CHECKSUM_ERROR;
 8001012:	f06f 0302 	mvn.w	r3, #2
 8001016:	e02b      	b.n	8001070 <recvPacket+0xe8>
		}
	} else {
		res = recv(pixy.m_buf, 2, NULL);
 8001018:	4b17      	ldr	r3, [pc, #92]	; (8001078 <recvPacket+0xf0>)
 800101a:	689b      	ldr	r3, [r3, #8]
 800101c:	2200      	movs	r2, #0
 800101e:	2102      	movs	r1, #2
 8001020:	4618      	mov	r0, r3
 8001022:	f000 f987 	bl	8001334 <recv>
 8001026:	4603      	mov	r3, r0
 8001028:	80fb      	strh	r3, [r7, #6]
		if (res < 0)
 800102a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800102e:	2b00      	cmp	r3, #0
 8001030:	da02      	bge.n	8001038 <recvPacket+0xb0>
			return res;
 8001032:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001036:	e01b      	b.n	8001070 <recvPacket+0xe8>

		pixy.m_type = pixy.m_buf[0];
 8001038:	4b0f      	ldr	r3, [pc, #60]	; (8001078 <recvPacket+0xf0>)
 800103a:	689b      	ldr	r3, [r3, #8]
 800103c:	781a      	ldrb	r2, [r3, #0]
 800103e:	4b0e      	ldr	r3, [pc, #56]	; (8001078 <recvPacket+0xf0>)
 8001040:	741a      	strb	r2, [r3, #16]
		pixy.m_length = pixy.m_buf[1];
 8001042:	4b0d      	ldr	r3, [pc, #52]	; (8001078 <recvPacket+0xf0>)
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	785a      	ldrb	r2, [r3, #1]
 8001048:	4b0b      	ldr	r3, [pc, #44]	; (8001078 <recvPacket+0xf0>)
 800104a:	745a      	strb	r2, [r3, #17]

		res = recv(pixy.m_buf, pixy.m_length, NULL);
 800104c:	4b0a      	ldr	r3, [pc, #40]	; (8001078 <recvPacket+0xf0>)
 800104e:	689b      	ldr	r3, [r3, #8]
 8001050:	4a09      	ldr	r2, [pc, #36]	; (8001078 <recvPacket+0xf0>)
 8001052:	7c51      	ldrb	r1, [r2, #17]
 8001054:	2200      	movs	r2, #0
 8001056:	4618      	mov	r0, r3
 8001058:	f000 f96c 	bl	8001334 <recv>
 800105c:	4603      	mov	r3, r0
 800105e:	80fb      	strh	r3, [r7, #6]
		if (res < 0)
 8001060:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001064:	2b00      	cmp	r3, #0
 8001066:	da02      	bge.n	800106e <recvPacket+0xe6>
			return res;
 8001068:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800106c:	e000      	b.n	8001070 <recvPacket+0xe8>
	}
	return PIXY_RESULT_OK;
 800106e:	2300      	movs	r3, #0
}
 8001070:	4618      	mov	r0, r3
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	2000020c 	.word	0x2000020c

0800107c <sendPacket>:

int16_t sendPacket() {
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
	// write header info at beginnig of buffer
	pixy.m_buf[0] = PIXY_NO_CHECKSUM_SYNC & 0xff;
 8001080:	4b10      	ldr	r3, [pc, #64]	; (80010c4 <sendPacket+0x48>)
 8001082:	689b      	ldr	r3, [r3, #8]
 8001084:	22ae      	movs	r2, #174	; 0xae
 8001086:	701a      	strb	r2, [r3, #0]
	pixy.m_buf[1] = PIXY_NO_CHECKSUM_SYNC >> 8;
 8001088:	4b0e      	ldr	r3, [pc, #56]	; (80010c4 <sendPacket+0x48>)
 800108a:	689b      	ldr	r3, [r3, #8]
 800108c:	3301      	adds	r3, #1
 800108e:	22c1      	movs	r2, #193	; 0xc1
 8001090:	701a      	strb	r2, [r3, #0]
	pixy.m_buf[2] = pixy.m_type;
 8001092:	4b0c      	ldr	r3, [pc, #48]	; (80010c4 <sendPacket+0x48>)
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	3302      	adds	r3, #2
 8001098:	4a0a      	ldr	r2, [pc, #40]	; (80010c4 <sendPacket+0x48>)
 800109a:	7c12      	ldrb	r2, [r2, #16]
 800109c:	701a      	strb	r2, [r3, #0]
	pixy.m_buf[3] = pixy.m_length;
 800109e:	4b09      	ldr	r3, [pc, #36]	; (80010c4 <sendPacket+0x48>)
 80010a0:	689b      	ldr	r3, [r3, #8]
 80010a2:	3303      	adds	r3, #3
 80010a4:	4a07      	ldr	r2, [pc, #28]	; (80010c4 <sendPacket+0x48>)
 80010a6:	7c52      	ldrb	r2, [r2, #17]
 80010a8:	701a      	strb	r2, [r3, #0]
	// send whole thing -- header and data in one call
	return send(pixy.m_buf, pixy.m_length + PIXY_SEND_HEADER_SIZE);
 80010aa:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <sendPacket+0x48>)
 80010ac:	689a      	ldr	r2, [r3, #8]
 80010ae:	4b05      	ldr	r3, [pc, #20]	; (80010c4 <sendPacket+0x48>)
 80010b0:	7c5b      	ldrb	r3, [r3, #17]
 80010b2:	3304      	adds	r3, #4
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	4619      	mov	r1, r3
 80010b8:	4610      	mov	r0, r2
 80010ba:	f000 f98f 	bl	80013dc <send>
 80010be:	4603      	mov	r3, r0
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	2000020c 	.word	0x2000020c

080010c8 <getVersion>:

int8_t getVersion() {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
	pixy.m_length = 0;
 80010cc:	4b11      	ldr	r3, [pc, #68]	; (8001114 <getVersion+0x4c>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	745a      	strb	r2, [r3, #17]
	pixy.m_type = PIXY_TYPE_REQUEST_VERSION;
 80010d2:	4b10      	ldr	r3, [pc, #64]	; (8001114 <getVersion+0x4c>)
 80010d4:	220e      	movs	r2, #14
 80010d6:	741a      	strb	r2, [r3, #16]
	sendPacket();
 80010d8:	f7ff ffd0 	bl	800107c <sendPacket>
	if (recvPacket() == 0) {
 80010dc:	f7ff ff54 	bl	8000f88 <recvPacket>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d112      	bne.n	800110c <getVersion+0x44>
		if (pixy.m_type == PIXY_TYPE_RESPONSE_VERSION) {
 80010e6:	4b0b      	ldr	r3, [pc, #44]	; (8001114 <getVersion+0x4c>)
 80010e8:	7c1b      	ldrb	r3, [r3, #16]
 80010ea:	2b0f      	cmp	r3, #15
 80010ec:	d107      	bne.n	80010fe <getVersion+0x36>
			pixy.version = (Version*) pixy.m_buf;
 80010ee:	4b09      	ldr	r3, [pc, #36]	; (8001114 <getVersion+0x4c>)
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	4a08      	ldr	r2, [pc, #32]	; (8001114 <getVersion+0x4c>)
 80010f4:	6013      	str	r3, [r2, #0]
			return pixy.m_length;
 80010f6:	4b07      	ldr	r3, [pc, #28]	; (8001114 <getVersion+0x4c>)
 80010f8:	7c5b      	ldrb	r3, [r3, #17]
 80010fa:	b25b      	sxtb	r3, r3
 80010fc:	e008      	b.n	8001110 <getVersion+0x48>
		} else if (pixy.m_type == PIXY_TYPE_RESPONSE_ERROR)
 80010fe:	4b05      	ldr	r3, [pc, #20]	; (8001114 <getVersion+0x4c>)
 8001100:	7c1b      	ldrb	r3, [r3, #16]
 8001102:	2b03      	cmp	r3, #3
 8001104:	d102      	bne.n	800110c <getVersion+0x44>
			return PIXY_RESULT_BUSY;
 8001106:	f06f 0301 	mvn.w	r3, #1
 800110a:	e001      	b.n	8001110 <getVersion+0x48>
	}
	return PIXY_RESULT_ERROR;  // some kind of bitstream error
 800110c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001110:	4618      	mov	r0, r3
 8001112:	bd80      	pop	{r7, pc}
 8001114:	2000020c 	.word	0x2000020c

08001118 <getResolution>:

int8_t getResolution() {
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
	pixy.m_length = 1;
 800111c:	4b13      	ldr	r3, [pc, #76]	; (800116c <getResolution+0x54>)
 800111e:	2201      	movs	r2, #1
 8001120:	745a      	strb	r2, [r3, #17]
	pixy.m_bufPayload[0] = 0; // for future types of queries
 8001122:	4b12      	ldr	r3, [pc, #72]	; (800116c <getResolution+0x54>)
 8001124:	68db      	ldr	r3, [r3, #12]
 8001126:	2200      	movs	r2, #0
 8001128:	701a      	strb	r2, [r3, #0]
	pixy.m_type = PIXY_TYPE_REQUEST_RESOLUTION;
 800112a:	4b10      	ldr	r3, [pc, #64]	; (800116c <getResolution+0x54>)
 800112c:	220c      	movs	r2, #12
 800112e:	741a      	strb	r2, [r3, #16]
	sendPacket();
 8001130:	f7ff ffa4 	bl	800107c <sendPacket>
	if (recvPacket() == 0) {
 8001134:	f7ff ff28 	bl	8000f88 <recvPacket>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d112      	bne.n	8001164 <getResolution+0x4c>
		if (pixy.m_type == PIXY_TYPE_RESPONSE_RESOLUTION) {
 800113e:	4b0b      	ldr	r3, [pc, #44]	; (800116c <getResolution+0x54>)
 8001140:	7c1b      	ldrb	r3, [r3, #16]
 8001142:	2b0d      	cmp	r3, #13
 8001144:	d10b      	bne.n	800115e <getResolution+0x46>
			pixy.frameWidth = *(uint16_t*)pixy.m_buf;
 8001146:	4b09      	ldr	r3, [pc, #36]	; (800116c <getResolution+0x54>)
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	881a      	ldrh	r2, [r3, #0]
 800114c:	4b07      	ldr	r3, [pc, #28]	; (800116c <getResolution+0x54>)
 800114e:	809a      	strh	r2, [r3, #4]
			pixy.frameHeight = *(uint16_t*)(pixy.m_buf + sizeof(uint16_t));
 8001150:	4b06      	ldr	r3, [pc, #24]	; (800116c <getResolution+0x54>)
 8001152:	689b      	ldr	r3, [r3, #8]
 8001154:	885a      	ldrh	r2, [r3, #2]
 8001156:	4b05      	ldr	r3, [pc, #20]	; (800116c <getResolution+0x54>)
 8001158:	80da      	strh	r2, [r3, #6]
			return PIXY_RESULT_OK; // success
 800115a:	2300      	movs	r3, #0
 800115c:	e004      	b.n	8001168 <getResolution+0x50>
		} else
			return PIXY_RESULT_ERROR;
 800115e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001162:	e001      	b.n	8001168 <getResolution+0x50>
	} else
		return PIXY_RESULT_ERROR;  // some kind of bitstream error
 8001164:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001168:	4618      	mov	r0, r3
 800116a:	bd80      	pop	{r7, pc}
 800116c:	2000020c 	.word	0x2000020c

08001170 <getBlocks>:

int8_t getBlocks(bool wait, uint8_t sigmap, uint8_t maxBlocks) {
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	71fb      	strb	r3, [r7, #7]
 800117a:	460b      	mov	r3, r1
 800117c:	71bb      	strb	r3, [r7, #6]
 800117e:	4613      	mov	r3, r2
 8001180:	717b      	strb	r3, [r7, #5]
	pixy.curr_blocks = NULL;
 8001182:	4b2f      	ldr	r3, [pc, #188]	; (8001240 <getBlocks+0xd0>)
 8001184:	2200      	movs	r2, #0
 8001186:	615a      	str	r2, [r3, #20]
	pixy.numBlocks = 0;
 8001188:	4b2d      	ldr	r3, [pc, #180]	; (8001240 <getBlocks+0xd0>)
 800118a:	2200      	movs	r2, #0
 800118c:	761a      	strb	r2, [r3, #24]

	while (1) {
		// fill in request data
		pixy.m_bufPayload[0] = sigmap;
 800118e:	4b2c      	ldr	r3, [pc, #176]	; (8001240 <getBlocks+0xd0>)
 8001190:	68db      	ldr	r3, [r3, #12]
 8001192:	79ba      	ldrb	r2, [r7, #6]
 8001194:	701a      	strb	r2, [r3, #0]
		pixy.m_bufPayload[1] = maxBlocks;
 8001196:	4b2a      	ldr	r3, [pc, #168]	; (8001240 <getBlocks+0xd0>)
 8001198:	68db      	ldr	r3, [r3, #12]
 800119a:	3301      	adds	r3, #1
 800119c:	797a      	ldrb	r2, [r7, #5]
 800119e:	701a      	strb	r2, [r3, #0]
		pixy.m_length = 2;
 80011a0:	4b27      	ldr	r3, [pc, #156]	; (8001240 <getBlocks+0xd0>)
 80011a2:	2202      	movs	r2, #2
 80011a4:	745a      	strb	r2, [r3, #17]
		pixy.m_type = CCC_REQUEST_BLOCKS;
 80011a6:	4b26      	ldr	r3, [pc, #152]	; (8001240 <getBlocks+0xd0>)
 80011a8:	2220      	movs	r2, #32
 80011aa:	741a      	strb	r2, [r3, #16]

		// send request
		sendPacket();
 80011ac:	f7ff ff66 	bl	800107c <sendPacket>
		if (recvPacket() == 0) {
 80011b0:	f7ff feea 	bl	8000f88 <recvPacket>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d131      	bne.n	800121e <getBlocks+0xae>
			if (pixy.m_type == CCC_RESPONSE_BLOCKS) {
 80011ba:	4b21      	ldr	r3, [pc, #132]	; (8001240 <getBlocks+0xd0>)
 80011bc:	7c1b      	ldrb	r3, [r3, #16]
 80011be:	2b21      	cmp	r3, #33	; 0x21
 80011c0:	d111      	bne.n	80011e6 <getBlocks+0x76>
				pixy.curr_blocks = (Block*) pixy.m_buf;
 80011c2:	4b1f      	ldr	r3, [pc, #124]	; (8001240 <getBlocks+0xd0>)
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	4a1e      	ldr	r2, [pc, #120]	; (8001240 <getBlocks+0xd0>)
 80011c8:	6153      	str	r3, [r2, #20]
				pixy.numBlocks = pixy.m_length / sizeof(Block);
 80011ca:	4b1d      	ldr	r3, [pc, #116]	; (8001240 <getBlocks+0xd0>)
 80011cc:	7c5b      	ldrb	r3, [r3, #17]
 80011ce:	085b      	lsrs	r3, r3, #1
 80011d0:	4a1c      	ldr	r2, [pc, #112]	; (8001244 <getBlocks+0xd4>)
 80011d2:	fba2 2303 	umull	r2, r3, r2, r3
 80011d6:	089b      	lsrs	r3, r3, #2
 80011d8:	b2da      	uxtb	r2, r3
 80011da:	4b19      	ldr	r3, [pc, #100]	; (8001240 <getBlocks+0xd0>)
 80011dc:	761a      	strb	r2, [r3, #24]

				return pixy.numBlocks;
 80011de:	4b18      	ldr	r3, [pc, #96]	; (8001240 <getBlocks+0xd0>)
 80011e0:	7e1b      	ldrb	r3, [r3, #24]
 80011e2:	b25b      	sxtb	r3, r3
 80011e4:	e028      	b.n	8001238 <getBlocks+0xc8>
			}
			// deal with busy and program changing states from Pixy (we'll wait)
			else if (pixy.m_type == PIXY_TYPE_RESPONSE_ERROR) {
 80011e6:	4b16      	ldr	r3, [pc, #88]	; (8001240 <getBlocks+0xd0>)
 80011e8:	7c1b      	ldrb	r3, [r3, #16]
 80011ea:	2b03      	cmp	r3, #3
 80011ec:	d11a      	bne.n	8001224 <getBlocks+0xb4>
				if ((int8_t) pixy.m_buf[0] == PIXY_RESULT_BUSY) {
 80011ee:	4b14      	ldr	r3, [pc, #80]	; (8001240 <getBlocks+0xd0>)
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	2bfe      	cmp	r3, #254	; 0xfe
 80011f6:	d108      	bne.n	800120a <getBlocks+0x9a>
					if (!wait)
 80011f8:	79fb      	ldrb	r3, [r7, #7]
 80011fa:	f083 0301 	eor.w	r3, r3, #1
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	2b00      	cmp	r3, #0
 8001202:	d00f      	beq.n	8001224 <getBlocks+0xb4>
						return PIXY_RESULT_BUSY; // new data not available yet
 8001204:	f06f 0301 	mvn.w	r3, #1
 8001208:	e016      	b.n	8001238 <getBlocks+0xc8>
				} else if ((int8_t) pixy.m_buf[0] != PIXY_RESULT_PROG_CHANGING)
 800120a:	4b0d      	ldr	r3, [pc, #52]	; (8001240 <getBlocks+0xd0>)
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	2bfa      	cmp	r3, #250	; 0xfa
 8001212:	d007      	beq.n	8001224 <getBlocks+0xb4>
					return pixy.m_buf[0];
 8001214:	4b0a      	ldr	r3, [pc, #40]	; (8001240 <getBlocks+0xd0>)
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	b25b      	sxtb	r3, r3
 800121c:	e00c      	b.n	8001238 <getBlocks+0xc8>
			}
		} else
			return PIXY_RESULT_ERROR;  // some kind of bitstream error
 800121e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001222:	e009      	b.n	8001238 <getBlocks+0xc8>

		// If we're waiting for frame data, don't thrash Pixy with requests.
		// We can give up half a millisecond of latency (worst case)
		for (volatile int i = 0; i < 190; i++) asm("");
 8001224:	2300      	movs	r3, #0
 8001226:	60fb      	str	r3, [r7, #12]
 8001228:	e002      	b.n	8001230 <getBlocks+0xc0>
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	3301      	adds	r3, #1
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	2bbd      	cmp	r3, #189	; 0xbd
 8001234:	ddf9      	ble.n	800122a <getBlocks+0xba>
		pixy.m_bufPayload[0] = sigmap;
 8001236:	e7aa      	b.n	800118e <getBlocks+0x1e>
	}
}
 8001238:	4618      	mov	r0, r3
 800123a:	3710      	adds	r7, #16
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	2000020c 	.word	0x2000020c
 8001244:	92492493 	.word	0x92492493

08001248 <pixy2_init>:

int8_t pixy2_init(SPI_HandleTypeDef *hspi, GPIO_TypeDef *port, uint16_t pin) {
 8001248:	b580      	push	{r7, lr}
 800124a:	b086      	sub	sp, #24
 800124c:	af00      	add	r7, sp, #0
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	60b9      	str	r1, [r7, #8]
 8001252:	4613      	mov	r3, r2
 8001254:	80fb      	strh	r3, [r7, #6]
	// allocate buffer space for send/receive
	pixy.m_buf = (uint8_t*) malloc(PIXY_BUFFERSIZE);
 8001256:	f44f 7082 	mov.w	r0, #260	; 0x104
 800125a:	f00a fe25 	bl	800bea8 <malloc>
 800125e:	4603      	mov	r3, r0
 8001260:	461a      	mov	r2, r3
 8001262:	4b24      	ldr	r3, [pc, #144]	; (80012f4 <pixy2_init+0xac>)
 8001264:	609a      	str	r2, [r3, #8]
	// shifted buffer is used for sending, so we have space to write header information
	pixy.m_bufPayload = pixy.m_buf + PIXY_SEND_HEADER_SIZE;
 8001266:	4b23      	ldr	r3, [pc, #140]	; (80012f4 <pixy2_init+0xac>)
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	3304      	adds	r3, #4
 800126c:	4a21      	ldr	r2, [pc, #132]	; (80012f4 <pixy2_init+0xac>)
 800126e:	60d3      	str	r3, [r2, #12]
	pixy.frameWidth = pixy.frameHeight = 0;
 8001270:	4b20      	ldr	r3, [pc, #128]	; (80012f4 <pixy2_init+0xac>)
 8001272:	2200      	movs	r2, #0
 8001274:	80da      	strh	r2, [r3, #6]
 8001276:	4b1f      	ldr	r3, [pc, #124]	; (80012f4 <pixy2_init+0xac>)
 8001278:	88da      	ldrh	r2, [r3, #6]
 800127a:	4b1e      	ldr	r3, [pc, #120]	; (80012f4 <pixy2_init+0xac>)
 800127c:	809a      	strh	r2, [r3, #4]
	pixy.version=NULL;
 800127e:	4b1d      	ldr	r3, [pc, #116]	; (80012f4 <pixy2_init+0xac>)
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
	pixy.m_cs = false;
 8001284:	4b1b      	ldr	r3, [pc, #108]	; (80012f4 <pixy2_init+0xac>)
 8001286:	2200      	movs	r2, #0
 8001288:	749a      	strb	r2, [r3, #18]
	pixy.curr_blocks = NULL;
 800128a:	4b1a      	ldr	r3, [pc, #104]	; (80012f4 <pixy2_init+0xac>)
 800128c:	2200      	movs	r2, #0
 800128e:	615a      	str	r2, [r3, #20]
	pixy.numBlocks = 0;
 8001290:	4b18      	ldr	r3, [pc, #96]	; (80012f4 <pixy2_init+0xac>)
 8001292:	2200      	movs	r2, #0
 8001294:	761a      	strb	r2, [r3, #24]

	int8_t res;

	res = open(hspi, port, pin);
 8001296:	88fb      	ldrh	r3, [r7, #6]
 8001298:	461a      	mov	r2, r3
 800129a:	68b9      	ldr	r1, [r7, #8]
 800129c:	68f8      	ldr	r0, [r7, #12]
 800129e:	f000 f82b 	bl	80012f8 <open>
 80012a2:	4603      	mov	r3, r0
 80012a4:	75fb      	strb	r3, [r7, #23]
	if (res < 0)
 80012a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	da02      	bge.n	80012b4 <pixy2_init+0x6c>
		return res;
 80012ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80012b2:	e01b      	b.n	80012ec <pixy2_init+0xa4>

	// wait for pixy to be ready -- that is, Pixy takes a second or 2 boot up
	// getVersion is an effective "ping".  We timeout after 5s.

	for (int millis = HAL_GetTick(); HAL_GetTick() - millis < 5000;) {
 80012b4:	f002 fe7c 	bl	8003fb0 <HAL_GetTick>
 80012b8:	4603      	mov	r3, r0
 80012ba:	613b      	str	r3, [r7, #16]
 80012bc:	e00b      	b.n	80012d6 <pixy2_init+0x8e>
		if (getVersion() >= 0) { // successful version get -> pixy is ready
 80012be:	f7ff ff03 	bl	80010c8 <getVersion>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	db03      	blt.n	80012d0 <pixy2_init+0x88>
			getResolution(); // get resolution so we have it
 80012c8:	f7ff ff26 	bl	8001118 <getResolution>
			return PIXY_RESULT_OK;
 80012cc:	2300      	movs	r3, #0
 80012ce:	e00d      	b.n	80012ec <pixy2_init+0xa4>
		}
		HAL_Delay(5); // might have to change
 80012d0:	2005      	movs	r0, #5
 80012d2:	f002 fe79 	bl	8003fc8 <HAL_Delay>
	for (int millis = HAL_GetTick(); HAL_GetTick() - millis < 5000;) {
 80012d6:	f002 fe6b 	bl	8003fb0 <HAL_GetTick>
 80012da:	4602      	mov	r2, r0
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	1ad3      	subs	r3, r2, r3
 80012e0:	f241 3287 	movw	r2, #4999	; 0x1387
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d9ea      	bls.n	80012be <pixy2_init+0x76>
	}
	// timeout
	return PIXY_RESULT_TIMEOUT;
 80012e8:	f06f 0303 	mvn.w	r3, #3
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3718      	adds	r7, #24
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	2000020c 	.word	0x2000020c

080012f8 <open>:

SPI_HandleTypeDef* SPI_obj;
GPIO_TypeDef* GPIO_ss;
uint16_t GPIO_ss_pin;

int8_t open(SPI_HandleTypeDef* hspi,GPIO_TypeDef* port,uint16_t pin) {
 80012f8:	b480      	push	{r7}
 80012fa:	b085      	sub	sp, #20
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	60f8      	str	r0, [r7, #12]
 8001300:	60b9      	str	r1, [r7, #8]
 8001302:	4613      	mov	r3, r2
 8001304:	80fb      	strh	r3, [r7, #6]
	GPIO_ss_pin = pin;
 8001306:	4a08      	ldr	r2, [pc, #32]	; (8001328 <open+0x30>)
 8001308:	88fb      	ldrh	r3, [r7, #6]
 800130a:	8013      	strh	r3, [r2, #0]
	GPIO_ss = port;
 800130c:	4a07      	ldr	r2, [pc, #28]	; (800132c <open+0x34>)
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	6013      	str	r3, [r2, #0]
	SPI_obj = hspi;
 8001312:	4a07      	ldr	r2, [pc, #28]	; (8001330 <open+0x38>)
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	6013      	str	r3, [r2, #0]
	return 0;
 8001318:	2300      	movs	r3, #0
}
 800131a:	4618      	mov	r0, r3
 800131c:	3714      	adds	r7, #20
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	20000230 	.word	0x20000230
 800132c:	2000022c 	.word	0x2000022c
 8001330:	20000228 	.word	0x20000228

08001334 <recv>:

int16_t recv(uint8_t *buf, uint8_t len, uint16_t *checkSumCalculation) { // based on arduino implementation
 8001334:	b580      	push	{r7, lr}
 8001336:	b086      	sub	sp, #24
 8001338:	af00      	add	r7, sp, #0
 800133a:	60f8      	str	r0, [r7, #12]
 800133c:	460b      	mov	r3, r1
 800133e:	607a      	str	r2, [r7, #4]
 8001340:	72fb      	strb	r3, [r7, #11]
	uint8_t i = 0;
 8001342:	2300      	movs	r3, #0
 8001344:	75fb      	strb	r3, [r7, #23]
	if (checkSumCalculation)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d002      	beq.n	8001352 <recv+0x1e>
		*checkSumCalculation = 0;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2200      	movs	r2, #0
 8001350:	801a      	strh	r2, [r3, #0]
	
	HAL_GPIO_WritePin(GPIO_ss, GPIO_ss_pin, GPIO_PIN_RESET);
 8001352:	4b1f      	ldr	r3, [pc, #124]	; (80013d0 <recv+0x9c>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a1f      	ldr	r2, [pc, #124]	; (80013d4 <recv+0xa0>)
 8001358:	8811      	ldrh	r1, [r2, #0]
 800135a:	2200      	movs	r2, #0
 800135c:	4618      	mov	r0, r3
 800135e:	f004 f911 	bl	8005584 <HAL_GPIO_WritePin>

	for (i = 0; i < len; ++i) {
 8001362:	2300      	movs	r3, #0
 8001364:	75fb      	strb	r3, [r7, #23]
 8001366:	e020      	b.n	80013aa <recv+0x76>
		uint8_t data = 0;
 8001368:	2300      	movs	r3, #0
 800136a:	75bb      	strb	r3, [r7, #22]
		HAL_SPI_Receive(SPI_obj, &data, 1, 5000);
 800136c:	4b1a      	ldr	r3, [pc, #104]	; (80013d8 <recv+0xa4>)
 800136e:	6818      	ldr	r0, [r3, #0]
 8001370:	f107 0116 	add.w	r1, r7, #22
 8001374:	f241 3388 	movw	r3, #5000	; 0x1388
 8001378:	2201      	movs	r2, #1
 800137a:	f007 fb8b 	bl	8008a94 <HAL_SPI_Receive>
		buf[i] = data;
 800137e:	7dfb      	ldrb	r3, [r7, #23]
 8001380:	68fa      	ldr	r2, [r7, #12]
 8001382:	4413      	add	r3, r2
 8001384:	7dba      	ldrb	r2, [r7, #22]
 8001386:	701a      	strb	r2, [r3, #0]
		if (checkSumCalculation)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d00a      	beq.n	80013a4 <recv+0x70>
			*checkSumCalculation += buf[i];
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	881a      	ldrh	r2, [r3, #0]
 8001392:	7dfb      	ldrb	r3, [r7, #23]
 8001394:	68f9      	ldr	r1, [r7, #12]
 8001396:	440b      	add	r3, r1
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	b29b      	uxth	r3, r3
 800139c:	4413      	add	r3, r2
 800139e:	b29a      	uxth	r2, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < len; ++i) {
 80013a4:	7dfb      	ldrb	r3, [r7, #23]
 80013a6:	3301      	adds	r3, #1
 80013a8:	75fb      	strb	r3, [r7, #23]
 80013aa:	7dfa      	ldrb	r2, [r7, #23]
 80013ac:	7afb      	ldrb	r3, [r7, #11]
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d3da      	bcc.n	8001368 <recv+0x34>
	}

	HAL_GPIO_WritePin(GPIO_ss, GPIO_ss_pin, GPIO_PIN_SET);
 80013b2:	4b07      	ldr	r3, [pc, #28]	; (80013d0 <recv+0x9c>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a07      	ldr	r2, [pc, #28]	; (80013d4 <recv+0xa0>)
 80013b8:	8811      	ldrh	r1, [r2, #0]
 80013ba:	2201      	movs	r2, #1
 80013bc:	4618      	mov	r0, r3
 80013be:	f004 f8e1 	bl	8005584 <HAL_GPIO_WritePin>
	return len;
 80013c2:	7afb      	ldrb	r3, [r7, #11]
 80013c4:	b21b      	sxth	r3, r3
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3718      	adds	r7, #24
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	2000022c 	.word	0x2000022c
 80013d4:	20000230 	.word	0x20000230
 80013d8:	20000228 	.word	0x20000228

080013dc <send>:

int16_t send(uint8_t *buf, uint8_t len) { // based on arduino implementation
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	460b      	mov	r3, r1
 80013e6:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 0;
 80013e8:	2300      	movs	r3, #0
 80013ea:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIO_ss, GPIO_ss_pin, GPIO_PIN_RESET);
 80013ec:	4b14      	ldr	r3, [pc, #80]	; (8001440 <send+0x64>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a14      	ldr	r2, [pc, #80]	; (8001444 <send+0x68>)
 80013f2:	8811      	ldrh	r1, [r2, #0]
 80013f4:	2200      	movs	r2, #0
 80013f6:	4618      	mov	r0, r3
 80013f8:	f004 f8c4 	bl	8005584 <HAL_GPIO_WritePin>


	for (i = 0; i < len; ++i) {
 80013fc:	2300      	movs	r3, #0
 80013fe:	73fb      	strb	r3, [r7, #15]
 8001400:	e00c      	b.n	800141c <send+0x40>
		HAL_SPI_Transmit(SPI_obj, (uint8_t *) (buf + i), 1, 5000);
 8001402:	4b11      	ldr	r3, [pc, #68]	; (8001448 <send+0x6c>)
 8001404:	6818      	ldr	r0, [r3, #0]
 8001406:	7bfb      	ldrb	r3, [r7, #15]
 8001408:	687a      	ldr	r2, [r7, #4]
 800140a:	18d1      	adds	r1, r2, r3
 800140c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001410:	2201      	movs	r2, #1
 8001412:	f007 f9d1 	bl	80087b8 <HAL_SPI_Transmit>
	for (i = 0; i < len; ++i) {
 8001416:	7bfb      	ldrb	r3, [r7, #15]
 8001418:	3301      	adds	r3, #1
 800141a:	73fb      	strb	r3, [r7, #15]
 800141c:	7bfa      	ldrb	r2, [r7, #15]
 800141e:	78fb      	ldrb	r3, [r7, #3]
 8001420:	429a      	cmp	r2, r3
 8001422:	d3ee      	bcc.n	8001402 <send+0x26>
	}


	HAL_GPIO_WritePin(GPIO_ss, GPIO_ss_pin, GPIO_PIN_SET);
 8001424:	4b06      	ldr	r3, [pc, #24]	; (8001440 <send+0x64>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a06      	ldr	r2, [pc, #24]	; (8001444 <send+0x68>)
 800142a:	8811      	ldrh	r1, [r2, #0]
 800142c:	2201      	movs	r2, #1
 800142e:	4618      	mov	r0, r3
 8001430:	f004 f8a8 	bl	8005584 <HAL_GPIO_WritePin>

	return len;
 8001434:	78fb      	ldrb	r3, [r7, #3]
 8001436:	b21b      	sxth	r3, r3
}
 8001438:	4618      	mov	r0, r3
 800143a:	3710      	adds	r7, #16
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	2000022c 	.word	0x2000022c
 8001444:	20000230 	.word	0x20000230
 8001448:	20000228 	.word	0x20000228

0800144c <dumb_loop>:
const uint8_t Y_RETURN = 50;
const float RETURN_STOP_SIZE = (315 * 207) * 3.0 / 4;
const uint8_t Y_FILTER = 70;
const uint8_t RETURN_UROFF_SIZE = (315 * 207) * 1.0 / 4;

void dumb_loop(int time) {
 800144c:	b480      	push	{r7}
 800144e:	b085      	sub	sp, #20
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
	 for(volatile int j = 0; j < time; ++j)
 8001454:	2300      	movs	r3, #0
 8001456:	60fb      	str	r3, [r7, #12]
 8001458:	e00c      	b.n	8001474 <dumb_loop+0x28>
	  		  for (volatile int i = 0; i < 380; ++i) asm("");//1ms
 800145a:	2300      	movs	r3, #0
 800145c:	60bb      	str	r3, [r7, #8]
 800145e:	e002      	b.n	8001466 <dumb_loop+0x1a>
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	3301      	adds	r3, #1
 8001464:	60bb      	str	r3, [r7, #8]
 8001466:	68bb      	ldr	r3, [r7, #8]
 8001468:	f5b3 7fbe 	cmp.w	r3, #380	; 0x17c
 800146c:	dbf8      	blt.n	8001460 <dumb_loop+0x14>
	 for(volatile int j = 0; j < time; ++j)
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	3301      	adds	r3, #1
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	687a      	ldr	r2, [r7, #4]
 8001478:	429a      	cmp	r2, r3
 800147a:	dcee      	bgt.n	800145a <dumb_loop+0xe>
}
 800147c:	bf00      	nop
 800147e:	bf00      	nop
 8001480:	3714      	adds	r7, #20
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
	...

0800148c <state_update>:

void state_update() {
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0

	// All the buttons should be rising-edge triggered


	// read reset button, and set reset bit to 1 only if reset button is pressed
	if (reset) {
 8001492:	4b9d      	ldr	r3, [pc, #628]	; (8001708 <state_update+0x27c>)
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d033      	beq.n	8001502 <state_update+0x76>
		on_off = 0;
 800149a:	4b9c      	ldr	r3, [pc, #624]	; (800170c <state_update+0x280>)
 800149c:	2200      	movs	r2, #0
 800149e:	701a      	strb	r2, [r3, #0]
		ball_locked = 0;
 80014a0:	4b9b      	ldr	r3, [pc, #620]	; (8001710 <state_update+0x284>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	701a      	strb	r2, [r3, #0]
		ball_not_found = 0;
 80014a6:	4b9b      	ldr	r3, [pc, #620]	; (8001714 <state_update+0x288>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	701a      	strb	r2, [r3, #0]
		ball_count = 0;
 80014ac:	4b9a      	ldr	r3, [pc, #616]	; (8001718 <state_update+0x28c>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	701a      	strb	r2, [r3, #0]
		ball_collected = 0;
 80014b2:	4b9a      	ldr	r3, [pc, #616]	; (800171c <state_update+0x290>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	701a      	strb	r2, [r3, #0]
		station_arrived = 0;
 80014b8:	4b99      	ldr	r3, [pc, #612]	; (8001720 <state_update+0x294>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	701a      	strb	r2, [r3, #0]
		return_near_station = 0;
 80014be:	4b99      	ldr	r3, [pc, #612]	; (8001724 <state_update+0x298>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	701a      	strb	r2, [r3, #0]
		avoid_finished = 0;
 80014c4:	4b98      	ldr	r3, [pc, #608]	; (8001728 <state_update+0x29c>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	701a      	strb	r2, [r3, #0]
		avoid_begin = 0;
 80014ca:	4b98      	ldr	r3, [pc, #608]	; (800172c <state_update+0x2a0>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	701a      	strb	r2, [r3, #0]
		reset = 0;
 80014d0:	4b8d      	ldr	r3, [pc, #564]	; (8001708 <state_update+0x27c>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	701a      	strb	r2, [r3, #0]
		state = INIT;
 80014d6:	4b96      	ldr	r3, [pc, #600]	; (8001730 <state_update+0x2a4>)
 80014d8:	2200      	movs	r2, #0
 80014da:	701a      	strb	r2, [r3, #0]
		prev_state = state;
 80014dc:	4b94      	ldr	r3, [pc, #592]	; (8001730 <state_update+0x2a4>)
 80014de:	781a      	ldrb	r2, [r3, #0]
 80014e0:	4b94      	ldr	r3, [pc, #592]	; (8001734 <state_update+0x2a8>)
 80014e2:	701a      	strb	r2, [r3, #0]
		ir_on = 0;
 80014e4:	4b94      	ldr	r3, [pc, #592]	; (8001738 <state_update+0x2ac>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	701a      	strb	r2, [r3, #0]
		speaker_on = 0;
 80014ea:	4b94      	ldr	r3, [pc, #592]	; (800173c <state_update+0x2b0>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	701a      	strb	r2, [r3, #0]
		ultrasonic_on = 0;
 80014f0:	4b93      	ldr	r3, [pc, #588]	; (8001740 <state_update+0x2b4>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	701a      	strb	r2, [r3, #0]
		avoid_mode = 0;
 80014f6:	4b93      	ldr	r3, [pc, #588]	; (8001744 <state_update+0x2b8>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	701a      	strb	r2, [r3, #0]
		first_rotor = 0;
 80014fc:	4b92      	ldr	r3, [pc, #584]	; (8001748 <state_update+0x2bc>)
 80014fe:	2200      	movs	r2, #0
 8001500:	701a      	strb	r2, [r3, #0]
	}

	// disable interrupt ultrasonic, ir
	HAL_NVIC_DisableIRQ(TIM3_IRQn);
 8001502:	201d      	movs	r0, #29
 8001504:	f003 fe91 	bl	800522a <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(TIM1_CC_IRQn);
 8001508:	201b      	movs	r0, #27
 800150a:	f003 fe8e 	bl	800522a <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(TIM5_IRQn);
 800150e:	2032      	movs	r0, #50	; 0x32
 8001510:	f003 fe8b 	bl	800522a <HAL_NVIC_DisableIRQ>

	enum State next_state = state;
 8001514:	4b86      	ldr	r3, [pc, #536]	; (8001730 <state_update+0x2a4>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	71fb      	strb	r3, [r7, #7]

	switch (state) {
 800151a:	4b85      	ldr	r3, [pc, #532]	; (8001730 <state_update+0x2a4>)
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	2b07      	cmp	r3, #7
 8001520:	f200 812d 	bhi.w	800177e <state_update+0x2f2>
 8001524:	a201      	add	r2, pc, #4	; (adr r2, 800152c <state_update+0xa0>)
 8001526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800152a:	bf00      	nop
 800152c:	0800154d 	.word	0x0800154d
 8001530:	08001573 	.word	0x08001573
 8001534:	0800160b 	.word	0x0800160b
 8001538:	08001679 	.word	0x08001679
 800153c:	080016bb 	.word	0x080016bb
 8001540:	080015bd 	.word	0x080015bd
 8001544:	080015df 	.word	0x080015df
 8001548:	080015f5 	.word	0x080015f5
	case INIT:
		printf("Init: \n");
 800154c:	487f      	ldr	r0, [pc, #508]	; (800174c <state_update+0x2c0>)
 800154e:	f00b fa8b 	bl	800ca68 <puts>
		if (on_off == 1) {
 8001552:	4b6e      	ldr	r3, [pc, #440]	; (800170c <state_update+0x280>)
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	2b01      	cmp	r3, #1
 8001558:	f040 80d1 	bne.w	80016fe <state_update+0x272>
			on_off = 0;
 800155c:	4b6b      	ldr	r3, [pc, #428]	; (800170c <state_update+0x280>)
 800155e:	2200      	movs	r2, #0
 8001560:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_CLEAR_IT(&htim1, TIM_IT_CC1); // clear ultrasonic interrupt
 8001562:	4b7b      	ldr	r3, [pc, #492]	; (8001750 <state_update+0x2c4>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f06f 0202 	mvn.w	r2, #2
 800156a:	611a      	str	r2, [r3, #16]
			next_state = SEARCH;
 800156c:	2301      	movs	r3, #1
 800156e:	71fb      	strb	r3, [r7, #7]
		}
		break;
 8001570:	e0c5      	b.n	80016fe <state_update+0x272>
	case SEARCH:
		printf("SEARCH: \n");
 8001572:	4878      	ldr	r0, [pc, #480]	; (8001754 <state_update+0x2c8>)
 8001574:	f00b fa78 	bl	800ca68 <puts>

		if (ball_locked) {
 8001578:	4b65      	ldr	r3, [pc, #404]	; (8001710 <state_update+0x284>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d00a      	beq.n	8001596 <state_update+0x10a>
			ball_locked = 0;
 8001580:	4b63      	ldr	r3, [pc, #396]	; (8001710 <state_update+0x284>)
 8001582:	2200      	movs	r2, #0
 8001584:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_CLEAR_IT(&htim3, TIM_IT_CC1); // clear IR interrupt pending bit
 8001586:	4b74      	ldr	r3, [pc, #464]	; (8001758 <state_update+0x2cc>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f06f 0202 	mvn.w	r2, #2
 800158e:	611a      	str	r2, [r3, #16]
			next_state = SEARCH_TO_COLLECT;
 8001590:	2305      	movs	r3, #5
 8001592:	71fb      	strb	r3, [r7, #7]
			next_state = RETURN;

		} else {
			ultrasonic_on = 1;
		}
		break;
 8001594:	e0f3      	b.n	800177e <state_update+0x2f2>
		} else if (ball_not_found) {
 8001596:	4b5f      	ldr	r3, [pc, #380]	; (8001714 <state_update+0x288>)
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d00a      	beq.n	80015b4 <state_update+0x128>
			ball_not_found = 0;
 800159e:	4b5d      	ldr	r3, [pc, #372]	; (8001714 <state_update+0x288>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_CLEAR_IT(&htim1, TIM_IT_CC1); // clear ultrasonic interrupt
 80015a4:	4b6a      	ldr	r3, [pc, #424]	; (8001750 <state_update+0x2c4>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f06f 0202 	mvn.w	r2, #2
 80015ac:	611a      	str	r2, [r3, #16]
			next_state = RETURN;
 80015ae:	2303      	movs	r3, #3
 80015b0:	71fb      	strb	r3, [r7, #7]
		break;
 80015b2:	e0e4      	b.n	800177e <state_update+0x2f2>
			ultrasonic_on = 1;
 80015b4:	4b62      	ldr	r3, [pc, #392]	; (8001740 <state_update+0x2b4>)
 80015b6:	2201      	movs	r2, #1
 80015b8:	701a      	strb	r2, [r3, #0]
		break;
 80015ba:	e0e0      	b.n	800177e <state_update+0x2f2>
	case SEARCH_TO_COLLECT: {
		printf("Switching from Search to Collect.\n");
 80015bc:	4867      	ldr	r0, [pc, #412]	; (800175c <state_update+0x2d0>)
 80015be:	f00b fa53 	bl	800ca68 <puts>

			printf("Actually going to COLLECT\n");
 80015c2:	4867      	ldr	r0, [pc, #412]	; (8001760 <state_update+0x2d4>)
 80015c4:	f00b fa50 	bl	800ca68 <puts>
			__HAL_TIM_CLEAR_IT(&htim3, TIM_IT_CC1); // clear IR interrupt pending bit
 80015c8:	4b63      	ldr	r3, [pc, #396]	; (8001758 <state_update+0x2cc>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f06f 0202 	mvn.w	r2, #2
 80015d0:	611a      	str	r2, [r3, #16]
			first_rotor = 1;
 80015d2:	4b5d      	ldr	r3, [pc, #372]	; (8001748 <state_update+0x2bc>)
 80015d4:	2201      	movs	r2, #1
 80015d6:	701a      	strb	r2, [r3, #0]
			next_state = COLLECT;
 80015d8:	2302      	movs	r3, #2
 80015da:	71fb      	strb	r3, [r7, #7]

		break;
 80015dc:	e0cf      	b.n	800177e <state_update+0x2f2>
	}

	case COLLECT_TO_SEARCH: {
		printf("Collect to search\n");
 80015de:	4861      	ldr	r0, [pc, #388]	; (8001764 <state_update+0x2d8>)
 80015e0:	f00b fa42 	bl	800ca68 <puts>
		__HAL_TIM_CLEAR_IT(&htim1, TIM_IT_CC1); // clear ultrasonic interrupt
 80015e4:	4b5a      	ldr	r3, [pc, #360]	; (8001750 <state_update+0x2c4>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f06f 0202 	mvn.w	r2, #2
 80015ec:	611a      	str	r2, [r3, #16]
		next_state = SEARCH;
 80015ee:	2301      	movs	r3, #1
 80015f0:	71fb      	strb	r3, [r7, #7]
		break;
 80015f2:	e0c4      	b.n	800177e <state_update+0x2f2>
	}

	case COLLECT_TO_RETURN: {
		printf("Collect to return\n");
 80015f4:	485c      	ldr	r0, [pc, #368]	; (8001768 <state_update+0x2dc>)
 80015f6:	f00b fa37 	bl	800ca68 <puts>
		__HAL_TIM_CLEAR_IT(&htim1, TIM_IT_CC1); // clear ultrasonic interrupt
 80015fa:	4b55      	ldr	r3, [pc, #340]	; (8001750 <state_update+0x2c4>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f06f 0202 	mvn.w	r2, #2
 8001602:	611a      	str	r2, [r3, #16]
		next_state = RETURN;
 8001604:	2303      	movs	r3, #3
 8001606:	71fb      	strb	r3, [r7, #7]
		break;
 8001608:	e0b9      	b.n	800177e <state_update+0x2f2>
	}

	case COLLECT: {
		printf("Collect: mode enter\n");
 800160a:	4858      	ldr	r0, [pc, #352]	; (800176c <state_update+0x2e0>)
 800160c:	f00b fa2c 	bl	800ca68 <puts>

		static collect_enter_count = 0;

		if (ball_collected) {
 8001610:	4b42      	ldr	r3, [pc, #264]	; (800171c <state_update+0x290>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d015      	beq.n	8001644 <state_update+0x1b8>

			speaker_on = 1;
 8001618:	4b48      	ldr	r3, [pc, #288]	; (800173c <state_update+0x2b0>)
 800161a:	2201      	movs	r2, #1
 800161c:	701a      	strb	r2, [r3, #0]

			printf("Collect: Ball_collected, ball_count: %d\n", ball_count);
 800161e:	4b3e      	ldr	r3, [pc, #248]	; (8001718 <state_update+0x28c>)
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	4619      	mov	r1, r3
 8001624:	4852      	ldr	r0, [pc, #328]	; (8001770 <state_update+0x2e4>)
 8001626:	f00b f999 	bl	800c95c <iprintf>

			if (ball_count < MAXLOAD) {
 800162a:	4b3b      	ldr	r3, [pc, #236]	; (8001718 <state_update+0x28c>)
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	2b03      	cmp	r3, #3
 8001630:	d802      	bhi.n	8001638 <state_update+0x1ac>
				next_state = COLLECT_TO_SEARCH;
 8001632:	2306      	movs	r3, #6
 8001634:	71fb      	strb	r3, [r7, #7]
 8001636:	e001      	b.n	800163c <state_update+0x1b0>
			} else {
				next_state = COLLECT_TO_RETURN;
 8001638:	2307      	movs	r3, #7
 800163a:	71fb      	strb	r3, [r7, #7]
			}
			ball_collected = 0; // clear
 800163c:	4b37      	ldr	r3, [pc, #220]	; (800171c <state_update+0x290>)
 800163e:	2200      	movs	r2, #0
 8001640:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_CLEAR_IT(&htim1, TIM_IT_CC1); // clear ultrasonic interrupt
				next_state = COLLECT_TO_SEARCH;
				collect_enter_count = 0;
			}
		}
		break;
 8001642:	e05e      	b.n	8001702 <state_update+0x276>
			ir_on = 1;
 8001644:	4b3c      	ldr	r3, [pc, #240]	; (8001738 <state_update+0x2ac>)
 8001646:	2201      	movs	r2, #1
 8001648:	701a      	strb	r2, [r3, #0]
			ultrasonic_on = 1;
 800164a:	4b3d      	ldr	r3, [pc, #244]	; (8001740 <state_update+0x2b4>)
 800164c:	2201      	movs	r2, #1
 800164e:	701a      	strb	r2, [r3, #0]
			collect_enter_count++;
 8001650:	4b48      	ldr	r3, [pc, #288]	; (8001774 <state_update+0x2e8>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	3301      	adds	r3, #1
 8001656:	4a47      	ldr	r2, [pc, #284]	; (8001774 <state_update+0x2e8>)
 8001658:	6013      	str	r3, [r2, #0]
			if (collect_enter_count > 30) {
 800165a:	4b46      	ldr	r3, [pc, #280]	; (8001774 <state_update+0x2e8>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	2b1e      	cmp	r3, #30
 8001660:	dd4f      	ble.n	8001702 <state_update+0x276>
				__HAL_TIM_CLEAR_IT(&htim1, TIM_IT_CC1); // clear ultrasonic interrupt
 8001662:	4b3b      	ldr	r3, [pc, #236]	; (8001750 <state_update+0x2c4>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f06f 0202 	mvn.w	r2, #2
 800166a:	611a      	str	r2, [r3, #16]
				next_state = COLLECT_TO_SEARCH;
 800166c:	2306      	movs	r3, #6
 800166e:	71fb      	strb	r3, [r7, #7]
				collect_enter_count = 0;
 8001670:	4b40      	ldr	r3, [pc, #256]	; (8001774 <state_update+0x2e8>)
 8001672:	2200      	movs	r2, #0
 8001674:	601a      	str	r2, [r3, #0]
		break;
 8001676:	e044      	b.n	8001702 <state_update+0x276>
		}
	case RETURN:
		printf("return\n");
 8001678:	483f      	ldr	r0, [pc, #252]	; (8001778 <state_update+0x2ec>)
 800167a:	f00b f9f5 	bl	800ca68 <puts>

		if (station_arrived) {
 800167e:	4b28      	ldr	r3, [pc, #160]	; (8001720 <state_update+0x294>)
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d008      	beq.n	8001698 <state_update+0x20c>
			station_arrived = 0;
 8001686:	4b26      	ldr	r3, [pc, #152]	; (8001720 <state_update+0x294>)
 8001688:	2200      	movs	r2, #0
 800168a:	701a      	strb	r2, [r3, #0]
			reset = 1;
 800168c:	4b1e      	ldr	r3, [pc, #120]	; (8001708 <state_update+0x27c>)
 800168e:	2201      	movs	r2, #1
 8001690:	701a      	strb	r2, [r3, #0]
			next_state = INIT;
 8001692:	2300      	movs	r3, #0
 8001694:	71fb      	strb	r3, [r7, #7]
			} else {
				ultrasonic_on = 1;
			}
		}

		break;
 8001696:	e072      	b.n	800177e <state_update+0x2f2>
			if (return_near_station == 1) {
 8001698:	4b22      	ldr	r3, [pc, #136]	; (8001724 <state_update+0x298>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	2b01      	cmp	r3, #1
 800169e:	d108      	bne.n	80016b2 <state_update+0x226>
				__HAL_TIM_CLEAR_IT(&htim1, TIM_IT_CC1); // clear ultrasonic interrup
 80016a0:	4b2b      	ldr	r3, [pc, #172]	; (8001750 <state_update+0x2c4>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f06f 0202 	mvn.w	r2, #2
 80016a8:	611a      	str	r2, [r3, #16]
				ultrasonic_on = 0;
 80016aa:	4b25      	ldr	r3, [pc, #148]	; (8001740 <state_update+0x2b4>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	701a      	strb	r2, [r3, #0]
		break;
 80016b0:	e065      	b.n	800177e <state_update+0x2f2>
				ultrasonic_on = 1;
 80016b2:	4b23      	ldr	r3, [pc, #140]	; (8001740 <state_update+0x2b4>)
 80016b4:	2201      	movs	r2, #1
 80016b6:	701a      	strb	r2, [r3, #0]
		break;
 80016b8:	e061      	b.n	800177e <state_update+0x2f2>
	case AVOID_COLLISION:{

		uint8_t local_avoid_finished = avoid_finished;
 80016ba:	4b1b      	ldr	r3, [pc, #108]	; (8001728 <state_update+0x29c>)
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	71bb      	strb	r3, [r7, #6]

		if (avoid_finished) {
 80016c0:	4b19      	ldr	r3, [pc, #100]	; (8001728 <state_update+0x29c>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d059      	beq.n	800177c <state_update+0x2f0>
			avoid_begin = 0;
 80016c8:	4b18      	ldr	r3, [pc, #96]	; (800172c <state_update+0x2a0>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	701a      	strb	r2, [r3, #0]
			avoid_finished = 0;
 80016ce:	4b16      	ldr	r3, [pc, #88]	; (8001728 <state_update+0x29c>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	701a      	strb	r2, [r3, #0]
			if (avoid_mode == 1) {
 80016d4:	4b1b      	ldr	r3, [pc, #108]	; (8001744 <state_update+0x2b8>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d10c      	bne.n	80016f6 <state_update+0x26a>
				avoid_mode = 0;
 80016dc:	4b19      	ldr	r3, [pc, #100]	; (8001744 <state_update+0x2b8>)
 80016de:	2200      	movs	r2, #0
 80016e0:	701a      	strb	r2, [r3, #0]
				next_state = prev_state;
 80016e2:	4b14      	ldr	r3, [pc, #80]	; (8001734 <state_update+0x2a8>)
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	71fb      	strb	r3, [r7, #7]
				if (prev_state == COLLECT) {
 80016e8:	4b12      	ldr	r3, [pc, #72]	; (8001734 <state_update+0x2a8>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	d145      	bne.n	800177c <state_update+0x2f0>
					next_state = SEARCH;
 80016f0:	2301      	movs	r3, #1
 80016f2:	71fb      	strb	r3, [r7, #7]
			} else {
				avoid_mode = 1;
			}

		}
		break;
 80016f4:	e042      	b.n	800177c <state_update+0x2f0>
				avoid_mode = 1;
 80016f6:	4b13      	ldr	r3, [pc, #76]	; (8001744 <state_update+0x2b8>)
 80016f8:	2201      	movs	r2, #1
 80016fa:	701a      	strb	r2, [r3, #0]
		break;
 80016fc:	e03e      	b.n	800177c <state_update+0x2f0>
		break;
 80016fe:	bf00      	nop
 8001700:	e03d      	b.n	800177e <state_update+0x2f2>
		break;
 8001702:	bf00      	nop
 8001704:	e03b      	b.n	800177e <state_update+0x2f2>
 8001706:	bf00      	nop
 8001708:	2000023e 	.word	0x2000023e
 800170c:	2000023d 	.word	0x2000023d
 8001710:	20000234 	.word	0x20000234
 8001714:	20000235 	.word	0x20000235
 8001718:	20000236 	.word	0x20000236
 800171c:	20000237 	.word	0x20000237
 8001720:	20000238 	.word	0x20000238
 8001724:	20000239 	.word	0x20000239
 8001728:	2000023a 	.word	0x2000023a
 800172c:	2000023b 	.word	0x2000023b
 8001730:	20000232 	.word	0x20000232
 8001734:	20000233 	.word	0x20000233
 8001738:	20000240 	.word	0x20000240
 800173c:	20000241 	.word	0x20000241
 8001740:	20000242 	.word	0x20000242
 8001744:	2000023c 	.word	0x2000023c
 8001748:	2000023f 	.word	0x2000023f
 800174c:	0800ea18 	.word	0x0800ea18
 8001750:	20000688 	.word	0x20000688
 8001754:	0800ea20 	.word	0x0800ea20
 8001758:	20000720 	.word	0x20000720
 800175c:	0800ea2c 	.word	0x0800ea2c
 8001760:	0800ea50 	.word	0x0800ea50
 8001764:	0800ea6c 	.word	0x0800ea6c
 8001768:	0800ea80 	.word	0x0800ea80
 800176c:	0800ea94 	.word	0x0800ea94
 8001770:	0800eaa8 	.word	0x0800eaa8
 8001774:	20000244 	.word	0x20000244
 8001778:	0800ead4 	.word	0x0800ead4
		break;
 800177c:	bf00      	nop
		}
	}

	state = next_state;
 800177e:	4a20      	ldr	r2, [pc, #128]	; (8001800 <state_update+0x374>)
 8001780:	79fb      	ldrb	r3, [r7, #7]
 8001782:	7013      	strb	r3, [r2, #0]
	if (state != AVOID_COLLISION) {
 8001784:	4b1e      	ldr	r3, [pc, #120]	; (8001800 <state_update+0x374>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	2b04      	cmp	r3, #4
 800178a:	d003      	beq.n	8001794 <state_update+0x308>
		prev_state = state;
 800178c:	4b1c      	ldr	r3, [pc, #112]	; (8001800 <state_update+0x374>)
 800178e:	781a      	ldrb	r2, [r3, #0]
 8001790:	4b1c      	ldr	r3, [pc, #112]	; (8001804 <state_update+0x378>)
 8001792:	701a      	strb	r2, [r3, #0]
	// Testing arg begin
	//	state = SEARCH;

	// Testing arg end

	HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001794:	2032      	movs	r0, #50	; 0x32
 8001796:	f003 fd3a 	bl	800520e <HAL_NVIC_EnableIRQ>

	if (ir_on == 1) {
 800179a:	4b1b      	ldr	r3, [pc, #108]	; (8001808 <state_update+0x37c>)
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d105      	bne.n	80017ae <state_update+0x322>
		HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80017a2:	201d      	movs	r0, #29
 80017a4:	f003 fd33 	bl	800520e <HAL_NVIC_EnableIRQ>
		ir_on = 0;
 80017a8:	4b17      	ldr	r3, [pc, #92]	; (8001808 <state_update+0x37c>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	701a      	strb	r2, [r3, #0]
	}

	if (speaker_on == 1) {
 80017ae:	4b17      	ldr	r3, [pc, #92]	; (800180c <state_update+0x380>)
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d115      	bne.n	80017e2 <state_update+0x356>
		__HAL_TIM_CLEAR_FLAG(&htim5, TIM_SR_UIF);
 80017b6:	4b16      	ldr	r3, [pc, #88]	; (8001810 <state_update+0x384>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f06f 0201 	mvn.w	r2, #1
 80017be:	611a      	str	r2, [r3, #16]
		TIM5->ARR = 100;
 80017c0:	4b14      	ldr	r3, [pc, #80]	; (8001814 <state_update+0x388>)
 80017c2:	2264      	movs	r2, #100	; 0x64
 80017c4:	62da      	str	r2, [r3, #44]	; 0x2c
		TIM5->CNT = 0;
 80017c6:	4b13      	ldr	r3, [pc, #76]	; (8001814 <state_update+0x388>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7,  1);
 80017cc:	2201      	movs	r2, #1
 80017ce:	2180      	movs	r1, #128	; 0x80
 80017d0:	4811      	ldr	r0, [pc, #68]	; (8001818 <state_update+0x38c>)
 80017d2:	f003 fed7 	bl	8005584 <HAL_GPIO_WritePin>
		HAL_TIM_Base_Start_IT(&htim5);
 80017d6:	480e      	ldr	r0, [pc, #56]	; (8001810 <state_update+0x384>)
 80017d8:	f007 feb4 	bl	8009544 <HAL_TIM_Base_Start_IT>
		speaker_on = 0;
 80017dc:	4b0b      	ldr	r3, [pc, #44]	; (800180c <state_update+0x380>)
 80017de:	2200      	movs	r2, #0
 80017e0:	701a      	strb	r2, [r3, #0]
	}

	if (ultrasonic_on == 1) {
 80017e2:	4b0e      	ldr	r3, [pc, #56]	; (800181c <state_update+0x390>)
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d105      	bne.n	80017f6 <state_update+0x36a>
		HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80017ea:	201b      	movs	r0, #27
 80017ec:	f003 fd0f 	bl	800520e <HAL_NVIC_EnableIRQ>
		ultrasonic_on = 0;
 80017f0:	4b0a      	ldr	r3, [pc, #40]	; (800181c <state_update+0x390>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	701a      	strb	r2, [r3, #0]
	}

}
 80017f6:	bf00      	nop
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	20000232 	.word	0x20000232
 8001804:	20000233 	.word	0x20000233
 8001808:	20000240 	.word	0x20000240
 800180c:	20000241 	.word	0x20000241
 8001810:	200007b8 	.word	0x200007b8
 8001814:	40000c00 	.word	0x40000c00
 8001818:	48001000 	.word	0x48001000
 800181c:	20000242 	.word	0x20000242

08001820 <get_mode>:

uint8_t get_mode() { // TODO::: ADD IF WE ARE SEARCHING FOR HOME BASE
 8001820:	b580      	push	{r7, lr}
 8001822:	b086      	sub	sp, #24
 8001824:	af00      	add	r7, sp, #0
  int8_t count = getBlocks(true, 1, 0xff);
 8001826:	22ff      	movs	r2, #255	; 0xff
 8001828:	2101      	movs	r1, #1
 800182a:	2001      	movs	r0, #1
 800182c:	f7ff fca0 	bl	8001170 <getBlocks>
 8001830:	4603      	mov	r3, r0
 8001832:	71fb      	strb	r3, [r7, #7]

  static int timecount = 0;
  if(count == 0) {
 8001834:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d101      	bne.n	8001840 <get_mode+0x20>
	  return 3;
 800183c:	2303      	movs	r3, #3
 800183e:	e081      	b.n	8001944 <get_mode+0x124>
  }
  if(count >= 1) {
 8001840:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001844:	2b00      	cmp	r3, #0
 8001846:	dd7d      	ble.n	8001944 <get_mode+0x124>
	  uint16_t best_x = 0;
 8001848:	2300      	movs	r3, #0
 800184a:	82fb      	strh	r3, [r7, #22]
	  uint32_t best_size = 0;
 800184c:	2300      	movs	r3, #0
 800184e:	613b      	str	r3, [r7, #16]
	  uint16_t best_y = 0;
 8001850:	2300      	movs	r3, #0
 8001852:	81fb      	strh	r3, [r7, #14]
	  for(int i = 0; i < count; ++i) {
 8001854:	2300      	movs	r3, #0
 8001856:	60bb      	str	r3, [r7, #8]
 8001858:	e03f      	b.n	80018da <get_mode+0xba>
		  uint32_t temp_size = pixy.curr_blocks[i].m_width * pixy.curr_blocks[i].m_height;
 800185a:	4b3c      	ldr	r3, [pc, #240]	; (800194c <get_mode+0x12c>)
 800185c:	6959      	ldr	r1, [r3, #20]
 800185e:	68ba      	ldr	r2, [r7, #8]
 8001860:	4613      	mov	r3, r2
 8001862:	00db      	lsls	r3, r3, #3
 8001864:	1a9b      	subs	r3, r3, r2
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	440b      	add	r3, r1
 800186a:	88db      	ldrh	r3, [r3, #6]
 800186c:	4618      	mov	r0, r3
 800186e:	4b37      	ldr	r3, [pc, #220]	; (800194c <get_mode+0x12c>)
 8001870:	6959      	ldr	r1, [r3, #20]
 8001872:	68ba      	ldr	r2, [r7, #8]
 8001874:	4613      	mov	r3, r2
 8001876:	00db      	lsls	r3, r3, #3
 8001878:	1a9b      	subs	r3, r3, r2
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	440b      	add	r3, r1
 800187e:	891b      	ldrh	r3, [r3, #8]
 8001880:	fb00 f303 	mul.w	r3, r0, r3
 8001884:	603b      	str	r3, [r7, #0]
//		  printf("temp_x: %d, Temp_size: %d\n", pixy.curr_blocks[i].m_x, temp_size);
		  if(temp_size > best_size && pixy.curr_blocks[i].m_y > Y_FILTER ) {
 8001886:	683a      	ldr	r2, [r7, #0]
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	429a      	cmp	r2, r3
 800188c:	d922      	bls.n	80018d4 <get_mode+0xb4>
 800188e:	4b2f      	ldr	r3, [pc, #188]	; (800194c <get_mode+0x12c>)
 8001890:	6959      	ldr	r1, [r3, #20]
 8001892:	68ba      	ldr	r2, [r7, #8]
 8001894:	4613      	mov	r3, r2
 8001896:	00db      	lsls	r3, r3, #3
 8001898:	1a9b      	subs	r3, r3, r2
 800189a:	005b      	lsls	r3, r3, #1
 800189c:	440b      	add	r3, r1
 800189e:	889a      	ldrh	r2, [r3, #4]
 80018a0:	2346      	movs	r3, #70	; 0x46
 80018a2:	b29b      	uxth	r3, r3
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d915      	bls.n	80018d4 <get_mode+0xb4>
			  best_size = temp_size;
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	613b      	str	r3, [r7, #16]
			  best_x = pixy.curr_blocks[i].m_x;
 80018ac:	4b27      	ldr	r3, [pc, #156]	; (800194c <get_mode+0x12c>)
 80018ae:	6959      	ldr	r1, [r3, #20]
 80018b0:	68ba      	ldr	r2, [r7, #8]
 80018b2:	4613      	mov	r3, r2
 80018b4:	00db      	lsls	r3, r3, #3
 80018b6:	1a9b      	subs	r3, r3, r2
 80018b8:	005b      	lsls	r3, r3, #1
 80018ba:	440b      	add	r3, r1
 80018bc:	885b      	ldrh	r3, [r3, #2]
 80018be:	82fb      	strh	r3, [r7, #22]
			  best_y = pixy.curr_blocks[i].m_y;
 80018c0:	4b22      	ldr	r3, [pc, #136]	; (800194c <get_mode+0x12c>)
 80018c2:	6959      	ldr	r1, [r3, #20]
 80018c4:	68ba      	ldr	r2, [r7, #8]
 80018c6:	4613      	mov	r3, r2
 80018c8:	00db      	lsls	r3, r3, #3
 80018ca:	1a9b      	subs	r3, r3, r2
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	440b      	add	r3, r1
 80018d0:	889b      	ldrh	r3, [r3, #4]
 80018d2:	81fb      	strh	r3, [r7, #14]
	  for(int i = 0; i < count; ++i) {
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	3301      	adds	r3, #1
 80018d8:	60bb      	str	r3, [r7, #8]
 80018da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018de:	68ba      	ldr	r2, [r7, #8]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	dbba      	blt.n	800185a <get_mode+0x3a>
		  }
	  }

	  if (best_size == 0) {
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d101      	bne.n	80018ee <get_mode+0xce>
		  return 3;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e02a      	b.n	8001944 <get_mode+0x124>
	  }

	  timecount++;
 80018ee:	4b18      	ldr	r3, [pc, #96]	; (8001950 <get_mode+0x130>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	3301      	adds	r3, #1
 80018f4:	4a16      	ldr	r2, [pc, #88]	; (8001950 <get_mode+0x130>)
 80018f6:	6013      	str	r3, [r2, #0]
	  printf("%d--- Best_x: %d, Best_y: %d\n",timecount, best_x, best_y);
 80018f8:	4b15      	ldr	r3, [pc, #84]	; (8001950 <get_mode+0x130>)
 80018fa:	6819      	ldr	r1, [r3, #0]
 80018fc:	8afa      	ldrh	r2, [r7, #22]
 80018fe:	89fb      	ldrh	r3, [r7, #14]
 8001900:	4814      	ldr	r0, [pc, #80]	; (8001954 <get_mode+0x134>)
 8001902:	f00b f82b 	bl	800c95c <iprintf>

	  if(best_x < XL) {
 8001906:	2378      	movs	r3, #120	; 0x78
 8001908:	b29b      	uxth	r3, r3
 800190a:	8afa      	ldrh	r2, [r7, #22]
 800190c:	429a      	cmp	r2, r3
 800190e:	d201      	bcs.n	8001914 <get_mode+0xf4>
//		  printf("Best_x : %d, Going to direction: %d\n", best_x, 1);
//		  printf("Best_y : %d \n", best_y);
		  return 1;
 8001910:	2301      	movs	r3, #1
 8001912:	e017      	b.n	8001944 <get_mode+0x124>
	  }
	  if(best_x < XR) {
 8001914:	2396      	movs	r3, #150	; 0x96
 8001916:	b29b      	uxth	r3, r3
 8001918:	8afa      	ldrh	r2, [r7, #22]
 800191a:	429a      	cmp	r2, r3
 800191c:	d20c      	bcs.n	8001938 <get_mode+0x118>
//		  printf("Best_x : %d, Going to direction: %d\n", best_x, 0);
//		  printf("Best_y : %d \n", best_y);
		  if(best_y >= Y_COLLECT) {
 800191e:	23aa      	movs	r3, #170	; 0xaa
 8001920:	b29b      	uxth	r3, r3
 8001922:	89fa      	ldrh	r2, [r7, #14]
 8001924:	429a      	cmp	r2, r3
 8001926:	d305      	bcc.n	8001934 <get_mode+0x114>
			  printf("---------Collect\n");
 8001928:	480b      	ldr	r0, [pc, #44]	; (8001958 <get_mode+0x138>)
 800192a:	f00b f89d 	bl	800ca68 <puts>
			  ball_locked = 1;
 800192e:	4b0b      	ldr	r3, [pc, #44]	; (800195c <get_mode+0x13c>)
 8001930:	2201      	movs	r2, #1
 8001932:	701a      	strb	r2, [r3, #0]
		  }
		  return 0;
 8001934:	2300      	movs	r3, #0
 8001936:	e005      	b.n	8001944 <get_mode+0x124>
	  }
	  if(best_x <= 315) {
 8001938:	8afb      	ldrh	r3, [r7, #22]
 800193a:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 800193e:	d201      	bcs.n	8001944 <get_mode+0x124>
//		  printf("Best_x : %d, Going to direction: %d\n", best_x, 2);
//		  printf("Best_y : %d \n", best_y);
		  return 2;
 8001940:	2302      	movs	r3, #2
 8001942:	e7ff      	b.n	8001944 <get_mode+0x124>
	  }

  }
}
 8001944:	4618      	mov	r0, r3
 8001946:	3718      	adds	r7, #24
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	2000020c 	.word	0x2000020c
 8001950:	20000248 	.word	0x20000248
 8001954:	0800eadc 	.word	0x0800eadc
 8001958:	0800eafc 	.word	0x0800eafc
 800195c:	20000234 	.word	0x20000234

08001960 <return_mode>:

uint8_t return_mode() {
 8001960:	b580      	push	{r7, lr}
 8001962:	b086      	sub	sp, #24
 8001964:	af00      	add	r7, sp, #0
	int8_t count = getBlocks(true, 2, 0xff);
 8001966:	22ff      	movs	r2, #255	; 0xff
 8001968:	2102      	movs	r1, #2
 800196a:	2001      	movs	r0, #1
 800196c:	f7ff fc00 	bl	8001170 <getBlocks>
 8001970:	4603      	mov	r3, r0
 8001972:	72fb      	strb	r3, [r7, #11]

	if(count == 0) {
 8001974:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d101      	bne.n	8001980 <return_mode+0x20>
		  return 3;
 800197c:	2303      	movs	r3, #3
 800197e:	e087      	b.n	8001a90 <return_mode+0x130>
	  }
	if(count >= 1) {
 8001980:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001984:	2b00      	cmp	r3, #0
 8001986:	f340 8083 	ble.w	8001a90 <return_mode+0x130>
		uint16_t best_x = 0;
 800198a:	2300      	movs	r3, #0
 800198c:	82fb      	strh	r3, [r7, #22]
		uint32_t best_size = 0;
 800198e:	2300      	movs	r3, #0
 8001990:	613b      	str	r3, [r7, #16]
		uint16_t best_y = 0;
 8001992:	2300      	movs	r3, #0
 8001994:	813b      	strh	r3, [r7, #8]
		for(int i = 0; i < count; ++i) {
 8001996:	2300      	movs	r3, #0
 8001998:	60fb      	str	r3, [r7, #12]
 800199a:	e03e      	b.n	8001a1a <return_mode+0xba>
			uint32_t temp_size = pixy.curr_blocks[i].m_width * pixy.curr_blocks[i].m_height;
 800199c:	4b3e      	ldr	r3, [pc, #248]	; (8001a98 <return_mode+0x138>)
 800199e:	6959      	ldr	r1, [r3, #20]
 80019a0:	68fa      	ldr	r2, [r7, #12]
 80019a2:	4613      	mov	r3, r2
 80019a4:	00db      	lsls	r3, r3, #3
 80019a6:	1a9b      	subs	r3, r3, r2
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	440b      	add	r3, r1
 80019ac:	88db      	ldrh	r3, [r3, #6]
 80019ae:	4618      	mov	r0, r3
 80019b0:	4b39      	ldr	r3, [pc, #228]	; (8001a98 <return_mode+0x138>)
 80019b2:	6959      	ldr	r1, [r3, #20]
 80019b4:	68fa      	ldr	r2, [r7, #12]
 80019b6:	4613      	mov	r3, r2
 80019b8:	00db      	lsls	r3, r3, #3
 80019ba:	1a9b      	subs	r3, r3, r2
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	440b      	add	r3, r1
 80019c0:	891b      	ldrh	r3, [r3, #8]
 80019c2:	fb00 f303 	mul.w	r3, r0, r3
 80019c6:	607b      	str	r3, [r7, #4]
	//		printf("temp_x: %d, Temp_size: %d\n", pixy.curr_blocks[i].m_x, temp_size);
			if(temp_size > best_size) {
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d921      	bls.n	8001a14 <return_mode+0xb4>
				  best_size = temp_size;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	613b      	str	r3, [r7, #16]
				  best_x = pixy.curr_blocks[i].m_x;
 80019d4:	4b30      	ldr	r3, [pc, #192]	; (8001a98 <return_mode+0x138>)
 80019d6:	6959      	ldr	r1, [r3, #20]
 80019d8:	68fa      	ldr	r2, [r7, #12]
 80019da:	4613      	mov	r3, r2
 80019dc:	00db      	lsls	r3, r3, #3
 80019de:	1a9b      	subs	r3, r3, r2
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	440b      	add	r3, r1
 80019e4:	885b      	ldrh	r3, [r3, #2]
 80019e6:	82fb      	strh	r3, [r7, #22]
				  best_y = pixy.curr_blocks[i].m_y - (pixy.curr_blocks[i].m_height / 2);
 80019e8:	4b2b      	ldr	r3, [pc, #172]	; (8001a98 <return_mode+0x138>)
 80019ea:	6959      	ldr	r1, [r3, #20]
 80019ec:	68fa      	ldr	r2, [r7, #12]
 80019ee:	4613      	mov	r3, r2
 80019f0:	00db      	lsls	r3, r3, #3
 80019f2:	1a9b      	subs	r3, r3, r2
 80019f4:	005b      	lsls	r3, r3, #1
 80019f6:	440b      	add	r3, r1
 80019f8:	8899      	ldrh	r1, [r3, #4]
 80019fa:	4b27      	ldr	r3, [pc, #156]	; (8001a98 <return_mode+0x138>)
 80019fc:	6958      	ldr	r0, [r3, #20]
 80019fe:	68fa      	ldr	r2, [r7, #12]
 8001a00:	4613      	mov	r3, r2
 8001a02:	00db      	lsls	r3, r3, #3
 8001a04:	1a9b      	subs	r3, r3, r2
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	4403      	add	r3, r0
 8001a0a:	891b      	ldrh	r3, [r3, #8]
 8001a0c:	085b      	lsrs	r3, r3, #1
 8001a0e:	b29b      	uxth	r3, r3
 8001a10:	1acb      	subs	r3, r1, r3
 8001a12:	813b      	strh	r3, [r7, #8]
		for(int i = 0; i < count; ++i) {
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	3301      	adds	r3, #1
 8001a18:	60fb      	str	r3, [r7, #12]
 8001a1a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001a1e:	68fa      	ldr	r2, [r7, #12]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	dbbb      	blt.n	800199c <return_mode+0x3c>
			}
		}

		if(best_x < XL) {
 8001a24:	2378      	movs	r3, #120	; 0x78
 8001a26:	b29b      	uxth	r3, r3
 8001a28:	8afa      	ldrh	r2, [r7, #22]
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d201      	bcs.n	8001a32 <return_mode+0xd2>
	//		  printf("Best_x : %d, Going to direction: %d\n", best_x, 1);
	//		  printf("Best_y : %d \n", best_y);
			  return 1;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e02e      	b.n	8001a90 <return_mode+0x130>
		}
		if(best_x < XR) {
 8001a32:	2396      	movs	r3, #150	; 0x96
 8001a34:	b29b      	uxth	r3, r3
 8001a36:	8afa      	ldrh	r2, [r7, #22]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d223      	bcs.n	8001a84 <return_mode+0x124>
	//		  printf("Best_x : %d, Going to direction: %d\n", best_x, 0);
	//		  printf("Best_y : %d \n", best_y);
			if (return_near_station == 0) {
 8001a3c:	4b17      	ldr	r3, [pc, #92]	; (8001a9c <return_mode+0x13c>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d107      	bne.n	8001a54 <return_mode+0xf4>
				if (best_size >= RETURN_UROFF_SIZE) {
 8001a44:	23ff      	movs	r3, #255	; 0xff
 8001a46:	461a      	mov	r2, r3
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d302      	bcc.n	8001a54 <return_mode+0xf4>
					return_near_station = 1;
 8001a4e:	4b13      	ldr	r3, [pc, #76]	; (8001a9c <return_mode+0x13c>)
 8001a50:	2201      	movs	r2, #1
 8001a52:	701a      	strb	r2, [r3, #0]
				}
			}

			if(best_size >= RETURN_STOP_SIZE) {
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	ee07 3a90 	vmov	s15, r3
 8001a5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a5e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001aa0 <return_mode+0x140>
 8001a62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a6a:	db06      	blt.n	8001a7a <return_mode+0x11a>
				printf("---------Return\n");
 8001a6c:	480d      	ldr	r0, [pc, #52]	; (8001aa4 <return_mode+0x144>)
 8001a6e:	f00a fffb 	bl	800ca68 <puts>
				station_arrived = 1;
 8001a72:	4b0d      	ldr	r3, [pc, #52]	; (8001aa8 <return_mode+0x148>)
 8001a74:	2201      	movs	r2, #1
 8001a76:	701a      	strb	r2, [r3, #0]
 8001a78:	e002      	b.n	8001a80 <return_mode+0x120>
			} else {
				station_arrived = 0;
 8001a7a:	4b0b      	ldr	r3, [pc, #44]	; (8001aa8 <return_mode+0x148>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	701a      	strb	r2, [r3, #0]
			}
			return 0;
 8001a80:	2300      	movs	r3, #0
 8001a82:	e005      	b.n	8001a90 <return_mode+0x130>
		}
		if(best_x <= 315) {
 8001a84:	8afb      	ldrh	r3, [r7, #22]
 8001a86:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 8001a8a:	d201      	bcs.n	8001a90 <return_mode+0x130>
		//		  printf("Best_x : %d, Going to direction: %d\n", best_x, 2);
		//		  printf("Best_y : %d \n", best_y);
		  return 2;
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	e7ff      	b.n	8001a90 <return_mode+0x130>
		}
	}
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3718      	adds	r7, #24
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	2000020c 	.word	0x2000020c
 8001a9c:	20000239 	.word	0x20000239
 8001aa0:	473f07c0 	.word	0x473f07c0
 8001aa4:	0800eb10 	.word	0x0800eb10
 8001aa8:	20000238 	.word	0x20000238

08001aac <execute>:


void execute() {
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
	//default
	rotor_control(1);
 8001ab2:	2001      	movs	r0, #1
 8001ab4:	f001 f9ee 	bl	8002e94 <rotor_control>
	motor_control(7);
 8001ab8:	2007      	movs	r0, #7
 8001aba:	f001 f8fb 	bl	8002cb4 <motor_control>
	//led
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8,  0);
 8001abe:	2200      	movs	r2, #0
 8001ac0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ac4:	485b      	ldr	r0, [pc, #364]	; (8001c34 <execute+0x188>)
 8001ac6:	f003 fd5d 	bl	8005584 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9,  0);
 8001aca:	2200      	movs	r2, #0
 8001acc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ad0:	4858      	ldr	r0, [pc, #352]	; (8001c34 <execute+0x188>)
 8001ad2:	f003 fd57 	bl	8005584 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, 0);
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001adc:	4855      	ldr	r0, [pc, #340]	; (8001c34 <execute+0x188>)
 8001ade:	f003 fd51 	bl	8005584 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, 0);
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ae8:	4852      	ldr	r0, [pc, #328]	; (8001c34 <execute+0x188>)
 8001aea:	f003 fd4b 	bl	8005584 <HAL_GPIO_WritePin>

	switch (state) {
 8001aee:	4b52      	ldr	r3, [pc, #328]	; (8001c38 <execute+0x18c>)
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	2b05      	cmp	r3, #5
 8001af4:	f200 808d 	bhi.w	8001c12 <execute+0x166>
 8001af8:	a201      	add	r2, pc, #4	; (adr r2, 8001b00 <execute+0x54>)
 8001afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001afe:	bf00      	nop
 8001b00:	08001b19 	.word	0x08001b19
 8001b04:	08001b27 	.word	0x08001b27
 8001b08:	08001b45 	.word	0x08001b45
 8001b0c:	08001b5f 	.word	0x08001b5f
 8001b10:	08001b8f 	.word	0x08001b8f
 8001b14:	08001bfd 	.word	0x08001bfd
	case INIT:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8,  1); // white led
 8001b18:	2201      	movs	r2, #1
 8001b1a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b1e:	4845      	ldr	r0, [pc, #276]	; (8001c34 <execute+0x188>)
 8001b20:	f003 fd30 	bl	8005584 <HAL_GPIO_WritePin>
		break;
 8001b24:	e081      	b.n	8001c2a <execute+0x17e>
//			record[i] = record[i+1];
//		}

//		record[1] =  get_mode();

		uint8_t motor_mode = get_mode();
 8001b26:	f7ff fe7b 	bl	8001820 <get_mode>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	71bb      	strb	r3, [r7, #6]
//		uint8_t motor_mode = 1;

//		if (record[0] == record[1]) {
//			motor_mode = record[1];
//		}
		motor_control(motor_mode);
 8001b2e:	79bb      	ldrb	r3, [r7, #6]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f001 f8bf 	bl	8002cb4 <motor_control>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9,  1); // blue led
 8001b36:	2201      	movs	r2, #1
 8001b38:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b3c:	483d      	ldr	r0, [pc, #244]	; (8001c34 <execute+0x188>)
 8001b3e:	f003 fd21 	bl	8005584 <HAL_GPIO_WritePin>

		break;
 8001b42:	e072      	b.n	8001c2a <execute+0x17e>
	}

	case COLLECT:

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, 1); // green led
 8001b44:	2201      	movs	r2, #1
 8001b46:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b4a:	483a      	ldr	r0, [pc, #232]	; (8001c34 <execute+0x188>)
 8001b4c:	f003 fd1a 	bl	8005584 <HAL_GPIO_WritePin>
		rotor_control(0);
 8001b50:	2000      	movs	r0, #0
 8001b52:	f001 f99f 	bl	8002e94 <rotor_control>
		motor_control(6);
 8001b56:	2006      	movs	r0, #6
 8001b58:	f001 f8ac 	bl	8002cb4 <motor_control>

		break;
 8001b5c:	e065      	b.n	8001c2a <execute+0x17e>
	case RETURN:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8,  1); // white led
 8001b5e:	2201      	movs	r2, #1
 8001b60:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b64:	4833      	ldr	r0, [pc, #204]	; (8001c34 <execute+0x188>)
 8001b66:	f003 fd0d 	bl	8005584 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9,  1); // blue led
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b70:	4830      	ldr	r0, [pc, #192]	; (8001c34 <execute+0x188>)
 8001b72:	f003 fd07 	bl	8005584 <HAL_GPIO_WritePin>
		printf("Green Button pressed\n");
 8001b76:	4831      	ldr	r0, [pc, #196]	; (8001c3c <execute+0x190>)
 8001b78:	f00a ff76 	bl	800ca68 <puts>
		uint8_t return_motor_mode = return_mode();
 8001b7c:	f7ff fef0 	bl	8001960 <return_mode>
 8001b80:	4603      	mov	r3, r0
 8001b82:	71fb      	strb	r3, [r7, #7]
		motor_control(return_motor_mode);
 8001b84:	79fb      	ldrb	r3, [r7, #7]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f001 f894 	bl	8002cb4 <motor_control>
		break;
 8001b8c:	e04d      	b.n	8001c2a <execute+0x17e>
	case AVOID_COLLISION:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, 1); // red led
 8001b8e:	2201      	movs	r2, #1
 8001b90:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b94:	4827      	ldr	r0, [pc, #156]	; (8001c34 <execute+0x188>)
 8001b96:	f003 fcf5 	bl	8005584 <HAL_GPIO_WritePin>

		if(avoid_mode == 0) {
 8001b9a:	4b29      	ldr	r3, [pc, #164]	; (8001c40 <execute+0x194>)
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d106      	bne.n	8001bb0 <execute+0x104>
			rotor_control(0);
 8001ba2:	2000      	movs	r0, #0
 8001ba4:	f001 f976 	bl	8002e94 <rotor_control>
			motor_control(4);
 8001ba8:	2004      	movs	r0, #4
 8001baa:	f001 f883 	bl	8002cb4 <motor_control>
 8001bae:	e002      	b.n	8001bb6 <execute+0x10a>
		} else {
			motor_control(1);
 8001bb0:	2001      	movs	r0, #1
 8001bb2:	f001 f87f 	bl	8002cb4 <motor_control>
		}

		if (avoid_begin == 0) {
 8001bb6:	4b23      	ldr	r3, [pc, #140]	; (8001c44 <execute+0x198>)
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d134      	bne.n	8001c28 <execute+0x17c>
			__HAL_TIM_CLEAR_FLAG(&htim5, TIM_SR_UIF);
 8001bbe:	4b22      	ldr	r3, [pc, #136]	; (8001c48 <execute+0x19c>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f06f 0201 	mvn.w	r2, #1
 8001bc6:	611a      	str	r2, [r3, #16]
			avoid_begin = 1;
 8001bc8:	4b1e      	ldr	r3, [pc, #120]	; (8001c44 <execute+0x198>)
 8001bca:	2201      	movs	r2, #1
 8001bcc:	701a      	strb	r2, [r3, #0]
			if (avoid_mode == 0) {
 8001bce:	4b1c      	ldr	r3, [pc, #112]	; (8001c40 <execute+0x194>)
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d104      	bne.n	8001be0 <execute+0x134>
				TIM5->ARR = 1000;
 8001bd6:	4b1d      	ldr	r3, [pc, #116]	; (8001c4c <execute+0x1a0>)
 8001bd8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001bdc:	62da      	str	r2, [r3, #44]	; 0x2c
 8001bde:	e003      	b.n	8001be8 <execute+0x13c>
			} else {
				TIM5->ARR = 4000;
 8001be0:	4b1a      	ldr	r3, [pc, #104]	; (8001c4c <execute+0x1a0>)
 8001be2:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8001be6:	62da      	str	r2, [r3, #44]	; 0x2c
			}

			TIM5->CNT = 0;
 8001be8:	4b18      	ldr	r3, [pc, #96]	; (8001c4c <execute+0x1a0>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	625a      	str	r2, [r3, #36]	; 0x24
			printf("Avoid_Collision: timer begin\n");
 8001bee:	4818      	ldr	r0, [pc, #96]	; (8001c50 <execute+0x1a4>)
 8001bf0:	f00a ff3a 	bl	800ca68 <puts>
			HAL_TIM_Base_Start_IT(&htim5);
 8001bf4:	4814      	ldr	r0, [pc, #80]	; (8001c48 <execute+0x19c>)
 8001bf6:	f007 fca5 	bl	8009544 <HAL_TIM_Base_Start_IT>
		}
		break;
 8001bfa:	e015      	b.n	8001c28 <execute+0x17c>
	case SEARCH_TO_COLLECT : {
		rotor_control(0);
 8001bfc:	2000      	movs	r0, #0
 8001bfe:	f001 f949 	bl	8002e94 <rotor_control>
		motor_control(5);
 8001c02:	2005      	movs	r0, #5
 8001c04:	f001 f856 	bl	8002cb4 <motor_control>
		dumb_loop(15000);
 8001c08:	f643 2098 	movw	r0, #15000	; 0x3a98
 8001c0c:	f7ff fc1e 	bl	800144c <dumb_loop>
//		printf("ending search to collect\n");
		break;
 8001c10:	e00b      	b.n	8001c2a <execute+0x17e>
	}
	default :
		rotor_control(0);
 8001c12:	2000      	movs	r0, #0
 8001c14:	f001 f93e 	bl	8002e94 <rotor_control>
		motor_control(7);
 8001c18:	2007      	movs	r0, #7
 8001c1a:	f001 f84b 	bl	8002cb4 <motor_control>
		dumb_loop(10000);
 8001c1e:	f242 7010 	movw	r0, #10000	; 0x2710
 8001c22:	f7ff fc13 	bl	800144c <dumb_loop>
//		printf("ending search to collect\n");
		break;
 8001c26:	e000      	b.n	8001c2a <execute+0x17e>
		break;
 8001c28:	bf00      	nop
	}
}
 8001c2a:	bf00      	nop
 8001c2c:	3708      	adds	r7, #8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	48000800 	.word	0x48000800
 8001c38:	20000232 	.word	0x20000232
 8001c3c:	0800eb20 	.word	0x0800eb20
 8001c40:	2000023c 	.word	0x2000023c
 8001c44:	2000023b 	.word	0x2000023b
 8001c48:	200007b8 	.word	0x200007b8
 8001c4c:	40000c00 	.word	0x40000c00
 8001c50:	0800eb38 	.word	0x0800eb38

08001c54 <delay_loop>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void delay_loop(int time) {
 8001c54:	b480      	push	{r7}
 8001c56:	b085      	sub	sp, #20
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
	 for(volatile int j = 0; j < time; ++j)
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	60fb      	str	r3, [r7, #12]
 8001c60:	e00c      	b.n	8001c7c <delay_loop+0x28>
	  		  for (volatile int i = 0; i < 380; ++i) asm("");//1ms
 8001c62:	2300      	movs	r3, #0
 8001c64:	60bb      	str	r3, [r7, #8]
 8001c66:	e002      	b.n	8001c6e <delay_loop+0x1a>
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	60bb      	str	r3, [r7, #8]
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	f5b3 7fbe 	cmp.w	r3, #380	; 0x17c
 8001c74:	dbf8      	blt.n	8001c68 <delay_loop+0x14>
	 for(volatile int j = 0; j < time; ++j)
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	3301      	adds	r3, #1
 8001c7a:	60fb      	str	r3, [r7, #12]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	dcee      	bgt.n	8001c62 <delay_loop+0xe>
}
 8001c84:	bf00      	nop
 8001c86:	bf00      	nop
 8001c88:	3714      	adds	r7, #20
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
	...

08001c94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c98:	f002 f921 	bl	8003ede <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c9c:	f000 f858 	bl	8001d50 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001ca0:	f000 f8b8 	bl	8001e14 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ca4:	f000 fe90 	bl	80029c8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001ca8:	f000 f8e6 	bl	8001e78 <MX_ADC1_Init>
  MX_CAN1_Init();
 8001cac:	f000 f948 	bl	8001f40 <MX_CAN1_Init>
  MX_I2C1_SMBUS_Init();
 8001cb0:	f000 f97a 	bl	8001fa8 <MX_I2C1_SMBUS_Init>
  MX_I2C2_SMBUS_Init();
 8001cb4:	f000 f9b2 	bl	800201c <MX_I2C2_SMBUS_Init>
  MX_LPUART1_UART_Init();
 8001cb8:	f000 f9f2 	bl	80020a0 <MX_LPUART1_UART_Init>
  MX_USART2_UART_Init();
 8001cbc:	f000 fa3c 	bl	8002138 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001cc0:	f000 fa88 	bl	80021d4 <MX_USART3_UART_Init>
  MX_SAI2_Init();
 8001cc4:	f000 fad2 	bl	800226c <MX_SAI2_Init>
  MX_SPI1_Init();
 8001cc8:	f000 fb38 	bl	800233c <MX_SPI1_Init>
  MX_SPI3_Init();
 8001ccc:	f000 fb74 	bl	80023b8 <MX_SPI3_Init>
  MX_TIM1_Init();
 8001cd0:	f000 fbb0 	bl	8002434 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001cd4:	f000 fc24 	bl	8002520 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001cd8:	f000 fc9a 	bl	8002610 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001cdc:	f000 fd0a 	bl	80026f4 <MX_TIM4_Init>
  MX_TIM15_Init();
 8001ce0:	f000 fde6 	bl	80028b0 <MX_TIM15_Init>
  MX_USB_OTG_FS_USB_Init();
 8001ce4:	f000 fe68 	bl	80029b8 <MX_USB_OTG_FS_USB_Init>
  MX_TIM5_Init();
 8001ce8:	f000 fd92 	bl	8002810 <MX_TIM5_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001cec:	2100      	movs	r1, #0
 8001cee:	4812      	ldr	r0, [pc, #72]	; (8001d38 <main+0xa4>)
 8001cf0:	f007 fd1e 	bl	8009730 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001cf4:	2108      	movs	r1, #8
 8001cf6:	4810      	ldr	r0, [pc, #64]	; (8001d38 <main+0xa4>)
 8001cf8:	f007 fd1a 	bl	8009730 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8001cfc:	210c      	movs	r1, #12
 8001cfe:	480e      	ldr	r0, [pc, #56]	; (8001d38 <main+0xa4>)
 8001d00:	f007 fd16 	bl	8009730 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001d04:	2100      	movs	r1, #0
 8001d06:	480d      	ldr	r0, [pc, #52]	; (8001d3c <main+0xa8>)
 8001d08:	f007 fd12 	bl	8009730 <HAL_TIM_PWM_Start>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	480c      	ldr	r0, [pc, #48]	; (8001d40 <main+0xac>)
 8001d10:	f007 fe76 	bl	8009a00 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 8001d14:	2104      	movs	r1, #4
 8001d16:	480b      	ldr	r0, [pc, #44]	; (8001d44 <main+0xb0>)
 8001d18:	f007 fe72 	bl	8009a00 <HAL_TIM_IC_Start_IT>

  extern Pixy2 pixy;
  pixy2_init(&hspi1, GPIOB, GPIO_PIN_2);
 8001d1c:	2204      	movs	r2, #4
 8001d1e:	490a      	ldr	r1, [pc, #40]	; (8001d48 <main+0xb4>)
 8001d20:	480a      	ldr	r0, [pc, #40]	; (8001d4c <main+0xb8>)
 8001d22:	f7ff fa91 	bl	8001248 <pixy2_init>


  while (1)
  {
//	  printf("main\n");
	  state_update();
 8001d26:	f7ff fbb1 	bl	800148c <state_update>
	  execute();
 8001d2a:	f7ff febf 	bl	8001aac <execute>
	  delay_loop(2000); // 0.1ms
 8001d2e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001d32:	f7ff ff8f 	bl	8001c54 <delay_loop>
  {
 8001d36:	e7f6      	b.n	8001d26 <main+0x92>
 8001d38:	2000076c 	.word	0x2000076c
 8001d3c:	200006d4 	.word	0x200006d4
 8001d40:	20000688 	.word	0x20000688
 8001d44:	20000720 	.word	0x20000720
 8001d48:	48000400 	.word	0x48000400
 8001d4c:	200005c0 	.word	0x200005c0

08001d50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b096      	sub	sp, #88	; 0x58
 8001d54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d56:	f107 0314 	add.w	r3, r7, #20
 8001d5a:	2244      	movs	r2, #68	; 0x44
 8001d5c:	2100      	movs	r1, #0
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f00a f8aa 	bl	800beb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d64:	463b      	mov	r3, r7
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]
 8001d6a:	605a      	str	r2, [r3, #4]
 8001d6c:	609a      	str	r2, [r3, #8]
 8001d6e:	60da      	str	r2, [r3, #12]
 8001d70:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001d72:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001d76:	f003 fc71 	bl	800565c <HAL_PWREx_ControlVoltageScaling>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001d80:	f000 ff92 	bl	8002ca8 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001d84:	f003 fc3a 	bl	80055fc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001d88:	4b21      	ldr	r3, [pc, #132]	; (8001e10 <SystemClock_Config+0xc0>)
 8001d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d8e:	4a20      	ldr	r2, [pc, #128]	; (8001e10 <SystemClock_Config+0xc0>)
 8001d90:	f023 0318 	bic.w	r3, r3, #24
 8001d94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001d98:	2314      	movs	r3, #20
 8001d9a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001da0:	2301      	movs	r3, #1
 8001da2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001da4:	2300      	movs	r3, #0
 8001da6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001da8:	2360      	movs	r3, #96	; 0x60
 8001daa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001dac:	2302      	movs	r3, #2
 8001dae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001db0:	2301      	movs	r3, #1
 8001db2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001db4:	2301      	movs	r3, #1
 8001db6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8001db8:	2310      	movs	r3, #16
 8001dba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dc8:	f107 0314 	add.w	r3, r7, #20
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f003 fcf9 	bl	80057c4 <HAL_RCC_OscConfig>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001dd8:	f000 ff66 	bl	8002ca8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ddc:	230f      	movs	r3, #15
 8001dde:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001de0:	2303      	movs	r3, #3
 8001de2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001de4:	2300      	movs	r3, #0
 8001de6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001de8:	2300      	movs	r3, #0
 8001dea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001dec:	2300      	movs	r3, #0
 8001dee:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001df0:	463b      	mov	r3, r7
 8001df2:	2101      	movs	r1, #1
 8001df4:	4618      	mov	r0, r3
 8001df6:	f004 f8ff 	bl	8005ff8 <HAL_RCC_ClockConfig>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001e00:	f000 ff52 	bl	8002ca8 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001e04:	f005 fe08 	bl	8007a18 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001e08:	bf00      	nop
 8001e0a:	3758      	adds	r7, #88	; 0x58
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	40021000 	.word	0x40021000

08001e14 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b0a6      	sub	sp, #152	; 0x98
 8001e18:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e1a:	1d3b      	adds	r3, r7, #4
 8001e1c:	2294      	movs	r2, #148	; 0x94
 8001e1e:	2100      	movs	r1, #0
 8001e20:	4618      	mov	r0, r3
 8001e22:	f00a f849 	bl	800beb8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI2|RCC_PERIPHCLK_USB
 8001e26:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001e2a:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI1;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001e30:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001e34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001e38:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001e3c:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001e42:	2301      	movs	r3, #1
 8001e44:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001e46:	2318      	movs	r3, #24
 8001e48:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001e4e:	2302      	movs	r3, #2
 8001e50:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001e52:	2302      	movs	r3, #2
 8001e54:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_48M2CLK
 8001e56:	4b07      	ldr	r3, [pc, #28]	; (8001e74 <PeriphCommonClock_Config+0x60>)
 8001e58:	623b      	str	r3, [r7, #32]
                              |RCC_PLLSAI1_ADC1CLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e5a:	1d3b      	adds	r3, r7, #4
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f004 fb89 	bl	8006574 <HAL_RCCEx_PeriphCLKConfig>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 8001e68:	f000 ff1e 	bl	8002ca8 <Error_Handler>
  }
}
 8001e6c:	bf00      	nop
 8001e6e:	3798      	adds	r7, #152	; 0x98
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	01110000 	.word	0x01110000

08001e78 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b086      	sub	sp, #24
 8001e7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001e7e:	463b      	mov	r3, r7
 8001e80:	2200      	movs	r2, #0
 8001e82:	601a      	str	r2, [r3, #0]
 8001e84:	605a      	str	r2, [r3, #4]
 8001e86:	609a      	str	r2, [r3, #8]
 8001e88:	60da      	str	r2, [r3, #12]
 8001e8a:	611a      	str	r2, [r3, #16]
 8001e8c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001e8e:	4b29      	ldr	r3, [pc, #164]	; (8001f34 <MX_ADC1_Init+0xbc>)
 8001e90:	4a29      	ldr	r2, [pc, #164]	; (8001f38 <MX_ADC1_Init+0xc0>)
 8001e92:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001e94:	4b27      	ldr	r3, [pc, #156]	; (8001f34 <MX_ADC1_Init+0xbc>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001e9a:	4b26      	ldr	r3, [pc, #152]	; (8001f34 <MX_ADC1_Init+0xbc>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ea0:	4b24      	ldr	r3, [pc, #144]	; (8001f34 <MX_ADC1_Init+0xbc>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001ea6:	4b23      	ldr	r3, [pc, #140]	; (8001f34 <MX_ADC1_Init+0xbc>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001eac:	4b21      	ldr	r3, [pc, #132]	; (8001f34 <MX_ADC1_Init+0xbc>)
 8001eae:	2204      	movs	r2, #4
 8001eb0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001eb2:	4b20      	ldr	r3, [pc, #128]	; (8001f34 <MX_ADC1_Init+0xbc>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001eb8:	4b1e      	ldr	r3, [pc, #120]	; (8001f34 <MX_ADC1_Init+0xbc>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001ebe:	4b1d      	ldr	r3, [pc, #116]	; (8001f34 <MX_ADC1_Init+0xbc>)
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001ec4:	4b1b      	ldr	r3, [pc, #108]	; (8001f34 <MX_ADC1_Init+0xbc>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ecc:	4b19      	ldr	r3, [pc, #100]	; (8001f34 <MX_ADC1_Init+0xbc>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001ed2:	4b18      	ldr	r3, [pc, #96]	; (8001f34 <MX_ADC1_Init+0xbc>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001ed8:	4b16      	ldr	r3, [pc, #88]	; (8001f34 <MX_ADC1_Init+0xbc>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001ee0:	4b14      	ldr	r3, [pc, #80]	; (8001f34 <MX_ADC1_Init+0xbc>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001ee6:	4b13      	ldr	r3, [pc, #76]	; (8001f34 <MX_ADC1_Init+0xbc>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001eee:	4811      	ldr	r0, [pc, #68]	; (8001f34 <MX_ADC1_Init+0xbc>)
 8001ef0:	f002 fa2e 	bl	8004350 <HAL_ADC_Init>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8001efa:	f000 fed5 	bl	8002ca8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001efe:	4b0f      	ldr	r3, [pc, #60]	; (8001f3c <MX_ADC1_Init+0xc4>)
 8001f00:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001f02:	2306      	movs	r3, #6
 8001f04:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001f06:	2300      	movs	r3, #0
 8001f08:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001f0a:	237f      	movs	r3, #127	; 0x7f
 8001f0c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001f0e:	2304      	movs	r3, #4
 8001f10:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001f12:	2300      	movs	r3, #0
 8001f14:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f16:	463b      	mov	r3, r7
 8001f18:	4619      	mov	r1, r3
 8001f1a:	4806      	ldr	r0, [pc, #24]	; (8001f34 <MX_ADC1_Init+0xbc>)
 8001f1c:	f002 fb64 	bl	80045e8 <HAL_ADC_ConfigChannel>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001f26:	f000 febf 	bl	8002ca8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001f2a:	bf00      	nop
 8001f2c:	3718      	adds	r7, #24
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	2000024c 	.word	0x2000024c
 8001f38:	50040000 	.word	0x50040000
 8001f3c:	04300002 	.word	0x04300002

08001f40 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001f44:	4b16      	ldr	r3, [pc, #88]	; (8001fa0 <MX_CAN1_Init+0x60>)
 8001f46:	4a17      	ldr	r2, [pc, #92]	; (8001fa4 <MX_CAN1_Init+0x64>)
 8001f48:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8001f4a:	4b15      	ldr	r3, [pc, #84]	; (8001fa0 <MX_CAN1_Init+0x60>)
 8001f4c:	2210      	movs	r2, #16
 8001f4e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001f50:	4b13      	ldr	r3, [pc, #76]	; (8001fa0 <MX_CAN1_Init+0x60>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001f56:	4b12      	ldr	r3, [pc, #72]	; (8001fa0 <MX_CAN1_Init+0x60>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8001f5c:	4b10      	ldr	r3, [pc, #64]	; (8001fa0 <MX_CAN1_Init+0x60>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001f62:	4b0f      	ldr	r3, [pc, #60]	; (8001fa0 <MX_CAN1_Init+0x60>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001f68:	4b0d      	ldr	r3, [pc, #52]	; (8001fa0 <MX_CAN1_Init+0x60>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001f6e:	4b0c      	ldr	r3, [pc, #48]	; (8001fa0 <MX_CAN1_Init+0x60>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001f74:	4b0a      	ldr	r3, [pc, #40]	; (8001fa0 <MX_CAN1_Init+0x60>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001f7a:	4b09      	ldr	r3, [pc, #36]	; (8001fa0 <MX_CAN1_Init+0x60>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001f80:	4b07      	ldr	r3, [pc, #28]	; (8001fa0 <MX_CAN1_Init+0x60>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001f86:	4b06      	ldr	r3, [pc, #24]	; (8001fa0 <MX_CAN1_Init+0x60>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001f8c:	4804      	ldr	r0, [pc, #16]	; (8001fa0 <MX_CAN1_Init+0x60>)
 8001f8e:	f002 ff27 	bl	8004de0 <HAL_CAN_Init>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8001f98:	f000 fe86 	bl	8002ca8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001f9c:	bf00      	nop
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	200002b4 	.word	0x200002b4
 8001fa4:	40006400 	.word	0x40006400

08001fa8 <MX_I2C1_SMBUS_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_SMBUS_Init(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hsmbus1.Instance = I2C1;
 8001fac:	4b18      	ldr	r3, [pc, #96]	; (8002010 <MX_I2C1_SMBUS_Init+0x68>)
 8001fae:	4a19      	ldr	r2, [pc, #100]	; (8002014 <MX_I2C1_SMBUS_Init+0x6c>)
 8001fb0:	601a      	str	r2, [r3, #0]
  hsmbus1.Init.Timing = 0x00707CBB;
 8001fb2:	4b17      	ldr	r3, [pc, #92]	; (8002010 <MX_I2C1_SMBUS_Init+0x68>)
 8001fb4:	4a18      	ldr	r2, [pc, #96]	; (8002018 <MX_I2C1_SMBUS_Init+0x70>)
 8001fb6:	605a      	str	r2, [r3, #4]
  hsmbus1.Init.AnalogFilter = SMBUS_ANALOGFILTER_ENABLE;
 8001fb8:	4b15      	ldr	r3, [pc, #84]	; (8002010 <MX_I2C1_SMBUS_Init+0x68>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	609a      	str	r2, [r3, #8]
  hsmbus1.Init.OwnAddress1 = 2;
 8001fbe:	4b14      	ldr	r3, [pc, #80]	; (8002010 <MX_I2C1_SMBUS_Init+0x68>)
 8001fc0:	2202      	movs	r2, #2
 8001fc2:	60da      	str	r2, [r3, #12]
  hsmbus1.Init.AddressingMode = SMBUS_ADDRESSINGMODE_7BIT;
 8001fc4:	4b12      	ldr	r3, [pc, #72]	; (8002010 <MX_I2C1_SMBUS_Init+0x68>)
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	611a      	str	r2, [r3, #16]
  hsmbus1.Init.DualAddressMode = SMBUS_DUALADDRESS_DISABLE;
 8001fca:	4b11      	ldr	r3, [pc, #68]	; (8002010 <MX_I2C1_SMBUS_Init+0x68>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	615a      	str	r2, [r3, #20]
  hsmbus1.Init.OwnAddress2 = 0;
 8001fd0:	4b0f      	ldr	r3, [pc, #60]	; (8002010 <MX_I2C1_SMBUS_Init+0x68>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	619a      	str	r2, [r3, #24]
  hsmbus1.Init.OwnAddress2Masks = SMBUS_OA2_NOMASK;
 8001fd6:	4b0e      	ldr	r3, [pc, #56]	; (8002010 <MX_I2C1_SMBUS_Init+0x68>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	61da      	str	r2, [r3, #28]
  hsmbus1.Init.GeneralCallMode = SMBUS_GENERALCALL_DISABLE;
 8001fdc:	4b0c      	ldr	r3, [pc, #48]	; (8002010 <MX_I2C1_SMBUS_Init+0x68>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	621a      	str	r2, [r3, #32]
  hsmbus1.Init.NoStretchMode = SMBUS_NOSTRETCH_DISABLE;
 8001fe2:	4b0b      	ldr	r3, [pc, #44]	; (8002010 <MX_I2C1_SMBUS_Init+0x68>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	625a      	str	r2, [r3, #36]	; 0x24
  hsmbus1.Init.PacketErrorCheckMode = SMBUS_PEC_DISABLE;
 8001fe8:	4b09      	ldr	r3, [pc, #36]	; (8002010 <MX_I2C1_SMBUS_Init+0x68>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	629a      	str	r2, [r3, #40]	; 0x28
  hsmbus1.Init.PeripheralMode = SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE;
 8001fee:	4b08      	ldr	r3, [pc, #32]	; (8002010 <MX_I2C1_SMBUS_Init+0x68>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	62da      	str	r2, [r3, #44]	; 0x2c
  hsmbus1.Init.SMBusTimeout = 0x00008186;
 8001ff4:	4b06      	ldr	r3, [pc, #24]	; (8002010 <MX_I2C1_SMBUS_Init+0x68>)
 8001ff6:	f248 1286 	movw	r2, #33158	; 0x8186
 8001ffa:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_SMBUS_Init(&hsmbus1) != HAL_OK)
 8001ffc:	4804      	ldr	r0, [pc, #16]	; (8002010 <MX_I2C1_SMBUS_Init+0x68>)
 8001ffe:	f006 fa2d 	bl	800845c <HAL_SMBUS_Init>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d001      	beq.n	800200c <MX_I2C1_SMBUS_Init+0x64>
  {
    Error_Handler();
 8002008:	f000 fe4e 	bl	8002ca8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800200c:	bf00      	nop
 800200e:	bd80      	pop	{r7, pc}
 8002010:	200002dc 	.word	0x200002dc
 8002014:	40005400 	.word	0x40005400
 8002018:	00707cbb 	.word	0x00707cbb

0800201c <MX_I2C2_SMBUS_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_SMBUS_Init(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hsmbus2.Instance = I2C2;
 8002020:	4b1c      	ldr	r3, [pc, #112]	; (8002094 <MX_I2C2_SMBUS_Init+0x78>)
 8002022:	4a1d      	ldr	r2, [pc, #116]	; (8002098 <MX_I2C2_SMBUS_Init+0x7c>)
 8002024:	601a      	str	r2, [r3, #0]
  hsmbus2.Init.Timing = 0x00707CBB;
 8002026:	4b1b      	ldr	r3, [pc, #108]	; (8002094 <MX_I2C2_SMBUS_Init+0x78>)
 8002028:	4a1c      	ldr	r2, [pc, #112]	; (800209c <MX_I2C2_SMBUS_Init+0x80>)
 800202a:	605a      	str	r2, [r3, #4]
  hsmbus2.Init.AnalogFilter = SMBUS_ANALOGFILTER_ENABLE;
 800202c:	4b19      	ldr	r3, [pc, #100]	; (8002094 <MX_I2C2_SMBUS_Init+0x78>)
 800202e:	2200      	movs	r2, #0
 8002030:	609a      	str	r2, [r3, #8]
  hsmbus2.Init.OwnAddress1 = 2;
 8002032:	4b18      	ldr	r3, [pc, #96]	; (8002094 <MX_I2C2_SMBUS_Init+0x78>)
 8002034:	2202      	movs	r2, #2
 8002036:	60da      	str	r2, [r3, #12]
  hsmbus2.Init.AddressingMode = SMBUS_ADDRESSINGMODE_7BIT;
 8002038:	4b16      	ldr	r3, [pc, #88]	; (8002094 <MX_I2C2_SMBUS_Init+0x78>)
 800203a:	2201      	movs	r2, #1
 800203c:	611a      	str	r2, [r3, #16]
  hsmbus2.Init.DualAddressMode = SMBUS_DUALADDRESS_DISABLE;
 800203e:	4b15      	ldr	r3, [pc, #84]	; (8002094 <MX_I2C2_SMBUS_Init+0x78>)
 8002040:	2200      	movs	r2, #0
 8002042:	615a      	str	r2, [r3, #20]
  hsmbus2.Init.OwnAddress2 = 0;
 8002044:	4b13      	ldr	r3, [pc, #76]	; (8002094 <MX_I2C2_SMBUS_Init+0x78>)
 8002046:	2200      	movs	r2, #0
 8002048:	619a      	str	r2, [r3, #24]
  hsmbus2.Init.OwnAddress2Masks = SMBUS_OA2_NOMASK;
 800204a:	4b12      	ldr	r3, [pc, #72]	; (8002094 <MX_I2C2_SMBUS_Init+0x78>)
 800204c:	2200      	movs	r2, #0
 800204e:	61da      	str	r2, [r3, #28]
  hsmbus2.Init.GeneralCallMode = SMBUS_GENERALCALL_DISABLE;
 8002050:	4b10      	ldr	r3, [pc, #64]	; (8002094 <MX_I2C2_SMBUS_Init+0x78>)
 8002052:	2200      	movs	r2, #0
 8002054:	621a      	str	r2, [r3, #32]
  hsmbus2.Init.NoStretchMode = SMBUS_NOSTRETCH_DISABLE;
 8002056:	4b0f      	ldr	r3, [pc, #60]	; (8002094 <MX_I2C2_SMBUS_Init+0x78>)
 8002058:	2200      	movs	r2, #0
 800205a:	625a      	str	r2, [r3, #36]	; 0x24
  hsmbus2.Init.PacketErrorCheckMode = SMBUS_PEC_DISABLE;
 800205c:	4b0d      	ldr	r3, [pc, #52]	; (8002094 <MX_I2C2_SMBUS_Init+0x78>)
 800205e:	2200      	movs	r2, #0
 8002060:	629a      	str	r2, [r3, #40]	; 0x28
  hsmbus2.Init.PeripheralMode = SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE;
 8002062:	4b0c      	ldr	r3, [pc, #48]	; (8002094 <MX_I2C2_SMBUS_Init+0x78>)
 8002064:	2200      	movs	r2, #0
 8002066:	62da      	str	r2, [r3, #44]	; 0x2c
  hsmbus2.Init.SMBusTimeout = 0x00008186;
 8002068:	4b0a      	ldr	r3, [pc, #40]	; (8002094 <MX_I2C2_SMBUS_Init+0x78>)
 800206a:	f248 1286 	movw	r2, #33158	; 0x8186
 800206e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_SMBUS_Init(&hsmbus2) != HAL_OK)
 8002070:	4808      	ldr	r0, [pc, #32]	; (8002094 <MX_I2C2_SMBUS_Init+0x78>)
 8002072:	f006 f9f3 	bl	800845c <HAL_SMBUS_Init>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <MX_I2C2_SMBUS_Init+0x64>
  {
    Error_Handler();
 800207c:	f000 fe14 	bl	8002ca8 <Error_Handler>
  }

  /** configuration Alert Mode
  */
  if (HAL_SMBUS_EnableAlert_IT(&hsmbus2) != HAL_OK)
 8002080:	4804      	ldr	r0, [pc, #16]	; (8002094 <MX_I2C2_SMBUS_Init+0x78>)
 8002082:	f006 faa3 	bl	80085cc <HAL_SMBUS_EnableAlert_IT>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <MX_I2C2_SMBUS_Init+0x74>
  {
    Error_Handler();
 800208c:	f000 fe0c 	bl	8002ca8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002090:	bf00      	nop
 8002092:	bd80      	pop	{r7, pc}
 8002094:	2000032c 	.word	0x2000032c
 8002098:	40005800 	.word	0x40005800
 800209c:	00707cbb 	.word	0x00707cbb

080020a0 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80020a4:	4b22      	ldr	r3, [pc, #136]	; (8002130 <MX_LPUART1_UART_Init+0x90>)
 80020a6:	4a23      	ldr	r2, [pc, #140]	; (8002134 <MX_LPUART1_UART_Init+0x94>)
 80020a8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80020aa:	4b21      	ldr	r3, [pc, #132]	; (8002130 <MX_LPUART1_UART_Init+0x90>)
 80020ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80020b0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80020b2:	4b1f      	ldr	r3, [pc, #124]	; (8002130 <MX_LPUART1_UART_Init+0x90>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80020b8:	4b1d      	ldr	r3, [pc, #116]	; (8002130 <MX_LPUART1_UART_Init+0x90>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80020be:	4b1c      	ldr	r3, [pc, #112]	; (8002130 <MX_LPUART1_UART_Init+0x90>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80020c4:	4b1a      	ldr	r3, [pc, #104]	; (8002130 <MX_LPUART1_UART_Init+0x90>)
 80020c6:	220c      	movs	r2, #12
 80020c8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020ca:	4b19      	ldr	r3, [pc, #100]	; (8002130 <MX_LPUART1_UART_Init+0x90>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020d0:	4b17      	ldr	r3, [pc, #92]	; (8002130 <MX_LPUART1_UART_Init+0x90>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80020d6:	4b16      	ldr	r3, [pc, #88]	; (8002130 <MX_LPUART1_UART_Init+0x90>)
 80020d8:	2200      	movs	r2, #0
 80020da:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020dc:	4b14      	ldr	r3, [pc, #80]	; (8002130 <MX_LPUART1_UART_Init+0x90>)
 80020de:	2200      	movs	r2, #0
 80020e0:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80020e2:	4b13      	ldr	r3, [pc, #76]	; (8002130 <MX_LPUART1_UART_Init+0x90>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80020e8:	4811      	ldr	r0, [pc, #68]	; (8002130 <MX_LPUART1_UART_Init+0x90>)
 80020ea:	f009 f817 	bl	800b11c <HAL_UART_Init>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 80020f4:	f000 fdd8 	bl	8002ca8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020f8:	2100      	movs	r1, #0
 80020fa:	480d      	ldr	r0, [pc, #52]	; (8002130 <MX_LPUART1_UART_Init+0x90>)
 80020fc:	f009 fde0 	bl	800bcc0 <HAL_UARTEx_SetTxFifoThreshold>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002106:	f000 fdcf 	bl	8002ca8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800210a:	2100      	movs	r1, #0
 800210c:	4808      	ldr	r0, [pc, #32]	; (8002130 <MX_LPUART1_UART_Init+0x90>)
 800210e:	f009 fe15 	bl	800bd3c <HAL_UARTEx_SetRxFifoThreshold>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d001      	beq.n	800211c <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002118:	f000 fdc6 	bl	8002ca8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800211c:	4804      	ldr	r0, [pc, #16]	; (8002130 <MX_LPUART1_UART_Init+0x90>)
 800211e:	f009 fd96 	bl	800bc4e <HAL_UARTEx_DisableFifoMode>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d001      	beq.n	800212c <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002128:	f000 fdbe 	bl	8002ca8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800212c:	bf00      	nop
 800212e:	bd80      	pop	{r7, pc}
 8002130:	2000037c 	.word	0x2000037c
 8002134:	40008000 	.word	0x40008000

08002138 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800213c:	4b23      	ldr	r3, [pc, #140]	; (80021cc <MX_USART2_UART_Init+0x94>)
 800213e:	4a24      	ldr	r2, [pc, #144]	; (80021d0 <MX_USART2_UART_Init+0x98>)
 8002140:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002142:	4b22      	ldr	r3, [pc, #136]	; (80021cc <MX_USART2_UART_Init+0x94>)
 8002144:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002148:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800214a:	4b20      	ldr	r3, [pc, #128]	; (80021cc <MX_USART2_UART_Init+0x94>)
 800214c:	2200      	movs	r2, #0
 800214e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002150:	4b1e      	ldr	r3, [pc, #120]	; (80021cc <MX_USART2_UART_Init+0x94>)
 8002152:	2200      	movs	r2, #0
 8002154:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002156:	4b1d      	ldr	r3, [pc, #116]	; (80021cc <MX_USART2_UART_Init+0x94>)
 8002158:	2200      	movs	r2, #0
 800215a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800215c:	4b1b      	ldr	r3, [pc, #108]	; (80021cc <MX_USART2_UART_Init+0x94>)
 800215e:	220c      	movs	r2, #12
 8002160:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8002162:	4b1a      	ldr	r3, [pc, #104]	; (80021cc <MX_USART2_UART_Init+0x94>)
 8002164:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002168:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800216a:	4b18      	ldr	r3, [pc, #96]	; (80021cc <MX_USART2_UART_Init+0x94>)
 800216c:	2200      	movs	r2, #0
 800216e:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002170:	4b16      	ldr	r3, [pc, #88]	; (80021cc <MX_USART2_UART_Init+0x94>)
 8002172:	2200      	movs	r2, #0
 8002174:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002176:	4b15      	ldr	r3, [pc, #84]	; (80021cc <MX_USART2_UART_Init+0x94>)
 8002178:	2200      	movs	r2, #0
 800217a:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800217c:	4b13      	ldr	r3, [pc, #76]	; (80021cc <MX_USART2_UART_Init+0x94>)
 800217e:	2200      	movs	r2, #0
 8002180:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002182:	4812      	ldr	r0, [pc, #72]	; (80021cc <MX_USART2_UART_Init+0x94>)
 8002184:	f008 ffca 	bl	800b11c <HAL_UART_Init>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 800218e:	f000 fd8b 	bl	8002ca8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002192:	2100      	movs	r1, #0
 8002194:	480d      	ldr	r0, [pc, #52]	; (80021cc <MX_USART2_UART_Init+0x94>)
 8002196:	f009 fd93 	bl	800bcc0 <HAL_UARTEx_SetTxFifoThreshold>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d001      	beq.n	80021a4 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 80021a0:	f000 fd82 	bl	8002ca8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80021a4:	2100      	movs	r1, #0
 80021a6:	4809      	ldr	r0, [pc, #36]	; (80021cc <MX_USART2_UART_Init+0x94>)
 80021a8:	f009 fdc8 	bl	800bd3c <HAL_UARTEx_SetRxFifoThreshold>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d001      	beq.n	80021b6 <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 80021b2:	f000 fd79 	bl	8002ca8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80021b6:	4805      	ldr	r0, [pc, #20]	; (80021cc <MX_USART2_UART_Init+0x94>)
 80021b8:	f009 fd49 	bl	800bc4e <HAL_UARTEx_DisableFifoMode>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 80021c2:	f000 fd71 	bl	8002ca8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80021c6:	bf00      	nop
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	2000040c 	.word	0x2000040c
 80021d0:	40004400 	.word	0x40004400

080021d4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80021d8:	4b22      	ldr	r3, [pc, #136]	; (8002264 <MX_USART3_UART_Init+0x90>)
 80021da:	4a23      	ldr	r2, [pc, #140]	; (8002268 <MX_USART3_UART_Init+0x94>)
 80021dc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80021de:	4b21      	ldr	r3, [pc, #132]	; (8002264 <MX_USART3_UART_Init+0x90>)
 80021e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021e4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80021e6:	4b1f      	ldr	r3, [pc, #124]	; (8002264 <MX_USART3_UART_Init+0x90>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80021ec:	4b1d      	ldr	r3, [pc, #116]	; (8002264 <MX_USART3_UART_Init+0x90>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80021f2:	4b1c      	ldr	r3, [pc, #112]	; (8002264 <MX_USART3_UART_Init+0x90>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80021f8:	4b1a      	ldr	r3, [pc, #104]	; (8002264 <MX_USART3_UART_Init+0x90>)
 80021fa:	220c      	movs	r2, #12
 80021fc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021fe:	4b19      	ldr	r3, [pc, #100]	; (8002264 <MX_USART3_UART_Init+0x90>)
 8002200:	2200      	movs	r2, #0
 8002202:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002204:	4b17      	ldr	r3, [pc, #92]	; (8002264 <MX_USART3_UART_Init+0x90>)
 8002206:	2200      	movs	r2, #0
 8002208:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800220a:	4b16      	ldr	r3, [pc, #88]	; (8002264 <MX_USART3_UART_Init+0x90>)
 800220c:	2200      	movs	r2, #0
 800220e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002210:	4b14      	ldr	r3, [pc, #80]	; (8002264 <MX_USART3_UART_Init+0x90>)
 8002212:	2200      	movs	r2, #0
 8002214:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002216:	4b13      	ldr	r3, [pc, #76]	; (8002264 <MX_USART3_UART_Init+0x90>)
 8002218:	2200      	movs	r2, #0
 800221a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800221c:	4811      	ldr	r0, [pc, #68]	; (8002264 <MX_USART3_UART_Init+0x90>)
 800221e:	f008 ff7d 	bl	800b11c <HAL_UART_Init>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002228:	f000 fd3e 	bl	8002ca8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800222c:	2100      	movs	r1, #0
 800222e:	480d      	ldr	r0, [pc, #52]	; (8002264 <MX_USART3_UART_Init+0x90>)
 8002230:	f009 fd46 	bl	800bcc0 <HAL_UARTEx_SetTxFifoThreshold>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800223a:	f000 fd35 	bl	8002ca8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800223e:	2100      	movs	r1, #0
 8002240:	4808      	ldr	r0, [pc, #32]	; (8002264 <MX_USART3_UART_Init+0x90>)
 8002242:	f009 fd7b 	bl	800bd3c <HAL_UARTEx_SetRxFifoThreshold>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800224c:	f000 fd2c 	bl	8002ca8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002250:	4804      	ldr	r0, [pc, #16]	; (8002264 <MX_USART3_UART_Init+0x90>)
 8002252:	f009 fcfc 	bl	800bc4e <HAL_UARTEx_DisableFifoMode>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d001      	beq.n	8002260 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800225c:	f000 fd24 	bl	8002ca8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002260:	bf00      	nop
 8002262:	bd80      	pop	{r7, pc}
 8002264:	2000049c 	.word	0x2000049c
 8002268:	40004800 	.word	0x40004800

0800226c <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8002270:	4b2f      	ldr	r3, [pc, #188]	; (8002330 <MX_SAI2_Init+0xc4>)
 8002272:	4a30      	ldr	r2, [pc, #192]	; (8002334 <MX_SAI2_Init+0xc8>)
 8002274:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8002276:	4b2e      	ldr	r3, [pc, #184]	; (8002330 <MX_SAI2_Init+0xc4>)
 8002278:	2200      	movs	r2, #0
 800227a:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 800227c:	4b2c      	ldr	r3, [pc, #176]	; (8002330 <MX_SAI2_Init+0xc4>)
 800227e:	2200      	movs	r2, #0
 8002280:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8002282:	4b2b      	ldr	r3, [pc, #172]	; (8002330 <MX_SAI2_Init+0xc4>)
 8002284:	2240      	movs	r2, #64	; 0x40
 8002286:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8002288:	4b29      	ldr	r3, [pc, #164]	; (8002330 <MX_SAI2_Init+0xc4>)
 800228a:	2200      	movs	r2, #0
 800228c:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800228e:	4b28      	ldr	r3, [pc, #160]	; (8002330 <MX_SAI2_Init+0xc4>)
 8002290:	2200      	movs	r2, #0
 8002292:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8002294:	4b26      	ldr	r3, [pc, #152]	; (8002330 <MX_SAI2_Init+0xc4>)
 8002296:	2200      	movs	r2, #0
 8002298:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800229a:	4b25      	ldr	r3, [pc, #148]	; (8002330 <MX_SAI2_Init+0xc4>)
 800229c:	2200      	movs	r2, #0
 800229e:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80022a0:	4b23      	ldr	r3, [pc, #140]	; (8002330 <MX_SAI2_Init+0xc4>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 80022a6:	4b22      	ldr	r3, [pc, #136]	; (8002330 <MX_SAI2_Init+0xc4>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80022ac:	4b20      	ldr	r3, [pc, #128]	; (8002330 <MX_SAI2_Init+0xc4>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 80022b2:	4b1f      	ldr	r3, [pc, #124]	; (8002330 <MX_SAI2_Init+0xc4>)
 80022b4:	4a20      	ldr	r2, [pc, #128]	; (8002338 <MX_SAI2_Init+0xcc>)
 80022b6:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80022b8:	4b1d      	ldr	r3, [pc, #116]	; (8002330 <MX_SAI2_Init+0xc4>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 80022be:	4b1c      	ldr	r3, [pc, #112]	; (8002330 <MX_SAI2_Init+0xc4>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 80022c4:	4b1a      	ldr	r3, [pc, #104]	; (8002330 <MX_SAI2_Init+0xc4>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80022ca:	4b19      	ldr	r3, [pc, #100]	; (8002330 <MX_SAI2_Init+0xc4>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.PdmInit.Activation = DISABLE;
 80022d0:	4b17      	ldr	r3, [pc, #92]	; (8002330 <MX_SAI2_Init+0xc4>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.PdmInit.MicPairsNbr = 0;
 80022d8:	4b15      	ldr	r3, [pc, #84]	; (8002330 <MX_SAI2_Init+0xc4>)
 80022da:	2200      	movs	r2, #0
 80022dc:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 80022de:	4b14      	ldr	r3, [pc, #80]	; (8002330 <MX_SAI2_Init+0xc4>)
 80022e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022e4:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 80022e6:	4b12      	ldr	r3, [pc, #72]	; (8002330 <MX_SAI2_Init+0xc4>)
 80022e8:	2208      	movs	r2, #8
 80022ea:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 80022ec:	4b10      	ldr	r3, [pc, #64]	; (8002330 <MX_SAI2_Init+0xc4>)
 80022ee:	2201      	movs	r2, #1
 80022f0:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80022f2:	4b0f      	ldr	r3, [pc, #60]	; (8002330 <MX_SAI2_Init+0xc4>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80022f8:	4b0d      	ldr	r3, [pc, #52]	; (8002330 <MX_SAI2_Init+0xc4>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80022fe:	4b0c      	ldr	r3, [pc, #48]	; (8002330 <MX_SAI2_Init+0xc4>)
 8002300:	2200      	movs	r2, #0
 8002302:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8002304:	4b0a      	ldr	r3, [pc, #40]	; (8002330 <MX_SAI2_Init+0xc4>)
 8002306:	2200      	movs	r2, #0
 8002308:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800230a:	4b09      	ldr	r3, [pc, #36]	; (8002330 <MX_SAI2_Init+0xc4>)
 800230c:	2200      	movs	r2, #0
 800230e:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8002310:	4b07      	ldr	r3, [pc, #28]	; (8002330 <MX_SAI2_Init+0xc4>)
 8002312:	2201      	movs	r2, #1
 8002314:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8002316:	4b06      	ldr	r3, [pc, #24]	; (8002330 <MX_SAI2_Init+0xc4>)
 8002318:	2200      	movs	r2, #0
 800231a:	671a      	str	r2, [r3, #112]	; 0x70
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 800231c:	4804      	ldr	r0, [pc, #16]	; (8002330 <MX_SAI2_Init+0xc4>)
 800231e:	f005 fe85 	bl	800802c <HAL_SAI_Init>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d001      	beq.n	800232c <MX_SAI2_Init+0xc0>
  {
    Error_Handler();
 8002328:	f000 fcbe 	bl	8002ca8 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 800232c:	bf00      	nop
 800232e:	bd80      	pop	{r7, pc}
 8002330:	2000052c 	.word	0x2000052c
 8002334:	40015804 	.word	0x40015804
 8002338:	0002ee00 	.word	0x0002ee00

0800233c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002340:	4b1b      	ldr	r3, [pc, #108]	; (80023b0 <MX_SPI1_Init+0x74>)
 8002342:	4a1c      	ldr	r2, [pc, #112]	; (80023b4 <MX_SPI1_Init+0x78>)
 8002344:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002346:	4b1a      	ldr	r3, [pc, #104]	; (80023b0 <MX_SPI1_Init+0x74>)
 8002348:	f44f 7282 	mov.w	r2, #260	; 0x104
 800234c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800234e:	4b18      	ldr	r3, [pc, #96]	; (80023b0 <MX_SPI1_Init+0x74>)
 8002350:	2200      	movs	r2, #0
 8002352:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002354:	4b16      	ldr	r3, [pc, #88]	; (80023b0 <MX_SPI1_Init+0x74>)
 8002356:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800235a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800235c:	4b14      	ldr	r3, [pc, #80]	; (80023b0 <MX_SPI1_Init+0x74>)
 800235e:	2200      	movs	r2, #0
 8002360:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002362:	4b13      	ldr	r3, [pc, #76]	; (80023b0 <MX_SPI1_Init+0x74>)
 8002364:	2200      	movs	r2, #0
 8002366:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002368:	4b11      	ldr	r3, [pc, #68]	; (80023b0 <MX_SPI1_Init+0x74>)
 800236a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800236e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002370:	4b0f      	ldr	r3, [pc, #60]	; (80023b0 <MX_SPI1_Init+0x74>)
 8002372:	2218      	movs	r2, #24
 8002374:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002376:	4b0e      	ldr	r3, [pc, #56]	; (80023b0 <MX_SPI1_Init+0x74>)
 8002378:	2200      	movs	r2, #0
 800237a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800237c:	4b0c      	ldr	r3, [pc, #48]	; (80023b0 <MX_SPI1_Init+0x74>)
 800237e:	2200      	movs	r2, #0
 8002380:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002382:	4b0b      	ldr	r3, [pc, #44]	; (80023b0 <MX_SPI1_Init+0x74>)
 8002384:	2200      	movs	r2, #0
 8002386:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002388:	4b09      	ldr	r3, [pc, #36]	; (80023b0 <MX_SPI1_Init+0x74>)
 800238a:	2207      	movs	r2, #7
 800238c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800238e:	4b08      	ldr	r3, [pc, #32]	; (80023b0 <MX_SPI1_Init+0x74>)
 8002390:	2200      	movs	r2, #0
 8002392:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002394:	4b06      	ldr	r3, [pc, #24]	; (80023b0 <MX_SPI1_Init+0x74>)
 8002396:	2200      	movs	r2, #0
 8002398:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800239a:	4805      	ldr	r0, [pc, #20]	; (80023b0 <MX_SPI1_Init+0x74>)
 800239c:	f006 f969 	bl	8008672 <HAL_SPI_Init>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d001      	beq.n	80023aa <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80023a6:	f000 fc7f 	bl	8002ca8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80023aa:	bf00      	nop
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	200005c0 	.word	0x200005c0
 80023b4:	40013000 	.word	0x40013000

080023b8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80023bc:	4b1b      	ldr	r3, [pc, #108]	; (800242c <MX_SPI3_Init+0x74>)
 80023be:	4a1c      	ldr	r2, [pc, #112]	; (8002430 <MX_SPI3_Init+0x78>)
 80023c0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80023c2:	4b1a      	ldr	r3, [pc, #104]	; (800242c <MX_SPI3_Init+0x74>)
 80023c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80023c8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80023ca:	4b18      	ldr	r3, [pc, #96]	; (800242c <MX_SPI3_Init+0x74>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80023d0:	4b16      	ldr	r3, [pc, #88]	; (800242c <MX_SPI3_Init+0x74>)
 80023d2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80023d6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80023d8:	4b14      	ldr	r3, [pc, #80]	; (800242c <MX_SPI3_Init+0x74>)
 80023da:	2200      	movs	r2, #0
 80023dc:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80023de:	4b13      	ldr	r3, [pc, #76]	; (800242c <MX_SPI3_Init+0x74>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80023e4:	4b11      	ldr	r3, [pc, #68]	; (800242c <MX_SPI3_Init+0x74>)
 80023e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023ea:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80023ec:	4b0f      	ldr	r3, [pc, #60]	; (800242c <MX_SPI3_Init+0x74>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80023f2:	4b0e      	ldr	r3, [pc, #56]	; (800242c <MX_SPI3_Init+0x74>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80023f8:	4b0c      	ldr	r3, [pc, #48]	; (800242c <MX_SPI3_Init+0x74>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023fe:	4b0b      	ldr	r3, [pc, #44]	; (800242c <MX_SPI3_Init+0x74>)
 8002400:	2200      	movs	r2, #0
 8002402:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8002404:	4b09      	ldr	r3, [pc, #36]	; (800242c <MX_SPI3_Init+0x74>)
 8002406:	2207      	movs	r2, #7
 8002408:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800240a:	4b08      	ldr	r3, [pc, #32]	; (800242c <MX_SPI3_Init+0x74>)
 800240c:	2200      	movs	r2, #0
 800240e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002410:	4b06      	ldr	r3, [pc, #24]	; (800242c <MX_SPI3_Init+0x74>)
 8002412:	2208      	movs	r2, #8
 8002414:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002416:	4805      	ldr	r0, [pc, #20]	; (800242c <MX_SPI3_Init+0x74>)
 8002418:	f006 f92b 	bl	8008672 <HAL_SPI_Init>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8002422:	f000 fc41 	bl	8002ca8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002426:	bf00      	nop
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	20000624 	.word	0x20000624
 8002430:	40003c00 	.word	0x40003c00

08002434 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b08c      	sub	sp, #48	; 0x30
 8002438:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800243a:	f107 0320 	add.w	r3, r7, #32
 800243e:	2200      	movs	r2, #0
 8002440:	601a      	str	r2, [r3, #0]
 8002442:	605a      	str	r2, [r3, #4]
 8002444:	609a      	str	r2, [r3, #8]
 8002446:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002448:	f107 0314 	add.w	r3, r7, #20
 800244c:	2200      	movs	r2, #0
 800244e:	601a      	str	r2, [r3, #0]
 8002450:	605a      	str	r2, [r3, #4]
 8002452:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002454:	1d3b      	adds	r3, r7, #4
 8002456:	2200      	movs	r2, #0
 8002458:	601a      	str	r2, [r3, #0]
 800245a:	605a      	str	r2, [r3, #4]
 800245c:	609a      	str	r2, [r3, #8]
 800245e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002460:	4b2d      	ldr	r3, [pc, #180]	; (8002518 <MX_TIM1_Init+0xe4>)
 8002462:	4a2e      	ldr	r2, [pc, #184]	; (800251c <MX_TIM1_Init+0xe8>)
 8002464:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 31;
 8002466:	4b2c      	ldr	r3, [pc, #176]	; (8002518 <MX_TIM1_Init+0xe4>)
 8002468:	221f      	movs	r2, #31
 800246a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800246c:	4b2a      	ldr	r3, [pc, #168]	; (8002518 <MX_TIM1_Init+0xe4>)
 800246e:	2200      	movs	r2, #0
 8002470:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002472:	4b29      	ldr	r3, [pc, #164]	; (8002518 <MX_TIM1_Init+0xe4>)
 8002474:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002478:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800247a:	4b27      	ldr	r3, [pc, #156]	; (8002518 <MX_TIM1_Init+0xe4>)
 800247c:	2200      	movs	r2, #0
 800247e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002480:	4b25      	ldr	r3, [pc, #148]	; (8002518 <MX_TIM1_Init+0xe4>)
 8002482:	2200      	movs	r2, #0
 8002484:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002486:	4b24      	ldr	r3, [pc, #144]	; (8002518 <MX_TIM1_Init+0xe4>)
 8002488:	2200      	movs	r2, #0
 800248a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800248c:	4822      	ldr	r0, [pc, #136]	; (8002518 <MX_TIM1_Init+0xe4>)
 800248e:	f007 f801 	bl	8009494 <HAL_TIM_Base_Init>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d001      	beq.n	800249c <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8002498:	f000 fc06 	bl	8002ca8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800249c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024a0:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80024a2:	f107 0320 	add.w	r3, r7, #32
 80024a6:	4619      	mov	r1, r3
 80024a8:	481b      	ldr	r0, [pc, #108]	; (8002518 <MX_TIM1_Init+0xe4>)
 80024aa:	f007 fec3 	bl	800a234 <HAL_TIM_ConfigClockSource>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d001      	beq.n	80024b8 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 80024b4:	f000 fbf8 	bl	8002ca8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80024b8:	4817      	ldr	r0, [pc, #92]	; (8002518 <MX_TIM1_Init+0xe4>)
 80024ba:	f007 fa3f 	bl	800993c <HAL_TIM_IC_Init>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d001      	beq.n	80024c8 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80024c4:	f000 fbf0 	bl	8002ca8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024c8:	2300      	movs	r3, #0
 80024ca:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80024cc:	2300      	movs	r3, #0
 80024ce:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024d0:	2300      	movs	r3, #0
 80024d2:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80024d4:	f107 0314 	add.w	r3, r7, #20
 80024d8:	4619      	mov	r1, r3
 80024da:	480f      	ldr	r0, [pc, #60]	; (8002518 <MX_TIM1_Init+0xe4>)
 80024dc:	f008 fcfa 	bl	800aed4 <HAL_TIMEx_MasterConfigSynchronization>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 80024e6:	f000 fbdf 	bl	8002ca8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80024ea:	2300      	movs	r3, #0
 80024ec:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80024ee:	2301      	movs	r3, #1
 80024f0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80024f2:	2300      	movs	r3, #0
 80024f4:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80024f6:	2300      	movs	r3, #0
 80024f8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80024fa:	1d3b      	adds	r3, r7, #4
 80024fc:	2200      	movs	r2, #0
 80024fe:	4619      	mov	r1, r3
 8002500:	4805      	ldr	r0, [pc, #20]	; (8002518 <MX_TIM1_Init+0xe4>)
 8002502:	f007 fce6 	bl	8009ed2 <HAL_TIM_IC_ConfigChannel>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d001      	beq.n	8002510 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 800250c:	f000 fbcc 	bl	8002ca8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002510:	bf00      	nop
 8002512:	3730      	adds	r7, #48	; 0x30
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	20000688 	.word	0x20000688
 800251c:	40012c00 	.word	0x40012c00

08002520 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b08e      	sub	sp, #56	; 0x38
 8002524:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002526:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800252a:	2200      	movs	r2, #0
 800252c:	601a      	str	r2, [r3, #0]
 800252e:	605a      	str	r2, [r3, #4]
 8002530:	609a      	str	r2, [r3, #8]
 8002532:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002534:	f107 031c 	add.w	r3, r7, #28
 8002538:	2200      	movs	r2, #0
 800253a:	601a      	str	r2, [r3, #0]
 800253c:	605a      	str	r2, [r3, #4]
 800253e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002540:	463b      	mov	r3, r7
 8002542:	2200      	movs	r2, #0
 8002544:	601a      	str	r2, [r3, #0]
 8002546:	605a      	str	r2, [r3, #4]
 8002548:	609a      	str	r2, [r3, #8]
 800254a:	60da      	str	r2, [r3, #12]
 800254c:	611a      	str	r2, [r3, #16]
 800254e:	615a      	str	r2, [r3, #20]
 8002550:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002552:	4b2e      	ldr	r3, [pc, #184]	; (800260c <MX_TIM2_Init+0xec>)
 8002554:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002558:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 319;
 800255a:	4b2c      	ldr	r3, [pc, #176]	; (800260c <MX_TIM2_Init+0xec>)
 800255c:	f240 123f 	movw	r2, #319	; 0x13f
 8002560:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002562:	4b2a      	ldr	r3, [pc, #168]	; (800260c <MX_TIM2_Init+0xec>)
 8002564:	2200      	movs	r2, #0
 8002566:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4000;
 8002568:	4b28      	ldr	r3, [pc, #160]	; (800260c <MX_TIM2_Init+0xec>)
 800256a:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800256e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002570:	4b26      	ldr	r3, [pc, #152]	; (800260c <MX_TIM2_Init+0xec>)
 8002572:	2200      	movs	r2, #0
 8002574:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002576:	4b25      	ldr	r3, [pc, #148]	; (800260c <MX_TIM2_Init+0xec>)
 8002578:	2200      	movs	r2, #0
 800257a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800257c:	4823      	ldr	r0, [pc, #140]	; (800260c <MX_TIM2_Init+0xec>)
 800257e:	f006 ff89 	bl	8009494 <HAL_TIM_Base_Init>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d001      	beq.n	800258c <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8002588:	f000 fb8e 	bl	8002ca8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800258c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002590:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002592:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002596:	4619      	mov	r1, r3
 8002598:	481c      	ldr	r0, [pc, #112]	; (800260c <MX_TIM2_Init+0xec>)
 800259a:	f007 fe4b 	bl	800a234 <HAL_TIM_ConfigClockSource>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d001      	beq.n	80025a8 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 80025a4:	f000 fb80 	bl	8002ca8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80025a8:	4818      	ldr	r0, [pc, #96]	; (800260c <MX_TIM2_Init+0xec>)
 80025aa:	f007 f86a 	bl	8009682 <HAL_TIM_PWM_Init>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d001      	beq.n	80025b8 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80025b4:	f000 fb78 	bl	8002ca8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025b8:	2300      	movs	r3, #0
 80025ba:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025bc:	2300      	movs	r3, #0
 80025be:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80025c0:	f107 031c 	add.w	r3, r7, #28
 80025c4:	4619      	mov	r1, r3
 80025c6:	4811      	ldr	r0, [pc, #68]	; (800260c <MX_TIM2_Init+0xec>)
 80025c8:	f008 fc84 	bl	800aed4 <HAL_TIMEx_MasterConfigSynchronization>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80025d2:	f000 fb69 	bl	8002ca8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025d6:	2360      	movs	r3, #96	; 0x60
 80025d8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1;
 80025da:	2301      	movs	r3, #1
 80025dc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025de:	2300      	movs	r3, #0
 80025e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025e2:	2300      	movs	r3, #0
 80025e4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80025e6:	463b      	mov	r3, r7
 80025e8:	2200      	movs	r2, #0
 80025ea:	4619      	mov	r1, r3
 80025ec:	4807      	ldr	r0, [pc, #28]	; (800260c <MX_TIM2_Init+0xec>)
 80025ee:	f007 fd0d 	bl	800a00c <HAL_TIM_PWM_ConfigChannel>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d001      	beq.n	80025fc <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 80025f8:	f000 fb56 	bl	8002ca8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80025fc:	4803      	ldr	r0, [pc, #12]	; (800260c <MX_TIM2_Init+0xec>)
 80025fe:	f001 f8dd 	bl	80037bc <HAL_TIM_MspPostInit>

}
 8002602:	bf00      	nop
 8002604:	3738      	adds	r7, #56	; 0x38
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	200006d4 	.word	0x200006d4

08002610 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b08c      	sub	sp, #48	; 0x30
 8002614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002616:	f107 0320 	add.w	r3, r7, #32
 800261a:	2200      	movs	r2, #0
 800261c:	601a      	str	r2, [r3, #0]
 800261e:	605a      	str	r2, [r3, #4]
 8002620:	609a      	str	r2, [r3, #8]
 8002622:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002624:	f107 0314 	add.w	r3, r7, #20
 8002628:	2200      	movs	r2, #0
 800262a:	601a      	str	r2, [r3, #0]
 800262c:	605a      	str	r2, [r3, #4]
 800262e:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002630:	1d3b      	adds	r3, r7, #4
 8002632:	2200      	movs	r2, #0
 8002634:	601a      	str	r2, [r3, #0]
 8002636:	605a      	str	r2, [r3, #4]
 8002638:	609a      	str	r2, [r3, #8]
 800263a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800263c:	4b2b      	ldr	r3, [pc, #172]	; (80026ec <MX_TIM3_Init+0xdc>)
 800263e:	4a2c      	ldr	r2, [pc, #176]	; (80026f0 <MX_TIM3_Init+0xe0>)
 8002640:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 31999;
 8002642:	4b2a      	ldr	r3, [pc, #168]	; (80026ec <MX_TIM3_Init+0xdc>)
 8002644:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8002648:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800264a:	4b28      	ldr	r3, [pc, #160]	; (80026ec <MX_TIM3_Init+0xdc>)
 800264c:	2200      	movs	r2, #0
 800264e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 32000;
 8002650:	4b26      	ldr	r3, [pc, #152]	; (80026ec <MX_TIM3_Init+0xdc>)
 8002652:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8002656:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002658:	4b24      	ldr	r3, [pc, #144]	; (80026ec <MX_TIM3_Init+0xdc>)
 800265a:	2200      	movs	r2, #0
 800265c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800265e:	4b23      	ldr	r3, [pc, #140]	; (80026ec <MX_TIM3_Init+0xdc>)
 8002660:	2200      	movs	r2, #0
 8002662:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002664:	4821      	ldr	r0, [pc, #132]	; (80026ec <MX_TIM3_Init+0xdc>)
 8002666:	f006 ff15 	bl	8009494 <HAL_TIM_Base_Init>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d001      	beq.n	8002674 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8002670:	f000 fb1a 	bl	8002ca8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002674:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002678:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800267a:	f107 0320 	add.w	r3, r7, #32
 800267e:	4619      	mov	r1, r3
 8002680:	481a      	ldr	r0, [pc, #104]	; (80026ec <MX_TIM3_Init+0xdc>)
 8002682:	f007 fdd7 	bl	800a234 <HAL_TIM_ConfigClockSource>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d001      	beq.n	8002690 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 800268c:	f000 fb0c 	bl	8002ca8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8002690:	4816      	ldr	r0, [pc, #88]	; (80026ec <MX_TIM3_Init+0xdc>)
 8002692:	f007 f953 	bl	800993c <HAL_TIM_IC_Init>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d001      	beq.n	80026a0 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 800269c:	f000 fb04 	bl	8002ca8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026a0:	2300      	movs	r3, #0
 80026a2:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026a4:	2300      	movs	r3, #0
 80026a6:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80026a8:	f107 0314 	add.w	r3, r7, #20
 80026ac:	4619      	mov	r1, r3
 80026ae:	480f      	ldr	r0, [pc, #60]	; (80026ec <MX_TIM3_Init+0xdc>)
 80026b0:	f008 fc10 	bl	800aed4 <HAL_TIMEx_MasterConfigSynchronization>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 80026ba:	f000 faf5 	bl	8002ca8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80026be:	2302      	movs	r3, #2
 80026c0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80026c2:	2301      	movs	r3, #1
 80026c4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80026c6:	2300      	movs	r3, #0
 80026c8:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80026ca:	2300      	movs	r3, #0
 80026cc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80026ce:	1d3b      	adds	r3, r7, #4
 80026d0:	2204      	movs	r2, #4
 80026d2:	4619      	mov	r1, r3
 80026d4:	4805      	ldr	r0, [pc, #20]	; (80026ec <MX_TIM3_Init+0xdc>)
 80026d6:	f007 fbfc 	bl	8009ed2 <HAL_TIM_IC_ConfigChannel>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d001      	beq.n	80026e4 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 80026e0:	f000 fae2 	bl	8002ca8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80026e4:	bf00      	nop
 80026e6:	3730      	adds	r7, #48	; 0x30
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	20000720 	.word	0x20000720
 80026f0:	40000400 	.word	0x40000400

080026f4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b08e      	sub	sp, #56	; 0x38
 80026f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80026fe:	2200      	movs	r2, #0
 8002700:	601a      	str	r2, [r3, #0]
 8002702:	605a      	str	r2, [r3, #4]
 8002704:	609a      	str	r2, [r3, #8]
 8002706:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002708:	f107 031c 	add.w	r3, r7, #28
 800270c:	2200      	movs	r2, #0
 800270e:	601a      	str	r2, [r3, #0]
 8002710:	605a      	str	r2, [r3, #4]
 8002712:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002714:	463b      	mov	r3, r7
 8002716:	2200      	movs	r2, #0
 8002718:	601a      	str	r2, [r3, #0]
 800271a:	605a      	str	r2, [r3, #4]
 800271c:	609a      	str	r2, [r3, #8]
 800271e:	60da      	str	r2, [r3, #12]
 8002720:	611a      	str	r2, [r3, #16]
 8002722:	615a      	str	r2, [r3, #20]
 8002724:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002726:	4b38      	ldr	r3, [pc, #224]	; (8002808 <MX_TIM4_Init+0x114>)
 8002728:	4a38      	ldr	r2, [pc, #224]	; (800280c <MX_TIM4_Init+0x118>)
 800272a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 6399;
 800272c:	4b36      	ldr	r3, [pc, #216]	; (8002808 <MX_TIM4_Init+0x114>)
 800272e:	f641 02ff 	movw	r2, #6399	; 0x18ff
 8002732:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002734:	4b34      	ldr	r3, [pc, #208]	; (8002808 <MX_TIM4_Init+0x114>)
 8002736:	2200      	movs	r2, #0
 8002738:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 800273a:	4b33      	ldr	r3, [pc, #204]	; (8002808 <MX_TIM4_Init+0x114>)
 800273c:	2264      	movs	r2, #100	; 0x64
 800273e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002740:	4b31      	ldr	r3, [pc, #196]	; (8002808 <MX_TIM4_Init+0x114>)
 8002742:	2200      	movs	r2, #0
 8002744:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002746:	4b30      	ldr	r3, [pc, #192]	; (8002808 <MX_TIM4_Init+0x114>)
 8002748:	2200      	movs	r2, #0
 800274a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800274c:	482e      	ldr	r0, [pc, #184]	; (8002808 <MX_TIM4_Init+0x114>)
 800274e:	f006 fea1 	bl	8009494 <HAL_TIM_Base_Init>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d001      	beq.n	800275c <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8002758:	f000 faa6 	bl	8002ca8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800275c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002760:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002762:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002766:	4619      	mov	r1, r3
 8002768:	4827      	ldr	r0, [pc, #156]	; (8002808 <MX_TIM4_Init+0x114>)
 800276a:	f007 fd63 	bl	800a234 <HAL_TIM_ConfigClockSource>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d001      	beq.n	8002778 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8002774:	f000 fa98 	bl	8002ca8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002778:	4823      	ldr	r0, [pc, #140]	; (8002808 <MX_TIM4_Init+0x114>)
 800277a:	f006 ff82 	bl	8009682 <HAL_TIM_PWM_Init>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d001      	beq.n	8002788 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8002784:	f000 fa90 	bl	8002ca8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002788:	2300      	movs	r3, #0
 800278a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800278c:	2300      	movs	r3, #0
 800278e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002790:	f107 031c 	add.w	r3, r7, #28
 8002794:	4619      	mov	r1, r3
 8002796:	481c      	ldr	r0, [pc, #112]	; (8002808 <MX_TIM4_Init+0x114>)
 8002798:	f008 fb9c 	bl	800aed4 <HAL_TIMEx_MasterConfigSynchronization>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d001      	beq.n	80027a6 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80027a2:	f000 fa81 	bl	8002ca8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027a6:	2360      	movs	r3, #96	; 0x60
 80027a8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80027aa:	2300      	movs	r3, #0
 80027ac:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027ae:	2300      	movs	r3, #0
 80027b0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027b2:	2300      	movs	r3, #0
 80027b4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80027b6:	463b      	mov	r3, r7
 80027b8:	2200      	movs	r2, #0
 80027ba:	4619      	mov	r1, r3
 80027bc:	4812      	ldr	r0, [pc, #72]	; (8002808 <MX_TIM4_Init+0x114>)
 80027be:	f007 fc25 	bl	800a00c <HAL_TIM_PWM_ConfigChannel>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d001      	beq.n	80027cc <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80027c8:	f000 fa6e 	bl	8002ca8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80027cc:	463b      	mov	r3, r7
 80027ce:	2208      	movs	r2, #8
 80027d0:	4619      	mov	r1, r3
 80027d2:	480d      	ldr	r0, [pc, #52]	; (8002808 <MX_TIM4_Init+0x114>)
 80027d4:	f007 fc1a 	bl	800a00c <HAL_TIM_PWM_ConfigChannel>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d001      	beq.n	80027e2 <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 80027de:	f000 fa63 	bl	8002ca8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80027e2:	463b      	mov	r3, r7
 80027e4:	220c      	movs	r2, #12
 80027e6:	4619      	mov	r1, r3
 80027e8:	4807      	ldr	r0, [pc, #28]	; (8002808 <MX_TIM4_Init+0x114>)
 80027ea:	f007 fc0f 	bl	800a00c <HAL_TIM_PWM_ConfigChannel>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 80027f4:	f000 fa58 	bl	8002ca8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80027f8:	4803      	ldr	r0, [pc, #12]	; (8002808 <MX_TIM4_Init+0x114>)
 80027fa:	f000 ffdf 	bl	80037bc <HAL_TIM_MspPostInit>

}
 80027fe:	bf00      	nop
 8002800:	3738      	adds	r7, #56	; 0x38
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	2000076c 	.word	0x2000076c
 800280c:	40000800 	.word	0x40000800

08002810 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b088      	sub	sp, #32
 8002814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002816:	f107 0310 	add.w	r3, r7, #16
 800281a:	2200      	movs	r2, #0
 800281c:	601a      	str	r2, [r3, #0]
 800281e:	605a      	str	r2, [r3, #4]
 8002820:	609a      	str	r2, [r3, #8]
 8002822:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002824:	1d3b      	adds	r3, r7, #4
 8002826:	2200      	movs	r2, #0
 8002828:	601a      	str	r2, [r3, #0]
 800282a:	605a      	str	r2, [r3, #4]
 800282c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800282e:	4b1e      	ldr	r3, [pc, #120]	; (80028a8 <MX_TIM5_Init+0x98>)
 8002830:	4a1e      	ldr	r2, [pc, #120]	; (80028ac <MX_TIM5_Init+0x9c>)
 8002832:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 31999;
 8002834:	4b1c      	ldr	r3, [pc, #112]	; (80028a8 <MX_TIM5_Init+0x98>)
 8002836:	f647 42ff 	movw	r2, #31999	; 0x7cff
 800283a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800283c:	4b1a      	ldr	r3, [pc, #104]	; (80028a8 <MX_TIM5_Init+0x98>)
 800283e:	2200      	movs	r2, #0
 8002840:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 5000;
 8002842:	4b19      	ldr	r3, [pc, #100]	; (80028a8 <MX_TIM5_Init+0x98>)
 8002844:	f241 3288 	movw	r2, #5000	; 0x1388
 8002848:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800284a:	4b17      	ldr	r3, [pc, #92]	; (80028a8 <MX_TIM5_Init+0x98>)
 800284c:	2200      	movs	r2, #0
 800284e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002850:	4b15      	ldr	r3, [pc, #84]	; (80028a8 <MX_TIM5_Init+0x98>)
 8002852:	2200      	movs	r2, #0
 8002854:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002856:	4814      	ldr	r0, [pc, #80]	; (80028a8 <MX_TIM5_Init+0x98>)
 8002858:	f006 fe1c 	bl	8009494 <HAL_TIM_Base_Init>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d001      	beq.n	8002866 <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 8002862:	f000 fa21 	bl	8002ca8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002866:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800286a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800286c:	f107 0310 	add.w	r3, r7, #16
 8002870:	4619      	mov	r1, r3
 8002872:	480d      	ldr	r0, [pc, #52]	; (80028a8 <MX_TIM5_Init+0x98>)
 8002874:	f007 fcde 	bl	800a234 <HAL_TIM_ConfigClockSource>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 800287e:	f000 fa13 	bl	8002ca8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002882:	2300      	movs	r3, #0
 8002884:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002886:	2300      	movs	r3, #0
 8002888:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800288a:	1d3b      	adds	r3, r7, #4
 800288c:	4619      	mov	r1, r3
 800288e:	4806      	ldr	r0, [pc, #24]	; (80028a8 <MX_TIM5_Init+0x98>)
 8002890:	f008 fb20 	bl	800aed4 <HAL_TIMEx_MasterConfigSynchronization>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d001      	beq.n	800289e <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 800289a:	f000 fa05 	bl	8002ca8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800289e:	bf00      	nop
 80028a0:	3720      	adds	r7, #32
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	200007b8 	.word	0x200007b8
 80028ac:	40000c00 	.word	0x40000c00

080028b0 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b096      	sub	sp, #88	; 0x58
 80028b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028b6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80028ba:	2200      	movs	r2, #0
 80028bc:	601a      	str	r2, [r3, #0]
 80028be:	605a      	str	r2, [r3, #4]
 80028c0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80028c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80028c6:	2200      	movs	r2, #0
 80028c8:	601a      	str	r2, [r3, #0]
 80028ca:	605a      	str	r2, [r3, #4]
 80028cc:	609a      	str	r2, [r3, #8]
 80028ce:	60da      	str	r2, [r3, #12]
 80028d0:	611a      	str	r2, [r3, #16]
 80028d2:	615a      	str	r2, [r3, #20]
 80028d4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80028d6:	1d3b      	adds	r3, r7, #4
 80028d8:	222c      	movs	r2, #44	; 0x2c
 80028da:	2100      	movs	r1, #0
 80028dc:	4618      	mov	r0, r3
 80028de:	f009 faeb 	bl	800beb8 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80028e2:	4b33      	ldr	r3, [pc, #204]	; (80029b0 <MX_TIM15_Init+0x100>)
 80028e4:	4a33      	ldr	r2, [pc, #204]	; (80029b4 <MX_TIM15_Init+0x104>)
 80028e6:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 80028e8:	4b31      	ldr	r3, [pc, #196]	; (80029b0 <MX_TIM15_Init+0x100>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028ee:	4b30      	ldr	r3, [pc, #192]	; (80029b0 <MX_TIM15_Init+0x100>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 80028f4:	4b2e      	ldr	r3, [pc, #184]	; (80029b0 <MX_TIM15_Init+0x100>)
 80028f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028fa:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028fc:	4b2c      	ldr	r3, [pc, #176]	; (80029b0 <MX_TIM15_Init+0x100>)
 80028fe:	2200      	movs	r2, #0
 8002900:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8002902:	4b2b      	ldr	r3, [pc, #172]	; (80029b0 <MX_TIM15_Init+0x100>)
 8002904:	2200      	movs	r2, #0
 8002906:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002908:	4b29      	ldr	r3, [pc, #164]	; (80029b0 <MX_TIM15_Init+0x100>)
 800290a:	2200      	movs	r2, #0
 800290c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800290e:	4828      	ldr	r0, [pc, #160]	; (80029b0 <MX_TIM15_Init+0x100>)
 8002910:	f006 feb7 	bl	8009682 <HAL_TIM_PWM_Init>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d001      	beq.n	800291e <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 800291a:	f000 f9c5 	bl	8002ca8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800291e:	2300      	movs	r3, #0
 8002920:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002922:	2300      	movs	r3, #0
 8002924:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002926:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800292a:	4619      	mov	r1, r3
 800292c:	4820      	ldr	r0, [pc, #128]	; (80029b0 <MX_TIM15_Init+0x100>)
 800292e:	f008 fad1 	bl	800aed4 <HAL_TIMEx_MasterConfigSynchronization>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d001      	beq.n	800293c <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8002938:	f000 f9b6 	bl	8002ca8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800293c:	2360      	movs	r3, #96	; 0x60
 800293e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8002940:	2300      	movs	r3, #0
 8002942:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002944:	2300      	movs	r3, #0
 8002946:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002948:	2300      	movs	r3, #0
 800294a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800294c:	2300      	movs	r3, #0
 800294e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002950:	2300      	movs	r3, #0
 8002952:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002954:	2300      	movs	r3, #0
 8002956:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002958:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800295c:	2200      	movs	r2, #0
 800295e:	4619      	mov	r1, r3
 8002960:	4813      	ldr	r0, [pc, #76]	; (80029b0 <MX_TIM15_Init+0x100>)
 8002962:	f007 fb53 	bl	800a00c <HAL_TIM_PWM_ConfigChannel>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d001      	beq.n	8002970 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 800296c:	f000 f99c 	bl	8002ca8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002970:	2300      	movs	r3, #0
 8002972:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002974:	2300      	movs	r3, #0
 8002976:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002978:	2300      	movs	r3, #0
 800297a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800297c:	2300      	movs	r3, #0
 800297e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002980:	2300      	movs	r3, #0
 8002982:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002984:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002988:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800298a:	2300      	movs	r3, #0
 800298c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800298e:	1d3b      	adds	r3, r7, #4
 8002990:	4619      	mov	r1, r3
 8002992:	4807      	ldr	r0, [pc, #28]	; (80029b0 <MX_TIM15_Init+0x100>)
 8002994:	f008 fb26 	bl	800afe4 <HAL_TIMEx_ConfigBreakDeadTime>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d001      	beq.n	80029a2 <MX_TIM15_Init+0xf2>
  {
    Error_Handler();
 800299e:	f000 f983 	bl	8002ca8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80029a2:	4803      	ldr	r0, [pc, #12]	; (80029b0 <MX_TIM15_Init+0x100>)
 80029a4:	f000 ff0a 	bl	80037bc <HAL_TIM_MspPostInit>

}
 80029a8:	bf00      	nop
 80029aa:	3758      	adds	r7, #88	; 0x58
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	20000804 	.word	0x20000804
 80029b4:	40014000 	.word	0x40014000

080029b8 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80029bc:	bf00      	nop
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
	...

080029c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b08e      	sub	sp, #56	; 0x38
 80029cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029d2:	2200      	movs	r2, #0
 80029d4:	601a      	str	r2, [r3, #0]
 80029d6:	605a      	str	r2, [r3, #4]
 80029d8:	609a      	str	r2, [r3, #8]
 80029da:	60da      	str	r2, [r3, #12]
 80029dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80029de:	4ba2      	ldr	r3, [pc, #648]	; (8002c68 <MX_GPIO_Init+0x2a0>)
 80029e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029e2:	4aa1      	ldr	r2, [pc, #644]	; (8002c68 <MX_GPIO_Init+0x2a0>)
 80029e4:	f043 0310 	orr.w	r3, r3, #16
 80029e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029ea:	4b9f      	ldr	r3, [pc, #636]	; (8002c68 <MX_GPIO_Init+0x2a0>)
 80029ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ee:	f003 0310 	and.w	r3, r3, #16
 80029f2:	623b      	str	r3, [r7, #32]
 80029f4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029f6:	4b9c      	ldr	r3, [pc, #624]	; (8002c68 <MX_GPIO_Init+0x2a0>)
 80029f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029fa:	4a9b      	ldr	r2, [pc, #620]	; (8002c68 <MX_GPIO_Init+0x2a0>)
 80029fc:	f043 0304 	orr.w	r3, r3, #4
 8002a00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a02:	4b99      	ldr	r3, [pc, #612]	; (8002c68 <MX_GPIO_Init+0x2a0>)
 8002a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a06:	f003 0304 	and.w	r3, r3, #4
 8002a0a:	61fb      	str	r3, [r7, #28]
 8002a0c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a0e:	4b96      	ldr	r3, [pc, #600]	; (8002c68 <MX_GPIO_Init+0x2a0>)
 8002a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a12:	4a95      	ldr	r2, [pc, #596]	; (8002c68 <MX_GPIO_Init+0x2a0>)
 8002a14:	f043 0320 	orr.w	r3, r3, #32
 8002a18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a1a:	4b93      	ldr	r3, [pc, #588]	; (8002c68 <MX_GPIO_Init+0x2a0>)
 8002a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a1e:	f003 0320 	and.w	r3, r3, #32
 8002a22:	61bb      	str	r3, [r7, #24]
 8002a24:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a26:	4b90      	ldr	r3, [pc, #576]	; (8002c68 <MX_GPIO_Init+0x2a0>)
 8002a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a2a:	4a8f      	ldr	r2, [pc, #572]	; (8002c68 <MX_GPIO_Init+0x2a0>)
 8002a2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a32:	4b8d      	ldr	r3, [pc, #564]	; (8002c68 <MX_GPIO_Init+0x2a0>)
 8002a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a3a:	617b      	str	r3, [r7, #20]
 8002a3c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a3e:	4b8a      	ldr	r3, [pc, #552]	; (8002c68 <MX_GPIO_Init+0x2a0>)
 8002a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a42:	4a89      	ldr	r2, [pc, #548]	; (8002c68 <MX_GPIO_Init+0x2a0>)
 8002a44:	f043 0301 	orr.w	r3, r3, #1
 8002a48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a4a:	4b87      	ldr	r3, [pc, #540]	; (8002c68 <MX_GPIO_Init+0x2a0>)
 8002a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	613b      	str	r3, [r7, #16]
 8002a54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a56:	4b84      	ldr	r3, [pc, #528]	; (8002c68 <MX_GPIO_Init+0x2a0>)
 8002a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a5a:	4a83      	ldr	r2, [pc, #524]	; (8002c68 <MX_GPIO_Init+0x2a0>)
 8002a5c:	f043 0302 	orr.w	r3, r3, #2
 8002a60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a62:	4b81      	ldr	r3, [pc, #516]	; (8002c68 <MX_GPIO_Init+0x2a0>)
 8002a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a66:	f003 0302 	and.w	r3, r3, #2
 8002a6a:	60fb      	str	r3, [r7, #12]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002a6e:	4b7e      	ldr	r3, [pc, #504]	; (8002c68 <MX_GPIO_Init+0x2a0>)
 8002a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a72:	4a7d      	ldr	r2, [pc, #500]	; (8002c68 <MX_GPIO_Init+0x2a0>)
 8002a74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a7a:	4b7b      	ldr	r3, [pc, #492]	; (8002c68 <MX_GPIO_Init+0x2a0>)
 8002a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a82:	60bb      	str	r3, [r7, #8]
 8002a84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a86:	4b78      	ldr	r3, [pc, #480]	; (8002c68 <MX_GPIO_Init+0x2a0>)
 8002a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a8a:	4a77      	ldr	r2, [pc, #476]	; (8002c68 <MX_GPIO_Init+0x2a0>)
 8002a8c:	f043 0308 	orr.w	r3, r3, #8
 8002a90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a92:	4b75      	ldr	r3, [pc, #468]	; (8002c68 <MX_GPIO_Init+0x2a0>)
 8002a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a96:	f003 0308 	and.w	r3, r3, #8
 8002a9a:	607b      	str	r3, [r7, #4]
 8002a9c:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8002a9e:	f002 fe81 	bl	80057a4 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	f44f 5146 	mov.w	r1, #12672	; 0x3180
 8002aa8:	4870      	ldr	r0, [pc, #448]	; (8002c6c <MX_GPIO_Init+0x2a4>)
 8002aaa:	f002 fd6b 	bl	8005584 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8002aae:	2200      	movs	r2, #0
 8002ab0:	2104      	movs	r1, #4
 8002ab2:	486f      	ldr	r0, [pc, #444]	; (8002c70 <MX_GPIO_Init+0x2a8>)
 8002ab4:	f002 fd66 	bl	8005584 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002ab8:	2200      	movs	r2, #0
 8002aba:	217f      	movs	r1, #127	; 0x7f
 8002abc:	486d      	ldr	r0, [pc, #436]	; (8002c74 <MX_GPIO_Init+0x2ac>)
 8002abe:	f002 fd61 	bl	8005584 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	2180      	movs	r1, #128	; 0x80
 8002ac6:	486c      	ldr	r0, [pc, #432]	; (8002c78 <MX_GPIO_Init+0x2b0>)
 8002ac8:	f002 fd5c 	bl	8005584 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8002acc:	2200      	movs	r2, #0
 8002ace:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8002ad2:	486a      	ldr	r0, [pc, #424]	; (8002c7c <MX_GPIO_Init+0x2b4>)
 8002ad4:	f002 fd56 	bl	8005584 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002ad8:	230c      	movs	r3, #12
 8002ada:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002adc:	2302      	movs	r3, #2
 8002ade:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8002ae8:	230d      	movs	r3, #13
 8002aea:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002aec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002af0:	4619      	mov	r1, r3
 8002af2:	4861      	ldr	r0, [pc, #388]	; (8002c78 <MX_GPIO_Init+0x2b0>)
 8002af4:	f002 fbb4 	bl	8005260 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002af8:	2320      	movs	r3, #32
 8002afa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002afc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002b00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b02:	2301      	movs	r3, #1
 8002b04:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	485a      	ldr	r0, [pc, #360]	; (8002c78 <MX_GPIO_Init+0x2b0>)
 8002b0e:	f002 fba7 	bl	8005260 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF7 PF8 PF12 PF13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_12|GPIO_PIN_13;
 8002b12:	f44f 5346 	mov.w	r3, #12672	; 0x3180
 8002b16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b20:	2300      	movs	r3, #0
 8002b22:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002b24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b28:	4619      	mov	r1, r3
 8002b2a:	4850      	ldr	r0, [pc, #320]	; (8002c6c <MX_GPIO_Init+0x2a4>)
 8002b2c:	f002 fb98 	bl	8005260 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002b30:	2308      	movs	r3, #8
 8002b32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002b34:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002b38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b42:	4619      	mov	r1, r3
 8002b44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b48:	f002 fb8a 	bl	8005260 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002b4c:	2304      	movs	r3, #4
 8002b4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b50:	2301      	movs	r3, #1
 8002b52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b54:	2300      	movs	r3, #0
 8002b56:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b60:	4619      	mov	r1, r3
 8002b62:	4843      	ldr	r0, [pc, #268]	; (8002c70 <MX_GPIO_Init+0x2a8>)
 8002b64:	f002 fb7c 	bl	8005260 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG2 PG3
                           PG4 PG5 PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002b68:	237f      	movs	r3, #127	; 0x7f
 8002b6a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b70:	2300      	movs	r3, #0
 8002b72:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b74:	2300      	movs	r3, #0
 8002b76:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002b78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	483d      	ldr	r0, [pc, #244]	; (8002c74 <MX_GPIO_Init+0x2ac>)
 8002b80:	f002 fb6e 	bl	8005260 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002b84:	2380      	movs	r3, #128	; 0x80
 8002b86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b90:	2300      	movs	r3, #0
 8002b92:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b98:	4619      	mov	r1, r3
 8002b9a:	4837      	ldr	r0, [pc, #220]	; (8002c78 <MX_GPIO_Init+0x2b0>)
 8002b9c:	f002 fb60 	bl	8005260 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8002ba0:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002ba4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002baa:	2300      	movs	r3, #0
 8002bac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	4830      	ldr	r0, [pc, #192]	; (8002c7c <MX_GPIO_Init+0x2b4>)
 8002bba:	f002 fb51 	bl	8005260 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002bbe:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002bc2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc4:	2302      	movs	r3, #2
 8002bc6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002bd0:	230a      	movs	r3, #10
 8002bd2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bd8:	4619      	mov	r1, r3
 8002bda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bde:	f002 fb3f 	bl	8005260 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002be2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002be6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002be8:	2300      	movs	r3, #0
 8002bea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bec:	2300      	movs	r3, #0
 8002bee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bfa:	f002 fb31 	bl	8005260 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002bfe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c04:	2302      	movs	r3, #2
 8002c06:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002c10:	230c      	movs	r3, #12
 8002c12:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c18:	4619      	mov	r1, r3
 8002c1a:	4818      	ldr	r0, [pc, #96]	; (8002c7c <MX_GPIO_Init+0x2b4>)
 8002c1c:	f002 fb20 	bl	8005260 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002c20:	2304      	movs	r3, #4
 8002c22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c24:	2302      	movs	r3, #2
 8002c26:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002c30:	230c      	movs	r3, #12
 8002c32:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c38:	4619      	mov	r1, r3
 8002c3a:	4811      	ldr	r0, [pc, #68]	; (8002c80 <MX_GPIO_Init+0x2b8>)
 8002c3c:	f002 fb10 	bl	8005260 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8002c40:	2200      	movs	r2, #0
 8002c42:	2100      	movs	r1, #0
 8002c44:	2009      	movs	r0, #9
 8002c46:	f002 fac6 	bl	80051d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002c4a:	2009      	movs	r0, #9
 8002c4c:	f002 fadf 	bl	800520e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002c50:	2200      	movs	r2, #0
 8002c52:	2100      	movs	r1, #0
 8002c54:	2017      	movs	r0, #23
 8002c56:	f002 fabe 	bl	80051d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002c5a:	2017      	movs	r0, #23
 8002c5c:	f002 fad7 	bl	800520e <HAL_NVIC_EnableIRQ>

}
 8002c60:	bf00      	nop
 8002c62:	3738      	adds	r7, #56	; 0x38
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	40021000 	.word	0x40021000
 8002c6c:	48001400 	.word	0x48001400
 8002c70:	48000400 	.word	0x48000400
 8002c74:	48001800 	.word	0x48001800
 8002c78:	48001000 	.word	0x48001000
 8002c7c:	48000800 	.word	0x48000800
 8002c80:	48000c00 	.word	0x48000c00

08002c84 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 8002c8c:	1d39      	adds	r1, r7, #4
 8002c8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c92:	2201      	movs	r2, #1
 8002c94:	4803      	ldr	r0, [pc, #12]	; (8002ca4 <__io_putchar+0x20>)
 8002c96:	f008 fa91 	bl	800b1bc <HAL_UART_Transmit>
  return ch;
 8002c9a:	687b      	ldr	r3, [r7, #4]
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3708      	adds	r7, #8
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	2000037c 	.word	0x2000037c

08002ca8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002cac:	b672      	cpsid	i
}
 8002cae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002cb0:	e7fe      	b.n	8002cb0 <Error_Handler+0x8>
	...

08002cb4 <motor_control>:
 *  Created on: Mar 12, 2023
 *      Author: ericding
 */
#include "motor_control.h"

void motor_control (uint8_t mode) {
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b082      	sub	sp, #8
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	4603      	mov	r3, r0
 8002cbc:	71fb      	strb	r3, [r7, #7]
	static uint8_t rmotor_pwm_val = 20;
	static uint8_t lmotor_h_bridge_in1 = 1;
	static uint8_t lmotor_h_bridge_in2 = 0;
	static uint8_t rmotor_h_bridge_in3 = 1;
	static uint8_t rmotor_h_bridge_in4 = 0;
	switch(mode) {
 8002cbe:	79fb      	ldrb	r3, [r7, #7]
 8002cc0:	2b06      	cmp	r3, #6
 8002cc2:	f200 8096 	bhi.w	8002df2 <motor_control+0x13e>
 8002cc6:	a201      	add	r2, pc, #4	; (adr r2, 8002ccc <motor_control+0x18>)
 8002cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ccc:	08002ce9 	.word	0x08002ce9
 8002cd0:	08002d0f 	.word	0x08002d0f
 8002cd4:	08002d35 	.word	0x08002d35
 8002cd8:	08002d5b 	.word	0x08002d5b
 8002cdc:	08002d81 	.word	0x08002d81
 8002ce0:	08002da7 	.word	0x08002da7
 8002ce4:	08002dcd 	.word	0x08002dcd
		case 0 :
			lmotor_pwm_val = 40;
 8002ce8:	4b62      	ldr	r3, [pc, #392]	; (8002e74 <motor_control+0x1c0>)
 8002cea:	2228      	movs	r2, #40	; 0x28
 8002cec:	701a      	strb	r2, [r3, #0]
			rmotor_pwm_val = 40;
 8002cee:	4b62      	ldr	r3, [pc, #392]	; (8002e78 <motor_control+0x1c4>)
 8002cf0:	2228      	movs	r2, #40	; 0x28
 8002cf2:	701a      	strb	r2, [r3, #0]
			lmotor_h_bridge_in1 = 1;
 8002cf4:	4b61      	ldr	r3, [pc, #388]	; (8002e7c <motor_control+0x1c8>)
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	701a      	strb	r2, [r3, #0]
			lmotor_h_bridge_in2 = 0;
 8002cfa:	4b61      	ldr	r3, [pc, #388]	; (8002e80 <motor_control+0x1cc>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	701a      	strb	r2, [r3, #0]
			rmotor_h_bridge_in3 = 1;
 8002d00:	4b60      	ldr	r3, [pc, #384]	; (8002e84 <motor_control+0x1d0>)
 8002d02:	2201      	movs	r2, #1
 8002d04:	701a      	strb	r2, [r3, #0]
			rmotor_h_bridge_in4 = 0;
 8002d06:	4b60      	ldr	r3, [pc, #384]	; (8002e88 <motor_control+0x1d4>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	701a      	strb	r2, [r3, #0]
			break;
 8002d0c:	e084      	b.n	8002e18 <motor_control+0x164>
		case 1:
			lmotor_pwm_val = 80;
 8002d0e:	4b59      	ldr	r3, [pc, #356]	; (8002e74 <motor_control+0x1c0>)
 8002d10:	2250      	movs	r2, #80	; 0x50
 8002d12:	701a      	strb	r2, [r3, #0]
			rmotor_pwm_val = 80;
 8002d14:	4b58      	ldr	r3, [pc, #352]	; (8002e78 <motor_control+0x1c4>)
 8002d16:	2250      	movs	r2, #80	; 0x50
 8002d18:	701a      	strb	r2, [r3, #0]
			lmotor_h_bridge_in1 = 0;
 8002d1a:	4b58      	ldr	r3, [pc, #352]	; (8002e7c <motor_control+0x1c8>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	701a      	strb	r2, [r3, #0]
			lmotor_h_bridge_in2 = 1;
 8002d20:	4b57      	ldr	r3, [pc, #348]	; (8002e80 <motor_control+0x1cc>)
 8002d22:	2201      	movs	r2, #1
 8002d24:	701a      	strb	r2, [r3, #0]
			rmotor_h_bridge_in3 = 1;
 8002d26:	4b57      	ldr	r3, [pc, #348]	; (8002e84 <motor_control+0x1d0>)
 8002d28:	2201      	movs	r2, #1
 8002d2a:	701a      	strb	r2, [r3, #0]
			rmotor_h_bridge_in4 = 0;
 8002d2c:	4b56      	ldr	r3, [pc, #344]	; (8002e88 <motor_control+0x1d4>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	701a      	strb	r2, [r3, #0]
			break;
 8002d32:	e071      	b.n	8002e18 <motor_control+0x164>
		case 2:
			lmotor_pwm_val = 80;
 8002d34:	4b4f      	ldr	r3, [pc, #316]	; (8002e74 <motor_control+0x1c0>)
 8002d36:	2250      	movs	r2, #80	; 0x50
 8002d38:	701a      	strb	r2, [r3, #0]
			rmotor_pwm_val = 80;
 8002d3a:	4b4f      	ldr	r3, [pc, #316]	; (8002e78 <motor_control+0x1c4>)
 8002d3c:	2250      	movs	r2, #80	; 0x50
 8002d3e:	701a      	strb	r2, [r3, #0]
			lmotor_h_bridge_in1 = 1;
 8002d40:	4b4e      	ldr	r3, [pc, #312]	; (8002e7c <motor_control+0x1c8>)
 8002d42:	2201      	movs	r2, #1
 8002d44:	701a      	strb	r2, [r3, #0]
			lmotor_h_bridge_in2 = 0;
 8002d46:	4b4e      	ldr	r3, [pc, #312]	; (8002e80 <motor_control+0x1cc>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	701a      	strb	r2, [r3, #0]
			rmotor_h_bridge_in3 = 0;
 8002d4c:	4b4d      	ldr	r3, [pc, #308]	; (8002e84 <motor_control+0x1d0>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	701a      	strb	r2, [r3, #0]
			rmotor_h_bridge_in4 = 1;
 8002d52:	4b4d      	ldr	r3, [pc, #308]	; (8002e88 <motor_control+0x1d4>)
 8002d54:	2201      	movs	r2, #1
 8002d56:	701a      	strb	r2, [r3, #0]
			break;
 8002d58:	e05e      	b.n	8002e18 <motor_control+0x164>
		case 3:
			lmotor_pwm_val = 80;
 8002d5a:	4b46      	ldr	r3, [pc, #280]	; (8002e74 <motor_control+0x1c0>)
 8002d5c:	2250      	movs	r2, #80	; 0x50
 8002d5e:	701a      	strb	r2, [r3, #0]
			rmotor_pwm_val = 80;
 8002d60:	4b45      	ldr	r3, [pc, #276]	; (8002e78 <motor_control+0x1c4>)
 8002d62:	2250      	movs	r2, #80	; 0x50
 8002d64:	701a      	strb	r2, [r3, #0]
			lmotor_h_bridge_in1 = 0;
 8002d66:	4b45      	ldr	r3, [pc, #276]	; (8002e7c <motor_control+0x1c8>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	701a      	strb	r2, [r3, #0]
			lmotor_h_bridge_in2 = 1;
 8002d6c:	4b44      	ldr	r3, [pc, #272]	; (8002e80 <motor_control+0x1cc>)
 8002d6e:	2201      	movs	r2, #1
 8002d70:	701a      	strb	r2, [r3, #0]
			rmotor_h_bridge_in3 = 1;
 8002d72:	4b44      	ldr	r3, [pc, #272]	; (8002e84 <motor_control+0x1d0>)
 8002d74:	2201      	movs	r2, #1
 8002d76:	701a      	strb	r2, [r3, #0]
			rmotor_h_bridge_in4 = 0;
 8002d78:	4b43      	ldr	r3, [pc, #268]	; (8002e88 <motor_control+0x1d4>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	701a      	strb	r2, [r3, #0]
			break;
 8002d7e:	e04b      	b.n	8002e18 <motor_control+0x164>
		case 4:
			lmotor_pwm_val = 40;
 8002d80:	4b3c      	ldr	r3, [pc, #240]	; (8002e74 <motor_control+0x1c0>)
 8002d82:	2228      	movs	r2, #40	; 0x28
 8002d84:	701a      	strb	r2, [r3, #0]
			rmotor_pwm_val = 40;
 8002d86:	4b3c      	ldr	r3, [pc, #240]	; (8002e78 <motor_control+0x1c4>)
 8002d88:	2228      	movs	r2, #40	; 0x28
 8002d8a:	701a      	strb	r2, [r3, #0]
			lmotor_h_bridge_in1 = 0;
 8002d8c:	4b3b      	ldr	r3, [pc, #236]	; (8002e7c <motor_control+0x1c8>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	701a      	strb	r2, [r3, #0]
			lmotor_h_bridge_in2 = 1;
 8002d92:	4b3b      	ldr	r3, [pc, #236]	; (8002e80 <motor_control+0x1cc>)
 8002d94:	2201      	movs	r2, #1
 8002d96:	701a      	strb	r2, [r3, #0]
			rmotor_h_bridge_in3 = 0;
 8002d98:	4b3a      	ldr	r3, [pc, #232]	; (8002e84 <motor_control+0x1d0>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	701a      	strb	r2, [r3, #0]
			rmotor_h_bridge_in4 = 1;
 8002d9e:	4b3a      	ldr	r3, [pc, #232]	; (8002e88 <motor_control+0x1d4>)
 8002da0:	2201      	movs	r2, #1
 8002da2:	701a      	strb	r2, [r3, #0]
			break;
 8002da4:	e038      	b.n	8002e18 <motor_control+0x164>
		case 5:
			lmotor_pwm_val = 20;
 8002da6:	4b33      	ldr	r3, [pc, #204]	; (8002e74 <motor_control+0x1c0>)
 8002da8:	2214      	movs	r2, #20
 8002daa:	701a      	strb	r2, [r3, #0]
			rmotor_pwm_val = 20;
 8002dac:	4b32      	ldr	r3, [pc, #200]	; (8002e78 <motor_control+0x1c4>)
 8002dae:	2214      	movs	r2, #20
 8002db0:	701a      	strb	r2, [r3, #0]
			lmotor_h_bridge_in1 = 0;
 8002db2:	4b32      	ldr	r3, [pc, #200]	; (8002e7c <motor_control+0x1c8>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	701a      	strb	r2, [r3, #0]
			lmotor_h_bridge_in2 = 1;
 8002db8:	4b31      	ldr	r3, [pc, #196]	; (8002e80 <motor_control+0x1cc>)
 8002dba:	2201      	movs	r2, #1
 8002dbc:	701a      	strb	r2, [r3, #0]
			rmotor_h_bridge_in3 = 0;
 8002dbe:	4b31      	ldr	r3, [pc, #196]	; (8002e84 <motor_control+0x1d0>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	701a      	strb	r2, [r3, #0]
			rmotor_h_bridge_in4 = 1;
 8002dc4:	4b30      	ldr	r3, [pc, #192]	; (8002e88 <motor_control+0x1d4>)
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	701a      	strb	r2, [r3, #0]
			break;
 8002dca:	e025      	b.n	8002e18 <motor_control+0x164>
		case 6:
			lmotor_pwm_val = 40;
 8002dcc:	4b29      	ldr	r3, [pc, #164]	; (8002e74 <motor_control+0x1c0>)
 8002dce:	2228      	movs	r2, #40	; 0x28
 8002dd0:	701a      	strb	r2, [r3, #0]
			rmotor_pwm_val = 40;
 8002dd2:	4b29      	ldr	r3, [pc, #164]	; (8002e78 <motor_control+0x1c4>)
 8002dd4:	2228      	movs	r2, #40	; 0x28
 8002dd6:	701a      	strb	r2, [r3, #0]
			lmotor_h_bridge_in1 = 1;
 8002dd8:	4b28      	ldr	r3, [pc, #160]	; (8002e7c <motor_control+0x1c8>)
 8002dda:	2201      	movs	r2, #1
 8002ddc:	701a      	strb	r2, [r3, #0]
			lmotor_h_bridge_in2 = 0;
 8002dde:	4b28      	ldr	r3, [pc, #160]	; (8002e80 <motor_control+0x1cc>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	701a      	strb	r2, [r3, #0]
			rmotor_h_bridge_in3 = 1;
 8002de4:	4b27      	ldr	r3, [pc, #156]	; (8002e84 <motor_control+0x1d0>)
 8002de6:	2201      	movs	r2, #1
 8002de8:	701a      	strb	r2, [r3, #0]
			rmotor_h_bridge_in4 = 0;
 8002dea:	4b27      	ldr	r3, [pc, #156]	; (8002e88 <motor_control+0x1d4>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	701a      	strb	r2, [r3, #0]
			break;
 8002df0:	e012      	b.n	8002e18 <motor_control+0x164>
		default:
			lmotor_pwm_val = 0;
 8002df2:	4b20      	ldr	r3, [pc, #128]	; (8002e74 <motor_control+0x1c0>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	701a      	strb	r2, [r3, #0]
			rmotor_pwm_val = 0;
 8002df8:	4b1f      	ldr	r3, [pc, #124]	; (8002e78 <motor_control+0x1c4>)
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	701a      	strb	r2, [r3, #0]
			lmotor_h_bridge_in1 = 1;
 8002dfe:	4b1f      	ldr	r3, [pc, #124]	; (8002e7c <motor_control+0x1c8>)
 8002e00:	2201      	movs	r2, #1
 8002e02:	701a      	strb	r2, [r3, #0]
			lmotor_h_bridge_in2 = 0;
 8002e04:	4b1e      	ldr	r3, [pc, #120]	; (8002e80 <motor_control+0x1cc>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	701a      	strb	r2, [r3, #0]
			rmotor_h_bridge_in3 = 1;
 8002e0a:	4b1e      	ldr	r3, [pc, #120]	; (8002e84 <motor_control+0x1d0>)
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	701a      	strb	r2, [r3, #0]
			rmotor_h_bridge_in4 = 0;
 8002e10:	4b1d      	ldr	r3, [pc, #116]	; (8002e88 <motor_control+0x1d4>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	701a      	strb	r2, [r3, #0]
			break;
 8002e16:	bf00      	nop
	}

	htim4.Instance->CCR3 = lmotor_pwm_val; // PD14 to EnA
 8002e18:	4b16      	ldr	r3, [pc, #88]	; (8002e74 <motor_control+0x1c0>)
 8002e1a:	781a      	ldrb	r2, [r3, #0]
 8002e1c:	4b1b      	ldr	r3, [pc, #108]	; (8002e8c <motor_control+0x1d8>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	63da      	str	r2, [r3, #60]	; 0x3c
	htim4.Instance->CCR4 = rmotor_pwm_val; // PD15 to EnB
 8002e22:	4b15      	ldr	r3, [pc, #84]	; (8002e78 <motor_control+0x1c4>)
 8002e24:	781a      	ldrb	r2, [r3, #0]
 8002e26:	4b19      	ldr	r3, [pc, #100]	; (8002e8c <motor_control+0x1d8>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7,  lmotor_h_bridge_in1);
 8002e2c:	4b13      	ldr	r3, [pc, #76]	; (8002e7c <motor_control+0x1c8>)
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	461a      	mov	r2, r3
 8002e32:	2180      	movs	r1, #128	; 0x80
 8002e34:	4816      	ldr	r0, [pc, #88]	; (8002e90 <motor_control+0x1dc>)
 8002e36:	f002 fba5 	bl	8005584 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8,  lmotor_h_bridge_in2);
 8002e3a:	4b11      	ldr	r3, [pc, #68]	; (8002e80 <motor_control+0x1cc>)
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	461a      	mov	r2, r3
 8002e40:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e44:	4812      	ldr	r0, [pc, #72]	; (8002e90 <motor_control+0x1dc>)
 8002e46:	f002 fb9d 	bl	8005584 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12,  rmotor_h_bridge_in3);
 8002e4a:	4b0e      	ldr	r3, [pc, #56]	; (8002e84 <motor_control+0x1d0>)
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	461a      	mov	r2, r3
 8002e50:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002e54:	480e      	ldr	r0, [pc, #56]	; (8002e90 <motor_control+0x1dc>)
 8002e56:	f002 fb95 	bl	8005584 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13,  rmotor_h_bridge_in4);
 8002e5a:	4b0b      	ldr	r3, [pc, #44]	; (8002e88 <motor_control+0x1d4>)
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	461a      	mov	r2, r3
 8002e60:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e64:	480a      	ldr	r0, [pc, #40]	; (8002e90 <motor_control+0x1dc>)
 8002e66:	f002 fb8d 	bl	8005584 <HAL_GPIO_WritePin>
}
 8002e6a:	bf00      	nop
 8002e6c:	3708      	adds	r7, #8
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	20000000 	.word	0x20000000
 8002e78:	20000001 	.word	0x20000001
 8002e7c:	20000002 	.word	0x20000002
 8002e80:	20000850 	.word	0x20000850
 8002e84:	20000003 	.word	0x20000003
 8002e88:	20000851 	.word	0x20000851
 8002e8c:	2000076c 	.word	0x2000076c
 8002e90:	48001400 	.word	0x48001400

08002e94 <rotor_control>:
 */

#include "rotor_control.h"


void rotor_control (uint8_t mode) {
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	71fb      	strb	r3, [r7, #7]
	// mode 0 turn, mode 1 stop
	static uint8_t motor_pwm_val = 0; // 0 - 99 throttle control
	static uint8_t motor_h_bridge_in1 = 1;
	static uint8_t motor_h_bridge_in2 = 0;

	switch(mode) {
 8002e9e:	79fb      	ldrb	r3, [r7, #7]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d109      	bne.n	8002eb8 <rotor_control+0x24>
		case 0 :
			motor_pwm_val = 60;
 8002ea4:	4b15      	ldr	r3, [pc, #84]	; (8002efc <rotor_control+0x68>)
 8002ea6:	223c      	movs	r2, #60	; 0x3c
 8002ea8:	701a      	strb	r2, [r3, #0]
			motor_h_bridge_in1 = 1;
 8002eaa:	4b15      	ldr	r3, [pc, #84]	; (8002f00 <rotor_control+0x6c>)
 8002eac:	2201      	movs	r2, #1
 8002eae:	701a      	strb	r2, [r3, #0]
			motor_h_bridge_in2 = 0;
 8002eb0:	4b14      	ldr	r3, [pc, #80]	; (8002f04 <rotor_control+0x70>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	701a      	strb	r2, [r3, #0]
			break;
 8002eb6:	e009      	b.n	8002ecc <rotor_control+0x38>
		default:
			motor_pwm_val = 0;
 8002eb8:	4b10      	ldr	r3, [pc, #64]	; (8002efc <rotor_control+0x68>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	701a      	strb	r2, [r3, #0]
			motor_h_bridge_in1 = 1;
 8002ebe:	4b10      	ldr	r3, [pc, #64]	; (8002f00 <rotor_control+0x6c>)
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	701a      	strb	r2, [r3, #0]
			motor_h_bridge_in2 = 0;
 8002ec4:	4b0f      	ldr	r3, [pc, #60]	; (8002f04 <rotor_control+0x70>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	701a      	strb	r2, [r3, #0]
			break;
 8002eca:	bf00      	nop
	}

	htim4.Instance->CCR1 = motor_pwm_val; // PD13
 8002ecc:	4b0b      	ldr	r3, [pc, #44]	; (8002efc <rotor_control+0x68>)
 8002ece:	781a      	ldrb	r2, [r3, #0]
 8002ed0:	4b0d      	ldr	r3, [pc, #52]	; (8002f08 <rotor_control+0x74>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0,  motor_h_bridge_in1);
 8002ed6:	4b0a      	ldr	r3, [pc, #40]	; (8002f00 <rotor_control+0x6c>)
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	461a      	mov	r2, r3
 8002edc:	2101      	movs	r1, #1
 8002ede:	480b      	ldr	r0, [pc, #44]	; (8002f0c <rotor_control+0x78>)
 8002ee0:	f002 fb50 	bl	8005584 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1,  motor_h_bridge_in2);
 8002ee4:	4b07      	ldr	r3, [pc, #28]	; (8002f04 <rotor_control+0x70>)
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	461a      	mov	r2, r3
 8002eea:	2102      	movs	r1, #2
 8002eec:	4807      	ldr	r0, [pc, #28]	; (8002f0c <rotor_control+0x78>)
 8002eee:	f002 fb49 	bl	8005584 <HAL_GPIO_WritePin>
}
 8002ef2:	bf00      	nop
 8002ef4:	3708      	adds	r7, #8
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	20000852 	.word	0x20000852
 8002f00:	20000004 	.word	0x20000004
 8002f04:	20000853 	.word	0x20000853
 8002f08:	2000076c 	.word	0x2000076c
 8002f0c:	48001800 	.word	0x48001800

08002f10 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f16:	4b0f      	ldr	r3, [pc, #60]	; (8002f54 <HAL_MspInit+0x44>)
 8002f18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f1a:	4a0e      	ldr	r2, [pc, #56]	; (8002f54 <HAL_MspInit+0x44>)
 8002f1c:	f043 0301 	orr.w	r3, r3, #1
 8002f20:	6613      	str	r3, [r2, #96]	; 0x60
 8002f22:	4b0c      	ldr	r3, [pc, #48]	; (8002f54 <HAL_MspInit+0x44>)
 8002f24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f26:	f003 0301 	and.w	r3, r3, #1
 8002f2a:	607b      	str	r3, [r7, #4]
 8002f2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f2e:	4b09      	ldr	r3, [pc, #36]	; (8002f54 <HAL_MspInit+0x44>)
 8002f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f32:	4a08      	ldr	r2, [pc, #32]	; (8002f54 <HAL_MspInit+0x44>)
 8002f34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f38:	6593      	str	r3, [r2, #88]	; 0x58
 8002f3a:	4b06      	ldr	r3, [pc, #24]	; (8002f54 <HAL_MspInit+0x44>)
 8002f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f42:	603b      	str	r3, [r7, #0]
 8002f44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f46:	bf00      	nop
 8002f48:	370c      	adds	r7, #12
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop
 8002f54:	40021000 	.word	0x40021000

08002f58 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b08c      	sub	sp, #48	; 0x30
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f60:	f107 031c 	add.w	r3, r7, #28
 8002f64:	2200      	movs	r2, #0
 8002f66:	601a      	str	r2, [r3, #0]
 8002f68:	605a      	str	r2, [r3, #4]
 8002f6a:	609a      	str	r2, [r3, #8]
 8002f6c:	60da      	str	r2, [r3, #12]
 8002f6e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a2d      	ldr	r2, [pc, #180]	; (800302c <HAL_ADC_MspInit+0xd4>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d154      	bne.n	8003024 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002f7a:	4b2d      	ldr	r3, [pc, #180]	; (8003030 <HAL_ADC_MspInit+0xd8>)
 8002f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f7e:	4a2c      	ldr	r2, [pc, #176]	; (8003030 <HAL_ADC_MspInit+0xd8>)
 8002f80:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002f84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f86:	4b2a      	ldr	r3, [pc, #168]	; (8003030 <HAL_ADC_MspInit+0xd8>)
 8002f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f8e:	61bb      	str	r3, [r7, #24]
 8002f90:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f92:	4b27      	ldr	r3, [pc, #156]	; (8003030 <HAL_ADC_MspInit+0xd8>)
 8002f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f96:	4a26      	ldr	r2, [pc, #152]	; (8003030 <HAL_ADC_MspInit+0xd8>)
 8002f98:	f043 0304 	orr.w	r3, r3, #4
 8002f9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f9e:	4b24      	ldr	r3, [pc, #144]	; (8003030 <HAL_ADC_MspInit+0xd8>)
 8002fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fa2:	f003 0304 	and.w	r3, r3, #4
 8002fa6:	617b      	str	r3, [r7, #20]
 8002fa8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002faa:	4b21      	ldr	r3, [pc, #132]	; (8003030 <HAL_ADC_MspInit+0xd8>)
 8002fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fae:	4a20      	ldr	r2, [pc, #128]	; (8003030 <HAL_ADC_MspInit+0xd8>)
 8002fb0:	f043 0301 	orr.w	r3, r3, #1
 8002fb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002fb6:	4b1e      	ldr	r3, [pc, #120]	; (8003030 <HAL_ADC_MspInit+0xd8>)
 8002fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fba:	f003 0301 	and.w	r3, r3, #1
 8002fbe:	613b      	str	r3, [r7, #16]
 8002fc0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fc2:	4b1b      	ldr	r3, [pc, #108]	; (8003030 <HAL_ADC_MspInit+0xd8>)
 8002fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fc6:	4a1a      	ldr	r2, [pc, #104]	; (8003030 <HAL_ADC_MspInit+0xd8>)
 8002fc8:	f043 0302 	orr.w	r3, r3, #2
 8002fcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002fce:	4b18      	ldr	r3, [pc, #96]	; (8003030 <HAL_ADC_MspInit+0xd8>)
 8002fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fd2:	f003 0302 	and.w	r3, r3, #2
 8002fd6:	60fb      	str	r3, [r7, #12]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN6
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002fda:	233f      	movs	r3, #63	; 0x3f
 8002fdc:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002fde:	230b      	movs	r3, #11
 8002fe0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fe6:	f107 031c 	add.w	r3, r7, #28
 8002fea:	4619      	mov	r1, r3
 8002fec:	4811      	ldr	r0, [pc, #68]	; (8003034 <HAL_ADC_MspInit+0xdc>)
 8002fee:	f002 f937 	bl	8005260 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002ff2:	2302      	movs	r3, #2
 8002ff4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002ff6:	230b      	movs	r3, #11
 8002ff8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ffe:	f107 031c 	add.w	r3, r7, #28
 8003002:	4619      	mov	r1, r3
 8003004:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003008:	f002 f92a 	bl	8005260 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800300c:	2302      	movs	r3, #2
 800300e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003010:	230b      	movs	r3, #11
 8003012:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003014:	2300      	movs	r3, #0
 8003016:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003018:	f107 031c 	add.w	r3, r7, #28
 800301c:	4619      	mov	r1, r3
 800301e:	4806      	ldr	r0, [pc, #24]	; (8003038 <HAL_ADC_MspInit+0xe0>)
 8003020:	f002 f91e 	bl	8005260 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003024:	bf00      	nop
 8003026:	3730      	adds	r7, #48	; 0x30
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}
 800302c:	50040000 	.word	0x50040000
 8003030:	40021000 	.word	0x40021000
 8003034:	48000800 	.word	0x48000800
 8003038:	48000400 	.word	0x48000400

0800303c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b08a      	sub	sp, #40	; 0x28
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003044:	f107 0314 	add.w	r3, r7, #20
 8003048:	2200      	movs	r2, #0
 800304a:	601a      	str	r2, [r3, #0]
 800304c:	605a      	str	r2, [r3, #4]
 800304e:	609a      	str	r2, [r3, #8]
 8003050:	60da      	str	r2, [r3, #12]
 8003052:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a17      	ldr	r2, [pc, #92]	; (80030b8 <HAL_CAN_MspInit+0x7c>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d127      	bne.n	80030ae <HAL_CAN_MspInit+0x72>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800305e:	4b17      	ldr	r3, [pc, #92]	; (80030bc <HAL_CAN_MspInit+0x80>)
 8003060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003062:	4a16      	ldr	r2, [pc, #88]	; (80030bc <HAL_CAN_MspInit+0x80>)
 8003064:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003068:	6593      	str	r3, [r2, #88]	; 0x58
 800306a:	4b14      	ldr	r3, [pc, #80]	; (80030bc <HAL_CAN_MspInit+0x80>)
 800306c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800306e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003072:	613b      	str	r3, [r7, #16]
 8003074:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003076:	4b11      	ldr	r3, [pc, #68]	; (80030bc <HAL_CAN_MspInit+0x80>)
 8003078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800307a:	4a10      	ldr	r2, [pc, #64]	; (80030bc <HAL_CAN_MspInit+0x80>)
 800307c:	f043 0308 	orr.w	r3, r3, #8
 8003080:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003082:	4b0e      	ldr	r3, [pc, #56]	; (80030bc <HAL_CAN_MspInit+0x80>)
 8003084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003086:	f003 0308 	and.w	r3, r3, #8
 800308a:	60fb      	str	r3, [r7, #12]
 800308c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800308e:	2303      	movs	r3, #3
 8003090:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003092:	2302      	movs	r3, #2
 8003094:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003096:	2300      	movs	r3, #0
 8003098:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800309a:	2303      	movs	r3, #3
 800309c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800309e:	2309      	movs	r3, #9
 80030a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80030a2:	f107 0314 	add.w	r3, r7, #20
 80030a6:	4619      	mov	r1, r3
 80030a8:	4805      	ldr	r0, [pc, #20]	; (80030c0 <HAL_CAN_MspInit+0x84>)
 80030aa:	f002 f8d9 	bl	8005260 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80030ae:	bf00      	nop
 80030b0:	3728      	adds	r7, #40	; 0x28
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	40006400 	.word	0x40006400
 80030bc:	40021000 	.word	0x40021000
 80030c0:	48000c00 	.word	0x48000c00

080030c4 <HAL_SMBUS_MspInit>:
* This function configures the hardware resources used in this example
* @param hsmbus: SMBUS handle pointer
* @retval None
*/
void HAL_SMBUS_MspInit(SMBUS_HandleTypeDef* hsmbus)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b0b0      	sub	sp, #192	; 0xc0
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030cc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80030d0:	2200      	movs	r2, #0
 80030d2:	601a      	str	r2, [r3, #0]
 80030d4:	605a      	str	r2, [r3, #4]
 80030d6:	609a      	str	r2, [r3, #8]
 80030d8:	60da      	str	r2, [r3, #12]
 80030da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80030dc:	f107 0318 	add.w	r3, r7, #24
 80030e0:	2294      	movs	r2, #148	; 0x94
 80030e2:	2100      	movs	r1, #0
 80030e4:	4618      	mov	r0, r3
 80030e6:	f008 fee7 	bl	800beb8 <memset>
  if(hsmbus->Instance==I2C1)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a42      	ldr	r2, [pc, #264]	; (80031f8 <HAL_SMBUS_MspInit+0x134>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d13c      	bne.n	800316e <HAL_SMBUS_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80030f4:	2340      	movs	r3, #64	; 0x40
 80030f6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80030f8:	2300      	movs	r3, #0
 80030fa:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80030fc:	f107 0318 	add.w	r3, r7, #24
 8003100:	4618      	mov	r0, r3
 8003102:	f003 fa37 	bl	8006574 <HAL_RCCEx_PeriphCLKConfig>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d001      	beq.n	8003110 <HAL_SMBUS_MspInit+0x4c>
    {
      Error_Handler();
 800310c:	f7ff fdcc 	bl	8002ca8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003110:	4b3a      	ldr	r3, [pc, #232]	; (80031fc <HAL_SMBUS_MspInit+0x138>)
 8003112:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003114:	4a39      	ldr	r2, [pc, #228]	; (80031fc <HAL_SMBUS_MspInit+0x138>)
 8003116:	f043 0302 	orr.w	r3, r3, #2
 800311a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800311c:	4b37      	ldr	r3, [pc, #220]	; (80031fc <HAL_SMBUS_MspInit+0x138>)
 800311e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003120:	f003 0302 	and.w	r3, r3, #2
 8003124:	617b      	str	r3, [r7, #20]
 8003126:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003128:	f44f 7340 	mov.w	r3, #768	; 0x300
 800312c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003130:	2312      	movs	r3, #18
 8003132:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003136:	2301      	movs	r3, #1
 8003138:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800313c:	2303      	movs	r3, #3
 800313e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003142:	2304      	movs	r3, #4
 8003144:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003148:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800314c:	4619      	mov	r1, r3
 800314e:	482c      	ldr	r0, [pc, #176]	; (8003200 <HAL_SMBUS_MspInit+0x13c>)
 8003150:	f002 f886 	bl	8005260 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003154:	4b29      	ldr	r3, [pc, #164]	; (80031fc <HAL_SMBUS_MspInit+0x138>)
 8003156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003158:	4a28      	ldr	r2, [pc, #160]	; (80031fc <HAL_SMBUS_MspInit+0x138>)
 800315a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800315e:	6593      	str	r3, [r2, #88]	; 0x58
 8003160:	4b26      	ldr	r3, [pc, #152]	; (80031fc <HAL_SMBUS_MspInit+0x138>)
 8003162:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003164:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003168:	613b      	str	r3, [r7, #16]
 800316a:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800316c:	e03f      	b.n	80031ee <HAL_SMBUS_MspInit+0x12a>
  else if(hsmbus->Instance==I2C2)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a24      	ldr	r2, [pc, #144]	; (8003204 <HAL_SMBUS_MspInit+0x140>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d13a      	bne.n	80031ee <HAL_SMBUS_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8003178:	2380      	movs	r3, #128	; 0x80
 800317a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800317c:	2300      	movs	r3, #0
 800317e:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003180:	f107 0318 	add.w	r3, r7, #24
 8003184:	4618      	mov	r0, r3
 8003186:	f003 f9f5 	bl	8006574 <HAL_RCCEx_PeriphCLKConfig>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d001      	beq.n	8003194 <HAL_SMBUS_MspInit+0xd0>
      Error_Handler();
 8003190:	f7ff fd8a 	bl	8002ca8 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003194:	4b19      	ldr	r3, [pc, #100]	; (80031fc <HAL_SMBUS_MspInit+0x138>)
 8003196:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003198:	4a18      	ldr	r2, [pc, #96]	; (80031fc <HAL_SMBUS_MspInit+0x138>)
 800319a:	f043 0320 	orr.w	r3, r3, #32
 800319e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80031a0:	4b16      	ldr	r3, [pc, #88]	; (80031fc <HAL_SMBUS_MspInit+0x138>)
 80031a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031a4:	f003 0320 	and.w	r3, r3, #32
 80031a8:	60fb      	str	r3, [r7, #12]
 80031aa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80031ac:	2307      	movs	r3, #7
 80031ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80031b2:	2312      	movs	r3, #18
 80031b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80031b8:	2301      	movs	r3, #1
 80031ba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031be:	2303      	movs	r3, #3
 80031c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80031c4:	2304      	movs	r3, #4
 80031c6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80031ca:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80031ce:	4619      	mov	r1, r3
 80031d0:	480d      	ldr	r0, [pc, #52]	; (8003208 <HAL_SMBUS_MspInit+0x144>)
 80031d2:	f002 f845 	bl	8005260 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80031d6:	4b09      	ldr	r3, [pc, #36]	; (80031fc <HAL_SMBUS_MspInit+0x138>)
 80031d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031da:	4a08      	ldr	r2, [pc, #32]	; (80031fc <HAL_SMBUS_MspInit+0x138>)
 80031dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80031e0:	6593      	str	r3, [r2, #88]	; 0x58
 80031e2:	4b06      	ldr	r3, [pc, #24]	; (80031fc <HAL_SMBUS_MspInit+0x138>)
 80031e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031ea:	60bb      	str	r3, [r7, #8]
 80031ec:	68bb      	ldr	r3, [r7, #8]
}
 80031ee:	bf00      	nop
 80031f0:	37c0      	adds	r7, #192	; 0xc0
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	40005400 	.word	0x40005400
 80031fc:	40021000 	.word	0x40021000
 8003200:	48000400 	.word	0x48000400
 8003204:	40005800 	.word	0x40005800
 8003208:	48001400 	.word	0x48001400

0800320c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b0b2      	sub	sp, #200	; 0xc8
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003214:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003218:	2200      	movs	r2, #0
 800321a:	601a      	str	r2, [r3, #0]
 800321c:	605a      	str	r2, [r3, #4]
 800321e:	609a      	str	r2, [r3, #8]
 8003220:	60da      	str	r2, [r3, #12]
 8003222:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003224:	f107 0320 	add.w	r3, r7, #32
 8003228:	2294      	movs	r2, #148	; 0x94
 800322a:	2100      	movs	r1, #0
 800322c:	4618      	mov	r0, r3
 800322e:	f008 fe43 	bl	800beb8 <memset>
  if(huart->Instance==LPUART1)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a64      	ldr	r2, [pc, #400]	; (80033c8 <HAL_UART_MspInit+0x1bc>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d13e      	bne.n	80032ba <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800323c:	2320      	movs	r3, #32
 800323e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8003240:	2300      	movs	r3, #0
 8003242:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003244:	f107 0320 	add.w	r3, r7, #32
 8003248:	4618      	mov	r0, r3
 800324a:	f003 f993 	bl	8006574 <HAL_RCCEx_PeriphCLKConfig>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d001      	beq.n	8003258 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003254:	f7ff fd28 	bl	8002ca8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8003258:	4b5c      	ldr	r3, [pc, #368]	; (80033cc <HAL_UART_MspInit+0x1c0>)
 800325a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800325c:	4a5b      	ldr	r2, [pc, #364]	; (80033cc <HAL_UART_MspInit+0x1c0>)
 800325e:	f043 0301 	orr.w	r3, r3, #1
 8003262:	65d3      	str	r3, [r2, #92]	; 0x5c
 8003264:	4b59      	ldr	r3, [pc, #356]	; (80033cc <HAL_UART_MspInit+0x1c0>)
 8003266:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003268:	f003 0301 	and.w	r3, r3, #1
 800326c:	61fb      	str	r3, [r7, #28]
 800326e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003270:	4b56      	ldr	r3, [pc, #344]	; (80033cc <HAL_UART_MspInit+0x1c0>)
 8003272:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003274:	4a55      	ldr	r2, [pc, #340]	; (80033cc <HAL_UART_MspInit+0x1c0>)
 8003276:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800327a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800327c:	4b53      	ldr	r3, [pc, #332]	; (80033cc <HAL_UART_MspInit+0x1c0>)
 800327e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003284:	61bb      	str	r3, [r7, #24]
 8003286:	69bb      	ldr	r3, [r7, #24]
    HAL_PWREx_EnableVddIO2();
 8003288:	f002 fa8c 	bl	80057a4 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800328c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003290:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003294:	2302      	movs	r3, #2
 8003296:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800329a:	2300      	movs	r3, #0
 800329c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032a0:	2303      	movs	r3, #3
 80032a2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80032a6:	2308      	movs	r3, #8
 80032a8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80032ac:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80032b0:	4619      	mov	r1, r3
 80032b2:	4847      	ldr	r0, [pc, #284]	; (80033d0 <HAL_UART_MspInit+0x1c4>)
 80032b4:	f001 ffd4 	bl	8005260 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80032b8:	e081      	b.n	80033be <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART2)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a45      	ldr	r2, [pc, #276]	; (80033d4 <HAL_UART_MspInit+0x1c8>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d13b      	bne.n	800333c <HAL_UART_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80032c4:	2302      	movs	r3, #2
 80032c6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80032c8:	2300      	movs	r3, #0
 80032ca:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80032cc:	f107 0320 	add.w	r3, r7, #32
 80032d0:	4618      	mov	r0, r3
 80032d2:	f003 f94f 	bl	8006574 <HAL_RCCEx_PeriphCLKConfig>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d001      	beq.n	80032e0 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 80032dc:	f7ff fce4 	bl	8002ca8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80032e0:	4b3a      	ldr	r3, [pc, #232]	; (80033cc <HAL_UART_MspInit+0x1c0>)
 80032e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032e4:	4a39      	ldr	r2, [pc, #228]	; (80033cc <HAL_UART_MspInit+0x1c0>)
 80032e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032ea:	6593      	str	r3, [r2, #88]	; 0x58
 80032ec:	4b37      	ldr	r3, [pc, #220]	; (80033cc <HAL_UART_MspInit+0x1c0>)
 80032ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032f4:	617b      	str	r3, [r7, #20]
 80032f6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80032f8:	4b34      	ldr	r3, [pc, #208]	; (80033cc <HAL_UART_MspInit+0x1c0>)
 80032fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032fc:	4a33      	ldr	r2, [pc, #204]	; (80033cc <HAL_UART_MspInit+0x1c0>)
 80032fe:	f043 0308 	orr.w	r3, r3, #8
 8003302:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003304:	4b31      	ldr	r3, [pc, #196]	; (80033cc <HAL_UART_MspInit+0x1c0>)
 8003306:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003308:	f003 0308 	and.w	r3, r3, #8
 800330c:	613b      	str	r3, [r7, #16]
 800330e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8003310:	2378      	movs	r3, #120	; 0x78
 8003312:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003316:	2302      	movs	r3, #2
 8003318:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800331c:	2300      	movs	r3, #0
 800331e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003322:	2303      	movs	r3, #3
 8003324:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003328:	2307      	movs	r3, #7
 800332a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800332e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003332:	4619      	mov	r1, r3
 8003334:	4828      	ldr	r0, [pc, #160]	; (80033d8 <HAL_UART_MspInit+0x1cc>)
 8003336:	f001 ff93 	bl	8005260 <HAL_GPIO_Init>
}
 800333a:	e040      	b.n	80033be <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART3)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a26      	ldr	r2, [pc, #152]	; (80033dc <HAL_UART_MspInit+0x1d0>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d13b      	bne.n	80033be <HAL_UART_MspInit+0x1b2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003346:	2304      	movs	r3, #4
 8003348:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800334a:	2300      	movs	r3, #0
 800334c:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800334e:	f107 0320 	add.w	r3, r7, #32
 8003352:	4618      	mov	r0, r3
 8003354:	f003 f90e 	bl	8006574 <HAL_RCCEx_PeriphCLKConfig>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d001      	beq.n	8003362 <HAL_UART_MspInit+0x156>
      Error_Handler();
 800335e:	f7ff fca3 	bl	8002ca8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003362:	4b1a      	ldr	r3, [pc, #104]	; (80033cc <HAL_UART_MspInit+0x1c0>)
 8003364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003366:	4a19      	ldr	r2, [pc, #100]	; (80033cc <HAL_UART_MspInit+0x1c0>)
 8003368:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800336c:	6593      	str	r3, [r2, #88]	; 0x58
 800336e:	4b17      	ldr	r3, [pc, #92]	; (80033cc <HAL_UART_MspInit+0x1c0>)
 8003370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003372:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003376:	60fb      	str	r3, [r7, #12]
 8003378:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800337a:	4b14      	ldr	r3, [pc, #80]	; (80033cc <HAL_UART_MspInit+0x1c0>)
 800337c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800337e:	4a13      	ldr	r2, [pc, #76]	; (80033cc <HAL_UART_MspInit+0x1c0>)
 8003380:	f043 0308 	orr.w	r3, r3, #8
 8003384:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003386:	4b11      	ldr	r3, [pc, #68]	; (80033cc <HAL_UART_MspInit+0x1c0>)
 8003388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800338a:	f003 0308 	and.w	r3, r3, #8
 800338e:	60bb      	str	r3, [r7, #8]
 8003390:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003392:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003396:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800339a:	2302      	movs	r3, #2
 800339c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033a0:	2300      	movs	r3, #0
 80033a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033a6:	2303      	movs	r3, #3
 80033a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80033ac:	2307      	movs	r3, #7
 80033ae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80033b2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80033b6:	4619      	mov	r1, r3
 80033b8:	4807      	ldr	r0, [pc, #28]	; (80033d8 <HAL_UART_MspInit+0x1cc>)
 80033ba:	f001 ff51 	bl	8005260 <HAL_GPIO_Init>
}
 80033be:	bf00      	nop
 80033c0:	37c8      	adds	r7, #200	; 0xc8
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	40008000 	.word	0x40008000
 80033cc:	40021000 	.word	0x40021000
 80033d0:	48001800 	.word	0x48001800
 80033d4:	40004400 	.word	0x40004400
 80033d8:	48000c00 	.word	0x48000c00
 80033dc:	40004800 	.word	0x40004800

080033e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b08c      	sub	sp, #48	; 0x30
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033e8:	f107 031c 	add.w	r3, r7, #28
 80033ec:	2200      	movs	r2, #0
 80033ee:	601a      	str	r2, [r3, #0]
 80033f0:	605a      	str	r2, [r3, #4]
 80033f2:	609a      	str	r2, [r3, #8]
 80033f4:	60da      	str	r2, [r3, #12]
 80033f6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a2e      	ldr	r2, [pc, #184]	; (80034b8 <HAL_SPI_MspInit+0xd8>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d129      	bne.n	8003456 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003402:	4b2e      	ldr	r3, [pc, #184]	; (80034bc <HAL_SPI_MspInit+0xdc>)
 8003404:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003406:	4a2d      	ldr	r2, [pc, #180]	; (80034bc <HAL_SPI_MspInit+0xdc>)
 8003408:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800340c:	6613      	str	r3, [r2, #96]	; 0x60
 800340e:	4b2b      	ldr	r3, [pc, #172]	; (80034bc <HAL_SPI_MspInit+0xdc>)
 8003410:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003412:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003416:	61bb      	str	r3, [r7, #24]
 8003418:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800341a:	4b28      	ldr	r3, [pc, #160]	; (80034bc <HAL_SPI_MspInit+0xdc>)
 800341c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800341e:	4a27      	ldr	r2, [pc, #156]	; (80034bc <HAL_SPI_MspInit+0xdc>)
 8003420:	f043 0301 	orr.w	r3, r3, #1
 8003424:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003426:	4b25      	ldr	r3, [pc, #148]	; (80034bc <HAL_SPI_MspInit+0xdc>)
 8003428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800342a:	f003 0301 	and.w	r3, r3, #1
 800342e:	617b      	str	r3, [r7, #20]
 8003430:	697b      	ldr	r3, [r7, #20]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003432:	23f0      	movs	r3, #240	; 0xf0
 8003434:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003436:	2302      	movs	r3, #2
 8003438:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800343a:	2300      	movs	r3, #0
 800343c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800343e:	2303      	movs	r3, #3
 8003440:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003442:	2305      	movs	r3, #5
 8003444:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003446:	f107 031c 	add.w	r3, r7, #28
 800344a:	4619      	mov	r1, r3
 800344c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003450:	f001 ff06 	bl	8005260 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003454:	e02c      	b.n	80034b0 <HAL_SPI_MspInit+0xd0>
  else if(hspi->Instance==SPI3)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a19      	ldr	r2, [pc, #100]	; (80034c0 <HAL_SPI_MspInit+0xe0>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d127      	bne.n	80034b0 <HAL_SPI_MspInit+0xd0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003460:	4b16      	ldr	r3, [pc, #88]	; (80034bc <HAL_SPI_MspInit+0xdc>)
 8003462:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003464:	4a15      	ldr	r2, [pc, #84]	; (80034bc <HAL_SPI_MspInit+0xdc>)
 8003466:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800346a:	6593      	str	r3, [r2, #88]	; 0x58
 800346c:	4b13      	ldr	r3, [pc, #76]	; (80034bc <HAL_SPI_MspInit+0xdc>)
 800346e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003470:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003474:	613b      	str	r3, [r7, #16]
 8003476:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003478:	4b10      	ldr	r3, [pc, #64]	; (80034bc <HAL_SPI_MspInit+0xdc>)
 800347a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800347c:	4a0f      	ldr	r2, [pc, #60]	; (80034bc <HAL_SPI_MspInit+0xdc>)
 800347e:	f043 0302 	orr.w	r3, r3, #2
 8003482:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003484:	4b0d      	ldr	r3, [pc, #52]	; (80034bc <HAL_SPI_MspInit+0xdc>)
 8003486:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003488:	f003 0302 	and.w	r3, r3, #2
 800348c:	60fb      	str	r3, [r7, #12]
 800348e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8003490:	2338      	movs	r3, #56	; 0x38
 8003492:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003494:	2302      	movs	r3, #2
 8003496:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003498:	2300      	movs	r3, #0
 800349a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800349c:	2303      	movs	r3, #3
 800349e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80034a0:	2306      	movs	r3, #6
 80034a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034a4:	f107 031c 	add.w	r3, r7, #28
 80034a8:	4619      	mov	r1, r3
 80034aa:	4806      	ldr	r0, [pc, #24]	; (80034c4 <HAL_SPI_MspInit+0xe4>)
 80034ac:	f001 fed8 	bl	8005260 <HAL_GPIO_Init>
}
 80034b0:	bf00      	nop
 80034b2:	3730      	adds	r7, #48	; 0x30
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	40013000 	.word	0x40013000
 80034bc:	40021000 	.word	0x40021000
 80034c0:	40003c00 	.word	0x40003c00
 80034c4:	48000400 	.word	0x48000400

080034c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b092      	sub	sp, #72	; 0x48
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034d0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80034d4:	2200      	movs	r2, #0
 80034d6:	601a      	str	r2, [r3, #0]
 80034d8:	605a      	str	r2, [r3, #4]
 80034da:	609a      	str	r2, [r3, #8]
 80034dc:	60da      	str	r2, [r3, #12]
 80034de:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a9e      	ldr	r2, [pc, #632]	; (8003760 <HAL_TIM_Base_MspInit+0x298>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d15b      	bne.n	80035a2 <HAL_TIM_Base_MspInit+0xda>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80034ea:	4b9e      	ldr	r3, [pc, #632]	; (8003764 <HAL_TIM_Base_MspInit+0x29c>)
 80034ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034ee:	4a9d      	ldr	r2, [pc, #628]	; (8003764 <HAL_TIM_Base_MspInit+0x29c>)
 80034f0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80034f4:	6613      	str	r3, [r2, #96]	; 0x60
 80034f6:	4b9b      	ldr	r3, [pc, #620]	; (8003764 <HAL_TIM_Base_MspInit+0x29c>)
 80034f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034fe:	633b      	str	r3, [r7, #48]	; 0x30
 8003500:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003502:	4b98      	ldr	r3, [pc, #608]	; (8003764 <HAL_TIM_Base_MspInit+0x29c>)
 8003504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003506:	4a97      	ldr	r2, [pc, #604]	; (8003764 <HAL_TIM_Base_MspInit+0x29c>)
 8003508:	f043 0310 	orr.w	r3, r3, #16
 800350c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800350e:	4b95      	ldr	r3, [pc, #596]	; (8003764 <HAL_TIM_Base_MspInit+0x29c>)
 8003510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003512:	f003 0310 	and.w	r3, r3, #16
 8003516:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_BKIN2
    PE15     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 800351a:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800351e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003520:	2302      	movs	r3, #2
 8003522:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003524:	2300      	movs	r3, #0
 8003526:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003528:	2300      	movs	r3, #0
 800352a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800352c:	2301      	movs	r3, #1
 800352e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003530:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003534:	4619      	mov	r1, r3
 8003536:	488c      	ldr	r0, [pc, #560]	; (8003768 <HAL_TIM_Base_MspInit+0x2a0>)
 8003538:	f001 fe92 	bl	8005260 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800353c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003540:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003542:	2302      	movs	r3, #2
 8003544:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003546:	2301      	movs	r3, #1
 8003548:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800354a:	2300      	movs	r3, #0
 800354c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800354e:	2301      	movs	r3, #1
 8003550:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003552:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003556:	4619      	mov	r1, r3
 8003558:	4883      	ldr	r0, [pc, #524]	; (8003768 <HAL_TIM_Base_MspInit+0x2a0>)
 800355a:	f001 fe81 	bl	8005260 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800355e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003562:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003564:	2302      	movs	r3, #2
 8003566:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003568:	2300      	movs	r3, #0
 800356a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800356c:	2300      	movs	r3, #0
 800356e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 8003570:	2303      	movs	r3, #3
 8003572:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003574:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003578:	4619      	mov	r1, r3
 800357a:	487b      	ldr	r0, [pc, #492]	; (8003768 <HAL_TIM_Base_MspInit+0x2a0>)
 800357c:	f001 fe70 	bl	8005260 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8003580:	2200      	movs	r2, #0
 8003582:	2100      	movs	r1, #0
 8003584:	201b      	movs	r0, #27
 8003586:	f001 fe26 	bl	80051d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800358a:	201b      	movs	r0, #27
 800358c:	f001 fe3f 	bl	800520e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 1, 0);
 8003590:	2200      	movs	r2, #0
 8003592:	2101      	movs	r1, #1
 8003594:	201b      	movs	r0, #27
 8003596:	f001 fe1e 	bl	80051d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_DisableIRQ(TIM1_CC_IRQn);
 800359a:	201b      	movs	r0, #27
 800359c:	f001 fe45 	bl	800522a <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(TIM5_IRQn);

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80035a0:	e0d9      	b.n	8003756 <HAL_TIM_Base_MspInit+0x28e>
  else if(htim_base->Instance==TIM2)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035aa:	d147      	bne.n	800363c <HAL_TIM_Base_MspInit+0x174>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80035ac:	4b6d      	ldr	r3, [pc, #436]	; (8003764 <HAL_TIM_Base_MspInit+0x29c>)
 80035ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035b0:	4a6c      	ldr	r2, [pc, #432]	; (8003764 <HAL_TIM_Base_MspInit+0x29c>)
 80035b2:	f043 0301 	orr.w	r3, r3, #1
 80035b6:	6593      	str	r3, [r2, #88]	; 0x58
 80035b8:	4b6a      	ldr	r3, [pc, #424]	; (8003764 <HAL_TIM_Base_MspInit+0x29c>)
 80035ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035bc:	f003 0301 	and.w	r3, r3, #1
 80035c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80035c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035c4:	4b67      	ldr	r3, [pc, #412]	; (8003764 <HAL_TIM_Base_MspInit+0x29c>)
 80035c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035c8:	4a66      	ldr	r2, [pc, #408]	; (8003764 <HAL_TIM_Base_MspInit+0x29c>)
 80035ca:	f043 0302 	orr.w	r3, r3, #2
 80035ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80035d0:	4b64      	ldr	r3, [pc, #400]	; (8003764 <HAL_TIM_Base_MspInit+0x29c>)
 80035d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035d4:	f003 0302 	and.w	r3, r3, #2
 80035d8:	627b      	str	r3, [r7, #36]	; 0x24
 80035da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035dc:	4b61      	ldr	r3, [pc, #388]	; (8003764 <HAL_TIM_Base_MspInit+0x29c>)
 80035de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035e0:	4a60      	ldr	r2, [pc, #384]	; (8003764 <HAL_TIM_Base_MspInit+0x29c>)
 80035e2:	f043 0301 	orr.w	r3, r3, #1
 80035e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80035e8:	4b5e      	ldr	r3, [pc, #376]	; (8003764 <HAL_TIM_Base_MspInit+0x29c>)
 80035ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035ec:	f003 0301 	and.w	r3, r3, #1
 80035f0:	623b      	str	r3, [r7, #32]
 80035f2:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80035f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035f8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035fa:	2302      	movs	r3, #2
 80035fc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035fe:	2300      	movs	r3, #0
 8003600:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003602:	2300      	movs	r3, #0
 8003604:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003606:	2301      	movs	r3, #1
 8003608:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800360a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800360e:	4619      	mov	r1, r3
 8003610:	4856      	ldr	r0, [pc, #344]	; (800376c <HAL_TIM_Base_MspInit+0x2a4>)
 8003612:	f001 fe25 	bl	8005260 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003616:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800361a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800361c:	2302      	movs	r3, #2
 800361e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003620:	2300      	movs	r3, #0
 8003622:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003624:	2300      	movs	r3, #0
 8003626:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8003628:	2302      	movs	r3, #2
 800362a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800362c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003630:	4619      	mov	r1, r3
 8003632:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003636:	f001 fe13 	bl	8005260 <HAL_GPIO_Init>
}
 800363a:	e08c      	b.n	8003756 <HAL_TIM_Base_MspInit+0x28e>
  else if(htim_base->Instance==TIM3)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a4b      	ldr	r2, [pc, #300]	; (8003770 <HAL_TIM_Base_MspInit+0x2a8>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d138      	bne.n	80036b8 <HAL_TIM_Base_MspInit+0x1f0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003646:	4b47      	ldr	r3, [pc, #284]	; (8003764 <HAL_TIM_Base_MspInit+0x29c>)
 8003648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800364a:	4a46      	ldr	r2, [pc, #280]	; (8003764 <HAL_TIM_Base_MspInit+0x29c>)
 800364c:	f043 0302 	orr.w	r3, r3, #2
 8003650:	6593      	str	r3, [r2, #88]	; 0x58
 8003652:	4b44      	ldr	r3, [pc, #272]	; (8003764 <HAL_TIM_Base_MspInit+0x29c>)
 8003654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003656:	f003 0302 	and.w	r3, r3, #2
 800365a:	61fb      	str	r3, [r7, #28]
 800365c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800365e:	4b41      	ldr	r3, [pc, #260]	; (8003764 <HAL_TIM_Base_MspInit+0x29c>)
 8003660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003662:	4a40      	ldr	r2, [pc, #256]	; (8003764 <HAL_TIM_Base_MspInit+0x29c>)
 8003664:	f043 0310 	orr.w	r3, r3, #16
 8003668:	64d3      	str	r3, [r2, #76]	; 0x4c
 800366a:	4b3e      	ldr	r3, [pc, #248]	; (8003764 <HAL_TIM_Base_MspInit+0x29c>)
 800366c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800366e:	f003 0310 	and.w	r3, r3, #16
 8003672:	61bb      	str	r3, [r7, #24]
 8003674:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003676:	2310      	movs	r3, #16
 8003678:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800367a:	2302      	movs	r3, #2
 800367c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800367e:	2301      	movs	r3, #1
 8003680:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003682:	2300      	movs	r3, #0
 8003684:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003686:	2302      	movs	r3, #2
 8003688:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800368a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800368e:	4619      	mov	r1, r3
 8003690:	4835      	ldr	r0, [pc, #212]	; (8003768 <HAL_TIM_Base_MspInit+0x2a0>)
 8003692:	f001 fde5 	bl	8005260 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003696:	2200      	movs	r2, #0
 8003698:	2100      	movs	r1, #0
 800369a:	201d      	movs	r0, #29
 800369c:	f001 fd9b 	bl	80051d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80036a0:	201d      	movs	r0, #29
 80036a2:	f001 fdb4 	bl	800520e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80036a6:	2200      	movs	r2, #0
 80036a8:	2105      	movs	r1, #5
 80036aa:	201d      	movs	r0, #29
 80036ac:	f001 fd93 	bl	80051d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_DisableIRQ(TIM3_IRQn);
 80036b0:	201d      	movs	r0, #29
 80036b2:	f001 fdba 	bl	800522a <HAL_NVIC_DisableIRQ>
}
 80036b6:	e04e      	b.n	8003756 <HAL_TIM_Base_MspInit+0x28e>
  else if(htim_base->Instance==TIM4)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a2d      	ldr	r2, [pc, #180]	; (8003774 <HAL_TIM_Base_MspInit+0x2ac>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d128      	bne.n	8003714 <HAL_TIM_Base_MspInit+0x24c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80036c2:	4b28      	ldr	r3, [pc, #160]	; (8003764 <HAL_TIM_Base_MspInit+0x29c>)
 80036c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036c6:	4a27      	ldr	r2, [pc, #156]	; (8003764 <HAL_TIM_Base_MspInit+0x29c>)
 80036c8:	f043 0304 	orr.w	r3, r3, #4
 80036cc:	6593      	str	r3, [r2, #88]	; 0x58
 80036ce:	4b25      	ldr	r3, [pc, #148]	; (8003764 <HAL_TIM_Base_MspInit+0x29c>)
 80036d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036d2:	f003 0304 	and.w	r3, r3, #4
 80036d6:	617b      	str	r3, [r7, #20]
 80036d8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80036da:	4b22      	ldr	r3, [pc, #136]	; (8003764 <HAL_TIM_Base_MspInit+0x29c>)
 80036dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036de:	4a21      	ldr	r2, [pc, #132]	; (8003764 <HAL_TIM_Base_MspInit+0x29c>)
 80036e0:	f043 0310 	orr.w	r3, r3, #16
 80036e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80036e6:	4b1f      	ldr	r3, [pc, #124]	; (8003764 <HAL_TIM_Base_MspInit+0x29c>)
 80036e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036ea:	f003 0310 	and.w	r3, r3, #16
 80036ee:	613b      	str	r3, [r7, #16]
 80036f0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80036f2:	2301      	movs	r3, #1
 80036f4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036f6:	2302      	movs	r3, #2
 80036f8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036fa:	2300      	movs	r3, #0
 80036fc:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036fe:	2300      	movs	r3, #0
 8003700:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003702:	2302      	movs	r3, #2
 8003704:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003706:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800370a:	4619      	mov	r1, r3
 800370c:	4816      	ldr	r0, [pc, #88]	; (8003768 <HAL_TIM_Base_MspInit+0x2a0>)
 800370e:	f001 fda7 	bl	8005260 <HAL_GPIO_Init>
}
 8003712:	e020      	b.n	8003756 <HAL_TIM_Base_MspInit+0x28e>
  else if(htim_base->Instance==TIM5)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a17      	ldr	r2, [pc, #92]	; (8003778 <HAL_TIM_Base_MspInit+0x2b0>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d11b      	bne.n	8003756 <HAL_TIM_Base_MspInit+0x28e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800371e:	4b11      	ldr	r3, [pc, #68]	; (8003764 <HAL_TIM_Base_MspInit+0x29c>)
 8003720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003722:	4a10      	ldr	r2, [pc, #64]	; (8003764 <HAL_TIM_Base_MspInit+0x29c>)
 8003724:	f043 0308 	orr.w	r3, r3, #8
 8003728:	6593      	str	r3, [r2, #88]	; 0x58
 800372a:	4b0e      	ldr	r3, [pc, #56]	; (8003764 <HAL_TIM_Base_MspInit+0x29c>)
 800372c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800372e:	f003 0308 	and.w	r3, r3, #8
 8003732:	60fb      	str	r3, [r7, #12]
 8003734:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8003736:	2200      	movs	r2, #0
 8003738:	2100      	movs	r1, #0
 800373a:	2032      	movs	r0, #50	; 0x32
 800373c:	f001 fd4b 	bl	80051d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003740:	2032      	movs	r0, #50	; 0x32
 8003742:	f001 fd64 	bl	800520e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM3_IRQn, 6, 0);
 8003746:	2200      	movs	r2, #0
 8003748:	2106      	movs	r1, #6
 800374a:	201d      	movs	r0, #29
 800374c:	f001 fd43 	bl	80051d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_DisableIRQ(TIM5_IRQn);
 8003750:	2032      	movs	r0, #50	; 0x32
 8003752:	f001 fd6a 	bl	800522a <HAL_NVIC_DisableIRQ>
}
 8003756:	bf00      	nop
 8003758:	3748      	adds	r7, #72	; 0x48
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	40012c00 	.word	0x40012c00
 8003764:	40021000 	.word	0x40021000
 8003768:	48001000 	.word	0x48001000
 800376c:	48000400 	.word	0x48000400
 8003770:	40000400 	.word	0x40000400
 8003774:	40000800 	.word	0x40000800
 8003778:	40000c00 	.word	0x40000c00

0800377c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800377c:	b480      	push	{r7}
 800377e:	b085      	sub	sp, #20
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM15)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a0a      	ldr	r2, [pc, #40]	; (80037b4 <HAL_TIM_PWM_MspInit+0x38>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d10b      	bne.n	80037a6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 800378e:	4b0a      	ldr	r3, [pc, #40]	; (80037b8 <HAL_TIM_PWM_MspInit+0x3c>)
 8003790:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003792:	4a09      	ldr	r2, [pc, #36]	; (80037b8 <HAL_TIM_PWM_MspInit+0x3c>)
 8003794:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003798:	6613      	str	r3, [r2, #96]	; 0x60
 800379a:	4b07      	ldr	r3, [pc, #28]	; (80037b8 <HAL_TIM_PWM_MspInit+0x3c>)
 800379c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800379e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037a2:	60fb      	str	r3, [r7, #12]
 80037a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80037a6:	bf00      	nop
 80037a8:	3714      	adds	r7, #20
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr
 80037b2:	bf00      	nop
 80037b4:	40014000 	.word	0x40014000
 80037b8:	40021000 	.word	0x40021000

080037bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b08c      	sub	sp, #48	; 0x30
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037c4:	f107 031c 	add.w	r3, r7, #28
 80037c8:	2200      	movs	r2, #0
 80037ca:	601a      	str	r2, [r3, #0]
 80037cc:	605a      	str	r2, [r3, #4]
 80037ce:	609a      	str	r2, [r3, #8]
 80037d0:	60da      	str	r2, [r3, #12]
 80037d2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a54      	ldr	r2, [pc, #336]	; (800392c <HAL_TIM_MspPostInit+0x170>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d11d      	bne.n	800381a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80037de:	4b54      	ldr	r3, [pc, #336]	; (8003930 <HAL_TIM_MspPostInit+0x174>)
 80037e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037e2:	4a53      	ldr	r2, [pc, #332]	; (8003930 <HAL_TIM_MspPostInit+0x174>)
 80037e4:	f043 0310 	orr.w	r3, r3, #16
 80037e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80037ea:	4b51      	ldr	r3, [pc, #324]	; (8003930 <HAL_TIM_MspPostInit+0x174>)
 80037ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037ee:	f003 0310 	and.w	r3, r3, #16
 80037f2:	61bb      	str	r3, [r7, #24]
 80037f4:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE8     ------> TIM1_CH1N
    PE10     ------> TIM1_CH2N
    PE12     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_12;
 80037f6:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
 80037fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037fc:	2302      	movs	r3, #2
 80037fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003800:	2300      	movs	r3, #0
 8003802:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003804:	2300      	movs	r3, #0
 8003806:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003808:	2301      	movs	r3, #1
 800380a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800380c:	f107 031c 	add.w	r3, r7, #28
 8003810:	4619      	mov	r1, r3
 8003812:	4848      	ldr	r0, [pc, #288]	; (8003934 <HAL_TIM_MspPostInit+0x178>)
 8003814:	f001 fd24 	bl	8005260 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8003818:	e083      	b.n	8003922 <HAL_TIM_MspPostInit+0x166>
  else if(htim->Instance==TIM2)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003822:	d11d      	bne.n	8003860 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003824:	4b42      	ldr	r3, [pc, #264]	; (8003930 <HAL_TIM_MspPostInit+0x174>)
 8003826:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003828:	4a41      	ldr	r2, [pc, #260]	; (8003930 <HAL_TIM_MspPostInit+0x174>)
 800382a:	f043 0301 	orr.w	r3, r3, #1
 800382e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003830:	4b3f      	ldr	r3, [pc, #252]	; (8003930 <HAL_TIM_MspPostInit+0x174>)
 8003832:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003834:	f003 0301 	and.w	r3, r3, #1
 8003838:	617b      	str	r3, [r7, #20]
 800383a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800383c:	2301      	movs	r3, #1
 800383e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003840:	2302      	movs	r3, #2
 8003842:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003844:	2300      	movs	r3, #0
 8003846:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003848:	2300      	movs	r3, #0
 800384a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800384c:	2301      	movs	r3, #1
 800384e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003850:	f107 031c 	add.w	r3, r7, #28
 8003854:	4619      	mov	r1, r3
 8003856:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800385a:	f001 fd01 	bl	8005260 <HAL_GPIO_Init>
}
 800385e:	e060      	b.n	8003922 <HAL_TIM_MspPostInit+0x166>
  else if(htim->Instance==TIM4)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a34      	ldr	r2, [pc, #208]	; (8003938 <HAL_TIM_MspPostInit+0x17c>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d139      	bne.n	80038de <HAL_TIM_MspPostInit+0x122>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800386a:	4b31      	ldr	r3, [pc, #196]	; (8003930 <HAL_TIM_MspPostInit+0x174>)
 800386c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800386e:	4a30      	ldr	r2, [pc, #192]	; (8003930 <HAL_TIM_MspPostInit+0x174>)
 8003870:	f043 0308 	orr.w	r3, r3, #8
 8003874:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003876:	4b2e      	ldr	r3, [pc, #184]	; (8003930 <HAL_TIM_MspPostInit+0x174>)
 8003878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800387a:	f003 0308 	and.w	r3, r3, #8
 800387e:	613b      	str	r3, [r7, #16]
 8003880:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003882:	4b2b      	ldr	r3, [pc, #172]	; (8003930 <HAL_TIM_MspPostInit+0x174>)
 8003884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003886:	4a2a      	ldr	r2, [pc, #168]	; (8003930 <HAL_TIM_MspPostInit+0x174>)
 8003888:	f043 0302 	orr.w	r3, r3, #2
 800388c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800388e:	4b28      	ldr	r3, [pc, #160]	; (8003930 <HAL_TIM_MspPostInit+0x174>)
 8003890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003892:	f003 0302 	and.w	r3, r3, #2
 8003896:	60fb      	str	r3, [r7, #12]
 8003898:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800389a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800389e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038a0:	2302      	movs	r3, #2
 80038a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038a4:	2300      	movs	r3, #0
 80038a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038a8:	2300      	movs	r3, #0
 80038aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80038ac:	2302      	movs	r3, #2
 80038ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80038b0:	f107 031c 	add.w	r3, r7, #28
 80038b4:	4619      	mov	r1, r3
 80038b6:	4821      	ldr	r0, [pc, #132]	; (800393c <HAL_TIM_MspPostInit+0x180>)
 80038b8:	f001 fcd2 	bl	8005260 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80038bc:	2340      	movs	r3, #64	; 0x40
 80038be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038c0:	2302      	movs	r3, #2
 80038c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038c4:	2300      	movs	r3, #0
 80038c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038c8:	2300      	movs	r3, #0
 80038ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80038cc:	2302      	movs	r3, #2
 80038ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038d0:	f107 031c 	add.w	r3, r7, #28
 80038d4:	4619      	mov	r1, r3
 80038d6:	481a      	ldr	r0, [pc, #104]	; (8003940 <HAL_TIM_MspPostInit+0x184>)
 80038d8:	f001 fcc2 	bl	8005260 <HAL_GPIO_Init>
}
 80038dc:	e021      	b.n	8003922 <HAL_TIM_MspPostInit+0x166>
  else if(htim->Instance==TIM15)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a18      	ldr	r2, [pc, #96]	; (8003944 <HAL_TIM_MspPostInit+0x188>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d11c      	bne.n	8003922 <HAL_TIM_MspPostInit+0x166>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038e8:	4b11      	ldr	r3, [pc, #68]	; (8003930 <HAL_TIM_MspPostInit+0x174>)
 80038ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038ec:	4a10      	ldr	r2, [pc, #64]	; (8003930 <HAL_TIM_MspPostInit+0x174>)
 80038ee:	f043 0302 	orr.w	r3, r3, #2
 80038f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80038f4:	4b0e      	ldr	r3, [pc, #56]	; (8003930 <HAL_TIM_MspPostInit+0x174>)
 80038f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038f8:	f003 0302 	and.w	r3, r3, #2
 80038fc:	60bb      	str	r3, [r7, #8]
 80038fe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003900:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003904:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003906:	2302      	movs	r3, #2
 8003908:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800390a:	2300      	movs	r3, #0
 800390c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800390e:	2300      	movs	r3, #0
 8003910:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8003912:	230e      	movs	r3, #14
 8003914:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003916:	f107 031c 	add.w	r3, r7, #28
 800391a:	4619      	mov	r1, r3
 800391c:	4808      	ldr	r0, [pc, #32]	; (8003940 <HAL_TIM_MspPostInit+0x184>)
 800391e:	f001 fc9f 	bl	8005260 <HAL_GPIO_Init>
}
 8003922:	bf00      	nop
 8003924:	3730      	adds	r7, #48	; 0x30
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	40012c00 	.word	0x40012c00
 8003930:	40021000 	.word	0x40021000
 8003934:	48001000 	.word	0x48001000
 8003938:	40000800 	.word	0x40000800
 800393c:	48000c00 	.word	0x48000c00
 8003940:	48000400 	.word	0x48000400
 8003944:	40014000 	.word	0x40014000

08003948 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b088      	sub	sp, #32
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a1e      	ldr	r2, [pc, #120]	; (80039d0 <HAL_SAI_MspInit+0x88>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d135      	bne.n	80039c6 <HAL_SAI_MspInit+0x7e>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 800395a:	4b1e      	ldr	r3, [pc, #120]	; (80039d4 <HAL_SAI_MspInit+0x8c>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d10b      	bne.n	800397a <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8003962:	4b1d      	ldr	r3, [pc, #116]	; (80039d8 <HAL_SAI_MspInit+0x90>)
 8003964:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003966:	4a1c      	ldr	r2, [pc, #112]	; (80039d8 <HAL_SAI_MspInit+0x90>)
 8003968:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800396c:	6613      	str	r3, [r2, #96]	; 0x60
 800396e:	4b1a      	ldr	r3, [pc, #104]	; (80039d8 <HAL_SAI_MspInit+0x90>)
 8003970:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003972:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003976:	60bb      	str	r3, [r7, #8]
 8003978:	68bb      	ldr	r3, [r7, #8]
    }
    SAI2_client ++;
 800397a:	4b16      	ldr	r3, [pc, #88]	; (80039d4 <HAL_SAI_MspInit+0x8c>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	3301      	adds	r3, #1
 8003980:	4a14      	ldr	r2, [pc, #80]	; (80039d4 <HAL_SAI_MspInit+0x8c>)
 8003982:	6013      	str	r3, [r2, #0]
    PB12     ------> SAI2_FS_A
    PB13     ------> SAI2_SCK_A
    PB15     ------> SAI2_SD_A
    PC6     ------> SAI2_MCLK_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8003984:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8003988:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800398a:	2302      	movs	r3, #2
 800398c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800398e:	2300      	movs	r3, #0
 8003990:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003992:	2300      	movs	r3, #0
 8003994:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8003996:	230d      	movs	r3, #13
 8003998:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800399a:	f107 030c 	add.w	r3, r7, #12
 800399e:	4619      	mov	r1, r3
 80039a0:	480e      	ldr	r0, [pc, #56]	; (80039dc <HAL_SAI_MspInit+0x94>)
 80039a2:	f001 fc5d 	bl	8005260 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80039a6:	2340      	movs	r3, #64	; 0x40
 80039a8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039aa:	2302      	movs	r3, #2
 80039ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ae:	2300      	movs	r3, #0
 80039b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039b2:	2300      	movs	r3, #0
 80039b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80039b6:	230d      	movs	r3, #13
 80039b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039ba:	f107 030c 	add.w	r3, r7, #12
 80039be:	4619      	mov	r1, r3
 80039c0:	4807      	ldr	r0, [pc, #28]	; (80039e0 <HAL_SAI_MspInit+0x98>)
 80039c2:	f001 fc4d 	bl	8005260 <HAL_GPIO_Init>

    }
}
 80039c6:	bf00      	nop
 80039c8:	3720      	adds	r7, #32
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	40015804 	.word	0x40015804
 80039d4:	20000854 	.word	0x20000854
 80039d8:	40021000 	.word	0x40021000
 80039dc:	48000400 	.word	0x48000400
 80039e0:	48000800 	.word	0x48000800

080039e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80039e4:	b480      	push	{r7}
 80039e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80039e8:	e7fe      	b.n	80039e8 <NMI_Handler+0x4>

080039ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80039ea:	b480      	push	{r7}
 80039ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80039ee:	e7fe      	b.n	80039ee <HardFault_Handler+0x4>

080039f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80039f0:	b480      	push	{r7}
 80039f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80039f4:	e7fe      	b.n	80039f4 <MemManage_Handler+0x4>

080039f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80039f6:	b480      	push	{r7}
 80039f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80039fa:	e7fe      	b.n	80039fa <BusFault_Handler+0x4>

080039fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80039fc:	b480      	push	{r7}
 80039fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a00:	e7fe      	b.n	8003a00 <UsageFault_Handler+0x4>

08003a02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a02:	b480      	push	{r7}
 8003a04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003a06:	bf00      	nop
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr

08003a10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a10:	b480      	push	{r7}
 8003a12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a14:	bf00      	nop
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr

08003a1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a1e:	b480      	push	{r7}
 8003a20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a22:	bf00      	nop
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr

08003a2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a30:	f000 faaa 	bl	8003f88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a34:	bf00      	nop
 8003a36:	bd80      	pop	{r7, pc}

08003a38 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */
	reset = 1;
 8003a3c:	4b03      	ldr	r3, [pc, #12]	; (8003a4c <EXTI3_IRQHandler+0x14>)
 8003a3e:	2201      	movs	r2, #1
 8003a40:	701a      	strb	r2, [r3, #0]

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8003a42:	2008      	movs	r0, #8
 8003a44:	f001 fdb6 	bl	80055b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8003a48:	bf00      	nop
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	2000023e 	.word	0x2000023e

08003a50 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	on_off = 1;
 8003a54:	4b03      	ldr	r3, [pc, #12]	; (8003a64 <EXTI9_5_IRQHandler+0x14>)
 8003a56:	2201      	movs	r2, #1
 8003a58:	701a      	strb	r2, [r3, #0]

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8003a5a:	2020      	movs	r0, #32
 8003a5c:	f001 fdaa 	bl	80055b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003a60:	bf00      	nop
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	2000023d 	.word	0x2000023d

08003a68 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b088      	sub	sp, #32
 8003a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */
	static uint8_t mode = 0;

	extern enum State state;
	const float threshod = 16.0;
 8003a6e:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8003a72:	60fb      	str	r3, [r7, #12]

	static float record[3] = {100.0, 100.0, 100.0};

	if (mode == 0) {
 8003a74:	4b4a      	ldr	r3, [pc, #296]	; (8003ba0 <TIM1_CC_IRQHandler+0x138>)
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d112      	bne.n	8003aa2 <TIM1_CC_IRQHandler+0x3a>
		// rising edge
		TIM1->CNT = 0;
 8003a7c:	4b49      	ldr	r3, [pc, #292]	; (8003ba4 <TIM1_CC_IRQHandler+0x13c>)
 8003a7e:	2200      	movs	r2, #0
 8003a80:	625a      	str	r2, [r3, #36]	; 0x24
		TIM1->CCER |= (0b1 << 1);
 8003a82:	4b48      	ldr	r3, [pc, #288]	; (8003ba4 <TIM1_CC_IRQHandler+0x13c>)
 8003a84:	6a1b      	ldr	r3, [r3, #32]
 8003a86:	4a47      	ldr	r2, [pc, #284]	; (8003ba4 <TIM1_CC_IRQHandler+0x13c>)
 8003a88:	f043 0302 	orr.w	r3, r3, #2
 8003a8c:	6213      	str	r3, [r2, #32]
		TIM1->CCER &= ~(0b1 << 3);
 8003a8e:	4b45      	ldr	r3, [pc, #276]	; (8003ba4 <TIM1_CC_IRQHandler+0x13c>)
 8003a90:	6a1b      	ldr	r3, [r3, #32]
 8003a92:	4a44      	ldr	r2, [pc, #272]	; (8003ba4 <TIM1_CC_IRQHandler+0x13c>)
 8003a94:	f023 0308 	bic.w	r3, r3, #8
 8003a98:	6213      	str	r3, [r2, #32]
		mode = 1;
 8003a9a:	4b41      	ldr	r3, [pc, #260]	; (8003ba0 <TIM1_CC_IRQHandler+0x138>)
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	701a      	strb	r2, [r3, #0]
 8003aa0:	e076      	b.n	8003b90 <TIM1_CC_IRQHandler+0x128>
	} else {
		// falling edge
		uint16_t local_count = TIM1->CNT;
 8003aa2:	4b40      	ldr	r3, [pc, #256]	; (8003ba4 <TIM1_CC_IRQHandler+0x13c>)
 8003aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa6:	817b      	strh	r3, [r7, #10]
		float distance = (float)local_count * 1.0 / 144;
 8003aa8:	897b      	ldrh	r3, [r7, #10]
 8003aaa:	ee07 3a90 	vmov	s15, r3
 8003aae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003ab2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003ba8 <TIM1_CC_IRQHandler+0x140>
 8003ab6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003aba:	edc7 7a01 	vstr	s15, [r7, #4]

		for (int i = 0; i < 2; i++) {
 8003abe:	2300      	movs	r3, #0
 8003ac0:	61fb      	str	r3, [r7, #28]
 8003ac2:	e00d      	b.n	8003ae0 <TIM1_CC_IRQHandler+0x78>
			record[i] = record[i+1];
 8003ac4:	69fb      	ldr	r3, [r7, #28]
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	4a38      	ldr	r2, [pc, #224]	; (8003bac <TIM1_CC_IRQHandler+0x144>)
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	4413      	add	r3, r2
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	4936      	ldr	r1, [pc, #216]	; (8003bac <TIM1_CC_IRQHandler+0x144>)
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	440b      	add	r3, r1
 8003ad8:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < 2; i++) {
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	3301      	adds	r3, #1
 8003ade:	61fb      	str	r3, [r7, #28]
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	ddee      	ble.n	8003ac4 <TIM1_CC_IRQHandler+0x5c>
		}

		record[2] = distance;
 8003ae6:	4a31      	ldr	r2, [pc, #196]	; (8003bac <TIM1_CC_IRQHandler+0x144>)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6093      	str	r3, [r2, #8]

		printf("Distance: %f\n", distance);
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f7fc fd43 	bl	8000578 <__aeabi_f2d>
 8003af2:	4602      	mov	r2, r0
 8003af4:	460b      	mov	r3, r1
 8003af6:	482e      	ldr	r0, [pc, #184]	; (8003bb0 <TIM1_CC_IRQHandler+0x148>)
 8003af8:	f008 ff30 	bl	800c95c <iprintf>

		float sum = 0.0;
 8003afc:	f04f 0300 	mov.w	r3, #0
 8003b00:	61bb      	str	r3, [r7, #24]

		for (int i = 0; i < 3; i++) {
 8003b02:	2300      	movs	r3, #0
 8003b04:	617b      	str	r3, [r7, #20]
 8003b06:	e00e      	b.n	8003b26 <TIM1_CC_IRQHandler+0xbe>
			sum += record[i];
 8003b08:	4a28      	ldr	r2, [pc, #160]	; (8003bac <TIM1_CC_IRQHandler+0x144>)
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	4413      	add	r3, r2
 8003b10:	edd3 7a00 	vldr	s15, [r3]
 8003b14:	ed97 7a06 	vldr	s14, [r7, #24]
 8003b18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b1c:	edc7 7a06 	vstr	s15, [r7, #24]
		for (int i = 0; i < 3; i++) {
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	3301      	adds	r3, #1
 8003b24:	617b      	str	r3, [r7, #20]
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	dded      	ble.n	8003b08 <TIM1_CC_IRQHandler+0xa0>
		}

		float result = sum / 3.0;
 8003b2c:	ed97 7a06 	vldr	s14, [r7, #24]
 8003b30:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8003b34:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b38:	edc7 7a00 	vstr	s15, [r7]

		if (result < threshod) {
 8003b3c:	ed97 7a00 	vldr	s14, [r7]
 8003b40:	edd7 7a03 	vldr	s15, [r7, #12]
 8003b44:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b4c:	d511      	bpl.n	8003b72 <TIM1_CC_IRQHandler+0x10a>
			for (int i = 0; i < 3; i++) {
 8003b4e:	2300      	movs	r3, #0
 8003b50:	613b      	str	r3, [r7, #16]
 8003b52:	e008      	b.n	8003b66 <TIM1_CC_IRQHandler+0xfe>
				record[i] = 100.0;
 8003b54:	4a15      	ldr	r2, [pc, #84]	; (8003bac <TIM1_CC_IRQHandler+0x144>)
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	009b      	lsls	r3, r3, #2
 8003b5a:	4413      	add	r3, r2
 8003b5c:	4a15      	ldr	r2, [pc, #84]	; (8003bb4 <TIM1_CC_IRQHandler+0x14c>)
 8003b5e:	601a      	str	r2, [r3, #0]
			for (int i = 0; i < 3; i++) {
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	3301      	adds	r3, #1
 8003b64:	613b      	str	r3, [r7, #16]
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	ddf3      	ble.n	8003b54 <TIM1_CC_IRQHandler+0xec>
			}

			state = AVOID_COLLISION;
 8003b6c:	4b12      	ldr	r3, [pc, #72]	; (8003bb8 <TIM1_CC_IRQHandler+0x150>)
 8003b6e:	2204      	movs	r2, #4
 8003b70:	701a      	strb	r2, [r3, #0]
		}

		TIM1->CCER &= ~(0b1 << 1);
 8003b72:	4b0c      	ldr	r3, [pc, #48]	; (8003ba4 <TIM1_CC_IRQHandler+0x13c>)
 8003b74:	6a1b      	ldr	r3, [r3, #32]
 8003b76:	4a0b      	ldr	r2, [pc, #44]	; (8003ba4 <TIM1_CC_IRQHandler+0x13c>)
 8003b78:	f023 0302 	bic.w	r3, r3, #2
 8003b7c:	6213      	str	r3, [r2, #32]
		TIM1->CCER &= ~(0b1 << 3);
 8003b7e:	4b09      	ldr	r3, [pc, #36]	; (8003ba4 <TIM1_CC_IRQHandler+0x13c>)
 8003b80:	6a1b      	ldr	r3, [r3, #32]
 8003b82:	4a08      	ldr	r2, [pc, #32]	; (8003ba4 <TIM1_CC_IRQHandler+0x13c>)
 8003b84:	f023 0308 	bic.w	r3, r3, #8
 8003b88:	6213      	str	r3, [r2, #32]
		mode = 0;
 8003b8a:	4b05      	ldr	r3, [pc, #20]	; (8003ba0 <TIM1_CC_IRQHandler+0x138>)
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	701a      	strb	r2, [r3, #0]
	}

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003b90:	480a      	ldr	r0, [pc, #40]	; (8003bbc <TIM1_CC_IRQHandler+0x154>)
 8003b92:	f006 f87f 	bl	8009c94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8003b96:	bf00      	nop
 8003b98:	3720      	adds	r7, #32
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	20000858 	.word	0x20000858
 8003ba4:	40012c00 	.word	0x40012c00
 8003ba8:	43100000 	.word	0x43100000
 8003bac:	20000008 	.word	0x20000008
 8003bb0:	0800eb58 	.word	0x0800eb58
 8003bb4:	42c80000 	.word	0x42c80000
 8003bb8:	20000232 	.word	0x20000232
 8003bbc:	20000688 	.word	0x20000688

08003bc0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b082      	sub	sp, #8
 8003bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	const uint32_t THRESHOLD = 20;
 8003bc6:	2314      	movs	r3, #20
 8003bc8:	607b      	str	r3, [r7, #4]
	extern uint32_t count;

	static uint8_t mode = 0;


	if (mode == 0) {
 8003bca:	4b29      	ldr	r3, [pc, #164]	; (8003c70 <TIM3_IRQHandler+0xb0>)
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d115      	bne.n	8003bfe <TIM3_IRQHandler+0x3e>
		// falling edge
		printf("Entering Falling Edge\n");
 8003bd2:	4828      	ldr	r0, [pc, #160]	; (8003c74 <TIM3_IRQHandler+0xb4>)
 8003bd4:	f008 ff48 	bl	800ca68 <puts>
		TIM3->CNT = 0;
 8003bd8:	4b27      	ldr	r3, [pc, #156]	; (8003c78 <TIM3_IRQHandler+0xb8>)
 8003bda:	2200      	movs	r2, #0
 8003bdc:	625a      	str	r2, [r3, #36]	; 0x24
		TIM3->CCER &= ~(0b1 << 5);
 8003bde:	4b26      	ldr	r3, [pc, #152]	; (8003c78 <TIM3_IRQHandler+0xb8>)
 8003be0:	6a1b      	ldr	r3, [r3, #32]
 8003be2:	4a25      	ldr	r2, [pc, #148]	; (8003c78 <TIM3_IRQHandler+0xb8>)
 8003be4:	f023 0320 	bic.w	r3, r3, #32
 8003be8:	6213      	str	r3, [r2, #32]
		TIM3->CCER &= ~(0b1 << 7);
 8003bea:	4b23      	ldr	r3, [pc, #140]	; (8003c78 <TIM3_IRQHandler+0xb8>)
 8003bec:	6a1b      	ldr	r3, [r3, #32]
 8003bee:	4a22      	ldr	r2, [pc, #136]	; (8003c78 <TIM3_IRQHandler+0xb8>)
 8003bf0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bf4:	6213      	str	r3, [r2, #32]
		mode = 1;
 8003bf6:	4b1e      	ldr	r3, [pc, #120]	; (8003c70 <TIM3_IRQHandler+0xb0>)
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	701a      	strb	r2, [r3, #0]
 8003bfc:	e030      	b.n	8003c60 <TIM3_IRQHandler+0xa0>
	} else {
		// rising edge;
		TIM3->CCER |= (0b1 << 5);
 8003bfe:	4b1e      	ldr	r3, [pc, #120]	; (8003c78 <TIM3_IRQHandler+0xb8>)
 8003c00:	6a1b      	ldr	r3, [r3, #32]
 8003c02:	4a1d      	ldr	r2, [pc, #116]	; (8003c78 <TIM3_IRQHandler+0xb8>)
 8003c04:	f043 0320 	orr.w	r3, r3, #32
 8003c08:	6213      	str	r3, [r2, #32]
		TIM3->CCER &= ~(0b1 << 7);
 8003c0a:	4b1b      	ldr	r3, [pc, #108]	; (8003c78 <TIM3_IRQHandler+0xb8>)
 8003c0c:	6a1b      	ldr	r3, [r3, #32]
 8003c0e:	4a1a      	ldr	r2, [pc, #104]	; (8003c78 <TIM3_IRQHandler+0xb8>)
 8003c10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c14:	6213      	str	r3, [r2, #32]
		mode = 0;
 8003c16:	4b16      	ldr	r3, [pc, #88]	; (8003c70 <TIM3_IRQHandler+0xb0>)
 8003c18:	2200      	movs	r2, #0
 8003c1a:	701a      	strb	r2, [r3, #0]
		uint32_t local_count = TIM3->CNT;
 8003c1c:	4b16      	ldr	r3, [pc, #88]	; (8003c78 <TIM3_IRQHandler+0xb8>)
 8003c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c20:	603b      	str	r3, [r7, #0]
		TIM3->CNT = 0;
 8003c22:	4b15      	ldr	r3, [pc, #84]	; (8003c78 <TIM3_IRQHandler+0xb8>)
 8003c24:	2200      	movs	r2, #0
 8003c26:	625a      	str	r2, [r3, #36]	; 0x24
		if(first_rotor == 1) {
 8003c28:	4b14      	ldr	r3, [pc, #80]	; (8003c7c <TIM3_IRQHandler+0xbc>)
 8003c2a:	781b      	ldrb	r3, [r3, #0]
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d106      	bne.n	8003c3e <TIM3_IRQHandler+0x7e>
			printf("IGNORED FIRST ROTOR SPIN!!!!!!!!!!!!!!!\n");
 8003c30:	4813      	ldr	r0, [pc, #76]	; (8003c80 <TIM3_IRQHandler+0xc0>)
 8003c32:	f008 ff19 	bl	800ca68 <puts>
			first_rotor = 0;
 8003c36:	4b11      	ldr	r3, [pc, #68]	; (8003c7c <TIM3_IRQHandler+0xbc>)
 8003c38:	2200      	movs	r2, #0
 8003c3a:	701a      	strb	r2, [r3, #0]
 8003c3c:	e00c      	b.n	8003c58 <TIM3_IRQHandler+0x98>
		}
		else if (local_count > THRESHOLD) {
 8003c3e:	683a      	ldr	r2, [r7, #0]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d908      	bls.n	8003c58 <TIM3_IRQHandler+0x98>
			ball_collected = 1;
 8003c46:	4b0f      	ldr	r3, [pc, #60]	; (8003c84 <TIM3_IRQHandler+0xc4>)
 8003c48:	2201      	movs	r2, #1
 8003c4a:	701a      	strb	r2, [r3, #0]
			ball_count++;
 8003c4c:	4b0e      	ldr	r3, [pc, #56]	; (8003c88 <TIM3_IRQHandler+0xc8>)
 8003c4e:	781b      	ldrb	r3, [r3, #0]
 8003c50:	3301      	adds	r3, #1
 8003c52:	b2da      	uxtb	r2, r3
 8003c54:	4b0c      	ldr	r3, [pc, #48]	; (8003c88 <TIM3_IRQHandler+0xc8>)
 8003c56:	701a      	strb	r2, [r3, #0]
		}
		printf("IR interrupt: Local_count %d\n", local_count);
 8003c58:	6839      	ldr	r1, [r7, #0]
 8003c5a:	480c      	ldr	r0, [pc, #48]	; (8003c8c <TIM3_IRQHandler+0xcc>)
 8003c5c:	f008 fe7e 	bl	800c95c <iprintf>
//		printf("IR interrupt: Exit rising edge trigger\n");
	}


  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003c60:	480b      	ldr	r0, [pc, #44]	; (8003c90 <TIM3_IRQHandler+0xd0>)
 8003c62:	f006 f817 	bl	8009c94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003c66:	bf00      	nop
 8003c68:	3708      	adds	r7, #8
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	20000859 	.word	0x20000859
 8003c74:	0800eb68 	.word	0x0800eb68
 8003c78:	40000400 	.word	0x40000400
 8003c7c:	2000023f 	.word	0x2000023f
 8003c80:	0800eb80 	.word	0x0800eb80
 8003c84:	20000237 	.word	0x20000237
 8003c88:	20000236 	.word	0x20000236
 8003c8c:	0800eba8 	.word	0x0800eba8
 8003c90:	20000720 	.word	0x20000720

08003c94 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
	extern enum State state;
	if (state == AVOID_COLLISION) {
 8003c98:	4b0b      	ldr	r3, [pc, #44]	; (8003cc8 <TIM5_IRQHandler+0x34>)
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	2b04      	cmp	r3, #4
 8003c9e:	d105      	bne.n	8003cac <TIM5_IRQHandler+0x18>
		extern uint8_t avoid_finished;
		avoid_finished = 1;
 8003ca0:	4b0a      	ldr	r3, [pc, #40]	; (8003ccc <TIM5_IRQHandler+0x38>)
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	701a      	strb	r2, [r3, #0]

		printf("Avoid_Collision: Timer 5 seconds\n");
 8003ca6:	480a      	ldr	r0, [pc, #40]	; (8003cd0 <TIM5_IRQHandler+0x3c>)
 8003ca8:	f008 fede 	bl	800ca68 <puts>
	}
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7,  0);
 8003cac:	2200      	movs	r2, #0
 8003cae:	2180      	movs	r1, #128	; 0x80
 8003cb0:	4808      	ldr	r0, [pc, #32]	; (8003cd4 <TIM5_IRQHandler+0x40>)
 8003cb2:	f001 fc67 	bl	8005584 <HAL_GPIO_WritePin>
	HAL_TIM_Base_Stop_IT(&htim5);
 8003cb6:	4808      	ldr	r0, [pc, #32]	; (8003cd8 <TIM5_IRQHandler+0x44>)
 8003cb8:	f005 fcb4 	bl	8009624 <HAL_TIM_Base_Stop_IT>

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003cbc:	4806      	ldr	r0, [pc, #24]	; (8003cd8 <TIM5_IRQHandler+0x44>)
 8003cbe:	f005 ffe9 	bl	8009c94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003cc2:	bf00      	nop
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	20000232 	.word	0x20000232
 8003ccc:	2000023a 	.word	0x2000023a
 8003cd0:	0800ebc8 	.word	0x0800ebc8
 8003cd4:	48001000 	.word	0x48001000
 8003cd8:	200007b8 	.word	0x200007b8

08003cdc <_getpid>:
 8003cdc:	b480      	push	{r7}
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr

08003cec <_kill>:
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b082      	sub	sp, #8
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	6039      	str	r1, [r7, #0]
 8003cf6:	f008 f8ad 	bl	800be54 <__errno>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	2216      	movs	r2, #22
 8003cfe:	601a      	str	r2, [r3, #0]
 8003d00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d04:	4618      	mov	r0, r3
 8003d06:	3708      	adds	r7, #8
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}

08003d0c <_exit>:
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b082      	sub	sp, #8
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f7ff ffe7 	bl	8003cec <_kill>
 8003d1e:	e7fe      	b.n	8003d1e <_exit+0x12>

08003d20 <_read>:
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b086      	sub	sp, #24
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	60f8      	str	r0, [r7, #12]
 8003d28:	60b9      	str	r1, [r7, #8]
 8003d2a:	607a      	str	r2, [r7, #4]
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	617b      	str	r3, [r7, #20]
 8003d30:	e00a      	b.n	8003d48 <_read+0x28>
 8003d32:	f3af 8000 	nop.w
 8003d36:	4601      	mov	r1, r0
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	1c5a      	adds	r2, r3, #1
 8003d3c:	60ba      	str	r2, [r7, #8]
 8003d3e:	b2ca      	uxtb	r2, r1
 8003d40:	701a      	strb	r2, [r3, #0]
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	3301      	adds	r3, #1
 8003d46:	617b      	str	r3, [r7, #20]
 8003d48:	697a      	ldr	r2, [r7, #20]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	dbf0      	blt.n	8003d32 <_read+0x12>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	4618      	mov	r0, r3
 8003d54:	3718      	adds	r7, #24
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}

08003d5a <_write>:
 8003d5a:	b580      	push	{r7, lr}
 8003d5c:	b086      	sub	sp, #24
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	60f8      	str	r0, [r7, #12]
 8003d62:	60b9      	str	r1, [r7, #8]
 8003d64:	607a      	str	r2, [r7, #4]
 8003d66:	2300      	movs	r3, #0
 8003d68:	617b      	str	r3, [r7, #20]
 8003d6a:	e009      	b.n	8003d80 <_write+0x26>
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	1c5a      	adds	r2, r3, #1
 8003d70:	60ba      	str	r2, [r7, #8]
 8003d72:	781b      	ldrb	r3, [r3, #0]
 8003d74:	4618      	mov	r0, r3
 8003d76:	f7fe ff85 	bl	8002c84 <__io_putchar>
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	3301      	adds	r3, #1
 8003d7e:	617b      	str	r3, [r7, #20]
 8003d80:	697a      	ldr	r2, [r7, #20]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	429a      	cmp	r2, r3
 8003d86:	dbf1      	blt.n	8003d6c <_write+0x12>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3718      	adds	r7, #24
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}

08003d92 <_close>:
 8003d92:	b480      	push	{r7}
 8003d94:	b083      	sub	sp, #12
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
 8003d9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d9e:	4618      	mov	r0, r3
 8003da0:	370c      	adds	r7, #12
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr

08003daa <_fstat>:
 8003daa:	b480      	push	{r7}
 8003dac:	b083      	sub	sp, #12
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
 8003db2:	6039      	str	r1, [r7, #0]
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003dba:	605a      	str	r2, [r3, #4]
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	370c      	adds	r7, #12
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr

08003dca <_isatty>:
 8003dca:	b480      	push	{r7}
 8003dcc:	b083      	sub	sp, #12
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	370c      	adds	r7, #12
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr

08003de0 <_lseek>:
 8003de0:	b480      	push	{r7}
 8003de2:	b085      	sub	sp, #20
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	60b9      	str	r1, [r7, #8]
 8003dea:	607a      	str	r2, [r7, #4]
 8003dec:	2300      	movs	r3, #0
 8003dee:	4618      	mov	r0, r3
 8003df0:	3714      	adds	r7, #20
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
	...

08003dfc <_sbrk>:
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b086      	sub	sp, #24
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	4a14      	ldr	r2, [pc, #80]	; (8003e58 <_sbrk+0x5c>)
 8003e06:	4b15      	ldr	r3, [pc, #84]	; (8003e5c <_sbrk+0x60>)
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	617b      	str	r3, [r7, #20]
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	613b      	str	r3, [r7, #16]
 8003e10:	4b13      	ldr	r3, [pc, #76]	; (8003e60 <_sbrk+0x64>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d102      	bne.n	8003e1e <_sbrk+0x22>
 8003e18:	4b11      	ldr	r3, [pc, #68]	; (8003e60 <_sbrk+0x64>)
 8003e1a:	4a12      	ldr	r2, [pc, #72]	; (8003e64 <_sbrk+0x68>)
 8003e1c:	601a      	str	r2, [r3, #0]
 8003e1e:	4b10      	ldr	r3, [pc, #64]	; (8003e60 <_sbrk+0x64>)
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	4413      	add	r3, r2
 8003e26:	693a      	ldr	r2, [r7, #16]
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d207      	bcs.n	8003e3c <_sbrk+0x40>
 8003e2c:	f008 f812 	bl	800be54 <__errno>
 8003e30:	4603      	mov	r3, r0
 8003e32:	220c      	movs	r2, #12
 8003e34:	601a      	str	r2, [r3, #0]
 8003e36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e3a:	e009      	b.n	8003e50 <_sbrk+0x54>
 8003e3c:	4b08      	ldr	r3, [pc, #32]	; (8003e60 <_sbrk+0x64>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	60fb      	str	r3, [r7, #12]
 8003e42:	4b07      	ldr	r3, [pc, #28]	; (8003e60 <_sbrk+0x64>)
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4413      	add	r3, r2
 8003e4a:	4a05      	ldr	r2, [pc, #20]	; (8003e60 <_sbrk+0x64>)
 8003e4c:	6013      	str	r3, [r2, #0]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	4618      	mov	r0, r3
 8003e52:	3718      	adds	r7, #24
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	200a0000 	.word	0x200a0000
 8003e5c:	00000400 	.word	0x00000400
 8003e60:	2000085c 	.word	0x2000085c
 8003e64:	20000878 	.word	0x20000878

08003e68 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003e6c:	4b06      	ldr	r3, [pc, #24]	; (8003e88 <SystemInit+0x20>)
 8003e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e72:	4a05      	ldr	r2, [pc, #20]	; (8003e88 <SystemInit+0x20>)
 8003e74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003e78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003e7c:	bf00      	nop
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr
 8003e86:	bf00      	nop
 8003e88:	e000ed00 	.word	0xe000ed00

08003e8c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003e8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003ec4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003e90:	f7ff ffea 	bl	8003e68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003e94:	480c      	ldr	r0, [pc, #48]	; (8003ec8 <LoopForever+0x6>)
  ldr r1, =_edata
 8003e96:	490d      	ldr	r1, [pc, #52]	; (8003ecc <LoopForever+0xa>)
  ldr r2, =_sidata
 8003e98:	4a0d      	ldr	r2, [pc, #52]	; (8003ed0 <LoopForever+0xe>)
  movs r3, #0
 8003e9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003e9c:	e002      	b.n	8003ea4 <LoopCopyDataInit>

08003e9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003e9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ea0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ea2:	3304      	adds	r3, #4

08003ea4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ea4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ea6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ea8:	d3f9      	bcc.n	8003e9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003eaa:	4a0a      	ldr	r2, [pc, #40]	; (8003ed4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003eac:	4c0a      	ldr	r4, [pc, #40]	; (8003ed8 <LoopForever+0x16>)
  movs r3, #0
 8003eae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003eb0:	e001      	b.n	8003eb6 <LoopFillZerobss>

08003eb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003eb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003eb4:	3204      	adds	r2, #4

08003eb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003eb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003eb8:	d3fb      	bcc.n	8003eb2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003eba:	f007 ffd1 	bl	800be60 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003ebe:	f7fd fee9 	bl	8001c94 <main>

08003ec2 <LoopForever>:

LoopForever:
    b LoopForever
 8003ec2:	e7fe      	b.n	8003ec2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003ec4:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8003ec8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ecc:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8003ed0:	0800f044 	.word	0x0800f044
  ldr r2, =_sbss
 8003ed4:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8003ed8:	20000874 	.word	0x20000874

08003edc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003edc:	e7fe      	b.n	8003edc <ADC1_IRQHandler>

08003ede <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ede:	b580      	push	{r7, lr}
 8003ee0:	b082      	sub	sp, #8
 8003ee2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ee8:	2003      	movs	r0, #3
 8003eea:	f001 f969 	bl	80051c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003eee:	2000      	movs	r0, #0
 8003ef0:	f000 f80e 	bl	8003f10 <HAL_InitTick>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d002      	beq.n	8003f00 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	71fb      	strb	r3, [r7, #7]
 8003efe:	e001      	b.n	8003f04 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003f00:	f7ff f806 	bl	8002f10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003f04:	79fb      	ldrb	r3, [r7, #7]
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3708      	adds	r7, #8
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
	...

08003f10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003f1c:	4b17      	ldr	r3, [pc, #92]	; (8003f7c <HAL_InitTick+0x6c>)
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d023      	beq.n	8003f6c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003f24:	4b16      	ldr	r3, [pc, #88]	; (8003f80 <HAL_InitTick+0x70>)
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	4b14      	ldr	r3, [pc, #80]	; (8003f7c <HAL_InitTick+0x6c>)
 8003f2a:	781b      	ldrb	r3, [r3, #0]
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003f32:	fbb3 f3f1 	udiv	r3, r3, r1
 8003f36:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f001 f983 	bl	8005246 <HAL_SYSTICK_Config>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d10f      	bne.n	8003f66 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2b0f      	cmp	r3, #15
 8003f4a:	d809      	bhi.n	8003f60 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	6879      	ldr	r1, [r7, #4]
 8003f50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f54:	f001 f93f 	bl	80051d6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003f58:	4a0a      	ldr	r2, [pc, #40]	; (8003f84 <HAL_InitTick+0x74>)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6013      	str	r3, [r2, #0]
 8003f5e:	e007      	b.n	8003f70 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	73fb      	strb	r3, [r7, #15]
 8003f64:	e004      	b.n	8003f70 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	73fb      	strb	r3, [r7, #15]
 8003f6a:	e001      	b.n	8003f70 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3710      	adds	r7, #16
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	2000001c 	.word	0x2000001c
 8003f80:	20000014 	.word	0x20000014
 8003f84:	20000018 	.word	0x20000018

08003f88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003f8c:	4b06      	ldr	r3, [pc, #24]	; (8003fa8 <HAL_IncTick+0x20>)
 8003f8e:	781b      	ldrb	r3, [r3, #0]
 8003f90:	461a      	mov	r2, r3
 8003f92:	4b06      	ldr	r3, [pc, #24]	; (8003fac <HAL_IncTick+0x24>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4413      	add	r3, r2
 8003f98:	4a04      	ldr	r2, [pc, #16]	; (8003fac <HAL_IncTick+0x24>)
 8003f9a:	6013      	str	r3, [r2, #0]
}
 8003f9c:	bf00      	nop
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr
 8003fa6:	bf00      	nop
 8003fa8:	2000001c 	.word	0x2000001c
 8003fac:	20000860 	.word	0x20000860

08003fb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	af00      	add	r7, sp, #0
  return uwTick;
 8003fb4:	4b03      	ldr	r3, [pc, #12]	; (8003fc4 <HAL_GetTick+0x14>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr
 8003fc2:	bf00      	nop
 8003fc4:	20000860 	.word	0x20000860

08003fc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003fd0:	f7ff ffee 	bl	8003fb0 <HAL_GetTick>
 8003fd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003fe0:	d005      	beq.n	8003fee <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003fe2:	4b0a      	ldr	r3, [pc, #40]	; (800400c <HAL_Delay+0x44>)
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	4413      	add	r3, r2
 8003fec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003fee:	bf00      	nop
 8003ff0:	f7ff ffde 	bl	8003fb0 <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	68fa      	ldr	r2, [r7, #12]
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d8f7      	bhi.n	8003ff0 <HAL_Delay+0x28>
  {
  }
}
 8004000:	bf00      	nop
 8004002:	bf00      	nop
 8004004:	3710      	adds	r7, #16
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
 800400a:	bf00      	nop
 800400c:	2000001c 	.word	0x2000001c

08004010 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	431a      	orrs	r2, r3
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	609a      	str	r2, [r3, #8]
}
 800402a:	bf00      	nop
 800402c:	370c      	adds	r7, #12
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr

08004036 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004036:	b480      	push	{r7}
 8004038:	b083      	sub	sp, #12
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
 800403e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	431a      	orrs	r2, r3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	609a      	str	r2, [r3, #8]
}
 8004050:	bf00      	nop
 8004052:	370c      	adds	r7, #12
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr

0800405c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800405c:	b480      	push	{r7}
 800405e:	b083      	sub	sp, #12
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800406c:	4618      	mov	r0, r3
 800406e:	370c      	adds	r7, #12
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr

08004078 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004078:	b480      	push	{r7}
 800407a:	b087      	sub	sp, #28
 800407c:	af00      	add	r7, sp, #0
 800407e:	60f8      	str	r0, [r7, #12]
 8004080:	60b9      	str	r1, [r7, #8]
 8004082:	607a      	str	r2, [r7, #4]
 8004084:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	3360      	adds	r3, #96	; 0x60
 800408a:	461a      	mov	r2, r3
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	4413      	add	r3, r2
 8004092:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	4b08      	ldr	r3, [pc, #32]	; (80040bc <LL_ADC_SetOffset+0x44>)
 800409a:	4013      	ands	r3, r2
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80040a2:	683a      	ldr	r2, [r7, #0]
 80040a4:	430a      	orrs	r2, r1
 80040a6:	4313      	orrs	r3, r2
 80040a8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80040b0:	bf00      	nop
 80040b2:	371c      	adds	r7, #28
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr
 80040bc:	03fff000 	.word	0x03fff000

080040c0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b085      	sub	sp, #20
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	3360      	adds	r3, #96	; 0x60
 80040ce:	461a      	mov	r2, r3
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	4413      	add	r3, r2
 80040d6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3714      	adds	r7, #20
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr

080040ec <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b087      	sub	sp, #28
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	60b9      	str	r1, [r7, #8]
 80040f6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	3360      	adds	r3, #96	; 0x60
 80040fc:	461a      	mov	r2, r3
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	4413      	add	r3, r2
 8004104:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	431a      	orrs	r2, r3
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004116:	bf00      	nop
 8004118:	371c      	adds	r7, #28
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr

08004122 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8004122:	b480      	push	{r7}
 8004124:	b083      	sub	sp, #12
 8004126:	af00      	add	r7, sp, #0
 8004128:	6078      	str	r0, [r7, #4]
 800412a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	695b      	ldr	r3, [r3, #20]
 8004130:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	431a      	orrs	r2, r3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	615a      	str	r2, [r3, #20]
}
 800413c:	bf00      	nop
 800413e:	370c      	adds	r7, #12
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr

08004148 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004148:	b480      	push	{r7}
 800414a:	b087      	sub	sp, #28
 800414c:	af00      	add	r7, sp, #0
 800414e:	60f8      	str	r0, [r7, #12]
 8004150:	60b9      	str	r1, [r7, #8]
 8004152:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	3330      	adds	r3, #48	; 0x30
 8004158:	461a      	mov	r2, r3
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	0a1b      	lsrs	r3, r3, #8
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	f003 030c 	and.w	r3, r3, #12
 8004164:	4413      	add	r3, r2
 8004166:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	f003 031f 	and.w	r3, r3, #31
 8004172:	211f      	movs	r1, #31
 8004174:	fa01 f303 	lsl.w	r3, r1, r3
 8004178:	43db      	mvns	r3, r3
 800417a:	401a      	ands	r2, r3
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	0e9b      	lsrs	r3, r3, #26
 8004180:	f003 011f 	and.w	r1, r3, #31
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	f003 031f 	and.w	r3, r3, #31
 800418a:	fa01 f303 	lsl.w	r3, r1, r3
 800418e:	431a      	orrs	r2, r3
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004194:	bf00      	nop
 8004196:	371c      	adds	r7, #28
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr

080041a0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b087      	sub	sp, #28
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	60f8      	str	r0, [r7, #12]
 80041a8:	60b9      	str	r1, [r7, #8]
 80041aa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	3314      	adds	r3, #20
 80041b0:	461a      	mov	r2, r3
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	0e5b      	lsrs	r3, r3, #25
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	f003 0304 	and.w	r3, r3, #4
 80041bc:	4413      	add	r3, r2
 80041be:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	0d1b      	lsrs	r3, r3, #20
 80041c8:	f003 031f 	and.w	r3, r3, #31
 80041cc:	2107      	movs	r1, #7
 80041ce:	fa01 f303 	lsl.w	r3, r1, r3
 80041d2:	43db      	mvns	r3, r3
 80041d4:	401a      	ands	r2, r3
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	0d1b      	lsrs	r3, r3, #20
 80041da:	f003 031f 	and.w	r3, r3, #31
 80041de:	6879      	ldr	r1, [r7, #4]
 80041e0:	fa01 f303 	lsl.w	r3, r1, r3
 80041e4:	431a      	orrs	r2, r3
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80041ea:	bf00      	nop
 80041ec:	371c      	adds	r7, #28
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr
	...

080041f8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b085      	sub	sp, #20
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	60b9      	str	r1, [r7, #8]
 8004202:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004210:	43db      	mvns	r3, r3
 8004212:	401a      	ands	r2, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f003 0318 	and.w	r3, r3, #24
 800421a:	4908      	ldr	r1, [pc, #32]	; (800423c <LL_ADC_SetChannelSingleDiff+0x44>)
 800421c:	40d9      	lsrs	r1, r3
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	400b      	ands	r3, r1
 8004222:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004226:	431a      	orrs	r2, r3
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800422e:	bf00      	nop
 8004230:	3714      	adds	r7, #20
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop
 800423c:	0007ffff 	.word	0x0007ffff

08004240 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004240:	b480      	push	{r7}
 8004242:	b083      	sub	sp, #12
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8004250:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	6093      	str	r3, [r2, #8]
}
 8004258:	bf00      	nop
 800425a:	370c      	adds	r7, #12
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr

08004264 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004274:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004278:	d101      	bne.n	800427e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800427a:	2301      	movs	r3, #1
 800427c:	e000      	b.n	8004280 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800427e:	2300      	movs	r3, #0
}
 8004280:	4618      	mov	r0, r3
 8004282:	370c      	adds	r7, #12
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800429c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80042a0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80042a8:	bf00      	nop
 80042aa:	370c      	adds	r7, #12
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr

080042b4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80042c8:	d101      	bne.n	80042ce <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80042ca:	2301      	movs	r3, #1
 80042cc:	e000      	b.n	80042d0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80042ce:	2300      	movs	r3, #0
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	370c      	adds	r7, #12
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr

080042dc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	f003 0301 	and.w	r3, r3, #1
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d101      	bne.n	80042f4 <LL_ADC_IsEnabled+0x18>
 80042f0:	2301      	movs	r3, #1
 80042f2:	e000      	b.n	80042f6 <LL_ADC_IsEnabled+0x1a>
 80042f4:	2300      	movs	r3, #0
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	370c      	adds	r7, #12
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr

08004302 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004302:	b480      	push	{r7}
 8004304:	b083      	sub	sp, #12
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	f003 0304 	and.w	r3, r3, #4
 8004312:	2b04      	cmp	r3, #4
 8004314:	d101      	bne.n	800431a <LL_ADC_REG_IsConversionOngoing+0x18>
 8004316:	2301      	movs	r3, #1
 8004318:	e000      	b.n	800431c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800431a:	2300      	movs	r3, #0
}
 800431c:	4618      	mov	r0, r3
 800431e:	370c      	adds	r7, #12
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr

08004328 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004328:	b480      	push	{r7}
 800432a:	b083      	sub	sp, #12
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	f003 0308 	and.w	r3, r3, #8
 8004338:	2b08      	cmp	r3, #8
 800433a:	d101      	bne.n	8004340 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800433c:	2301      	movs	r3, #1
 800433e:	e000      	b.n	8004342 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004340:	2300      	movs	r3, #0
}
 8004342:	4618      	mov	r0, r3
 8004344:	370c      	adds	r7, #12
 8004346:	46bd      	mov	sp, r7
 8004348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434c:	4770      	bx	lr
	...

08004350 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b088      	sub	sp, #32
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004358:	2300      	movs	r3, #0
 800435a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800435c:	2300      	movs	r3, #0
 800435e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d101      	bne.n	800436a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e12f      	b.n	80045ca <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	691b      	ldr	r3, [r3, #16]
 800436e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004374:	2b00      	cmp	r3, #0
 8004376:	d109      	bne.n	800438c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f7fe fded 	bl	8002f58 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2200      	movs	r2, #0
 8004388:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4618      	mov	r0, r3
 8004392:	f7ff ff67 	bl	8004264 <LL_ADC_IsDeepPowerDownEnabled>
 8004396:	4603      	mov	r3, r0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d004      	beq.n	80043a6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4618      	mov	r0, r3
 80043a2:	f7ff ff4d 	bl	8004240 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4618      	mov	r0, r3
 80043ac:	f7ff ff82 	bl	80042b4 <LL_ADC_IsInternalRegulatorEnabled>
 80043b0:	4603      	mov	r3, r0
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d115      	bne.n	80043e2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4618      	mov	r0, r3
 80043bc:	f7ff ff66 	bl	800428c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80043c0:	4b84      	ldr	r3, [pc, #528]	; (80045d4 <HAL_ADC_Init+0x284>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	099b      	lsrs	r3, r3, #6
 80043c6:	4a84      	ldr	r2, [pc, #528]	; (80045d8 <HAL_ADC_Init+0x288>)
 80043c8:	fba2 2303 	umull	r2, r3, r2, r3
 80043cc:	099b      	lsrs	r3, r3, #6
 80043ce:	3301      	adds	r3, #1
 80043d0:	005b      	lsls	r3, r3, #1
 80043d2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80043d4:	e002      	b.n	80043dc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	3b01      	subs	r3, #1
 80043da:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d1f9      	bne.n	80043d6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4618      	mov	r0, r3
 80043e8:	f7ff ff64 	bl	80042b4 <LL_ADC_IsInternalRegulatorEnabled>
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d10d      	bne.n	800440e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043f6:	f043 0210 	orr.w	r2, r3, #16
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004402:	f043 0201 	orr.w	r2, r3, #1
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4618      	mov	r0, r3
 8004414:	f7ff ff75 	bl	8004302 <LL_ADC_REG_IsConversionOngoing>
 8004418:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800441e:	f003 0310 	and.w	r3, r3, #16
 8004422:	2b00      	cmp	r3, #0
 8004424:	f040 80c8 	bne.w	80045b8 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	2b00      	cmp	r3, #0
 800442c:	f040 80c4 	bne.w	80045b8 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004434:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004438:	f043 0202 	orr.w	r2, r3, #2
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4618      	mov	r0, r3
 8004446:	f7ff ff49 	bl	80042dc <LL_ADC_IsEnabled>
 800444a:	4603      	mov	r3, r0
 800444c:	2b00      	cmp	r3, #0
 800444e:	d10b      	bne.n	8004468 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004450:	4862      	ldr	r0, [pc, #392]	; (80045dc <HAL_ADC_Init+0x28c>)
 8004452:	f7ff ff43 	bl	80042dc <LL_ADC_IsEnabled>
 8004456:	4603      	mov	r3, r0
 8004458:	2b00      	cmp	r3, #0
 800445a:	d105      	bne.n	8004468 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	4619      	mov	r1, r3
 8004462:	485f      	ldr	r0, [pc, #380]	; (80045e0 <HAL_ADC_Init+0x290>)
 8004464:	f7ff fdd4 	bl	8004010 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	7e5b      	ldrb	r3, [r3, #25]
 800446c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004472:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8004478:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800447e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004486:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004488:	4313      	orrs	r3, r2
 800448a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004492:	2b01      	cmp	r3, #1
 8004494:	d106      	bne.n	80044a4 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449a:	3b01      	subs	r3, #1
 800449c:	045b      	lsls	r3, r3, #17
 800449e:	69ba      	ldr	r2, [r7, #24]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d009      	beq.n	80044c0 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80044ba:	69ba      	ldr	r2, [r7, #24]
 80044bc:	4313      	orrs	r3, r2
 80044be:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	68da      	ldr	r2, [r3, #12]
 80044c6:	4b47      	ldr	r3, [pc, #284]	; (80045e4 <HAL_ADC_Init+0x294>)
 80044c8:	4013      	ands	r3, r2
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	6812      	ldr	r2, [r2, #0]
 80044ce:	69b9      	ldr	r1, [r7, #24]
 80044d0:	430b      	orrs	r3, r1
 80044d2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4618      	mov	r0, r3
 80044da:	f7ff ff12 	bl	8004302 <LL_ADC_REG_IsConversionOngoing>
 80044de:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4618      	mov	r0, r3
 80044e6:	f7ff ff1f 	bl	8004328 <LL_ADC_INJ_IsConversionOngoing>
 80044ea:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d140      	bne.n	8004574 <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d13d      	bne.n	8004574 <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	7e1b      	ldrb	r3, [r3, #24]
 8004500:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004502:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800450a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800450c:	4313      	orrs	r3, r2
 800450e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800451a:	f023 0306 	bic.w	r3, r3, #6
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	6812      	ldr	r2, [r2, #0]
 8004522:	69b9      	ldr	r1, [r7, #24]
 8004524:	430b      	orrs	r3, r1
 8004526:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800452e:	2b01      	cmp	r3, #1
 8004530:	d118      	bne.n	8004564 <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	691b      	ldr	r3, [r3, #16]
 8004538:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800453c:	f023 0304 	bic.w	r3, r3, #4
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004548:	4311      	orrs	r1, r2
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800454e:	4311      	orrs	r1, r2
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004554:	430a      	orrs	r2, r1
 8004556:	431a      	orrs	r2, r3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f042 0201 	orr.w	r2, r2, #1
 8004560:	611a      	str	r2, [r3, #16]
 8004562:	e007      	b.n	8004574 <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	691a      	ldr	r2, [r3, #16]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f022 0201 	bic.w	r2, r2, #1
 8004572:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	691b      	ldr	r3, [r3, #16]
 8004578:	2b01      	cmp	r3, #1
 800457a:	d10c      	bne.n	8004596 <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004582:	f023 010f 	bic.w	r1, r3, #15
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	69db      	ldr	r3, [r3, #28]
 800458a:	1e5a      	subs	r2, r3, #1
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	430a      	orrs	r2, r1
 8004592:	631a      	str	r2, [r3, #48]	; 0x30
 8004594:	e007      	b.n	80045a6 <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f022 020f 	bic.w	r2, r2, #15
 80045a4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045aa:	f023 0303 	bic.w	r3, r3, #3
 80045ae:	f043 0201 	orr.w	r2, r3, #1
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	659a      	str	r2, [r3, #88]	; 0x58
 80045b6:	e007      	b.n	80045c8 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045bc:	f043 0210 	orr.w	r2, r3, #16
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80045c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3720      	adds	r7, #32
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	20000014 	.word	0x20000014
 80045d8:	053e2d63 	.word	0x053e2d63
 80045dc:	50040000 	.word	0x50040000
 80045e0:	50040300 	.word	0x50040300
 80045e4:	fff0c007 	.word	0xfff0c007

080045e8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b0b6      	sub	sp, #216	; 0xd8
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80045f2:	2300      	movs	r3, #0
 80045f4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80045f8:	2300      	movs	r3, #0
 80045fa:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004602:	2b01      	cmp	r3, #1
 8004604:	d101      	bne.n	800460a <HAL_ADC_ConfigChannel+0x22>
 8004606:	2302      	movs	r3, #2
 8004608:	e3d5      	b.n	8004db6 <HAL_ADC_ConfigChannel+0x7ce>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2201      	movs	r2, #1
 800460e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4618      	mov	r0, r3
 8004618:	f7ff fe73 	bl	8004302 <LL_ADC_REG_IsConversionOngoing>
 800461c:	4603      	mov	r3, r0
 800461e:	2b00      	cmp	r3, #0
 8004620:	f040 83ba 	bne.w	8004d98 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	2b05      	cmp	r3, #5
 800462a:	d824      	bhi.n	8004676 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	3b02      	subs	r3, #2
 8004632:	2b03      	cmp	r3, #3
 8004634:	d81b      	bhi.n	800466e <HAL_ADC_ConfigChannel+0x86>
 8004636:	a201      	add	r2, pc, #4	; (adr r2, 800463c <HAL_ADC_ConfigChannel+0x54>)
 8004638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800463c:	0800464d 	.word	0x0800464d
 8004640:	08004655 	.word	0x08004655
 8004644:	0800465d 	.word	0x0800465d
 8004648:	08004665 	.word	0x08004665
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	220c      	movs	r2, #12
 8004650:	605a      	str	r2, [r3, #4]
          break;
 8004652:	e011      	b.n	8004678 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	2212      	movs	r2, #18
 8004658:	605a      	str	r2, [r3, #4]
          break;
 800465a:	e00d      	b.n	8004678 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	2218      	movs	r2, #24
 8004660:	605a      	str	r2, [r3, #4]
          break;
 8004662:	e009      	b.n	8004678 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	f44f 7280 	mov.w	r2, #256	; 0x100
 800466a:	605a      	str	r2, [r3, #4]
          break;
 800466c:	e004      	b.n	8004678 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	2206      	movs	r2, #6
 8004672:	605a      	str	r2, [r3, #4]
          break;
 8004674:	e000      	b.n	8004678 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8004676:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6818      	ldr	r0, [r3, #0]
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	6859      	ldr	r1, [r3, #4]
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	461a      	mov	r2, r3
 8004686:	f7ff fd5f 	bl	8004148 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4618      	mov	r0, r3
 8004690:	f7ff fe37 	bl	8004302 <LL_ADC_REG_IsConversionOngoing>
 8004694:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4618      	mov	r0, r3
 800469e:	f7ff fe43 	bl	8004328 <LL_ADC_INJ_IsConversionOngoing>
 80046a2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80046a6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	f040 81c1 	bne.w	8004a32 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80046b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	f040 81bc 	bne.w	8004a32 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046c2:	d10f      	bne.n	80046e4 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6818      	ldr	r0, [r3, #0]
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	2200      	movs	r2, #0
 80046ce:	4619      	mov	r1, r3
 80046d0:	f7ff fd66 	bl	80041a0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80046dc:	4618      	mov	r0, r3
 80046de:	f7ff fd20 	bl	8004122 <LL_ADC_SetSamplingTimeCommonConfig>
 80046e2:	e00e      	b.n	8004702 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6818      	ldr	r0, [r3, #0]
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	6819      	ldr	r1, [r3, #0]
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	461a      	mov	r2, r3
 80046f2:	f7ff fd55 	bl	80041a0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2100      	movs	r1, #0
 80046fc:	4618      	mov	r0, r3
 80046fe:	f7ff fd10 	bl	8004122 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	695a      	ldr	r2, [r3, #20]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	08db      	lsrs	r3, r3, #3
 800470e:	f003 0303 	and.w	r3, r3, #3
 8004712:	005b      	lsls	r3, r3, #1
 8004714:	fa02 f303 	lsl.w	r3, r2, r3
 8004718:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	691b      	ldr	r3, [r3, #16]
 8004720:	2b04      	cmp	r3, #4
 8004722:	d00a      	beq.n	800473a <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6818      	ldr	r0, [r3, #0]
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	6919      	ldr	r1, [r3, #16]
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004734:	f7ff fca0 	bl	8004078 <LL_ADC_SetOffset>
 8004738:	e17b      	b.n	8004a32 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	2100      	movs	r1, #0
 8004740:	4618      	mov	r0, r3
 8004742:	f7ff fcbd 	bl	80040c0 <LL_ADC_GetOffsetChannel>
 8004746:	4603      	mov	r3, r0
 8004748:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800474c:	2b00      	cmp	r3, #0
 800474e:	d10a      	bne.n	8004766 <HAL_ADC_ConfigChannel+0x17e>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	2100      	movs	r1, #0
 8004756:	4618      	mov	r0, r3
 8004758:	f7ff fcb2 	bl	80040c0 <LL_ADC_GetOffsetChannel>
 800475c:	4603      	mov	r3, r0
 800475e:	0e9b      	lsrs	r3, r3, #26
 8004760:	f003 021f 	and.w	r2, r3, #31
 8004764:	e01e      	b.n	80047a4 <HAL_ADC_ConfigChannel+0x1bc>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	2100      	movs	r1, #0
 800476c:	4618      	mov	r0, r3
 800476e:	f7ff fca7 	bl	80040c0 <LL_ADC_GetOffsetChannel>
 8004772:	4603      	mov	r3, r0
 8004774:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004778:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800477c:	fa93 f3a3 	rbit	r3, r3
 8004780:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004784:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004788:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800478c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004790:	2b00      	cmp	r3, #0
 8004792:	d101      	bne.n	8004798 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8004794:	2320      	movs	r3, #32
 8004796:	e004      	b.n	80047a2 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8004798:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800479c:	fab3 f383 	clz	r3, r3
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d105      	bne.n	80047bc <HAL_ADC_ConfigChannel+0x1d4>
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	0e9b      	lsrs	r3, r3, #26
 80047b6:	f003 031f 	and.w	r3, r3, #31
 80047ba:	e018      	b.n	80047ee <HAL_ADC_ConfigChannel+0x206>
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047c4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80047c8:	fa93 f3a3 	rbit	r3, r3
 80047cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80047d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80047d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80047d8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d101      	bne.n	80047e4 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 80047e0:	2320      	movs	r3, #32
 80047e2:	e004      	b.n	80047ee <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 80047e4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80047e8:	fab3 f383 	clz	r3, r3
 80047ec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d106      	bne.n	8004800 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2200      	movs	r2, #0
 80047f8:	2100      	movs	r1, #0
 80047fa:	4618      	mov	r0, r3
 80047fc:	f7ff fc76 	bl	80040ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2101      	movs	r1, #1
 8004806:	4618      	mov	r0, r3
 8004808:	f7ff fc5a 	bl	80040c0 <LL_ADC_GetOffsetChannel>
 800480c:	4603      	mov	r3, r0
 800480e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004812:	2b00      	cmp	r3, #0
 8004814:	d10a      	bne.n	800482c <HAL_ADC_ConfigChannel+0x244>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	2101      	movs	r1, #1
 800481c:	4618      	mov	r0, r3
 800481e:	f7ff fc4f 	bl	80040c0 <LL_ADC_GetOffsetChannel>
 8004822:	4603      	mov	r3, r0
 8004824:	0e9b      	lsrs	r3, r3, #26
 8004826:	f003 021f 	and.w	r2, r3, #31
 800482a:	e01e      	b.n	800486a <HAL_ADC_ConfigChannel+0x282>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	2101      	movs	r1, #1
 8004832:	4618      	mov	r0, r3
 8004834:	f7ff fc44 	bl	80040c0 <LL_ADC_GetOffsetChannel>
 8004838:	4603      	mov	r3, r0
 800483a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800483e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004842:	fa93 f3a3 	rbit	r3, r3
 8004846:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800484a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800484e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8004852:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004856:	2b00      	cmp	r3, #0
 8004858:	d101      	bne.n	800485e <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 800485a:	2320      	movs	r3, #32
 800485c:	e004      	b.n	8004868 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 800485e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004862:	fab3 f383 	clz	r3, r3
 8004866:	b2db      	uxtb	r3, r3
 8004868:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004872:	2b00      	cmp	r3, #0
 8004874:	d105      	bne.n	8004882 <HAL_ADC_ConfigChannel+0x29a>
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	0e9b      	lsrs	r3, r3, #26
 800487c:	f003 031f 	and.w	r3, r3, #31
 8004880:	e018      	b.n	80048b4 <HAL_ADC_ConfigChannel+0x2cc>
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800488a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800488e:	fa93 f3a3 	rbit	r3, r3
 8004892:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8004896:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800489a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800489e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d101      	bne.n	80048aa <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 80048a6:	2320      	movs	r3, #32
 80048a8:	e004      	b.n	80048b4 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 80048aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80048ae:	fab3 f383 	clz	r3, r3
 80048b2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d106      	bne.n	80048c6 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	2200      	movs	r2, #0
 80048be:	2101      	movs	r1, #1
 80048c0:	4618      	mov	r0, r3
 80048c2:	f7ff fc13 	bl	80040ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	2102      	movs	r1, #2
 80048cc:	4618      	mov	r0, r3
 80048ce:	f7ff fbf7 	bl	80040c0 <LL_ADC_GetOffsetChannel>
 80048d2:	4603      	mov	r3, r0
 80048d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d10a      	bne.n	80048f2 <HAL_ADC_ConfigChannel+0x30a>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	2102      	movs	r1, #2
 80048e2:	4618      	mov	r0, r3
 80048e4:	f7ff fbec 	bl	80040c0 <LL_ADC_GetOffsetChannel>
 80048e8:	4603      	mov	r3, r0
 80048ea:	0e9b      	lsrs	r3, r3, #26
 80048ec:	f003 021f 	and.w	r2, r3, #31
 80048f0:	e01e      	b.n	8004930 <HAL_ADC_ConfigChannel+0x348>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	2102      	movs	r1, #2
 80048f8:	4618      	mov	r0, r3
 80048fa:	f7ff fbe1 	bl	80040c0 <LL_ADC_GetOffsetChannel>
 80048fe:	4603      	mov	r3, r0
 8004900:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004904:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004908:	fa93 f3a3 	rbit	r3, r3
 800490c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8004910:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004914:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8004918:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800491c:	2b00      	cmp	r3, #0
 800491e:	d101      	bne.n	8004924 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8004920:	2320      	movs	r3, #32
 8004922:	e004      	b.n	800492e <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8004924:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004928:	fab3 f383 	clz	r3, r3
 800492c:	b2db      	uxtb	r3, r3
 800492e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004938:	2b00      	cmp	r3, #0
 800493a:	d105      	bne.n	8004948 <HAL_ADC_ConfigChannel+0x360>
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	0e9b      	lsrs	r3, r3, #26
 8004942:	f003 031f 	and.w	r3, r3, #31
 8004946:	e016      	b.n	8004976 <HAL_ADC_ConfigChannel+0x38e>
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004950:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004954:	fa93 f3a3 	rbit	r3, r3
 8004958:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800495a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800495c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8004960:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004964:	2b00      	cmp	r3, #0
 8004966:	d101      	bne.n	800496c <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8004968:	2320      	movs	r3, #32
 800496a:	e004      	b.n	8004976 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 800496c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004970:	fab3 f383 	clz	r3, r3
 8004974:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004976:	429a      	cmp	r2, r3
 8004978:	d106      	bne.n	8004988 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	2200      	movs	r2, #0
 8004980:	2102      	movs	r1, #2
 8004982:	4618      	mov	r0, r3
 8004984:	f7ff fbb2 	bl	80040ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	2103      	movs	r1, #3
 800498e:	4618      	mov	r0, r3
 8004990:	f7ff fb96 	bl	80040c0 <LL_ADC_GetOffsetChannel>
 8004994:	4603      	mov	r3, r0
 8004996:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800499a:	2b00      	cmp	r3, #0
 800499c:	d10a      	bne.n	80049b4 <HAL_ADC_ConfigChannel+0x3cc>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	2103      	movs	r1, #3
 80049a4:	4618      	mov	r0, r3
 80049a6:	f7ff fb8b 	bl	80040c0 <LL_ADC_GetOffsetChannel>
 80049aa:	4603      	mov	r3, r0
 80049ac:	0e9b      	lsrs	r3, r3, #26
 80049ae:	f003 021f 	and.w	r2, r3, #31
 80049b2:	e017      	b.n	80049e4 <HAL_ADC_ConfigChannel+0x3fc>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	2103      	movs	r1, #3
 80049ba:	4618      	mov	r0, r3
 80049bc:	f7ff fb80 	bl	80040c0 <LL_ADC_GetOffsetChannel>
 80049c0:	4603      	mov	r3, r0
 80049c2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049c6:	fa93 f3a3 	rbit	r3, r3
 80049ca:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80049cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80049ce:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80049d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d101      	bne.n	80049da <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 80049d6:	2320      	movs	r3, #32
 80049d8:	e003      	b.n	80049e2 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 80049da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049dc:	fab3 f383 	clz	r3, r3
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d105      	bne.n	80049fc <HAL_ADC_ConfigChannel+0x414>
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	0e9b      	lsrs	r3, r3, #26
 80049f6:	f003 031f 	and.w	r3, r3, #31
 80049fa:	e011      	b.n	8004a20 <HAL_ADC_ConfigChannel+0x438>
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004a04:	fa93 f3a3 	rbit	r3, r3
 8004a08:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8004a0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a0c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8004a0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d101      	bne.n	8004a18 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8004a14:	2320      	movs	r3, #32
 8004a16:	e003      	b.n	8004a20 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8004a18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a1a:	fab3 f383 	clz	r3, r3
 8004a1e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d106      	bne.n	8004a32 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	2103      	movs	r1, #3
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f7ff fb5d 	bl	80040ec <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4618      	mov	r0, r3
 8004a38:	f7ff fc50 	bl	80042dc <LL_ADC_IsEnabled>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	f040 8140 	bne.w	8004cc4 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6818      	ldr	r0, [r3, #0]
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	6819      	ldr	r1, [r3, #0]
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	461a      	mov	r2, r3
 8004a52:	f7ff fbd1 	bl	80041f8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	4a8f      	ldr	r2, [pc, #572]	; (8004c98 <HAL_ADC_ConfigChannel+0x6b0>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	f040 8131 	bne.w	8004cc4 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d10b      	bne.n	8004a8a <HAL_ADC_ConfigChannel+0x4a2>
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	0e9b      	lsrs	r3, r3, #26
 8004a78:	3301      	adds	r3, #1
 8004a7a:	f003 031f 	and.w	r3, r3, #31
 8004a7e:	2b09      	cmp	r3, #9
 8004a80:	bf94      	ite	ls
 8004a82:	2301      	movls	r3, #1
 8004a84:	2300      	movhi	r3, #0
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	e019      	b.n	8004abe <HAL_ADC_ConfigChannel+0x4d6>
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a92:	fa93 f3a3 	rbit	r3, r3
 8004a96:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8004a98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a9a:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8004a9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d101      	bne.n	8004aa6 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8004aa2:	2320      	movs	r3, #32
 8004aa4:	e003      	b.n	8004aae <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8004aa6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004aa8:	fab3 f383 	clz	r3, r3
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	3301      	adds	r3, #1
 8004ab0:	f003 031f 	and.w	r3, r3, #31
 8004ab4:	2b09      	cmp	r3, #9
 8004ab6:	bf94      	ite	ls
 8004ab8:	2301      	movls	r3, #1
 8004aba:	2300      	movhi	r3, #0
 8004abc:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d079      	beq.n	8004bb6 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d107      	bne.n	8004ade <HAL_ADC_ConfigChannel+0x4f6>
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	0e9b      	lsrs	r3, r3, #26
 8004ad4:	3301      	adds	r3, #1
 8004ad6:	069b      	lsls	r3, r3, #26
 8004ad8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004adc:	e015      	b.n	8004b0a <HAL_ADC_ConfigChannel+0x522>
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ae4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ae6:	fa93 f3a3 	rbit	r3, r3
 8004aea:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004aec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004aee:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8004af0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d101      	bne.n	8004afa <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8004af6:	2320      	movs	r3, #32
 8004af8:	e003      	b.n	8004b02 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8004afa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004afc:	fab3 f383 	clz	r3, r3
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	3301      	adds	r3, #1
 8004b04:	069b      	lsls	r3, r3, #26
 8004b06:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d109      	bne.n	8004b2a <HAL_ADC_ConfigChannel+0x542>
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	0e9b      	lsrs	r3, r3, #26
 8004b1c:	3301      	adds	r3, #1
 8004b1e:	f003 031f 	and.w	r3, r3, #31
 8004b22:	2101      	movs	r1, #1
 8004b24:	fa01 f303 	lsl.w	r3, r1, r3
 8004b28:	e017      	b.n	8004b5a <HAL_ADC_ConfigChannel+0x572>
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b32:	fa93 f3a3 	rbit	r3, r3
 8004b36:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8004b38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b3a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8004b3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d101      	bne.n	8004b46 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8004b42:	2320      	movs	r3, #32
 8004b44:	e003      	b.n	8004b4e <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8004b46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b48:	fab3 f383 	clz	r3, r3
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	3301      	adds	r3, #1
 8004b50:	f003 031f 	and.w	r3, r3, #31
 8004b54:	2101      	movs	r1, #1
 8004b56:	fa01 f303 	lsl.w	r3, r1, r3
 8004b5a:	ea42 0103 	orr.w	r1, r2, r3
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d10a      	bne.n	8004b80 <HAL_ADC_ConfigChannel+0x598>
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	0e9b      	lsrs	r3, r3, #26
 8004b70:	3301      	adds	r3, #1
 8004b72:	f003 021f 	and.w	r2, r3, #31
 8004b76:	4613      	mov	r3, r2
 8004b78:	005b      	lsls	r3, r3, #1
 8004b7a:	4413      	add	r3, r2
 8004b7c:	051b      	lsls	r3, r3, #20
 8004b7e:	e018      	b.n	8004bb2 <HAL_ADC_ConfigChannel+0x5ca>
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b88:	fa93 f3a3 	rbit	r3, r3
 8004b8c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b90:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004b92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d101      	bne.n	8004b9c <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8004b98:	2320      	movs	r3, #32
 8004b9a:	e003      	b.n	8004ba4 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8004b9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b9e:	fab3 f383 	clz	r3, r3
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	3301      	adds	r3, #1
 8004ba6:	f003 021f 	and.w	r2, r3, #31
 8004baa:	4613      	mov	r3, r2
 8004bac:	005b      	lsls	r3, r3, #1
 8004bae:	4413      	add	r3, r2
 8004bb0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004bb2:	430b      	orrs	r3, r1
 8004bb4:	e081      	b.n	8004cba <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d107      	bne.n	8004bd2 <HAL_ADC_ConfigChannel+0x5ea>
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	0e9b      	lsrs	r3, r3, #26
 8004bc8:	3301      	adds	r3, #1
 8004bca:	069b      	lsls	r3, r3, #26
 8004bcc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004bd0:	e015      	b.n	8004bfe <HAL_ADC_ConfigChannel+0x616>
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bda:	fa93 f3a3 	rbit	r3, r3
 8004bde:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8004be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004be2:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8004be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d101      	bne.n	8004bee <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8004bea:	2320      	movs	r3, #32
 8004bec:	e003      	b.n	8004bf6 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8004bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf0:	fab3 f383 	clz	r3, r3
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	3301      	adds	r3, #1
 8004bf8:	069b      	lsls	r3, r3, #26
 8004bfa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d109      	bne.n	8004c1e <HAL_ADC_ConfigChannel+0x636>
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	0e9b      	lsrs	r3, r3, #26
 8004c10:	3301      	adds	r3, #1
 8004c12:	f003 031f 	and.w	r3, r3, #31
 8004c16:	2101      	movs	r1, #1
 8004c18:	fa01 f303 	lsl.w	r3, r1, r3
 8004c1c:	e017      	b.n	8004c4e <HAL_ADC_ConfigChannel+0x666>
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c24:	6a3b      	ldr	r3, [r7, #32]
 8004c26:	fa93 f3a3 	rbit	r3, r3
 8004c2a:	61fb      	str	r3, [r7, #28]
  return result;
 8004c2c:	69fb      	ldr	r3, [r7, #28]
 8004c2e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d101      	bne.n	8004c3a <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8004c36:	2320      	movs	r3, #32
 8004c38:	e003      	b.n	8004c42 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8004c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3c:	fab3 f383 	clz	r3, r3
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	3301      	adds	r3, #1
 8004c44:	f003 031f 	and.w	r3, r3, #31
 8004c48:	2101      	movs	r1, #1
 8004c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c4e:	ea42 0103 	orr.w	r1, r2, r3
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d10d      	bne.n	8004c7a <HAL_ADC_ConfigChannel+0x692>
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	0e9b      	lsrs	r3, r3, #26
 8004c64:	3301      	adds	r3, #1
 8004c66:	f003 021f 	and.w	r2, r3, #31
 8004c6a:	4613      	mov	r3, r2
 8004c6c:	005b      	lsls	r3, r3, #1
 8004c6e:	4413      	add	r3, r2
 8004c70:	3b1e      	subs	r3, #30
 8004c72:	051b      	lsls	r3, r3, #20
 8004c74:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004c78:	e01e      	b.n	8004cb8 <HAL_ADC_ConfigChannel+0x6d0>
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	fa93 f3a3 	rbit	r3, r3
 8004c86:	613b      	str	r3, [r7, #16]
  return result;
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004c8c:	69bb      	ldr	r3, [r7, #24]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d104      	bne.n	8004c9c <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8004c92:	2320      	movs	r3, #32
 8004c94:	e006      	b.n	8004ca4 <HAL_ADC_ConfigChannel+0x6bc>
 8004c96:	bf00      	nop
 8004c98:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004c9c:	69bb      	ldr	r3, [r7, #24]
 8004c9e:	fab3 f383 	clz	r3, r3
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	3301      	adds	r3, #1
 8004ca6:	f003 021f 	and.w	r2, r3, #31
 8004caa:	4613      	mov	r3, r2
 8004cac:	005b      	lsls	r3, r3, #1
 8004cae:	4413      	add	r3, r2
 8004cb0:	3b1e      	subs	r3, #30
 8004cb2:	051b      	lsls	r3, r3, #20
 8004cb4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004cb8:	430b      	orrs	r3, r1
 8004cba:	683a      	ldr	r2, [r7, #0]
 8004cbc:	6892      	ldr	r2, [r2, #8]
 8004cbe:	4619      	mov	r1, r3
 8004cc0:	f7ff fa6e 	bl	80041a0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	4b3d      	ldr	r3, [pc, #244]	; (8004dc0 <HAL_ADC_ConfigChannel+0x7d8>)
 8004cca:	4013      	ands	r3, r2
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d06c      	beq.n	8004daa <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004cd0:	483c      	ldr	r0, [pc, #240]	; (8004dc4 <HAL_ADC_ConfigChannel+0x7dc>)
 8004cd2:	f7ff f9c3 	bl	800405c <LL_ADC_GetCommonPathInternalCh>
 8004cd6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a3a      	ldr	r2, [pc, #232]	; (8004dc8 <HAL_ADC_ConfigChannel+0x7e0>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d127      	bne.n	8004d34 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004ce4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004ce8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d121      	bne.n	8004d34 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a35      	ldr	r2, [pc, #212]	; (8004dcc <HAL_ADC_ConfigChannel+0x7e4>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d157      	bne.n	8004daa <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004cfa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004cfe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004d02:	4619      	mov	r1, r3
 8004d04:	482f      	ldr	r0, [pc, #188]	; (8004dc4 <HAL_ADC_ConfigChannel+0x7dc>)
 8004d06:	f7ff f996 	bl	8004036 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004d0a:	4b31      	ldr	r3, [pc, #196]	; (8004dd0 <HAL_ADC_ConfigChannel+0x7e8>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	099b      	lsrs	r3, r3, #6
 8004d10:	4a30      	ldr	r2, [pc, #192]	; (8004dd4 <HAL_ADC_ConfigChannel+0x7ec>)
 8004d12:	fba2 2303 	umull	r2, r3, r2, r3
 8004d16:	099b      	lsrs	r3, r3, #6
 8004d18:	1c5a      	adds	r2, r3, #1
 8004d1a:	4613      	mov	r3, r2
 8004d1c:	005b      	lsls	r3, r3, #1
 8004d1e:	4413      	add	r3, r2
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004d24:	e002      	b.n	8004d2c <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	3b01      	subs	r3, #1
 8004d2a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d1f9      	bne.n	8004d26 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004d32:	e03a      	b.n	8004daa <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a27      	ldr	r2, [pc, #156]	; (8004dd8 <HAL_ADC_ConfigChannel+0x7f0>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d113      	bne.n	8004d66 <HAL_ADC_ConfigChannel+0x77e>
 8004d3e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004d42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d10d      	bne.n	8004d66 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a1f      	ldr	r2, [pc, #124]	; (8004dcc <HAL_ADC_ConfigChannel+0x7e4>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d12a      	bne.n	8004daa <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004d54:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004d58:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d5c:	4619      	mov	r1, r3
 8004d5e:	4819      	ldr	r0, [pc, #100]	; (8004dc4 <HAL_ADC_ConfigChannel+0x7dc>)
 8004d60:	f7ff f969 	bl	8004036 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004d64:	e021      	b.n	8004daa <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a1c      	ldr	r2, [pc, #112]	; (8004ddc <HAL_ADC_ConfigChannel+0x7f4>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d11c      	bne.n	8004daa <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004d70:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004d74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d116      	bne.n	8004daa <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a12      	ldr	r2, [pc, #72]	; (8004dcc <HAL_ADC_ConfigChannel+0x7e4>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d111      	bne.n	8004daa <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004d86:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004d8a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004d8e:	4619      	mov	r1, r3
 8004d90:	480c      	ldr	r0, [pc, #48]	; (8004dc4 <HAL_ADC_ConfigChannel+0x7dc>)
 8004d92:	f7ff f950 	bl	8004036 <LL_ADC_SetCommonPathInternalCh>
 8004d96:	e008      	b.n	8004daa <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d9c:	f043 0220 	orr.w	r2, r3, #32
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2200      	movs	r2, #0
 8004dae:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8004db2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	37d8      	adds	r7, #216	; 0xd8
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	80080000 	.word	0x80080000
 8004dc4:	50040300 	.word	0x50040300
 8004dc8:	c7520000 	.word	0xc7520000
 8004dcc:	50040000 	.word	0x50040000
 8004dd0:	20000014 	.word	0x20000014
 8004dd4:	053e2d63 	.word	0x053e2d63
 8004dd8:	cb840000 	.word	0xcb840000
 8004ddc:	80000001 	.word	0x80000001

08004de0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b084      	sub	sp, #16
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d101      	bne.n	8004df2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e0ed      	b.n	8004fce <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d102      	bne.n	8004e04 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f7fe f91c 	bl	800303c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f042 0201 	orr.w	r2, r2, #1
 8004e12:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004e14:	f7ff f8cc 	bl	8003fb0 <HAL_GetTick>
 8004e18:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004e1a:	e012      	b.n	8004e42 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004e1c:	f7ff f8c8 	bl	8003fb0 <HAL_GetTick>
 8004e20:	4602      	mov	r2, r0
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	1ad3      	subs	r3, r2, r3
 8004e26:	2b0a      	cmp	r3, #10
 8004e28:	d90b      	bls.n	8004e42 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2205      	movs	r2, #5
 8004e3a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e0c5      	b.n	8004fce <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	f003 0301 	and.w	r3, r3, #1
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d0e5      	beq.n	8004e1c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f022 0202 	bic.w	r2, r2, #2
 8004e5e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004e60:	f7ff f8a6 	bl	8003fb0 <HAL_GetTick>
 8004e64:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004e66:	e012      	b.n	8004e8e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004e68:	f7ff f8a2 	bl	8003fb0 <HAL_GetTick>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	2b0a      	cmp	r3, #10
 8004e74:	d90b      	bls.n	8004e8e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2205      	movs	r2, #5
 8004e86:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e09f      	b.n	8004fce <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	f003 0302 	and.w	r3, r3, #2
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d1e5      	bne.n	8004e68 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	7e1b      	ldrb	r3, [r3, #24]
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d108      	bne.n	8004eb6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004eb2:	601a      	str	r2, [r3, #0]
 8004eb4:	e007      	b.n	8004ec6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ec4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	7e5b      	ldrb	r3, [r3, #25]
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d108      	bne.n	8004ee0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004edc:	601a      	str	r2, [r3, #0]
 8004ede:	e007      	b.n	8004ef0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004eee:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	7e9b      	ldrb	r3, [r3, #26]
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d108      	bne.n	8004f0a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f042 0220 	orr.w	r2, r2, #32
 8004f06:	601a      	str	r2, [r3, #0]
 8004f08:	e007      	b.n	8004f1a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f022 0220 	bic.w	r2, r2, #32
 8004f18:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	7edb      	ldrb	r3, [r3, #27]
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d108      	bne.n	8004f34 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f022 0210 	bic.w	r2, r2, #16
 8004f30:	601a      	str	r2, [r3, #0]
 8004f32:	e007      	b.n	8004f44 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f042 0210 	orr.w	r2, r2, #16
 8004f42:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	7f1b      	ldrb	r3, [r3, #28]
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d108      	bne.n	8004f5e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f042 0208 	orr.w	r2, r2, #8
 8004f5a:	601a      	str	r2, [r3, #0]
 8004f5c:	e007      	b.n	8004f6e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f022 0208 	bic.w	r2, r2, #8
 8004f6c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	7f5b      	ldrb	r3, [r3, #29]
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d108      	bne.n	8004f88 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f042 0204 	orr.w	r2, r2, #4
 8004f84:	601a      	str	r2, [r3, #0]
 8004f86:	e007      	b.n	8004f98 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f022 0204 	bic.w	r2, r2, #4
 8004f96:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	689a      	ldr	r2, [r3, #8]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	431a      	orrs	r2, r3
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	691b      	ldr	r3, [r3, #16]
 8004fa6:	431a      	orrs	r2, r3
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	695b      	ldr	r3, [r3, #20]
 8004fac:	ea42 0103 	orr.w	r1, r2, r3
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	1e5a      	subs	r2, r3, #1
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	430a      	orrs	r2, r1
 8004fbc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004fcc:	2300      	movs	r3, #0
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3710      	adds	r7, #16
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
	...

08004fd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b085      	sub	sp, #20
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f003 0307 	and.w	r3, r3, #7
 8004fe6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004fe8:	4b0c      	ldr	r3, [pc, #48]	; (800501c <__NVIC_SetPriorityGrouping+0x44>)
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004fee:	68ba      	ldr	r2, [r7, #8]
 8004ff0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004ff4:	4013      	ands	r3, r2
 8004ff6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005000:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005004:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005008:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800500a:	4a04      	ldr	r2, [pc, #16]	; (800501c <__NVIC_SetPriorityGrouping+0x44>)
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	60d3      	str	r3, [r2, #12]
}
 8005010:	bf00      	nop
 8005012:	3714      	adds	r7, #20
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr
 800501c:	e000ed00 	.word	0xe000ed00

08005020 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005020:	b480      	push	{r7}
 8005022:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005024:	4b04      	ldr	r3, [pc, #16]	; (8005038 <__NVIC_GetPriorityGrouping+0x18>)
 8005026:	68db      	ldr	r3, [r3, #12]
 8005028:	0a1b      	lsrs	r3, r3, #8
 800502a:	f003 0307 	and.w	r3, r3, #7
}
 800502e:	4618      	mov	r0, r3
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr
 8005038:	e000ed00 	.word	0xe000ed00

0800503c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800503c:	b480      	push	{r7}
 800503e:	b083      	sub	sp, #12
 8005040:	af00      	add	r7, sp, #0
 8005042:	4603      	mov	r3, r0
 8005044:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800504a:	2b00      	cmp	r3, #0
 800504c:	db0b      	blt.n	8005066 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800504e:	79fb      	ldrb	r3, [r7, #7]
 8005050:	f003 021f 	and.w	r2, r3, #31
 8005054:	4907      	ldr	r1, [pc, #28]	; (8005074 <__NVIC_EnableIRQ+0x38>)
 8005056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800505a:	095b      	lsrs	r3, r3, #5
 800505c:	2001      	movs	r0, #1
 800505e:	fa00 f202 	lsl.w	r2, r0, r2
 8005062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005066:	bf00      	nop
 8005068:	370c      	adds	r7, #12
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr
 8005072:	bf00      	nop
 8005074:	e000e100 	.word	0xe000e100

08005078 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005078:	b480      	push	{r7}
 800507a:	b083      	sub	sp, #12
 800507c:	af00      	add	r7, sp, #0
 800507e:	4603      	mov	r3, r0
 8005080:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005086:	2b00      	cmp	r3, #0
 8005088:	db12      	blt.n	80050b0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800508a:	79fb      	ldrb	r3, [r7, #7]
 800508c:	f003 021f 	and.w	r2, r3, #31
 8005090:	490a      	ldr	r1, [pc, #40]	; (80050bc <__NVIC_DisableIRQ+0x44>)
 8005092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005096:	095b      	lsrs	r3, r3, #5
 8005098:	2001      	movs	r0, #1
 800509a:	fa00 f202 	lsl.w	r2, r0, r2
 800509e:	3320      	adds	r3, #32
 80050a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80050a4:	f3bf 8f4f 	dsb	sy
}
 80050a8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80050aa:	f3bf 8f6f 	isb	sy
}
 80050ae:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80050b0:	bf00      	nop
 80050b2:	370c      	adds	r7, #12
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr
 80050bc:	e000e100 	.word	0xe000e100

080050c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b083      	sub	sp, #12
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	4603      	mov	r3, r0
 80050c8:	6039      	str	r1, [r7, #0]
 80050ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	db0a      	blt.n	80050ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	b2da      	uxtb	r2, r3
 80050d8:	490c      	ldr	r1, [pc, #48]	; (800510c <__NVIC_SetPriority+0x4c>)
 80050da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050de:	0112      	lsls	r2, r2, #4
 80050e0:	b2d2      	uxtb	r2, r2
 80050e2:	440b      	add	r3, r1
 80050e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80050e8:	e00a      	b.n	8005100 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	b2da      	uxtb	r2, r3
 80050ee:	4908      	ldr	r1, [pc, #32]	; (8005110 <__NVIC_SetPriority+0x50>)
 80050f0:	79fb      	ldrb	r3, [r7, #7]
 80050f2:	f003 030f 	and.w	r3, r3, #15
 80050f6:	3b04      	subs	r3, #4
 80050f8:	0112      	lsls	r2, r2, #4
 80050fa:	b2d2      	uxtb	r2, r2
 80050fc:	440b      	add	r3, r1
 80050fe:	761a      	strb	r2, [r3, #24]
}
 8005100:	bf00      	nop
 8005102:	370c      	adds	r7, #12
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr
 800510c:	e000e100 	.word	0xe000e100
 8005110:	e000ed00 	.word	0xe000ed00

08005114 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005114:	b480      	push	{r7}
 8005116:	b089      	sub	sp, #36	; 0x24
 8005118:	af00      	add	r7, sp, #0
 800511a:	60f8      	str	r0, [r7, #12]
 800511c:	60b9      	str	r1, [r7, #8]
 800511e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f003 0307 	and.w	r3, r3, #7
 8005126:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005128:	69fb      	ldr	r3, [r7, #28]
 800512a:	f1c3 0307 	rsb	r3, r3, #7
 800512e:	2b04      	cmp	r3, #4
 8005130:	bf28      	it	cs
 8005132:	2304      	movcs	r3, #4
 8005134:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005136:	69fb      	ldr	r3, [r7, #28]
 8005138:	3304      	adds	r3, #4
 800513a:	2b06      	cmp	r3, #6
 800513c:	d902      	bls.n	8005144 <NVIC_EncodePriority+0x30>
 800513e:	69fb      	ldr	r3, [r7, #28]
 8005140:	3b03      	subs	r3, #3
 8005142:	e000      	b.n	8005146 <NVIC_EncodePriority+0x32>
 8005144:	2300      	movs	r3, #0
 8005146:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005148:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800514c:	69bb      	ldr	r3, [r7, #24]
 800514e:	fa02 f303 	lsl.w	r3, r2, r3
 8005152:	43da      	mvns	r2, r3
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	401a      	ands	r2, r3
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800515c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	fa01 f303 	lsl.w	r3, r1, r3
 8005166:	43d9      	mvns	r1, r3
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800516c:	4313      	orrs	r3, r2
         );
}
 800516e:	4618      	mov	r0, r3
 8005170:	3724      	adds	r7, #36	; 0x24
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr
	...

0800517c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b082      	sub	sp, #8
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	3b01      	subs	r3, #1
 8005188:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800518c:	d301      	bcc.n	8005192 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800518e:	2301      	movs	r3, #1
 8005190:	e00f      	b.n	80051b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005192:	4a0a      	ldr	r2, [pc, #40]	; (80051bc <SysTick_Config+0x40>)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	3b01      	subs	r3, #1
 8005198:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800519a:	210f      	movs	r1, #15
 800519c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80051a0:	f7ff ff8e 	bl	80050c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80051a4:	4b05      	ldr	r3, [pc, #20]	; (80051bc <SysTick_Config+0x40>)
 80051a6:	2200      	movs	r2, #0
 80051a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80051aa:	4b04      	ldr	r3, [pc, #16]	; (80051bc <SysTick_Config+0x40>)
 80051ac:	2207      	movs	r2, #7
 80051ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80051b0:	2300      	movs	r3, #0
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3708      	adds	r7, #8
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}
 80051ba:	bf00      	nop
 80051bc:	e000e010 	.word	0xe000e010

080051c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b082      	sub	sp, #8
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f7ff ff05 	bl	8004fd8 <__NVIC_SetPriorityGrouping>
}
 80051ce:	bf00      	nop
 80051d0:	3708      	adds	r7, #8
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}

080051d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80051d6:	b580      	push	{r7, lr}
 80051d8:	b086      	sub	sp, #24
 80051da:	af00      	add	r7, sp, #0
 80051dc:	4603      	mov	r3, r0
 80051de:	60b9      	str	r1, [r7, #8]
 80051e0:	607a      	str	r2, [r7, #4]
 80051e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80051e4:	2300      	movs	r3, #0
 80051e6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80051e8:	f7ff ff1a 	bl	8005020 <__NVIC_GetPriorityGrouping>
 80051ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80051ee:	687a      	ldr	r2, [r7, #4]
 80051f0:	68b9      	ldr	r1, [r7, #8]
 80051f2:	6978      	ldr	r0, [r7, #20]
 80051f4:	f7ff ff8e 	bl	8005114 <NVIC_EncodePriority>
 80051f8:	4602      	mov	r2, r0
 80051fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80051fe:	4611      	mov	r1, r2
 8005200:	4618      	mov	r0, r3
 8005202:	f7ff ff5d 	bl	80050c0 <__NVIC_SetPriority>
}
 8005206:	bf00      	nop
 8005208:	3718      	adds	r7, #24
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}

0800520e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800520e:	b580      	push	{r7, lr}
 8005210:	b082      	sub	sp, #8
 8005212:	af00      	add	r7, sp, #0
 8005214:	4603      	mov	r3, r0
 8005216:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005218:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800521c:	4618      	mov	r0, r3
 800521e:	f7ff ff0d 	bl	800503c <__NVIC_EnableIRQ>
}
 8005222:	bf00      	nop
 8005224:	3708      	adds	r7, #8
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}

0800522a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800522a:	b580      	push	{r7, lr}
 800522c:	b082      	sub	sp, #8
 800522e:	af00      	add	r7, sp, #0
 8005230:	4603      	mov	r3, r0
 8005232:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005234:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005238:	4618      	mov	r0, r3
 800523a:	f7ff ff1d 	bl	8005078 <__NVIC_DisableIRQ>
}
 800523e:	bf00      	nop
 8005240:	3708      	adds	r7, #8
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}

08005246 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005246:	b580      	push	{r7, lr}
 8005248:	b082      	sub	sp, #8
 800524a:	af00      	add	r7, sp, #0
 800524c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f7ff ff94 	bl	800517c <SysTick_Config>
 8005254:	4603      	mov	r3, r0
}
 8005256:	4618      	mov	r0, r3
 8005258:	3708      	adds	r7, #8
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}
	...

08005260 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005260:	b480      	push	{r7}
 8005262:	b087      	sub	sp, #28
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800526a:	2300      	movs	r3, #0
 800526c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800526e:	e166      	b.n	800553e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	2101      	movs	r1, #1
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	fa01 f303 	lsl.w	r3, r1, r3
 800527c:	4013      	ands	r3, r2
 800527e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2b00      	cmp	r3, #0
 8005284:	f000 8158 	beq.w	8005538 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	f003 0303 	and.w	r3, r3, #3
 8005290:	2b01      	cmp	r3, #1
 8005292:	d005      	beq.n	80052a0 <HAL_GPIO_Init+0x40>
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	f003 0303 	and.w	r3, r3, #3
 800529c:	2b02      	cmp	r3, #2
 800529e:	d130      	bne.n	8005302 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	005b      	lsls	r3, r3, #1
 80052aa:	2203      	movs	r2, #3
 80052ac:	fa02 f303 	lsl.w	r3, r2, r3
 80052b0:	43db      	mvns	r3, r3
 80052b2:	693a      	ldr	r2, [r7, #16]
 80052b4:	4013      	ands	r3, r2
 80052b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	68da      	ldr	r2, [r3, #12]
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	005b      	lsls	r3, r3, #1
 80052c0:	fa02 f303 	lsl.w	r3, r2, r3
 80052c4:	693a      	ldr	r2, [r7, #16]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	693a      	ldr	r2, [r7, #16]
 80052ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80052d6:	2201      	movs	r2, #1
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	fa02 f303 	lsl.w	r3, r2, r3
 80052de:	43db      	mvns	r3, r3
 80052e0:	693a      	ldr	r2, [r7, #16]
 80052e2:	4013      	ands	r3, r2
 80052e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	091b      	lsrs	r3, r3, #4
 80052ec:	f003 0201 	and.w	r2, r3, #1
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	fa02 f303 	lsl.w	r3, r2, r3
 80052f6:	693a      	ldr	r2, [r7, #16]
 80052f8:	4313      	orrs	r3, r2
 80052fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	693a      	ldr	r2, [r7, #16]
 8005300:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	f003 0303 	and.w	r3, r3, #3
 800530a:	2b03      	cmp	r3, #3
 800530c:	d017      	beq.n	800533e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	68db      	ldr	r3, [r3, #12]
 8005312:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	005b      	lsls	r3, r3, #1
 8005318:	2203      	movs	r2, #3
 800531a:	fa02 f303 	lsl.w	r3, r2, r3
 800531e:	43db      	mvns	r3, r3
 8005320:	693a      	ldr	r2, [r7, #16]
 8005322:	4013      	ands	r3, r2
 8005324:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	689a      	ldr	r2, [r3, #8]
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	005b      	lsls	r3, r3, #1
 800532e:	fa02 f303 	lsl.w	r3, r2, r3
 8005332:	693a      	ldr	r2, [r7, #16]
 8005334:	4313      	orrs	r3, r2
 8005336:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	693a      	ldr	r2, [r7, #16]
 800533c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	f003 0303 	and.w	r3, r3, #3
 8005346:	2b02      	cmp	r3, #2
 8005348:	d123      	bne.n	8005392 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	08da      	lsrs	r2, r3, #3
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	3208      	adds	r2, #8
 8005352:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005356:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	f003 0307 	and.w	r3, r3, #7
 800535e:	009b      	lsls	r3, r3, #2
 8005360:	220f      	movs	r2, #15
 8005362:	fa02 f303 	lsl.w	r3, r2, r3
 8005366:	43db      	mvns	r3, r3
 8005368:	693a      	ldr	r2, [r7, #16]
 800536a:	4013      	ands	r3, r2
 800536c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	691a      	ldr	r2, [r3, #16]
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	f003 0307 	and.w	r3, r3, #7
 8005378:	009b      	lsls	r3, r3, #2
 800537a:	fa02 f303 	lsl.w	r3, r2, r3
 800537e:	693a      	ldr	r2, [r7, #16]
 8005380:	4313      	orrs	r3, r2
 8005382:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	08da      	lsrs	r2, r3, #3
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	3208      	adds	r2, #8
 800538c:	6939      	ldr	r1, [r7, #16]
 800538e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	005b      	lsls	r3, r3, #1
 800539c:	2203      	movs	r2, #3
 800539e:	fa02 f303 	lsl.w	r3, r2, r3
 80053a2:	43db      	mvns	r3, r3
 80053a4:	693a      	ldr	r2, [r7, #16]
 80053a6:	4013      	ands	r3, r2
 80053a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	f003 0203 	and.w	r2, r3, #3
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	005b      	lsls	r3, r3, #1
 80053b6:	fa02 f303 	lsl.w	r3, r2, r3
 80053ba:	693a      	ldr	r2, [r7, #16]
 80053bc:	4313      	orrs	r3, r2
 80053be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	693a      	ldr	r2, [r7, #16]
 80053c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	f000 80b2 	beq.w	8005538 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80053d4:	4b61      	ldr	r3, [pc, #388]	; (800555c <HAL_GPIO_Init+0x2fc>)
 80053d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053d8:	4a60      	ldr	r2, [pc, #384]	; (800555c <HAL_GPIO_Init+0x2fc>)
 80053da:	f043 0301 	orr.w	r3, r3, #1
 80053de:	6613      	str	r3, [r2, #96]	; 0x60
 80053e0:	4b5e      	ldr	r3, [pc, #376]	; (800555c <HAL_GPIO_Init+0x2fc>)
 80053e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053e4:	f003 0301 	and.w	r3, r3, #1
 80053e8:	60bb      	str	r3, [r7, #8]
 80053ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80053ec:	4a5c      	ldr	r2, [pc, #368]	; (8005560 <HAL_GPIO_Init+0x300>)
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	089b      	lsrs	r3, r3, #2
 80053f2:	3302      	adds	r3, #2
 80053f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	f003 0303 	and.w	r3, r3, #3
 8005400:	009b      	lsls	r3, r3, #2
 8005402:	220f      	movs	r2, #15
 8005404:	fa02 f303 	lsl.w	r3, r2, r3
 8005408:	43db      	mvns	r3, r3
 800540a:	693a      	ldr	r2, [r7, #16]
 800540c:	4013      	ands	r3, r2
 800540e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005416:	d02b      	beq.n	8005470 <HAL_GPIO_Init+0x210>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	4a52      	ldr	r2, [pc, #328]	; (8005564 <HAL_GPIO_Init+0x304>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d025      	beq.n	800546c <HAL_GPIO_Init+0x20c>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	4a51      	ldr	r2, [pc, #324]	; (8005568 <HAL_GPIO_Init+0x308>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d01f      	beq.n	8005468 <HAL_GPIO_Init+0x208>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	4a50      	ldr	r2, [pc, #320]	; (800556c <HAL_GPIO_Init+0x30c>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d019      	beq.n	8005464 <HAL_GPIO_Init+0x204>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	4a4f      	ldr	r2, [pc, #316]	; (8005570 <HAL_GPIO_Init+0x310>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d013      	beq.n	8005460 <HAL_GPIO_Init+0x200>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	4a4e      	ldr	r2, [pc, #312]	; (8005574 <HAL_GPIO_Init+0x314>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d00d      	beq.n	800545c <HAL_GPIO_Init+0x1fc>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	4a4d      	ldr	r2, [pc, #308]	; (8005578 <HAL_GPIO_Init+0x318>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d007      	beq.n	8005458 <HAL_GPIO_Init+0x1f8>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	4a4c      	ldr	r2, [pc, #304]	; (800557c <HAL_GPIO_Init+0x31c>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d101      	bne.n	8005454 <HAL_GPIO_Init+0x1f4>
 8005450:	2307      	movs	r3, #7
 8005452:	e00e      	b.n	8005472 <HAL_GPIO_Init+0x212>
 8005454:	2308      	movs	r3, #8
 8005456:	e00c      	b.n	8005472 <HAL_GPIO_Init+0x212>
 8005458:	2306      	movs	r3, #6
 800545a:	e00a      	b.n	8005472 <HAL_GPIO_Init+0x212>
 800545c:	2305      	movs	r3, #5
 800545e:	e008      	b.n	8005472 <HAL_GPIO_Init+0x212>
 8005460:	2304      	movs	r3, #4
 8005462:	e006      	b.n	8005472 <HAL_GPIO_Init+0x212>
 8005464:	2303      	movs	r3, #3
 8005466:	e004      	b.n	8005472 <HAL_GPIO_Init+0x212>
 8005468:	2302      	movs	r3, #2
 800546a:	e002      	b.n	8005472 <HAL_GPIO_Init+0x212>
 800546c:	2301      	movs	r3, #1
 800546e:	e000      	b.n	8005472 <HAL_GPIO_Init+0x212>
 8005470:	2300      	movs	r3, #0
 8005472:	697a      	ldr	r2, [r7, #20]
 8005474:	f002 0203 	and.w	r2, r2, #3
 8005478:	0092      	lsls	r2, r2, #2
 800547a:	4093      	lsls	r3, r2
 800547c:	693a      	ldr	r2, [r7, #16]
 800547e:	4313      	orrs	r3, r2
 8005480:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005482:	4937      	ldr	r1, [pc, #220]	; (8005560 <HAL_GPIO_Init+0x300>)
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	089b      	lsrs	r3, r3, #2
 8005488:	3302      	adds	r3, #2
 800548a:	693a      	ldr	r2, [r7, #16]
 800548c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005490:	4b3b      	ldr	r3, [pc, #236]	; (8005580 <HAL_GPIO_Init+0x320>)
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	43db      	mvns	r3, r3
 800549a:	693a      	ldr	r2, [r7, #16]
 800549c:	4013      	ands	r3, r2
 800549e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d003      	beq.n	80054b4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80054ac:	693a      	ldr	r2, [r7, #16]
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	4313      	orrs	r3, r2
 80054b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80054b4:	4a32      	ldr	r2, [pc, #200]	; (8005580 <HAL_GPIO_Init+0x320>)
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80054ba:	4b31      	ldr	r3, [pc, #196]	; (8005580 <HAL_GPIO_Init+0x320>)
 80054bc:	68db      	ldr	r3, [r3, #12]
 80054be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	43db      	mvns	r3, r3
 80054c4:	693a      	ldr	r2, [r7, #16]
 80054c6:	4013      	ands	r3, r2
 80054c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d003      	beq.n	80054de <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80054d6:	693a      	ldr	r2, [r7, #16]
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	4313      	orrs	r3, r2
 80054dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80054de:	4a28      	ldr	r2, [pc, #160]	; (8005580 <HAL_GPIO_Init+0x320>)
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80054e4:	4b26      	ldr	r3, [pc, #152]	; (8005580 <HAL_GPIO_Init+0x320>)
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	43db      	mvns	r3, r3
 80054ee:	693a      	ldr	r2, [r7, #16]
 80054f0:	4013      	ands	r3, r2
 80054f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d003      	beq.n	8005508 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8005500:	693a      	ldr	r2, [r7, #16]
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	4313      	orrs	r3, r2
 8005506:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005508:	4a1d      	ldr	r2, [pc, #116]	; (8005580 <HAL_GPIO_Init+0x320>)
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800550e:	4b1c      	ldr	r3, [pc, #112]	; (8005580 <HAL_GPIO_Init+0x320>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	43db      	mvns	r3, r3
 8005518:	693a      	ldr	r2, [r7, #16]
 800551a:	4013      	ands	r3, r2
 800551c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005526:	2b00      	cmp	r3, #0
 8005528:	d003      	beq.n	8005532 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800552a:	693a      	ldr	r2, [r7, #16]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	4313      	orrs	r3, r2
 8005530:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005532:	4a13      	ldr	r2, [pc, #76]	; (8005580 <HAL_GPIO_Init+0x320>)
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	3301      	adds	r3, #1
 800553c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	fa22 f303 	lsr.w	r3, r2, r3
 8005548:	2b00      	cmp	r3, #0
 800554a:	f47f ae91 	bne.w	8005270 <HAL_GPIO_Init+0x10>
  }
}
 800554e:	bf00      	nop
 8005550:	bf00      	nop
 8005552:	371c      	adds	r7, #28
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr
 800555c:	40021000 	.word	0x40021000
 8005560:	40010000 	.word	0x40010000
 8005564:	48000400 	.word	0x48000400
 8005568:	48000800 	.word	0x48000800
 800556c:	48000c00 	.word	0x48000c00
 8005570:	48001000 	.word	0x48001000
 8005574:	48001400 	.word	0x48001400
 8005578:	48001800 	.word	0x48001800
 800557c:	48001c00 	.word	0x48001c00
 8005580:	40010400 	.word	0x40010400

08005584 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005584:	b480      	push	{r7}
 8005586:	b083      	sub	sp, #12
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	460b      	mov	r3, r1
 800558e:	807b      	strh	r3, [r7, #2]
 8005590:	4613      	mov	r3, r2
 8005592:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005594:	787b      	ldrb	r3, [r7, #1]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d003      	beq.n	80055a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800559a:	887a      	ldrh	r2, [r7, #2]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80055a0:	e002      	b.n	80055a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80055a2:	887a      	ldrh	r2, [r7, #2]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80055a8:	bf00      	nop
 80055aa:	370c      	adds	r7, #12
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr

080055b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b082      	sub	sp, #8
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	4603      	mov	r3, r0
 80055bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80055be:	4b08      	ldr	r3, [pc, #32]	; (80055e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80055c0:	695a      	ldr	r2, [r3, #20]
 80055c2:	88fb      	ldrh	r3, [r7, #6]
 80055c4:	4013      	ands	r3, r2
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d006      	beq.n	80055d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80055ca:	4a05      	ldr	r2, [pc, #20]	; (80055e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80055cc:	88fb      	ldrh	r3, [r7, #6]
 80055ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80055d0:	88fb      	ldrh	r3, [r7, #6]
 80055d2:	4618      	mov	r0, r3
 80055d4:	f000 f806 	bl	80055e4 <HAL_GPIO_EXTI_Callback>
  }
}
 80055d8:	bf00      	nop
 80055da:	3708      	adds	r7, #8
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}
 80055e0:	40010400 	.word	0x40010400

080055e4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b083      	sub	sp, #12
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	4603      	mov	r3, r0
 80055ec:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80055ee:	bf00      	nop
 80055f0:	370c      	adds	r7, #12
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr
	...

080055fc <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80055fc:	b480      	push	{r7}
 80055fe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005600:	4b05      	ldr	r3, [pc, #20]	; (8005618 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a04      	ldr	r2, [pc, #16]	; (8005618 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005606:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800560a:	6013      	str	r3, [r2, #0]
}
 800560c:	bf00      	nop
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr
 8005616:	bf00      	nop
 8005618:	40007000 	.word	0x40007000

0800561c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800561c:	b480      	push	{r7}
 800561e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005620:	4b0d      	ldr	r3, [pc, #52]	; (8005658 <HAL_PWREx_GetVoltageRange+0x3c>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005628:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800562c:	d102      	bne.n	8005634 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800562e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005632:	e00b      	b.n	800564c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8005634:	4b08      	ldr	r3, [pc, #32]	; (8005658 <HAL_PWREx_GetVoltageRange+0x3c>)
 8005636:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800563a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800563e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005642:	d102      	bne.n	800564a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8005644:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005648:	e000      	b.n	800564c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800564a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800564c:	4618      	mov	r0, r3
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr
 8005656:	bf00      	nop
 8005658:	40007000 	.word	0x40007000

0800565c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800565c:	b480      	push	{r7}
 800565e:	b085      	sub	sp, #20
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d141      	bne.n	80056ee <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800566a:	4b4b      	ldr	r3, [pc, #300]	; (8005798 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005672:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005676:	d131      	bne.n	80056dc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005678:	4b47      	ldr	r3, [pc, #284]	; (8005798 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800567a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800567e:	4a46      	ldr	r2, [pc, #280]	; (8005798 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005680:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005684:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005688:	4b43      	ldr	r3, [pc, #268]	; (8005798 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005690:	4a41      	ldr	r2, [pc, #260]	; (8005798 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005692:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005696:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8005698:	4b40      	ldr	r3, [pc, #256]	; (800579c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	2232      	movs	r2, #50	; 0x32
 800569e:	fb02 f303 	mul.w	r3, r2, r3
 80056a2:	4a3f      	ldr	r2, [pc, #252]	; (80057a0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80056a4:	fba2 2303 	umull	r2, r3, r2, r3
 80056a8:	0c9b      	lsrs	r3, r3, #18
 80056aa:	3301      	adds	r3, #1
 80056ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80056ae:	e002      	b.n	80056b6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	3b01      	subs	r3, #1
 80056b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80056b6:	4b38      	ldr	r3, [pc, #224]	; (8005798 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056b8:	695b      	ldr	r3, [r3, #20]
 80056ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056c2:	d102      	bne.n	80056ca <HAL_PWREx_ControlVoltageScaling+0x6e>
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d1f2      	bne.n	80056b0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80056ca:	4b33      	ldr	r3, [pc, #204]	; (8005798 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056cc:	695b      	ldr	r3, [r3, #20]
 80056ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056d6:	d158      	bne.n	800578a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80056d8:	2303      	movs	r3, #3
 80056da:	e057      	b.n	800578c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80056dc:	4b2e      	ldr	r3, [pc, #184]	; (8005798 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056e2:	4a2d      	ldr	r2, [pc, #180]	; (8005798 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80056ec:	e04d      	b.n	800578a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056f4:	d141      	bne.n	800577a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80056f6:	4b28      	ldr	r3, [pc, #160]	; (8005798 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80056fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005702:	d131      	bne.n	8005768 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005704:	4b24      	ldr	r3, [pc, #144]	; (8005798 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005706:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800570a:	4a23      	ldr	r2, [pc, #140]	; (8005798 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800570c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005710:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005714:	4b20      	ldr	r3, [pc, #128]	; (8005798 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800571c:	4a1e      	ldr	r2, [pc, #120]	; (8005798 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800571e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005722:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8005724:	4b1d      	ldr	r3, [pc, #116]	; (800579c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	2232      	movs	r2, #50	; 0x32
 800572a:	fb02 f303 	mul.w	r3, r2, r3
 800572e:	4a1c      	ldr	r2, [pc, #112]	; (80057a0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005730:	fba2 2303 	umull	r2, r3, r2, r3
 8005734:	0c9b      	lsrs	r3, r3, #18
 8005736:	3301      	adds	r3, #1
 8005738:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800573a:	e002      	b.n	8005742 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	3b01      	subs	r3, #1
 8005740:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005742:	4b15      	ldr	r3, [pc, #84]	; (8005798 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005744:	695b      	ldr	r3, [r3, #20]
 8005746:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800574a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800574e:	d102      	bne.n	8005756 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d1f2      	bne.n	800573c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005756:	4b10      	ldr	r3, [pc, #64]	; (8005798 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005758:	695b      	ldr	r3, [r3, #20]
 800575a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800575e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005762:	d112      	bne.n	800578a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005764:	2303      	movs	r3, #3
 8005766:	e011      	b.n	800578c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005768:	4b0b      	ldr	r3, [pc, #44]	; (8005798 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800576a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800576e:	4a0a      	ldr	r2, [pc, #40]	; (8005798 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005770:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005774:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005778:	e007      	b.n	800578a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800577a:	4b07      	ldr	r3, [pc, #28]	; (8005798 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005782:	4a05      	ldr	r2, [pc, #20]	; (8005798 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005784:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005788:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800578a:	2300      	movs	r3, #0
}
 800578c:	4618      	mov	r0, r3
 800578e:	3714      	adds	r7, #20
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr
 8005798:	40007000 	.word	0x40007000
 800579c:	20000014 	.word	0x20000014
 80057a0:	431bde83 	.word	0x431bde83

080057a4 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80057a4:	b480      	push	{r7}
 80057a6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80057a8:	4b05      	ldr	r3, [pc, #20]	; (80057c0 <HAL_PWREx_EnableVddIO2+0x1c>)
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	4a04      	ldr	r2, [pc, #16]	; (80057c0 <HAL_PWREx_EnableVddIO2+0x1c>)
 80057ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80057b2:	6053      	str	r3, [r2, #4]
}
 80057b4:	bf00      	nop
 80057b6:	46bd      	mov	sp, r7
 80057b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057bc:	4770      	bx	lr
 80057be:	bf00      	nop
 80057c0:	40007000 	.word	0x40007000

080057c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b088      	sub	sp, #32
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d102      	bne.n	80057d8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	f000 bc08 	b.w	8005fe8 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80057d8:	4b96      	ldr	r3, [pc, #600]	; (8005a34 <HAL_RCC_OscConfig+0x270>)
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	f003 030c 	and.w	r3, r3, #12
 80057e0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80057e2:	4b94      	ldr	r3, [pc, #592]	; (8005a34 <HAL_RCC_OscConfig+0x270>)
 80057e4:	68db      	ldr	r3, [r3, #12]
 80057e6:	f003 0303 	and.w	r3, r3, #3
 80057ea:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f003 0310 	and.w	r3, r3, #16
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	f000 80e4 	beq.w	80059c2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80057fa:	69bb      	ldr	r3, [r7, #24]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d007      	beq.n	8005810 <HAL_RCC_OscConfig+0x4c>
 8005800:	69bb      	ldr	r3, [r7, #24]
 8005802:	2b0c      	cmp	r3, #12
 8005804:	f040 808b 	bne.w	800591e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	2b01      	cmp	r3, #1
 800580c:	f040 8087 	bne.w	800591e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005810:	4b88      	ldr	r3, [pc, #544]	; (8005a34 <HAL_RCC_OscConfig+0x270>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f003 0302 	and.w	r3, r3, #2
 8005818:	2b00      	cmp	r3, #0
 800581a:	d005      	beq.n	8005828 <HAL_RCC_OscConfig+0x64>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	699b      	ldr	r3, [r3, #24]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d101      	bne.n	8005828 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005824:	2301      	movs	r3, #1
 8005826:	e3df      	b.n	8005fe8 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6a1a      	ldr	r2, [r3, #32]
 800582c:	4b81      	ldr	r3, [pc, #516]	; (8005a34 <HAL_RCC_OscConfig+0x270>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f003 0308 	and.w	r3, r3, #8
 8005834:	2b00      	cmp	r3, #0
 8005836:	d004      	beq.n	8005842 <HAL_RCC_OscConfig+0x7e>
 8005838:	4b7e      	ldr	r3, [pc, #504]	; (8005a34 <HAL_RCC_OscConfig+0x270>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005840:	e005      	b.n	800584e <HAL_RCC_OscConfig+0x8a>
 8005842:	4b7c      	ldr	r3, [pc, #496]	; (8005a34 <HAL_RCC_OscConfig+0x270>)
 8005844:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005848:	091b      	lsrs	r3, r3, #4
 800584a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800584e:	4293      	cmp	r3, r2
 8005850:	d223      	bcs.n	800589a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6a1b      	ldr	r3, [r3, #32]
 8005856:	4618      	mov	r0, r3
 8005858:	f000 fdcc 	bl	80063f4 <RCC_SetFlashLatencyFromMSIRange>
 800585c:	4603      	mov	r3, r0
 800585e:	2b00      	cmp	r3, #0
 8005860:	d001      	beq.n	8005866 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	e3c0      	b.n	8005fe8 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005866:	4b73      	ldr	r3, [pc, #460]	; (8005a34 <HAL_RCC_OscConfig+0x270>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a72      	ldr	r2, [pc, #456]	; (8005a34 <HAL_RCC_OscConfig+0x270>)
 800586c:	f043 0308 	orr.w	r3, r3, #8
 8005870:	6013      	str	r3, [r2, #0]
 8005872:	4b70      	ldr	r3, [pc, #448]	; (8005a34 <HAL_RCC_OscConfig+0x270>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6a1b      	ldr	r3, [r3, #32]
 800587e:	496d      	ldr	r1, [pc, #436]	; (8005a34 <HAL_RCC_OscConfig+0x270>)
 8005880:	4313      	orrs	r3, r2
 8005882:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005884:	4b6b      	ldr	r3, [pc, #428]	; (8005a34 <HAL_RCC_OscConfig+0x270>)
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	69db      	ldr	r3, [r3, #28]
 8005890:	021b      	lsls	r3, r3, #8
 8005892:	4968      	ldr	r1, [pc, #416]	; (8005a34 <HAL_RCC_OscConfig+0x270>)
 8005894:	4313      	orrs	r3, r2
 8005896:	604b      	str	r3, [r1, #4]
 8005898:	e025      	b.n	80058e6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800589a:	4b66      	ldr	r3, [pc, #408]	; (8005a34 <HAL_RCC_OscConfig+0x270>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a65      	ldr	r2, [pc, #404]	; (8005a34 <HAL_RCC_OscConfig+0x270>)
 80058a0:	f043 0308 	orr.w	r3, r3, #8
 80058a4:	6013      	str	r3, [r2, #0]
 80058a6:	4b63      	ldr	r3, [pc, #396]	; (8005a34 <HAL_RCC_OscConfig+0x270>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6a1b      	ldr	r3, [r3, #32]
 80058b2:	4960      	ldr	r1, [pc, #384]	; (8005a34 <HAL_RCC_OscConfig+0x270>)
 80058b4:	4313      	orrs	r3, r2
 80058b6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80058b8:	4b5e      	ldr	r3, [pc, #376]	; (8005a34 <HAL_RCC_OscConfig+0x270>)
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	69db      	ldr	r3, [r3, #28]
 80058c4:	021b      	lsls	r3, r3, #8
 80058c6:	495b      	ldr	r1, [pc, #364]	; (8005a34 <HAL_RCC_OscConfig+0x270>)
 80058c8:	4313      	orrs	r3, r2
 80058ca:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80058cc:	69bb      	ldr	r3, [r7, #24]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d109      	bne.n	80058e6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6a1b      	ldr	r3, [r3, #32]
 80058d6:	4618      	mov	r0, r3
 80058d8:	f000 fd8c 	bl	80063f4 <RCC_SetFlashLatencyFromMSIRange>
 80058dc:	4603      	mov	r3, r0
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d001      	beq.n	80058e6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80058e2:	2301      	movs	r3, #1
 80058e4:	e380      	b.n	8005fe8 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80058e6:	f000 fcc1 	bl	800626c <HAL_RCC_GetSysClockFreq>
 80058ea:	4602      	mov	r2, r0
 80058ec:	4b51      	ldr	r3, [pc, #324]	; (8005a34 <HAL_RCC_OscConfig+0x270>)
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	091b      	lsrs	r3, r3, #4
 80058f2:	f003 030f 	and.w	r3, r3, #15
 80058f6:	4950      	ldr	r1, [pc, #320]	; (8005a38 <HAL_RCC_OscConfig+0x274>)
 80058f8:	5ccb      	ldrb	r3, [r1, r3]
 80058fa:	f003 031f 	and.w	r3, r3, #31
 80058fe:	fa22 f303 	lsr.w	r3, r2, r3
 8005902:	4a4e      	ldr	r2, [pc, #312]	; (8005a3c <HAL_RCC_OscConfig+0x278>)
 8005904:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005906:	4b4e      	ldr	r3, [pc, #312]	; (8005a40 <HAL_RCC_OscConfig+0x27c>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4618      	mov	r0, r3
 800590c:	f7fe fb00 	bl	8003f10 <HAL_InitTick>
 8005910:	4603      	mov	r3, r0
 8005912:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005914:	7bfb      	ldrb	r3, [r7, #15]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d052      	beq.n	80059c0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800591a:	7bfb      	ldrb	r3, [r7, #15]
 800591c:	e364      	b.n	8005fe8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	699b      	ldr	r3, [r3, #24]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d032      	beq.n	800598c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005926:	4b43      	ldr	r3, [pc, #268]	; (8005a34 <HAL_RCC_OscConfig+0x270>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a42      	ldr	r2, [pc, #264]	; (8005a34 <HAL_RCC_OscConfig+0x270>)
 800592c:	f043 0301 	orr.w	r3, r3, #1
 8005930:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005932:	f7fe fb3d 	bl	8003fb0 <HAL_GetTick>
 8005936:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005938:	e008      	b.n	800594c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800593a:	f7fe fb39 	bl	8003fb0 <HAL_GetTick>
 800593e:	4602      	mov	r2, r0
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	1ad3      	subs	r3, r2, r3
 8005944:	2b02      	cmp	r3, #2
 8005946:	d901      	bls.n	800594c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005948:	2303      	movs	r3, #3
 800594a:	e34d      	b.n	8005fe8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800594c:	4b39      	ldr	r3, [pc, #228]	; (8005a34 <HAL_RCC_OscConfig+0x270>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f003 0302 	and.w	r3, r3, #2
 8005954:	2b00      	cmp	r3, #0
 8005956:	d0f0      	beq.n	800593a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005958:	4b36      	ldr	r3, [pc, #216]	; (8005a34 <HAL_RCC_OscConfig+0x270>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a35      	ldr	r2, [pc, #212]	; (8005a34 <HAL_RCC_OscConfig+0x270>)
 800595e:	f043 0308 	orr.w	r3, r3, #8
 8005962:	6013      	str	r3, [r2, #0]
 8005964:	4b33      	ldr	r3, [pc, #204]	; (8005a34 <HAL_RCC_OscConfig+0x270>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6a1b      	ldr	r3, [r3, #32]
 8005970:	4930      	ldr	r1, [pc, #192]	; (8005a34 <HAL_RCC_OscConfig+0x270>)
 8005972:	4313      	orrs	r3, r2
 8005974:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005976:	4b2f      	ldr	r3, [pc, #188]	; (8005a34 <HAL_RCC_OscConfig+0x270>)
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	69db      	ldr	r3, [r3, #28]
 8005982:	021b      	lsls	r3, r3, #8
 8005984:	492b      	ldr	r1, [pc, #172]	; (8005a34 <HAL_RCC_OscConfig+0x270>)
 8005986:	4313      	orrs	r3, r2
 8005988:	604b      	str	r3, [r1, #4]
 800598a:	e01a      	b.n	80059c2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800598c:	4b29      	ldr	r3, [pc, #164]	; (8005a34 <HAL_RCC_OscConfig+0x270>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a28      	ldr	r2, [pc, #160]	; (8005a34 <HAL_RCC_OscConfig+0x270>)
 8005992:	f023 0301 	bic.w	r3, r3, #1
 8005996:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005998:	f7fe fb0a 	bl	8003fb0 <HAL_GetTick>
 800599c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800599e:	e008      	b.n	80059b2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80059a0:	f7fe fb06 	bl	8003fb0 <HAL_GetTick>
 80059a4:	4602      	mov	r2, r0
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	1ad3      	subs	r3, r2, r3
 80059aa:	2b02      	cmp	r3, #2
 80059ac:	d901      	bls.n	80059b2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80059ae:	2303      	movs	r3, #3
 80059b0:	e31a      	b.n	8005fe8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80059b2:	4b20      	ldr	r3, [pc, #128]	; (8005a34 <HAL_RCC_OscConfig+0x270>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f003 0302 	and.w	r3, r3, #2
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d1f0      	bne.n	80059a0 <HAL_RCC_OscConfig+0x1dc>
 80059be:	e000      	b.n	80059c2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80059c0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f003 0301 	and.w	r3, r3, #1
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d073      	beq.n	8005ab6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80059ce:	69bb      	ldr	r3, [r7, #24]
 80059d0:	2b08      	cmp	r3, #8
 80059d2:	d005      	beq.n	80059e0 <HAL_RCC_OscConfig+0x21c>
 80059d4:	69bb      	ldr	r3, [r7, #24]
 80059d6:	2b0c      	cmp	r3, #12
 80059d8:	d10e      	bne.n	80059f8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	2b03      	cmp	r3, #3
 80059de:	d10b      	bne.n	80059f8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059e0:	4b14      	ldr	r3, [pc, #80]	; (8005a34 <HAL_RCC_OscConfig+0x270>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d063      	beq.n	8005ab4 <HAL_RCC_OscConfig+0x2f0>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d15f      	bne.n	8005ab4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	e2f7      	b.n	8005fe8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a00:	d106      	bne.n	8005a10 <HAL_RCC_OscConfig+0x24c>
 8005a02:	4b0c      	ldr	r3, [pc, #48]	; (8005a34 <HAL_RCC_OscConfig+0x270>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a0b      	ldr	r2, [pc, #44]	; (8005a34 <HAL_RCC_OscConfig+0x270>)
 8005a08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a0c:	6013      	str	r3, [r2, #0]
 8005a0e:	e025      	b.n	8005a5c <HAL_RCC_OscConfig+0x298>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a18:	d114      	bne.n	8005a44 <HAL_RCC_OscConfig+0x280>
 8005a1a:	4b06      	ldr	r3, [pc, #24]	; (8005a34 <HAL_RCC_OscConfig+0x270>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a05      	ldr	r2, [pc, #20]	; (8005a34 <HAL_RCC_OscConfig+0x270>)
 8005a20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a24:	6013      	str	r3, [r2, #0]
 8005a26:	4b03      	ldr	r3, [pc, #12]	; (8005a34 <HAL_RCC_OscConfig+0x270>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a02      	ldr	r2, [pc, #8]	; (8005a34 <HAL_RCC_OscConfig+0x270>)
 8005a2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a30:	6013      	str	r3, [r2, #0]
 8005a32:	e013      	b.n	8005a5c <HAL_RCC_OscConfig+0x298>
 8005a34:	40021000 	.word	0x40021000
 8005a38:	0800ebec 	.word	0x0800ebec
 8005a3c:	20000014 	.word	0x20000014
 8005a40:	20000018 	.word	0x20000018
 8005a44:	4ba0      	ldr	r3, [pc, #640]	; (8005cc8 <HAL_RCC_OscConfig+0x504>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a9f      	ldr	r2, [pc, #636]	; (8005cc8 <HAL_RCC_OscConfig+0x504>)
 8005a4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a4e:	6013      	str	r3, [r2, #0]
 8005a50:	4b9d      	ldr	r3, [pc, #628]	; (8005cc8 <HAL_RCC_OscConfig+0x504>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a9c      	ldr	r2, [pc, #624]	; (8005cc8 <HAL_RCC_OscConfig+0x504>)
 8005a56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d013      	beq.n	8005a8c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a64:	f7fe faa4 	bl	8003fb0 <HAL_GetTick>
 8005a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a6a:	e008      	b.n	8005a7e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a6c:	f7fe faa0 	bl	8003fb0 <HAL_GetTick>
 8005a70:	4602      	mov	r2, r0
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	1ad3      	subs	r3, r2, r3
 8005a76:	2b64      	cmp	r3, #100	; 0x64
 8005a78:	d901      	bls.n	8005a7e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005a7a:	2303      	movs	r3, #3
 8005a7c:	e2b4      	b.n	8005fe8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a7e:	4b92      	ldr	r3, [pc, #584]	; (8005cc8 <HAL_RCC_OscConfig+0x504>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d0f0      	beq.n	8005a6c <HAL_RCC_OscConfig+0x2a8>
 8005a8a:	e014      	b.n	8005ab6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a8c:	f7fe fa90 	bl	8003fb0 <HAL_GetTick>
 8005a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005a92:	e008      	b.n	8005aa6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a94:	f7fe fa8c 	bl	8003fb0 <HAL_GetTick>
 8005a98:	4602      	mov	r2, r0
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	1ad3      	subs	r3, r2, r3
 8005a9e:	2b64      	cmp	r3, #100	; 0x64
 8005aa0:	d901      	bls.n	8005aa6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005aa2:	2303      	movs	r3, #3
 8005aa4:	e2a0      	b.n	8005fe8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005aa6:	4b88      	ldr	r3, [pc, #544]	; (8005cc8 <HAL_RCC_OscConfig+0x504>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d1f0      	bne.n	8005a94 <HAL_RCC_OscConfig+0x2d0>
 8005ab2:	e000      	b.n	8005ab6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ab4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f003 0302 	and.w	r3, r3, #2
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d060      	beq.n	8005b84 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005ac2:	69bb      	ldr	r3, [r7, #24]
 8005ac4:	2b04      	cmp	r3, #4
 8005ac6:	d005      	beq.n	8005ad4 <HAL_RCC_OscConfig+0x310>
 8005ac8:	69bb      	ldr	r3, [r7, #24]
 8005aca:	2b0c      	cmp	r3, #12
 8005acc:	d119      	bne.n	8005b02 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	2b02      	cmp	r3, #2
 8005ad2:	d116      	bne.n	8005b02 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ad4:	4b7c      	ldr	r3, [pc, #496]	; (8005cc8 <HAL_RCC_OscConfig+0x504>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d005      	beq.n	8005aec <HAL_RCC_OscConfig+0x328>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d101      	bne.n	8005aec <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	e27d      	b.n	8005fe8 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005aec:	4b76      	ldr	r3, [pc, #472]	; (8005cc8 <HAL_RCC_OscConfig+0x504>)
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	691b      	ldr	r3, [r3, #16]
 8005af8:	061b      	lsls	r3, r3, #24
 8005afa:	4973      	ldr	r1, [pc, #460]	; (8005cc8 <HAL_RCC_OscConfig+0x504>)
 8005afc:	4313      	orrs	r3, r2
 8005afe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005b00:	e040      	b.n	8005b84 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	68db      	ldr	r3, [r3, #12]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d023      	beq.n	8005b52 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b0a:	4b6f      	ldr	r3, [pc, #444]	; (8005cc8 <HAL_RCC_OscConfig+0x504>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a6e      	ldr	r2, [pc, #440]	; (8005cc8 <HAL_RCC_OscConfig+0x504>)
 8005b10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b16:	f7fe fa4b 	bl	8003fb0 <HAL_GetTick>
 8005b1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b1c:	e008      	b.n	8005b30 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b1e:	f7fe fa47 	bl	8003fb0 <HAL_GetTick>
 8005b22:	4602      	mov	r2, r0
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	1ad3      	subs	r3, r2, r3
 8005b28:	2b02      	cmp	r3, #2
 8005b2a:	d901      	bls.n	8005b30 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005b2c:	2303      	movs	r3, #3
 8005b2e:	e25b      	b.n	8005fe8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b30:	4b65      	ldr	r3, [pc, #404]	; (8005cc8 <HAL_RCC_OscConfig+0x504>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d0f0      	beq.n	8005b1e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b3c:	4b62      	ldr	r3, [pc, #392]	; (8005cc8 <HAL_RCC_OscConfig+0x504>)
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	691b      	ldr	r3, [r3, #16]
 8005b48:	061b      	lsls	r3, r3, #24
 8005b4a:	495f      	ldr	r1, [pc, #380]	; (8005cc8 <HAL_RCC_OscConfig+0x504>)
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	604b      	str	r3, [r1, #4]
 8005b50:	e018      	b.n	8005b84 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b52:	4b5d      	ldr	r3, [pc, #372]	; (8005cc8 <HAL_RCC_OscConfig+0x504>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a5c      	ldr	r2, [pc, #368]	; (8005cc8 <HAL_RCC_OscConfig+0x504>)
 8005b58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b5e:	f7fe fa27 	bl	8003fb0 <HAL_GetTick>
 8005b62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005b64:	e008      	b.n	8005b78 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b66:	f7fe fa23 	bl	8003fb0 <HAL_GetTick>
 8005b6a:	4602      	mov	r2, r0
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	1ad3      	subs	r3, r2, r3
 8005b70:	2b02      	cmp	r3, #2
 8005b72:	d901      	bls.n	8005b78 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005b74:	2303      	movs	r3, #3
 8005b76:	e237      	b.n	8005fe8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005b78:	4b53      	ldr	r3, [pc, #332]	; (8005cc8 <HAL_RCC_OscConfig+0x504>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d1f0      	bne.n	8005b66 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f003 0308 	and.w	r3, r3, #8
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d03c      	beq.n	8005c0a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	695b      	ldr	r3, [r3, #20]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d01c      	beq.n	8005bd2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b98:	4b4b      	ldr	r3, [pc, #300]	; (8005cc8 <HAL_RCC_OscConfig+0x504>)
 8005b9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b9e:	4a4a      	ldr	r2, [pc, #296]	; (8005cc8 <HAL_RCC_OscConfig+0x504>)
 8005ba0:	f043 0301 	orr.w	r3, r3, #1
 8005ba4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ba8:	f7fe fa02 	bl	8003fb0 <HAL_GetTick>
 8005bac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005bae:	e008      	b.n	8005bc2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005bb0:	f7fe f9fe 	bl	8003fb0 <HAL_GetTick>
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	1ad3      	subs	r3, r2, r3
 8005bba:	2b02      	cmp	r3, #2
 8005bbc:	d901      	bls.n	8005bc2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005bbe:	2303      	movs	r3, #3
 8005bc0:	e212      	b.n	8005fe8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005bc2:	4b41      	ldr	r3, [pc, #260]	; (8005cc8 <HAL_RCC_OscConfig+0x504>)
 8005bc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005bc8:	f003 0302 	and.w	r3, r3, #2
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d0ef      	beq.n	8005bb0 <HAL_RCC_OscConfig+0x3ec>
 8005bd0:	e01b      	b.n	8005c0a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005bd2:	4b3d      	ldr	r3, [pc, #244]	; (8005cc8 <HAL_RCC_OscConfig+0x504>)
 8005bd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005bd8:	4a3b      	ldr	r2, [pc, #236]	; (8005cc8 <HAL_RCC_OscConfig+0x504>)
 8005bda:	f023 0301 	bic.w	r3, r3, #1
 8005bde:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005be2:	f7fe f9e5 	bl	8003fb0 <HAL_GetTick>
 8005be6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005be8:	e008      	b.n	8005bfc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005bea:	f7fe f9e1 	bl	8003fb0 <HAL_GetTick>
 8005bee:	4602      	mov	r2, r0
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	1ad3      	subs	r3, r2, r3
 8005bf4:	2b02      	cmp	r3, #2
 8005bf6:	d901      	bls.n	8005bfc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005bf8:	2303      	movs	r3, #3
 8005bfa:	e1f5      	b.n	8005fe8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005bfc:	4b32      	ldr	r3, [pc, #200]	; (8005cc8 <HAL_RCC_OscConfig+0x504>)
 8005bfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c02:	f003 0302 	and.w	r3, r3, #2
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d1ef      	bne.n	8005bea <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f003 0304 	and.w	r3, r3, #4
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	f000 80a6 	beq.w	8005d64 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005c1c:	4b2a      	ldr	r3, [pc, #168]	; (8005cc8 <HAL_RCC_OscConfig+0x504>)
 8005c1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d10d      	bne.n	8005c44 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c28:	4b27      	ldr	r3, [pc, #156]	; (8005cc8 <HAL_RCC_OscConfig+0x504>)
 8005c2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c2c:	4a26      	ldr	r2, [pc, #152]	; (8005cc8 <HAL_RCC_OscConfig+0x504>)
 8005c2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c32:	6593      	str	r3, [r2, #88]	; 0x58
 8005c34:	4b24      	ldr	r3, [pc, #144]	; (8005cc8 <HAL_RCC_OscConfig+0x504>)
 8005c36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c3c:	60bb      	str	r3, [r7, #8]
 8005c3e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c40:	2301      	movs	r3, #1
 8005c42:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c44:	4b21      	ldr	r3, [pc, #132]	; (8005ccc <HAL_RCC_OscConfig+0x508>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d118      	bne.n	8005c82 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c50:	4b1e      	ldr	r3, [pc, #120]	; (8005ccc <HAL_RCC_OscConfig+0x508>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a1d      	ldr	r2, [pc, #116]	; (8005ccc <HAL_RCC_OscConfig+0x508>)
 8005c56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c5a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c5c:	f7fe f9a8 	bl	8003fb0 <HAL_GetTick>
 8005c60:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c62:	e008      	b.n	8005c76 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c64:	f7fe f9a4 	bl	8003fb0 <HAL_GetTick>
 8005c68:	4602      	mov	r2, r0
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	1ad3      	subs	r3, r2, r3
 8005c6e:	2b02      	cmp	r3, #2
 8005c70:	d901      	bls.n	8005c76 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005c72:	2303      	movs	r3, #3
 8005c74:	e1b8      	b.n	8005fe8 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c76:	4b15      	ldr	r3, [pc, #84]	; (8005ccc <HAL_RCC_OscConfig+0x508>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d0f0      	beq.n	8005c64 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	2b01      	cmp	r3, #1
 8005c88:	d108      	bne.n	8005c9c <HAL_RCC_OscConfig+0x4d8>
 8005c8a:	4b0f      	ldr	r3, [pc, #60]	; (8005cc8 <HAL_RCC_OscConfig+0x504>)
 8005c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c90:	4a0d      	ldr	r2, [pc, #52]	; (8005cc8 <HAL_RCC_OscConfig+0x504>)
 8005c92:	f043 0301 	orr.w	r3, r3, #1
 8005c96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005c9a:	e029      	b.n	8005cf0 <HAL_RCC_OscConfig+0x52c>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	2b05      	cmp	r3, #5
 8005ca2:	d115      	bne.n	8005cd0 <HAL_RCC_OscConfig+0x50c>
 8005ca4:	4b08      	ldr	r3, [pc, #32]	; (8005cc8 <HAL_RCC_OscConfig+0x504>)
 8005ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005caa:	4a07      	ldr	r2, [pc, #28]	; (8005cc8 <HAL_RCC_OscConfig+0x504>)
 8005cac:	f043 0304 	orr.w	r3, r3, #4
 8005cb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005cb4:	4b04      	ldr	r3, [pc, #16]	; (8005cc8 <HAL_RCC_OscConfig+0x504>)
 8005cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cba:	4a03      	ldr	r2, [pc, #12]	; (8005cc8 <HAL_RCC_OscConfig+0x504>)
 8005cbc:	f043 0301 	orr.w	r3, r3, #1
 8005cc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005cc4:	e014      	b.n	8005cf0 <HAL_RCC_OscConfig+0x52c>
 8005cc6:	bf00      	nop
 8005cc8:	40021000 	.word	0x40021000
 8005ccc:	40007000 	.word	0x40007000
 8005cd0:	4b9d      	ldr	r3, [pc, #628]	; (8005f48 <HAL_RCC_OscConfig+0x784>)
 8005cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cd6:	4a9c      	ldr	r2, [pc, #624]	; (8005f48 <HAL_RCC_OscConfig+0x784>)
 8005cd8:	f023 0301 	bic.w	r3, r3, #1
 8005cdc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005ce0:	4b99      	ldr	r3, [pc, #612]	; (8005f48 <HAL_RCC_OscConfig+0x784>)
 8005ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ce6:	4a98      	ldr	r2, [pc, #608]	; (8005f48 <HAL_RCC_OscConfig+0x784>)
 8005ce8:	f023 0304 	bic.w	r3, r3, #4
 8005cec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d016      	beq.n	8005d26 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cf8:	f7fe f95a 	bl	8003fb0 <HAL_GetTick>
 8005cfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005cfe:	e00a      	b.n	8005d16 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d00:	f7fe f956 	bl	8003fb0 <HAL_GetTick>
 8005d04:	4602      	mov	r2, r0
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	1ad3      	subs	r3, r2, r3
 8005d0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d901      	bls.n	8005d16 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005d12:	2303      	movs	r3, #3
 8005d14:	e168      	b.n	8005fe8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d16:	4b8c      	ldr	r3, [pc, #560]	; (8005f48 <HAL_RCC_OscConfig+0x784>)
 8005d18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d1c:	f003 0302 	and.w	r3, r3, #2
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d0ed      	beq.n	8005d00 <HAL_RCC_OscConfig+0x53c>
 8005d24:	e015      	b.n	8005d52 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d26:	f7fe f943 	bl	8003fb0 <HAL_GetTick>
 8005d2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005d2c:	e00a      	b.n	8005d44 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d2e:	f7fe f93f 	bl	8003fb0 <HAL_GetTick>
 8005d32:	4602      	mov	r2, r0
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	1ad3      	subs	r3, r2, r3
 8005d38:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d901      	bls.n	8005d44 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005d40:	2303      	movs	r3, #3
 8005d42:	e151      	b.n	8005fe8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005d44:	4b80      	ldr	r3, [pc, #512]	; (8005f48 <HAL_RCC_OscConfig+0x784>)
 8005d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d4a:	f003 0302 	and.w	r3, r3, #2
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d1ed      	bne.n	8005d2e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d52:	7ffb      	ldrb	r3, [r7, #31]
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d105      	bne.n	8005d64 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d58:	4b7b      	ldr	r3, [pc, #492]	; (8005f48 <HAL_RCC_OscConfig+0x784>)
 8005d5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d5c:	4a7a      	ldr	r2, [pc, #488]	; (8005f48 <HAL_RCC_OscConfig+0x784>)
 8005d5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d62:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f003 0320 	and.w	r3, r3, #32
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d03c      	beq.n	8005dea <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d01c      	beq.n	8005db2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005d78:	4b73      	ldr	r3, [pc, #460]	; (8005f48 <HAL_RCC_OscConfig+0x784>)
 8005d7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d7e:	4a72      	ldr	r2, [pc, #456]	; (8005f48 <HAL_RCC_OscConfig+0x784>)
 8005d80:	f043 0301 	orr.w	r3, r3, #1
 8005d84:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d88:	f7fe f912 	bl	8003fb0 <HAL_GetTick>
 8005d8c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005d8e:	e008      	b.n	8005da2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005d90:	f7fe f90e 	bl	8003fb0 <HAL_GetTick>
 8005d94:	4602      	mov	r2, r0
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	1ad3      	subs	r3, r2, r3
 8005d9a:	2b02      	cmp	r3, #2
 8005d9c:	d901      	bls.n	8005da2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005d9e:	2303      	movs	r3, #3
 8005da0:	e122      	b.n	8005fe8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005da2:	4b69      	ldr	r3, [pc, #420]	; (8005f48 <HAL_RCC_OscConfig+0x784>)
 8005da4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005da8:	f003 0302 	and.w	r3, r3, #2
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d0ef      	beq.n	8005d90 <HAL_RCC_OscConfig+0x5cc>
 8005db0:	e01b      	b.n	8005dea <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005db2:	4b65      	ldr	r3, [pc, #404]	; (8005f48 <HAL_RCC_OscConfig+0x784>)
 8005db4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005db8:	4a63      	ldr	r2, [pc, #396]	; (8005f48 <HAL_RCC_OscConfig+0x784>)
 8005dba:	f023 0301 	bic.w	r3, r3, #1
 8005dbe:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dc2:	f7fe f8f5 	bl	8003fb0 <HAL_GetTick>
 8005dc6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005dc8:	e008      	b.n	8005ddc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005dca:	f7fe f8f1 	bl	8003fb0 <HAL_GetTick>
 8005dce:	4602      	mov	r2, r0
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	1ad3      	subs	r3, r2, r3
 8005dd4:	2b02      	cmp	r3, #2
 8005dd6:	d901      	bls.n	8005ddc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005dd8:	2303      	movs	r3, #3
 8005dda:	e105      	b.n	8005fe8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005ddc:	4b5a      	ldr	r3, [pc, #360]	; (8005f48 <HAL_RCC_OscConfig+0x784>)
 8005dde:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005de2:	f003 0302 	and.w	r3, r3, #2
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d1ef      	bne.n	8005dca <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	f000 80f9 	beq.w	8005fe6 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005df8:	2b02      	cmp	r3, #2
 8005dfa:	f040 80cf 	bne.w	8005f9c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005dfe:	4b52      	ldr	r3, [pc, #328]	; (8005f48 <HAL_RCC_OscConfig+0x784>)
 8005e00:	68db      	ldr	r3, [r3, #12]
 8005e02:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	f003 0203 	and.w	r2, r3, #3
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d12c      	bne.n	8005e6c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e1c:	3b01      	subs	r3, #1
 8005e1e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d123      	bne.n	8005e6c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e2e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d11b      	bne.n	8005e6c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e3e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005e40:	429a      	cmp	r2, r3
 8005e42:	d113      	bne.n	8005e6c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e4e:	085b      	lsrs	r3, r3, #1
 8005e50:	3b01      	subs	r3, #1
 8005e52:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d109      	bne.n	8005e6c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e62:	085b      	lsrs	r3, r3, #1
 8005e64:	3b01      	subs	r3, #1
 8005e66:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	d071      	beq.n	8005f50 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005e6c:	69bb      	ldr	r3, [r7, #24]
 8005e6e:	2b0c      	cmp	r3, #12
 8005e70:	d068      	beq.n	8005f44 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005e72:	4b35      	ldr	r3, [pc, #212]	; (8005f48 <HAL_RCC_OscConfig+0x784>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d105      	bne.n	8005e8a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005e7e:	4b32      	ldr	r3, [pc, #200]	; (8005f48 <HAL_RCC_OscConfig+0x784>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d001      	beq.n	8005e8e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	e0ac      	b.n	8005fe8 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005e8e:	4b2e      	ldr	r3, [pc, #184]	; (8005f48 <HAL_RCC_OscConfig+0x784>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a2d      	ldr	r2, [pc, #180]	; (8005f48 <HAL_RCC_OscConfig+0x784>)
 8005e94:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e98:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005e9a:	f7fe f889 	bl	8003fb0 <HAL_GetTick>
 8005e9e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ea0:	e008      	b.n	8005eb4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ea2:	f7fe f885 	bl	8003fb0 <HAL_GetTick>
 8005ea6:	4602      	mov	r2, r0
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	1ad3      	subs	r3, r2, r3
 8005eac:	2b02      	cmp	r3, #2
 8005eae:	d901      	bls.n	8005eb4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8005eb0:	2303      	movs	r3, #3
 8005eb2:	e099      	b.n	8005fe8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005eb4:	4b24      	ldr	r3, [pc, #144]	; (8005f48 <HAL_RCC_OscConfig+0x784>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d1f0      	bne.n	8005ea2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005ec0:	4b21      	ldr	r3, [pc, #132]	; (8005f48 <HAL_RCC_OscConfig+0x784>)
 8005ec2:	68da      	ldr	r2, [r3, #12]
 8005ec4:	4b21      	ldr	r3, [pc, #132]	; (8005f4c <HAL_RCC_OscConfig+0x788>)
 8005ec6:	4013      	ands	r3, r2
 8005ec8:	687a      	ldr	r2, [r7, #4]
 8005eca:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005ecc:	687a      	ldr	r2, [r7, #4]
 8005ece:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005ed0:	3a01      	subs	r2, #1
 8005ed2:	0112      	lsls	r2, r2, #4
 8005ed4:	4311      	orrs	r1, r2
 8005ed6:	687a      	ldr	r2, [r7, #4]
 8005ed8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005eda:	0212      	lsls	r2, r2, #8
 8005edc:	4311      	orrs	r1, r2
 8005ede:	687a      	ldr	r2, [r7, #4]
 8005ee0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005ee2:	0852      	lsrs	r2, r2, #1
 8005ee4:	3a01      	subs	r2, #1
 8005ee6:	0552      	lsls	r2, r2, #21
 8005ee8:	4311      	orrs	r1, r2
 8005eea:	687a      	ldr	r2, [r7, #4]
 8005eec:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005eee:	0852      	lsrs	r2, r2, #1
 8005ef0:	3a01      	subs	r2, #1
 8005ef2:	0652      	lsls	r2, r2, #25
 8005ef4:	4311      	orrs	r1, r2
 8005ef6:	687a      	ldr	r2, [r7, #4]
 8005ef8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005efa:	06d2      	lsls	r2, r2, #27
 8005efc:	430a      	orrs	r2, r1
 8005efe:	4912      	ldr	r1, [pc, #72]	; (8005f48 <HAL_RCC_OscConfig+0x784>)
 8005f00:	4313      	orrs	r3, r2
 8005f02:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005f04:	4b10      	ldr	r3, [pc, #64]	; (8005f48 <HAL_RCC_OscConfig+0x784>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a0f      	ldr	r2, [pc, #60]	; (8005f48 <HAL_RCC_OscConfig+0x784>)
 8005f0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f0e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005f10:	4b0d      	ldr	r3, [pc, #52]	; (8005f48 <HAL_RCC_OscConfig+0x784>)
 8005f12:	68db      	ldr	r3, [r3, #12]
 8005f14:	4a0c      	ldr	r2, [pc, #48]	; (8005f48 <HAL_RCC_OscConfig+0x784>)
 8005f16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f1a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005f1c:	f7fe f848 	bl	8003fb0 <HAL_GetTick>
 8005f20:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f22:	e008      	b.n	8005f36 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f24:	f7fe f844 	bl	8003fb0 <HAL_GetTick>
 8005f28:	4602      	mov	r2, r0
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	1ad3      	subs	r3, r2, r3
 8005f2e:	2b02      	cmp	r3, #2
 8005f30:	d901      	bls.n	8005f36 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8005f32:	2303      	movs	r3, #3
 8005f34:	e058      	b.n	8005fe8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f36:	4b04      	ldr	r3, [pc, #16]	; (8005f48 <HAL_RCC_OscConfig+0x784>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d0f0      	beq.n	8005f24 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005f42:	e050      	b.n	8005fe6 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005f44:	2301      	movs	r3, #1
 8005f46:	e04f      	b.n	8005fe8 <HAL_RCC_OscConfig+0x824>
 8005f48:	40021000 	.word	0x40021000
 8005f4c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f50:	4b27      	ldr	r3, [pc, #156]	; (8005ff0 <HAL_RCC_OscConfig+0x82c>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d144      	bne.n	8005fe6 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005f5c:	4b24      	ldr	r3, [pc, #144]	; (8005ff0 <HAL_RCC_OscConfig+0x82c>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a23      	ldr	r2, [pc, #140]	; (8005ff0 <HAL_RCC_OscConfig+0x82c>)
 8005f62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f66:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005f68:	4b21      	ldr	r3, [pc, #132]	; (8005ff0 <HAL_RCC_OscConfig+0x82c>)
 8005f6a:	68db      	ldr	r3, [r3, #12]
 8005f6c:	4a20      	ldr	r2, [pc, #128]	; (8005ff0 <HAL_RCC_OscConfig+0x82c>)
 8005f6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f72:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005f74:	f7fe f81c 	bl	8003fb0 <HAL_GetTick>
 8005f78:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f7a:	e008      	b.n	8005f8e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f7c:	f7fe f818 	bl	8003fb0 <HAL_GetTick>
 8005f80:	4602      	mov	r2, r0
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	1ad3      	subs	r3, r2, r3
 8005f86:	2b02      	cmp	r3, #2
 8005f88:	d901      	bls.n	8005f8e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8005f8a:	2303      	movs	r3, #3
 8005f8c:	e02c      	b.n	8005fe8 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f8e:	4b18      	ldr	r3, [pc, #96]	; (8005ff0 <HAL_RCC_OscConfig+0x82c>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d0f0      	beq.n	8005f7c <HAL_RCC_OscConfig+0x7b8>
 8005f9a:	e024      	b.n	8005fe6 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005f9c:	69bb      	ldr	r3, [r7, #24]
 8005f9e:	2b0c      	cmp	r3, #12
 8005fa0:	d01f      	beq.n	8005fe2 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fa2:	4b13      	ldr	r3, [pc, #76]	; (8005ff0 <HAL_RCC_OscConfig+0x82c>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a12      	ldr	r2, [pc, #72]	; (8005ff0 <HAL_RCC_OscConfig+0x82c>)
 8005fa8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005fac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fae:	f7fd ffff 	bl	8003fb0 <HAL_GetTick>
 8005fb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005fb4:	e008      	b.n	8005fc8 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fb6:	f7fd fffb 	bl	8003fb0 <HAL_GetTick>
 8005fba:	4602      	mov	r2, r0
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	1ad3      	subs	r3, r2, r3
 8005fc0:	2b02      	cmp	r3, #2
 8005fc2:	d901      	bls.n	8005fc8 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8005fc4:	2303      	movs	r3, #3
 8005fc6:	e00f      	b.n	8005fe8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005fc8:	4b09      	ldr	r3, [pc, #36]	; (8005ff0 <HAL_RCC_OscConfig+0x82c>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d1f0      	bne.n	8005fb6 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005fd4:	4b06      	ldr	r3, [pc, #24]	; (8005ff0 <HAL_RCC_OscConfig+0x82c>)
 8005fd6:	68da      	ldr	r2, [r3, #12]
 8005fd8:	4905      	ldr	r1, [pc, #20]	; (8005ff0 <HAL_RCC_OscConfig+0x82c>)
 8005fda:	4b06      	ldr	r3, [pc, #24]	; (8005ff4 <HAL_RCC_OscConfig+0x830>)
 8005fdc:	4013      	ands	r3, r2
 8005fde:	60cb      	str	r3, [r1, #12]
 8005fe0:	e001      	b.n	8005fe6 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e000      	b.n	8005fe8 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8005fe6:	2300      	movs	r3, #0
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3720      	adds	r7, #32
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}
 8005ff0:	40021000 	.word	0x40021000
 8005ff4:	feeefffc 	.word	0xfeeefffc

08005ff8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b086      	sub	sp, #24
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
 8006000:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006002:	2300      	movs	r3, #0
 8006004:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d101      	bne.n	8006010 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	e11d      	b.n	800624c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006010:	4b90      	ldr	r3, [pc, #576]	; (8006254 <HAL_RCC_ClockConfig+0x25c>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f003 030f 	and.w	r3, r3, #15
 8006018:	683a      	ldr	r2, [r7, #0]
 800601a:	429a      	cmp	r2, r3
 800601c:	d910      	bls.n	8006040 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800601e:	4b8d      	ldr	r3, [pc, #564]	; (8006254 <HAL_RCC_ClockConfig+0x25c>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f023 020f 	bic.w	r2, r3, #15
 8006026:	498b      	ldr	r1, [pc, #556]	; (8006254 <HAL_RCC_ClockConfig+0x25c>)
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	4313      	orrs	r3, r2
 800602c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800602e:	4b89      	ldr	r3, [pc, #548]	; (8006254 <HAL_RCC_ClockConfig+0x25c>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f003 030f 	and.w	r3, r3, #15
 8006036:	683a      	ldr	r2, [r7, #0]
 8006038:	429a      	cmp	r2, r3
 800603a:	d001      	beq.n	8006040 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800603c:	2301      	movs	r3, #1
 800603e:	e105      	b.n	800624c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f003 0302 	and.w	r3, r3, #2
 8006048:	2b00      	cmp	r3, #0
 800604a:	d010      	beq.n	800606e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	689a      	ldr	r2, [r3, #8]
 8006050:	4b81      	ldr	r3, [pc, #516]	; (8006258 <HAL_RCC_ClockConfig+0x260>)
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006058:	429a      	cmp	r2, r3
 800605a:	d908      	bls.n	800606e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800605c:	4b7e      	ldr	r3, [pc, #504]	; (8006258 <HAL_RCC_ClockConfig+0x260>)
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	497b      	ldr	r1, [pc, #492]	; (8006258 <HAL_RCC_ClockConfig+0x260>)
 800606a:	4313      	orrs	r3, r2
 800606c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f003 0301 	and.w	r3, r3, #1
 8006076:	2b00      	cmp	r3, #0
 8006078:	d079      	beq.n	800616e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	2b03      	cmp	r3, #3
 8006080:	d11e      	bne.n	80060c0 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006082:	4b75      	ldr	r3, [pc, #468]	; (8006258 <HAL_RCC_ClockConfig+0x260>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800608a:	2b00      	cmp	r3, #0
 800608c:	d101      	bne.n	8006092 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800608e:	2301      	movs	r3, #1
 8006090:	e0dc      	b.n	800624c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8006092:	f000 fa09 	bl	80064a8 <RCC_GetSysClockFreqFromPLLSource>
 8006096:	4603      	mov	r3, r0
 8006098:	4a70      	ldr	r2, [pc, #448]	; (800625c <HAL_RCC_ClockConfig+0x264>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d946      	bls.n	800612c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800609e:	4b6e      	ldr	r3, [pc, #440]	; (8006258 <HAL_RCC_ClockConfig+0x260>)
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d140      	bne.n	800612c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80060aa:	4b6b      	ldr	r3, [pc, #428]	; (8006258 <HAL_RCC_ClockConfig+0x260>)
 80060ac:	689b      	ldr	r3, [r3, #8]
 80060ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060b2:	4a69      	ldr	r2, [pc, #420]	; (8006258 <HAL_RCC_ClockConfig+0x260>)
 80060b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060b8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80060ba:	2380      	movs	r3, #128	; 0x80
 80060bc:	617b      	str	r3, [r7, #20]
 80060be:	e035      	b.n	800612c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	2b02      	cmp	r3, #2
 80060c6:	d107      	bne.n	80060d8 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80060c8:	4b63      	ldr	r3, [pc, #396]	; (8006258 <HAL_RCC_ClockConfig+0x260>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d115      	bne.n	8006100 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80060d4:	2301      	movs	r3, #1
 80060d6:	e0b9      	b.n	800624c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d107      	bne.n	80060f0 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80060e0:	4b5d      	ldr	r3, [pc, #372]	; (8006258 <HAL_RCC_ClockConfig+0x260>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f003 0302 	and.w	r3, r3, #2
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d109      	bne.n	8006100 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80060ec:	2301      	movs	r3, #1
 80060ee:	e0ad      	b.n	800624c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80060f0:	4b59      	ldr	r3, [pc, #356]	; (8006258 <HAL_RCC_ClockConfig+0x260>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d101      	bne.n	8006100 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80060fc:	2301      	movs	r3, #1
 80060fe:	e0a5      	b.n	800624c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8006100:	f000 f8b4 	bl	800626c <HAL_RCC_GetSysClockFreq>
 8006104:	4603      	mov	r3, r0
 8006106:	4a55      	ldr	r2, [pc, #340]	; (800625c <HAL_RCC_ClockConfig+0x264>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d90f      	bls.n	800612c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800610c:	4b52      	ldr	r3, [pc, #328]	; (8006258 <HAL_RCC_ClockConfig+0x260>)
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006114:	2b00      	cmp	r3, #0
 8006116:	d109      	bne.n	800612c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006118:	4b4f      	ldr	r3, [pc, #316]	; (8006258 <HAL_RCC_ClockConfig+0x260>)
 800611a:	689b      	ldr	r3, [r3, #8]
 800611c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006120:	4a4d      	ldr	r2, [pc, #308]	; (8006258 <HAL_RCC_ClockConfig+0x260>)
 8006122:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006126:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006128:	2380      	movs	r3, #128	; 0x80
 800612a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800612c:	4b4a      	ldr	r3, [pc, #296]	; (8006258 <HAL_RCC_ClockConfig+0x260>)
 800612e:	689b      	ldr	r3, [r3, #8]
 8006130:	f023 0203 	bic.w	r2, r3, #3
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	4947      	ldr	r1, [pc, #284]	; (8006258 <HAL_RCC_ClockConfig+0x260>)
 800613a:	4313      	orrs	r3, r2
 800613c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800613e:	f7fd ff37 	bl	8003fb0 <HAL_GetTick>
 8006142:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006144:	e00a      	b.n	800615c <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006146:	f7fd ff33 	bl	8003fb0 <HAL_GetTick>
 800614a:	4602      	mov	r2, r0
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	1ad3      	subs	r3, r2, r3
 8006150:	f241 3288 	movw	r2, #5000	; 0x1388
 8006154:	4293      	cmp	r3, r2
 8006156:	d901      	bls.n	800615c <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8006158:	2303      	movs	r3, #3
 800615a:	e077      	b.n	800624c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800615c:	4b3e      	ldr	r3, [pc, #248]	; (8006258 <HAL_RCC_ClockConfig+0x260>)
 800615e:	689b      	ldr	r3, [r3, #8]
 8006160:	f003 020c 	and.w	r2, r3, #12
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	009b      	lsls	r3, r3, #2
 800616a:	429a      	cmp	r2, r3
 800616c:	d1eb      	bne.n	8006146 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	2b80      	cmp	r3, #128	; 0x80
 8006172:	d105      	bne.n	8006180 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006174:	4b38      	ldr	r3, [pc, #224]	; (8006258 <HAL_RCC_ClockConfig+0x260>)
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	4a37      	ldr	r2, [pc, #220]	; (8006258 <HAL_RCC_ClockConfig+0x260>)
 800617a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800617e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f003 0302 	and.w	r3, r3, #2
 8006188:	2b00      	cmp	r3, #0
 800618a:	d010      	beq.n	80061ae <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	689a      	ldr	r2, [r3, #8]
 8006190:	4b31      	ldr	r3, [pc, #196]	; (8006258 <HAL_RCC_ClockConfig+0x260>)
 8006192:	689b      	ldr	r3, [r3, #8]
 8006194:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006198:	429a      	cmp	r2, r3
 800619a:	d208      	bcs.n	80061ae <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800619c:	4b2e      	ldr	r3, [pc, #184]	; (8006258 <HAL_RCC_ClockConfig+0x260>)
 800619e:	689b      	ldr	r3, [r3, #8]
 80061a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	689b      	ldr	r3, [r3, #8]
 80061a8:	492b      	ldr	r1, [pc, #172]	; (8006258 <HAL_RCC_ClockConfig+0x260>)
 80061aa:	4313      	orrs	r3, r2
 80061ac:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80061ae:	4b29      	ldr	r3, [pc, #164]	; (8006254 <HAL_RCC_ClockConfig+0x25c>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f003 030f 	and.w	r3, r3, #15
 80061b6:	683a      	ldr	r2, [r7, #0]
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d210      	bcs.n	80061de <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061bc:	4b25      	ldr	r3, [pc, #148]	; (8006254 <HAL_RCC_ClockConfig+0x25c>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f023 020f 	bic.w	r2, r3, #15
 80061c4:	4923      	ldr	r1, [pc, #140]	; (8006254 <HAL_RCC_ClockConfig+0x25c>)
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	4313      	orrs	r3, r2
 80061ca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80061cc:	4b21      	ldr	r3, [pc, #132]	; (8006254 <HAL_RCC_ClockConfig+0x25c>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f003 030f 	and.w	r3, r3, #15
 80061d4:	683a      	ldr	r2, [r7, #0]
 80061d6:	429a      	cmp	r2, r3
 80061d8:	d001      	beq.n	80061de <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	e036      	b.n	800624c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f003 0304 	and.w	r3, r3, #4
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d008      	beq.n	80061fc <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80061ea:	4b1b      	ldr	r3, [pc, #108]	; (8006258 <HAL_RCC_ClockConfig+0x260>)
 80061ec:	689b      	ldr	r3, [r3, #8]
 80061ee:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	68db      	ldr	r3, [r3, #12]
 80061f6:	4918      	ldr	r1, [pc, #96]	; (8006258 <HAL_RCC_ClockConfig+0x260>)
 80061f8:	4313      	orrs	r3, r2
 80061fa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f003 0308 	and.w	r3, r3, #8
 8006204:	2b00      	cmp	r3, #0
 8006206:	d009      	beq.n	800621c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006208:	4b13      	ldr	r3, [pc, #76]	; (8006258 <HAL_RCC_ClockConfig+0x260>)
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	691b      	ldr	r3, [r3, #16]
 8006214:	00db      	lsls	r3, r3, #3
 8006216:	4910      	ldr	r1, [pc, #64]	; (8006258 <HAL_RCC_ClockConfig+0x260>)
 8006218:	4313      	orrs	r3, r2
 800621a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800621c:	f000 f826 	bl	800626c <HAL_RCC_GetSysClockFreq>
 8006220:	4602      	mov	r2, r0
 8006222:	4b0d      	ldr	r3, [pc, #52]	; (8006258 <HAL_RCC_ClockConfig+0x260>)
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	091b      	lsrs	r3, r3, #4
 8006228:	f003 030f 	and.w	r3, r3, #15
 800622c:	490c      	ldr	r1, [pc, #48]	; (8006260 <HAL_RCC_ClockConfig+0x268>)
 800622e:	5ccb      	ldrb	r3, [r1, r3]
 8006230:	f003 031f 	and.w	r3, r3, #31
 8006234:	fa22 f303 	lsr.w	r3, r2, r3
 8006238:	4a0a      	ldr	r2, [pc, #40]	; (8006264 <HAL_RCC_ClockConfig+0x26c>)
 800623a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800623c:	4b0a      	ldr	r3, [pc, #40]	; (8006268 <HAL_RCC_ClockConfig+0x270>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4618      	mov	r0, r3
 8006242:	f7fd fe65 	bl	8003f10 <HAL_InitTick>
 8006246:	4603      	mov	r3, r0
 8006248:	73fb      	strb	r3, [r7, #15]

  return status;
 800624a:	7bfb      	ldrb	r3, [r7, #15]
}
 800624c:	4618      	mov	r0, r3
 800624e:	3718      	adds	r7, #24
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}
 8006254:	40022000 	.word	0x40022000
 8006258:	40021000 	.word	0x40021000
 800625c:	04c4b400 	.word	0x04c4b400
 8006260:	0800ebec 	.word	0x0800ebec
 8006264:	20000014 	.word	0x20000014
 8006268:	20000018 	.word	0x20000018

0800626c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800626c:	b480      	push	{r7}
 800626e:	b089      	sub	sp, #36	; 0x24
 8006270:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006272:	2300      	movs	r3, #0
 8006274:	61fb      	str	r3, [r7, #28]
 8006276:	2300      	movs	r3, #0
 8006278:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800627a:	4b3e      	ldr	r3, [pc, #248]	; (8006374 <HAL_RCC_GetSysClockFreq+0x108>)
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	f003 030c 	and.w	r3, r3, #12
 8006282:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006284:	4b3b      	ldr	r3, [pc, #236]	; (8006374 <HAL_RCC_GetSysClockFreq+0x108>)
 8006286:	68db      	ldr	r3, [r3, #12]
 8006288:	f003 0303 	and.w	r3, r3, #3
 800628c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d005      	beq.n	80062a0 <HAL_RCC_GetSysClockFreq+0x34>
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	2b0c      	cmp	r3, #12
 8006298:	d121      	bne.n	80062de <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2b01      	cmp	r3, #1
 800629e:	d11e      	bne.n	80062de <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80062a0:	4b34      	ldr	r3, [pc, #208]	; (8006374 <HAL_RCC_GetSysClockFreq+0x108>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f003 0308 	and.w	r3, r3, #8
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d107      	bne.n	80062bc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80062ac:	4b31      	ldr	r3, [pc, #196]	; (8006374 <HAL_RCC_GetSysClockFreq+0x108>)
 80062ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80062b2:	0a1b      	lsrs	r3, r3, #8
 80062b4:	f003 030f 	and.w	r3, r3, #15
 80062b8:	61fb      	str	r3, [r7, #28]
 80062ba:	e005      	b.n	80062c8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80062bc:	4b2d      	ldr	r3, [pc, #180]	; (8006374 <HAL_RCC_GetSysClockFreq+0x108>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	091b      	lsrs	r3, r3, #4
 80062c2:	f003 030f 	and.w	r3, r3, #15
 80062c6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80062c8:	4a2b      	ldr	r2, [pc, #172]	; (8006378 <HAL_RCC_GetSysClockFreq+0x10c>)
 80062ca:	69fb      	ldr	r3, [r7, #28]
 80062cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062d0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d10d      	bne.n	80062f4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80062d8:	69fb      	ldr	r3, [r7, #28]
 80062da:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80062dc:	e00a      	b.n	80062f4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	2b04      	cmp	r3, #4
 80062e2:	d102      	bne.n	80062ea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80062e4:	4b25      	ldr	r3, [pc, #148]	; (800637c <HAL_RCC_GetSysClockFreq+0x110>)
 80062e6:	61bb      	str	r3, [r7, #24]
 80062e8:	e004      	b.n	80062f4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	2b08      	cmp	r3, #8
 80062ee:	d101      	bne.n	80062f4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80062f0:	4b23      	ldr	r3, [pc, #140]	; (8006380 <HAL_RCC_GetSysClockFreq+0x114>)
 80062f2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	2b0c      	cmp	r3, #12
 80062f8:	d134      	bne.n	8006364 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80062fa:	4b1e      	ldr	r3, [pc, #120]	; (8006374 <HAL_RCC_GetSysClockFreq+0x108>)
 80062fc:	68db      	ldr	r3, [r3, #12]
 80062fe:	f003 0303 	and.w	r3, r3, #3
 8006302:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	2b02      	cmp	r3, #2
 8006308:	d003      	beq.n	8006312 <HAL_RCC_GetSysClockFreq+0xa6>
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	2b03      	cmp	r3, #3
 800630e:	d003      	beq.n	8006318 <HAL_RCC_GetSysClockFreq+0xac>
 8006310:	e005      	b.n	800631e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006312:	4b1a      	ldr	r3, [pc, #104]	; (800637c <HAL_RCC_GetSysClockFreq+0x110>)
 8006314:	617b      	str	r3, [r7, #20]
      break;
 8006316:	e005      	b.n	8006324 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006318:	4b19      	ldr	r3, [pc, #100]	; (8006380 <HAL_RCC_GetSysClockFreq+0x114>)
 800631a:	617b      	str	r3, [r7, #20]
      break;
 800631c:	e002      	b.n	8006324 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800631e:	69fb      	ldr	r3, [r7, #28]
 8006320:	617b      	str	r3, [r7, #20]
      break;
 8006322:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006324:	4b13      	ldr	r3, [pc, #76]	; (8006374 <HAL_RCC_GetSysClockFreq+0x108>)
 8006326:	68db      	ldr	r3, [r3, #12]
 8006328:	091b      	lsrs	r3, r3, #4
 800632a:	f003 030f 	and.w	r3, r3, #15
 800632e:	3301      	adds	r3, #1
 8006330:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006332:	4b10      	ldr	r3, [pc, #64]	; (8006374 <HAL_RCC_GetSysClockFreq+0x108>)
 8006334:	68db      	ldr	r3, [r3, #12]
 8006336:	0a1b      	lsrs	r3, r3, #8
 8006338:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800633c:	697a      	ldr	r2, [r7, #20]
 800633e:	fb03 f202 	mul.w	r2, r3, r2
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	fbb2 f3f3 	udiv	r3, r2, r3
 8006348:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800634a:	4b0a      	ldr	r3, [pc, #40]	; (8006374 <HAL_RCC_GetSysClockFreq+0x108>)
 800634c:	68db      	ldr	r3, [r3, #12]
 800634e:	0e5b      	lsrs	r3, r3, #25
 8006350:	f003 0303 	and.w	r3, r3, #3
 8006354:	3301      	adds	r3, #1
 8006356:	005b      	lsls	r3, r3, #1
 8006358:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800635a:	697a      	ldr	r2, [r7, #20]
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006362:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006364:	69bb      	ldr	r3, [r7, #24]
}
 8006366:	4618      	mov	r0, r3
 8006368:	3724      	adds	r7, #36	; 0x24
 800636a:	46bd      	mov	sp, r7
 800636c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006370:	4770      	bx	lr
 8006372:	bf00      	nop
 8006374:	40021000 	.word	0x40021000
 8006378:	0800ec04 	.word	0x0800ec04
 800637c:	00f42400 	.word	0x00f42400
 8006380:	007a1200 	.word	0x007a1200

08006384 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006384:	b480      	push	{r7}
 8006386:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006388:	4b03      	ldr	r3, [pc, #12]	; (8006398 <HAL_RCC_GetHCLKFreq+0x14>)
 800638a:	681b      	ldr	r3, [r3, #0]
}
 800638c:	4618      	mov	r0, r3
 800638e:	46bd      	mov	sp, r7
 8006390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006394:	4770      	bx	lr
 8006396:	bf00      	nop
 8006398:	20000014 	.word	0x20000014

0800639c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80063a0:	f7ff fff0 	bl	8006384 <HAL_RCC_GetHCLKFreq>
 80063a4:	4602      	mov	r2, r0
 80063a6:	4b06      	ldr	r3, [pc, #24]	; (80063c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80063a8:	689b      	ldr	r3, [r3, #8]
 80063aa:	0a1b      	lsrs	r3, r3, #8
 80063ac:	f003 0307 	and.w	r3, r3, #7
 80063b0:	4904      	ldr	r1, [pc, #16]	; (80063c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80063b2:	5ccb      	ldrb	r3, [r1, r3]
 80063b4:	f003 031f 	and.w	r3, r3, #31
 80063b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80063bc:	4618      	mov	r0, r3
 80063be:	bd80      	pop	{r7, pc}
 80063c0:	40021000 	.word	0x40021000
 80063c4:	0800ebfc 	.word	0x0800ebfc

080063c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80063cc:	f7ff ffda 	bl	8006384 <HAL_RCC_GetHCLKFreq>
 80063d0:	4602      	mov	r2, r0
 80063d2:	4b06      	ldr	r3, [pc, #24]	; (80063ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80063d4:	689b      	ldr	r3, [r3, #8]
 80063d6:	0adb      	lsrs	r3, r3, #11
 80063d8:	f003 0307 	and.w	r3, r3, #7
 80063dc:	4904      	ldr	r1, [pc, #16]	; (80063f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80063de:	5ccb      	ldrb	r3, [r1, r3]
 80063e0:	f003 031f 	and.w	r3, r3, #31
 80063e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	bd80      	pop	{r7, pc}
 80063ec:	40021000 	.word	0x40021000
 80063f0:	0800ebfc 	.word	0x0800ebfc

080063f4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b086      	sub	sp, #24
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80063fc:	2300      	movs	r3, #0
 80063fe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006400:	4b27      	ldr	r3, [pc, #156]	; (80064a0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006404:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006408:	2b00      	cmp	r3, #0
 800640a:	d003      	beq.n	8006414 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800640c:	f7ff f906 	bl	800561c <HAL_PWREx_GetVoltageRange>
 8006410:	6178      	str	r0, [r7, #20]
 8006412:	e014      	b.n	800643e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006414:	4b22      	ldr	r3, [pc, #136]	; (80064a0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006418:	4a21      	ldr	r2, [pc, #132]	; (80064a0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800641a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800641e:	6593      	str	r3, [r2, #88]	; 0x58
 8006420:	4b1f      	ldr	r3, [pc, #124]	; (80064a0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006422:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006424:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006428:	60fb      	str	r3, [r7, #12]
 800642a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800642c:	f7ff f8f6 	bl	800561c <HAL_PWREx_GetVoltageRange>
 8006430:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006432:	4b1b      	ldr	r3, [pc, #108]	; (80064a0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006436:	4a1a      	ldr	r2, [pc, #104]	; (80064a0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006438:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800643c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006444:	d10b      	bne.n	800645e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2b80      	cmp	r3, #128	; 0x80
 800644a:	d913      	bls.n	8006474 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2ba0      	cmp	r3, #160	; 0xa0
 8006450:	d902      	bls.n	8006458 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006452:	2302      	movs	r3, #2
 8006454:	613b      	str	r3, [r7, #16]
 8006456:	e00d      	b.n	8006474 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006458:	2301      	movs	r3, #1
 800645a:	613b      	str	r3, [r7, #16]
 800645c:	e00a      	b.n	8006474 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2b7f      	cmp	r3, #127	; 0x7f
 8006462:	d902      	bls.n	800646a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8006464:	2302      	movs	r3, #2
 8006466:	613b      	str	r3, [r7, #16]
 8006468:	e004      	b.n	8006474 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2b70      	cmp	r3, #112	; 0x70
 800646e:	d101      	bne.n	8006474 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006470:	2301      	movs	r3, #1
 8006472:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006474:	4b0b      	ldr	r3, [pc, #44]	; (80064a4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f023 020f 	bic.w	r2, r3, #15
 800647c:	4909      	ldr	r1, [pc, #36]	; (80064a4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	4313      	orrs	r3, r2
 8006482:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006484:	4b07      	ldr	r3, [pc, #28]	; (80064a4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f003 030f 	and.w	r3, r3, #15
 800648c:	693a      	ldr	r2, [r7, #16]
 800648e:	429a      	cmp	r2, r3
 8006490:	d001      	beq.n	8006496 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	e000      	b.n	8006498 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8006496:	2300      	movs	r3, #0
}
 8006498:	4618      	mov	r0, r3
 800649a:	3718      	adds	r7, #24
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}
 80064a0:	40021000 	.word	0x40021000
 80064a4:	40022000 	.word	0x40022000

080064a8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b087      	sub	sp, #28
 80064ac:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80064ae:	4b2d      	ldr	r3, [pc, #180]	; (8006564 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80064b0:	68db      	ldr	r3, [r3, #12]
 80064b2:	f003 0303 	and.w	r3, r3, #3
 80064b6:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2b03      	cmp	r3, #3
 80064bc:	d00b      	beq.n	80064d6 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2b03      	cmp	r3, #3
 80064c2:	d825      	bhi.n	8006510 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	d008      	beq.n	80064dc <RCC_GetSysClockFreqFromPLLSource+0x34>
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2b02      	cmp	r3, #2
 80064ce:	d11f      	bne.n	8006510 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80064d0:	4b25      	ldr	r3, [pc, #148]	; (8006568 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80064d2:	613b      	str	r3, [r7, #16]
    break;
 80064d4:	e01f      	b.n	8006516 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80064d6:	4b25      	ldr	r3, [pc, #148]	; (800656c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80064d8:	613b      	str	r3, [r7, #16]
    break;
 80064da:	e01c      	b.n	8006516 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80064dc:	4b21      	ldr	r3, [pc, #132]	; (8006564 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f003 0308 	and.w	r3, r3, #8
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d107      	bne.n	80064f8 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80064e8:	4b1e      	ldr	r3, [pc, #120]	; (8006564 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80064ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80064ee:	0a1b      	lsrs	r3, r3, #8
 80064f0:	f003 030f 	and.w	r3, r3, #15
 80064f4:	617b      	str	r3, [r7, #20]
 80064f6:	e005      	b.n	8006504 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80064f8:	4b1a      	ldr	r3, [pc, #104]	; (8006564 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	091b      	lsrs	r3, r3, #4
 80064fe:	f003 030f 	and.w	r3, r3, #15
 8006502:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8006504:	4a1a      	ldr	r2, [pc, #104]	; (8006570 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800650c:	613b      	str	r3, [r7, #16]
    break;
 800650e:	e002      	b.n	8006516 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8006510:	2300      	movs	r3, #0
 8006512:	613b      	str	r3, [r7, #16]
    break;
 8006514:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006516:	4b13      	ldr	r3, [pc, #76]	; (8006564 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006518:	68db      	ldr	r3, [r3, #12]
 800651a:	091b      	lsrs	r3, r3, #4
 800651c:	f003 030f 	and.w	r3, r3, #15
 8006520:	3301      	adds	r3, #1
 8006522:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006524:	4b0f      	ldr	r3, [pc, #60]	; (8006564 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006526:	68db      	ldr	r3, [r3, #12]
 8006528:	0a1b      	lsrs	r3, r3, #8
 800652a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800652e:	693a      	ldr	r2, [r7, #16]
 8006530:	fb03 f202 	mul.w	r2, r3, r2
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	fbb2 f3f3 	udiv	r3, r2, r3
 800653a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800653c:	4b09      	ldr	r3, [pc, #36]	; (8006564 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800653e:	68db      	ldr	r3, [r3, #12]
 8006540:	0e5b      	lsrs	r3, r3, #25
 8006542:	f003 0303 	and.w	r3, r3, #3
 8006546:	3301      	adds	r3, #1
 8006548:	005b      	lsls	r3, r3, #1
 800654a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800654c:	693a      	ldr	r2, [r7, #16]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	fbb2 f3f3 	udiv	r3, r2, r3
 8006554:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8006556:	683b      	ldr	r3, [r7, #0]
}
 8006558:	4618      	mov	r0, r3
 800655a:	371c      	adds	r7, #28
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr
 8006564:	40021000 	.word	0x40021000
 8006568:	00f42400 	.word	0x00f42400
 800656c:	007a1200 	.word	0x007a1200
 8006570:	0800ec04 	.word	0x0800ec04

08006574 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b086      	sub	sp, #24
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800657c:	2300      	movs	r3, #0
 800657e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006580:	2300      	movs	r3, #0
 8006582:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800658c:	2b00      	cmp	r3, #0
 800658e:	d040      	beq.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006594:	2b80      	cmp	r3, #128	; 0x80
 8006596:	d02a      	beq.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006598:	2b80      	cmp	r3, #128	; 0x80
 800659a:	d825      	bhi.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800659c:	2b60      	cmp	r3, #96	; 0x60
 800659e:	d026      	beq.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80065a0:	2b60      	cmp	r3, #96	; 0x60
 80065a2:	d821      	bhi.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80065a4:	2b40      	cmp	r3, #64	; 0x40
 80065a6:	d006      	beq.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x42>
 80065a8:	2b40      	cmp	r3, #64	; 0x40
 80065aa:	d81d      	bhi.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d009      	beq.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80065b0:	2b20      	cmp	r3, #32
 80065b2:	d010      	beq.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x62>
 80065b4:	e018      	b.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80065b6:	4b89      	ldr	r3, [pc, #548]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80065b8:	68db      	ldr	r3, [r3, #12]
 80065ba:	4a88      	ldr	r2, [pc, #544]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80065bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065c0:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80065c2:	e015      	b.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	3304      	adds	r3, #4
 80065c8:	2100      	movs	r1, #0
 80065ca:	4618      	mov	r0, r3
 80065cc:	f001 fa34 	bl	8007a38 <RCCEx_PLLSAI1_Config>
 80065d0:	4603      	mov	r3, r0
 80065d2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80065d4:	e00c      	b.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	3320      	adds	r3, #32
 80065da:	2100      	movs	r1, #0
 80065dc:	4618      	mov	r0, r3
 80065de:	f001 fb1f 	bl	8007c20 <RCCEx_PLLSAI2_Config>
 80065e2:	4603      	mov	r3, r0
 80065e4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80065e6:	e003      	b.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80065e8:	2301      	movs	r3, #1
 80065ea:	74fb      	strb	r3, [r7, #19]
      break;
 80065ec:	e000      	b.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80065ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065f0:	7cfb      	ldrb	r3, [r7, #19]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d10b      	bne.n	800660e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80065f6:	4b79      	ldr	r3, [pc, #484]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80065f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80065fc:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006604:	4975      	ldr	r1, [pc, #468]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006606:	4313      	orrs	r3, r2
 8006608:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800660c:	e001      	b.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800660e:	7cfb      	ldrb	r3, [r7, #19]
 8006610:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800661a:	2b00      	cmp	r3, #0
 800661c:	d047      	beq.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006622:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006626:	d030      	beq.n	800668a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8006628:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800662c:	d82a      	bhi.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800662e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006632:	d02a      	beq.n	800668a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8006634:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006638:	d824      	bhi.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800663a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800663e:	d008      	beq.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8006640:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006644:	d81e      	bhi.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006646:	2b00      	cmp	r3, #0
 8006648:	d00a      	beq.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800664a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800664e:	d010      	beq.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006650:	e018      	b.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006652:	4b62      	ldr	r3, [pc, #392]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006654:	68db      	ldr	r3, [r3, #12]
 8006656:	4a61      	ldr	r2, [pc, #388]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006658:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800665c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800665e:	e015      	b.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	3304      	adds	r3, #4
 8006664:	2100      	movs	r1, #0
 8006666:	4618      	mov	r0, r3
 8006668:	f001 f9e6 	bl	8007a38 <RCCEx_PLLSAI1_Config>
 800666c:	4603      	mov	r3, r0
 800666e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006670:	e00c      	b.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	3320      	adds	r3, #32
 8006676:	2100      	movs	r1, #0
 8006678:	4618      	mov	r0, r3
 800667a:	f001 fad1 	bl	8007c20 <RCCEx_PLLSAI2_Config>
 800667e:	4603      	mov	r3, r0
 8006680:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006682:	e003      	b.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006684:	2301      	movs	r3, #1
 8006686:	74fb      	strb	r3, [r7, #19]
      break;
 8006688:	e000      	b.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800668a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800668c:	7cfb      	ldrb	r3, [r7, #19]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d10b      	bne.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006692:	4b52      	ldr	r3, [pc, #328]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006694:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006698:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066a0:	494e      	ldr	r1, [pc, #312]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80066a2:	4313      	orrs	r3, r2
 80066a4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80066a8:	e001      	b.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066aa:	7cfb      	ldrb	r3, [r7, #19]
 80066ac:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	f000 809f 	beq.w	80067fa <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80066bc:	2300      	movs	r3, #0
 80066be:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80066c0:	4b46      	ldr	r3, [pc, #280]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80066c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d101      	bne.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80066cc:	2301      	movs	r3, #1
 80066ce:	e000      	b.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80066d0:	2300      	movs	r3, #0
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d00d      	beq.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80066d6:	4b41      	ldr	r3, [pc, #260]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80066d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066da:	4a40      	ldr	r2, [pc, #256]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80066dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066e0:	6593      	str	r3, [r2, #88]	; 0x58
 80066e2:	4b3e      	ldr	r3, [pc, #248]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80066e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066ea:	60bb      	str	r3, [r7, #8]
 80066ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80066ee:	2301      	movs	r3, #1
 80066f0:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80066f2:	4b3b      	ldr	r3, [pc, #236]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a3a      	ldr	r2, [pc, #232]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80066f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066fc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80066fe:	f7fd fc57 	bl	8003fb0 <HAL_GetTick>
 8006702:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006704:	e009      	b.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006706:	f7fd fc53 	bl	8003fb0 <HAL_GetTick>
 800670a:	4602      	mov	r2, r0
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	1ad3      	subs	r3, r2, r3
 8006710:	2b02      	cmp	r3, #2
 8006712:	d902      	bls.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8006714:	2303      	movs	r3, #3
 8006716:	74fb      	strb	r3, [r7, #19]
        break;
 8006718:	e005      	b.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800671a:	4b31      	ldr	r3, [pc, #196]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006722:	2b00      	cmp	r3, #0
 8006724:	d0ef      	beq.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8006726:	7cfb      	ldrb	r3, [r7, #19]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d15b      	bne.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800672c:	4b2b      	ldr	r3, [pc, #172]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800672e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006732:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006736:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d01f      	beq.n	800677e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006744:	697a      	ldr	r2, [r7, #20]
 8006746:	429a      	cmp	r2, r3
 8006748:	d019      	beq.n	800677e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800674a:	4b24      	ldr	r3, [pc, #144]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800674c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006750:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006754:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006756:	4b21      	ldr	r3, [pc, #132]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006758:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800675c:	4a1f      	ldr	r2, [pc, #124]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800675e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006762:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006766:	4b1d      	ldr	r3, [pc, #116]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006768:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800676c:	4a1b      	ldr	r2, [pc, #108]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800676e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006772:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006776:	4a19      	ldr	r2, [pc, #100]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	f003 0301 	and.w	r3, r3, #1
 8006784:	2b00      	cmp	r3, #0
 8006786:	d016      	beq.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006788:	f7fd fc12 	bl	8003fb0 <HAL_GetTick>
 800678c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800678e:	e00b      	b.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006790:	f7fd fc0e 	bl	8003fb0 <HAL_GetTick>
 8006794:	4602      	mov	r2, r0
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	1ad3      	subs	r3, r2, r3
 800679a:	f241 3288 	movw	r2, #5000	; 0x1388
 800679e:	4293      	cmp	r3, r2
 80067a0:	d902      	bls.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80067a2:	2303      	movs	r3, #3
 80067a4:	74fb      	strb	r3, [r7, #19]
            break;
 80067a6:	e006      	b.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80067a8:	4b0c      	ldr	r3, [pc, #48]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80067aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067ae:	f003 0302 	and.w	r3, r3, #2
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d0ec      	beq.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80067b6:	7cfb      	ldrb	r3, [r7, #19]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d10c      	bne.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80067bc:	4b07      	ldr	r3, [pc, #28]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80067be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067c2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067cc:	4903      	ldr	r1, [pc, #12]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80067ce:	4313      	orrs	r3, r2
 80067d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80067d4:	e008      	b.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80067d6:	7cfb      	ldrb	r3, [r7, #19]
 80067d8:	74bb      	strb	r3, [r7, #18]
 80067da:	e005      	b.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80067dc:	40021000 	.word	0x40021000
 80067e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067e4:	7cfb      	ldrb	r3, [r7, #19]
 80067e6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80067e8:	7c7b      	ldrb	r3, [r7, #17]
 80067ea:	2b01      	cmp	r3, #1
 80067ec:	d105      	bne.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80067ee:	4ba0      	ldr	r3, [pc, #640]	; (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80067f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067f2:	4a9f      	ldr	r2, [pc, #636]	; (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80067f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80067f8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f003 0301 	and.w	r3, r3, #1
 8006802:	2b00      	cmp	r3, #0
 8006804:	d00a      	beq.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006806:	4b9a      	ldr	r3, [pc, #616]	; (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006808:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800680c:	f023 0203 	bic.w	r2, r3, #3
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006814:	4996      	ldr	r1, [pc, #600]	; (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006816:	4313      	orrs	r3, r2
 8006818:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f003 0302 	and.w	r3, r3, #2
 8006824:	2b00      	cmp	r3, #0
 8006826:	d00a      	beq.n	800683e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006828:	4b91      	ldr	r3, [pc, #580]	; (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800682a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800682e:	f023 020c 	bic.w	r2, r3, #12
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006836:	498e      	ldr	r1, [pc, #568]	; (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006838:	4313      	orrs	r3, r2
 800683a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f003 0304 	and.w	r3, r3, #4
 8006846:	2b00      	cmp	r3, #0
 8006848:	d00a      	beq.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800684a:	4b89      	ldr	r3, [pc, #548]	; (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800684c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006850:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006858:	4985      	ldr	r1, [pc, #532]	; (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800685a:	4313      	orrs	r3, r2
 800685c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f003 0308 	and.w	r3, r3, #8
 8006868:	2b00      	cmp	r3, #0
 800686a:	d00a      	beq.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800686c:	4b80      	ldr	r3, [pc, #512]	; (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800686e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006872:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800687a:	497d      	ldr	r1, [pc, #500]	; (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800687c:	4313      	orrs	r3, r2
 800687e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f003 0310 	and.w	r3, r3, #16
 800688a:	2b00      	cmp	r3, #0
 800688c:	d00a      	beq.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800688e:	4b78      	ldr	r3, [pc, #480]	; (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006890:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006894:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800689c:	4974      	ldr	r1, [pc, #464]	; (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800689e:	4313      	orrs	r3, r2
 80068a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f003 0320 	and.w	r3, r3, #32
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d00a      	beq.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80068b0:	4b6f      	ldr	r3, [pc, #444]	; (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80068b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068b6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068be:	496c      	ldr	r1, [pc, #432]	; (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80068c0:	4313      	orrs	r3, r2
 80068c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d00a      	beq.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80068d2:	4b67      	ldr	r3, [pc, #412]	; (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80068d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068d8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068e0:	4963      	ldr	r1, [pc, #396]	; (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80068e2:	4313      	orrs	r3, r2
 80068e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d00a      	beq.n	800690a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80068f4:	4b5e      	ldr	r3, [pc, #376]	; (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80068f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006902:	495b      	ldr	r1, [pc, #364]	; (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006904:	4313      	orrs	r3, r2
 8006906:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006912:	2b00      	cmp	r3, #0
 8006914:	d00a      	beq.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006916:	4b56      	ldr	r3, [pc, #344]	; (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006918:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800691c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006924:	4952      	ldr	r1, [pc, #328]	; (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006926:	4313      	orrs	r3, r2
 8006928:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006934:	2b00      	cmp	r3, #0
 8006936:	d00a      	beq.n	800694e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006938:	4b4d      	ldr	r3, [pc, #308]	; (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800693a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800693e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006946:	494a      	ldr	r1, [pc, #296]	; (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006948:	4313      	orrs	r3, r2
 800694a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006956:	2b00      	cmp	r3, #0
 8006958:	d00a      	beq.n	8006970 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800695a:	4b45      	ldr	r3, [pc, #276]	; (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800695c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006960:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006968:	4941      	ldr	r1, [pc, #260]	; (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800696a:	4313      	orrs	r3, r2
 800696c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006978:	2b00      	cmp	r3, #0
 800697a:	d00a      	beq.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800697c:	4b3c      	ldr	r3, [pc, #240]	; (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800697e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006982:	f023 0203 	bic.w	r2, r3, #3
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800698a:	4939      	ldr	r1, [pc, #228]	; (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800698c:	4313      	orrs	r3, r2
 800698e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800699a:	2b00      	cmp	r3, #0
 800699c:	d028      	beq.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800699e:	4b34      	ldr	r3, [pc, #208]	; (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80069a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069a4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069ac:	4930      	ldr	r1, [pc, #192]	; (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80069ae:	4313      	orrs	r3, r2
 80069b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80069bc:	d106      	bne.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80069be:	4b2c      	ldr	r3, [pc, #176]	; (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80069c0:	68db      	ldr	r3, [r3, #12]
 80069c2:	4a2b      	ldr	r2, [pc, #172]	; (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80069c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80069c8:	60d3      	str	r3, [r2, #12]
 80069ca:	e011      	b.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80069d4:	d10c      	bne.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	3304      	adds	r3, #4
 80069da:	2101      	movs	r1, #1
 80069dc:	4618      	mov	r0, r3
 80069de:	f001 f82b 	bl	8007a38 <RCCEx_PLLSAI1_Config>
 80069e2:	4603      	mov	r3, r0
 80069e4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80069e6:	7cfb      	ldrb	r3, [r7, #19]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d001      	beq.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80069ec:	7cfb      	ldrb	r3, [r7, #19]
 80069ee:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d04d      	beq.n	8006a98 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a04:	d108      	bne.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8006a06:	4b1a      	ldr	r3, [pc, #104]	; (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a08:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006a0c:	4a18      	ldr	r2, [pc, #96]	; (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006a12:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8006a16:	e012      	b.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8006a18:	4b15      	ldr	r3, [pc, #84]	; (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006a1e:	4a14      	ldr	r2, [pc, #80]	; (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a24:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8006a28:	4b11      	ldr	r3, [pc, #68]	; (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a2e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a36:	490e      	ldr	r1, [pc, #56]	; (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a46:	d106      	bne.n	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a48:	4b09      	ldr	r3, [pc, #36]	; (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a4a:	68db      	ldr	r3, [r3, #12]
 8006a4c:	4a08      	ldr	r2, [pc, #32]	; (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a52:	60d3      	str	r3, [r2, #12]
 8006a54:	e020      	b.n	8006a98 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a5e:	d109      	bne.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006a60:	4b03      	ldr	r3, [pc, #12]	; (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a62:	68db      	ldr	r3, [r3, #12]
 8006a64:	4a02      	ldr	r2, [pc, #8]	; (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a6a:	60d3      	str	r3, [r2, #12]
 8006a6c:	e014      	b.n	8006a98 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8006a6e:	bf00      	nop
 8006a70:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a78:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006a7c:	d10c      	bne.n	8006a98 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	3304      	adds	r3, #4
 8006a82:	2101      	movs	r1, #1
 8006a84:	4618      	mov	r0, r3
 8006a86:	f000 ffd7 	bl	8007a38 <RCCEx_PLLSAI1_Config>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006a8e:	7cfb      	ldrb	r3, [r7, #19]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d001      	beq.n	8006a98 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8006a94:	7cfb      	ldrb	r3, [r7, #19]
 8006a96:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d028      	beq.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006aa4:	4b4a      	ldr	r3, [pc, #296]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aaa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ab2:	4947      	ldr	r1, [pc, #284]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006abe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ac2:	d106      	bne.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006ac4:	4b42      	ldr	r3, [pc, #264]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006ac6:	68db      	ldr	r3, [r3, #12]
 8006ac8:	4a41      	ldr	r2, [pc, #260]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006aca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006ace:	60d3      	str	r3, [r2, #12]
 8006ad0:	e011      	b.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ad6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006ada:	d10c      	bne.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	3304      	adds	r3, #4
 8006ae0:	2101      	movs	r1, #1
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f000 ffa8 	bl	8007a38 <RCCEx_PLLSAI1_Config>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006aec:	7cfb      	ldrb	r3, [r7, #19]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d001      	beq.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8006af2:	7cfb      	ldrb	r3, [r7, #19]
 8006af4:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d01e      	beq.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006b02:	4b33      	ldr	r3, [pc, #204]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b08:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b12:	492f      	ldr	r1, [pc, #188]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006b14:	4313      	orrs	r3, r2
 8006b16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b20:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b24:	d10c      	bne.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	3304      	adds	r3, #4
 8006b2a:	2102      	movs	r1, #2
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	f000 ff83 	bl	8007a38 <RCCEx_PLLSAI1_Config>
 8006b32:	4603      	mov	r3, r0
 8006b34:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006b36:	7cfb      	ldrb	r3, [r7, #19]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d001      	beq.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8006b3c:	7cfb      	ldrb	r3, [r7, #19]
 8006b3e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d00b      	beq.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006b4c:	4b20      	ldr	r3, [pc, #128]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006b4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006b52:	f023 0204 	bic.w	r2, r3, #4
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b5c:	491c      	ldr	r1, [pc, #112]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d00b      	beq.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006b70:	4b17      	ldr	r3, [pc, #92]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006b72:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006b76:	f023 0218 	bic.w	r2, r3, #24
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b80:	4913      	ldr	r1, [pc, #76]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006b82:	4313      	orrs	r3, r2
 8006b84:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d017      	beq.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006b94:	4b0e      	ldr	r3, [pc, #56]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006b96:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006b9a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ba4:	490a      	ldr	r1, [pc, #40]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bb2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006bb6:	d105      	bne.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006bb8:	4b05      	ldr	r3, [pc, #20]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006bba:	68db      	ldr	r3, [r3, #12]
 8006bbc:	4a04      	ldr	r2, [pc, #16]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006bbe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006bc2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006bc4:	7cbb      	ldrb	r3, [r7, #18]
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3718      	adds	r7, #24
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}
 8006bce:	bf00      	nop
 8006bd0:	40021000 	.word	0x40021000

08006bd4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b088      	sub	sp, #32
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006be6:	d13e      	bne.n	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8006be8:	4bb6      	ldr	r3, [pc, #728]	; (8006ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bf2:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006bfa:	d028      	beq.n	8006c4e <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c02:	f200 86f4 	bhi.w	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c0c:	d005      	beq.n	8006c1a <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c14:	d00e      	beq.n	8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8006c16:	f000 beea 	b.w	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006c1a:	4baa      	ldr	r3, [pc, #680]	; (8006ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006c1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c20:	f003 0302 	and.w	r3, r3, #2
 8006c24:	2b02      	cmp	r3, #2
 8006c26:	f040 86e4 	bne.w	80079f2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        frequency = LSE_VALUE;
 8006c2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c2e:	61fb      	str	r3, [r7, #28]
      break;
 8006c30:	f000 bedf 	b.w	80079f2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006c34:	4ba3      	ldr	r3, [pc, #652]	; (8006ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006c36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c3a:	f003 0302 	and.w	r3, r3, #2
 8006c3e:	2b02      	cmp	r3, #2
 8006c40:	f040 86d9 	bne.w	80079f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
          frequency = LSI_VALUE;
 8006c44:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006c48:	61fb      	str	r3, [r7, #28]
      break;
 8006c4a:	f000 bed4 	b.w	80079f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006c4e:	4b9d      	ldr	r3, [pc, #628]	; (8006ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c56:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c5a:	f040 86ce 	bne.w	80079fa <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
        frequency = HSE_VALUE / 32U;
 8006c5e:	4b9a      	ldr	r3, [pc, #616]	; (8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8006c60:	61fb      	str	r3, [r7, #28]
      break;
 8006c62:	f000 beca 	b.w	80079fa <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006c66:	4b97      	ldr	r3, [pc, #604]	; (8006ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006c68:	68db      	ldr	r3, [r3, #12]
 8006c6a:	f003 0303 	and.w	r3, r3, #3
 8006c6e:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	2b03      	cmp	r3, #3
 8006c74:	d036      	beq.n	8006ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	2b03      	cmp	r3, #3
 8006c7a:	d840      	bhi.n	8006cfe <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	2b01      	cmp	r3, #1
 8006c80:	d003      	beq.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	2b02      	cmp	r3, #2
 8006c86:	d020      	beq.n	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8006c88:	e039      	b.n	8006cfe <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006c8a:	4b8e      	ldr	r3, [pc, #568]	; (8006ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f003 0302 	and.w	r3, r3, #2
 8006c92:	2b02      	cmp	r3, #2
 8006c94:	d116      	bne.n	8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006c96:	4b8b      	ldr	r3, [pc, #556]	; (8006ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f003 0308 	and.w	r3, r3, #8
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d005      	beq.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8006ca2:	4b88      	ldr	r3, [pc, #544]	; (8006ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	091b      	lsrs	r3, r3, #4
 8006ca8:	f003 030f 	and.w	r3, r3, #15
 8006cac:	e005      	b.n	8006cba <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8006cae:	4b85      	ldr	r3, [pc, #532]	; (8006ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006cb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006cb4:	0a1b      	lsrs	r3, r3, #8
 8006cb6:	f003 030f 	and.w	r3, r3, #15
 8006cba:	4a84      	ldr	r2, [pc, #528]	; (8006ecc <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8006cbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cc0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8006cc2:	e01f      	b.n	8006d04 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	61bb      	str	r3, [r7, #24]
      break;
 8006cc8:	e01c      	b.n	8006d04 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006cca:	4b7e      	ldr	r3, [pc, #504]	; (8006ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006cd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cd6:	d102      	bne.n	8006cde <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8006cd8:	4b7d      	ldr	r3, [pc, #500]	; (8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8006cda:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8006cdc:	e012      	b.n	8006d04 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	61bb      	str	r3, [r7, #24]
      break;
 8006ce2:	e00f      	b.n	8006d04 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006ce4:	4b77      	ldr	r3, [pc, #476]	; (8006ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006cf0:	d102      	bne.n	8006cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8006cf2:	4b78      	ldr	r3, [pc, #480]	; (8006ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8006cf4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8006cf6:	e005      	b.n	8006d04 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	61bb      	str	r3, [r7, #24]
      break;
 8006cfc:	e002      	b.n	8006d04 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	61bb      	str	r3, [r7, #24]
      break;
 8006d02:	bf00      	nop
    }

    switch(PeriphClk)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006d0a:	f000 8606 	beq.w	800791a <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006d14:	f200 8673 	bhi.w	80079fe <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d1e:	f000 8469 	beq.w	80075f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d28:	f200 8669 	bhi.w	80079fe <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d32:	f000 8531 	beq.w	8007798 <HAL_RCCEx_GetPeriphCLKFreq+0xbc4>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d3c:	f200 865f 	bhi.w	80079fe <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006d46:	f000 8187 	beq.w	8007058 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006d50:	f200 8655 	bhi.w	80079fe <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006d5a:	f000 80cd 	beq.w	8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006d64:	f200 864b 	bhi.w	80079fe <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d6e:	f000 8430 	beq.w	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d78:	f200 8641 	bhi.w	80079fe <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d82:	f000 83e4 	beq.w	800754e <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d8c:	f200 8637 	bhi.w	80079fe <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d96:	f000 80af 	beq.w	8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006da0:	f200 862d 	bhi.w	80079fe <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006daa:	f000 809d 	beq.w	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006db4:	f200 8623 	bhi.w	80079fe <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006dbe:	f000 808b 	beq.w	8006ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006dc8:	f200 8619 	bhi.w	80079fe <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006dd2:	f000 8554 	beq.w	800787e <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ddc:	f200 860f 	bhi.w	80079fe <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006de6:	f000 8500 	beq.w	80077ea <HAL_RCCEx_GetPeriphCLKFreq+0xc16>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006df0:	f200 8605 	bhi.w	80079fe <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006dfa:	f000 84a1 	beq.w	8007740 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e04:	f200 85fb 	bhi.w	80079fe <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2b80      	cmp	r3, #128	; 0x80
 8006e0c:	f000 846c 	beq.w	80076e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb14>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2b80      	cmp	r3, #128	; 0x80
 8006e14:	f200 85f3 	bhi.w	80079fe <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2b20      	cmp	r3, #32
 8006e1c:	d84c      	bhi.n	8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	f000 85ec 	beq.w	80079fe <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	3b01      	subs	r3, #1
 8006e2a:	2b1f      	cmp	r3, #31
 8006e2c:	f200 85e7 	bhi.w	80079fe <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006e30:	a201      	add	r2, pc, #4	; (adr r2, 8006e38 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8006e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e36:	bf00      	nop
 8006e38:	0800724d 	.word	0x0800724d
 8006e3c:	080072bb 	.word	0x080072bb
 8006e40:	080079ff 	.word	0x080079ff
 8006e44:	0800734f 	.word	0x0800734f
 8006e48:	080079ff 	.word	0x080079ff
 8006e4c:	080079ff 	.word	0x080079ff
 8006e50:	080079ff 	.word	0x080079ff
 8006e54:	080073c7 	.word	0x080073c7
 8006e58:	080079ff 	.word	0x080079ff
 8006e5c:	080079ff 	.word	0x080079ff
 8006e60:	080079ff 	.word	0x080079ff
 8006e64:	080079ff 	.word	0x080079ff
 8006e68:	080079ff 	.word	0x080079ff
 8006e6c:	080079ff 	.word	0x080079ff
 8006e70:	080079ff 	.word	0x080079ff
 8006e74:	0800744b 	.word	0x0800744b
 8006e78:	080079ff 	.word	0x080079ff
 8006e7c:	080079ff 	.word	0x080079ff
 8006e80:	080079ff 	.word	0x080079ff
 8006e84:	080079ff 	.word	0x080079ff
 8006e88:	080079ff 	.word	0x080079ff
 8006e8c:	080079ff 	.word	0x080079ff
 8006e90:	080079ff 	.word	0x080079ff
 8006e94:	080079ff 	.word	0x080079ff
 8006e98:	080079ff 	.word	0x080079ff
 8006e9c:	080079ff 	.word	0x080079ff
 8006ea0:	080079ff 	.word	0x080079ff
 8006ea4:	080079ff 	.word	0x080079ff
 8006ea8:	080079ff 	.word	0x080079ff
 8006eac:	080079ff 	.word	0x080079ff
 8006eb0:	080079ff 	.word	0x080079ff
 8006eb4:	080074cd 	.word	0x080074cd
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2b40      	cmp	r3, #64	; 0x40
 8006ebc:	f000 83e8 	beq.w	8007690 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8006ec0:	f000 bd9d 	b.w	80079fe <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006ec4:	40021000 	.word	0x40021000
 8006ec8:	0003d090 	.word	0x0003d090
 8006ecc:	0800ec04 	.word	0x0800ec04
 8006ed0:	00f42400 	.word	0x00f42400
 8006ed4:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8006ed8:	69b9      	ldr	r1, [r7, #24]
 8006eda:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006ede:	f000 ff93 	bl	8007e08 <RCCEx_GetSAIxPeriphCLKFreq>
 8006ee2:	61f8      	str	r0, [r7, #28]
      break;
 8006ee4:	f000 bd8e 	b.w	8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8006ee8:	69b9      	ldr	r1, [r7, #24]
 8006eea:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006eee:	f000 ff8b 	bl	8007e08 <RCCEx_GetSAIxPeriphCLKFreq>
 8006ef2:	61f8      	str	r0, [r7, #28]
      break;
 8006ef4:	f000 bd86 	b.w	8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8006ef8:	4b9a      	ldr	r3, [pc, #616]	; (8007164 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006efe:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8006f02:	60fb      	str	r3, [r7, #12]
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006f0a:	d015      	beq.n	8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006f12:	f200 8092 	bhi.w	800703a <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f1c:	d029      	beq.n	8006f72 <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f24:	f200 8089 	bhi.w	800703a <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d07b      	beq.n	8007026 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006f34:	d04a      	beq.n	8006fcc <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
          break;
 8006f36:	e080      	b.n	800703a <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006f38:	4b8a      	ldr	r3, [pc, #552]	; (8007164 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f003 0302 	and.w	r3, r3, #2
 8006f40:	2b02      	cmp	r3, #2
 8006f42:	d17d      	bne.n	8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006f44:	4b87      	ldr	r3, [pc, #540]	; (8007164 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f003 0308 	and.w	r3, r3, #8
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d005      	beq.n	8006f5c <HAL_RCCEx_GetPeriphCLKFreq+0x388>
 8006f50:	4b84      	ldr	r3, [pc, #528]	; (8007164 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	091b      	lsrs	r3, r3, #4
 8006f56:	f003 030f 	and.w	r3, r3, #15
 8006f5a:	e005      	b.n	8006f68 <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 8006f5c:	4b81      	ldr	r3, [pc, #516]	; (8007164 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006f5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f62:	0a1b      	lsrs	r3, r3, #8
 8006f64:	f003 030f 	and.w	r3, r3, #15
 8006f68:	4a7f      	ldr	r2, [pc, #508]	; (8007168 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8006f6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f6e:	61fb      	str	r3, [r7, #28]
          break;
 8006f70:	e066      	b.n	8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8006f72:	4b7c      	ldr	r3, [pc, #496]	; (8007164 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f7a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006f7e:	d162      	bne.n	8007046 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8006f80:	4b78      	ldr	r3, [pc, #480]	; (8007164 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006f82:	68db      	ldr	r3, [r3, #12]
 8006f84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f8c:	d15b      	bne.n	8007046 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006f8e:	4b75      	ldr	r3, [pc, #468]	; (8007164 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006f90:	68db      	ldr	r3, [r3, #12]
 8006f92:	0a1b      	lsrs	r3, r3, #8
 8006f94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f98:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006f9a:	69bb      	ldr	r3, [r7, #24]
 8006f9c:	68ba      	ldr	r2, [r7, #8]
 8006f9e:	fb03 f202 	mul.w	r2, r3, r2
 8006fa2:	4b70      	ldr	r3, [pc, #448]	; (8007164 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006fa4:	68db      	ldr	r3, [r3, #12]
 8006fa6:	091b      	lsrs	r3, r3, #4
 8006fa8:	f003 030f 	and.w	r3, r3, #15
 8006fac:	3301      	adds	r3, #1
 8006fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fb2:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8006fb4:	4b6b      	ldr	r3, [pc, #428]	; (8007164 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006fb6:	68db      	ldr	r3, [r3, #12]
 8006fb8:	0d5b      	lsrs	r3, r3, #21
 8006fba:	f003 0303 	and.w	r3, r3, #3
 8006fbe:	3301      	adds	r3, #1
 8006fc0:	005b      	lsls	r3, r3, #1
 8006fc2:	69ba      	ldr	r2, [r7, #24]
 8006fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fc8:	61fb      	str	r3, [r7, #28]
          break;
 8006fca:	e03c      	b.n	8007046 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8006fcc:	4b65      	ldr	r3, [pc, #404]	; (8007164 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006fd4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006fd8:	d138      	bne.n	800704c <HAL_RCCEx_GetPeriphCLKFreq+0x478>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8006fda:	4b62      	ldr	r3, [pc, #392]	; (8007164 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006fdc:	691b      	ldr	r3, [r3, #16]
 8006fde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006fe2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006fe6:	d131      	bne.n	800704c <HAL_RCCEx_GetPeriphCLKFreq+0x478>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006fe8:	4b5e      	ldr	r3, [pc, #376]	; (8007164 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006fea:	691b      	ldr	r3, [r3, #16]
 8006fec:	0a1b      	lsrs	r3, r3, #8
 8006fee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ff2:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8006ff4:	69bb      	ldr	r3, [r7, #24]
 8006ff6:	68ba      	ldr	r2, [r7, #8]
 8006ff8:	fb03 f202 	mul.w	r2, r3, r2
 8006ffc:	4b59      	ldr	r3, [pc, #356]	; (8007164 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006ffe:	691b      	ldr	r3, [r3, #16]
 8007000:	091b      	lsrs	r3, r3, #4
 8007002:	f003 030f 	and.w	r3, r3, #15
 8007006:	3301      	adds	r3, #1
 8007008:	fbb2 f3f3 	udiv	r3, r2, r3
 800700c:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800700e:	4b55      	ldr	r3, [pc, #340]	; (8007164 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007010:	691b      	ldr	r3, [r3, #16]
 8007012:	0d5b      	lsrs	r3, r3, #21
 8007014:	f003 0303 	and.w	r3, r3, #3
 8007018:	3301      	adds	r3, #1
 800701a:	005b      	lsls	r3, r3, #1
 800701c:	69ba      	ldr	r2, [r7, #24]
 800701e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007022:	61fb      	str	r3, [r7, #28]
          break;
 8007024:	e012      	b.n	800704c <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8007026:	4b4f      	ldr	r3, [pc, #316]	; (8007164 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007028:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800702c:	f003 0302 	and.w	r3, r3, #2
 8007030:	2b02      	cmp	r3, #2
 8007032:	d10e      	bne.n	8007052 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = HSI48_VALUE;
 8007034:	4b4d      	ldr	r3, [pc, #308]	; (800716c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007036:	61fb      	str	r3, [r7, #28]
          break;
 8007038:	e00b      	b.n	8007052 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 800703a:	bf00      	nop
 800703c:	f000 bce2 	b.w	8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007040:	bf00      	nop
 8007042:	f000 bcdf 	b.w	8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007046:	bf00      	nop
 8007048:	f000 bcdc 	b.w	8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800704c:	bf00      	nop
 800704e:	f000 bcd9 	b.w	8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007052:	bf00      	nop
        break;
 8007054:	f000 bcd6 	b.w	8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 8007058:	4b42      	ldr	r3, [pc, #264]	; (8007164 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800705a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800705e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007062:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007066:	d13d      	bne.n	80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8007068:	4b3e      	ldr	r3, [pc, #248]	; (8007164 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007070:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007074:	f040 84c5 	bne.w	8007a02 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 8007078:	4b3a      	ldr	r3, [pc, #232]	; (8007164 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800707a:	68db      	ldr	r3, [r3, #12]
 800707c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007080:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007084:	f040 84bd 	bne.w	8007a02 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8007088:	4b36      	ldr	r3, [pc, #216]	; (8007164 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800708a:	68db      	ldr	r3, [r3, #12]
 800708c:	0a1b      	lsrs	r3, r3, #8
 800708e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007092:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007094:	69bb      	ldr	r3, [r7, #24]
 8007096:	68ba      	ldr	r2, [r7, #8]
 8007098:	fb03 f202 	mul.w	r2, r3, r2
 800709c:	4b31      	ldr	r3, [pc, #196]	; (8007164 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800709e:	68db      	ldr	r3, [r3, #12]
 80070a0:	091b      	lsrs	r3, r3, #4
 80070a2:	f003 030f 	and.w	r3, r3, #15
 80070a6:	3301      	adds	r3, #1
 80070a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80070ac:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 80070ae:	4b2d      	ldr	r3, [pc, #180]	; (8007164 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80070b0:	68db      	ldr	r3, [r3, #12]
 80070b2:	0edb      	lsrs	r3, r3, #27
 80070b4:	f003 031f 	and.w	r3, r3, #31
 80070b8:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d10a      	bne.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80070c0:	4b28      	ldr	r3, [pc, #160]	; (8007164 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80070c2:	68db      	ldr	r3, [r3, #12]
 80070c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d002      	beq.n	80070d2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 17U;
 80070cc:	2311      	movs	r3, #17
 80070ce:	617b      	str	r3, [r7, #20]
 80070d0:	e001      	b.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
                pllp = 7U;
 80070d2:	2307      	movs	r3, #7
 80070d4:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 80070d6:	69ba      	ldr	r2, [r7, #24]
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	fbb2 f3f3 	udiv	r3, r2, r3
 80070de:	61fb      	str	r3, [r7, #28]
      break;
 80070e0:	f000 bc8f 	b.w	8007a02 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80070e4:	4b1f      	ldr	r3, [pc, #124]	; (8007164 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80070e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070ea:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80070ee:	60fb      	str	r3, [r7, #12]
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80070f6:	d016      	beq.n	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0x552>
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80070fe:	f200 809b 	bhi.w	8007238 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007108:	d032      	beq.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007110:	f200 8092 	bhi.w	8007238 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	2b00      	cmp	r3, #0
 8007118:	f000 8084 	beq.w	8007224 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007122:	d052      	beq.n	80071ca <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          break;
 8007124:	e088      	b.n	8007238 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8007126:	4b0f      	ldr	r3, [pc, #60]	; (8007164 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f003 0302 	and.w	r3, r3, #2
 800712e:	2b02      	cmp	r3, #2
 8007130:	f040 8084 	bne.w	800723c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8007134:	4b0b      	ldr	r3, [pc, #44]	; (8007164 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f003 0308 	and.w	r3, r3, #8
 800713c:	2b00      	cmp	r3, #0
 800713e:	d005      	beq.n	800714c <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8007140:	4b08      	ldr	r3, [pc, #32]	; (8007164 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	091b      	lsrs	r3, r3, #4
 8007146:	f003 030f 	and.w	r3, r3, #15
 800714a:	e005      	b.n	8007158 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
 800714c:	4b05      	ldr	r3, [pc, #20]	; (8007164 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800714e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007152:	0a1b      	lsrs	r3, r3, #8
 8007154:	f003 030f 	and.w	r3, r3, #15
 8007158:	4a03      	ldr	r2, [pc, #12]	; (8007168 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800715a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800715e:	61fb      	str	r3, [r7, #28]
          break;
 8007160:	e06c      	b.n	800723c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 8007162:	bf00      	nop
 8007164:	40021000 	.word	0x40021000
 8007168:	0800ec04 	.word	0x0800ec04
 800716c:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8007170:	4ba5      	ldr	r3, [pc, #660]	; (8007408 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007178:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800717c:	d160      	bne.n	8007240 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800717e:	4ba2      	ldr	r3, [pc, #648]	; (8007408 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007180:	68db      	ldr	r3, [r3, #12]
 8007182:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007186:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800718a:	d159      	bne.n	8007240 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800718c:	4b9e      	ldr	r3, [pc, #632]	; (8007408 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800718e:	68db      	ldr	r3, [r3, #12]
 8007190:	0a1b      	lsrs	r3, r3, #8
 8007192:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007196:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007198:	69bb      	ldr	r3, [r7, #24]
 800719a:	68ba      	ldr	r2, [r7, #8]
 800719c:	fb03 f202 	mul.w	r2, r3, r2
 80071a0:	4b99      	ldr	r3, [pc, #612]	; (8007408 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80071a2:	68db      	ldr	r3, [r3, #12]
 80071a4:	091b      	lsrs	r3, r3, #4
 80071a6:	f003 030f 	and.w	r3, r3, #15
 80071aa:	3301      	adds	r3, #1
 80071ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80071b0:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80071b2:	4b95      	ldr	r3, [pc, #596]	; (8007408 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80071b4:	68db      	ldr	r3, [r3, #12]
 80071b6:	0d5b      	lsrs	r3, r3, #21
 80071b8:	f003 0303 	and.w	r3, r3, #3
 80071bc:	3301      	adds	r3, #1
 80071be:	005b      	lsls	r3, r3, #1
 80071c0:	69ba      	ldr	r2, [r7, #24]
 80071c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80071c6:	61fb      	str	r3, [r7, #28]
          break;
 80071c8:	e03a      	b.n	8007240 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 80071ca:	4b8f      	ldr	r3, [pc, #572]	; (8007408 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80071d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80071d6:	d135      	bne.n	8007244 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 80071d8:	4b8b      	ldr	r3, [pc, #556]	; (8007408 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80071da:	691b      	ldr	r3, [r3, #16]
 80071dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80071e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80071e4:	d12e      	bne.n	8007244 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80071e6:	4b88      	ldr	r3, [pc, #544]	; (8007408 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80071e8:	691b      	ldr	r3, [r3, #16]
 80071ea:	0a1b      	lsrs	r3, r3, #8
 80071ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071f0:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80071f2:	69bb      	ldr	r3, [r7, #24]
 80071f4:	68ba      	ldr	r2, [r7, #8]
 80071f6:	fb03 f202 	mul.w	r2, r3, r2
 80071fa:	4b83      	ldr	r3, [pc, #524]	; (8007408 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80071fc:	691b      	ldr	r3, [r3, #16]
 80071fe:	091b      	lsrs	r3, r3, #4
 8007200:	f003 030f 	and.w	r3, r3, #15
 8007204:	3301      	adds	r3, #1
 8007206:	fbb2 f3f3 	udiv	r3, r2, r3
 800720a:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800720c:	4b7e      	ldr	r3, [pc, #504]	; (8007408 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800720e:	691b      	ldr	r3, [r3, #16]
 8007210:	0d5b      	lsrs	r3, r3, #21
 8007212:	f003 0303 	and.w	r3, r3, #3
 8007216:	3301      	adds	r3, #1
 8007218:	005b      	lsls	r3, r3, #1
 800721a:	69ba      	ldr	r2, [r7, #24]
 800721c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007220:	61fb      	str	r3, [r7, #28]
          break;
 8007222:	e00f      	b.n	8007244 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8007224:	4b78      	ldr	r3, [pc, #480]	; (8007408 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007226:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800722a:	f003 0302 	and.w	r3, r3, #2
 800722e:	2b02      	cmp	r3, #2
 8007230:	d10a      	bne.n	8007248 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            frequency = HSI48_VALUE;
 8007232:	4b76      	ldr	r3, [pc, #472]	; (800740c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8007234:	61fb      	str	r3, [r7, #28]
          break;
 8007236:	e007      	b.n	8007248 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          break;
 8007238:	bf00      	nop
 800723a:	e3e2      	b.n	8007a02 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800723c:	bf00      	nop
 800723e:	e3e0      	b.n	8007a02 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8007240:	bf00      	nop
 8007242:	e3de      	b.n	8007a02 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8007244:	bf00      	nop
 8007246:	e3dc      	b.n	8007a02 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8007248:	bf00      	nop
      break;
 800724a:	e3da      	b.n	8007a02 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800724c:	4b6e      	ldr	r3, [pc, #440]	; (8007408 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800724e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007252:	f003 0303 	and.w	r3, r3, #3
 8007256:	60fb      	str	r3, [r7, #12]
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2b03      	cmp	r3, #3
 800725c:	d827      	bhi.n	80072ae <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 800725e:	a201      	add	r2, pc, #4	; (adr r2, 8007264 <HAL_RCCEx_GetPeriphCLKFreq+0x690>)
 8007260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007264:	08007275 	.word	0x08007275
 8007268:	0800727d 	.word	0x0800727d
 800726c:	08007285 	.word	0x08007285
 8007270:	08007299 	.word	0x08007299
          frequency = HAL_RCC_GetPCLK2Freq();
 8007274:	f7ff f8a8 	bl	80063c8 <HAL_RCC_GetPCLK2Freq>
 8007278:	61f8      	str	r0, [r7, #28]
          break;
 800727a:	e01d      	b.n	80072b8 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          frequency = HAL_RCC_GetSysClockFreq();
 800727c:	f7fe fff6 	bl	800626c <HAL_RCC_GetSysClockFreq>
 8007280:	61f8      	str	r0, [r7, #28]
          break;
 8007282:	e019      	b.n	80072b8 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007284:	4b60      	ldr	r3, [pc, #384]	; (8007408 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800728c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007290:	d10f      	bne.n	80072b2 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = HSI_VALUE;
 8007292:	4b5f      	ldr	r3, [pc, #380]	; (8007410 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007294:	61fb      	str	r3, [r7, #28]
          break;
 8007296:	e00c      	b.n	80072b2 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007298:	4b5b      	ldr	r3, [pc, #364]	; (8007408 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800729a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800729e:	f003 0302 	and.w	r3, r3, #2
 80072a2:	2b02      	cmp	r3, #2
 80072a4:	d107      	bne.n	80072b6 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
            frequency = LSE_VALUE;
 80072a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072aa:	61fb      	str	r3, [r7, #28]
          break;
 80072ac:	e003      	b.n	80072b6 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
          break;
 80072ae:	bf00      	nop
 80072b0:	e3a8      	b.n	8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80072b2:	bf00      	nop
 80072b4:	e3a6      	b.n	8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80072b6:	bf00      	nop
        break;
 80072b8:	e3a4      	b.n	8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80072ba:	4b53      	ldr	r3, [pc, #332]	; (8007408 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80072bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072c0:	f003 030c 	and.w	r3, r3, #12
 80072c4:	60fb      	str	r3, [r7, #12]
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	2b0c      	cmp	r3, #12
 80072ca:	d83a      	bhi.n	8007342 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 80072cc:	a201      	add	r2, pc, #4	; (adr r2, 80072d4 <HAL_RCCEx_GetPeriphCLKFreq+0x700>)
 80072ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072d2:	bf00      	nop
 80072d4:	08007309 	.word	0x08007309
 80072d8:	08007343 	.word	0x08007343
 80072dc:	08007343 	.word	0x08007343
 80072e0:	08007343 	.word	0x08007343
 80072e4:	08007311 	.word	0x08007311
 80072e8:	08007343 	.word	0x08007343
 80072ec:	08007343 	.word	0x08007343
 80072f0:	08007343 	.word	0x08007343
 80072f4:	08007319 	.word	0x08007319
 80072f8:	08007343 	.word	0x08007343
 80072fc:	08007343 	.word	0x08007343
 8007300:	08007343 	.word	0x08007343
 8007304:	0800732d 	.word	0x0800732d
          frequency = HAL_RCC_GetPCLK1Freq();
 8007308:	f7ff f848 	bl	800639c <HAL_RCC_GetPCLK1Freq>
 800730c:	61f8      	str	r0, [r7, #28]
          break;
 800730e:	e01d      	b.n	800734c <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = HAL_RCC_GetSysClockFreq();
 8007310:	f7fe ffac 	bl	800626c <HAL_RCC_GetSysClockFreq>
 8007314:	61f8      	str	r0, [r7, #28]
          break;
 8007316:	e019      	b.n	800734c <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007318:	4b3b      	ldr	r3, [pc, #236]	; (8007408 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007320:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007324:	d10f      	bne.n	8007346 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = HSI_VALUE;
 8007326:	4b3a      	ldr	r3, [pc, #232]	; (8007410 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007328:	61fb      	str	r3, [r7, #28]
          break;
 800732a:	e00c      	b.n	8007346 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800732c:	4b36      	ldr	r3, [pc, #216]	; (8007408 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800732e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007332:	f003 0302 	and.w	r3, r3, #2
 8007336:	2b02      	cmp	r3, #2
 8007338:	d107      	bne.n	800734a <HAL_RCCEx_GetPeriphCLKFreq+0x776>
            frequency = LSE_VALUE;
 800733a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800733e:	61fb      	str	r3, [r7, #28]
          break;
 8007340:	e003      	b.n	800734a <HAL_RCCEx_GetPeriphCLKFreq+0x776>
          break;
 8007342:	bf00      	nop
 8007344:	e35e      	b.n	8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007346:	bf00      	nop
 8007348:	e35c      	b.n	8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800734a:	bf00      	nop
        break;
 800734c:	e35a      	b.n	8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800734e:	4b2e      	ldr	r3, [pc, #184]	; (8007408 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007350:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007354:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007358:	60fb      	str	r3, [r7, #12]
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2b30      	cmp	r3, #48	; 0x30
 800735e:	d021      	beq.n	80073a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	2b30      	cmp	r3, #48	; 0x30
 8007364:	d829      	bhi.n	80073ba <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2b20      	cmp	r3, #32
 800736a:	d011      	beq.n	8007390 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	2b20      	cmp	r3, #32
 8007370:	d823      	bhi.n	80073ba <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d003      	beq.n	8007380 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	2b10      	cmp	r3, #16
 800737c:	d004      	beq.n	8007388 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
          break;
 800737e:	e01c      	b.n	80073ba <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007380:	f7ff f80c 	bl	800639c <HAL_RCC_GetPCLK1Freq>
 8007384:	61f8      	str	r0, [r7, #28]
          break;
 8007386:	e01d      	b.n	80073c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          frequency = HAL_RCC_GetSysClockFreq();
 8007388:	f7fe ff70 	bl	800626c <HAL_RCC_GetSysClockFreq>
 800738c:	61f8      	str	r0, [r7, #28]
          break;
 800738e:	e019      	b.n	80073c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007390:	4b1d      	ldr	r3, [pc, #116]	; (8007408 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007398:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800739c:	d10f      	bne.n	80073be <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = HSI_VALUE;
 800739e:	4b1c      	ldr	r3, [pc, #112]	; (8007410 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80073a0:	61fb      	str	r3, [r7, #28]
          break;
 80073a2:	e00c      	b.n	80073be <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80073a4:	4b18      	ldr	r3, [pc, #96]	; (8007408 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80073a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073aa:	f003 0302 	and.w	r3, r3, #2
 80073ae:	2b02      	cmp	r3, #2
 80073b0:	d107      	bne.n	80073c2 <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
            frequency = LSE_VALUE;
 80073b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073b6:	61fb      	str	r3, [r7, #28]
          break;
 80073b8:	e003      	b.n	80073c2 <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
          break;
 80073ba:	bf00      	nop
 80073bc:	e322      	b.n	8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80073be:	bf00      	nop
 80073c0:	e320      	b.n	8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80073c2:	bf00      	nop
        break;
 80073c4:	e31e      	b.n	8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80073c6:	4b10      	ldr	r3, [pc, #64]	; (8007408 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80073c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073cc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80073d0:	60fb      	str	r3, [r7, #12]
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	2bc0      	cmp	r3, #192	; 0xc0
 80073d6:	d027      	beq.n	8007428 <HAL_RCCEx_GetPeriphCLKFreq+0x854>
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	2bc0      	cmp	r3, #192	; 0xc0
 80073dc:	d82f      	bhi.n	800743e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	2b80      	cmp	r3, #128	; 0x80
 80073e2:	d017      	beq.n	8007414 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	2b80      	cmp	r3, #128	; 0x80
 80073e8:	d829      	bhi.n	800743e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d003      	beq.n	80073f8 <HAL_RCCEx_GetPeriphCLKFreq+0x824>
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	2b40      	cmp	r3, #64	; 0x40
 80073f4:	d004      	beq.n	8007400 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
          break;
 80073f6:	e022      	b.n	800743e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          frequency = HAL_RCC_GetPCLK1Freq();
 80073f8:	f7fe ffd0 	bl	800639c <HAL_RCC_GetPCLK1Freq>
 80073fc:	61f8      	str	r0, [r7, #28]
          break;
 80073fe:	e023      	b.n	8007448 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
          frequency = HAL_RCC_GetSysClockFreq();
 8007400:	f7fe ff34 	bl	800626c <HAL_RCC_GetSysClockFreq>
 8007404:	61f8      	str	r0, [r7, #28]
          break;
 8007406:	e01f      	b.n	8007448 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
 8007408:	40021000 	.word	0x40021000
 800740c:	02dc6c00 	.word	0x02dc6c00
 8007410:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007414:	4b9b      	ldr	r3, [pc, #620]	; (8007684 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800741c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007420:	d10f      	bne.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = HSI_VALUE;
 8007422:	4b99      	ldr	r3, [pc, #612]	; (8007688 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8007424:	61fb      	str	r3, [r7, #28]
          break;
 8007426:	e00c      	b.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007428:	4b96      	ldr	r3, [pc, #600]	; (8007684 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800742a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800742e:	f003 0302 	and.w	r3, r3, #2
 8007432:	2b02      	cmp	r3, #2
 8007434:	d107      	bne.n	8007446 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
            frequency = LSE_VALUE;
 8007436:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800743a:	61fb      	str	r3, [r7, #28]
          break;
 800743c:	e003      	b.n	8007446 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
          break;
 800743e:	bf00      	nop
 8007440:	e2e0      	b.n	8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007442:	bf00      	nop
 8007444:	e2de      	b.n	8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007446:	bf00      	nop
        break;
 8007448:	e2dc      	b.n	8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800744a:	4b8e      	ldr	r3, [pc, #568]	; (8007684 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800744c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007450:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007454:	60fb      	str	r3, [r7, #12]
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800745c:	d025      	beq.n	80074aa <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007464:	d82c      	bhi.n	80074c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800746c:	d013      	beq.n	8007496 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007474:	d824      	bhi.n	80074c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d004      	beq.n	8007486 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007482:	d004      	beq.n	800748e <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 8007484:	e01c      	b.n	80074c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007486:	f7fe ff89 	bl	800639c <HAL_RCC_GetPCLK1Freq>
 800748a:	61f8      	str	r0, [r7, #28]
          break;
 800748c:	e01d      	b.n	80074ca <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = HAL_RCC_GetSysClockFreq();
 800748e:	f7fe feed 	bl	800626c <HAL_RCC_GetSysClockFreq>
 8007492:	61f8      	str	r0, [r7, #28]
          break;
 8007494:	e019      	b.n	80074ca <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007496:	4b7b      	ldr	r3, [pc, #492]	; (8007684 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800749e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074a2:	d10f      	bne.n	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = HSI_VALUE;
 80074a4:	4b78      	ldr	r3, [pc, #480]	; (8007688 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 80074a6:	61fb      	str	r3, [r7, #28]
          break;
 80074a8:	e00c      	b.n	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80074aa:	4b76      	ldr	r3, [pc, #472]	; (8007684 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80074ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074b0:	f003 0302 	and.w	r3, r3, #2
 80074b4:	2b02      	cmp	r3, #2
 80074b6:	d107      	bne.n	80074c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
            frequency = LSE_VALUE;
 80074b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80074bc:	61fb      	str	r3, [r7, #28]
          break;
 80074be:	e003      	b.n	80074c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
          break;
 80074c0:	bf00      	nop
 80074c2:	e29f      	b.n	8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80074c4:	bf00      	nop
 80074c6:	e29d      	b.n	8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80074c8:	bf00      	nop
        break;
 80074ca:	e29b      	b.n	8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80074cc:	4b6d      	ldr	r3, [pc, #436]	; (8007684 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80074ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074d2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80074d6:	60fb      	str	r3, [r7, #12]
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80074de:	d025      	beq.n	800752c <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80074e6:	d82c      	bhi.n	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074ee:	d013      	beq.n	8007518 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074f6:	d824      	bhi.n	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d004      	beq.n	8007508 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007504:	d004      	beq.n	8007510 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
          break;
 8007506:	e01c      	b.n	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007508:	f7fe ff48 	bl	800639c <HAL_RCC_GetPCLK1Freq>
 800750c:	61f8      	str	r0, [r7, #28]
          break;
 800750e:	e01d      	b.n	800754c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = HAL_RCC_GetSysClockFreq();
 8007510:	f7fe feac 	bl	800626c <HAL_RCC_GetSysClockFreq>
 8007514:	61f8      	str	r0, [r7, #28]
          break;
 8007516:	e019      	b.n	800754c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007518:	4b5a      	ldr	r3, [pc, #360]	; (8007684 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007520:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007524:	d10f      	bne.n	8007546 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = HSI_VALUE;
 8007526:	4b58      	ldr	r3, [pc, #352]	; (8007688 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8007528:	61fb      	str	r3, [r7, #28]
          break;
 800752a:	e00c      	b.n	8007546 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800752c:	4b55      	ldr	r3, [pc, #340]	; (8007684 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800752e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007532:	f003 0302 	and.w	r3, r3, #2
 8007536:	2b02      	cmp	r3, #2
 8007538:	d107      	bne.n	800754a <HAL_RCCEx_GetPeriphCLKFreq+0x976>
            frequency = LSE_VALUE;
 800753a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800753e:	61fb      	str	r3, [r7, #28]
          break;
 8007540:	e003      	b.n	800754a <HAL_RCCEx_GetPeriphCLKFreq+0x976>
          break;
 8007542:	bf00      	nop
 8007544:	e25e      	b.n	8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007546:	bf00      	nop
 8007548:	e25c      	b.n	8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800754a:	bf00      	nop
        break;
 800754c:	e25a      	b.n	8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800754e:	4b4d      	ldr	r3, [pc, #308]	; (8007684 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007550:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007554:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007558:	60fb      	str	r3, [r7, #12]
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007560:	d007      	beq.n	8007572 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007568:	d12f      	bne.n	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          frequency = HAL_RCC_GetSysClockFreq();
 800756a:	f7fe fe7f 	bl	800626c <HAL_RCC_GetSysClockFreq>
 800756e:	61f8      	str	r0, [r7, #28]
          break;
 8007570:	e02e      	b.n	80075d0 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8007572:	4b44      	ldr	r3, [pc, #272]	; (8007684 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800757a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800757e:	d126      	bne.n	80075ce <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 8007580:	4b40      	ldr	r3, [pc, #256]	; (8007684 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007582:	691b      	ldr	r3, [r3, #16]
 8007584:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007588:	2b00      	cmp	r3, #0
 800758a:	d020      	beq.n	80075ce <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800758c:	4b3d      	ldr	r3, [pc, #244]	; (8007684 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800758e:	691b      	ldr	r3, [r3, #16]
 8007590:	0a1b      	lsrs	r3, r3, #8
 8007592:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007596:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8007598:	69bb      	ldr	r3, [r7, #24]
 800759a:	68ba      	ldr	r2, [r7, #8]
 800759c:	fb03 f202 	mul.w	r2, r3, r2
 80075a0:	4b38      	ldr	r3, [pc, #224]	; (8007684 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80075a2:	691b      	ldr	r3, [r3, #16]
 80075a4:	091b      	lsrs	r3, r3, #4
 80075a6:	f003 030f 	and.w	r3, r3, #15
 80075aa:	3301      	adds	r3, #1
 80075ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80075b0:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 80075b2:	4b34      	ldr	r3, [pc, #208]	; (8007684 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80075b4:	691b      	ldr	r3, [r3, #16]
 80075b6:	0e5b      	lsrs	r3, r3, #25
 80075b8:	f003 0303 	and.w	r3, r3, #3
 80075bc:	3301      	adds	r3, #1
 80075be:	005b      	lsls	r3, r3, #1
 80075c0:	69ba      	ldr	r2, [r7, #24]
 80075c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80075c6:	61fb      	str	r3, [r7, #28]
          break;
 80075c8:	e001      	b.n	80075ce <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
          break;
 80075ca:	bf00      	nop
 80075cc:	e21a      	b.n	8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80075ce:	bf00      	nop
        break;
 80075d0:	e218      	b.n	8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 80075d2:	4b2c      	ldr	r3, [pc, #176]	; (8007684 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80075d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80075d8:	f003 0304 	and.w	r3, r3, #4
 80075dc:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d103      	bne.n	80075ec <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetPCLK2Freq();
 80075e4:	f7fe fef0 	bl	80063c8 <HAL_RCC_GetPCLK2Freq>
 80075e8:	61f8      	str	r0, [r7, #28]
        break;
 80075ea:	e20b      	b.n	8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          frequency = HAL_RCC_GetSysClockFreq();
 80075ec:	f7fe fe3e 	bl	800626c <HAL_RCC_GetSysClockFreq>
 80075f0:	61f8      	str	r0, [r7, #28]
        break;
 80075f2:	e207      	b.n	8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 80075f4:	4b23      	ldr	r3, [pc, #140]	; (8007684 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80075f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80075fa:	f003 0318 	and.w	r3, r3, #24
 80075fe:	60fb      	str	r3, [r7, #12]
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	2b10      	cmp	r3, #16
 8007604:	d010      	beq.n	8007628 <HAL_RCCEx_GetPeriphCLKFreq+0xa54>
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	2b10      	cmp	r3, #16
 800760a:	d834      	bhi.n	8007676 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d003      	beq.n	800761a <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	2b08      	cmp	r3, #8
 8007616:	d024      	beq.n	8007662 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
          break;
 8007618:	e02d      	b.n	8007676 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 800761a:	69b9      	ldr	r1, [r7, #24]
 800761c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007620:	f000 fbf2 	bl	8007e08 <RCCEx_GetSAIxPeriphCLKFreq>
 8007624:	61f8      	str	r0, [r7, #28]
          break;
 8007626:	e02b      	b.n	8007680 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8007628:	4b16      	ldr	r3, [pc, #88]	; (8007684 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f003 0302 	and.w	r3, r3, #2
 8007630:	2b02      	cmp	r3, #2
 8007632:	d122      	bne.n	800767a <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8007634:	4b13      	ldr	r3, [pc, #76]	; (8007684 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f003 0308 	and.w	r3, r3, #8
 800763c:	2b00      	cmp	r3, #0
 800763e:	d005      	beq.n	800764c <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 8007640:	4b10      	ldr	r3, [pc, #64]	; (8007684 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	091b      	lsrs	r3, r3, #4
 8007646:	f003 030f 	and.w	r3, r3, #15
 800764a:	e005      	b.n	8007658 <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
 800764c:	4b0d      	ldr	r3, [pc, #52]	; (8007684 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800764e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007652:	0a1b      	lsrs	r3, r3, #8
 8007654:	f003 030f 	and.w	r3, r3, #15
 8007658:	4a0c      	ldr	r2, [pc, #48]	; (800768c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800765a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800765e:	61fb      	str	r3, [r7, #28]
          break;
 8007660:	e00b      	b.n	800767a <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007662:	4b08      	ldr	r3, [pc, #32]	; (8007684 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800766a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800766e:	d106      	bne.n	800767e <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
            frequency = HSI_VALUE;
 8007670:	4b05      	ldr	r3, [pc, #20]	; (8007688 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8007672:	61fb      	str	r3, [r7, #28]
          break;
 8007674:	e003      	b.n	800767e <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
          break;
 8007676:	bf00      	nop
 8007678:	e1c4      	b.n	8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800767a:	bf00      	nop
 800767c:	e1c2      	b.n	8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800767e:	bf00      	nop
        break;
 8007680:	e1c0      	b.n	8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 8007682:	bf00      	nop
 8007684:	40021000 	.word	0x40021000
 8007688:	00f42400 	.word	0x00f42400
 800768c:	0800ec04 	.word	0x0800ec04
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8007690:	4b96      	ldr	r3, [pc, #600]	; (80078ec <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007696:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800769a:	60fb      	str	r3, [r7, #12]
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076a2:	d013      	beq.n	80076cc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076aa:	d819      	bhi.n	80076e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d004      	beq.n	80076bc <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076b8:	d004      	beq.n	80076c4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>
          break;
 80076ba:	e011      	b.n	80076e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          frequency = HAL_RCC_GetPCLK1Freq();
 80076bc:	f7fe fe6e 	bl	800639c <HAL_RCC_GetPCLK1Freq>
 80076c0:	61f8      	str	r0, [r7, #28]
          break;
 80076c2:	e010      	b.n	80076e6 <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          frequency = HAL_RCC_GetSysClockFreq();
 80076c4:	f7fe fdd2 	bl	800626c <HAL_RCC_GetSysClockFreq>
 80076c8:	61f8      	str	r0, [r7, #28]
          break;
 80076ca:	e00c      	b.n	80076e6 <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80076cc:	4b87      	ldr	r3, [pc, #540]	; (80078ec <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076d8:	d104      	bne.n	80076e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
            frequency = HSI_VALUE;
 80076da:	4b85      	ldr	r3, [pc, #532]	; (80078f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 80076dc:	61fb      	str	r3, [r7, #28]
          break;
 80076de:	e001      	b.n	80076e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
          break;
 80076e0:	bf00      	nop
 80076e2:	e18f      	b.n	8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80076e4:	bf00      	nop
        break;
 80076e6:	e18d      	b.n	8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80076e8:	4b80      	ldr	r3, [pc, #512]	; (80078ec <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80076ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076ee:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80076f2:	60fb      	str	r3, [r7, #12]
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076fa:	d013      	beq.n	8007724 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007702:	d819      	bhi.n	8007738 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d004      	beq.n	8007714 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007710:	d004      	beq.n	800771c <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          break;
 8007712:	e011      	b.n	8007738 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007714:	f7fe fe42 	bl	800639c <HAL_RCC_GetPCLK1Freq>
 8007718:	61f8      	str	r0, [r7, #28]
          break;
 800771a:	e010      	b.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = HAL_RCC_GetSysClockFreq();
 800771c:	f7fe fda6 	bl	800626c <HAL_RCC_GetSysClockFreq>
 8007720:	61f8      	str	r0, [r7, #28]
          break;
 8007722:	e00c      	b.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007724:	4b71      	ldr	r3, [pc, #452]	; (80078ec <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800772c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007730:	d104      	bne.n	800773c <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
            frequency = HSI_VALUE;
 8007732:	4b6f      	ldr	r3, [pc, #444]	; (80078f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8007734:	61fb      	str	r3, [r7, #28]
          break;
 8007736:	e001      	b.n	800773c <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          break;
 8007738:	bf00      	nop
 800773a:	e163      	b.n	8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800773c:	bf00      	nop
        break;
 800773e:	e161      	b.n	8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8007740:	4b6a      	ldr	r3, [pc, #424]	; (80078ec <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007746:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800774a:	60fb      	str	r3, [r7, #12]
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007752:	d013      	beq.n	800777c <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800775a:	d819      	bhi.n	8007790 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d004      	beq.n	800776c <HAL_RCCEx_GetPeriphCLKFreq+0xb98>
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007768:	d004      	beq.n	8007774 <HAL_RCCEx_GetPeriphCLKFreq+0xba0>
          break;
 800776a:	e011      	b.n	8007790 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          frequency = HAL_RCC_GetPCLK1Freq();
 800776c:	f7fe fe16 	bl	800639c <HAL_RCC_GetPCLK1Freq>
 8007770:	61f8      	str	r0, [r7, #28]
          break;
 8007772:	e010      	b.n	8007796 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          frequency = HAL_RCC_GetSysClockFreq();
 8007774:	f7fe fd7a 	bl	800626c <HAL_RCC_GetSysClockFreq>
 8007778:	61f8      	str	r0, [r7, #28]
          break;
 800777a:	e00c      	b.n	8007796 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800777c:	4b5b      	ldr	r3, [pc, #364]	; (80078ec <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007784:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007788:	d104      	bne.n	8007794 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
            frequency = HSI_VALUE;
 800778a:	4b59      	ldr	r3, [pc, #356]	; (80078f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800778c:	61fb      	str	r3, [r7, #28]
          break;
 800778e:	e001      	b.n	8007794 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
          break;
 8007790:	bf00      	nop
 8007792:	e137      	b.n	8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007794:	bf00      	nop
        break;
 8007796:	e135      	b.n	8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8007798:	4b54      	ldr	r3, [pc, #336]	; (80078ec <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800779a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800779e:	f003 0303 	and.w	r3, r3, #3
 80077a2:	60fb      	str	r3, [r7, #12]
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	2b02      	cmp	r3, #2
 80077a8:	d011      	beq.n	80077ce <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	2b02      	cmp	r3, #2
 80077ae:	d818      	bhi.n	80077e2 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d003      	beq.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	2b01      	cmp	r3, #1
 80077ba:	d004      	beq.n	80077c6 <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
          break;
 80077bc:	e011      	b.n	80077e2 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          frequency = HAL_RCC_GetPCLK1Freq();
 80077be:	f7fe fded 	bl	800639c <HAL_RCC_GetPCLK1Freq>
 80077c2:	61f8      	str	r0, [r7, #28]
          break;
 80077c4:	e010      	b.n	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          frequency = HAL_RCC_GetSysClockFreq();
 80077c6:	f7fe fd51 	bl	800626c <HAL_RCC_GetSysClockFreq>
 80077ca:	61f8      	str	r0, [r7, #28]
          break;
 80077cc:	e00c      	b.n	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80077ce:	4b47      	ldr	r3, [pc, #284]	; (80078ec <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077da:	d104      	bne.n	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
            frequency = HSI_VALUE;
 80077dc:	4b44      	ldr	r3, [pc, #272]	; (80078f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 80077de:	61fb      	str	r3, [r7, #28]
          break;
 80077e0:	e001      	b.n	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
          break;
 80077e2:	bf00      	nop
 80077e4:	e10e      	b.n	8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80077e6:	bf00      	nop
        break;
 80077e8:	e10c      	b.n	8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80077ea:	4b40      	ldr	r3, [pc, #256]	; (80078ec <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80077ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077f0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80077f4:	60fb      	str	r3, [r7, #12]
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80077fc:	d02c      	beq.n	8007858 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007804:	d833      	bhi.n	800786e <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800780c:	d01a      	beq.n	8007844 <HAL_RCCEx_GetPeriphCLKFreq+0xc70>
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007814:	d82b      	bhi.n	800786e <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d004      	beq.n	8007826 <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007822:	d004      	beq.n	800782e <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
          break;
 8007824:	e023      	b.n	800786e <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007826:	f7fe fdb9 	bl	800639c <HAL_RCC_GetPCLK1Freq>
 800782a:	61f8      	str	r0, [r7, #28]
          break;
 800782c:	e026      	b.n	800787c <HAL_RCCEx_GetPeriphCLKFreq+0xca8>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800782e:	4b2f      	ldr	r3, [pc, #188]	; (80078ec <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007830:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007834:	f003 0302 	and.w	r3, r3, #2
 8007838:	2b02      	cmp	r3, #2
 800783a:	d11a      	bne.n	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
              frequency = LSI_VALUE;
 800783c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007840:	61fb      	str	r3, [r7, #28]
          break;
 8007842:	e016      	b.n	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007844:	4b29      	ldr	r3, [pc, #164]	; (80078ec <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800784c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007850:	d111      	bne.n	8007876 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = HSI_VALUE;
 8007852:	4b27      	ldr	r3, [pc, #156]	; (80078f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8007854:	61fb      	str	r3, [r7, #28]
          break;
 8007856:	e00e      	b.n	8007876 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007858:	4b24      	ldr	r3, [pc, #144]	; (80078ec <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800785a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800785e:	f003 0302 	and.w	r3, r3, #2
 8007862:	2b02      	cmp	r3, #2
 8007864:	d109      	bne.n	800787a <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
            frequency = LSE_VALUE;
 8007866:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800786a:	61fb      	str	r3, [r7, #28]
          break;
 800786c:	e005      	b.n	800787a <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
          break;
 800786e:	bf00      	nop
 8007870:	e0c8      	b.n	8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007872:	bf00      	nop
 8007874:	e0c6      	b.n	8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007876:	bf00      	nop
 8007878:	e0c4      	b.n	8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800787a:	bf00      	nop
        break;
 800787c:	e0c2      	b.n	8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800787e:	4b1b      	ldr	r3, [pc, #108]	; (80078ec <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007880:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007884:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007888:	60fb      	str	r3, [r7, #12]
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007890:	d030      	beq.n	80078f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd20>
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007898:	d837      	bhi.n	800790a <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80078a0:	d01a      	beq.n	80078d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd04>
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80078a8:	d82f      	bhi.n	800790a <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d004      	beq.n	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0xce6>
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80078b6:	d004      	beq.n	80078c2 <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
          break;
 80078b8:	e027      	b.n	800790a <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          frequency = HAL_RCC_GetPCLK1Freq();
 80078ba:	f7fe fd6f 	bl	800639c <HAL_RCC_GetPCLK1Freq>
 80078be:	61f8      	str	r0, [r7, #28]
          break;
 80078c0:	e02a      	b.n	8007918 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80078c2:	4b0a      	ldr	r3, [pc, #40]	; (80078ec <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80078c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80078c8:	f003 0302 	and.w	r3, r3, #2
 80078cc:	2b02      	cmp	r3, #2
 80078ce:	d11e      	bne.n	800790e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
              frequency = LSI_VALUE;
 80078d0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80078d4:	61fb      	str	r3, [r7, #28]
          break;
 80078d6:	e01a      	b.n	800790e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80078d8:	4b04      	ldr	r3, [pc, #16]	; (80078ec <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078e4:	d115      	bne.n	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = HSI_VALUE;
 80078e6:	4b02      	ldr	r3, [pc, #8]	; (80078f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 80078e8:	61fb      	str	r3, [r7, #28]
          break;
 80078ea:	e012      	b.n	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 80078ec:	40021000 	.word	0x40021000
 80078f0:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80078f4:	4b46      	ldr	r3, [pc, #280]	; (8007a10 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80078f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078fa:	f003 0302 	and.w	r3, r3, #2
 80078fe:	2b02      	cmp	r3, #2
 8007900:	d109      	bne.n	8007916 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
            frequency = LSE_VALUE;
 8007902:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007906:	61fb      	str	r3, [r7, #28]
          break;
 8007908:	e005      	b.n	8007916 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
          break;
 800790a:	bf00      	nop
 800790c:	e07a      	b.n	8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800790e:	bf00      	nop
 8007910:	e078      	b.n	8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007912:	bf00      	nop
 8007914:	e076      	b.n	8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007916:	bf00      	nop
        break;
 8007918:	e074      	b.n	8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800791a:	4b3d      	ldr	r3, [pc, #244]	; (8007a10 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800791c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007920:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007924:	60fb      	str	r3, [r7, #12]
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800792c:	d02c      	beq.n	8007988 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007934:	d855      	bhi.n	80079e2 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d004      	beq.n	8007946 <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007942:	d004      	beq.n	800794e <HAL_RCCEx_GetPeriphCLKFreq+0xd7a>
          break;
 8007944:	e04d      	b.n	80079e2 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          frequency = HAL_RCC_GetSysClockFreq();
 8007946:	f7fe fc91 	bl	800626c <HAL_RCC_GetSysClockFreq>
 800794a:	61f8      	str	r0, [r7, #28]
          break;
 800794c:	e04e      	b.n	80079ec <HAL_RCCEx_GetPeriphCLKFreq+0xe18>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800794e:	4b30      	ldr	r3, [pc, #192]	; (8007a10 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f003 0302 	and.w	r3, r3, #2
 8007956:	2b02      	cmp	r3, #2
 8007958:	d145      	bne.n	80079e6 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800795a:	4b2d      	ldr	r3, [pc, #180]	; (8007a10 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f003 0308 	and.w	r3, r3, #8
 8007962:	2b00      	cmp	r3, #0
 8007964:	d005      	beq.n	8007972 <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 8007966:	4b2a      	ldr	r3, [pc, #168]	; (8007a10 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	091b      	lsrs	r3, r3, #4
 800796c:	f003 030f 	and.w	r3, r3, #15
 8007970:	e005      	b.n	800797e <HAL_RCCEx_GetPeriphCLKFreq+0xdaa>
 8007972:	4b27      	ldr	r3, [pc, #156]	; (8007a10 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8007974:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007978:	0a1b      	lsrs	r3, r3, #8
 800797a:	f003 030f 	and.w	r3, r3, #15
 800797e:	4a25      	ldr	r2, [pc, #148]	; (8007a14 <HAL_RCCEx_GetPeriphCLKFreq+0xe40>)
 8007980:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007984:	61fb      	str	r3, [r7, #28]
          break;
 8007986:	e02e      	b.n	80079e6 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8007988:	4b21      	ldr	r3, [pc, #132]	; (8007a10 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007990:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007994:	d129      	bne.n	80079ea <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8007996:	4b1e      	ldr	r3, [pc, #120]	; (8007a10 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8007998:	68db      	ldr	r3, [r3, #12]
 800799a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800799e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80079a2:	d122      	bne.n	80079ea <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80079a4:	4b1a      	ldr	r3, [pc, #104]	; (8007a10 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80079a6:	68db      	ldr	r3, [r3, #12]
 80079a8:	0a1b      	lsrs	r3, r3, #8
 80079aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079ae:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80079b0:	69bb      	ldr	r3, [r7, #24]
 80079b2:	68ba      	ldr	r2, [r7, #8]
 80079b4:	fb03 f202 	mul.w	r2, r3, r2
 80079b8:	4b15      	ldr	r3, [pc, #84]	; (8007a10 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80079ba:	68db      	ldr	r3, [r3, #12]
 80079bc:	091b      	lsrs	r3, r3, #4
 80079be:	f003 030f 	and.w	r3, r3, #15
 80079c2:	3301      	adds	r3, #1
 80079c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80079c8:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80079ca:	4b11      	ldr	r3, [pc, #68]	; (8007a10 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80079cc:	68db      	ldr	r3, [r3, #12]
 80079ce:	0d5b      	lsrs	r3, r3, #21
 80079d0:	f003 0303 	and.w	r3, r3, #3
 80079d4:	3301      	adds	r3, #1
 80079d6:	005b      	lsls	r3, r3, #1
 80079d8:	69ba      	ldr	r2, [r7, #24]
 80079da:	fbb2 f3f3 	udiv	r3, r2, r3
 80079de:	61fb      	str	r3, [r7, #28]
          break;
 80079e0:	e003      	b.n	80079ea <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          break;
 80079e2:	bf00      	nop
 80079e4:	e00e      	b.n	8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80079e6:	bf00      	nop
 80079e8:	e00c      	b.n	8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80079ea:	bf00      	nop
        break;
 80079ec:	e00a      	b.n	8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80079ee:	bf00      	nop
 80079f0:	e008      	b.n	8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80079f2:	bf00      	nop
 80079f4:	e006      	b.n	8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80079f6:	bf00      	nop
 80079f8:	e004      	b.n	8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80079fa:	bf00      	nop
 80079fc:	e002      	b.n	8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80079fe:	bf00      	nop
 8007a00:	e000      	b.n	8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8007a02:	bf00      	nop
    }
  }

  return(frequency);
 8007a04:	69fb      	ldr	r3, [r7, #28]
}
 8007a06:	4618      	mov	r0, r3
 8007a08:	3720      	adds	r7, #32
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}
 8007a0e:	bf00      	nop
 8007a10:	40021000 	.word	0x40021000
 8007a14:	0800ec04 	.word	0x0800ec04

08007a18 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8007a1c:	4b05      	ldr	r3, [pc, #20]	; (8007a34 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a04      	ldr	r2, [pc, #16]	; (8007a34 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8007a22:	f043 0304 	orr.w	r3, r3, #4
 8007a26:	6013      	str	r3, [r2, #0]
}
 8007a28:	bf00      	nop
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a30:	4770      	bx	lr
 8007a32:	bf00      	nop
 8007a34:	40021000 	.word	0x40021000

08007a38 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b084      	sub	sp, #16
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
 8007a40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007a42:	2300      	movs	r3, #0
 8007a44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007a46:	4b72      	ldr	r3, [pc, #456]	; (8007c10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007a48:	68db      	ldr	r3, [r3, #12]
 8007a4a:	f003 0303 	and.w	r3, r3, #3
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d00e      	beq.n	8007a70 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007a52:	4b6f      	ldr	r3, [pc, #444]	; (8007c10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007a54:	68db      	ldr	r3, [r3, #12]
 8007a56:	f003 0203 	and.w	r2, r3, #3
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	429a      	cmp	r2, r3
 8007a60:	d103      	bne.n	8007a6a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
       ||
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d142      	bne.n	8007af0 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	73fb      	strb	r3, [r7, #15]
 8007a6e:	e03f      	b.n	8007af0 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	2b03      	cmp	r3, #3
 8007a76:	d018      	beq.n	8007aaa <RCCEx_PLLSAI1_Config+0x72>
 8007a78:	2b03      	cmp	r3, #3
 8007a7a:	d825      	bhi.n	8007ac8 <RCCEx_PLLSAI1_Config+0x90>
 8007a7c:	2b01      	cmp	r3, #1
 8007a7e:	d002      	beq.n	8007a86 <RCCEx_PLLSAI1_Config+0x4e>
 8007a80:	2b02      	cmp	r3, #2
 8007a82:	d009      	beq.n	8007a98 <RCCEx_PLLSAI1_Config+0x60>
 8007a84:	e020      	b.n	8007ac8 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007a86:	4b62      	ldr	r3, [pc, #392]	; (8007c10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f003 0302 	and.w	r3, r3, #2
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d11d      	bne.n	8007ace <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8007a92:	2301      	movs	r3, #1
 8007a94:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007a96:	e01a      	b.n	8007ace <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007a98:	4b5d      	ldr	r3, [pc, #372]	; (8007c10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d116      	bne.n	8007ad2 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007aa8:	e013      	b.n	8007ad2 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007aaa:	4b59      	ldr	r3, [pc, #356]	; (8007c10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d10f      	bne.n	8007ad6 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007ab6:	4b56      	ldr	r3, [pc, #344]	; (8007c10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d109      	bne.n	8007ad6 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007ac6:	e006      	b.n	8007ad6 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8007ac8:	2301      	movs	r3, #1
 8007aca:	73fb      	strb	r3, [r7, #15]
      break;
 8007acc:	e004      	b.n	8007ad8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8007ace:	bf00      	nop
 8007ad0:	e002      	b.n	8007ad8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8007ad2:	bf00      	nop
 8007ad4:	e000      	b.n	8007ad8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8007ad6:	bf00      	nop
    }

    if(status == HAL_OK)
 8007ad8:	7bfb      	ldrb	r3, [r7, #15]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d108      	bne.n	8007af0 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8007ade:	4b4c      	ldr	r3, [pc, #304]	; (8007c10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007ae0:	68db      	ldr	r3, [r3, #12]
 8007ae2:	f023 0203 	bic.w	r2, r3, #3
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4949      	ldr	r1, [pc, #292]	; (8007c10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007aec:	4313      	orrs	r3, r2
 8007aee:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8007af0:	7bfb      	ldrb	r3, [r7, #15]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	f040 8086 	bne.w	8007c04 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007af8:	4b45      	ldr	r3, [pc, #276]	; (8007c10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	4a44      	ldr	r2, [pc, #272]	; (8007c10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007afe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007b02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b04:	f7fc fa54 	bl	8003fb0 <HAL_GetTick>
 8007b08:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007b0a:	e009      	b.n	8007b20 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007b0c:	f7fc fa50 	bl	8003fb0 <HAL_GetTick>
 8007b10:	4602      	mov	r2, r0
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	1ad3      	subs	r3, r2, r3
 8007b16:	2b02      	cmp	r3, #2
 8007b18:	d902      	bls.n	8007b20 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8007b1a:	2303      	movs	r3, #3
 8007b1c:	73fb      	strb	r3, [r7, #15]
        break;
 8007b1e:	e005      	b.n	8007b2c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007b20:	4b3b      	ldr	r3, [pc, #236]	; (8007c10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d1ef      	bne.n	8007b0c <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8007b2c:	7bfb      	ldrb	r3, [r7, #15]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d168      	bne.n	8007c04 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d113      	bne.n	8007b60 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007b38:	4b35      	ldr	r3, [pc, #212]	; (8007c10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007b3a:	691a      	ldr	r2, [r3, #16]
 8007b3c:	4b35      	ldr	r3, [pc, #212]	; (8007c14 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007b3e:	4013      	ands	r3, r2
 8007b40:	687a      	ldr	r2, [r7, #4]
 8007b42:	6892      	ldr	r2, [r2, #8]
 8007b44:	0211      	lsls	r1, r2, #8
 8007b46:	687a      	ldr	r2, [r7, #4]
 8007b48:	68d2      	ldr	r2, [r2, #12]
 8007b4a:	06d2      	lsls	r2, r2, #27
 8007b4c:	4311      	orrs	r1, r2
 8007b4e:	687a      	ldr	r2, [r7, #4]
 8007b50:	6852      	ldr	r2, [r2, #4]
 8007b52:	3a01      	subs	r2, #1
 8007b54:	0112      	lsls	r2, r2, #4
 8007b56:	430a      	orrs	r2, r1
 8007b58:	492d      	ldr	r1, [pc, #180]	; (8007c10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	610b      	str	r3, [r1, #16]
 8007b5e:	e02d      	b.n	8007bbc <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	2b01      	cmp	r3, #1
 8007b64:	d115      	bne.n	8007b92 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007b66:	4b2a      	ldr	r3, [pc, #168]	; (8007c10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007b68:	691a      	ldr	r2, [r3, #16]
 8007b6a:	4b2b      	ldr	r3, [pc, #172]	; (8007c18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007b6c:	4013      	ands	r3, r2
 8007b6e:	687a      	ldr	r2, [r7, #4]
 8007b70:	6892      	ldr	r2, [r2, #8]
 8007b72:	0211      	lsls	r1, r2, #8
 8007b74:	687a      	ldr	r2, [r7, #4]
 8007b76:	6912      	ldr	r2, [r2, #16]
 8007b78:	0852      	lsrs	r2, r2, #1
 8007b7a:	3a01      	subs	r2, #1
 8007b7c:	0552      	lsls	r2, r2, #21
 8007b7e:	4311      	orrs	r1, r2
 8007b80:	687a      	ldr	r2, [r7, #4]
 8007b82:	6852      	ldr	r2, [r2, #4]
 8007b84:	3a01      	subs	r2, #1
 8007b86:	0112      	lsls	r2, r2, #4
 8007b88:	430a      	orrs	r2, r1
 8007b8a:	4921      	ldr	r1, [pc, #132]	; (8007c10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007b8c:	4313      	orrs	r3, r2
 8007b8e:	610b      	str	r3, [r1, #16]
 8007b90:	e014      	b.n	8007bbc <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007b92:	4b1f      	ldr	r3, [pc, #124]	; (8007c10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007b94:	691a      	ldr	r2, [r3, #16]
 8007b96:	4b21      	ldr	r3, [pc, #132]	; (8007c1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007b98:	4013      	ands	r3, r2
 8007b9a:	687a      	ldr	r2, [r7, #4]
 8007b9c:	6892      	ldr	r2, [r2, #8]
 8007b9e:	0211      	lsls	r1, r2, #8
 8007ba0:	687a      	ldr	r2, [r7, #4]
 8007ba2:	6952      	ldr	r2, [r2, #20]
 8007ba4:	0852      	lsrs	r2, r2, #1
 8007ba6:	3a01      	subs	r2, #1
 8007ba8:	0652      	lsls	r2, r2, #25
 8007baa:	4311      	orrs	r1, r2
 8007bac:	687a      	ldr	r2, [r7, #4]
 8007bae:	6852      	ldr	r2, [r2, #4]
 8007bb0:	3a01      	subs	r2, #1
 8007bb2:	0112      	lsls	r2, r2, #4
 8007bb4:	430a      	orrs	r2, r1
 8007bb6:	4916      	ldr	r1, [pc, #88]	; (8007c10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007bb8:	4313      	orrs	r3, r2
 8007bba:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007bbc:	4b14      	ldr	r3, [pc, #80]	; (8007c10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4a13      	ldr	r2, [pc, #76]	; (8007c10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007bc2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007bc6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007bc8:	f7fc f9f2 	bl	8003fb0 <HAL_GetTick>
 8007bcc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007bce:	e009      	b.n	8007be4 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007bd0:	f7fc f9ee 	bl	8003fb0 <HAL_GetTick>
 8007bd4:	4602      	mov	r2, r0
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	1ad3      	subs	r3, r2, r3
 8007bda:	2b02      	cmp	r3, #2
 8007bdc:	d902      	bls.n	8007be4 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8007bde:	2303      	movs	r3, #3
 8007be0:	73fb      	strb	r3, [r7, #15]
          break;
 8007be2:	e005      	b.n	8007bf0 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007be4:	4b0a      	ldr	r3, [pc, #40]	; (8007c10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d0ef      	beq.n	8007bd0 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8007bf0:	7bfb      	ldrb	r3, [r7, #15]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d106      	bne.n	8007c04 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007bf6:	4b06      	ldr	r3, [pc, #24]	; (8007c10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007bf8:	691a      	ldr	r2, [r3, #16]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	699b      	ldr	r3, [r3, #24]
 8007bfe:	4904      	ldr	r1, [pc, #16]	; (8007c10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007c00:	4313      	orrs	r3, r2
 8007c02:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3710      	adds	r7, #16
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}
 8007c0e:	bf00      	nop
 8007c10:	40021000 	.word	0x40021000
 8007c14:	07ff800f 	.word	0x07ff800f
 8007c18:	ff9f800f 	.word	0xff9f800f
 8007c1c:	f9ff800f 	.word	0xf9ff800f

08007c20 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b084      	sub	sp, #16
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
 8007c28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007c2e:	4b72      	ldr	r3, [pc, #456]	; (8007df8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007c30:	68db      	ldr	r3, [r3, #12]
 8007c32:	f003 0303 	and.w	r3, r3, #3
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d00e      	beq.n	8007c58 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8007c3a:	4b6f      	ldr	r3, [pc, #444]	; (8007df8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007c3c:	68db      	ldr	r3, [r3, #12]
 8007c3e:	f003 0203 	and.w	r2, r3, #3
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	429a      	cmp	r2, r3
 8007c48:	d103      	bne.n	8007c52 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
       ||
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d142      	bne.n	8007cd8 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8007c52:	2301      	movs	r3, #1
 8007c54:	73fb      	strb	r3, [r7, #15]
 8007c56:	e03f      	b.n	8007cd8 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	2b03      	cmp	r3, #3
 8007c5e:	d018      	beq.n	8007c92 <RCCEx_PLLSAI2_Config+0x72>
 8007c60:	2b03      	cmp	r3, #3
 8007c62:	d825      	bhi.n	8007cb0 <RCCEx_PLLSAI2_Config+0x90>
 8007c64:	2b01      	cmp	r3, #1
 8007c66:	d002      	beq.n	8007c6e <RCCEx_PLLSAI2_Config+0x4e>
 8007c68:	2b02      	cmp	r3, #2
 8007c6a:	d009      	beq.n	8007c80 <RCCEx_PLLSAI2_Config+0x60>
 8007c6c:	e020      	b.n	8007cb0 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007c6e:	4b62      	ldr	r3, [pc, #392]	; (8007df8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f003 0302 	and.w	r3, r3, #2
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d11d      	bne.n	8007cb6 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007c7e:	e01a      	b.n	8007cb6 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007c80:	4b5d      	ldr	r3, [pc, #372]	; (8007df8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d116      	bne.n	8007cba <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007c90:	e013      	b.n	8007cba <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007c92:	4b59      	ldr	r3, [pc, #356]	; (8007df8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d10f      	bne.n	8007cbe <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007c9e:	4b56      	ldr	r3, [pc, #344]	; (8007df8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d109      	bne.n	8007cbe <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8007caa:	2301      	movs	r3, #1
 8007cac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007cae:	e006      	b.n	8007cbe <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	73fb      	strb	r3, [r7, #15]
      break;
 8007cb4:	e004      	b.n	8007cc0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8007cb6:	bf00      	nop
 8007cb8:	e002      	b.n	8007cc0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8007cba:	bf00      	nop
 8007cbc:	e000      	b.n	8007cc0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8007cbe:	bf00      	nop
    }

    if(status == HAL_OK)
 8007cc0:	7bfb      	ldrb	r3, [r7, #15]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d108      	bne.n	8007cd8 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8007cc6:	4b4c      	ldr	r3, [pc, #304]	; (8007df8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007cc8:	68db      	ldr	r3, [r3, #12]
 8007cca:	f023 0203 	bic.w	r2, r3, #3
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	4949      	ldr	r1, [pc, #292]	; (8007df8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8007cd8:	7bfb      	ldrb	r3, [r7, #15]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	f040 8086 	bne.w	8007dec <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007ce0:	4b45      	ldr	r3, [pc, #276]	; (8007df8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4a44      	ldr	r2, [pc, #272]	; (8007df8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007ce6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007cea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007cec:	f7fc f960 	bl	8003fb0 <HAL_GetTick>
 8007cf0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007cf2:	e009      	b.n	8007d08 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007cf4:	f7fc f95c 	bl	8003fb0 <HAL_GetTick>
 8007cf8:	4602      	mov	r2, r0
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	1ad3      	subs	r3, r2, r3
 8007cfe:	2b02      	cmp	r3, #2
 8007d00:	d902      	bls.n	8007d08 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8007d02:	2303      	movs	r3, #3
 8007d04:	73fb      	strb	r3, [r7, #15]
        break;
 8007d06:	e005      	b.n	8007d14 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007d08:	4b3b      	ldr	r3, [pc, #236]	; (8007df8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d1ef      	bne.n	8007cf4 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8007d14:	7bfb      	ldrb	r3, [r7, #15]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d168      	bne.n	8007dec <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d113      	bne.n	8007d48 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007d20:	4b35      	ldr	r3, [pc, #212]	; (8007df8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007d22:	695a      	ldr	r2, [r3, #20]
 8007d24:	4b35      	ldr	r3, [pc, #212]	; (8007dfc <RCCEx_PLLSAI2_Config+0x1dc>)
 8007d26:	4013      	ands	r3, r2
 8007d28:	687a      	ldr	r2, [r7, #4]
 8007d2a:	6892      	ldr	r2, [r2, #8]
 8007d2c:	0211      	lsls	r1, r2, #8
 8007d2e:	687a      	ldr	r2, [r7, #4]
 8007d30:	68d2      	ldr	r2, [r2, #12]
 8007d32:	06d2      	lsls	r2, r2, #27
 8007d34:	4311      	orrs	r1, r2
 8007d36:	687a      	ldr	r2, [r7, #4]
 8007d38:	6852      	ldr	r2, [r2, #4]
 8007d3a:	3a01      	subs	r2, #1
 8007d3c:	0112      	lsls	r2, r2, #4
 8007d3e:	430a      	orrs	r2, r1
 8007d40:	492d      	ldr	r1, [pc, #180]	; (8007df8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007d42:	4313      	orrs	r3, r2
 8007d44:	614b      	str	r3, [r1, #20]
 8007d46:	e02d      	b.n	8007da4 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	2b01      	cmp	r3, #1
 8007d4c:	d115      	bne.n	8007d7a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007d4e:	4b2a      	ldr	r3, [pc, #168]	; (8007df8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007d50:	695a      	ldr	r2, [r3, #20]
 8007d52:	4b2b      	ldr	r3, [pc, #172]	; (8007e00 <RCCEx_PLLSAI2_Config+0x1e0>)
 8007d54:	4013      	ands	r3, r2
 8007d56:	687a      	ldr	r2, [r7, #4]
 8007d58:	6892      	ldr	r2, [r2, #8]
 8007d5a:	0211      	lsls	r1, r2, #8
 8007d5c:	687a      	ldr	r2, [r7, #4]
 8007d5e:	6912      	ldr	r2, [r2, #16]
 8007d60:	0852      	lsrs	r2, r2, #1
 8007d62:	3a01      	subs	r2, #1
 8007d64:	0552      	lsls	r2, r2, #21
 8007d66:	4311      	orrs	r1, r2
 8007d68:	687a      	ldr	r2, [r7, #4]
 8007d6a:	6852      	ldr	r2, [r2, #4]
 8007d6c:	3a01      	subs	r2, #1
 8007d6e:	0112      	lsls	r2, r2, #4
 8007d70:	430a      	orrs	r2, r1
 8007d72:	4921      	ldr	r1, [pc, #132]	; (8007df8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007d74:	4313      	orrs	r3, r2
 8007d76:	614b      	str	r3, [r1, #20]
 8007d78:	e014      	b.n	8007da4 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007d7a:	4b1f      	ldr	r3, [pc, #124]	; (8007df8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007d7c:	695a      	ldr	r2, [r3, #20]
 8007d7e:	4b21      	ldr	r3, [pc, #132]	; (8007e04 <RCCEx_PLLSAI2_Config+0x1e4>)
 8007d80:	4013      	ands	r3, r2
 8007d82:	687a      	ldr	r2, [r7, #4]
 8007d84:	6892      	ldr	r2, [r2, #8]
 8007d86:	0211      	lsls	r1, r2, #8
 8007d88:	687a      	ldr	r2, [r7, #4]
 8007d8a:	6952      	ldr	r2, [r2, #20]
 8007d8c:	0852      	lsrs	r2, r2, #1
 8007d8e:	3a01      	subs	r2, #1
 8007d90:	0652      	lsls	r2, r2, #25
 8007d92:	4311      	orrs	r1, r2
 8007d94:	687a      	ldr	r2, [r7, #4]
 8007d96:	6852      	ldr	r2, [r2, #4]
 8007d98:	3a01      	subs	r2, #1
 8007d9a:	0112      	lsls	r2, r2, #4
 8007d9c:	430a      	orrs	r2, r1
 8007d9e:	4916      	ldr	r1, [pc, #88]	; (8007df8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007da0:	4313      	orrs	r3, r2
 8007da2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8007da4:	4b14      	ldr	r3, [pc, #80]	; (8007df8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	4a13      	ldr	r2, [pc, #76]	; (8007df8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007daa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007dae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007db0:	f7fc f8fe 	bl	8003fb0 <HAL_GetTick>
 8007db4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007db6:	e009      	b.n	8007dcc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007db8:	f7fc f8fa 	bl	8003fb0 <HAL_GetTick>
 8007dbc:	4602      	mov	r2, r0
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	1ad3      	subs	r3, r2, r3
 8007dc2:	2b02      	cmp	r3, #2
 8007dc4:	d902      	bls.n	8007dcc <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8007dc6:	2303      	movs	r3, #3
 8007dc8:	73fb      	strb	r3, [r7, #15]
          break;
 8007dca:	e005      	b.n	8007dd8 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007dcc:	4b0a      	ldr	r3, [pc, #40]	; (8007df8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d0ef      	beq.n	8007db8 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8007dd8:	7bfb      	ldrb	r3, [r7, #15]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d106      	bne.n	8007dec <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8007dde:	4b06      	ldr	r3, [pc, #24]	; (8007df8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007de0:	695a      	ldr	r2, [r3, #20]
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	699b      	ldr	r3, [r3, #24]
 8007de6:	4904      	ldr	r1, [pc, #16]	; (8007df8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007de8:	4313      	orrs	r3, r2
 8007dea:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	3710      	adds	r7, #16
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}
 8007df6:	bf00      	nop
 8007df8:	40021000 	.word	0x40021000
 8007dfc:	07ff800f 	.word	0x07ff800f
 8007e00:	ff9f800f 	.word	0xff9f800f
 8007e04:	f9ff800f 	.word	0xf9ff800f

08007e08 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b089      	sub	sp, #36	; 0x24
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
 8007e10:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8007e12:	2300      	movs	r3, #0
 8007e14:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8007e16:	2300      	movs	r3, #0
 8007e18:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e24:	d10b      	bne.n	8007e3e <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8007e26:	4b7e      	ldr	r3, [pc, #504]	; (8008020 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007e28:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007e2c:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8007e30:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8007e32:	69bb      	ldr	r3, [r7, #24]
 8007e34:	2b60      	cmp	r3, #96	; 0x60
 8007e36:	d112      	bne.n	8007e5e <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007e38:	4b7a      	ldr	r3, [pc, #488]	; (8008024 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8007e3a:	61fb      	str	r3, [r7, #28]
 8007e3c:	e00f      	b.n	8007e5e <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e44:	d10b      	bne.n	8007e5e <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8007e46:	4b76      	ldr	r3, [pc, #472]	; (8008020 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007e48:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007e4c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007e50:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8007e52:	69bb      	ldr	r3, [r7, #24]
 8007e54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e58:	d101      	bne.n	8007e5e <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8007e5a:	4b72      	ldr	r3, [pc, #456]	; (8008024 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8007e5c:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8007e5e:	69fb      	ldr	r3, [r7, #28]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	f040 80d6 	bne.w	8008012 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8007e6a:	69bb      	ldr	r3, [r7, #24]
 8007e6c:	2b40      	cmp	r3, #64	; 0x40
 8007e6e:	d003      	beq.n	8007e78 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 8007e70:	69bb      	ldr	r3, [r7, #24]
 8007e72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e76:	d13b      	bne.n	8007ef0 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8007e78:	4b69      	ldr	r3, [pc, #420]	; (8008020 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e80:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007e84:	f040 80c4 	bne.w	8008010 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 8007e88:	4b65      	ldr	r3, [pc, #404]	; (8008020 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007e8a:	68db      	ldr	r3, [r3, #12]
 8007e8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	f000 80bd 	beq.w	8008010 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007e96:	4b62      	ldr	r3, [pc, #392]	; (8008020 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007e98:	68db      	ldr	r3, [r3, #12]
 8007e9a:	091b      	lsrs	r3, r3, #4
 8007e9c:	f003 030f 	and.w	r3, r3, #15
 8007ea0:	3301      	adds	r3, #1
 8007ea2:	693a      	ldr	r2, [r7, #16]
 8007ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ea8:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8007eaa:	4b5d      	ldr	r3, [pc, #372]	; (8008020 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007eac:	68db      	ldr	r3, [r3, #12]
 8007eae:	0a1b      	lsrs	r3, r3, #8
 8007eb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007eb4:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8007eb6:	4b5a      	ldr	r3, [pc, #360]	; (8008020 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007eb8:	68db      	ldr	r3, [r3, #12]
 8007eba:	0edb      	lsrs	r3, r3, #27
 8007ebc:	f003 031f 	and.w	r3, r3, #31
 8007ec0:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8007ec2:	697b      	ldr	r3, [r7, #20]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d10a      	bne.n	8007ede <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8007ec8:	4b55      	ldr	r3, [pc, #340]	; (8008020 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007eca:	68db      	ldr	r3, [r3, #12]
 8007ecc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d002      	beq.n	8007eda <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 8007ed4:	2311      	movs	r3, #17
 8007ed6:	617b      	str	r3, [r7, #20]
 8007ed8:	e001      	b.n	8007ede <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 8007eda:	2307      	movs	r3, #7
 8007edc:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8007ede:	693b      	ldr	r3, [r7, #16]
 8007ee0:	68fa      	ldr	r2, [r7, #12]
 8007ee2:	fb03 f202 	mul.w	r2, r3, r2
 8007ee6:	697b      	ldr	r3, [r7, #20]
 8007ee8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007eec:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8007eee:	e08f      	b.n	8008010 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8007ef0:	69bb      	ldr	r3, [r7, #24]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d13a      	bne.n	8007f6c <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8007ef6:	4b4a      	ldr	r3, [pc, #296]	; (8008020 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007efe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f02:	f040 8086 	bne.w	8008012 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8007f06:	4b46      	ldr	r3, [pc, #280]	; (8008020 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007f08:	691b      	ldr	r3, [r3, #16]
 8007f0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d07f      	beq.n	8008012 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8007f12:	4b43      	ldr	r3, [pc, #268]	; (8008020 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007f14:	691b      	ldr	r3, [r3, #16]
 8007f16:	091b      	lsrs	r3, r3, #4
 8007f18:	f003 030f 	and.w	r3, r3, #15
 8007f1c:	3301      	adds	r3, #1
 8007f1e:	693a      	ldr	r2, [r7, #16]
 8007f20:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f24:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8007f26:	4b3e      	ldr	r3, [pc, #248]	; (8008020 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007f28:	691b      	ldr	r3, [r3, #16]
 8007f2a:	0a1b      	lsrs	r3, r3, #8
 8007f2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f30:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8007f32:	4b3b      	ldr	r3, [pc, #236]	; (8008020 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007f34:	691b      	ldr	r3, [r3, #16]
 8007f36:	0edb      	lsrs	r3, r3, #27
 8007f38:	f003 031f 	and.w	r3, r3, #31
 8007f3c:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d10a      	bne.n	8007f5a <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8007f44:	4b36      	ldr	r3, [pc, #216]	; (8008020 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007f46:	691b      	ldr	r3, [r3, #16]
 8007f48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d002      	beq.n	8007f56 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 8007f50:	2311      	movs	r3, #17
 8007f52:	617b      	str	r3, [r7, #20]
 8007f54:	e001      	b.n	8007f5a <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 8007f56:	2307      	movs	r3, #7
 8007f58:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8007f5a:	693b      	ldr	r3, [r7, #16]
 8007f5c:	68fa      	ldr	r2, [r7, #12]
 8007f5e:	fb03 f202 	mul.w	r2, r3, r2
 8007f62:	697b      	ldr	r3, [r7, #20]
 8007f64:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f68:	61fb      	str	r3, [r7, #28]
 8007f6a:	e052      	b.n	8008012 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 8007f6c:	69bb      	ldr	r3, [r7, #24]
 8007f6e:	2b80      	cmp	r3, #128	; 0x80
 8007f70:	d003      	beq.n	8007f7a <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 8007f72:	69bb      	ldr	r3, [r7, #24]
 8007f74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f78:	d109      	bne.n	8007f8e <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007f7a:	4b29      	ldr	r3, [pc, #164]	; (8008020 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f86:	d144      	bne.n	8008012 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 8007f88:	4b27      	ldr	r3, [pc, #156]	; (8008028 <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 8007f8a:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007f8c:	e041      	b.n	8008012 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8007f8e:	69bb      	ldr	r3, [r7, #24]
 8007f90:	2b20      	cmp	r3, #32
 8007f92:	d003      	beq.n	8007f9c <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 8007f94:	69bb      	ldr	r3, [r7, #24]
 8007f96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f9a:	d13a      	bne.n	8008012 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8007f9c:	4b20      	ldr	r3, [pc, #128]	; (8008020 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007fa4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007fa8:	d133      	bne.n	8008012 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8007faa:	4b1d      	ldr	r3, [pc, #116]	; (8008020 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007fac:	695b      	ldr	r3, [r3, #20]
 8007fae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d02d      	beq.n	8008012 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 8007fb6:	4b1a      	ldr	r3, [pc, #104]	; (8008020 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007fb8:	695b      	ldr	r3, [r3, #20]
 8007fba:	091b      	lsrs	r3, r3, #4
 8007fbc:	f003 030f 	and.w	r3, r3, #15
 8007fc0:	3301      	adds	r3, #1
 8007fc2:	693a      	ldr	r2, [r7, #16]
 8007fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fc8:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8007fca:	4b15      	ldr	r3, [pc, #84]	; (8008020 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007fcc:	695b      	ldr	r3, [r3, #20]
 8007fce:	0a1b      	lsrs	r3, r3, #8
 8007fd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fd4:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 8007fd6:	4b12      	ldr	r3, [pc, #72]	; (8008020 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007fd8:	695b      	ldr	r3, [r3, #20]
 8007fda:	0edb      	lsrs	r3, r3, #27
 8007fdc:	f003 031f 	and.w	r3, r3, #31
 8007fe0:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8007fe2:	697b      	ldr	r3, [r7, #20]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d10a      	bne.n	8007ffe <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8007fe8:	4b0d      	ldr	r3, [pc, #52]	; (8008020 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007fea:	695b      	ldr	r3, [r3, #20]
 8007fec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d002      	beq.n	8007ffa <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 8007ff4:	2311      	movs	r3, #17
 8007ff6:	617b      	str	r3, [r7, #20]
 8007ff8:	e001      	b.n	8007ffe <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 8007ffa:	2307      	movs	r3, #7
 8007ffc:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8007ffe:	693b      	ldr	r3, [r7, #16]
 8008000:	68fa      	ldr	r2, [r7, #12]
 8008002:	fb03 f202 	mul.w	r2, r3, r2
 8008006:	697b      	ldr	r3, [r7, #20]
 8008008:	fbb2 f3f3 	udiv	r3, r2, r3
 800800c:	61fb      	str	r3, [r7, #28]
 800800e:	e000      	b.n	8008012 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8008010:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8008012:	69fb      	ldr	r3, [r7, #28]
}
 8008014:	4618      	mov	r0, r3
 8008016:	3724      	adds	r7, #36	; 0x24
 8008018:	46bd      	mov	sp, r7
 800801a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801e:	4770      	bx	lr
 8008020:	40021000 	.word	0x40021000
 8008024:	001fff68 	.word	0x001fff68
 8008028:	00f42400 	.word	0x00f42400

0800802c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b08a      	sub	sp, #40	; 0x28
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d101      	bne.n	800803e <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800803a:	2301      	movs	r3, #1
 800803c:	e1c7      	b.n	80083ce <HAL_SAI_Init+0x3a2>

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008044:	2b01      	cmp	r3, #1
 8008046:	d10e      	bne.n	8008066 <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	4a81      	ldr	r2, [pc, #516]	; (8008254 <HAL_SAI_Init+0x228>)
 800804e:	4293      	cmp	r3, r2
 8008050:	d107      	bne.n	8008062 <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 8008056:	2b01      	cmp	r3, #1
 8008058:	d103      	bne.n	8008062 <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800805e:	2b00      	cmp	r3, #0
 8008060:	d001      	beq.n	8008066 <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 8008062:	2301      	movs	r3, #1
 8008064:	e1b3      	b.n	80083ce <HAL_SAI_Init+0x3a2>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800806c:	b2db      	uxtb	r3, r3
 800806e:	2b00      	cmp	r3, #0
 8008070:	d106      	bne.n	8008080 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2200      	movs	r2, #0
 8008076:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f7fb fc64 	bl	8003948 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f000 f9b1 	bl	80083e8 <SAI_Disable>
 8008086:	4603      	mov	r3, r0
 8008088:	2b00      	cmp	r3, #0
 800808a:	d001      	beq.n	8008090 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 800808c:	2301      	movs	r3, #1
 800808e:	e19e      	b.n	80083ce <HAL_SAI_Init+0x3a2>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2202      	movs	r2, #2
 8008094:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	68db      	ldr	r3, [r3, #12]
 800809c:	2b02      	cmp	r3, #2
 800809e:	d00c      	beq.n	80080ba <HAL_SAI_Init+0x8e>
 80080a0:	2b02      	cmp	r3, #2
 80080a2:	d80d      	bhi.n	80080c0 <HAL_SAI_Init+0x94>
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d002      	beq.n	80080ae <HAL_SAI_Init+0x82>
 80080a8:	2b01      	cmp	r3, #1
 80080aa:	d003      	beq.n	80080b4 <HAL_SAI_Init+0x88>
 80080ac:	e008      	b.n	80080c0 <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 80080ae:	2300      	movs	r3, #0
 80080b0:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80080b2:	e008      	b.n	80080c6 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80080b4:	2310      	movs	r3, #16
 80080b6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80080b8:	e005      	b.n	80080c6 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80080ba:	2320      	movs	r3, #32
 80080bc:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80080be:	e002      	b.n	80080c6 <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 80080c0:	2300      	movs	r3, #0
 80080c2:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80080c4:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	689b      	ldr	r3, [r3, #8]
 80080ca:	2b03      	cmp	r3, #3
 80080cc:	d81d      	bhi.n	800810a <HAL_SAI_Init+0xde>
 80080ce:	a201      	add	r2, pc, #4	; (adr r2, 80080d4 <HAL_SAI_Init+0xa8>)
 80080d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080d4:	080080e5 	.word	0x080080e5
 80080d8:	080080eb 	.word	0x080080eb
 80080dc:	080080f3 	.word	0x080080f3
 80080e0:	080080fb 	.word	0x080080fb
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 80080e4:	2300      	movs	r3, #0
 80080e6:	61fb      	str	r3, [r7, #28]
      break;
 80080e8:	e012      	b.n	8008110 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 80080ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80080ee:	61fb      	str	r3, [r7, #28]
      break;
 80080f0:	e00e      	b.n	8008110 <HAL_SAI_Init+0xe4>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80080f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80080f6:	61fb      	str	r3, [r7, #28]
      break;
 80080f8:	e00a      	b.n	8008110 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80080fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80080fe:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8008100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008102:	f043 0301 	orr.w	r3, r3, #1
 8008106:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8008108:	e002      	b.n	8008110 <HAL_SAI_Init+0xe4>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 800810a:	2300      	movs	r3, #0
 800810c:	61fb      	str	r3, [r7, #28]
      break;
 800810e:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4a4f      	ldr	r2, [pc, #316]	; (8008254 <HAL_SAI_Init+0x228>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d004      	beq.n	8008124 <HAL_SAI_Init+0xf8>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	4a4e      	ldr	r2, [pc, #312]	; (8008258 <HAL_SAI_Init+0x22c>)
 8008120:	4293      	cmp	r3, r2
 8008122:	d103      	bne.n	800812c <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 8008124:	4a4d      	ldr	r2, [pc, #308]	; (800825c <HAL_SAI_Init+0x230>)
 8008126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008128:	6013      	str	r3, [r2, #0]
 800812a:	e002      	b.n	8008132 <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800812c:	4a4c      	ldr	r2, [pc, #304]	; (8008260 <HAL_SAI_Init+0x234>)
 800812e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008130:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	69db      	ldr	r3, [r3, #28]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d073      	beq.n	8008222 <HAL_SAI_Init+0x1f6>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	4a45      	ldr	r2, [pc, #276]	; (8008254 <HAL_SAI_Init+0x228>)
 8008140:	4293      	cmp	r3, r2
 8008142:	d004      	beq.n	800814e <HAL_SAI_Init+0x122>
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	4a43      	ldr	r2, [pc, #268]	; (8008258 <HAL_SAI_Init+0x22c>)
 800814a:	4293      	cmp	r3, r2
 800814c:	d105      	bne.n	800815a <HAL_SAI_Init+0x12e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800814e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8008152:	f7fe fd3f 	bl	8006bd4 <HAL_RCCEx_GetPeriphCLKFreq>
 8008156:	61b8      	str	r0, [r7, #24]
 8008158:	e004      	b.n	8008164 <HAL_SAI_Init+0x138>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800815a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800815e:	f7fe fd39 	bl	8006bd4 <HAL_RCCEx_GetPeriphCLKFreq>
 8008162:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NOMCK = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NOMCK = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	695b      	ldr	r3, [r3, #20]
 8008168:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800816c:	d120      	bne.n	80081b0 <HAL_SAI_Init+0x184>
    {
      /* NOMCK = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008172:	2b04      	cmp	r3, #4
 8008174:	d102      	bne.n	800817c <HAL_SAI_Init+0x150>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 8008176:	2340      	movs	r3, #64	; 0x40
 8008178:	613b      	str	r3, [r7, #16]
 800817a:	e00a      	b.n	8008192 <HAL_SAI_Init+0x166>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008180:	2b08      	cmp	r3, #8
 8008182:	d103      	bne.n	800818c <HAL_SAI_Init+0x160>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 8008184:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008188:	613b      	str	r3, [r7, #16]
 800818a:	e002      	b.n	8008192 <HAL_SAI_Init+0x166>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008190:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8008192:	69ba      	ldr	r2, [r7, #24]
 8008194:	4613      	mov	r3, r2
 8008196:	009b      	lsls	r3, r3, #2
 8008198:	4413      	add	r3, r2
 800819a:	005b      	lsls	r3, r3, #1
 800819c:	4619      	mov	r1, r3
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	69db      	ldr	r3, [r3, #28]
 80081a2:	693a      	ldr	r2, [r7, #16]
 80081a4:	fb02 f303 	mul.w	r3, r2, r3
 80081a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80081ac:	617b      	str	r3, [r7, #20]
 80081ae:	e017      	b.n	80081e0 <HAL_SAI_Init+0x1b4>
    }
    else
    {
      /* NOMCK = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80081b8:	d101      	bne.n	80081be <HAL_SAI_Init+0x192>
 80081ba:	2302      	movs	r3, #2
 80081bc:	e000      	b.n	80081c0 <HAL_SAI_Init+0x194>
 80081be:	2301      	movs	r3, #1
 80081c0:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 80081c2:	69ba      	ldr	r2, [r7, #24]
 80081c4:	4613      	mov	r3, r2
 80081c6:	009b      	lsls	r3, r3, #2
 80081c8:	4413      	add	r3, r2
 80081ca:	005b      	lsls	r3, r3, #1
 80081cc:	4619      	mov	r1, r3
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	69db      	ldr	r3, [r3, #28]
 80081d2:	68fa      	ldr	r2, [r7, #12]
 80081d4:	fb02 f303 	mul.w	r3, r2, r3
 80081d8:	021b      	lsls	r3, r3, #8
 80081da:	fbb1 f3f3 	udiv	r3, r1, r3
 80081de:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 80081e0:	697b      	ldr	r3, [r7, #20]
 80081e2:	4a20      	ldr	r2, [pc, #128]	; (8008264 <HAL_SAI_Init+0x238>)
 80081e4:	fba2 2303 	umull	r2, r3, r2, r3
 80081e8:	08da      	lsrs	r2, r3, #3
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 80081ee:	6979      	ldr	r1, [r7, #20]
 80081f0:	4b1c      	ldr	r3, [pc, #112]	; (8008264 <HAL_SAI_Init+0x238>)
 80081f2:	fba3 2301 	umull	r2, r3, r3, r1
 80081f6:	08da      	lsrs	r2, r3, #3
 80081f8:	4613      	mov	r3, r2
 80081fa:	009b      	lsls	r3, r3, #2
 80081fc:	4413      	add	r3, r2
 80081fe:	005b      	lsls	r3, r3, #1
 8008200:	1aca      	subs	r2, r1, r3
 8008202:	2a08      	cmp	r2, #8
 8008204:	d904      	bls.n	8008210 <HAL_SAI_Init+0x1e4>
    {
      hsai->Init.Mckdiv += 1U;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6a1b      	ldr	r3, [r3, #32]
 800820a:	1c5a      	adds	r2, r3, #1
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008214:	2b04      	cmp	r3, #4
 8008216:	d104      	bne.n	8008222 <HAL_SAI_Init+0x1f6>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6a1b      	ldr	r3, [r3, #32]
 800821c:	085a      	lsrs	r2, r3, #1
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	685b      	ldr	r3, [r3, #4]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d003      	beq.n	8008232 <HAL_SAI_Init+0x206>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	685b      	ldr	r3, [r3, #4]
 800822e:	2b02      	cmp	r3, #2
 8008230:	d109      	bne.n	8008246 <HAL_SAI_Init+0x21a>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008236:	2b01      	cmp	r3, #1
 8008238:	d101      	bne.n	800823e <HAL_SAI_Init+0x212>
 800823a:	2300      	movs	r3, #0
 800823c:	e001      	b.n	8008242 <HAL_SAI_Init+0x216>
 800823e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008242:	623b      	str	r3, [r7, #32]
 8008244:	e012      	b.n	800826c <HAL_SAI_Init+0x240>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800824a:	2b01      	cmp	r3, #1
 800824c:	d10c      	bne.n	8008268 <HAL_SAI_Init+0x23c>
 800824e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008252:	e00a      	b.n	800826a <HAL_SAI_Init+0x23e>
 8008254:	40015404 	.word	0x40015404
 8008258:	40015424 	.word	0x40015424
 800825c:	40015400 	.word	0x40015400
 8008260:	40015800 	.word	0x40015800
 8008264:	cccccccd 	.word	0xcccccccd
 8008268:	2300      	movs	r3, #0
 800826a:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	6819      	ldr	r1, [r3, #0]
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681a      	ldr	r2, [r3, #0]
 8008276:	4b58      	ldr	r3, [pc, #352]	; (80083d8 <HAL_SAI_Init+0x3ac>)
 8008278:	400b      	ands	r3, r1
 800827a:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NOMCK | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	6819      	ldr	r1, [r3, #0]
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	685a      	ldr	r2, [r3, #4]
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800828a:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008290:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008296:	431a      	orrs	r2, r3
 8008298:	6a3b      	ldr	r3, [r7, #32]
 800829a:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800829c:	69fb      	ldr	r3, [r7, #28]
 800829e:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          ckstr_bits | syncen_bits |                             \
 80082a4:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	691b      	ldr	r3, [r3, #16]
 80082aa:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80082b0:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6a1b      	ldr	r3, [r3, #32]
 80082b6:	051b      	lsls	r3, r3, #20
 80082b8:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80082be:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	430a      	orrs	r2, r1
 80082c6:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	685b      	ldr	r3, [r3, #4]
 80082ce:	687a      	ldr	r2, [r7, #4]
 80082d0:	6812      	ldr	r2, [r2, #0]
 80082d2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80082d6:	f023 030f 	bic.w	r3, r3, #15
 80082da:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	6859      	ldr	r1, [r3, #4]
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	699a      	ldr	r2, [r3, #24]
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082ea:	431a      	orrs	r2, r3
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082f0:	431a      	orrs	r2, r3
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	430a      	orrs	r2, r1
 80082f8:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	6899      	ldr	r1, [r3, #8]
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681a      	ldr	r2, [r3, #0]
 8008304:	4b35      	ldr	r3, [pc, #212]	; (80083dc <HAL_SAI_Init+0x3b0>)
 8008306:	400b      	ands	r3, r1
 8008308:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	6899      	ldr	r1, [r3, #8]
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008314:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800831a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
                           hsai->FrameInit.FSOffset |
 8008320:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSDefinition |
 8008326:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800832c:	3b01      	subs	r3, #1
 800832e:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8008330:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	430a      	orrs	r2, r1
 8008338:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	68d9      	ldr	r1, [r3, #12]
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681a      	ldr	r2, [r3, #0]
 8008344:	f24f 0320 	movw	r3, #61472	; 0xf020
 8008348:	400b      	ands	r3, r1
 800834a:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	68d9      	ldr	r1, [r3, #12]
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800835a:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008360:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8008362:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008368:	3b01      	subs	r3, #1
 800836a:	021b      	lsls	r3, r3, #8
 800836c:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	430a      	orrs	r2, r1
 8008374:	60da      	str	r2, [r3, #12]

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	4a19      	ldr	r2, [pc, #100]	; (80083e0 <HAL_SAI_Init+0x3b4>)
 800837c:	4293      	cmp	r3, r2
 800837e:	d119      	bne.n	80083b4 <HAL_SAI_Init+0x388>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8008380:	4b18      	ldr	r3, [pc, #96]	; (80083e4 <HAL_SAI_Init+0x3b8>)
 8008382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008384:	4a17      	ldr	r2, [pc, #92]	; (80083e4 <HAL_SAI_Init+0x3b8>)
 8008386:	f023 0301 	bic.w	r3, r3, #1
 800838a:	6453      	str	r3, [r2, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008392:	2b01      	cmp	r3, #1
 8008394:	d10e      	bne.n	80083b4 <HAL_SAI_Init+0x388>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800839e:	3b01      	subs	r3, #1
 80083a0:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 80083a2:	4910      	ldr	r1, [pc, #64]	; (80083e4 <HAL_SAI_Init+0x3b8>)
 80083a4:	4313      	orrs	r3, r2
 80083a6:	644b      	str	r3, [r1, #68]	; 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 80083a8:	4b0e      	ldr	r3, [pc, #56]	; (80083e4 <HAL_SAI_Init+0x3b8>)
 80083aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083ac:	4a0d      	ldr	r2, [pc, #52]	; (80083e4 <HAL_SAI_Init+0x3b8>)
 80083ae:	f043 0301 	orr.w	r3, r3, #1
 80083b2:	6453      	str	r3, [r2, #68]	; 0x44
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2200      	movs	r2, #0
 80083b8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2201      	movs	r2, #1
 80083c0:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2200      	movs	r2, #0
 80083c8:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

  return HAL_OK;
 80083cc:	2300      	movs	r3, #0
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	3728      	adds	r7, #40	; 0x28
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}
 80083d6:	bf00      	nop
 80083d8:	f805c010 	.word	0xf805c010
 80083dc:	fff88000 	.word	0xfff88000
 80083e0:	40015404 	.word	0x40015404
 80083e4:	40015400 	.word	0x40015400

080083e8 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80083e8:	b480      	push	{r7}
 80083ea:	b085      	sub	sp, #20
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80083f0:	4b18      	ldr	r3, [pc, #96]	; (8008454 <SAI_Disable+0x6c>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4a18      	ldr	r2, [pc, #96]	; (8008458 <SAI_Disable+0x70>)
 80083f6:	fba2 2303 	umull	r2, r3, r2, r3
 80083fa:	0b1b      	lsrs	r3, r3, #12
 80083fc:	009b      	lsls	r3, r3, #2
 80083fe:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8008400:	2300      	movs	r3, #0
 8008402:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	681a      	ldr	r2, [r3, #0]
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008412:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d10a      	bne.n	8008430 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008420:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      status = HAL_TIMEOUT;
 800842a:	2303      	movs	r3, #3
 800842c:	72fb      	strb	r3, [r7, #11]
      break;
 800842e:	e009      	b.n	8008444 <SAI_Disable+0x5c>
    }
    count--;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	3b01      	subs	r3, #1
 8008434:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008440:	2b00      	cmp	r3, #0
 8008442:	d1e7      	bne.n	8008414 <SAI_Disable+0x2c>

  return status;
 8008444:	7afb      	ldrb	r3, [r7, #11]
}
 8008446:	4618      	mov	r0, r3
 8008448:	3714      	adds	r7, #20
 800844a:	46bd      	mov	sp, r7
 800844c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008450:	4770      	bx	lr
 8008452:	bf00      	nop
 8008454:	20000014 	.word	0x20000014
 8008458:	95cbec1b 	.word	0x95cbec1b

0800845c <HAL_SMBUS_Init>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_Init(SMBUS_HandleTypeDef *hsmbus)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b082      	sub	sp, #8
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
  /* Check the SMBUS handle allocation */
  if (hsmbus == NULL)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d101      	bne.n	800846e <HAL_SMBUS_Init+0x12>
  {
    return HAL_ERROR;
 800846a:	2301      	movs	r3, #1
 800846c:	e0aa      	b.n	80085c4 <HAL_SMBUS_Init+0x168>
  assert_param(IS_SMBUS_GENERAL_CALL(hsmbus->Init.GeneralCallMode));
  assert_param(IS_SMBUS_NO_STRETCH(hsmbus->Init.NoStretchMode));
  assert_param(IS_SMBUS_PEC(hsmbus->Init.PacketErrorCheckMode));
  assert_param(IS_SMBUS_PERIPHERAL_MODE(hsmbus->Init.PeripheralMode));

  if (hsmbus->State == HAL_SMBUS_STATE_RESET)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008472:	2b00      	cmp	r3, #0
 8008474:	d106      	bne.n	8008484 <HAL_SMBUS_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hsmbus->Lock = HAL_UNLOCKED;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2200      	movs	r2, #0
 800847a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hsmbus->MspInitCallback(hsmbus);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_SMBUS_MspInit(hsmbus);
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f7fa fe20 	bl	80030c4 <HAL_SMBUS_MspInit>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
  }

  hsmbus->State = HAL_SMBUS_STATE_BUSY;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2202      	movs	r2, #2
 8008488:	649a      	str	r2, [r3, #72]	; 0x48

  /* Disable the selected SMBUS peripheral */
  __HAL_SMBUS_DISABLE(hsmbus);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	681a      	ldr	r2, [r3, #0]
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f022 0201 	bic.w	r2, r2, #1
 8008498:	601a      	str	r2, [r3, #0]

  /*---------------------------- SMBUSx TIMINGR Configuration ------------------------*/
  /* Configure SMBUSx: Frequency range */
  hsmbus->Instance->TIMINGR = hsmbus->Init.Timing & TIMING_CLEAR_MASK;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	685a      	ldr	r2, [r3, #4]
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80084a6:	611a      	str	r2, [r3, #16]

  /*---------------------------- SMBUSx TIMEOUTR Configuration ------------------------*/
  /* Configure SMBUSx: Bus Timeout  */
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TIMOUTEN;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	695a      	ldr	r2, [r3, #20]
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80084b6:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TEXTEN;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	695a      	ldr	r2, [r3, #20]
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80084c6:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR = hsmbus->Init.SMBusTimeout;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	687a      	ldr	r2, [r7, #4]
 80084ce:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80084d0:	615a      	str	r2, [r3, #20]

  /*---------------------------- SMBUSx OAR1 Configuration -----------------------*/
  /* Configure SMBUSx: Own Address1 and ack own address1 mode */
  hsmbus->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	689a      	ldr	r2, [r3, #8]
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80084e0:	609a      	str	r2, [r3, #8]

  if (hsmbus->Init.OwnAddress1 != 0UL)
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	68db      	ldr	r3, [r3, #12]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d012      	beq.n	8008510 <HAL_SMBUS_Init+0xb4>
  {
    if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_7BIT)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	691b      	ldr	r3, [r3, #16]
 80084ee:	2b01      	cmp	r3, #1
 80084f0:	d107      	bne.n	8008502 <HAL_SMBUS_Init+0xa6>
    {
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | hsmbus->Init.OwnAddress1);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	68da      	ldr	r2, [r3, #12]
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80084fe:	609a      	str	r2, [r3, #8]
 8008500:	e006      	b.n	8008510 <HAL_SMBUS_Init+0xb4>
    }
    else /* SMBUS_ADDRESSINGMODE_10BIT */
    {
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hsmbus->Init.OwnAddress1);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	68da      	ldr	r2, [r3, #12]
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800850e:	609a      	str	r2, [r3, #8]
    }
  }

  /*---------------------------- SMBUSx CR2 Configuration ------------------------*/
  /* Configure SMBUSx: Addressing Master mode */
  if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_10BIT)
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	691b      	ldr	r3, [r3, #16]
 8008514:	2b02      	cmp	r3, #2
 8008516:	d104      	bne.n	8008522 <HAL_SMBUS_Init+0xc6>
  {
    hsmbus->Instance->CR2 = (I2C_CR2_ADD10);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008520:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process) */
  /* AUTOEND and NACK bit will be manage during Transfer process */
  hsmbus->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	685b      	ldr	r3, [r3, #4]
 8008528:	687a      	ldr	r2, [r7, #4]
 800852a:	6812      	ldr	r2, [r2, #0]
 800852c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008530:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008534:	6053      	str	r3, [r2, #4]

  /*---------------------------- SMBUSx OAR2 Configuration -----------------------*/
  /* Configure SMBUSx: Dual mode and Own Address2 */
  hsmbus->Instance->OAR2 = (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2 | \
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	695a      	ldr	r2, [r3, #20]
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	699b      	ldr	r3, [r3, #24]
 800853e:	ea42 0103 	orr.w	r1, r2, r3
                            (hsmbus->Init.OwnAddress2Masks << 8U));
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	69db      	ldr	r3, [r3, #28]
 8008546:	021a      	lsls	r2, r3, #8
  hsmbus->Instance->OAR2 = (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2 | \
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	430a      	orrs	r2, r1
 800854e:	60da      	str	r2, [r3, #12]

  /*---------------------------- SMBUSx CR1 Configuration ------------------------*/
  /* Configure SMBUSx: Generalcall and NoStretch mode */
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6a1a      	ldr	r2, [r3, #32]
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008558:	431a      	orrs	r2, r3
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 800855e:	431a      	orrs	r2, r3
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008564:	ea42 0103 	orr.w	r1, r2, r3
                           hsmbus->Init.AnalogFilter);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	689a      	ldr	r2, [r3, #8]
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 8008570:	430a      	orrs	r2, r1
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 8008572:	601a      	str	r2, [r3, #0]

  /* Enable Slave Byte Control only in case of Packet Error Check is enabled
     and SMBUS Peripheral is set in Slave mode */
  if ((hsmbus->Init.PacketErrorCheckMode == SMBUS_PEC_ENABLE) && \
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008578:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800857c:	d110      	bne.n	80085a0 <HAL_SMBUS_Init+0x144>
      ((hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE) || \
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  if ((hsmbus->Init.PacketErrorCheckMode == SMBUS_PEC_ENABLE) && \
 8008582:	2b00      	cmp	r3, #0
 8008584:	d004      	beq.n	8008590 <HAL_SMBUS_Init+0x134>
       (hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE_ARP)))
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      ((hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE) || \
 800858a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800858e:	d107      	bne.n	80085a0 <HAL_SMBUS_Init+0x144>
  {
    hsmbus->Instance->CR1 |= I2C_CR1_SBC;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	681a      	ldr	r2, [r3, #0]
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800859e:	601a      	str	r2, [r3, #0]
  }

  /* Enable the selected SMBUS peripheral */
  __HAL_SMBUS_ENABLE(hsmbus);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	681a      	ldr	r2, [r3, #0]
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f042 0201 	orr.w	r2, r2, #1
 80085ae:	601a      	str	r2, [r3, #0]

  hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2200      	movs	r2, #0
 80085b4:	64da      	str	r2, [r3, #76]	; 0x4c
  hsmbus->PreviousState = HAL_SMBUS_STATE_READY;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2201      	movs	r2, #1
 80085ba:	641a      	str	r2, [r3, #64]	; 0x40
  hsmbus->State = HAL_SMBUS_STATE_READY;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2201      	movs	r2, #1
 80085c0:	649a      	str	r2, [r3, #72]	; 0x48

  return HAL_OK;
 80085c2:	2300      	movs	r3, #0
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	3708      	adds	r7, #8
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}

080085cc <HAL_SMBUS_EnableAlert_IT>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUSx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_EnableAlert_IT(SMBUS_HandleTypeDef *hsmbus)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b082      	sub	sp, #8
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
  /* Enable SMBus alert */
  hsmbus->Instance->CR1 |= I2C_CR1_ALERTEN;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	681a      	ldr	r2, [r3, #0]
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80085e2:	601a      	str	r2, [r3, #0]

  /* Clear ALERT flag */
  __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_ALERT);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80085ec:	61da      	str	r2, [r3, #28]

  /* Enable Alert Interrupt */
  SMBUS_Enable_IRQ(hsmbus, SMBUS_IT_ALERT);
 80085ee:	2180      	movs	r1, #128	; 0x80
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f000 f805 	bl	8008600 <SMBUS_Enable_IRQ>

  return HAL_OK;
 80085f6:	2300      	movs	r3, #0
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	3708      	adds	r7, #8
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}

08008600 <SMBUS_Enable_IRQ>:
  *                the configuration information for the specified SMBUS.
  * @param  InterruptRequest Value of @ref SMBUS_Interrupt_configuration_definition.
  * @retval HAL status
  */
static void SMBUS_Enable_IRQ(SMBUS_HandleTypeDef *hsmbus, uint32_t InterruptRequest)
{
 8008600:	b480      	push	{r7}
 8008602:	b085      	sub	sp, #20
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
 8008608:	6039      	str	r1, [r7, #0]
  uint32_t tmpisr = 0UL;
 800860a:	2300      	movs	r3, #0
 800860c:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & SMBUS_IT_ALERT) == SMBUS_IT_ALERT)
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008614:	2b00      	cmp	r3, #0
 8008616:	d003      	beq.n	8008620 <SMBUS_Enable_IRQ+0x20>
  {
    /* Enable ERR interrupt */
    tmpisr |= SMBUS_IT_ERRI;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800861e:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_ADDR) == SMBUS_IT_ADDR)
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008626:	2b38      	cmp	r3, #56	; 0x38
 8008628:	d103      	bne.n	8008632 <SMBUS_Enable_IRQ+0x32>
  {
    /* Enable ADDR, STOP interrupt */
    tmpisr |= SMBUS_IT_ADDRI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_ERRI;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8008630:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_TX) == SMBUS_IT_TX)
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8008638:	2bf2      	cmp	r3, #242	; 0xf2
 800863a:	d103      	bne.n	8008644 <SMBUS_Enable_IRQ+0x44>
  {
    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    tmpisr |= SMBUS_IT_ERRI | SMBUS_IT_TCI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_TXI;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8008642:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_RX) == SMBUS_IT_RX)
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	f003 03d4 	and.w	r3, r3, #212	; 0xd4
 800864a:	2bd4      	cmp	r3, #212	; 0xd4
 800864c:	d103      	bne.n	8008656 <SMBUS_Enable_IRQ+0x56>
  {
    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    tmpisr |= SMBUS_IT_ERRI | SMBUS_IT_TCI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_RXI;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8008654:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of SMBUS interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_SMBUS_ENABLE_IT(hsmbus, tmpisr);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	6819      	ldr	r1, [r3, #0]
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	68fa      	ldr	r2, [r7, #12]
 8008662:	430a      	orrs	r2, r1
 8008664:	601a      	str	r2, [r3, #0]
}
 8008666:	bf00      	nop
 8008668:	3714      	adds	r7, #20
 800866a:	46bd      	mov	sp, r7
 800866c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008670:	4770      	bx	lr

08008672 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008672:	b580      	push	{r7, lr}
 8008674:	b084      	sub	sp, #16
 8008676:	af00      	add	r7, sp, #0
 8008678:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d101      	bne.n	8008684 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008680:	2301      	movs	r3, #1
 8008682:	e095      	b.n	80087b0 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008688:	2b00      	cmp	r3, #0
 800868a:	d108      	bne.n	800869e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	685b      	ldr	r3, [r3, #4]
 8008690:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008694:	d009      	beq.n	80086aa <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2200      	movs	r2, #0
 800869a:	61da      	str	r2, [r3, #28]
 800869c:	e005      	b.n	80086aa <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2200      	movs	r2, #0
 80086a2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2200      	movs	r2, #0
 80086a8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2200      	movs	r2, #0
 80086ae:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80086b6:	b2db      	uxtb	r3, r3
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d106      	bne.n	80086ca <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2200      	movs	r2, #0
 80086c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	f7fa fe8b 	bl	80033e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2202      	movs	r2, #2
 80086ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	681a      	ldr	r2, [r3, #0]
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80086e0:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	68db      	ldr	r3, [r3, #12]
 80086e6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80086ea:	d902      	bls.n	80086f2 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80086ec:	2300      	movs	r3, #0
 80086ee:	60fb      	str	r3, [r7, #12]
 80086f0:	e002      	b.n	80086f8 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80086f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80086f6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	68db      	ldr	r3, [r3, #12]
 80086fc:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008700:	d007      	beq.n	8008712 <HAL_SPI_Init+0xa0>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	68db      	ldr	r3, [r3, #12]
 8008706:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800870a:	d002      	beq.n	8008712 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2200      	movs	r2, #0
 8008710:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	685b      	ldr	r3, [r3, #4]
 8008716:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	689b      	ldr	r3, [r3, #8]
 800871e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008722:	431a      	orrs	r2, r3
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	691b      	ldr	r3, [r3, #16]
 8008728:	f003 0302 	and.w	r3, r3, #2
 800872c:	431a      	orrs	r2, r3
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	695b      	ldr	r3, [r3, #20]
 8008732:	f003 0301 	and.w	r3, r3, #1
 8008736:	431a      	orrs	r2, r3
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	699b      	ldr	r3, [r3, #24]
 800873c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008740:	431a      	orrs	r2, r3
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	69db      	ldr	r3, [r3, #28]
 8008746:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800874a:	431a      	orrs	r2, r3
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6a1b      	ldr	r3, [r3, #32]
 8008750:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008754:	ea42 0103 	orr.w	r1, r2, r3
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800875c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	430a      	orrs	r2, r1
 8008766:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	699b      	ldr	r3, [r3, #24]
 800876c:	0c1b      	lsrs	r3, r3, #16
 800876e:	f003 0204 	and.w	r2, r3, #4
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008776:	f003 0310 	and.w	r3, r3, #16
 800877a:	431a      	orrs	r2, r3
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008780:	f003 0308 	and.w	r3, r3, #8
 8008784:	431a      	orrs	r2, r3
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	68db      	ldr	r3, [r3, #12]
 800878a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800878e:	ea42 0103 	orr.w	r1, r2, r3
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	430a      	orrs	r2, r1
 800879e:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2200      	movs	r2, #0
 80087a4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2201      	movs	r2, #1
 80087aa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80087ae:	2300      	movs	r3, #0
}
 80087b0:	4618      	mov	r0, r3
 80087b2:	3710      	adds	r7, #16
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}

080087b8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b088      	sub	sp, #32
 80087bc:	af00      	add	r7, sp, #0
 80087be:	60f8      	str	r0, [r7, #12]
 80087c0:	60b9      	str	r1, [r7, #8]
 80087c2:	603b      	str	r3, [r7, #0]
 80087c4:	4613      	mov	r3, r2
 80087c6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80087c8:	2300      	movs	r3, #0
 80087ca:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80087d2:	2b01      	cmp	r3, #1
 80087d4:	d101      	bne.n	80087da <HAL_SPI_Transmit+0x22>
 80087d6:	2302      	movs	r3, #2
 80087d8:	e158      	b.n	8008a8c <HAL_SPI_Transmit+0x2d4>
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	2201      	movs	r2, #1
 80087de:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80087e2:	f7fb fbe5 	bl	8003fb0 <HAL_GetTick>
 80087e6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80087e8:	88fb      	ldrh	r3, [r7, #6]
 80087ea:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80087f2:	b2db      	uxtb	r3, r3
 80087f4:	2b01      	cmp	r3, #1
 80087f6:	d002      	beq.n	80087fe <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80087f8:	2302      	movs	r3, #2
 80087fa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80087fc:	e13d      	b.n	8008a7a <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d002      	beq.n	800880a <HAL_SPI_Transmit+0x52>
 8008804:	88fb      	ldrh	r3, [r7, #6]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d102      	bne.n	8008810 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800880a:	2301      	movs	r3, #1
 800880c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800880e:	e134      	b.n	8008a7a <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	2203      	movs	r2, #3
 8008814:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	2200      	movs	r2, #0
 800881c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	68ba      	ldr	r2, [r7, #8]
 8008822:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	88fa      	ldrh	r2, [r7, #6]
 8008828:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	88fa      	ldrh	r2, [r7, #6]
 800882e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	2200      	movs	r2, #0
 8008834:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	2200      	movs	r2, #0
 800883a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	2200      	movs	r2, #0
 8008842:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	2200      	movs	r2, #0
 800884a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	2200      	movs	r2, #0
 8008850:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	689b      	ldr	r3, [r3, #8]
 8008856:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800885a:	d10f      	bne.n	800887c <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	681a      	ldr	r2, [r3, #0]
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800886a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	681a      	ldr	r2, [r3, #0]
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800887a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008886:	2b40      	cmp	r3, #64	; 0x40
 8008888:	d007      	beq.n	800889a <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	681a      	ldr	r2, [r3, #0]
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008898:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	68db      	ldr	r3, [r3, #12]
 800889e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80088a2:	d94b      	bls.n	800893c <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	685b      	ldr	r3, [r3, #4]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d002      	beq.n	80088b2 <HAL_SPI_Transmit+0xfa>
 80088ac:	8afb      	ldrh	r3, [r7, #22]
 80088ae:	2b01      	cmp	r3, #1
 80088b0:	d13e      	bne.n	8008930 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088b6:	881a      	ldrh	r2, [r3, #0]
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088c2:	1c9a      	adds	r2, r3, #2
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80088cc:	b29b      	uxth	r3, r3
 80088ce:	3b01      	subs	r3, #1
 80088d0:	b29a      	uxth	r2, r3
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80088d6:	e02b      	b.n	8008930 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	689b      	ldr	r3, [r3, #8]
 80088de:	f003 0302 	and.w	r3, r3, #2
 80088e2:	2b02      	cmp	r3, #2
 80088e4:	d112      	bne.n	800890c <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088ea:	881a      	ldrh	r2, [r3, #0]
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088f6:	1c9a      	adds	r2, r3, #2
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008900:	b29b      	uxth	r3, r3
 8008902:	3b01      	subs	r3, #1
 8008904:	b29a      	uxth	r2, r3
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	87da      	strh	r2, [r3, #62]	; 0x3e
 800890a:	e011      	b.n	8008930 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800890c:	f7fb fb50 	bl	8003fb0 <HAL_GetTick>
 8008910:	4602      	mov	r2, r0
 8008912:	69bb      	ldr	r3, [r7, #24]
 8008914:	1ad3      	subs	r3, r2, r3
 8008916:	683a      	ldr	r2, [r7, #0]
 8008918:	429a      	cmp	r2, r3
 800891a:	d803      	bhi.n	8008924 <HAL_SPI_Transmit+0x16c>
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008922:	d102      	bne.n	800892a <HAL_SPI_Transmit+0x172>
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d102      	bne.n	8008930 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800892a:	2303      	movs	r3, #3
 800892c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800892e:	e0a4      	b.n	8008a7a <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008934:	b29b      	uxth	r3, r3
 8008936:	2b00      	cmp	r3, #0
 8008938:	d1ce      	bne.n	80088d8 <HAL_SPI_Transmit+0x120>
 800893a:	e07c      	b.n	8008a36 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	685b      	ldr	r3, [r3, #4]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d002      	beq.n	800894a <HAL_SPI_Transmit+0x192>
 8008944:	8afb      	ldrh	r3, [r7, #22]
 8008946:	2b01      	cmp	r3, #1
 8008948:	d170      	bne.n	8008a2c <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800894e:	b29b      	uxth	r3, r3
 8008950:	2b01      	cmp	r3, #1
 8008952:	d912      	bls.n	800897a <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008958:	881a      	ldrh	r2, [r3, #0]
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008964:	1c9a      	adds	r2, r3, #2
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800896e:	b29b      	uxth	r3, r3
 8008970:	3b02      	subs	r3, #2
 8008972:	b29a      	uxth	r2, r3
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008978:	e058      	b.n	8008a2c <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	330c      	adds	r3, #12
 8008984:	7812      	ldrb	r2, [r2, #0]
 8008986:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800898c:	1c5a      	adds	r2, r3, #1
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008996:	b29b      	uxth	r3, r3
 8008998:	3b01      	subs	r3, #1
 800899a:	b29a      	uxth	r2, r3
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80089a0:	e044      	b.n	8008a2c <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	689b      	ldr	r3, [r3, #8]
 80089a8:	f003 0302 	and.w	r3, r3, #2
 80089ac:	2b02      	cmp	r3, #2
 80089ae:	d12b      	bne.n	8008a08 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80089b4:	b29b      	uxth	r3, r3
 80089b6:	2b01      	cmp	r3, #1
 80089b8:	d912      	bls.n	80089e0 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089be:	881a      	ldrh	r2, [r3, #0]
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089ca:	1c9a      	adds	r2, r3, #2
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80089d4:	b29b      	uxth	r3, r3
 80089d6:	3b02      	subs	r3, #2
 80089d8:	b29a      	uxth	r2, r3
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80089de:	e025      	b.n	8008a2c <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	330c      	adds	r3, #12
 80089ea:	7812      	ldrb	r2, [r2, #0]
 80089ec:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089f2:	1c5a      	adds	r2, r3, #1
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80089fc:	b29b      	uxth	r3, r3
 80089fe:	3b01      	subs	r3, #1
 8008a00:	b29a      	uxth	r2, r3
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008a06:	e011      	b.n	8008a2c <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008a08:	f7fb fad2 	bl	8003fb0 <HAL_GetTick>
 8008a0c:	4602      	mov	r2, r0
 8008a0e:	69bb      	ldr	r3, [r7, #24]
 8008a10:	1ad3      	subs	r3, r2, r3
 8008a12:	683a      	ldr	r2, [r7, #0]
 8008a14:	429a      	cmp	r2, r3
 8008a16:	d803      	bhi.n	8008a20 <HAL_SPI_Transmit+0x268>
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a1e:	d102      	bne.n	8008a26 <HAL_SPI_Transmit+0x26e>
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d102      	bne.n	8008a2c <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8008a26:	2303      	movs	r3, #3
 8008a28:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008a2a:	e026      	b.n	8008a7a <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a30:	b29b      	uxth	r3, r3
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d1b5      	bne.n	80089a2 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008a36:	69ba      	ldr	r2, [r7, #24]
 8008a38:	6839      	ldr	r1, [r7, #0]
 8008a3a:	68f8      	ldr	r0, [r7, #12]
 8008a3c:	f000 fce4 	bl	8009408 <SPI_EndRxTxTransaction>
 8008a40:	4603      	mov	r3, r0
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d002      	beq.n	8008a4c <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	2220      	movs	r2, #32
 8008a4a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	689b      	ldr	r3, [r3, #8]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d10a      	bne.n	8008a6a <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008a54:	2300      	movs	r3, #0
 8008a56:	613b      	str	r3, [r7, #16]
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	68db      	ldr	r3, [r3, #12]
 8008a5e:	613b      	str	r3, [r7, #16]
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	689b      	ldr	r3, [r3, #8]
 8008a66:	613b      	str	r3, [r7, #16]
 8008a68:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d002      	beq.n	8008a78 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8008a72:	2301      	movs	r3, #1
 8008a74:	77fb      	strb	r3, [r7, #31]
 8008a76:	e000      	b.n	8008a7a <HAL_SPI_Transmit+0x2c2>
  }

error:
 8008a78:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	2201      	movs	r2, #1
 8008a7e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	2200      	movs	r2, #0
 8008a86:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008a8a:	7ffb      	ldrb	r3, [r7, #31]
}
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	3720      	adds	r7, #32
 8008a90:	46bd      	mov	sp, r7
 8008a92:	bd80      	pop	{r7, pc}

08008a94 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b088      	sub	sp, #32
 8008a98:	af02      	add	r7, sp, #8
 8008a9a:	60f8      	str	r0, [r7, #12]
 8008a9c:	60b9      	str	r1, [r7, #8]
 8008a9e:	603b      	str	r3, [r7, #0]
 8008aa0:	4613      	mov	r3, r2
 8008aa2:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	685b      	ldr	r3, [r3, #4]
 8008aac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008ab0:	d112      	bne.n	8008ad8 <HAL_SPI_Receive+0x44>
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	689b      	ldr	r3, [r3, #8]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d10e      	bne.n	8008ad8 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	2204      	movs	r2, #4
 8008abe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008ac2:	88fa      	ldrh	r2, [r7, #6]
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	9300      	str	r3, [sp, #0]
 8008ac8:	4613      	mov	r3, r2
 8008aca:	68ba      	ldr	r2, [r7, #8]
 8008acc:	68b9      	ldr	r1, [r7, #8]
 8008ace:	68f8      	ldr	r0, [r7, #12]
 8008ad0:	f000 f910 	bl	8008cf4 <HAL_SPI_TransmitReceive>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	e109      	b.n	8008cec <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008ade:	2b01      	cmp	r3, #1
 8008ae0:	d101      	bne.n	8008ae6 <HAL_SPI_Receive+0x52>
 8008ae2:	2302      	movs	r3, #2
 8008ae4:	e102      	b.n	8008cec <HAL_SPI_Receive+0x258>
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	2201      	movs	r2, #1
 8008aea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008aee:	f7fb fa5f 	bl	8003fb0 <HAL_GetTick>
 8008af2:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008afa:	b2db      	uxtb	r3, r3
 8008afc:	2b01      	cmp	r3, #1
 8008afe:	d002      	beq.n	8008b06 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8008b00:	2302      	movs	r3, #2
 8008b02:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008b04:	e0e9      	b.n	8008cda <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d002      	beq.n	8008b12 <HAL_SPI_Receive+0x7e>
 8008b0c:	88fb      	ldrh	r3, [r7, #6]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d102      	bne.n	8008b18 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8008b12:	2301      	movs	r3, #1
 8008b14:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008b16:	e0e0      	b.n	8008cda <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	2204      	movs	r2, #4
 8008b1c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	2200      	movs	r2, #0
 8008b24:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	68ba      	ldr	r2, [r7, #8]
 8008b2a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	88fa      	ldrh	r2, [r7, #6]
 8008b30:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	88fa      	ldrh	r2, [r7, #6]
 8008b38:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	2200      	movs	r2, #0
 8008b40:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	2200      	movs	r2, #0
 8008b46:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	2200      	movs	r2, #0
 8008b52:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	2200      	movs	r2, #0
 8008b58:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	68db      	ldr	r3, [r3, #12]
 8008b5e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008b62:	d908      	bls.n	8008b76 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	685a      	ldr	r2, [r3, #4]
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008b72:	605a      	str	r2, [r3, #4]
 8008b74:	e007      	b.n	8008b86 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	685a      	ldr	r2, [r3, #4]
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008b84:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	689b      	ldr	r3, [r3, #8]
 8008b8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b8e:	d10f      	bne.n	8008bb0 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	681a      	ldr	r2, [r3, #0]
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b9e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	681a      	ldr	r2, [r3, #0]
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008bae:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bba:	2b40      	cmp	r3, #64	; 0x40
 8008bbc:	d007      	beq.n	8008bce <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	681a      	ldr	r2, [r3, #0]
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008bcc:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	68db      	ldr	r3, [r3, #12]
 8008bd2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008bd6:	d867      	bhi.n	8008ca8 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008bd8:	e030      	b.n	8008c3c <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	689b      	ldr	r3, [r3, #8]
 8008be0:	f003 0301 	and.w	r3, r3, #1
 8008be4:	2b01      	cmp	r3, #1
 8008be6:	d117      	bne.n	8008c18 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f103 020c 	add.w	r2, r3, #12
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bf4:	7812      	ldrb	r2, [r2, #0]
 8008bf6:	b2d2      	uxtb	r2, r2
 8008bf8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bfe:	1c5a      	adds	r2, r3, #1
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008c0a:	b29b      	uxth	r3, r3
 8008c0c:	3b01      	subs	r3, #1
 8008c0e:	b29a      	uxth	r2, r3
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8008c16:	e011      	b.n	8008c3c <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008c18:	f7fb f9ca 	bl	8003fb0 <HAL_GetTick>
 8008c1c:	4602      	mov	r2, r0
 8008c1e:	693b      	ldr	r3, [r7, #16]
 8008c20:	1ad3      	subs	r3, r2, r3
 8008c22:	683a      	ldr	r2, [r7, #0]
 8008c24:	429a      	cmp	r2, r3
 8008c26:	d803      	bhi.n	8008c30 <HAL_SPI_Receive+0x19c>
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c2e:	d102      	bne.n	8008c36 <HAL_SPI_Receive+0x1a2>
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d102      	bne.n	8008c3c <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8008c36:	2303      	movs	r3, #3
 8008c38:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008c3a:	e04e      	b.n	8008cda <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008c42:	b29b      	uxth	r3, r3
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d1c8      	bne.n	8008bda <HAL_SPI_Receive+0x146>
 8008c48:	e034      	b.n	8008cb4 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	689b      	ldr	r3, [r3, #8]
 8008c50:	f003 0301 	and.w	r3, r3, #1
 8008c54:	2b01      	cmp	r3, #1
 8008c56:	d115      	bne.n	8008c84 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	68da      	ldr	r2, [r3, #12]
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c62:	b292      	uxth	r2, r2
 8008c64:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c6a:	1c9a      	adds	r2, r3, #2
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008c76:	b29b      	uxth	r3, r3
 8008c78:	3b01      	subs	r3, #1
 8008c7a:	b29a      	uxth	r2, r3
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8008c82:	e011      	b.n	8008ca8 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008c84:	f7fb f994 	bl	8003fb0 <HAL_GetTick>
 8008c88:	4602      	mov	r2, r0
 8008c8a:	693b      	ldr	r3, [r7, #16]
 8008c8c:	1ad3      	subs	r3, r2, r3
 8008c8e:	683a      	ldr	r2, [r7, #0]
 8008c90:	429a      	cmp	r2, r3
 8008c92:	d803      	bhi.n	8008c9c <HAL_SPI_Receive+0x208>
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c9a:	d102      	bne.n	8008ca2 <HAL_SPI_Receive+0x20e>
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d102      	bne.n	8008ca8 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8008ca2:	2303      	movs	r3, #3
 8008ca4:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008ca6:	e018      	b.n	8008cda <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008cae:	b29b      	uxth	r3, r3
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d1ca      	bne.n	8008c4a <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008cb4:	693a      	ldr	r2, [r7, #16]
 8008cb6:	6839      	ldr	r1, [r7, #0]
 8008cb8:	68f8      	ldr	r0, [r7, #12]
 8008cba:	f000 fb4d 	bl	8009358 <SPI_EndRxTransaction>
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d002      	beq.n	8008cca <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	2220      	movs	r2, #32
 8008cc8:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d002      	beq.n	8008cd8 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	75fb      	strb	r3, [r7, #23]
 8008cd6:	e000      	b.n	8008cda <HAL_SPI_Receive+0x246>
  }

error :
 8008cd8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	2201      	movs	r2, #1
 8008cde:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008cea:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	3718      	adds	r7, #24
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	bd80      	pop	{r7, pc}

08008cf4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b08a      	sub	sp, #40	; 0x28
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	60f8      	str	r0, [r7, #12]
 8008cfc:	60b9      	str	r1, [r7, #8]
 8008cfe:	607a      	str	r2, [r7, #4]
 8008d00:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008d02:	2301      	movs	r3, #1
 8008d04:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008d06:	2300      	movs	r3, #0
 8008d08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008d12:	2b01      	cmp	r3, #1
 8008d14:	d101      	bne.n	8008d1a <HAL_SPI_TransmitReceive+0x26>
 8008d16:	2302      	movs	r3, #2
 8008d18:	e1fb      	b.n	8009112 <HAL_SPI_TransmitReceive+0x41e>
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	2201      	movs	r2, #1
 8008d1e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008d22:	f7fb f945 	bl	8003fb0 <HAL_GetTick>
 8008d26:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008d2e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	685b      	ldr	r3, [r3, #4]
 8008d34:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8008d36:	887b      	ldrh	r3, [r7, #2]
 8008d38:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8008d3a:	887b      	ldrh	r3, [r7, #2]
 8008d3c:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008d3e:	7efb      	ldrb	r3, [r7, #27]
 8008d40:	2b01      	cmp	r3, #1
 8008d42:	d00e      	beq.n	8008d62 <HAL_SPI_TransmitReceive+0x6e>
 8008d44:	697b      	ldr	r3, [r7, #20]
 8008d46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008d4a:	d106      	bne.n	8008d5a <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	689b      	ldr	r3, [r3, #8]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d102      	bne.n	8008d5a <HAL_SPI_TransmitReceive+0x66>
 8008d54:	7efb      	ldrb	r3, [r7, #27]
 8008d56:	2b04      	cmp	r3, #4
 8008d58:	d003      	beq.n	8008d62 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8008d5a:	2302      	movs	r3, #2
 8008d5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8008d60:	e1cd      	b.n	80090fe <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008d62:	68bb      	ldr	r3, [r7, #8]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d005      	beq.n	8008d74 <HAL_SPI_TransmitReceive+0x80>
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d002      	beq.n	8008d74 <HAL_SPI_TransmitReceive+0x80>
 8008d6e:	887b      	ldrh	r3, [r7, #2]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d103      	bne.n	8008d7c <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8008d74:	2301      	movs	r3, #1
 8008d76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8008d7a:	e1c0      	b.n	80090fe <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008d82:	b2db      	uxtb	r3, r3
 8008d84:	2b04      	cmp	r3, #4
 8008d86:	d003      	beq.n	8008d90 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	2205      	movs	r2, #5
 8008d8c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	2200      	movs	r2, #0
 8008d94:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	687a      	ldr	r2, [r7, #4]
 8008d9a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	887a      	ldrh	r2, [r7, #2]
 8008da0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	887a      	ldrh	r2, [r7, #2]
 8008da8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	68ba      	ldr	r2, [r7, #8]
 8008db0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	887a      	ldrh	r2, [r7, #2]
 8008db6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	887a      	ldrh	r2, [r7, #2]
 8008dbc:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	68db      	ldr	r3, [r3, #12]
 8008dce:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008dd2:	d802      	bhi.n	8008dda <HAL_SPI_TransmitReceive+0xe6>
 8008dd4:	8a3b      	ldrh	r3, [r7, #16]
 8008dd6:	2b01      	cmp	r3, #1
 8008dd8:	d908      	bls.n	8008dec <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	685a      	ldr	r2, [r3, #4]
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008de8:	605a      	str	r2, [r3, #4]
 8008dea:	e007      	b.n	8008dfc <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	685a      	ldr	r2, [r3, #4]
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008dfa:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e06:	2b40      	cmp	r3, #64	; 0x40
 8008e08:	d007      	beq.n	8008e1a <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	681a      	ldr	r2, [r3, #0]
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008e18:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	68db      	ldr	r3, [r3, #12]
 8008e1e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008e22:	d97c      	bls.n	8008f1e <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	685b      	ldr	r3, [r3, #4]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d002      	beq.n	8008e32 <HAL_SPI_TransmitReceive+0x13e>
 8008e2c:	8a7b      	ldrh	r3, [r7, #18]
 8008e2e:	2b01      	cmp	r3, #1
 8008e30:	d169      	bne.n	8008f06 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e36:	881a      	ldrh	r2, [r3, #0]
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e42:	1c9a      	adds	r2, r3, #2
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e4c:	b29b      	uxth	r3, r3
 8008e4e:	3b01      	subs	r3, #1
 8008e50:	b29a      	uxth	r2, r3
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008e56:	e056      	b.n	8008f06 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	689b      	ldr	r3, [r3, #8]
 8008e5e:	f003 0302 	and.w	r3, r3, #2
 8008e62:	2b02      	cmp	r3, #2
 8008e64:	d11b      	bne.n	8008e9e <HAL_SPI_TransmitReceive+0x1aa>
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e6a:	b29b      	uxth	r3, r3
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d016      	beq.n	8008e9e <HAL_SPI_TransmitReceive+0x1aa>
 8008e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e72:	2b01      	cmp	r3, #1
 8008e74:	d113      	bne.n	8008e9e <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e7a:	881a      	ldrh	r2, [r3, #0]
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e86:	1c9a      	adds	r2, r3, #2
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e90:	b29b      	uxth	r3, r3
 8008e92:	3b01      	subs	r3, #1
 8008e94:	b29a      	uxth	r2, r3
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	689b      	ldr	r3, [r3, #8]
 8008ea4:	f003 0301 	and.w	r3, r3, #1
 8008ea8:	2b01      	cmp	r3, #1
 8008eaa:	d11c      	bne.n	8008ee6 <HAL_SPI_TransmitReceive+0x1f2>
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008eb2:	b29b      	uxth	r3, r3
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d016      	beq.n	8008ee6 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	68da      	ldr	r2, [r3, #12]
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ec2:	b292      	uxth	r2, r2
 8008ec4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eca:	1c9a      	adds	r2, r3, #2
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008ed6:	b29b      	uxth	r3, r3
 8008ed8:	3b01      	subs	r3, #1
 8008eda:	b29a      	uxth	r2, r3
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008ee6:	f7fb f863 	bl	8003fb0 <HAL_GetTick>
 8008eea:	4602      	mov	r2, r0
 8008eec:	69fb      	ldr	r3, [r7, #28]
 8008eee:	1ad3      	subs	r3, r2, r3
 8008ef0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ef2:	429a      	cmp	r2, r3
 8008ef4:	d807      	bhi.n	8008f06 <HAL_SPI_TransmitReceive+0x212>
 8008ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ef8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008efc:	d003      	beq.n	8008f06 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8008efe:	2303      	movs	r3, #3
 8008f00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8008f04:	e0fb      	b.n	80090fe <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f0a:	b29b      	uxth	r3, r3
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d1a3      	bne.n	8008e58 <HAL_SPI_TransmitReceive+0x164>
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008f16:	b29b      	uxth	r3, r3
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d19d      	bne.n	8008e58 <HAL_SPI_TransmitReceive+0x164>
 8008f1c:	e0df      	b.n	80090de <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	685b      	ldr	r3, [r3, #4]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d003      	beq.n	8008f2e <HAL_SPI_TransmitReceive+0x23a>
 8008f26:	8a7b      	ldrh	r3, [r7, #18]
 8008f28:	2b01      	cmp	r3, #1
 8008f2a:	f040 80cb 	bne.w	80090c4 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f32:	b29b      	uxth	r3, r3
 8008f34:	2b01      	cmp	r3, #1
 8008f36:	d912      	bls.n	8008f5e <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f3c:	881a      	ldrh	r2, [r3, #0]
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f48:	1c9a      	adds	r2, r3, #2
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f52:	b29b      	uxth	r3, r3
 8008f54:	3b02      	subs	r3, #2
 8008f56:	b29a      	uxth	r2, r3
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008f5c:	e0b2      	b.n	80090c4 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	330c      	adds	r3, #12
 8008f68:	7812      	ldrb	r2, [r2, #0]
 8008f6a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f70:	1c5a      	adds	r2, r3, #1
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f7a:	b29b      	uxth	r3, r3
 8008f7c:	3b01      	subs	r3, #1
 8008f7e:	b29a      	uxth	r2, r3
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008f84:	e09e      	b.n	80090c4 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	689b      	ldr	r3, [r3, #8]
 8008f8c:	f003 0302 	and.w	r3, r3, #2
 8008f90:	2b02      	cmp	r3, #2
 8008f92:	d134      	bne.n	8008ffe <HAL_SPI_TransmitReceive+0x30a>
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f98:	b29b      	uxth	r3, r3
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d02f      	beq.n	8008ffe <HAL_SPI_TransmitReceive+0x30a>
 8008f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fa0:	2b01      	cmp	r3, #1
 8008fa2:	d12c      	bne.n	8008ffe <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008fa8:	b29b      	uxth	r3, r3
 8008faa:	2b01      	cmp	r3, #1
 8008fac:	d912      	bls.n	8008fd4 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fb2:	881a      	ldrh	r2, [r3, #0]
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fbe:	1c9a      	adds	r2, r3, #2
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008fc8:	b29b      	uxth	r3, r3
 8008fca:	3b02      	subs	r3, #2
 8008fcc:	b29a      	uxth	r2, r3
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008fd2:	e012      	b.n	8008ffa <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	330c      	adds	r3, #12
 8008fde:	7812      	ldrb	r2, [r2, #0]
 8008fe0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fe6:	1c5a      	adds	r2, r3, #1
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ff0:	b29b      	uxth	r3, r3
 8008ff2:	3b01      	subs	r3, #1
 8008ff4:	b29a      	uxth	r2, r3
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	689b      	ldr	r3, [r3, #8]
 8009004:	f003 0301 	and.w	r3, r3, #1
 8009008:	2b01      	cmp	r3, #1
 800900a:	d148      	bne.n	800909e <HAL_SPI_TransmitReceive+0x3aa>
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009012:	b29b      	uxth	r3, r3
 8009014:	2b00      	cmp	r3, #0
 8009016:	d042      	beq.n	800909e <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800901e:	b29b      	uxth	r3, r3
 8009020:	2b01      	cmp	r3, #1
 8009022:	d923      	bls.n	800906c <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	68da      	ldr	r2, [r3, #12]
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800902e:	b292      	uxth	r2, r2
 8009030:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009036:	1c9a      	adds	r2, r3, #2
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009042:	b29b      	uxth	r3, r3
 8009044:	3b02      	subs	r3, #2
 8009046:	b29a      	uxth	r2, r3
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009054:	b29b      	uxth	r3, r3
 8009056:	2b01      	cmp	r3, #1
 8009058:	d81f      	bhi.n	800909a <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	685a      	ldr	r2, [r3, #4]
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009068:	605a      	str	r2, [r3, #4]
 800906a:	e016      	b.n	800909a <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f103 020c 	add.w	r2, r3, #12
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009078:	7812      	ldrb	r2, [r2, #0]
 800907a:	b2d2      	uxtb	r2, r2
 800907c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009082:	1c5a      	adds	r2, r3, #1
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800908e:	b29b      	uxth	r3, r3
 8009090:	3b01      	subs	r3, #1
 8009092:	b29a      	uxth	r2, r3
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800909a:	2301      	movs	r3, #1
 800909c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800909e:	f7fa ff87 	bl	8003fb0 <HAL_GetTick>
 80090a2:	4602      	mov	r2, r0
 80090a4:	69fb      	ldr	r3, [r7, #28]
 80090a6:	1ad3      	subs	r3, r2, r3
 80090a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090aa:	429a      	cmp	r2, r3
 80090ac:	d803      	bhi.n	80090b6 <HAL_SPI_TransmitReceive+0x3c2>
 80090ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80090b4:	d102      	bne.n	80090bc <HAL_SPI_TransmitReceive+0x3c8>
 80090b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d103      	bne.n	80090c4 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80090bc:	2303      	movs	r3, #3
 80090be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80090c2:	e01c      	b.n	80090fe <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80090c8:	b29b      	uxth	r3, r3
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	f47f af5b 	bne.w	8008f86 <HAL_SPI_TransmitReceive+0x292>
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80090d6:	b29b      	uxth	r3, r3
 80090d8:	2b00      	cmp	r3, #0
 80090da:	f47f af54 	bne.w	8008f86 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80090de:	69fa      	ldr	r2, [r7, #28]
 80090e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80090e2:	68f8      	ldr	r0, [r7, #12]
 80090e4:	f000 f990 	bl	8009408 <SPI_EndRxTxTransaction>
 80090e8:	4603      	mov	r3, r0
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d006      	beq.n	80090fc <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80090ee:	2301      	movs	r3, #1
 80090f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	2220      	movs	r2, #32
 80090f8:	661a      	str	r2, [r3, #96]	; 0x60
 80090fa:	e000      	b.n	80090fe <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80090fc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	2201      	movs	r2, #1
 8009102:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	2200      	movs	r2, #0
 800910a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800910e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8009112:	4618      	mov	r0, r3
 8009114:	3728      	adds	r7, #40	; 0x28
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}
	...

0800911c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b088      	sub	sp, #32
 8009120:	af00      	add	r7, sp, #0
 8009122:	60f8      	str	r0, [r7, #12]
 8009124:	60b9      	str	r1, [r7, #8]
 8009126:	603b      	str	r3, [r7, #0]
 8009128:	4613      	mov	r3, r2
 800912a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800912c:	f7fa ff40 	bl	8003fb0 <HAL_GetTick>
 8009130:	4602      	mov	r2, r0
 8009132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009134:	1a9b      	subs	r3, r3, r2
 8009136:	683a      	ldr	r2, [r7, #0]
 8009138:	4413      	add	r3, r2
 800913a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800913c:	f7fa ff38 	bl	8003fb0 <HAL_GetTick>
 8009140:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009142:	4b39      	ldr	r3, [pc, #228]	; (8009228 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	015b      	lsls	r3, r3, #5
 8009148:	0d1b      	lsrs	r3, r3, #20
 800914a:	69fa      	ldr	r2, [r7, #28]
 800914c:	fb02 f303 	mul.w	r3, r2, r3
 8009150:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009152:	e054      	b.n	80091fe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800915a:	d050      	beq.n	80091fe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800915c:	f7fa ff28 	bl	8003fb0 <HAL_GetTick>
 8009160:	4602      	mov	r2, r0
 8009162:	69bb      	ldr	r3, [r7, #24]
 8009164:	1ad3      	subs	r3, r2, r3
 8009166:	69fa      	ldr	r2, [r7, #28]
 8009168:	429a      	cmp	r2, r3
 800916a:	d902      	bls.n	8009172 <SPI_WaitFlagStateUntilTimeout+0x56>
 800916c:	69fb      	ldr	r3, [r7, #28]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d13d      	bne.n	80091ee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	685a      	ldr	r2, [r3, #4]
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009180:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	685b      	ldr	r3, [r3, #4]
 8009186:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800918a:	d111      	bne.n	80091b0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	689b      	ldr	r3, [r3, #8]
 8009190:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009194:	d004      	beq.n	80091a0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	689b      	ldr	r3, [r3, #8]
 800919a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800919e:	d107      	bne.n	80091b0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	681a      	ldr	r2, [r3, #0]
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80091ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80091b8:	d10f      	bne.n	80091da <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	681a      	ldr	r2, [r3, #0]
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80091c8:	601a      	str	r2, [r3, #0]
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	681a      	ldr	r2, [r3, #0]
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80091d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	2201      	movs	r2, #1
 80091de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	2200      	movs	r2, #0
 80091e6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80091ea:	2303      	movs	r3, #3
 80091ec:	e017      	b.n	800921e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80091ee:	697b      	ldr	r3, [r7, #20]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d101      	bne.n	80091f8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80091f4:	2300      	movs	r3, #0
 80091f6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80091f8:	697b      	ldr	r3, [r7, #20]
 80091fa:	3b01      	subs	r3, #1
 80091fc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	689a      	ldr	r2, [r3, #8]
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	4013      	ands	r3, r2
 8009208:	68ba      	ldr	r2, [r7, #8]
 800920a:	429a      	cmp	r2, r3
 800920c:	bf0c      	ite	eq
 800920e:	2301      	moveq	r3, #1
 8009210:	2300      	movne	r3, #0
 8009212:	b2db      	uxtb	r3, r3
 8009214:	461a      	mov	r2, r3
 8009216:	79fb      	ldrb	r3, [r7, #7]
 8009218:	429a      	cmp	r2, r3
 800921a:	d19b      	bne.n	8009154 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800921c:	2300      	movs	r3, #0
}
 800921e:	4618      	mov	r0, r3
 8009220:	3720      	adds	r7, #32
 8009222:	46bd      	mov	sp, r7
 8009224:	bd80      	pop	{r7, pc}
 8009226:	bf00      	nop
 8009228:	20000014 	.word	0x20000014

0800922c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b08a      	sub	sp, #40	; 0x28
 8009230:	af00      	add	r7, sp, #0
 8009232:	60f8      	str	r0, [r7, #12]
 8009234:	60b9      	str	r1, [r7, #8]
 8009236:	607a      	str	r2, [r7, #4]
 8009238:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800923a:	2300      	movs	r3, #0
 800923c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800923e:	f7fa feb7 	bl	8003fb0 <HAL_GetTick>
 8009242:	4602      	mov	r2, r0
 8009244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009246:	1a9b      	subs	r3, r3, r2
 8009248:	683a      	ldr	r2, [r7, #0]
 800924a:	4413      	add	r3, r2
 800924c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800924e:	f7fa feaf 	bl	8003fb0 <HAL_GetTick>
 8009252:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	330c      	adds	r3, #12
 800925a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800925c:	4b3d      	ldr	r3, [pc, #244]	; (8009354 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800925e:	681a      	ldr	r2, [r3, #0]
 8009260:	4613      	mov	r3, r2
 8009262:	009b      	lsls	r3, r3, #2
 8009264:	4413      	add	r3, r2
 8009266:	00da      	lsls	r2, r3, #3
 8009268:	1ad3      	subs	r3, r2, r3
 800926a:	0d1b      	lsrs	r3, r3, #20
 800926c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800926e:	fb02 f303 	mul.w	r3, r2, r3
 8009272:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009274:	e060      	b.n	8009338 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009276:	68bb      	ldr	r3, [r7, #8]
 8009278:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800927c:	d107      	bne.n	800928e <SPI_WaitFifoStateUntilTimeout+0x62>
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d104      	bne.n	800928e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009284:	69fb      	ldr	r3, [r7, #28]
 8009286:	781b      	ldrb	r3, [r3, #0]
 8009288:	b2db      	uxtb	r3, r3
 800928a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800928c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009294:	d050      	beq.n	8009338 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009296:	f7fa fe8b 	bl	8003fb0 <HAL_GetTick>
 800929a:	4602      	mov	r2, r0
 800929c:	6a3b      	ldr	r3, [r7, #32]
 800929e:	1ad3      	subs	r3, r2, r3
 80092a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092a2:	429a      	cmp	r2, r3
 80092a4:	d902      	bls.n	80092ac <SPI_WaitFifoStateUntilTimeout+0x80>
 80092a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d13d      	bne.n	8009328 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	685a      	ldr	r2, [r3, #4]
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80092ba:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	685b      	ldr	r3, [r3, #4]
 80092c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80092c4:	d111      	bne.n	80092ea <SPI_WaitFifoStateUntilTimeout+0xbe>
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	689b      	ldr	r3, [r3, #8]
 80092ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80092ce:	d004      	beq.n	80092da <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	689b      	ldr	r3, [r3, #8]
 80092d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80092d8:	d107      	bne.n	80092ea <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	681a      	ldr	r2, [r3, #0]
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80092e8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80092f2:	d10f      	bne.n	8009314 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	681a      	ldr	r2, [r3, #0]
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009302:	601a      	str	r2, [r3, #0]
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	681a      	ldr	r2, [r3, #0]
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009312:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	2201      	movs	r2, #1
 8009318:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	2200      	movs	r2, #0
 8009320:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009324:	2303      	movs	r3, #3
 8009326:	e010      	b.n	800934a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009328:	69bb      	ldr	r3, [r7, #24]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d101      	bne.n	8009332 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800932e:	2300      	movs	r3, #0
 8009330:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8009332:	69bb      	ldr	r3, [r7, #24]
 8009334:	3b01      	subs	r3, #1
 8009336:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	689a      	ldr	r2, [r3, #8]
 800933e:	68bb      	ldr	r3, [r7, #8]
 8009340:	4013      	ands	r3, r2
 8009342:	687a      	ldr	r2, [r7, #4]
 8009344:	429a      	cmp	r2, r3
 8009346:	d196      	bne.n	8009276 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8009348:	2300      	movs	r3, #0
}
 800934a:	4618      	mov	r0, r3
 800934c:	3728      	adds	r7, #40	; 0x28
 800934e:	46bd      	mov	sp, r7
 8009350:	bd80      	pop	{r7, pc}
 8009352:	bf00      	nop
 8009354:	20000014 	.word	0x20000014

08009358 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b086      	sub	sp, #24
 800935c:	af02      	add	r7, sp, #8
 800935e:	60f8      	str	r0, [r7, #12]
 8009360:	60b9      	str	r1, [r7, #8]
 8009362:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	685b      	ldr	r3, [r3, #4]
 8009368:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800936c:	d111      	bne.n	8009392 <SPI_EndRxTransaction+0x3a>
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	689b      	ldr	r3, [r3, #8]
 8009372:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009376:	d004      	beq.n	8009382 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	689b      	ldr	r3, [r3, #8]
 800937c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009380:	d107      	bne.n	8009392 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	681a      	ldr	r2, [r3, #0]
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009390:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	9300      	str	r3, [sp, #0]
 8009396:	68bb      	ldr	r3, [r7, #8]
 8009398:	2200      	movs	r2, #0
 800939a:	2180      	movs	r1, #128	; 0x80
 800939c:	68f8      	ldr	r0, [r7, #12]
 800939e:	f7ff febd 	bl	800911c <SPI_WaitFlagStateUntilTimeout>
 80093a2:	4603      	mov	r3, r0
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d007      	beq.n	80093b8 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093ac:	f043 0220 	orr.w	r2, r3, #32
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80093b4:	2303      	movs	r3, #3
 80093b6:	e023      	b.n	8009400 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	685b      	ldr	r3, [r3, #4]
 80093bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80093c0:	d11d      	bne.n	80093fe <SPI_EndRxTransaction+0xa6>
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	689b      	ldr	r3, [r3, #8]
 80093c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80093ca:	d004      	beq.n	80093d6 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	689b      	ldr	r3, [r3, #8]
 80093d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80093d4:	d113      	bne.n	80093fe <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	9300      	str	r3, [sp, #0]
 80093da:	68bb      	ldr	r3, [r7, #8]
 80093dc:	2200      	movs	r2, #0
 80093de:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80093e2:	68f8      	ldr	r0, [r7, #12]
 80093e4:	f7ff ff22 	bl	800922c <SPI_WaitFifoStateUntilTimeout>
 80093e8:	4603      	mov	r3, r0
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d007      	beq.n	80093fe <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093f2:	f043 0220 	orr.w	r2, r3, #32
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80093fa:	2303      	movs	r3, #3
 80093fc:	e000      	b.n	8009400 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80093fe:	2300      	movs	r3, #0
}
 8009400:	4618      	mov	r0, r3
 8009402:	3710      	adds	r7, #16
 8009404:	46bd      	mov	sp, r7
 8009406:	bd80      	pop	{r7, pc}

08009408 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b086      	sub	sp, #24
 800940c:	af02      	add	r7, sp, #8
 800940e:	60f8      	str	r0, [r7, #12]
 8009410:	60b9      	str	r1, [r7, #8]
 8009412:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	9300      	str	r3, [sp, #0]
 8009418:	68bb      	ldr	r3, [r7, #8]
 800941a:	2200      	movs	r2, #0
 800941c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8009420:	68f8      	ldr	r0, [r7, #12]
 8009422:	f7ff ff03 	bl	800922c <SPI_WaitFifoStateUntilTimeout>
 8009426:	4603      	mov	r3, r0
 8009428:	2b00      	cmp	r3, #0
 800942a:	d007      	beq.n	800943c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009430:	f043 0220 	orr.w	r2, r3, #32
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009438:	2303      	movs	r3, #3
 800943a:	e027      	b.n	800948c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	9300      	str	r3, [sp, #0]
 8009440:	68bb      	ldr	r3, [r7, #8]
 8009442:	2200      	movs	r2, #0
 8009444:	2180      	movs	r1, #128	; 0x80
 8009446:	68f8      	ldr	r0, [r7, #12]
 8009448:	f7ff fe68 	bl	800911c <SPI_WaitFlagStateUntilTimeout>
 800944c:	4603      	mov	r3, r0
 800944e:	2b00      	cmp	r3, #0
 8009450:	d007      	beq.n	8009462 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009456:	f043 0220 	orr.w	r2, r3, #32
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800945e:	2303      	movs	r3, #3
 8009460:	e014      	b.n	800948c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	9300      	str	r3, [sp, #0]
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	2200      	movs	r2, #0
 800946a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800946e:	68f8      	ldr	r0, [r7, #12]
 8009470:	f7ff fedc 	bl	800922c <SPI_WaitFifoStateUntilTimeout>
 8009474:	4603      	mov	r3, r0
 8009476:	2b00      	cmp	r3, #0
 8009478:	d007      	beq.n	800948a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800947e:	f043 0220 	orr.w	r2, r3, #32
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009486:	2303      	movs	r3, #3
 8009488:	e000      	b.n	800948c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800948a:	2300      	movs	r3, #0
}
 800948c:	4618      	mov	r0, r3
 800948e:	3710      	adds	r7, #16
 8009490:	46bd      	mov	sp, r7
 8009492:	bd80      	pop	{r7, pc}

08009494 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b082      	sub	sp, #8
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d101      	bne.n	80094a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80094a2:	2301      	movs	r3, #1
 80094a4:	e049      	b.n	800953a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80094ac:	b2db      	uxtb	r3, r3
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d106      	bne.n	80094c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2200      	movs	r2, #0
 80094b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	f7fa f804 	bl	80034c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2202      	movs	r2, #2
 80094c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681a      	ldr	r2, [r3, #0]
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	3304      	adds	r3, #4
 80094d0:	4619      	mov	r1, r3
 80094d2:	4610      	mov	r0, r2
 80094d4:	f000 ffaa 	bl	800a42c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2201      	movs	r2, #1
 80094dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2201      	movs	r2, #1
 80094e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2201      	movs	r2, #1
 80094ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2201      	movs	r2, #1
 80094f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2201      	movs	r2, #1
 80094fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2201      	movs	r2, #1
 8009504:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2201      	movs	r2, #1
 800950c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2201      	movs	r2, #1
 8009514:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2201      	movs	r2, #1
 800951c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2201      	movs	r2, #1
 8009524:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2201      	movs	r2, #1
 800952c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2201      	movs	r2, #1
 8009534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009538:	2300      	movs	r3, #0
}
 800953a:	4618      	mov	r0, r3
 800953c:	3708      	adds	r7, #8
 800953e:	46bd      	mov	sp, r7
 8009540:	bd80      	pop	{r7, pc}
	...

08009544 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009544:	b480      	push	{r7}
 8009546:	b085      	sub	sp, #20
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009552:	b2db      	uxtb	r3, r3
 8009554:	2b01      	cmp	r3, #1
 8009556:	d001      	beq.n	800955c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009558:	2301      	movs	r3, #1
 800955a:	e04f      	b.n	80095fc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2202      	movs	r2, #2
 8009560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	68da      	ldr	r2, [r3, #12]
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f042 0201 	orr.w	r2, r2, #1
 8009572:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	4a23      	ldr	r2, [pc, #140]	; (8009608 <HAL_TIM_Base_Start_IT+0xc4>)
 800957a:	4293      	cmp	r3, r2
 800957c:	d01d      	beq.n	80095ba <HAL_TIM_Base_Start_IT+0x76>
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009586:	d018      	beq.n	80095ba <HAL_TIM_Base_Start_IT+0x76>
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	4a1f      	ldr	r2, [pc, #124]	; (800960c <HAL_TIM_Base_Start_IT+0xc8>)
 800958e:	4293      	cmp	r3, r2
 8009590:	d013      	beq.n	80095ba <HAL_TIM_Base_Start_IT+0x76>
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	4a1e      	ldr	r2, [pc, #120]	; (8009610 <HAL_TIM_Base_Start_IT+0xcc>)
 8009598:	4293      	cmp	r3, r2
 800959a:	d00e      	beq.n	80095ba <HAL_TIM_Base_Start_IT+0x76>
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	4a1c      	ldr	r2, [pc, #112]	; (8009614 <HAL_TIM_Base_Start_IT+0xd0>)
 80095a2:	4293      	cmp	r3, r2
 80095a4:	d009      	beq.n	80095ba <HAL_TIM_Base_Start_IT+0x76>
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	4a1b      	ldr	r2, [pc, #108]	; (8009618 <HAL_TIM_Base_Start_IT+0xd4>)
 80095ac:	4293      	cmp	r3, r2
 80095ae:	d004      	beq.n	80095ba <HAL_TIM_Base_Start_IT+0x76>
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	4a19      	ldr	r2, [pc, #100]	; (800961c <HAL_TIM_Base_Start_IT+0xd8>)
 80095b6:	4293      	cmp	r3, r2
 80095b8:	d115      	bne.n	80095e6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	689a      	ldr	r2, [r3, #8]
 80095c0:	4b17      	ldr	r3, [pc, #92]	; (8009620 <HAL_TIM_Base_Start_IT+0xdc>)
 80095c2:	4013      	ands	r3, r2
 80095c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	2b06      	cmp	r3, #6
 80095ca:	d015      	beq.n	80095f8 <HAL_TIM_Base_Start_IT+0xb4>
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80095d2:	d011      	beq.n	80095f8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	681a      	ldr	r2, [r3, #0]
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	f042 0201 	orr.w	r2, r2, #1
 80095e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095e4:	e008      	b.n	80095f8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	681a      	ldr	r2, [r3, #0]
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	f042 0201 	orr.w	r2, r2, #1
 80095f4:	601a      	str	r2, [r3, #0]
 80095f6:	e000      	b.n	80095fa <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095f8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80095fa:	2300      	movs	r3, #0
}
 80095fc:	4618      	mov	r0, r3
 80095fe:	3714      	adds	r7, #20
 8009600:	46bd      	mov	sp, r7
 8009602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009606:	4770      	bx	lr
 8009608:	40012c00 	.word	0x40012c00
 800960c:	40000400 	.word	0x40000400
 8009610:	40000800 	.word	0x40000800
 8009614:	40000c00 	.word	0x40000c00
 8009618:	40013400 	.word	0x40013400
 800961c:	40014000 	.word	0x40014000
 8009620:	00010007 	.word	0x00010007

08009624 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8009624:	b480      	push	{r7}
 8009626:	b083      	sub	sp, #12
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	68da      	ldr	r2, [r3, #12]
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	f022 0201 	bic.w	r2, r2, #1
 800963a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	6a1a      	ldr	r2, [r3, #32]
 8009642:	f241 1311 	movw	r3, #4369	; 0x1111
 8009646:	4013      	ands	r3, r2
 8009648:	2b00      	cmp	r3, #0
 800964a:	d10f      	bne.n	800966c <HAL_TIM_Base_Stop_IT+0x48>
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	6a1a      	ldr	r2, [r3, #32]
 8009652:	f240 4344 	movw	r3, #1092	; 0x444
 8009656:	4013      	ands	r3, r2
 8009658:	2b00      	cmp	r3, #0
 800965a:	d107      	bne.n	800966c <HAL_TIM_Base_Stop_IT+0x48>
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	681a      	ldr	r2, [r3, #0]
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	f022 0201 	bic.w	r2, r2, #1
 800966a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2201      	movs	r2, #1
 8009670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8009674:	2300      	movs	r3, #0
}
 8009676:	4618      	mov	r0, r3
 8009678:	370c      	adds	r7, #12
 800967a:	46bd      	mov	sp, r7
 800967c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009680:	4770      	bx	lr

08009682 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009682:	b580      	push	{r7, lr}
 8009684:	b082      	sub	sp, #8
 8009686:	af00      	add	r7, sp, #0
 8009688:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d101      	bne.n	8009694 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009690:	2301      	movs	r3, #1
 8009692:	e049      	b.n	8009728 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800969a:	b2db      	uxtb	r3, r3
 800969c:	2b00      	cmp	r3, #0
 800969e:	d106      	bne.n	80096ae <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2200      	movs	r2, #0
 80096a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80096a8:	6878      	ldr	r0, [r7, #4]
 80096aa:	f7fa f867 	bl	800377c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2202      	movs	r2, #2
 80096b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681a      	ldr	r2, [r3, #0]
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	3304      	adds	r3, #4
 80096be:	4619      	mov	r1, r3
 80096c0:	4610      	mov	r0, r2
 80096c2:	f000 feb3 	bl	800a42c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	2201      	movs	r2, #1
 80096ca:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	2201      	movs	r2, #1
 80096d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	2201      	movs	r2, #1
 80096da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	2201      	movs	r2, #1
 80096e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	2201      	movs	r2, #1
 80096ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	2201      	movs	r2, #1
 80096f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	2201      	movs	r2, #1
 80096fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2201      	movs	r2, #1
 8009702:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2201      	movs	r2, #1
 800970a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2201      	movs	r2, #1
 8009712:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	2201      	movs	r2, #1
 800971a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2201      	movs	r2, #1
 8009722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009726:	2300      	movs	r3, #0
}
 8009728:	4618      	mov	r0, r3
 800972a:	3708      	adds	r7, #8
 800972c:	46bd      	mov	sp, r7
 800972e:	bd80      	pop	{r7, pc}

08009730 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b084      	sub	sp, #16
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
 8009738:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d109      	bne.n	8009754 <HAL_TIM_PWM_Start+0x24>
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009746:	b2db      	uxtb	r3, r3
 8009748:	2b01      	cmp	r3, #1
 800974a:	bf14      	ite	ne
 800974c:	2301      	movne	r3, #1
 800974e:	2300      	moveq	r3, #0
 8009750:	b2db      	uxtb	r3, r3
 8009752:	e03c      	b.n	80097ce <HAL_TIM_PWM_Start+0x9e>
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	2b04      	cmp	r3, #4
 8009758:	d109      	bne.n	800976e <HAL_TIM_PWM_Start+0x3e>
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009760:	b2db      	uxtb	r3, r3
 8009762:	2b01      	cmp	r3, #1
 8009764:	bf14      	ite	ne
 8009766:	2301      	movne	r3, #1
 8009768:	2300      	moveq	r3, #0
 800976a:	b2db      	uxtb	r3, r3
 800976c:	e02f      	b.n	80097ce <HAL_TIM_PWM_Start+0x9e>
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	2b08      	cmp	r3, #8
 8009772:	d109      	bne.n	8009788 <HAL_TIM_PWM_Start+0x58>
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800977a:	b2db      	uxtb	r3, r3
 800977c:	2b01      	cmp	r3, #1
 800977e:	bf14      	ite	ne
 8009780:	2301      	movne	r3, #1
 8009782:	2300      	moveq	r3, #0
 8009784:	b2db      	uxtb	r3, r3
 8009786:	e022      	b.n	80097ce <HAL_TIM_PWM_Start+0x9e>
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	2b0c      	cmp	r3, #12
 800978c:	d109      	bne.n	80097a2 <HAL_TIM_PWM_Start+0x72>
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009794:	b2db      	uxtb	r3, r3
 8009796:	2b01      	cmp	r3, #1
 8009798:	bf14      	ite	ne
 800979a:	2301      	movne	r3, #1
 800979c:	2300      	moveq	r3, #0
 800979e:	b2db      	uxtb	r3, r3
 80097a0:	e015      	b.n	80097ce <HAL_TIM_PWM_Start+0x9e>
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	2b10      	cmp	r3, #16
 80097a6:	d109      	bne.n	80097bc <HAL_TIM_PWM_Start+0x8c>
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80097ae:	b2db      	uxtb	r3, r3
 80097b0:	2b01      	cmp	r3, #1
 80097b2:	bf14      	ite	ne
 80097b4:	2301      	movne	r3, #1
 80097b6:	2300      	moveq	r3, #0
 80097b8:	b2db      	uxtb	r3, r3
 80097ba:	e008      	b.n	80097ce <HAL_TIM_PWM_Start+0x9e>
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80097c2:	b2db      	uxtb	r3, r3
 80097c4:	2b01      	cmp	r3, #1
 80097c6:	bf14      	ite	ne
 80097c8:	2301      	movne	r3, #1
 80097ca:	2300      	moveq	r3, #0
 80097cc:	b2db      	uxtb	r3, r3
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d001      	beq.n	80097d6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80097d2:	2301      	movs	r3, #1
 80097d4:	e09c      	b.n	8009910 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d104      	bne.n	80097e6 <HAL_TIM_PWM_Start+0xb6>
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2202      	movs	r2, #2
 80097e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80097e4:	e023      	b.n	800982e <HAL_TIM_PWM_Start+0xfe>
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	2b04      	cmp	r3, #4
 80097ea:	d104      	bne.n	80097f6 <HAL_TIM_PWM_Start+0xc6>
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2202      	movs	r2, #2
 80097f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80097f4:	e01b      	b.n	800982e <HAL_TIM_PWM_Start+0xfe>
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	2b08      	cmp	r3, #8
 80097fa:	d104      	bne.n	8009806 <HAL_TIM_PWM_Start+0xd6>
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2202      	movs	r2, #2
 8009800:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009804:	e013      	b.n	800982e <HAL_TIM_PWM_Start+0xfe>
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	2b0c      	cmp	r3, #12
 800980a:	d104      	bne.n	8009816 <HAL_TIM_PWM_Start+0xe6>
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2202      	movs	r2, #2
 8009810:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009814:	e00b      	b.n	800982e <HAL_TIM_PWM_Start+0xfe>
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	2b10      	cmp	r3, #16
 800981a:	d104      	bne.n	8009826 <HAL_TIM_PWM_Start+0xf6>
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2202      	movs	r2, #2
 8009820:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009824:	e003      	b.n	800982e <HAL_TIM_PWM_Start+0xfe>
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	2202      	movs	r2, #2
 800982a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	2201      	movs	r2, #1
 8009834:	6839      	ldr	r1, [r7, #0]
 8009836:	4618      	mov	r0, r3
 8009838:	f001 fb26 	bl	800ae88 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	4a35      	ldr	r2, [pc, #212]	; (8009918 <HAL_TIM_PWM_Start+0x1e8>)
 8009842:	4293      	cmp	r3, r2
 8009844:	d013      	beq.n	800986e <HAL_TIM_PWM_Start+0x13e>
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	4a34      	ldr	r2, [pc, #208]	; (800991c <HAL_TIM_PWM_Start+0x1ec>)
 800984c:	4293      	cmp	r3, r2
 800984e:	d00e      	beq.n	800986e <HAL_TIM_PWM_Start+0x13e>
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	4a32      	ldr	r2, [pc, #200]	; (8009920 <HAL_TIM_PWM_Start+0x1f0>)
 8009856:	4293      	cmp	r3, r2
 8009858:	d009      	beq.n	800986e <HAL_TIM_PWM_Start+0x13e>
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	4a31      	ldr	r2, [pc, #196]	; (8009924 <HAL_TIM_PWM_Start+0x1f4>)
 8009860:	4293      	cmp	r3, r2
 8009862:	d004      	beq.n	800986e <HAL_TIM_PWM_Start+0x13e>
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	4a2f      	ldr	r2, [pc, #188]	; (8009928 <HAL_TIM_PWM_Start+0x1f8>)
 800986a:	4293      	cmp	r3, r2
 800986c:	d101      	bne.n	8009872 <HAL_TIM_PWM_Start+0x142>
 800986e:	2301      	movs	r3, #1
 8009870:	e000      	b.n	8009874 <HAL_TIM_PWM_Start+0x144>
 8009872:	2300      	movs	r3, #0
 8009874:	2b00      	cmp	r3, #0
 8009876:	d007      	beq.n	8009888 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009886:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	4a22      	ldr	r2, [pc, #136]	; (8009918 <HAL_TIM_PWM_Start+0x1e8>)
 800988e:	4293      	cmp	r3, r2
 8009890:	d01d      	beq.n	80098ce <HAL_TIM_PWM_Start+0x19e>
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800989a:	d018      	beq.n	80098ce <HAL_TIM_PWM_Start+0x19e>
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	4a22      	ldr	r2, [pc, #136]	; (800992c <HAL_TIM_PWM_Start+0x1fc>)
 80098a2:	4293      	cmp	r3, r2
 80098a4:	d013      	beq.n	80098ce <HAL_TIM_PWM_Start+0x19e>
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	4a21      	ldr	r2, [pc, #132]	; (8009930 <HAL_TIM_PWM_Start+0x200>)
 80098ac:	4293      	cmp	r3, r2
 80098ae:	d00e      	beq.n	80098ce <HAL_TIM_PWM_Start+0x19e>
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	4a1f      	ldr	r2, [pc, #124]	; (8009934 <HAL_TIM_PWM_Start+0x204>)
 80098b6:	4293      	cmp	r3, r2
 80098b8:	d009      	beq.n	80098ce <HAL_TIM_PWM_Start+0x19e>
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	4a17      	ldr	r2, [pc, #92]	; (800991c <HAL_TIM_PWM_Start+0x1ec>)
 80098c0:	4293      	cmp	r3, r2
 80098c2:	d004      	beq.n	80098ce <HAL_TIM_PWM_Start+0x19e>
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	4a15      	ldr	r2, [pc, #84]	; (8009920 <HAL_TIM_PWM_Start+0x1f0>)
 80098ca:	4293      	cmp	r3, r2
 80098cc:	d115      	bne.n	80098fa <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	689a      	ldr	r2, [r3, #8]
 80098d4:	4b18      	ldr	r3, [pc, #96]	; (8009938 <HAL_TIM_PWM_Start+0x208>)
 80098d6:	4013      	ands	r3, r2
 80098d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	2b06      	cmp	r3, #6
 80098de:	d015      	beq.n	800990c <HAL_TIM_PWM_Start+0x1dc>
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80098e6:	d011      	beq.n	800990c <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	681a      	ldr	r2, [r3, #0]
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	f042 0201 	orr.w	r2, r2, #1
 80098f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098f8:	e008      	b.n	800990c <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	681a      	ldr	r2, [r3, #0]
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	f042 0201 	orr.w	r2, r2, #1
 8009908:	601a      	str	r2, [r3, #0]
 800990a:	e000      	b.n	800990e <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800990c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800990e:	2300      	movs	r3, #0
}
 8009910:	4618      	mov	r0, r3
 8009912:	3710      	adds	r7, #16
 8009914:	46bd      	mov	sp, r7
 8009916:	bd80      	pop	{r7, pc}
 8009918:	40012c00 	.word	0x40012c00
 800991c:	40013400 	.word	0x40013400
 8009920:	40014000 	.word	0x40014000
 8009924:	40014400 	.word	0x40014400
 8009928:	40014800 	.word	0x40014800
 800992c:	40000400 	.word	0x40000400
 8009930:	40000800 	.word	0x40000800
 8009934:	40000c00 	.word	0x40000c00
 8009938:	00010007 	.word	0x00010007

0800993c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b082      	sub	sp, #8
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d101      	bne.n	800994e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800994a:	2301      	movs	r3, #1
 800994c:	e049      	b.n	80099e2 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009954:	b2db      	uxtb	r3, r3
 8009956:	2b00      	cmp	r3, #0
 8009958:	d106      	bne.n	8009968 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	2200      	movs	r2, #0
 800995e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8009962:	6878      	ldr	r0, [r7, #4]
 8009964:	f000 f841 	bl	80099ea <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2202      	movs	r2, #2
 800996c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681a      	ldr	r2, [r3, #0]
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	3304      	adds	r3, #4
 8009978:	4619      	mov	r1, r3
 800997a:	4610      	mov	r0, r2
 800997c:	f000 fd56 	bl	800a42c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2201      	movs	r2, #1
 8009984:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2201      	movs	r2, #1
 800998c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2201      	movs	r2, #1
 8009994:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2201      	movs	r2, #1
 800999c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2201      	movs	r2, #1
 80099a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2201      	movs	r2, #1
 80099ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2201      	movs	r2, #1
 80099b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	2201      	movs	r2, #1
 80099bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2201      	movs	r2, #1
 80099c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2201      	movs	r2, #1
 80099cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2201      	movs	r2, #1
 80099d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2201      	movs	r2, #1
 80099dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80099e0:	2300      	movs	r3, #0
}
 80099e2:	4618      	mov	r0, r3
 80099e4:	3708      	adds	r7, #8
 80099e6:	46bd      	mov	sp, r7
 80099e8:	bd80      	pop	{r7, pc}

080099ea <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80099ea:	b480      	push	{r7}
 80099ec:	b083      	sub	sp, #12
 80099ee:	af00      	add	r7, sp, #0
 80099f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80099f2:	bf00      	nop
 80099f4:	370c      	adds	r7, #12
 80099f6:	46bd      	mov	sp, r7
 80099f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fc:	4770      	bx	lr
	...

08009a00 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b084      	sub	sp, #16
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
 8009a08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8009a0e:	683b      	ldr	r3, [r7, #0]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d104      	bne.n	8009a1e <HAL_TIM_IC_Start_IT+0x1e>
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009a1a:	b2db      	uxtb	r3, r3
 8009a1c:	e023      	b.n	8009a66 <HAL_TIM_IC_Start_IT+0x66>
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	2b04      	cmp	r3, #4
 8009a22:	d104      	bne.n	8009a2e <HAL_TIM_IC_Start_IT+0x2e>
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009a2a:	b2db      	uxtb	r3, r3
 8009a2c:	e01b      	b.n	8009a66 <HAL_TIM_IC_Start_IT+0x66>
 8009a2e:	683b      	ldr	r3, [r7, #0]
 8009a30:	2b08      	cmp	r3, #8
 8009a32:	d104      	bne.n	8009a3e <HAL_TIM_IC_Start_IT+0x3e>
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009a3a:	b2db      	uxtb	r3, r3
 8009a3c:	e013      	b.n	8009a66 <HAL_TIM_IC_Start_IT+0x66>
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	2b0c      	cmp	r3, #12
 8009a42:	d104      	bne.n	8009a4e <HAL_TIM_IC_Start_IT+0x4e>
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009a4a:	b2db      	uxtb	r3, r3
 8009a4c:	e00b      	b.n	8009a66 <HAL_TIM_IC_Start_IT+0x66>
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	2b10      	cmp	r3, #16
 8009a52:	d104      	bne.n	8009a5e <HAL_TIM_IC_Start_IT+0x5e>
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009a5a:	b2db      	uxtb	r3, r3
 8009a5c:	e003      	b.n	8009a66 <HAL_TIM_IC_Start_IT+0x66>
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009a64:	b2db      	uxtb	r3, r3
 8009a66:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d104      	bne.n	8009a78 <HAL_TIM_IC_Start_IT+0x78>
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009a74:	b2db      	uxtb	r3, r3
 8009a76:	e013      	b.n	8009aa0 <HAL_TIM_IC_Start_IT+0xa0>
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	2b04      	cmp	r3, #4
 8009a7c:	d104      	bne.n	8009a88 <HAL_TIM_IC_Start_IT+0x88>
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009a84:	b2db      	uxtb	r3, r3
 8009a86:	e00b      	b.n	8009aa0 <HAL_TIM_IC_Start_IT+0xa0>
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	2b08      	cmp	r3, #8
 8009a8c:	d104      	bne.n	8009a98 <HAL_TIM_IC_Start_IT+0x98>
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009a94:	b2db      	uxtb	r3, r3
 8009a96:	e003      	b.n	8009aa0 <HAL_TIM_IC_Start_IT+0xa0>
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8009a9e:	b2db      	uxtb	r3, r3
 8009aa0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8009aa2:	7bbb      	ldrb	r3, [r7, #14]
 8009aa4:	2b01      	cmp	r3, #1
 8009aa6:	d102      	bne.n	8009aae <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8009aa8:	7b7b      	ldrb	r3, [r7, #13]
 8009aaa:	2b01      	cmp	r3, #1
 8009aac:	d001      	beq.n	8009ab2 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8009aae:	2301      	movs	r3, #1
 8009ab0:	e0dd      	b.n	8009c6e <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d104      	bne.n	8009ac2 <HAL_TIM_IC_Start_IT+0xc2>
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2202      	movs	r2, #2
 8009abc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009ac0:	e023      	b.n	8009b0a <HAL_TIM_IC_Start_IT+0x10a>
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	2b04      	cmp	r3, #4
 8009ac6:	d104      	bne.n	8009ad2 <HAL_TIM_IC_Start_IT+0xd2>
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2202      	movs	r2, #2
 8009acc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009ad0:	e01b      	b.n	8009b0a <HAL_TIM_IC_Start_IT+0x10a>
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	2b08      	cmp	r3, #8
 8009ad6:	d104      	bne.n	8009ae2 <HAL_TIM_IC_Start_IT+0xe2>
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2202      	movs	r2, #2
 8009adc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009ae0:	e013      	b.n	8009b0a <HAL_TIM_IC_Start_IT+0x10a>
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	2b0c      	cmp	r3, #12
 8009ae6:	d104      	bne.n	8009af2 <HAL_TIM_IC_Start_IT+0xf2>
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2202      	movs	r2, #2
 8009aec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009af0:	e00b      	b.n	8009b0a <HAL_TIM_IC_Start_IT+0x10a>
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	2b10      	cmp	r3, #16
 8009af6:	d104      	bne.n	8009b02 <HAL_TIM_IC_Start_IT+0x102>
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2202      	movs	r2, #2
 8009afc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009b00:	e003      	b.n	8009b0a <HAL_TIM_IC_Start_IT+0x10a>
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	2202      	movs	r2, #2
 8009b06:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d104      	bne.n	8009b1a <HAL_TIM_IC_Start_IT+0x11a>
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2202      	movs	r2, #2
 8009b14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b18:	e013      	b.n	8009b42 <HAL_TIM_IC_Start_IT+0x142>
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	2b04      	cmp	r3, #4
 8009b1e:	d104      	bne.n	8009b2a <HAL_TIM_IC_Start_IT+0x12a>
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2202      	movs	r2, #2
 8009b24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009b28:	e00b      	b.n	8009b42 <HAL_TIM_IC_Start_IT+0x142>
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	2b08      	cmp	r3, #8
 8009b2e:	d104      	bne.n	8009b3a <HAL_TIM_IC_Start_IT+0x13a>
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2202      	movs	r2, #2
 8009b34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009b38:	e003      	b.n	8009b42 <HAL_TIM_IC_Start_IT+0x142>
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	2202      	movs	r2, #2
 8009b3e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	2b0c      	cmp	r3, #12
 8009b46:	d841      	bhi.n	8009bcc <HAL_TIM_IC_Start_IT+0x1cc>
 8009b48:	a201      	add	r2, pc, #4	; (adr r2, 8009b50 <HAL_TIM_IC_Start_IT+0x150>)
 8009b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b4e:	bf00      	nop
 8009b50:	08009b85 	.word	0x08009b85
 8009b54:	08009bcd 	.word	0x08009bcd
 8009b58:	08009bcd 	.word	0x08009bcd
 8009b5c:	08009bcd 	.word	0x08009bcd
 8009b60:	08009b97 	.word	0x08009b97
 8009b64:	08009bcd 	.word	0x08009bcd
 8009b68:	08009bcd 	.word	0x08009bcd
 8009b6c:	08009bcd 	.word	0x08009bcd
 8009b70:	08009ba9 	.word	0x08009ba9
 8009b74:	08009bcd 	.word	0x08009bcd
 8009b78:	08009bcd 	.word	0x08009bcd
 8009b7c:	08009bcd 	.word	0x08009bcd
 8009b80:	08009bbb 	.word	0x08009bbb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	68da      	ldr	r2, [r3, #12]
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	f042 0202 	orr.w	r2, r2, #2
 8009b92:	60da      	str	r2, [r3, #12]
      break;
 8009b94:	e01d      	b.n	8009bd2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	68da      	ldr	r2, [r3, #12]
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	f042 0204 	orr.w	r2, r2, #4
 8009ba4:	60da      	str	r2, [r3, #12]
      break;
 8009ba6:	e014      	b.n	8009bd2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	68da      	ldr	r2, [r3, #12]
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	f042 0208 	orr.w	r2, r2, #8
 8009bb6:	60da      	str	r2, [r3, #12]
      break;
 8009bb8:	e00b      	b.n	8009bd2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	68da      	ldr	r2, [r3, #12]
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	f042 0210 	orr.w	r2, r2, #16
 8009bc8:	60da      	str	r2, [r3, #12]
      break;
 8009bca:	e002      	b.n	8009bd2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8009bcc:	2301      	movs	r3, #1
 8009bce:	73fb      	strb	r3, [r7, #15]
      break;
 8009bd0:	bf00      	nop
  }

  if (status == HAL_OK)
 8009bd2:	7bfb      	ldrb	r3, [r7, #15]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d149      	bne.n	8009c6c <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	2201      	movs	r2, #1
 8009bde:	6839      	ldr	r1, [r7, #0]
 8009be0:	4618      	mov	r0, r3
 8009be2:	f001 f951 	bl	800ae88 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	4a23      	ldr	r2, [pc, #140]	; (8009c78 <HAL_TIM_IC_Start_IT+0x278>)
 8009bec:	4293      	cmp	r3, r2
 8009bee:	d01d      	beq.n	8009c2c <HAL_TIM_IC_Start_IT+0x22c>
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009bf8:	d018      	beq.n	8009c2c <HAL_TIM_IC_Start_IT+0x22c>
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	4a1f      	ldr	r2, [pc, #124]	; (8009c7c <HAL_TIM_IC_Start_IT+0x27c>)
 8009c00:	4293      	cmp	r3, r2
 8009c02:	d013      	beq.n	8009c2c <HAL_TIM_IC_Start_IT+0x22c>
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	4a1d      	ldr	r2, [pc, #116]	; (8009c80 <HAL_TIM_IC_Start_IT+0x280>)
 8009c0a:	4293      	cmp	r3, r2
 8009c0c:	d00e      	beq.n	8009c2c <HAL_TIM_IC_Start_IT+0x22c>
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	4a1c      	ldr	r2, [pc, #112]	; (8009c84 <HAL_TIM_IC_Start_IT+0x284>)
 8009c14:	4293      	cmp	r3, r2
 8009c16:	d009      	beq.n	8009c2c <HAL_TIM_IC_Start_IT+0x22c>
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	4a1a      	ldr	r2, [pc, #104]	; (8009c88 <HAL_TIM_IC_Start_IT+0x288>)
 8009c1e:	4293      	cmp	r3, r2
 8009c20:	d004      	beq.n	8009c2c <HAL_TIM_IC_Start_IT+0x22c>
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	4a19      	ldr	r2, [pc, #100]	; (8009c8c <HAL_TIM_IC_Start_IT+0x28c>)
 8009c28:	4293      	cmp	r3, r2
 8009c2a:	d115      	bne.n	8009c58 <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	689a      	ldr	r2, [r3, #8]
 8009c32:	4b17      	ldr	r3, [pc, #92]	; (8009c90 <HAL_TIM_IC_Start_IT+0x290>)
 8009c34:	4013      	ands	r3, r2
 8009c36:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	2b06      	cmp	r3, #6
 8009c3c:	d015      	beq.n	8009c6a <HAL_TIM_IC_Start_IT+0x26a>
 8009c3e:	68bb      	ldr	r3, [r7, #8]
 8009c40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c44:	d011      	beq.n	8009c6a <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	681a      	ldr	r2, [r3, #0]
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	f042 0201 	orr.w	r2, r2, #1
 8009c54:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c56:	e008      	b.n	8009c6a <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	681a      	ldr	r2, [r3, #0]
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	f042 0201 	orr.w	r2, r2, #1
 8009c66:	601a      	str	r2, [r3, #0]
 8009c68:	e000      	b.n	8009c6c <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c6a:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8009c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c6e:	4618      	mov	r0, r3
 8009c70:	3710      	adds	r7, #16
 8009c72:	46bd      	mov	sp, r7
 8009c74:	bd80      	pop	{r7, pc}
 8009c76:	bf00      	nop
 8009c78:	40012c00 	.word	0x40012c00
 8009c7c:	40000400 	.word	0x40000400
 8009c80:	40000800 	.word	0x40000800
 8009c84:	40000c00 	.word	0x40000c00
 8009c88:	40013400 	.word	0x40013400
 8009c8c:	40014000 	.word	0x40014000
 8009c90:	00010007 	.word	0x00010007

08009c94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b082      	sub	sp, #8
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	691b      	ldr	r3, [r3, #16]
 8009ca2:	f003 0302 	and.w	r3, r3, #2
 8009ca6:	2b02      	cmp	r3, #2
 8009ca8:	d122      	bne.n	8009cf0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	68db      	ldr	r3, [r3, #12]
 8009cb0:	f003 0302 	and.w	r3, r3, #2
 8009cb4:	2b02      	cmp	r3, #2
 8009cb6:	d11b      	bne.n	8009cf0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	f06f 0202 	mvn.w	r2, #2
 8009cc0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	2201      	movs	r2, #1
 8009cc6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	699b      	ldr	r3, [r3, #24]
 8009cce:	f003 0303 	and.w	r3, r3, #3
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d003      	beq.n	8009cde <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009cd6:	6878      	ldr	r0, [r7, #4]
 8009cd8:	f000 fb89 	bl	800a3ee <HAL_TIM_IC_CaptureCallback>
 8009cdc:	e005      	b.n	8009cea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	f000 fb7b 	bl	800a3da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ce4:	6878      	ldr	r0, [r7, #4]
 8009ce6:	f000 fb8c 	bl	800a402 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	2200      	movs	r2, #0
 8009cee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	691b      	ldr	r3, [r3, #16]
 8009cf6:	f003 0304 	and.w	r3, r3, #4
 8009cfa:	2b04      	cmp	r3, #4
 8009cfc:	d122      	bne.n	8009d44 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	68db      	ldr	r3, [r3, #12]
 8009d04:	f003 0304 	and.w	r3, r3, #4
 8009d08:	2b04      	cmp	r3, #4
 8009d0a:	d11b      	bne.n	8009d44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	f06f 0204 	mvn.w	r2, #4
 8009d14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	2202      	movs	r2, #2
 8009d1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	699b      	ldr	r3, [r3, #24]
 8009d22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d003      	beq.n	8009d32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d2a:	6878      	ldr	r0, [r7, #4]
 8009d2c:	f000 fb5f 	bl	800a3ee <HAL_TIM_IC_CaptureCallback>
 8009d30:	e005      	b.n	8009d3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d32:	6878      	ldr	r0, [r7, #4]
 8009d34:	f000 fb51 	bl	800a3da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d38:	6878      	ldr	r0, [r7, #4]
 8009d3a:	f000 fb62 	bl	800a402 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	2200      	movs	r2, #0
 8009d42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	691b      	ldr	r3, [r3, #16]
 8009d4a:	f003 0308 	and.w	r3, r3, #8
 8009d4e:	2b08      	cmp	r3, #8
 8009d50:	d122      	bne.n	8009d98 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	68db      	ldr	r3, [r3, #12]
 8009d58:	f003 0308 	and.w	r3, r3, #8
 8009d5c:	2b08      	cmp	r3, #8
 8009d5e:	d11b      	bne.n	8009d98 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	f06f 0208 	mvn.w	r2, #8
 8009d68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2204      	movs	r2, #4
 8009d6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	69db      	ldr	r3, [r3, #28]
 8009d76:	f003 0303 	and.w	r3, r3, #3
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d003      	beq.n	8009d86 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d7e:	6878      	ldr	r0, [r7, #4]
 8009d80:	f000 fb35 	bl	800a3ee <HAL_TIM_IC_CaptureCallback>
 8009d84:	e005      	b.n	8009d92 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d86:	6878      	ldr	r0, [r7, #4]
 8009d88:	f000 fb27 	bl	800a3da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d8c:	6878      	ldr	r0, [r7, #4]
 8009d8e:	f000 fb38 	bl	800a402 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	2200      	movs	r2, #0
 8009d96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	691b      	ldr	r3, [r3, #16]
 8009d9e:	f003 0310 	and.w	r3, r3, #16
 8009da2:	2b10      	cmp	r3, #16
 8009da4:	d122      	bne.n	8009dec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	68db      	ldr	r3, [r3, #12]
 8009dac:	f003 0310 	and.w	r3, r3, #16
 8009db0:	2b10      	cmp	r3, #16
 8009db2:	d11b      	bne.n	8009dec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	f06f 0210 	mvn.w	r2, #16
 8009dbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	2208      	movs	r2, #8
 8009dc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	69db      	ldr	r3, [r3, #28]
 8009dca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d003      	beq.n	8009dda <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009dd2:	6878      	ldr	r0, [r7, #4]
 8009dd4:	f000 fb0b 	bl	800a3ee <HAL_TIM_IC_CaptureCallback>
 8009dd8:	e005      	b.n	8009de6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f000 fafd 	bl	800a3da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009de0:	6878      	ldr	r0, [r7, #4]
 8009de2:	f000 fb0e 	bl	800a402 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2200      	movs	r2, #0
 8009dea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	691b      	ldr	r3, [r3, #16]
 8009df2:	f003 0301 	and.w	r3, r3, #1
 8009df6:	2b01      	cmp	r3, #1
 8009df8:	d10e      	bne.n	8009e18 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	68db      	ldr	r3, [r3, #12]
 8009e00:	f003 0301 	and.w	r3, r3, #1
 8009e04:	2b01      	cmp	r3, #1
 8009e06:	d107      	bne.n	8009e18 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	f06f 0201 	mvn.w	r2, #1
 8009e10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009e12:	6878      	ldr	r0, [r7, #4]
 8009e14:	f000 fad7 	bl	800a3c6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	691b      	ldr	r3, [r3, #16]
 8009e1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e22:	2b80      	cmp	r3, #128	; 0x80
 8009e24:	d10e      	bne.n	8009e44 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	68db      	ldr	r3, [r3, #12]
 8009e2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e30:	2b80      	cmp	r3, #128	; 0x80
 8009e32:	d107      	bne.n	8009e44 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009e3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009e3e:	6878      	ldr	r0, [r7, #4]
 8009e40:	f001 f958 	bl	800b0f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	691b      	ldr	r3, [r3, #16]
 8009e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e52:	d10e      	bne.n	8009e72 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	68db      	ldr	r3, [r3, #12]
 8009e5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e5e:	2b80      	cmp	r3, #128	; 0x80
 8009e60:	d107      	bne.n	8009e72 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009e6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009e6c:	6878      	ldr	r0, [r7, #4]
 8009e6e:	f001 f94b 	bl	800b108 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	691b      	ldr	r3, [r3, #16]
 8009e78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e7c:	2b40      	cmp	r3, #64	; 0x40
 8009e7e:	d10e      	bne.n	8009e9e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	68db      	ldr	r3, [r3, #12]
 8009e86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e8a:	2b40      	cmp	r3, #64	; 0x40
 8009e8c:	d107      	bne.n	8009e9e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009e96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009e98:	6878      	ldr	r0, [r7, #4]
 8009e9a:	f000 fabc 	bl	800a416 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	691b      	ldr	r3, [r3, #16]
 8009ea4:	f003 0320 	and.w	r3, r3, #32
 8009ea8:	2b20      	cmp	r3, #32
 8009eaa:	d10e      	bne.n	8009eca <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	68db      	ldr	r3, [r3, #12]
 8009eb2:	f003 0320 	and.w	r3, r3, #32
 8009eb6:	2b20      	cmp	r3, #32
 8009eb8:	d107      	bne.n	8009eca <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	f06f 0220 	mvn.w	r2, #32
 8009ec2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009ec4:	6878      	ldr	r0, [r7, #4]
 8009ec6:	f001 f90b 	bl	800b0e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009eca:	bf00      	nop
 8009ecc:	3708      	adds	r7, #8
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	bd80      	pop	{r7, pc}

08009ed2 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8009ed2:	b580      	push	{r7, lr}
 8009ed4:	b086      	sub	sp, #24
 8009ed6:	af00      	add	r7, sp, #0
 8009ed8:	60f8      	str	r0, [r7, #12]
 8009eda:	60b9      	str	r1, [r7, #8]
 8009edc:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009ede:	2300      	movs	r3, #0
 8009ee0:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ee8:	2b01      	cmp	r3, #1
 8009eea:	d101      	bne.n	8009ef0 <HAL_TIM_IC_ConfigChannel+0x1e>
 8009eec:	2302      	movs	r3, #2
 8009eee:	e088      	b.n	800a002 <HAL_TIM_IC_ConfigChannel+0x130>
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	2201      	movs	r2, #1
 8009ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d11b      	bne.n	8009f36 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	6818      	ldr	r0, [r3, #0]
 8009f02:	68bb      	ldr	r3, [r7, #8]
 8009f04:	6819      	ldr	r1, [r3, #0]
 8009f06:	68bb      	ldr	r3, [r7, #8]
 8009f08:	685a      	ldr	r2, [r3, #4]
 8009f0a:	68bb      	ldr	r3, [r7, #8]
 8009f0c:	68db      	ldr	r3, [r3, #12]
 8009f0e:	f000 fdfd 	bl	800ab0c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	699a      	ldr	r2, [r3, #24]
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	f022 020c 	bic.w	r2, r2, #12
 8009f20:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	6999      	ldr	r1, [r3, #24]
 8009f28:	68bb      	ldr	r3, [r7, #8]
 8009f2a:	689a      	ldr	r2, [r3, #8]
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	430a      	orrs	r2, r1
 8009f32:	619a      	str	r2, [r3, #24]
 8009f34:	e060      	b.n	8009ff8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	2b04      	cmp	r3, #4
 8009f3a:	d11c      	bne.n	8009f76 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	6818      	ldr	r0, [r3, #0]
 8009f40:	68bb      	ldr	r3, [r7, #8]
 8009f42:	6819      	ldr	r1, [r3, #0]
 8009f44:	68bb      	ldr	r3, [r7, #8]
 8009f46:	685a      	ldr	r2, [r3, #4]
 8009f48:	68bb      	ldr	r3, [r7, #8]
 8009f4a:	68db      	ldr	r3, [r3, #12]
 8009f4c:	f000 fe7b 	bl	800ac46 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	699a      	ldr	r2, [r3, #24]
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009f5e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	6999      	ldr	r1, [r3, #24]
 8009f66:	68bb      	ldr	r3, [r7, #8]
 8009f68:	689b      	ldr	r3, [r3, #8]
 8009f6a:	021a      	lsls	r2, r3, #8
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	430a      	orrs	r2, r1
 8009f72:	619a      	str	r2, [r3, #24]
 8009f74:	e040      	b.n	8009ff8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	2b08      	cmp	r3, #8
 8009f7a:	d11b      	bne.n	8009fb4 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	6818      	ldr	r0, [r3, #0]
 8009f80:	68bb      	ldr	r3, [r7, #8]
 8009f82:	6819      	ldr	r1, [r3, #0]
 8009f84:	68bb      	ldr	r3, [r7, #8]
 8009f86:	685a      	ldr	r2, [r3, #4]
 8009f88:	68bb      	ldr	r3, [r7, #8]
 8009f8a:	68db      	ldr	r3, [r3, #12]
 8009f8c:	f000 fec8 	bl	800ad20 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	69da      	ldr	r2, [r3, #28]
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	f022 020c 	bic.w	r2, r2, #12
 8009f9e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	69d9      	ldr	r1, [r3, #28]
 8009fa6:	68bb      	ldr	r3, [r7, #8]
 8009fa8:	689a      	ldr	r2, [r3, #8]
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	430a      	orrs	r2, r1
 8009fb0:	61da      	str	r2, [r3, #28]
 8009fb2:	e021      	b.n	8009ff8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2b0c      	cmp	r3, #12
 8009fb8:	d11c      	bne.n	8009ff4 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	6818      	ldr	r0, [r3, #0]
 8009fbe:	68bb      	ldr	r3, [r7, #8]
 8009fc0:	6819      	ldr	r1, [r3, #0]
 8009fc2:	68bb      	ldr	r3, [r7, #8]
 8009fc4:	685a      	ldr	r2, [r3, #4]
 8009fc6:	68bb      	ldr	r3, [r7, #8]
 8009fc8:	68db      	ldr	r3, [r3, #12]
 8009fca:	f000 fee5 	bl	800ad98 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	69da      	ldr	r2, [r3, #28]
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009fdc:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	69d9      	ldr	r1, [r3, #28]
 8009fe4:	68bb      	ldr	r3, [r7, #8]
 8009fe6:	689b      	ldr	r3, [r3, #8]
 8009fe8:	021a      	lsls	r2, r3, #8
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	430a      	orrs	r2, r1
 8009ff0:	61da      	str	r2, [r3, #28]
 8009ff2:	e001      	b.n	8009ff8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8009ff4:	2301      	movs	r3, #1
 8009ff6:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a000:	7dfb      	ldrb	r3, [r7, #23]
}
 800a002:	4618      	mov	r0, r3
 800a004:	3718      	adds	r7, #24
 800a006:	46bd      	mov	sp, r7
 800a008:	bd80      	pop	{r7, pc}
	...

0800a00c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b086      	sub	sp, #24
 800a010:	af00      	add	r7, sp, #0
 800a012:	60f8      	str	r0, [r7, #12]
 800a014:	60b9      	str	r1, [r7, #8]
 800a016:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a018:	2300      	movs	r3, #0
 800a01a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a022:	2b01      	cmp	r3, #1
 800a024:	d101      	bne.n	800a02a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a026:	2302      	movs	r3, #2
 800a028:	e0ff      	b.n	800a22a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	2201      	movs	r2, #1
 800a02e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2b14      	cmp	r3, #20
 800a036:	f200 80f0 	bhi.w	800a21a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a03a:	a201      	add	r2, pc, #4	; (adr r2, 800a040 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a03c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a040:	0800a095 	.word	0x0800a095
 800a044:	0800a21b 	.word	0x0800a21b
 800a048:	0800a21b 	.word	0x0800a21b
 800a04c:	0800a21b 	.word	0x0800a21b
 800a050:	0800a0d5 	.word	0x0800a0d5
 800a054:	0800a21b 	.word	0x0800a21b
 800a058:	0800a21b 	.word	0x0800a21b
 800a05c:	0800a21b 	.word	0x0800a21b
 800a060:	0800a117 	.word	0x0800a117
 800a064:	0800a21b 	.word	0x0800a21b
 800a068:	0800a21b 	.word	0x0800a21b
 800a06c:	0800a21b 	.word	0x0800a21b
 800a070:	0800a157 	.word	0x0800a157
 800a074:	0800a21b 	.word	0x0800a21b
 800a078:	0800a21b 	.word	0x0800a21b
 800a07c:	0800a21b 	.word	0x0800a21b
 800a080:	0800a199 	.word	0x0800a199
 800a084:	0800a21b 	.word	0x0800a21b
 800a088:	0800a21b 	.word	0x0800a21b
 800a08c:	0800a21b 	.word	0x0800a21b
 800a090:	0800a1d9 	.word	0x0800a1d9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	68b9      	ldr	r1, [r7, #8]
 800a09a:	4618      	mov	r0, r3
 800a09c:	f000 fa60 	bl	800a560 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	699a      	ldr	r2, [r3, #24]
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	f042 0208 	orr.w	r2, r2, #8
 800a0ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	699a      	ldr	r2, [r3, #24]
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	f022 0204 	bic.w	r2, r2, #4
 800a0be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	6999      	ldr	r1, [r3, #24]
 800a0c6:	68bb      	ldr	r3, [r7, #8]
 800a0c8:	691a      	ldr	r2, [r3, #16]
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	430a      	orrs	r2, r1
 800a0d0:	619a      	str	r2, [r3, #24]
      break;
 800a0d2:	e0a5      	b.n	800a220 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	68b9      	ldr	r1, [r7, #8]
 800a0da:	4618      	mov	r0, r3
 800a0dc:	f000 fad0 	bl	800a680 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	699a      	ldr	r2, [r3, #24]
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a0ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	699a      	ldr	r2, [r3, #24]
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a0fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	6999      	ldr	r1, [r3, #24]
 800a106:	68bb      	ldr	r3, [r7, #8]
 800a108:	691b      	ldr	r3, [r3, #16]
 800a10a:	021a      	lsls	r2, r3, #8
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	430a      	orrs	r2, r1
 800a112:	619a      	str	r2, [r3, #24]
      break;
 800a114:	e084      	b.n	800a220 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	68b9      	ldr	r1, [r7, #8]
 800a11c:	4618      	mov	r0, r3
 800a11e:	f000 fb39 	bl	800a794 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	69da      	ldr	r2, [r3, #28]
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	f042 0208 	orr.w	r2, r2, #8
 800a130:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	69da      	ldr	r2, [r3, #28]
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	f022 0204 	bic.w	r2, r2, #4
 800a140:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	69d9      	ldr	r1, [r3, #28]
 800a148:	68bb      	ldr	r3, [r7, #8]
 800a14a:	691a      	ldr	r2, [r3, #16]
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	430a      	orrs	r2, r1
 800a152:	61da      	str	r2, [r3, #28]
      break;
 800a154:	e064      	b.n	800a220 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	68b9      	ldr	r1, [r7, #8]
 800a15c:	4618      	mov	r0, r3
 800a15e:	f000 fba1 	bl	800a8a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	69da      	ldr	r2, [r3, #28]
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a170:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	69da      	ldr	r2, [r3, #28]
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a180:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	69d9      	ldr	r1, [r3, #28]
 800a188:	68bb      	ldr	r3, [r7, #8]
 800a18a:	691b      	ldr	r3, [r3, #16]
 800a18c:	021a      	lsls	r2, r3, #8
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	430a      	orrs	r2, r1
 800a194:	61da      	str	r2, [r3, #28]
      break;
 800a196:	e043      	b.n	800a220 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	68b9      	ldr	r1, [r7, #8]
 800a19e:	4618      	mov	r0, r3
 800a1a0:	f000 fbea 	bl	800a978 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	f042 0208 	orr.w	r2, r2, #8
 800a1b2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	f022 0204 	bic.w	r2, r2, #4
 800a1c2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a1ca:	68bb      	ldr	r3, [r7, #8]
 800a1cc:	691a      	ldr	r2, [r3, #16]
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	430a      	orrs	r2, r1
 800a1d4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a1d6:	e023      	b.n	800a220 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	68b9      	ldr	r1, [r7, #8]
 800a1de:	4618      	mov	r0, r3
 800a1e0:	f000 fc2e 	bl	800aa40 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a1f2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a202:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a20a:	68bb      	ldr	r3, [r7, #8]
 800a20c:	691b      	ldr	r3, [r3, #16]
 800a20e:	021a      	lsls	r2, r3, #8
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	430a      	orrs	r2, r1
 800a216:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a218:	e002      	b.n	800a220 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a21a:	2301      	movs	r3, #1
 800a21c:	75fb      	strb	r3, [r7, #23]
      break;
 800a21e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	2200      	movs	r2, #0
 800a224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a228:	7dfb      	ldrb	r3, [r7, #23]
}
 800a22a:	4618      	mov	r0, r3
 800a22c:	3718      	adds	r7, #24
 800a22e:	46bd      	mov	sp, r7
 800a230:	bd80      	pop	{r7, pc}
 800a232:	bf00      	nop

0800a234 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a234:	b580      	push	{r7, lr}
 800a236:	b084      	sub	sp, #16
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
 800a23c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a23e:	2300      	movs	r3, #0
 800a240:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a248:	2b01      	cmp	r3, #1
 800a24a:	d101      	bne.n	800a250 <HAL_TIM_ConfigClockSource+0x1c>
 800a24c:	2302      	movs	r3, #2
 800a24e:	e0b6      	b.n	800a3be <HAL_TIM_ConfigClockSource+0x18a>
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2201      	movs	r2, #1
 800a254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2202      	movs	r2, #2
 800a25c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	689b      	ldr	r3, [r3, #8]
 800a266:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a268:	68bb      	ldr	r3, [r7, #8]
 800a26a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a26e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a272:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a274:	68bb      	ldr	r3, [r7, #8]
 800a276:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a27a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	68ba      	ldr	r2, [r7, #8]
 800a282:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a28c:	d03e      	beq.n	800a30c <HAL_TIM_ConfigClockSource+0xd8>
 800a28e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a292:	f200 8087 	bhi.w	800a3a4 <HAL_TIM_ConfigClockSource+0x170>
 800a296:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a29a:	f000 8086 	beq.w	800a3aa <HAL_TIM_ConfigClockSource+0x176>
 800a29e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a2a2:	d87f      	bhi.n	800a3a4 <HAL_TIM_ConfigClockSource+0x170>
 800a2a4:	2b70      	cmp	r3, #112	; 0x70
 800a2a6:	d01a      	beq.n	800a2de <HAL_TIM_ConfigClockSource+0xaa>
 800a2a8:	2b70      	cmp	r3, #112	; 0x70
 800a2aa:	d87b      	bhi.n	800a3a4 <HAL_TIM_ConfigClockSource+0x170>
 800a2ac:	2b60      	cmp	r3, #96	; 0x60
 800a2ae:	d050      	beq.n	800a352 <HAL_TIM_ConfigClockSource+0x11e>
 800a2b0:	2b60      	cmp	r3, #96	; 0x60
 800a2b2:	d877      	bhi.n	800a3a4 <HAL_TIM_ConfigClockSource+0x170>
 800a2b4:	2b50      	cmp	r3, #80	; 0x50
 800a2b6:	d03c      	beq.n	800a332 <HAL_TIM_ConfigClockSource+0xfe>
 800a2b8:	2b50      	cmp	r3, #80	; 0x50
 800a2ba:	d873      	bhi.n	800a3a4 <HAL_TIM_ConfigClockSource+0x170>
 800a2bc:	2b40      	cmp	r3, #64	; 0x40
 800a2be:	d058      	beq.n	800a372 <HAL_TIM_ConfigClockSource+0x13e>
 800a2c0:	2b40      	cmp	r3, #64	; 0x40
 800a2c2:	d86f      	bhi.n	800a3a4 <HAL_TIM_ConfigClockSource+0x170>
 800a2c4:	2b30      	cmp	r3, #48	; 0x30
 800a2c6:	d064      	beq.n	800a392 <HAL_TIM_ConfigClockSource+0x15e>
 800a2c8:	2b30      	cmp	r3, #48	; 0x30
 800a2ca:	d86b      	bhi.n	800a3a4 <HAL_TIM_ConfigClockSource+0x170>
 800a2cc:	2b20      	cmp	r3, #32
 800a2ce:	d060      	beq.n	800a392 <HAL_TIM_ConfigClockSource+0x15e>
 800a2d0:	2b20      	cmp	r3, #32
 800a2d2:	d867      	bhi.n	800a3a4 <HAL_TIM_ConfigClockSource+0x170>
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d05c      	beq.n	800a392 <HAL_TIM_ConfigClockSource+0x15e>
 800a2d8:	2b10      	cmp	r3, #16
 800a2da:	d05a      	beq.n	800a392 <HAL_TIM_ConfigClockSource+0x15e>
 800a2dc:	e062      	b.n	800a3a4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	6818      	ldr	r0, [r3, #0]
 800a2e2:	683b      	ldr	r3, [r7, #0]
 800a2e4:	6899      	ldr	r1, [r3, #8]
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	685a      	ldr	r2, [r3, #4]
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	68db      	ldr	r3, [r3, #12]
 800a2ee:	f000 fdab 	bl	800ae48 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	689b      	ldr	r3, [r3, #8]
 800a2f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a2fa:	68bb      	ldr	r3, [r7, #8]
 800a2fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a300:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	68ba      	ldr	r2, [r7, #8]
 800a308:	609a      	str	r2, [r3, #8]
      break;
 800a30a:	e04f      	b.n	800a3ac <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	6818      	ldr	r0, [r3, #0]
 800a310:	683b      	ldr	r3, [r7, #0]
 800a312:	6899      	ldr	r1, [r3, #8]
 800a314:	683b      	ldr	r3, [r7, #0]
 800a316:	685a      	ldr	r2, [r3, #4]
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	68db      	ldr	r3, [r3, #12]
 800a31c:	f000 fd94 	bl	800ae48 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	689a      	ldr	r2, [r3, #8]
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a32e:	609a      	str	r2, [r3, #8]
      break;
 800a330:	e03c      	b.n	800a3ac <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	6818      	ldr	r0, [r3, #0]
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	6859      	ldr	r1, [r3, #4]
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	68db      	ldr	r3, [r3, #12]
 800a33e:	461a      	mov	r2, r3
 800a340:	f000 fc52 	bl	800abe8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	2150      	movs	r1, #80	; 0x50
 800a34a:	4618      	mov	r0, r3
 800a34c:	f000 fd61 	bl	800ae12 <TIM_ITRx_SetConfig>
      break;
 800a350:	e02c      	b.n	800a3ac <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	6818      	ldr	r0, [r3, #0]
 800a356:	683b      	ldr	r3, [r7, #0]
 800a358:	6859      	ldr	r1, [r3, #4]
 800a35a:	683b      	ldr	r3, [r7, #0]
 800a35c:	68db      	ldr	r3, [r3, #12]
 800a35e:	461a      	mov	r2, r3
 800a360:	f000 fcae 	bl	800acc0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	2160      	movs	r1, #96	; 0x60
 800a36a:	4618      	mov	r0, r3
 800a36c:	f000 fd51 	bl	800ae12 <TIM_ITRx_SetConfig>
      break;
 800a370:	e01c      	b.n	800a3ac <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	6818      	ldr	r0, [r3, #0]
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	6859      	ldr	r1, [r3, #4]
 800a37a:	683b      	ldr	r3, [r7, #0]
 800a37c:	68db      	ldr	r3, [r3, #12]
 800a37e:	461a      	mov	r2, r3
 800a380:	f000 fc32 	bl	800abe8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	2140      	movs	r1, #64	; 0x40
 800a38a:	4618      	mov	r0, r3
 800a38c:	f000 fd41 	bl	800ae12 <TIM_ITRx_SetConfig>
      break;
 800a390:	e00c      	b.n	800a3ac <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681a      	ldr	r2, [r3, #0]
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	4619      	mov	r1, r3
 800a39c:	4610      	mov	r0, r2
 800a39e:	f000 fd38 	bl	800ae12 <TIM_ITRx_SetConfig>
      break;
 800a3a2:	e003      	b.n	800a3ac <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800a3a4:	2301      	movs	r3, #1
 800a3a6:	73fb      	strb	r3, [r7, #15]
      break;
 800a3a8:	e000      	b.n	800a3ac <HAL_TIM_ConfigClockSource+0x178>
      break;
 800a3aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	2201      	movs	r2, #1
 800a3b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a3bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3be:	4618      	mov	r0, r3
 800a3c0:	3710      	adds	r7, #16
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	bd80      	pop	{r7, pc}

0800a3c6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a3c6:	b480      	push	{r7}
 800a3c8:	b083      	sub	sp, #12
 800a3ca:	af00      	add	r7, sp, #0
 800a3cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800a3ce:	bf00      	nop
 800a3d0:	370c      	adds	r7, #12
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d8:	4770      	bx	lr

0800a3da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a3da:	b480      	push	{r7}
 800a3dc:	b083      	sub	sp, #12
 800a3de:	af00      	add	r7, sp, #0
 800a3e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a3e2:	bf00      	nop
 800a3e4:	370c      	adds	r7, #12
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ec:	4770      	bx	lr

0800a3ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a3ee:	b480      	push	{r7}
 800a3f0:	b083      	sub	sp, #12
 800a3f2:	af00      	add	r7, sp, #0
 800a3f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a3f6:	bf00      	nop
 800a3f8:	370c      	adds	r7, #12
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a400:	4770      	bx	lr

0800a402 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a402:	b480      	push	{r7}
 800a404:	b083      	sub	sp, #12
 800a406:	af00      	add	r7, sp, #0
 800a408:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a40a:	bf00      	nop
 800a40c:	370c      	adds	r7, #12
 800a40e:	46bd      	mov	sp, r7
 800a410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a414:	4770      	bx	lr

0800a416 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a416:	b480      	push	{r7}
 800a418:	b083      	sub	sp, #12
 800a41a:	af00      	add	r7, sp, #0
 800a41c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a41e:	bf00      	nop
 800a420:	370c      	adds	r7, #12
 800a422:	46bd      	mov	sp, r7
 800a424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a428:	4770      	bx	lr
	...

0800a42c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a42c:	b480      	push	{r7}
 800a42e:	b085      	sub	sp, #20
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
 800a434:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	4a40      	ldr	r2, [pc, #256]	; (800a540 <TIM_Base_SetConfig+0x114>)
 800a440:	4293      	cmp	r3, r2
 800a442:	d013      	beq.n	800a46c <TIM_Base_SetConfig+0x40>
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a44a:	d00f      	beq.n	800a46c <TIM_Base_SetConfig+0x40>
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	4a3d      	ldr	r2, [pc, #244]	; (800a544 <TIM_Base_SetConfig+0x118>)
 800a450:	4293      	cmp	r3, r2
 800a452:	d00b      	beq.n	800a46c <TIM_Base_SetConfig+0x40>
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	4a3c      	ldr	r2, [pc, #240]	; (800a548 <TIM_Base_SetConfig+0x11c>)
 800a458:	4293      	cmp	r3, r2
 800a45a:	d007      	beq.n	800a46c <TIM_Base_SetConfig+0x40>
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	4a3b      	ldr	r2, [pc, #236]	; (800a54c <TIM_Base_SetConfig+0x120>)
 800a460:	4293      	cmp	r3, r2
 800a462:	d003      	beq.n	800a46c <TIM_Base_SetConfig+0x40>
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	4a3a      	ldr	r2, [pc, #232]	; (800a550 <TIM_Base_SetConfig+0x124>)
 800a468:	4293      	cmp	r3, r2
 800a46a:	d108      	bne.n	800a47e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a472:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a474:	683b      	ldr	r3, [r7, #0]
 800a476:	685b      	ldr	r3, [r3, #4]
 800a478:	68fa      	ldr	r2, [r7, #12]
 800a47a:	4313      	orrs	r3, r2
 800a47c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	4a2f      	ldr	r2, [pc, #188]	; (800a540 <TIM_Base_SetConfig+0x114>)
 800a482:	4293      	cmp	r3, r2
 800a484:	d01f      	beq.n	800a4c6 <TIM_Base_SetConfig+0x9a>
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a48c:	d01b      	beq.n	800a4c6 <TIM_Base_SetConfig+0x9a>
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	4a2c      	ldr	r2, [pc, #176]	; (800a544 <TIM_Base_SetConfig+0x118>)
 800a492:	4293      	cmp	r3, r2
 800a494:	d017      	beq.n	800a4c6 <TIM_Base_SetConfig+0x9a>
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	4a2b      	ldr	r2, [pc, #172]	; (800a548 <TIM_Base_SetConfig+0x11c>)
 800a49a:	4293      	cmp	r3, r2
 800a49c:	d013      	beq.n	800a4c6 <TIM_Base_SetConfig+0x9a>
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	4a2a      	ldr	r2, [pc, #168]	; (800a54c <TIM_Base_SetConfig+0x120>)
 800a4a2:	4293      	cmp	r3, r2
 800a4a4:	d00f      	beq.n	800a4c6 <TIM_Base_SetConfig+0x9a>
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	4a29      	ldr	r2, [pc, #164]	; (800a550 <TIM_Base_SetConfig+0x124>)
 800a4aa:	4293      	cmp	r3, r2
 800a4ac:	d00b      	beq.n	800a4c6 <TIM_Base_SetConfig+0x9a>
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	4a28      	ldr	r2, [pc, #160]	; (800a554 <TIM_Base_SetConfig+0x128>)
 800a4b2:	4293      	cmp	r3, r2
 800a4b4:	d007      	beq.n	800a4c6 <TIM_Base_SetConfig+0x9a>
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	4a27      	ldr	r2, [pc, #156]	; (800a558 <TIM_Base_SetConfig+0x12c>)
 800a4ba:	4293      	cmp	r3, r2
 800a4bc:	d003      	beq.n	800a4c6 <TIM_Base_SetConfig+0x9a>
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	4a26      	ldr	r2, [pc, #152]	; (800a55c <TIM_Base_SetConfig+0x130>)
 800a4c2:	4293      	cmp	r3, r2
 800a4c4:	d108      	bne.n	800a4d8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a4cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	68db      	ldr	r3, [r3, #12]
 800a4d2:	68fa      	ldr	r2, [r7, #12]
 800a4d4:	4313      	orrs	r3, r2
 800a4d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	695b      	ldr	r3, [r3, #20]
 800a4e2:	4313      	orrs	r3, r2
 800a4e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	68fa      	ldr	r2, [r7, #12]
 800a4ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	689a      	ldr	r2, [r3, #8]
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a4f4:	683b      	ldr	r3, [r7, #0]
 800a4f6:	681a      	ldr	r2, [r3, #0]
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	4a10      	ldr	r2, [pc, #64]	; (800a540 <TIM_Base_SetConfig+0x114>)
 800a500:	4293      	cmp	r3, r2
 800a502:	d00f      	beq.n	800a524 <TIM_Base_SetConfig+0xf8>
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	4a12      	ldr	r2, [pc, #72]	; (800a550 <TIM_Base_SetConfig+0x124>)
 800a508:	4293      	cmp	r3, r2
 800a50a:	d00b      	beq.n	800a524 <TIM_Base_SetConfig+0xf8>
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	4a11      	ldr	r2, [pc, #68]	; (800a554 <TIM_Base_SetConfig+0x128>)
 800a510:	4293      	cmp	r3, r2
 800a512:	d007      	beq.n	800a524 <TIM_Base_SetConfig+0xf8>
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	4a10      	ldr	r2, [pc, #64]	; (800a558 <TIM_Base_SetConfig+0x12c>)
 800a518:	4293      	cmp	r3, r2
 800a51a:	d003      	beq.n	800a524 <TIM_Base_SetConfig+0xf8>
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	4a0f      	ldr	r2, [pc, #60]	; (800a55c <TIM_Base_SetConfig+0x130>)
 800a520:	4293      	cmp	r3, r2
 800a522:	d103      	bne.n	800a52c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	691a      	ldr	r2, [r3, #16]
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2201      	movs	r2, #1
 800a530:	615a      	str	r2, [r3, #20]
}
 800a532:	bf00      	nop
 800a534:	3714      	adds	r7, #20
 800a536:	46bd      	mov	sp, r7
 800a538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53c:	4770      	bx	lr
 800a53e:	bf00      	nop
 800a540:	40012c00 	.word	0x40012c00
 800a544:	40000400 	.word	0x40000400
 800a548:	40000800 	.word	0x40000800
 800a54c:	40000c00 	.word	0x40000c00
 800a550:	40013400 	.word	0x40013400
 800a554:	40014000 	.word	0x40014000
 800a558:	40014400 	.word	0x40014400
 800a55c:	40014800 	.word	0x40014800

0800a560 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a560:	b480      	push	{r7}
 800a562:	b087      	sub	sp, #28
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
 800a568:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	6a1b      	ldr	r3, [r3, #32]
 800a56e:	f023 0201 	bic.w	r2, r3, #1
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	6a1b      	ldr	r3, [r3, #32]
 800a57a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	685b      	ldr	r3, [r3, #4]
 800a580:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	699b      	ldr	r3, [r3, #24]
 800a586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a58e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a592:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	f023 0303 	bic.w	r3, r3, #3
 800a59a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a59c:	683b      	ldr	r3, [r7, #0]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	68fa      	ldr	r2, [r7, #12]
 800a5a2:	4313      	orrs	r3, r2
 800a5a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a5a6:	697b      	ldr	r3, [r7, #20]
 800a5a8:	f023 0302 	bic.w	r3, r3, #2
 800a5ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a5ae:	683b      	ldr	r3, [r7, #0]
 800a5b0:	689b      	ldr	r3, [r3, #8]
 800a5b2:	697a      	ldr	r2, [r7, #20]
 800a5b4:	4313      	orrs	r3, r2
 800a5b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	4a2c      	ldr	r2, [pc, #176]	; (800a66c <TIM_OC1_SetConfig+0x10c>)
 800a5bc:	4293      	cmp	r3, r2
 800a5be:	d00f      	beq.n	800a5e0 <TIM_OC1_SetConfig+0x80>
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	4a2b      	ldr	r2, [pc, #172]	; (800a670 <TIM_OC1_SetConfig+0x110>)
 800a5c4:	4293      	cmp	r3, r2
 800a5c6:	d00b      	beq.n	800a5e0 <TIM_OC1_SetConfig+0x80>
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	4a2a      	ldr	r2, [pc, #168]	; (800a674 <TIM_OC1_SetConfig+0x114>)
 800a5cc:	4293      	cmp	r3, r2
 800a5ce:	d007      	beq.n	800a5e0 <TIM_OC1_SetConfig+0x80>
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	4a29      	ldr	r2, [pc, #164]	; (800a678 <TIM_OC1_SetConfig+0x118>)
 800a5d4:	4293      	cmp	r3, r2
 800a5d6:	d003      	beq.n	800a5e0 <TIM_OC1_SetConfig+0x80>
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	4a28      	ldr	r2, [pc, #160]	; (800a67c <TIM_OC1_SetConfig+0x11c>)
 800a5dc:	4293      	cmp	r3, r2
 800a5de:	d10c      	bne.n	800a5fa <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a5e0:	697b      	ldr	r3, [r7, #20]
 800a5e2:	f023 0308 	bic.w	r3, r3, #8
 800a5e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a5e8:	683b      	ldr	r3, [r7, #0]
 800a5ea:	68db      	ldr	r3, [r3, #12]
 800a5ec:	697a      	ldr	r2, [r7, #20]
 800a5ee:	4313      	orrs	r3, r2
 800a5f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a5f2:	697b      	ldr	r3, [r7, #20]
 800a5f4:	f023 0304 	bic.w	r3, r3, #4
 800a5f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	4a1b      	ldr	r2, [pc, #108]	; (800a66c <TIM_OC1_SetConfig+0x10c>)
 800a5fe:	4293      	cmp	r3, r2
 800a600:	d00f      	beq.n	800a622 <TIM_OC1_SetConfig+0xc2>
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	4a1a      	ldr	r2, [pc, #104]	; (800a670 <TIM_OC1_SetConfig+0x110>)
 800a606:	4293      	cmp	r3, r2
 800a608:	d00b      	beq.n	800a622 <TIM_OC1_SetConfig+0xc2>
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	4a19      	ldr	r2, [pc, #100]	; (800a674 <TIM_OC1_SetConfig+0x114>)
 800a60e:	4293      	cmp	r3, r2
 800a610:	d007      	beq.n	800a622 <TIM_OC1_SetConfig+0xc2>
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	4a18      	ldr	r2, [pc, #96]	; (800a678 <TIM_OC1_SetConfig+0x118>)
 800a616:	4293      	cmp	r3, r2
 800a618:	d003      	beq.n	800a622 <TIM_OC1_SetConfig+0xc2>
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	4a17      	ldr	r2, [pc, #92]	; (800a67c <TIM_OC1_SetConfig+0x11c>)
 800a61e:	4293      	cmp	r3, r2
 800a620:	d111      	bne.n	800a646 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a622:	693b      	ldr	r3, [r7, #16]
 800a624:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a628:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a62a:	693b      	ldr	r3, [r7, #16]
 800a62c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a630:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a632:	683b      	ldr	r3, [r7, #0]
 800a634:	695b      	ldr	r3, [r3, #20]
 800a636:	693a      	ldr	r2, [r7, #16]
 800a638:	4313      	orrs	r3, r2
 800a63a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	699b      	ldr	r3, [r3, #24]
 800a640:	693a      	ldr	r2, [r7, #16]
 800a642:	4313      	orrs	r3, r2
 800a644:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	693a      	ldr	r2, [r7, #16]
 800a64a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	68fa      	ldr	r2, [r7, #12]
 800a650:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a652:	683b      	ldr	r3, [r7, #0]
 800a654:	685a      	ldr	r2, [r3, #4]
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	697a      	ldr	r2, [r7, #20]
 800a65e:	621a      	str	r2, [r3, #32]
}
 800a660:	bf00      	nop
 800a662:	371c      	adds	r7, #28
 800a664:	46bd      	mov	sp, r7
 800a666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66a:	4770      	bx	lr
 800a66c:	40012c00 	.word	0x40012c00
 800a670:	40013400 	.word	0x40013400
 800a674:	40014000 	.word	0x40014000
 800a678:	40014400 	.word	0x40014400
 800a67c:	40014800 	.word	0x40014800

0800a680 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a680:	b480      	push	{r7}
 800a682:	b087      	sub	sp, #28
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
 800a688:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	6a1b      	ldr	r3, [r3, #32]
 800a68e:	f023 0210 	bic.w	r2, r3, #16
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	6a1b      	ldr	r3, [r3, #32]
 800a69a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	685b      	ldr	r3, [r3, #4]
 800a6a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	699b      	ldr	r3, [r3, #24]
 800a6a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a6ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a6b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a6ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a6bc:	683b      	ldr	r3, [r7, #0]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	021b      	lsls	r3, r3, #8
 800a6c2:	68fa      	ldr	r2, [r7, #12]
 800a6c4:	4313      	orrs	r3, r2
 800a6c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a6c8:	697b      	ldr	r3, [r7, #20]
 800a6ca:	f023 0320 	bic.w	r3, r3, #32
 800a6ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a6d0:	683b      	ldr	r3, [r7, #0]
 800a6d2:	689b      	ldr	r3, [r3, #8]
 800a6d4:	011b      	lsls	r3, r3, #4
 800a6d6:	697a      	ldr	r2, [r7, #20]
 800a6d8:	4313      	orrs	r3, r2
 800a6da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	4a28      	ldr	r2, [pc, #160]	; (800a780 <TIM_OC2_SetConfig+0x100>)
 800a6e0:	4293      	cmp	r3, r2
 800a6e2:	d003      	beq.n	800a6ec <TIM_OC2_SetConfig+0x6c>
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	4a27      	ldr	r2, [pc, #156]	; (800a784 <TIM_OC2_SetConfig+0x104>)
 800a6e8:	4293      	cmp	r3, r2
 800a6ea:	d10d      	bne.n	800a708 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a6ec:	697b      	ldr	r3, [r7, #20]
 800a6ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a6f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	68db      	ldr	r3, [r3, #12]
 800a6f8:	011b      	lsls	r3, r3, #4
 800a6fa:	697a      	ldr	r2, [r7, #20]
 800a6fc:	4313      	orrs	r3, r2
 800a6fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a700:	697b      	ldr	r3, [r7, #20]
 800a702:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a706:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	4a1d      	ldr	r2, [pc, #116]	; (800a780 <TIM_OC2_SetConfig+0x100>)
 800a70c:	4293      	cmp	r3, r2
 800a70e:	d00f      	beq.n	800a730 <TIM_OC2_SetConfig+0xb0>
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	4a1c      	ldr	r2, [pc, #112]	; (800a784 <TIM_OC2_SetConfig+0x104>)
 800a714:	4293      	cmp	r3, r2
 800a716:	d00b      	beq.n	800a730 <TIM_OC2_SetConfig+0xb0>
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	4a1b      	ldr	r2, [pc, #108]	; (800a788 <TIM_OC2_SetConfig+0x108>)
 800a71c:	4293      	cmp	r3, r2
 800a71e:	d007      	beq.n	800a730 <TIM_OC2_SetConfig+0xb0>
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	4a1a      	ldr	r2, [pc, #104]	; (800a78c <TIM_OC2_SetConfig+0x10c>)
 800a724:	4293      	cmp	r3, r2
 800a726:	d003      	beq.n	800a730 <TIM_OC2_SetConfig+0xb0>
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	4a19      	ldr	r2, [pc, #100]	; (800a790 <TIM_OC2_SetConfig+0x110>)
 800a72c:	4293      	cmp	r3, r2
 800a72e:	d113      	bne.n	800a758 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a730:	693b      	ldr	r3, [r7, #16]
 800a732:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a736:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a738:	693b      	ldr	r3, [r7, #16]
 800a73a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a73e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a740:	683b      	ldr	r3, [r7, #0]
 800a742:	695b      	ldr	r3, [r3, #20]
 800a744:	009b      	lsls	r3, r3, #2
 800a746:	693a      	ldr	r2, [r7, #16]
 800a748:	4313      	orrs	r3, r2
 800a74a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a74c:	683b      	ldr	r3, [r7, #0]
 800a74e:	699b      	ldr	r3, [r3, #24]
 800a750:	009b      	lsls	r3, r3, #2
 800a752:	693a      	ldr	r2, [r7, #16]
 800a754:	4313      	orrs	r3, r2
 800a756:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	693a      	ldr	r2, [r7, #16]
 800a75c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	68fa      	ldr	r2, [r7, #12]
 800a762:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a764:	683b      	ldr	r3, [r7, #0]
 800a766:	685a      	ldr	r2, [r3, #4]
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	697a      	ldr	r2, [r7, #20]
 800a770:	621a      	str	r2, [r3, #32]
}
 800a772:	bf00      	nop
 800a774:	371c      	adds	r7, #28
 800a776:	46bd      	mov	sp, r7
 800a778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77c:	4770      	bx	lr
 800a77e:	bf00      	nop
 800a780:	40012c00 	.word	0x40012c00
 800a784:	40013400 	.word	0x40013400
 800a788:	40014000 	.word	0x40014000
 800a78c:	40014400 	.word	0x40014400
 800a790:	40014800 	.word	0x40014800

0800a794 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a794:	b480      	push	{r7}
 800a796:	b087      	sub	sp, #28
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
 800a79c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	6a1b      	ldr	r3, [r3, #32]
 800a7a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	6a1b      	ldr	r3, [r3, #32]
 800a7ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	685b      	ldr	r3, [r3, #4]
 800a7b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	69db      	ldr	r3, [r3, #28]
 800a7ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a7c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a7c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	f023 0303 	bic.w	r3, r3, #3
 800a7ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	68fa      	ldr	r2, [r7, #12]
 800a7d6:	4313      	orrs	r3, r2
 800a7d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a7da:	697b      	ldr	r3, [r7, #20]
 800a7dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a7e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a7e2:	683b      	ldr	r3, [r7, #0]
 800a7e4:	689b      	ldr	r3, [r3, #8]
 800a7e6:	021b      	lsls	r3, r3, #8
 800a7e8:	697a      	ldr	r2, [r7, #20]
 800a7ea:	4313      	orrs	r3, r2
 800a7ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	4a27      	ldr	r2, [pc, #156]	; (800a890 <TIM_OC3_SetConfig+0xfc>)
 800a7f2:	4293      	cmp	r3, r2
 800a7f4:	d003      	beq.n	800a7fe <TIM_OC3_SetConfig+0x6a>
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	4a26      	ldr	r2, [pc, #152]	; (800a894 <TIM_OC3_SetConfig+0x100>)
 800a7fa:	4293      	cmp	r3, r2
 800a7fc:	d10d      	bne.n	800a81a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a7fe:	697b      	ldr	r3, [r7, #20]
 800a800:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a804:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a806:	683b      	ldr	r3, [r7, #0]
 800a808:	68db      	ldr	r3, [r3, #12]
 800a80a:	021b      	lsls	r3, r3, #8
 800a80c:	697a      	ldr	r2, [r7, #20]
 800a80e:	4313      	orrs	r3, r2
 800a810:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a812:	697b      	ldr	r3, [r7, #20]
 800a814:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a818:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	4a1c      	ldr	r2, [pc, #112]	; (800a890 <TIM_OC3_SetConfig+0xfc>)
 800a81e:	4293      	cmp	r3, r2
 800a820:	d00f      	beq.n	800a842 <TIM_OC3_SetConfig+0xae>
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	4a1b      	ldr	r2, [pc, #108]	; (800a894 <TIM_OC3_SetConfig+0x100>)
 800a826:	4293      	cmp	r3, r2
 800a828:	d00b      	beq.n	800a842 <TIM_OC3_SetConfig+0xae>
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	4a1a      	ldr	r2, [pc, #104]	; (800a898 <TIM_OC3_SetConfig+0x104>)
 800a82e:	4293      	cmp	r3, r2
 800a830:	d007      	beq.n	800a842 <TIM_OC3_SetConfig+0xae>
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	4a19      	ldr	r2, [pc, #100]	; (800a89c <TIM_OC3_SetConfig+0x108>)
 800a836:	4293      	cmp	r3, r2
 800a838:	d003      	beq.n	800a842 <TIM_OC3_SetConfig+0xae>
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	4a18      	ldr	r2, [pc, #96]	; (800a8a0 <TIM_OC3_SetConfig+0x10c>)
 800a83e:	4293      	cmp	r3, r2
 800a840:	d113      	bne.n	800a86a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a842:	693b      	ldr	r3, [r7, #16]
 800a844:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a848:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a84a:	693b      	ldr	r3, [r7, #16]
 800a84c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a850:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a852:	683b      	ldr	r3, [r7, #0]
 800a854:	695b      	ldr	r3, [r3, #20]
 800a856:	011b      	lsls	r3, r3, #4
 800a858:	693a      	ldr	r2, [r7, #16]
 800a85a:	4313      	orrs	r3, r2
 800a85c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	699b      	ldr	r3, [r3, #24]
 800a862:	011b      	lsls	r3, r3, #4
 800a864:	693a      	ldr	r2, [r7, #16]
 800a866:	4313      	orrs	r3, r2
 800a868:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	693a      	ldr	r2, [r7, #16]
 800a86e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	68fa      	ldr	r2, [r7, #12]
 800a874:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a876:	683b      	ldr	r3, [r7, #0]
 800a878:	685a      	ldr	r2, [r3, #4]
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	697a      	ldr	r2, [r7, #20]
 800a882:	621a      	str	r2, [r3, #32]
}
 800a884:	bf00      	nop
 800a886:	371c      	adds	r7, #28
 800a888:	46bd      	mov	sp, r7
 800a88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88e:	4770      	bx	lr
 800a890:	40012c00 	.word	0x40012c00
 800a894:	40013400 	.word	0x40013400
 800a898:	40014000 	.word	0x40014000
 800a89c:	40014400 	.word	0x40014400
 800a8a0:	40014800 	.word	0x40014800

0800a8a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a8a4:	b480      	push	{r7}
 800a8a6:	b087      	sub	sp, #28
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
 800a8ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	6a1b      	ldr	r3, [r3, #32]
 800a8b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	6a1b      	ldr	r3, [r3, #32]
 800a8be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	685b      	ldr	r3, [r3, #4]
 800a8c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	69db      	ldr	r3, [r3, #28]
 800a8ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a8d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a8d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a8de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a8e0:	683b      	ldr	r3, [r7, #0]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	021b      	lsls	r3, r3, #8
 800a8e6:	68fa      	ldr	r2, [r7, #12]
 800a8e8:	4313      	orrs	r3, r2
 800a8ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a8ec:	693b      	ldr	r3, [r7, #16]
 800a8ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a8f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	689b      	ldr	r3, [r3, #8]
 800a8f8:	031b      	lsls	r3, r3, #12
 800a8fa:	693a      	ldr	r2, [r7, #16]
 800a8fc:	4313      	orrs	r3, r2
 800a8fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	4a18      	ldr	r2, [pc, #96]	; (800a964 <TIM_OC4_SetConfig+0xc0>)
 800a904:	4293      	cmp	r3, r2
 800a906:	d00f      	beq.n	800a928 <TIM_OC4_SetConfig+0x84>
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	4a17      	ldr	r2, [pc, #92]	; (800a968 <TIM_OC4_SetConfig+0xc4>)
 800a90c:	4293      	cmp	r3, r2
 800a90e:	d00b      	beq.n	800a928 <TIM_OC4_SetConfig+0x84>
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	4a16      	ldr	r2, [pc, #88]	; (800a96c <TIM_OC4_SetConfig+0xc8>)
 800a914:	4293      	cmp	r3, r2
 800a916:	d007      	beq.n	800a928 <TIM_OC4_SetConfig+0x84>
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	4a15      	ldr	r2, [pc, #84]	; (800a970 <TIM_OC4_SetConfig+0xcc>)
 800a91c:	4293      	cmp	r3, r2
 800a91e:	d003      	beq.n	800a928 <TIM_OC4_SetConfig+0x84>
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	4a14      	ldr	r2, [pc, #80]	; (800a974 <TIM_OC4_SetConfig+0xd0>)
 800a924:	4293      	cmp	r3, r2
 800a926:	d109      	bne.n	800a93c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a928:	697b      	ldr	r3, [r7, #20]
 800a92a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a92e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a930:	683b      	ldr	r3, [r7, #0]
 800a932:	695b      	ldr	r3, [r3, #20]
 800a934:	019b      	lsls	r3, r3, #6
 800a936:	697a      	ldr	r2, [r7, #20]
 800a938:	4313      	orrs	r3, r2
 800a93a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	697a      	ldr	r2, [r7, #20]
 800a940:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	68fa      	ldr	r2, [r7, #12]
 800a946:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a948:	683b      	ldr	r3, [r7, #0]
 800a94a:	685a      	ldr	r2, [r3, #4]
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	693a      	ldr	r2, [r7, #16]
 800a954:	621a      	str	r2, [r3, #32]
}
 800a956:	bf00      	nop
 800a958:	371c      	adds	r7, #28
 800a95a:	46bd      	mov	sp, r7
 800a95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a960:	4770      	bx	lr
 800a962:	bf00      	nop
 800a964:	40012c00 	.word	0x40012c00
 800a968:	40013400 	.word	0x40013400
 800a96c:	40014000 	.word	0x40014000
 800a970:	40014400 	.word	0x40014400
 800a974:	40014800 	.word	0x40014800

0800a978 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a978:	b480      	push	{r7}
 800a97a:	b087      	sub	sp, #28
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
 800a980:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	6a1b      	ldr	r3, [r3, #32]
 800a986:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	6a1b      	ldr	r3, [r3, #32]
 800a992:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	685b      	ldr	r3, [r3, #4]
 800a998:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a99e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a9a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a9aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a9ac:	683b      	ldr	r3, [r7, #0]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	68fa      	ldr	r2, [r7, #12]
 800a9b2:	4313      	orrs	r3, r2
 800a9b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a9b6:	693b      	ldr	r3, [r7, #16]
 800a9b8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a9bc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a9be:	683b      	ldr	r3, [r7, #0]
 800a9c0:	689b      	ldr	r3, [r3, #8]
 800a9c2:	041b      	lsls	r3, r3, #16
 800a9c4:	693a      	ldr	r2, [r7, #16]
 800a9c6:	4313      	orrs	r3, r2
 800a9c8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	4a17      	ldr	r2, [pc, #92]	; (800aa2c <TIM_OC5_SetConfig+0xb4>)
 800a9ce:	4293      	cmp	r3, r2
 800a9d0:	d00f      	beq.n	800a9f2 <TIM_OC5_SetConfig+0x7a>
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	4a16      	ldr	r2, [pc, #88]	; (800aa30 <TIM_OC5_SetConfig+0xb8>)
 800a9d6:	4293      	cmp	r3, r2
 800a9d8:	d00b      	beq.n	800a9f2 <TIM_OC5_SetConfig+0x7a>
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	4a15      	ldr	r2, [pc, #84]	; (800aa34 <TIM_OC5_SetConfig+0xbc>)
 800a9de:	4293      	cmp	r3, r2
 800a9e0:	d007      	beq.n	800a9f2 <TIM_OC5_SetConfig+0x7a>
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	4a14      	ldr	r2, [pc, #80]	; (800aa38 <TIM_OC5_SetConfig+0xc0>)
 800a9e6:	4293      	cmp	r3, r2
 800a9e8:	d003      	beq.n	800a9f2 <TIM_OC5_SetConfig+0x7a>
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	4a13      	ldr	r2, [pc, #76]	; (800aa3c <TIM_OC5_SetConfig+0xc4>)
 800a9ee:	4293      	cmp	r3, r2
 800a9f0:	d109      	bne.n	800aa06 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a9f2:	697b      	ldr	r3, [r7, #20]
 800a9f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a9f8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a9fa:	683b      	ldr	r3, [r7, #0]
 800a9fc:	695b      	ldr	r3, [r3, #20]
 800a9fe:	021b      	lsls	r3, r3, #8
 800aa00:	697a      	ldr	r2, [r7, #20]
 800aa02:	4313      	orrs	r3, r2
 800aa04:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	697a      	ldr	r2, [r7, #20]
 800aa0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	68fa      	ldr	r2, [r7, #12]
 800aa10:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800aa12:	683b      	ldr	r3, [r7, #0]
 800aa14:	685a      	ldr	r2, [r3, #4]
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	693a      	ldr	r2, [r7, #16]
 800aa1e:	621a      	str	r2, [r3, #32]
}
 800aa20:	bf00      	nop
 800aa22:	371c      	adds	r7, #28
 800aa24:	46bd      	mov	sp, r7
 800aa26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2a:	4770      	bx	lr
 800aa2c:	40012c00 	.word	0x40012c00
 800aa30:	40013400 	.word	0x40013400
 800aa34:	40014000 	.word	0x40014000
 800aa38:	40014400 	.word	0x40014400
 800aa3c:	40014800 	.word	0x40014800

0800aa40 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800aa40:	b480      	push	{r7}
 800aa42:	b087      	sub	sp, #28
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
 800aa48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	6a1b      	ldr	r3, [r3, #32]
 800aa4e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	6a1b      	ldr	r3, [r3, #32]
 800aa5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	685b      	ldr	r3, [r3, #4]
 800aa60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800aa6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aa72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aa74:	683b      	ldr	r3, [r7, #0]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	021b      	lsls	r3, r3, #8
 800aa7a:	68fa      	ldr	r2, [r7, #12]
 800aa7c:	4313      	orrs	r3, r2
 800aa7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800aa80:	693b      	ldr	r3, [r7, #16]
 800aa82:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800aa86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800aa88:	683b      	ldr	r3, [r7, #0]
 800aa8a:	689b      	ldr	r3, [r3, #8]
 800aa8c:	051b      	lsls	r3, r3, #20
 800aa8e:	693a      	ldr	r2, [r7, #16]
 800aa90:	4313      	orrs	r3, r2
 800aa92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	4a18      	ldr	r2, [pc, #96]	; (800aaf8 <TIM_OC6_SetConfig+0xb8>)
 800aa98:	4293      	cmp	r3, r2
 800aa9a:	d00f      	beq.n	800aabc <TIM_OC6_SetConfig+0x7c>
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	4a17      	ldr	r2, [pc, #92]	; (800aafc <TIM_OC6_SetConfig+0xbc>)
 800aaa0:	4293      	cmp	r3, r2
 800aaa2:	d00b      	beq.n	800aabc <TIM_OC6_SetConfig+0x7c>
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	4a16      	ldr	r2, [pc, #88]	; (800ab00 <TIM_OC6_SetConfig+0xc0>)
 800aaa8:	4293      	cmp	r3, r2
 800aaaa:	d007      	beq.n	800aabc <TIM_OC6_SetConfig+0x7c>
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	4a15      	ldr	r2, [pc, #84]	; (800ab04 <TIM_OC6_SetConfig+0xc4>)
 800aab0:	4293      	cmp	r3, r2
 800aab2:	d003      	beq.n	800aabc <TIM_OC6_SetConfig+0x7c>
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	4a14      	ldr	r2, [pc, #80]	; (800ab08 <TIM_OC6_SetConfig+0xc8>)
 800aab8:	4293      	cmp	r3, r2
 800aaba:	d109      	bne.n	800aad0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800aabc:	697b      	ldr	r3, [r7, #20]
 800aabe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800aac2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800aac4:	683b      	ldr	r3, [r7, #0]
 800aac6:	695b      	ldr	r3, [r3, #20]
 800aac8:	029b      	lsls	r3, r3, #10
 800aaca:	697a      	ldr	r2, [r7, #20]
 800aacc:	4313      	orrs	r3, r2
 800aace:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	697a      	ldr	r2, [r7, #20]
 800aad4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	68fa      	ldr	r2, [r7, #12]
 800aada:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800aadc:	683b      	ldr	r3, [r7, #0]
 800aade:	685a      	ldr	r2, [r3, #4]
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	693a      	ldr	r2, [r7, #16]
 800aae8:	621a      	str	r2, [r3, #32]
}
 800aaea:	bf00      	nop
 800aaec:	371c      	adds	r7, #28
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf4:	4770      	bx	lr
 800aaf6:	bf00      	nop
 800aaf8:	40012c00 	.word	0x40012c00
 800aafc:	40013400 	.word	0x40013400
 800ab00:	40014000 	.word	0x40014000
 800ab04:	40014400 	.word	0x40014400
 800ab08:	40014800 	.word	0x40014800

0800ab0c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800ab0c:	b480      	push	{r7}
 800ab0e:	b087      	sub	sp, #28
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	60f8      	str	r0, [r7, #12]
 800ab14:	60b9      	str	r1, [r7, #8]
 800ab16:	607a      	str	r2, [r7, #4]
 800ab18:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	6a1b      	ldr	r3, [r3, #32]
 800ab1e:	f023 0201 	bic.w	r2, r3, #1
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	699b      	ldr	r3, [r3, #24]
 800ab2a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	6a1b      	ldr	r3, [r3, #32]
 800ab30:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	4a26      	ldr	r2, [pc, #152]	; (800abd0 <TIM_TI1_SetConfig+0xc4>)
 800ab36:	4293      	cmp	r3, r2
 800ab38:	d017      	beq.n	800ab6a <TIM_TI1_SetConfig+0x5e>
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab40:	d013      	beq.n	800ab6a <TIM_TI1_SetConfig+0x5e>
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	4a23      	ldr	r2, [pc, #140]	; (800abd4 <TIM_TI1_SetConfig+0xc8>)
 800ab46:	4293      	cmp	r3, r2
 800ab48:	d00f      	beq.n	800ab6a <TIM_TI1_SetConfig+0x5e>
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	4a22      	ldr	r2, [pc, #136]	; (800abd8 <TIM_TI1_SetConfig+0xcc>)
 800ab4e:	4293      	cmp	r3, r2
 800ab50:	d00b      	beq.n	800ab6a <TIM_TI1_SetConfig+0x5e>
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	4a21      	ldr	r2, [pc, #132]	; (800abdc <TIM_TI1_SetConfig+0xd0>)
 800ab56:	4293      	cmp	r3, r2
 800ab58:	d007      	beq.n	800ab6a <TIM_TI1_SetConfig+0x5e>
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	4a20      	ldr	r2, [pc, #128]	; (800abe0 <TIM_TI1_SetConfig+0xd4>)
 800ab5e:	4293      	cmp	r3, r2
 800ab60:	d003      	beq.n	800ab6a <TIM_TI1_SetConfig+0x5e>
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	4a1f      	ldr	r2, [pc, #124]	; (800abe4 <TIM_TI1_SetConfig+0xd8>)
 800ab66:	4293      	cmp	r3, r2
 800ab68:	d101      	bne.n	800ab6e <TIM_TI1_SetConfig+0x62>
 800ab6a:	2301      	movs	r3, #1
 800ab6c:	e000      	b.n	800ab70 <TIM_TI1_SetConfig+0x64>
 800ab6e:	2300      	movs	r3, #0
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d008      	beq.n	800ab86 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800ab74:	697b      	ldr	r3, [r7, #20]
 800ab76:	f023 0303 	bic.w	r3, r3, #3
 800ab7a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800ab7c:	697a      	ldr	r2, [r7, #20]
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	4313      	orrs	r3, r2
 800ab82:	617b      	str	r3, [r7, #20]
 800ab84:	e003      	b.n	800ab8e <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800ab86:	697b      	ldr	r3, [r7, #20]
 800ab88:	f043 0301 	orr.w	r3, r3, #1
 800ab8c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ab8e:	697b      	ldr	r3, [r7, #20]
 800ab90:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ab94:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800ab96:	683b      	ldr	r3, [r7, #0]
 800ab98:	011b      	lsls	r3, r3, #4
 800ab9a:	b2db      	uxtb	r3, r3
 800ab9c:	697a      	ldr	r2, [r7, #20]
 800ab9e:	4313      	orrs	r3, r2
 800aba0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800aba2:	693b      	ldr	r3, [r7, #16]
 800aba4:	f023 030a 	bic.w	r3, r3, #10
 800aba8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800abaa:	68bb      	ldr	r3, [r7, #8]
 800abac:	f003 030a 	and.w	r3, r3, #10
 800abb0:	693a      	ldr	r2, [r7, #16]
 800abb2:	4313      	orrs	r3, r2
 800abb4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	697a      	ldr	r2, [r7, #20]
 800abba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	693a      	ldr	r2, [r7, #16]
 800abc0:	621a      	str	r2, [r3, #32]
}
 800abc2:	bf00      	nop
 800abc4:	371c      	adds	r7, #28
 800abc6:	46bd      	mov	sp, r7
 800abc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abcc:	4770      	bx	lr
 800abce:	bf00      	nop
 800abd0:	40012c00 	.word	0x40012c00
 800abd4:	40000400 	.word	0x40000400
 800abd8:	40000800 	.word	0x40000800
 800abdc:	40000c00 	.word	0x40000c00
 800abe0:	40013400 	.word	0x40013400
 800abe4:	40014000 	.word	0x40014000

0800abe8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800abe8:	b480      	push	{r7}
 800abea:	b087      	sub	sp, #28
 800abec:	af00      	add	r7, sp, #0
 800abee:	60f8      	str	r0, [r7, #12]
 800abf0:	60b9      	str	r1, [r7, #8]
 800abf2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	6a1b      	ldr	r3, [r3, #32]
 800abf8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	6a1b      	ldr	r3, [r3, #32]
 800abfe:	f023 0201 	bic.w	r2, r3, #1
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	699b      	ldr	r3, [r3, #24]
 800ac0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ac0c:	693b      	ldr	r3, [r7, #16]
 800ac0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ac12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	011b      	lsls	r3, r3, #4
 800ac18:	693a      	ldr	r2, [r7, #16]
 800ac1a:	4313      	orrs	r3, r2
 800ac1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ac1e:	697b      	ldr	r3, [r7, #20]
 800ac20:	f023 030a 	bic.w	r3, r3, #10
 800ac24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ac26:	697a      	ldr	r2, [r7, #20]
 800ac28:	68bb      	ldr	r3, [r7, #8]
 800ac2a:	4313      	orrs	r3, r2
 800ac2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	693a      	ldr	r2, [r7, #16]
 800ac32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	697a      	ldr	r2, [r7, #20]
 800ac38:	621a      	str	r2, [r3, #32]
}
 800ac3a:	bf00      	nop
 800ac3c:	371c      	adds	r7, #28
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac44:	4770      	bx	lr

0800ac46 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800ac46:	b480      	push	{r7}
 800ac48:	b087      	sub	sp, #28
 800ac4a:	af00      	add	r7, sp, #0
 800ac4c:	60f8      	str	r0, [r7, #12]
 800ac4e:	60b9      	str	r1, [r7, #8]
 800ac50:	607a      	str	r2, [r7, #4]
 800ac52:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	6a1b      	ldr	r3, [r3, #32]
 800ac58:	f023 0210 	bic.w	r2, r3, #16
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	699b      	ldr	r3, [r3, #24]
 800ac64:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	6a1b      	ldr	r3, [r3, #32]
 800ac6a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800ac6c:	697b      	ldr	r3, [r7, #20]
 800ac6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ac72:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	021b      	lsls	r3, r3, #8
 800ac78:	697a      	ldr	r2, [r7, #20]
 800ac7a:	4313      	orrs	r3, r2
 800ac7c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ac7e:	697b      	ldr	r3, [r7, #20]
 800ac80:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ac84:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800ac86:	683b      	ldr	r3, [r7, #0]
 800ac88:	031b      	lsls	r3, r3, #12
 800ac8a:	b29b      	uxth	r3, r3
 800ac8c:	697a      	ldr	r2, [r7, #20]
 800ac8e:	4313      	orrs	r3, r2
 800ac90:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ac92:	693b      	ldr	r3, [r7, #16]
 800ac94:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ac98:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800ac9a:	68bb      	ldr	r3, [r7, #8]
 800ac9c:	011b      	lsls	r3, r3, #4
 800ac9e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800aca2:	693a      	ldr	r2, [r7, #16]
 800aca4:	4313      	orrs	r3, r2
 800aca6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	697a      	ldr	r2, [r7, #20]
 800acac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	693a      	ldr	r2, [r7, #16]
 800acb2:	621a      	str	r2, [r3, #32]
}
 800acb4:	bf00      	nop
 800acb6:	371c      	adds	r7, #28
 800acb8:	46bd      	mov	sp, r7
 800acba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acbe:	4770      	bx	lr

0800acc0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800acc0:	b480      	push	{r7}
 800acc2:	b087      	sub	sp, #28
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	60f8      	str	r0, [r7, #12]
 800acc8:	60b9      	str	r1, [r7, #8]
 800acca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	6a1b      	ldr	r3, [r3, #32]
 800acd0:	f023 0210 	bic.w	r2, r3, #16
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	699b      	ldr	r3, [r3, #24]
 800acdc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	6a1b      	ldr	r3, [r3, #32]
 800ace2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ace4:	697b      	ldr	r3, [r7, #20]
 800ace6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800acea:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	031b      	lsls	r3, r3, #12
 800acf0:	697a      	ldr	r2, [r7, #20]
 800acf2:	4313      	orrs	r3, r2
 800acf4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800acf6:	693b      	ldr	r3, [r7, #16]
 800acf8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800acfc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800acfe:	68bb      	ldr	r3, [r7, #8]
 800ad00:	011b      	lsls	r3, r3, #4
 800ad02:	693a      	ldr	r2, [r7, #16]
 800ad04:	4313      	orrs	r3, r2
 800ad06:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	697a      	ldr	r2, [r7, #20]
 800ad0c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	693a      	ldr	r2, [r7, #16]
 800ad12:	621a      	str	r2, [r3, #32]
}
 800ad14:	bf00      	nop
 800ad16:	371c      	adds	r7, #28
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1e:	4770      	bx	lr

0800ad20 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800ad20:	b480      	push	{r7}
 800ad22:	b087      	sub	sp, #28
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	60f8      	str	r0, [r7, #12]
 800ad28:	60b9      	str	r1, [r7, #8]
 800ad2a:	607a      	str	r2, [r7, #4]
 800ad2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	6a1b      	ldr	r3, [r3, #32]
 800ad32:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	69db      	ldr	r3, [r3, #28]
 800ad3e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	6a1b      	ldr	r3, [r3, #32]
 800ad44:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800ad46:	697b      	ldr	r3, [r7, #20]
 800ad48:	f023 0303 	bic.w	r3, r3, #3
 800ad4c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800ad4e:	697a      	ldr	r2, [r7, #20]
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	4313      	orrs	r3, r2
 800ad54:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800ad56:	697b      	ldr	r3, [r7, #20]
 800ad58:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ad5c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800ad5e:	683b      	ldr	r3, [r7, #0]
 800ad60:	011b      	lsls	r3, r3, #4
 800ad62:	b2db      	uxtb	r3, r3
 800ad64:	697a      	ldr	r2, [r7, #20]
 800ad66:	4313      	orrs	r3, r2
 800ad68:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800ad6a:	693b      	ldr	r3, [r7, #16]
 800ad6c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800ad70:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800ad72:	68bb      	ldr	r3, [r7, #8]
 800ad74:	021b      	lsls	r3, r3, #8
 800ad76:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800ad7a:	693a      	ldr	r2, [r7, #16]
 800ad7c:	4313      	orrs	r3, r2
 800ad7e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	697a      	ldr	r2, [r7, #20]
 800ad84:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	693a      	ldr	r2, [r7, #16]
 800ad8a:	621a      	str	r2, [r3, #32]
}
 800ad8c:	bf00      	nop
 800ad8e:	371c      	adds	r7, #28
 800ad90:	46bd      	mov	sp, r7
 800ad92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad96:	4770      	bx	lr

0800ad98 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800ad98:	b480      	push	{r7}
 800ad9a:	b087      	sub	sp, #28
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	60f8      	str	r0, [r7, #12]
 800ada0:	60b9      	str	r1, [r7, #8]
 800ada2:	607a      	str	r2, [r7, #4]
 800ada4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	6a1b      	ldr	r3, [r3, #32]
 800adaa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	69db      	ldr	r3, [r3, #28]
 800adb6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	6a1b      	ldr	r3, [r3, #32]
 800adbc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800adbe:	697b      	ldr	r3, [r7, #20]
 800adc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800adc4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	021b      	lsls	r3, r3, #8
 800adca:	697a      	ldr	r2, [r7, #20]
 800adcc:	4313      	orrs	r3, r2
 800adce:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800add0:	697b      	ldr	r3, [r7, #20]
 800add2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800add6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800add8:	683b      	ldr	r3, [r7, #0]
 800adda:	031b      	lsls	r3, r3, #12
 800addc:	b29b      	uxth	r3, r3
 800adde:	697a      	ldr	r2, [r7, #20]
 800ade0:	4313      	orrs	r3, r2
 800ade2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800ade4:	693b      	ldr	r3, [r7, #16]
 800ade6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800adea:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800adec:	68bb      	ldr	r3, [r7, #8]
 800adee:	031b      	lsls	r3, r3, #12
 800adf0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800adf4:	693a      	ldr	r2, [r7, #16]
 800adf6:	4313      	orrs	r3, r2
 800adf8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	697a      	ldr	r2, [r7, #20]
 800adfe:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	693a      	ldr	r2, [r7, #16]
 800ae04:	621a      	str	r2, [r3, #32]
}
 800ae06:	bf00      	nop
 800ae08:	371c      	adds	r7, #28
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae10:	4770      	bx	lr

0800ae12 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ae12:	b480      	push	{r7}
 800ae14:	b085      	sub	sp, #20
 800ae16:	af00      	add	r7, sp, #0
 800ae18:	6078      	str	r0, [r7, #4]
 800ae1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	689b      	ldr	r3, [r3, #8]
 800ae20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ae2a:	683a      	ldr	r2, [r7, #0]
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	4313      	orrs	r3, r2
 800ae30:	f043 0307 	orr.w	r3, r3, #7
 800ae34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	68fa      	ldr	r2, [r7, #12]
 800ae3a:	609a      	str	r2, [r3, #8]
}
 800ae3c:	bf00      	nop
 800ae3e:	3714      	adds	r7, #20
 800ae40:	46bd      	mov	sp, r7
 800ae42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae46:	4770      	bx	lr

0800ae48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ae48:	b480      	push	{r7}
 800ae4a:	b087      	sub	sp, #28
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	60f8      	str	r0, [r7, #12]
 800ae50:	60b9      	str	r1, [r7, #8]
 800ae52:	607a      	str	r2, [r7, #4]
 800ae54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	689b      	ldr	r3, [r3, #8]
 800ae5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ae5c:	697b      	ldr	r3, [r7, #20]
 800ae5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ae62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ae64:	683b      	ldr	r3, [r7, #0]
 800ae66:	021a      	lsls	r2, r3, #8
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	431a      	orrs	r2, r3
 800ae6c:	68bb      	ldr	r3, [r7, #8]
 800ae6e:	4313      	orrs	r3, r2
 800ae70:	697a      	ldr	r2, [r7, #20]
 800ae72:	4313      	orrs	r3, r2
 800ae74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	697a      	ldr	r2, [r7, #20]
 800ae7a:	609a      	str	r2, [r3, #8]
}
 800ae7c:	bf00      	nop
 800ae7e:	371c      	adds	r7, #28
 800ae80:	46bd      	mov	sp, r7
 800ae82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae86:	4770      	bx	lr

0800ae88 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ae88:	b480      	push	{r7}
 800ae8a:	b087      	sub	sp, #28
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	60f8      	str	r0, [r7, #12]
 800ae90:	60b9      	str	r1, [r7, #8]
 800ae92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ae94:	68bb      	ldr	r3, [r7, #8]
 800ae96:	f003 031f 	and.w	r3, r3, #31
 800ae9a:	2201      	movs	r2, #1
 800ae9c:	fa02 f303 	lsl.w	r3, r2, r3
 800aea0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	6a1a      	ldr	r2, [r3, #32]
 800aea6:	697b      	ldr	r3, [r7, #20]
 800aea8:	43db      	mvns	r3, r3
 800aeaa:	401a      	ands	r2, r3
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	6a1a      	ldr	r2, [r3, #32]
 800aeb4:	68bb      	ldr	r3, [r7, #8]
 800aeb6:	f003 031f 	and.w	r3, r3, #31
 800aeba:	6879      	ldr	r1, [r7, #4]
 800aebc:	fa01 f303 	lsl.w	r3, r1, r3
 800aec0:	431a      	orrs	r2, r3
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	621a      	str	r2, [r3, #32]
}
 800aec6:	bf00      	nop
 800aec8:	371c      	adds	r7, #28
 800aeca:	46bd      	mov	sp, r7
 800aecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed0:	4770      	bx	lr
	...

0800aed4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800aed4:	b480      	push	{r7}
 800aed6:	b085      	sub	sp, #20
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
 800aedc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aee4:	2b01      	cmp	r3, #1
 800aee6:	d101      	bne.n	800aeec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800aee8:	2302      	movs	r3, #2
 800aeea:	e068      	b.n	800afbe <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	2201      	movs	r2, #1
 800aef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	2202      	movs	r2, #2
 800aef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	685b      	ldr	r3, [r3, #4]
 800af02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	689b      	ldr	r3, [r3, #8]
 800af0a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	4a2e      	ldr	r2, [pc, #184]	; (800afcc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800af12:	4293      	cmp	r3, r2
 800af14:	d004      	beq.n	800af20 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	4a2d      	ldr	r2, [pc, #180]	; (800afd0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800af1c:	4293      	cmp	r3, r2
 800af1e:	d108      	bne.n	800af32 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800af26:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800af28:	683b      	ldr	r3, [r7, #0]
 800af2a:	685b      	ldr	r3, [r3, #4]
 800af2c:	68fa      	ldr	r2, [r7, #12]
 800af2e:	4313      	orrs	r3, r2
 800af30:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af38:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800af3a:	683b      	ldr	r3, [r7, #0]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	68fa      	ldr	r2, [r7, #12]
 800af40:	4313      	orrs	r3, r2
 800af42:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	68fa      	ldr	r2, [r7, #12]
 800af4a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	4a1e      	ldr	r2, [pc, #120]	; (800afcc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800af52:	4293      	cmp	r3, r2
 800af54:	d01d      	beq.n	800af92 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af5e:	d018      	beq.n	800af92 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	4a1b      	ldr	r2, [pc, #108]	; (800afd4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800af66:	4293      	cmp	r3, r2
 800af68:	d013      	beq.n	800af92 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	4a1a      	ldr	r2, [pc, #104]	; (800afd8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800af70:	4293      	cmp	r3, r2
 800af72:	d00e      	beq.n	800af92 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	4a18      	ldr	r2, [pc, #96]	; (800afdc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800af7a:	4293      	cmp	r3, r2
 800af7c:	d009      	beq.n	800af92 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	4a13      	ldr	r2, [pc, #76]	; (800afd0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800af84:	4293      	cmp	r3, r2
 800af86:	d004      	beq.n	800af92 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	4a14      	ldr	r2, [pc, #80]	; (800afe0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800af8e:	4293      	cmp	r3, r2
 800af90:	d10c      	bne.n	800afac <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800af92:	68bb      	ldr	r3, [r7, #8]
 800af94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800af98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800af9a:	683b      	ldr	r3, [r7, #0]
 800af9c:	689b      	ldr	r3, [r3, #8]
 800af9e:	68ba      	ldr	r2, [r7, #8]
 800afa0:	4313      	orrs	r3, r2
 800afa2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	68ba      	ldr	r2, [r7, #8]
 800afaa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	2201      	movs	r2, #1
 800afb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	2200      	movs	r2, #0
 800afb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800afbc:	2300      	movs	r3, #0
}
 800afbe:	4618      	mov	r0, r3
 800afc0:	3714      	adds	r7, #20
 800afc2:	46bd      	mov	sp, r7
 800afc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc8:	4770      	bx	lr
 800afca:	bf00      	nop
 800afcc:	40012c00 	.word	0x40012c00
 800afd0:	40013400 	.word	0x40013400
 800afd4:	40000400 	.word	0x40000400
 800afd8:	40000800 	.word	0x40000800
 800afdc:	40000c00 	.word	0x40000c00
 800afe0:	40014000 	.word	0x40014000

0800afe4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800afe4:	b480      	push	{r7}
 800afe6:	b085      	sub	sp, #20
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
 800afec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800afee:	2300      	movs	r3, #0
 800aff0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aff8:	2b01      	cmp	r3, #1
 800affa:	d101      	bne.n	800b000 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800affc:	2302      	movs	r3, #2
 800affe:	e065      	b.n	800b0cc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	2201      	movs	r2, #1
 800b004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b00e:	683b      	ldr	r3, [r7, #0]
 800b010:	68db      	ldr	r3, [r3, #12]
 800b012:	4313      	orrs	r3, r2
 800b014:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b01c:	683b      	ldr	r3, [r7, #0]
 800b01e:	689b      	ldr	r3, [r3, #8]
 800b020:	4313      	orrs	r3, r2
 800b022:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b02a:	683b      	ldr	r3, [r7, #0]
 800b02c:	685b      	ldr	r3, [r3, #4]
 800b02e:	4313      	orrs	r3, r2
 800b030:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b038:	683b      	ldr	r3, [r7, #0]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	4313      	orrs	r3, r2
 800b03e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b046:	683b      	ldr	r3, [r7, #0]
 800b048:	691b      	ldr	r3, [r3, #16]
 800b04a:	4313      	orrs	r3, r2
 800b04c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b054:	683b      	ldr	r3, [r7, #0]
 800b056:	695b      	ldr	r3, [r3, #20]
 800b058:	4313      	orrs	r3, r2
 800b05a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b062:	683b      	ldr	r3, [r7, #0]
 800b064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b066:	4313      	orrs	r3, r2
 800b068:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b070:	683b      	ldr	r3, [r7, #0]
 800b072:	699b      	ldr	r3, [r3, #24]
 800b074:	041b      	lsls	r3, r3, #16
 800b076:	4313      	orrs	r3, r2
 800b078:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	4a16      	ldr	r2, [pc, #88]	; (800b0d8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800b080:	4293      	cmp	r3, r2
 800b082:	d004      	beq.n	800b08e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	4a14      	ldr	r2, [pc, #80]	; (800b0dc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800b08a:	4293      	cmp	r3, r2
 800b08c:	d115      	bne.n	800b0ba <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b094:	683b      	ldr	r3, [r7, #0]
 800b096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b098:	051b      	lsls	r3, r3, #20
 800b09a:	4313      	orrs	r3, r2
 800b09c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b0a4:	683b      	ldr	r3, [r7, #0]
 800b0a6:	69db      	ldr	r3, [r3, #28]
 800b0a8:	4313      	orrs	r3, r2
 800b0aa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b0b2:	683b      	ldr	r3, [r7, #0]
 800b0b4:	6a1b      	ldr	r3, [r3, #32]
 800b0b6:	4313      	orrs	r3, r2
 800b0b8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	68fa      	ldr	r2, [r7, #12]
 800b0c0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b0ca:	2300      	movs	r3, #0
}
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	3714      	adds	r7, #20
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d6:	4770      	bx	lr
 800b0d8:	40012c00 	.word	0x40012c00
 800b0dc:	40013400 	.word	0x40013400

0800b0e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b0e0:	b480      	push	{r7}
 800b0e2:	b083      	sub	sp, #12
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b0e8:	bf00      	nop
 800b0ea:	370c      	adds	r7, #12
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f2:	4770      	bx	lr

0800b0f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b0f4:	b480      	push	{r7}
 800b0f6:	b083      	sub	sp, #12
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b0fc:	bf00      	nop
 800b0fe:	370c      	adds	r7, #12
 800b100:	46bd      	mov	sp, r7
 800b102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b106:	4770      	bx	lr

0800b108 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b108:	b480      	push	{r7}
 800b10a:	b083      	sub	sp, #12
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b110:	bf00      	nop
 800b112:	370c      	adds	r7, #12
 800b114:	46bd      	mov	sp, r7
 800b116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11a:	4770      	bx	lr

0800b11c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b082      	sub	sp, #8
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d101      	bne.n	800b12e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b12a:	2301      	movs	r3, #1
 800b12c:	e042      	b.n	800b1b4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b134:	2b00      	cmp	r3, #0
 800b136:	d106      	bne.n	800b146 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2200      	movs	r2, #0
 800b13c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b140:	6878      	ldr	r0, [r7, #4]
 800b142:	f7f8 f863 	bl	800320c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	2224      	movs	r2, #36	; 0x24
 800b14a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	681a      	ldr	r2, [r3, #0]
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	f022 0201 	bic.w	r2, r2, #1
 800b15c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b15e:	6878      	ldr	r0, [r7, #4]
 800b160:	f000 f8c4 	bl	800b2ec <UART_SetConfig>
 800b164:	4603      	mov	r3, r0
 800b166:	2b01      	cmp	r3, #1
 800b168:	d101      	bne.n	800b16e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b16a:	2301      	movs	r3, #1
 800b16c:	e022      	b.n	800b1b4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b172:	2b00      	cmp	r3, #0
 800b174:	d002      	beq.n	800b17c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b176:	6878      	ldr	r0, [r7, #4]
 800b178:	f000 fbb4 	bl	800b8e4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	685a      	ldr	r2, [r3, #4]
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b18a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	689a      	ldr	r2, [r3, #8]
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b19a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	681a      	ldr	r2, [r3, #0]
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	f042 0201 	orr.w	r2, r2, #1
 800b1aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b1ac:	6878      	ldr	r0, [r7, #4]
 800b1ae:	f000 fc3b 	bl	800ba28 <UART_CheckIdleState>
 800b1b2:	4603      	mov	r3, r0
}
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	3708      	adds	r7, #8
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	bd80      	pop	{r7, pc}

0800b1bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	b08a      	sub	sp, #40	; 0x28
 800b1c0:	af02      	add	r7, sp, #8
 800b1c2:	60f8      	str	r0, [r7, #12]
 800b1c4:	60b9      	str	r1, [r7, #8]
 800b1c6:	603b      	str	r3, [r7, #0]
 800b1c8:	4613      	mov	r3, r2
 800b1ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b1d2:	2b20      	cmp	r3, #32
 800b1d4:	f040 8084 	bne.w	800b2e0 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800b1d8:	68bb      	ldr	r3, [r7, #8]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d002      	beq.n	800b1e4 <HAL_UART_Transmit+0x28>
 800b1de:	88fb      	ldrh	r3, [r7, #6]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d101      	bne.n	800b1e8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800b1e4:	2301      	movs	r3, #1
 800b1e6:	e07c      	b.n	800b2e2 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b1ee:	2b01      	cmp	r3, #1
 800b1f0:	d101      	bne.n	800b1f6 <HAL_UART_Transmit+0x3a>
 800b1f2:	2302      	movs	r3, #2
 800b1f4:	e075      	b.n	800b2e2 <HAL_UART_Transmit+0x126>
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	2201      	movs	r2, #1
 800b1fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	2200      	movs	r2, #0
 800b202:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	2221      	movs	r2, #33	; 0x21
 800b20a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b20e:	f7f8 fecf 	bl	8003fb0 <HAL_GetTick>
 800b212:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	88fa      	ldrh	r2, [r7, #6]
 800b218:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	88fa      	ldrh	r2, [r7, #6]
 800b220:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	689b      	ldr	r3, [r3, #8]
 800b228:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b22c:	d108      	bne.n	800b240 <HAL_UART_Transmit+0x84>
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	691b      	ldr	r3, [r3, #16]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d104      	bne.n	800b240 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800b236:	2300      	movs	r3, #0
 800b238:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b23a:	68bb      	ldr	r3, [r7, #8]
 800b23c:	61bb      	str	r3, [r7, #24]
 800b23e:	e003      	b.n	800b248 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800b240:	68bb      	ldr	r3, [r7, #8]
 800b242:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b244:	2300      	movs	r3, #0
 800b246:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	2200      	movs	r2, #0
 800b24c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800b250:	e02d      	b.n	800b2ae <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b252:	683b      	ldr	r3, [r7, #0]
 800b254:	9300      	str	r3, [sp, #0]
 800b256:	697b      	ldr	r3, [r7, #20]
 800b258:	2200      	movs	r2, #0
 800b25a:	2180      	movs	r1, #128	; 0x80
 800b25c:	68f8      	ldr	r0, [r7, #12]
 800b25e:	f000 fc2e 	bl	800babe <UART_WaitOnFlagUntilTimeout>
 800b262:	4603      	mov	r3, r0
 800b264:	2b00      	cmp	r3, #0
 800b266:	d001      	beq.n	800b26c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800b268:	2303      	movs	r3, #3
 800b26a:	e03a      	b.n	800b2e2 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 800b26c:	69fb      	ldr	r3, [r7, #28]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d10b      	bne.n	800b28a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b272:	69bb      	ldr	r3, [r7, #24]
 800b274:	881a      	ldrh	r2, [r3, #0]
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b27e:	b292      	uxth	r2, r2
 800b280:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800b282:	69bb      	ldr	r3, [r7, #24]
 800b284:	3302      	adds	r3, #2
 800b286:	61bb      	str	r3, [r7, #24]
 800b288:	e008      	b.n	800b29c <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b28a:	69fb      	ldr	r3, [r7, #28]
 800b28c:	781a      	ldrb	r2, [r3, #0]
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	b292      	uxth	r2, r2
 800b294:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800b296:	69fb      	ldr	r3, [r7, #28]
 800b298:	3301      	adds	r3, #1
 800b29a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b2a2:	b29b      	uxth	r3, r3
 800b2a4:	3b01      	subs	r3, #1
 800b2a6:	b29a      	uxth	r2, r3
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b2b4:	b29b      	uxth	r3, r3
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d1cb      	bne.n	800b252 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b2ba:	683b      	ldr	r3, [r7, #0]
 800b2bc:	9300      	str	r3, [sp, #0]
 800b2be:	697b      	ldr	r3, [r7, #20]
 800b2c0:	2200      	movs	r2, #0
 800b2c2:	2140      	movs	r1, #64	; 0x40
 800b2c4:	68f8      	ldr	r0, [r7, #12]
 800b2c6:	f000 fbfa 	bl	800babe <UART_WaitOnFlagUntilTimeout>
 800b2ca:	4603      	mov	r3, r0
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d001      	beq.n	800b2d4 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 800b2d0:	2303      	movs	r3, #3
 800b2d2:	e006      	b.n	800b2e2 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	2220      	movs	r2, #32
 800b2d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800b2dc:	2300      	movs	r3, #0
 800b2de:	e000      	b.n	800b2e2 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 800b2e0:	2302      	movs	r3, #2
  }
}
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	3720      	adds	r7, #32
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	bd80      	pop	{r7, pc}
	...

0800b2ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b2ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b2f0:	b08c      	sub	sp, #48	; 0x30
 800b2f2:	af00      	add	r7, sp, #0
 800b2f4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b2fc:	697b      	ldr	r3, [r7, #20]
 800b2fe:	689a      	ldr	r2, [r3, #8]
 800b300:	697b      	ldr	r3, [r7, #20]
 800b302:	691b      	ldr	r3, [r3, #16]
 800b304:	431a      	orrs	r2, r3
 800b306:	697b      	ldr	r3, [r7, #20]
 800b308:	695b      	ldr	r3, [r3, #20]
 800b30a:	431a      	orrs	r2, r3
 800b30c:	697b      	ldr	r3, [r7, #20]
 800b30e:	69db      	ldr	r3, [r3, #28]
 800b310:	4313      	orrs	r3, r2
 800b312:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b314:	697b      	ldr	r3, [r7, #20]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	681a      	ldr	r2, [r3, #0]
 800b31a:	4baa      	ldr	r3, [pc, #680]	; (800b5c4 <UART_SetConfig+0x2d8>)
 800b31c:	4013      	ands	r3, r2
 800b31e:	697a      	ldr	r2, [r7, #20]
 800b320:	6812      	ldr	r2, [r2, #0]
 800b322:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b324:	430b      	orrs	r3, r1
 800b326:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b328:	697b      	ldr	r3, [r7, #20]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	685b      	ldr	r3, [r3, #4]
 800b32e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b332:	697b      	ldr	r3, [r7, #20]
 800b334:	68da      	ldr	r2, [r3, #12]
 800b336:	697b      	ldr	r3, [r7, #20]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	430a      	orrs	r2, r1
 800b33c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b33e:	697b      	ldr	r3, [r7, #20]
 800b340:	699b      	ldr	r3, [r3, #24]
 800b342:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b344:	697b      	ldr	r3, [r7, #20]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	4a9f      	ldr	r2, [pc, #636]	; (800b5c8 <UART_SetConfig+0x2dc>)
 800b34a:	4293      	cmp	r3, r2
 800b34c:	d004      	beq.n	800b358 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b34e:	697b      	ldr	r3, [r7, #20]
 800b350:	6a1b      	ldr	r3, [r3, #32]
 800b352:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b354:	4313      	orrs	r3, r2
 800b356:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b358:	697b      	ldr	r3, [r7, #20]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	689b      	ldr	r3, [r3, #8]
 800b35e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800b362:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800b366:	697a      	ldr	r2, [r7, #20]
 800b368:	6812      	ldr	r2, [r2, #0]
 800b36a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b36c:	430b      	orrs	r3, r1
 800b36e:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b370:	697b      	ldr	r3, [r7, #20]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b376:	f023 010f 	bic.w	r1, r3, #15
 800b37a:	697b      	ldr	r3, [r7, #20]
 800b37c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b37e:	697b      	ldr	r3, [r7, #20]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	430a      	orrs	r2, r1
 800b384:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b386:	697b      	ldr	r3, [r7, #20]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	4a90      	ldr	r2, [pc, #576]	; (800b5cc <UART_SetConfig+0x2e0>)
 800b38c:	4293      	cmp	r3, r2
 800b38e:	d125      	bne.n	800b3dc <UART_SetConfig+0xf0>
 800b390:	4b8f      	ldr	r3, [pc, #572]	; (800b5d0 <UART_SetConfig+0x2e4>)
 800b392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b396:	f003 0303 	and.w	r3, r3, #3
 800b39a:	2b03      	cmp	r3, #3
 800b39c:	d81a      	bhi.n	800b3d4 <UART_SetConfig+0xe8>
 800b39e:	a201      	add	r2, pc, #4	; (adr r2, 800b3a4 <UART_SetConfig+0xb8>)
 800b3a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3a4:	0800b3b5 	.word	0x0800b3b5
 800b3a8:	0800b3c5 	.word	0x0800b3c5
 800b3ac:	0800b3bd 	.word	0x0800b3bd
 800b3b0:	0800b3cd 	.word	0x0800b3cd
 800b3b4:	2301      	movs	r3, #1
 800b3b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b3ba:	e116      	b.n	800b5ea <UART_SetConfig+0x2fe>
 800b3bc:	2302      	movs	r3, #2
 800b3be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b3c2:	e112      	b.n	800b5ea <UART_SetConfig+0x2fe>
 800b3c4:	2304      	movs	r3, #4
 800b3c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b3ca:	e10e      	b.n	800b5ea <UART_SetConfig+0x2fe>
 800b3cc:	2308      	movs	r3, #8
 800b3ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b3d2:	e10a      	b.n	800b5ea <UART_SetConfig+0x2fe>
 800b3d4:	2310      	movs	r3, #16
 800b3d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b3da:	e106      	b.n	800b5ea <UART_SetConfig+0x2fe>
 800b3dc:	697b      	ldr	r3, [r7, #20]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	4a7c      	ldr	r2, [pc, #496]	; (800b5d4 <UART_SetConfig+0x2e8>)
 800b3e2:	4293      	cmp	r3, r2
 800b3e4:	d138      	bne.n	800b458 <UART_SetConfig+0x16c>
 800b3e6:	4b7a      	ldr	r3, [pc, #488]	; (800b5d0 <UART_SetConfig+0x2e4>)
 800b3e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b3ec:	f003 030c 	and.w	r3, r3, #12
 800b3f0:	2b0c      	cmp	r3, #12
 800b3f2:	d82d      	bhi.n	800b450 <UART_SetConfig+0x164>
 800b3f4:	a201      	add	r2, pc, #4	; (adr r2, 800b3fc <UART_SetConfig+0x110>)
 800b3f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3fa:	bf00      	nop
 800b3fc:	0800b431 	.word	0x0800b431
 800b400:	0800b451 	.word	0x0800b451
 800b404:	0800b451 	.word	0x0800b451
 800b408:	0800b451 	.word	0x0800b451
 800b40c:	0800b441 	.word	0x0800b441
 800b410:	0800b451 	.word	0x0800b451
 800b414:	0800b451 	.word	0x0800b451
 800b418:	0800b451 	.word	0x0800b451
 800b41c:	0800b439 	.word	0x0800b439
 800b420:	0800b451 	.word	0x0800b451
 800b424:	0800b451 	.word	0x0800b451
 800b428:	0800b451 	.word	0x0800b451
 800b42c:	0800b449 	.word	0x0800b449
 800b430:	2300      	movs	r3, #0
 800b432:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b436:	e0d8      	b.n	800b5ea <UART_SetConfig+0x2fe>
 800b438:	2302      	movs	r3, #2
 800b43a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b43e:	e0d4      	b.n	800b5ea <UART_SetConfig+0x2fe>
 800b440:	2304      	movs	r3, #4
 800b442:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b446:	e0d0      	b.n	800b5ea <UART_SetConfig+0x2fe>
 800b448:	2308      	movs	r3, #8
 800b44a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b44e:	e0cc      	b.n	800b5ea <UART_SetConfig+0x2fe>
 800b450:	2310      	movs	r3, #16
 800b452:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b456:	e0c8      	b.n	800b5ea <UART_SetConfig+0x2fe>
 800b458:	697b      	ldr	r3, [r7, #20]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	4a5e      	ldr	r2, [pc, #376]	; (800b5d8 <UART_SetConfig+0x2ec>)
 800b45e:	4293      	cmp	r3, r2
 800b460:	d125      	bne.n	800b4ae <UART_SetConfig+0x1c2>
 800b462:	4b5b      	ldr	r3, [pc, #364]	; (800b5d0 <UART_SetConfig+0x2e4>)
 800b464:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b468:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b46c:	2b30      	cmp	r3, #48	; 0x30
 800b46e:	d016      	beq.n	800b49e <UART_SetConfig+0x1b2>
 800b470:	2b30      	cmp	r3, #48	; 0x30
 800b472:	d818      	bhi.n	800b4a6 <UART_SetConfig+0x1ba>
 800b474:	2b20      	cmp	r3, #32
 800b476:	d00a      	beq.n	800b48e <UART_SetConfig+0x1a2>
 800b478:	2b20      	cmp	r3, #32
 800b47a:	d814      	bhi.n	800b4a6 <UART_SetConfig+0x1ba>
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d002      	beq.n	800b486 <UART_SetConfig+0x19a>
 800b480:	2b10      	cmp	r3, #16
 800b482:	d008      	beq.n	800b496 <UART_SetConfig+0x1aa>
 800b484:	e00f      	b.n	800b4a6 <UART_SetConfig+0x1ba>
 800b486:	2300      	movs	r3, #0
 800b488:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b48c:	e0ad      	b.n	800b5ea <UART_SetConfig+0x2fe>
 800b48e:	2302      	movs	r3, #2
 800b490:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b494:	e0a9      	b.n	800b5ea <UART_SetConfig+0x2fe>
 800b496:	2304      	movs	r3, #4
 800b498:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b49c:	e0a5      	b.n	800b5ea <UART_SetConfig+0x2fe>
 800b49e:	2308      	movs	r3, #8
 800b4a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b4a4:	e0a1      	b.n	800b5ea <UART_SetConfig+0x2fe>
 800b4a6:	2310      	movs	r3, #16
 800b4a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b4ac:	e09d      	b.n	800b5ea <UART_SetConfig+0x2fe>
 800b4ae:	697b      	ldr	r3, [r7, #20]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	4a4a      	ldr	r2, [pc, #296]	; (800b5dc <UART_SetConfig+0x2f0>)
 800b4b4:	4293      	cmp	r3, r2
 800b4b6:	d125      	bne.n	800b504 <UART_SetConfig+0x218>
 800b4b8:	4b45      	ldr	r3, [pc, #276]	; (800b5d0 <UART_SetConfig+0x2e4>)
 800b4ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b4be:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b4c2:	2bc0      	cmp	r3, #192	; 0xc0
 800b4c4:	d016      	beq.n	800b4f4 <UART_SetConfig+0x208>
 800b4c6:	2bc0      	cmp	r3, #192	; 0xc0
 800b4c8:	d818      	bhi.n	800b4fc <UART_SetConfig+0x210>
 800b4ca:	2b80      	cmp	r3, #128	; 0x80
 800b4cc:	d00a      	beq.n	800b4e4 <UART_SetConfig+0x1f8>
 800b4ce:	2b80      	cmp	r3, #128	; 0x80
 800b4d0:	d814      	bhi.n	800b4fc <UART_SetConfig+0x210>
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d002      	beq.n	800b4dc <UART_SetConfig+0x1f0>
 800b4d6:	2b40      	cmp	r3, #64	; 0x40
 800b4d8:	d008      	beq.n	800b4ec <UART_SetConfig+0x200>
 800b4da:	e00f      	b.n	800b4fc <UART_SetConfig+0x210>
 800b4dc:	2300      	movs	r3, #0
 800b4de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b4e2:	e082      	b.n	800b5ea <UART_SetConfig+0x2fe>
 800b4e4:	2302      	movs	r3, #2
 800b4e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b4ea:	e07e      	b.n	800b5ea <UART_SetConfig+0x2fe>
 800b4ec:	2304      	movs	r3, #4
 800b4ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b4f2:	e07a      	b.n	800b5ea <UART_SetConfig+0x2fe>
 800b4f4:	2308      	movs	r3, #8
 800b4f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b4fa:	e076      	b.n	800b5ea <UART_SetConfig+0x2fe>
 800b4fc:	2310      	movs	r3, #16
 800b4fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b502:	e072      	b.n	800b5ea <UART_SetConfig+0x2fe>
 800b504:	697b      	ldr	r3, [r7, #20]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	4a35      	ldr	r2, [pc, #212]	; (800b5e0 <UART_SetConfig+0x2f4>)
 800b50a:	4293      	cmp	r3, r2
 800b50c:	d12a      	bne.n	800b564 <UART_SetConfig+0x278>
 800b50e:	4b30      	ldr	r3, [pc, #192]	; (800b5d0 <UART_SetConfig+0x2e4>)
 800b510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b514:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b518:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b51c:	d01a      	beq.n	800b554 <UART_SetConfig+0x268>
 800b51e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b522:	d81b      	bhi.n	800b55c <UART_SetConfig+0x270>
 800b524:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b528:	d00c      	beq.n	800b544 <UART_SetConfig+0x258>
 800b52a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b52e:	d815      	bhi.n	800b55c <UART_SetConfig+0x270>
 800b530:	2b00      	cmp	r3, #0
 800b532:	d003      	beq.n	800b53c <UART_SetConfig+0x250>
 800b534:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b538:	d008      	beq.n	800b54c <UART_SetConfig+0x260>
 800b53a:	e00f      	b.n	800b55c <UART_SetConfig+0x270>
 800b53c:	2300      	movs	r3, #0
 800b53e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b542:	e052      	b.n	800b5ea <UART_SetConfig+0x2fe>
 800b544:	2302      	movs	r3, #2
 800b546:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b54a:	e04e      	b.n	800b5ea <UART_SetConfig+0x2fe>
 800b54c:	2304      	movs	r3, #4
 800b54e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b552:	e04a      	b.n	800b5ea <UART_SetConfig+0x2fe>
 800b554:	2308      	movs	r3, #8
 800b556:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b55a:	e046      	b.n	800b5ea <UART_SetConfig+0x2fe>
 800b55c:	2310      	movs	r3, #16
 800b55e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b562:	e042      	b.n	800b5ea <UART_SetConfig+0x2fe>
 800b564:	697b      	ldr	r3, [r7, #20]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	4a17      	ldr	r2, [pc, #92]	; (800b5c8 <UART_SetConfig+0x2dc>)
 800b56a:	4293      	cmp	r3, r2
 800b56c:	d13a      	bne.n	800b5e4 <UART_SetConfig+0x2f8>
 800b56e:	4b18      	ldr	r3, [pc, #96]	; (800b5d0 <UART_SetConfig+0x2e4>)
 800b570:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b574:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b578:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b57c:	d01a      	beq.n	800b5b4 <UART_SetConfig+0x2c8>
 800b57e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b582:	d81b      	bhi.n	800b5bc <UART_SetConfig+0x2d0>
 800b584:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b588:	d00c      	beq.n	800b5a4 <UART_SetConfig+0x2b8>
 800b58a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b58e:	d815      	bhi.n	800b5bc <UART_SetConfig+0x2d0>
 800b590:	2b00      	cmp	r3, #0
 800b592:	d003      	beq.n	800b59c <UART_SetConfig+0x2b0>
 800b594:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b598:	d008      	beq.n	800b5ac <UART_SetConfig+0x2c0>
 800b59a:	e00f      	b.n	800b5bc <UART_SetConfig+0x2d0>
 800b59c:	2300      	movs	r3, #0
 800b59e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b5a2:	e022      	b.n	800b5ea <UART_SetConfig+0x2fe>
 800b5a4:	2302      	movs	r3, #2
 800b5a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b5aa:	e01e      	b.n	800b5ea <UART_SetConfig+0x2fe>
 800b5ac:	2304      	movs	r3, #4
 800b5ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b5b2:	e01a      	b.n	800b5ea <UART_SetConfig+0x2fe>
 800b5b4:	2308      	movs	r3, #8
 800b5b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b5ba:	e016      	b.n	800b5ea <UART_SetConfig+0x2fe>
 800b5bc:	2310      	movs	r3, #16
 800b5be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b5c2:	e012      	b.n	800b5ea <UART_SetConfig+0x2fe>
 800b5c4:	cfff69f3 	.word	0xcfff69f3
 800b5c8:	40008000 	.word	0x40008000
 800b5cc:	40013800 	.word	0x40013800
 800b5d0:	40021000 	.word	0x40021000
 800b5d4:	40004400 	.word	0x40004400
 800b5d8:	40004800 	.word	0x40004800
 800b5dc:	40004c00 	.word	0x40004c00
 800b5e0:	40005000 	.word	0x40005000
 800b5e4:	2310      	movs	r3, #16
 800b5e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b5ea:	697b      	ldr	r3, [r7, #20]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	4aae      	ldr	r2, [pc, #696]	; (800b8a8 <UART_SetConfig+0x5bc>)
 800b5f0:	4293      	cmp	r3, r2
 800b5f2:	f040 8097 	bne.w	800b724 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b5f6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b5fa:	2b08      	cmp	r3, #8
 800b5fc:	d823      	bhi.n	800b646 <UART_SetConfig+0x35a>
 800b5fe:	a201      	add	r2, pc, #4	; (adr r2, 800b604 <UART_SetConfig+0x318>)
 800b600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b604:	0800b629 	.word	0x0800b629
 800b608:	0800b647 	.word	0x0800b647
 800b60c:	0800b631 	.word	0x0800b631
 800b610:	0800b647 	.word	0x0800b647
 800b614:	0800b637 	.word	0x0800b637
 800b618:	0800b647 	.word	0x0800b647
 800b61c:	0800b647 	.word	0x0800b647
 800b620:	0800b647 	.word	0x0800b647
 800b624:	0800b63f 	.word	0x0800b63f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b628:	f7fa feb8 	bl	800639c <HAL_RCC_GetPCLK1Freq>
 800b62c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b62e:	e010      	b.n	800b652 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b630:	4b9e      	ldr	r3, [pc, #632]	; (800b8ac <UART_SetConfig+0x5c0>)
 800b632:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b634:	e00d      	b.n	800b652 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b636:	f7fa fe19 	bl	800626c <HAL_RCC_GetSysClockFreq>
 800b63a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b63c:	e009      	b.n	800b652 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b63e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b642:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b644:	e005      	b.n	800b652 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800b646:	2300      	movs	r3, #0
 800b648:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b64a:	2301      	movs	r3, #1
 800b64c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b650:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b654:	2b00      	cmp	r3, #0
 800b656:	f000 8130 	beq.w	800b8ba <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b65a:	697b      	ldr	r3, [r7, #20]
 800b65c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b65e:	4a94      	ldr	r2, [pc, #592]	; (800b8b0 <UART_SetConfig+0x5c4>)
 800b660:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b664:	461a      	mov	r2, r3
 800b666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b668:	fbb3 f3f2 	udiv	r3, r3, r2
 800b66c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b66e:	697b      	ldr	r3, [r7, #20]
 800b670:	685a      	ldr	r2, [r3, #4]
 800b672:	4613      	mov	r3, r2
 800b674:	005b      	lsls	r3, r3, #1
 800b676:	4413      	add	r3, r2
 800b678:	69ba      	ldr	r2, [r7, #24]
 800b67a:	429a      	cmp	r2, r3
 800b67c:	d305      	bcc.n	800b68a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b67e:	697b      	ldr	r3, [r7, #20]
 800b680:	685b      	ldr	r3, [r3, #4]
 800b682:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b684:	69ba      	ldr	r2, [r7, #24]
 800b686:	429a      	cmp	r2, r3
 800b688:	d903      	bls.n	800b692 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800b68a:	2301      	movs	r3, #1
 800b68c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b690:	e113      	b.n	800b8ba <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b694:	2200      	movs	r2, #0
 800b696:	60bb      	str	r3, [r7, #8]
 800b698:	60fa      	str	r2, [r7, #12]
 800b69a:	697b      	ldr	r3, [r7, #20]
 800b69c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b69e:	4a84      	ldr	r2, [pc, #528]	; (800b8b0 <UART_SetConfig+0x5c4>)
 800b6a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b6a4:	b29b      	uxth	r3, r3
 800b6a6:	2200      	movs	r2, #0
 800b6a8:	603b      	str	r3, [r7, #0]
 800b6aa:	607a      	str	r2, [r7, #4]
 800b6ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b6b0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b6b4:	f7f5 fa90 	bl	8000bd8 <__aeabi_uldivmod>
 800b6b8:	4602      	mov	r2, r0
 800b6ba:	460b      	mov	r3, r1
 800b6bc:	4610      	mov	r0, r2
 800b6be:	4619      	mov	r1, r3
 800b6c0:	f04f 0200 	mov.w	r2, #0
 800b6c4:	f04f 0300 	mov.w	r3, #0
 800b6c8:	020b      	lsls	r3, r1, #8
 800b6ca:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b6ce:	0202      	lsls	r2, r0, #8
 800b6d0:	6979      	ldr	r1, [r7, #20]
 800b6d2:	6849      	ldr	r1, [r1, #4]
 800b6d4:	0849      	lsrs	r1, r1, #1
 800b6d6:	2000      	movs	r0, #0
 800b6d8:	460c      	mov	r4, r1
 800b6da:	4605      	mov	r5, r0
 800b6dc:	eb12 0804 	adds.w	r8, r2, r4
 800b6e0:	eb43 0905 	adc.w	r9, r3, r5
 800b6e4:	697b      	ldr	r3, [r7, #20]
 800b6e6:	685b      	ldr	r3, [r3, #4]
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	469a      	mov	sl, r3
 800b6ec:	4693      	mov	fp, r2
 800b6ee:	4652      	mov	r2, sl
 800b6f0:	465b      	mov	r3, fp
 800b6f2:	4640      	mov	r0, r8
 800b6f4:	4649      	mov	r1, r9
 800b6f6:	f7f5 fa6f 	bl	8000bd8 <__aeabi_uldivmod>
 800b6fa:	4602      	mov	r2, r0
 800b6fc:	460b      	mov	r3, r1
 800b6fe:	4613      	mov	r3, r2
 800b700:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b702:	6a3b      	ldr	r3, [r7, #32]
 800b704:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b708:	d308      	bcc.n	800b71c <UART_SetConfig+0x430>
 800b70a:	6a3b      	ldr	r3, [r7, #32]
 800b70c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b710:	d204      	bcs.n	800b71c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800b712:	697b      	ldr	r3, [r7, #20]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	6a3a      	ldr	r2, [r7, #32]
 800b718:	60da      	str	r2, [r3, #12]
 800b71a:	e0ce      	b.n	800b8ba <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800b71c:	2301      	movs	r3, #1
 800b71e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b722:	e0ca      	b.n	800b8ba <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b724:	697b      	ldr	r3, [r7, #20]
 800b726:	69db      	ldr	r3, [r3, #28]
 800b728:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b72c:	d166      	bne.n	800b7fc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800b72e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b732:	2b08      	cmp	r3, #8
 800b734:	d827      	bhi.n	800b786 <UART_SetConfig+0x49a>
 800b736:	a201      	add	r2, pc, #4	; (adr r2, 800b73c <UART_SetConfig+0x450>)
 800b738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b73c:	0800b761 	.word	0x0800b761
 800b740:	0800b769 	.word	0x0800b769
 800b744:	0800b771 	.word	0x0800b771
 800b748:	0800b787 	.word	0x0800b787
 800b74c:	0800b777 	.word	0x0800b777
 800b750:	0800b787 	.word	0x0800b787
 800b754:	0800b787 	.word	0x0800b787
 800b758:	0800b787 	.word	0x0800b787
 800b75c:	0800b77f 	.word	0x0800b77f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b760:	f7fa fe1c 	bl	800639c <HAL_RCC_GetPCLK1Freq>
 800b764:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b766:	e014      	b.n	800b792 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b768:	f7fa fe2e 	bl	80063c8 <HAL_RCC_GetPCLK2Freq>
 800b76c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b76e:	e010      	b.n	800b792 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b770:	4b4e      	ldr	r3, [pc, #312]	; (800b8ac <UART_SetConfig+0x5c0>)
 800b772:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b774:	e00d      	b.n	800b792 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b776:	f7fa fd79 	bl	800626c <HAL_RCC_GetSysClockFreq>
 800b77a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b77c:	e009      	b.n	800b792 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b77e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b782:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b784:	e005      	b.n	800b792 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800b786:	2300      	movs	r3, #0
 800b788:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b78a:	2301      	movs	r3, #1
 800b78c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b790:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b794:	2b00      	cmp	r3, #0
 800b796:	f000 8090 	beq.w	800b8ba <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b79a:	697b      	ldr	r3, [r7, #20]
 800b79c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b79e:	4a44      	ldr	r2, [pc, #272]	; (800b8b0 <UART_SetConfig+0x5c4>)
 800b7a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b7a4:	461a      	mov	r2, r3
 800b7a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7a8:	fbb3 f3f2 	udiv	r3, r3, r2
 800b7ac:	005a      	lsls	r2, r3, #1
 800b7ae:	697b      	ldr	r3, [r7, #20]
 800b7b0:	685b      	ldr	r3, [r3, #4]
 800b7b2:	085b      	lsrs	r3, r3, #1
 800b7b4:	441a      	add	r2, r3
 800b7b6:	697b      	ldr	r3, [r7, #20]
 800b7b8:	685b      	ldr	r3, [r3, #4]
 800b7ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7be:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b7c0:	6a3b      	ldr	r3, [r7, #32]
 800b7c2:	2b0f      	cmp	r3, #15
 800b7c4:	d916      	bls.n	800b7f4 <UART_SetConfig+0x508>
 800b7c6:	6a3b      	ldr	r3, [r7, #32]
 800b7c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b7cc:	d212      	bcs.n	800b7f4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b7ce:	6a3b      	ldr	r3, [r7, #32]
 800b7d0:	b29b      	uxth	r3, r3
 800b7d2:	f023 030f 	bic.w	r3, r3, #15
 800b7d6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b7d8:	6a3b      	ldr	r3, [r7, #32]
 800b7da:	085b      	lsrs	r3, r3, #1
 800b7dc:	b29b      	uxth	r3, r3
 800b7de:	f003 0307 	and.w	r3, r3, #7
 800b7e2:	b29a      	uxth	r2, r3
 800b7e4:	8bfb      	ldrh	r3, [r7, #30]
 800b7e6:	4313      	orrs	r3, r2
 800b7e8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800b7ea:	697b      	ldr	r3, [r7, #20]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	8bfa      	ldrh	r2, [r7, #30]
 800b7f0:	60da      	str	r2, [r3, #12]
 800b7f2:	e062      	b.n	800b8ba <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800b7f4:	2301      	movs	r3, #1
 800b7f6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b7fa:	e05e      	b.n	800b8ba <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b7fc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b800:	2b08      	cmp	r3, #8
 800b802:	d828      	bhi.n	800b856 <UART_SetConfig+0x56a>
 800b804:	a201      	add	r2, pc, #4	; (adr r2, 800b80c <UART_SetConfig+0x520>)
 800b806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b80a:	bf00      	nop
 800b80c:	0800b831 	.word	0x0800b831
 800b810:	0800b839 	.word	0x0800b839
 800b814:	0800b841 	.word	0x0800b841
 800b818:	0800b857 	.word	0x0800b857
 800b81c:	0800b847 	.word	0x0800b847
 800b820:	0800b857 	.word	0x0800b857
 800b824:	0800b857 	.word	0x0800b857
 800b828:	0800b857 	.word	0x0800b857
 800b82c:	0800b84f 	.word	0x0800b84f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b830:	f7fa fdb4 	bl	800639c <HAL_RCC_GetPCLK1Freq>
 800b834:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b836:	e014      	b.n	800b862 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b838:	f7fa fdc6 	bl	80063c8 <HAL_RCC_GetPCLK2Freq>
 800b83c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b83e:	e010      	b.n	800b862 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b840:	4b1a      	ldr	r3, [pc, #104]	; (800b8ac <UART_SetConfig+0x5c0>)
 800b842:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b844:	e00d      	b.n	800b862 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b846:	f7fa fd11 	bl	800626c <HAL_RCC_GetSysClockFreq>
 800b84a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b84c:	e009      	b.n	800b862 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b84e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b852:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b854:	e005      	b.n	800b862 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800b856:	2300      	movs	r3, #0
 800b858:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b85a:	2301      	movs	r3, #1
 800b85c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b860:	bf00      	nop
    }

    if (pclk != 0U)
 800b862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b864:	2b00      	cmp	r3, #0
 800b866:	d028      	beq.n	800b8ba <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b868:	697b      	ldr	r3, [r7, #20]
 800b86a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b86c:	4a10      	ldr	r2, [pc, #64]	; (800b8b0 <UART_SetConfig+0x5c4>)
 800b86e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b872:	461a      	mov	r2, r3
 800b874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b876:	fbb3 f2f2 	udiv	r2, r3, r2
 800b87a:	697b      	ldr	r3, [r7, #20]
 800b87c:	685b      	ldr	r3, [r3, #4]
 800b87e:	085b      	lsrs	r3, r3, #1
 800b880:	441a      	add	r2, r3
 800b882:	697b      	ldr	r3, [r7, #20]
 800b884:	685b      	ldr	r3, [r3, #4]
 800b886:	fbb2 f3f3 	udiv	r3, r2, r3
 800b88a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b88c:	6a3b      	ldr	r3, [r7, #32]
 800b88e:	2b0f      	cmp	r3, #15
 800b890:	d910      	bls.n	800b8b4 <UART_SetConfig+0x5c8>
 800b892:	6a3b      	ldr	r3, [r7, #32]
 800b894:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b898:	d20c      	bcs.n	800b8b4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b89a:	6a3b      	ldr	r3, [r7, #32]
 800b89c:	b29a      	uxth	r2, r3
 800b89e:	697b      	ldr	r3, [r7, #20]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	60da      	str	r2, [r3, #12]
 800b8a4:	e009      	b.n	800b8ba <UART_SetConfig+0x5ce>
 800b8a6:	bf00      	nop
 800b8a8:	40008000 	.word	0x40008000
 800b8ac:	00f42400 	.word	0x00f42400
 800b8b0:	0800ec34 	.word	0x0800ec34
      }
      else
      {
        ret = HAL_ERROR;
 800b8b4:	2301      	movs	r3, #1
 800b8b6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b8ba:	697b      	ldr	r3, [r7, #20]
 800b8bc:	2201      	movs	r2, #1
 800b8be:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b8c2:	697b      	ldr	r3, [r7, #20]
 800b8c4:	2201      	movs	r2, #1
 800b8c6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b8ca:	697b      	ldr	r3, [r7, #20]
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800b8d0:	697b      	ldr	r3, [r7, #20]
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800b8d6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800b8da:	4618      	mov	r0, r3
 800b8dc:	3730      	adds	r7, #48	; 0x30
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800b8e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b8e4:	b480      	push	{r7}
 800b8e6:	b083      	sub	sp, #12
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8f0:	f003 0301 	and.w	r3, r3, #1
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d00a      	beq.n	800b90e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	685b      	ldr	r3, [r3, #4]
 800b8fe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	430a      	orrs	r2, r1
 800b90c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b912:	f003 0302 	and.w	r3, r3, #2
 800b916:	2b00      	cmp	r3, #0
 800b918:	d00a      	beq.n	800b930 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	685b      	ldr	r3, [r3, #4]
 800b920:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	430a      	orrs	r2, r1
 800b92e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b934:	f003 0304 	and.w	r3, r3, #4
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d00a      	beq.n	800b952 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	685b      	ldr	r3, [r3, #4]
 800b942:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	430a      	orrs	r2, r1
 800b950:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b956:	f003 0308 	and.w	r3, r3, #8
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d00a      	beq.n	800b974 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	685b      	ldr	r3, [r3, #4]
 800b964:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	430a      	orrs	r2, r1
 800b972:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b978:	f003 0310 	and.w	r3, r3, #16
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d00a      	beq.n	800b996 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	689b      	ldr	r3, [r3, #8]
 800b986:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	430a      	orrs	r2, r1
 800b994:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b99a:	f003 0320 	and.w	r3, r3, #32
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d00a      	beq.n	800b9b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	689b      	ldr	r3, [r3, #8]
 800b9a8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	430a      	orrs	r2, r1
 800b9b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d01a      	beq.n	800b9fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	685b      	ldr	r3, [r3, #4]
 800b9ca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	430a      	orrs	r2, r1
 800b9d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b9e2:	d10a      	bne.n	800b9fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	685b      	ldr	r3, [r3, #4]
 800b9ea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	430a      	orrs	r2, r1
 800b9f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d00a      	beq.n	800ba1c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	685b      	ldr	r3, [r3, #4]
 800ba0c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	430a      	orrs	r2, r1
 800ba1a:	605a      	str	r2, [r3, #4]
  }
}
 800ba1c:	bf00      	nop
 800ba1e:	370c      	adds	r7, #12
 800ba20:	46bd      	mov	sp, r7
 800ba22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba26:	4770      	bx	lr

0800ba28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b086      	sub	sp, #24
 800ba2c:	af02      	add	r7, sp, #8
 800ba2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	2200      	movs	r2, #0
 800ba34:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ba38:	f7f8 faba 	bl	8003fb0 <HAL_GetTick>
 800ba3c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	f003 0308 	and.w	r3, r3, #8
 800ba48:	2b08      	cmp	r3, #8
 800ba4a:	d10e      	bne.n	800ba6a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ba4c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ba50:	9300      	str	r3, [sp, #0]
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	2200      	movs	r2, #0
 800ba56:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ba5a:	6878      	ldr	r0, [r7, #4]
 800ba5c:	f000 f82f 	bl	800babe <UART_WaitOnFlagUntilTimeout>
 800ba60:	4603      	mov	r3, r0
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d001      	beq.n	800ba6a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ba66:	2303      	movs	r3, #3
 800ba68:	e025      	b.n	800bab6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	f003 0304 	and.w	r3, r3, #4
 800ba74:	2b04      	cmp	r3, #4
 800ba76:	d10e      	bne.n	800ba96 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ba78:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ba7c:	9300      	str	r3, [sp, #0]
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	2200      	movs	r2, #0
 800ba82:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ba86:	6878      	ldr	r0, [r7, #4]
 800ba88:	f000 f819 	bl	800babe <UART_WaitOnFlagUntilTimeout>
 800ba8c:	4603      	mov	r3, r0
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d001      	beq.n	800ba96 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ba92:	2303      	movs	r3, #3
 800ba94:	e00f      	b.n	800bab6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	2220      	movs	r2, #32
 800ba9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	2220      	movs	r2, #32
 800baa2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	2200      	movs	r2, #0
 800baaa:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	2200      	movs	r2, #0
 800bab0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bab4:	2300      	movs	r3, #0
}
 800bab6:	4618      	mov	r0, r3
 800bab8:	3710      	adds	r7, #16
 800baba:	46bd      	mov	sp, r7
 800babc:	bd80      	pop	{r7, pc}

0800babe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800babe:	b580      	push	{r7, lr}
 800bac0:	b09c      	sub	sp, #112	; 0x70
 800bac2:	af00      	add	r7, sp, #0
 800bac4:	60f8      	str	r0, [r7, #12]
 800bac6:	60b9      	str	r1, [r7, #8]
 800bac8:	603b      	str	r3, [r7, #0]
 800baca:	4613      	mov	r3, r2
 800bacc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bace:	e0a9      	b.n	800bc24 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bad0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bad2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bad6:	f000 80a5 	beq.w	800bc24 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bada:	f7f8 fa69 	bl	8003fb0 <HAL_GetTick>
 800bade:	4602      	mov	r2, r0
 800bae0:	683b      	ldr	r3, [r7, #0]
 800bae2:	1ad3      	subs	r3, r2, r3
 800bae4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800bae6:	429a      	cmp	r2, r3
 800bae8:	d302      	bcc.n	800baf0 <UART_WaitOnFlagUntilTimeout+0x32>
 800baea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800baec:	2b00      	cmp	r3, #0
 800baee:	d140      	bne.n	800bb72 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800baf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800baf8:	e853 3f00 	ldrex	r3, [r3]
 800bafc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800bafe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb00:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bb04:	667b      	str	r3, [r7, #100]	; 0x64
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	461a      	mov	r2, r3
 800bb0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bb0e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bb10:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb12:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bb14:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bb16:	e841 2300 	strex	r3, r2, [r1]
 800bb1a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800bb1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d1e6      	bne.n	800baf0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	3308      	adds	r3, #8
 800bb28:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb2c:	e853 3f00 	ldrex	r3, [r3]
 800bb30:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bb32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb34:	f023 0301 	bic.w	r3, r3, #1
 800bb38:	663b      	str	r3, [r7, #96]	; 0x60
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	3308      	adds	r3, #8
 800bb40:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bb42:	64ba      	str	r2, [r7, #72]	; 0x48
 800bb44:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb46:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bb48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bb4a:	e841 2300 	strex	r3, r2, [r1]
 800bb4e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800bb50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d1e5      	bne.n	800bb22 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	2220      	movs	r2, #32
 800bb5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	2220      	movs	r2, #32
 800bb62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	2200      	movs	r2, #0
 800bb6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800bb6e:	2303      	movs	r3, #3
 800bb70:	e069      	b.n	800bc46 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	f003 0304 	and.w	r3, r3, #4
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d051      	beq.n	800bc24 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	69db      	ldr	r3, [r3, #28]
 800bb86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bb8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bb8e:	d149      	bne.n	800bc24 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bb98:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bba2:	e853 3f00 	ldrex	r3, [r3]
 800bba6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbaa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bbae:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	461a      	mov	r2, r3
 800bbb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bbb8:	637b      	str	r3, [r7, #52]	; 0x34
 800bbba:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbbc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bbbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bbc0:	e841 2300 	strex	r3, r2, [r1]
 800bbc4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800bbc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d1e6      	bne.n	800bb9a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	3308      	adds	r3, #8
 800bbd2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbd4:	697b      	ldr	r3, [r7, #20]
 800bbd6:	e853 3f00 	ldrex	r3, [r3]
 800bbda:	613b      	str	r3, [r7, #16]
   return(result);
 800bbdc:	693b      	ldr	r3, [r7, #16]
 800bbde:	f023 0301 	bic.w	r3, r3, #1
 800bbe2:	66bb      	str	r3, [r7, #104]	; 0x68
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	3308      	adds	r3, #8
 800bbea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bbec:	623a      	str	r2, [r7, #32]
 800bbee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbf0:	69f9      	ldr	r1, [r7, #28]
 800bbf2:	6a3a      	ldr	r2, [r7, #32]
 800bbf4:	e841 2300 	strex	r3, r2, [r1]
 800bbf8:	61bb      	str	r3, [r7, #24]
   return(result);
 800bbfa:	69bb      	ldr	r3, [r7, #24]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d1e5      	bne.n	800bbcc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	2220      	movs	r2, #32
 800bc04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	2220      	movs	r2, #32
 800bc0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	2220      	movs	r2, #32
 800bc14:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	2200      	movs	r2, #0
 800bc1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800bc20:	2303      	movs	r3, #3
 800bc22:	e010      	b.n	800bc46 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	69da      	ldr	r2, [r3, #28]
 800bc2a:	68bb      	ldr	r3, [r7, #8]
 800bc2c:	4013      	ands	r3, r2
 800bc2e:	68ba      	ldr	r2, [r7, #8]
 800bc30:	429a      	cmp	r2, r3
 800bc32:	bf0c      	ite	eq
 800bc34:	2301      	moveq	r3, #1
 800bc36:	2300      	movne	r3, #0
 800bc38:	b2db      	uxtb	r3, r3
 800bc3a:	461a      	mov	r2, r3
 800bc3c:	79fb      	ldrb	r3, [r7, #7]
 800bc3e:	429a      	cmp	r2, r3
 800bc40:	f43f af46 	beq.w	800bad0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bc44:	2300      	movs	r3, #0
}
 800bc46:	4618      	mov	r0, r3
 800bc48:	3770      	adds	r7, #112	; 0x70
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	bd80      	pop	{r7, pc}

0800bc4e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800bc4e:	b480      	push	{r7}
 800bc50:	b085      	sub	sp, #20
 800bc52:	af00      	add	r7, sp, #0
 800bc54:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bc5c:	2b01      	cmp	r3, #1
 800bc5e:	d101      	bne.n	800bc64 <HAL_UARTEx_DisableFifoMode+0x16>
 800bc60:	2302      	movs	r3, #2
 800bc62:	e027      	b.n	800bcb4 <HAL_UARTEx_DisableFifoMode+0x66>
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	2201      	movs	r2, #1
 800bc68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	2224      	movs	r2, #36	; 0x24
 800bc70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	681a      	ldr	r2, [r3, #0]
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	f022 0201 	bic.w	r2, r2, #1
 800bc8a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800bc92:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	2200      	movs	r2, #0
 800bc98:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	68fa      	ldr	r2, [r7, #12]
 800bca0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	2220      	movs	r2, #32
 800bca6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	2200      	movs	r2, #0
 800bcae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bcb2:	2300      	movs	r3, #0
}
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	3714      	adds	r7, #20
 800bcb8:	46bd      	mov	sp, r7
 800bcba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcbe:	4770      	bx	lr

0800bcc0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	b084      	sub	sp, #16
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	6078      	str	r0, [r7, #4]
 800bcc8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bcd0:	2b01      	cmp	r3, #1
 800bcd2:	d101      	bne.n	800bcd8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bcd4:	2302      	movs	r3, #2
 800bcd6:	e02d      	b.n	800bd34 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	2201      	movs	r2, #1
 800bcdc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	2224      	movs	r2, #36	; 0x24
 800bce4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	681a      	ldr	r2, [r3, #0]
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	f022 0201 	bic.w	r2, r2, #1
 800bcfe:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	689b      	ldr	r3, [r3, #8]
 800bd06:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	683a      	ldr	r2, [r7, #0]
 800bd10:	430a      	orrs	r2, r1
 800bd12:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bd14:	6878      	ldr	r0, [r7, #4]
 800bd16:	f000 f84f 	bl	800bdb8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	68fa      	ldr	r2, [r7, #12]
 800bd20:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	2220      	movs	r2, #32
 800bd26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	2200      	movs	r2, #0
 800bd2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bd32:	2300      	movs	r3, #0
}
 800bd34:	4618      	mov	r0, r3
 800bd36:	3710      	adds	r7, #16
 800bd38:	46bd      	mov	sp, r7
 800bd3a:	bd80      	pop	{r7, pc}

0800bd3c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b084      	sub	sp, #16
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
 800bd44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bd4c:	2b01      	cmp	r3, #1
 800bd4e:	d101      	bne.n	800bd54 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bd50:	2302      	movs	r3, #2
 800bd52:	e02d      	b.n	800bdb0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	2201      	movs	r2, #1
 800bd58:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	2224      	movs	r2, #36	; 0x24
 800bd60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	681a      	ldr	r2, [r3, #0]
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	f022 0201 	bic.w	r2, r2, #1
 800bd7a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	689b      	ldr	r3, [r3, #8]
 800bd82:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	683a      	ldr	r2, [r7, #0]
 800bd8c:	430a      	orrs	r2, r1
 800bd8e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bd90:	6878      	ldr	r0, [r7, #4]
 800bd92:	f000 f811 	bl	800bdb8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	68fa      	ldr	r2, [r7, #12]
 800bd9c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	2220      	movs	r2, #32
 800bda2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	2200      	movs	r2, #0
 800bdaa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bdae:	2300      	movs	r3, #0
}
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	3710      	adds	r7, #16
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	bd80      	pop	{r7, pc}

0800bdb8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bdb8:	b480      	push	{r7}
 800bdba:	b085      	sub	sp, #20
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d108      	bne.n	800bdda <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	2201      	movs	r2, #1
 800bdcc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	2201      	movs	r2, #1
 800bdd4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bdd8:	e031      	b.n	800be3e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bdda:	2308      	movs	r3, #8
 800bddc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bdde:	2308      	movs	r3, #8
 800bde0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	689b      	ldr	r3, [r3, #8]
 800bde8:	0e5b      	lsrs	r3, r3, #25
 800bdea:	b2db      	uxtb	r3, r3
 800bdec:	f003 0307 	and.w	r3, r3, #7
 800bdf0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	689b      	ldr	r3, [r3, #8]
 800bdf8:	0f5b      	lsrs	r3, r3, #29
 800bdfa:	b2db      	uxtb	r3, r3
 800bdfc:	f003 0307 	and.w	r3, r3, #7
 800be00:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800be02:	7bbb      	ldrb	r3, [r7, #14]
 800be04:	7b3a      	ldrb	r2, [r7, #12]
 800be06:	4911      	ldr	r1, [pc, #68]	; (800be4c <UARTEx_SetNbDataToProcess+0x94>)
 800be08:	5c8a      	ldrb	r2, [r1, r2]
 800be0a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800be0e:	7b3a      	ldrb	r2, [r7, #12]
 800be10:	490f      	ldr	r1, [pc, #60]	; (800be50 <UARTEx_SetNbDataToProcess+0x98>)
 800be12:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800be14:	fb93 f3f2 	sdiv	r3, r3, r2
 800be18:	b29a      	uxth	r2, r3
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800be20:	7bfb      	ldrb	r3, [r7, #15]
 800be22:	7b7a      	ldrb	r2, [r7, #13]
 800be24:	4909      	ldr	r1, [pc, #36]	; (800be4c <UARTEx_SetNbDataToProcess+0x94>)
 800be26:	5c8a      	ldrb	r2, [r1, r2]
 800be28:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800be2c:	7b7a      	ldrb	r2, [r7, #13]
 800be2e:	4908      	ldr	r1, [pc, #32]	; (800be50 <UARTEx_SetNbDataToProcess+0x98>)
 800be30:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800be32:	fb93 f3f2 	sdiv	r3, r3, r2
 800be36:	b29a      	uxth	r2, r3
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800be3e:	bf00      	nop
 800be40:	3714      	adds	r7, #20
 800be42:	46bd      	mov	sp, r7
 800be44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be48:	4770      	bx	lr
 800be4a:	bf00      	nop
 800be4c:	0800ec4c 	.word	0x0800ec4c
 800be50:	0800ec54 	.word	0x0800ec54

0800be54 <__errno>:
 800be54:	4b01      	ldr	r3, [pc, #4]	; (800be5c <__errno+0x8>)
 800be56:	6818      	ldr	r0, [r3, #0]
 800be58:	4770      	bx	lr
 800be5a:	bf00      	nop
 800be5c:	20000020 	.word	0x20000020

0800be60 <__libc_init_array>:
 800be60:	b570      	push	{r4, r5, r6, lr}
 800be62:	4d0d      	ldr	r5, [pc, #52]	; (800be98 <__libc_init_array+0x38>)
 800be64:	4c0d      	ldr	r4, [pc, #52]	; (800be9c <__libc_init_array+0x3c>)
 800be66:	1b64      	subs	r4, r4, r5
 800be68:	10a4      	asrs	r4, r4, #2
 800be6a:	2600      	movs	r6, #0
 800be6c:	42a6      	cmp	r6, r4
 800be6e:	d109      	bne.n	800be84 <__libc_init_array+0x24>
 800be70:	4d0b      	ldr	r5, [pc, #44]	; (800bea0 <__libc_init_array+0x40>)
 800be72:	4c0c      	ldr	r4, [pc, #48]	; (800bea4 <__libc_init_array+0x44>)
 800be74:	f002 fdc2 	bl	800e9fc <_init>
 800be78:	1b64      	subs	r4, r4, r5
 800be7a:	10a4      	asrs	r4, r4, #2
 800be7c:	2600      	movs	r6, #0
 800be7e:	42a6      	cmp	r6, r4
 800be80:	d105      	bne.n	800be8e <__libc_init_array+0x2e>
 800be82:	bd70      	pop	{r4, r5, r6, pc}
 800be84:	f855 3b04 	ldr.w	r3, [r5], #4
 800be88:	4798      	blx	r3
 800be8a:	3601      	adds	r6, #1
 800be8c:	e7ee      	b.n	800be6c <__libc_init_array+0xc>
 800be8e:	f855 3b04 	ldr.w	r3, [r5], #4
 800be92:	4798      	blx	r3
 800be94:	3601      	adds	r6, #1
 800be96:	e7f2      	b.n	800be7e <__libc_init_array+0x1e>
 800be98:	0800f03c 	.word	0x0800f03c
 800be9c:	0800f03c 	.word	0x0800f03c
 800bea0:	0800f03c 	.word	0x0800f03c
 800bea4:	0800f040 	.word	0x0800f040

0800bea8 <malloc>:
 800bea8:	4b02      	ldr	r3, [pc, #8]	; (800beb4 <malloc+0xc>)
 800beaa:	4601      	mov	r1, r0
 800beac:	6818      	ldr	r0, [r3, #0]
 800beae:	f000 b877 	b.w	800bfa0 <_malloc_r>
 800beb2:	bf00      	nop
 800beb4:	20000020 	.word	0x20000020

0800beb8 <memset>:
 800beb8:	4402      	add	r2, r0
 800beba:	4603      	mov	r3, r0
 800bebc:	4293      	cmp	r3, r2
 800bebe:	d100      	bne.n	800bec2 <memset+0xa>
 800bec0:	4770      	bx	lr
 800bec2:	f803 1b01 	strb.w	r1, [r3], #1
 800bec6:	e7f9      	b.n	800bebc <memset+0x4>

0800bec8 <_free_r>:
 800bec8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800beca:	2900      	cmp	r1, #0
 800becc:	d044      	beq.n	800bf58 <_free_r+0x90>
 800bece:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bed2:	9001      	str	r0, [sp, #4]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	f1a1 0404 	sub.w	r4, r1, #4
 800beda:	bfb8      	it	lt
 800bedc:	18e4      	addlt	r4, r4, r3
 800bede:	f001 ff47 	bl	800dd70 <__malloc_lock>
 800bee2:	4a1e      	ldr	r2, [pc, #120]	; (800bf5c <_free_r+0x94>)
 800bee4:	9801      	ldr	r0, [sp, #4]
 800bee6:	6813      	ldr	r3, [r2, #0]
 800bee8:	b933      	cbnz	r3, 800bef8 <_free_r+0x30>
 800beea:	6063      	str	r3, [r4, #4]
 800beec:	6014      	str	r4, [r2, #0]
 800beee:	b003      	add	sp, #12
 800bef0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bef4:	f001 bf42 	b.w	800dd7c <__malloc_unlock>
 800bef8:	42a3      	cmp	r3, r4
 800befa:	d908      	bls.n	800bf0e <_free_r+0x46>
 800befc:	6825      	ldr	r5, [r4, #0]
 800befe:	1961      	adds	r1, r4, r5
 800bf00:	428b      	cmp	r3, r1
 800bf02:	bf01      	itttt	eq
 800bf04:	6819      	ldreq	r1, [r3, #0]
 800bf06:	685b      	ldreq	r3, [r3, #4]
 800bf08:	1949      	addeq	r1, r1, r5
 800bf0a:	6021      	streq	r1, [r4, #0]
 800bf0c:	e7ed      	b.n	800beea <_free_r+0x22>
 800bf0e:	461a      	mov	r2, r3
 800bf10:	685b      	ldr	r3, [r3, #4]
 800bf12:	b10b      	cbz	r3, 800bf18 <_free_r+0x50>
 800bf14:	42a3      	cmp	r3, r4
 800bf16:	d9fa      	bls.n	800bf0e <_free_r+0x46>
 800bf18:	6811      	ldr	r1, [r2, #0]
 800bf1a:	1855      	adds	r5, r2, r1
 800bf1c:	42a5      	cmp	r5, r4
 800bf1e:	d10b      	bne.n	800bf38 <_free_r+0x70>
 800bf20:	6824      	ldr	r4, [r4, #0]
 800bf22:	4421      	add	r1, r4
 800bf24:	1854      	adds	r4, r2, r1
 800bf26:	42a3      	cmp	r3, r4
 800bf28:	6011      	str	r1, [r2, #0]
 800bf2a:	d1e0      	bne.n	800beee <_free_r+0x26>
 800bf2c:	681c      	ldr	r4, [r3, #0]
 800bf2e:	685b      	ldr	r3, [r3, #4]
 800bf30:	6053      	str	r3, [r2, #4]
 800bf32:	4421      	add	r1, r4
 800bf34:	6011      	str	r1, [r2, #0]
 800bf36:	e7da      	b.n	800beee <_free_r+0x26>
 800bf38:	d902      	bls.n	800bf40 <_free_r+0x78>
 800bf3a:	230c      	movs	r3, #12
 800bf3c:	6003      	str	r3, [r0, #0]
 800bf3e:	e7d6      	b.n	800beee <_free_r+0x26>
 800bf40:	6825      	ldr	r5, [r4, #0]
 800bf42:	1961      	adds	r1, r4, r5
 800bf44:	428b      	cmp	r3, r1
 800bf46:	bf04      	itt	eq
 800bf48:	6819      	ldreq	r1, [r3, #0]
 800bf4a:	685b      	ldreq	r3, [r3, #4]
 800bf4c:	6063      	str	r3, [r4, #4]
 800bf4e:	bf04      	itt	eq
 800bf50:	1949      	addeq	r1, r1, r5
 800bf52:	6021      	streq	r1, [r4, #0]
 800bf54:	6054      	str	r4, [r2, #4]
 800bf56:	e7ca      	b.n	800beee <_free_r+0x26>
 800bf58:	b003      	add	sp, #12
 800bf5a:	bd30      	pop	{r4, r5, pc}
 800bf5c:	20000864 	.word	0x20000864

0800bf60 <sbrk_aligned>:
 800bf60:	b570      	push	{r4, r5, r6, lr}
 800bf62:	4e0e      	ldr	r6, [pc, #56]	; (800bf9c <sbrk_aligned+0x3c>)
 800bf64:	460c      	mov	r4, r1
 800bf66:	6831      	ldr	r1, [r6, #0]
 800bf68:	4605      	mov	r5, r0
 800bf6a:	b911      	cbnz	r1, 800bf72 <sbrk_aligned+0x12>
 800bf6c:	f000 fd84 	bl	800ca78 <_sbrk_r>
 800bf70:	6030      	str	r0, [r6, #0]
 800bf72:	4621      	mov	r1, r4
 800bf74:	4628      	mov	r0, r5
 800bf76:	f000 fd7f 	bl	800ca78 <_sbrk_r>
 800bf7a:	1c43      	adds	r3, r0, #1
 800bf7c:	d00a      	beq.n	800bf94 <sbrk_aligned+0x34>
 800bf7e:	1cc4      	adds	r4, r0, #3
 800bf80:	f024 0403 	bic.w	r4, r4, #3
 800bf84:	42a0      	cmp	r0, r4
 800bf86:	d007      	beq.n	800bf98 <sbrk_aligned+0x38>
 800bf88:	1a21      	subs	r1, r4, r0
 800bf8a:	4628      	mov	r0, r5
 800bf8c:	f000 fd74 	bl	800ca78 <_sbrk_r>
 800bf90:	3001      	adds	r0, #1
 800bf92:	d101      	bne.n	800bf98 <sbrk_aligned+0x38>
 800bf94:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800bf98:	4620      	mov	r0, r4
 800bf9a:	bd70      	pop	{r4, r5, r6, pc}
 800bf9c:	20000868 	.word	0x20000868

0800bfa0 <_malloc_r>:
 800bfa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfa4:	1ccd      	adds	r5, r1, #3
 800bfa6:	f025 0503 	bic.w	r5, r5, #3
 800bfaa:	3508      	adds	r5, #8
 800bfac:	2d0c      	cmp	r5, #12
 800bfae:	bf38      	it	cc
 800bfb0:	250c      	movcc	r5, #12
 800bfb2:	2d00      	cmp	r5, #0
 800bfb4:	4607      	mov	r7, r0
 800bfb6:	db01      	blt.n	800bfbc <_malloc_r+0x1c>
 800bfb8:	42a9      	cmp	r1, r5
 800bfba:	d905      	bls.n	800bfc8 <_malloc_r+0x28>
 800bfbc:	230c      	movs	r3, #12
 800bfbe:	603b      	str	r3, [r7, #0]
 800bfc0:	2600      	movs	r6, #0
 800bfc2:	4630      	mov	r0, r6
 800bfc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfc8:	4e2e      	ldr	r6, [pc, #184]	; (800c084 <_malloc_r+0xe4>)
 800bfca:	f001 fed1 	bl	800dd70 <__malloc_lock>
 800bfce:	6833      	ldr	r3, [r6, #0]
 800bfd0:	461c      	mov	r4, r3
 800bfd2:	bb34      	cbnz	r4, 800c022 <_malloc_r+0x82>
 800bfd4:	4629      	mov	r1, r5
 800bfd6:	4638      	mov	r0, r7
 800bfd8:	f7ff ffc2 	bl	800bf60 <sbrk_aligned>
 800bfdc:	1c43      	adds	r3, r0, #1
 800bfde:	4604      	mov	r4, r0
 800bfe0:	d14d      	bne.n	800c07e <_malloc_r+0xde>
 800bfe2:	6834      	ldr	r4, [r6, #0]
 800bfe4:	4626      	mov	r6, r4
 800bfe6:	2e00      	cmp	r6, #0
 800bfe8:	d140      	bne.n	800c06c <_malloc_r+0xcc>
 800bfea:	6823      	ldr	r3, [r4, #0]
 800bfec:	4631      	mov	r1, r6
 800bfee:	4638      	mov	r0, r7
 800bff0:	eb04 0803 	add.w	r8, r4, r3
 800bff4:	f000 fd40 	bl	800ca78 <_sbrk_r>
 800bff8:	4580      	cmp	r8, r0
 800bffa:	d13a      	bne.n	800c072 <_malloc_r+0xd2>
 800bffc:	6821      	ldr	r1, [r4, #0]
 800bffe:	3503      	adds	r5, #3
 800c000:	1a6d      	subs	r5, r5, r1
 800c002:	f025 0503 	bic.w	r5, r5, #3
 800c006:	3508      	adds	r5, #8
 800c008:	2d0c      	cmp	r5, #12
 800c00a:	bf38      	it	cc
 800c00c:	250c      	movcc	r5, #12
 800c00e:	4629      	mov	r1, r5
 800c010:	4638      	mov	r0, r7
 800c012:	f7ff ffa5 	bl	800bf60 <sbrk_aligned>
 800c016:	3001      	adds	r0, #1
 800c018:	d02b      	beq.n	800c072 <_malloc_r+0xd2>
 800c01a:	6823      	ldr	r3, [r4, #0]
 800c01c:	442b      	add	r3, r5
 800c01e:	6023      	str	r3, [r4, #0]
 800c020:	e00e      	b.n	800c040 <_malloc_r+0xa0>
 800c022:	6822      	ldr	r2, [r4, #0]
 800c024:	1b52      	subs	r2, r2, r5
 800c026:	d41e      	bmi.n	800c066 <_malloc_r+0xc6>
 800c028:	2a0b      	cmp	r2, #11
 800c02a:	d916      	bls.n	800c05a <_malloc_r+0xba>
 800c02c:	1961      	adds	r1, r4, r5
 800c02e:	42a3      	cmp	r3, r4
 800c030:	6025      	str	r5, [r4, #0]
 800c032:	bf18      	it	ne
 800c034:	6059      	strne	r1, [r3, #4]
 800c036:	6863      	ldr	r3, [r4, #4]
 800c038:	bf08      	it	eq
 800c03a:	6031      	streq	r1, [r6, #0]
 800c03c:	5162      	str	r2, [r4, r5]
 800c03e:	604b      	str	r3, [r1, #4]
 800c040:	4638      	mov	r0, r7
 800c042:	f104 060b 	add.w	r6, r4, #11
 800c046:	f001 fe99 	bl	800dd7c <__malloc_unlock>
 800c04a:	f026 0607 	bic.w	r6, r6, #7
 800c04e:	1d23      	adds	r3, r4, #4
 800c050:	1af2      	subs	r2, r6, r3
 800c052:	d0b6      	beq.n	800bfc2 <_malloc_r+0x22>
 800c054:	1b9b      	subs	r3, r3, r6
 800c056:	50a3      	str	r3, [r4, r2]
 800c058:	e7b3      	b.n	800bfc2 <_malloc_r+0x22>
 800c05a:	6862      	ldr	r2, [r4, #4]
 800c05c:	42a3      	cmp	r3, r4
 800c05e:	bf0c      	ite	eq
 800c060:	6032      	streq	r2, [r6, #0]
 800c062:	605a      	strne	r2, [r3, #4]
 800c064:	e7ec      	b.n	800c040 <_malloc_r+0xa0>
 800c066:	4623      	mov	r3, r4
 800c068:	6864      	ldr	r4, [r4, #4]
 800c06a:	e7b2      	b.n	800bfd2 <_malloc_r+0x32>
 800c06c:	4634      	mov	r4, r6
 800c06e:	6876      	ldr	r6, [r6, #4]
 800c070:	e7b9      	b.n	800bfe6 <_malloc_r+0x46>
 800c072:	230c      	movs	r3, #12
 800c074:	603b      	str	r3, [r7, #0]
 800c076:	4638      	mov	r0, r7
 800c078:	f001 fe80 	bl	800dd7c <__malloc_unlock>
 800c07c:	e7a1      	b.n	800bfc2 <_malloc_r+0x22>
 800c07e:	6025      	str	r5, [r4, #0]
 800c080:	e7de      	b.n	800c040 <_malloc_r+0xa0>
 800c082:	bf00      	nop
 800c084:	20000864 	.word	0x20000864

0800c088 <__cvt>:
 800c088:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c08c:	ec55 4b10 	vmov	r4, r5, d0
 800c090:	2d00      	cmp	r5, #0
 800c092:	460e      	mov	r6, r1
 800c094:	4619      	mov	r1, r3
 800c096:	462b      	mov	r3, r5
 800c098:	bfbb      	ittet	lt
 800c09a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c09e:	461d      	movlt	r5, r3
 800c0a0:	2300      	movge	r3, #0
 800c0a2:	232d      	movlt	r3, #45	; 0x2d
 800c0a4:	700b      	strb	r3, [r1, #0]
 800c0a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c0a8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c0ac:	4691      	mov	r9, r2
 800c0ae:	f023 0820 	bic.w	r8, r3, #32
 800c0b2:	bfbc      	itt	lt
 800c0b4:	4622      	movlt	r2, r4
 800c0b6:	4614      	movlt	r4, r2
 800c0b8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c0bc:	d005      	beq.n	800c0ca <__cvt+0x42>
 800c0be:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c0c2:	d100      	bne.n	800c0c6 <__cvt+0x3e>
 800c0c4:	3601      	adds	r6, #1
 800c0c6:	2102      	movs	r1, #2
 800c0c8:	e000      	b.n	800c0cc <__cvt+0x44>
 800c0ca:	2103      	movs	r1, #3
 800c0cc:	ab03      	add	r3, sp, #12
 800c0ce:	9301      	str	r3, [sp, #4]
 800c0d0:	ab02      	add	r3, sp, #8
 800c0d2:	9300      	str	r3, [sp, #0]
 800c0d4:	ec45 4b10 	vmov	d0, r4, r5
 800c0d8:	4653      	mov	r3, sl
 800c0da:	4632      	mov	r2, r6
 800c0dc:	f000 fe28 	bl	800cd30 <_dtoa_r>
 800c0e0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c0e4:	4607      	mov	r7, r0
 800c0e6:	d102      	bne.n	800c0ee <__cvt+0x66>
 800c0e8:	f019 0f01 	tst.w	r9, #1
 800c0ec:	d022      	beq.n	800c134 <__cvt+0xac>
 800c0ee:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c0f2:	eb07 0906 	add.w	r9, r7, r6
 800c0f6:	d110      	bne.n	800c11a <__cvt+0x92>
 800c0f8:	783b      	ldrb	r3, [r7, #0]
 800c0fa:	2b30      	cmp	r3, #48	; 0x30
 800c0fc:	d10a      	bne.n	800c114 <__cvt+0x8c>
 800c0fe:	2200      	movs	r2, #0
 800c100:	2300      	movs	r3, #0
 800c102:	4620      	mov	r0, r4
 800c104:	4629      	mov	r1, r5
 800c106:	f7f4 fcf7 	bl	8000af8 <__aeabi_dcmpeq>
 800c10a:	b918      	cbnz	r0, 800c114 <__cvt+0x8c>
 800c10c:	f1c6 0601 	rsb	r6, r6, #1
 800c110:	f8ca 6000 	str.w	r6, [sl]
 800c114:	f8da 3000 	ldr.w	r3, [sl]
 800c118:	4499      	add	r9, r3
 800c11a:	2200      	movs	r2, #0
 800c11c:	2300      	movs	r3, #0
 800c11e:	4620      	mov	r0, r4
 800c120:	4629      	mov	r1, r5
 800c122:	f7f4 fce9 	bl	8000af8 <__aeabi_dcmpeq>
 800c126:	b108      	cbz	r0, 800c12c <__cvt+0xa4>
 800c128:	f8cd 900c 	str.w	r9, [sp, #12]
 800c12c:	2230      	movs	r2, #48	; 0x30
 800c12e:	9b03      	ldr	r3, [sp, #12]
 800c130:	454b      	cmp	r3, r9
 800c132:	d307      	bcc.n	800c144 <__cvt+0xbc>
 800c134:	9b03      	ldr	r3, [sp, #12]
 800c136:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c138:	1bdb      	subs	r3, r3, r7
 800c13a:	4638      	mov	r0, r7
 800c13c:	6013      	str	r3, [r2, #0]
 800c13e:	b004      	add	sp, #16
 800c140:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c144:	1c59      	adds	r1, r3, #1
 800c146:	9103      	str	r1, [sp, #12]
 800c148:	701a      	strb	r2, [r3, #0]
 800c14a:	e7f0      	b.n	800c12e <__cvt+0xa6>

0800c14c <__exponent>:
 800c14c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c14e:	4603      	mov	r3, r0
 800c150:	2900      	cmp	r1, #0
 800c152:	bfb8      	it	lt
 800c154:	4249      	neglt	r1, r1
 800c156:	f803 2b02 	strb.w	r2, [r3], #2
 800c15a:	bfb4      	ite	lt
 800c15c:	222d      	movlt	r2, #45	; 0x2d
 800c15e:	222b      	movge	r2, #43	; 0x2b
 800c160:	2909      	cmp	r1, #9
 800c162:	7042      	strb	r2, [r0, #1]
 800c164:	dd2a      	ble.n	800c1bc <__exponent+0x70>
 800c166:	f10d 0407 	add.w	r4, sp, #7
 800c16a:	46a4      	mov	ip, r4
 800c16c:	270a      	movs	r7, #10
 800c16e:	46a6      	mov	lr, r4
 800c170:	460a      	mov	r2, r1
 800c172:	fb91 f6f7 	sdiv	r6, r1, r7
 800c176:	fb07 1516 	mls	r5, r7, r6, r1
 800c17a:	3530      	adds	r5, #48	; 0x30
 800c17c:	2a63      	cmp	r2, #99	; 0x63
 800c17e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800c182:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c186:	4631      	mov	r1, r6
 800c188:	dcf1      	bgt.n	800c16e <__exponent+0x22>
 800c18a:	3130      	adds	r1, #48	; 0x30
 800c18c:	f1ae 0502 	sub.w	r5, lr, #2
 800c190:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c194:	1c44      	adds	r4, r0, #1
 800c196:	4629      	mov	r1, r5
 800c198:	4561      	cmp	r1, ip
 800c19a:	d30a      	bcc.n	800c1b2 <__exponent+0x66>
 800c19c:	f10d 0209 	add.w	r2, sp, #9
 800c1a0:	eba2 020e 	sub.w	r2, r2, lr
 800c1a4:	4565      	cmp	r5, ip
 800c1a6:	bf88      	it	hi
 800c1a8:	2200      	movhi	r2, #0
 800c1aa:	4413      	add	r3, r2
 800c1ac:	1a18      	subs	r0, r3, r0
 800c1ae:	b003      	add	sp, #12
 800c1b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c1b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c1b6:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c1ba:	e7ed      	b.n	800c198 <__exponent+0x4c>
 800c1bc:	2330      	movs	r3, #48	; 0x30
 800c1be:	3130      	adds	r1, #48	; 0x30
 800c1c0:	7083      	strb	r3, [r0, #2]
 800c1c2:	70c1      	strb	r1, [r0, #3]
 800c1c4:	1d03      	adds	r3, r0, #4
 800c1c6:	e7f1      	b.n	800c1ac <__exponent+0x60>

0800c1c8 <_printf_float>:
 800c1c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1cc:	ed2d 8b02 	vpush	{d8}
 800c1d0:	b08d      	sub	sp, #52	; 0x34
 800c1d2:	460c      	mov	r4, r1
 800c1d4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c1d8:	4616      	mov	r6, r2
 800c1da:	461f      	mov	r7, r3
 800c1dc:	4605      	mov	r5, r0
 800c1de:	f001 fd4d 	bl	800dc7c <_localeconv_r>
 800c1e2:	f8d0 a000 	ldr.w	sl, [r0]
 800c1e6:	4650      	mov	r0, sl
 800c1e8:	f7f4 f80a 	bl	8000200 <strlen>
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	930a      	str	r3, [sp, #40]	; 0x28
 800c1f0:	6823      	ldr	r3, [r4, #0]
 800c1f2:	9305      	str	r3, [sp, #20]
 800c1f4:	f8d8 3000 	ldr.w	r3, [r8]
 800c1f8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c1fc:	3307      	adds	r3, #7
 800c1fe:	f023 0307 	bic.w	r3, r3, #7
 800c202:	f103 0208 	add.w	r2, r3, #8
 800c206:	f8c8 2000 	str.w	r2, [r8]
 800c20a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c20e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c212:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c216:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c21a:	9307      	str	r3, [sp, #28]
 800c21c:	f8cd 8018 	str.w	r8, [sp, #24]
 800c220:	ee08 0a10 	vmov	s16, r0
 800c224:	4b9f      	ldr	r3, [pc, #636]	; (800c4a4 <_printf_float+0x2dc>)
 800c226:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c22a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c22e:	f7f4 fc95 	bl	8000b5c <__aeabi_dcmpun>
 800c232:	bb88      	cbnz	r0, 800c298 <_printf_float+0xd0>
 800c234:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c238:	4b9a      	ldr	r3, [pc, #616]	; (800c4a4 <_printf_float+0x2dc>)
 800c23a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c23e:	f7f4 fc6f 	bl	8000b20 <__aeabi_dcmple>
 800c242:	bb48      	cbnz	r0, 800c298 <_printf_float+0xd0>
 800c244:	2200      	movs	r2, #0
 800c246:	2300      	movs	r3, #0
 800c248:	4640      	mov	r0, r8
 800c24a:	4649      	mov	r1, r9
 800c24c:	f7f4 fc5e 	bl	8000b0c <__aeabi_dcmplt>
 800c250:	b110      	cbz	r0, 800c258 <_printf_float+0x90>
 800c252:	232d      	movs	r3, #45	; 0x2d
 800c254:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c258:	4b93      	ldr	r3, [pc, #588]	; (800c4a8 <_printf_float+0x2e0>)
 800c25a:	4894      	ldr	r0, [pc, #592]	; (800c4ac <_printf_float+0x2e4>)
 800c25c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c260:	bf94      	ite	ls
 800c262:	4698      	movls	r8, r3
 800c264:	4680      	movhi	r8, r0
 800c266:	2303      	movs	r3, #3
 800c268:	6123      	str	r3, [r4, #16]
 800c26a:	9b05      	ldr	r3, [sp, #20]
 800c26c:	f023 0204 	bic.w	r2, r3, #4
 800c270:	6022      	str	r2, [r4, #0]
 800c272:	f04f 0900 	mov.w	r9, #0
 800c276:	9700      	str	r7, [sp, #0]
 800c278:	4633      	mov	r3, r6
 800c27a:	aa0b      	add	r2, sp, #44	; 0x2c
 800c27c:	4621      	mov	r1, r4
 800c27e:	4628      	mov	r0, r5
 800c280:	f000 f9d8 	bl	800c634 <_printf_common>
 800c284:	3001      	adds	r0, #1
 800c286:	f040 8090 	bne.w	800c3aa <_printf_float+0x1e2>
 800c28a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c28e:	b00d      	add	sp, #52	; 0x34
 800c290:	ecbd 8b02 	vpop	{d8}
 800c294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c298:	4642      	mov	r2, r8
 800c29a:	464b      	mov	r3, r9
 800c29c:	4640      	mov	r0, r8
 800c29e:	4649      	mov	r1, r9
 800c2a0:	f7f4 fc5c 	bl	8000b5c <__aeabi_dcmpun>
 800c2a4:	b140      	cbz	r0, 800c2b8 <_printf_float+0xf0>
 800c2a6:	464b      	mov	r3, r9
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	bfbc      	itt	lt
 800c2ac:	232d      	movlt	r3, #45	; 0x2d
 800c2ae:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c2b2:	487f      	ldr	r0, [pc, #508]	; (800c4b0 <_printf_float+0x2e8>)
 800c2b4:	4b7f      	ldr	r3, [pc, #508]	; (800c4b4 <_printf_float+0x2ec>)
 800c2b6:	e7d1      	b.n	800c25c <_printf_float+0x94>
 800c2b8:	6863      	ldr	r3, [r4, #4]
 800c2ba:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c2be:	9206      	str	r2, [sp, #24]
 800c2c0:	1c5a      	adds	r2, r3, #1
 800c2c2:	d13f      	bne.n	800c344 <_printf_float+0x17c>
 800c2c4:	2306      	movs	r3, #6
 800c2c6:	6063      	str	r3, [r4, #4]
 800c2c8:	9b05      	ldr	r3, [sp, #20]
 800c2ca:	6861      	ldr	r1, [r4, #4]
 800c2cc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	9303      	str	r3, [sp, #12]
 800c2d4:	ab0a      	add	r3, sp, #40	; 0x28
 800c2d6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c2da:	ab09      	add	r3, sp, #36	; 0x24
 800c2dc:	ec49 8b10 	vmov	d0, r8, r9
 800c2e0:	9300      	str	r3, [sp, #0]
 800c2e2:	6022      	str	r2, [r4, #0]
 800c2e4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c2e8:	4628      	mov	r0, r5
 800c2ea:	f7ff fecd 	bl	800c088 <__cvt>
 800c2ee:	9b06      	ldr	r3, [sp, #24]
 800c2f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c2f2:	2b47      	cmp	r3, #71	; 0x47
 800c2f4:	4680      	mov	r8, r0
 800c2f6:	d108      	bne.n	800c30a <_printf_float+0x142>
 800c2f8:	1cc8      	adds	r0, r1, #3
 800c2fa:	db02      	blt.n	800c302 <_printf_float+0x13a>
 800c2fc:	6863      	ldr	r3, [r4, #4]
 800c2fe:	4299      	cmp	r1, r3
 800c300:	dd41      	ble.n	800c386 <_printf_float+0x1be>
 800c302:	f1ab 0b02 	sub.w	fp, fp, #2
 800c306:	fa5f fb8b 	uxtb.w	fp, fp
 800c30a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c30e:	d820      	bhi.n	800c352 <_printf_float+0x18a>
 800c310:	3901      	subs	r1, #1
 800c312:	465a      	mov	r2, fp
 800c314:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c318:	9109      	str	r1, [sp, #36]	; 0x24
 800c31a:	f7ff ff17 	bl	800c14c <__exponent>
 800c31e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c320:	1813      	adds	r3, r2, r0
 800c322:	2a01      	cmp	r2, #1
 800c324:	4681      	mov	r9, r0
 800c326:	6123      	str	r3, [r4, #16]
 800c328:	dc02      	bgt.n	800c330 <_printf_float+0x168>
 800c32a:	6822      	ldr	r2, [r4, #0]
 800c32c:	07d2      	lsls	r2, r2, #31
 800c32e:	d501      	bpl.n	800c334 <_printf_float+0x16c>
 800c330:	3301      	adds	r3, #1
 800c332:	6123      	str	r3, [r4, #16]
 800c334:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d09c      	beq.n	800c276 <_printf_float+0xae>
 800c33c:	232d      	movs	r3, #45	; 0x2d
 800c33e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c342:	e798      	b.n	800c276 <_printf_float+0xae>
 800c344:	9a06      	ldr	r2, [sp, #24]
 800c346:	2a47      	cmp	r2, #71	; 0x47
 800c348:	d1be      	bne.n	800c2c8 <_printf_float+0x100>
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d1bc      	bne.n	800c2c8 <_printf_float+0x100>
 800c34e:	2301      	movs	r3, #1
 800c350:	e7b9      	b.n	800c2c6 <_printf_float+0xfe>
 800c352:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c356:	d118      	bne.n	800c38a <_printf_float+0x1c2>
 800c358:	2900      	cmp	r1, #0
 800c35a:	6863      	ldr	r3, [r4, #4]
 800c35c:	dd0b      	ble.n	800c376 <_printf_float+0x1ae>
 800c35e:	6121      	str	r1, [r4, #16]
 800c360:	b913      	cbnz	r3, 800c368 <_printf_float+0x1a0>
 800c362:	6822      	ldr	r2, [r4, #0]
 800c364:	07d0      	lsls	r0, r2, #31
 800c366:	d502      	bpl.n	800c36e <_printf_float+0x1a6>
 800c368:	3301      	adds	r3, #1
 800c36a:	440b      	add	r3, r1
 800c36c:	6123      	str	r3, [r4, #16]
 800c36e:	65a1      	str	r1, [r4, #88]	; 0x58
 800c370:	f04f 0900 	mov.w	r9, #0
 800c374:	e7de      	b.n	800c334 <_printf_float+0x16c>
 800c376:	b913      	cbnz	r3, 800c37e <_printf_float+0x1b6>
 800c378:	6822      	ldr	r2, [r4, #0]
 800c37a:	07d2      	lsls	r2, r2, #31
 800c37c:	d501      	bpl.n	800c382 <_printf_float+0x1ba>
 800c37e:	3302      	adds	r3, #2
 800c380:	e7f4      	b.n	800c36c <_printf_float+0x1a4>
 800c382:	2301      	movs	r3, #1
 800c384:	e7f2      	b.n	800c36c <_printf_float+0x1a4>
 800c386:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c38a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c38c:	4299      	cmp	r1, r3
 800c38e:	db05      	blt.n	800c39c <_printf_float+0x1d4>
 800c390:	6823      	ldr	r3, [r4, #0]
 800c392:	6121      	str	r1, [r4, #16]
 800c394:	07d8      	lsls	r0, r3, #31
 800c396:	d5ea      	bpl.n	800c36e <_printf_float+0x1a6>
 800c398:	1c4b      	adds	r3, r1, #1
 800c39a:	e7e7      	b.n	800c36c <_printf_float+0x1a4>
 800c39c:	2900      	cmp	r1, #0
 800c39e:	bfd4      	ite	le
 800c3a0:	f1c1 0202 	rsble	r2, r1, #2
 800c3a4:	2201      	movgt	r2, #1
 800c3a6:	4413      	add	r3, r2
 800c3a8:	e7e0      	b.n	800c36c <_printf_float+0x1a4>
 800c3aa:	6823      	ldr	r3, [r4, #0]
 800c3ac:	055a      	lsls	r2, r3, #21
 800c3ae:	d407      	bmi.n	800c3c0 <_printf_float+0x1f8>
 800c3b0:	6923      	ldr	r3, [r4, #16]
 800c3b2:	4642      	mov	r2, r8
 800c3b4:	4631      	mov	r1, r6
 800c3b6:	4628      	mov	r0, r5
 800c3b8:	47b8      	blx	r7
 800c3ba:	3001      	adds	r0, #1
 800c3bc:	d12c      	bne.n	800c418 <_printf_float+0x250>
 800c3be:	e764      	b.n	800c28a <_printf_float+0xc2>
 800c3c0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c3c4:	f240 80e0 	bls.w	800c588 <_printf_float+0x3c0>
 800c3c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c3cc:	2200      	movs	r2, #0
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	f7f4 fb92 	bl	8000af8 <__aeabi_dcmpeq>
 800c3d4:	2800      	cmp	r0, #0
 800c3d6:	d034      	beq.n	800c442 <_printf_float+0x27a>
 800c3d8:	4a37      	ldr	r2, [pc, #220]	; (800c4b8 <_printf_float+0x2f0>)
 800c3da:	2301      	movs	r3, #1
 800c3dc:	4631      	mov	r1, r6
 800c3de:	4628      	mov	r0, r5
 800c3e0:	47b8      	blx	r7
 800c3e2:	3001      	adds	r0, #1
 800c3e4:	f43f af51 	beq.w	800c28a <_printf_float+0xc2>
 800c3e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c3ec:	429a      	cmp	r2, r3
 800c3ee:	db02      	blt.n	800c3f6 <_printf_float+0x22e>
 800c3f0:	6823      	ldr	r3, [r4, #0]
 800c3f2:	07d8      	lsls	r0, r3, #31
 800c3f4:	d510      	bpl.n	800c418 <_printf_float+0x250>
 800c3f6:	ee18 3a10 	vmov	r3, s16
 800c3fa:	4652      	mov	r2, sl
 800c3fc:	4631      	mov	r1, r6
 800c3fe:	4628      	mov	r0, r5
 800c400:	47b8      	blx	r7
 800c402:	3001      	adds	r0, #1
 800c404:	f43f af41 	beq.w	800c28a <_printf_float+0xc2>
 800c408:	f04f 0800 	mov.w	r8, #0
 800c40c:	f104 091a 	add.w	r9, r4, #26
 800c410:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c412:	3b01      	subs	r3, #1
 800c414:	4543      	cmp	r3, r8
 800c416:	dc09      	bgt.n	800c42c <_printf_float+0x264>
 800c418:	6823      	ldr	r3, [r4, #0]
 800c41a:	079b      	lsls	r3, r3, #30
 800c41c:	f100 8105 	bmi.w	800c62a <_printf_float+0x462>
 800c420:	68e0      	ldr	r0, [r4, #12]
 800c422:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c424:	4298      	cmp	r0, r3
 800c426:	bfb8      	it	lt
 800c428:	4618      	movlt	r0, r3
 800c42a:	e730      	b.n	800c28e <_printf_float+0xc6>
 800c42c:	2301      	movs	r3, #1
 800c42e:	464a      	mov	r2, r9
 800c430:	4631      	mov	r1, r6
 800c432:	4628      	mov	r0, r5
 800c434:	47b8      	blx	r7
 800c436:	3001      	adds	r0, #1
 800c438:	f43f af27 	beq.w	800c28a <_printf_float+0xc2>
 800c43c:	f108 0801 	add.w	r8, r8, #1
 800c440:	e7e6      	b.n	800c410 <_printf_float+0x248>
 800c442:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c444:	2b00      	cmp	r3, #0
 800c446:	dc39      	bgt.n	800c4bc <_printf_float+0x2f4>
 800c448:	4a1b      	ldr	r2, [pc, #108]	; (800c4b8 <_printf_float+0x2f0>)
 800c44a:	2301      	movs	r3, #1
 800c44c:	4631      	mov	r1, r6
 800c44e:	4628      	mov	r0, r5
 800c450:	47b8      	blx	r7
 800c452:	3001      	adds	r0, #1
 800c454:	f43f af19 	beq.w	800c28a <_printf_float+0xc2>
 800c458:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c45c:	4313      	orrs	r3, r2
 800c45e:	d102      	bne.n	800c466 <_printf_float+0x29e>
 800c460:	6823      	ldr	r3, [r4, #0]
 800c462:	07d9      	lsls	r1, r3, #31
 800c464:	d5d8      	bpl.n	800c418 <_printf_float+0x250>
 800c466:	ee18 3a10 	vmov	r3, s16
 800c46a:	4652      	mov	r2, sl
 800c46c:	4631      	mov	r1, r6
 800c46e:	4628      	mov	r0, r5
 800c470:	47b8      	blx	r7
 800c472:	3001      	adds	r0, #1
 800c474:	f43f af09 	beq.w	800c28a <_printf_float+0xc2>
 800c478:	f04f 0900 	mov.w	r9, #0
 800c47c:	f104 0a1a 	add.w	sl, r4, #26
 800c480:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c482:	425b      	negs	r3, r3
 800c484:	454b      	cmp	r3, r9
 800c486:	dc01      	bgt.n	800c48c <_printf_float+0x2c4>
 800c488:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c48a:	e792      	b.n	800c3b2 <_printf_float+0x1ea>
 800c48c:	2301      	movs	r3, #1
 800c48e:	4652      	mov	r2, sl
 800c490:	4631      	mov	r1, r6
 800c492:	4628      	mov	r0, r5
 800c494:	47b8      	blx	r7
 800c496:	3001      	adds	r0, #1
 800c498:	f43f aef7 	beq.w	800c28a <_printf_float+0xc2>
 800c49c:	f109 0901 	add.w	r9, r9, #1
 800c4a0:	e7ee      	b.n	800c480 <_printf_float+0x2b8>
 800c4a2:	bf00      	nop
 800c4a4:	7fefffff 	.word	0x7fefffff
 800c4a8:	0800ec60 	.word	0x0800ec60
 800c4ac:	0800ec64 	.word	0x0800ec64
 800c4b0:	0800ec6c 	.word	0x0800ec6c
 800c4b4:	0800ec68 	.word	0x0800ec68
 800c4b8:	0800ec70 	.word	0x0800ec70
 800c4bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c4be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c4c0:	429a      	cmp	r2, r3
 800c4c2:	bfa8      	it	ge
 800c4c4:	461a      	movge	r2, r3
 800c4c6:	2a00      	cmp	r2, #0
 800c4c8:	4691      	mov	r9, r2
 800c4ca:	dc37      	bgt.n	800c53c <_printf_float+0x374>
 800c4cc:	f04f 0b00 	mov.w	fp, #0
 800c4d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c4d4:	f104 021a 	add.w	r2, r4, #26
 800c4d8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c4da:	9305      	str	r3, [sp, #20]
 800c4dc:	eba3 0309 	sub.w	r3, r3, r9
 800c4e0:	455b      	cmp	r3, fp
 800c4e2:	dc33      	bgt.n	800c54c <_printf_float+0x384>
 800c4e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c4e8:	429a      	cmp	r2, r3
 800c4ea:	db3b      	blt.n	800c564 <_printf_float+0x39c>
 800c4ec:	6823      	ldr	r3, [r4, #0]
 800c4ee:	07da      	lsls	r2, r3, #31
 800c4f0:	d438      	bmi.n	800c564 <_printf_float+0x39c>
 800c4f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c4f4:	9a05      	ldr	r2, [sp, #20]
 800c4f6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c4f8:	1a9a      	subs	r2, r3, r2
 800c4fa:	eba3 0901 	sub.w	r9, r3, r1
 800c4fe:	4591      	cmp	r9, r2
 800c500:	bfa8      	it	ge
 800c502:	4691      	movge	r9, r2
 800c504:	f1b9 0f00 	cmp.w	r9, #0
 800c508:	dc35      	bgt.n	800c576 <_printf_float+0x3ae>
 800c50a:	f04f 0800 	mov.w	r8, #0
 800c50e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c512:	f104 0a1a 	add.w	sl, r4, #26
 800c516:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c51a:	1a9b      	subs	r3, r3, r2
 800c51c:	eba3 0309 	sub.w	r3, r3, r9
 800c520:	4543      	cmp	r3, r8
 800c522:	f77f af79 	ble.w	800c418 <_printf_float+0x250>
 800c526:	2301      	movs	r3, #1
 800c528:	4652      	mov	r2, sl
 800c52a:	4631      	mov	r1, r6
 800c52c:	4628      	mov	r0, r5
 800c52e:	47b8      	blx	r7
 800c530:	3001      	adds	r0, #1
 800c532:	f43f aeaa 	beq.w	800c28a <_printf_float+0xc2>
 800c536:	f108 0801 	add.w	r8, r8, #1
 800c53a:	e7ec      	b.n	800c516 <_printf_float+0x34e>
 800c53c:	4613      	mov	r3, r2
 800c53e:	4631      	mov	r1, r6
 800c540:	4642      	mov	r2, r8
 800c542:	4628      	mov	r0, r5
 800c544:	47b8      	blx	r7
 800c546:	3001      	adds	r0, #1
 800c548:	d1c0      	bne.n	800c4cc <_printf_float+0x304>
 800c54a:	e69e      	b.n	800c28a <_printf_float+0xc2>
 800c54c:	2301      	movs	r3, #1
 800c54e:	4631      	mov	r1, r6
 800c550:	4628      	mov	r0, r5
 800c552:	9205      	str	r2, [sp, #20]
 800c554:	47b8      	blx	r7
 800c556:	3001      	adds	r0, #1
 800c558:	f43f ae97 	beq.w	800c28a <_printf_float+0xc2>
 800c55c:	9a05      	ldr	r2, [sp, #20]
 800c55e:	f10b 0b01 	add.w	fp, fp, #1
 800c562:	e7b9      	b.n	800c4d8 <_printf_float+0x310>
 800c564:	ee18 3a10 	vmov	r3, s16
 800c568:	4652      	mov	r2, sl
 800c56a:	4631      	mov	r1, r6
 800c56c:	4628      	mov	r0, r5
 800c56e:	47b8      	blx	r7
 800c570:	3001      	adds	r0, #1
 800c572:	d1be      	bne.n	800c4f2 <_printf_float+0x32a>
 800c574:	e689      	b.n	800c28a <_printf_float+0xc2>
 800c576:	9a05      	ldr	r2, [sp, #20]
 800c578:	464b      	mov	r3, r9
 800c57a:	4442      	add	r2, r8
 800c57c:	4631      	mov	r1, r6
 800c57e:	4628      	mov	r0, r5
 800c580:	47b8      	blx	r7
 800c582:	3001      	adds	r0, #1
 800c584:	d1c1      	bne.n	800c50a <_printf_float+0x342>
 800c586:	e680      	b.n	800c28a <_printf_float+0xc2>
 800c588:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c58a:	2a01      	cmp	r2, #1
 800c58c:	dc01      	bgt.n	800c592 <_printf_float+0x3ca>
 800c58e:	07db      	lsls	r3, r3, #31
 800c590:	d538      	bpl.n	800c604 <_printf_float+0x43c>
 800c592:	2301      	movs	r3, #1
 800c594:	4642      	mov	r2, r8
 800c596:	4631      	mov	r1, r6
 800c598:	4628      	mov	r0, r5
 800c59a:	47b8      	blx	r7
 800c59c:	3001      	adds	r0, #1
 800c59e:	f43f ae74 	beq.w	800c28a <_printf_float+0xc2>
 800c5a2:	ee18 3a10 	vmov	r3, s16
 800c5a6:	4652      	mov	r2, sl
 800c5a8:	4631      	mov	r1, r6
 800c5aa:	4628      	mov	r0, r5
 800c5ac:	47b8      	blx	r7
 800c5ae:	3001      	adds	r0, #1
 800c5b0:	f43f ae6b 	beq.w	800c28a <_printf_float+0xc2>
 800c5b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c5b8:	2200      	movs	r2, #0
 800c5ba:	2300      	movs	r3, #0
 800c5bc:	f7f4 fa9c 	bl	8000af8 <__aeabi_dcmpeq>
 800c5c0:	b9d8      	cbnz	r0, 800c5fa <_printf_float+0x432>
 800c5c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c5c4:	f108 0201 	add.w	r2, r8, #1
 800c5c8:	3b01      	subs	r3, #1
 800c5ca:	4631      	mov	r1, r6
 800c5cc:	4628      	mov	r0, r5
 800c5ce:	47b8      	blx	r7
 800c5d0:	3001      	adds	r0, #1
 800c5d2:	d10e      	bne.n	800c5f2 <_printf_float+0x42a>
 800c5d4:	e659      	b.n	800c28a <_printf_float+0xc2>
 800c5d6:	2301      	movs	r3, #1
 800c5d8:	4652      	mov	r2, sl
 800c5da:	4631      	mov	r1, r6
 800c5dc:	4628      	mov	r0, r5
 800c5de:	47b8      	blx	r7
 800c5e0:	3001      	adds	r0, #1
 800c5e2:	f43f ae52 	beq.w	800c28a <_printf_float+0xc2>
 800c5e6:	f108 0801 	add.w	r8, r8, #1
 800c5ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c5ec:	3b01      	subs	r3, #1
 800c5ee:	4543      	cmp	r3, r8
 800c5f0:	dcf1      	bgt.n	800c5d6 <_printf_float+0x40e>
 800c5f2:	464b      	mov	r3, r9
 800c5f4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c5f8:	e6dc      	b.n	800c3b4 <_printf_float+0x1ec>
 800c5fa:	f04f 0800 	mov.w	r8, #0
 800c5fe:	f104 0a1a 	add.w	sl, r4, #26
 800c602:	e7f2      	b.n	800c5ea <_printf_float+0x422>
 800c604:	2301      	movs	r3, #1
 800c606:	4642      	mov	r2, r8
 800c608:	e7df      	b.n	800c5ca <_printf_float+0x402>
 800c60a:	2301      	movs	r3, #1
 800c60c:	464a      	mov	r2, r9
 800c60e:	4631      	mov	r1, r6
 800c610:	4628      	mov	r0, r5
 800c612:	47b8      	blx	r7
 800c614:	3001      	adds	r0, #1
 800c616:	f43f ae38 	beq.w	800c28a <_printf_float+0xc2>
 800c61a:	f108 0801 	add.w	r8, r8, #1
 800c61e:	68e3      	ldr	r3, [r4, #12]
 800c620:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c622:	1a5b      	subs	r3, r3, r1
 800c624:	4543      	cmp	r3, r8
 800c626:	dcf0      	bgt.n	800c60a <_printf_float+0x442>
 800c628:	e6fa      	b.n	800c420 <_printf_float+0x258>
 800c62a:	f04f 0800 	mov.w	r8, #0
 800c62e:	f104 0919 	add.w	r9, r4, #25
 800c632:	e7f4      	b.n	800c61e <_printf_float+0x456>

0800c634 <_printf_common>:
 800c634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c638:	4616      	mov	r6, r2
 800c63a:	4699      	mov	r9, r3
 800c63c:	688a      	ldr	r2, [r1, #8]
 800c63e:	690b      	ldr	r3, [r1, #16]
 800c640:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c644:	4293      	cmp	r3, r2
 800c646:	bfb8      	it	lt
 800c648:	4613      	movlt	r3, r2
 800c64a:	6033      	str	r3, [r6, #0]
 800c64c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c650:	4607      	mov	r7, r0
 800c652:	460c      	mov	r4, r1
 800c654:	b10a      	cbz	r2, 800c65a <_printf_common+0x26>
 800c656:	3301      	adds	r3, #1
 800c658:	6033      	str	r3, [r6, #0]
 800c65a:	6823      	ldr	r3, [r4, #0]
 800c65c:	0699      	lsls	r1, r3, #26
 800c65e:	bf42      	ittt	mi
 800c660:	6833      	ldrmi	r3, [r6, #0]
 800c662:	3302      	addmi	r3, #2
 800c664:	6033      	strmi	r3, [r6, #0]
 800c666:	6825      	ldr	r5, [r4, #0]
 800c668:	f015 0506 	ands.w	r5, r5, #6
 800c66c:	d106      	bne.n	800c67c <_printf_common+0x48>
 800c66e:	f104 0a19 	add.w	sl, r4, #25
 800c672:	68e3      	ldr	r3, [r4, #12]
 800c674:	6832      	ldr	r2, [r6, #0]
 800c676:	1a9b      	subs	r3, r3, r2
 800c678:	42ab      	cmp	r3, r5
 800c67a:	dc26      	bgt.n	800c6ca <_printf_common+0x96>
 800c67c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c680:	1e13      	subs	r3, r2, #0
 800c682:	6822      	ldr	r2, [r4, #0]
 800c684:	bf18      	it	ne
 800c686:	2301      	movne	r3, #1
 800c688:	0692      	lsls	r2, r2, #26
 800c68a:	d42b      	bmi.n	800c6e4 <_printf_common+0xb0>
 800c68c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c690:	4649      	mov	r1, r9
 800c692:	4638      	mov	r0, r7
 800c694:	47c0      	blx	r8
 800c696:	3001      	adds	r0, #1
 800c698:	d01e      	beq.n	800c6d8 <_printf_common+0xa4>
 800c69a:	6823      	ldr	r3, [r4, #0]
 800c69c:	68e5      	ldr	r5, [r4, #12]
 800c69e:	6832      	ldr	r2, [r6, #0]
 800c6a0:	f003 0306 	and.w	r3, r3, #6
 800c6a4:	2b04      	cmp	r3, #4
 800c6a6:	bf08      	it	eq
 800c6a8:	1aad      	subeq	r5, r5, r2
 800c6aa:	68a3      	ldr	r3, [r4, #8]
 800c6ac:	6922      	ldr	r2, [r4, #16]
 800c6ae:	bf0c      	ite	eq
 800c6b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c6b4:	2500      	movne	r5, #0
 800c6b6:	4293      	cmp	r3, r2
 800c6b8:	bfc4      	itt	gt
 800c6ba:	1a9b      	subgt	r3, r3, r2
 800c6bc:	18ed      	addgt	r5, r5, r3
 800c6be:	2600      	movs	r6, #0
 800c6c0:	341a      	adds	r4, #26
 800c6c2:	42b5      	cmp	r5, r6
 800c6c4:	d11a      	bne.n	800c6fc <_printf_common+0xc8>
 800c6c6:	2000      	movs	r0, #0
 800c6c8:	e008      	b.n	800c6dc <_printf_common+0xa8>
 800c6ca:	2301      	movs	r3, #1
 800c6cc:	4652      	mov	r2, sl
 800c6ce:	4649      	mov	r1, r9
 800c6d0:	4638      	mov	r0, r7
 800c6d2:	47c0      	blx	r8
 800c6d4:	3001      	adds	r0, #1
 800c6d6:	d103      	bne.n	800c6e0 <_printf_common+0xac>
 800c6d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c6dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6e0:	3501      	adds	r5, #1
 800c6e2:	e7c6      	b.n	800c672 <_printf_common+0x3e>
 800c6e4:	18e1      	adds	r1, r4, r3
 800c6e6:	1c5a      	adds	r2, r3, #1
 800c6e8:	2030      	movs	r0, #48	; 0x30
 800c6ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c6ee:	4422      	add	r2, r4
 800c6f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c6f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c6f8:	3302      	adds	r3, #2
 800c6fa:	e7c7      	b.n	800c68c <_printf_common+0x58>
 800c6fc:	2301      	movs	r3, #1
 800c6fe:	4622      	mov	r2, r4
 800c700:	4649      	mov	r1, r9
 800c702:	4638      	mov	r0, r7
 800c704:	47c0      	blx	r8
 800c706:	3001      	adds	r0, #1
 800c708:	d0e6      	beq.n	800c6d8 <_printf_common+0xa4>
 800c70a:	3601      	adds	r6, #1
 800c70c:	e7d9      	b.n	800c6c2 <_printf_common+0x8e>
	...

0800c710 <_printf_i>:
 800c710:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c714:	7e0f      	ldrb	r7, [r1, #24]
 800c716:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c718:	2f78      	cmp	r7, #120	; 0x78
 800c71a:	4691      	mov	r9, r2
 800c71c:	4680      	mov	r8, r0
 800c71e:	460c      	mov	r4, r1
 800c720:	469a      	mov	sl, r3
 800c722:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c726:	d807      	bhi.n	800c738 <_printf_i+0x28>
 800c728:	2f62      	cmp	r7, #98	; 0x62
 800c72a:	d80a      	bhi.n	800c742 <_printf_i+0x32>
 800c72c:	2f00      	cmp	r7, #0
 800c72e:	f000 80d8 	beq.w	800c8e2 <_printf_i+0x1d2>
 800c732:	2f58      	cmp	r7, #88	; 0x58
 800c734:	f000 80a3 	beq.w	800c87e <_printf_i+0x16e>
 800c738:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c73c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c740:	e03a      	b.n	800c7b8 <_printf_i+0xa8>
 800c742:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c746:	2b15      	cmp	r3, #21
 800c748:	d8f6      	bhi.n	800c738 <_printf_i+0x28>
 800c74a:	a101      	add	r1, pc, #4	; (adr r1, 800c750 <_printf_i+0x40>)
 800c74c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c750:	0800c7a9 	.word	0x0800c7a9
 800c754:	0800c7bd 	.word	0x0800c7bd
 800c758:	0800c739 	.word	0x0800c739
 800c75c:	0800c739 	.word	0x0800c739
 800c760:	0800c739 	.word	0x0800c739
 800c764:	0800c739 	.word	0x0800c739
 800c768:	0800c7bd 	.word	0x0800c7bd
 800c76c:	0800c739 	.word	0x0800c739
 800c770:	0800c739 	.word	0x0800c739
 800c774:	0800c739 	.word	0x0800c739
 800c778:	0800c739 	.word	0x0800c739
 800c77c:	0800c8c9 	.word	0x0800c8c9
 800c780:	0800c7ed 	.word	0x0800c7ed
 800c784:	0800c8ab 	.word	0x0800c8ab
 800c788:	0800c739 	.word	0x0800c739
 800c78c:	0800c739 	.word	0x0800c739
 800c790:	0800c8eb 	.word	0x0800c8eb
 800c794:	0800c739 	.word	0x0800c739
 800c798:	0800c7ed 	.word	0x0800c7ed
 800c79c:	0800c739 	.word	0x0800c739
 800c7a0:	0800c739 	.word	0x0800c739
 800c7a4:	0800c8b3 	.word	0x0800c8b3
 800c7a8:	682b      	ldr	r3, [r5, #0]
 800c7aa:	1d1a      	adds	r2, r3, #4
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	602a      	str	r2, [r5, #0]
 800c7b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c7b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c7b8:	2301      	movs	r3, #1
 800c7ba:	e0a3      	b.n	800c904 <_printf_i+0x1f4>
 800c7bc:	6820      	ldr	r0, [r4, #0]
 800c7be:	6829      	ldr	r1, [r5, #0]
 800c7c0:	0606      	lsls	r6, r0, #24
 800c7c2:	f101 0304 	add.w	r3, r1, #4
 800c7c6:	d50a      	bpl.n	800c7de <_printf_i+0xce>
 800c7c8:	680e      	ldr	r6, [r1, #0]
 800c7ca:	602b      	str	r3, [r5, #0]
 800c7cc:	2e00      	cmp	r6, #0
 800c7ce:	da03      	bge.n	800c7d8 <_printf_i+0xc8>
 800c7d0:	232d      	movs	r3, #45	; 0x2d
 800c7d2:	4276      	negs	r6, r6
 800c7d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c7d8:	485e      	ldr	r0, [pc, #376]	; (800c954 <_printf_i+0x244>)
 800c7da:	230a      	movs	r3, #10
 800c7dc:	e019      	b.n	800c812 <_printf_i+0x102>
 800c7de:	680e      	ldr	r6, [r1, #0]
 800c7e0:	602b      	str	r3, [r5, #0]
 800c7e2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c7e6:	bf18      	it	ne
 800c7e8:	b236      	sxthne	r6, r6
 800c7ea:	e7ef      	b.n	800c7cc <_printf_i+0xbc>
 800c7ec:	682b      	ldr	r3, [r5, #0]
 800c7ee:	6820      	ldr	r0, [r4, #0]
 800c7f0:	1d19      	adds	r1, r3, #4
 800c7f2:	6029      	str	r1, [r5, #0]
 800c7f4:	0601      	lsls	r1, r0, #24
 800c7f6:	d501      	bpl.n	800c7fc <_printf_i+0xec>
 800c7f8:	681e      	ldr	r6, [r3, #0]
 800c7fa:	e002      	b.n	800c802 <_printf_i+0xf2>
 800c7fc:	0646      	lsls	r6, r0, #25
 800c7fe:	d5fb      	bpl.n	800c7f8 <_printf_i+0xe8>
 800c800:	881e      	ldrh	r6, [r3, #0]
 800c802:	4854      	ldr	r0, [pc, #336]	; (800c954 <_printf_i+0x244>)
 800c804:	2f6f      	cmp	r7, #111	; 0x6f
 800c806:	bf0c      	ite	eq
 800c808:	2308      	moveq	r3, #8
 800c80a:	230a      	movne	r3, #10
 800c80c:	2100      	movs	r1, #0
 800c80e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c812:	6865      	ldr	r5, [r4, #4]
 800c814:	60a5      	str	r5, [r4, #8]
 800c816:	2d00      	cmp	r5, #0
 800c818:	bfa2      	ittt	ge
 800c81a:	6821      	ldrge	r1, [r4, #0]
 800c81c:	f021 0104 	bicge.w	r1, r1, #4
 800c820:	6021      	strge	r1, [r4, #0]
 800c822:	b90e      	cbnz	r6, 800c828 <_printf_i+0x118>
 800c824:	2d00      	cmp	r5, #0
 800c826:	d04d      	beq.n	800c8c4 <_printf_i+0x1b4>
 800c828:	4615      	mov	r5, r2
 800c82a:	fbb6 f1f3 	udiv	r1, r6, r3
 800c82e:	fb03 6711 	mls	r7, r3, r1, r6
 800c832:	5dc7      	ldrb	r7, [r0, r7]
 800c834:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c838:	4637      	mov	r7, r6
 800c83a:	42bb      	cmp	r3, r7
 800c83c:	460e      	mov	r6, r1
 800c83e:	d9f4      	bls.n	800c82a <_printf_i+0x11a>
 800c840:	2b08      	cmp	r3, #8
 800c842:	d10b      	bne.n	800c85c <_printf_i+0x14c>
 800c844:	6823      	ldr	r3, [r4, #0]
 800c846:	07de      	lsls	r6, r3, #31
 800c848:	d508      	bpl.n	800c85c <_printf_i+0x14c>
 800c84a:	6923      	ldr	r3, [r4, #16]
 800c84c:	6861      	ldr	r1, [r4, #4]
 800c84e:	4299      	cmp	r1, r3
 800c850:	bfde      	ittt	le
 800c852:	2330      	movle	r3, #48	; 0x30
 800c854:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c858:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800c85c:	1b52      	subs	r2, r2, r5
 800c85e:	6122      	str	r2, [r4, #16]
 800c860:	f8cd a000 	str.w	sl, [sp]
 800c864:	464b      	mov	r3, r9
 800c866:	aa03      	add	r2, sp, #12
 800c868:	4621      	mov	r1, r4
 800c86a:	4640      	mov	r0, r8
 800c86c:	f7ff fee2 	bl	800c634 <_printf_common>
 800c870:	3001      	adds	r0, #1
 800c872:	d14c      	bne.n	800c90e <_printf_i+0x1fe>
 800c874:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c878:	b004      	add	sp, #16
 800c87a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c87e:	4835      	ldr	r0, [pc, #212]	; (800c954 <_printf_i+0x244>)
 800c880:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c884:	6829      	ldr	r1, [r5, #0]
 800c886:	6823      	ldr	r3, [r4, #0]
 800c888:	f851 6b04 	ldr.w	r6, [r1], #4
 800c88c:	6029      	str	r1, [r5, #0]
 800c88e:	061d      	lsls	r5, r3, #24
 800c890:	d514      	bpl.n	800c8bc <_printf_i+0x1ac>
 800c892:	07df      	lsls	r7, r3, #31
 800c894:	bf44      	itt	mi
 800c896:	f043 0320 	orrmi.w	r3, r3, #32
 800c89a:	6023      	strmi	r3, [r4, #0]
 800c89c:	b91e      	cbnz	r6, 800c8a6 <_printf_i+0x196>
 800c89e:	6823      	ldr	r3, [r4, #0]
 800c8a0:	f023 0320 	bic.w	r3, r3, #32
 800c8a4:	6023      	str	r3, [r4, #0]
 800c8a6:	2310      	movs	r3, #16
 800c8a8:	e7b0      	b.n	800c80c <_printf_i+0xfc>
 800c8aa:	6823      	ldr	r3, [r4, #0]
 800c8ac:	f043 0320 	orr.w	r3, r3, #32
 800c8b0:	6023      	str	r3, [r4, #0]
 800c8b2:	2378      	movs	r3, #120	; 0x78
 800c8b4:	4828      	ldr	r0, [pc, #160]	; (800c958 <_printf_i+0x248>)
 800c8b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c8ba:	e7e3      	b.n	800c884 <_printf_i+0x174>
 800c8bc:	0659      	lsls	r1, r3, #25
 800c8be:	bf48      	it	mi
 800c8c0:	b2b6      	uxthmi	r6, r6
 800c8c2:	e7e6      	b.n	800c892 <_printf_i+0x182>
 800c8c4:	4615      	mov	r5, r2
 800c8c6:	e7bb      	b.n	800c840 <_printf_i+0x130>
 800c8c8:	682b      	ldr	r3, [r5, #0]
 800c8ca:	6826      	ldr	r6, [r4, #0]
 800c8cc:	6961      	ldr	r1, [r4, #20]
 800c8ce:	1d18      	adds	r0, r3, #4
 800c8d0:	6028      	str	r0, [r5, #0]
 800c8d2:	0635      	lsls	r5, r6, #24
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	d501      	bpl.n	800c8dc <_printf_i+0x1cc>
 800c8d8:	6019      	str	r1, [r3, #0]
 800c8da:	e002      	b.n	800c8e2 <_printf_i+0x1d2>
 800c8dc:	0670      	lsls	r0, r6, #25
 800c8de:	d5fb      	bpl.n	800c8d8 <_printf_i+0x1c8>
 800c8e0:	8019      	strh	r1, [r3, #0]
 800c8e2:	2300      	movs	r3, #0
 800c8e4:	6123      	str	r3, [r4, #16]
 800c8e6:	4615      	mov	r5, r2
 800c8e8:	e7ba      	b.n	800c860 <_printf_i+0x150>
 800c8ea:	682b      	ldr	r3, [r5, #0]
 800c8ec:	1d1a      	adds	r2, r3, #4
 800c8ee:	602a      	str	r2, [r5, #0]
 800c8f0:	681d      	ldr	r5, [r3, #0]
 800c8f2:	6862      	ldr	r2, [r4, #4]
 800c8f4:	2100      	movs	r1, #0
 800c8f6:	4628      	mov	r0, r5
 800c8f8:	f7f3 fc8a 	bl	8000210 <memchr>
 800c8fc:	b108      	cbz	r0, 800c902 <_printf_i+0x1f2>
 800c8fe:	1b40      	subs	r0, r0, r5
 800c900:	6060      	str	r0, [r4, #4]
 800c902:	6863      	ldr	r3, [r4, #4]
 800c904:	6123      	str	r3, [r4, #16]
 800c906:	2300      	movs	r3, #0
 800c908:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c90c:	e7a8      	b.n	800c860 <_printf_i+0x150>
 800c90e:	6923      	ldr	r3, [r4, #16]
 800c910:	462a      	mov	r2, r5
 800c912:	4649      	mov	r1, r9
 800c914:	4640      	mov	r0, r8
 800c916:	47d0      	blx	sl
 800c918:	3001      	adds	r0, #1
 800c91a:	d0ab      	beq.n	800c874 <_printf_i+0x164>
 800c91c:	6823      	ldr	r3, [r4, #0]
 800c91e:	079b      	lsls	r3, r3, #30
 800c920:	d413      	bmi.n	800c94a <_printf_i+0x23a>
 800c922:	68e0      	ldr	r0, [r4, #12]
 800c924:	9b03      	ldr	r3, [sp, #12]
 800c926:	4298      	cmp	r0, r3
 800c928:	bfb8      	it	lt
 800c92a:	4618      	movlt	r0, r3
 800c92c:	e7a4      	b.n	800c878 <_printf_i+0x168>
 800c92e:	2301      	movs	r3, #1
 800c930:	4632      	mov	r2, r6
 800c932:	4649      	mov	r1, r9
 800c934:	4640      	mov	r0, r8
 800c936:	47d0      	blx	sl
 800c938:	3001      	adds	r0, #1
 800c93a:	d09b      	beq.n	800c874 <_printf_i+0x164>
 800c93c:	3501      	adds	r5, #1
 800c93e:	68e3      	ldr	r3, [r4, #12]
 800c940:	9903      	ldr	r1, [sp, #12]
 800c942:	1a5b      	subs	r3, r3, r1
 800c944:	42ab      	cmp	r3, r5
 800c946:	dcf2      	bgt.n	800c92e <_printf_i+0x21e>
 800c948:	e7eb      	b.n	800c922 <_printf_i+0x212>
 800c94a:	2500      	movs	r5, #0
 800c94c:	f104 0619 	add.w	r6, r4, #25
 800c950:	e7f5      	b.n	800c93e <_printf_i+0x22e>
 800c952:	bf00      	nop
 800c954:	0800ec72 	.word	0x0800ec72
 800c958:	0800ec83 	.word	0x0800ec83

0800c95c <iprintf>:
 800c95c:	b40f      	push	{r0, r1, r2, r3}
 800c95e:	4b0a      	ldr	r3, [pc, #40]	; (800c988 <iprintf+0x2c>)
 800c960:	b513      	push	{r0, r1, r4, lr}
 800c962:	681c      	ldr	r4, [r3, #0]
 800c964:	b124      	cbz	r4, 800c970 <iprintf+0x14>
 800c966:	69a3      	ldr	r3, [r4, #24]
 800c968:	b913      	cbnz	r3, 800c970 <iprintf+0x14>
 800c96a:	4620      	mov	r0, r4
 800c96c:	f001 f8e8 	bl	800db40 <__sinit>
 800c970:	ab05      	add	r3, sp, #20
 800c972:	9a04      	ldr	r2, [sp, #16]
 800c974:	68a1      	ldr	r1, [r4, #8]
 800c976:	9301      	str	r3, [sp, #4]
 800c978:	4620      	mov	r0, r4
 800c97a:	f001 fdc9 	bl	800e510 <_vfiprintf_r>
 800c97e:	b002      	add	sp, #8
 800c980:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c984:	b004      	add	sp, #16
 800c986:	4770      	bx	lr
 800c988:	20000020 	.word	0x20000020

0800c98c <_puts_r>:
 800c98c:	b570      	push	{r4, r5, r6, lr}
 800c98e:	460e      	mov	r6, r1
 800c990:	4605      	mov	r5, r0
 800c992:	b118      	cbz	r0, 800c99c <_puts_r+0x10>
 800c994:	6983      	ldr	r3, [r0, #24]
 800c996:	b90b      	cbnz	r3, 800c99c <_puts_r+0x10>
 800c998:	f001 f8d2 	bl	800db40 <__sinit>
 800c99c:	69ab      	ldr	r3, [r5, #24]
 800c99e:	68ac      	ldr	r4, [r5, #8]
 800c9a0:	b913      	cbnz	r3, 800c9a8 <_puts_r+0x1c>
 800c9a2:	4628      	mov	r0, r5
 800c9a4:	f001 f8cc 	bl	800db40 <__sinit>
 800c9a8:	4b2c      	ldr	r3, [pc, #176]	; (800ca5c <_puts_r+0xd0>)
 800c9aa:	429c      	cmp	r4, r3
 800c9ac:	d120      	bne.n	800c9f0 <_puts_r+0x64>
 800c9ae:	686c      	ldr	r4, [r5, #4]
 800c9b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c9b2:	07db      	lsls	r3, r3, #31
 800c9b4:	d405      	bmi.n	800c9c2 <_puts_r+0x36>
 800c9b6:	89a3      	ldrh	r3, [r4, #12]
 800c9b8:	0598      	lsls	r0, r3, #22
 800c9ba:	d402      	bmi.n	800c9c2 <_puts_r+0x36>
 800c9bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c9be:	f001 f962 	bl	800dc86 <__retarget_lock_acquire_recursive>
 800c9c2:	89a3      	ldrh	r3, [r4, #12]
 800c9c4:	0719      	lsls	r1, r3, #28
 800c9c6:	d51d      	bpl.n	800ca04 <_puts_r+0x78>
 800c9c8:	6923      	ldr	r3, [r4, #16]
 800c9ca:	b1db      	cbz	r3, 800ca04 <_puts_r+0x78>
 800c9cc:	3e01      	subs	r6, #1
 800c9ce:	68a3      	ldr	r3, [r4, #8]
 800c9d0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c9d4:	3b01      	subs	r3, #1
 800c9d6:	60a3      	str	r3, [r4, #8]
 800c9d8:	bb39      	cbnz	r1, 800ca2a <_puts_r+0x9e>
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	da38      	bge.n	800ca50 <_puts_r+0xc4>
 800c9de:	4622      	mov	r2, r4
 800c9e0:	210a      	movs	r1, #10
 800c9e2:	4628      	mov	r0, r5
 800c9e4:	f000 f858 	bl	800ca98 <__swbuf_r>
 800c9e8:	3001      	adds	r0, #1
 800c9ea:	d011      	beq.n	800ca10 <_puts_r+0x84>
 800c9ec:	250a      	movs	r5, #10
 800c9ee:	e011      	b.n	800ca14 <_puts_r+0x88>
 800c9f0:	4b1b      	ldr	r3, [pc, #108]	; (800ca60 <_puts_r+0xd4>)
 800c9f2:	429c      	cmp	r4, r3
 800c9f4:	d101      	bne.n	800c9fa <_puts_r+0x6e>
 800c9f6:	68ac      	ldr	r4, [r5, #8]
 800c9f8:	e7da      	b.n	800c9b0 <_puts_r+0x24>
 800c9fa:	4b1a      	ldr	r3, [pc, #104]	; (800ca64 <_puts_r+0xd8>)
 800c9fc:	429c      	cmp	r4, r3
 800c9fe:	bf08      	it	eq
 800ca00:	68ec      	ldreq	r4, [r5, #12]
 800ca02:	e7d5      	b.n	800c9b0 <_puts_r+0x24>
 800ca04:	4621      	mov	r1, r4
 800ca06:	4628      	mov	r0, r5
 800ca08:	f000 f898 	bl	800cb3c <__swsetup_r>
 800ca0c:	2800      	cmp	r0, #0
 800ca0e:	d0dd      	beq.n	800c9cc <_puts_r+0x40>
 800ca10:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800ca14:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ca16:	07da      	lsls	r2, r3, #31
 800ca18:	d405      	bmi.n	800ca26 <_puts_r+0x9a>
 800ca1a:	89a3      	ldrh	r3, [r4, #12]
 800ca1c:	059b      	lsls	r3, r3, #22
 800ca1e:	d402      	bmi.n	800ca26 <_puts_r+0x9a>
 800ca20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ca22:	f001 f931 	bl	800dc88 <__retarget_lock_release_recursive>
 800ca26:	4628      	mov	r0, r5
 800ca28:	bd70      	pop	{r4, r5, r6, pc}
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	da04      	bge.n	800ca38 <_puts_r+0xac>
 800ca2e:	69a2      	ldr	r2, [r4, #24]
 800ca30:	429a      	cmp	r2, r3
 800ca32:	dc06      	bgt.n	800ca42 <_puts_r+0xb6>
 800ca34:	290a      	cmp	r1, #10
 800ca36:	d004      	beq.n	800ca42 <_puts_r+0xb6>
 800ca38:	6823      	ldr	r3, [r4, #0]
 800ca3a:	1c5a      	adds	r2, r3, #1
 800ca3c:	6022      	str	r2, [r4, #0]
 800ca3e:	7019      	strb	r1, [r3, #0]
 800ca40:	e7c5      	b.n	800c9ce <_puts_r+0x42>
 800ca42:	4622      	mov	r2, r4
 800ca44:	4628      	mov	r0, r5
 800ca46:	f000 f827 	bl	800ca98 <__swbuf_r>
 800ca4a:	3001      	adds	r0, #1
 800ca4c:	d1bf      	bne.n	800c9ce <_puts_r+0x42>
 800ca4e:	e7df      	b.n	800ca10 <_puts_r+0x84>
 800ca50:	6823      	ldr	r3, [r4, #0]
 800ca52:	250a      	movs	r5, #10
 800ca54:	1c5a      	adds	r2, r3, #1
 800ca56:	6022      	str	r2, [r4, #0]
 800ca58:	701d      	strb	r5, [r3, #0]
 800ca5a:	e7db      	b.n	800ca14 <_puts_r+0x88>
 800ca5c:	0800ed44 	.word	0x0800ed44
 800ca60:	0800ed64 	.word	0x0800ed64
 800ca64:	0800ed24 	.word	0x0800ed24

0800ca68 <puts>:
 800ca68:	4b02      	ldr	r3, [pc, #8]	; (800ca74 <puts+0xc>)
 800ca6a:	4601      	mov	r1, r0
 800ca6c:	6818      	ldr	r0, [r3, #0]
 800ca6e:	f7ff bf8d 	b.w	800c98c <_puts_r>
 800ca72:	bf00      	nop
 800ca74:	20000020 	.word	0x20000020

0800ca78 <_sbrk_r>:
 800ca78:	b538      	push	{r3, r4, r5, lr}
 800ca7a:	4d06      	ldr	r5, [pc, #24]	; (800ca94 <_sbrk_r+0x1c>)
 800ca7c:	2300      	movs	r3, #0
 800ca7e:	4604      	mov	r4, r0
 800ca80:	4608      	mov	r0, r1
 800ca82:	602b      	str	r3, [r5, #0]
 800ca84:	f7f7 f9ba 	bl	8003dfc <_sbrk>
 800ca88:	1c43      	adds	r3, r0, #1
 800ca8a:	d102      	bne.n	800ca92 <_sbrk_r+0x1a>
 800ca8c:	682b      	ldr	r3, [r5, #0]
 800ca8e:	b103      	cbz	r3, 800ca92 <_sbrk_r+0x1a>
 800ca90:	6023      	str	r3, [r4, #0]
 800ca92:	bd38      	pop	{r3, r4, r5, pc}
 800ca94:	20000870 	.word	0x20000870

0800ca98 <__swbuf_r>:
 800ca98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca9a:	460e      	mov	r6, r1
 800ca9c:	4614      	mov	r4, r2
 800ca9e:	4605      	mov	r5, r0
 800caa0:	b118      	cbz	r0, 800caaa <__swbuf_r+0x12>
 800caa2:	6983      	ldr	r3, [r0, #24]
 800caa4:	b90b      	cbnz	r3, 800caaa <__swbuf_r+0x12>
 800caa6:	f001 f84b 	bl	800db40 <__sinit>
 800caaa:	4b21      	ldr	r3, [pc, #132]	; (800cb30 <__swbuf_r+0x98>)
 800caac:	429c      	cmp	r4, r3
 800caae:	d12b      	bne.n	800cb08 <__swbuf_r+0x70>
 800cab0:	686c      	ldr	r4, [r5, #4]
 800cab2:	69a3      	ldr	r3, [r4, #24]
 800cab4:	60a3      	str	r3, [r4, #8]
 800cab6:	89a3      	ldrh	r3, [r4, #12]
 800cab8:	071a      	lsls	r2, r3, #28
 800caba:	d52f      	bpl.n	800cb1c <__swbuf_r+0x84>
 800cabc:	6923      	ldr	r3, [r4, #16]
 800cabe:	b36b      	cbz	r3, 800cb1c <__swbuf_r+0x84>
 800cac0:	6923      	ldr	r3, [r4, #16]
 800cac2:	6820      	ldr	r0, [r4, #0]
 800cac4:	1ac0      	subs	r0, r0, r3
 800cac6:	6963      	ldr	r3, [r4, #20]
 800cac8:	b2f6      	uxtb	r6, r6
 800caca:	4283      	cmp	r3, r0
 800cacc:	4637      	mov	r7, r6
 800cace:	dc04      	bgt.n	800cada <__swbuf_r+0x42>
 800cad0:	4621      	mov	r1, r4
 800cad2:	4628      	mov	r0, r5
 800cad4:	f000 ffa0 	bl	800da18 <_fflush_r>
 800cad8:	bb30      	cbnz	r0, 800cb28 <__swbuf_r+0x90>
 800cada:	68a3      	ldr	r3, [r4, #8]
 800cadc:	3b01      	subs	r3, #1
 800cade:	60a3      	str	r3, [r4, #8]
 800cae0:	6823      	ldr	r3, [r4, #0]
 800cae2:	1c5a      	adds	r2, r3, #1
 800cae4:	6022      	str	r2, [r4, #0]
 800cae6:	701e      	strb	r6, [r3, #0]
 800cae8:	6963      	ldr	r3, [r4, #20]
 800caea:	3001      	adds	r0, #1
 800caec:	4283      	cmp	r3, r0
 800caee:	d004      	beq.n	800cafa <__swbuf_r+0x62>
 800caf0:	89a3      	ldrh	r3, [r4, #12]
 800caf2:	07db      	lsls	r3, r3, #31
 800caf4:	d506      	bpl.n	800cb04 <__swbuf_r+0x6c>
 800caf6:	2e0a      	cmp	r6, #10
 800caf8:	d104      	bne.n	800cb04 <__swbuf_r+0x6c>
 800cafa:	4621      	mov	r1, r4
 800cafc:	4628      	mov	r0, r5
 800cafe:	f000 ff8b 	bl	800da18 <_fflush_r>
 800cb02:	b988      	cbnz	r0, 800cb28 <__swbuf_r+0x90>
 800cb04:	4638      	mov	r0, r7
 800cb06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb08:	4b0a      	ldr	r3, [pc, #40]	; (800cb34 <__swbuf_r+0x9c>)
 800cb0a:	429c      	cmp	r4, r3
 800cb0c:	d101      	bne.n	800cb12 <__swbuf_r+0x7a>
 800cb0e:	68ac      	ldr	r4, [r5, #8]
 800cb10:	e7cf      	b.n	800cab2 <__swbuf_r+0x1a>
 800cb12:	4b09      	ldr	r3, [pc, #36]	; (800cb38 <__swbuf_r+0xa0>)
 800cb14:	429c      	cmp	r4, r3
 800cb16:	bf08      	it	eq
 800cb18:	68ec      	ldreq	r4, [r5, #12]
 800cb1a:	e7ca      	b.n	800cab2 <__swbuf_r+0x1a>
 800cb1c:	4621      	mov	r1, r4
 800cb1e:	4628      	mov	r0, r5
 800cb20:	f000 f80c 	bl	800cb3c <__swsetup_r>
 800cb24:	2800      	cmp	r0, #0
 800cb26:	d0cb      	beq.n	800cac0 <__swbuf_r+0x28>
 800cb28:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800cb2c:	e7ea      	b.n	800cb04 <__swbuf_r+0x6c>
 800cb2e:	bf00      	nop
 800cb30:	0800ed44 	.word	0x0800ed44
 800cb34:	0800ed64 	.word	0x0800ed64
 800cb38:	0800ed24 	.word	0x0800ed24

0800cb3c <__swsetup_r>:
 800cb3c:	4b32      	ldr	r3, [pc, #200]	; (800cc08 <__swsetup_r+0xcc>)
 800cb3e:	b570      	push	{r4, r5, r6, lr}
 800cb40:	681d      	ldr	r5, [r3, #0]
 800cb42:	4606      	mov	r6, r0
 800cb44:	460c      	mov	r4, r1
 800cb46:	b125      	cbz	r5, 800cb52 <__swsetup_r+0x16>
 800cb48:	69ab      	ldr	r3, [r5, #24]
 800cb4a:	b913      	cbnz	r3, 800cb52 <__swsetup_r+0x16>
 800cb4c:	4628      	mov	r0, r5
 800cb4e:	f000 fff7 	bl	800db40 <__sinit>
 800cb52:	4b2e      	ldr	r3, [pc, #184]	; (800cc0c <__swsetup_r+0xd0>)
 800cb54:	429c      	cmp	r4, r3
 800cb56:	d10f      	bne.n	800cb78 <__swsetup_r+0x3c>
 800cb58:	686c      	ldr	r4, [r5, #4]
 800cb5a:	89a3      	ldrh	r3, [r4, #12]
 800cb5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cb60:	0719      	lsls	r1, r3, #28
 800cb62:	d42c      	bmi.n	800cbbe <__swsetup_r+0x82>
 800cb64:	06dd      	lsls	r5, r3, #27
 800cb66:	d411      	bmi.n	800cb8c <__swsetup_r+0x50>
 800cb68:	2309      	movs	r3, #9
 800cb6a:	6033      	str	r3, [r6, #0]
 800cb6c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cb70:	81a3      	strh	r3, [r4, #12]
 800cb72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cb76:	e03e      	b.n	800cbf6 <__swsetup_r+0xba>
 800cb78:	4b25      	ldr	r3, [pc, #148]	; (800cc10 <__swsetup_r+0xd4>)
 800cb7a:	429c      	cmp	r4, r3
 800cb7c:	d101      	bne.n	800cb82 <__swsetup_r+0x46>
 800cb7e:	68ac      	ldr	r4, [r5, #8]
 800cb80:	e7eb      	b.n	800cb5a <__swsetup_r+0x1e>
 800cb82:	4b24      	ldr	r3, [pc, #144]	; (800cc14 <__swsetup_r+0xd8>)
 800cb84:	429c      	cmp	r4, r3
 800cb86:	bf08      	it	eq
 800cb88:	68ec      	ldreq	r4, [r5, #12]
 800cb8a:	e7e6      	b.n	800cb5a <__swsetup_r+0x1e>
 800cb8c:	0758      	lsls	r0, r3, #29
 800cb8e:	d512      	bpl.n	800cbb6 <__swsetup_r+0x7a>
 800cb90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cb92:	b141      	cbz	r1, 800cba6 <__swsetup_r+0x6a>
 800cb94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cb98:	4299      	cmp	r1, r3
 800cb9a:	d002      	beq.n	800cba2 <__swsetup_r+0x66>
 800cb9c:	4630      	mov	r0, r6
 800cb9e:	f7ff f993 	bl	800bec8 <_free_r>
 800cba2:	2300      	movs	r3, #0
 800cba4:	6363      	str	r3, [r4, #52]	; 0x34
 800cba6:	89a3      	ldrh	r3, [r4, #12]
 800cba8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cbac:	81a3      	strh	r3, [r4, #12]
 800cbae:	2300      	movs	r3, #0
 800cbb0:	6063      	str	r3, [r4, #4]
 800cbb2:	6923      	ldr	r3, [r4, #16]
 800cbb4:	6023      	str	r3, [r4, #0]
 800cbb6:	89a3      	ldrh	r3, [r4, #12]
 800cbb8:	f043 0308 	orr.w	r3, r3, #8
 800cbbc:	81a3      	strh	r3, [r4, #12]
 800cbbe:	6923      	ldr	r3, [r4, #16]
 800cbc0:	b94b      	cbnz	r3, 800cbd6 <__swsetup_r+0x9a>
 800cbc2:	89a3      	ldrh	r3, [r4, #12]
 800cbc4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cbc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cbcc:	d003      	beq.n	800cbd6 <__swsetup_r+0x9a>
 800cbce:	4621      	mov	r1, r4
 800cbd0:	4630      	mov	r0, r6
 800cbd2:	f001 f87f 	bl	800dcd4 <__smakebuf_r>
 800cbd6:	89a0      	ldrh	r0, [r4, #12]
 800cbd8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cbdc:	f010 0301 	ands.w	r3, r0, #1
 800cbe0:	d00a      	beq.n	800cbf8 <__swsetup_r+0xbc>
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	60a3      	str	r3, [r4, #8]
 800cbe6:	6963      	ldr	r3, [r4, #20]
 800cbe8:	425b      	negs	r3, r3
 800cbea:	61a3      	str	r3, [r4, #24]
 800cbec:	6923      	ldr	r3, [r4, #16]
 800cbee:	b943      	cbnz	r3, 800cc02 <__swsetup_r+0xc6>
 800cbf0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cbf4:	d1ba      	bne.n	800cb6c <__swsetup_r+0x30>
 800cbf6:	bd70      	pop	{r4, r5, r6, pc}
 800cbf8:	0781      	lsls	r1, r0, #30
 800cbfa:	bf58      	it	pl
 800cbfc:	6963      	ldrpl	r3, [r4, #20]
 800cbfe:	60a3      	str	r3, [r4, #8]
 800cc00:	e7f4      	b.n	800cbec <__swsetup_r+0xb0>
 800cc02:	2000      	movs	r0, #0
 800cc04:	e7f7      	b.n	800cbf6 <__swsetup_r+0xba>
 800cc06:	bf00      	nop
 800cc08:	20000020 	.word	0x20000020
 800cc0c:	0800ed44 	.word	0x0800ed44
 800cc10:	0800ed64 	.word	0x0800ed64
 800cc14:	0800ed24 	.word	0x0800ed24

0800cc18 <quorem>:
 800cc18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc1c:	6903      	ldr	r3, [r0, #16]
 800cc1e:	690c      	ldr	r4, [r1, #16]
 800cc20:	42a3      	cmp	r3, r4
 800cc22:	4607      	mov	r7, r0
 800cc24:	f2c0 8081 	blt.w	800cd2a <quorem+0x112>
 800cc28:	3c01      	subs	r4, #1
 800cc2a:	f101 0814 	add.w	r8, r1, #20
 800cc2e:	f100 0514 	add.w	r5, r0, #20
 800cc32:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cc36:	9301      	str	r3, [sp, #4]
 800cc38:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cc3c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cc40:	3301      	adds	r3, #1
 800cc42:	429a      	cmp	r2, r3
 800cc44:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800cc48:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cc4c:	fbb2 f6f3 	udiv	r6, r2, r3
 800cc50:	d331      	bcc.n	800ccb6 <quorem+0x9e>
 800cc52:	f04f 0e00 	mov.w	lr, #0
 800cc56:	4640      	mov	r0, r8
 800cc58:	46ac      	mov	ip, r5
 800cc5a:	46f2      	mov	sl, lr
 800cc5c:	f850 2b04 	ldr.w	r2, [r0], #4
 800cc60:	b293      	uxth	r3, r2
 800cc62:	fb06 e303 	mla	r3, r6, r3, lr
 800cc66:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800cc6a:	b29b      	uxth	r3, r3
 800cc6c:	ebaa 0303 	sub.w	r3, sl, r3
 800cc70:	f8dc a000 	ldr.w	sl, [ip]
 800cc74:	0c12      	lsrs	r2, r2, #16
 800cc76:	fa13 f38a 	uxtah	r3, r3, sl
 800cc7a:	fb06 e202 	mla	r2, r6, r2, lr
 800cc7e:	9300      	str	r3, [sp, #0]
 800cc80:	9b00      	ldr	r3, [sp, #0]
 800cc82:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800cc86:	b292      	uxth	r2, r2
 800cc88:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800cc8c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cc90:	f8bd 3000 	ldrh.w	r3, [sp]
 800cc94:	4581      	cmp	r9, r0
 800cc96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cc9a:	f84c 3b04 	str.w	r3, [ip], #4
 800cc9e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800cca2:	d2db      	bcs.n	800cc5c <quorem+0x44>
 800cca4:	f855 300b 	ldr.w	r3, [r5, fp]
 800cca8:	b92b      	cbnz	r3, 800ccb6 <quorem+0x9e>
 800ccaa:	9b01      	ldr	r3, [sp, #4]
 800ccac:	3b04      	subs	r3, #4
 800ccae:	429d      	cmp	r5, r3
 800ccb0:	461a      	mov	r2, r3
 800ccb2:	d32e      	bcc.n	800cd12 <quorem+0xfa>
 800ccb4:	613c      	str	r4, [r7, #16]
 800ccb6:	4638      	mov	r0, r7
 800ccb8:	f001 fae8 	bl	800e28c <__mcmp>
 800ccbc:	2800      	cmp	r0, #0
 800ccbe:	db24      	blt.n	800cd0a <quorem+0xf2>
 800ccc0:	3601      	adds	r6, #1
 800ccc2:	4628      	mov	r0, r5
 800ccc4:	f04f 0c00 	mov.w	ip, #0
 800ccc8:	f858 2b04 	ldr.w	r2, [r8], #4
 800cccc:	f8d0 e000 	ldr.w	lr, [r0]
 800ccd0:	b293      	uxth	r3, r2
 800ccd2:	ebac 0303 	sub.w	r3, ip, r3
 800ccd6:	0c12      	lsrs	r2, r2, #16
 800ccd8:	fa13 f38e 	uxtah	r3, r3, lr
 800ccdc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800cce0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cce4:	b29b      	uxth	r3, r3
 800cce6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ccea:	45c1      	cmp	r9, r8
 800ccec:	f840 3b04 	str.w	r3, [r0], #4
 800ccf0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ccf4:	d2e8      	bcs.n	800ccc8 <quorem+0xb0>
 800ccf6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ccfa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ccfe:	b922      	cbnz	r2, 800cd0a <quorem+0xf2>
 800cd00:	3b04      	subs	r3, #4
 800cd02:	429d      	cmp	r5, r3
 800cd04:	461a      	mov	r2, r3
 800cd06:	d30a      	bcc.n	800cd1e <quorem+0x106>
 800cd08:	613c      	str	r4, [r7, #16]
 800cd0a:	4630      	mov	r0, r6
 800cd0c:	b003      	add	sp, #12
 800cd0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd12:	6812      	ldr	r2, [r2, #0]
 800cd14:	3b04      	subs	r3, #4
 800cd16:	2a00      	cmp	r2, #0
 800cd18:	d1cc      	bne.n	800ccb4 <quorem+0x9c>
 800cd1a:	3c01      	subs	r4, #1
 800cd1c:	e7c7      	b.n	800ccae <quorem+0x96>
 800cd1e:	6812      	ldr	r2, [r2, #0]
 800cd20:	3b04      	subs	r3, #4
 800cd22:	2a00      	cmp	r2, #0
 800cd24:	d1f0      	bne.n	800cd08 <quorem+0xf0>
 800cd26:	3c01      	subs	r4, #1
 800cd28:	e7eb      	b.n	800cd02 <quorem+0xea>
 800cd2a:	2000      	movs	r0, #0
 800cd2c:	e7ee      	b.n	800cd0c <quorem+0xf4>
	...

0800cd30 <_dtoa_r>:
 800cd30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd34:	ed2d 8b04 	vpush	{d8-d9}
 800cd38:	ec57 6b10 	vmov	r6, r7, d0
 800cd3c:	b093      	sub	sp, #76	; 0x4c
 800cd3e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800cd40:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800cd44:	9106      	str	r1, [sp, #24]
 800cd46:	ee10 aa10 	vmov	sl, s0
 800cd4a:	4604      	mov	r4, r0
 800cd4c:	9209      	str	r2, [sp, #36]	; 0x24
 800cd4e:	930c      	str	r3, [sp, #48]	; 0x30
 800cd50:	46bb      	mov	fp, r7
 800cd52:	b975      	cbnz	r5, 800cd72 <_dtoa_r+0x42>
 800cd54:	2010      	movs	r0, #16
 800cd56:	f7ff f8a7 	bl	800bea8 <malloc>
 800cd5a:	4602      	mov	r2, r0
 800cd5c:	6260      	str	r0, [r4, #36]	; 0x24
 800cd5e:	b920      	cbnz	r0, 800cd6a <_dtoa_r+0x3a>
 800cd60:	4ba7      	ldr	r3, [pc, #668]	; (800d000 <_dtoa_r+0x2d0>)
 800cd62:	21ea      	movs	r1, #234	; 0xea
 800cd64:	48a7      	ldr	r0, [pc, #668]	; (800d004 <_dtoa_r+0x2d4>)
 800cd66:	f001 fd59 	bl	800e81c <__assert_func>
 800cd6a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800cd6e:	6005      	str	r5, [r0, #0]
 800cd70:	60c5      	str	r5, [r0, #12]
 800cd72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cd74:	6819      	ldr	r1, [r3, #0]
 800cd76:	b151      	cbz	r1, 800cd8e <_dtoa_r+0x5e>
 800cd78:	685a      	ldr	r2, [r3, #4]
 800cd7a:	604a      	str	r2, [r1, #4]
 800cd7c:	2301      	movs	r3, #1
 800cd7e:	4093      	lsls	r3, r2
 800cd80:	608b      	str	r3, [r1, #8]
 800cd82:	4620      	mov	r0, r4
 800cd84:	f001 f840 	bl	800de08 <_Bfree>
 800cd88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cd8a:	2200      	movs	r2, #0
 800cd8c:	601a      	str	r2, [r3, #0]
 800cd8e:	1e3b      	subs	r3, r7, #0
 800cd90:	bfaa      	itet	ge
 800cd92:	2300      	movge	r3, #0
 800cd94:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800cd98:	f8c8 3000 	strge.w	r3, [r8]
 800cd9c:	4b9a      	ldr	r3, [pc, #616]	; (800d008 <_dtoa_r+0x2d8>)
 800cd9e:	bfbc      	itt	lt
 800cda0:	2201      	movlt	r2, #1
 800cda2:	f8c8 2000 	strlt.w	r2, [r8]
 800cda6:	ea33 030b 	bics.w	r3, r3, fp
 800cdaa:	d11b      	bne.n	800cde4 <_dtoa_r+0xb4>
 800cdac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cdae:	f242 730f 	movw	r3, #9999	; 0x270f
 800cdb2:	6013      	str	r3, [r2, #0]
 800cdb4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cdb8:	4333      	orrs	r3, r6
 800cdba:	f000 8592 	beq.w	800d8e2 <_dtoa_r+0xbb2>
 800cdbe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cdc0:	b963      	cbnz	r3, 800cddc <_dtoa_r+0xac>
 800cdc2:	4b92      	ldr	r3, [pc, #584]	; (800d00c <_dtoa_r+0x2dc>)
 800cdc4:	e022      	b.n	800ce0c <_dtoa_r+0xdc>
 800cdc6:	4b92      	ldr	r3, [pc, #584]	; (800d010 <_dtoa_r+0x2e0>)
 800cdc8:	9301      	str	r3, [sp, #4]
 800cdca:	3308      	adds	r3, #8
 800cdcc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800cdce:	6013      	str	r3, [r2, #0]
 800cdd0:	9801      	ldr	r0, [sp, #4]
 800cdd2:	b013      	add	sp, #76	; 0x4c
 800cdd4:	ecbd 8b04 	vpop	{d8-d9}
 800cdd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cddc:	4b8b      	ldr	r3, [pc, #556]	; (800d00c <_dtoa_r+0x2dc>)
 800cdde:	9301      	str	r3, [sp, #4]
 800cde0:	3303      	adds	r3, #3
 800cde2:	e7f3      	b.n	800cdcc <_dtoa_r+0x9c>
 800cde4:	2200      	movs	r2, #0
 800cde6:	2300      	movs	r3, #0
 800cde8:	4650      	mov	r0, sl
 800cdea:	4659      	mov	r1, fp
 800cdec:	f7f3 fe84 	bl	8000af8 <__aeabi_dcmpeq>
 800cdf0:	ec4b ab19 	vmov	d9, sl, fp
 800cdf4:	4680      	mov	r8, r0
 800cdf6:	b158      	cbz	r0, 800ce10 <_dtoa_r+0xe0>
 800cdf8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cdfa:	2301      	movs	r3, #1
 800cdfc:	6013      	str	r3, [r2, #0]
 800cdfe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	f000 856b 	beq.w	800d8dc <_dtoa_r+0xbac>
 800ce06:	4883      	ldr	r0, [pc, #524]	; (800d014 <_dtoa_r+0x2e4>)
 800ce08:	6018      	str	r0, [r3, #0]
 800ce0a:	1e43      	subs	r3, r0, #1
 800ce0c:	9301      	str	r3, [sp, #4]
 800ce0e:	e7df      	b.n	800cdd0 <_dtoa_r+0xa0>
 800ce10:	ec4b ab10 	vmov	d0, sl, fp
 800ce14:	aa10      	add	r2, sp, #64	; 0x40
 800ce16:	a911      	add	r1, sp, #68	; 0x44
 800ce18:	4620      	mov	r0, r4
 800ce1a:	f001 fadd 	bl	800e3d8 <__d2b>
 800ce1e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800ce22:	ee08 0a10 	vmov	s16, r0
 800ce26:	2d00      	cmp	r5, #0
 800ce28:	f000 8084 	beq.w	800cf34 <_dtoa_r+0x204>
 800ce2c:	ee19 3a90 	vmov	r3, s19
 800ce30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ce34:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800ce38:	4656      	mov	r6, sl
 800ce3a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800ce3e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ce42:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800ce46:	4b74      	ldr	r3, [pc, #464]	; (800d018 <_dtoa_r+0x2e8>)
 800ce48:	2200      	movs	r2, #0
 800ce4a:	4630      	mov	r0, r6
 800ce4c:	4639      	mov	r1, r7
 800ce4e:	f7f3 fa33 	bl	80002b8 <__aeabi_dsub>
 800ce52:	a365      	add	r3, pc, #404	; (adr r3, 800cfe8 <_dtoa_r+0x2b8>)
 800ce54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce58:	f7f3 fbe6 	bl	8000628 <__aeabi_dmul>
 800ce5c:	a364      	add	r3, pc, #400	; (adr r3, 800cff0 <_dtoa_r+0x2c0>)
 800ce5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce62:	f7f3 fa2b 	bl	80002bc <__adddf3>
 800ce66:	4606      	mov	r6, r0
 800ce68:	4628      	mov	r0, r5
 800ce6a:	460f      	mov	r7, r1
 800ce6c:	f7f3 fb72 	bl	8000554 <__aeabi_i2d>
 800ce70:	a361      	add	r3, pc, #388	; (adr r3, 800cff8 <_dtoa_r+0x2c8>)
 800ce72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce76:	f7f3 fbd7 	bl	8000628 <__aeabi_dmul>
 800ce7a:	4602      	mov	r2, r0
 800ce7c:	460b      	mov	r3, r1
 800ce7e:	4630      	mov	r0, r6
 800ce80:	4639      	mov	r1, r7
 800ce82:	f7f3 fa1b 	bl	80002bc <__adddf3>
 800ce86:	4606      	mov	r6, r0
 800ce88:	460f      	mov	r7, r1
 800ce8a:	f7f3 fe7d 	bl	8000b88 <__aeabi_d2iz>
 800ce8e:	2200      	movs	r2, #0
 800ce90:	9000      	str	r0, [sp, #0]
 800ce92:	2300      	movs	r3, #0
 800ce94:	4630      	mov	r0, r6
 800ce96:	4639      	mov	r1, r7
 800ce98:	f7f3 fe38 	bl	8000b0c <__aeabi_dcmplt>
 800ce9c:	b150      	cbz	r0, 800ceb4 <_dtoa_r+0x184>
 800ce9e:	9800      	ldr	r0, [sp, #0]
 800cea0:	f7f3 fb58 	bl	8000554 <__aeabi_i2d>
 800cea4:	4632      	mov	r2, r6
 800cea6:	463b      	mov	r3, r7
 800cea8:	f7f3 fe26 	bl	8000af8 <__aeabi_dcmpeq>
 800ceac:	b910      	cbnz	r0, 800ceb4 <_dtoa_r+0x184>
 800ceae:	9b00      	ldr	r3, [sp, #0]
 800ceb0:	3b01      	subs	r3, #1
 800ceb2:	9300      	str	r3, [sp, #0]
 800ceb4:	9b00      	ldr	r3, [sp, #0]
 800ceb6:	2b16      	cmp	r3, #22
 800ceb8:	d85a      	bhi.n	800cf70 <_dtoa_r+0x240>
 800ceba:	9a00      	ldr	r2, [sp, #0]
 800cebc:	4b57      	ldr	r3, [pc, #348]	; (800d01c <_dtoa_r+0x2ec>)
 800cebe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cec6:	ec51 0b19 	vmov	r0, r1, d9
 800ceca:	f7f3 fe1f 	bl	8000b0c <__aeabi_dcmplt>
 800cece:	2800      	cmp	r0, #0
 800ced0:	d050      	beq.n	800cf74 <_dtoa_r+0x244>
 800ced2:	9b00      	ldr	r3, [sp, #0]
 800ced4:	3b01      	subs	r3, #1
 800ced6:	9300      	str	r3, [sp, #0]
 800ced8:	2300      	movs	r3, #0
 800ceda:	930b      	str	r3, [sp, #44]	; 0x2c
 800cedc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cede:	1b5d      	subs	r5, r3, r5
 800cee0:	1e6b      	subs	r3, r5, #1
 800cee2:	9305      	str	r3, [sp, #20]
 800cee4:	bf45      	ittet	mi
 800cee6:	f1c5 0301 	rsbmi	r3, r5, #1
 800ceea:	9304      	strmi	r3, [sp, #16]
 800ceec:	2300      	movpl	r3, #0
 800ceee:	2300      	movmi	r3, #0
 800cef0:	bf4c      	ite	mi
 800cef2:	9305      	strmi	r3, [sp, #20]
 800cef4:	9304      	strpl	r3, [sp, #16]
 800cef6:	9b00      	ldr	r3, [sp, #0]
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	db3d      	blt.n	800cf78 <_dtoa_r+0x248>
 800cefc:	9b05      	ldr	r3, [sp, #20]
 800cefe:	9a00      	ldr	r2, [sp, #0]
 800cf00:	920a      	str	r2, [sp, #40]	; 0x28
 800cf02:	4413      	add	r3, r2
 800cf04:	9305      	str	r3, [sp, #20]
 800cf06:	2300      	movs	r3, #0
 800cf08:	9307      	str	r3, [sp, #28]
 800cf0a:	9b06      	ldr	r3, [sp, #24]
 800cf0c:	2b09      	cmp	r3, #9
 800cf0e:	f200 8089 	bhi.w	800d024 <_dtoa_r+0x2f4>
 800cf12:	2b05      	cmp	r3, #5
 800cf14:	bfc4      	itt	gt
 800cf16:	3b04      	subgt	r3, #4
 800cf18:	9306      	strgt	r3, [sp, #24]
 800cf1a:	9b06      	ldr	r3, [sp, #24]
 800cf1c:	f1a3 0302 	sub.w	r3, r3, #2
 800cf20:	bfcc      	ite	gt
 800cf22:	2500      	movgt	r5, #0
 800cf24:	2501      	movle	r5, #1
 800cf26:	2b03      	cmp	r3, #3
 800cf28:	f200 8087 	bhi.w	800d03a <_dtoa_r+0x30a>
 800cf2c:	e8df f003 	tbb	[pc, r3]
 800cf30:	59383a2d 	.word	0x59383a2d
 800cf34:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800cf38:	441d      	add	r5, r3
 800cf3a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800cf3e:	2b20      	cmp	r3, #32
 800cf40:	bfc1      	itttt	gt
 800cf42:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800cf46:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800cf4a:	fa0b f303 	lslgt.w	r3, fp, r3
 800cf4e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800cf52:	bfda      	itte	le
 800cf54:	f1c3 0320 	rsble	r3, r3, #32
 800cf58:	fa06 f003 	lslle.w	r0, r6, r3
 800cf5c:	4318      	orrgt	r0, r3
 800cf5e:	f7f3 fae9 	bl	8000534 <__aeabi_ui2d>
 800cf62:	2301      	movs	r3, #1
 800cf64:	4606      	mov	r6, r0
 800cf66:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800cf6a:	3d01      	subs	r5, #1
 800cf6c:	930e      	str	r3, [sp, #56]	; 0x38
 800cf6e:	e76a      	b.n	800ce46 <_dtoa_r+0x116>
 800cf70:	2301      	movs	r3, #1
 800cf72:	e7b2      	b.n	800ceda <_dtoa_r+0x1aa>
 800cf74:	900b      	str	r0, [sp, #44]	; 0x2c
 800cf76:	e7b1      	b.n	800cedc <_dtoa_r+0x1ac>
 800cf78:	9b04      	ldr	r3, [sp, #16]
 800cf7a:	9a00      	ldr	r2, [sp, #0]
 800cf7c:	1a9b      	subs	r3, r3, r2
 800cf7e:	9304      	str	r3, [sp, #16]
 800cf80:	4253      	negs	r3, r2
 800cf82:	9307      	str	r3, [sp, #28]
 800cf84:	2300      	movs	r3, #0
 800cf86:	930a      	str	r3, [sp, #40]	; 0x28
 800cf88:	e7bf      	b.n	800cf0a <_dtoa_r+0x1da>
 800cf8a:	2300      	movs	r3, #0
 800cf8c:	9308      	str	r3, [sp, #32]
 800cf8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	dc55      	bgt.n	800d040 <_dtoa_r+0x310>
 800cf94:	2301      	movs	r3, #1
 800cf96:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800cf9a:	461a      	mov	r2, r3
 800cf9c:	9209      	str	r2, [sp, #36]	; 0x24
 800cf9e:	e00c      	b.n	800cfba <_dtoa_r+0x28a>
 800cfa0:	2301      	movs	r3, #1
 800cfa2:	e7f3      	b.n	800cf8c <_dtoa_r+0x25c>
 800cfa4:	2300      	movs	r3, #0
 800cfa6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cfa8:	9308      	str	r3, [sp, #32]
 800cfaa:	9b00      	ldr	r3, [sp, #0]
 800cfac:	4413      	add	r3, r2
 800cfae:	9302      	str	r3, [sp, #8]
 800cfb0:	3301      	adds	r3, #1
 800cfb2:	2b01      	cmp	r3, #1
 800cfb4:	9303      	str	r3, [sp, #12]
 800cfb6:	bfb8      	it	lt
 800cfb8:	2301      	movlt	r3, #1
 800cfba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800cfbc:	2200      	movs	r2, #0
 800cfbe:	6042      	str	r2, [r0, #4]
 800cfc0:	2204      	movs	r2, #4
 800cfc2:	f102 0614 	add.w	r6, r2, #20
 800cfc6:	429e      	cmp	r6, r3
 800cfc8:	6841      	ldr	r1, [r0, #4]
 800cfca:	d93d      	bls.n	800d048 <_dtoa_r+0x318>
 800cfcc:	4620      	mov	r0, r4
 800cfce:	f000 fedb 	bl	800dd88 <_Balloc>
 800cfd2:	9001      	str	r0, [sp, #4]
 800cfd4:	2800      	cmp	r0, #0
 800cfd6:	d13b      	bne.n	800d050 <_dtoa_r+0x320>
 800cfd8:	4b11      	ldr	r3, [pc, #68]	; (800d020 <_dtoa_r+0x2f0>)
 800cfda:	4602      	mov	r2, r0
 800cfdc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800cfe0:	e6c0      	b.n	800cd64 <_dtoa_r+0x34>
 800cfe2:	2301      	movs	r3, #1
 800cfe4:	e7df      	b.n	800cfa6 <_dtoa_r+0x276>
 800cfe6:	bf00      	nop
 800cfe8:	636f4361 	.word	0x636f4361
 800cfec:	3fd287a7 	.word	0x3fd287a7
 800cff0:	8b60c8b3 	.word	0x8b60c8b3
 800cff4:	3fc68a28 	.word	0x3fc68a28
 800cff8:	509f79fb 	.word	0x509f79fb
 800cffc:	3fd34413 	.word	0x3fd34413
 800d000:	0800eca1 	.word	0x0800eca1
 800d004:	0800ecb8 	.word	0x0800ecb8
 800d008:	7ff00000 	.word	0x7ff00000
 800d00c:	0800ec9d 	.word	0x0800ec9d
 800d010:	0800ec94 	.word	0x0800ec94
 800d014:	0800ec71 	.word	0x0800ec71
 800d018:	3ff80000 	.word	0x3ff80000
 800d01c:	0800ee08 	.word	0x0800ee08
 800d020:	0800ed13 	.word	0x0800ed13
 800d024:	2501      	movs	r5, #1
 800d026:	2300      	movs	r3, #0
 800d028:	9306      	str	r3, [sp, #24]
 800d02a:	9508      	str	r5, [sp, #32]
 800d02c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d030:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d034:	2200      	movs	r2, #0
 800d036:	2312      	movs	r3, #18
 800d038:	e7b0      	b.n	800cf9c <_dtoa_r+0x26c>
 800d03a:	2301      	movs	r3, #1
 800d03c:	9308      	str	r3, [sp, #32]
 800d03e:	e7f5      	b.n	800d02c <_dtoa_r+0x2fc>
 800d040:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d042:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d046:	e7b8      	b.n	800cfba <_dtoa_r+0x28a>
 800d048:	3101      	adds	r1, #1
 800d04a:	6041      	str	r1, [r0, #4]
 800d04c:	0052      	lsls	r2, r2, #1
 800d04e:	e7b8      	b.n	800cfc2 <_dtoa_r+0x292>
 800d050:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d052:	9a01      	ldr	r2, [sp, #4]
 800d054:	601a      	str	r2, [r3, #0]
 800d056:	9b03      	ldr	r3, [sp, #12]
 800d058:	2b0e      	cmp	r3, #14
 800d05a:	f200 809d 	bhi.w	800d198 <_dtoa_r+0x468>
 800d05e:	2d00      	cmp	r5, #0
 800d060:	f000 809a 	beq.w	800d198 <_dtoa_r+0x468>
 800d064:	9b00      	ldr	r3, [sp, #0]
 800d066:	2b00      	cmp	r3, #0
 800d068:	dd32      	ble.n	800d0d0 <_dtoa_r+0x3a0>
 800d06a:	4ab7      	ldr	r2, [pc, #732]	; (800d348 <_dtoa_r+0x618>)
 800d06c:	f003 030f 	and.w	r3, r3, #15
 800d070:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d074:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d078:	9b00      	ldr	r3, [sp, #0]
 800d07a:	05d8      	lsls	r0, r3, #23
 800d07c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800d080:	d516      	bpl.n	800d0b0 <_dtoa_r+0x380>
 800d082:	4bb2      	ldr	r3, [pc, #712]	; (800d34c <_dtoa_r+0x61c>)
 800d084:	ec51 0b19 	vmov	r0, r1, d9
 800d088:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d08c:	f7f3 fbf6 	bl	800087c <__aeabi_ddiv>
 800d090:	f007 070f 	and.w	r7, r7, #15
 800d094:	4682      	mov	sl, r0
 800d096:	468b      	mov	fp, r1
 800d098:	2503      	movs	r5, #3
 800d09a:	4eac      	ldr	r6, [pc, #688]	; (800d34c <_dtoa_r+0x61c>)
 800d09c:	b957      	cbnz	r7, 800d0b4 <_dtoa_r+0x384>
 800d09e:	4642      	mov	r2, r8
 800d0a0:	464b      	mov	r3, r9
 800d0a2:	4650      	mov	r0, sl
 800d0a4:	4659      	mov	r1, fp
 800d0a6:	f7f3 fbe9 	bl	800087c <__aeabi_ddiv>
 800d0aa:	4682      	mov	sl, r0
 800d0ac:	468b      	mov	fp, r1
 800d0ae:	e028      	b.n	800d102 <_dtoa_r+0x3d2>
 800d0b0:	2502      	movs	r5, #2
 800d0b2:	e7f2      	b.n	800d09a <_dtoa_r+0x36a>
 800d0b4:	07f9      	lsls	r1, r7, #31
 800d0b6:	d508      	bpl.n	800d0ca <_dtoa_r+0x39a>
 800d0b8:	4640      	mov	r0, r8
 800d0ba:	4649      	mov	r1, r9
 800d0bc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d0c0:	f7f3 fab2 	bl	8000628 <__aeabi_dmul>
 800d0c4:	3501      	adds	r5, #1
 800d0c6:	4680      	mov	r8, r0
 800d0c8:	4689      	mov	r9, r1
 800d0ca:	107f      	asrs	r7, r7, #1
 800d0cc:	3608      	adds	r6, #8
 800d0ce:	e7e5      	b.n	800d09c <_dtoa_r+0x36c>
 800d0d0:	f000 809b 	beq.w	800d20a <_dtoa_r+0x4da>
 800d0d4:	9b00      	ldr	r3, [sp, #0]
 800d0d6:	4f9d      	ldr	r7, [pc, #628]	; (800d34c <_dtoa_r+0x61c>)
 800d0d8:	425e      	negs	r6, r3
 800d0da:	4b9b      	ldr	r3, [pc, #620]	; (800d348 <_dtoa_r+0x618>)
 800d0dc:	f006 020f 	and.w	r2, r6, #15
 800d0e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d0e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0e8:	ec51 0b19 	vmov	r0, r1, d9
 800d0ec:	f7f3 fa9c 	bl	8000628 <__aeabi_dmul>
 800d0f0:	1136      	asrs	r6, r6, #4
 800d0f2:	4682      	mov	sl, r0
 800d0f4:	468b      	mov	fp, r1
 800d0f6:	2300      	movs	r3, #0
 800d0f8:	2502      	movs	r5, #2
 800d0fa:	2e00      	cmp	r6, #0
 800d0fc:	d17a      	bne.n	800d1f4 <_dtoa_r+0x4c4>
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d1d3      	bne.n	800d0aa <_dtoa_r+0x37a>
 800d102:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d104:	2b00      	cmp	r3, #0
 800d106:	f000 8082 	beq.w	800d20e <_dtoa_r+0x4de>
 800d10a:	4b91      	ldr	r3, [pc, #580]	; (800d350 <_dtoa_r+0x620>)
 800d10c:	2200      	movs	r2, #0
 800d10e:	4650      	mov	r0, sl
 800d110:	4659      	mov	r1, fp
 800d112:	f7f3 fcfb 	bl	8000b0c <__aeabi_dcmplt>
 800d116:	2800      	cmp	r0, #0
 800d118:	d079      	beq.n	800d20e <_dtoa_r+0x4de>
 800d11a:	9b03      	ldr	r3, [sp, #12]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d076      	beq.n	800d20e <_dtoa_r+0x4de>
 800d120:	9b02      	ldr	r3, [sp, #8]
 800d122:	2b00      	cmp	r3, #0
 800d124:	dd36      	ble.n	800d194 <_dtoa_r+0x464>
 800d126:	9b00      	ldr	r3, [sp, #0]
 800d128:	4650      	mov	r0, sl
 800d12a:	4659      	mov	r1, fp
 800d12c:	1e5f      	subs	r7, r3, #1
 800d12e:	2200      	movs	r2, #0
 800d130:	4b88      	ldr	r3, [pc, #544]	; (800d354 <_dtoa_r+0x624>)
 800d132:	f7f3 fa79 	bl	8000628 <__aeabi_dmul>
 800d136:	9e02      	ldr	r6, [sp, #8]
 800d138:	4682      	mov	sl, r0
 800d13a:	468b      	mov	fp, r1
 800d13c:	3501      	adds	r5, #1
 800d13e:	4628      	mov	r0, r5
 800d140:	f7f3 fa08 	bl	8000554 <__aeabi_i2d>
 800d144:	4652      	mov	r2, sl
 800d146:	465b      	mov	r3, fp
 800d148:	f7f3 fa6e 	bl	8000628 <__aeabi_dmul>
 800d14c:	4b82      	ldr	r3, [pc, #520]	; (800d358 <_dtoa_r+0x628>)
 800d14e:	2200      	movs	r2, #0
 800d150:	f7f3 f8b4 	bl	80002bc <__adddf3>
 800d154:	46d0      	mov	r8, sl
 800d156:	46d9      	mov	r9, fp
 800d158:	4682      	mov	sl, r0
 800d15a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800d15e:	2e00      	cmp	r6, #0
 800d160:	d158      	bne.n	800d214 <_dtoa_r+0x4e4>
 800d162:	4b7e      	ldr	r3, [pc, #504]	; (800d35c <_dtoa_r+0x62c>)
 800d164:	2200      	movs	r2, #0
 800d166:	4640      	mov	r0, r8
 800d168:	4649      	mov	r1, r9
 800d16a:	f7f3 f8a5 	bl	80002b8 <__aeabi_dsub>
 800d16e:	4652      	mov	r2, sl
 800d170:	465b      	mov	r3, fp
 800d172:	4680      	mov	r8, r0
 800d174:	4689      	mov	r9, r1
 800d176:	f7f3 fce7 	bl	8000b48 <__aeabi_dcmpgt>
 800d17a:	2800      	cmp	r0, #0
 800d17c:	f040 8295 	bne.w	800d6aa <_dtoa_r+0x97a>
 800d180:	4652      	mov	r2, sl
 800d182:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d186:	4640      	mov	r0, r8
 800d188:	4649      	mov	r1, r9
 800d18a:	f7f3 fcbf 	bl	8000b0c <__aeabi_dcmplt>
 800d18e:	2800      	cmp	r0, #0
 800d190:	f040 8289 	bne.w	800d6a6 <_dtoa_r+0x976>
 800d194:	ec5b ab19 	vmov	sl, fp, d9
 800d198:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	f2c0 8148 	blt.w	800d430 <_dtoa_r+0x700>
 800d1a0:	9a00      	ldr	r2, [sp, #0]
 800d1a2:	2a0e      	cmp	r2, #14
 800d1a4:	f300 8144 	bgt.w	800d430 <_dtoa_r+0x700>
 800d1a8:	4b67      	ldr	r3, [pc, #412]	; (800d348 <_dtoa_r+0x618>)
 800d1aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d1ae:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d1b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	f280 80d5 	bge.w	800d364 <_dtoa_r+0x634>
 800d1ba:	9b03      	ldr	r3, [sp, #12]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	f300 80d1 	bgt.w	800d364 <_dtoa_r+0x634>
 800d1c2:	f040 826f 	bne.w	800d6a4 <_dtoa_r+0x974>
 800d1c6:	4b65      	ldr	r3, [pc, #404]	; (800d35c <_dtoa_r+0x62c>)
 800d1c8:	2200      	movs	r2, #0
 800d1ca:	4640      	mov	r0, r8
 800d1cc:	4649      	mov	r1, r9
 800d1ce:	f7f3 fa2b 	bl	8000628 <__aeabi_dmul>
 800d1d2:	4652      	mov	r2, sl
 800d1d4:	465b      	mov	r3, fp
 800d1d6:	f7f3 fcad 	bl	8000b34 <__aeabi_dcmpge>
 800d1da:	9e03      	ldr	r6, [sp, #12]
 800d1dc:	4637      	mov	r7, r6
 800d1de:	2800      	cmp	r0, #0
 800d1e0:	f040 8245 	bne.w	800d66e <_dtoa_r+0x93e>
 800d1e4:	9d01      	ldr	r5, [sp, #4]
 800d1e6:	2331      	movs	r3, #49	; 0x31
 800d1e8:	f805 3b01 	strb.w	r3, [r5], #1
 800d1ec:	9b00      	ldr	r3, [sp, #0]
 800d1ee:	3301      	adds	r3, #1
 800d1f0:	9300      	str	r3, [sp, #0]
 800d1f2:	e240      	b.n	800d676 <_dtoa_r+0x946>
 800d1f4:	07f2      	lsls	r2, r6, #31
 800d1f6:	d505      	bpl.n	800d204 <_dtoa_r+0x4d4>
 800d1f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d1fc:	f7f3 fa14 	bl	8000628 <__aeabi_dmul>
 800d200:	3501      	adds	r5, #1
 800d202:	2301      	movs	r3, #1
 800d204:	1076      	asrs	r6, r6, #1
 800d206:	3708      	adds	r7, #8
 800d208:	e777      	b.n	800d0fa <_dtoa_r+0x3ca>
 800d20a:	2502      	movs	r5, #2
 800d20c:	e779      	b.n	800d102 <_dtoa_r+0x3d2>
 800d20e:	9f00      	ldr	r7, [sp, #0]
 800d210:	9e03      	ldr	r6, [sp, #12]
 800d212:	e794      	b.n	800d13e <_dtoa_r+0x40e>
 800d214:	9901      	ldr	r1, [sp, #4]
 800d216:	4b4c      	ldr	r3, [pc, #304]	; (800d348 <_dtoa_r+0x618>)
 800d218:	4431      	add	r1, r6
 800d21a:	910d      	str	r1, [sp, #52]	; 0x34
 800d21c:	9908      	ldr	r1, [sp, #32]
 800d21e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d222:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d226:	2900      	cmp	r1, #0
 800d228:	d043      	beq.n	800d2b2 <_dtoa_r+0x582>
 800d22a:	494d      	ldr	r1, [pc, #308]	; (800d360 <_dtoa_r+0x630>)
 800d22c:	2000      	movs	r0, #0
 800d22e:	f7f3 fb25 	bl	800087c <__aeabi_ddiv>
 800d232:	4652      	mov	r2, sl
 800d234:	465b      	mov	r3, fp
 800d236:	f7f3 f83f 	bl	80002b8 <__aeabi_dsub>
 800d23a:	9d01      	ldr	r5, [sp, #4]
 800d23c:	4682      	mov	sl, r0
 800d23e:	468b      	mov	fp, r1
 800d240:	4649      	mov	r1, r9
 800d242:	4640      	mov	r0, r8
 800d244:	f7f3 fca0 	bl	8000b88 <__aeabi_d2iz>
 800d248:	4606      	mov	r6, r0
 800d24a:	f7f3 f983 	bl	8000554 <__aeabi_i2d>
 800d24e:	4602      	mov	r2, r0
 800d250:	460b      	mov	r3, r1
 800d252:	4640      	mov	r0, r8
 800d254:	4649      	mov	r1, r9
 800d256:	f7f3 f82f 	bl	80002b8 <__aeabi_dsub>
 800d25a:	3630      	adds	r6, #48	; 0x30
 800d25c:	f805 6b01 	strb.w	r6, [r5], #1
 800d260:	4652      	mov	r2, sl
 800d262:	465b      	mov	r3, fp
 800d264:	4680      	mov	r8, r0
 800d266:	4689      	mov	r9, r1
 800d268:	f7f3 fc50 	bl	8000b0c <__aeabi_dcmplt>
 800d26c:	2800      	cmp	r0, #0
 800d26e:	d163      	bne.n	800d338 <_dtoa_r+0x608>
 800d270:	4642      	mov	r2, r8
 800d272:	464b      	mov	r3, r9
 800d274:	4936      	ldr	r1, [pc, #216]	; (800d350 <_dtoa_r+0x620>)
 800d276:	2000      	movs	r0, #0
 800d278:	f7f3 f81e 	bl	80002b8 <__aeabi_dsub>
 800d27c:	4652      	mov	r2, sl
 800d27e:	465b      	mov	r3, fp
 800d280:	f7f3 fc44 	bl	8000b0c <__aeabi_dcmplt>
 800d284:	2800      	cmp	r0, #0
 800d286:	f040 80b5 	bne.w	800d3f4 <_dtoa_r+0x6c4>
 800d28a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d28c:	429d      	cmp	r5, r3
 800d28e:	d081      	beq.n	800d194 <_dtoa_r+0x464>
 800d290:	4b30      	ldr	r3, [pc, #192]	; (800d354 <_dtoa_r+0x624>)
 800d292:	2200      	movs	r2, #0
 800d294:	4650      	mov	r0, sl
 800d296:	4659      	mov	r1, fp
 800d298:	f7f3 f9c6 	bl	8000628 <__aeabi_dmul>
 800d29c:	4b2d      	ldr	r3, [pc, #180]	; (800d354 <_dtoa_r+0x624>)
 800d29e:	4682      	mov	sl, r0
 800d2a0:	468b      	mov	fp, r1
 800d2a2:	4640      	mov	r0, r8
 800d2a4:	4649      	mov	r1, r9
 800d2a6:	2200      	movs	r2, #0
 800d2a8:	f7f3 f9be 	bl	8000628 <__aeabi_dmul>
 800d2ac:	4680      	mov	r8, r0
 800d2ae:	4689      	mov	r9, r1
 800d2b0:	e7c6      	b.n	800d240 <_dtoa_r+0x510>
 800d2b2:	4650      	mov	r0, sl
 800d2b4:	4659      	mov	r1, fp
 800d2b6:	f7f3 f9b7 	bl	8000628 <__aeabi_dmul>
 800d2ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d2bc:	9d01      	ldr	r5, [sp, #4]
 800d2be:	930f      	str	r3, [sp, #60]	; 0x3c
 800d2c0:	4682      	mov	sl, r0
 800d2c2:	468b      	mov	fp, r1
 800d2c4:	4649      	mov	r1, r9
 800d2c6:	4640      	mov	r0, r8
 800d2c8:	f7f3 fc5e 	bl	8000b88 <__aeabi_d2iz>
 800d2cc:	4606      	mov	r6, r0
 800d2ce:	f7f3 f941 	bl	8000554 <__aeabi_i2d>
 800d2d2:	3630      	adds	r6, #48	; 0x30
 800d2d4:	4602      	mov	r2, r0
 800d2d6:	460b      	mov	r3, r1
 800d2d8:	4640      	mov	r0, r8
 800d2da:	4649      	mov	r1, r9
 800d2dc:	f7f2 ffec 	bl	80002b8 <__aeabi_dsub>
 800d2e0:	f805 6b01 	strb.w	r6, [r5], #1
 800d2e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d2e6:	429d      	cmp	r5, r3
 800d2e8:	4680      	mov	r8, r0
 800d2ea:	4689      	mov	r9, r1
 800d2ec:	f04f 0200 	mov.w	r2, #0
 800d2f0:	d124      	bne.n	800d33c <_dtoa_r+0x60c>
 800d2f2:	4b1b      	ldr	r3, [pc, #108]	; (800d360 <_dtoa_r+0x630>)
 800d2f4:	4650      	mov	r0, sl
 800d2f6:	4659      	mov	r1, fp
 800d2f8:	f7f2 ffe0 	bl	80002bc <__adddf3>
 800d2fc:	4602      	mov	r2, r0
 800d2fe:	460b      	mov	r3, r1
 800d300:	4640      	mov	r0, r8
 800d302:	4649      	mov	r1, r9
 800d304:	f7f3 fc20 	bl	8000b48 <__aeabi_dcmpgt>
 800d308:	2800      	cmp	r0, #0
 800d30a:	d173      	bne.n	800d3f4 <_dtoa_r+0x6c4>
 800d30c:	4652      	mov	r2, sl
 800d30e:	465b      	mov	r3, fp
 800d310:	4913      	ldr	r1, [pc, #76]	; (800d360 <_dtoa_r+0x630>)
 800d312:	2000      	movs	r0, #0
 800d314:	f7f2 ffd0 	bl	80002b8 <__aeabi_dsub>
 800d318:	4602      	mov	r2, r0
 800d31a:	460b      	mov	r3, r1
 800d31c:	4640      	mov	r0, r8
 800d31e:	4649      	mov	r1, r9
 800d320:	f7f3 fbf4 	bl	8000b0c <__aeabi_dcmplt>
 800d324:	2800      	cmp	r0, #0
 800d326:	f43f af35 	beq.w	800d194 <_dtoa_r+0x464>
 800d32a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d32c:	1e6b      	subs	r3, r5, #1
 800d32e:	930f      	str	r3, [sp, #60]	; 0x3c
 800d330:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d334:	2b30      	cmp	r3, #48	; 0x30
 800d336:	d0f8      	beq.n	800d32a <_dtoa_r+0x5fa>
 800d338:	9700      	str	r7, [sp, #0]
 800d33a:	e049      	b.n	800d3d0 <_dtoa_r+0x6a0>
 800d33c:	4b05      	ldr	r3, [pc, #20]	; (800d354 <_dtoa_r+0x624>)
 800d33e:	f7f3 f973 	bl	8000628 <__aeabi_dmul>
 800d342:	4680      	mov	r8, r0
 800d344:	4689      	mov	r9, r1
 800d346:	e7bd      	b.n	800d2c4 <_dtoa_r+0x594>
 800d348:	0800ee08 	.word	0x0800ee08
 800d34c:	0800ede0 	.word	0x0800ede0
 800d350:	3ff00000 	.word	0x3ff00000
 800d354:	40240000 	.word	0x40240000
 800d358:	401c0000 	.word	0x401c0000
 800d35c:	40140000 	.word	0x40140000
 800d360:	3fe00000 	.word	0x3fe00000
 800d364:	9d01      	ldr	r5, [sp, #4]
 800d366:	4656      	mov	r6, sl
 800d368:	465f      	mov	r7, fp
 800d36a:	4642      	mov	r2, r8
 800d36c:	464b      	mov	r3, r9
 800d36e:	4630      	mov	r0, r6
 800d370:	4639      	mov	r1, r7
 800d372:	f7f3 fa83 	bl	800087c <__aeabi_ddiv>
 800d376:	f7f3 fc07 	bl	8000b88 <__aeabi_d2iz>
 800d37a:	4682      	mov	sl, r0
 800d37c:	f7f3 f8ea 	bl	8000554 <__aeabi_i2d>
 800d380:	4642      	mov	r2, r8
 800d382:	464b      	mov	r3, r9
 800d384:	f7f3 f950 	bl	8000628 <__aeabi_dmul>
 800d388:	4602      	mov	r2, r0
 800d38a:	460b      	mov	r3, r1
 800d38c:	4630      	mov	r0, r6
 800d38e:	4639      	mov	r1, r7
 800d390:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800d394:	f7f2 ff90 	bl	80002b8 <__aeabi_dsub>
 800d398:	f805 6b01 	strb.w	r6, [r5], #1
 800d39c:	9e01      	ldr	r6, [sp, #4]
 800d39e:	9f03      	ldr	r7, [sp, #12]
 800d3a0:	1bae      	subs	r6, r5, r6
 800d3a2:	42b7      	cmp	r7, r6
 800d3a4:	4602      	mov	r2, r0
 800d3a6:	460b      	mov	r3, r1
 800d3a8:	d135      	bne.n	800d416 <_dtoa_r+0x6e6>
 800d3aa:	f7f2 ff87 	bl	80002bc <__adddf3>
 800d3ae:	4642      	mov	r2, r8
 800d3b0:	464b      	mov	r3, r9
 800d3b2:	4606      	mov	r6, r0
 800d3b4:	460f      	mov	r7, r1
 800d3b6:	f7f3 fbc7 	bl	8000b48 <__aeabi_dcmpgt>
 800d3ba:	b9d0      	cbnz	r0, 800d3f2 <_dtoa_r+0x6c2>
 800d3bc:	4642      	mov	r2, r8
 800d3be:	464b      	mov	r3, r9
 800d3c0:	4630      	mov	r0, r6
 800d3c2:	4639      	mov	r1, r7
 800d3c4:	f7f3 fb98 	bl	8000af8 <__aeabi_dcmpeq>
 800d3c8:	b110      	cbz	r0, 800d3d0 <_dtoa_r+0x6a0>
 800d3ca:	f01a 0f01 	tst.w	sl, #1
 800d3ce:	d110      	bne.n	800d3f2 <_dtoa_r+0x6c2>
 800d3d0:	4620      	mov	r0, r4
 800d3d2:	ee18 1a10 	vmov	r1, s16
 800d3d6:	f000 fd17 	bl	800de08 <_Bfree>
 800d3da:	2300      	movs	r3, #0
 800d3dc:	9800      	ldr	r0, [sp, #0]
 800d3de:	702b      	strb	r3, [r5, #0]
 800d3e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d3e2:	3001      	adds	r0, #1
 800d3e4:	6018      	str	r0, [r3, #0]
 800d3e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	f43f acf1 	beq.w	800cdd0 <_dtoa_r+0xa0>
 800d3ee:	601d      	str	r5, [r3, #0]
 800d3f0:	e4ee      	b.n	800cdd0 <_dtoa_r+0xa0>
 800d3f2:	9f00      	ldr	r7, [sp, #0]
 800d3f4:	462b      	mov	r3, r5
 800d3f6:	461d      	mov	r5, r3
 800d3f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d3fc:	2a39      	cmp	r2, #57	; 0x39
 800d3fe:	d106      	bne.n	800d40e <_dtoa_r+0x6de>
 800d400:	9a01      	ldr	r2, [sp, #4]
 800d402:	429a      	cmp	r2, r3
 800d404:	d1f7      	bne.n	800d3f6 <_dtoa_r+0x6c6>
 800d406:	9901      	ldr	r1, [sp, #4]
 800d408:	2230      	movs	r2, #48	; 0x30
 800d40a:	3701      	adds	r7, #1
 800d40c:	700a      	strb	r2, [r1, #0]
 800d40e:	781a      	ldrb	r2, [r3, #0]
 800d410:	3201      	adds	r2, #1
 800d412:	701a      	strb	r2, [r3, #0]
 800d414:	e790      	b.n	800d338 <_dtoa_r+0x608>
 800d416:	4ba6      	ldr	r3, [pc, #664]	; (800d6b0 <_dtoa_r+0x980>)
 800d418:	2200      	movs	r2, #0
 800d41a:	f7f3 f905 	bl	8000628 <__aeabi_dmul>
 800d41e:	2200      	movs	r2, #0
 800d420:	2300      	movs	r3, #0
 800d422:	4606      	mov	r6, r0
 800d424:	460f      	mov	r7, r1
 800d426:	f7f3 fb67 	bl	8000af8 <__aeabi_dcmpeq>
 800d42a:	2800      	cmp	r0, #0
 800d42c:	d09d      	beq.n	800d36a <_dtoa_r+0x63a>
 800d42e:	e7cf      	b.n	800d3d0 <_dtoa_r+0x6a0>
 800d430:	9a08      	ldr	r2, [sp, #32]
 800d432:	2a00      	cmp	r2, #0
 800d434:	f000 80d7 	beq.w	800d5e6 <_dtoa_r+0x8b6>
 800d438:	9a06      	ldr	r2, [sp, #24]
 800d43a:	2a01      	cmp	r2, #1
 800d43c:	f300 80ba 	bgt.w	800d5b4 <_dtoa_r+0x884>
 800d440:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d442:	2a00      	cmp	r2, #0
 800d444:	f000 80b2 	beq.w	800d5ac <_dtoa_r+0x87c>
 800d448:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d44c:	9e07      	ldr	r6, [sp, #28]
 800d44e:	9d04      	ldr	r5, [sp, #16]
 800d450:	9a04      	ldr	r2, [sp, #16]
 800d452:	441a      	add	r2, r3
 800d454:	9204      	str	r2, [sp, #16]
 800d456:	9a05      	ldr	r2, [sp, #20]
 800d458:	2101      	movs	r1, #1
 800d45a:	441a      	add	r2, r3
 800d45c:	4620      	mov	r0, r4
 800d45e:	9205      	str	r2, [sp, #20]
 800d460:	f000 fd8a 	bl	800df78 <__i2b>
 800d464:	4607      	mov	r7, r0
 800d466:	2d00      	cmp	r5, #0
 800d468:	dd0c      	ble.n	800d484 <_dtoa_r+0x754>
 800d46a:	9b05      	ldr	r3, [sp, #20]
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	dd09      	ble.n	800d484 <_dtoa_r+0x754>
 800d470:	42ab      	cmp	r3, r5
 800d472:	9a04      	ldr	r2, [sp, #16]
 800d474:	bfa8      	it	ge
 800d476:	462b      	movge	r3, r5
 800d478:	1ad2      	subs	r2, r2, r3
 800d47a:	9204      	str	r2, [sp, #16]
 800d47c:	9a05      	ldr	r2, [sp, #20]
 800d47e:	1aed      	subs	r5, r5, r3
 800d480:	1ad3      	subs	r3, r2, r3
 800d482:	9305      	str	r3, [sp, #20]
 800d484:	9b07      	ldr	r3, [sp, #28]
 800d486:	b31b      	cbz	r3, 800d4d0 <_dtoa_r+0x7a0>
 800d488:	9b08      	ldr	r3, [sp, #32]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	f000 80af 	beq.w	800d5ee <_dtoa_r+0x8be>
 800d490:	2e00      	cmp	r6, #0
 800d492:	dd13      	ble.n	800d4bc <_dtoa_r+0x78c>
 800d494:	4639      	mov	r1, r7
 800d496:	4632      	mov	r2, r6
 800d498:	4620      	mov	r0, r4
 800d49a:	f000 fe2d 	bl	800e0f8 <__pow5mult>
 800d49e:	ee18 2a10 	vmov	r2, s16
 800d4a2:	4601      	mov	r1, r0
 800d4a4:	4607      	mov	r7, r0
 800d4a6:	4620      	mov	r0, r4
 800d4a8:	f000 fd7c 	bl	800dfa4 <__multiply>
 800d4ac:	ee18 1a10 	vmov	r1, s16
 800d4b0:	4680      	mov	r8, r0
 800d4b2:	4620      	mov	r0, r4
 800d4b4:	f000 fca8 	bl	800de08 <_Bfree>
 800d4b8:	ee08 8a10 	vmov	s16, r8
 800d4bc:	9b07      	ldr	r3, [sp, #28]
 800d4be:	1b9a      	subs	r2, r3, r6
 800d4c0:	d006      	beq.n	800d4d0 <_dtoa_r+0x7a0>
 800d4c2:	ee18 1a10 	vmov	r1, s16
 800d4c6:	4620      	mov	r0, r4
 800d4c8:	f000 fe16 	bl	800e0f8 <__pow5mult>
 800d4cc:	ee08 0a10 	vmov	s16, r0
 800d4d0:	2101      	movs	r1, #1
 800d4d2:	4620      	mov	r0, r4
 800d4d4:	f000 fd50 	bl	800df78 <__i2b>
 800d4d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	4606      	mov	r6, r0
 800d4de:	f340 8088 	ble.w	800d5f2 <_dtoa_r+0x8c2>
 800d4e2:	461a      	mov	r2, r3
 800d4e4:	4601      	mov	r1, r0
 800d4e6:	4620      	mov	r0, r4
 800d4e8:	f000 fe06 	bl	800e0f8 <__pow5mult>
 800d4ec:	9b06      	ldr	r3, [sp, #24]
 800d4ee:	2b01      	cmp	r3, #1
 800d4f0:	4606      	mov	r6, r0
 800d4f2:	f340 8081 	ble.w	800d5f8 <_dtoa_r+0x8c8>
 800d4f6:	f04f 0800 	mov.w	r8, #0
 800d4fa:	6933      	ldr	r3, [r6, #16]
 800d4fc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d500:	6918      	ldr	r0, [r3, #16]
 800d502:	f000 fce9 	bl	800ded8 <__hi0bits>
 800d506:	f1c0 0020 	rsb	r0, r0, #32
 800d50a:	9b05      	ldr	r3, [sp, #20]
 800d50c:	4418      	add	r0, r3
 800d50e:	f010 001f 	ands.w	r0, r0, #31
 800d512:	f000 8092 	beq.w	800d63a <_dtoa_r+0x90a>
 800d516:	f1c0 0320 	rsb	r3, r0, #32
 800d51a:	2b04      	cmp	r3, #4
 800d51c:	f340 808a 	ble.w	800d634 <_dtoa_r+0x904>
 800d520:	f1c0 001c 	rsb	r0, r0, #28
 800d524:	9b04      	ldr	r3, [sp, #16]
 800d526:	4403      	add	r3, r0
 800d528:	9304      	str	r3, [sp, #16]
 800d52a:	9b05      	ldr	r3, [sp, #20]
 800d52c:	4403      	add	r3, r0
 800d52e:	4405      	add	r5, r0
 800d530:	9305      	str	r3, [sp, #20]
 800d532:	9b04      	ldr	r3, [sp, #16]
 800d534:	2b00      	cmp	r3, #0
 800d536:	dd07      	ble.n	800d548 <_dtoa_r+0x818>
 800d538:	ee18 1a10 	vmov	r1, s16
 800d53c:	461a      	mov	r2, r3
 800d53e:	4620      	mov	r0, r4
 800d540:	f000 fe34 	bl	800e1ac <__lshift>
 800d544:	ee08 0a10 	vmov	s16, r0
 800d548:	9b05      	ldr	r3, [sp, #20]
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	dd05      	ble.n	800d55a <_dtoa_r+0x82a>
 800d54e:	4631      	mov	r1, r6
 800d550:	461a      	mov	r2, r3
 800d552:	4620      	mov	r0, r4
 800d554:	f000 fe2a 	bl	800e1ac <__lshift>
 800d558:	4606      	mov	r6, r0
 800d55a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d06e      	beq.n	800d63e <_dtoa_r+0x90e>
 800d560:	ee18 0a10 	vmov	r0, s16
 800d564:	4631      	mov	r1, r6
 800d566:	f000 fe91 	bl	800e28c <__mcmp>
 800d56a:	2800      	cmp	r0, #0
 800d56c:	da67      	bge.n	800d63e <_dtoa_r+0x90e>
 800d56e:	9b00      	ldr	r3, [sp, #0]
 800d570:	3b01      	subs	r3, #1
 800d572:	ee18 1a10 	vmov	r1, s16
 800d576:	9300      	str	r3, [sp, #0]
 800d578:	220a      	movs	r2, #10
 800d57a:	2300      	movs	r3, #0
 800d57c:	4620      	mov	r0, r4
 800d57e:	f000 fc65 	bl	800de4c <__multadd>
 800d582:	9b08      	ldr	r3, [sp, #32]
 800d584:	ee08 0a10 	vmov	s16, r0
 800d588:	2b00      	cmp	r3, #0
 800d58a:	f000 81b1 	beq.w	800d8f0 <_dtoa_r+0xbc0>
 800d58e:	2300      	movs	r3, #0
 800d590:	4639      	mov	r1, r7
 800d592:	220a      	movs	r2, #10
 800d594:	4620      	mov	r0, r4
 800d596:	f000 fc59 	bl	800de4c <__multadd>
 800d59a:	9b02      	ldr	r3, [sp, #8]
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	4607      	mov	r7, r0
 800d5a0:	f300 808e 	bgt.w	800d6c0 <_dtoa_r+0x990>
 800d5a4:	9b06      	ldr	r3, [sp, #24]
 800d5a6:	2b02      	cmp	r3, #2
 800d5a8:	dc51      	bgt.n	800d64e <_dtoa_r+0x91e>
 800d5aa:	e089      	b.n	800d6c0 <_dtoa_r+0x990>
 800d5ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d5ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d5b2:	e74b      	b.n	800d44c <_dtoa_r+0x71c>
 800d5b4:	9b03      	ldr	r3, [sp, #12]
 800d5b6:	1e5e      	subs	r6, r3, #1
 800d5b8:	9b07      	ldr	r3, [sp, #28]
 800d5ba:	42b3      	cmp	r3, r6
 800d5bc:	bfbf      	itttt	lt
 800d5be:	9b07      	ldrlt	r3, [sp, #28]
 800d5c0:	9607      	strlt	r6, [sp, #28]
 800d5c2:	1af2      	sublt	r2, r6, r3
 800d5c4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800d5c6:	bfb6      	itet	lt
 800d5c8:	189b      	addlt	r3, r3, r2
 800d5ca:	1b9e      	subge	r6, r3, r6
 800d5cc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800d5ce:	9b03      	ldr	r3, [sp, #12]
 800d5d0:	bfb8      	it	lt
 800d5d2:	2600      	movlt	r6, #0
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	bfb7      	itett	lt
 800d5d8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800d5dc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800d5e0:	1a9d      	sublt	r5, r3, r2
 800d5e2:	2300      	movlt	r3, #0
 800d5e4:	e734      	b.n	800d450 <_dtoa_r+0x720>
 800d5e6:	9e07      	ldr	r6, [sp, #28]
 800d5e8:	9d04      	ldr	r5, [sp, #16]
 800d5ea:	9f08      	ldr	r7, [sp, #32]
 800d5ec:	e73b      	b.n	800d466 <_dtoa_r+0x736>
 800d5ee:	9a07      	ldr	r2, [sp, #28]
 800d5f0:	e767      	b.n	800d4c2 <_dtoa_r+0x792>
 800d5f2:	9b06      	ldr	r3, [sp, #24]
 800d5f4:	2b01      	cmp	r3, #1
 800d5f6:	dc18      	bgt.n	800d62a <_dtoa_r+0x8fa>
 800d5f8:	f1ba 0f00 	cmp.w	sl, #0
 800d5fc:	d115      	bne.n	800d62a <_dtoa_r+0x8fa>
 800d5fe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d602:	b993      	cbnz	r3, 800d62a <_dtoa_r+0x8fa>
 800d604:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d608:	0d1b      	lsrs	r3, r3, #20
 800d60a:	051b      	lsls	r3, r3, #20
 800d60c:	b183      	cbz	r3, 800d630 <_dtoa_r+0x900>
 800d60e:	9b04      	ldr	r3, [sp, #16]
 800d610:	3301      	adds	r3, #1
 800d612:	9304      	str	r3, [sp, #16]
 800d614:	9b05      	ldr	r3, [sp, #20]
 800d616:	3301      	adds	r3, #1
 800d618:	9305      	str	r3, [sp, #20]
 800d61a:	f04f 0801 	mov.w	r8, #1
 800d61e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d620:	2b00      	cmp	r3, #0
 800d622:	f47f af6a 	bne.w	800d4fa <_dtoa_r+0x7ca>
 800d626:	2001      	movs	r0, #1
 800d628:	e76f      	b.n	800d50a <_dtoa_r+0x7da>
 800d62a:	f04f 0800 	mov.w	r8, #0
 800d62e:	e7f6      	b.n	800d61e <_dtoa_r+0x8ee>
 800d630:	4698      	mov	r8, r3
 800d632:	e7f4      	b.n	800d61e <_dtoa_r+0x8ee>
 800d634:	f43f af7d 	beq.w	800d532 <_dtoa_r+0x802>
 800d638:	4618      	mov	r0, r3
 800d63a:	301c      	adds	r0, #28
 800d63c:	e772      	b.n	800d524 <_dtoa_r+0x7f4>
 800d63e:	9b03      	ldr	r3, [sp, #12]
 800d640:	2b00      	cmp	r3, #0
 800d642:	dc37      	bgt.n	800d6b4 <_dtoa_r+0x984>
 800d644:	9b06      	ldr	r3, [sp, #24]
 800d646:	2b02      	cmp	r3, #2
 800d648:	dd34      	ble.n	800d6b4 <_dtoa_r+0x984>
 800d64a:	9b03      	ldr	r3, [sp, #12]
 800d64c:	9302      	str	r3, [sp, #8]
 800d64e:	9b02      	ldr	r3, [sp, #8]
 800d650:	b96b      	cbnz	r3, 800d66e <_dtoa_r+0x93e>
 800d652:	4631      	mov	r1, r6
 800d654:	2205      	movs	r2, #5
 800d656:	4620      	mov	r0, r4
 800d658:	f000 fbf8 	bl	800de4c <__multadd>
 800d65c:	4601      	mov	r1, r0
 800d65e:	4606      	mov	r6, r0
 800d660:	ee18 0a10 	vmov	r0, s16
 800d664:	f000 fe12 	bl	800e28c <__mcmp>
 800d668:	2800      	cmp	r0, #0
 800d66a:	f73f adbb 	bgt.w	800d1e4 <_dtoa_r+0x4b4>
 800d66e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d670:	9d01      	ldr	r5, [sp, #4]
 800d672:	43db      	mvns	r3, r3
 800d674:	9300      	str	r3, [sp, #0]
 800d676:	f04f 0800 	mov.w	r8, #0
 800d67a:	4631      	mov	r1, r6
 800d67c:	4620      	mov	r0, r4
 800d67e:	f000 fbc3 	bl	800de08 <_Bfree>
 800d682:	2f00      	cmp	r7, #0
 800d684:	f43f aea4 	beq.w	800d3d0 <_dtoa_r+0x6a0>
 800d688:	f1b8 0f00 	cmp.w	r8, #0
 800d68c:	d005      	beq.n	800d69a <_dtoa_r+0x96a>
 800d68e:	45b8      	cmp	r8, r7
 800d690:	d003      	beq.n	800d69a <_dtoa_r+0x96a>
 800d692:	4641      	mov	r1, r8
 800d694:	4620      	mov	r0, r4
 800d696:	f000 fbb7 	bl	800de08 <_Bfree>
 800d69a:	4639      	mov	r1, r7
 800d69c:	4620      	mov	r0, r4
 800d69e:	f000 fbb3 	bl	800de08 <_Bfree>
 800d6a2:	e695      	b.n	800d3d0 <_dtoa_r+0x6a0>
 800d6a4:	2600      	movs	r6, #0
 800d6a6:	4637      	mov	r7, r6
 800d6a8:	e7e1      	b.n	800d66e <_dtoa_r+0x93e>
 800d6aa:	9700      	str	r7, [sp, #0]
 800d6ac:	4637      	mov	r7, r6
 800d6ae:	e599      	b.n	800d1e4 <_dtoa_r+0x4b4>
 800d6b0:	40240000 	.word	0x40240000
 800d6b4:	9b08      	ldr	r3, [sp, #32]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	f000 80ca 	beq.w	800d850 <_dtoa_r+0xb20>
 800d6bc:	9b03      	ldr	r3, [sp, #12]
 800d6be:	9302      	str	r3, [sp, #8]
 800d6c0:	2d00      	cmp	r5, #0
 800d6c2:	dd05      	ble.n	800d6d0 <_dtoa_r+0x9a0>
 800d6c4:	4639      	mov	r1, r7
 800d6c6:	462a      	mov	r2, r5
 800d6c8:	4620      	mov	r0, r4
 800d6ca:	f000 fd6f 	bl	800e1ac <__lshift>
 800d6ce:	4607      	mov	r7, r0
 800d6d0:	f1b8 0f00 	cmp.w	r8, #0
 800d6d4:	d05b      	beq.n	800d78e <_dtoa_r+0xa5e>
 800d6d6:	6879      	ldr	r1, [r7, #4]
 800d6d8:	4620      	mov	r0, r4
 800d6da:	f000 fb55 	bl	800dd88 <_Balloc>
 800d6de:	4605      	mov	r5, r0
 800d6e0:	b928      	cbnz	r0, 800d6ee <_dtoa_r+0x9be>
 800d6e2:	4b87      	ldr	r3, [pc, #540]	; (800d900 <_dtoa_r+0xbd0>)
 800d6e4:	4602      	mov	r2, r0
 800d6e6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d6ea:	f7ff bb3b 	b.w	800cd64 <_dtoa_r+0x34>
 800d6ee:	693a      	ldr	r2, [r7, #16]
 800d6f0:	3202      	adds	r2, #2
 800d6f2:	0092      	lsls	r2, r2, #2
 800d6f4:	f107 010c 	add.w	r1, r7, #12
 800d6f8:	300c      	adds	r0, #12
 800d6fa:	f000 fb2b 	bl	800dd54 <memcpy>
 800d6fe:	2201      	movs	r2, #1
 800d700:	4629      	mov	r1, r5
 800d702:	4620      	mov	r0, r4
 800d704:	f000 fd52 	bl	800e1ac <__lshift>
 800d708:	9b01      	ldr	r3, [sp, #4]
 800d70a:	f103 0901 	add.w	r9, r3, #1
 800d70e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800d712:	4413      	add	r3, r2
 800d714:	9305      	str	r3, [sp, #20]
 800d716:	f00a 0301 	and.w	r3, sl, #1
 800d71a:	46b8      	mov	r8, r7
 800d71c:	9304      	str	r3, [sp, #16]
 800d71e:	4607      	mov	r7, r0
 800d720:	4631      	mov	r1, r6
 800d722:	ee18 0a10 	vmov	r0, s16
 800d726:	f7ff fa77 	bl	800cc18 <quorem>
 800d72a:	4641      	mov	r1, r8
 800d72c:	9002      	str	r0, [sp, #8]
 800d72e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d732:	ee18 0a10 	vmov	r0, s16
 800d736:	f000 fda9 	bl	800e28c <__mcmp>
 800d73a:	463a      	mov	r2, r7
 800d73c:	9003      	str	r0, [sp, #12]
 800d73e:	4631      	mov	r1, r6
 800d740:	4620      	mov	r0, r4
 800d742:	f000 fdbf 	bl	800e2c4 <__mdiff>
 800d746:	68c2      	ldr	r2, [r0, #12]
 800d748:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800d74c:	4605      	mov	r5, r0
 800d74e:	bb02      	cbnz	r2, 800d792 <_dtoa_r+0xa62>
 800d750:	4601      	mov	r1, r0
 800d752:	ee18 0a10 	vmov	r0, s16
 800d756:	f000 fd99 	bl	800e28c <__mcmp>
 800d75a:	4602      	mov	r2, r0
 800d75c:	4629      	mov	r1, r5
 800d75e:	4620      	mov	r0, r4
 800d760:	9207      	str	r2, [sp, #28]
 800d762:	f000 fb51 	bl	800de08 <_Bfree>
 800d766:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800d76a:	ea43 0102 	orr.w	r1, r3, r2
 800d76e:	9b04      	ldr	r3, [sp, #16]
 800d770:	430b      	orrs	r3, r1
 800d772:	464d      	mov	r5, r9
 800d774:	d10f      	bne.n	800d796 <_dtoa_r+0xa66>
 800d776:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d77a:	d02a      	beq.n	800d7d2 <_dtoa_r+0xaa2>
 800d77c:	9b03      	ldr	r3, [sp, #12]
 800d77e:	2b00      	cmp	r3, #0
 800d780:	dd02      	ble.n	800d788 <_dtoa_r+0xa58>
 800d782:	9b02      	ldr	r3, [sp, #8]
 800d784:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800d788:	f88b a000 	strb.w	sl, [fp]
 800d78c:	e775      	b.n	800d67a <_dtoa_r+0x94a>
 800d78e:	4638      	mov	r0, r7
 800d790:	e7ba      	b.n	800d708 <_dtoa_r+0x9d8>
 800d792:	2201      	movs	r2, #1
 800d794:	e7e2      	b.n	800d75c <_dtoa_r+0xa2c>
 800d796:	9b03      	ldr	r3, [sp, #12]
 800d798:	2b00      	cmp	r3, #0
 800d79a:	db04      	blt.n	800d7a6 <_dtoa_r+0xa76>
 800d79c:	9906      	ldr	r1, [sp, #24]
 800d79e:	430b      	orrs	r3, r1
 800d7a0:	9904      	ldr	r1, [sp, #16]
 800d7a2:	430b      	orrs	r3, r1
 800d7a4:	d122      	bne.n	800d7ec <_dtoa_r+0xabc>
 800d7a6:	2a00      	cmp	r2, #0
 800d7a8:	ddee      	ble.n	800d788 <_dtoa_r+0xa58>
 800d7aa:	ee18 1a10 	vmov	r1, s16
 800d7ae:	2201      	movs	r2, #1
 800d7b0:	4620      	mov	r0, r4
 800d7b2:	f000 fcfb 	bl	800e1ac <__lshift>
 800d7b6:	4631      	mov	r1, r6
 800d7b8:	ee08 0a10 	vmov	s16, r0
 800d7bc:	f000 fd66 	bl	800e28c <__mcmp>
 800d7c0:	2800      	cmp	r0, #0
 800d7c2:	dc03      	bgt.n	800d7cc <_dtoa_r+0xa9c>
 800d7c4:	d1e0      	bne.n	800d788 <_dtoa_r+0xa58>
 800d7c6:	f01a 0f01 	tst.w	sl, #1
 800d7ca:	d0dd      	beq.n	800d788 <_dtoa_r+0xa58>
 800d7cc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d7d0:	d1d7      	bne.n	800d782 <_dtoa_r+0xa52>
 800d7d2:	2339      	movs	r3, #57	; 0x39
 800d7d4:	f88b 3000 	strb.w	r3, [fp]
 800d7d8:	462b      	mov	r3, r5
 800d7da:	461d      	mov	r5, r3
 800d7dc:	3b01      	subs	r3, #1
 800d7de:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d7e2:	2a39      	cmp	r2, #57	; 0x39
 800d7e4:	d071      	beq.n	800d8ca <_dtoa_r+0xb9a>
 800d7e6:	3201      	adds	r2, #1
 800d7e8:	701a      	strb	r2, [r3, #0]
 800d7ea:	e746      	b.n	800d67a <_dtoa_r+0x94a>
 800d7ec:	2a00      	cmp	r2, #0
 800d7ee:	dd07      	ble.n	800d800 <_dtoa_r+0xad0>
 800d7f0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d7f4:	d0ed      	beq.n	800d7d2 <_dtoa_r+0xaa2>
 800d7f6:	f10a 0301 	add.w	r3, sl, #1
 800d7fa:	f88b 3000 	strb.w	r3, [fp]
 800d7fe:	e73c      	b.n	800d67a <_dtoa_r+0x94a>
 800d800:	9b05      	ldr	r3, [sp, #20]
 800d802:	f809 ac01 	strb.w	sl, [r9, #-1]
 800d806:	4599      	cmp	r9, r3
 800d808:	d047      	beq.n	800d89a <_dtoa_r+0xb6a>
 800d80a:	ee18 1a10 	vmov	r1, s16
 800d80e:	2300      	movs	r3, #0
 800d810:	220a      	movs	r2, #10
 800d812:	4620      	mov	r0, r4
 800d814:	f000 fb1a 	bl	800de4c <__multadd>
 800d818:	45b8      	cmp	r8, r7
 800d81a:	ee08 0a10 	vmov	s16, r0
 800d81e:	f04f 0300 	mov.w	r3, #0
 800d822:	f04f 020a 	mov.w	r2, #10
 800d826:	4641      	mov	r1, r8
 800d828:	4620      	mov	r0, r4
 800d82a:	d106      	bne.n	800d83a <_dtoa_r+0xb0a>
 800d82c:	f000 fb0e 	bl	800de4c <__multadd>
 800d830:	4680      	mov	r8, r0
 800d832:	4607      	mov	r7, r0
 800d834:	f109 0901 	add.w	r9, r9, #1
 800d838:	e772      	b.n	800d720 <_dtoa_r+0x9f0>
 800d83a:	f000 fb07 	bl	800de4c <__multadd>
 800d83e:	4639      	mov	r1, r7
 800d840:	4680      	mov	r8, r0
 800d842:	2300      	movs	r3, #0
 800d844:	220a      	movs	r2, #10
 800d846:	4620      	mov	r0, r4
 800d848:	f000 fb00 	bl	800de4c <__multadd>
 800d84c:	4607      	mov	r7, r0
 800d84e:	e7f1      	b.n	800d834 <_dtoa_r+0xb04>
 800d850:	9b03      	ldr	r3, [sp, #12]
 800d852:	9302      	str	r3, [sp, #8]
 800d854:	9d01      	ldr	r5, [sp, #4]
 800d856:	ee18 0a10 	vmov	r0, s16
 800d85a:	4631      	mov	r1, r6
 800d85c:	f7ff f9dc 	bl	800cc18 <quorem>
 800d860:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d864:	9b01      	ldr	r3, [sp, #4]
 800d866:	f805 ab01 	strb.w	sl, [r5], #1
 800d86a:	1aea      	subs	r2, r5, r3
 800d86c:	9b02      	ldr	r3, [sp, #8]
 800d86e:	4293      	cmp	r3, r2
 800d870:	dd09      	ble.n	800d886 <_dtoa_r+0xb56>
 800d872:	ee18 1a10 	vmov	r1, s16
 800d876:	2300      	movs	r3, #0
 800d878:	220a      	movs	r2, #10
 800d87a:	4620      	mov	r0, r4
 800d87c:	f000 fae6 	bl	800de4c <__multadd>
 800d880:	ee08 0a10 	vmov	s16, r0
 800d884:	e7e7      	b.n	800d856 <_dtoa_r+0xb26>
 800d886:	9b02      	ldr	r3, [sp, #8]
 800d888:	2b00      	cmp	r3, #0
 800d88a:	bfc8      	it	gt
 800d88c:	461d      	movgt	r5, r3
 800d88e:	9b01      	ldr	r3, [sp, #4]
 800d890:	bfd8      	it	le
 800d892:	2501      	movle	r5, #1
 800d894:	441d      	add	r5, r3
 800d896:	f04f 0800 	mov.w	r8, #0
 800d89a:	ee18 1a10 	vmov	r1, s16
 800d89e:	2201      	movs	r2, #1
 800d8a0:	4620      	mov	r0, r4
 800d8a2:	f000 fc83 	bl	800e1ac <__lshift>
 800d8a6:	4631      	mov	r1, r6
 800d8a8:	ee08 0a10 	vmov	s16, r0
 800d8ac:	f000 fcee 	bl	800e28c <__mcmp>
 800d8b0:	2800      	cmp	r0, #0
 800d8b2:	dc91      	bgt.n	800d7d8 <_dtoa_r+0xaa8>
 800d8b4:	d102      	bne.n	800d8bc <_dtoa_r+0xb8c>
 800d8b6:	f01a 0f01 	tst.w	sl, #1
 800d8ba:	d18d      	bne.n	800d7d8 <_dtoa_r+0xaa8>
 800d8bc:	462b      	mov	r3, r5
 800d8be:	461d      	mov	r5, r3
 800d8c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d8c4:	2a30      	cmp	r2, #48	; 0x30
 800d8c6:	d0fa      	beq.n	800d8be <_dtoa_r+0xb8e>
 800d8c8:	e6d7      	b.n	800d67a <_dtoa_r+0x94a>
 800d8ca:	9a01      	ldr	r2, [sp, #4]
 800d8cc:	429a      	cmp	r2, r3
 800d8ce:	d184      	bne.n	800d7da <_dtoa_r+0xaaa>
 800d8d0:	9b00      	ldr	r3, [sp, #0]
 800d8d2:	3301      	adds	r3, #1
 800d8d4:	9300      	str	r3, [sp, #0]
 800d8d6:	2331      	movs	r3, #49	; 0x31
 800d8d8:	7013      	strb	r3, [r2, #0]
 800d8da:	e6ce      	b.n	800d67a <_dtoa_r+0x94a>
 800d8dc:	4b09      	ldr	r3, [pc, #36]	; (800d904 <_dtoa_r+0xbd4>)
 800d8de:	f7ff ba95 	b.w	800ce0c <_dtoa_r+0xdc>
 800d8e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	f47f aa6e 	bne.w	800cdc6 <_dtoa_r+0x96>
 800d8ea:	4b07      	ldr	r3, [pc, #28]	; (800d908 <_dtoa_r+0xbd8>)
 800d8ec:	f7ff ba8e 	b.w	800ce0c <_dtoa_r+0xdc>
 800d8f0:	9b02      	ldr	r3, [sp, #8]
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	dcae      	bgt.n	800d854 <_dtoa_r+0xb24>
 800d8f6:	9b06      	ldr	r3, [sp, #24]
 800d8f8:	2b02      	cmp	r3, #2
 800d8fa:	f73f aea8 	bgt.w	800d64e <_dtoa_r+0x91e>
 800d8fe:	e7a9      	b.n	800d854 <_dtoa_r+0xb24>
 800d900:	0800ed13 	.word	0x0800ed13
 800d904:	0800ec70 	.word	0x0800ec70
 800d908:	0800ec94 	.word	0x0800ec94

0800d90c <__sflush_r>:
 800d90c:	898a      	ldrh	r2, [r1, #12]
 800d90e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d912:	4605      	mov	r5, r0
 800d914:	0710      	lsls	r0, r2, #28
 800d916:	460c      	mov	r4, r1
 800d918:	d458      	bmi.n	800d9cc <__sflush_r+0xc0>
 800d91a:	684b      	ldr	r3, [r1, #4]
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	dc05      	bgt.n	800d92c <__sflush_r+0x20>
 800d920:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d922:	2b00      	cmp	r3, #0
 800d924:	dc02      	bgt.n	800d92c <__sflush_r+0x20>
 800d926:	2000      	movs	r0, #0
 800d928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d92c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d92e:	2e00      	cmp	r6, #0
 800d930:	d0f9      	beq.n	800d926 <__sflush_r+0x1a>
 800d932:	2300      	movs	r3, #0
 800d934:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d938:	682f      	ldr	r7, [r5, #0]
 800d93a:	602b      	str	r3, [r5, #0]
 800d93c:	d032      	beq.n	800d9a4 <__sflush_r+0x98>
 800d93e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d940:	89a3      	ldrh	r3, [r4, #12]
 800d942:	075a      	lsls	r2, r3, #29
 800d944:	d505      	bpl.n	800d952 <__sflush_r+0x46>
 800d946:	6863      	ldr	r3, [r4, #4]
 800d948:	1ac0      	subs	r0, r0, r3
 800d94a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d94c:	b10b      	cbz	r3, 800d952 <__sflush_r+0x46>
 800d94e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d950:	1ac0      	subs	r0, r0, r3
 800d952:	2300      	movs	r3, #0
 800d954:	4602      	mov	r2, r0
 800d956:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d958:	6a21      	ldr	r1, [r4, #32]
 800d95a:	4628      	mov	r0, r5
 800d95c:	47b0      	blx	r6
 800d95e:	1c43      	adds	r3, r0, #1
 800d960:	89a3      	ldrh	r3, [r4, #12]
 800d962:	d106      	bne.n	800d972 <__sflush_r+0x66>
 800d964:	6829      	ldr	r1, [r5, #0]
 800d966:	291d      	cmp	r1, #29
 800d968:	d82c      	bhi.n	800d9c4 <__sflush_r+0xb8>
 800d96a:	4a2a      	ldr	r2, [pc, #168]	; (800da14 <__sflush_r+0x108>)
 800d96c:	40ca      	lsrs	r2, r1
 800d96e:	07d6      	lsls	r6, r2, #31
 800d970:	d528      	bpl.n	800d9c4 <__sflush_r+0xb8>
 800d972:	2200      	movs	r2, #0
 800d974:	6062      	str	r2, [r4, #4]
 800d976:	04d9      	lsls	r1, r3, #19
 800d978:	6922      	ldr	r2, [r4, #16]
 800d97a:	6022      	str	r2, [r4, #0]
 800d97c:	d504      	bpl.n	800d988 <__sflush_r+0x7c>
 800d97e:	1c42      	adds	r2, r0, #1
 800d980:	d101      	bne.n	800d986 <__sflush_r+0x7a>
 800d982:	682b      	ldr	r3, [r5, #0]
 800d984:	b903      	cbnz	r3, 800d988 <__sflush_r+0x7c>
 800d986:	6560      	str	r0, [r4, #84]	; 0x54
 800d988:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d98a:	602f      	str	r7, [r5, #0]
 800d98c:	2900      	cmp	r1, #0
 800d98e:	d0ca      	beq.n	800d926 <__sflush_r+0x1a>
 800d990:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d994:	4299      	cmp	r1, r3
 800d996:	d002      	beq.n	800d99e <__sflush_r+0x92>
 800d998:	4628      	mov	r0, r5
 800d99a:	f7fe fa95 	bl	800bec8 <_free_r>
 800d99e:	2000      	movs	r0, #0
 800d9a0:	6360      	str	r0, [r4, #52]	; 0x34
 800d9a2:	e7c1      	b.n	800d928 <__sflush_r+0x1c>
 800d9a4:	6a21      	ldr	r1, [r4, #32]
 800d9a6:	2301      	movs	r3, #1
 800d9a8:	4628      	mov	r0, r5
 800d9aa:	47b0      	blx	r6
 800d9ac:	1c41      	adds	r1, r0, #1
 800d9ae:	d1c7      	bne.n	800d940 <__sflush_r+0x34>
 800d9b0:	682b      	ldr	r3, [r5, #0]
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d0c4      	beq.n	800d940 <__sflush_r+0x34>
 800d9b6:	2b1d      	cmp	r3, #29
 800d9b8:	d001      	beq.n	800d9be <__sflush_r+0xb2>
 800d9ba:	2b16      	cmp	r3, #22
 800d9bc:	d101      	bne.n	800d9c2 <__sflush_r+0xb6>
 800d9be:	602f      	str	r7, [r5, #0]
 800d9c0:	e7b1      	b.n	800d926 <__sflush_r+0x1a>
 800d9c2:	89a3      	ldrh	r3, [r4, #12]
 800d9c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d9c8:	81a3      	strh	r3, [r4, #12]
 800d9ca:	e7ad      	b.n	800d928 <__sflush_r+0x1c>
 800d9cc:	690f      	ldr	r7, [r1, #16]
 800d9ce:	2f00      	cmp	r7, #0
 800d9d0:	d0a9      	beq.n	800d926 <__sflush_r+0x1a>
 800d9d2:	0793      	lsls	r3, r2, #30
 800d9d4:	680e      	ldr	r6, [r1, #0]
 800d9d6:	bf08      	it	eq
 800d9d8:	694b      	ldreq	r3, [r1, #20]
 800d9da:	600f      	str	r7, [r1, #0]
 800d9dc:	bf18      	it	ne
 800d9de:	2300      	movne	r3, #0
 800d9e0:	eba6 0807 	sub.w	r8, r6, r7
 800d9e4:	608b      	str	r3, [r1, #8]
 800d9e6:	f1b8 0f00 	cmp.w	r8, #0
 800d9ea:	dd9c      	ble.n	800d926 <__sflush_r+0x1a>
 800d9ec:	6a21      	ldr	r1, [r4, #32]
 800d9ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d9f0:	4643      	mov	r3, r8
 800d9f2:	463a      	mov	r2, r7
 800d9f4:	4628      	mov	r0, r5
 800d9f6:	47b0      	blx	r6
 800d9f8:	2800      	cmp	r0, #0
 800d9fa:	dc06      	bgt.n	800da0a <__sflush_r+0xfe>
 800d9fc:	89a3      	ldrh	r3, [r4, #12]
 800d9fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800da02:	81a3      	strh	r3, [r4, #12]
 800da04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800da08:	e78e      	b.n	800d928 <__sflush_r+0x1c>
 800da0a:	4407      	add	r7, r0
 800da0c:	eba8 0800 	sub.w	r8, r8, r0
 800da10:	e7e9      	b.n	800d9e6 <__sflush_r+0xda>
 800da12:	bf00      	nop
 800da14:	20400001 	.word	0x20400001

0800da18 <_fflush_r>:
 800da18:	b538      	push	{r3, r4, r5, lr}
 800da1a:	690b      	ldr	r3, [r1, #16]
 800da1c:	4605      	mov	r5, r0
 800da1e:	460c      	mov	r4, r1
 800da20:	b913      	cbnz	r3, 800da28 <_fflush_r+0x10>
 800da22:	2500      	movs	r5, #0
 800da24:	4628      	mov	r0, r5
 800da26:	bd38      	pop	{r3, r4, r5, pc}
 800da28:	b118      	cbz	r0, 800da32 <_fflush_r+0x1a>
 800da2a:	6983      	ldr	r3, [r0, #24]
 800da2c:	b90b      	cbnz	r3, 800da32 <_fflush_r+0x1a>
 800da2e:	f000 f887 	bl	800db40 <__sinit>
 800da32:	4b14      	ldr	r3, [pc, #80]	; (800da84 <_fflush_r+0x6c>)
 800da34:	429c      	cmp	r4, r3
 800da36:	d11b      	bne.n	800da70 <_fflush_r+0x58>
 800da38:	686c      	ldr	r4, [r5, #4]
 800da3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d0ef      	beq.n	800da22 <_fflush_r+0xa>
 800da42:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800da44:	07d0      	lsls	r0, r2, #31
 800da46:	d404      	bmi.n	800da52 <_fflush_r+0x3a>
 800da48:	0599      	lsls	r1, r3, #22
 800da4a:	d402      	bmi.n	800da52 <_fflush_r+0x3a>
 800da4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800da4e:	f000 f91a 	bl	800dc86 <__retarget_lock_acquire_recursive>
 800da52:	4628      	mov	r0, r5
 800da54:	4621      	mov	r1, r4
 800da56:	f7ff ff59 	bl	800d90c <__sflush_r>
 800da5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800da5c:	07da      	lsls	r2, r3, #31
 800da5e:	4605      	mov	r5, r0
 800da60:	d4e0      	bmi.n	800da24 <_fflush_r+0xc>
 800da62:	89a3      	ldrh	r3, [r4, #12]
 800da64:	059b      	lsls	r3, r3, #22
 800da66:	d4dd      	bmi.n	800da24 <_fflush_r+0xc>
 800da68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800da6a:	f000 f90d 	bl	800dc88 <__retarget_lock_release_recursive>
 800da6e:	e7d9      	b.n	800da24 <_fflush_r+0xc>
 800da70:	4b05      	ldr	r3, [pc, #20]	; (800da88 <_fflush_r+0x70>)
 800da72:	429c      	cmp	r4, r3
 800da74:	d101      	bne.n	800da7a <_fflush_r+0x62>
 800da76:	68ac      	ldr	r4, [r5, #8]
 800da78:	e7df      	b.n	800da3a <_fflush_r+0x22>
 800da7a:	4b04      	ldr	r3, [pc, #16]	; (800da8c <_fflush_r+0x74>)
 800da7c:	429c      	cmp	r4, r3
 800da7e:	bf08      	it	eq
 800da80:	68ec      	ldreq	r4, [r5, #12]
 800da82:	e7da      	b.n	800da3a <_fflush_r+0x22>
 800da84:	0800ed44 	.word	0x0800ed44
 800da88:	0800ed64 	.word	0x0800ed64
 800da8c:	0800ed24 	.word	0x0800ed24

0800da90 <std>:
 800da90:	2300      	movs	r3, #0
 800da92:	b510      	push	{r4, lr}
 800da94:	4604      	mov	r4, r0
 800da96:	e9c0 3300 	strd	r3, r3, [r0]
 800da9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800da9e:	6083      	str	r3, [r0, #8]
 800daa0:	8181      	strh	r1, [r0, #12]
 800daa2:	6643      	str	r3, [r0, #100]	; 0x64
 800daa4:	81c2      	strh	r2, [r0, #14]
 800daa6:	6183      	str	r3, [r0, #24]
 800daa8:	4619      	mov	r1, r3
 800daaa:	2208      	movs	r2, #8
 800daac:	305c      	adds	r0, #92	; 0x5c
 800daae:	f7fe fa03 	bl	800beb8 <memset>
 800dab2:	4b05      	ldr	r3, [pc, #20]	; (800dac8 <std+0x38>)
 800dab4:	6263      	str	r3, [r4, #36]	; 0x24
 800dab6:	4b05      	ldr	r3, [pc, #20]	; (800dacc <std+0x3c>)
 800dab8:	62a3      	str	r3, [r4, #40]	; 0x28
 800daba:	4b05      	ldr	r3, [pc, #20]	; (800dad0 <std+0x40>)
 800dabc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800dabe:	4b05      	ldr	r3, [pc, #20]	; (800dad4 <std+0x44>)
 800dac0:	6224      	str	r4, [r4, #32]
 800dac2:	6323      	str	r3, [r4, #48]	; 0x30
 800dac4:	bd10      	pop	{r4, pc}
 800dac6:	bf00      	nop
 800dac8:	0800e771 	.word	0x0800e771
 800dacc:	0800e793 	.word	0x0800e793
 800dad0:	0800e7cb 	.word	0x0800e7cb
 800dad4:	0800e7ef 	.word	0x0800e7ef

0800dad8 <_cleanup_r>:
 800dad8:	4901      	ldr	r1, [pc, #4]	; (800dae0 <_cleanup_r+0x8>)
 800dada:	f000 b8af 	b.w	800dc3c <_fwalk_reent>
 800dade:	bf00      	nop
 800dae0:	0800da19 	.word	0x0800da19

0800dae4 <__sfmoreglue>:
 800dae4:	b570      	push	{r4, r5, r6, lr}
 800dae6:	2268      	movs	r2, #104	; 0x68
 800dae8:	1e4d      	subs	r5, r1, #1
 800daea:	4355      	muls	r5, r2
 800daec:	460e      	mov	r6, r1
 800daee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800daf2:	f7fe fa55 	bl	800bfa0 <_malloc_r>
 800daf6:	4604      	mov	r4, r0
 800daf8:	b140      	cbz	r0, 800db0c <__sfmoreglue+0x28>
 800dafa:	2100      	movs	r1, #0
 800dafc:	e9c0 1600 	strd	r1, r6, [r0]
 800db00:	300c      	adds	r0, #12
 800db02:	60a0      	str	r0, [r4, #8]
 800db04:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800db08:	f7fe f9d6 	bl	800beb8 <memset>
 800db0c:	4620      	mov	r0, r4
 800db0e:	bd70      	pop	{r4, r5, r6, pc}

0800db10 <__sfp_lock_acquire>:
 800db10:	4801      	ldr	r0, [pc, #4]	; (800db18 <__sfp_lock_acquire+0x8>)
 800db12:	f000 b8b8 	b.w	800dc86 <__retarget_lock_acquire_recursive>
 800db16:	bf00      	nop
 800db18:	2000086d 	.word	0x2000086d

0800db1c <__sfp_lock_release>:
 800db1c:	4801      	ldr	r0, [pc, #4]	; (800db24 <__sfp_lock_release+0x8>)
 800db1e:	f000 b8b3 	b.w	800dc88 <__retarget_lock_release_recursive>
 800db22:	bf00      	nop
 800db24:	2000086d 	.word	0x2000086d

0800db28 <__sinit_lock_acquire>:
 800db28:	4801      	ldr	r0, [pc, #4]	; (800db30 <__sinit_lock_acquire+0x8>)
 800db2a:	f000 b8ac 	b.w	800dc86 <__retarget_lock_acquire_recursive>
 800db2e:	bf00      	nop
 800db30:	2000086e 	.word	0x2000086e

0800db34 <__sinit_lock_release>:
 800db34:	4801      	ldr	r0, [pc, #4]	; (800db3c <__sinit_lock_release+0x8>)
 800db36:	f000 b8a7 	b.w	800dc88 <__retarget_lock_release_recursive>
 800db3a:	bf00      	nop
 800db3c:	2000086e 	.word	0x2000086e

0800db40 <__sinit>:
 800db40:	b510      	push	{r4, lr}
 800db42:	4604      	mov	r4, r0
 800db44:	f7ff fff0 	bl	800db28 <__sinit_lock_acquire>
 800db48:	69a3      	ldr	r3, [r4, #24]
 800db4a:	b11b      	cbz	r3, 800db54 <__sinit+0x14>
 800db4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800db50:	f7ff bff0 	b.w	800db34 <__sinit_lock_release>
 800db54:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800db58:	6523      	str	r3, [r4, #80]	; 0x50
 800db5a:	4b13      	ldr	r3, [pc, #76]	; (800dba8 <__sinit+0x68>)
 800db5c:	4a13      	ldr	r2, [pc, #76]	; (800dbac <__sinit+0x6c>)
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	62a2      	str	r2, [r4, #40]	; 0x28
 800db62:	42a3      	cmp	r3, r4
 800db64:	bf04      	itt	eq
 800db66:	2301      	moveq	r3, #1
 800db68:	61a3      	streq	r3, [r4, #24]
 800db6a:	4620      	mov	r0, r4
 800db6c:	f000 f820 	bl	800dbb0 <__sfp>
 800db70:	6060      	str	r0, [r4, #4]
 800db72:	4620      	mov	r0, r4
 800db74:	f000 f81c 	bl	800dbb0 <__sfp>
 800db78:	60a0      	str	r0, [r4, #8]
 800db7a:	4620      	mov	r0, r4
 800db7c:	f000 f818 	bl	800dbb0 <__sfp>
 800db80:	2200      	movs	r2, #0
 800db82:	60e0      	str	r0, [r4, #12]
 800db84:	2104      	movs	r1, #4
 800db86:	6860      	ldr	r0, [r4, #4]
 800db88:	f7ff ff82 	bl	800da90 <std>
 800db8c:	68a0      	ldr	r0, [r4, #8]
 800db8e:	2201      	movs	r2, #1
 800db90:	2109      	movs	r1, #9
 800db92:	f7ff ff7d 	bl	800da90 <std>
 800db96:	68e0      	ldr	r0, [r4, #12]
 800db98:	2202      	movs	r2, #2
 800db9a:	2112      	movs	r1, #18
 800db9c:	f7ff ff78 	bl	800da90 <std>
 800dba0:	2301      	movs	r3, #1
 800dba2:	61a3      	str	r3, [r4, #24]
 800dba4:	e7d2      	b.n	800db4c <__sinit+0xc>
 800dba6:	bf00      	nop
 800dba8:	0800ec5c 	.word	0x0800ec5c
 800dbac:	0800dad9 	.word	0x0800dad9

0800dbb0 <__sfp>:
 800dbb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbb2:	4607      	mov	r7, r0
 800dbb4:	f7ff ffac 	bl	800db10 <__sfp_lock_acquire>
 800dbb8:	4b1e      	ldr	r3, [pc, #120]	; (800dc34 <__sfp+0x84>)
 800dbba:	681e      	ldr	r6, [r3, #0]
 800dbbc:	69b3      	ldr	r3, [r6, #24]
 800dbbe:	b913      	cbnz	r3, 800dbc6 <__sfp+0x16>
 800dbc0:	4630      	mov	r0, r6
 800dbc2:	f7ff ffbd 	bl	800db40 <__sinit>
 800dbc6:	3648      	adds	r6, #72	; 0x48
 800dbc8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800dbcc:	3b01      	subs	r3, #1
 800dbce:	d503      	bpl.n	800dbd8 <__sfp+0x28>
 800dbd0:	6833      	ldr	r3, [r6, #0]
 800dbd2:	b30b      	cbz	r3, 800dc18 <__sfp+0x68>
 800dbd4:	6836      	ldr	r6, [r6, #0]
 800dbd6:	e7f7      	b.n	800dbc8 <__sfp+0x18>
 800dbd8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800dbdc:	b9d5      	cbnz	r5, 800dc14 <__sfp+0x64>
 800dbde:	4b16      	ldr	r3, [pc, #88]	; (800dc38 <__sfp+0x88>)
 800dbe0:	60e3      	str	r3, [r4, #12]
 800dbe2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800dbe6:	6665      	str	r5, [r4, #100]	; 0x64
 800dbe8:	f000 f84c 	bl	800dc84 <__retarget_lock_init_recursive>
 800dbec:	f7ff ff96 	bl	800db1c <__sfp_lock_release>
 800dbf0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800dbf4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800dbf8:	6025      	str	r5, [r4, #0]
 800dbfa:	61a5      	str	r5, [r4, #24]
 800dbfc:	2208      	movs	r2, #8
 800dbfe:	4629      	mov	r1, r5
 800dc00:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800dc04:	f7fe f958 	bl	800beb8 <memset>
 800dc08:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800dc0c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800dc10:	4620      	mov	r0, r4
 800dc12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc14:	3468      	adds	r4, #104	; 0x68
 800dc16:	e7d9      	b.n	800dbcc <__sfp+0x1c>
 800dc18:	2104      	movs	r1, #4
 800dc1a:	4638      	mov	r0, r7
 800dc1c:	f7ff ff62 	bl	800dae4 <__sfmoreglue>
 800dc20:	4604      	mov	r4, r0
 800dc22:	6030      	str	r0, [r6, #0]
 800dc24:	2800      	cmp	r0, #0
 800dc26:	d1d5      	bne.n	800dbd4 <__sfp+0x24>
 800dc28:	f7ff ff78 	bl	800db1c <__sfp_lock_release>
 800dc2c:	230c      	movs	r3, #12
 800dc2e:	603b      	str	r3, [r7, #0]
 800dc30:	e7ee      	b.n	800dc10 <__sfp+0x60>
 800dc32:	bf00      	nop
 800dc34:	0800ec5c 	.word	0x0800ec5c
 800dc38:	ffff0001 	.word	0xffff0001

0800dc3c <_fwalk_reent>:
 800dc3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dc40:	4606      	mov	r6, r0
 800dc42:	4688      	mov	r8, r1
 800dc44:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800dc48:	2700      	movs	r7, #0
 800dc4a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800dc4e:	f1b9 0901 	subs.w	r9, r9, #1
 800dc52:	d505      	bpl.n	800dc60 <_fwalk_reent+0x24>
 800dc54:	6824      	ldr	r4, [r4, #0]
 800dc56:	2c00      	cmp	r4, #0
 800dc58:	d1f7      	bne.n	800dc4a <_fwalk_reent+0xe>
 800dc5a:	4638      	mov	r0, r7
 800dc5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dc60:	89ab      	ldrh	r3, [r5, #12]
 800dc62:	2b01      	cmp	r3, #1
 800dc64:	d907      	bls.n	800dc76 <_fwalk_reent+0x3a>
 800dc66:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dc6a:	3301      	adds	r3, #1
 800dc6c:	d003      	beq.n	800dc76 <_fwalk_reent+0x3a>
 800dc6e:	4629      	mov	r1, r5
 800dc70:	4630      	mov	r0, r6
 800dc72:	47c0      	blx	r8
 800dc74:	4307      	orrs	r7, r0
 800dc76:	3568      	adds	r5, #104	; 0x68
 800dc78:	e7e9      	b.n	800dc4e <_fwalk_reent+0x12>
	...

0800dc7c <_localeconv_r>:
 800dc7c:	4800      	ldr	r0, [pc, #0]	; (800dc80 <_localeconv_r+0x4>)
 800dc7e:	4770      	bx	lr
 800dc80:	20000174 	.word	0x20000174

0800dc84 <__retarget_lock_init_recursive>:
 800dc84:	4770      	bx	lr

0800dc86 <__retarget_lock_acquire_recursive>:
 800dc86:	4770      	bx	lr

0800dc88 <__retarget_lock_release_recursive>:
 800dc88:	4770      	bx	lr

0800dc8a <__swhatbuf_r>:
 800dc8a:	b570      	push	{r4, r5, r6, lr}
 800dc8c:	460e      	mov	r6, r1
 800dc8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc92:	2900      	cmp	r1, #0
 800dc94:	b096      	sub	sp, #88	; 0x58
 800dc96:	4614      	mov	r4, r2
 800dc98:	461d      	mov	r5, r3
 800dc9a:	da08      	bge.n	800dcae <__swhatbuf_r+0x24>
 800dc9c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800dca0:	2200      	movs	r2, #0
 800dca2:	602a      	str	r2, [r5, #0]
 800dca4:	061a      	lsls	r2, r3, #24
 800dca6:	d410      	bmi.n	800dcca <__swhatbuf_r+0x40>
 800dca8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dcac:	e00e      	b.n	800dccc <__swhatbuf_r+0x42>
 800dcae:	466a      	mov	r2, sp
 800dcb0:	f000 fdf4 	bl	800e89c <_fstat_r>
 800dcb4:	2800      	cmp	r0, #0
 800dcb6:	dbf1      	blt.n	800dc9c <__swhatbuf_r+0x12>
 800dcb8:	9a01      	ldr	r2, [sp, #4]
 800dcba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800dcbe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800dcc2:	425a      	negs	r2, r3
 800dcc4:	415a      	adcs	r2, r3
 800dcc6:	602a      	str	r2, [r5, #0]
 800dcc8:	e7ee      	b.n	800dca8 <__swhatbuf_r+0x1e>
 800dcca:	2340      	movs	r3, #64	; 0x40
 800dccc:	2000      	movs	r0, #0
 800dcce:	6023      	str	r3, [r4, #0]
 800dcd0:	b016      	add	sp, #88	; 0x58
 800dcd2:	bd70      	pop	{r4, r5, r6, pc}

0800dcd4 <__smakebuf_r>:
 800dcd4:	898b      	ldrh	r3, [r1, #12]
 800dcd6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dcd8:	079d      	lsls	r5, r3, #30
 800dcda:	4606      	mov	r6, r0
 800dcdc:	460c      	mov	r4, r1
 800dcde:	d507      	bpl.n	800dcf0 <__smakebuf_r+0x1c>
 800dce0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800dce4:	6023      	str	r3, [r4, #0]
 800dce6:	6123      	str	r3, [r4, #16]
 800dce8:	2301      	movs	r3, #1
 800dcea:	6163      	str	r3, [r4, #20]
 800dcec:	b002      	add	sp, #8
 800dcee:	bd70      	pop	{r4, r5, r6, pc}
 800dcf0:	ab01      	add	r3, sp, #4
 800dcf2:	466a      	mov	r2, sp
 800dcf4:	f7ff ffc9 	bl	800dc8a <__swhatbuf_r>
 800dcf8:	9900      	ldr	r1, [sp, #0]
 800dcfa:	4605      	mov	r5, r0
 800dcfc:	4630      	mov	r0, r6
 800dcfe:	f7fe f94f 	bl	800bfa0 <_malloc_r>
 800dd02:	b948      	cbnz	r0, 800dd18 <__smakebuf_r+0x44>
 800dd04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd08:	059a      	lsls	r2, r3, #22
 800dd0a:	d4ef      	bmi.n	800dcec <__smakebuf_r+0x18>
 800dd0c:	f023 0303 	bic.w	r3, r3, #3
 800dd10:	f043 0302 	orr.w	r3, r3, #2
 800dd14:	81a3      	strh	r3, [r4, #12]
 800dd16:	e7e3      	b.n	800dce0 <__smakebuf_r+0xc>
 800dd18:	4b0d      	ldr	r3, [pc, #52]	; (800dd50 <__smakebuf_r+0x7c>)
 800dd1a:	62b3      	str	r3, [r6, #40]	; 0x28
 800dd1c:	89a3      	ldrh	r3, [r4, #12]
 800dd1e:	6020      	str	r0, [r4, #0]
 800dd20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dd24:	81a3      	strh	r3, [r4, #12]
 800dd26:	9b00      	ldr	r3, [sp, #0]
 800dd28:	6163      	str	r3, [r4, #20]
 800dd2a:	9b01      	ldr	r3, [sp, #4]
 800dd2c:	6120      	str	r0, [r4, #16]
 800dd2e:	b15b      	cbz	r3, 800dd48 <__smakebuf_r+0x74>
 800dd30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dd34:	4630      	mov	r0, r6
 800dd36:	f000 fdc3 	bl	800e8c0 <_isatty_r>
 800dd3a:	b128      	cbz	r0, 800dd48 <__smakebuf_r+0x74>
 800dd3c:	89a3      	ldrh	r3, [r4, #12]
 800dd3e:	f023 0303 	bic.w	r3, r3, #3
 800dd42:	f043 0301 	orr.w	r3, r3, #1
 800dd46:	81a3      	strh	r3, [r4, #12]
 800dd48:	89a0      	ldrh	r0, [r4, #12]
 800dd4a:	4305      	orrs	r5, r0
 800dd4c:	81a5      	strh	r5, [r4, #12]
 800dd4e:	e7cd      	b.n	800dcec <__smakebuf_r+0x18>
 800dd50:	0800dad9 	.word	0x0800dad9

0800dd54 <memcpy>:
 800dd54:	440a      	add	r2, r1
 800dd56:	4291      	cmp	r1, r2
 800dd58:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800dd5c:	d100      	bne.n	800dd60 <memcpy+0xc>
 800dd5e:	4770      	bx	lr
 800dd60:	b510      	push	{r4, lr}
 800dd62:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dd66:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dd6a:	4291      	cmp	r1, r2
 800dd6c:	d1f9      	bne.n	800dd62 <memcpy+0xe>
 800dd6e:	bd10      	pop	{r4, pc}

0800dd70 <__malloc_lock>:
 800dd70:	4801      	ldr	r0, [pc, #4]	; (800dd78 <__malloc_lock+0x8>)
 800dd72:	f7ff bf88 	b.w	800dc86 <__retarget_lock_acquire_recursive>
 800dd76:	bf00      	nop
 800dd78:	2000086c 	.word	0x2000086c

0800dd7c <__malloc_unlock>:
 800dd7c:	4801      	ldr	r0, [pc, #4]	; (800dd84 <__malloc_unlock+0x8>)
 800dd7e:	f7ff bf83 	b.w	800dc88 <__retarget_lock_release_recursive>
 800dd82:	bf00      	nop
 800dd84:	2000086c 	.word	0x2000086c

0800dd88 <_Balloc>:
 800dd88:	b570      	push	{r4, r5, r6, lr}
 800dd8a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800dd8c:	4604      	mov	r4, r0
 800dd8e:	460d      	mov	r5, r1
 800dd90:	b976      	cbnz	r6, 800ddb0 <_Balloc+0x28>
 800dd92:	2010      	movs	r0, #16
 800dd94:	f7fe f888 	bl	800bea8 <malloc>
 800dd98:	4602      	mov	r2, r0
 800dd9a:	6260      	str	r0, [r4, #36]	; 0x24
 800dd9c:	b920      	cbnz	r0, 800dda8 <_Balloc+0x20>
 800dd9e:	4b18      	ldr	r3, [pc, #96]	; (800de00 <_Balloc+0x78>)
 800dda0:	4818      	ldr	r0, [pc, #96]	; (800de04 <_Balloc+0x7c>)
 800dda2:	2166      	movs	r1, #102	; 0x66
 800dda4:	f000 fd3a 	bl	800e81c <__assert_func>
 800dda8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ddac:	6006      	str	r6, [r0, #0]
 800ddae:	60c6      	str	r6, [r0, #12]
 800ddb0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ddb2:	68f3      	ldr	r3, [r6, #12]
 800ddb4:	b183      	cbz	r3, 800ddd8 <_Balloc+0x50>
 800ddb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ddb8:	68db      	ldr	r3, [r3, #12]
 800ddba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ddbe:	b9b8      	cbnz	r0, 800ddf0 <_Balloc+0x68>
 800ddc0:	2101      	movs	r1, #1
 800ddc2:	fa01 f605 	lsl.w	r6, r1, r5
 800ddc6:	1d72      	adds	r2, r6, #5
 800ddc8:	0092      	lsls	r2, r2, #2
 800ddca:	4620      	mov	r0, r4
 800ddcc:	f000 fb60 	bl	800e490 <_calloc_r>
 800ddd0:	b160      	cbz	r0, 800ddec <_Balloc+0x64>
 800ddd2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ddd6:	e00e      	b.n	800ddf6 <_Balloc+0x6e>
 800ddd8:	2221      	movs	r2, #33	; 0x21
 800ddda:	2104      	movs	r1, #4
 800dddc:	4620      	mov	r0, r4
 800ddde:	f000 fb57 	bl	800e490 <_calloc_r>
 800dde2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dde4:	60f0      	str	r0, [r6, #12]
 800dde6:	68db      	ldr	r3, [r3, #12]
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d1e4      	bne.n	800ddb6 <_Balloc+0x2e>
 800ddec:	2000      	movs	r0, #0
 800ddee:	bd70      	pop	{r4, r5, r6, pc}
 800ddf0:	6802      	ldr	r2, [r0, #0]
 800ddf2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ddf6:	2300      	movs	r3, #0
 800ddf8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ddfc:	e7f7      	b.n	800ddee <_Balloc+0x66>
 800ddfe:	bf00      	nop
 800de00:	0800eca1 	.word	0x0800eca1
 800de04:	0800ed84 	.word	0x0800ed84

0800de08 <_Bfree>:
 800de08:	b570      	push	{r4, r5, r6, lr}
 800de0a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800de0c:	4605      	mov	r5, r0
 800de0e:	460c      	mov	r4, r1
 800de10:	b976      	cbnz	r6, 800de30 <_Bfree+0x28>
 800de12:	2010      	movs	r0, #16
 800de14:	f7fe f848 	bl	800bea8 <malloc>
 800de18:	4602      	mov	r2, r0
 800de1a:	6268      	str	r0, [r5, #36]	; 0x24
 800de1c:	b920      	cbnz	r0, 800de28 <_Bfree+0x20>
 800de1e:	4b09      	ldr	r3, [pc, #36]	; (800de44 <_Bfree+0x3c>)
 800de20:	4809      	ldr	r0, [pc, #36]	; (800de48 <_Bfree+0x40>)
 800de22:	218a      	movs	r1, #138	; 0x8a
 800de24:	f000 fcfa 	bl	800e81c <__assert_func>
 800de28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800de2c:	6006      	str	r6, [r0, #0]
 800de2e:	60c6      	str	r6, [r0, #12]
 800de30:	b13c      	cbz	r4, 800de42 <_Bfree+0x3a>
 800de32:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800de34:	6862      	ldr	r2, [r4, #4]
 800de36:	68db      	ldr	r3, [r3, #12]
 800de38:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800de3c:	6021      	str	r1, [r4, #0]
 800de3e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800de42:	bd70      	pop	{r4, r5, r6, pc}
 800de44:	0800eca1 	.word	0x0800eca1
 800de48:	0800ed84 	.word	0x0800ed84

0800de4c <__multadd>:
 800de4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de50:	690d      	ldr	r5, [r1, #16]
 800de52:	4607      	mov	r7, r0
 800de54:	460c      	mov	r4, r1
 800de56:	461e      	mov	r6, r3
 800de58:	f101 0c14 	add.w	ip, r1, #20
 800de5c:	2000      	movs	r0, #0
 800de5e:	f8dc 3000 	ldr.w	r3, [ip]
 800de62:	b299      	uxth	r1, r3
 800de64:	fb02 6101 	mla	r1, r2, r1, r6
 800de68:	0c1e      	lsrs	r6, r3, #16
 800de6a:	0c0b      	lsrs	r3, r1, #16
 800de6c:	fb02 3306 	mla	r3, r2, r6, r3
 800de70:	b289      	uxth	r1, r1
 800de72:	3001      	adds	r0, #1
 800de74:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800de78:	4285      	cmp	r5, r0
 800de7a:	f84c 1b04 	str.w	r1, [ip], #4
 800de7e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800de82:	dcec      	bgt.n	800de5e <__multadd+0x12>
 800de84:	b30e      	cbz	r6, 800deca <__multadd+0x7e>
 800de86:	68a3      	ldr	r3, [r4, #8]
 800de88:	42ab      	cmp	r3, r5
 800de8a:	dc19      	bgt.n	800dec0 <__multadd+0x74>
 800de8c:	6861      	ldr	r1, [r4, #4]
 800de8e:	4638      	mov	r0, r7
 800de90:	3101      	adds	r1, #1
 800de92:	f7ff ff79 	bl	800dd88 <_Balloc>
 800de96:	4680      	mov	r8, r0
 800de98:	b928      	cbnz	r0, 800dea6 <__multadd+0x5a>
 800de9a:	4602      	mov	r2, r0
 800de9c:	4b0c      	ldr	r3, [pc, #48]	; (800ded0 <__multadd+0x84>)
 800de9e:	480d      	ldr	r0, [pc, #52]	; (800ded4 <__multadd+0x88>)
 800dea0:	21b5      	movs	r1, #181	; 0xb5
 800dea2:	f000 fcbb 	bl	800e81c <__assert_func>
 800dea6:	6922      	ldr	r2, [r4, #16]
 800dea8:	3202      	adds	r2, #2
 800deaa:	f104 010c 	add.w	r1, r4, #12
 800deae:	0092      	lsls	r2, r2, #2
 800deb0:	300c      	adds	r0, #12
 800deb2:	f7ff ff4f 	bl	800dd54 <memcpy>
 800deb6:	4621      	mov	r1, r4
 800deb8:	4638      	mov	r0, r7
 800deba:	f7ff ffa5 	bl	800de08 <_Bfree>
 800debe:	4644      	mov	r4, r8
 800dec0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800dec4:	3501      	adds	r5, #1
 800dec6:	615e      	str	r6, [r3, #20]
 800dec8:	6125      	str	r5, [r4, #16]
 800deca:	4620      	mov	r0, r4
 800decc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ded0:	0800ed13 	.word	0x0800ed13
 800ded4:	0800ed84 	.word	0x0800ed84

0800ded8 <__hi0bits>:
 800ded8:	0c03      	lsrs	r3, r0, #16
 800deda:	041b      	lsls	r3, r3, #16
 800dedc:	b9d3      	cbnz	r3, 800df14 <__hi0bits+0x3c>
 800dede:	0400      	lsls	r0, r0, #16
 800dee0:	2310      	movs	r3, #16
 800dee2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800dee6:	bf04      	itt	eq
 800dee8:	0200      	lsleq	r0, r0, #8
 800deea:	3308      	addeq	r3, #8
 800deec:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800def0:	bf04      	itt	eq
 800def2:	0100      	lsleq	r0, r0, #4
 800def4:	3304      	addeq	r3, #4
 800def6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800defa:	bf04      	itt	eq
 800defc:	0080      	lsleq	r0, r0, #2
 800defe:	3302      	addeq	r3, #2
 800df00:	2800      	cmp	r0, #0
 800df02:	db05      	blt.n	800df10 <__hi0bits+0x38>
 800df04:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800df08:	f103 0301 	add.w	r3, r3, #1
 800df0c:	bf08      	it	eq
 800df0e:	2320      	moveq	r3, #32
 800df10:	4618      	mov	r0, r3
 800df12:	4770      	bx	lr
 800df14:	2300      	movs	r3, #0
 800df16:	e7e4      	b.n	800dee2 <__hi0bits+0xa>

0800df18 <__lo0bits>:
 800df18:	6803      	ldr	r3, [r0, #0]
 800df1a:	f013 0207 	ands.w	r2, r3, #7
 800df1e:	4601      	mov	r1, r0
 800df20:	d00b      	beq.n	800df3a <__lo0bits+0x22>
 800df22:	07da      	lsls	r2, r3, #31
 800df24:	d423      	bmi.n	800df6e <__lo0bits+0x56>
 800df26:	0798      	lsls	r0, r3, #30
 800df28:	bf49      	itett	mi
 800df2a:	085b      	lsrmi	r3, r3, #1
 800df2c:	089b      	lsrpl	r3, r3, #2
 800df2e:	2001      	movmi	r0, #1
 800df30:	600b      	strmi	r3, [r1, #0]
 800df32:	bf5c      	itt	pl
 800df34:	600b      	strpl	r3, [r1, #0]
 800df36:	2002      	movpl	r0, #2
 800df38:	4770      	bx	lr
 800df3a:	b298      	uxth	r0, r3
 800df3c:	b9a8      	cbnz	r0, 800df6a <__lo0bits+0x52>
 800df3e:	0c1b      	lsrs	r3, r3, #16
 800df40:	2010      	movs	r0, #16
 800df42:	b2da      	uxtb	r2, r3
 800df44:	b90a      	cbnz	r2, 800df4a <__lo0bits+0x32>
 800df46:	3008      	adds	r0, #8
 800df48:	0a1b      	lsrs	r3, r3, #8
 800df4a:	071a      	lsls	r2, r3, #28
 800df4c:	bf04      	itt	eq
 800df4e:	091b      	lsreq	r3, r3, #4
 800df50:	3004      	addeq	r0, #4
 800df52:	079a      	lsls	r2, r3, #30
 800df54:	bf04      	itt	eq
 800df56:	089b      	lsreq	r3, r3, #2
 800df58:	3002      	addeq	r0, #2
 800df5a:	07da      	lsls	r2, r3, #31
 800df5c:	d403      	bmi.n	800df66 <__lo0bits+0x4e>
 800df5e:	085b      	lsrs	r3, r3, #1
 800df60:	f100 0001 	add.w	r0, r0, #1
 800df64:	d005      	beq.n	800df72 <__lo0bits+0x5a>
 800df66:	600b      	str	r3, [r1, #0]
 800df68:	4770      	bx	lr
 800df6a:	4610      	mov	r0, r2
 800df6c:	e7e9      	b.n	800df42 <__lo0bits+0x2a>
 800df6e:	2000      	movs	r0, #0
 800df70:	4770      	bx	lr
 800df72:	2020      	movs	r0, #32
 800df74:	4770      	bx	lr
	...

0800df78 <__i2b>:
 800df78:	b510      	push	{r4, lr}
 800df7a:	460c      	mov	r4, r1
 800df7c:	2101      	movs	r1, #1
 800df7e:	f7ff ff03 	bl	800dd88 <_Balloc>
 800df82:	4602      	mov	r2, r0
 800df84:	b928      	cbnz	r0, 800df92 <__i2b+0x1a>
 800df86:	4b05      	ldr	r3, [pc, #20]	; (800df9c <__i2b+0x24>)
 800df88:	4805      	ldr	r0, [pc, #20]	; (800dfa0 <__i2b+0x28>)
 800df8a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800df8e:	f000 fc45 	bl	800e81c <__assert_func>
 800df92:	2301      	movs	r3, #1
 800df94:	6144      	str	r4, [r0, #20]
 800df96:	6103      	str	r3, [r0, #16]
 800df98:	bd10      	pop	{r4, pc}
 800df9a:	bf00      	nop
 800df9c:	0800ed13 	.word	0x0800ed13
 800dfa0:	0800ed84 	.word	0x0800ed84

0800dfa4 <__multiply>:
 800dfa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfa8:	4691      	mov	r9, r2
 800dfaa:	690a      	ldr	r2, [r1, #16]
 800dfac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dfb0:	429a      	cmp	r2, r3
 800dfb2:	bfb8      	it	lt
 800dfb4:	460b      	movlt	r3, r1
 800dfb6:	460c      	mov	r4, r1
 800dfb8:	bfbc      	itt	lt
 800dfba:	464c      	movlt	r4, r9
 800dfbc:	4699      	movlt	r9, r3
 800dfbe:	6927      	ldr	r7, [r4, #16]
 800dfc0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800dfc4:	68a3      	ldr	r3, [r4, #8]
 800dfc6:	6861      	ldr	r1, [r4, #4]
 800dfc8:	eb07 060a 	add.w	r6, r7, sl
 800dfcc:	42b3      	cmp	r3, r6
 800dfce:	b085      	sub	sp, #20
 800dfd0:	bfb8      	it	lt
 800dfd2:	3101      	addlt	r1, #1
 800dfd4:	f7ff fed8 	bl	800dd88 <_Balloc>
 800dfd8:	b930      	cbnz	r0, 800dfe8 <__multiply+0x44>
 800dfda:	4602      	mov	r2, r0
 800dfdc:	4b44      	ldr	r3, [pc, #272]	; (800e0f0 <__multiply+0x14c>)
 800dfde:	4845      	ldr	r0, [pc, #276]	; (800e0f4 <__multiply+0x150>)
 800dfe0:	f240 115d 	movw	r1, #349	; 0x15d
 800dfe4:	f000 fc1a 	bl	800e81c <__assert_func>
 800dfe8:	f100 0514 	add.w	r5, r0, #20
 800dfec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800dff0:	462b      	mov	r3, r5
 800dff2:	2200      	movs	r2, #0
 800dff4:	4543      	cmp	r3, r8
 800dff6:	d321      	bcc.n	800e03c <__multiply+0x98>
 800dff8:	f104 0314 	add.w	r3, r4, #20
 800dffc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e000:	f109 0314 	add.w	r3, r9, #20
 800e004:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e008:	9202      	str	r2, [sp, #8]
 800e00a:	1b3a      	subs	r2, r7, r4
 800e00c:	3a15      	subs	r2, #21
 800e00e:	f022 0203 	bic.w	r2, r2, #3
 800e012:	3204      	adds	r2, #4
 800e014:	f104 0115 	add.w	r1, r4, #21
 800e018:	428f      	cmp	r7, r1
 800e01a:	bf38      	it	cc
 800e01c:	2204      	movcc	r2, #4
 800e01e:	9201      	str	r2, [sp, #4]
 800e020:	9a02      	ldr	r2, [sp, #8]
 800e022:	9303      	str	r3, [sp, #12]
 800e024:	429a      	cmp	r2, r3
 800e026:	d80c      	bhi.n	800e042 <__multiply+0x9e>
 800e028:	2e00      	cmp	r6, #0
 800e02a:	dd03      	ble.n	800e034 <__multiply+0x90>
 800e02c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e030:	2b00      	cmp	r3, #0
 800e032:	d05a      	beq.n	800e0ea <__multiply+0x146>
 800e034:	6106      	str	r6, [r0, #16]
 800e036:	b005      	add	sp, #20
 800e038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e03c:	f843 2b04 	str.w	r2, [r3], #4
 800e040:	e7d8      	b.n	800dff4 <__multiply+0x50>
 800e042:	f8b3 a000 	ldrh.w	sl, [r3]
 800e046:	f1ba 0f00 	cmp.w	sl, #0
 800e04a:	d024      	beq.n	800e096 <__multiply+0xf2>
 800e04c:	f104 0e14 	add.w	lr, r4, #20
 800e050:	46a9      	mov	r9, r5
 800e052:	f04f 0c00 	mov.w	ip, #0
 800e056:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e05a:	f8d9 1000 	ldr.w	r1, [r9]
 800e05e:	fa1f fb82 	uxth.w	fp, r2
 800e062:	b289      	uxth	r1, r1
 800e064:	fb0a 110b 	mla	r1, sl, fp, r1
 800e068:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e06c:	f8d9 2000 	ldr.w	r2, [r9]
 800e070:	4461      	add	r1, ip
 800e072:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e076:	fb0a c20b 	mla	r2, sl, fp, ip
 800e07a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e07e:	b289      	uxth	r1, r1
 800e080:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e084:	4577      	cmp	r7, lr
 800e086:	f849 1b04 	str.w	r1, [r9], #4
 800e08a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e08e:	d8e2      	bhi.n	800e056 <__multiply+0xb2>
 800e090:	9a01      	ldr	r2, [sp, #4]
 800e092:	f845 c002 	str.w	ip, [r5, r2]
 800e096:	9a03      	ldr	r2, [sp, #12]
 800e098:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e09c:	3304      	adds	r3, #4
 800e09e:	f1b9 0f00 	cmp.w	r9, #0
 800e0a2:	d020      	beq.n	800e0e6 <__multiply+0x142>
 800e0a4:	6829      	ldr	r1, [r5, #0]
 800e0a6:	f104 0c14 	add.w	ip, r4, #20
 800e0aa:	46ae      	mov	lr, r5
 800e0ac:	f04f 0a00 	mov.w	sl, #0
 800e0b0:	f8bc b000 	ldrh.w	fp, [ip]
 800e0b4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e0b8:	fb09 220b 	mla	r2, r9, fp, r2
 800e0bc:	4492      	add	sl, r2
 800e0be:	b289      	uxth	r1, r1
 800e0c0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800e0c4:	f84e 1b04 	str.w	r1, [lr], #4
 800e0c8:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e0cc:	f8be 1000 	ldrh.w	r1, [lr]
 800e0d0:	0c12      	lsrs	r2, r2, #16
 800e0d2:	fb09 1102 	mla	r1, r9, r2, r1
 800e0d6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800e0da:	4567      	cmp	r7, ip
 800e0dc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e0e0:	d8e6      	bhi.n	800e0b0 <__multiply+0x10c>
 800e0e2:	9a01      	ldr	r2, [sp, #4]
 800e0e4:	50a9      	str	r1, [r5, r2]
 800e0e6:	3504      	adds	r5, #4
 800e0e8:	e79a      	b.n	800e020 <__multiply+0x7c>
 800e0ea:	3e01      	subs	r6, #1
 800e0ec:	e79c      	b.n	800e028 <__multiply+0x84>
 800e0ee:	bf00      	nop
 800e0f0:	0800ed13 	.word	0x0800ed13
 800e0f4:	0800ed84 	.word	0x0800ed84

0800e0f8 <__pow5mult>:
 800e0f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e0fc:	4615      	mov	r5, r2
 800e0fe:	f012 0203 	ands.w	r2, r2, #3
 800e102:	4606      	mov	r6, r0
 800e104:	460f      	mov	r7, r1
 800e106:	d007      	beq.n	800e118 <__pow5mult+0x20>
 800e108:	4c25      	ldr	r4, [pc, #148]	; (800e1a0 <__pow5mult+0xa8>)
 800e10a:	3a01      	subs	r2, #1
 800e10c:	2300      	movs	r3, #0
 800e10e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e112:	f7ff fe9b 	bl	800de4c <__multadd>
 800e116:	4607      	mov	r7, r0
 800e118:	10ad      	asrs	r5, r5, #2
 800e11a:	d03d      	beq.n	800e198 <__pow5mult+0xa0>
 800e11c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e11e:	b97c      	cbnz	r4, 800e140 <__pow5mult+0x48>
 800e120:	2010      	movs	r0, #16
 800e122:	f7fd fec1 	bl	800bea8 <malloc>
 800e126:	4602      	mov	r2, r0
 800e128:	6270      	str	r0, [r6, #36]	; 0x24
 800e12a:	b928      	cbnz	r0, 800e138 <__pow5mult+0x40>
 800e12c:	4b1d      	ldr	r3, [pc, #116]	; (800e1a4 <__pow5mult+0xac>)
 800e12e:	481e      	ldr	r0, [pc, #120]	; (800e1a8 <__pow5mult+0xb0>)
 800e130:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e134:	f000 fb72 	bl	800e81c <__assert_func>
 800e138:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e13c:	6004      	str	r4, [r0, #0]
 800e13e:	60c4      	str	r4, [r0, #12]
 800e140:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e144:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e148:	b94c      	cbnz	r4, 800e15e <__pow5mult+0x66>
 800e14a:	f240 2171 	movw	r1, #625	; 0x271
 800e14e:	4630      	mov	r0, r6
 800e150:	f7ff ff12 	bl	800df78 <__i2b>
 800e154:	2300      	movs	r3, #0
 800e156:	f8c8 0008 	str.w	r0, [r8, #8]
 800e15a:	4604      	mov	r4, r0
 800e15c:	6003      	str	r3, [r0, #0]
 800e15e:	f04f 0900 	mov.w	r9, #0
 800e162:	07eb      	lsls	r3, r5, #31
 800e164:	d50a      	bpl.n	800e17c <__pow5mult+0x84>
 800e166:	4639      	mov	r1, r7
 800e168:	4622      	mov	r2, r4
 800e16a:	4630      	mov	r0, r6
 800e16c:	f7ff ff1a 	bl	800dfa4 <__multiply>
 800e170:	4639      	mov	r1, r7
 800e172:	4680      	mov	r8, r0
 800e174:	4630      	mov	r0, r6
 800e176:	f7ff fe47 	bl	800de08 <_Bfree>
 800e17a:	4647      	mov	r7, r8
 800e17c:	106d      	asrs	r5, r5, #1
 800e17e:	d00b      	beq.n	800e198 <__pow5mult+0xa0>
 800e180:	6820      	ldr	r0, [r4, #0]
 800e182:	b938      	cbnz	r0, 800e194 <__pow5mult+0x9c>
 800e184:	4622      	mov	r2, r4
 800e186:	4621      	mov	r1, r4
 800e188:	4630      	mov	r0, r6
 800e18a:	f7ff ff0b 	bl	800dfa4 <__multiply>
 800e18e:	6020      	str	r0, [r4, #0]
 800e190:	f8c0 9000 	str.w	r9, [r0]
 800e194:	4604      	mov	r4, r0
 800e196:	e7e4      	b.n	800e162 <__pow5mult+0x6a>
 800e198:	4638      	mov	r0, r7
 800e19a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e19e:	bf00      	nop
 800e1a0:	0800eed0 	.word	0x0800eed0
 800e1a4:	0800eca1 	.word	0x0800eca1
 800e1a8:	0800ed84 	.word	0x0800ed84

0800e1ac <__lshift>:
 800e1ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e1b0:	460c      	mov	r4, r1
 800e1b2:	6849      	ldr	r1, [r1, #4]
 800e1b4:	6923      	ldr	r3, [r4, #16]
 800e1b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e1ba:	68a3      	ldr	r3, [r4, #8]
 800e1bc:	4607      	mov	r7, r0
 800e1be:	4691      	mov	r9, r2
 800e1c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e1c4:	f108 0601 	add.w	r6, r8, #1
 800e1c8:	42b3      	cmp	r3, r6
 800e1ca:	db0b      	blt.n	800e1e4 <__lshift+0x38>
 800e1cc:	4638      	mov	r0, r7
 800e1ce:	f7ff fddb 	bl	800dd88 <_Balloc>
 800e1d2:	4605      	mov	r5, r0
 800e1d4:	b948      	cbnz	r0, 800e1ea <__lshift+0x3e>
 800e1d6:	4602      	mov	r2, r0
 800e1d8:	4b2a      	ldr	r3, [pc, #168]	; (800e284 <__lshift+0xd8>)
 800e1da:	482b      	ldr	r0, [pc, #172]	; (800e288 <__lshift+0xdc>)
 800e1dc:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e1e0:	f000 fb1c 	bl	800e81c <__assert_func>
 800e1e4:	3101      	adds	r1, #1
 800e1e6:	005b      	lsls	r3, r3, #1
 800e1e8:	e7ee      	b.n	800e1c8 <__lshift+0x1c>
 800e1ea:	2300      	movs	r3, #0
 800e1ec:	f100 0114 	add.w	r1, r0, #20
 800e1f0:	f100 0210 	add.w	r2, r0, #16
 800e1f4:	4618      	mov	r0, r3
 800e1f6:	4553      	cmp	r3, sl
 800e1f8:	db37      	blt.n	800e26a <__lshift+0xbe>
 800e1fa:	6920      	ldr	r0, [r4, #16]
 800e1fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e200:	f104 0314 	add.w	r3, r4, #20
 800e204:	f019 091f 	ands.w	r9, r9, #31
 800e208:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e20c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e210:	d02f      	beq.n	800e272 <__lshift+0xc6>
 800e212:	f1c9 0e20 	rsb	lr, r9, #32
 800e216:	468a      	mov	sl, r1
 800e218:	f04f 0c00 	mov.w	ip, #0
 800e21c:	681a      	ldr	r2, [r3, #0]
 800e21e:	fa02 f209 	lsl.w	r2, r2, r9
 800e222:	ea42 020c 	orr.w	r2, r2, ip
 800e226:	f84a 2b04 	str.w	r2, [sl], #4
 800e22a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e22e:	4298      	cmp	r0, r3
 800e230:	fa22 fc0e 	lsr.w	ip, r2, lr
 800e234:	d8f2      	bhi.n	800e21c <__lshift+0x70>
 800e236:	1b03      	subs	r3, r0, r4
 800e238:	3b15      	subs	r3, #21
 800e23a:	f023 0303 	bic.w	r3, r3, #3
 800e23e:	3304      	adds	r3, #4
 800e240:	f104 0215 	add.w	r2, r4, #21
 800e244:	4290      	cmp	r0, r2
 800e246:	bf38      	it	cc
 800e248:	2304      	movcc	r3, #4
 800e24a:	f841 c003 	str.w	ip, [r1, r3]
 800e24e:	f1bc 0f00 	cmp.w	ip, #0
 800e252:	d001      	beq.n	800e258 <__lshift+0xac>
 800e254:	f108 0602 	add.w	r6, r8, #2
 800e258:	3e01      	subs	r6, #1
 800e25a:	4638      	mov	r0, r7
 800e25c:	612e      	str	r6, [r5, #16]
 800e25e:	4621      	mov	r1, r4
 800e260:	f7ff fdd2 	bl	800de08 <_Bfree>
 800e264:	4628      	mov	r0, r5
 800e266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e26a:	f842 0f04 	str.w	r0, [r2, #4]!
 800e26e:	3301      	adds	r3, #1
 800e270:	e7c1      	b.n	800e1f6 <__lshift+0x4a>
 800e272:	3904      	subs	r1, #4
 800e274:	f853 2b04 	ldr.w	r2, [r3], #4
 800e278:	f841 2f04 	str.w	r2, [r1, #4]!
 800e27c:	4298      	cmp	r0, r3
 800e27e:	d8f9      	bhi.n	800e274 <__lshift+0xc8>
 800e280:	e7ea      	b.n	800e258 <__lshift+0xac>
 800e282:	bf00      	nop
 800e284:	0800ed13 	.word	0x0800ed13
 800e288:	0800ed84 	.word	0x0800ed84

0800e28c <__mcmp>:
 800e28c:	b530      	push	{r4, r5, lr}
 800e28e:	6902      	ldr	r2, [r0, #16]
 800e290:	690c      	ldr	r4, [r1, #16]
 800e292:	1b12      	subs	r2, r2, r4
 800e294:	d10e      	bne.n	800e2b4 <__mcmp+0x28>
 800e296:	f100 0314 	add.w	r3, r0, #20
 800e29a:	3114      	adds	r1, #20
 800e29c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e2a0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e2a4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e2a8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e2ac:	42a5      	cmp	r5, r4
 800e2ae:	d003      	beq.n	800e2b8 <__mcmp+0x2c>
 800e2b0:	d305      	bcc.n	800e2be <__mcmp+0x32>
 800e2b2:	2201      	movs	r2, #1
 800e2b4:	4610      	mov	r0, r2
 800e2b6:	bd30      	pop	{r4, r5, pc}
 800e2b8:	4283      	cmp	r3, r0
 800e2ba:	d3f3      	bcc.n	800e2a4 <__mcmp+0x18>
 800e2bc:	e7fa      	b.n	800e2b4 <__mcmp+0x28>
 800e2be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e2c2:	e7f7      	b.n	800e2b4 <__mcmp+0x28>

0800e2c4 <__mdiff>:
 800e2c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2c8:	460c      	mov	r4, r1
 800e2ca:	4606      	mov	r6, r0
 800e2cc:	4611      	mov	r1, r2
 800e2ce:	4620      	mov	r0, r4
 800e2d0:	4690      	mov	r8, r2
 800e2d2:	f7ff ffdb 	bl	800e28c <__mcmp>
 800e2d6:	1e05      	subs	r5, r0, #0
 800e2d8:	d110      	bne.n	800e2fc <__mdiff+0x38>
 800e2da:	4629      	mov	r1, r5
 800e2dc:	4630      	mov	r0, r6
 800e2de:	f7ff fd53 	bl	800dd88 <_Balloc>
 800e2e2:	b930      	cbnz	r0, 800e2f2 <__mdiff+0x2e>
 800e2e4:	4b3a      	ldr	r3, [pc, #232]	; (800e3d0 <__mdiff+0x10c>)
 800e2e6:	4602      	mov	r2, r0
 800e2e8:	f240 2132 	movw	r1, #562	; 0x232
 800e2ec:	4839      	ldr	r0, [pc, #228]	; (800e3d4 <__mdiff+0x110>)
 800e2ee:	f000 fa95 	bl	800e81c <__assert_func>
 800e2f2:	2301      	movs	r3, #1
 800e2f4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e2f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2fc:	bfa4      	itt	ge
 800e2fe:	4643      	movge	r3, r8
 800e300:	46a0      	movge	r8, r4
 800e302:	4630      	mov	r0, r6
 800e304:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e308:	bfa6      	itte	ge
 800e30a:	461c      	movge	r4, r3
 800e30c:	2500      	movge	r5, #0
 800e30e:	2501      	movlt	r5, #1
 800e310:	f7ff fd3a 	bl	800dd88 <_Balloc>
 800e314:	b920      	cbnz	r0, 800e320 <__mdiff+0x5c>
 800e316:	4b2e      	ldr	r3, [pc, #184]	; (800e3d0 <__mdiff+0x10c>)
 800e318:	4602      	mov	r2, r0
 800e31a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e31e:	e7e5      	b.n	800e2ec <__mdiff+0x28>
 800e320:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e324:	6926      	ldr	r6, [r4, #16]
 800e326:	60c5      	str	r5, [r0, #12]
 800e328:	f104 0914 	add.w	r9, r4, #20
 800e32c:	f108 0514 	add.w	r5, r8, #20
 800e330:	f100 0e14 	add.w	lr, r0, #20
 800e334:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e338:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e33c:	f108 0210 	add.w	r2, r8, #16
 800e340:	46f2      	mov	sl, lr
 800e342:	2100      	movs	r1, #0
 800e344:	f859 3b04 	ldr.w	r3, [r9], #4
 800e348:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e34c:	fa1f f883 	uxth.w	r8, r3
 800e350:	fa11 f18b 	uxtah	r1, r1, fp
 800e354:	0c1b      	lsrs	r3, r3, #16
 800e356:	eba1 0808 	sub.w	r8, r1, r8
 800e35a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e35e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e362:	fa1f f888 	uxth.w	r8, r8
 800e366:	1419      	asrs	r1, r3, #16
 800e368:	454e      	cmp	r6, r9
 800e36a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e36e:	f84a 3b04 	str.w	r3, [sl], #4
 800e372:	d8e7      	bhi.n	800e344 <__mdiff+0x80>
 800e374:	1b33      	subs	r3, r6, r4
 800e376:	3b15      	subs	r3, #21
 800e378:	f023 0303 	bic.w	r3, r3, #3
 800e37c:	3304      	adds	r3, #4
 800e37e:	3415      	adds	r4, #21
 800e380:	42a6      	cmp	r6, r4
 800e382:	bf38      	it	cc
 800e384:	2304      	movcc	r3, #4
 800e386:	441d      	add	r5, r3
 800e388:	4473      	add	r3, lr
 800e38a:	469e      	mov	lr, r3
 800e38c:	462e      	mov	r6, r5
 800e38e:	4566      	cmp	r6, ip
 800e390:	d30e      	bcc.n	800e3b0 <__mdiff+0xec>
 800e392:	f10c 0203 	add.w	r2, ip, #3
 800e396:	1b52      	subs	r2, r2, r5
 800e398:	f022 0203 	bic.w	r2, r2, #3
 800e39c:	3d03      	subs	r5, #3
 800e39e:	45ac      	cmp	ip, r5
 800e3a0:	bf38      	it	cc
 800e3a2:	2200      	movcc	r2, #0
 800e3a4:	441a      	add	r2, r3
 800e3a6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e3aa:	b17b      	cbz	r3, 800e3cc <__mdiff+0x108>
 800e3ac:	6107      	str	r7, [r0, #16]
 800e3ae:	e7a3      	b.n	800e2f8 <__mdiff+0x34>
 800e3b0:	f856 8b04 	ldr.w	r8, [r6], #4
 800e3b4:	fa11 f288 	uxtah	r2, r1, r8
 800e3b8:	1414      	asrs	r4, r2, #16
 800e3ba:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e3be:	b292      	uxth	r2, r2
 800e3c0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e3c4:	f84e 2b04 	str.w	r2, [lr], #4
 800e3c8:	1421      	asrs	r1, r4, #16
 800e3ca:	e7e0      	b.n	800e38e <__mdiff+0xca>
 800e3cc:	3f01      	subs	r7, #1
 800e3ce:	e7ea      	b.n	800e3a6 <__mdiff+0xe2>
 800e3d0:	0800ed13 	.word	0x0800ed13
 800e3d4:	0800ed84 	.word	0x0800ed84

0800e3d8 <__d2b>:
 800e3d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e3dc:	4689      	mov	r9, r1
 800e3de:	2101      	movs	r1, #1
 800e3e0:	ec57 6b10 	vmov	r6, r7, d0
 800e3e4:	4690      	mov	r8, r2
 800e3e6:	f7ff fccf 	bl	800dd88 <_Balloc>
 800e3ea:	4604      	mov	r4, r0
 800e3ec:	b930      	cbnz	r0, 800e3fc <__d2b+0x24>
 800e3ee:	4602      	mov	r2, r0
 800e3f0:	4b25      	ldr	r3, [pc, #148]	; (800e488 <__d2b+0xb0>)
 800e3f2:	4826      	ldr	r0, [pc, #152]	; (800e48c <__d2b+0xb4>)
 800e3f4:	f240 310a 	movw	r1, #778	; 0x30a
 800e3f8:	f000 fa10 	bl	800e81c <__assert_func>
 800e3fc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e400:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e404:	bb35      	cbnz	r5, 800e454 <__d2b+0x7c>
 800e406:	2e00      	cmp	r6, #0
 800e408:	9301      	str	r3, [sp, #4]
 800e40a:	d028      	beq.n	800e45e <__d2b+0x86>
 800e40c:	4668      	mov	r0, sp
 800e40e:	9600      	str	r6, [sp, #0]
 800e410:	f7ff fd82 	bl	800df18 <__lo0bits>
 800e414:	9900      	ldr	r1, [sp, #0]
 800e416:	b300      	cbz	r0, 800e45a <__d2b+0x82>
 800e418:	9a01      	ldr	r2, [sp, #4]
 800e41a:	f1c0 0320 	rsb	r3, r0, #32
 800e41e:	fa02 f303 	lsl.w	r3, r2, r3
 800e422:	430b      	orrs	r3, r1
 800e424:	40c2      	lsrs	r2, r0
 800e426:	6163      	str	r3, [r4, #20]
 800e428:	9201      	str	r2, [sp, #4]
 800e42a:	9b01      	ldr	r3, [sp, #4]
 800e42c:	61a3      	str	r3, [r4, #24]
 800e42e:	2b00      	cmp	r3, #0
 800e430:	bf14      	ite	ne
 800e432:	2202      	movne	r2, #2
 800e434:	2201      	moveq	r2, #1
 800e436:	6122      	str	r2, [r4, #16]
 800e438:	b1d5      	cbz	r5, 800e470 <__d2b+0x98>
 800e43a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e43e:	4405      	add	r5, r0
 800e440:	f8c9 5000 	str.w	r5, [r9]
 800e444:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e448:	f8c8 0000 	str.w	r0, [r8]
 800e44c:	4620      	mov	r0, r4
 800e44e:	b003      	add	sp, #12
 800e450:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e454:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e458:	e7d5      	b.n	800e406 <__d2b+0x2e>
 800e45a:	6161      	str	r1, [r4, #20]
 800e45c:	e7e5      	b.n	800e42a <__d2b+0x52>
 800e45e:	a801      	add	r0, sp, #4
 800e460:	f7ff fd5a 	bl	800df18 <__lo0bits>
 800e464:	9b01      	ldr	r3, [sp, #4]
 800e466:	6163      	str	r3, [r4, #20]
 800e468:	2201      	movs	r2, #1
 800e46a:	6122      	str	r2, [r4, #16]
 800e46c:	3020      	adds	r0, #32
 800e46e:	e7e3      	b.n	800e438 <__d2b+0x60>
 800e470:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e474:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e478:	f8c9 0000 	str.w	r0, [r9]
 800e47c:	6918      	ldr	r0, [r3, #16]
 800e47e:	f7ff fd2b 	bl	800ded8 <__hi0bits>
 800e482:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e486:	e7df      	b.n	800e448 <__d2b+0x70>
 800e488:	0800ed13 	.word	0x0800ed13
 800e48c:	0800ed84 	.word	0x0800ed84

0800e490 <_calloc_r>:
 800e490:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e492:	fba1 2402 	umull	r2, r4, r1, r2
 800e496:	b94c      	cbnz	r4, 800e4ac <_calloc_r+0x1c>
 800e498:	4611      	mov	r1, r2
 800e49a:	9201      	str	r2, [sp, #4]
 800e49c:	f7fd fd80 	bl	800bfa0 <_malloc_r>
 800e4a0:	9a01      	ldr	r2, [sp, #4]
 800e4a2:	4605      	mov	r5, r0
 800e4a4:	b930      	cbnz	r0, 800e4b4 <_calloc_r+0x24>
 800e4a6:	4628      	mov	r0, r5
 800e4a8:	b003      	add	sp, #12
 800e4aa:	bd30      	pop	{r4, r5, pc}
 800e4ac:	220c      	movs	r2, #12
 800e4ae:	6002      	str	r2, [r0, #0]
 800e4b0:	2500      	movs	r5, #0
 800e4b2:	e7f8      	b.n	800e4a6 <_calloc_r+0x16>
 800e4b4:	4621      	mov	r1, r4
 800e4b6:	f7fd fcff 	bl	800beb8 <memset>
 800e4ba:	e7f4      	b.n	800e4a6 <_calloc_r+0x16>

0800e4bc <__sfputc_r>:
 800e4bc:	6893      	ldr	r3, [r2, #8]
 800e4be:	3b01      	subs	r3, #1
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	b410      	push	{r4}
 800e4c4:	6093      	str	r3, [r2, #8]
 800e4c6:	da08      	bge.n	800e4da <__sfputc_r+0x1e>
 800e4c8:	6994      	ldr	r4, [r2, #24]
 800e4ca:	42a3      	cmp	r3, r4
 800e4cc:	db01      	blt.n	800e4d2 <__sfputc_r+0x16>
 800e4ce:	290a      	cmp	r1, #10
 800e4d0:	d103      	bne.n	800e4da <__sfputc_r+0x1e>
 800e4d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e4d6:	f7fe badf 	b.w	800ca98 <__swbuf_r>
 800e4da:	6813      	ldr	r3, [r2, #0]
 800e4dc:	1c58      	adds	r0, r3, #1
 800e4de:	6010      	str	r0, [r2, #0]
 800e4e0:	7019      	strb	r1, [r3, #0]
 800e4e2:	4608      	mov	r0, r1
 800e4e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e4e8:	4770      	bx	lr

0800e4ea <__sfputs_r>:
 800e4ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4ec:	4606      	mov	r6, r0
 800e4ee:	460f      	mov	r7, r1
 800e4f0:	4614      	mov	r4, r2
 800e4f2:	18d5      	adds	r5, r2, r3
 800e4f4:	42ac      	cmp	r4, r5
 800e4f6:	d101      	bne.n	800e4fc <__sfputs_r+0x12>
 800e4f8:	2000      	movs	r0, #0
 800e4fa:	e007      	b.n	800e50c <__sfputs_r+0x22>
 800e4fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e500:	463a      	mov	r2, r7
 800e502:	4630      	mov	r0, r6
 800e504:	f7ff ffda 	bl	800e4bc <__sfputc_r>
 800e508:	1c43      	adds	r3, r0, #1
 800e50a:	d1f3      	bne.n	800e4f4 <__sfputs_r+0xa>
 800e50c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e510 <_vfiprintf_r>:
 800e510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e514:	460d      	mov	r5, r1
 800e516:	b09d      	sub	sp, #116	; 0x74
 800e518:	4614      	mov	r4, r2
 800e51a:	4698      	mov	r8, r3
 800e51c:	4606      	mov	r6, r0
 800e51e:	b118      	cbz	r0, 800e528 <_vfiprintf_r+0x18>
 800e520:	6983      	ldr	r3, [r0, #24]
 800e522:	b90b      	cbnz	r3, 800e528 <_vfiprintf_r+0x18>
 800e524:	f7ff fb0c 	bl	800db40 <__sinit>
 800e528:	4b89      	ldr	r3, [pc, #548]	; (800e750 <_vfiprintf_r+0x240>)
 800e52a:	429d      	cmp	r5, r3
 800e52c:	d11b      	bne.n	800e566 <_vfiprintf_r+0x56>
 800e52e:	6875      	ldr	r5, [r6, #4]
 800e530:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e532:	07d9      	lsls	r1, r3, #31
 800e534:	d405      	bmi.n	800e542 <_vfiprintf_r+0x32>
 800e536:	89ab      	ldrh	r3, [r5, #12]
 800e538:	059a      	lsls	r2, r3, #22
 800e53a:	d402      	bmi.n	800e542 <_vfiprintf_r+0x32>
 800e53c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e53e:	f7ff fba2 	bl	800dc86 <__retarget_lock_acquire_recursive>
 800e542:	89ab      	ldrh	r3, [r5, #12]
 800e544:	071b      	lsls	r3, r3, #28
 800e546:	d501      	bpl.n	800e54c <_vfiprintf_r+0x3c>
 800e548:	692b      	ldr	r3, [r5, #16]
 800e54a:	b9eb      	cbnz	r3, 800e588 <_vfiprintf_r+0x78>
 800e54c:	4629      	mov	r1, r5
 800e54e:	4630      	mov	r0, r6
 800e550:	f7fe faf4 	bl	800cb3c <__swsetup_r>
 800e554:	b1c0      	cbz	r0, 800e588 <_vfiprintf_r+0x78>
 800e556:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e558:	07dc      	lsls	r4, r3, #31
 800e55a:	d50e      	bpl.n	800e57a <_vfiprintf_r+0x6a>
 800e55c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e560:	b01d      	add	sp, #116	; 0x74
 800e562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e566:	4b7b      	ldr	r3, [pc, #492]	; (800e754 <_vfiprintf_r+0x244>)
 800e568:	429d      	cmp	r5, r3
 800e56a:	d101      	bne.n	800e570 <_vfiprintf_r+0x60>
 800e56c:	68b5      	ldr	r5, [r6, #8]
 800e56e:	e7df      	b.n	800e530 <_vfiprintf_r+0x20>
 800e570:	4b79      	ldr	r3, [pc, #484]	; (800e758 <_vfiprintf_r+0x248>)
 800e572:	429d      	cmp	r5, r3
 800e574:	bf08      	it	eq
 800e576:	68f5      	ldreq	r5, [r6, #12]
 800e578:	e7da      	b.n	800e530 <_vfiprintf_r+0x20>
 800e57a:	89ab      	ldrh	r3, [r5, #12]
 800e57c:	0598      	lsls	r0, r3, #22
 800e57e:	d4ed      	bmi.n	800e55c <_vfiprintf_r+0x4c>
 800e580:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e582:	f7ff fb81 	bl	800dc88 <__retarget_lock_release_recursive>
 800e586:	e7e9      	b.n	800e55c <_vfiprintf_r+0x4c>
 800e588:	2300      	movs	r3, #0
 800e58a:	9309      	str	r3, [sp, #36]	; 0x24
 800e58c:	2320      	movs	r3, #32
 800e58e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e592:	f8cd 800c 	str.w	r8, [sp, #12]
 800e596:	2330      	movs	r3, #48	; 0x30
 800e598:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e75c <_vfiprintf_r+0x24c>
 800e59c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e5a0:	f04f 0901 	mov.w	r9, #1
 800e5a4:	4623      	mov	r3, r4
 800e5a6:	469a      	mov	sl, r3
 800e5a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e5ac:	b10a      	cbz	r2, 800e5b2 <_vfiprintf_r+0xa2>
 800e5ae:	2a25      	cmp	r2, #37	; 0x25
 800e5b0:	d1f9      	bne.n	800e5a6 <_vfiprintf_r+0x96>
 800e5b2:	ebba 0b04 	subs.w	fp, sl, r4
 800e5b6:	d00b      	beq.n	800e5d0 <_vfiprintf_r+0xc0>
 800e5b8:	465b      	mov	r3, fp
 800e5ba:	4622      	mov	r2, r4
 800e5bc:	4629      	mov	r1, r5
 800e5be:	4630      	mov	r0, r6
 800e5c0:	f7ff ff93 	bl	800e4ea <__sfputs_r>
 800e5c4:	3001      	adds	r0, #1
 800e5c6:	f000 80aa 	beq.w	800e71e <_vfiprintf_r+0x20e>
 800e5ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e5cc:	445a      	add	r2, fp
 800e5ce:	9209      	str	r2, [sp, #36]	; 0x24
 800e5d0:	f89a 3000 	ldrb.w	r3, [sl]
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	f000 80a2 	beq.w	800e71e <_vfiprintf_r+0x20e>
 800e5da:	2300      	movs	r3, #0
 800e5dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e5e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e5e4:	f10a 0a01 	add.w	sl, sl, #1
 800e5e8:	9304      	str	r3, [sp, #16]
 800e5ea:	9307      	str	r3, [sp, #28]
 800e5ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e5f0:	931a      	str	r3, [sp, #104]	; 0x68
 800e5f2:	4654      	mov	r4, sl
 800e5f4:	2205      	movs	r2, #5
 800e5f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e5fa:	4858      	ldr	r0, [pc, #352]	; (800e75c <_vfiprintf_r+0x24c>)
 800e5fc:	f7f1 fe08 	bl	8000210 <memchr>
 800e600:	9a04      	ldr	r2, [sp, #16]
 800e602:	b9d8      	cbnz	r0, 800e63c <_vfiprintf_r+0x12c>
 800e604:	06d1      	lsls	r1, r2, #27
 800e606:	bf44      	itt	mi
 800e608:	2320      	movmi	r3, #32
 800e60a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e60e:	0713      	lsls	r3, r2, #28
 800e610:	bf44      	itt	mi
 800e612:	232b      	movmi	r3, #43	; 0x2b
 800e614:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e618:	f89a 3000 	ldrb.w	r3, [sl]
 800e61c:	2b2a      	cmp	r3, #42	; 0x2a
 800e61e:	d015      	beq.n	800e64c <_vfiprintf_r+0x13c>
 800e620:	9a07      	ldr	r2, [sp, #28]
 800e622:	4654      	mov	r4, sl
 800e624:	2000      	movs	r0, #0
 800e626:	f04f 0c0a 	mov.w	ip, #10
 800e62a:	4621      	mov	r1, r4
 800e62c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e630:	3b30      	subs	r3, #48	; 0x30
 800e632:	2b09      	cmp	r3, #9
 800e634:	d94e      	bls.n	800e6d4 <_vfiprintf_r+0x1c4>
 800e636:	b1b0      	cbz	r0, 800e666 <_vfiprintf_r+0x156>
 800e638:	9207      	str	r2, [sp, #28]
 800e63a:	e014      	b.n	800e666 <_vfiprintf_r+0x156>
 800e63c:	eba0 0308 	sub.w	r3, r0, r8
 800e640:	fa09 f303 	lsl.w	r3, r9, r3
 800e644:	4313      	orrs	r3, r2
 800e646:	9304      	str	r3, [sp, #16]
 800e648:	46a2      	mov	sl, r4
 800e64a:	e7d2      	b.n	800e5f2 <_vfiprintf_r+0xe2>
 800e64c:	9b03      	ldr	r3, [sp, #12]
 800e64e:	1d19      	adds	r1, r3, #4
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	9103      	str	r1, [sp, #12]
 800e654:	2b00      	cmp	r3, #0
 800e656:	bfbb      	ittet	lt
 800e658:	425b      	neglt	r3, r3
 800e65a:	f042 0202 	orrlt.w	r2, r2, #2
 800e65e:	9307      	strge	r3, [sp, #28]
 800e660:	9307      	strlt	r3, [sp, #28]
 800e662:	bfb8      	it	lt
 800e664:	9204      	strlt	r2, [sp, #16]
 800e666:	7823      	ldrb	r3, [r4, #0]
 800e668:	2b2e      	cmp	r3, #46	; 0x2e
 800e66a:	d10c      	bne.n	800e686 <_vfiprintf_r+0x176>
 800e66c:	7863      	ldrb	r3, [r4, #1]
 800e66e:	2b2a      	cmp	r3, #42	; 0x2a
 800e670:	d135      	bne.n	800e6de <_vfiprintf_r+0x1ce>
 800e672:	9b03      	ldr	r3, [sp, #12]
 800e674:	1d1a      	adds	r2, r3, #4
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	9203      	str	r2, [sp, #12]
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	bfb8      	it	lt
 800e67e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800e682:	3402      	adds	r4, #2
 800e684:	9305      	str	r3, [sp, #20]
 800e686:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e76c <_vfiprintf_r+0x25c>
 800e68a:	7821      	ldrb	r1, [r4, #0]
 800e68c:	2203      	movs	r2, #3
 800e68e:	4650      	mov	r0, sl
 800e690:	f7f1 fdbe 	bl	8000210 <memchr>
 800e694:	b140      	cbz	r0, 800e6a8 <_vfiprintf_r+0x198>
 800e696:	2340      	movs	r3, #64	; 0x40
 800e698:	eba0 000a 	sub.w	r0, r0, sl
 800e69c:	fa03 f000 	lsl.w	r0, r3, r0
 800e6a0:	9b04      	ldr	r3, [sp, #16]
 800e6a2:	4303      	orrs	r3, r0
 800e6a4:	3401      	adds	r4, #1
 800e6a6:	9304      	str	r3, [sp, #16]
 800e6a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e6ac:	482c      	ldr	r0, [pc, #176]	; (800e760 <_vfiprintf_r+0x250>)
 800e6ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e6b2:	2206      	movs	r2, #6
 800e6b4:	f7f1 fdac 	bl	8000210 <memchr>
 800e6b8:	2800      	cmp	r0, #0
 800e6ba:	d03f      	beq.n	800e73c <_vfiprintf_r+0x22c>
 800e6bc:	4b29      	ldr	r3, [pc, #164]	; (800e764 <_vfiprintf_r+0x254>)
 800e6be:	bb1b      	cbnz	r3, 800e708 <_vfiprintf_r+0x1f8>
 800e6c0:	9b03      	ldr	r3, [sp, #12]
 800e6c2:	3307      	adds	r3, #7
 800e6c4:	f023 0307 	bic.w	r3, r3, #7
 800e6c8:	3308      	adds	r3, #8
 800e6ca:	9303      	str	r3, [sp, #12]
 800e6cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e6ce:	443b      	add	r3, r7
 800e6d0:	9309      	str	r3, [sp, #36]	; 0x24
 800e6d2:	e767      	b.n	800e5a4 <_vfiprintf_r+0x94>
 800e6d4:	fb0c 3202 	mla	r2, ip, r2, r3
 800e6d8:	460c      	mov	r4, r1
 800e6da:	2001      	movs	r0, #1
 800e6dc:	e7a5      	b.n	800e62a <_vfiprintf_r+0x11a>
 800e6de:	2300      	movs	r3, #0
 800e6e0:	3401      	adds	r4, #1
 800e6e2:	9305      	str	r3, [sp, #20]
 800e6e4:	4619      	mov	r1, r3
 800e6e6:	f04f 0c0a 	mov.w	ip, #10
 800e6ea:	4620      	mov	r0, r4
 800e6ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e6f0:	3a30      	subs	r2, #48	; 0x30
 800e6f2:	2a09      	cmp	r2, #9
 800e6f4:	d903      	bls.n	800e6fe <_vfiprintf_r+0x1ee>
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d0c5      	beq.n	800e686 <_vfiprintf_r+0x176>
 800e6fa:	9105      	str	r1, [sp, #20]
 800e6fc:	e7c3      	b.n	800e686 <_vfiprintf_r+0x176>
 800e6fe:	fb0c 2101 	mla	r1, ip, r1, r2
 800e702:	4604      	mov	r4, r0
 800e704:	2301      	movs	r3, #1
 800e706:	e7f0      	b.n	800e6ea <_vfiprintf_r+0x1da>
 800e708:	ab03      	add	r3, sp, #12
 800e70a:	9300      	str	r3, [sp, #0]
 800e70c:	462a      	mov	r2, r5
 800e70e:	4b16      	ldr	r3, [pc, #88]	; (800e768 <_vfiprintf_r+0x258>)
 800e710:	a904      	add	r1, sp, #16
 800e712:	4630      	mov	r0, r6
 800e714:	f7fd fd58 	bl	800c1c8 <_printf_float>
 800e718:	4607      	mov	r7, r0
 800e71a:	1c78      	adds	r0, r7, #1
 800e71c:	d1d6      	bne.n	800e6cc <_vfiprintf_r+0x1bc>
 800e71e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e720:	07d9      	lsls	r1, r3, #31
 800e722:	d405      	bmi.n	800e730 <_vfiprintf_r+0x220>
 800e724:	89ab      	ldrh	r3, [r5, #12]
 800e726:	059a      	lsls	r2, r3, #22
 800e728:	d402      	bmi.n	800e730 <_vfiprintf_r+0x220>
 800e72a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e72c:	f7ff faac 	bl	800dc88 <__retarget_lock_release_recursive>
 800e730:	89ab      	ldrh	r3, [r5, #12]
 800e732:	065b      	lsls	r3, r3, #25
 800e734:	f53f af12 	bmi.w	800e55c <_vfiprintf_r+0x4c>
 800e738:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e73a:	e711      	b.n	800e560 <_vfiprintf_r+0x50>
 800e73c:	ab03      	add	r3, sp, #12
 800e73e:	9300      	str	r3, [sp, #0]
 800e740:	462a      	mov	r2, r5
 800e742:	4b09      	ldr	r3, [pc, #36]	; (800e768 <_vfiprintf_r+0x258>)
 800e744:	a904      	add	r1, sp, #16
 800e746:	4630      	mov	r0, r6
 800e748:	f7fd ffe2 	bl	800c710 <_printf_i>
 800e74c:	e7e4      	b.n	800e718 <_vfiprintf_r+0x208>
 800e74e:	bf00      	nop
 800e750:	0800ed44 	.word	0x0800ed44
 800e754:	0800ed64 	.word	0x0800ed64
 800e758:	0800ed24 	.word	0x0800ed24
 800e75c:	0800eedc 	.word	0x0800eedc
 800e760:	0800eee6 	.word	0x0800eee6
 800e764:	0800c1c9 	.word	0x0800c1c9
 800e768:	0800e4eb 	.word	0x0800e4eb
 800e76c:	0800eee2 	.word	0x0800eee2

0800e770 <__sread>:
 800e770:	b510      	push	{r4, lr}
 800e772:	460c      	mov	r4, r1
 800e774:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e778:	f000 f8d6 	bl	800e928 <_read_r>
 800e77c:	2800      	cmp	r0, #0
 800e77e:	bfab      	itete	ge
 800e780:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e782:	89a3      	ldrhlt	r3, [r4, #12]
 800e784:	181b      	addge	r3, r3, r0
 800e786:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e78a:	bfac      	ite	ge
 800e78c:	6563      	strge	r3, [r4, #84]	; 0x54
 800e78e:	81a3      	strhlt	r3, [r4, #12]
 800e790:	bd10      	pop	{r4, pc}

0800e792 <__swrite>:
 800e792:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e796:	461f      	mov	r7, r3
 800e798:	898b      	ldrh	r3, [r1, #12]
 800e79a:	05db      	lsls	r3, r3, #23
 800e79c:	4605      	mov	r5, r0
 800e79e:	460c      	mov	r4, r1
 800e7a0:	4616      	mov	r6, r2
 800e7a2:	d505      	bpl.n	800e7b0 <__swrite+0x1e>
 800e7a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e7a8:	2302      	movs	r3, #2
 800e7aa:	2200      	movs	r2, #0
 800e7ac:	f000 f898 	bl	800e8e0 <_lseek_r>
 800e7b0:	89a3      	ldrh	r3, [r4, #12]
 800e7b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e7b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e7ba:	81a3      	strh	r3, [r4, #12]
 800e7bc:	4632      	mov	r2, r6
 800e7be:	463b      	mov	r3, r7
 800e7c0:	4628      	mov	r0, r5
 800e7c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e7c6:	f000 b817 	b.w	800e7f8 <_write_r>

0800e7ca <__sseek>:
 800e7ca:	b510      	push	{r4, lr}
 800e7cc:	460c      	mov	r4, r1
 800e7ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e7d2:	f000 f885 	bl	800e8e0 <_lseek_r>
 800e7d6:	1c43      	adds	r3, r0, #1
 800e7d8:	89a3      	ldrh	r3, [r4, #12]
 800e7da:	bf15      	itete	ne
 800e7dc:	6560      	strne	r0, [r4, #84]	; 0x54
 800e7de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e7e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e7e6:	81a3      	strheq	r3, [r4, #12]
 800e7e8:	bf18      	it	ne
 800e7ea:	81a3      	strhne	r3, [r4, #12]
 800e7ec:	bd10      	pop	{r4, pc}

0800e7ee <__sclose>:
 800e7ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e7f2:	f000 b831 	b.w	800e858 <_close_r>
	...

0800e7f8 <_write_r>:
 800e7f8:	b538      	push	{r3, r4, r5, lr}
 800e7fa:	4d07      	ldr	r5, [pc, #28]	; (800e818 <_write_r+0x20>)
 800e7fc:	4604      	mov	r4, r0
 800e7fe:	4608      	mov	r0, r1
 800e800:	4611      	mov	r1, r2
 800e802:	2200      	movs	r2, #0
 800e804:	602a      	str	r2, [r5, #0]
 800e806:	461a      	mov	r2, r3
 800e808:	f7f5 faa7 	bl	8003d5a <_write>
 800e80c:	1c43      	adds	r3, r0, #1
 800e80e:	d102      	bne.n	800e816 <_write_r+0x1e>
 800e810:	682b      	ldr	r3, [r5, #0]
 800e812:	b103      	cbz	r3, 800e816 <_write_r+0x1e>
 800e814:	6023      	str	r3, [r4, #0]
 800e816:	bd38      	pop	{r3, r4, r5, pc}
 800e818:	20000870 	.word	0x20000870

0800e81c <__assert_func>:
 800e81c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e81e:	4614      	mov	r4, r2
 800e820:	461a      	mov	r2, r3
 800e822:	4b09      	ldr	r3, [pc, #36]	; (800e848 <__assert_func+0x2c>)
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	4605      	mov	r5, r0
 800e828:	68d8      	ldr	r0, [r3, #12]
 800e82a:	b14c      	cbz	r4, 800e840 <__assert_func+0x24>
 800e82c:	4b07      	ldr	r3, [pc, #28]	; (800e84c <__assert_func+0x30>)
 800e82e:	9100      	str	r1, [sp, #0]
 800e830:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e834:	4906      	ldr	r1, [pc, #24]	; (800e850 <__assert_func+0x34>)
 800e836:	462b      	mov	r3, r5
 800e838:	f000 f81e 	bl	800e878 <fiprintf>
 800e83c:	f000 f893 	bl	800e966 <abort>
 800e840:	4b04      	ldr	r3, [pc, #16]	; (800e854 <__assert_func+0x38>)
 800e842:	461c      	mov	r4, r3
 800e844:	e7f3      	b.n	800e82e <__assert_func+0x12>
 800e846:	bf00      	nop
 800e848:	20000020 	.word	0x20000020
 800e84c:	0800eeed 	.word	0x0800eeed
 800e850:	0800eefa 	.word	0x0800eefa
 800e854:	0800ef28 	.word	0x0800ef28

0800e858 <_close_r>:
 800e858:	b538      	push	{r3, r4, r5, lr}
 800e85a:	4d06      	ldr	r5, [pc, #24]	; (800e874 <_close_r+0x1c>)
 800e85c:	2300      	movs	r3, #0
 800e85e:	4604      	mov	r4, r0
 800e860:	4608      	mov	r0, r1
 800e862:	602b      	str	r3, [r5, #0]
 800e864:	f7f5 fa95 	bl	8003d92 <_close>
 800e868:	1c43      	adds	r3, r0, #1
 800e86a:	d102      	bne.n	800e872 <_close_r+0x1a>
 800e86c:	682b      	ldr	r3, [r5, #0]
 800e86e:	b103      	cbz	r3, 800e872 <_close_r+0x1a>
 800e870:	6023      	str	r3, [r4, #0]
 800e872:	bd38      	pop	{r3, r4, r5, pc}
 800e874:	20000870 	.word	0x20000870

0800e878 <fiprintf>:
 800e878:	b40e      	push	{r1, r2, r3}
 800e87a:	b503      	push	{r0, r1, lr}
 800e87c:	4601      	mov	r1, r0
 800e87e:	ab03      	add	r3, sp, #12
 800e880:	4805      	ldr	r0, [pc, #20]	; (800e898 <fiprintf+0x20>)
 800e882:	f853 2b04 	ldr.w	r2, [r3], #4
 800e886:	6800      	ldr	r0, [r0, #0]
 800e888:	9301      	str	r3, [sp, #4]
 800e88a:	f7ff fe41 	bl	800e510 <_vfiprintf_r>
 800e88e:	b002      	add	sp, #8
 800e890:	f85d eb04 	ldr.w	lr, [sp], #4
 800e894:	b003      	add	sp, #12
 800e896:	4770      	bx	lr
 800e898:	20000020 	.word	0x20000020

0800e89c <_fstat_r>:
 800e89c:	b538      	push	{r3, r4, r5, lr}
 800e89e:	4d07      	ldr	r5, [pc, #28]	; (800e8bc <_fstat_r+0x20>)
 800e8a0:	2300      	movs	r3, #0
 800e8a2:	4604      	mov	r4, r0
 800e8a4:	4608      	mov	r0, r1
 800e8a6:	4611      	mov	r1, r2
 800e8a8:	602b      	str	r3, [r5, #0]
 800e8aa:	f7f5 fa7e 	bl	8003daa <_fstat>
 800e8ae:	1c43      	adds	r3, r0, #1
 800e8b0:	d102      	bne.n	800e8b8 <_fstat_r+0x1c>
 800e8b2:	682b      	ldr	r3, [r5, #0]
 800e8b4:	b103      	cbz	r3, 800e8b8 <_fstat_r+0x1c>
 800e8b6:	6023      	str	r3, [r4, #0]
 800e8b8:	bd38      	pop	{r3, r4, r5, pc}
 800e8ba:	bf00      	nop
 800e8bc:	20000870 	.word	0x20000870

0800e8c0 <_isatty_r>:
 800e8c0:	b538      	push	{r3, r4, r5, lr}
 800e8c2:	4d06      	ldr	r5, [pc, #24]	; (800e8dc <_isatty_r+0x1c>)
 800e8c4:	2300      	movs	r3, #0
 800e8c6:	4604      	mov	r4, r0
 800e8c8:	4608      	mov	r0, r1
 800e8ca:	602b      	str	r3, [r5, #0]
 800e8cc:	f7f5 fa7d 	bl	8003dca <_isatty>
 800e8d0:	1c43      	adds	r3, r0, #1
 800e8d2:	d102      	bne.n	800e8da <_isatty_r+0x1a>
 800e8d4:	682b      	ldr	r3, [r5, #0]
 800e8d6:	b103      	cbz	r3, 800e8da <_isatty_r+0x1a>
 800e8d8:	6023      	str	r3, [r4, #0]
 800e8da:	bd38      	pop	{r3, r4, r5, pc}
 800e8dc:	20000870 	.word	0x20000870

0800e8e0 <_lseek_r>:
 800e8e0:	b538      	push	{r3, r4, r5, lr}
 800e8e2:	4d07      	ldr	r5, [pc, #28]	; (800e900 <_lseek_r+0x20>)
 800e8e4:	4604      	mov	r4, r0
 800e8e6:	4608      	mov	r0, r1
 800e8e8:	4611      	mov	r1, r2
 800e8ea:	2200      	movs	r2, #0
 800e8ec:	602a      	str	r2, [r5, #0]
 800e8ee:	461a      	mov	r2, r3
 800e8f0:	f7f5 fa76 	bl	8003de0 <_lseek>
 800e8f4:	1c43      	adds	r3, r0, #1
 800e8f6:	d102      	bne.n	800e8fe <_lseek_r+0x1e>
 800e8f8:	682b      	ldr	r3, [r5, #0]
 800e8fa:	b103      	cbz	r3, 800e8fe <_lseek_r+0x1e>
 800e8fc:	6023      	str	r3, [r4, #0]
 800e8fe:	bd38      	pop	{r3, r4, r5, pc}
 800e900:	20000870 	.word	0x20000870

0800e904 <__ascii_mbtowc>:
 800e904:	b082      	sub	sp, #8
 800e906:	b901      	cbnz	r1, 800e90a <__ascii_mbtowc+0x6>
 800e908:	a901      	add	r1, sp, #4
 800e90a:	b142      	cbz	r2, 800e91e <__ascii_mbtowc+0x1a>
 800e90c:	b14b      	cbz	r3, 800e922 <__ascii_mbtowc+0x1e>
 800e90e:	7813      	ldrb	r3, [r2, #0]
 800e910:	600b      	str	r3, [r1, #0]
 800e912:	7812      	ldrb	r2, [r2, #0]
 800e914:	1e10      	subs	r0, r2, #0
 800e916:	bf18      	it	ne
 800e918:	2001      	movne	r0, #1
 800e91a:	b002      	add	sp, #8
 800e91c:	4770      	bx	lr
 800e91e:	4610      	mov	r0, r2
 800e920:	e7fb      	b.n	800e91a <__ascii_mbtowc+0x16>
 800e922:	f06f 0001 	mvn.w	r0, #1
 800e926:	e7f8      	b.n	800e91a <__ascii_mbtowc+0x16>

0800e928 <_read_r>:
 800e928:	b538      	push	{r3, r4, r5, lr}
 800e92a:	4d07      	ldr	r5, [pc, #28]	; (800e948 <_read_r+0x20>)
 800e92c:	4604      	mov	r4, r0
 800e92e:	4608      	mov	r0, r1
 800e930:	4611      	mov	r1, r2
 800e932:	2200      	movs	r2, #0
 800e934:	602a      	str	r2, [r5, #0]
 800e936:	461a      	mov	r2, r3
 800e938:	f7f5 f9f2 	bl	8003d20 <_read>
 800e93c:	1c43      	adds	r3, r0, #1
 800e93e:	d102      	bne.n	800e946 <_read_r+0x1e>
 800e940:	682b      	ldr	r3, [r5, #0]
 800e942:	b103      	cbz	r3, 800e946 <_read_r+0x1e>
 800e944:	6023      	str	r3, [r4, #0]
 800e946:	bd38      	pop	{r3, r4, r5, pc}
 800e948:	20000870 	.word	0x20000870

0800e94c <__ascii_wctomb>:
 800e94c:	b149      	cbz	r1, 800e962 <__ascii_wctomb+0x16>
 800e94e:	2aff      	cmp	r2, #255	; 0xff
 800e950:	bf85      	ittet	hi
 800e952:	238a      	movhi	r3, #138	; 0x8a
 800e954:	6003      	strhi	r3, [r0, #0]
 800e956:	700a      	strbls	r2, [r1, #0]
 800e958:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800e95c:	bf98      	it	ls
 800e95e:	2001      	movls	r0, #1
 800e960:	4770      	bx	lr
 800e962:	4608      	mov	r0, r1
 800e964:	4770      	bx	lr

0800e966 <abort>:
 800e966:	b508      	push	{r3, lr}
 800e968:	2006      	movs	r0, #6
 800e96a:	f000 f82b 	bl	800e9c4 <raise>
 800e96e:	2001      	movs	r0, #1
 800e970:	f7f5 f9cc 	bl	8003d0c <_exit>

0800e974 <_raise_r>:
 800e974:	291f      	cmp	r1, #31
 800e976:	b538      	push	{r3, r4, r5, lr}
 800e978:	4604      	mov	r4, r0
 800e97a:	460d      	mov	r5, r1
 800e97c:	d904      	bls.n	800e988 <_raise_r+0x14>
 800e97e:	2316      	movs	r3, #22
 800e980:	6003      	str	r3, [r0, #0]
 800e982:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e986:	bd38      	pop	{r3, r4, r5, pc}
 800e988:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e98a:	b112      	cbz	r2, 800e992 <_raise_r+0x1e>
 800e98c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e990:	b94b      	cbnz	r3, 800e9a6 <_raise_r+0x32>
 800e992:	4620      	mov	r0, r4
 800e994:	f000 f830 	bl	800e9f8 <_getpid_r>
 800e998:	462a      	mov	r2, r5
 800e99a:	4601      	mov	r1, r0
 800e99c:	4620      	mov	r0, r4
 800e99e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e9a2:	f000 b817 	b.w	800e9d4 <_kill_r>
 800e9a6:	2b01      	cmp	r3, #1
 800e9a8:	d00a      	beq.n	800e9c0 <_raise_r+0x4c>
 800e9aa:	1c59      	adds	r1, r3, #1
 800e9ac:	d103      	bne.n	800e9b6 <_raise_r+0x42>
 800e9ae:	2316      	movs	r3, #22
 800e9b0:	6003      	str	r3, [r0, #0]
 800e9b2:	2001      	movs	r0, #1
 800e9b4:	e7e7      	b.n	800e986 <_raise_r+0x12>
 800e9b6:	2400      	movs	r4, #0
 800e9b8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e9bc:	4628      	mov	r0, r5
 800e9be:	4798      	blx	r3
 800e9c0:	2000      	movs	r0, #0
 800e9c2:	e7e0      	b.n	800e986 <_raise_r+0x12>

0800e9c4 <raise>:
 800e9c4:	4b02      	ldr	r3, [pc, #8]	; (800e9d0 <raise+0xc>)
 800e9c6:	4601      	mov	r1, r0
 800e9c8:	6818      	ldr	r0, [r3, #0]
 800e9ca:	f7ff bfd3 	b.w	800e974 <_raise_r>
 800e9ce:	bf00      	nop
 800e9d0:	20000020 	.word	0x20000020

0800e9d4 <_kill_r>:
 800e9d4:	b538      	push	{r3, r4, r5, lr}
 800e9d6:	4d07      	ldr	r5, [pc, #28]	; (800e9f4 <_kill_r+0x20>)
 800e9d8:	2300      	movs	r3, #0
 800e9da:	4604      	mov	r4, r0
 800e9dc:	4608      	mov	r0, r1
 800e9de:	4611      	mov	r1, r2
 800e9e0:	602b      	str	r3, [r5, #0]
 800e9e2:	f7f5 f983 	bl	8003cec <_kill>
 800e9e6:	1c43      	adds	r3, r0, #1
 800e9e8:	d102      	bne.n	800e9f0 <_kill_r+0x1c>
 800e9ea:	682b      	ldr	r3, [r5, #0]
 800e9ec:	b103      	cbz	r3, 800e9f0 <_kill_r+0x1c>
 800e9ee:	6023      	str	r3, [r4, #0]
 800e9f0:	bd38      	pop	{r3, r4, r5, pc}
 800e9f2:	bf00      	nop
 800e9f4:	20000870 	.word	0x20000870

0800e9f8 <_getpid_r>:
 800e9f8:	f7f5 b970 	b.w	8003cdc <_getpid>

0800e9fc <_init>:
 800e9fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9fe:	bf00      	nop
 800ea00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea02:	bc08      	pop	{r3}
 800ea04:	469e      	mov	lr, r3
 800ea06:	4770      	bx	lr

0800ea08 <_fini>:
 800ea08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea0a:	bf00      	nop
 800ea0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea0e:	bc08      	pop	{r3}
 800ea10:	469e      	mov	lr, r3
 800ea12:	4770      	bx	lr
