
Central_control_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c00  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08009dbc  08009dbc  00019dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e2c  08009e2c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08009e2c  08009e2c  00019e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009e34  08009e34  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e34  08009e34  00019e34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009e38  08009e38  00019e38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08009e3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000778  20000010  08009e4c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000788  08009e4c  00020788  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e6c1  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033cf  00000000  00000000  0003e701  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019d8  00000000  00000000  00041ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018c0  00000000  00000000  000434a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e1a0  00000000  00000000  00044d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001eb27  00000000  00000000  00072f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012355f  00000000  00000000  00091a2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001b4f8e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006f5c  00000000  00000000  001b4fe0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20000010 	.word	0x20000010
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08009da4 	.word	0x08009da4

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000014 	.word	0x20000014
 80001f8:	08009da4 	.word	0x08009da4

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800020c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000210:	f000 b974 	b.w	80004fc <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	468e      	mov	lr, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d14d      	bne.n	80002d6 <__udivmoddi4+0xaa>
 800023a:	428a      	cmp	r2, r1
 800023c:	4694      	mov	ip, r2
 800023e:	d969      	bls.n	8000314 <__udivmoddi4+0xe8>
 8000240:	fab2 f282 	clz	r2, r2
 8000244:	b152      	cbz	r2, 800025c <__udivmoddi4+0x30>
 8000246:	fa01 f302 	lsl.w	r3, r1, r2
 800024a:	f1c2 0120 	rsb	r1, r2, #32
 800024e:	fa20 f101 	lsr.w	r1, r0, r1
 8000252:	fa0c fc02 	lsl.w	ip, ip, r2
 8000256:	ea41 0e03 	orr.w	lr, r1, r3
 800025a:	4094      	lsls	r4, r2
 800025c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000260:	0c21      	lsrs	r1, r4, #16
 8000262:	fbbe f6f8 	udiv	r6, lr, r8
 8000266:	fa1f f78c 	uxth.w	r7, ip
 800026a:	fb08 e316 	mls	r3, r8, r6, lr
 800026e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000272:	fb06 f107 	mul.w	r1, r6, r7
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000282:	f080 811f 	bcs.w	80004c4 <__udivmoddi4+0x298>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 811c 	bls.w	80004c4 <__udivmoddi4+0x298>
 800028c:	3e02      	subs	r6, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a5b      	subs	r3, r3, r1
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb3 f0f8 	udiv	r0, r3, r8
 8000298:	fb08 3310 	mls	r3, r8, r0, r3
 800029c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a0:	fb00 f707 	mul.w	r7, r0, r7
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	d90a      	bls.n	80002be <__udivmoddi4+0x92>
 80002a8:	eb1c 0404 	adds.w	r4, ip, r4
 80002ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b0:	f080 810a 	bcs.w	80004c8 <__udivmoddi4+0x29c>
 80002b4:	42a7      	cmp	r7, r4
 80002b6:	f240 8107 	bls.w	80004c8 <__udivmoddi4+0x29c>
 80002ba:	4464      	add	r4, ip
 80002bc:	3802      	subs	r0, #2
 80002be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c2:	1be4      	subs	r4, r4, r7
 80002c4:	2600      	movs	r6, #0
 80002c6:	b11d      	cbz	r5, 80002d0 <__udivmoddi4+0xa4>
 80002c8:	40d4      	lsrs	r4, r2
 80002ca:	2300      	movs	r3, #0
 80002cc:	e9c5 4300 	strd	r4, r3, [r5]
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0xc2>
 80002da:	2d00      	cmp	r5, #0
 80002dc:	f000 80ef 	beq.w	80004be <__udivmoddi4+0x292>
 80002e0:	2600      	movs	r6, #0
 80002e2:	e9c5 0100 	strd	r0, r1, [r5]
 80002e6:	4630      	mov	r0, r6
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	fab3 f683 	clz	r6, r3
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d14a      	bne.n	800038c <__udivmoddi4+0x160>
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xd4>
 80002fa:	4282      	cmp	r2, r0
 80002fc:	f200 80f9 	bhi.w	80004f2 <__udivmoddi4+0x2c6>
 8000300:	1a84      	subs	r4, r0, r2
 8000302:	eb61 0303 	sbc.w	r3, r1, r3
 8000306:	2001      	movs	r0, #1
 8000308:	469e      	mov	lr, r3
 800030a:	2d00      	cmp	r5, #0
 800030c:	d0e0      	beq.n	80002d0 <__udivmoddi4+0xa4>
 800030e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000312:	e7dd      	b.n	80002d0 <__udivmoddi4+0xa4>
 8000314:	b902      	cbnz	r2, 8000318 <__udivmoddi4+0xec>
 8000316:	deff      	udf	#255	; 0xff
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	2a00      	cmp	r2, #0
 800031e:	f040 8092 	bne.w	8000446 <__udivmoddi4+0x21a>
 8000322:	eba1 010c 	sub.w	r1, r1, ip
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2601      	movs	r6, #1
 8000330:	0c20      	lsrs	r0, r4, #16
 8000332:	fbb1 f3f7 	udiv	r3, r1, r7
 8000336:	fb07 1113 	mls	r1, r7, r3, r1
 800033a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800033e:	fb0e f003 	mul.w	r0, lr, r3
 8000342:	4288      	cmp	r0, r1
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x12c>
 8000346:	eb1c 0101 	adds.w	r1, ip, r1
 800034a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x12a>
 8000350:	4288      	cmp	r0, r1
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2c0>
 8000356:	4643      	mov	r3, r8
 8000358:	1a09      	subs	r1, r1, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000360:	fb07 1110 	mls	r1, r7, r0, r1
 8000364:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x156>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x154>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2ca>
 8000380:	4608      	mov	r0, r1
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800038a:	e79c      	b.n	80002c6 <__udivmoddi4+0x9a>
 800038c:	f1c6 0720 	rsb	r7, r6, #32
 8000390:	40b3      	lsls	r3, r6
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa20 f407 	lsr.w	r4, r0, r7
 800039e:	fa01 f306 	lsl.w	r3, r1, r6
 80003a2:	431c      	orrs	r4, r3
 80003a4:	40f9      	lsrs	r1, r7
 80003a6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003aa:	fa00 f306 	lsl.w	r3, r0, r6
 80003ae:	fbb1 f8f9 	udiv	r8, r1, r9
 80003b2:	0c20      	lsrs	r0, r4, #16
 80003b4:	fa1f fe8c 	uxth.w	lr, ip
 80003b8:	fb09 1118 	mls	r1, r9, r8, r1
 80003bc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c0:	fb08 f00e 	mul.w	r0, r8, lr
 80003c4:	4288      	cmp	r0, r1
 80003c6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b8>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2bc>
 80003d8:	4288      	cmp	r0, r1
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2bc>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4461      	add	r1, ip
 80003e4:	1a09      	subs	r1, r1, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003ec:	fb09 1110 	mls	r1, r9, r0, r1
 80003f0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003f8:	458e      	cmp	lr, r1
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1e2>
 80003fc:	eb1c 0101 	adds.w	r1, ip, r1
 8000400:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2b4>
 8000406:	458e      	cmp	lr, r1
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2b4>
 800040a:	3802      	subs	r0, #2
 800040c:	4461      	add	r1, ip
 800040e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000412:	fba0 9402 	umull	r9, r4, r0, r2
 8000416:	eba1 010e 	sub.w	r1, r1, lr
 800041a:	42a1      	cmp	r1, r4
 800041c:	46c8      	mov	r8, r9
 800041e:	46a6      	mov	lr, r4
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x2a4>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x2a0>
 8000424:	b15d      	cbz	r5, 800043e <__udivmoddi4+0x212>
 8000426:	ebb3 0208 	subs.w	r2, r3, r8
 800042a:	eb61 010e 	sbc.w	r1, r1, lr
 800042e:	fa01 f707 	lsl.w	r7, r1, r7
 8000432:	fa22 f306 	lsr.w	r3, r2, r6
 8000436:	40f1      	lsrs	r1, r6
 8000438:	431f      	orrs	r7, r3
 800043a:	e9c5 7100 	strd	r7, r1, [r5]
 800043e:	2600      	movs	r6, #0
 8000440:	4631      	mov	r1, r6
 8000442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000446:	f1c2 0320 	rsb	r3, r2, #32
 800044a:	40d8      	lsrs	r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa21 f303 	lsr.w	r3, r1, r3
 8000454:	4091      	lsls	r1, r2
 8000456:	4301      	orrs	r1, r0
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb3 f0f7 	udiv	r0, r3, r7
 8000464:	fb07 3610 	mls	r6, r7, r0, r3
 8000468:	0c0b      	lsrs	r3, r1, #16
 800046a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800046e:	fb00 f60e 	mul.w	r6, r0, lr
 8000472:	429e      	cmp	r6, r3
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x260>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b8>
 8000484:	429e      	cmp	r6, r3
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b8>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1b9b      	subs	r3, r3, r6
 800048e:	b289      	uxth	r1, r1
 8000490:	fbb3 f6f7 	udiv	r6, r3, r7
 8000494:	fb07 3316 	mls	r3, r7, r6, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb06 f30e 	mul.w	r3, r6, lr
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x28a>
 80004a4:	eb1c 0101 	adds.w	r1, ip, r1
 80004a8:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2b0>
 80004b2:	3e02      	subs	r6, #2
 80004b4:	4461      	add	r1, ip
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0x104>
 80004be:	462e      	mov	r6, r5
 80004c0:	4628      	mov	r0, r5
 80004c2:	e705      	b.n	80002d0 <__udivmoddi4+0xa4>
 80004c4:	4606      	mov	r6, r0
 80004c6:	e6e3      	b.n	8000290 <__udivmoddi4+0x64>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6f8      	b.n	80002be <__udivmoddi4+0x92>
 80004cc:	454b      	cmp	r3, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f8>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004d8:	3801      	subs	r0, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f8>
 80004dc:	4646      	mov	r6, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x28a>
 80004e0:	4620      	mov	r0, r4
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1e2>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x260>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b8>
 80004ec:	3b02      	subs	r3, #2
 80004ee:	4461      	add	r1, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x12c>
 80004f2:	4630      	mov	r0, r6
 80004f4:	e709      	b.n	800030a <__udivmoddi4+0xde>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x156>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <state_update>:
 *  Created on: Mar 25, 2023
 *      Author: eric
 */
#include "central_control.h"

void state_update() {
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0

	// All the buttons should be rising-edge triggered


	// read reset button, and set reset bit to 1 only if reset button is pressed
	if (reset) {
 8000506:	4b6b      	ldr	r3, [pc, #428]	; (80006b4 <state_update+0x1b4>)
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	2b00      	cmp	r3, #0
 800050c:	d01e      	beq.n	800054c <state_update+0x4c>
		on_off = 0;
 800050e:	4b6a      	ldr	r3, [pc, #424]	; (80006b8 <state_update+0x1b8>)
 8000510:	2200      	movs	r2, #0
 8000512:	701a      	strb	r2, [r3, #0]
		ball_locked = 0;
 8000514:	4b69      	ldr	r3, [pc, #420]	; (80006bc <state_update+0x1bc>)
 8000516:	2200      	movs	r2, #0
 8000518:	701a      	strb	r2, [r3, #0]
		ball_not_found = 0;
 800051a:	4b69      	ldr	r3, [pc, #420]	; (80006c0 <state_update+0x1c0>)
 800051c:	2200      	movs	r2, #0
 800051e:	701a      	strb	r2, [r3, #0]
		ball_count = 0;
 8000520:	4b68      	ldr	r3, [pc, #416]	; (80006c4 <state_update+0x1c4>)
 8000522:	2200      	movs	r2, #0
 8000524:	701a      	strb	r2, [r3, #0]
		ball_collected = 0;
 8000526:	4b68      	ldr	r3, [pc, #416]	; (80006c8 <state_update+0x1c8>)
 8000528:	2200      	movs	r2, #0
 800052a:	701a      	strb	r2, [r3, #0]
		station_arrived = 0;
 800052c:	4b67      	ldr	r3, [pc, #412]	; (80006cc <state_update+0x1cc>)
 800052e:	2200      	movs	r2, #0
 8000530:	701a      	strb	r2, [r3, #0]
		avoid_finished = 0;
 8000532:	4b67      	ldr	r3, [pc, #412]	; (80006d0 <state_update+0x1d0>)
 8000534:	2200      	movs	r2, #0
 8000536:	701a      	strb	r2, [r3, #0]
		reset = 0;
 8000538:	4b5e      	ldr	r3, [pc, #376]	; (80006b4 <state_update+0x1b4>)
 800053a:	2200      	movs	r2, #0
 800053c:	701a      	strb	r2, [r3, #0]
		state = INIT;
 800053e:	4b65      	ldr	r3, [pc, #404]	; (80006d4 <state_update+0x1d4>)
 8000540:	2200      	movs	r2, #0
 8000542:	701a      	strb	r2, [r3, #0]
		prev_state = state;
 8000544:	4b63      	ldr	r3, [pc, #396]	; (80006d4 <state_update+0x1d4>)
 8000546:	781a      	ldrb	r2, [r3, #0]
 8000548:	4b63      	ldr	r3, [pc, #396]	; (80006d8 <state_update+0x1d8>)
 800054a:	701a      	strb	r2, [r3, #0]
	} else {
		// reading peripheral input, and clear register immediately
	}

	// Testing arg begin
	state = COLLECT;
 800054c:	4b61      	ldr	r3, [pc, #388]	; (80006d4 <state_update+0x1d4>)
 800054e:	2202      	movs	r2, #2
 8000550:	701a      	strb	r2, [r3, #0]

	// Testing arg end

	// disable interrupt ultrasonic, ir
	HAL_NVIC_DisableIRQ(TIM3_IRQn);
 8000552:	201d      	movs	r0, #29
 8000554:	f003 fb83 	bl	8003c5e <HAL_NVIC_DisableIRQ>

	enum State next_state = state;
 8000558:	4b5e      	ldr	r3, [pc, #376]	; (80006d4 <state_update+0x1d4>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	71fb      	strb	r3, [r7, #7]

	switch (state) {
 800055e:	4b5d      	ldr	r3, [pc, #372]	; (80006d4 <state_update+0x1d4>)
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	2b04      	cmp	r3, #4
 8000564:	f200 808f 	bhi.w	8000686 <state_update+0x186>
 8000568:	a201      	add	r2, pc, #4	; (adr r2, 8000570 <state_update+0x70>)
 800056a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800056e:	bf00      	nop
 8000570:	08000585 	.word	0x08000585
 8000574:	08000599 	.word	0x08000599
 8000578:	080005d5 	.word	0x080005d5
 800057c:	08000611 	.word	0x08000611
 8000580:	08000639 	.word	0x08000639
	case INIT:
		if (on_off == 1) {
 8000584:	4b4c      	ldr	r3, [pc, #304]	; (80006b8 <state_update+0x1b8>)
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	2b01      	cmp	r3, #1
 800058a:	d173      	bne.n	8000674 <state_update+0x174>
			on_off = 0;
 800058c:	4b4a      	ldr	r3, [pc, #296]	; (80006b8 <state_update+0x1b8>)
 800058e:	2200      	movs	r2, #0
 8000590:	701a      	strb	r2, [r3, #0]
			next_state = SEARCH;
 8000592:	2301      	movs	r3, #1
 8000594:	71fb      	strb	r3, [r7, #7]
		}
		break;
 8000596:	e06d      	b.n	8000674 <state_update+0x174>
	case SEARCH:
		if (on_off) {
 8000598:	4b47      	ldr	r3, [pc, #284]	; (80006b8 <state_update+0x1b8>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	2b00      	cmp	r3, #0
 800059e:	d005      	beq.n	80005ac <state_update+0xac>
			on_off = 0;
 80005a0:	4b45      	ldr	r3, [pc, #276]	; (80006b8 <state_update+0x1b8>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	701a      	strb	r2, [r3, #0]
			next_state = RETURN;
 80005a6:	2303      	movs	r3, #3
 80005a8:	71fb      	strb	r3, [r7, #7]
			next_state = COLLECT;
		} else if (ball_not_found) {
			ball_not_found = 0;
			next_state = RETURN;
		}
		break;
 80005aa:	e065      	b.n	8000678 <state_update+0x178>
		} else if (ball_locked) {
 80005ac:	4b43      	ldr	r3, [pc, #268]	; (80006bc <state_update+0x1bc>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d005      	beq.n	80005c0 <state_update+0xc0>
			ball_locked = 0;
 80005b4:	4b41      	ldr	r3, [pc, #260]	; (80006bc <state_update+0x1bc>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	701a      	strb	r2, [r3, #0]
			next_state = COLLECT;
 80005ba:	2302      	movs	r3, #2
 80005bc:	71fb      	strb	r3, [r7, #7]
		break;
 80005be:	e05b      	b.n	8000678 <state_update+0x178>
		} else if (ball_not_found) {
 80005c0:	4b3f      	ldr	r3, [pc, #252]	; (80006c0 <state_update+0x1c0>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d057      	beq.n	8000678 <state_update+0x178>
			ball_not_found = 0;
 80005c8:	4b3d      	ldr	r3, [pc, #244]	; (80006c0 <state_update+0x1c0>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	701a      	strb	r2, [r3, #0]
			next_state = RETURN;
 80005ce:	2303      	movs	r3, #3
 80005d0:	71fb      	strb	r3, [r7, #7]
		break;
 80005d2:	e051      	b.n	8000678 <state_update+0x178>
	case COLLECT: {
		uint32_t local_count;
		local_count = count;
 80005d4:	4b41      	ldr	r3, [pc, #260]	; (80006dc <state_update+0x1dc>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	603b      	str	r3, [r7, #0]

		if (on_off) {
 80005da:	4b37      	ldr	r3, [pc, #220]	; (80006b8 <state_update+0x1b8>)
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d005      	beq.n	80005ee <state_update+0xee>
			on_off = 0;
 80005e2:	4b35      	ldr	r3, [pc, #212]	; (80006b8 <state_update+0x1b8>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	701a      	strb	r2, [r3, #0]
			next_state = RETURN;
 80005e8:	2303      	movs	r3, #3
 80005ea:	71fb      	strb	r3, [r7, #7]
			} else {
				next_state = RETURN;
			}
			ball_collected = 0; // clear
		}
		break;
 80005ec:	e046      	b.n	800067c <state_update+0x17c>
		} else if (ball_collected) {
 80005ee:	4b36      	ldr	r3, [pc, #216]	; (80006c8 <state_update+0x1c8>)
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d042      	beq.n	800067c <state_update+0x17c>
			if (ball_count < MAXLOAD) {
 80005f6:	4b33      	ldr	r3, [pc, #204]	; (80006c4 <state_update+0x1c4>)
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	2b05      	cmp	r3, #5
 80005fc:	d802      	bhi.n	8000604 <state_update+0x104>
				next_state = SEARCH;
 80005fe:	2301      	movs	r3, #1
 8000600:	71fb      	strb	r3, [r7, #7]
 8000602:	e001      	b.n	8000608 <state_update+0x108>
				next_state = RETURN;
 8000604:	2303      	movs	r3, #3
 8000606:	71fb      	strb	r3, [r7, #7]
			ball_collected = 0; // clear
 8000608:	4b2f      	ldr	r3, [pc, #188]	; (80006c8 <state_update+0x1c8>)
 800060a:	2200      	movs	r2, #0
 800060c:	701a      	strb	r2, [r3, #0]
		break;
 800060e:	e035      	b.n	800067c <state_update+0x17c>
		}
	case RETURN:
		if (on_off) {
 8000610:	4b29      	ldr	r3, [pc, #164]	; (80006b8 <state_update+0x1b8>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d002      	beq.n	800061e <state_update+0x11e>
			on_off = 0;
 8000618:	4b27      	ldr	r3, [pc, #156]	; (80006b8 <state_update+0x1b8>)
 800061a:	2200      	movs	r2, #0
 800061c:	701a      	strb	r2, [r3, #0]
		}

		if (station_arrived) {
 800061e:	4b2b      	ldr	r3, [pc, #172]	; (80006cc <state_update+0x1cc>)
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	2b00      	cmp	r3, #0
 8000624:	d02c      	beq.n	8000680 <state_update+0x180>
			station_arrived = 0;
 8000626:	4b29      	ldr	r3, [pc, #164]	; (80006cc <state_update+0x1cc>)
 8000628:	2200      	movs	r2, #0
 800062a:	701a      	strb	r2, [r3, #0]
			reset = 1;
 800062c:	4b21      	ldr	r3, [pc, #132]	; (80006b4 <state_update+0x1b4>)
 800062e:	2201      	movs	r2, #1
 8000630:	701a      	strb	r2, [r3, #0]
			next_state = INIT;
 8000632:	2300      	movs	r3, #0
 8000634:	71fb      	strb	r3, [r7, #7]
		}

		break;
 8000636:	e023      	b.n	8000680 <state_update+0x180>
	case AVOID_COLLISION:
		// only interrupt can cause the robot to enter this state
		// only after certain conditions are met can the robot leave this state
    
    if (on_off) {
 8000638:	4b1f      	ldr	r3, [pc, #124]	; (80006b8 <state_update+0x1b8>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d005      	beq.n	800064c <state_update+0x14c>
			on_off = 0;
 8000640:	4b1d      	ldr	r3, [pc, #116]	; (80006b8 <state_update+0x1b8>)
 8000642:	2200      	movs	r2, #0
 8000644:	701a      	strb	r2, [r3, #0]
			prev_state = RETURN;
 8000646:	4b24      	ldr	r3, [pc, #144]	; (80006d8 <state_update+0x1d8>)
 8000648:	2203      	movs	r2, #3
 800064a:	701a      	strb	r2, [r3, #0]
		}

		if (avoid_finished) {
 800064c:	4b20      	ldr	r3, [pc, #128]	; (80006d0 <state_update+0x1d0>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d017      	beq.n	8000684 <state_update+0x184>
			avoid_finished = 0;
 8000654:	4b1e      	ldr	r3, [pc, #120]	; (80006d0 <state_update+0x1d0>)
 8000656:	2200      	movs	r2, #0
 8000658:	701a      	strb	r2, [r3, #0]
			next_state = prev_state;
 800065a:	4b1f      	ldr	r3, [pc, #124]	; (80006d8 <state_update+0x1d8>)
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	71fb      	strb	r3, [r7, #7]
			if (on_off) {
 8000660:	4b15      	ldr	r3, [pc, #84]	; (80006b8 <state_update+0x1b8>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d00d      	beq.n	8000684 <state_update+0x184>
				on_off = 0;
 8000668:	4b13      	ldr	r3, [pc, #76]	; (80006b8 <state_update+0x1b8>)
 800066a:	2200      	movs	r2, #0
 800066c:	701a      	strb	r2, [r3, #0]
				next_state = RETURN;
 800066e:	2303      	movs	r3, #3
 8000670:	71fb      	strb	r3, [r7, #7]
			}
		}
		break;
 8000672:	e007      	b.n	8000684 <state_update+0x184>
		break;
 8000674:	bf00      	nop
 8000676:	e006      	b.n	8000686 <state_update+0x186>
		break;
 8000678:	bf00      	nop
 800067a:	e004      	b.n	8000686 <state_update+0x186>
		break;
 800067c:	bf00      	nop
 800067e:	e002      	b.n	8000686 <state_update+0x186>
		break;
 8000680:	bf00      	nop
 8000682:	e000      	b.n	8000686 <state_update+0x186>
		break;
 8000684:	bf00      	nop
	}

	state = next_state;
 8000686:	4a13      	ldr	r2, [pc, #76]	; (80006d4 <state_update+0x1d4>)
 8000688:	79fb      	ldrb	r3, [r7, #7]
 800068a:	7013      	strb	r3, [r2, #0]
	if (state != AVOID_COLLISION) {
 800068c:	4b11      	ldr	r3, [pc, #68]	; (80006d4 <state_update+0x1d4>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	2b04      	cmp	r3, #4
 8000692:	d003      	beq.n	800069c <state_update+0x19c>
		prev_state = state;
 8000694:	4b0f      	ldr	r3, [pc, #60]	; (80006d4 <state_update+0x1d4>)
 8000696:	781a      	ldrb	r2, [r3, #0]
 8000698:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <state_update+0x1d8>)
 800069a:	701a      	strb	r2, [r3, #0]
	}

	// enable interrupt
	if (state == COLLECT) {
 800069c:	4b0d      	ldr	r3, [pc, #52]	; (80006d4 <state_update+0x1d4>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	2b02      	cmp	r3, #2
 80006a2:	d102      	bne.n	80006aa <state_update+0x1aa>
		HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80006a4:	201d      	movs	r0, #29
 80006a6:	f003 facc 	bl	8003c42 <HAL_NVIC_EnableIRQ>
	}
}
 80006aa:	bf00      	nop
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	20000035 	.word	0x20000035
 80006b8:	2000002e 	.word	0x2000002e
 80006bc:	2000002f 	.word	0x2000002f
 80006c0:	20000030 	.word	0x20000030
 80006c4:	20000031 	.word	0x20000031
 80006c8:	20000032 	.word	0x20000032
 80006cc:	20000033 	.word	0x20000033
 80006d0:	20000034 	.word	0x20000034
 80006d4:	2000002c 	.word	0x2000002c
 80006d8:	2000002d 	.word	0x2000002d
 80006dc:	20000038 	.word	0x20000038

080006e0 <execute>:

void execute() {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0

	rotor_control(1);
 80006e4:	2001      	movs	r0, #1
 80006e6:	f001 f8b7 	bl	8001858 <rotor_control>

	switch (state) {
 80006ea:	4b0c      	ldr	r3, [pc, #48]	; (800071c <execute+0x3c>)
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	2b04      	cmp	r3, #4
 80006f0:	d811      	bhi.n	8000716 <execute+0x36>
 80006f2:	a201      	add	r2, pc, #4	; (adr r2, 80006f8 <execute+0x18>)
 80006f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006f8:	08000715 	.word	0x08000715
 80006fc:	08000715 	.word	0x08000715
 8000700:	0800070d 	.word	0x0800070d
 8000704:	08000715 	.word	0x08000715
 8000708:	08000715 	.word	0x08000715
//		motor_control(mode);
//		ball_locked;
//		ball_not_found;
		break;
	case COLLECT:
		rotor_control(0);
 800070c:	2000      	movs	r0, #0
 800070e:	f001 f8a3 	bl	8001858 <rotor_control>

		break;
 8000712:	e000      	b.n	8000716 <execute+0x36>
		break;
 8000714:	bf00      	nop
	case RETURN:
		break;
	case AVOID_COLLISION:
		break;
	}
}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	2000002c 	.word	0x2000002c

08000720 <delay_loop>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void delay_loop(int time) {
 8000720:	b480      	push	{r7}
 8000722:	b085      	sub	sp, #20
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
	 for(volatile int j = 0; j < time; ++j)
 8000728:	2300      	movs	r3, #0
 800072a:	60fb      	str	r3, [r7, #12]
 800072c:	e00c      	b.n	8000748 <delay_loop+0x28>
	  		  for (volatile int i = 0; i < 380; ++i) asm("");//1ms
 800072e:	2300      	movs	r3, #0
 8000730:	60bb      	str	r3, [r7, #8]
 8000732:	e002      	b.n	800073a <delay_loop+0x1a>
 8000734:	68bb      	ldr	r3, [r7, #8]
 8000736:	3301      	adds	r3, #1
 8000738:	60bb      	str	r3, [r7, #8]
 800073a:	68bb      	ldr	r3, [r7, #8]
 800073c:	f5b3 7fbe 	cmp.w	r3, #380	; 0x17c
 8000740:	dbf8      	blt.n	8000734 <delay_loop+0x14>
	 for(volatile int j = 0; j < time; ++j)
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	3301      	adds	r3, #1
 8000746:	60fb      	str	r3, [r7, #12]
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	687a      	ldr	r2, [r7, #4]
 800074c:	429a      	cmp	r2, r3
 800074e:	dcee      	bgt.n	800072e <delay_loop+0xe>
}
 8000750:	bf00      	nop
 8000752:	bf00      	nop
 8000754:	3714      	adds	r7, #20
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr
	...

08000760 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000764:	f001 ff5f 	bl	8002626 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000768:	f000 f84e 	bl	8000808 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800076c:	f000 f8ae 	bl	80008cc <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000770:	f000 ff9e 	bl	80016b0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000774:	f000 f8de 	bl	8000934 <MX_ADC1_Init>
  MX_CAN1_Init();
 8000778:	f000 f940 	bl	80009fc <MX_CAN1_Init>
  MX_COMP1_Init();
 800077c:	f000 f972 	bl	8000a64 <MX_COMP1_Init>
  MX_COMP2_Init();
 8000780:	f000 f99e 	bl	8000ac0 <MX_COMP2_Init>
  MX_I2C1_SMBUS_Init();
 8000784:	f000 f9c8 	bl	8000b18 <MX_I2C1_SMBUS_Init>
  MX_I2C2_SMBUS_Init();
 8000788:	f000 fa00 	bl	8000b8c <MX_I2C2_SMBUS_Init>
  MX_LPUART1_UART_Init();
 800078c:	f000 fa40 	bl	8000c10 <MX_LPUART1_UART_Init>
  MX_USART2_UART_Init();
 8000790:	f000 fa8c 	bl	8000cac <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000794:	f000 fad8 	bl	8000d48 <MX_USART3_UART_Init>
  MX_SAI1_Init();
 8000798:	f000 fb22 	bl	8000de0 <MX_SAI1_Init>
  MX_SAI2_Init();
 800079c:	f000 fbb8 	bl	8000f10 <MX_SAI2_Init>
  MX_SPI1_Init();
 80007a0:	f000 fc1e 	bl	8000fe0 <MX_SPI1_Init>
  MX_SPI3_Init();
 80007a4:	f000 fc5a 	bl	800105c <MX_SPI3_Init>
  MX_TIM1_Init();
 80007a8:	f000 fc96 	bl	80010d8 <MX_TIM1_Init>
  MX_TIM2_Init();
 80007ac:	f000 fd7c 	bl	80012a8 <MX_TIM2_Init>
  MX_TIM3_Init();
 80007b0:	f000 fdf2 	bl	8001398 <MX_TIM3_Init>
  MX_TIM4_Init();
 80007b4:	f000 fe62 	bl	800147c <MX_TIM4_Init>
  MX_TIM15_Init();
 80007b8:	f000 feee 	bl	8001598 <MX_TIM15_Init>
  MX_USB_OTG_FS_USB_Init();
 80007bc:	f000 ff70 	bl	80016a0 <MX_USB_OTG_FS_USB_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80007c0:	2104      	movs	r1, #4
 80007c2:	480e      	ldr	r0, [pc, #56]	; (80007fc <main+0x9c>)
 80007c4:	f006 ff02 	bl	80075cc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80007c8:	2108      	movs	r1, #8
 80007ca:	480c      	ldr	r0, [pc, #48]	; (80007fc <main+0x9c>)
 80007cc:	f006 fefe 	bl	80075cc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80007d0:	210c      	movs	r1, #12
 80007d2:	480a      	ldr	r0, [pc, #40]	; (80007fc <main+0x9c>)
 80007d4:	f006 fefa 	bl	80075cc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80007d8:	2100      	movs	r1, #0
 80007da:	4809      	ldr	r0, [pc, #36]	; (8000800 <main+0xa0>)
 80007dc:	f006 fef6 	bl	80075cc <HAL_TIM_PWM_Start>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 80007e0:	2104      	movs	r1, #4
 80007e2:	4808      	ldr	r0, [pc, #32]	; (8000804 <main+0xa4>)
 80007e4:	f007 f85a 	bl	800789c <HAL_TIM_IC_Start_IT>


  while (1)
  {
	  state_update();
 80007e8:	f7ff fe8a 	bl	8000500 <state_update>
	  execute();
 80007ec:	f7ff ff78 	bl	80006e0 <execute>
	  delay_loop(500);
 80007f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007f4:	f7ff ff94 	bl	8000720 <delay_loop>
  {
 80007f8:	e7f6      	b.n	80007e8 <main+0x88>
 80007fa:	bf00      	nop
 80007fc:	200006dc 	.word	0x200006dc
 8000800:	20000644 	.word	0x20000644
 8000804:	20000690 	.word	0x20000690

08000808 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b096      	sub	sp, #88	; 0x58
 800080c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800080e:	f107 0314 	add.w	r3, r7, #20
 8000812:	2244      	movs	r2, #68	; 0x44
 8000814:	2100      	movs	r1, #0
 8000816:	4618      	mov	r0, r3
 8000818:	f009 fabc 	bl	8009d94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800081c:	463b      	mov	r3, r7
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]
 8000826:	60da      	str	r2, [r3, #12]
 8000828:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800082a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800082e:	f003 fc0b 	bl	8004048 <HAL_PWREx_ControlVoltageScaling>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000838:	f001 f808 	bl	800184c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800083c:	f003 fbd4 	bl	8003fe8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000840:	4b21      	ldr	r3, [pc, #132]	; (80008c8 <SystemClock_Config+0xc0>)
 8000842:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000846:	4a20      	ldr	r2, [pc, #128]	; (80008c8 <SystemClock_Config+0xc0>)
 8000848:	f023 0318 	bic.w	r3, r3, #24
 800084c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000850:	2314      	movs	r3, #20
 8000852:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000854:	2301      	movs	r3, #1
 8000856:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000858:	2301      	movs	r3, #1
 800085a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800085c:	2300      	movs	r3, #0
 800085e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000860:	2360      	movs	r3, #96	; 0x60
 8000862:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000864:	2302      	movs	r3, #2
 8000866:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000868:	2301      	movs	r3, #1
 800086a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800086c:	2301      	movs	r3, #1
 800086e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000870:	2310      	movs	r3, #16
 8000872:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000874:	2302      	movs	r3, #2
 8000876:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000878:	2302      	movs	r3, #2
 800087a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800087c:	2302      	movs	r3, #2
 800087e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000880:	f107 0314 	add.w	r3, r7, #20
 8000884:	4618      	mov	r0, r3
 8000886:	f003 fc93 	bl	80041b0 <HAL_RCC_OscConfig>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000890:	f000 ffdc 	bl	800184c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000894:	230f      	movs	r3, #15
 8000896:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000898:	2303      	movs	r3, #3
 800089a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800089c:	2300      	movs	r3, #0
 800089e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008a0:	2300      	movs	r3, #0
 80008a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008a4:	2300      	movs	r3, #0
 80008a6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008a8:	463b      	mov	r3, r7
 80008aa:	2101      	movs	r1, #1
 80008ac:	4618      	mov	r0, r3
 80008ae:	f004 f899 	bl	80049e4 <HAL_RCC_ClockConfig>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80008b8:	f000 ffc8 	bl	800184c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80008bc:	f005 fda2 	bl	8006404 <HAL_RCCEx_EnableMSIPLLMode>
}
 80008c0:	bf00      	nop
 80008c2:	3758      	adds	r7, #88	; 0x58
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	40021000 	.word	0x40021000

080008cc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b0a6      	sub	sp, #152	; 0x98
 80008d0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008d2:	1d3b      	adds	r3, r7, #4
 80008d4:	2294      	movs	r2, #148	; 0x94
 80008d6:	2100      	movs	r1, #0
 80008d8:	4618      	mov	r0, r3
 80008da:	f009 fa5b 	bl	8009d94 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_SAI2
 80008de:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 80008e2:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 80008e4:	2300      	movs	r3, #0
 80008e6:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI1;
 80008e8:	2300      	movs	r3, #0
 80008ea:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80008ec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80008f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80008f4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80008f8:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80008fa:	2301      	movs	r3, #1
 80008fc:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80008fe:	2301      	movs	r3, #1
 8000900:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000902:	2318      	movs	r3, #24
 8000904:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000906:	2302      	movs	r3, #2
 8000908:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800090a:	2302      	movs	r3, #2
 800090c:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800090e:	2302      	movs	r3, #2
 8000910:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_48M2CLK
 8000912:	4b07      	ldr	r3, [pc, #28]	; (8000930 <PeriphCommonClock_Config+0x64>)
 8000914:	623b      	str	r3, [r7, #32]
                              |RCC_PLLSAI1_ADC1CLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000916:	1d3b      	adds	r3, r7, #4
 8000918:	4618      	mov	r0, r3
 800091a:	f004 fb21 	bl	8004f60 <HAL_RCCEx_PeriphCLKConfig>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8000924:	f000 ff92 	bl	800184c <Error_Handler>
  }
}
 8000928:	bf00      	nop
 800092a:	3798      	adds	r7, #152	; 0x98
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	01110000 	.word	0x01110000

08000934 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b086      	sub	sp, #24
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800093a:	463b      	mov	r3, r7
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	605a      	str	r2, [r3, #4]
 8000942:	609a      	str	r2, [r3, #8]
 8000944:	60da      	str	r2, [r3, #12]
 8000946:	611a      	str	r2, [r3, #16]
 8000948:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800094a:	4b29      	ldr	r3, [pc, #164]	; (80009f0 <MX_ADC1_Init+0xbc>)
 800094c:	4a29      	ldr	r2, [pc, #164]	; (80009f4 <MX_ADC1_Init+0xc0>)
 800094e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000950:	4b27      	ldr	r3, [pc, #156]	; (80009f0 <MX_ADC1_Init+0xbc>)
 8000952:	2200      	movs	r2, #0
 8000954:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000956:	4b26      	ldr	r3, [pc, #152]	; (80009f0 <MX_ADC1_Init+0xbc>)
 8000958:	2200      	movs	r2, #0
 800095a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800095c:	4b24      	ldr	r3, [pc, #144]	; (80009f0 <MX_ADC1_Init+0xbc>)
 800095e:	2200      	movs	r2, #0
 8000960:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000962:	4b23      	ldr	r3, [pc, #140]	; (80009f0 <MX_ADC1_Init+0xbc>)
 8000964:	2200      	movs	r2, #0
 8000966:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000968:	4b21      	ldr	r3, [pc, #132]	; (80009f0 <MX_ADC1_Init+0xbc>)
 800096a:	2204      	movs	r2, #4
 800096c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800096e:	4b20      	ldr	r3, [pc, #128]	; (80009f0 <MX_ADC1_Init+0xbc>)
 8000970:	2200      	movs	r2, #0
 8000972:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000974:	4b1e      	ldr	r3, [pc, #120]	; (80009f0 <MX_ADC1_Init+0xbc>)
 8000976:	2200      	movs	r2, #0
 8000978:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800097a:	4b1d      	ldr	r3, [pc, #116]	; (80009f0 <MX_ADC1_Init+0xbc>)
 800097c:	2201      	movs	r2, #1
 800097e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000980:	4b1b      	ldr	r3, [pc, #108]	; (80009f0 <MX_ADC1_Init+0xbc>)
 8000982:	2200      	movs	r2, #0
 8000984:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000988:	4b19      	ldr	r3, [pc, #100]	; (80009f0 <MX_ADC1_Init+0xbc>)
 800098a:	2200      	movs	r2, #0
 800098c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800098e:	4b18      	ldr	r3, [pc, #96]	; (80009f0 <MX_ADC1_Init+0xbc>)
 8000990:	2200      	movs	r2, #0
 8000992:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000994:	4b16      	ldr	r3, [pc, #88]	; (80009f0 <MX_ADC1_Init+0xbc>)
 8000996:	2200      	movs	r2, #0
 8000998:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800099c:	4b14      	ldr	r3, [pc, #80]	; (80009f0 <MX_ADC1_Init+0xbc>)
 800099e:	2200      	movs	r2, #0
 80009a0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80009a2:	4b13      	ldr	r3, [pc, #76]	; (80009f0 <MX_ADC1_Init+0xbc>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009aa:	4811      	ldr	r0, [pc, #68]	; (80009f0 <MX_ADC1_Init+0xbc>)
 80009ac:	f002 f850 	bl	8002a50 <HAL_ADC_Init>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80009b6:	f000 ff49 	bl	800184c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80009ba:	4b0f      	ldr	r3, [pc, #60]	; (80009f8 <MX_ADC1_Init+0xc4>)
 80009bc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009be:	2306      	movs	r3, #6
 80009c0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80009c2:	2300      	movs	r3, #0
 80009c4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009c6:	237f      	movs	r3, #127	; 0x7f
 80009c8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009ca:	2304      	movs	r3, #4
 80009cc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80009ce:	2300      	movs	r3, #0
 80009d0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009d2:	463b      	mov	r3, r7
 80009d4:	4619      	mov	r1, r3
 80009d6:	4806      	ldr	r0, [pc, #24]	; (80009f0 <MX_ADC1_Init+0xbc>)
 80009d8:	f002 f986 	bl	8002ce8 <HAL_ADC_ConfigChannel>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80009e2:	f000 ff33 	bl	800184c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009e6:	bf00      	nop
 80009e8:	3718      	adds	r7, #24
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	2000003c 	.word	0x2000003c
 80009f4:	50040000 	.word	0x50040000
 80009f8:	04300002 	.word	0x04300002

080009fc <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000a00:	4b16      	ldr	r3, [pc, #88]	; (8000a5c <MX_CAN1_Init+0x60>)
 8000a02:	4a17      	ldr	r2, [pc, #92]	; (8000a60 <MX_CAN1_Init+0x64>)
 8000a04:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000a06:	4b15      	ldr	r3, [pc, #84]	; (8000a5c <MX_CAN1_Init+0x60>)
 8000a08:	2210      	movs	r2, #16
 8000a0a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000a0c:	4b13      	ldr	r3, [pc, #76]	; (8000a5c <MX_CAN1_Init+0x60>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a12:	4b12      	ldr	r3, [pc, #72]	; (8000a5c <MX_CAN1_Init+0x60>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000a18:	4b10      	ldr	r3, [pc, #64]	; (8000a5c <MX_CAN1_Init+0x60>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000a1e:	4b0f      	ldr	r3, [pc, #60]	; (8000a5c <MX_CAN1_Init+0x60>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000a24:	4b0d      	ldr	r3, [pc, #52]	; (8000a5c <MX_CAN1_Init+0x60>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000a2a:	4b0c      	ldr	r3, [pc, #48]	; (8000a5c <MX_CAN1_Init+0x60>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000a30:	4b0a      	ldr	r3, [pc, #40]	; (8000a5c <MX_CAN1_Init+0x60>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000a36:	4b09      	ldr	r3, [pc, #36]	; (8000a5c <MX_CAN1_Init+0x60>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000a3c:	4b07      	ldr	r3, [pc, #28]	; (8000a5c <MX_CAN1_Init+0x60>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000a42:	4b06      	ldr	r3, [pc, #24]	; (8000a5c <MX_CAN1_Init+0x60>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000a48:	4804      	ldr	r0, [pc, #16]	; (8000a5c <MX_CAN1_Init+0x60>)
 8000a4a:	f002 fd49 	bl	80034e0 <HAL_CAN_Init>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000a54:	f000 fefa 	bl	800184c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000a58:	bf00      	nop
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	200000a4 	.word	0x200000a4
 8000a60:	40006400 	.word	0x40006400

08000a64 <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 8000a68:	4b12      	ldr	r3, [pc, #72]	; (8000ab4 <MX_COMP1_Init+0x50>)
 8000a6a:	4a13      	ldr	r2, [pc, #76]	; (8000ab8 <MX_COMP1_Init+0x54>)
 8000a6c:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InvertingInput = COMP_INPUT_MINUS_VREFINT;
 8000a6e:	4b11      	ldr	r3, [pc, #68]	; (8000ab4 <MX_COMP1_Init+0x50>)
 8000a70:	4a12      	ldr	r2, [pc, #72]	; (8000abc <MX_COMP1_Init+0x58>)
 8000a72:	611a      	str	r2, [r3, #16]
  hcomp1.Init.NonInvertingInput = COMP_INPUT_PLUS_IO2;
 8000a74:	4b0f      	ldr	r3, [pc, #60]	; (8000ab4 <MX_COMP1_Init+0x50>)
 8000a76:	2280      	movs	r2, #128	; 0x80
 8000a78:	60da      	str	r2, [r3, #12]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000a7a:	4b0e      	ldr	r3, [pc, #56]	; (8000ab4 <MX_COMP1_Init+0x50>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	619a      	str	r2, [r3, #24]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000a80:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <MX_COMP1_Init+0x50>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	615a      	str	r2, [r3, #20]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8000a86:	4b0b      	ldr	r3, [pc, #44]	; (8000ab4 <MX_COMP1_Init+0x50>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	61da      	str	r2, [r3, #28]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8000a8c:	4b09      	ldr	r3, [pc, #36]	; (8000ab4 <MX_COMP1_Init+0x50>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	609a      	str	r2, [r3, #8]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000a92:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <MX_COMP1_Init+0x50>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000a98:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <MX_COMP1_Init+0x50>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8000a9e:	4805      	ldr	r0, [pc, #20]	; (8000ab4 <MX_COMP1_Init+0x50>)
 8000aa0:	f002 fec2 	bl	8003828 <HAL_COMP_Init>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_COMP1_Init+0x4a>
  {
    Error_Handler();
 8000aaa:	f000 fecf 	bl	800184c <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 8000aae:	bf00      	nop
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	200000cc 	.word	0x200000cc
 8000ab8:	40010200 	.word	0x40010200
 8000abc:	00800030 	.word	0x00800030

08000ac0 <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 8000ac4:	4b12      	ldr	r3, [pc, #72]	; (8000b10 <MX_COMP2_Init+0x50>)
 8000ac6:	4a13      	ldr	r2, [pc, #76]	; (8000b14 <MX_COMP2_Init+0x54>)
 8000ac8:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INPUT_MINUS_IO2;
 8000aca:	4b11      	ldr	r3, [pc, #68]	; (8000b10 <MX_COMP2_Init+0x50>)
 8000acc:	2270      	movs	r2, #112	; 0x70
 8000ace:	611a      	str	r2, [r3, #16]
  hcomp2.Init.NonInvertingInput = COMP_INPUT_PLUS_IO2;
 8000ad0:	4b0f      	ldr	r3, [pc, #60]	; (8000b10 <MX_COMP2_Init+0x50>)
 8000ad2:	2280      	movs	r2, #128	; 0x80
 8000ad4:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000ad6:	4b0e      	ldr	r3, [pc, #56]	; (8000b10 <MX_COMP2_Init+0x50>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	619a      	str	r2, [r3, #24]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000adc:	4b0c      	ldr	r3, [pc, #48]	; (8000b10 <MX_COMP2_Init+0x50>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	615a      	str	r2, [r3, #20]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8000ae2:	4b0b      	ldr	r3, [pc, #44]	; (8000b10 <MX_COMP2_Init+0x50>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	61da      	str	r2, [r3, #28]
  hcomp2.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8000ae8:	4b09      	ldr	r3, [pc, #36]	; (8000b10 <MX_COMP2_Init+0x50>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	609a      	str	r2, [r3, #8]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000aee:	4b08      	ldr	r3, [pc, #32]	; (8000b10 <MX_COMP2_Init+0x50>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	605a      	str	r2, [r3, #4]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000af4:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <MX_COMP2_Init+0x50>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8000afa:	4805      	ldr	r0, [pc, #20]	; (8000b10 <MX_COMP2_Init+0x50>)
 8000afc:	f002 fe94 	bl	8003828 <HAL_COMP_Init>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <MX_COMP2_Init+0x4a>
  {
    Error_Handler();
 8000b06:	f000 fea1 	bl	800184c <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	200000f8 	.word	0x200000f8
 8000b14:	40010204 	.word	0x40010204

08000b18 <MX_I2C1_SMBUS_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_SMBUS_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hsmbus1.Instance = I2C1;
 8000b1c:	4b18      	ldr	r3, [pc, #96]	; (8000b80 <MX_I2C1_SMBUS_Init+0x68>)
 8000b1e:	4a19      	ldr	r2, [pc, #100]	; (8000b84 <MX_I2C1_SMBUS_Init+0x6c>)
 8000b20:	601a      	str	r2, [r3, #0]
  hsmbus1.Init.Timing = 0x00707CBB;
 8000b22:	4b17      	ldr	r3, [pc, #92]	; (8000b80 <MX_I2C1_SMBUS_Init+0x68>)
 8000b24:	4a18      	ldr	r2, [pc, #96]	; (8000b88 <MX_I2C1_SMBUS_Init+0x70>)
 8000b26:	605a      	str	r2, [r3, #4]
  hsmbus1.Init.AnalogFilter = SMBUS_ANALOGFILTER_ENABLE;
 8000b28:	4b15      	ldr	r3, [pc, #84]	; (8000b80 <MX_I2C1_SMBUS_Init+0x68>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	609a      	str	r2, [r3, #8]
  hsmbus1.Init.OwnAddress1 = 2;
 8000b2e:	4b14      	ldr	r3, [pc, #80]	; (8000b80 <MX_I2C1_SMBUS_Init+0x68>)
 8000b30:	2202      	movs	r2, #2
 8000b32:	60da      	str	r2, [r3, #12]
  hsmbus1.Init.AddressingMode = SMBUS_ADDRESSINGMODE_7BIT;
 8000b34:	4b12      	ldr	r3, [pc, #72]	; (8000b80 <MX_I2C1_SMBUS_Init+0x68>)
 8000b36:	2201      	movs	r2, #1
 8000b38:	611a      	str	r2, [r3, #16]
  hsmbus1.Init.DualAddressMode = SMBUS_DUALADDRESS_DISABLE;
 8000b3a:	4b11      	ldr	r3, [pc, #68]	; (8000b80 <MX_I2C1_SMBUS_Init+0x68>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	615a      	str	r2, [r3, #20]
  hsmbus1.Init.OwnAddress2 = 0;
 8000b40:	4b0f      	ldr	r3, [pc, #60]	; (8000b80 <MX_I2C1_SMBUS_Init+0x68>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	619a      	str	r2, [r3, #24]
  hsmbus1.Init.OwnAddress2Masks = SMBUS_OA2_NOMASK;
 8000b46:	4b0e      	ldr	r3, [pc, #56]	; (8000b80 <MX_I2C1_SMBUS_Init+0x68>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	61da      	str	r2, [r3, #28]
  hsmbus1.Init.GeneralCallMode = SMBUS_GENERALCALL_DISABLE;
 8000b4c:	4b0c      	ldr	r3, [pc, #48]	; (8000b80 <MX_I2C1_SMBUS_Init+0x68>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	621a      	str	r2, [r3, #32]
  hsmbus1.Init.NoStretchMode = SMBUS_NOSTRETCH_DISABLE;
 8000b52:	4b0b      	ldr	r3, [pc, #44]	; (8000b80 <MX_I2C1_SMBUS_Init+0x68>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	625a      	str	r2, [r3, #36]	; 0x24
  hsmbus1.Init.PacketErrorCheckMode = SMBUS_PEC_DISABLE;
 8000b58:	4b09      	ldr	r3, [pc, #36]	; (8000b80 <MX_I2C1_SMBUS_Init+0x68>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	629a      	str	r2, [r3, #40]	; 0x28
  hsmbus1.Init.PeripheralMode = SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE;
 8000b5e:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <MX_I2C1_SMBUS_Init+0x68>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	62da      	str	r2, [r3, #44]	; 0x2c
  hsmbus1.Init.SMBusTimeout = 0x00008186;
 8000b64:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <MX_I2C1_SMBUS_Init+0x68>)
 8000b66:	f248 1286 	movw	r2, #33158	; 0x8186
 8000b6a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_SMBUS_Init(&hsmbus1) != HAL_OK)
 8000b6c:	4804      	ldr	r0, [pc, #16]	; (8000b80 <MX_I2C1_SMBUS_Init+0x68>)
 8000b6e:	f006 fad1 	bl	8007114 <HAL_SMBUS_Init>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_I2C1_SMBUS_Init+0x64>
  {
    Error_Handler();
 8000b78:	f000 fe68 	bl	800184c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b7c:	bf00      	nop
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	20000124 	.word	0x20000124
 8000b84:	40005400 	.word	0x40005400
 8000b88:	00707cbb 	.word	0x00707cbb

08000b8c <MX_I2C2_SMBUS_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_SMBUS_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hsmbus2.Instance = I2C2;
 8000b90:	4b1c      	ldr	r3, [pc, #112]	; (8000c04 <MX_I2C2_SMBUS_Init+0x78>)
 8000b92:	4a1d      	ldr	r2, [pc, #116]	; (8000c08 <MX_I2C2_SMBUS_Init+0x7c>)
 8000b94:	601a      	str	r2, [r3, #0]
  hsmbus2.Init.Timing = 0x00707CBB;
 8000b96:	4b1b      	ldr	r3, [pc, #108]	; (8000c04 <MX_I2C2_SMBUS_Init+0x78>)
 8000b98:	4a1c      	ldr	r2, [pc, #112]	; (8000c0c <MX_I2C2_SMBUS_Init+0x80>)
 8000b9a:	605a      	str	r2, [r3, #4]
  hsmbus2.Init.AnalogFilter = SMBUS_ANALOGFILTER_ENABLE;
 8000b9c:	4b19      	ldr	r3, [pc, #100]	; (8000c04 <MX_I2C2_SMBUS_Init+0x78>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	609a      	str	r2, [r3, #8]
  hsmbus2.Init.OwnAddress1 = 2;
 8000ba2:	4b18      	ldr	r3, [pc, #96]	; (8000c04 <MX_I2C2_SMBUS_Init+0x78>)
 8000ba4:	2202      	movs	r2, #2
 8000ba6:	60da      	str	r2, [r3, #12]
  hsmbus2.Init.AddressingMode = SMBUS_ADDRESSINGMODE_7BIT;
 8000ba8:	4b16      	ldr	r3, [pc, #88]	; (8000c04 <MX_I2C2_SMBUS_Init+0x78>)
 8000baa:	2201      	movs	r2, #1
 8000bac:	611a      	str	r2, [r3, #16]
  hsmbus2.Init.DualAddressMode = SMBUS_DUALADDRESS_DISABLE;
 8000bae:	4b15      	ldr	r3, [pc, #84]	; (8000c04 <MX_I2C2_SMBUS_Init+0x78>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	615a      	str	r2, [r3, #20]
  hsmbus2.Init.OwnAddress2 = 0;
 8000bb4:	4b13      	ldr	r3, [pc, #76]	; (8000c04 <MX_I2C2_SMBUS_Init+0x78>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	619a      	str	r2, [r3, #24]
  hsmbus2.Init.OwnAddress2Masks = SMBUS_OA2_NOMASK;
 8000bba:	4b12      	ldr	r3, [pc, #72]	; (8000c04 <MX_I2C2_SMBUS_Init+0x78>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	61da      	str	r2, [r3, #28]
  hsmbus2.Init.GeneralCallMode = SMBUS_GENERALCALL_DISABLE;
 8000bc0:	4b10      	ldr	r3, [pc, #64]	; (8000c04 <MX_I2C2_SMBUS_Init+0x78>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	621a      	str	r2, [r3, #32]
  hsmbus2.Init.NoStretchMode = SMBUS_NOSTRETCH_DISABLE;
 8000bc6:	4b0f      	ldr	r3, [pc, #60]	; (8000c04 <MX_I2C2_SMBUS_Init+0x78>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	625a      	str	r2, [r3, #36]	; 0x24
  hsmbus2.Init.PacketErrorCheckMode = SMBUS_PEC_DISABLE;
 8000bcc:	4b0d      	ldr	r3, [pc, #52]	; (8000c04 <MX_I2C2_SMBUS_Init+0x78>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	629a      	str	r2, [r3, #40]	; 0x28
  hsmbus2.Init.PeripheralMode = SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE;
 8000bd2:	4b0c      	ldr	r3, [pc, #48]	; (8000c04 <MX_I2C2_SMBUS_Init+0x78>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	62da      	str	r2, [r3, #44]	; 0x2c
  hsmbus2.Init.SMBusTimeout = 0x00008186;
 8000bd8:	4b0a      	ldr	r3, [pc, #40]	; (8000c04 <MX_I2C2_SMBUS_Init+0x78>)
 8000bda:	f248 1286 	movw	r2, #33158	; 0x8186
 8000bde:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_SMBUS_Init(&hsmbus2) != HAL_OK)
 8000be0:	4808      	ldr	r0, [pc, #32]	; (8000c04 <MX_I2C2_SMBUS_Init+0x78>)
 8000be2:	f006 fa97 	bl	8007114 <HAL_SMBUS_Init>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_I2C2_SMBUS_Init+0x64>
  {
    Error_Handler();
 8000bec:	f000 fe2e 	bl	800184c <Error_Handler>
  }

  /** configuration Alert Mode
  */
  if (HAL_SMBUS_EnableAlert_IT(&hsmbus2) != HAL_OK)
 8000bf0:	4804      	ldr	r0, [pc, #16]	; (8000c04 <MX_I2C2_SMBUS_Init+0x78>)
 8000bf2:	f006 fb47 	bl	8007284 <HAL_SMBUS_EnableAlert_IT>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <MX_I2C2_SMBUS_Init+0x74>
  {
    Error_Handler();
 8000bfc:	f000 fe26 	bl	800184c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000c00:	bf00      	nop
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	20000174 	.word	0x20000174
 8000c08:	40005800 	.word	0x40005800
 8000c0c:	00707cbb 	.word	0x00707cbb

08000c10 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000c14:	4b22      	ldr	r3, [pc, #136]	; (8000ca0 <MX_LPUART1_UART_Init+0x90>)
 8000c16:	4a23      	ldr	r2, [pc, #140]	; (8000ca4 <MX_LPUART1_UART_Init+0x94>)
 8000c18:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000c1a:	4b21      	ldr	r3, [pc, #132]	; (8000ca0 <MX_LPUART1_UART_Init+0x90>)
 8000c1c:	4a22      	ldr	r2, [pc, #136]	; (8000ca8 <MX_LPUART1_UART_Init+0x98>)
 8000c1e:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8000c20:	4b1f      	ldr	r3, [pc, #124]	; (8000ca0 <MX_LPUART1_UART_Init+0x90>)
 8000c22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000c26:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000c28:	4b1d      	ldr	r3, [pc, #116]	; (8000ca0 <MX_LPUART1_UART_Init+0x90>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000c2e:	4b1c      	ldr	r3, [pc, #112]	; (8000ca0 <MX_LPUART1_UART_Init+0x90>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000c34:	4b1a      	ldr	r3, [pc, #104]	; (8000ca0 <MX_LPUART1_UART_Init+0x90>)
 8000c36:	220c      	movs	r2, #12
 8000c38:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c3a:	4b19      	ldr	r3, [pc, #100]	; (8000ca0 <MX_LPUART1_UART_Init+0x90>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c40:	4b17      	ldr	r3, [pc, #92]	; (8000ca0 <MX_LPUART1_UART_Init+0x90>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c46:	4b16      	ldr	r3, [pc, #88]	; (8000ca0 <MX_LPUART1_UART_Init+0x90>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c4c:	4b14      	ldr	r3, [pc, #80]	; (8000ca0 <MX_LPUART1_UART_Init+0x90>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000c52:	4b13      	ldr	r3, [pc, #76]	; (8000ca0 <MX_LPUART1_UART_Init+0x90>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000c58:	4811      	ldr	r0, [pc, #68]	; (8000ca0 <MX_LPUART1_UART_Init+0x90>)
 8000c5a:	f008 fa73 	bl	8009144 <HAL_UART_Init>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8000c64:	f000 fdf2 	bl	800184c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c68:	2100      	movs	r1, #0
 8000c6a:	480d      	ldr	r0, [pc, #52]	; (8000ca0 <MX_LPUART1_UART_Init+0x90>)
 8000c6c:	f008 ffa4 	bl	8009bb8 <HAL_UARTEx_SetTxFifoThreshold>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000c76:	f000 fde9 	bl	800184c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	4808      	ldr	r0, [pc, #32]	; (8000ca0 <MX_LPUART1_UART_Init+0x90>)
 8000c7e:	f008 ffd9 	bl	8009c34 <HAL_UARTEx_SetRxFifoThreshold>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000c88:	f000 fde0 	bl	800184c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000c8c:	4804      	ldr	r0, [pc, #16]	; (8000ca0 <MX_LPUART1_UART_Init+0x90>)
 8000c8e:	f008 ff5a 	bl	8009b46 <HAL_UARTEx_DisableFifoMode>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000c98:	f000 fdd8 	bl	800184c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000c9c:	bf00      	nop
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	200001c4 	.word	0x200001c4
 8000ca4:	40008000 	.word	0x40008000
 8000ca8:	00033324 	.word	0x00033324

08000cac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000cb0:	4b23      	ldr	r3, [pc, #140]	; (8000d40 <MX_USART2_UART_Init+0x94>)
 8000cb2:	4a24      	ldr	r2, [pc, #144]	; (8000d44 <MX_USART2_UART_Init+0x98>)
 8000cb4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000cb6:	4b22      	ldr	r3, [pc, #136]	; (8000d40 <MX_USART2_UART_Init+0x94>)
 8000cb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cbc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cbe:	4b20      	ldr	r3, [pc, #128]	; (8000d40 <MX_USART2_UART_Init+0x94>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cc4:	4b1e      	ldr	r3, [pc, #120]	; (8000d40 <MX_USART2_UART_Init+0x94>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cca:	4b1d      	ldr	r3, [pc, #116]	; (8000d40 <MX_USART2_UART_Init+0x94>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cd0:	4b1b      	ldr	r3, [pc, #108]	; (8000d40 <MX_USART2_UART_Init+0x94>)
 8000cd2:	220c      	movs	r2, #12
 8000cd4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8000cd6:	4b1a      	ldr	r3, [pc, #104]	; (8000d40 <MX_USART2_UART_Init+0x94>)
 8000cd8:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000cdc:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cde:	4b18      	ldr	r3, [pc, #96]	; (8000d40 <MX_USART2_UART_Init+0x94>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ce4:	4b16      	ldr	r3, [pc, #88]	; (8000d40 <MX_USART2_UART_Init+0x94>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cea:	4b15      	ldr	r3, [pc, #84]	; (8000d40 <MX_USART2_UART_Init+0x94>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cf0:	4b13      	ldr	r3, [pc, #76]	; (8000d40 <MX_USART2_UART_Init+0x94>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cf6:	4812      	ldr	r0, [pc, #72]	; (8000d40 <MX_USART2_UART_Init+0x94>)
 8000cf8:	f008 fa24 	bl	8009144 <HAL_UART_Init>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8000d02:	f000 fda3 	bl	800184c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d06:	2100      	movs	r1, #0
 8000d08:	480d      	ldr	r0, [pc, #52]	; (8000d40 <MX_USART2_UART_Init+0x94>)
 8000d0a:	f008 ff55 	bl	8009bb8 <HAL_UARTEx_SetTxFifoThreshold>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8000d14:	f000 fd9a 	bl	800184c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d18:	2100      	movs	r1, #0
 8000d1a:	4809      	ldr	r0, [pc, #36]	; (8000d40 <MX_USART2_UART_Init+0x94>)
 8000d1c:	f008 ff8a 	bl	8009c34 <HAL_UARTEx_SetRxFifoThreshold>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8000d26:	f000 fd91 	bl	800184c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000d2a:	4805      	ldr	r0, [pc, #20]	; (8000d40 <MX_USART2_UART_Init+0x94>)
 8000d2c:	f008 ff0b 	bl	8009b46 <HAL_UARTEx_DisableFifoMode>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8000d36:	f000 fd89 	bl	800184c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	20000254 	.word	0x20000254
 8000d44:	40004400 	.word	0x40004400

08000d48 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d4c:	4b22      	ldr	r3, [pc, #136]	; (8000dd8 <MX_USART3_UART_Init+0x90>)
 8000d4e:	4a23      	ldr	r2, [pc, #140]	; (8000ddc <MX_USART3_UART_Init+0x94>)
 8000d50:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d52:	4b21      	ldr	r3, [pc, #132]	; (8000dd8 <MX_USART3_UART_Init+0x90>)
 8000d54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d58:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d5a:	4b1f      	ldr	r3, [pc, #124]	; (8000dd8 <MX_USART3_UART_Init+0x90>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d60:	4b1d      	ldr	r3, [pc, #116]	; (8000dd8 <MX_USART3_UART_Init+0x90>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d66:	4b1c      	ldr	r3, [pc, #112]	; (8000dd8 <MX_USART3_UART_Init+0x90>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d6c:	4b1a      	ldr	r3, [pc, #104]	; (8000dd8 <MX_USART3_UART_Init+0x90>)
 8000d6e:	220c      	movs	r2, #12
 8000d70:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d72:	4b19      	ldr	r3, [pc, #100]	; (8000dd8 <MX_USART3_UART_Init+0x90>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d78:	4b17      	ldr	r3, [pc, #92]	; (8000dd8 <MX_USART3_UART_Init+0x90>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d7e:	4b16      	ldr	r3, [pc, #88]	; (8000dd8 <MX_USART3_UART_Init+0x90>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d84:	4b14      	ldr	r3, [pc, #80]	; (8000dd8 <MX_USART3_UART_Init+0x90>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d8a:	4b13      	ldr	r3, [pc, #76]	; (8000dd8 <MX_USART3_UART_Init+0x90>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d90:	4811      	ldr	r0, [pc, #68]	; (8000dd8 <MX_USART3_UART_Init+0x90>)
 8000d92:	f008 f9d7 	bl	8009144 <HAL_UART_Init>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000d9c:	f000 fd56 	bl	800184c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000da0:	2100      	movs	r1, #0
 8000da2:	480d      	ldr	r0, [pc, #52]	; (8000dd8 <MX_USART3_UART_Init+0x90>)
 8000da4:	f008 ff08 	bl	8009bb8 <HAL_UARTEx_SetTxFifoThreshold>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000dae:	f000 fd4d 	bl	800184c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000db2:	2100      	movs	r1, #0
 8000db4:	4808      	ldr	r0, [pc, #32]	; (8000dd8 <MX_USART3_UART_Init+0x90>)
 8000db6:	f008 ff3d 	bl	8009c34 <HAL_UARTEx_SetRxFifoThreshold>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000dc0:	f000 fd44 	bl	800184c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000dc4:	4804      	ldr	r0, [pc, #16]	; (8000dd8 <MX_USART3_UART_Init+0x90>)
 8000dc6:	f008 febe 	bl	8009b46 <HAL_UARTEx_DisableFifoMode>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000dd0:	f000 fd3c 	bl	800184c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000dd4:	bf00      	nop
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	200002e4 	.word	0x200002e4
 8000ddc:	40004800 	.word	0x40004800

08000de0 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockB1.Instance = SAI1_Block_B;
 8000de4:	4b45      	ldr	r3, [pc, #276]	; (8000efc <MX_SAI1_Init+0x11c>)
 8000de6:	4a46      	ldr	r2, [pc, #280]	; (8000f00 <MX_SAI1_Init+0x120>)
 8000de8:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000dea:	4b44      	ldr	r3, [pc, #272]	; (8000efc <MX_SAI1_Init+0x11c>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000df0:	4b42      	ldr	r3, [pc, #264]	; (8000efc <MX_SAI1_Init+0x11c>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 8000df6:	4b41      	ldr	r3, [pc, #260]	; (8000efc <MX_SAI1_Init+0x11c>)
 8000df8:	2240      	movs	r2, #64	; 0x40
 8000dfa:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000dfc:	4b3f      	ldr	r3, [pc, #252]	; (8000efc <MX_SAI1_Init+0x11c>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000e02:	4b3e      	ldr	r3, [pc, #248]	; (8000efc <MX_SAI1_Init+0x11c>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000e08:	4b3c      	ldr	r3, [pc, #240]	; (8000efc <MX_SAI1_Init+0x11c>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000e0e:	4b3b      	ldr	r3, [pc, #236]	; (8000efc <MX_SAI1_Init+0x11c>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000e14:	4b39      	ldr	r3, [pc, #228]	; (8000efc <MX_SAI1_Init+0x11c>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8000e1a:	4b38      	ldr	r3, [pc, #224]	; (8000efc <MX_SAI1_Init+0x11c>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000e20:	4b36      	ldr	r3, [pc, #216]	; (8000efc <MX_SAI1_Init+0x11c>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000e26:	4b35      	ldr	r3, [pc, #212]	; (8000efc <MX_SAI1_Init+0x11c>)
 8000e28:	4a36      	ldr	r2, [pc, #216]	; (8000f04 <MX_SAI1_Init+0x124>)
 8000e2a:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000e2c:	4b33      	ldr	r3, [pc, #204]	; (8000efc <MX_SAI1_Init+0x11c>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000e32:	4b32      	ldr	r3, [pc, #200]	; (8000efc <MX_SAI1_Init+0x11c>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000e38:	4b30      	ldr	r3, [pc, #192]	; (8000efc <MX_SAI1_Init+0x11c>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000e3e:	4b2f      	ldr	r3, [pc, #188]	; (8000efc <MX_SAI1_Init+0x11c>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.PdmInit.Activation = DISABLE;
 8000e44:	4b2d      	ldr	r3, [pc, #180]	; (8000efc <MX_SAI1_Init+0x11c>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.PdmInit.MicPairsNbr = 0;
 8000e4c:	4b2b      	ldr	r3, [pc, #172]	; (8000efc <MX_SAI1_Init+0x11c>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8000e52:	4b2a      	ldr	r3, [pc, #168]	; (8000efc <MX_SAI1_Init+0x11c>)
 8000e54:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e58:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.FrameInit.FrameLength = 8;
 8000e5a:	4b28      	ldr	r3, [pc, #160]	; (8000efc <MX_SAI1_Init+0x11c>)
 8000e5c:	2208      	movs	r2, #8
 8000e5e:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 8000e60:	4b26      	ldr	r3, [pc, #152]	; (8000efc <MX_SAI1_Init+0x11c>)
 8000e62:	2201      	movs	r2, #1
 8000e64:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000e66:	4b25      	ldr	r3, [pc, #148]	; (8000efc <MX_SAI1_Init+0x11c>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000e6c:	4b23      	ldr	r3, [pc, #140]	; (8000efc <MX_SAI1_Init+0x11c>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000e72:	4b22      	ldr	r3, [pc, #136]	; (8000efc <MX_SAI1_Init+0x11c>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 8000e78:	4b20      	ldr	r3, [pc, #128]	; (8000efc <MX_SAI1_Init+0x11c>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000e7e:	4b1f      	ldr	r3, [pc, #124]	; (8000efc <MX_SAI1_Init+0x11c>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 8000e84:	4b1d      	ldr	r3, [pc, #116]	; (8000efc <MX_SAI1_Init+0x11c>)
 8000e86:	2201      	movs	r2, #1
 8000e88:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 8000e8a:	4b1c      	ldr	r3, [pc, #112]	; (8000efc <MX_SAI1_Init+0x11c>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	671a      	str	r2, [r3, #112]	; 0x70
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8000e90:	481a      	ldr	r0, [pc, #104]	; (8000efc <MX_SAI1_Init+0x11c>)
 8000e92:	f005 fdf3 	bl	8006a7c <HAL_SAI_Init>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <MX_SAI1_Init+0xc0>
  {
    Error_Handler();
 8000e9c:	f000 fcd6 	bl	800184c <Error_Handler>
  }
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000ea0:	4b19      	ldr	r3, [pc, #100]	; (8000f08 <MX_SAI1_Init+0x128>)
 8000ea2:	4a1a      	ldr	r2, [pc, #104]	; (8000f0c <MX_SAI1_Init+0x12c>)
 8000ea4:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000ea6:	4b18      	ldr	r3, [pc, #96]	; (8000f08 <MX_SAI1_Init+0x128>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000eac:	4b16      	ldr	r3, [pc, #88]	; (8000f08 <MX_SAI1_Init+0x128>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000eb2:	4b15      	ldr	r3, [pc, #84]	; (8000f08 <MX_SAI1_Init+0x128>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000eb8:	4b13      	ldr	r3, [pc, #76]	; (8000f08 <MX_SAI1_Init+0x128>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000ebe:	4b12      	ldr	r3, [pc, #72]	; (8000f08 <MX_SAI1_Init+0x128>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000ec4:	4b10      	ldr	r3, [pc, #64]	; (8000f08 <MX_SAI1_Init+0x128>)
 8000ec6:	4a0f      	ldr	r2, [pc, #60]	; (8000f04 <MX_SAI1_Init+0x124>)
 8000ec8:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000eca:	4b0f      	ldr	r3, [pc, #60]	; (8000f08 <MX_SAI1_Init+0x128>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000ed0:	4b0d      	ldr	r3, [pc, #52]	; (8000f08 <MX_SAI1_Init+0x128>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000ed6:	4b0c      	ldr	r3, [pc, #48]	; (8000f08 <MX_SAI1_Init+0x128>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000edc:	4b0a      	ldr	r3, [pc, #40]	; (8000f08 <MX_SAI1_Init+0x128>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	4807      	ldr	r0, [pc, #28]	; (8000f08 <MX_SAI1_Init+0x128>)
 8000eea:	f005 fd95 	bl	8006a18 <HAL_SAI_InitProtocol>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_SAI1_Init+0x118>
  {
    Error_Handler();
 8000ef4:	f000 fcaa 	bl	800184c <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8000ef8:	bf00      	nop
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	20000374 	.word	0x20000374
 8000f00:	40015424 	.word	0x40015424
 8000f04:	0002ee00 	.word	0x0002ee00
 8000f08:	20000408 	.word	0x20000408
 8000f0c:	40015404 	.word	0x40015404

08000f10 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8000f14:	4b2f      	ldr	r3, [pc, #188]	; (8000fd4 <MX_SAI2_Init+0xc4>)
 8000f16:	4a30      	ldr	r2, [pc, #192]	; (8000fd8 <MX_SAI2_Init+0xc8>)
 8000f18:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000f1a:	4b2e      	ldr	r3, [pc, #184]	; (8000fd4 <MX_SAI2_Init+0xc4>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8000f20:	4b2c      	ldr	r3, [pc, #176]	; (8000fd4 <MX_SAI2_Init+0xc4>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8000f26:	4b2b      	ldr	r3, [pc, #172]	; (8000fd4 <MX_SAI2_Init+0xc4>)
 8000f28:	2240      	movs	r2, #64	; 0x40
 8000f2a:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000f2c:	4b29      	ldr	r3, [pc, #164]	; (8000fd4 <MX_SAI2_Init+0xc4>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000f32:	4b28      	ldr	r3, [pc, #160]	; (8000fd4 <MX_SAI2_Init+0xc4>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000f38:	4b26      	ldr	r3, [pc, #152]	; (8000fd4 <MX_SAI2_Init+0xc4>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000f3e:	4b25      	ldr	r3, [pc, #148]	; (8000fd4 <MX_SAI2_Init+0xc4>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000f44:	4b23      	ldr	r3, [pc, #140]	; (8000fd4 <MX_SAI2_Init+0xc4>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8000f4a:	4b22      	ldr	r3, [pc, #136]	; (8000fd4 <MX_SAI2_Init+0xc4>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000f50:	4b20      	ldr	r3, [pc, #128]	; (8000fd4 <MX_SAI2_Init+0xc4>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000f56:	4b1f      	ldr	r3, [pc, #124]	; (8000fd4 <MX_SAI2_Init+0xc4>)
 8000f58:	4a20      	ldr	r2, [pc, #128]	; (8000fdc <MX_SAI2_Init+0xcc>)
 8000f5a:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000f5c:	4b1d      	ldr	r3, [pc, #116]	; (8000fd4 <MX_SAI2_Init+0xc4>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000f62:	4b1c      	ldr	r3, [pc, #112]	; (8000fd4 <MX_SAI2_Init+0xc4>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000f68:	4b1a      	ldr	r3, [pc, #104]	; (8000fd4 <MX_SAI2_Init+0xc4>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000f6e:	4b19      	ldr	r3, [pc, #100]	; (8000fd4 <MX_SAI2_Init+0xc4>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.PdmInit.Activation = DISABLE;
 8000f74:	4b17      	ldr	r3, [pc, #92]	; (8000fd4 <MX_SAI2_Init+0xc4>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.PdmInit.MicPairsNbr = 0;
 8000f7c:	4b15      	ldr	r3, [pc, #84]	; (8000fd4 <MX_SAI2_Init+0xc4>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8000f82:	4b14      	ldr	r3, [pc, #80]	; (8000fd4 <MX_SAI2_Init+0xc4>)
 8000f84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f88:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8000f8a:	4b12      	ldr	r3, [pc, #72]	; (8000fd4 <MX_SAI2_Init+0xc4>)
 8000f8c:	2208      	movs	r2, #8
 8000f8e:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8000f90:	4b10      	ldr	r3, [pc, #64]	; (8000fd4 <MX_SAI2_Init+0xc4>)
 8000f92:	2201      	movs	r2, #1
 8000f94:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000f96:	4b0f      	ldr	r3, [pc, #60]	; (8000fd4 <MX_SAI2_Init+0xc4>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000f9c:	4b0d      	ldr	r3, [pc, #52]	; (8000fd4 <MX_SAI2_Init+0xc4>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000fa2:	4b0c      	ldr	r3, [pc, #48]	; (8000fd4 <MX_SAI2_Init+0xc4>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8000fa8:	4b0a      	ldr	r3, [pc, #40]	; (8000fd4 <MX_SAI2_Init+0xc4>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000fae:	4b09      	ldr	r3, [pc, #36]	; (8000fd4 <MX_SAI2_Init+0xc4>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8000fb4:	4b07      	ldr	r3, [pc, #28]	; (8000fd4 <MX_SAI2_Init+0xc4>)
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8000fba:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <MX_SAI2_Init+0xc4>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	671a      	str	r2, [r3, #112]	; 0x70
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8000fc0:	4804      	ldr	r0, [pc, #16]	; (8000fd4 <MX_SAI2_Init+0xc4>)
 8000fc2:	f005 fd5b 	bl	8006a7c <HAL_SAI_Init>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_SAI2_Init+0xc0>
  {
    Error_Handler();
 8000fcc:	f000 fc3e 	bl	800184c <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8000fd0:	bf00      	nop
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	2000049c 	.word	0x2000049c
 8000fd8:	40015804 	.word	0x40015804
 8000fdc:	0002ee00 	.word	0x0002ee00

08000fe0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000fe4:	4b1b      	ldr	r3, [pc, #108]	; (8001054 <MX_SPI1_Init+0x74>)
 8000fe6:	4a1c      	ldr	r2, [pc, #112]	; (8001058 <MX_SPI1_Init+0x78>)
 8000fe8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fea:	4b1a      	ldr	r3, [pc, #104]	; (8001054 <MX_SPI1_Init+0x74>)
 8000fec:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ff0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ff2:	4b18      	ldr	r3, [pc, #96]	; (8001054 <MX_SPI1_Init+0x74>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000ff8:	4b16      	ldr	r3, [pc, #88]	; (8001054 <MX_SPI1_Init+0x74>)
 8000ffa:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000ffe:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001000:	4b14      	ldr	r3, [pc, #80]	; (8001054 <MX_SPI1_Init+0x74>)
 8001002:	2200      	movs	r2, #0
 8001004:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001006:	4b13      	ldr	r3, [pc, #76]	; (8001054 <MX_SPI1_Init+0x74>)
 8001008:	2200      	movs	r2, #0
 800100a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800100c:	4b11      	ldr	r3, [pc, #68]	; (8001054 <MX_SPI1_Init+0x74>)
 800100e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001012:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001014:	4b0f      	ldr	r3, [pc, #60]	; (8001054 <MX_SPI1_Init+0x74>)
 8001016:	2200      	movs	r2, #0
 8001018:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800101a:	4b0e      	ldr	r3, [pc, #56]	; (8001054 <MX_SPI1_Init+0x74>)
 800101c:	2200      	movs	r2, #0
 800101e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001020:	4b0c      	ldr	r3, [pc, #48]	; (8001054 <MX_SPI1_Init+0x74>)
 8001022:	2200      	movs	r2, #0
 8001024:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001026:	4b0b      	ldr	r3, [pc, #44]	; (8001054 <MX_SPI1_Init+0x74>)
 8001028:	2200      	movs	r2, #0
 800102a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800102c:	4b09      	ldr	r3, [pc, #36]	; (8001054 <MX_SPI1_Init+0x74>)
 800102e:	2207      	movs	r2, #7
 8001030:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001032:	4b08      	ldr	r3, [pc, #32]	; (8001054 <MX_SPI1_Init+0x74>)
 8001034:	2200      	movs	r2, #0
 8001036:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001038:	4b06      	ldr	r3, [pc, #24]	; (8001054 <MX_SPI1_Init+0x74>)
 800103a:	2208      	movs	r2, #8
 800103c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800103e:	4805      	ldr	r0, [pc, #20]	; (8001054 <MX_SPI1_Init+0x74>)
 8001040:	f006 f973 	bl	800732a <HAL_SPI_Init>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800104a:	f000 fbff 	bl	800184c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	20000530 	.word	0x20000530
 8001058:	40013000 	.word	0x40013000

0800105c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001060:	4b1b      	ldr	r3, [pc, #108]	; (80010d0 <MX_SPI3_Init+0x74>)
 8001062:	4a1c      	ldr	r2, [pc, #112]	; (80010d4 <MX_SPI3_Init+0x78>)
 8001064:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001066:	4b1a      	ldr	r3, [pc, #104]	; (80010d0 <MX_SPI3_Init+0x74>)
 8001068:	f44f 7282 	mov.w	r2, #260	; 0x104
 800106c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800106e:	4b18      	ldr	r3, [pc, #96]	; (80010d0 <MX_SPI3_Init+0x74>)
 8001070:	2200      	movs	r2, #0
 8001072:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8001074:	4b16      	ldr	r3, [pc, #88]	; (80010d0 <MX_SPI3_Init+0x74>)
 8001076:	f44f 7240 	mov.w	r2, #768	; 0x300
 800107a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800107c:	4b14      	ldr	r3, [pc, #80]	; (80010d0 <MX_SPI3_Init+0x74>)
 800107e:	2200      	movs	r2, #0
 8001080:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001082:	4b13      	ldr	r3, [pc, #76]	; (80010d0 <MX_SPI3_Init+0x74>)
 8001084:	2200      	movs	r2, #0
 8001086:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001088:	4b11      	ldr	r3, [pc, #68]	; (80010d0 <MX_SPI3_Init+0x74>)
 800108a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800108e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001090:	4b0f      	ldr	r3, [pc, #60]	; (80010d0 <MX_SPI3_Init+0x74>)
 8001092:	2200      	movs	r2, #0
 8001094:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001096:	4b0e      	ldr	r3, [pc, #56]	; (80010d0 <MX_SPI3_Init+0x74>)
 8001098:	2200      	movs	r2, #0
 800109a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800109c:	4b0c      	ldr	r3, [pc, #48]	; (80010d0 <MX_SPI3_Init+0x74>)
 800109e:	2200      	movs	r2, #0
 80010a0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010a2:	4b0b      	ldr	r3, [pc, #44]	; (80010d0 <MX_SPI3_Init+0x74>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80010a8:	4b09      	ldr	r3, [pc, #36]	; (80010d0 <MX_SPI3_Init+0x74>)
 80010aa:	2207      	movs	r2, #7
 80010ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80010ae:	4b08      	ldr	r3, [pc, #32]	; (80010d0 <MX_SPI3_Init+0x74>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80010b4:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <MX_SPI3_Init+0x74>)
 80010b6:	2208      	movs	r2, #8
 80010b8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80010ba:	4805      	ldr	r0, [pc, #20]	; (80010d0 <MX_SPI3_Init+0x74>)
 80010bc:	f006 f935 	bl	800732a <HAL_SPI_Init>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80010c6:	f000 fbc1 	bl	800184c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	20000594 	.word	0x20000594
 80010d4:	40003c00 	.word	0x40003c00

080010d8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b09c      	sub	sp, #112	; 0x70
 80010dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010de:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	605a      	str	r2, [r3, #4]
 80010e8:	609a      	str	r2, [r3, #8]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 80010ea:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80010ee:	2200      	movs	r2, #0
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	605a      	str	r2, [r3, #4]
 80010f4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010f6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	605a      	str	r2, [r3, #4]
 8001100:	609a      	str	r2, [r3, #8]
 8001102:	60da      	str	r2, [r3, #12]
 8001104:	611a      	str	r2, [r3, #16]
 8001106:	615a      	str	r2, [r3, #20]
 8001108:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800110a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	605a      	str	r2, [r3, #4]
 8001114:	609a      	str	r2, [r3, #8]
 8001116:	60da      	str	r2, [r3, #12]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001118:	463b      	mov	r3, r7
 800111a:	222c      	movs	r2, #44	; 0x2c
 800111c:	2100      	movs	r1, #0
 800111e:	4618      	mov	r0, r3
 8001120:	f008 fe38 	bl	8009d94 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001124:	4b5e      	ldr	r3, [pc, #376]	; (80012a0 <MX_TIM1_Init+0x1c8>)
 8001126:	4a5f      	ldr	r2, [pc, #380]	; (80012a4 <MX_TIM1_Init+0x1cc>)
 8001128:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3999;
 800112a:	4b5d      	ldr	r3, [pc, #372]	; (80012a0 <MX_TIM1_Init+0x1c8>)
 800112c:	f640 729f 	movw	r2, #3999	; 0xf9f
 8001130:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001132:	4b5b      	ldr	r3, [pc, #364]	; (80012a0 <MX_TIM1_Init+0x1c8>)
 8001134:	2200      	movs	r2, #0
 8001136:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8001138:	4b59      	ldr	r3, [pc, #356]	; (80012a0 <MX_TIM1_Init+0x1c8>)
 800113a:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800113e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001140:	4b57      	ldr	r3, [pc, #348]	; (80012a0 <MX_TIM1_Init+0x1c8>)
 8001142:	2200      	movs	r2, #0
 8001144:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001146:	4b56      	ldr	r3, [pc, #344]	; (80012a0 <MX_TIM1_Init+0x1c8>)
 8001148:	2200      	movs	r2, #0
 800114a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800114c:	4b54      	ldr	r3, [pc, #336]	; (80012a0 <MX_TIM1_Init+0x1c8>)
 800114e:	2200      	movs	r2, #0
 8001150:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001152:	4853      	ldr	r0, [pc, #332]	; (80012a0 <MX_TIM1_Init+0x1c8>)
 8001154:	f006 f9e3 	bl	800751e <HAL_TIM_PWM_Init>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800115e:	f000 fb75 	bl	800184c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001162:	484f      	ldr	r0, [pc, #316]	; (80012a0 <MX_TIM1_Init+0x1c8>)
 8001164:	f006 fb38 	bl	80077d8 <HAL_TIM_IC_Init>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 800116e:	f000 fb6d 	bl	800184c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001172:	2300      	movs	r3, #0
 8001174:	667b      	str	r3, [r7, #100]	; 0x64
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001176:	2300      	movs	r3, #0
 8001178:	66bb      	str	r3, [r7, #104]	; 0x68
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800117a:	2300      	movs	r3, #0
 800117c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800117e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001182:	4619      	mov	r1, r3
 8001184:	4846      	ldr	r0, [pc, #280]	; (80012a0 <MX_TIM1_Init+0x1c8>)
 8001186:	f007 fdf3 	bl	8008d70 <HAL_TIMEx_MasterConfigSynchronization>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8001190:	f000 fb5c 	bl	800184c <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 8001194:	2301      	movs	r3, #1
 8001196:	65bb      	str	r3, [r7, #88]	; 0x58
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 8001198:	2301      	movs	r3, #1
 800119a:	65fb      	str	r3, [r7, #92]	; 0x5c
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 800119c:	2300      	movs	r3, #0
 800119e:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 80011a0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80011a4:	461a      	mov	r2, r3
 80011a6:	2101      	movs	r1, #1
 80011a8:	483d      	ldr	r0, [pc, #244]	; (80012a0 <MX_TIM1_Init+0x1c8>)
 80011aa:	f007 fee7 	bl	8008f7c <HAL_TIMEx_ConfigBreakInput>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MX_TIM1_Init+0xe0>
  {
    Error_Handler();
 80011b4:	f000 fb4a 	bl	800184c <Error_Handler>
  }
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 80011b8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80011bc:	461a      	mov	r2, r3
 80011be:	2102      	movs	r1, #2
 80011c0:	4837      	ldr	r0, [pc, #220]	; (80012a0 <MX_TIM1_Init+0x1c8>)
 80011c2:	f007 fedb 	bl	8008f7c <HAL_TIMEx_ConfigBreakInput>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80011cc:	f000 fb3e 	bl	800184c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011d0:	2360      	movs	r3, #96	; 0x60
 80011d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.Pulse = 0;
 80011d4:	2300      	movs	r3, #0
 80011d6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011d8:	2300      	movs	r3, #0
 80011da:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011dc:	2300      	movs	r3, #0
 80011de:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011e0:	2300      	movs	r3, #0
 80011e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011e4:	2300      	movs	r3, #0
 80011e6:	653b      	str	r3, [r7, #80]	; 0x50
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011e8:	2300      	movs	r3, #0
 80011ea:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011ec:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80011f0:	2200      	movs	r2, #0
 80011f2:	4619      	mov	r1, r3
 80011f4:	482a      	ldr	r0, [pc, #168]	; (80012a0 <MX_TIM1_Init+0x1c8>)
 80011f6:	f006 fe57 	bl	8007ea8 <HAL_TIM_PWM_ConfigChannel>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8001200:	f000 fb24 	bl	800184c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001204:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001208:	2204      	movs	r2, #4
 800120a:	4619      	mov	r1, r3
 800120c:	4824      	ldr	r0, [pc, #144]	; (80012a0 <MX_TIM1_Init+0x1c8>)
 800120e:	f006 fe4b 	bl	8007ea8 <HAL_TIM_PWM_ConfigChannel>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8001218:	f000 fb18 	bl	800184c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800121c:	2302      	movs	r3, #2
 800121e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001220:	2301      	movs	r3, #1
 8001222:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001224:	2300      	movs	r3, #0
 8001226:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigIC.ICFilter = 0;
 8001228:	2300      	movs	r3, #0
 800122a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800122c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001230:	2208      	movs	r2, #8
 8001232:	4619      	mov	r1, r3
 8001234:	481a      	ldr	r0, [pc, #104]	; (80012a0 <MX_TIM1_Init+0x1c8>)
 8001236:	f006 fd9a 	bl	8007d6e <HAL_TIM_IC_ConfigChannel>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_TIM1_Init+0x16c>
  {
    Error_Handler();
 8001240:	f000 fb04 	bl	800184c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8001244:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001248:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 800124a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800124e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001250:	2300      	movs	r3, #0
 8001252:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001254:	2300      	movs	r3, #0
 8001256:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8001258:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800125c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800125e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001262:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001264:	2300      	movs	r3, #0
 8001266:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_ENABLE;
 8001268:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800126c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800126e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001272:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001274:	2300      	movs	r3, #0
 8001276:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001278:	2300      	movs	r3, #0
 800127a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800127c:	463b      	mov	r3, r7
 800127e:	4619      	mov	r1, r3
 8001280:	4807      	ldr	r0, [pc, #28]	; (80012a0 <MX_TIM1_Init+0x1c8>)
 8001282:	f007 fdfd 	bl	8008e80 <HAL_TIMEx_ConfigBreakDeadTime>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_TIM1_Init+0x1b8>
  {
    Error_Handler();
 800128c:	f000 fade 	bl	800184c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001290:	4803      	ldr	r0, [pc, #12]	; (80012a0 <MX_TIM1_Init+0x1c8>)
 8001292:	f000 ffa1 	bl	80021d8 <HAL_TIM_MspPostInit>

}
 8001296:	bf00      	nop
 8001298:	3770      	adds	r7, #112	; 0x70
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	200005f8 	.word	0x200005f8
 80012a4:	40012c00 	.word	0x40012c00

080012a8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b08e      	sub	sp, #56	; 0x38
 80012ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012b2:	2200      	movs	r2, #0
 80012b4:	601a      	str	r2, [r3, #0]
 80012b6:	605a      	str	r2, [r3, #4]
 80012b8:	609a      	str	r2, [r3, #8]
 80012ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012bc:	f107 031c 	add.w	r3, r7, #28
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012c8:	463b      	mov	r3, r7
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	605a      	str	r2, [r3, #4]
 80012d0:	609a      	str	r2, [r3, #8]
 80012d2:	60da      	str	r2, [r3, #12]
 80012d4:	611a      	str	r2, [r3, #16]
 80012d6:	615a      	str	r2, [r3, #20]
 80012d8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012da:	4b2e      	ldr	r3, [pc, #184]	; (8001394 <MX_TIM2_Init+0xec>)
 80012dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012e0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 319;
 80012e2:	4b2c      	ldr	r3, [pc, #176]	; (8001394 <MX_TIM2_Init+0xec>)
 80012e4:	f240 123f 	movw	r2, #319	; 0x13f
 80012e8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ea:	4b2a      	ldr	r3, [pc, #168]	; (8001394 <MX_TIM2_Init+0xec>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4000;
 80012f0:	4b28      	ldr	r3, [pc, #160]	; (8001394 <MX_TIM2_Init+0xec>)
 80012f2:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80012f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012f8:	4b26      	ldr	r3, [pc, #152]	; (8001394 <MX_TIM2_Init+0xec>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012fe:	4b25      	ldr	r3, [pc, #148]	; (8001394 <MX_TIM2_Init+0xec>)
 8001300:	2200      	movs	r2, #0
 8001302:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001304:	4823      	ldr	r0, [pc, #140]	; (8001394 <MX_TIM2_Init+0xec>)
 8001306:	f006 f8b3 	bl	8007470 <HAL_TIM_Base_Init>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8001310:	f000 fa9c 	bl	800184c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001314:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001318:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800131a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800131e:	4619      	mov	r1, r3
 8001320:	481c      	ldr	r0, [pc, #112]	; (8001394 <MX_TIM2_Init+0xec>)
 8001322:	f006 fed5 	bl	80080d0 <HAL_TIM_ConfigClockSource>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 800132c:	f000 fa8e 	bl	800184c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001330:	4818      	ldr	r0, [pc, #96]	; (8001394 <MX_TIM2_Init+0xec>)
 8001332:	f006 f8f4 	bl	800751e <HAL_TIM_PWM_Init>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 800133c:	f000 fa86 	bl	800184c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001340:	2300      	movs	r3, #0
 8001342:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001344:	2300      	movs	r3, #0
 8001346:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001348:	f107 031c 	add.w	r3, r7, #28
 800134c:	4619      	mov	r1, r3
 800134e:	4811      	ldr	r0, [pc, #68]	; (8001394 <MX_TIM2_Init+0xec>)
 8001350:	f007 fd0e 	bl	8008d70 <HAL_TIMEx_MasterConfigSynchronization>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 800135a:	f000 fa77 	bl	800184c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800135e:	2360      	movs	r3, #96	; 0x60
 8001360:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1;
 8001362:	2301      	movs	r3, #1
 8001364:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001366:	2300      	movs	r3, #0
 8001368:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800136a:	2300      	movs	r3, #0
 800136c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800136e:	463b      	mov	r3, r7
 8001370:	2200      	movs	r2, #0
 8001372:	4619      	mov	r1, r3
 8001374:	4807      	ldr	r0, [pc, #28]	; (8001394 <MX_TIM2_Init+0xec>)
 8001376:	f006 fd97 	bl	8007ea8 <HAL_TIM_PWM_ConfigChannel>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8001380:	f000 fa64 	bl	800184c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001384:	4803      	ldr	r0, [pc, #12]	; (8001394 <MX_TIM2_Init+0xec>)
 8001386:	f000 ff27 	bl	80021d8 <HAL_TIM_MspPostInit>

}
 800138a:	bf00      	nop
 800138c:	3738      	adds	r7, #56	; 0x38
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	20000644 	.word	0x20000644

08001398 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b08c      	sub	sp, #48	; 0x30
 800139c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800139e:	f107 0320 	add.w	r3, r7, #32
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	605a      	str	r2, [r3, #4]
 80013a8:	609a      	str	r2, [r3, #8]
 80013aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013ac:	f107 0314 	add.w	r3, r7, #20
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80013b8:	1d3b      	adds	r3, r7, #4
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	605a      	str	r2, [r3, #4]
 80013c0:	609a      	str	r2, [r3, #8]
 80013c2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013c4:	4b2b      	ldr	r3, [pc, #172]	; (8001474 <MX_TIM3_Init+0xdc>)
 80013c6:	4a2c      	ldr	r2, [pc, #176]	; (8001478 <MX_TIM3_Init+0xe0>)
 80013c8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 31999;
 80013ca:	4b2a      	ldr	r3, [pc, #168]	; (8001474 <MX_TIM3_Init+0xdc>)
 80013cc:	f647 42ff 	movw	r2, #31999	; 0x7cff
 80013d0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013d2:	4b28      	ldr	r3, [pc, #160]	; (8001474 <MX_TIM3_Init+0xdc>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 31999;
 80013d8:	4b26      	ldr	r3, [pc, #152]	; (8001474 <MX_TIM3_Init+0xdc>)
 80013da:	f647 42ff 	movw	r2, #31999	; 0x7cff
 80013de:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013e0:	4b24      	ldr	r3, [pc, #144]	; (8001474 <MX_TIM3_Init+0xdc>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013e6:	4b23      	ldr	r3, [pc, #140]	; (8001474 <MX_TIM3_Init+0xdc>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80013ec:	4821      	ldr	r0, [pc, #132]	; (8001474 <MX_TIM3_Init+0xdc>)
 80013ee:	f006 f83f 	bl	8007470 <HAL_TIM_Base_Init>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 80013f8:	f000 fa28 	bl	800184c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001400:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001402:	f107 0320 	add.w	r3, r7, #32
 8001406:	4619      	mov	r1, r3
 8001408:	481a      	ldr	r0, [pc, #104]	; (8001474 <MX_TIM3_Init+0xdc>)
 800140a:	f006 fe61 	bl	80080d0 <HAL_TIM_ConfigClockSource>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8001414:	f000 fa1a 	bl	800184c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001418:	4816      	ldr	r0, [pc, #88]	; (8001474 <MX_TIM3_Init+0xdc>)
 800141a:	f006 f9dd 	bl	80077d8 <HAL_TIM_IC_Init>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8001424:	f000 fa12 	bl	800184c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001428:	2300      	movs	r3, #0
 800142a:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800142c:	2300      	movs	r3, #0
 800142e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001430:	f107 0314 	add.w	r3, r7, #20
 8001434:	4619      	mov	r1, r3
 8001436:	480f      	ldr	r0, [pc, #60]	; (8001474 <MX_TIM3_Init+0xdc>)
 8001438:	f007 fc9a 	bl	8008d70 <HAL_TIMEx_MasterConfigSynchronization>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8001442:	f000 fa03 	bl	800184c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001446:	2302      	movs	r3, #2
 8001448:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800144a:	2301      	movs	r3, #1
 800144c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800144e:	2300      	movs	r3, #0
 8001450:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001452:	2300      	movs	r3, #0
 8001454:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001456:	1d3b      	adds	r3, r7, #4
 8001458:	2204      	movs	r2, #4
 800145a:	4619      	mov	r1, r3
 800145c:	4805      	ldr	r0, [pc, #20]	; (8001474 <MX_TIM3_Init+0xdc>)
 800145e:	f006 fc86 	bl	8007d6e <HAL_TIM_IC_ConfigChannel>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8001468:	f000 f9f0 	bl	800184c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800146c:	bf00      	nop
 800146e:	3730      	adds	r7, #48	; 0x30
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	20000690 	.word	0x20000690
 8001478:	40000400 	.word	0x40000400

0800147c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b08e      	sub	sp, #56	; 0x38
 8001480:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001482:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001486:	2200      	movs	r2, #0
 8001488:	601a      	str	r2, [r3, #0]
 800148a:	605a      	str	r2, [r3, #4]
 800148c:	609a      	str	r2, [r3, #8]
 800148e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001490:	f107 031c 	add.w	r3, r7, #28
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	605a      	str	r2, [r3, #4]
 800149a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800149c:	463b      	mov	r3, r7
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	605a      	str	r2, [r3, #4]
 80014a4:	609a      	str	r2, [r3, #8]
 80014a6:	60da      	str	r2, [r3, #12]
 80014a8:	611a      	str	r2, [r3, #16]
 80014aa:	615a      	str	r2, [r3, #20]
 80014ac:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80014ae:	4b38      	ldr	r3, [pc, #224]	; (8001590 <MX_TIM4_Init+0x114>)
 80014b0:	4a38      	ldr	r2, [pc, #224]	; (8001594 <MX_TIM4_Init+0x118>)
 80014b2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 6399;
 80014b4:	4b36      	ldr	r3, [pc, #216]	; (8001590 <MX_TIM4_Init+0x114>)
 80014b6:	f641 02ff 	movw	r2, #6399	; 0x18ff
 80014ba:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014bc:	4b34      	ldr	r3, [pc, #208]	; (8001590 <MX_TIM4_Init+0x114>)
 80014be:	2200      	movs	r2, #0
 80014c0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 80014c2:	4b33      	ldr	r3, [pc, #204]	; (8001590 <MX_TIM4_Init+0x114>)
 80014c4:	2263      	movs	r2, #99	; 0x63
 80014c6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014c8:	4b31      	ldr	r3, [pc, #196]	; (8001590 <MX_TIM4_Init+0x114>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ce:	4b30      	ldr	r3, [pc, #192]	; (8001590 <MX_TIM4_Init+0x114>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80014d4:	482e      	ldr	r0, [pc, #184]	; (8001590 <MX_TIM4_Init+0x114>)
 80014d6:	f005 ffcb 	bl	8007470 <HAL_TIM_Base_Init>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80014e0:	f000 f9b4 	bl	800184c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014e8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80014ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014ee:	4619      	mov	r1, r3
 80014f0:	4827      	ldr	r0, [pc, #156]	; (8001590 <MX_TIM4_Init+0x114>)
 80014f2:	f006 fded 	bl	80080d0 <HAL_TIM_ConfigClockSource>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80014fc:	f000 f9a6 	bl	800184c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001500:	4823      	ldr	r0, [pc, #140]	; (8001590 <MX_TIM4_Init+0x114>)
 8001502:	f006 f80c 	bl	800751e <HAL_TIM_PWM_Init>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 800150c:	f000 f99e 	bl	800184c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001510:	2300      	movs	r3, #0
 8001512:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001514:	2300      	movs	r3, #0
 8001516:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001518:	f107 031c 	add.w	r3, r7, #28
 800151c:	4619      	mov	r1, r3
 800151e:	481c      	ldr	r0, [pc, #112]	; (8001590 <MX_TIM4_Init+0x114>)
 8001520:	f007 fc26 	bl	8008d70 <HAL_TIMEx_MasterConfigSynchronization>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800152a:	f000 f98f 	bl	800184c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800152e:	2360      	movs	r3, #96	; 0x60
 8001530:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001532:	2300      	movs	r3, #0
 8001534:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001536:	2300      	movs	r3, #0
 8001538:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800153a:	2300      	movs	r3, #0
 800153c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800153e:	463b      	mov	r3, r7
 8001540:	2204      	movs	r2, #4
 8001542:	4619      	mov	r1, r3
 8001544:	4812      	ldr	r0, [pc, #72]	; (8001590 <MX_TIM4_Init+0x114>)
 8001546:	f006 fcaf 	bl	8007ea8 <HAL_TIM_PWM_ConfigChannel>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001550:	f000 f97c 	bl	800184c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001554:	463b      	mov	r3, r7
 8001556:	2208      	movs	r2, #8
 8001558:	4619      	mov	r1, r3
 800155a:	480d      	ldr	r0, [pc, #52]	; (8001590 <MX_TIM4_Init+0x114>)
 800155c:	f006 fca4 	bl	8007ea8 <HAL_TIM_PWM_ConfigChannel>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 8001566:	f000 f971 	bl	800184c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800156a:	463b      	mov	r3, r7
 800156c:	220c      	movs	r2, #12
 800156e:	4619      	mov	r1, r3
 8001570:	4807      	ldr	r0, [pc, #28]	; (8001590 <MX_TIM4_Init+0x114>)
 8001572:	f006 fc99 	bl	8007ea8 <HAL_TIM_PWM_ConfigChannel>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 800157c:	f000 f966 	bl	800184c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001580:	4803      	ldr	r0, [pc, #12]	; (8001590 <MX_TIM4_Init+0x114>)
 8001582:	f000 fe29 	bl	80021d8 <HAL_TIM_MspPostInit>

}
 8001586:	bf00      	nop
 8001588:	3738      	adds	r7, #56	; 0x38
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	200006dc 	.word	0x200006dc
 8001594:	40000800 	.word	0x40000800

08001598 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b096      	sub	sp, #88	; 0x58
 800159c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800159e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80015a2:	2200      	movs	r2, #0
 80015a4:	601a      	str	r2, [r3, #0]
 80015a6:	605a      	str	r2, [r3, #4]
 80015a8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015ae:	2200      	movs	r2, #0
 80015b0:	601a      	str	r2, [r3, #0]
 80015b2:	605a      	str	r2, [r3, #4]
 80015b4:	609a      	str	r2, [r3, #8]
 80015b6:	60da      	str	r2, [r3, #12]
 80015b8:	611a      	str	r2, [r3, #16]
 80015ba:	615a      	str	r2, [r3, #20]
 80015bc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80015be:	1d3b      	adds	r3, r7, #4
 80015c0:	222c      	movs	r2, #44	; 0x2c
 80015c2:	2100      	movs	r1, #0
 80015c4:	4618      	mov	r0, r3
 80015c6:	f008 fbe5 	bl	8009d94 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80015ca:	4b33      	ldr	r3, [pc, #204]	; (8001698 <MX_TIM15_Init+0x100>)
 80015cc:	4a33      	ldr	r2, [pc, #204]	; (800169c <MX_TIM15_Init+0x104>)
 80015ce:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 80015d0:	4b31      	ldr	r3, [pc, #196]	; (8001698 <MX_TIM15_Init+0x100>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015d6:	4b30      	ldr	r3, [pc, #192]	; (8001698 <MX_TIM15_Init+0x100>)
 80015d8:	2200      	movs	r2, #0
 80015da:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 80015dc:	4b2e      	ldr	r3, [pc, #184]	; (8001698 <MX_TIM15_Init+0x100>)
 80015de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015e2:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015e4:	4b2c      	ldr	r3, [pc, #176]	; (8001698 <MX_TIM15_Init+0x100>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80015ea:	4b2b      	ldr	r3, [pc, #172]	; (8001698 <MX_TIM15_Init+0x100>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015f0:	4b29      	ldr	r3, [pc, #164]	; (8001698 <MX_TIM15_Init+0x100>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80015f6:	4828      	ldr	r0, [pc, #160]	; (8001698 <MX_TIM15_Init+0x100>)
 80015f8:	f005 ff91 	bl	800751e <HAL_TIM_PWM_Init>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8001602:	f000 f923 	bl	800184c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001606:	2300      	movs	r3, #0
 8001608:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800160a:	2300      	movs	r3, #0
 800160c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800160e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001612:	4619      	mov	r1, r3
 8001614:	4820      	ldr	r0, [pc, #128]	; (8001698 <MX_TIM15_Init+0x100>)
 8001616:	f007 fbab 	bl	8008d70 <HAL_TIMEx_MasterConfigSynchronization>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8001620:	f000 f914 	bl	800184c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001624:	2360      	movs	r3, #96	; 0x60
 8001626:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001628:	2300      	movs	r3, #0
 800162a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800162c:	2300      	movs	r3, #0
 800162e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001630:	2300      	movs	r3, #0
 8001632:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001634:	2300      	movs	r3, #0
 8001636:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001638:	2300      	movs	r3, #0
 800163a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800163c:	2300      	movs	r3, #0
 800163e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001640:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001644:	2200      	movs	r2, #0
 8001646:	4619      	mov	r1, r3
 8001648:	4813      	ldr	r0, [pc, #76]	; (8001698 <MX_TIM15_Init+0x100>)
 800164a:	f006 fc2d 	bl	8007ea8 <HAL_TIM_PWM_ConfigChannel>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8001654:	f000 f8fa 	bl	800184c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001658:	2300      	movs	r3, #0
 800165a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800165c:	2300      	movs	r3, #0
 800165e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001660:	2300      	movs	r3, #0
 8001662:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001664:	2300      	movs	r3, #0
 8001666:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001668:	2300      	movs	r3, #0
 800166a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800166c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001670:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001672:	2300      	movs	r3, #0
 8001674:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001676:	1d3b      	adds	r3, r7, #4
 8001678:	4619      	mov	r1, r3
 800167a:	4807      	ldr	r0, [pc, #28]	; (8001698 <MX_TIM15_Init+0x100>)
 800167c:	f007 fc00 	bl	8008e80 <HAL_TIMEx_ConfigBreakDeadTime>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <MX_TIM15_Init+0xf2>
  {
    Error_Handler();
 8001686:	f000 f8e1 	bl	800184c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 800168a:	4803      	ldr	r0, [pc, #12]	; (8001698 <MX_TIM15_Init+0x100>)
 800168c:	f000 fda4 	bl	80021d8 <HAL_TIM_MspPostInit>

}
 8001690:	bf00      	nop
 8001692:	3758      	adds	r7, #88	; 0x58
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	20000728 	.word	0x20000728
 800169c:	40014000 	.word	0x40014000

080016a0 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80016a4:	bf00      	nop
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
	...

080016b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b08e      	sub	sp, #56	; 0x38
 80016b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ba:	2200      	movs	r2, #0
 80016bc:	601a      	str	r2, [r3, #0]
 80016be:	605a      	str	r2, [r3, #4]
 80016c0:	609a      	str	r2, [r3, #8]
 80016c2:	60da      	str	r2, [r3, #12]
 80016c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016c6:	4b5d      	ldr	r3, [pc, #372]	; (800183c <MX_GPIO_Init+0x18c>)
 80016c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ca:	4a5c      	ldr	r2, [pc, #368]	; (800183c <MX_GPIO_Init+0x18c>)
 80016cc:	f043 0310 	orr.w	r3, r3, #16
 80016d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016d2:	4b5a      	ldr	r3, [pc, #360]	; (800183c <MX_GPIO_Init+0x18c>)
 80016d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d6:	f003 0310 	and.w	r3, r3, #16
 80016da:	623b      	str	r3, [r7, #32]
 80016dc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016de:	4b57      	ldr	r3, [pc, #348]	; (800183c <MX_GPIO_Init+0x18c>)
 80016e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e2:	4a56      	ldr	r2, [pc, #344]	; (800183c <MX_GPIO_Init+0x18c>)
 80016e4:	f043 0304 	orr.w	r3, r3, #4
 80016e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016ea:	4b54      	ldr	r3, [pc, #336]	; (800183c <MX_GPIO_Init+0x18c>)
 80016ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ee:	f003 0304 	and.w	r3, r3, #4
 80016f2:	61fb      	str	r3, [r7, #28]
 80016f4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016f6:	4b51      	ldr	r3, [pc, #324]	; (800183c <MX_GPIO_Init+0x18c>)
 80016f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016fa:	4a50      	ldr	r2, [pc, #320]	; (800183c <MX_GPIO_Init+0x18c>)
 80016fc:	f043 0320 	orr.w	r3, r3, #32
 8001700:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001702:	4b4e      	ldr	r3, [pc, #312]	; (800183c <MX_GPIO_Init+0x18c>)
 8001704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001706:	f003 0320 	and.w	r3, r3, #32
 800170a:	61bb      	str	r3, [r7, #24]
 800170c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800170e:	4b4b      	ldr	r3, [pc, #300]	; (800183c <MX_GPIO_Init+0x18c>)
 8001710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001712:	4a4a      	ldr	r2, [pc, #296]	; (800183c <MX_GPIO_Init+0x18c>)
 8001714:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001718:	64d3      	str	r3, [r2, #76]	; 0x4c
 800171a:	4b48      	ldr	r3, [pc, #288]	; (800183c <MX_GPIO_Init+0x18c>)
 800171c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800171e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001722:	617b      	str	r3, [r7, #20]
 8001724:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001726:	4b45      	ldr	r3, [pc, #276]	; (800183c <MX_GPIO_Init+0x18c>)
 8001728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800172a:	4a44      	ldr	r2, [pc, #272]	; (800183c <MX_GPIO_Init+0x18c>)
 800172c:	f043 0301 	orr.w	r3, r3, #1
 8001730:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001732:	4b42      	ldr	r3, [pc, #264]	; (800183c <MX_GPIO_Init+0x18c>)
 8001734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	613b      	str	r3, [r7, #16]
 800173c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800173e:	4b3f      	ldr	r3, [pc, #252]	; (800183c <MX_GPIO_Init+0x18c>)
 8001740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001742:	4a3e      	ldr	r2, [pc, #248]	; (800183c <MX_GPIO_Init+0x18c>)
 8001744:	f043 0302 	orr.w	r3, r3, #2
 8001748:	64d3      	str	r3, [r2, #76]	; 0x4c
 800174a:	4b3c      	ldr	r3, [pc, #240]	; (800183c <MX_GPIO_Init+0x18c>)
 800174c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800174e:	f003 0302 	and.w	r3, r3, #2
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001756:	4b39      	ldr	r3, [pc, #228]	; (800183c <MX_GPIO_Init+0x18c>)
 8001758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800175a:	4a38      	ldr	r2, [pc, #224]	; (800183c <MX_GPIO_Init+0x18c>)
 800175c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001760:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001762:	4b36      	ldr	r3, [pc, #216]	; (800183c <MX_GPIO_Init+0x18c>)
 8001764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800176a:	60bb      	str	r3, [r7, #8]
 800176c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800176e:	4b33      	ldr	r3, [pc, #204]	; (800183c <MX_GPIO_Init+0x18c>)
 8001770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001772:	4a32      	ldr	r2, [pc, #200]	; (800183c <MX_GPIO_Init+0x18c>)
 8001774:	f043 0308 	orr.w	r3, r3, #8
 8001778:	64d3      	str	r3, [r2, #76]	; 0x4c
 800177a:	4b30      	ldr	r3, [pc, #192]	; (800183c <MX_GPIO_Init+0x18c>)
 800177c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800177e:	f003 0308 	and.w	r3, r3, #8
 8001782:	607b      	str	r3, [r7, #4]
 8001784:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8001786:	f002 fd03 	bl	8004190 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 800178a:	2200      	movs	r2, #0
 800178c:	217e      	movs	r1, #126	; 0x7e
 800178e:	482c      	ldr	r0, [pc, #176]	; (8001840 <MX_GPIO_Init+0x190>)
 8001790:	f002 fc12 	bl	8003fb8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pins : PG1 PG2 PG3 PG4
                           PG5 PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8001794:	237e      	movs	r3, #126	; 0x7e
 8001796:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001798:	2301      	movs	r3, #1
 800179a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179c:	2300      	movs	r3, #0
 800179e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a0:	2300      	movs	r3, #0
 80017a2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017a8:	4619      	mov	r1, r3
 80017aa:	4825      	ldr	r0, [pc, #148]	; (8001840 <MX_GPIO_Init+0x190>)
 80017ac:	f002 fa72 	bl	8003c94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80017b0:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80017b4:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b6:	2302      	movs	r3, #2
 80017b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ba:	2300      	movs	r3, #0
 80017bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017be:	2303      	movs	r3, #3
 80017c0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80017c2:	230c      	movs	r3, #12
 80017c4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ca:	4619      	mov	r1, r3
 80017cc:	481d      	ldr	r0, [pc, #116]	; (8001844 <MX_GPIO_Init+0x194>)
 80017ce:	f002 fa61 	bl	8003c94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80017d2:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80017d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d8:	2302      	movs	r3, #2
 80017da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017dc:	2300      	movs	r3, #0
 80017de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e0:	2303      	movs	r3, #3
 80017e2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80017e4:	230a      	movs	r3, #10
 80017e6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ec:	4619      	mov	r1, r3
 80017ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017f2:	f002 fa4f 	bl	8003c94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80017f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017fc:	2300      	movs	r3, #0
 80017fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001800:	2300      	movs	r3, #0
 8001802:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001804:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001808:	4619      	mov	r1, r3
 800180a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800180e:	f002 fa41 	bl	8003c94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001812:	2304      	movs	r3, #4
 8001814:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001816:	2302      	movs	r3, #2
 8001818:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181a:	2300      	movs	r3, #0
 800181c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800181e:	2303      	movs	r3, #3
 8001820:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001822:	230c      	movs	r3, #12
 8001824:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001826:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800182a:	4619      	mov	r1, r3
 800182c:	4806      	ldr	r0, [pc, #24]	; (8001848 <MX_GPIO_Init+0x198>)
 800182e:	f002 fa31 	bl	8003c94 <HAL_GPIO_Init>

}
 8001832:	bf00      	nop
 8001834:	3738      	adds	r7, #56	; 0x38
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	40021000 	.word	0x40021000
 8001840:	48001800 	.word	0x48001800
 8001844:	48000800 	.word	0x48000800
 8001848:	48000c00 	.word	0x48000c00

0800184c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001850:	b672      	cpsid	i
}
 8001852:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001854:	e7fe      	b.n	8001854 <Error_Handler+0x8>
	...

08001858 <rotor_control>:
 */

#include "rotor_control.h"


void rotor_control (uint8_t mode) {
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	4603      	mov	r3, r0
 8001860:	71fb      	strb	r3, [r7, #7]
	// mode 0 turn, mode 1 stop
	static uint8_t motor_pwm_val = 0; // 0 - 99 throttle control
	static uint8_t motor_h_bridge_in1 = 1;
	static uint8_t motor_h_bridge_in2 = 0;

	switch(mode) {
 8001862:	79fb      	ldrb	r3, [r7, #7]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d109      	bne.n	800187c <rotor_control+0x24>
		case 0 :
			motor_pwm_val = 80;
 8001868:	4b15      	ldr	r3, [pc, #84]	; (80018c0 <rotor_control+0x68>)
 800186a:	2250      	movs	r2, #80	; 0x50
 800186c:	701a      	strb	r2, [r3, #0]
			motor_h_bridge_in1 = 1;
 800186e:	4b15      	ldr	r3, [pc, #84]	; (80018c4 <rotor_control+0x6c>)
 8001870:	2201      	movs	r2, #1
 8001872:	701a      	strb	r2, [r3, #0]
			motor_h_bridge_in2 = 0;
 8001874:	4b14      	ldr	r3, [pc, #80]	; (80018c8 <rotor_control+0x70>)
 8001876:	2200      	movs	r2, #0
 8001878:	701a      	strb	r2, [r3, #0]
			break;
 800187a:	e009      	b.n	8001890 <rotor_control+0x38>
		default:
			motor_pwm_val = 0;
 800187c:	4b10      	ldr	r3, [pc, #64]	; (80018c0 <rotor_control+0x68>)
 800187e:	2200      	movs	r2, #0
 8001880:	701a      	strb	r2, [r3, #0]
			motor_h_bridge_in1 = 1;
 8001882:	4b10      	ldr	r3, [pc, #64]	; (80018c4 <rotor_control+0x6c>)
 8001884:	2201      	movs	r2, #1
 8001886:	701a      	strb	r2, [r3, #0]
			motor_h_bridge_in2 = 0;
 8001888:	4b0f      	ldr	r3, [pc, #60]	; (80018c8 <rotor_control+0x70>)
 800188a:	2200      	movs	r2, #0
 800188c:	701a      	strb	r2, [r3, #0]
			break;
 800188e:	bf00      	nop
	}

	htim4.Instance->CCR2 = motor_pwm_val; // PD13
 8001890:	4b0b      	ldr	r3, [pc, #44]	; (80018c0 <rotor_control+0x68>)
 8001892:	781a      	ldrb	r2, [r3, #0]
 8001894:	4b0d      	ldr	r3, [pc, #52]	; (80018cc <rotor_control+0x74>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2,  motor_h_bridge_in1);
 800189a:	4b0a      	ldr	r3, [pc, #40]	; (80018c4 <rotor_control+0x6c>)
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	461a      	mov	r2, r3
 80018a0:	2104      	movs	r1, #4
 80018a2:	480b      	ldr	r0, [pc, #44]	; (80018d0 <rotor_control+0x78>)
 80018a4:	f002 fb88 	bl	8003fb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1,  motor_h_bridge_in2);
 80018a8:	4b07      	ldr	r3, [pc, #28]	; (80018c8 <rotor_control+0x70>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	461a      	mov	r2, r3
 80018ae:	2102      	movs	r1, #2
 80018b0:	4807      	ldr	r0, [pc, #28]	; (80018d0 <rotor_control+0x78>)
 80018b2:	f002 fb81 	bl	8003fb8 <HAL_GPIO_WritePin>
}
 80018b6:	bf00      	nop
 80018b8:	3708      	adds	r7, #8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	20000774 	.word	0x20000774
 80018c4:	20000000 	.word	0x20000000
 80018c8:	20000775 	.word	0x20000775
 80018cc:	200006dc 	.word	0x200006dc
 80018d0:	48001800 	.word	0x48001800

080018d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018da:	4b0f      	ldr	r3, [pc, #60]	; (8001918 <HAL_MspInit+0x44>)
 80018dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018de:	4a0e      	ldr	r2, [pc, #56]	; (8001918 <HAL_MspInit+0x44>)
 80018e0:	f043 0301 	orr.w	r3, r3, #1
 80018e4:	6613      	str	r3, [r2, #96]	; 0x60
 80018e6:	4b0c      	ldr	r3, [pc, #48]	; (8001918 <HAL_MspInit+0x44>)
 80018e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018ea:	f003 0301 	and.w	r3, r3, #1
 80018ee:	607b      	str	r3, [r7, #4]
 80018f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018f2:	4b09      	ldr	r3, [pc, #36]	; (8001918 <HAL_MspInit+0x44>)
 80018f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018f6:	4a08      	ldr	r2, [pc, #32]	; (8001918 <HAL_MspInit+0x44>)
 80018f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018fc:	6593      	str	r3, [r2, #88]	; 0x58
 80018fe:	4b06      	ldr	r3, [pc, #24]	; (8001918 <HAL_MspInit+0x44>)
 8001900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001906:	603b      	str	r3, [r7, #0]
 8001908:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800190a:	bf00      	nop
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	40021000 	.word	0x40021000

0800191c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b08c      	sub	sp, #48	; 0x30
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001924:	f107 031c 	add.w	r3, r7, #28
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	605a      	str	r2, [r3, #4]
 800192e:	609a      	str	r2, [r3, #8]
 8001930:	60da      	str	r2, [r3, #12]
 8001932:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a2d      	ldr	r2, [pc, #180]	; (80019f0 <HAL_ADC_MspInit+0xd4>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d154      	bne.n	80019e8 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800193e:	4b2d      	ldr	r3, [pc, #180]	; (80019f4 <HAL_ADC_MspInit+0xd8>)
 8001940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001942:	4a2c      	ldr	r2, [pc, #176]	; (80019f4 <HAL_ADC_MspInit+0xd8>)
 8001944:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001948:	64d3      	str	r3, [r2, #76]	; 0x4c
 800194a:	4b2a      	ldr	r3, [pc, #168]	; (80019f4 <HAL_ADC_MspInit+0xd8>)
 800194c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800194e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001952:	61bb      	str	r3, [r7, #24]
 8001954:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001956:	4b27      	ldr	r3, [pc, #156]	; (80019f4 <HAL_ADC_MspInit+0xd8>)
 8001958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800195a:	4a26      	ldr	r2, [pc, #152]	; (80019f4 <HAL_ADC_MspInit+0xd8>)
 800195c:	f043 0304 	orr.w	r3, r3, #4
 8001960:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001962:	4b24      	ldr	r3, [pc, #144]	; (80019f4 <HAL_ADC_MspInit+0xd8>)
 8001964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001966:	f003 0304 	and.w	r3, r3, #4
 800196a:	617b      	str	r3, [r7, #20]
 800196c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800196e:	4b21      	ldr	r3, [pc, #132]	; (80019f4 <HAL_ADC_MspInit+0xd8>)
 8001970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001972:	4a20      	ldr	r2, [pc, #128]	; (80019f4 <HAL_ADC_MspInit+0xd8>)
 8001974:	f043 0301 	orr.w	r3, r3, #1
 8001978:	64d3      	str	r3, [r2, #76]	; 0x4c
 800197a:	4b1e      	ldr	r3, [pc, #120]	; (80019f4 <HAL_ADC_MspInit+0xd8>)
 800197c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	613b      	str	r3, [r7, #16]
 8001984:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001986:	4b1b      	ldr	r3, [pc, #108]	; (80019f4 <HAL_ADC_MspInit+0xd8>)
 8001988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800198a:	4a1a      	ldr	r2, [pc, #104]	; (80019f4 <HAL_ADC_MspInit+0xd8>)
 800198c:	f043 0302 	orr.w	r3, r3, #2
 8001990:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001992:	4b18      	ldr	r3, [pc, #96]	; (80019f4 <HAL_ADC_MspInit+0xd8>)
 8001994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	60fb      	str	r3, [r7, #12]
 800199c:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN8
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800199e:	233f      	movs	r3, #63	; 0x3f
 80019a0:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80019a2:	230b      	movs	r3, #11
 80019a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a6:	2300      	movs	r3, #0
 80019a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019aa:	f107 031c 	add.w	r3, r7, #28
 80019ae:	4619      	mov	r1, r3
 80019b0:	4811      	ldr	r0, [pc, #68]	; (80019f8 <HAL_ADC_MspInit+0xdc>)
 80019b2:	f002 f96f 	bl	8003c94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 80019b6:	230a      	movs	r3, #10
 80019b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80019ba:	230b      	movs	r3, #11
 80019bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019be:	2300      	movs	r3, #0
 80019c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019c2:	f107 031c 	add.w	r3, r7, #28
 80019c6:	4619      	mov	r1, r3
 80019c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019cc:	f002 f962 	bl	8003c94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80019d0:	2302      	movs	r3, #2
 80019d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80019d4:	230b      	movs	r3, #11
 80019d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d8:	2300      	movs	r3, #0
 80019da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019dc:	f107 031c 	add.w	r3, r7, #28
 80019e0:	4619      	mov	r1, r3
 80019e2:	4806      	ldr	r0, [pc, #24]	; (80019fc <HAL_ADC_MspInit+0xe0>)
 80019e4:	f002 f956 	bl	8003c94 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80019e8:	bf00      	nop
 80019ea:	3730      	adds	r7, #48	; 0x30
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	50040000 	.word	0x50040000
 80019f4:	40021000 	.word	0x40021000
 80019f8:	48000800 	.word	0x48000800
 80019fc:	48000400 	.word	0x48000400

08001a00 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b08a      	sub	sp, #40	; 0x28
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a08:	f107 0314 	add.w	r3, r7, #20
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	605a      	str	r2, [r3, #4]
 8001a12:	609a      	str	r2, [r3, #8]
 8001a14:	60da      	str	r2, [r3, #12]
 8001a16:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a17      	ldr	r2, [pc, #92]	; (8001a7c <HAL_CAN_MspInit+0x7c>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d127      	bne.n	8001a72 <HAL_CAN_MspInit+0x72>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001a22:	4b17      	ldr	r3, [pc, #92]	; (8001a80 <HAL_CAN_MspInit+0x80>)
 8001a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a26:	4a16      	ldr	r2, [pc, #88]	; (8001a80 <HAL_CAN_MspInit+0x80>)
 8001a28:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a2c:	6593      	str	r3, [r2, #88]	; 0x58
 8001a2e:	4b14      	ldr	r3, [pc, #80]	; (8001a80 <HAL_CAN_MspInit+0x80>)
 8001a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a36:	613b      	str	r3, [r7, #16]
 8001a38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a3a:	4b11      	ldr	r3, [pc, #68]	; (8001a80 <HAL_CAN_MspInit+0x80>)
 8001a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a3e:	4a10      	ldr	r2, [pc, #64]	; (8001a80 <HAL_CAN_MspInit+0x80>)
 8001a40:	f043 0308 	orr.w	r3, r3, #8
 8001a44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a46:	4b0e      	ldr	r3, [pc, #56]	; (8001a80 <HAL_CAN_MspInit+0x80>)
 8001a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a4a:	f003 0308 	and.w	r3, r3, #8
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a52:	2303      	movs	r3, #3
 8001a54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a56:	2302      	movs	r3, #2
 8001a58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001a62:	2309      	movs	r3, #9
 8001a64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a66:	f107 0314 	add.w	r3, r7, #20
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4805      	ldr	r0, [pc, #20]	; (8001a84 <HAL_CAN_MspInit+0x84>)
 8001a6e:	f002 f911 	bl	8003c94 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001a72:	bf00      	nop
 8001a74:	3728      	adds	r7, #40	; 0x28
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	40006400 	.word	0x40006400
 8001a80:	40021000 	.word	0x40021000
 8001a84:	48000c00 	.word	0x48000c00

08001a88 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b08a      	sub	sp, #40	; 0x28
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a90:	f107 0314 	add.w	r3, r7, #20
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	605a      	str	r2, [r3, #4]
 8001a9a:	609a      	str	r2, [r3, #8]
 8001a9c:	60da      	str	r2, [r3, #12]
 8001a9e:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP1)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a1e      	ldr	r2, [pc, #120]	; (8001b20 <HAL_COMP_MspInit+0x98>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d118      	bne.n	8001adc <HAL_COMP_MspInit+0x54>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aaa:	4b1e      	ldr	r3, [pc, #120]	; (8001b24 <HAL_COMP_MspInit+0x9c>)
 8001aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aae:	4a1d      	ldr	r2, [pc, #116]	; (8001b24 <HAL_COMP_MspInit+0x9c>)
 8001ab0:	f043 0302 	orr.w	r3, r3, #2
 8001ab4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ab6:	4b1b      	ldr	r3, [pc, #108]	; (8001b24 <HAL_COMP_MspInit+0x9c>)
 8001ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	613b      	str	r3, [r7, #16]
 8001ac0:	693b      	ldr	r3, [r7, #16]
    /**COMP1 GPIO Configuration
    PB2     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ac2:	2304      	movs	r3, #4
 8001ac4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aca:	2300      	movs	r3, #0
 8001acc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ace:	f107 0314 	add.w	r3, r7, #20
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	4814      	ldr	r0, [pc, #80]	; (8001b28 <HAL_COMP_MspInit+0xa0>)
 8001ad6:	f002 f8dd 	bl	8003c94 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }

}
 8001ada:	e01c      	b.n	8001b16 <HAL_COMP_MspInit+0x8e>
  else if(hcomp->Instance==COMP2)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a12      	ldr	r2, [pc, #72]	; (8001b2c <HAL_COMP_MspInit+0xa4>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d117      	bne.n	8001b16 <HAL_COMP_MspInit+0x8e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ae6:	4b0f      	ldr	r3, [pc, #60]	; (8001b24 <HAL_COMP_MspInit+0x9c>)
 8001ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aea:	4a0e      	ldr	r2, [pc, #56]	; (8001b24 <HAL_COMP_MspInit+0x9c>)
 8001aec:	f043 0302 	orr.w	r3, r3, #2
 8001af0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001af2:	4b0c      	ldr	r3, [pc, #48]	; (8001b24 <HAL_COMP_MspInit+0x9c>)
 8001af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	60fb      	str	r3, [r7, #12]
 8001afc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001afe:	23c0      	movs	r3, #192	; 0xc0
 8001b00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b02:	2303      	movs	r3, #3
 8001b04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b06:	2300      	movs	r3, #0
 8001b08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b0a:	f107 0314 	add.w	r3, r7, #20
 8001b0e:	4619      	mov	r1, r3
 8001b10:	4805      	ldr	r0, [pc, #20]	; (8001b28 <HAL_COMP_MspInit+0xa0>)
 8001b12:	f002 f8bf 	bl	8003c94 <HAL_GPIO_Init>
}
 8001b16:	bf00      	nop
 8001b18:	3728      	adds	r7, #40	; 0x28
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	40010200 	.word	0x40010200
 8001b24:	40021000 	.word	0x40021000
 8001b28:	48000400 	.word	0x48000400
 8001b2c:	40010204 	.word	0x40010204

08001b30 <HAL_SMBUS_MspInit>:
* This function configures the hardware resources used in this example
* @param hsmbus: SMBUS handle pointer
* @retval None
*/
void HAL_SMBUS_MspInit(SMBUS_HandleTypeDef* hsmbus)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b0b0      	sub	sp, #192	; 0xc0
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b38:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]
 8001b40:	605a      	str	r2, [r3, #4]
 8001b42:	609a      	str	r2, [r3, #8]
 8001b44:	60da      	str	r2, [r3, #12]
 8001b46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b48:	f107 0318 	add.w	r3, r7, #24
 8001b4c:	2294      	movs	r2, #148	; 0x94
 8001b4e:	2100      	movs	r1, #0
 8001b50:	4618      	mov	r0, r3
 8001b52:	f008 f91f 	bl	8009d94 <memset>
  if(hsmbus->Instance==I2C1)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a42      	ldr	r2, [pc, #264]	; (8001c64 <HAL_SMBUS_MspInit+0x134>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d13c      	bne.n	8001bda <HAL_SMBUS_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001b60:	2340      	movs	r3, #64	; 0x40
 8001b62:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001b64:	2300      	movs	r3, #0
 8001b66:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b68:	f107 0318 	add.w	r3, r7, #24
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f003 f9f7 	bl	8004f60 <HAL_RCCEx_PeriphCLKConfig>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <HAL_SMBUS_MspInit+0x4c>
    {
      Error_Handler();
 8001b78:	f7ff fe68 	bl	800184c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b7c:	4b3a      	ldr	r3, [pc, #232]	; (8001c68 <HAL_SMBUS_MspInit+0x138>)
 8001b7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b80:	4a39      	ldr	r2, [pc, #228]	; (8001c68 <HAL_SMBUS_MspInit+0x138>)
 8001b82:	f043 0302 	orr.w	r3, r3, #2
 8001b86:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b88:	4b37      	ldr	r3, [pc, #220]	; (8001c68 <HAL_SMBUS_MspInit+0x138>)
 8001b8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b8c:	f003 0302 	and.w	r3, r3, #2
 8001b90:	617b      	str	r3, [r7, #20]
 8001b92:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b94:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b9c:	2312      	movs	r3, #18
 8001b9e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001bae:	2304      	movs	r3, #4
 8001bb0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bb4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001bb8:	4619      	mov	r1, r3
 8001bba:	482c      	ldr	r0, [pc, #176]	; (8001c6c <HAL_SMBUS_MspInit+0x13c>)
 8001bbc:	f002 f86a 	bl	8003c94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bc0:	4b29      	ldr	r3, [pc, #164]	; (8001c68 <HAL_SMBUS_MspInit+0x138>)
 8001bc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bc4:	4a28      	ldr	r2, [pc, #160]	; (8001c68 <HAL_SMBUS_MspInit+0x138>)
 8001bc6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bca:	6593      	str	r3, [r2, #88]	; 0x58
 8001bcc:	4b26      	ldr	r3, [pc, #152]	; (8001c68 <HAL_SMBUS_MspInit+0x138>)
 8001bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bd4:	613b      	str	r3, [r7, #16]
 8001bd6:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001bd8:	e03f      	b.n	8001c5a <HAL_SMBUS_MspInit+0x12a>
  else if(hsmbus->Instance==I2C2)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a24      	ldr	r2, [pc, #144]	; (8001c70 <HAL_SMBUS_MspInit+0x140>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d13a      	bne.n	8001c5a <HAL_SMBUS_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001be4:	2380      	movs	r3, #128	; 0x80
 8001be6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001be8:	2300      	movs	r3, #0
 8001bea:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bec:	f107 0318 	add.w	r3, r7, #24
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f003 f9b5 	bl	8004f60 <HAL_RCCEx_PeriphCLKConfig>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <HAL_SMBUS_MspInit+0xd0>
      Error_Handler();
 8001bfc:	f7ff fe26 	bl	800184c <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c00:	4b19      	ldr	r3, [pc, #100]	; (8001c68 <HAL_SMBUS_MspInit+0x138>)
 8001c02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c04:	4a18      	ldr	r2, [pc, #96]	; (8001c68 <HAL_SMBUS_MspInit+0x138>)
 8001c06:	f043 0320 	orr.w	r3, r3, #32
 8001c0a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c0c:	4b16      	ldr	r3, [pc, #88]	; (8001c68 <HAL_SMBUS_MspInit+0x138>)
 8001c0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c10:	f003 0320 	and.w	r3, r3, #32
 8001c14:	60fb      	str	r3, [r7, #12]
 8001c16:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001c18:	2307      	movs	r3, #7
 8001c1a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c1e:	2312      	movs	r3, #18
 8001c20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c24:	2301      	movs	r3, #1
 8001c26:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001c30:	2304      	movs	r3, #4
 8001c32:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c36:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	480d      	ldr	r0, [pc, #52]	; (8001c74 <HAL_SMBUS_MspInit+0x144>)
 8001c3e:	f002 f829 	bl	8003c94 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001c42:	4b09      	ldr	r3, [pc, #36]	; (8001c68 <HAL_SMBUS_MspInit+0x138>)
 8001c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c46:	4a08      	ldr	r2, [pc, #32]	; (8001c68 <HAL_SMBUS_MspInit+0x138>)
 8001c48:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c4c:	6593      	str	r3, [r2, #88]	; 0x58
 8001c4e:	4b06      	ldr	r3, [pc, #24]	; (8001c68 <HAL_SMBUS_MspInit+0x138>)
 8001c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c56:	60bb      	str	r3, [r7, #8]
 8001c58:	68bb      	ldr	r3, [r7, #8]
}
 8001c5a:	bf00      	nop
 8001c5c:	37c0      	adds	r7, #192	; 0xc0
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	40005400 	.word	0x40005400
 8001c68:	40021000 	.word	0x40021000
 8001c6c:	48000400 	.word	0x48000400
 8001c70:	40005800 	.word	0x40005800
 8001c74:	48001400 	.word	0x48001400

08001c78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b0b2      	sub	sp, #200	; 0xc8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c80:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	605a      	str	r2, [r3, #4]
 8001c8a:	609a      	str	r2, [r3, #8]
 8001c8c:	60da      	str	r2, [r3, #12]
 8001c8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c90:	f107 0320 	add.w	r3, r7, #32
 8001c94:	2294      	movs	r2, #148	; 0x94
 8001c96:	2100      	movs	r1, #0
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f008 f87b 	bl	8009d94 <memset>
  if(huart->Instance==LPUART1)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a64      	ldr	r2, [pc, #400]	; (8001e34 <HAL_UART_MspInit+0x1bc>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d13e      	bne.n	8001d26 <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001ca8:	2320      	movs	r3, #32
 8001caa:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001cac:	2300      	movs	r3, #0
 8001cae:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cb0:	f107 0320 	add.w	r3, r7, #32
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f003 f953 	bl	8004f60 <HAL_RCCEx_PeriphCLKConfig>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001cc0:	f7ff fdc4 	bl	800184c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001cc4:	4b5c      	ldr	r3, [pc, #368]	; (8001e38 <HAL_UART_MspInit+0x1c0>)
 8001cc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cc8:	4a5b      	ldr	r2, [pc, #364]	; (8001e38 <HAL_UART_MspInit+0x1c0>)
 8001cca:	f043 0301 	orr.w	r3, r3, #1
 8001cce:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001cd0:	4b59      	ldr	r3, [pc, #356]	; (8001e38 <HAL_UART_MspInit+0x1c0>)
 8001cd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cd4:	f003 0301 	and.w	r3, r3, #1
 8001cd8:	61fb      	str	r3, [r7, #28]
 8001cda:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001cdc:	4b56      	ldr	r3, [pc, #344]	; (8001e38 <HAL_UART_MspInit+0x1c0>)
 8001cde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ce0:	4a55      	ldr	r2, [pc, #340]	; (8001e38 <HAL_UART_MspInit+0x1c0>)
 8001ce2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ce6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ce8:	4b53      	ldr	r3, [pc, #332]	; (8001e38 <HAL_UART_MspInit+0x1c0>)
 8001cea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cf0:	61bb      	str	r3, [r7, #24]
 8001cf2:	69bb      	ldr	r3, [r7, #24]
    HAL_PWREx_EnableVddIO2();
 8001cf4:	f002 fa4c 	bl	8004190 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001cf8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001cfc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d00:	2302      	movs	r3, #2
 8001d02:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d06:	2300      	movs	r3, #0
 8001d08:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001d12:	2308      	movs	r3, #8
 8001d14:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d18:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4847      	ldr	r0, [pc, #284]	; (8001e3c <HAL_UART_MspInit+0x1c4>)
 8001d20:	f001 ffb8 	bl	8003c94 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001d24:	e081      	b.n	8001e2a <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART2)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a45      	ldr	r2, [pc, #276]	; (8001e40 <HAL_UART_MspInit+0x1c8>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d13b      	bne.n	8001da8 <HAL_UART_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001d30:	2302      	movs	r3, #2
 8001d32:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001d34:	2300      	movs	r3, #0
 8001d36:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d38:	f107 0320 	add.w	r3, r7, #32
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f003 f90f 	bl	8004f60 <HAL_RCCEx_PeriphCLKConfig>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8001d48:	f7ff fd80 	bl	800184c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d4c:	4b3a      	ldr	r3, [pc, #232]	; (8001e38 <HAL_UART_MspInit+0x1c0>)
 8001d4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d50:	4a39      	ldr	r2, [pc, #228]	; (8001e38 <HAL_UART_MspInit+0x1c0>)
 8001d52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d56:	6593      	str	r3, [r2, #88]	; 0x58
 8001d58:	4b37      	ldr	r3, [pc, #220]	; (8001e38 <HAL_UART_MspInit+0x1c0>)
 8001d5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d60:	617b      	str	r3, [r7, #20]
 8001d62:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d64:	4b34      	ldr	r3, [pc, #208]	; (8001e38 <HAL_UART_MspInit+0x1c0>)
 8001d66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d68:	4a33      	ldr	r2, [pc, #204]	; (8001e38 <HAL_UART_MspInit+0x1c0>)
 8001d6a:	f043 0308 	orr.w	r3, r3, #8
 8001d6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d70:	4b31      	ldr	r3, [pc, #196]	; (8001e38 <HAL_UART_MspInit+0x1c0>)
 8001d72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d74:	f003 0308 	and.w	r3, r3, #8
 8001d78:	613b      	str	r3, [r7, #16]
 8001d7a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001d7c:	2378      	movs	r3, #120	; 0x78
 8001d7e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d82:	2302      	movs	r3, #2
 8001d84:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d94:	2307      	movs	r3, #7
 8001d96:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d9a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001d9e:	4619      	mov	r1, r3
 8001da0:	4828      	ldr	r0, [pc, #160]	; (8001e44 <HAL_UART_MspInit+0x1cc>)
 8001da2:	f001 ff77 	bl	8003c94 <HAL_GPIO_Init>
}
 8001da6:	e040      	b.n	8001e2a <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART3)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a26      	ldr	r2, [pc, #152]	; (8001e48 <HAL_UART_MspInit+0x1d0>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d13b      	bne.n	8001e2a <HAL_UART_MspInit+0x1b2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001db2:	2304      	movs	r3, #4
 8001db4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001db6:	2300      	movs	r3, #0
 8001db8:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001dba:	f107 0320 	add.w	r3, r7, #32
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f003 f8ce 	bl	8004f60 <HAL_RCCEx_PeriphCLKConfig>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <HAL_UART_MspInit+0x156>
      Error_Handler();
 8001dca:	f7ff fd3f 	bl	800184c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001dce:	4b1a      	ldr	r3, [pc, #104]	; (8001e38 <HAL_UART_MspInit+0x1c0>)
 8001dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dd2:	4a19      	ldr	r2, [pc, #100]	; (8001e38 <HAL_UART_MspInit+0x1c0>)
 8001dd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dd8:	6593      	str	r3, [r2, #88]	; 0x58
 8001dda:	4b17      	ldr	r3, [pc, #92]	; (8001e38 <HAL_UART_MspInit+0x1c0>)
 8001ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001de2:	60fb      	str	r3, [r7, #12]
 8001de4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001de6:	4b14      	ldr	r3, [pc, #80]	; (8001e38 <HAL_UART_MspInit+0x1c0>)
 8001de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dea:	4a13      	ldr	r2, [pc, #76]	; (8001e38 <HAL_UART_MspInit+0x1c0>)
 8001dec:	f043 0308 	orr.w	r3, r3, #8
 8001df0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001df2:	4b11      	ldr	r3, [pc, #68]	; (8001e38 <HAL_UART_MspInit+0x1c0>)
 8001df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001df6:	f003 0308 	and.w	r3, r3, #8
 8001dfa:	60bb      	str	r3, [r7, #8]
 8001dfc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001dfe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e02:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e06:	2302      	movs	r3, #2
 8001e08:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e12:	2303      	movs	r3, #3
 8001e14:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001e18:	2307      	movs	r3, #7
 8001e1a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e1e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001e22:	4619      	mov	r1, r3
 8001e24:	4807      	ldr	r0, [pc, #28]	; (8001e44 <HAL_UART_MspInit+0x1cc>)
 8001e26:	f001 ff35 	bl	8003c94 <HAL_GPIO_Init>
}
 8001e2a:	bf00      	nop
 8001e2c:	37c8      	adds	r7, #200	; 0xc8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	40008000 	.word	0x40008000
 8001e38:	40021000 	.word	0x40021000
 8001e3c:	48001800 	.word	0x48001800
 8001e40:	40004400 	.word	0x40004400
 8001e44:	48000c00 	.word	0x48000c00
 8001e48:	40004800 	.word	0x40004800

08001e4c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b08c      	sub	sp, #48	; 0x30
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e54:	f107 031c 	add.w	r3, r7, #28
 8001e58:	2200      	movs	r2, #0
 8001e5a:	601a      	str	r2, [r3, #0]
 8001e5c:	605a      	str	r2, [r3, #4]
 8001e5e:	609a      	str	r2, [r3, #8]
 8001e60:	60da      	str	r2, [r3, #12]
 8001e62:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a2e      	ldr	r2, [pc, #184]	; (8001f24 <HAL_SPI_MspInit+0xd8>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d129      	bne.n	8001ec2 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e6e:	4b2e      	ldr	r3, [pc, #184]	; (8001f28 <HAL_SPI_MspInit+0xdc>)
 8001e70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e72:	4a2d      	ldr	r2, [pc, #180]	; (8001f28 <HAL_SPI_MspInit+0xdc>)
 8001e74:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e78:	6613      	str	r3, [r2, #96]	; 0x60
 8001e7a:	4b2b      	ldr	r3, [pc, #172]	; (8001f28 <HAL_SPI_MspInit+0xdc>)
 8001e7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e82:	61bb      	str	r3, [r7, #24]
 8001e84:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e86:	4b28      	ldr	r3, [pc, #160]	; (8001f28 <HAL_SPI_MspInit+0xdc>)
 8001e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e8a:	4a27      	ldr	r2, [pc, #156]	; (8001f28 <HAL_SPI_MspInit+0xdc>)
 8001e8c:	f043 0301 	orr.w	r3, r3, #1
 8001e90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e92:	4b25      	ldr	r3, [pc, #148]	; (8001f28 <HAL_SPI_MspInit+0xdc>)
 8001e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	617b      	str	r3, [r7, #20]
 8001e9c:	697b      	ldr	r3, [r7, #20]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001e9e:	23f0      	movs	r3, #240	; 0xf0
 8001ea0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001eae:	2305      	movs	r3, #5
 8001eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eb2:	f107 031c 	add.w	r3, r7, #28
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ebc:	f001 feea 	bl	8003c94 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001ec0:	e02c      	b.n	8001f1c <HAL_SPI_MspInit+0xd0>
  else if(hspi->Instance==SPI3)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a19      	ldr	r2, [pc, #100]	; (8001f2c <HAL_SPI_MspInit+0xe0>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d127      	bne.n	8001f1c <HAL_SPI_MspInit+0xd0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001ecc:	4b16      	ldr	r3, [pc, #88]	; (8001f28 <HAL_SPI_MspInit+0xdc>)
 8001ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed0:	4a15      	ldr	r2, [pc, #84]	; (8001f28 <HAL_SPI_MspInit+0xdc>)
 8001ed2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ed6:	6593      	str	r3, [r2, #88]	; 0x58
 8001ed8:	4b13      	ldr	r3, [pc, #76]	; (8001f28 <HAL_SPI_MspInit+0xdc>)
 8001eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001edc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ee0:	613b      	str	r3, [r7, #16]
 8001ee2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ee4:	4b10      	ldr	r3, [pc, #64]	; (8001f28 <HAL_SPI_MspInit+0xdc>)
 8001ee6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ee8:	4a0f      	ldr	r2, [pc, #60]	; (8001f28 <HAL_SPI_MspInit+0xdc>)
 8001eea:	f043 0302 	orr.w	r3, r3, #2
 8001eee:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ef0:	4b0d      	ldr	r3, [pc, #52]	; (8001f28 <HAL_SPI_MspInit+0xdc>)
 8001ef2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ef4:	f003 0302 	and.w	r3, r3, #2
 8001ef8:	60fb      	str	r3, [r7, #12]
 8001efa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001efc:	2338      	movs	r3, #56	; 0x38
 8001efe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f00:	2302      	movs	r3, #2
 8001f02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f04:	2300      	movs	r3, #0
 8001f06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001f0c:	2306      	movs	r3, #6
 8001f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f10:	f107 031c 	add.w	r3, r7, #28
 8001f14:	4619      	mov	r1, r3
 8001f16:	4806      	ldr	r0, [pc, #24]	; (8001f30 <HAL_SPI_MspInit+0xe4>)
 8001f18:	f001 febc 	bl	8003c94 <HAL_GPIO_Init>
}
 8001f1c:	bf00      	nop
 8001f1e:	3730      	adds	r7, #48	; 0x30
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	40013000 	.word	0x40013000
 8001f28:	40021000 	.word	0x40021000
 8001f2c:	40003c00 	.word	0x40003c00
 8001f30:	48000400 	.word	0x48000400

08001f34 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b08a      	sub	sp, #40	; 0x28
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f3c:	f107 0314 	add.w	r3, r7, #20
 8001f40:	2200      	movs	r2, #0
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	605a      	str	r2, [r3, #4]
 8001f46:	609a      	str	r2, [r3, #8]
 8001f48:	60da      	str	r2, [r3, #12]
 8001f4a:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a35      	ldr	r2, [pc, #212]	; (8002028 <HAL_TIM_PWM_MspInit+0xf4>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d152      	bne.n	8001ffc <HAL_TIM_PWM_MspInit+0xc8>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f56:	4b35      	ldr	r3, [pc, #212]	; (800202c <HAL_TIM_PWM_MspInit+0xf8>)
 8001f58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f5a:	4a34      	ldr	r2, [pc, #208]	; (800202c <HAL_TIM_PWM_MspInit+0xf8>)
 8001f5c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f60:	6613      	str	r3, [r2, #96]	; 0x60
 8001f62:	4b32      	ldr	r3, [pc, #200]	; (800202c <HAL_TIM_PWM_MspInit+0xf8>)
 8001f64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f6a:	613b      	str	r3, [r7, #16]
 8001f6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f6e:	4b2f      	ldr	r3, [pc, #188]	; (800202c <HAL_TIM_PWM_MspInit+0xf8>)
 8001f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f72:	4a2e      	ldr	r2, [pc, #184]	; (800202c <HAL_TIM_PWM_MspInit+0xf8>)
 8001f74:	f043 0310 	orr.w	r3, r3, #16
 8001f78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f7a:	4b2c      	ldr	r3, [pc, #176]	; (800202c <HAL_TIM_PWM_MspInit+0xf8>)
 8001f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f7e:	f003 0310 	and.w	r3, r3, #16
 8001f82:	60fb      	str	r3, [r7, #12]
 8001f84:	68fb      	ldr	r3, [r7, #12]
    PE7     ------> TIM1_ETR
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_BKIN2
    PE15     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001f86:	2380      	movs	r3, #128	; 0x80
 8001f88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f92:	2300      	movs	r3, #0
 8001f94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001f96:	2301      	movs	r3, #1
 8001f98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f9a:	f107 0314 	add.w	r3, r7, #20
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	4823      	ldr	r0, [pc, #140]	; (8002030 <HAL_TIM_PWM_MspInit+0xfc>)
 8001fa2:	f001 fe77 	bl	8003c94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001fa6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001faa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fac:	2302      	movs	r3, #2
 8001fae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fbc:	f107 0314 	add.w	r3, r7, #20
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	481b      	ldr	r0, [pc, #108]	; (8002030 <HAL_TIM_PWM_MspInit+0xfc>)
 8001fc4:	f001 fe66 	bl	8003c94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001fc8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001fcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fce:	2302      	movs	r3, #2
 8001fd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fde:	f107 0314 	add.w	r3, r7, #20
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	4812      	ldr	r0, [pc, #72]	; (8002030 <HAL_TIM_PWM_MspInit+0xfc>)
 8001fe6:	f001 fe55 	bl	8003c94 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001fea:	2200      	movs	r2, #0
 8001fec:	2100      	movs	r1, #0
 8001fee:	201b      	movs	r0, #27
 8001ff0:	f001 fe0b 	bl	8003c0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001ff4:	201b      	movs	r0, #27
 8001ff6:	f001 fe24 	bl	8003c42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001ffa:	e010      	b.n	800201e <HAL_TIM_PWM_MspInit+0xea>
  else if(htim_pwm->Instance==TIM15)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a0c      	ldr	r2, [pc, #48]	; (8002034 <HAL_TIM_PWM_MspInit+0x100>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d10b      	bne.n	800201e <HAL_TIM_PWM_MspInit+0xea>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002006:	4b09      	ldr	r3, [pc, #36]	; (800202c <HAL_TIM_PWM_MspInit+0xf8>)
 8002008:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800200a:	4a08      	ldr	r2, [pc, #32]	; (800202c <HAL_TIM_PWM_MspInit+0xf8>)
 800200c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002010:	6613      	str	r3, [r2, #96]	; 0x60
 8002012:	4b06      	ldr	r3, [pc, #24]	; (800202c <HAL_TIM_PWM_MspInit+0xf8>)
 8002014:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002016:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800201a:	60bb      	str	r3, [r7, #8]
 800201c:	68bb      	ldr	r3, [r7, #8]
}
 800201e:	bf00      	nop
 8002020:	3728      	adds	r7, #40	; 0x28
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	40012c00 	.word	0x40012c00
 800202c:	40021000 	.word	0x40021000
 8002030:	48001000 	.word	0x48001000
 8002034:	40014000 	.word	0x40014000

08002038 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b08e      	sub	sp, #56	; 0x38
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002040:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002044:	2200      	movs	r2, #0
 8002046:	601a      	str	r2, [r3, #0]
 8002048:	605a      	str	r2, [r3, #4]
 800204a:	609a      	str	r2, [r3, #8]
 800204c:	60da      	str	r2, [r3, #12]
 800204e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002058:	d147      	bne.n	80020ea <HAL_TIM_Base_MspInit+0xb2>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800205a:	4b59      	ldr	r3, [pc, #356]	; (80021c0 <HAL_TIM_Base_MspInit+0x188>)
 800205c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800205e:	4a58      	ldr	r2, [pc, #352]	; (80021c0 <HAL_TIM_Base_MspInit+0x188>)
 8002060:	f043 0301 	orr.w	r3, r3, #1
 8002064:	6593      	str	r3, [r2, #88]	; 0x58
 8002066:	4b56      	ldr	r3, [pc, #344]	; (80021c0 <HAL_TIM_Base_MspInit+0x188>)
 8002068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800206a:	f003 0301 	and.w	r3, r3, #1
 800206e:	623b      	str	r3, [r7, #32]
 8002070:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002072:	4b53      	ldr	r3, [pc, #332]	; (80021c0 <HAL_TIM_Base_MspInit+0x188>)
 8002074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002076:	4a52      	ldr	r2, [pc, #328]	; (80021c0 <HAL_TIM_Base_MspInit+0x188>)
 8002078:	f043 0302 	orr.w	r3, r3, #2
 800207c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800207e:	4b50      	ldr	r3, [pc, #320]	; (80021c0 <HAL_TIM_Base_MspInit+0x188>)
 8002080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002082:	f003 0302 	and.w	r3, r3, #2
 8002086:	61fb      	str	r3, [r7, #28]
 8002088:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800208a:	4b4d      	ldr	r3, [pc, #308]	; (80021c0 <HAL_TIM_Base_MspInit+0x188>)
 800208c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800208e:	4a4c      	ldr	r2, [pc, #304]	; (80021c0 <HAL_TIM_Base_MspInit+0x188>)
 8002090:	f043 0301 	orr.w	r3, r3, #1
 8002094:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002096:	4b4a      	ldr	r3, [pc, #296]	; (80021c0 <HAL_TIM_Base_MspInit+0x188>)
 8002098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800209a:	f003 0301 	and.w	r3, r3, #1
 800209e:	61bb      	str	r3, [r7, #24]
 80020a0:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PA15 (JTDI)     ------> TIM2_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80020a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a8:	2302      	movs	r3, #2
 80020aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ac:	2300      	movs	r3, #0
 80020ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b0:	2300      	movs	r3, #0
 80020b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80020b4:	2301      	movs	r3, #1
 80020b6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020bc:	4619      	mov	r1, r3
 80020be:	4841      	ldr	r0, [pc, #260]	; (80021c4 <HAL_TIM_Base_MspInit+0x18c>)
 80020c0:	f001 fde8 	bl	8003c94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80020c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ca:	2302      	movs	r3, #2
 80020cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ce:	2300      	movs	r3, #0
 80020d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d2:	2300      	movs	r3, #0
 80020d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80020d6:	2302      	movs	r3, #2
 80020d8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020de:	4619      	mov	r1, r3
 80020e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020e4:	f001 fdd6 	bl	8003c94 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80020e8:	e065      	b.n	80021b6 <HAL_TIM_Base_MspInit+0x17e>
  else if(htim_base->Instance==TIM3)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a36      	ldr	r2, [pc, #216]	; (80021c8 <HAL_TIM_Base_MspInit+0x190>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d133      	bne.n	800215c <HAL_TIM_Base_MspInit+0x124>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020f4:	4b32      	ldr	r3, [pc, #200]	; (80021c0 <HAL_TIM_Base_MspInit+0x188>)
 80020f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020f8:	4a31      	ldr	r2, [pc, #196]	; (80021c0 <HAL_TIM_Base_MspInit+0x188>)
 80020fa:	f043 0302 	orr.w	r3, r3, #2
 80020fe:	6593      	str	r3, [r2, #88]	; 0x58
 8002100:	4b2f      	ldr	r3, [pc, #188]	; (80021c0 <HAL_TIM_Base_MspInit+0x188>)
 8002102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002104:	f003 0302 	and.w	r3, r3, #2
 8002108:	617b      	str	r3, [r7, #20]
 800210a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800210c:	4b2c      	ldr	r3, [pc, #176]	; (80021c0 <HAL_TIM_Base_MspInit+0x188>)
 800210e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002110:	4a2b      	ldr	r2, [pc, #172]	; (80021c0 <HAL_TIM_Base_MspInit+0x188>)
 8002112:	f043 0304 	orr.w	r3, r3, #4
 8002116:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002118:	4b29      	ldr	r3, [pc, #164]	; (80021c0 <HAL_TIM_Base_MspInit+0x188>)
 800211a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800211c:	f003 0304 	and.w	r3, r3, #4
 8002120:	613b      	str	r3, [r7, #16]
 8002122:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002124:	2380      	movs	r3, #128	; 0x80
 8002126:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002128:	2302      	movs	r3, #2
 800212a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800212c:	2301      	movs	r3, #1
 800212e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002130:	2300      	movs	r3, #0
 8002132:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002134:	2302      	movs	r3, #2
 8002136:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002138:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800213c:	4619      	mov	r1, r3
 800213e:	4823      	ldr	r0, [pc, #140]	; (80021cc <HAL_TIM_Base_MspInit+0x194>)
 8002140:	f001 fda8 	bl	8003c94 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002144:	2200      	movs	r2, #0
 8002146:	2100      	movs	r1, #0
 8002148:	201d      	movs	r0, #29
 800214a:	f001 fd5e 	bl	8003c0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800214e:	201d      	movs	r0, #29
 8002150:	f001 fd77 	bl	8003c42 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_DisableIRQ(TIM3_IRQn);
 8002154:	201d      	movs	r0, #29
 8002156:	f001 fd82 	bl	8003c5e <HAL_NVIC_DisableIRQ>
}
 800215a:	e02c      	b.n	80021b6 <HAL_TIM_Base_MspInit+0x17e>
  else if(htim_base->Instance==TIM4)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a1b      	ldr	r2, [pc, #108]	; (80021d0 <HAL_TIM_Base_MspInit+0x198>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d127      	bne.n	80021b6 <HAL_TIM_Base_MspInit+0x17e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002166:	4b16      	ldr	r3, [pc, #88]	; (80021c0 <HAL_TIM_Base_MspInit+0x188>)
 8002168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800216a:	4a15      	ldr	r2, [pc, #84]	; (80021c0 <HAL_TIM_Base_MspInit+0x188>)
 800216c:	f043 0304 	orr.w	r3, r3, #4
 8002170:	6593      	str	r3, [r2, #88]	; 0x58
 8002172:	4b13      	ldr	r3, [pc, #76]	; (80021c0 <HAL_TIM_Base_MspInit+0x188>)
 8002174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002176:	f003 0304 	and.w	r3, r3, #4
 800217a:	60fb      	str	r3, [r7, #12]
 800217c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800217e:	4b10      	ldr	r3, [pc, #64]	; (80021c0 <HAL_TIM_Base_MspInit+0x188>)
 8002180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002182:	4a0f      	ldr	r2, [pc, #60]	; (80021c0 <HAL_TIM_Base_MspInit+0x188>)
 8002184:	f043 0310 	orr.w	r3, r3, #16
 8002188:	64d3      	str	r3, [r2, #76]	; 0x4c
 800218a:	4b0d      	ldr	r3, [pc, #52]	; (80021c0 <HAL_TIM_Base_MspInit+0x188>)
 800218c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800218e:	f003 0310 	and.w	r3, r3, #16
 8002192:	60bb      	str	r3, [r7, #8]
 8002194:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002196:	2301      	movs	r3, #1
 8002198:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800219a:	2302      	movs	r3, #2
 800219c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219e:	2300      	movs	r3, #0
 80021a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a2:	2300      	movs	r3, #0
 80021a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80021a6:	2302      	movs	r3, #2
 80021a8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021ae:	4619      	mov	r1, r3
 80021b0:	4808      	ldr	r0, [pc, #32]	; (80021d4 <HAL_TIM_Base_MspInit+0x19c>)
 80021b2:	f001 fd6f 	bl	8003c94 <HAL_GPIO_Init>
}
 80021b6:	bf00      	nop
 80021b8:	3738      	adds	r7, #56	; 0x38
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	40021000 	.word	0x40021000
 80021c4:	48000400 	.word	0x48000400
 80021c8:	40000400 	.word	0x40000400
 80021cc:	48000800 	.word	0x48000800
 80021d0:	40000800 	.word	0x40000800
 80021d4:	48001000 	.word	0x48001000

080021d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b08c      	sub	sp, #48	; 0x30
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e0:	f107 031c 	add.w	r3, r7, #28
 80021e4:	2200      	movs	r2, #0
 80021e6:	601a      	str	r2, [r3, #0]
 80021e8:	605a      	str	r2, [r3, #4]
 80021ea:	609a      	str	r2, [r3, #8]
 80021ec:	60da      	str	r2, [r3, #12]
 80021ee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a46      	ldr	r2, [pc, #280]	; (8002310 <HAL_TIM_MspPostInit+0x138>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d11d      	bne.n	8002236 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80021fa:	4b46      	ldr	r3, [pc, #280]	; (8002314 <HAL_TIM_MspPostInit+0x13c>)
 80021fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021fe:	4a45      	ldr	r2, [pc, #276]	; (8002314 <HAL_TIM_MspPostInit+0x13c>)
 8002200:	f043 0310 	orr.w	r3, r3, #16
 8002204:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002206:	4b43      	ldr	r3, [pc, #268]	; (8002314 <HAL_TIM_MspPostInit+0x13c>)
 8002208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800220a:	f003 0310 	and.w	r3, r3, #16
 800220e:	61bb      	str	r3, [r7, #24]
 8002210:	69bb      	ldr	r3, [r7, #24]
    PE9     ------> TIM1_CH1
    PE10     ------> TIM1_CH2N
    PE11     ------> TIM1_CH2
    PE12     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002212:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002216:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002218:	2302      	movs	r3, #2
 800221a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221c:	2300      	movs	r3, #0
 800221e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002220:	2300      	movs	r3, #0
 8002222:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002224:	2301      	movs	r3, #1
 8002226:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002228:	f107 031c 	add.w	r3, r7, #28
 800222c:	4619      	mov	r1, r3
 800222e:	483a      	ldr	r0, [pc, #232]	; (8002318 <HAL_TIM_MspPostInit+0x140>)
 8002230:	f001 fd30 	bl	8003c94 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8002234:	e067      	b.n	8002306 <HAL_TIM_MspPostInit+0x12e>
  else if(htim->Instance==TIM2)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800223e:	d11d      	bne.n	800227c <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002240:	4b34      	ldr	r3, [pc, #208]	; (8002314 <HAL_TIM_MspPostInit+0x13c>)
 8002242:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002244:	4a33      	ldr	r2, [pc, #204]	; (8002314 <HAL_TIM_MspPostInit+0x13c>)
 8002246:	f043 0301 	orr.w	r3, r3, #1
 800224a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800224c:	4b31      	ldr	r3, [pc, #196]	; (8002314 <HAL_TIM_MspPostInit+0x13c>)
 800224e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002250:	f003 0301 	and.w	r3, r3, #1
 8002254:	617b      	str	r3, [r7, #20]
 8002256:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002258:	2301      	movs	r3, #1
 800225a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800225c:	2302      	movs	r3, #2
 800225e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002260:	2300      	movs	r3, #0
 8002262:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002264:	2300      	movs	r3, #0
 8002266:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002268:	2301      	movs	r3, #1
 800226a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800226c:	f107 031c 	add.w	r3, r7, #28
 8002270:	4619      	mov	r1, r3
 8002272:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002276:	f001 fd0d 	bl	8003c94 <HAL_GPIO_Init>
}
 800227a:	e044      	b.n	8002306 <HAL_TIM_MspPostInit+0x12e>
  else if(htim->Instance==TIM4)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a26      	ldr	r2, [pc, #152]	; (800231c <HAL_TIM_MspPostInit+0x144>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d11d      	bne.n	80022c2 <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002286:	4b23      	ldr	r3, [pc, #140]	; (8002314 <HAL_TIM_MspPostInit+0x13c>)
 8002288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800228a:	4a22      	ldr	r2, [pc, #136]	; (8002314 <HAL_TIM_MspPostInit+0x13c>)
 800228c:	f043 0308 	orr.w	r3, r3, #8
 8002290:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002292:	4b20      	ldr	r3, [pc, #128]	; (8002314 <HAL_TIM_MspPostInit+0x13c>)
 8002294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002296:	f003 0308 	and.w	r3, r3, #8
 800229a:	613b      	str	r3, [r7, #16]
 800229c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800229e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80022a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a4:	2302      	movs	r3, #2
 80022a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a8:	2300      	movs	r3, #0
 80022aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ac:	2300      	movs	r3, #0
 80022ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80022b0:	2302      	movs	r3, #2
 80022b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022b4:	f107 031c 	add.w	r3, r7, #28
 80022b8:	4619      	mov	r1, r3
 80022ba:	4819      	ldr	r0, [pc, #100]	; (8002320 <HAL_TIM_MspPostInit+0x148>)
 80022bc:	f001 fcea 	bl	8003c94 <HAL_GPIO_Init>
}
 80022c0:	e021      	b.n	8002306 <HAL_TIM_MspPostInit+0x12e>
  else if(htim->Instance==TIM15)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a17      	ldr	r2, [pc, #92]	; (8002324 <HAL_TIM_MspPostInit+0x14c>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d11c      	bne.n	8002306 <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022cc:	4b11      	ldr	r3, [pc, #68]	; (8002314 <HAL_TIM_MspPostInit+0x13c>)
 80022ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022d0:	4a10      	ldr	r2, [pc, #64]	; (8002314 <HAL_TIM_MspPostInit+0x13c>)
 80022d2:	f043 0302 	orr.w	r3, r3, #2
 80022d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022d8:	4b0e      	ldr	r3, [pc, #56]	; (8002314 <HAL_TIM_MspPostInit+0x13c>)
 80022da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022dc:	f003 0302 	and.w	r3, r3, #2
 80022e0:	60fb      	str	r3, [r7, #12]
 80022e2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80022e4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80022e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ea:	2302      	movs	r3, #2
 80022ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ee:	2300      	movs	r3, #0
 80022f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f2:	2300      	movs	r3, #0
 80022f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 80022f6:	230e      	movs	r3, #14
 80022f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022fa:	f107 031c 	add.w	r3, r7, #28
 80022fe:	4619      	mov	r1, r3
 8002300:	4809      	ldr	r0, [pc, #36]	; (8002328 <HAL_TIM_MspPostInit+0x150>)
 8002302:	f001 fcc7 	bl	8003c94 <HAL_GPIO_Init>
}
 8002306:	bf00      	nop
 8002308:	3730      	adds	r7, #48	; 0x30
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	40012c00 	.word	0x40012c00
 8002314:	40021000 	.word	0x40021000
 8002318:	48001000 	.word	0x48001000
 800231c:	40000800 	.word	0x40000800
 8002320:	48000c00 	.word	0x48000c00
 8002324:	40014000 	.word	0x40014000
 8002328:	48000400 	.word	0x48000400

0800232c <HAL_SAI_MspInit>:

static uint32_t SAI1_client =0;
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b08a      	sub	sp, #40	; 0x28
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a50      	ldr	r2, [pc, #320]	; (800247c <HAL_SAI_MspInit+0x150>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d124      	bne.n	8002388 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 800233e:	4b50      	ldr	r3, [pc, #320]	; (8002480 <HAL_SAI_MspInit+0x154>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d10b      	bne.n	800235e <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8002346:	4b4f      	ldr	r3, [pc, #316]	; (8002484 <HAL_SAI_MspInit+0x158>)
 8002348:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800234a:	4a4e      	ldr	r2, [pc, #312]	; (8002484 <HAL_SAI_MspInit+0x158>)
 800234c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002350:	6613      	str	r3, [r2, #96]	; 0x60
 8002352:	4b4c      	ldr	r3, [pc, #304]	; (8002484 <HAL_SAI_MspInit+0x158>)
 8002354:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002356:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800235a:	613b      	str	r3, [r7, #16]
 800235c:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 800235e:	4b48      	ldr	r3, [pc, #288]	; (8002480 <HAL_SAI_MspInit+0x154>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	3301      	adds	r3, #1
 8002364:	4a46      	ldr	r2, [pc, #280]	; (8002480 <HAL_SAI_MspInit+0x154>)
 8002366:	6013      	str	r3, [r2, #0]
    PE2     ------> SAI1_MCLK_A
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002368:	2374      	movs	r3, #116	; 0x74
 800236a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800236c:	2302      	movs	r3, #2
 800236e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002370:	2300      	movs	r3, #0
 8002372:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002374:	2300      	movs	r3, #0
 8002376:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8002378:	230d      	movs	r3, #13
 800237a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800237c:	f107 0314 	add.w	r3, r7, #20
 8002380:	4619      	mov	r1, r3
 8002382:	4841      	ldr	r0, [pc, #260]	; (8002488 <HAL_SAI_MspInit+0x15c>)
 8002384:	f001 fc86 	bl	8003c94 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a3f      	ldr	r2, [pc, #252]	; (800248c <HAL_SAI_MspInit+0x160>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d135      	bne.n	80023fe <HAL_SAI_MspInit+0xd2>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 8002392:	4b3b      	ldr	r3, [pc, #236]	; (8002480 <HAL_SAI_MspInit+0x154>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d10b      	bne.n	80023b2 <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800239a:	4b3a      	ldr	r3, [pc, #232]	; (8002484 <HAL_SAI_MspInit+0x158>)
 800239c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800239e:	4a39      	ldr	r2, [pc, #228]	; (8002484 <HAL_SAI_MspInit+0x158>)
 80023a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80023a4:	6613      	str	r3, [r2, #96]	; 0x60
 80023a6:	4b37      	ldr	r3, [pc, #220]	; (8002484 <HAL_SAI_MspInit+0x158>)
 80023a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023ae:	60fb      	str	r3, [r7, #12]
 80023b0:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 80023b2:	4b33      	ldr	r3, [pc, #204]	; (8002480 <HAL_SAI_MspInit+0x154>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	3301      	adds	r3, #1
 80023b8:	4a31      	ldr	r2, [pc, #196]	; (8002480 <HAL_SAI_MspInit+0x154>)
 80023ba:	6013      	str	r3, [r2, #0]
    PE3     ------> SAI1_SD_B
    PF7     ------> SAI1_MCLK_B
    PF8     ------> SAI1_SCK_B
    PF9     ------> SAI1_FS_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80023bc:	2308      	movs	r3, #8
 80023be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023c0:	2302      	movs	r3, #2
 80023c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c4:	2300      	movs	r3, #0
 80023c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023c8:	2300      	movs	r3, #0
 80023ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80023cc:	230d      	movs	r3, #13
 80023ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80023d0:	f107 0314 	add.w	r3, r7, #20
 80023d4:	4619      	mov	r1, r3
 80023d6:	482c      	ldr	r0, [pc, #176]	; (8002488 <HAL_SAI_MspInit+0x15c>)
 80023d8:	f001 fc5c 	bl	8003c94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80023dc:	f44f 7360 	mov.w	r3, #896	; 0x380
 80023e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e2:	2302      	movs	r3, #2
 80023e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e6:	2300      	movs	r3, #0
 80023e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ea:	2300      	movs	r3, #0
 80023ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80023ee:	230d      	movs	r3, #13
 80023f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80023f2:	f107 0314 	add.w	r3, r7, #20
 80023f6:	4619      	mov	r1, r3
 80023f8:	4825      	ldr	r0, [pc, #148]	; (8002490 <HAL_SAI_MspInit+0x164>)
 80023fa:	f001 fc4b 	bl	8003c94 <HAL_GPIO_Init>

    }
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a24      	ldr	r2, [pc, #144]	; (8002494 <HAL_SAI_MspInit+0x168>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d135      	bne.n	8002474 <HAL_SAI_MspInit+0x148>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8002408:	4b23      	ldr	r3, [pc, #140]	; (8002498 <HAL_SAI_MspInit+0x16c>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d10b      	bne.n	8002428 <HAL_SAI_MspInit+0xfc>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002410:	4b1c      	ldr	r3, [pc, #112]	; (8002484 <HAL_SAI_MspInit+0x158>)
 8002412:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002414:	4a1b      	ldr	r2, [pc, #108]	; (8002484 <HAL_SAI_MspInit+0x158>)
 8002416:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800241a:	6613      	str	r3, [r2, #96]	; 0x60
 800241c:	4b19      	ldr	r3, [pc, #100]	; (8002484 <HAL_SAI_MspInit+0x158>)
 800241e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002420:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002424:	60bb      	str	r3, [r7, #8]
 8002426:	68bb      	ldr	r3, [r7, #8]
    }
    SAI2_client ++;
 8002428:	4b1b      	ldr	r3, [pc, #108]	; (8002498 <HAL_SAI_MspInit+0x16c>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	3301      	adds	r3, #1
 800242e:	4a1a      	ldr	r2, [pc, #104]	; (8002498 <HAL_SAI_MspInit+0x16c>)
 8002430:	6013      	str	r3, [r2, #0]
    PB12     ------> SAI2_FS_A
    PB13     ------> SAI2_SCK_A
    PB15     ------> SAI2_SD_A
    PC6     ------> SAI2_MCLK_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8002432:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8002436:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002438:	2302      	movs	r3, #2
 800243a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243c:	2300      	movs	r3, #0
 800243e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002440:	2300      	movs	r3, #0
 8002442:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8002444:	230d      	movs	r3, #13
 8002446:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002448:	f107 0314 	add.w	r3, r7, #20
 800244c:	4619      	mov	r1, r3
 800244e:	4813      	ldr	r0, [pc, #76]	; (800249c <HAL_SAI_MspInit+0x170>)
 8002450:	f001 fc20 	bl	8003c94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002454:	2340      	movs	r3, #64	; 0x40
 8002456:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002458:	2302      	movs	r3, #2
 800245a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245c:	2300      	movs	r3, #0
 800245e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002460:	2300      	movs	r3, #0
 8002462:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8002464:	230d      	movs	r3, #13
 8002466:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002468:	f107 0314 	add.w	r3, r7, #20
 800246c:	4619      	mov	r1, r3
 800246e:	480c      	ldr	r0, [pc, #48]	; (80024a0 <HAL_SAI_MspInit+0x174>)
 8002470:	f001 fc10 	bl	8003c94 <HAL_GPIO_Init>

    }
}
 8002474:	bf00      	nop
 8002476:	3728      	adds	r7, #40	; 0x28
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	40015404 	.word	0x40015404
 8002480:	20000778 	.word	0x20000778
 8002484:	40021000 	.word	0x40021000
 8002488:	48001000 	.word	0x48001000
 800248c:	40015424 	.word	0x40015424
 8002490:	48001400 	.word	0x48001400
 8002494:	40015804 	.word	0x40015804
 8002498:	2000077c 	.word	0x2000077c
 800249c:	48000400 	.word	0x48000400
 80024a0:	48000800 	.word	0x48000800

080024a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024a8:	e7fe      	b.n	80024a8 <NMI_Handler+0x4>

080024aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024aa:	b480      	push	{r7}
 80024ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024ae:	e7fe      	b.n	80024ae <HardFault_Handler+0x4>

080024b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024b4:	e7fe      	b.n	80024b4 <MemManage_Handler+0x4>

080024b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024b6:	b480      	push	{r7}
 80024b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024ba:	e7fe      	b.n	80024ba <BusFault_Handler+0x4>

080024bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024c0:	e7fe      	b.n	80024c0 <UsageFault_Handler+0x4>

080024c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024c2:	b480      	push	{r7}
 80024c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024c6:	bf00      	nop
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr

080024d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024d4:	bf00      	nop
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr

080024de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024de:	b480      	push	{r7}
 80024e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024e2:	bf00      	nop
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr

080024ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024f0:	f000 f8ee 	bl	80026d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024f4:	bf00      	nop
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80024fc:	4802      	ldr	r0, [pc, #8]	; (8002508 <TIM1_CC_IRQHandler+0x10>)
 80024fe:	f005 fb17 	bl	8007b30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002502:	bf00      	nop
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	200005f8 	.word	0x200005f8

0800250c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	const uint32_t THRESHOD = 500;
 8002512:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002516:	607b      	str	r3, [r7, #4]

	extern uint32_t count;

	static uint8_t mode = 0;

	if (mode == 0) {
 8002518:	4b1f      	ldr	r3, [pc, #124]	; (8002598 <TIM3_IRQHandler+0x8c>)
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d112      	bne.n	8002546 <TIM3_IRQHandler+0x3a>
		// falling edge
		TIM3->CNT = 0;
 8002520:	4b1e      	ldr	r3, [pc, #120]	; (800259c <TIM3_IRQHandler+0x90>)
 8002522:	2200      	movs	r2, #0
 8002524:	625a      	str	r2, [r3, #36]	; 0x24
		TIM3->CCER &= ~(0b1 << 5);
 8002526:	4b1d      	ldr	r3, [pc, #116]	; (800259c <TIM3_IRQHandler+0x90>)
 8002528:	6a1b      	ldr	r3, [r3, #32]
 800252a:	4a1c      	ldr	r2, [pc, #112]	; (800259c <TIM3_IRQHandler+0x90>)
 800252c:	f023 0320 	bic.w	r3, r3, #32
 8002530:	6213      	str	r3, [r2, #32]
		TIM3->CCER &= ~(0b1 << 7);
 8002532:	4b1a      	ldr	r3, [pc, #104]	; (800259c <TIM3_IRQHandler+0x90>)
 8002534:	6a1b      	ldr	r3, [r3, #32]
 8002536:	4a19      	ldr	r2, [pc, #100]	; (800259c <TIM3_IRQHandler+0x90>)
 8002538:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800253c:	6213      	str	r3, [r2, #32]
		mode = 1;
 800253e:	4b16      	ldr	r3, [pc, #88]	; (8002598 <TIM3_IRQHandler+0x8c>)
 8002540:	2201      	movs	r2, #1
 8002542:	701a      	strb	r2, [r3, #0]
 8002544:	e021      	b.n	800258a <TIM3_IRQHandler+0x7e>
	} else {
		// rising edge;
		uint32_t local_count = TIM3->CNT;
 8002546:	4b15      	ldr	r3, [pc, #84]	; (800259c <TIM3_IRQHandler+0x90>)
 8002548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254a:	603b      	str	r3, [r7, #0]
		count = local_count;
 800254c:	4a14      	ldr	r2, [pc, #80]	; (80025a0 <TIM3_IRQHandler+0x94>)
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	6013      	str	r3, [r2, #0]

		if (local_count > THRESHOD) {
 8002552:	683a      	ldr	r2, [r7, #0]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	429a      	cmp	r2, r3
 8002558:	d908      	bls.n	800256c <TIM3_IRQHandler+0x60>
			 ball_collected = 1;
 800255a:	4b12      	ldr	r3, [pc, #72]	; (80025a4 <TIM3_IRQHandler+0x98>)
 800255c:	2201      	movs	r2, #1
 800255e:	701a      	strb	r2, [r3, #0]
			 ball_count++;
 8002560:	4b11      	ldr	r3, [pc, #68]	; (80025a8 <TIM3_IRQHandler+0x9c>)
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	3301      	adds	r3, #1
 8002566:	b2da      	uxtb	r2, r3
 8002568:	4b0f      	ldr	r3, [pc, #60]	; (80025a8 <TIM3_IRQHandler+0x9c>)
 800256a:	701a      	strb	r2, [r3, #0]
		}

		TIM3->CCER |= (0b1 << 5);
 800256c:	4b0b      	ldr	r3, [pc, #44]	; (800259c <TIM3_IRQHandler+0x90>)
 800256e:	6a1b      	ldr	r3, [r3, #32]
 8002570:	4a0a      	ldr	r2, [pc, #40]	; (800259c <TIM3_IRQHandler+0x90>)
 8002572:	f043 0320 	orr.w	r3, r3, #32
 8002576:	6213      	str	r3, [r2, #32]
		TIM3->CCER &= ~(0b1 << 7);
 8002578:	4b08      	ldr	r3, [pc, #32]	; (800259c <TIM3_IRQHandler+0x90>)
 800257a:	6a1b      	ldr	r3, [r3, #32]
 800257c:	4a07      	ldr	r2, [pc, #28]	; (800259c <TIM3_IRQHandler+0x90>)
 800257e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002582:	6213      	str	r3, [r2, #32]
		mode = 0;
 8002584:	4b04      	ldr	r3, [pc, #16]	; (8002598 <TIM3_IRQHandler+0x8c>)
 8002586:	2200      	movs	r2, #0
 8002588:	701a      	strb	r2, [r3, #0]
	}


  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800258a:	4808      	ldr	r0, [pc, #32]	; (80025ac <TIM3_IRQHandler+0xa0>)
 800258c:	f005 fad0 	bl	8007b30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002590:	bf00      	nop
 8002592:	3708      	adds	r7, #8
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	20000780 	.word	0x20000780
 800259c:	40000400 	.word	0x40000400
 80025a0:	20000038 	.word	0x20000038
 80025a4:	20000032 	.word	0x20000032
 80025a8:	20000031 	.word	0x20000031
 80025ac:	20000690 	.word	0x20000690

080025b0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80025b4:	4b06      	ldr	r3, [pc, #24]	; (80025d0 <SystemInit+0x20>)
 80025b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ba:	4a05      	ldr	r2, [pc, #20]	; (80025d0 <SystemInit+0x20>)
 80025bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80025c4:	bf00      	nop
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	e000ed00 	.word	0xe000ed00

080025d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80025d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800260c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80025d8:	f7ff ffea 	bl	80025b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025dc:	480c      	ldr	r0, [pc, #48]	; (8002610 <LoopForever+0x6>)
  ldr r1, =_edata
 80025de:	490d      	ldr	r1, [pc, #52]	; (8002614 <LoopForever+0xa>)
  ldr r2, =_sidata
 80025e0:	4a0d      	ldr	r2, [pc, #52]	; (8002618 <LoopForever+0xe>)
  movs r3, #0
 80025e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025e4:	e002      	b.n	80025ec <LoopCopyDataInit>

080025e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025ea:	3304      	adds	r3, #4

080025ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025f0:	d3f9      	bcc.n	80025e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025f2:	4a0a      	ldr	r2, [pc, #40]	; (800261c <LoopForever+0x12>)
  ldr r4, =_ebss
 80025f4:	4c0a      	ldr	r4, [pc, #40]	; (8002620 <LoopForever+0x16>)
  movs r3, #0
 80025f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025f8:	e001      	b.n	80025fe <LoopFillZerobss>

080025fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025fc:	3204      	adds	r2, #4

080025fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002600:	d3fb      	bcc.n	80025fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002602:	f007 fba3 	bl	8009d4c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002606:	f7fe f8ab 	bl	8000760 <main>

0800260a <LoopForever>:

LoopForever:
    b LoopForever
 800260a:	e7fe      	b.n	800260a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800260c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8002610:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002614:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8002618:	08009e3c 	.word	0x08009e3c
  ldr r2, =_sbss
 800261c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8002620:	20000788 	.word	0x20000788

08002624 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002624:	e7fe      	b.n	8002624 <ADC1_IRQHandler>

08002626 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002626:	b580      	push	{r7, lr}
 8002628:	b082      	sub	sp, #8
 800262a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800262c:	2300      	movs	r3, #0
 800262e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002630:	2003      	movs	r0, #3
 8002632:	f001 fadf 	bl	8003bf4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002636:	2000      	movs	r0, #0
 8002638:	f000 f80e 	bl	8002658 <HAL_InitTick>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d002      	beq.n	8002648 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	71fb      	strb	r3, [r7, #7]
 8002646:	e001      	b.n	800264c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002648:	f7ff f944 	bl	80018d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800264c:	79fb      	ldrb	r3, [r7, #7]
}
 800264e:	4618      	mov	r0, r3
 8002650:	3708      	adds	r7, #8
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
	...

08002658 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002660:	2300      	movs	r3, #0
 8002662:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002664:	4b17      	ldr	r3, [pc, #92]	; (80026c4 <HAL_InitTick+0x6c>)
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d023      	beq.n	80026b4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800266c:	4b16      	ldr	r3, [pc, #88]	; (80026c8 <HAL_InitTick+0x70>)
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	4b14      	ldr	r3, [pc, #80]	; (80026c4 <HAL_InitTick+0x6c>)
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	4619      	mov	r1, r3
 8002676:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800267a:	fbb3 f3f1 	udiv	r3, r3, r1
 800267e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002682:	4618      	mov	r0, r3
 8002684:	f001 faf9 	bl	8003c7a <HAL_SYSTICK_Config>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d10f      	bne.n	80026ae <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2b0f      	cmp	r3, #15
 8002692:	d809      	bhi.n	80026a8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002694:	2200      	movs	r2, #0
 8002696:	6879      	ldr	r1, [r7, #4]
 8002698:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800269c:	f001 fab5 	bl	8003c0a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80026a0:	4a0a      	ldr	r2, [pc, #40]	; (80026cc <HAL_InitTick+0x74>)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6013      	str	r3, [r2, #0]
 80026a6:	e007      	b.n	80026b8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	73fb      	strb	r3, [r7, #15]
 80026ac:	e004      	b.n	80026b8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	73fb      	strb	r3, [r7, #15]
 80026b2:	e001      	b.n	80026b8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80026b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3710      	adds	r7, #16
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	2000000c 	.word	0x2000000c
 80026c8:	20000004 	.word	0x20000004
 80026cc:	20000008 	.word	0x20000008

080026d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026d0:	b480      	push	{r7}
 80026d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80026d4:	4b06      	ldr	r3, [pc, #24]	; (80026f0 <HAL_IncTick+0x20>)
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	461a      	mov	r2, r3
 80026da:	4b06      	ldr	r3, [pc, #24]	; (80026f4 <HAL_IncTick+0x24>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4413      	add	r3, r2
 80026e0:	4a04      	ldr	r2, [pc, #16]	; (80026f4 <HAL_IncTick+0x24>)
 80026e2:	6013      	str	r3, [r2, #0]
}
 80026e4:	bf00      	nop
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	2000000c 	.word	0x2000000c
 80026f4:	20000784 	.word	0x20000784

080026f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
  return uwTick;
 80026fc:	4b03      	ldr	r3, [pc, #12]	; (800270c <HAL_GetTick+0x14>)
 80026fe:	681b      	ldr	r3, [r3, #0]
}
 8002700:	4618      	mov	r0, r3
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	20000784 	.word	0x20000784

08002710 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	431a      	orrs	r2, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	609a      	str	r2, [r3, #8]
}
 800272a:	bf00      	nop
 800272c:	370c      	adds	r7, #12
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr

08002736 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002736:	b480      	push	{r7}
 8002738:	b083      	sub	sp, #12
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
 800273e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	431a      	orrs	r2, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	609a      	str	r2, [r3, #8]
}
 8002750:	bf00      	nop
 8002752:	370c      	adds	r7, #12
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr

0800275c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800276c:	4618      	mov	r0, r3
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002778:	b480      	push	{r7}
 800277a:	b087      	sub	sp, #28
 800277c:	af00      	add	r7, sp, #0
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	60b9      	str	r1, [r7, #8]
 8002782:	607a      	str	r2, [r7, #4]
 8002784:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	3360      	adds	r3, #96	; 0x60
 800278a:	461a      	mov	r2, r3
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	4413      	add	r3, r2
 8002792:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	4b08      	ldr	r3, [pc, #32]	; (80027bc <LL_ADC_SetOffset+0x44>)
 800279a:	4013      	ands	r3, r2
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80027a2:	683a      	ldr	r2, [r7, #0]
 80027a4:	430a      	orrs	r2, r1
 80027a6:	4313      	orrs	r3, r2
 80027a8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80027b0:	bf00      	nop
 80027b2:	371c      	adds	r7, #28
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr
 80027bc:	03fff000 	.word	0x03fff000

080027c0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b085      	sub	sp, #20
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	3360      	adds	r3, #96	; 0x60
 80027ce:	461a      	mov	r2, r3
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	4413      	add	r3, r2
 80027d6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3714      	adds	r7, #20
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr

080027ec <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b087      	sub	sp, #28
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	60f8      	str	r0, [r7, #12]
 80027f4:	60b9      	str	r1, [r7, #8]
 80027f6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	3360      	adds	r3, #96	; 0x60
 80027fc:	461a      	mov	r2, r3
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	4413      	add	r3, r2
 8002804:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	431a      	orrs	r2, r3
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002816:	bf00      	nop
 8002818:	371c      	adds	r7, #28
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr

08002822 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002822:	b480      	push	{r7}
 8002824:	b083      	sub	sp, #12
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
 800282a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	695b      	ldr	r3, [r3, #20]
 8002830:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	431a      	orrs	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	615a      	str	r2, [r3, #20]
}
 800283c:	bf00      	nop
 800283e:	370c      	adds	r7, #12
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr

08002848 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002848:	b480      	push	{r7}
 800284a:	b087      	sub	sp, #28
 800284c:	af00      	add	r7, sp, #0
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	60b9      	str	r1, [r7, #8]
 8002852:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	3330      	adds	r3, #48	; 0x30
 8002858:	461a      	mov	r2, r3
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	0a1b      	lsrs	r3, r3, #8
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	f003 030c 	and.w	r3, r3, #12
 8002864:	4413      	add	r3, r2
 8002866:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	f003 031f 	and.w	r3, r3, #31
 8002872:	211f      	movs	r1, #31
 8002874:	fa01 f303 	lsl.w	r3, r1, r3
 8002878:	43db      	mvns	r3, r3
 800287a:	401a      	ands	r2, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	0e9b      	lsrs	r3, r3, #26
 8002880:	f003 011f 	and.w	r1, r3, #31
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	f003 031f 	and.w	r3, r3, #31
 800288a:	fa01 f303 	lsl.w	r3, r1, r3
 800288e:	431a      	orrs	r2, r3
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002894:	bf00      	nop
 8002896:	371c      	adds	r7, #28
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr

080028a0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b087      	sub	sp, #28
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	60f8      	str	r0, [r7, #12]
 80028a8:	60b9      	str	r1, [r7, #8]
 80028aa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	3314      	adds	r3, #20
 80028b0:	461a      	mov	r2, r3
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	0e5b      	lsrs	r3, r3, #25
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	f003 0304 	and.w	r3, r3, #4
 80028bc:	4413      	add	r3, r2
 80028be:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	0d1b      	lsrs	r3, r3, #20
 80028c8:	f003 031f 	and.w	r3, r3, #31
 80028cc:	2107      	movs	r1, #7
 80028ce:	fa01 f303 	lsl.w	r3, r1, r3
 80028d2:	43db      	mvns	r3, r3
 80028d4:	401a      	ands	r2, r3
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	0d1b      	lsrs	r3, r3, #20
 80028da:	f003 031f 	and.w	r3, r3, #31
 80028de:	6879      	ldr	r1, [r7, #4]
 80028e0:	fa01 f303 	lsl.w	r3, r1, r3
 80028e4:	431a      	orrs	r2, r3
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80028ea:	bf00      	nop
 80028ec:	371c      	adds	r7, #28
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
	...

080028f8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b085      	sub	sp, #20
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002910:	43db      	mvns	r3, r3
 8002912:	401a      	ands	r2, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f003 0318 	and.w	r3, r3, #24
 800291a:	4908      	ldr	r1, [pc, #32]	; (800293c <LL_ADC_SetChannelSingleDiff+0x44>)
 800291c:	40d9      	lsrs	r1, r3
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	400b      	ands	r3, r1
 8002922:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002926:	431a      	orrs	r2, r3
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800292e:	bf00      	nop
 8002930:	3714      	adds	r7, #20
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	0007ffff 	.word	0x0007ffff

08002940 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002950:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	6093      	str	r3, [r2, #8]
}
 8002958:	bf00      	nop
 800295a:	370c      	adds	r7, #12
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr

08002964 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002974:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002978:	d101      	bne.n	800297e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800297a:	2301      	movs	r3, #1
 800297c:	e000      	b.n	8002980 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800297e:	2300      	movs	r3, #0
}
 8002980:	4618      	mov	r0, r3
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr

0800298c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800299c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80029a0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80029a8:	bf00      	nop
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80029c8:	d101      	bne.n	80029ce <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80029ca:	2301      	movs	r3, #1
 80029cc:	e000      	b.n	80029d0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80029ce:	2300      	movs	r3, #0
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	370c      	adds	r7, #12
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr

080029dc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	f003 0301 	and.w	r3, r3, #1
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d101      	bne.n	80029f4 <LL_ADC_IsEnabled+0x18>
 80029f0:	2301      	movs	r3, #1
 80029f2:	e000      	b.n	80029f6 <LL_ADC_IsEnabled+0x1a>
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	370c      	adds	r7, #12
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr

08002a02 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002a02:	b480      	push	{r7}
 8002a04:	b083      	sub	sp, #12
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	f003 0304 	and.w	r3, r3, #4
 8002a12:	2b04      	cmp	r3, #4
 8002a14:	d101      	bne.n	8002a1a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002a16:	2301      	movs	r3, #1
 8002a18:	e000      	b.n	8002a1c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002a1a:	2300      	movs	r3, #0
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	f003 0308 	and.w	r3, r3, #8
 8002a38:	2b08      	cmp	r3, #8
 8002a3a:	d101      	bne.n	8002a40 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e000      	b.n	8002a42 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	370c      	adds	r7, #12
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
	...

08002a50 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b088      	sub	sp, #32
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d101      	bne.n	8002a6a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e12f      	b.n	8002cca <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	691b      	ldr	r3, [r3, #16]
 8002a6e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d109      	bne.n	8002a8c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f7fe ff4f 	bl	800191c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4618      	mov	r0, r3
 8002a92:	f7ff ff67 	bl	8002964 <LL_ADC_IsDeepPowerDownEnabled>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d004      	beq.n	8002aa6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7ff ff4d 	bl	8002940 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7ff ff82 	bl	80029b4 <LL_ADC_IsInternalRegulatorEnabled>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d115      	bne.n	8002ae2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7ff ff66 	bl	800298c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ac0:	4b84      	ldr	r3, [pc, #528]	; (8002cd4 <HAL_ADC_Init+0x284>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	099b      	lsrs	r3, r3, #6
 8002ac6:	4a84      	ldr	r2, [pc, #528]	; (8002cd8 <HAL_ADC_Init+0x288>)
 8002ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8002acc:	099b      	lsrs	r3, r3, #6
 8002ace:	3301      	adds	r3, #1
 8002ad0:	005b      	lsls	r3, r3, #1
 8002ad2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002ad4:	e002      	b.n	8002adc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	3b01      	subs	r3, #1
 8002ada:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d1f9      	bne.n	8002ad6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7ff ff64 	bl	80029b4 <LL_ADC_IsInternalRegulatorEnabled>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d10d      	bne.n	8002b0e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002af6:	f043 0210 	orr.w	r2, r3, #16
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b02:	f043 0201 	orr.w	r2, r3, #1
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4618      	mov	r0, r3
 8002b14:	f7ff ff75 	bl	8002a02 <LL_ADC_REG_IsConversionOngoing>
 8002b18:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b1e:	f003 0310 	and.w	r3, r3, #16
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	f040 80c8 	bne.w	8002cb8 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	f040 80c4 	bne.w	8002cb8 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b34:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002b38:	f043 0202 	orr.w	r2, r3, #2
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7ff ff49 	bl	80029dc <LL_ADC_IsEnabled>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d10b      	bne.n	8002b68 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b50:	4862      	ldr	r0, [pc, #392]	; (8002cdc <HAL_ADC_Init+0x28c>)
 8002b52:	f7ff ff43 	bl	80029dc <LL_ADC_IsEnabled>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d105      	bne.n	8002b68 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	4619      	mov	r1, r3
 8002b62:	485f      	ldr	r0, [pc, #380]	; (8002ce0 <HAL_ADC_Init+0x290>)
 8002b64:	f7ff fdd4 	bl	8002710 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	7e5b      	ldrb	r3, [r3, #25]
 8002b6c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002b72:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002b78:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002b7e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b86:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d106      	bne.n	8002ba4 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9a:	3b01      	subs	r3, #1
 8002b9c:	045b      	lsls	r3, r3, #17
 8002b9e:	69ba      	ldr	r2, [r7, #24]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d009      	beq.n	8002bc0 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002bba:	69ba      	ldr	r2, [r7, #24]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	68da      	ldr	r2, [r3, #12]
 8002bc6:	4b47      	ldr	r3, [pc, #284]	; (8002ce4 <HAL_ADC_Init+0x294>)
 8002bc8:	4013      	ands	r3, r2
 8002bca:	687a      	ldr	r2, [r7, #4]
 8002bcc:	6812      	ldr	r2, [r2, #0]
 8002bce:	69b9      	ldr	r1, [r7, #24]
 8002bd0:	430b      	orrs	r3, r1
 8002bd2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f7ff ff12 	bl	8002a02 <LL_ADC_REG_IsConversionOngoing>
 8002bde:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7ff ff1f 	bl	8002a28 <LL_ADC_INJ_IsConversionOngoing>
 8002bea:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d140      	bne.n	8002c74 <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d13d      	bne.n	8002c74 <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	7e1b      	ldrb	r3, [r3, #24]
 8002c00:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002c02:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002c0a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c1a:	f023 0306 	bic.w	r3, r3, #6
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	6812      	ldr	r2, [r2, #0]
 8002c22:	69b9      	ldr	r1, [r7, #24]
 8002c24:	430b      	orrs	r3, r1
 8002c26:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d118      	bne.n	8002c64 <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	691b      	ldr	r3, [r3, #16]
 8002c38:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002c3c:	f023 0304 	bic.w	r3, r3, #4
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002c48:	4311      	orrs	r1, r2
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002c4e:	4311      	orrs	r1, r2
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002c54:	430a      	orrs	r2, r1
 8002c56:	431a      	orrs	r2, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f042 0201 	orr.w	r2, r2, #1
 8002c60:	611a      	str	r2, [r3, #16]
 8002c62:	e007      	b.n	8002c74 <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	691a      	ldr	r2, [r3, #16]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f022 0201 	bic.w	r2, r2, #1
 8002c72:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	691b      	ldr	r3, [r3, #16]
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d10c      	bne.n	8002c96 <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c82:	f023 010f 	bic.w	r1, r3, #15
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	69db      	ldr	r3, [r3, #28]
 8002c8a:	1e5a      	subs	r2, r3, #1
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	430a      	orrs	r2, r1
 8002c92:	631a      	str	r2, [r3, #48]	; 0x30
 8002c94:	e007      	b.n	8002ca6 <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f022 020f 	bic.w	r2, r2, #15
 8002ca4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002caa:	f023 0303 	bic.w	r3, r3, #3
 8002cae:	f043 0201 	orr.w	r2, r3, #1
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	659a      	str	r2, [r3, #88]	; 0x58
 8002cb6:	e007      	b.n	8002cc8 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cbc:	f043 0210 	orr.w	r2, r3, #16
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002cc8:	7ffb      	ldrb	r3, [r7, #31]
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3720      	adds	r7, #32
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	20000004 	.word	0x20000004
 8002cd8:	053e2d63 	.word	0x053e2d63
 8002cdc:	50040000 	.word	0x50040000
 8002ce0:	50040300 	.word	0x50040300
 8002ce4:	fff0c007 	.word	0xfff0c007

08002ce8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b0b6      	sub	sp, #216	; 0xd8
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d101      	bne.n	8002d0a <HAL_ADC_ConfigChannel+0x22>
 8002d06:	2302      	movs	r3, #2
 8002d08:	e3d5      	b.n	80034b6 <HAL_ADC_ConfigChannel+0x7ce>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4618      	mov	r0, r3
 8002d18:	f7ff fe73 	bl	8002a02 <LL_ADC_REG_IsConversionOngoing>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	f040 83ba 	bne.w	8003498 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	2b05      	cmp	r3, #5
 8002d2a:	d824      	bhi.n	8002d76 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	3b02      	subs	r3, #2
 8002d32:	2b03      	cmp	r3, #3
 8002d34:	d81b      	bhi.n	8002d6e <HAL_ADC_ConfigChannel+0x86>
 8002d36:	a201      	add	r2, pc, #4	; (adr r2, 8002d3c <HAL_ADC_ConfigChannel+0x54>)
 8002d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d3c:	08002d4d 	.word	0x08002d4d
 8002d40:	08002d55 	.word	0x08002d55
 8002d44:	08002d5d 	.word	0x08002d5d
 8002d48:	08002d65 	.word	0x08002d65
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	220c      	movs	r2, #12
 8002d50:	605a      	str	r2, [r3, #4]
          break;
 8002d52:	e011      	b.n	8002d78 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	2212      	movs	r2, #18
 8002d58:	605a      	str	r2, [r3, #4]
          break;
 8002d5a:	e00d      	b.n	8002d78 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	2218      	movs	r2, #24
 8002d60:	605a      	str	r2, [r3, #4]
          break;
 8002d62:	e009      	b.n	8002d78 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d6a:	605a      	str	r2, [r3, #4]
          break;
 8002d6c:	e004      	b.n	8002d78 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	2206      	movs	r2, #6
 8002d72:	605a      	str	r2, [r3, #4]
          break;
 8002d74:	e000      	b.n	8002d78 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002d76:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6818      	ldr	r0, [r3, #0]
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	6859      	ldr	r1, [r3, #4]
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	461a      	mov	r2, r3
 8002d86:	f7ff fd5f 	bl	8002848 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f7ff fe37 	bl	8002a02 <LL_ADC_REG_IsConversionOngoing>
 8002d94:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7ff fe43 	bl	8002a28 <LL_ADC_INJ_IsConversionOngoing>
 8002da2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002da6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	f040 81c1 	bne.w	8003132 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002db0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	f040 81bc 	bne.w	8003132 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002dc2:	d10f      	bne.n	8002de4 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6818      	ldr	r0, [r3, #0]
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	4619      	mov	r1, r3
 8002dd0:	f7ff fd66 	bl	80028a0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7ff fd20 	bl	8002822 <LL_ADC_SetSamplingTimeCommonConfig>
 8002de2:	e00e      	b.n	8002e02 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6818      	ldr	r0, [r3, #0]
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	6819      	ldr	r1, [r3, #0]
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	461a      	mov	r2, r3
 8002df2:	f7ff fd55 	bl	80028a0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	2100      	movs	r1, #0
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f7ff fd10 	bl	8002822 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	695a      	ldr	r2, [r3, #20]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	08db      	lsrs	r3, r3, #3
 8002e0e:	f003 0303 	and.w	r3, r3, #3
 8002e12:	005b      	lsls	r3, r3, #1
 8002e14:	fa02 f303 	lsl.w	r3, r2, r3
 8002e18:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	691b      	ldr	r3, [r3, #16]
 8002e20:	2b04      	cmp	r3, #4
 8002e22:	d00a      	beq.n	8002e3a <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6818      	ldr	r0, [r3, #0]
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	6919      	ldr	r1, [r3, #16]
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002e34:	f7ff fca0 	bl	8002778 <LL_ADC_SetOffset>
 8002e38:	e17b      	b.n	8003132 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2100      	movs	r1, #0
 8002e40:	4618      	mov	r0, r3
 8002e42:	f7ff fcbd 	bl	80027c0 <LL_ADC_GetOffsetChannel>
 8002e46:	4603      	mov	r3, r0
 8002e48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d10a      	bne.n	8002e66 <HAL_ADC_ConfigChannel+0x17e>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2100      	movs	r1, #0
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7ff fcb2 	bl	80027c0 <LL_ADC_GetOffsetChannel>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	0e9b      	lsrs	r3, r3, #26
 8002e60:	f003 021f 	and.w	r2, r3, #31
 8002e64:	e01e      	b.n	8002ea4 <HAL_ADC_ConfigChannel+0x1bc>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	2100      	movs	r1, #0
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f7ff fca7 	bl	80027c0 <LL_ADC_GetOffsetChannel>
 8002e72:	4603      	mov	r3, r0
 8002e74:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e78:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002e7c:	fa93 f3a3 	rbit	r3, r3
 8002e80:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002e84:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002e88:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002e8c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d101      	bne.n	8002e98 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8002e94:	2320      	movs	r3, #32
 8002e96:	e004      	b.n	8002ea2 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8002e98:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002e9c:	fab3 f383 	clz	r3, r3
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d105      	bne.n	8002ebc <HAL_ADC_ConfigChannel+0x1d4>
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	0e9b      	lsrs	r3, r3, #26
 8002eb6:	f003 031f 	and.w	r3, r3, #31
 8002eba:	e018      	b.n	8002eee <HAL_ADC_ConfigChannel+0x206>
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002ec8:	fa93 f3a3 	rbit	r3, r3
 8002ecc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002ed0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002ed4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002ed8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d101      	bne.n	8002ee4 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8002ee0:	2320      	movs	r3, #32
 8002ee2:	e004      	b.n	8002eee <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8002ee4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002ee8:	fab3 f383 	clz	r3, r3
 8002eec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d106      	bne.n	8002f00 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	2100      	movs	r1, #0
 8002efa:	4618      	mov	r0, r3
 8002efc:	f7ff fc76 	bl	80027ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2101      	movs	r1, #1
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7ff fc5a 	bl	80027c0 <LL_ADC_GetOffsetChannel>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d10a      	bne.n	8002f2c <HAL_ADC_ConfigChannel+0x244>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	2101      	movs	r1, #1
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f7ff fc4f 	bl	80027c0 <LL_ADC_GetOffsetChannel>
 8002f22:	4603      	mov	r3, r0
 8002f24:	0e9b      	lsrs	r3, r3, #26
 8002f26:	f003 021f 	and.w	r2, r3, #31
 8002f2a:	e01e      	b.n	8002f6a <HAL_ADC_ConfigChannel+0x282>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2101      	movs	r1, #1
 8002f32:	4618      	mov	r0, r3
 8002f34:	f7ff fc44 	bl	80027c0 <LL_ADC_GetOffsetChannel>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f3e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002f42:	fa93 f3a3 	rbit	r3, r3
 8002f46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002f4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002f4e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002f52:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d101      	bne.n	8002f5e <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8002f5a:	2320      	movs	r3, #32
 8002f5c:	e004      	b.n	8002f68 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8002f5e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002f62:	fab3 f383 	clz	r3, r3
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d105      	bne.n	8002f82 <HAL_ADC_ConfigChannel+0x29a>
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	0e9b      	lsrs	r3, r3, #26
 8002f7c:	f003 031f 	and.w	r3, r3, #31
 8002f80:	e018      	b.n	8002fb4 <HAL_ADC_ConfigChannel+0x2cc>
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f8a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002f8e:	fa93 f3a3 	rbit	r3, r3
 8002f92:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002f96:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002f9a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002f9e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d101      	bne.n	8002faa <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8002fa6:	2320      	movs	r3, #32
 8002fa8:	e004      	b.n	8002fb4 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8002faa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002fae:	fab3 f383 	clz	r3, r3
 8002fb2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d106      	bne.n	8002fc6 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	2101      	movs	r1, #1
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f7ff fc13 	bl	80027ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	2102      	movs	r1, #2
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f7ff fbf7 	bl	80027c0 <LL_ADC_GetOffsetChannel>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d10a      	bne.n	8002ff2 <HAL_ADC_ConfigChannel+0x30a>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2102      	movs	r1, #2
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f7ff fbec 	bl	80027c0 <LL_ADC_GetOffsetChannel>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	0e9b      	lsrs	r3, r3, #26
 8002fec:	f003 021f 	and.w	r2, r3, #31
 8002ff0:	e01e      	b.n	8003030 <HAL_ADC_ConfigChannel+0x348>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	2102      	movs	r1, #2
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f7ff fbe1 	bl	80027c0 <LL_ADC_GetOffsetChannel>
 8002ffe:	4603      	mov	r3, r0
 8003000:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003004:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003008:	fa93 f3a3 	rbit	r3, r3
 800300c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003010:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003014:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003018:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800301c:	2b00      	cmp	r3, #0
 800301e:	d101      	bne.n	8003024 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8003020:	2320      	movs	r3, #32
 8003022:	e004      	b.n	800302e <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8003024:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003028:	fab3 f383 	clz	r3, r3
 800302c:	b2db      	uxtb	r3, r3
 800302e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003038:	2b00      	cmp	r3, #0
 800303a:	d105      	bne.n	8003048 <HAL_ADC_ConfigChannel+0x360>
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	0e9b      	lsrs	r3, r3, #26
 8003042:	f003 031f 	and.w	r3, r3, #31
 8003046:	e016      	b.n	8003076 <HAL_ADC_ConfigChannel+0x38e>
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003050:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003054:	fa93 f3a3 	rbit	r3, r3
 8003058:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800305a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800305c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003060:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003064:	2b00      	cmp	r3, #0
 8003066:	d101      	bne.n	800306c <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8003068:	2320      	movs	r3, #32
 800306a:	e004      	b.n	8003076 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 800306c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003070:	fab3 f383 	clz	r3, r3
 8003074:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003076:	429a      	cmp	r2, r3
 8003078:	d106      	bne.n	8003088 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	2200      	movs	r2, #0
 8003080:	2102      	movs	r1, #2
 8003082:	4618      	mov	r0, r3
 8003084:	f7ff fbb2 	bl	80027ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2103      	movs	r1, #3
 800308e:	4618      	mov	r0, r3
 8003090:	f7ff fb96 	bl	80027c0 <LL_ADC_GetOffsetChannel>
 8003094:	4603      	mov	r3, r0
 8003096:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800309a:	2b00      	cmp	r3, #0
 800309c:	d10a      	bne.n	80030b4 <HAL_ADC_ConfigChannel+0x3cc>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2103      	movs	r1, #3
 80030a4:	4618      	mov	r0, r3
 80030a6:	f7ff fb8b 	bl	80027c0 <LL_ADC_GetOffsetChannel>
 80030aa:	4603      	mov	r3, r0
 80030ac:	0e9b      	lsrs	r3, r3, #26
 80030ae:	f003 021f 	and.w	r2, r3, #31
 80030b2:	e017      	b.n	80030e4 <HAL_ADC_ConfigChannel+0x3fc>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2103      	movs	r1, #3
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7ff fb80 	bl	80027c0 <LL_ADC_GetOffsetChannel>
 80030c0:	4603      	mov	r3, r0
 80030c2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030c6:	fa93 f3a3 	rbit	r3, r3
 80030ca:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80030cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80030ce:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80030d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d101      	bne.n	80030da <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 80030d6:	2320      	movs	r3, #32
 80030d8:	e003      	b.n	80030e2 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 80030da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030dc:	fab3 f383 	clz	r3, r3
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d105      	bne.n	80030fc <HAL_ADC_ConfigChannel+0x414>
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	0e9b      	lsrs	r3, r3, #26
 80030f6:	f003 031f 	and.w	r3, r3, #31
 80030fa:	e011      	b.n	8003120 <HAL_ADC_ConfigChannel+0x438>
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003102:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003104:	fa93 f3a3 	rbit	r3, r3
 8003108:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800310a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800310c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800310e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003110:	2b00      	cmp	r3, #0
 8003112:	d101      	bne.n	8003118 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8003114:	2320      	movs	r3, #32
 8003116:	e003      	b.n	8003120 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8003118:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800311a:	fab3 f383 	clz	r3, r3
 800311e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003120:	429a      	cmp	r2, r3
 8003122:	d106      	bne.n	8003132 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	2200      	movs	r2, #0
 800312a:	2103      	movs	r1, #3
 800312c:	4618      	mov	r0, r3
 800312e:	f7ff fb5d 	bl	80027ec <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4618      	mov	r0, r3
 8003138:	f7ff fc50 	bl	80029dc <LL_ADC_IsEnabled>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	f040 8140 	bne.w	80033c4 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6818      	ldr	r0, [r3, #0]
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	6819      	ldr	r1, [r3, #0]
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	461a      	mov	r2, r3
 8003152:	f7ff fbd1 	bl	80028f8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	4a8f      	ldr	r2, [pc, #572]	; (8003398 <HAL_ADC_ConfigChannel+0x6b0>)
 800315c:	4293      	cmp	r3, r2
 800315e:	f040 8131 	bne.w	80033c4 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800316e:	2b00      	cmp	r3, #0
 8003170:	d10b      	bne.n	800318a <HAL_ADC_ConfigChannel+0x4a2>
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	0e9b      	lsrs	r3, r3, #26
 8003178:	3301      	adds	r3, #1
 800317a:	f003 031f 	and.w	r3, r3, #31
 800317e:	2b09      	cmp	r3, #9
 8003180:	bf94      	ite	ls
 8003182:	2301      	movls	r3, #1
 8003184:	2300      	movhi	r3, #0
 8003186:	b2db      	uxtb	r3, r3
 8003188:	e019      	b.n	80031be <HAL_ADC_ConfigChannel+0x4d6>
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003190:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003192:	fa93 f3a3 	rbit	r3, r3
 8003196:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003198:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800319a:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800319c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d101      	bne.n	80031a6 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 80031a2:	2320      	movs	r3, #32
 80031a4:	e003      	b.n	80031ae <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 80031a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80031a8:	fab3 f383 	clz	r3, r3
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	3301      	adds	r3, #1
 80031b0:	f003 031f 	and.w	r3, r3, #31
 80031b4:	2b09      	cmp	r3, #9
 80031b6:	bf94      	ite	ls
 80031b8:	2301      	movls	r3, #1
 80031ba:	2300      	movhi	r3, #0
 80031bc:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d079      	beq.n	80032b6 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d107      	bne.n	80031de <HAL_ADC_ConfigChannel+0x4f6>
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	0e9b      	lsrs	r3, r3, #26
 80031d4:	3301      	adds	r3, #1
 80031d6:	069b      	lsls	r3, r3, #26
 80031d8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031dc:	e015      	b.n	800320a <HAL_ADC_ConfigChannel+0x522>
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031e6:	fa93 f3a3 	rbit	r3, r3
 80031ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80031ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031ee:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80031f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d101      	bne.n	80031fa <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 80031f6:	2320      	movs	r3, #32
 80031f8:	e003      	b.n	8003202 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 80031fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031fc:	fab3 f383 	clz	r3, r3
 8003200:	b2db      	uxtb	r3, r3
 8003202:	3301      	adds	r3, #1
 8003204:	069b      	lsls	r3, r3, #26
 8003206:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003212:	2b00      	cmp	r3, #0
 8003214:	d109      	bne.n	800322a <HAL_ADC_ConfigChannel+0x542>
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	0e9b      	lsrs	r3, r3, #26
 800321c:	3301      	adds	r3, #1
 800321e:	f003 031f 	and.w	r3, r3, #31
 8003222:	2101      	movs	r1, #1
 8003224:	fa01 f303 	lsl.w	r3, r1, r3
 8003228:	e017      	b.n	800325a <HAL_ADC_ConfigChannel+0x572>
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003230:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003232:	fa93 f3a3 	rbit	r3, r3
 8003236:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003238:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800323a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800323c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800323e:	2b00      	cmp	r3, #0
 8003240:	d101      	bne.n	8003246 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8003242:	2320      	movs	r3, #32
 8003244:	e003      	b.n	800324e <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8003246:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003248:	fab3 f383 	clz	r3, r3
 800324c:	b2db      	uxtb	r3, r3
 800324e:	3301      	adds	r3, #1
 8003250:	f003 031f 	and.w	r3, r3, #31
 8003254:	2101      	movs	r1, #1
 8003256:	fa01 f303 	lsl.w	r3, r1, r3
 800325a:	ea42 0103 	orr.w	r1, r2, r3
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003266:	2b00      	cmp	r3, #0
 8003268:	d10a      	bne.n	8003280 <HAL_ADC_ConfigChannel+0x598>
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	0e9b      	lsrs	r3, r3, #26
 8003270:	3301      	adds	r3, #1
 8003272:	f003 021f 	and.w	r2, r3, #31
 8003276:	4613      	mov	r3, r2
 8003278:	005b      	lsls	r3, r3, #1
 800327a:	4413      	add	r3, r2
 800327c:	051b      	lsls	r3, r3, #20
 800327e:	e018      	b.n	80032b2 <HAL_ADC_ConfigChannel+0x5ca>
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003288:	fa93 f3a3 	rbit	r3, r3
 800328c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800328e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003290:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003292:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003294:	2b00      	cmp	r3, #0
 8003296:	d101      	bne.n	800329c <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8003298:	2320      	movs	r3, #32
 800329a:	e003      	b.n	80032a4 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 800329c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800329e:	fab3 f383 	clz	r3, r3
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	3301      	adds	r3, #1
 80032a6:	f003 021f 	and.w	r2, r3, #31
 80032aa:	4613      	mov	r3, r2
 80032ac:	005b      	lsls	r3, r3, #1
 80032ae:	4413      	add	r3, r2
 80032b0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032b2:	430b      	orrs	r3, r1
 80032b4:	e081      	b.n	80033ba <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d107      	bne.n	80032d2 <HAL_ADC_ConfigChannel+0x5ea>
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	0e9b      	lsrs	r3, r3, #26
 80032c8:	3301      	adds	r3, #1
 80032ca:	069b      	lsls	r3, r3, #26
 80032cc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80032d0:	e015      	b.n	80032fe <HAL_ADC_ConfigChannel+0x616>
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032da:	fa93 f3a3 	rbit	r3, r3
 80032de:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80032e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032e2:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80032e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d101      	bne.n	80032ee <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 80032ea:	2320      	movs	r3, #32
 80032ec:	e003      	b.n	80032f6 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 80032ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032f0:	fab3 f383 	clz	r3, r3
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	3301      	adds	r3, #1
 80032f8:	069b      	lsls	r3, r3, #26
 80032fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003306:	2b00      	cmp	r3, #0
 8003308:	d109      	bne.n	800331e <HAL_ADC_ConfigChannel+0x636>
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	0e9b      	lsrs	r3, r3, #26
 8003310:	3301      	adds	r3, #1
 8003312:	f003 031f 	and.w	r3, r3, #31
 8003316:	2101      	movs	r1, #1
 8003318:	fa01 f303 	lsl.w	r3, r1, r3
 800331c:	e017      	b.n	800334e <HAL_ADC_ConfigChannel+0x666>
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003324:	6a3b      	ldr	r3, [r7, #32]
 8003326:	fa93 f3a3 	rbit	r3, r3
 800332a:	61fb      	str	r3, [r7, #28]
  return result;
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003332:	2b00      	cmp	r3, #0
 8003334:	d101      	bne.n	800333a <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8003336:	2320      	movs	r3, #32
 8003338:	e003      	b.n	8003342 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 800333a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333c:	fab3 f383 	clz	r3, r3
 8003340:	b2db      	uxtb	r3, r3
 8003342:	3301      	adds	r3, #1
 8003344:	f003 031f 	and.w	r3, r3, #31
 8003348:	2101      	movs	r1, #1
 800334a:	fa01 f303 	lsl.w	r3, r1, r3
 800334e:	ea42 0103 	orr.w	r1, r2, r3
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800335a:	2b00      	cmp	r3, #0
 800335c:	d10d      	bne.n	800337a <HAL_ADC_ConfigChannel+0x692>
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	0e9b      	lsrs	r3, r3, #26
 8003364:	3301      	adds	r3, #1
 8003366:	f003 021f 	and.w	r2, r3, #31
 800336a:	4613      	mov	r3, r2
 800336c:	005b      	lsls	r3, r3, #1
 800336e:	4413      	add	r3, r2
 8003370:	3b1e      	subs	r3, #30
 8003372:	051b      	lsls	r3, r3, #20
 8003374:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003378:	e01e      	b.n	80033b8 <HAL_ADC_ConfigChannel+0x6d0>
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	fa93 f3a3 	rbit	r3, r3
 8003386:	613b      	str	r3, [r7, #16]
  return result;
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d104      	bne.n	800339c <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8003392:	2320      	movs	r3, #32
 8003394:	e006      	b.n	80033a4 <HAL_ADC_ConfigChannel+0x6bc>
 8003396:	bf00      	nop
 8003398:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	fab3 f383 	clz	r3, r3
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	3301      	adds	r3, #1
 80033a6:	f003 021f 	and.w	r2, r3, #31
 80033aa:	4613      	mov	r3, r2
 80033ac:	005b      	lsls	r3, r3, #1
 80033ae:	4413      	add	r3, r2
 80033b0:	3b1e      	subs	r3, #30
 80033b2:	051b      	lsls	r3, r3, #20
 80033b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033b8:	430b      	orrs	r3, r1
 80033ba:	683a      	ldr	r2, [r7, #0]
 80033bc:	6892      	ldr	r2, [r2, #8]
 80033be:	4619      	mov	r1, r3
 80033c0:	f7ff fa6e 	bl	80028a0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	4b3d      	ldr	r3, [pc, #244]	; (80034c0 <HAL_ADC_ConfigChannel+0x7d8>)
 80033ca:	4013      	ands	r3, r2
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d06c      	beq.n	80034aa <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80033d0:	483c      	ldr	r0, [pc, #240]	; (80034c4 <HAL_ADC_ConfigChannel+0x7dc>)
 80033d2:	f7ff f9c3 	bl	800275c <LL_ADC_GetCommonPathInternalCh>
 80033d6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a3a      	ldr	r2, [pc, #232]	; (80034c8 <HAL_ADC_ConfigChannel+0x7e0>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d127      	bne.n	8003434 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80033e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80033e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d121      	bne.n	8003434 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a35      	ldr	r2, [pc, #212]	; (80034cc <HAL_ADC_ConfigChannel+0x7e4>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d157      	bne.n	80034aa <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80033fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80033fe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003402:	4619      	mov	r1, r3
 8003404:	482f      	ldr	r0, [pc, #188]	; (80034c4 <HAL_ADC_ConfigChannel+0x7dc>)
 8003406:	f7ff f996 	bl	8002736 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800340a:	4b31      	ldr	r3, [pc, #196]	; (80034d0 <HAL_ADC_ConfigChannel+0x7e8>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	099b      	lsrs	r3, r3, #6
 8003410:	4a30      	ldr	r2, [pc, #192]	; (80034d4 <HAL_ADC_ConfigChannel+0x7ec>)
 8003412:	fba2 2303 	umull	r2, r3, r2, r3
 8003416:	099b      	lsrs	r3, r3, #6
 8003418:	1c5a      	adds	r2, r3, #1
 800341a:	4613      	mov	r3, r2
 800341c:	005b      	lsls	r3, r3, #1
 800341e:	4413      	add	r3, r2
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003424:	e002      	b.n	800342c <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	3b01      	subs	r3, #1
 800342a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d1f9      	bne.n	8003426 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003432:	e03a      	b.n	80034aa <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a27      	ldr	r2, [pc, #156]	; (80034d8 <HAL_ADC_ConfigChannel+0x7f0>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d113      	bne.n	8003466 <HAL_ADC_ConfigChannel+0x77e>
 800343e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003442:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d10d      	bne.n	8003466 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a1f      	ldr	r2, [pc, #124]	; (80034cc <HAL_ADC_ConfigChannel+0x7e4>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d12a      	bne.n	80034aa <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003454:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003458:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800345c:	4619      	mov	r1, r3
 800345e:	4819      	ldr	r0, [pc, #100]	; (80034c4 <HAL_ADC_ConfigChannel+0x7dc>)
 8003460:	f7ff f969 	bl	8002736 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003464:	e021      	b.n	80034aa <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a1c      	ldr	r2, [pc, #112]	; (80034dc <HAL_ADC_ConfigChannel+0x7f4>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d11c      	bne.n	80034aa <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003470:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003474:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d116      	bne.n	80034aa <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a12      	ldr	r2, [pc, #72]	; (80034cc <HAL_ADC_ConfigChannel+0x7e4>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d111      	bne.n	80034aa <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003486:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800348a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800348e:	4619      	mov	r1, r3
 8003490:	480c      	ldr	r0, [pc, #48]	; (80034c4 <HAL_ADC_ConfigChannel+0x7dc>)
 8003492:	f7ff f950 	bl	8002736 <LL_ADC_SetCommonPathInternalCh>
 8003496:	e008      	b.n	80034aa <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800349c:	f043 0220 	orr.w	r2, r3, #32
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80034b2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	37d8      	adds	r7, #216	; 0xd8
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	80080000 	.word	0x80080000
 80034c4:	50040300 	.word	0x50040300
 80034c8:	c7520000 	.word	0xc7520000
 80034cc:	50040000 	.word	0x50040000
 80034d0:	20000004 	.word	0x20000004
 80034d4:	053e2d63 	.word	0x053e2d63
 80034d8:	cb840000 	.word	0xcb840000
 80034dc:	80000001 	.word	0x80000001

080034e0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d101      	bne.n	80034f2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e0ed      	b.n	80036ce <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d102      	bne.n	8003504 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f7fe fa7e 	bl	8001a00 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f042 0201 	orr.w	r2, r2, #1
 8003512:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003514:	f7ff f8f0 	bl	80026f8 <HAL_GetTick>
 8003518:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800351a:	e012      	b.n	8003542 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800351c:	f7ff f8ec 	bl	80026f8 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	2b0a      	cmp	r3, #10
 8003528:	d90b      	bls.n	8003542 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2205      	movs	r2, #5
 800353a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e0c5      	b.n	80036ce <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f003 0301 	and.w	r3, r3, #1
 800354c:	2b00      	cmp	r3, #0
 800354e:	d0e5      	beq.n	800351c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f022 0202 	bic.w	r2, r2, #2
 800355e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003560:	f7ff f8ca 	bl	80026f8 <HAL_GetTick>
 8003564:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003566:	e012      	b.n	800358e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003568:	f7ff f8c6 	bl	80026f8 <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	2b0a      	cmp	r3, #10
 8003574:	d90b      	bls.n	800358e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2205      	movs	r2, #5
 8003586:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e09f      	b.n	80036ce <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f003 0302 	and.w	r3, r3, #2
 8003598:	2b00      	cmp	r3, #0
 800359a:	d1e5      	bne.n	8003568 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	7e1b      	ldrb	r3, [r3, #24]
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d108      	bne.n	80035b6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80035b2:	601a      	str	r2, [r3, #0]
 80035b4:	e007      	b.n	80035c6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035c4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	7e5b      	ldrb	r3, [r3, #25]
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d108      	bne.n	80035e0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035dc:	601a      	str	r2, [r3, #0]
 80035de:	e007      	b.n	80035f0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035ee:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	7e9b      	ldrb	r3, [r3, #26]
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d108      	bne.n	800360a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f042 0220 	orr.w	r2, r2, #32
 8003606:	601a      	str	r2, [r3, #0]
 8003608:	e007      	b.n	800361a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f022 0220 	bic.w	r2, r2, #32
 8003618:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	7edb      	ldrb	r3, [r3, #27]
 800361e:	2b01      	cmp	r3, #1
 8003620:	d108      	bne.n	8003634 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f022 0210 	bic.w	r2, r2, #16
 8003630:	601a      	str	r2, [r3, #0]
 8003632:	e007      	b.n	8003644 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f042 0210 	orr.w	r2, r2, #16
 8003642:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	7f1b      	ldrb	r3, [r3, #28]
 8003648:	2b01      	cmp	r3, #1
 800364a:	d108      	bne.n	800365e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f042 0208 	orr.w	r2, r2, #8
 800365a:	601a      	str	r2, [r3, #0]
 800365c:	e007      	b.n	800366e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f022 0208 	bic.w	r2, r2, #8
 800366c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	7f5b      	ldrb	r3, [r3, #29]
 8003672:	2b01      	cmp	r3, #1
 8003674:	d108      	bne.n	8003688 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f042 0204 	orr.w	r2, r2, #4
 8003684:	601a      	str	r2, [r3, #0]
 8003686:	e007      	b.n	8003698 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f022 0204 	bic.w	r2, r2, #4
 8003696:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	689a      	ldr	r2, [r3, #8]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	431a      	orrs	r2, r3
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	691b      	ldr	r3, [r3, #16]
 80036a6:	431a      	orrs	r2, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	695b      	ldr	r3, [r3, #20]
 80036ac:	ea42 0103 	orr.w	r1, r2, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	1e5a      	subs	r2, r3, #1
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	430a      	orrs	r2, r1
 80036bc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3710      	adds	r7, #16
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
	...

080036d8 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80036e0:	4b05      	ldr	r3, [pc, #20]	; (80036f8 <LL_EXTI_EnableIT_0_31+0x20>)
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	4904      	ldr	r1, [pc, #16]	; (80036f8 <LL_EXTI_EnableIT_0_31+0x20>)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	600b      	str	r3, [r1, #0]
}
 80036ec:	bf00      	nop
 80036ee:	370c      	adds	r7, #12
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr
 80036f8:	40010400 	.word	0x40010400

080036fc <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b083      	sub	sp, #12
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8003704:	4b06      	ldr	r3, [pc, #24]	; (8003720 <LL_EXTI_DisableIT_0_31+0x24>)
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	43db      	mvns	r3, r3
 800370c:	4904      	ldr	r1, [pc, #16]	; (8003720 <LL_EXTI_DisableIT_0_31+0x24>)
 800370e:	4013      	ands	r3, r2
 8003710:	600b      	str	r3, [r1, #0]
}
 8003712:	bf00      	nop
 8003714:	370c      	adds	r7, #12
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr
 800371e:	bf00      	nop
 8003720:	40010400 	.word	0x40010400

08003724 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 800372c:	4b05      	ldr	r3, [pc, #20]	; (8003744 <LL_EXTI_EnableEvent_0_31+0x20>)
 800372e:	685a      	ldr	r2, [r3, #4]
 8003730:	4904      	ldr	r1, [pc, #16]	; (8003744 <LL_EXTI_EnableEvent_0_31+0x20>)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4313      	orrs	r3, r2
 8003736:	604b      	str	r3, [r1, #4]

}
 8003738:	bf00      	nop
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr
 8003744:	40010400 	.word	0x40010400

08003748 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8003750:	4b06      	ldr	r3, [pc, #24]	; (800376c <LL_EXTI_DisableEvent_0_31+0x24>)
 8003752:	685a      	ldr	r2, [r3, #4]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	43db      	mvns	r3, r3
 8003758:	4904      	ldr	r1, [pc, #16]	; (800376c <LL_EXTI_DisableEvent_0_31+0x24>)
 800375a:	4013      	ands	r3, r2
 800375c:	604b      	str	r3, [r1, #4]
}
 800375e:	bf00      	nop
 8003760:	370c      	adds	r7, #12
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr
 800376a:	bf00      	nop
 800376c:	40010400 	.word	0x40010400

08003770 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8003778:	4b05      	ldr	r3, [pc, #20]	; (8003790 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800377a:	689a      	ldr	r2, [r3, #8]
 800377c:	4904      	ldr	r1, [pc, #16]	; (8003790 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4313      	orrs	r3, r2
 8003782:	608b      	str	r3, [r1, #8]

}
 8003784:	bf00      	nop
 8003786:	370c      	adds	r7, #12
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr
 8003790:	40010400 	.word	0x40010400

08003794 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800379c:	4b06      	ldr	r3, [pc, #24]	; (80037b8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800379e:	689a      	ldr	r2, [r3, #8]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	43db      	mvns	r3, r3
 80037a4:	4904      	ldr	r1, [pc, #16]	; (80037b8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80037a6:	4013      	ands	r3, r2
 80037a8:	608b      	str	r3, [r1, #8]

}
 80037aa:	bf00      	nop
 80037ac:	370c      	adds	r7, #12
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop
 80037b8:	40010400 	.word	0x40010400

080037bc <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80037c4:	4b05      	ldr	r3, [pc, #20]	; (80037dc <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80037c6:	68da      	ldr	r2, [r3, #12]
 80037c8:	4904      	ldr	r1, [pc, #16]	; (80037dc <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	60cb      	str	r3, [r1, #12]
}
 80037d0:	bf00      	nop
 80037d2:	370c      	adds	r7, #12
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr
 80037dc:	40010400 	.word	0x40010400

080037e0 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80037e8:	4b06      	ldr	r3, [pc, #24]	; (8003804 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80037ea:	68da      	ldr	r2, [r3, #12]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	43db      	mvns	r3, r3
 80037f0:	4904      	ldr	r1, [pc, #16]	; (8003804 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80037f2:	4013      	ands	r3, r2
 80037f4:	60cb      	str	r3, [r1, #12]
}
 80037f6:	bf00      	nop
 80037f8:	370c      	adds	r7, #12
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr
 8003802:	bf00      	nop
 8003804:	40010400 	.word	0x40010400

08003808 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8003810:	4a04      	ldr	r2, [pc, #16]	; (8003824 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6153      	str	r3, [r2, #20]
}
 8003816:	bf00      	nop
 8003818:	370c      	adds	r7, #12
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	40010400 	.word	0x40010400

08003828 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b088      	sub	sp, #32
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8003830:	2300      	movs	r3, #0
 8003832:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8003834:	2300      	movs	r3, #0
 8003836:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d102      	bne.n	8003844 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	77fb      	strb	r3, [r7, #31]
 8003842:	e0d1      	b.n	80039e8 <HAL_COMP_Init+0x1c0>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800384e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003852:	d102      	bne.n	800385a <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	77fb      	strb	r3, [r7, #31]
 8003858:	e0c6      	b.n	80039e8 <HAL_COMP_Init+0x1c0>
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));
#if defined(COMP2)
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));
#endif

    if(hcomp->State == HAL_COMP_STATE_RESET)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003860:	b2db      	uxtb	r3, r3
 8003862:	2b00      	cmp	r3, #0
 8003864:	d115      	bne.n	8003892 <HAL_COMP_Init+0x6a>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	629a      	str	r2, [r3, #40]	; 0x28
      /*       COMP clock enable must be implemented by user                  */
      /*       in "HAL_COMP_MspInit()".                                       */
      /*       Therefore, for compatibility anticipation, it is recommended   */
      /*       to implement __HAL_RCC_SYSCFG_CLK_ENABLE()                     */
      /*       in "HAL_COMP_MspInit()".                                       */
      __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003874:	4b5f      	ldr	r3, [pc, #380]	; (80039f4 <HAL_COMP_Init+0x1cc>)
 8003876:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003878:	4a5e      	ldr	r2, [pc, #376]	; (80039f4 <HAL_COMP_Init+0x1cc>)
 800387a:	f043 0301 	orr.w	r3, r3, #1
 800387e:	6613      	str	r3, [r2, #96]	; 0x60
 8003880:	4b5c      	ldr	r3, [pc, #368]	; (80039f4 <HAL_COMP_Init+0x1cc>)
 8003882:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003884:	f003 0301 	and.w	r3, r3, #1
 8003888:	60bb      	str	r3, [r7, #8]
 800388a:	68bb      	ldr	r3, [r7, #8]

      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
      /* Init the low level hardware */
      HAL_COMP_MspInit(hcomp);
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f7fe f8fb 	bl	8001a88 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800389c:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.NonInvertingInput
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	68da      	ldr	r2, [r3, #12]
               | hcomp->Init.InvertingInput
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	69db      	ldr	r3, [r3, #28]
 80038ac:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	695b      	ldr	r3, [r3, #20]
 80038b2:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	699b      	ldr	r3, [r3, #24]
 80038b8:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (  hcomp->Init.NonInvertingInput
 80038be:	4313      	orrs	r3, r2
 80038c0:	617b      	str	r3, [r7, #20]
               COMP_CSR_BLANKING | COMP_CSR_BRGEN    | COMP_CSR_SCALEN  | COMP_CSR_INMESEL,
               tmp_csr
              );
#endif /* COMP_CSR_WINMODE */
#else
    MODIFY_REG(hcomp->Instance->CSR,
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	4b4b      	ldr	r3, [pc, #300]	; (80039f8 <HAL_COMP_Init+0x1d0>)
 80038ca:	4013      	ands	r3, r2
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	6812      	ldr	r2, [r2, #0]
 80038d0:	6979      	ldr	r1, [r7, #20]
 80038d2:	430b      	orrs	r3, r1
 80038d4:	6013      	str	r3, [r2, #0]
#if defined(COMP2)
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038de:	d106      	bne.n	80038ee <HAL_COMP_Init+0xc6>
    {
      SET_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 80038e0:	4b46      	ldr	r3, [pc, #280]	; (80039fc <HAL_COMP_Init+0x1d4>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a45      	ldr	r2, [pc, #276]	; (80039fc <HAL_COMP_Init+0x1d4>)
 80038e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038ea:	6013      	str	r3, [r2, #0]
 80038ec:	e005      	b.n	80038fa <HAL_COMP_Init+0xd2>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 80038ee:	4b43      	ldr	r3, [pc, #268]	; (80039fc <HAL_COMP_Init+0x1d4>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a42      	ldr	r2, [pc, #264]	; (80039fc <HAL_COMP_Init+0x1d4>)
 80038f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80038f8:	6013      	str	r3, [r2, #0]
    }
#endif /* COMP2 */

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003904:	2b00      	cmp	r3, #0
 8003906:	d016      	beq.n	8003936 <HAL_COMP_Init+0x10e>
 8003908:	69bb      	ldr	r3, [r7, #24]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d113      	bne.n	8003936 <HAL_COMP_Init+0x10e>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800390e:	4b3c      	ldr	r3, [pc, #240]	; (8003a00 <HAL_COMP_Init+0x1d8>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	099b      	lsrs	r3, r3, #6
 8003914:	4a3b      	ldr	r2, [pc, #236]	; (8003a04 <HAL_COMP_Init+0x1dc>)
 8003916:	fba2 2303 	umull	r2, r3, r2, r3
 800391a:	099b      	lsrs	r3, r3, #6
 800391c:	1c5a      	adds	r2, r3, #1
 800391e:	4613      	mov	r3, r2
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	4413      	add	r3, r2
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8003928:	e002      	b.n	8003930 <HAL_COMP_Init+0x108>
      {
        wait_loop_index--;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	3b01      	subs	r3, #1
 800392e:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d1f9      	bne.n	800392a <HAL_COMP_Init+0x102>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a33      	ldr	r2, [pc, #204]	; (8003a08 <HAL_COMP_Init+0x1e0>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d102      	bne.n	8003946 <HAL_COMP_Init+0x11e>
 8003940:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003944:	e001      	b.n	800394a <HAL_COMP_Init+0x122>
 8003946:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800394a:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6a1b      	ldr	r3, [r3, #32]
 8003950:	f003 0303 	and.w	r3, r3, #3
 8003954:	2b00      	cmp	r3, #0
 8003956:	d037      	beq.n	80039c8 <HAL_COMP_Init+0x1a0>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6a1b      	ldr	r3, [r3, #32]
 800395c:	f003 0310 	and.w	r3, r3, #16
 8003960:	2b00      	cmp	r3, #0
 8003962:	d003      	beq.n	800396c <HAL_COMP_Init+0x144>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8003964:	6938      	ldr	r0, [r7, #16]
 8003966:	f7ff ff03 	bl	8003770 <LL_EXTI_EnableRisingTrig_0_31>
 800396a:	e002      	b.n	8003972 <HAL_COMP_Init+0x14a>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 800396c:	6938      	ldr	r0, [r7, #16]
 800396e:	f7ff ff11 	bl	8003794 <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a1b      	ldr	r3, [r3, #32]
 8003976:	f003 0320 	and.w	r3, r3, #32
 800397a:	2b00      	cmp	r3, #0
 800397c:	d003      	beq.n	8003986 <HAL_COMP_Init+0x15e>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 800397e:	6938      	ldr	r0, [r7, #16]
 8003980:	f7ff ff1c 	bl	80037bc <LL_EXTI_EnableFallingTrig_0_31>
 8003984:	e002      	b.n	800398c <HAL_COMP_Init+0x164>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8003986:	6938      	ldr	r0, [r7, #16]
 8003988:	f7ff ff2a 	bl	80037e0 <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearFlag_0_31(exti_line);
 800398c:	6938      	ldr	r0, [r7, #16]
 800398e:	f7ff ff3b 	bl	8003808 <LL_EXTI_ClearFlag_0_31>

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a1b      	ldr	r3, [r3, #32]
 8003996:	f003 0302 	and.w	r3, r3, #2
 800399a:	2b00      	cmp	r3, #0
 800399c:	d003      	beq.n	80039a6 <HAL_COMP_Init+0x17e>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 800399e:	6938      	ldr	r0, [r7, #16]
 80039a0:	f7ff fec0 	bl	8003724 <LL_EXTI_EnableEvent_0_31>
 80039a4:	e002      	b.n	80039ac <HAL_COMP_Init+0x184>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 80039a6:	6938      	ldr	r0, [r7, #16]
 80039a8:	f7ff fece 	bl	8003748 <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a1b      	ldr	r3, [r3, #32]
 80039b0:	f003 0301 	and.w	r3, r3, #1
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d003      	beq.n	80039c0 <HAL_COMP_Init+0x198>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 80039b8:	6938      	ldr	r0, [r7, #16]
 80039ba:	f7ff fe8d 	bl	80036d8 <LL_EXTI_EnableIT_0_31>
 80039be:	e009      	b.n	80039d4 <HAL_COMP_Init+0x1ac>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 80039c0:	6938      	ldr	r0, [r7, #16]
 80039c2:	f7ff fe9b 	bl	80036fc <LL_EXTI_DisableIT_0_31>
 80039c6:	e005      	b.n	80039d4 <HAL_COMP_Init+0x1ac>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 80039c8:	6938      	ldr	r0, [r7, #16]
 80039ca:	f7ff febd 	bl	8003748 <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 80039ce:	6938      	ldr	r0, [r7, #16]
 80039d0:	f7ff fe94 	bl	80036fc <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d103      	bne.n	80039e8 <HAL_COMP_Init+0x1c0>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 80039e8:	7ffb      	ldrb	r3, [r7, #31]
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3720      	adds	r7, #32
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	40021000 	.word	0x40021000
 80039f8:	ff207d03 	.word	0xff207d03
 80039fc:	40010204 	.word	0x40010204
 8003a00:	20000004 	.word	0x20000004
 8003a04:	053e2d63 	.word	0x053e2d63
 8003a08:	40010200 	.word	0x40010200

08003a0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b085      	sub	sp, #20
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f003 0307 	and.w	r3, r3, #7
 8003a1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a1c:	4b0c      	ldr	r3, [pc, #48]	; (8003a50 <__NVIC_SetPriorityGrouping+0x44>)
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a22:	68ba      	ldr	r2, [r7, #8]
 8003a24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a28:	4013      	ands	r3, r2
 8003a2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a3e:	4a04      	ldr	r2, [pc, #16]	; (8003a50 <__NVIC_SetPriorityGrouping+0x44>)
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	60d3      	str	r3, [r2, #12]
}
 8003a44:	bf00      	nop
 8003a46:	3714      	adds	r7, #20
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr
 8003a50:	e000ed00 	.word	0xe000ed00

08003a54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a54:	b480      	push	{r7}
 8003a56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a58:	4b04      	ldr	r3, [pc, #16]	; (8003a6c <__NVIC_GetPriorityGrouping+0x18>)
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	0a1b      	lsrs	r3, r3, #8
 8003a5e:	f003 0307 	and.w	r3, r3, #7
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr
 8003a6c:	e000ed00 	.word	0xe000ed00

08003a70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	4603      	mov	r3, r0
 8003a78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	db0b      	blt.n	8003a9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a82:	79fb      	ldrb	r3, [r7, #7]
 8003a84:	f003 021f 	and.w	r2, r3, #31
 8003a88:	4907      	ldr	r1, [pc, #28]	; (8003aa8 <__NVIC_EnableIRQ+0x38>)
 8003a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a8e:	095b      	lsrs	r3, r3, #5
 8003a90:	2001      	movs	r0, #1
 8003a92:	fa00 f202 	lsl.w	r2, r0, r2
 8003a96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003a9a:	bf00      	nop
 8003a9c:	370c      	adds	r7, #12
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr
 8003aa6:	bf00      	nop
 8003aa8:	e000e100 	.word	0xe000e100

08003aac <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	db12      	blt.n	8003ae4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003abe:	79fb      	ldrb	r3, [r7, #7]
 8003ac0:	f003 021f 	and.w	r2, r3, #31
 8003ac4:	490a      	ldr	r1, [pc, #40]	; (8003af0 <__NVIC_DisableIRQ+0x44>)
 8003ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aca:	095b      	lsrs	r3, r3, #5
 8003acc:	2001      	movs	r0, #1
 8003ace:	fa00 f202 	lsl.w	r2, r0, r2
 8003ad2:	3320      	adds	r3, #32
 8003ad4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003ad8:	f3bf 8f4f 	dsb	sy
}
 8003adc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003ade:	f3bf 8f6f 	isb	sy
}
 8003ae2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003ae4:	bf00      	nop
 8003ae6:	370c      	adds	r7, #12
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr
 8003af0:	e000e100 	.word	0xe000e100

08003af4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	4603      	mov	r3, r0
 8003afc:	6039      	str	r1, [r7, #0]
 8003afe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	db0a      	blt.n	8003b1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	b2da      	uxtb	r2, r3
 8003b0c:	490c      	ldr	r1, [pc, #48]	; (8003b40 <__NVIC_SetPriority+0x4c>)
 8003b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b12:	0112      	lsls	r2, r2, #4
 8003b14:	b2d2      	uxtb	r2, r2
 8003b16:	440b      	add	r3, r1
 8003b18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b1c:	e00a      	b.n	8003b34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	b2da      	uxtb	r2, r3
 8003b22:	4908      	ldr	r1, [pc, #32]	; (8003b44 <__NVIC_SetPriority+0x50>)
 8003b24:	79fb      	ldrb	r3, [r7, #7]
 8003b26:	f003 030f 	and.w	r3, r3, #15
 8003b2a:	3b04      	subs	r3, #4
 8003b2c:	0112      	lsls	r2, r2, #4
 8003b2e:	b2d2      	uxtb	r2, r2
 8003b30:	440b      	add	r3, r1
 8003b32:	761a      	strb	r2, [r3, #24]
}
 8003b34:	bf00      	nop
 8003b36:	370c      	adds	r7, #12
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr
 8003b40:	e000e100 	.word	0xe000e100
 8003b44:	e000ed00 	.word	0xe000ed00

08003b48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b089      	sub	sp, #36	; 0x24
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	60b9      	str	r1, [r7, #8]
 8003b52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f003 0307 	and.w	r3, r3, #7
 8003b5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	f1c3 0307 	rsb	r3, r3, #7
 8003b62:	2b04      	cmp	r3, #4
 8003b64:	bf28      	it	cs
 8003b66:	2304      	movcs	r3, #4
 8003b68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	3304      	adds	r3, #4
 8003b6e:	2b06      	cmp	r3, #6
 8003b70:	d902      	bls.n	8003b78 <NVIC_EncodePriority+0x30>
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	3b03      	subs	r3, #3
 8003b76:	e000      	b.n	8003b7a <NVIC_EncodePriority+0x32>
 8003b78:	2300      	movs	r3, #0
 8003b7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003b80:	69bb      	ldr	r3, [r7, #24]
 8003b82:	fa02 f303 	lsl.w	r3, r2, r3
 8003b86:	43da      	mvns	r2, r3
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	401a      	ands	r2, r3
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b90:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	fa01 f303 	lsl.w	r3, r1, r3
 8003b9a:	43d9      	mvns	r1, r3
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ba0:	4313      	orrs	r3, r2
         );
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3724      	adds	r7, #36	; 0x24
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr
	...

08003bb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b082      	sub	sp, #8
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003bc0:	d301      	bcc.n	8003bc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e00f      	b.n	8003be6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003bc6:	4a0a      	ldr	r2, [pc, #40]	; (8003bf0 <SysTick_Config+0x40>)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	3b01      	subs	r3, #1
 8003bcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003bce:	210f      	movs	r1, #15
 8003bd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003bd4:	f7ff ff8e 	bl	8003af4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003bd8:	4b05      	ldr	r3, [pc, #20]	; (8003bf0 <SysTick_Config+0x40>)
 8003bda:	2200      	movs	r2, #0
 8003bdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003bde:	4b04      	ldr	r3, [pc, #16]	; (8003bf0 <SysTick_Config+0x40>)
 8003be0:	2207      	movs	r2, #7
 8003be2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003be4:	2300      	movs	r3, #0
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3708      	adds	r7, #8
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	e000e010 	.word	0xe000e010

08003bf4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f7ff ff05 	bl	8003a0c <__NVIC_SetPriorityGrouping>
}
 8003c02:	bf00      	nop
 8003c04:	3708      	adds	r7, #8
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}

08003c0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c0a:	b580      	push	{r7, lr}
 8003c0c:	b086      	sub	sp, #24
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	4603      	mov	r3, r0
 8003c12:	60b9      	str	r1, [r7, #8]
 8003c14:	607a      	str	r2, [r7, #4]
 8003c16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003c1c:	f7ff ff1a 	bl	8003a54 <__NVIC_GetPriorityGrouping>
 8003c20:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	68b9      	ldr	r1, [r7, #8]
 8003c26:	6978      	ldr	r0, [r7, #20]
 8003c28:	f7ff ff8e 	bl	8003b48 <NVIC_EncodePriority>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c32:	4611      	mov	r1, r2
 8003c34:	4618      	mov	r0, r3
 8003c36:	f7ff ff5d 	bl	8003af4 <__NVIC_SetPriority>
}
 8003c3a:	bf00      	nop
 8003c3c:	3718      	adds	r7, #24
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}

08003c42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c42:	b580      	push	{r7, lr}
 8003c44:	b082      	sub	sp, #8
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	4603      	mov	r3, r0
 8003c4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c50:	4618      	mov	r0, r3
 8003c52:	f7ff ff0d 	bl	8003a70 <__NVIC_EnableIRQ>
}
 8003c56:	bf00      	nop
 8003c58:	3708      	adds	r7, #8
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}

08003c5e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003c5e:	b580      	push	{r7, lr}
 8003c60:	b082      	sub	sp, #8
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	4603      	mov	r3, r0
 8003c66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003c68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f7ff ff1d 	bl	8003aac <__NVIC_DisableIRQ>
}
 8003c72:	bf00      	nop
 8003c74:	3708      	adds	r7, #8
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}

08003c7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c7a:	b580      	push	{r7, lr}
 8003c7c:	b082      	sub	sp, #8
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f7ff ff94 	bl	8003bb0 <SysTick_Config>
 8003c88:	4603      	mov	r3, r0
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3708      	adds	r7, #8
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
	...

08003c94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b087      	sub	sp, #28
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ca2:	e166      	b.n	8003f72 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	2101      	movs	r1, #1
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	fa01 f303 	lsl.w	r3, r1, r3
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	f000 8158 	beq.w	8003f6c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	f003 0303 	and.w	r3, r3, #3
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d005      	beq.n	8003cd4 <HAL_GPIO_Init+0x40>
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	f003 0303 	and.w	r3, r3, #3
 8003cd0:	2b02      	cmp	r3, #2
 8003cd2:	d130      	bne.n	8003d36 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	005b      	lsls	r3, r3, #1
 8003cde:	2203      	movs	r2, #3
 8003ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce4:	43db      	mvns	r3, r3
 8003ce6:	693a      	ldr	r2, [r7, #16]
 8003ce8:	4013      	ands	r3, r2
 8003cea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	68da      	ldr	r2, [r3, #12]
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	005b      	lsls	r3, r3, #1
 8003cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf8:	693a      	ldr	r2, [r7, #16]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	693a      	ldr	r2, [r7, #16]
 8003d02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d12:	43db      	mvns	r3, r3
 8003d14:	693a      	ldr	r2, [r7, #16]
 8003d16:	4013      	ands	r3, r2
 8003d18:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	091b      	lsrs	r3, r3, #4
 8003d20:	f003 0201 	and.w	r2, r3, #1
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2a:	693a      	ldr	r2, [r7, #16]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	693a      	ldr	r2, [r7, #16]
 8003d34:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	f003 0303 	and.w	r3, r3, #3
 8003d3e:	2b03      	cmp	r3, #3
 8003d40:	d017      	beq.n	8003d72 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	005b      	lsls	r3, r3, #1
 8003d4c:	2203      	movs	r2, #3
 8003d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d52:	43db      	mvns	r3, r3
 8003d54:	693a      	ldr	r2, [r7, #16]
 8003d56:	4013      	ands	r3, r2
 8003d58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	689a      	ldr	r2, [r3, #8]
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	005b      	lsls	r3, r3, #1
 8003d62:	fa02 f303 	lsl.w	r3, r2, r3
 8003d66:	693a      	ldr	r2, [r7, #16]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	693a      	ldr	r2, [r7, #16]
 8003d70:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	f003 0303 	and.w	r3, r3, #3
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d123      	bne.n	8003dc6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	08da      	lsrs	r2, r3, #3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	3208      	adds	r2, #8
 8003d86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d8a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	f003 0307 	and.w	r3, r3, #7
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	220f      	movs	r2, #15
 8003d96:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9a:	43db      	mvns	r3, r3
 8003d9c:	693a      	ldr	r2, [r7, #16]
 8003d9e:	4013      	ands	r3, r2
 8003da0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	691a      	ldr	r2, [r3, #16]
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	f003 0307 	and.w	r3, r3, #7
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	fa02 f303 	lsl.w	r3, r2, r3
 8003db2:	693a      	ldr	r2, [r7, #16]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	08da      	lsrs	r2, r3, #3
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	3208      	adds	r2, #8
 8003dc0:	6939      	ldr	r1, [r7, #16]
 8003dc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	005b      	lsls	r3, r3, #1
 8003dd0:	2203      	movs	r2, #3
 8003dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd6:	43db      	mvns	r3, r3
 8003dd8:	693a      	ldr	r2, [r7, #16]
 8003dda:	4013      	ands	r3, r2
 8003ddc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	f003 0203 	and.w	r2, r3, #3
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	005b      	lsls	r3, r3, #1
 8003dea:	fa02 f303 	lsl.w	r3, r2, r3
 8003dee:	693a      	ldr	r2, [r7, #16]
 8003df0:	4313      	orrs	r3, r2
 8003df2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	693a      	ldr	r2, [r7, #16]
 8003df8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	f000 80b2 	beq.w	8003f6c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e08:	4b61      	ldr	r3, [pc, #388]	; (8003f90 <HAL_GPIO_Init+0x2fc>)
 8003e0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e0c:	4a60      	ldr	r2, [pc, #384]	; (8003f90 <HAL_GPIO_Init+0x2fc>)
 8003e0e:	f043 0301 	orr.w	r3, r3, #1
 8003e12:	6613      	str	r3, [r2, #96]	; 0x60
 8003e14:	4b5e      	ldr	r3, [pc, #376]	; (8003f90 <HAL_GPIO_Init+0x2fc>)
 8003e16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e18:	f003 0301 	and.w	r3, r3, #1
 8003e1c:	60bb      	str	r3, [r7, #8]
 8003e1e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003e20:	4a5c      	ldr	r2, [pc, #368]	; (8003f94 <HAL_GPIO_Init+0x300>)
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	089b      	lsrs	r3, r3, #2
 8003e26:	3302      	adds	r3, #2
 8003e28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	f003 0303 	and.w	r3, r3, #3
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	220f      	movs	r2, #15
 8003e38:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3c:	43db      	mvns	r3, r3
 8003e3e:	693a      	ldr	r2, [r7, #16]
 8003e40:	4013      	ands	r3, r2
 8003e42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003e4a:	d02b      	beq.n	8003ea4 <HAL_GPIO_Init+0x210>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	4a52      	ldr	r2, [pc, #328]	; (8003f98 <HAL_GPIO_Init+0x304>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d025      	beq.n	8003ea0 <HAL_GPIO_Init+0x20c>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	4a51      	ldr	r2, [pc, #324]	; (8003f9c <HAL_GPIO_Init+0x308>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d01f      	beq.n	8003e9c <HAL_GPIO_Init+0x208>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	4a50      	ldr	r2, [pc, #320]	; (8003fa0 <HAL_GPIO_Init+0x30c>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d019      	beq.n	8003e98 <HAL_GPIO_Init+0x204>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4a4f      	ldr	r2, [pc, #316]	; (8003fa4 <HAL_GPIO_Init+0x310>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d013      	beq.n	8003e94 <HAL_GPIO_Init+0x200>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	4a4e      	ldr	r2, [pc, #312]	; (8003fa8 <HAL_GPIO_Init+0x314>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d00d      	beq.n	8003e90 <HAL_GPIO_Init+0x1fc>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	4a4d      	ldr	r2, [pc, #308]	; (8003fac <HAL_GPIO_Init+0x318>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d007      	beq.n	8003e8c <HAL_GPIO_Init+0x1f8>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4a4c      	ldr	r2, [pc, #304]	; (8003fb0 <HAL_GPIO_Init+0x31c>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d101      	bne.n	8003e88 <HAL_GPIO_Init+0x1f4>
 8003e84:	2307      	movs	r3, #7
 8003e86:	e00e      	b.n	8003ea6 <HAL_GPIO_Init+0x212>
 8003e88:	2308      	movs	r3, #8
 8003e8a:	e00c      	b.n	8003ea6 <HAL_GPIO_Init+0x212>
 8003e8c:	2306      	movs	r3, #6
 8003e8e:	e00a      	b.n	8003ea6 <HAL_GPIO_Init+0x212>
 8003e90:	2305      	movs	r3, #5
 8003e92:	e008      	b.n	8003ea6 <HAL_GPIO_Init+0x212>
 8003e94:	2304      	movs	r3, #4
 8003e96:	e006      	b.n	8003ea6 <HAL_GPIO_Init+0x212>
 8003e98:	2303      	movs	r3, #3
 8003e9a:	e004      	b.n	8003ea6 <HAL_GPIO_Init+0x212>
 8003e9c:	2302      	movs	r3, #2
 8003e9e:	e002      	b.n	8003ea6 <HAL_GPIO_Init+0x212>
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e000      	b.n	8003ea6 <HAL_GPIO_Init+0x212>
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	697a      	ldr	r2, [r7, #20]
 8003ea8:	f002 0203 	and.w	r2, r2, #3
 8003eac:	0092      	lsls	r2, r2, #2
 8003eae:	4093      	lsls	r3, r2
 8003eb0:	693a      	ldr	r2, [r7, #16]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003eb6:	4937      	ldr	r1, [pc, #220]	; (8003f94 <HAL_GPIO_Init+0x300>)
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	089b      	lsrs	r3, r3, #2
 8003ebc:	3302      	adds	r3, #2
 8003ebe:	693a      	ldr	r2, [r7, #16]
 8003ec0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003ec4:	4b3b      	ldr	r3, [pc, #236]	; (8003fb4 <HAL_GPIO_Init+0x320>)
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	43db      	mvns	r3, r3
 8003ece:	693a      	ldr	r2, [r7, #16]
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d003      	beq.n	8003ee8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003ee0:	693a      	ldr	r2, [r7, #16]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003ee8:	4a32      	ldr	r2, [pc, #200]	; (8003fb4 <HAL_GPIO_Init+0x320>)
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003eee:	4b31      	ldr	r3, [pc, #196]	; (8003fb4 <HAL_GPIO_Init+0x320>)
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	43db      	mvns	r3, r3
 8003ef8:	693a      	ldr	r2, [r7, #16]
 8003efa:	4013      	ands	r3, r2
 8003efc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d003      	beq.n	8003f12 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003f0a:	693a      	ldr	r2, [r7, #16]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003f12:	4a28      	ldr	r2, [pc, #160]	; (8003fb4 <HAL_GPIO_Init+0x320>)
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003f18:	4b26      	ldr	r3, [pc, #152]	; (8003fb4 <HAL_GPIO_Init+0x320>)
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	43db      	mvns	r3, r3
 8003f22:	693a      	ldr	r2, [r7, #16]
 8003f24:	4013      	ands	r3, r2
 8003f26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d003      	beq.n	8003f3c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003f34:	693a      	ldr	r2, [r7, #16]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003f3c:	4a1d      	ldr	r2, [pc, #116]	; (8003fb4 <HAL_GPIO_Init+0x320>)
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003f42:	4b1c      	ldr	r3, [pc, #112]	; (8003fb4 <HAL_GPIO_Init+0x320>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	43db      	mvns	r3, r3
 8003f4c:	693a      	ldr	r2, [r7, #16]
 8003f4e:	4013      	ands	r3, r2
 8003f50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d003      	beq.n	8003f66 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003f5e:	693a      	ldr	r2, [r7, #16]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003f66:	4a13      	ldr	r2, [pc, #76]	; (8003fb4 <HAL_GPIO_Init+0x320>)
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	3301      	adds	r3, #1
 8003f70:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	fa22 f303 	lsr.w	r3, r2, r3
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	f47f ae91 	bne.w	8003ca4 <HAL_GPIO_Init+0x10>
  }
}
 8003f82:	bf00      	nop
 8003f84:	bf00      	nop
 8003f86:	371c      	adds	r7, #28
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr
 8003f90:	40021000 	.word	0x40021000
 8003f94:	40010000 	.word	0x40010000
 8003f98:	48000400 	.word	0x48000400
 8003f9c:	48000800 	.word	0x48000800
 8003fa0:	48000c00 	.word	0x48000c00
 8003fa4:	48001000 	.word	0x48001000
 8003fa8:	48001400 	.word	0x48001400
 8003fac:	48001800 	.word	0x48001800
 8003fb0:	48001c00 	.word	0x48001c00
 8003fb4:	40010400 	.word	0x40010400

08003fb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b083      	sub	sp, #12
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	460b      	mov	r3, r1
 8003fc2:	807b      	strh	r3, [r7, #2]
 8003fc4:	4613      	mov	r3, r2
 8003fc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003fc8:	787b      	ldrb	r3, [r7, #1]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d003      	beq.n	8003fd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003fce:	887a      	ldrh	r2, [r7, #2]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003fd4:	e002      	b.n	8003fdc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003fd6:	887a      	ldrh	r2, [r7, #2]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003fdc:	bf00      	nop
 8003fde:	370c      	adds	r7, #12
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr

08003fe8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fec:	4b05      	ldr	r3, [pc, #20]	; (8004004 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a04      	ldr	r2, [pc, #16]	; (8004004 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003ff2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ff6:	6013      	str	r3, [r2, #0]
}
 8003ff8:	bf00      	nop
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr
 8004002:	bf00      	nop
 8004004:	40007000 	.word	0x40007000

08004008 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004008:	b480      	push	{r7}
 800400a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800400c:	4b0d      	ldr	r3, [pc, #52]	; (8004044 <HAL_PWREx_GetVoltageRange+0x3c>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004014:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004018:	d102      	bne.n	8004020 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800401a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800401e:	e00b      	b.n	8004038 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8004020:	4b08      	ldr	r3, [pc, #32]	; (8004044 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004022:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800402a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800402e:	d102      	bne.n	8004036 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8004030:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004034:	e000      	b.n	8004038 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8004036:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8004038:	4618      	mov	r0, r3
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr
 8004042:	bf00      	nop
 8004044:	40007000 	.word	0x40007000

08004048 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004048:	b480      	push	{r7}
 800404a:	b085      	sub	sp, #20
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d141      	bne.n	80040da <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004056:	4b4b      	ldr	r3, [pc, #300]	; (8004184 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800405e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004062:	d131      	bne.n	80040c8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004064:	4b47      	ldr	r3, [pc, #284]	; (8004184 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004066:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800406a:	4a46      	ldr	r2, [pc, #280]	; (8004184 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800406c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004070:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004074:	4b43      	ldr	r3, [pc, #268]	; (8004184 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800407c:	4a41      	ldr	r2, [pc, #260]	; (8004184 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800407e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004082:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004084:	4b40      	ldr	r3, [pc, #256]	; (8004188 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	2232      	movs	r2, #50	; 0x32
 800408a:	fb02 f303 	mul.w	r3, r2, r3
 800408e:	4a3f      	ldr	r2, [pc, #252]	; (800418c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004090:	fba2 2303 	umull	r2, r3, r2, r3
 8004094:	0c9b      	lsrs	r3, r3, #18
 8004096:	3301      	adds	r3, #1
 8004098:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800409a:	e002      	b.n	80040a2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	3b01      	subs	r3, #1
 80040a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040a2:	4b38      	ldr	r3, [pc, #224]	; (8004184 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040a4:	695b      	ldr	r3, [r3, #20]
 80040a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040ae:	d102      	bne.n	80040b6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d1f2      	bne.n	800409c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80040b6:	4b33      	ldr	r3, [pc, #204]	; (8004184 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040b8:	695b      	ldr	r3, [r3, #20]
 80040ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040c2:	d158      	bne.n	8004176 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80040c4:	2303      	movs	r3, #3
 80040c6:	e057      	b.n	8004178 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80040c8:	4b2e      	ldr	r3, [pc, #184]	; (8004184 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040ce:	4a2d      	ldr	r2, [pc, #180]	; (8004184 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80040d8:	e04d      	b.n	8004176 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040e0:	d141      	bne.n	8004166 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80040e2:	4b28      	ldr	r3, [pc, #160]	; (8004184 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80040ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040ee:	d131      	bne.n	8004154 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80040f0:	4b24      	ldr	r3, [pc, #144]	; (8004184 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040f6:	4a23      	ldr	r2, [pc, #140]	; (8004184 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004100:	4b20      	ldr	r3, [pc, #128]	; (8004184 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004108:	4a1e      	ldr	r2, [pc, #120]	; (8004184 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800410a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800410e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004110:	4b1d      	ldr	r3, [pc, #116]	; (8004188 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	2232      	movs	r2, #50	; 0x32
 8004116:	fb02 f303 	mul.w	r3, r2, r3
 800411a:	4a1c      	ldr	r2, [pc, #112]	; (800418c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800411c:	fba2 2303 	umull	r2, r3, r2, r3
 8004120:	0c9b      	lsrs	r3, r3, #18
 8004122:	3301      	adds	r3, #1
 8004124:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004126:	e002      	b.n	800412e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	3b01      	subs	r3, #1
 800412c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800412e:	4b15      	ldr	r3, [pc, #84]	; (8004184 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004130:	695b      	ldr	r3, [r3, #20]
 8004132:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004136:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800413a:	d102      	bne.n	8004142 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d1f2      	bne.n	8004128 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004142:	4b10      	ldr	r3, [pc, #64]	; (8004184 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004144:	695b      	ldr	r3, [r3, #20]
 8004146:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800414a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800414e:	d112      	bne.n	8004176 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004150:	2303      	movs	r3, #3
 8004152:	e011      	b.n	8004178 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004154:	4b0b      	ldr	r3, [pc, #44]	; (8004184 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004156:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800415a:	4a0a      	ldr	r2, [pc, #40]	; (8004184 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800415c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004160:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004164:	e007      	b.n	8004176 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004166:	4b07      	ldr	r3, [pc, #28]	; (8004184 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800416e:	4a05      	ldr	r2, [pc, #20]	; (8004184 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004170:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004174:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004176:	2300      	movs	r3, #0
}
 8004178:	4618      	mov	r0, r3
 800417a:	3714      	adds	r7, #20
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr
 8004184:	40007000 	.word	0x40007000
 8004188:	20000004 	.word	0x20000004
 800418c:	431bde83 	.word	0x431bde83

08004190 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8004190:	b480      	push	{r7}
 8004192:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8004194:	4b05      	ldr	r3, [pc, #20]	; (80041ac <HAL_PWREx_EnableVddIO2+0x1c>)
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	4a04      	ldr	r2, [pc, #16]	; (80041ac <HAL_PWREx_EnableVddIO2+0x1c>)
 800419a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800419e:	6053      	str	r3, [r2, #4]
}
 80041a0:	bf00      	nop
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr
 80041aa:	bf00      	nop
 80041ac:	40007000 	.word	0x40007000

080041b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b088      	sub	sp, #32
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d102      	bne.n	80041c4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	f000 bc08 	b.w	80049d4 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041c4:	4b96      	ldr	r3, [pc, #600]	; (8004420 <HAL_RCC_OscConfig+0x270>)
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	f003 030c 	and.w	r3, r3, #12
 80041cc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041ce:	4b94      	ldr	r3, [pc, #592]	; (8004420 <HAL_RCC_OscConfig+0x270>)
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	f003 0303 	and.w	r3, r3, #3
 80041d6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 0310 	and.w	r3, r3, #16
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	f000 80e4 	beq.w	80043ae <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80041e6:	69bb      	ldr	r3, [r7, #24]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d007      	beq.n	80041fc <HAL_RCC_OscConfig+0x4c>
 80041ec:	69bb      	ldr	r3, [r7, #24]
 80041ee:	2b0c      	cmp	r3, #12
 80041f0:	f040 808b 	bne.w	800430a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	f040 8087 	bne.w	800430a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80041fc:	4b88      	ldr	r3, [pc, #544]	; (8004420 <HAL_RCC_OscConfig+0x270>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 0302 	and.w	r3, r3, #2
 8004204:	2b00      	cmp	r3, #0
 8004206:	d005      	beq.n	8004214 <HAL_RCC_OscConfig+0x64>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	699b      	ldr	r3, [r3, #24]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d101      	bne.n	8004214 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e3df      	b.n	80049d4 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6a1a      	ldr	r2, [r3, #32]
 8004218:	4b81      	ldr	r3, [pc, #516]	; (8004420 <HAL_RCC_OscConfig+0x270>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0308 	and.w	r3, r3, #8
 8004220:	2b00      	cmp	r3, #0
 8004222:	d004      	beq.n	800422e <HAL_RCC_OscConfig+0x7e>
 8004224:	4b7e      	ldr	r3, [pc, #504]	; (8004420 <HAL_RCC_OscConfig+0x270>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800422c:	e005      	b.n	800423a <HAL_RCC_OscConfig+0x8a>
 800422e:	4b7c      	ldr	r3, [pc, #496]	; (8004420 <HAL_RCC_OscConfig+0x270>)
 8004230:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004234:	091b      	lsrs	r3, r3, #4
 8004236:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800423a:	4293      	cmp	r3, r2
 800423c:	d223      	bcs.n	8004286 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6a1b      	ldr	r3, [r3, #32]
 8004242:	4618      	mov	r0, r3
 8004244:	f000 fdcc 	bl	8004de0 <RCC_SetFlashLatencyFromMSIRange>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d001      	beq.n	8004252 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e3c0      	b.n	80049d4 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004252:	4b73      	ldr	r3, [pc, #460]	; (8004420 <HAL_RCC_OscConfig+0x270>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a72      	ldr	r2, [pc, #456]	; (8004420 <HAL_RCC_OscConfig+0x270>)
 8004258:	f043 0308 	orr.w	r3, r3, #8
 800425c:	6013      	str	r3, [r2, #0]
 800425e:	4b70      	ldr	r3, [pc, #448]	; (8004420 <HAL_RCC_OscConfig+0x270>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a1b      	ldr	r3, [r3, #32]
 800426a:	496d      	ldr	r1, [pc, #436]	; (8004420 <HAL_RCC_OscConfig+0x270>)
 800426c:	4313      	orrs	r3, r2
 800426e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004270:	4b6b      	ldr	r3, [pc, #428]	; (8004420 <HAL_RCC_OscConfig+0x270>)
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	69db      	ldr	r3, [r3, #28]
 800427c:	021b      	lsls	r3, r3, #8
 800427e:	4968      	ldr	r1, [pc, #416]	; (8004420 <HAL_RCC_OscConfig+0x270>)
 8004280:	4313      	orrs	r3, r2
 8004282:	604b      	str	r3, [r1, #4]
 8004284:	e025      	b.n	80042d2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004286:	4b66      	ldr	r3, [pc, #408]	; (8004420 <HAL_RCC_OscConfig+0x270>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a65      	ldr	r2, [pc, #404]	; (8004420 <HAL_RCC_OscConfig+0x270>)
 800428c:	f043 0308 	orr.w	r3, r3, #8
 8004290:	6013      	str	r3, [r2, #0]
 8004292:	4b63      	ldr	r3, [pc, #396]	; (8004420 <HAL_RCC_OscConfig+0x270>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6a1b      	ldr	r3, [r3, #32]
 800429e:	4960      	ldr	r1, [pc, #384]	; (8004420 <HAL_RCC_OscConfig+0x270>)
 80042a0:	4313      	orrs	r3, r2
 80042a2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80042a4:	4b5e      	ldr	r3, [pc, #376]	; (8004420 <HAL_RCC_OscConfig+0x270>)
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	69db      	ldr	r3, [r3, #28]
 80042b0:	021b      	lsls	r3, r3, #8
 80042b2:	495b      	ldr	r1, [pc, #364]	; (8004420 <HAL_RCC_OscConfig+0x270>)
 80042b4:	4313      	orrs	r3, r2
 80042b6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80042b8:	69bb      	ldr	r3, [r7, #24]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d109      	bne.n	80042d2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6a1b      	ldr	r3, [r3, #32]
 80042c2:	4618      	mov	r0, r3
 80042c4:	f000 fd8c 	bl	8004de0 <RCC_SetFlashLatencyFromMSIRange>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d001      	beq.n	80042d2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e380      	b.n	80049d4 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80042d2:	f000 fcc1 	bl	8004c58 <HAL_RCC_GetSysClockFreq>
 80042d6:	4602      	mov	r2, r0
 80042d8:	4b51      	ldr	r3, [pc, #324]	; (8004420 <HAL_RCC_OscConfig+0x270>)
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	091b      	lsrs	r3, r3, #4
 80042de:	f003 030f 	and.w	r3, r3, #15
 80042e2:	4950      	ldr	r1, [pc, #320]	; (8004424 <HAL_RCC_OscConfig+0x274>)
 80042e4:	5ccb      	ldrb	r3, [r1, r3]
 80042e6:	f003 031f 	and.w	r3, r3, #31
 80042ea:	fa22 f303 	lsr.w	r3, r2, r3
 80042ee:	4a4e      	ldr	r2, [pc, #312]	; (8004428 <HAL_RCC_OscConfig+0x278>)
 80042f0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80042f2:	4b4e      	ldr	r3, [pc, #312]	; (800442c <HAL_RCC_OscConfig+0x27c>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4618      	mov	r0, r3
 80042f8:	f7fe f9ae 	bl	8002658 <HAL_InitTick>
 80042fc:	4603      	mov	r3, r0
 80042fe:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004300:	7bfb      	ldrb	r3, [r7, #15]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d052      	beq.n	80043ac <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004306:	7bfb      	ldrb	r3, [r7, #15]
 8004308:	e364      	b.n	80049d4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	699b      	ldr	r3, [r3, #24]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d032      	beq.n	8004378 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004312:	4b43      	ldr	r3, [pc, #268]	; (8004420 <HAL_RCC_OscConfig+0x270>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a42      	ldr	r2, [pc, #264]	; (8004420 <HAL_RCC_OscConfig+0x270>)
 8004318:	f043 0301 	orr.w	r3, r3, #1
 800431c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800431e:	f7fe f9eb 	bl	80026f8 <HAL_GetTick>
 8004322:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004324:	e008      	b.n	8004338 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004326:	f7fe f9e7 	bl	80026f8 <HAL_GetTick>
 800432a:	4602      	mov	r2, r0
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	2b02      	cmp	r3, #2
 8004332:	d901      	bls.n	8004338 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004334:	2303      	movs	r3, #3
 8004336:	e34d      	b.n	80049d4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004338:	4b39      	ldr	r3, [pc, #228]	; (8004420 <HAL_RCC_OscConfig+0x270>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0302 	and.w	r3, r3, #2
 8004340:	2b00      	cmp	r3, #0
 8004342:	d0f0      	beq.n	8004326 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004344:	4b36      	ldr	r3, [pc, #216]	; (8004420 <HAL_RCC_OscConfig+0x270>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a35      	ldr	r2, [pc, #212]	; (8004420 <HAL_RCC_OscConfig+0x270>)
 800434a:	f043 0308 	orr.w	r3, r3, #8
 800434e:	6013      	str	r3, [r2, #0]
 8004350:	4b33      	ldr	r3, [pc, #204]	; (8004420 <HAL_RCC_OscConfig+0x270>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6a1b      	ldr	r3, [r3, #32]
 800435c:	4930      	ldr	r1, [pc, #192]	; (8004420 <HAL_RCC_OscConfig+0x270>)
 800435e:	4313      	orrs	r3, r2
 8004360:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004362:	4b2f      	ldr	r3, [pc, #188]	; (8004420 <HAL_RCC_OscConfig+0x270>)
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	69db      	ldr	r3, [r3, #28]
 800436e:	021b      	lsls	r3, r3, #8
 8004370:	492b      	ldr	r1, [pc, #172]	; (8004420 <HAL_RCC_OscConfig+0x270>)
 8004372:	4313      	orrs	r3, r2
 8004374:	604b      	str	r3, [r1, #4]
 8004376:	e01a      	b.n	80043ae <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004378:	4b29      	ldr	r3, [pc, #164]	; (8004420 <HAL_RCC_OscConfig+0x270>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a28      	ldr	r2, [pc, #160]	; (8004420 <HAL_RCC_OscConfig+0x270>)
 800437e:	f023 0301 	bic.w	r3, r3, #1
 8004382:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004384:	f7fe f9b8 	bl	80026f8 <HAL_GetTick>
 8004388:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800438a:	e008      	b.n	800439e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800438c:	f7fe f9b4 	bl	80026f8 <HAL_GetTick>
 8004390:	4602      	mov	r2, r0
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	2b02      	cmp	r3, #2
 8004398:	d901      	bls.n	800439e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	e31a      	b.n	80049d4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800439e:	4b20      	ldr	r3, [pc, #128]	; (8004420 <HAL_RCC_OscConfig+0x270>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0302 	and.w	r3, r3, #2
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d1f0      	bne.n	800438c <HAL_RCC_OscConfig+0x1dc>
 80043aa:	e000      	b.n	80043ae <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80043ac:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0301 	and.w	r3, r3, #1
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d073      	beq.n	80044a2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80043ba:	69bb      	ldr	r3, [r7, #24]
 80043bc:	2b08      	cmp	r3, #8
 80043be:	d005      	beq.n	80043cc <HAL_RCC_OscConfig+0x21c>
 80043c0:	69bb      	ldr	r3, [r7, #24]
 80043c2:	2b0c      	cmp	r3, #12
 80043c4:	d10e      	bne.n	80043e4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	2b03      	cmp	r3, #3
 80043ca:	d10b      	bne.n	80043e4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043cc:	4b14      	ldr	r3, [pc, #80]	; (8004420 <HAL_RCC_OscConfig+0x270>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d063      	beq.n	80044a0 <HAL_RCC_OscConfig+0x2f0>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d15f      	bne.n	80044a0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	e2f7      	b.n	80049d4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043ec:	d106      	bne.n	80043fc <HAL_RCC_OscConfig+0x24c>
 80043ee:	4b0c      	ldr	r3, [pc, #48]	; (8004420 <HAL_RCC_OscConfig+0x270>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a0b      	ldr	r2, [pc, #44]	; (8004420 <HAL_RCC_OscConfig+0x270>)
 80043f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043f8:	6013      	str	r3, [r2, #0]
 80043fa:	e025      	b.n	8004448 <HAL_RCC_OscConfig+0x298>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004404:	d114      	bne.n	8004430 <HAL_RCC_OscConfig+0x280>
 8004406:	4b06      	ldr	r3, [pc, #24]	; (8004420 <HAL_RCC_OscConfig+0x270>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a05      	ldr	r2, [pc, #20]	; (8004420 <HAL_RCC_OscConfig+0x270>)
 800440c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004410:	6013      	str	r3, [r2, #0]
 8004412:	4b03      	ldr	r3, [pc, #12]	; (8004420 <HAL_RCC_OscConfig+0x270>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a02      	ldr	r2, [pc, #8]	; (8004420 <HAL_RCC_OscConfig+0x270>)
 8004418:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800441c:	6013      	str	r3, [r2, #0]
 800441e:	e013      	b.n	8004448 <HAL_RCC_OscConfig+0x298>
 8004420:	40021000 	.word	0x40021000
 8004424:	08009dbc 	.word	0x08009dbc
 8004428:	20000004 	.word	0x20000004
 800442c:	20000008 	.word	0x20000008
 8004430:	4ba0      	ldr	r3, [pc, #640]	; (80046b4 <HAL_RCC_OscConfig+0x504>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a9f      	ldr	r2, [pc, #636]	; (80046b4 <HAL_RCC_OscConfig+0x504>)
 8004436:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800443a:	6013      	str	r3, [r2, #0]
 800443c:	4b9d      	ldr	r3, [pc, #628]	; (80046b4 <HAL_RCC_OscConfig+0x504>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a9c      	ldr	r2, [pc, #624]	; (80046b4 <HAL_RCC_OscConfig+0x504>)
 8004442:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004446:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d013      	beq.n	8004478 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004450:	f7fe f952 	bl	80026f8 <HAL_GetTick>
 8004454:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004456:	e008      	b.n	800446a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004458:	f7fe f94e 	bl	80026f8 <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	2b64      	cmp	r3, #100	; 0x64
 8004464:	d901      	bls.n	800446a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e2b4      	b.n	80049d4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800446a:	4b92      	ldr	r3, [pc, #584]	; (80046b4 <HAL_RCC_OscConfig+0x504>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d0f0      	beq.n	8004458 <HAL_RCC_OscConfig+0x2a8>
 8004476:	e014      	b.n	80044a2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004478:	f7fe f93e 	bl	80026f8 <HAL_GetTick>
 800447c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800447e:	e008      	b.n	8004492 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004480:	f7fe f93a 	bl	80026f8 <HAL_GetTick>
 8004484:	4602      	mov	r2, r0
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	2b64      	cmp	r3, #100	; 0x64
 800448c:	d901      	bls.n	8004492 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e2a0      	b.n	80049d4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004492:	4b88      	ldr	r3, [pc, #544]	; (80046b4 <HAL_RCC_OscConfig+0x504>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800449a:	2b00      	cmp	r3, #0
 800449c:	d1f0      	bne.n	8004480 <HAL_RCC_OscConfig+0x2d0>
 800449e:	e000      	b.n	80044a2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 0302 	and.w	r3, r3, #2
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d060      	beq.n	8004570 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80044ae:	69bb      	ldr	r3, [r7, #24]
 80044b0:	2b04      	cmp	r3, #4
 80044b2:	d005      	beq.n	80044c0 <HAL_RCC_OscConfig+0x310>
 80044b4:	69bb      	ldr	r3, [r7, #24]
 80044b6:	2b0c      	cmp	r3, #12
 80044b8:	d119      	bne.n	80044ee <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	2b02      	cmp	r3, #2
 80044be:	d116      	bne.n	80044ee <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044c0:	4b7c      	ldr	r3, [pc, #496]	; (80046b4 <HAL_RCC_OscConfig+0x504>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d005      	beq.n	80044d8 <HAL_RCC_OscConfig+0x328>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d101      	bne.n	80044d8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e27d      	b.n	80049d4 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044d8:	4b76      	ldr	r3, [pc, #472]	; (80046b4 <HAL_RCC_OscConfig+0x504>)
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	691b      	ldr	r3, [r3, #16]
 80044e4:	061b      	lsls	r3, r3, #24
 80044e6:	4973      	ldr	r1, [pc, #460]	; (80046b4 <HAL_RCC_OscConfig+0x504>)
 80044e8:	4313      	orrs	r3, r2
 80044ea:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044ec:	e040      	b.n	8004570 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d023      	beq.n	800453e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044f6:	4b6f      	ldr	r3, [pc, #444]	; (80046b4 <HAL_RCC_OscConfig+0x504>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a6e      	ldr	r2, [pc, #440]	; (80046b4 <HAL_RCC_OscConfig+0x504>)
 80044fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004500:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004502:	f7fe f8f9 	bl	80026f8 <HAL_GetTick>
 8004506:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004508:	e008      	b.n	800451c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800450a:	f7fe f8f5 	bl	80026f8 <HAL_GetTick>
 800450e:	4602      	mov	r2, r0
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	2b02      	cmp	r3, #2
 8004516:	d901      	bls.n	800451c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004518:	2303      	movs	r3, #3
 800451a:	e25b      	b.n	80049d4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800451c:	4b65      	ldr	r3, [pc, #404]	; (80046b4 <HAL_RCC_OscConfig+0x504>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004524:	2b00      	cmp	r3, #0
 8004526:	d0f0      	beq.n	800450a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004528:	4b62      	ldr	r3, [pc, #392]	; (80046b4 <HAL_RCC_OscConfig+0x504>)
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	691b      	ldr	r3, [r3, #16]
 8004534:	061b      	lsls	r3, r3, #24
 8004536:	495f      	ldr	r1, [pc, #380]	; (80046b4 <HAL_RCC_OscConfig+0x504>)
 8004538:	4313      	orrs	r3, r2
 800453a:	604b      	str	r3, [r1, #4]
 800453c:	e018      	b.n	8004570 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800453e:	4b5d      	ldr	r3, [pc, #372]	; (80046b4 <HAL_RCC_OscConfig+0x504>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a5c      	ldr	r2, [pc, #368]	; (80046b4 <HAL_RCC_OscConfig+0x504>)
 8004544:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004548:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800454a:	f7fe f8d5 	bl	80026f8 <HAL_GetTick>
 800454e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004550:	e008      	b.n	8004564 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004552:	f7fe f8d1 	bl	80026f8 <HAL_GetTick>
 8004556:	4602      	mov	r2, r0
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	2b02      	cmp	r3, #2
 800455e:	d901      	bls.n	8004564 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004560:	2303      	movs	r3, #3
 8004562:	e237      	b.n	80049d4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004564:	4b53      	ldr	r3, [pc, #332]	; (80046b4 <HAL_RCC_OscConfig+0x504>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800456c:	2b00      	cmp	r3, #0
 800456e:	d1f0      	bne.n	8004552 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 0308 	and.w	r3, r3, #8
 8004578:	2b00      	cmp	r3, #0
 800457a:	d03c      	beq.n	80045f6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	695b      	ldr	r3, [r3, #20]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d01c      	beq.n	80045be <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004584:	4b4b      	ldr	r3, [pc, #300]	; (80046b4 <HAL_RCC_OscConfig+0x504>)
 8004586:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800458a:	4a4a      	ldr	r2, [pc, #296]	; (80046b4 <HAL_RCC_OscConfig+0x504>)
 800458c:	f043 0301 	orr.w	r3, r3, #1
 8004590:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004594:	f7fe f8b0 	bl	80026f8 <HAL_GetTick>
 8004598:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800459a:	e008      	b.n	80045ae <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800459c:	f7fe f8ac 	bl	80026f8 <HAL_GetTick>
 80045a0:	4602      	mov	r2, r0
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	2b02      	cmp	r3, #2
 80045a8:	d901      	bls.n	80045ae <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	e212      	b.n	80049d4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80045ae:	4b41      	ldr	r3, [pc, #260]	; (80046b4 <HAL_RCC_OscConfig+0x504>)
 80045b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045b4:	f003 0302 	and.w	r3, r3, #2
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d0ef      	beq.n	800459c <HAL_RCC_OscConfig+0x3ec>
 80045bc:	e01b      	b.n	80045f6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045be:	4b3d      	ldr	r3, [pc, #244]	; (80046b4 <HAL_RCC_OscConfig+0x504>)
 80045c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045c4:	4a3b      	ldr	r2, [pc, #236]	; (80046b4 <HAL_RCC_OscConfig+0x504>)
 80045c6:	f023 0301 	bic.w	r3, r3, #1
 80045ca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045ce:	f7fe f893 	bl	80026f8 <HAL_GetTick>
 80045d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80045d4:	e008      	b.n	80045e8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045d6:	f7fe f88f 	bl	80026f8 <HAL_GetTick>
 80045da:	4602      	mov	r2, r0
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	2b02      	cmp	r3, #2
 80045e2:	d901      	bls.n	80045e8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80045e4:	2303      	movs	r3, #3
 80045e6:	e1f5      	b.n	80049d4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80045e8:	4b32      	ldr	r3, [pc, #200]	; (80046b4 <HAL_RCC_OscConfig+0x504>)
 80045ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045ee:	f003 0302 	and.w	r3, r3, #2
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d1ef      	bne.n	80045d6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 0304 	and.w	r3, r3, #4
 80045fe:	2b00      	cmp	r3, #0
 8004600:	f000 80a6 	beq.w	8004750 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004604:	2300      	movs	r3, #0
 8004606:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004608:	4b2a      	ldr	r3, [pc, #168]	; (80046b4 <HAL_RCC_OscConfig+0x504>)
 800460a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800460c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004610:	2b00      	cmp	r3, #0
 8004612:	d10d      	bne.n	8004630 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004614:	4b27      	ldr	r3, [pc, #156]	; (80046b4 <HAL_RCC_OscConfig+0x504>)
 8004616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004618:	4a26      	ldr	r2, [pc, #152]	; (80046b4 <HAL_RCC_OscConfig+0x504>)
 800461a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800461e:	6593      	str	r3, [r2, #88]	; 0x58
 8004620:	4b24      	ldr	r3, [pc, #144]	; (80046b4 <HAL_RCC_OscConfig+0x504>)
 8004622:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004624:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004628:	60bb      	str	r3, [r7, #8]
 800462a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800462c:	2301      	movs	r3, #1
 800462e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004630:	4b21      	ldr	r3, [pc, #132]	; (80046b8 <HAL_RCC_OscConfig+0x508>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004638:	2b00      	cmp	r3, #0
 800463a:	d118      	bne.n	800466e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800463c:	4b1e      	ldr	r3, [pc, #120]	; (80046b8 <HAL_RCC_OscConfig+0x508>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a1d      	ldr	r2, [pc, #116]	; (80046b8 <HAL_RCC_OscConfig+0x508>)
 8004642:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004646:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004648:	f7fe f856 	bl	80026f8 <HAL_GetTick>
 800464c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800464e:	e008      	b.n	8004662 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004650:	f7fe f852 	bl	80026f8 <HAL_GetTick>
 8004654:	4602      	mov	r2, r0
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	2b02      	cmp	r3, #2
 800465c:	d901      	bls.n	8004662 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	e1b8      	b.n	80049d4 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004662:	4b15      	ldr	r3, [pc, #84]	; (80046b8 <HAL_RCC_OscConfig+0x508>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800466a:	2b00      	cmp	r3, #0
 800466c:	d0f0      	beq.n	8004650 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	2b01      	cmp	r3, #1
 8004674:	d108      	bne.n	8004688 <HAL_RCC_OscConfig+0x4d8>
 8004676:	4b0f      	ldr	r3, [pc, #60]	; (80046b4 <HAL_RCC_OscConfig+0x504>)
 8004678:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800467c:	4a0d      	ldr	r2, [pc, #52]	; (80046b4 <HAL_RCC_OscConfig+0x504>)
 800467e:	f043 0301 	orr.w	r3, r3, #1
 8004682:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004686:	e029      	b.n	80046dc <HAL_RCC_OscConfig+0x52c>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	2b05      	cmp	r3, #5
 800468e:	d115      	bne.n	80046bc <HAL_RCC_OscConfig+0x50c>
 8004690:	4b08      	ldr	r3, [pc, #32]	; (80046b4 <HAL_RCC_OscConfig+0x504>)
 8004692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004696:	4a07      	ldr	r2, [pc, #28]	; (80046b4 <HAL_RCC_OscConfig+0x504>)
 8004698:	f043 0304 	orr.w	r3, r3, #4
 800469c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80046a0:	4b04      	ldr	r3, [pc, #16]	; (80046b4 <HAL_RCC_OscConfig+0x504>)
 80046a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046a6:	4a03      	ldr	r2, [pc, #12]	; (80046b4 <HAL_RCC_OscConfig+0x504>)
 80046a8:	f043 0301 	orr.w	r3, r3, #1
 80046ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80046b0:	e014      	b.n	80046dc <HAL_RCC_OscConfig+0x52c>
 80046b2:	bf00      	nop
 80046b4:	40021000 	.word	0x40021000
 80046b8:	40007000 	.word	0x40007000
 80046bc:	4b9d      	ldr	r3, [pc, #628]	; (8004934 <HAL_RCC_OscConfig+0x784>)
 80046be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046c2:	4a9c      	ldr	r2, [pc, #624]	; (8004934 <HAL_RCC_OscConfig+0x784>)
 80046c4:	f023 0301 	bic.w	r3, r3, #1
 80046c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80046cc:	4b99      	ldr	r3, [pc, #612]	; (8004934 <HAL_RCC_OscConfig+0x784>)
 80046ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046d2:	4a98      	ldr	r2, [pc, #608]	; (8004934 <HAL_RCC_OscConfig+0x784>)
 80046d4:	f023 0304 	bic.w	r3, r3, #4
 80046d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d016      	beq.n	8004712 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046e4:	f7fe f808 	bl	80026f8 <HAL_GetTick>
 80046e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046ea:	e00a      	b.n	8004702 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046ec:	f7fe f804 	bl	80026f8 <HAL_GetTick>
 80046f0:	4602      	mov	r2, r0
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d901      	bls.n	8004702 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80046fe:	2303      	movs	r3, #3
 8004700:	e168      	b.n	80049d4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004702:	4b8c      	ldr	r3, [pc, #560]	; (8004934 <HAL_RCC_OscConfig+0x784>)
 8004704:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004708:	f003 0302 	and.w	r3, r3, #2
 800470c:	2b00      	cmp	r3, #0
 800470e:	d0ed      	beq.n	80046ec <HAL_RCC_OscConfig+0x53c>
 8004710:	e015      	b.n	800473e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004712:	f7fd fff1 	bl	80026f8 <HAL_GetTick>
 8004716:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004718:	e00a      	b.n	8004730 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800471a:	f7fd ffed 	bl	80026f8 <HAL_GetTick>
 800471e:	4602      	mov	r2, r0
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	1ad3      	subs	r3, r2, r3
 8004724:	f241 3288 	movw	r2, #5000	; 0x1388
 8004728:	4293      	cmp	r3, r2
 800472a:	d901      	bls.n	8004730 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800472c:	2303      	movs	r3, #3
 800472e:	e151      	b.n	80049d4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004730:	4b80      	ldr	r3, [pc, #512]	; (8004934 <HAL_RCC_OscConfig+0x784>)
 8004732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004736:	f003 0302 	and.w	r3, r3, #2
 800473a:	2b00      	cmp	r3, #0
 800473c:	d1ed      	bne.n	800471a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800473e:	7ffb      	ldrb	r3, [r7, #31]
 8004740:	2b01      	cmp	r3, #1
 8004742:	d105      	bne.n	8004750 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004744:	4b7b      	ldr	r3, [pc, #492]	; (8004934 <HAL_RCC_OscConfig+0x784>)
 8004746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004748:	4a7a      	ldr	r2, [pc, #488]	; (8004934 <HAL_RCC_OscConfig+0x784>)
 800474a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800474e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 0320 	and.w	r3, r3, #32
 8004758:	2b00      	cmp	r3, #0
 800475a:	d03c      	beq.n	80047d6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004760:	2b00      	cmp	r3, #0
 8004762:	d01c      	beq.n	800479e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004764:	4b73      	ldr	r3, [pc, #460]	; (8004934 <HAL_RCC_OscConfig+0x784>)
 8004766:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800476a:	4a72      	ldr	r2, [pc, #456]	; (8004934 <HAL_RCC_OscConfig+0x784>)
 800476c:	f043 0301 	orr.w	r3, r3, #1
 8004770:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004774:	f7fd ffc0 	bl	80026f8 <HAL_GetTick>
 8004778:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800477a:	e008      	b.n	800478e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800477c:	f7fd ffbc 	bl	80026f8 <HAL_GetTick>
 8004780:	4602      	mov	r2, r0
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	1ad3      	subs	r3, r2, r3
 8004786:	2b02      	cmp	r3, #2
 8004788:	d901      	bls.n	800478e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800478a:	2303      	movs	r3, #3
 800478c:	e122      	b.n	80049d4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800478e:	4b69      	ldr	r3, [pc, #420]	; (8004934 <HAL_RCC_OscConfig+0x784>)
 8004790:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004794:	f003 0302 	and.w	r3, r3, #2
 8004798:	2b00      	cmp	r3, #0
 800479a:	d0ef      	beq.n	800477c <HAL_RCC_OscConfig+0x5cc>
 800479c:	e01b      	b.n	80047d6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800479e:	4b65      	ldr	r3, [pc, #404]	; (8004934 <HAL_RCC_OscConfig+0x784>)
 80047a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80047a4:	4a63      	ldr	r2, [pc, #396]	; (8004934 <HAL_RCC_OscConfig+0x784>)
 80047a6:	f023 0301 	bic.w	r3, r3, #1
 80047aa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047ae:	f7fd ffa3 	bl	80026f8 <HAL_GetTick>
 80047b2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80047b4:	e008      	b.n	80047c8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80047b6:	f7fd ff9f 	bl	80026f8 <HAL_GetTick>
 80047ba:	4602      	mov	r2, r0
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	2b02      	cmp	r3, #2
 80047c2:	d901      	bls.n	80047c8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80047c4:	2303      	movs	r3, #3
 80047c6:	e105      	b.n	80049d4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80047c8:	4b5a      	ldr	r3, [pc, #360]	; (8004934 <HAL_RCC_OscConfig+0x784>)
 80047ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80047ce:	f003 0302 	and.w	r3, r3, #2
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d1ef      	bne.n	80047b6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047da:	2b00      	cmp	r3, #0
 80047dc:	f000 80f9 	beq.w	80049d2 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e4:	2b02      	cmp	r3, #2
 80047e6:	f040 80cf 	bne.w	8004988 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80047ea:	4b52      	ldr	r3, [pc, #328]	; (8004934 <HAL_RCC_OscConfig+0x784>)
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	f003 0203 	and.w	r2, r3, #3
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d12c      	bne.n	8004858 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004808:	3b01      	subs	r3, #1
 800480a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800480c:	429a      	cmp	r2, r3
 800480e:	d123      	bne.n	8004858 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800481a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800481c:	429a      	cmp	r2, r3
 800481e:	d11b      	bne.n	8004858 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800482a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800482c:	429a      	cmp	r2, r3
 800482e:	d113      	bne.n	8004858 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800483a:	085b      	lsrs	r3, r3, #1
 800483c:	3b01      	subs	r3, #1
 800483e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004840:	429a      	cmp	r2, r3
 8004842:	d109      	bne.n	8004858 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484e:	085b      	lsrs	r3, r3, #1
 8004850:	3b01      	subs	r3, #1
 8004852:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004854:	429a      	cmp	r2, r3
 8004856:	d071      	beq.n	800493c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004858:	69bb      	ldr	r3, [r7, #24]
 800485a:	2b0c      	cmp	r3, #12
 800485c:	d068      	beq.n	8004930 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800485e:	4b35      	ldr	r3, [pc, #212]	; (8004934 <HAL_RCC_OscConfig+0x784>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004866:	2b00      	cmp	r3, #0
 8004868:	d105      	bne.n	8004876 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800486a:	4b32      	ldr	r3, [pc, #200]	; (8004934 <HAL_RCC_OscConfig+0x784>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004872:	2b00      	cmp	r3, #0
 8004874:	d001      	beq.n	800487a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e0ac      	b.n	80049d4 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800487a:	4b2e      	ldr	r3, [pc, #184]	; (8004934 <HAL_RCC_OscConfig+0x784>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a2d      	ldr	r2, [pc, #180]	; (8004934 <HAL_RCC_OscConfig+0x784>)
 8004880:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004884:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004886:	f7fd ff37 	bl	80026f8 <HAL_GetTick>
 800488a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800488c:	e008      	b.n	80048a0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800488e:	f7fd ff33 	bl	80026f8 <HAL_GetTick>
 8004892:	4602      	mov	r2, r0
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	1ad3      	subs	r3, r2, r3
 8004898:	2b02      	cmp	r3, #2
 800489a:	d901      	bls.n	80048a0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800489c:	2303      	movs	r3, #3
 800489e:	e099      	b.n	80049d4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048a0:	4b24      	ldr	r3, [pc, #144]	; (8004934 <HAL_RCC_OscConfig+0x784>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d1f0      	bne.n	800488e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048ac:	4b21      	ldr	r3, [pc, #132]	; (8004934 <HAL_RCC_OscConfig+0x784>)
 80048ae:	68da      	ldr	r2, [r3, #12]
 80048b0:	4b21      	ldr	r3, [pc, #132]	; (8004938 <HAL_RCC_OscConfig+0x788>)
 80048b2:	4013      	ands	r3, r2
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80048bc:	3a01      	subs	r2, #1
 80048be:	0112      	lsls	r2, r2, #4
 80048c0:	4311      	orrs	r1, r2
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80048c6:	0212      	lsls	r2, r2, #8
 80048c8:	4311      	orrs	r1, r2
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80048ce:	0852      	lsrs	r2, r2, #1
 80048d0:	3a01      	subs	r2, #1
 80048d2:	0552      	lsls	r2, r2, #21
 80048d4:	4311      	orrs	r1, r2
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80048da:	0852      	lsrs	r2, r2, #1
 80048dc:	3a01      	subs	r2, #1
 80048de:	0652      	lsls	r2, r2, #25
 80048e0:	4311      	orrs	r1, r2
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80048e6:	06d2      	lsls	r2, r2, #27
 80048e8:	430a      	orrs	r2, r1
 80048ea:	4912      	ldr	r1, [pc, #72]	; (8004934 <HAL_RCC_OscConfig+0x784>)
 80048ec:	4313      	orrs	r3, r2
 80048ee:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80048f0:	4b10      	ldr	r3, [pc, #64]	; (8004934 <HAL_RCC_OscConfig+0x784>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a0f      	ldr	r2, [pc, #60]	; (8004934 <HAL_RCC_OscConfig+0x784>)
 80048f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048fa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80048fc:	4b0d      	ldr	r3, [pc, #52]	; (8004934 <HAL_RCC_OscConfig+0x784>)
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	4a0c      	ldr	r2, [pc, #48]	; (8004934 <HAL_RCC_OscConfig+0x784>)
 8004902:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004906:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004908:	f7fd fef6 	bl	80026f8 <HAL_GetTick>
 800490c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800490e:	e008      	b.n	8004922 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004910:	f7fd fef2 	bl	80026f8 <HAL_GetTick>
 8004914:	4602      	mov	r2, r0
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	1ad3      	subs	r3, r2, r3
 800491a:	2b02      	cmp	r3, #2
 800491c:	d901      	bls.n	8004922 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800491e:	2303      	movs	r3, #3
 8004920:	e058      	b.n	80049d4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004922:	4b04      	ldr	r3, [pc, #16]	; (8004934 <HAL_RCC_OscConfig+0x784>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800492a:	2b00      	cmp	r3, #0
 800492c:	d0f0      	beq.n	8004910 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800492e:	e050      	b.n	80049d2 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004930:	2301      	movs	r3, #1
 8004932:	e04f      	b.n	80049d4 <HAL_RCC_OscConfig+0x824>
 8004934:	40021000 	.word	0x40021000
 8004938:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800493c:	4b27      	ldr	r3, [pc, #156]	; (80049dc <HAL_RCC_OscConfig+0x82c>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004944:	2b00      	cmp	r3, #0
 8004946:	d144      	bne.n	80049d2 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004948:	4b24      	ldr	r3, [pc, #144]	; (80049dc <HAL_RCC_OscConfig+0x82c>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a23      	ldr	r2, [pc, #140]	; (80049dc <HAL_RCC_OscConfig+0x82c>)
 800494e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004952:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004954:	4b21      	ldr	r3, [pc, #132]	; (80049dc <HAL_RCC_OscConfig+0x82c>)
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	4a20      	ldr	r2, [pc, #128]	; (80049dc <HAL_RCC_OscConfig+0x82c>)
 800495a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800495e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004960:	f7fd feca 	bl	80026f8 <HAL_GetTick>
 8004964:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004966:	e008      	b.n	800497a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004968:	f7fd fec6 	bl	80026f8 <HAL_GetTick>
 800496c:	4602      	mov	r2, r0
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	2b02      	cmp	r3, #2
 8004974:	d901      	bls.n	800497a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8004976:	2303      	movs	r3, #3
 8004978:	e02c      	b.n	80049d4 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800497a:	4b18      	ldr	r3, [pc, #96]	; (80049dc <HAL_RCC_OscConfig+0x82c>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004982:	2b00      	cmp	r3, #0
 8004984:	d0f0      	beq.n	8004968 <HAL_RCC_OscConfig+0x7b8>
 8004986:	e024      	b.n	80049d2 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004988:	69bb      	ldr	r3, [r7, #24]
 800498a:	2b0c      	cmp	r3, #12
 800498c:	d01f      	beq.n	80049ce <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800498e:	4b13      	ldr	r3, [pc, #76]	; (80049dc <HAL_RCC_OscConfig+0x82c>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a12      	ldr	r2, [pc, #72]	; (80049dc <HAL_RCC_OscConfig+0x82c>)
 8004994:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004998:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800499a:	f7fd fead 	bl	80026f8 <HAL_GetTick>
 800499e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049a0:	e008      	b.n	80049b4 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049a2:	f7fd fea9 	bl	80026f8 <HAL_GetTick>
 80049a6:	4602      	mov	r2, r0
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	1ad3      	subs	r3, r2, r3
 80049ac:	2b02      	cmp	r3, #2
 80049ae:	d901      	bls.n	80049b4 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80049b0:	2303      	movs	r3, #3
 80049b2:	e00f      	b.n	80049d4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049b4:	4b09      	ldr	r3, [pc, #36]	; (80049dc <HAL_RCC_OscConfig+0x82c>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d1f0      	bne.n	80049a2 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80049c0:	4b06      	ldr	r3, [pc, #24]	; (80049dc <HAL_RCC_OscConfig+0x82c>)
 80049c2:	68da      	ldr	r2, [r3, #12]
 80049c4:	4905      	ldr	r1, [pc, #20]	; (80049dc <HAL_RCC_OscConfig+0x82c>)
 80049c6:	4b06      	ldr	r3, [pc, #24]	; (80049e0 <HAL_RCC_OscConfig+0x830>)
 80049c8:	4013      	ands	r3, r2
 80049ca:	60cb      	str	r3, [r1, #12]
 80049cc:	e001      	b.n	80049d2 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e000      	b.n	80049d4 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80049d2:	2300      	movs	r3, #0
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3720      	adds	r7, #32
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}
 80049dc:	40021000 	.word	0x40021000
 80049e0:	feeefffc 	.word	0xfeeefffc

080049e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b086      	sub	sp, #24
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80049ee:	2300      	movs	r3, #0
 80049f0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d101      	bne.n	80049fc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	e11d      	b.n	8004c38 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80049fc:	4b90      	ldr	r3, [pc, #576]	; (8004c40 <HAL_RCC_ClockConfig+0x25c>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f003 030f 	and.w	r3, r3, #15
 8004a04:	683a      	ldr	r2, [r7, #0]
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d910      	bls.n	8004a2c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a0a:	4b8d      	ldr	r3, [pc, #564]	; (8004c40 <HAL_RCC_ClockConfig+0x25c>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f023 020f 	bic.w	r2, r3, #15
 8004a12:	498b      	ldr	r1, [pc, #556]	; (8004c40 <HAL_RCC_ClockConfig+0x25c>)
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a1a:	4b89      	ldr	r3, [pc, #548]	; (8004c40 <HAL_RCC_ClockConfig+0x25c>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 030f 	and.w	r3, r3, #15
 8004a22:	683a      	ldr	r2, [r7, #0]
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d001      	beq.n	8004a2c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e105      	b.n	8004c38 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 0302 	and.w	r3, r3, #2
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d010      	beq.n	8004a5a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	689a      	ldr	r2, [r3, #8]
 8004a3c:	4b81      	ldr	r3, [pc, #516]	; (8004c44 <HAL_RCC_ClockConfig+0x260>)
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d908      	bls.n	8004a5a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a48:	4b7e      	ldr	r3, [pc, #504]	; (8004c44 <HAL_RCC_ClockConfig+0x260>)
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	497b      	ldr	r1, [pc, #492]	; (8004c44 <HAL_RCC_ClockConfig+0x260>)
 8004a56:	4313      	orrs	r3, r2
 8004a58:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 0301 	and.w	r3, r3, #1
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d079      	beq.n	8004b5a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	2b03      	cmp	r3, #3
 8004a6c:	d11e      	bne.n	8004aac <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a6e:	4b75      	ldr	r3, [pc, #468]	; (8004c44 <HAL_RCC_ClockConfig+0x260>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d101      	bne.n	8004a7e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e0dc      	b.n	8004c38 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8004a7e:	f000 fa09 	bl	8004e94 <RCC_GetSysClockFreqFromPLLSource>
 8004a82:	4603      	mov	r3, r0
 8004a84:	4a70      	ldr	r2, [pc, #448]	; (8004c48 <HAL_RCC_ClockConfig+0x264>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d946      	bls.n	8004b18 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004a8a:	4b6e      	ldr	r3, [pc, #440]	; (8004c44 <HAL_RCC_ClockConfig+0x260>)
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d140      	bne.n	8004b18 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004a96:	4b6b      	ldr	r3, [pc, #428]	; (8004c44 <HAL_RCC_ClockConfig+0x260>)
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a9e:	4a69      	ldr	r2, [pc, #420]	; (8004c44 <HAL_RCC_ClockConfig+0x260>)
 8004aa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004aa4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004aa6:	2380      	movs	r3, #128	; 0x80
 8004aa8:	617b      	str	r3, [r7, #20]
 8004aaa:	e035      	b.n	8004b18 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	d107      	bne.n	8004ac4 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ab4:	4b63      	ldr	r3, [pc, #396]	; (8004c44 <HAL_RCC_ClockConfig+0x260>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d115      	bne.n	8004aec <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e0b9      	b.n	8004c38 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d107      	bne.n	8004adc <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004acc:	4b5d      	ldr	r3, [pc, #372]	; (8004c44 <HAL_RCC_ClockConfig+0x260>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 0302 	and.w	r3, r3, #2
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d109      	bne.n	8004aec <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e0ad      	b.n	8004c38 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004adc:	4b59      	ldr	r3, [pc, #356]	; (8004c44 <HAL_RCC_ClockConfig+0x260>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d101      	bne.n	8004aec <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e0a5      	b.n	8004c38 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004aec:	f000 f8b4 	bl	8004c58 <HAL_RCC_GetSysClockFreq>
 8004af0:	4603      	mov	r3, r0
 8004af2:	4a55      	ldr	r2, [pc, #340]	; (8004c48 <HAL_RCC_ClockConfig+0x264>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d90f      	bls.n	8004b18 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004af8:	4b52      	ldr	r3, [pc, #328]	; (8004c44 <HAL_RCC_ClockConfig+0x260>)
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d109      	bne.n	8004b18 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004b04:	4b4f      	ldr	r3, [pc, #316]	; (8004c44 <HAL_RCC_ClockConfig+0x260>)
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b0c:	4a4d      	ldr	r2, [pc, #308]	; (8004c44 <HAL_RCC_ClockConfig+0x260>)
 8004b0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b12:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004b14:	2380      	movs	r3, #128	; 0x80
 8004b16:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004b18:	4b4a      	ldr	r3, [pc, #296]	; (8004c44 <HAL_RCC_ClockConfig+0x260>)
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	f023 0203 	bic.w	r2, r3, #3
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	4947      	ldr	r1, [pc, #284]	; (8004c44 <HAL_RCC_ClockConfig+0x260>)
 8004b26:	4313      	orrs	r3, r2
 8004b28:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b2a:	f7fd fde5 	bl	80026f8 <HAL_GetTick>
 8004b2e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b30:	e00a      	b.n	8004b48 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b32:	f7fd fde1 	bl	80026f8 <HAL_GetTick>
 8004b36:	4602      	mov	r2, r0
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	1ad3      	subs	r3, r2, r3
 8004b3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d901      	bls.n	8004b48 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8004b44:	2303      	movs	r3, #3
 8004b46:	e077      	b.n	8004c38 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b48:	4b3e      	ldr	r3, [pc, #248]	; (8004c44 <HAL_RCC_ClockConfig+0x260>)
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	f003 020c 	and.w	r2, r3, #12
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d1eb      	bne.n	8004b32 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	2b80      	cmp	r3, #128	; 0x80
 8004b5e:	d105      	bne.n	8004b6c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004b60:	4b38      	ldr	r3, [pc, #224]	; (8004c44 <HAL_RCC_ClockConfig+0x260>)
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	4a37      	ldr	r2, [pc, #220]	; (8004c44 <HAL_RCC_ClockConfig+0x260>)
 8004b66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b6a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 0302 	and.w	r3, r3, #2
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d010      	beq.n	8004b9a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	689a      	ldr	r2, [r3, #8]
 8004b7c:	4b31      	ldr	r3, [pc, #196]	; (8004c44 <HAL_RCC_ClockConfig+0x260>)
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d208      	bcs.n	8004b9a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b88:	4b2e      	ldr	r3, [pc, #184]	; (8004c44 <HAL_RCC_ClockConfig+0x260>)
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	492b      	ldr	r1, [pc, #172]	; (8004c44 <HAL_RCC_ClockConfig+0x260>)
 8004b96:	4313      	orrs	r3, r2
 8004b98:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b9a:	4b29      	ldr	r3, [pc, #164]	; (8004c40 <HAL_RCC_ClockConfig+0x25c>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 030f 	and.w	r3, r3, #15
 8004ba2:	683a      	ldr	r2, [r7, #0]
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d210      	bcs.n	8004bca <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ba8:	4b25      	ldr	r3, [pc, #148]	; (8004c40 <HAL_RCC_ClockConfig+0x25c>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f023 020f 	bic.w	r2, r3, #15
 8004bb0:	4923      	ldr	r1, [pc, #140]	; (8004c40 <HAL_RCC_ClockConfig+0x25c>)
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bb8:	4b21      	ldr	r3, [pc, #132]	; (8004c40 <HAL_RCC_ClockConfig+0x25c>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 030f 	and.w	r3, r3, #15
 8004bc0:	683a      	ldr	r2, [r7, #0]
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d001      	beq.n	8004bca <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e036      	b.n	8004c38 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 0304 	and.w	r3, r3, #4
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d008      	beq.n	8004be8 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004bd6:	4b1b      	ldr	r3, [pc, #108]	; (8004c44 <HAL_RCC_ClockConfig+0x260>)
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	68db      	ldr	r3, [r3, #12]
 8004be2:	4918      	ldr	r1, [pc, #96]	; (8004c44 <HAL_RCC_ClockConfig+0x260>)
 8004be4:	4313      	orrs	r3, r2
 8004be6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0308 	and.w	r3, r3, #8
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d009      	beq.n	8004c08 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004bf4:	4b13      	ldr	r3, [pc, #76]	; (8004c44 <HAL_RCC_ClockConfig+0x260>)
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	691b      	ldr	r3, [r3, #16]
 8004c00:	00db      	lsls	r3, r3, #3
 8004c02:	4910      	ldr	r1, [pc, #64]	; (8004c44 <HAL_RCC_ClockConfig+0x260>)
 8004c04:	4313      	orrs	r3, r2
 8004c06:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004c08:	f000 f826 	bl	8004c58 <HAL_RCC_GetSysClockFreq>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	4b0d      	ldr	r3, [pc, #52]	; (8004c44 <HAL_RCC_ClockConfig+0x260>)
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	091b      	lsrs	r3, r3, #4
 8004c14:	f003 030f 	and.w	r3, r3, #15
 8004c18:	490c      	ldr	r1, [pc, #48]	; (8004c4c <HAL_RCC_ClockConfig+0x268>)
 8004c1a:	5ccb      	ldrb	r3, [r1, r3]
 8004c1c:	f003 031f 	and.w	r3, r3, #31
 8004c20:	fa22 f303 	lsr.w	r3, r2, r3
 8004c24:	4a0a      	ldr	r2, [pc, #40]	; (8004c50 <HAL_RCC_ClockConfig+0x26c>)
 8004c26:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004c28:	4b0a      	ldr	r3, [pc, #40]	; (8004c54 <HAL_RCC_ClockConfig+0x270>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f7fd fd13 	bl	8002658 <HAL_InitTick>
 8004c32:	4603      	mov	r3, r0
 8004c34:	73fb      	strb	r3, [r7, #15]

  return status;
 8004c36:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3718      	adds	r7, #24
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}
 8004c40:	40022000 	.word	0x40022000
 8004c44:	40021000 	.word	0x40021000
 8004c48:	04c4b400 	.word	0x04c4b400
 8004c4c:	08009dbc 	.word	0x08009dbc
 8004c50:	20000004 	.word	0x20000004
 8004c54:	20000008 	.word	0x20000008

08004c58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b089      	sub	sp, #36	; 0x24
 8004c5c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	61fb      	str	r3, [r7, #28]
 8004c62:	2300      	movs	r3, #0
 8004c64:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c66:	4b3e      	ldr	r3, [pc, #248]	; (8004d60 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	f003 030c 	and.w	r3, r3, #12
 8004c6e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c70:	4b3b      	ldr	r3, [pc, #236]	; (8004d60 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c72:	68db      	ldr	r3, [r3, #12]
 8004c74:	f003 0303 	and.w	r3, r3, #3
 8004c78:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d005      	beq.n	8004c8c <HAL_RCC_GetSysClockFreq+0x34>
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	2b0c      	cmp	r3, #12
 8004c84:	d121      	bne.n	8004cca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d11e      	bne.n	8004cca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004c8c:	4b34      	ldr	r3, [pc, #208]	; (8004d60 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 0308 	and.w	r3, r3, #8
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d107      	bne.n	8004ca8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004c98:	4b31      	ldr	r3, [pc, #196]	; (8004d60 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c9e:	0a1b      	lsrs	r3, r3, #8
 8004ca0:	f003 030f 	and.w	r3, r3, #15
 8004ca4:	61fb      	str	r3, [r7, #28]
 8004ca6:	e005      	b.n	8004cb4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004ca8:	4b2d      	ldr	r3, [pc, #180]	; (8004d60 <HAL_RCC_GetSysClockFreq+0x108>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	091b      	lsrs	r3, r3, #4
 8004cae:	f003 030f 	and.w	r3, r3, #15
 8004cb2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004cb4:	4a2b      	ldr	r2, [pc, #172]	; (8004d64 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cbc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d10d      	bne.n	8004ce0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004cc4:	69fb      	ldr	r3, [r7, #28]
 8004cc6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004cc8:	e00a      	b.n	8004ce0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	2b04      	cmp	r3, #4
 8004cce:	d102      	bne.n	8004cd6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004cd0:	4b25      	ldr	r3, [pc, #148]	; (8004d68 <HAL_RCC_GetSysClockFreq+0x110>)
 8004cd2:	61bb      	str	r3, [r7, #24]
 8004cd4:	e004      	b.n	8004ce0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	2b08      	cmp	r3, #8
 8004cda:	d101      	bne.n	8004ce0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004cdc:	4b23      	ldr	r3, [pc, #140]	; (8004d6c <HAL_RCC_GetSysClockFreq+0x114>)
 8004cde:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	2b0c      	cmp	r3, #12
 8004ce4:	d134      	bne.n	8004d50 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004ce6:	4b1e      	ldr	r3, [pc, #120]	; (8004d60 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	f003 0303 	and.w	r3, r3, #3
 8004cee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	2b02      	cmp	r3, #2
 8004cf4:	d003      	beq.n	8004cfe <HAL_RCC_GetSysClockFreq+0xa6>
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	2b03      	cmp	r3, #3
 8004cfa:	d003      	beq.n	8004d04 <HAL_RCC_GetSysClockFreq+0xac>
 8004cfc:	e005      	b.n	8004d0a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004cfe:	4b1a      	ldr	r3, [pc, #104]	; (8004d68 <HAL_RCC_GetSysClockFreq+0x110>)
 8004d00:	617b      	str	r3, [r7, #20]
      break;
 8004d02:	e005      	b.n	8004d10 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004d04:	4b19      	ldr	r3, [pc, #100]	; (8004d6c <HAL_RCC_GetSysClockFreq+0x114>)
 8004d06:	617b      	str	r3, [r7, #20]
      break;
 8004d08:	e002      	b.n	8004d10 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004d0a:	69fb      	ldr	r3, [r7, #28]
 8004d0c:	617b      	str	r3, [r7, #20]
      break;
 8004d0e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004d10:	4b13      	ldr	r3, [pc, #76]	; (8004d60 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	091b      	lsrs	r3, r3, #4
 8004d16:	f003 030f 	and.w	r3, r3, #15
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004d1e:	4b10      	ldr	r3, [pc, #64]	; (8004d60 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	0a1b      	lsrs	r3, r3, #8
 8004d24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d28:	697a      	ldr	r2, [r7, #20]
 8004d2a:	fb03 f202 	mul.w	r2, r3, r2
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d34:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004d36:	4b0a      	ldr	r3, [pc, #40]	; (8004d60 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d38:	68db      	ldr	r3, [r3, #12]
 8004d3a:	0e5b      	lsrs	r3, r3, #25
 8004d3c:	f003 0303 	and.w	r3, r3, #3
 8004d40:	3301      	adds	r3, #1
 8004d42:	005b      	lsls	r3, r3, #1
 8004d44:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004d46:	697a      	ldr	r2, [r7, #20]
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d4e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004d50:	69bb      	ldr	r3, [r7, #24]
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3724      	adds	r7, #36	; 0x24
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr
 8004d5e:	bf00      	nop
 8004d60:	40021000 	.word	0x40021000
 8004d64:	08009dd4 	.word	0x08009dd4
 8004d68:	00f42400 	.word	0x00f42400
 8004d6c:	007a1200 	.word	0x007a1200

08004d70 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d70:	b480      	push	{r7}
 8004d72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d74:	4b03      	ldr	r3, [pc, #12]	; (8004d84 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d76:	681b      	ldr	r3, [r3, #0]
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr
 8004d82:	bf00      	nop
 8004d84:	20000004 	.word	0x20000004

08004d88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004d8c:	f7ff fff0 	bl	8004d70 <HAL_RCC_GetHCLKFreq>
 8004d90:	4602      	mov	r2, r0
 8004d92:	4b06      	ldr	r3, [pc, #24]	; (8004dac <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	0a1b      	lsrs	r3, r3, #8
 8004d98:	f003 0307 	and.w	r3, r3, #7
 8004d9c:	4904      	ldr	r1, [pc, #16]	; (8004db0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004d9e:	5ccb      	ldrb	r3, [r1, r3]
 8004da0:	f003 031f 	and.w	r3, r3, #31
 8004da4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	bd80      	pop	{r7, pc}
 8004dac:	40021000 	.word	0x40021000
 8004db0:	08009dcc 	.word	0x08009dcc

08004db4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004db8:	f7ff ffda 	bl	8004d70 <HAL_RCC_GetHCLKFreq>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	4b06      	ldr	r3, [pc, #24]	; (8004dd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	0adb      	lsrs	r3, r3, #11
 8004dc4:	f003 0307 	and.w	r3, r3, #7
 8004dc8:	4904      	ldr	r1, [pc, #16]	; (8004ddc <HAL_RCC_GetPCLK2Freq+0x28>)
 8004dca:	5ccb      	ldrb	r3, [r1, r3]
 8004dcc:	f003 031f 	and.w	r3, r3, #31
 8004dd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	bd80      	pop	{r7, pc}
 8004dd8:	40021000 	.word	0x40021000
 8004ddc:	08009dcc 	.word	0x08009dcc

08004de0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b086      	sub	sp, #24
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004de8:	2300      	movs	r3, #0
 8004dea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004dec:	4b27      	ldr	r3, [pc, #156]	; (8004e8c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004dee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004df0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d003      	beq.n	8004e00 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004df8:	f7ff f906 	bl	8004008 <HAL_PWREx_GetVoltageRange>
 8004dfc:	6178      	str	r0, [r7, #20]
 8004dfe:	e014      	b.n	8004e2a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e00:	4b22      	ldr	r3, [pc, #136]	; (8004e8c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004e02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e04:	4a21      	ldr	r2, [pc, #132]	; (8004e8c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004e06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e0a:	6593      	str	r3, [r2, #88]	; 0x58
 8004e0c:	4b1f      	ldr	r3, [pc, #124]	; (8004e8c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004e0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e14:	60fb      	str	r3, [r7, #12]
 8004e16:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004e18:	f7ff f8f6 	bl	8004008 <HAL_PWREx_GetVoltageRange>
 8004e1c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004e1e:	4b1b      	ldr	r3, [pc, #108]	; (8004e8c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e22:	4a1a      	ldr	r2, [pc, #104]	; (8004e8c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004e24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e28:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e30:	d10b      	bne.n	8004e4a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2b80      	cmp	r3, #128	; 0x80
 8004e36:	d913      	bls.n	8004e60 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2ba0      	cmp	r3, #160	; 0xa0
 8004e3c:	d902      	bls.n	8004e44 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004e3e:	2302      	movs	r3, #2
 8004e40:	613b      	str	r3, [r7, #16]
 8004e42:	e00d      	b.n	8004e60 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004e44:	2301      	movs	r3, #1
 8004e46:	613b      	str	r3, [r7, #16]
 8004e48:	e00a      	b.n	8004e60 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2b7f      	cmp	r3, #127	; 0x7f
 8004e4e:	d902      	bls.n	8004e56 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004e50:	2302      	movs	r3, #2
 8004e52:	613b      	str	r3, [r7, #16]
 8004e54:	e004      	b.n	8004e60 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2b70      	cmp	r3, #112	; 0x70
 8004e5a:	d101      	bne.n	8004e60 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004e60:	4b0b      	ldr	r3, [pc, #44]	; (8004e90 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f023 020f 	bic.w	r2, r3, #15
 8004e68:	4909      	ldr	r1, [pc, #36]	; (8004e90 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004e70:	4b07      	ldr	r3, [pc, #28]	; (8004e90 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 030f 	and.w	r3, r3, #15
 8004e78:	693a      	ldr	r2, [r7, #16]
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d001      	beq.n	8004e82 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e000      	b.n	8004e84 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8004e82:	2300      	movs	r3, #0
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3718      	adds	r7, #24
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}
 8004e8c:	40021000 	.word	0x40021000
 8004e90:	40022000 	.word	0x40022000

08004e94 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b087      	sub	sp, #28
 8004e98:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004e9a:	4b2d      	ldr	r3, [pc, #180]	; (8004f50 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004e9c:	68db      	ldr	r3, [r3, #12]
 8004e9e:	f003 0303 	and.w	r3, r3, #3
 8004ea2:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2b03      	cmp	r3, #3
 8004ea8:	d00b      	beq.n	8004ec2 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2b03      	cmp	r3, #3
 8004eae:	d825      	bhi.n	8004efc <RCC_GetSysClockFreqFromPLLSource+0x68>
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d008      	beq.n	8004ec8 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2b02      	cmp	r3, #2
 8004eba:	d11f      	bne.n	8004efc <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004ebc:	4b25      	ldr	r3, [pc, #148]	; (8004f54 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004ebe:	613b      	str	r3, [r7, #16]
    break;
 8004ec0:	e01f      	b.n	8004f02 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8004ec2:	4b25      	ldr	r3, [pc, #148]	; (8004f58 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004ec4:	613b      	str	r3, [r7, #16]
    break;
 8004ec6:	e01c      	b.n	8004f02 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004ec8:	4b21      	ldr	r3, [pc, #132]	; (8004f50 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 0308 	and.w	r3, r3, #8
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d107      	bne.n	8004ee4 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004ed4:	4b1e      	ldr	r3, [pc, #120]	; (8004f50 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004ed6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004eda:	0a1b      	lsrs	r3, r3, #8
 8004edc:	f003 030f 	and.w	r3, r3, #15
 8004ee0:	617b      	str	r3, [r7, #20]
 8004ee2:	e005      	b.n	8004ef0 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004ee4:	4b1a      	ldr	r3, [pc, #104]	; (8004f50 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	091b      	lsrs	r3, r3, #4
 8004eea:	f003 030f 	and.w	r3, r3, #15
 8004eee:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8004ef0:	4a1a      	ldr	r2, [pc, #104]	; (8004f5c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ef8:	613b      	str	r3, [r7, #16]
    break;
 8004efa:	e002      	b.n	8004f02 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8004efc:	2300      	movs	r3, #0
 8004efe:	613b      	str	r3, [r7, #16]
    break;
 8004f00:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004f02:	4b13      	ldr	r3, [pc, #76]	; (8004f50 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	091b      	lsrs	r3, r3, #4
 8004f08:	f003 030f 	and.w	r3, r3, #15
 8004f0c:	3301      	adds	r3, #1
 8004f0e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004f10:	4b0f      	ldr	r3, [pc, #60]	; (8004f50 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	0a1b      	lsrs	r3, r3, #8
 8004f16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f1a:	693a      	ldr	r2, [r7, #16]
 8004f1c:	fb03 f202 	mul.w	r2, r3, r2
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f26:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004f28:	4b09      	ldr	r3, [pc, #36]	; (8004f50 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	0e5b      	lsrs	r3, r3, #25
 8004f2e:	f003 0303 	and.w	r3, r3, #3
 8004f32:	3301      	adds	r3, #1
 8004f34:	005b      	lsls	r3, r3, #1
 8004f36:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004f38:	693a      	ldr	r2, [r7, #16]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f40:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004f42:	683b      	ldr	r3, [r7, #0]
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	371c      	adds	r7, #28
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr
 8004f50:	40021000 	.word	0x40021000
 8004f54:	00f42400 	.word	0x00f42400
 8004f58:	007a1200 	.word	0x007a1200
 8004f5c:	08009dd4 	.word	0x08009dd4

08004f60 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b086      	sub	sp, #24
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004f68:	2300      	movs	r3, #0
 8004f6a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d040      	beq.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f80:	2b80      	cmp	r3, #128	; 0x80
 8004f82:	d02a      	beq.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004f84:	2b80      	cmp	r3, #128	; 0x80
 8004f86:	d825      	bhi.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004f88:	2b60      	cmp	r3, #96	; 0x60
 8004f8a:	d026      	beq.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004f8c:	2b60      	cmp	r3, #96	; 0x60
 8004f8e:	d821      	bhi.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004f90:	2b40      	cmp	r3, #64	; 0x40
 8004f92:	d006      	beq.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004f94:	2b40      	cmp	r3, #64	; 0x40
 8004f96:	d81d      	bhi.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d009      	beq.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004f9c:	2b20      	cmp	r3, #32
 8004f9e:	d010      	beq.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004fa0:	e018      	b.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004fa2:	4b89      	ldr	r3, [pc, #548]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	4a88      	ldr	r2, [pc, #544]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004fa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fac:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004fae:	e015      	b.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	3304      	adds	r3, #4
 8004fb4:	2100      	movs	r1, #0
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f001 fa34 	bl	8006424 <RCCEx_PLLSAI1_Config>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004fc0:	e00c      	b.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	3320      	adds	r3, #32
 8004fc6:	2100      	movs	r1, #0
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f001 fb1f 	bl	800660c <RCCEx_PLLSAI2_Config>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004fd2:	e003      	b.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	74fb      	strb	r3, [r7, #19]
      break;
 8004fd8:	e000      	b.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8004fda:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fdc:	7cfb      	ldrb	r3, [r7, #19]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d10b      	bne.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004fe2:	4b79      	ldr	r3, [pc, #484]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004fe4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004fe8:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ff0:	4975      	ldr	r1, [pc, #468]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004ff8:	e001      	b.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ffa:	7cfb      	ldrb	r3, [r7, #19]
 8004ffc:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005006:	2b00      	cmp	r3, #0
 8005008:	d047      	beq.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800500e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005012:	d030      	beq.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005014:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005018:	d82a      	bhi.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800501a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800501e:	d02a      	beq.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005020:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005024:	d824      	bhi.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005026:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800502a:	d008      	beq.n	800503e <HAL_RCCEx_PeriphCLKConfig+0xde>
 800502c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005030:	d81e      	bhi.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005032:	2b00      	cmp	r3, #0
 8005034:	d00a      	beq.n	800504c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8005036:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800503a:	d010      	beq.n	800505e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800503c:	e018      	b.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800503e:	4b62      	ldr	r3, [pc, #392]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005040:	68db      	ldr	r3, [r3, #12]
 8005042:	4a61      	ldr	r2, [pc, #388]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005044:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005048:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800504a:	e015      	b.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	3304      	adds	r3, #4
 8005050:	2100      	movs	r1, #0
 8005052:	4618      	mov	r0, r3
 8005054:	f001 f9e6 	bl	8006424 <RCCEx_PLLSAI1_Config>
 8005058:	4603      	mov	r3, r0
 800505a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800505c:	e00c      	b.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	3320      	adds	r3, #32
 8005062:	2100      	movs	r1, #0
 8005064:	4618      	mov	r0, r3
 8005066:	f001 fad1 	bl	800660c <RCCEx_PLLSAI2_Config>
 800506a:	4603      	mov	r3, r0
 800506c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800506e:	e003      	b.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	74fb      	strb	r3, [r7, #19]
      break;
 8005074:	e000      	b.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8005076:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005078:	7cfb      	ldrb	r3, [r7, #19]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d10b      	bne.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800507e:	4b52      	ldr	r3, [pc, #328]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005080:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005084:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800508c:	494e      	ldr	r1, [pc, #312]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800508e:	4313      	orrs	r3, r2
 8005090:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005094:	e001      	b.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005096:	7cfb      	ldrb	r3, [r7, #19]
 8005098:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	f000 809f 	beq.w	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050a8:	2300      	movs	r3, #0
 80050aa:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80050ac:	4b46      	ldr	r3, [pc, #280]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80050ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d101      	bne.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80050b8:	2301      	movs	r3, #1
 80050ba:	e000      	b.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80050bc:	2300      	movs	r3, #0
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d00d      	beq.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050c2:	4b41      	ldr	r3, [pc, #260]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80050c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050c6:	4a40      	ldr	r2, [pc, #256]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80050c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050cc:	6593      	str	r3, [r2, #88]	; 0x58
 80050ce:	4b3e      	ldr	r3, [pc, #248]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80050d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050d6:	60bb      	str	r3, [r7, #8]
 80050d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050da:	2301      	movs	r3, #1
 80050dc:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80050de:	4b3b      	ldr	r3, [pc, #236]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a3a      	ldr	r2, [pc, #232]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80050e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050e8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80050ea:	f7fd fb05 	bl	80026f8 <HAL_GetTick>
 80050ee:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80050f0:	e009      	b.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050f2:	f7fd fb01 	bl	80026f8 <HAL_GetTick>
 80050f6:	4602      	mov	r2, r0
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	1ad3      	subs	r3, r2, r3
 80050fc:	2b02      	cmp	r3, #2
 80050fe:	d902      	bls.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8005100:	2303      	movs	r3, #3
 8005102:	74fb      	strb	r3, [r7, #19]
        break;
 8005104:	e005      	b.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005106:	4b31      	ldr	r3, [pc, #196]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800510e:	2b00      	cmp	r3, #0
 8005110:	d0ef      	beq.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8005112:	7cfb      	ldrb	r3, [r7, #19]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d15b      	bne.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005118:	4b2b      	ldr	r3, [pc, #172]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800511a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800511e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005122:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d01f      	beq.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005130:	697a      	ldr	r2, [r7, #20]
 8005132:	429a      	cmp	r2, r3
 8005134:	d019      	beq.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005136:	4b24      	ldr	r3, [pc, #144]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005138:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800513c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005140:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005142:	4b21      	ldr	r3, [pc, #132]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005144:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005148:	4a1f      	ldr	r2, [pc, #124]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800514a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800514e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005152:	4b1d      	ldr	r3, [pc, #116]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005154:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005158:	4a1b      	ldr	r2, [pc, #108]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800515a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800515e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005162:	4a19      	ldr	r2, [pc, #100]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	f003 0301 	and.w	r3, r3, #1
 8005170:	2b00      	cmp	r3, #0
 8005172:	d016      	beq.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005174:	f7fd fac0 	bl	80026f8 <HAL_GetTick>
 8005178:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800517a:	e00b      	b.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800517c:	f7fd fabc 	bl	80026f8 <HAL_GetTick>
 8005180:	4602      	mov	r2, r0
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	1ad3      	subs	r3, r2, r3
 8005186:	f241 3288 	movw	r2, #5000	; 0x1388
 800518a:	4293      	cmp	r3, r2
 800518c:	d902      	bls.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800518e:	2303      	movs	r3, #3
 8005190:	74fb      	strb	r3, [r7, #19]
            break;
 8005192:	e006      	b.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005194:	4b0c      	ldr	r3, [pc, #48]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005196:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800519a:	f003 0302 	and.w	r3, r3, #2
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d0ec      	beq.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80051a2:	7cfb      	ldrb	r3, [r7, #19]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d10c      	bne.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80051a8:	4b07      	ldr	r3, [pc, #28]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80051aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051ae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051b8:	4903      	ldr	r1, [pc, #12]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80051ba:	4313      	orrs	r3, r2
 80051bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80051c0:	e008      	b.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80051c2:	7cfb      	ldrb	r3, [r7, #19]
 80051c4:	74bb      	strb	r3, [r7, #18]
 80051c6:	e005      	b.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80051c8:	40021000 	.word	0x40021000
 80051cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051d0:	7cfb      	ldrb	r3, [r7, #19]
 80051d2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80051d4:	7c7b      	ldrb	r3, [r7, #17]
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	d105      	bne.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051da:	4ba0      	ldr	r3, [pc, #640]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051de:	4a9f      	ldr	r2, [pc, #636]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051e4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f003 0301 	and.w	r3, r3, #1
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d00a      	beq.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80051f2:	4b9a      	ldr	r3, [pc, #616]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051f8:	f023 0203 	bic.w	r2, r3, #3
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005200:	4996      	ldr	r1, [pc, #600]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005202:	4313      	orrs	r3, r2
 8005204:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f003 0302 	and.w	r3, r3, #2
 8005210:	2b00      	cmp	r3, #0
 8005212:	d00a      	beq.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005214:	4b91      	ldr	r3, [pc, #580]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005216:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800521a:	f023 020c 	bic.w	r2, r3, #12
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005222:	498e      	ldr	r1, [pc, #568]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005224:	4313      	orrs	r3, r2
 8005226:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f003 0304 	and.w	r3, r3, #4
 8005232:	2b00      	cmp	r3, #0
 8005234:	d00a      	beq.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005236:	4b89      	ldr	r3, [pc, #548]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005238:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800523c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005244:	4985      	ldr	r1, [pc, #532]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005246:	4313      	orrs	r3, r2
 8005248:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 0308 	and.w	r3, r3, #8
 8005254:	2b00      	cmp	r3, #0
 8005256:	d00a      	beq.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005258:	4b80      	ldr	r3, [pc, #512]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800525a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800525e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005266:	497d      	ldr	r1, [pc, #500]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005268:	4313      	orrs	r3, r2
 800526a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f003 0310 	and.w	r3, r3, #16
 8005276:	2b00      	cmp	r3, #0
 8005278:	d00a      	beq.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800527a:	4b78      	ldr	r3, [pc, #480]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800527c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005280:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005288:	4974      	ldr	r1, [pc, #464]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800528a:	4313      	orrs	r3, r2
 800528c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f003 0320 	and.w	r3, r3, #32
 8005298:	2b00      	cmp	r3, #0
 800529a:	d00a      	beq.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800529c:	4b6f      	ldr	r3, [pc, #444]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800529e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052a2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052aa:	496c      	ldr	r1, [pc, #432]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052ac:	4313      	orrs	r3, r2
 80052ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d00a      	beq.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80052be:	4b67      	ldr	r3, [pc, #412]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052c4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052cc:	4963      	ldr	r1, [pc, #396]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052ce:	4313      	orrs	r3, r2
 80052d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d00a      	beq.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80052e0:	4b5e      	ldr	r3, [pc, #376]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052e6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80052ee:	495b      	ldr	r1, [pc, #364]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052f0:	4313      	orrs	r3, r2
 80052f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d00a      	beq.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005302:	4b56      	ldr	r3, [pc, #344]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005304:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005308:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005310:	4952      	ldr	r1, [pc, #328]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005312:	4313      	orrs	r3, r2
 8005314:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005320:	2b00      	cmp	r3, #0
 8005322:	d00a      	beq.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005324:	4b4d      	ldr	r3, [pc, #308]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800532a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005332:	494a      	ldr	r1, [pc, #296]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005334:	4313      	orrs	r3, r2
 8005336:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005342:	2b00      	cmp	r3, #0
 8005344:	d00a      	beq.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005346:	4b45      	ldr	r3, [pc, #276]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005348:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800534c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005354:	4941      	ldr	r1, [pc, #260]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005356:	4313      	orrs	r3, r2
 8005358:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005364:	2b00      	cmp	r3, #0
 8005366:	d00a      	beq.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005368:	4b3c      	ldr	r3, [pc, #240]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800536a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800536e:	f023 0203 	bic.w	r2, r3, #3
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005376:	4939      	ldr	r1, [pc, #228]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005378:	4313      	orrs	r3, r2
 800537a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005386:	2b00      	cmp	r3, #0
 8005388:	d028      	beq.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800538a:	4b34      	ldr	r3, [pc, #208]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800538c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005390:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005398:	4930      	ldr	r1, [pc, #192]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800539a:	4313      	orrs	r3, r2
 800539c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053a8:	d106      	bne.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053aa:	4b2c      	ldr	r3, [pc, #176]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053ac:	68db      	ldr	r3, [r3, #12]
 80053ae:	4a2b      	ldr	r2, [pc, #172]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80053b4:	60d3      	str	r3, [r2, #12]
 80053b6:	e011      	b.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80053c0:	d10c      	bne.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	3304      	adds	r3, #4
 80053c6:	2101      	movs	r1, #1
 80053c8:	4618      	mov	r0, r3
 80053ca:	f001 f82b 	bl	8006424 <RCCEx_PLLSAI1_Config>
 80053ce:	4603      	mov	r3, r0
 80053d0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80053d2:	7cfb      	ldrb	r3, [r7, #19]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d001      	beq.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80053d8:	7cfb      	ldrb	r3, [r7, #19]
 80053da:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d04d      	beq.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053f0:	d108      	bne.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80053f2:	4b1a      	ldr	r3, [pc, #104]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80053f8:	4a18      	ldr	r2, [pc, #96]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80053fe:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005402:	e012      	b.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005404:	4b15      	ldr	r3, [pc, #84]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005406:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800540a:	4a14      	ldr	r2, [pc, #80]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800540c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005410:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005414:	4b11      	ldr	r3, [pc, #68]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800541a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005422:	490e      	ldr	r1, [pc, #56]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005424:	4313      	orrs	r3, r2
 8005426:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800542e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005432:	d106      	bne.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005434:	4b09      	ldr	r3, [pc, #36]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005436:	68db      	ldr	r3, [r3, #12]
 8005438:	4a08      	ldr	r2, [pc, #32]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800543a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800543e:	60d3      	str	r3, [r2, #12]
 8005440:	e020      	b.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005446:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800544a:	d109      	bne.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800544c:	4b03      	ldr	r3, [pc, #12]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	4a02      	ldr	r2, [pc, #8]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005452:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005456:	60d3      	str	r3, [r2, #12]
 8005458:	e014      	b.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800545a:	bf00      	nop
 800545c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005464:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005468:	d10c      	bne.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	3304      	adds	r3, #4
 800546e:	2101      	movs	r1, #1
 8005470:	4618      	mov	r0, r3
 8005472:	f000 ffd7 	bl	8006424 <RCCEx_PLLSAI1_Config>
 8005476:	4603      	mov	r3, r0
 8005478:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800547a:	7cfb      	ldrb	r3, [r7, #19]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d001      	beq.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8005480:	7cfb      	ldrb	r3, [r7, #19]
 8005482:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800548c:	2b00      	cmp	r3, #0
 800548e:	d028      	beq.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005490:	4b4a      	ldr	r3, [pc, #296]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005496:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800549e:	4947      	ldr	r1, [pc, #284]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80054a0:	4313      	orrs	r3, r2
 80054a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054ae:	d106      	bne.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054b0:	4b42      	ldr	r3, [pc, #264]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80054b2:	68db      	ldr	r3, [r3, #12]
 80054b4:	4a41      	ldr	r2, [pc, #260]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80054b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054ba:	60d3      	str	r3, [r2, #12]
 80054bc:	e011      	b.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054c2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80054c6:	d10c      	bne.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	3304      	adds	r3, #4
 80054cc:	2101      	movs	r1, #1
 80054ce:	4618      	mov	r0, r3
 80054d0:	f000 ffa8 	bl	8006424 <RCCEx_PLLSAI1_Config>
 80054d4:	4603      	mov	r3, r0
 80054d6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80054d8:	7cfb      	ldrb	r3, [r7, #19]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d001      	beq.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80054de:	7cfb      	ldrb	r3, [r7, #19]
 80054e0:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d01e      	beq.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80054ee:	4b33      	ldr	r3, [pc, #204]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80054f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054f4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054fe:	492f      	ldr	r1, [pc, #188]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005500:	4313      	orrs	r3, r2
 8005502:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800550c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005510:	d10c      	bne.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	3304      	adds	r3, #4
 8005516:	2102      	movs	r1, #2
 8005518:	4618      	mov	r0, r3
 800551a:	f000 ff83 	bl	8006424 <RCCEx_PLLSAI1_Config>
 800551e:	4603      	mov	r3, r0
 8005520:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005522:	7cfb      	ldrb	r3, [r7, #19]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d001      	beq.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8005528:	7cfb      	ldrb	r3, [r7, #19]
 800552a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005534:	2b00      	cmp	r3, #0
 8005536:	d00b      	beq.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005538:	4b20      	ldr	r3, [pc, #128]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800553a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800553e:	f023 0204 	bic.w	r2, r3, #4
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005548:	491c      	ldr	r1, [pc, #112]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800554a:	4313      	orrs	r3, r2
 800554c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005558:	2b00      	cmp	r3, #0
 800555a:	d00b      	beq.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800555c:	4b17      	ldr	r3, [pc, #92]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800555e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005562:	f023 0218 	bic.w	r2, r3, #24
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800556c:	4913      	ldr	r1, [pc, #76]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800556e:	4313      	orrs	r3, r2
 8005570:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800557c:	2b00      	cmp	r3, #0
 800557e:	d017      	beq.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005580:	4b0e      	ldr	r3, [pc, #56]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005582:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005586:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005590:	490a      	ldr	r1, [pc, #40]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005592:	4313      	orrs	r3, r2
 8005594:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800559e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80055a2:	d105      	bne.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055a4:	4b05      	ldr	r3, [pc, #20]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055a6:	68db      	ldr	r3, [r3, #12]
 80055a8:	4a04      	ldr	r2, [pc, #16]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055ae:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80055b0:	7cbb      	ldrb	r3, [r7, #18]
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3718      	adds	r7, #24
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}
 80055ba:	bf00      	nop
 80055bc:	40021000 	.word	0x40021000

080055c0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b088      	sub	sp, #32
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 80055c8:	2300      	movs	r3, #0
 80055ca:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055d2:	d13e      	bne.n	8005652 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80055d4:	4bb6      	ldr	r3, [pc, #728]	; (80058b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80055d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055de:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055e6:	d028      	beq.n	800563a <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055ee:	f200 86f4 	bhi.w	80063da <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055f8:	d005      	beq.n	8005606 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005600:	d00e      	beq.n	8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8005602:	f000 beea 	b.w	80063da <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005606:	4baa      	ldr	r3, [pc, #680]	; (80058b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005608:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800560c:	f003 0302 	and.w	r3, r3, #2
 8005610:	2b02      	cmp	r3, #2
 8005612:	f040 86e4 	bne.w	80063de <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        frequency = LSE_VALUE;
 8005616:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800561a:	61fb      	str	r3, [r7, #28]
      break;
 800561c:	f000 bedf 	b.w	80063de <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005620:	4ba3      	ldr	r3, [pc, #652]	; (80058b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005622:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005626:	f003 0302 	and.w	r3, r3, #2
 800562a:	2b02      	cmp	r3, #2
 800562c:	f040 86d9 	bne.w	80063e2 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
          frequency = LSI_VALUE;
 8005630:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005634:	61fb      	str	r3, [r7, #28]
      break;
 8005636:	f000 bed4 	b.w	80063e2 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800563a:	4b9d      	ldr	r3, [pc, #628]	; (80058b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005642:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005646:	f040 86ce 	bne.w	80063e6 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
        frequency = HSE_VALUE / 32U;
 800564a:	4b9a      	ldr	r3, [pc, #616]	; (80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800564c:	61fb      	str	r3, [r7, #28]
      break;
 800564e:	f000 beca 	b.w	80063e6 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005652:	4b97      	ldr	r3, [pc, #604]	; (80058b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005654:	68db      	ldr	r3, [r3, #12]
 8005656:	f003 0303 	and.w	r3, r3, #3
 800565a:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	2b03      	cmp	r3, #3
 8005660:	d036      	beq.n	80056d0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	2b03      	cmp	r3, #3
 8005666:	d840      	bhi.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	2b01      	cmp	r3, #1
 800566c:	d003      	beq.n	8005676 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	2b02      	cmp	r3, #2
 8005672:	d020      	beq.n	80056b6 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8005674:	e039      	b.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005676:	4b8e      	ldr	r3, [pc, #568]	; (80058b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f003 0302 	and.w	r3, r3, #2
 800567e:	2b02      	cmp	r3, #2
 8005680:	d116      	bne.n	80056b0 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005682:	4b8b      	ldr	r3, [pc, #556]	; (80058b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f003 0308 	and.w	r3, r3, #8
 800568a:	2b00      	cmp	r3, #0
 800568c:	d005      	beq.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 800568e:	4b88      	ldr	r3, [pc, #544]	; (80058b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	091b      	lsrs	r3, r3, #4
 8005694:	f003 030f 	and.w	r3, r3, #15
 8005698:	e005      	b.n	80056a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 800569a:	4b85      	ldr	r3, [pc, #532]	; (80058b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800569c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80056a0:	0a1b      	lsrs	r3, r3, #8
 80056a2:	f003 030f 	and.w	r3, r3, #15
 80056a6:	4a84      	ldr	r2, [pc, #528]	; (80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80056a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056ac:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80056ae:	e01f      	b.n	80056f0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80056b0:	2300      	movs	r3, #0
 80056b2:	61bb      	str	r3, [r7, #24]
      break;
 80056b4:	e01c      	b.n	80056f0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80056b6:	4b7e      	ldr	r3, [pc, #504]	; (80058b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056c2:	d102      	bne.n	80056ca <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 80056c4:	4b7d      	ldr	r3, [pc, #500]	; (80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80056c6:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80056c8:	e012      	b.n	80056f0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80056ca:	2300      	movs	r3, #0
 80056cc:	61bb      	str	r3, [r7, #24]
      break;
 80056ce:	e00f      	b.n	80056f0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80056d0:	4b77      	ldr	r3, [pc, #476]	; (80058b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80056dc:	d102      	bne.n	80056e4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 80056de:	4b78      	ldr	r3, [pc, #480]	; (80058c0 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 80056e0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80056e2:	e005      	b.n	80056f0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80056e4:	2300      	movs	r3, #0
 80056e6:	61bb      	str	r3, [r7, #24]
      break;
 80056e8:	e002      	b.n	80056f0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 80056ea:	2300      	movs	r3, #0
 80056ec:	61bb      	str	r3, [r7, #24]
      break;
 80056ee:	bf00      	nop
    }

    switch(PeriphClk)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80056f6:	f000 8606 	beq.w	8006306 <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005700:	f200 8673 	bhi.w	80063ea <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800570a:	f000 8469 	beq.w	8005fe0 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005714:	f200 8669 	bhi.w	80063ea <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800571e:	f000 8531 	beq.w	8006184 <HAL_RCCEx_GetPeriphCLKFreq+0xbc4>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005728:	f200 865f 	bhi.w	80063ea <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005732:	f000 8187 	beq.w	8005a44 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800573c:	f200 8655 	bhi.w	80063ea <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005746:	f000 80cd 	beq.w	80058e4 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005750:	f200 864b 	bhi.w	80063ea <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800575a:	f000 8430 	beq.w	8005fbe <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005764:	f200 8641 	bhi.w	80063ea <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800576e:	f000 83e4 	beq.w	8005f3a <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005778:	f200 8637 	bhi.w	80063ea <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005782:	f000 80af 	beq.w	80058e4 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800578c:	f200 862d 	bhi.w	80063ea <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005796:	f000 809d 	beq.w	80058d4 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057a0:	f200 8623 	bhi.w	80063ea <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057aa:	f000 808b 	beq.w	80058c4 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057b4:	f200 8619 	bhi.w	80063ea <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057be:	f000 8554 	beq.w	800626a <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057c8:	f200 860f 	bhi.w	80063ea <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057d2:	f000 8500 	beq.w	80061d6 <HAL_RCCEx_GetPeriphCLKFreq+0xc16>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057dc:	f200 8605 	bhi.w	80063ea <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057e6:	f000 84a1 	beq.w	800612c <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057f0:	f200 85fb 	bhi.w	80063ea <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2b80      	cmp	r3, #128	; 0x80
 80057f8:	f000 846c 	beq.w	80060d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb14>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2b80      	cmp	r3, #128	; 0x80
 8005800:	f200 85f3 	bhi.w	80063ea <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2b20      	cmp	r3, #32
 8005808:	d84c      	bhi.n	80058a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2b00      	cmp	r3, #0
 800580e:	f000 85ec 	beq.w	80063ea <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	3b01      	subs	r3, #1
 8005816:	2b1f      	cmp	r3, #31
 8005818:	f200 85e7 	bhi.w	80063ea <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800581c:	a201      	add	r2, pc, #4	; (adr r2, 8005824 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 800581e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005822:	bf00      	nop
 8005824:	08005c39 	.word	0x08005c39
 8005828:	08005ca7 	.word	0x08005ca7
 800582c:	080063eb 	.word	0x080063eb
 8005830:	08005d3b 	.word	0x08005d3b
 8005834:	080063eb 	.word	0x080063eb
 8005838:	080063eb 	.word	0x080063eb
 800583c:	080063eb 	.word	0x080063eb
 8005840:	08005db3 	.word	0x08005db3
 8005844:	080063eb 	.word	0x080063eb
 8005848:	080063eb 	.word	0x080063eb
 800584c:	080063eb 	.word	0x080063eb
 8005850:	080063eb 	.word	0x080063eb
 8005854:	080063eb 	.word	0x080063eb
 8005858:	080063eb 	.word	0x080063eb
 800585c:	080063eb 	.word	0x080063eb
 8005860:	08005e37 	.word	0x08005e37
 8005864:	080063eb 	.word	0x080063eb
 8005868:	080063eb 	.word	0x080063eb
 800586c:	080063eb 	.word	0x080063eb
 8005870:	080063eb 	.word	0x080063eb
 8005874:	080063eb 	.word	0x080063eb
 8005878:	080063eb 	.word	0x080063eb
 800587c:	080063eb 	.word	0x080063eb
 8005880:	080063eb 	.word	0x080063eb
 8005884:	080063eb 	.word	0x080063eb
 8005888:	080063eb 	.word	0x080063eb
 800588c:	080063eb 	.word	0x080063eb
 8005890:	080063eb 	.word	0x080063eb
 8005894:	080063eb 	.word	0x080063eb
 8005898:	080063eb 	.word	0x080063eb
 800589c:	080063eb 	.word	0x080063eb
 80058a0:	08005eb9 	.word	0x08005eb9
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2b40      	cmp	r3, #64	; 0x40
 80058a8:	f000 83e8 	beq.w	800607c <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 80058ac:	f000 bd9d 	b.w	80063ea <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80058b0:	40021000 	.word	0x40021000
 80058b4:	0003d090 	.word	0x0003d090
 80058b8:	08009dd4 	.word	0x08009dd4
 80058bc:	00f42400 	.word	0x00f42400
 80058c0:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 80058c4:	69b9      	ldr	r1, [r7, #24]
 80058c6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80058ca:	f000 ff93 	bl	80067f4 <RCCEx_GetSAIxPeriphCLKFreq>
 80058ce:	61f8      	str	r0, [r7, #28]
      break;
 80058d0:	f000 bd8e 	b.w	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 80058d4:	69b9      	ldr	r1, [r7, #24]
 80058d6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80058da:	f000 ff8b 	bl	80067f4 <RCCEx_GetSAIxPeriphCLKFreq>
 80058de:	61f8      	str	r0, [r7, #28]
      break;
 80058e0:	f000 bd86 	b.w	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80058e4:	4b9a      	ldr	r3, [pc, #616]	; (8005b50 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80058e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058ea:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80058ee:	60fb      	str	r3, [r7, #12]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80058f6:	d015      	beq.n	8005924 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80058fe:	f200 8092 	bhi.w	8005a26 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005908:	d029      	beq.n	800595e <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005910:	f200 8089 	bhi.w	8005a26 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d07b      	beq.n	8005a12 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005920:	d04a      	beq.n	80059b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
          break;
 8005922:	e080      	b.n	8005a26 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005924:	4b8a      	ldr	r3, [pc, #552]	; (8005b50 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f003 0302 	and.w	r3, r3, #2
 800592c:	2b02      	cmp	r3, #2
 800592e:	d17d      	bne.n	8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005930:	4b87      	ldr	r3, [pc, #540]	; (8005b50 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f003 0308 	and.w	r3, r3, #8
 8005938:	2b00      	cmp	r3, #0
 800593a:	d005      	beq.n	8005948 <HAL_RCCEx_GetPeriphCLKFreq+0x388>
 800593c:	4b84      	ldr	r3, [pc, #528]	; (8005b50 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	091b      	lsrs	r3, r3, #4
 8005942:	f003 030f 	and.w	r3, r3, #15
 8005946:	e005      	b.n	8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 8005948:	4b81      	ldr	r3, [pc, #516]	; (8005b50 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800594a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800594e:	0a1b      	lsrs	r3, r3, #8
 8005950:	f003 030f 	and.w	r3, r3, #15
 8005954:	4a7f      	ldr	r2, [pc, #508]	; (8005b54 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8005956:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800595a:	61fb      	str	r3, [r7, #28]
          break;
 800595c:	e066      	b.n	8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800595e:	4b7c      	ldr	r3, [pc, #496]	; (8005b50 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005966:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800596a:	d162      	bne.n	8005a32 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800596c:	4b78      	ldr	r3, [pc, #480]	; (8005b50 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800596e:	68db      	ldr	r3, [r3, #12]
 8005970:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005974:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005978:	d15b      	bne.n	8005a32 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800597a:	4b75      	ldr	r3, [pc, #468]	; (8005b50 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800597c:	68db      	ldr	r3, [r3, #12]
 800597e:	0a1b      	lsrs	r3, r3, #8
 8005980:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005984:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005986:	69bb      	ldr	r3, [r7, #24]
 8005988:	68ba      	ldr	r2, [r7, #8]
 800598a:	fb03 f202 	mul.w	r2, r3, r2
 800598e:	4b70      	ldr	r3, [pc, #448]	; (8005b50 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005990:	68db      	ldr	r3, [r3, #12]
 8005992:	091b      	lsrs	r3, r3, #4
 8005994:	f003 030f 	and.w	r3, r3, #15
 8005998:	3301      	adds	r3, #1
 800599a:	fbb2 f3f3 	udiv	r3, r2, r3
 800599e:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80059a0:	4b6b      	ldr	r3, [pc, #428]	; (8005b50 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	0d5b      	lsrs	r3, r3, #21
 80059a6:	f003 0303 	and.w	r3, r3, #3
 80059aa:	3301      	adds	r3, #1
 80059ac:	005b      	lsls	r3, r3, #1
 80059ae:	69ba      	ldr	r2, [r7, #24]
 80059b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80059b4:	61fb      	str	r3, [r7, #28]
          break;
 80059b6:	e03c      	b.n	8005a32 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 80059b8:	4b65      	ldr	r3, [pc, #404]	; (8005b50 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80059c4:	d138      	bne.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 80059c6:	4b62      	ldr	r3, [pc, #392]	; (8005b50 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80059c8:	691b      	ldr	r3, [r3, #16]
 80059ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059d2:	d131      	bne.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80059d4:	4b5e      	ldr	r3, [pc, #376]	; (8005b50 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80059d6:	691b      	ldr	r3, [r3, #16]
 80059d8:	0a1b      	lsrs	r3, r3, #8
 80059da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059de:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80059e0:	69bb      	ldr	r3, [r7, #24]
 80059e2:	68ba      	ldr	r2, [r7, #8]
 80059e4:	fb03 f202 	mul.w	r2, r3, r2
 80059e8:	4b59      	ldr	r3, [pc, #356]	; (8005b50 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80059ea:	691b      	ldr	r3, [r3, #16]
 80059ec:	091b      	lsrs	r3, r3, #4
 80059ee:	f003 030f 	and.w	r3, r3, #15
 80059f2:	3301      	adds	r3, #1
 80059f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80059f8:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 80059fa:	4b55      	ldr	r3, [pc, #340]	; (8005b50 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80059fc:	691b      	ldr	r3, [r3, #16]
 80059fe:	0d5b      	lsrs	r3, r3, #21
 8005a00:	f003 0303 	and.w	r3, r3, #3
 8005a04:	3301      	adds	r3, #1
 8005a06:	005b      	lsls	r3, r3, #1
 8005a08:	69ba      	ldr	r2, [r7, #24]
 8005a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a0e:	61fb      	str	r3, [r7, #28]
          break;
 8005a10:	e012      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8005a12:	4b4f      	ldr	r3, [pc, #316]	; (8005b50 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005a14:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005a18:	f003 0302 	and.w	r3, r3, #2
 8005a1c:	2b02      	cmp	r3, #2
 8005a1e:	d10e      	bne.n	8005a3e <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = HSI48_VALUE;
 8005a20:	4b4d      	ldr	r3, [pc, #308]	; (8005b58 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005a22:	61fb      	str	r3, [r7, #28]
          break;
 8005a24:	e00b      	b.n	8005a3e <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 8005a26:	bf00      	nop
 8005a28:	f000 bce2 	b.w	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005a2c:	bf00      	nop
 8005a2e:	f000 bcdf 	b.w	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005a32:	bf00      	nop
 8005a34:	f000 bcdc 	b.w	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005a38:	bf00      	nop
 8005a3a:	f000 bcd9 	b.w	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005a3e:	bf00      	nop
        break;
 8005a40:	f000 bcd6 	b.w	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 8005a44:	4b42      	ldr	r3, [pc, #264]	; (8005b50 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005a46:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a52:	d13d      	bne.n	8005ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8005a54:	4b3e      	ldr	r3, [pc, #248]	; (8005b50 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a5c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a60:	f040 84c5 	bne.w	80063ee <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 8005a64:	4b3a      	ldr	r3, [pc, #232]	; (8005b50 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005a66:	68db      	ldr	r3, [r3, #12]
 8005a68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a70:	f040 84bd 	bne.w	80063ee <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005a74:	4b36      	ldr	r3, [pc, #216]	; (8005b50 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005a76:	68db      	ldr	r3, [r3, #12]
 8005a78:	0a1b      	lsrs	r3, r3, #8
 8005a7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a7e:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005a80:	69bb      	ldr	r3, [r7, #24]
 8005a82:	68ba      	ldr	r2, [r7, #8]
 8005a84:	fb03 f202 	mul.w	r2, r3, r2
 8005a88:	4b31      	ldr	r3, [pc, #196]	; (8005b50 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005a8a:	68db      	ldr	r3, [r3, #12]
 8005a8c:	091b      	lsrs	r3, r3, #4
 8005a8e:	f003 030f 	and.w	r3, r3, #15
 8005a92:	3301      	adds	r3, #1
 8005a94:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a98:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8005a9a:	4b2d      	ldr	r3, [pc, #180]	; (8005b50 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005a9c:	68db      	ldr	r3, [r3, #12]
 8005a9e:	0edb      	lsrs	r3, r3, #27
 8005aa0:	f003 031f 	and.w	r3, r3, #31
 8005aa4:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d10a      	bne.n	8005ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8005aac:	4b28      	ldr	r3, [pc, #160]	; (8005b50 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d002      	beq.n	8005abe <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 17U;
 8005ab8:	2311      	movs	r3, #17
 8005aba:	617b      	str	r3, [r7, #20]
 8005abc:	e001      	b.n	8005ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
                pllp = 7U;
 8005abe:	2307      	movs	r3, #7
 8005ac0:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 8005ac2:	69ba      	ldr	r2, [r7, #24]
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aca:	61fb      	str	r3, [r7, #28]
      break;
 8005acc:	f000 bc8f 	b.w	80063ee <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8005ad0:	4b1f      	ldr	r3, [pc, #124]	; (8005b50 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ad6:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8005ada:	60fb      	str	r3, [r7, #12]
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005ae2:	d016      	beq.n	8005b12 <HAL_RCCEx_GetPeriphCLKFreq+0x552>
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005aea:	f200 809b 	bhi.w	8005c24 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005af4:	d032      	beq.n	8005b5c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005afc:	f200 8092 	bhi.w	8005c24 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	f000 8084 	beq.w	8005c10 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b0e:	d052      	beq.n	8005bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          break;
 8005b10:	e088      	b.n	8005c24 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005b12:	4b0f      	ldr	r3, [pc, #60]	; (8005b50 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f003 0302 	and.w	r3, r3, #2
 8005b1a:	2b02      	cmp	r3, #2
 8005b1c:	f040 8084 	bne.w	8005c28 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005b20:	4b0b      	ldr	r3, [pc, #44]	; (8005b50 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f003 0308 	and.w	r3, r3, #8
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d005      	beq.n	8005b38 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8005b2c:	4b08      	ldr	r3, [pc, #32]	; (8005b50 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	091b      	lsrs	r3, r3, #4
 8005b32:	f003 030f 	and.w	r3, r3, #15
 8005b36:	e005      	b.n	8005b44 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
 8005b38:	4b05      	ldr	r3, [pc, #20]	; (8005b50 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005b3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b3e:	0a1b      	lsrs	r3, r3, #8
 8005b40:	f003 030f 	and.w	r3, r3, #15
 8005b44:	4a03      	ldr	r2, [pc, #12]	; (8005b54 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8005b46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b4a:	61fb      	str	r3, [r7, #28]
          break;
 8005b4c:	e06c      	b.n	8005c28 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 8005b4e:	bf00      	nop
 8005b50:	40021000 	.word	0x40021000
 8005b54:	08009dd4 	.word	0x08009dd4
 8005b58:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8005b5c:	4ba5      	ldr	r3, [pc, #660]	; (8005df4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b68:	d160      	bne.n	8005c2c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8005b6a:	4ba2      	ldr	r3, [pc, #648]	; (8005df4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005b6c:	68db      	ldr	r3, [r3, #12]
 8005b6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b76:	d159      	bne.n	8005c2c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005b78:	4b9e      	ldr	r3, [pc, #632]	; (8005df4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	0a1b      	lsrs	r3, r3, #8
 8005b7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b82:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005b84:	69bb      	ldr	r3, [r7, #24]
 8005b86:	68ba      	ldr	r2, [r7, #8]
 8005b88:	fb03 f202 	mul.w	r2, r3, r2
 8005b8c:	4b99      	ldr	r3, [pc, #612]	; (8005df4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005b8e:	68db      	ldr	r3, [r3, #12]
 8005b90:	091b      	lsrs	r3, r3, #4
 8005b92:	f003 030f 	and.w	r3, r3, #15
 8005b96:	3301      	adds	r3, #1
 8005b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b9c:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8005b9e:	4b95      	ldr	r3, [pc, #596]	; (8005df4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005ba0:	68db      	ldr	r3, [r3, #12]
 8005ba2:	0d5b      	lsrs	r3, r3, #21
 8005ba4:	f003 0303 	and.w	r3, r3, #3
 8005ba8:	3301      	adds	r3, #1
 8005baa:	005b      	lsls	r3, r3, #1
 8005bac:	69ba      	ldr	r2, [r7, #24]
 8005bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bb2:	61fb      	str	r3, [r7, #28]
          break;
 8005bb4:	e03a      	b.n	8005c2c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8005bb6:	4b8f      	ldr	r3, [pc, #572]	; (8005df4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005bbe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005bc2:	d135      	bne.n	8005c30 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8005bc4:	4b8b      	ldr	r3, [pc, #556]	; (8005df4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005bc6:	691b      	ldr	r3, [r3, #16]
 8005bc8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005bcc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bd0:	d12e      	bne.n	8005c30 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005bd2:	4b88      	ldr	r3, [pc, #544]	; (8005df4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005bd4:	691b      	ldr	r3, [r3, #16]
 8005bd6:	0a1b      	lsrs	r3, r3, #8
 8005bd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bdc:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8005bde:	69bb      	ldr	r3, [r7, #24]
 8005be0:	68ba      	ldr	r2, [r7, #8]
 8005be2:	fb03 f202 	mul.w	r2, r3, r2
 8005be6:	4b83      	ldr	r3, [pc, #524]	; (8005df4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005be8:	691b      	ldr	r3, [r3, #16]
 8005bea:	091b      	lsrs	r3, r3, #4
 8005bec:	f003 030f 	and.w	r3, r3, #15
 8005bf0:	3301      	adds	r3, #1
 8005bf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bf6:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8005bf8:	4b7e      	ldr	r3, [pc, #504]	; (8005df4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005bfa:	691b      	ldr	r3, [r3, #16]
 8005bfc:	0d5b      	lsrs	r3, r3, #21
 8005bfe:	f003 0303 	and.w	r3, r3, #3
 8005c02:	3301      	adds	r3, #1
 8005c04:	005b      	lsls	r3, r3, #1
 8005c06:	69ba      	ldr	r2, [r7, #24]
 8005c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c0c:	61fb      	str	r3, [r7, #28]
          break;
 8005c0e:	e00f      	b.n	8005c30 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8005c10:	4b78      	ldr	r3, [pc, #480]	; (8005df4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005c12:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005c16:	f003 0302 	and.w	r3, r3, #2
 8005c1a:	2b02      	cmp	r3, #2
 8005c1c:	d10a      	bne.n	8005c34 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            frequency = HSI48_VALUE;
 8005c1e:	4b76      	ldr	r3, [pc, #472]	; (8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8005c20:	61fb      	str	r3, [r7, #28]
          break;
 8005c22:	e007      	b.n	8005c34 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          break;
 8005c24:	bf00      	nop
 8005c26:	e3e2      	b.n	80063ee <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8005c28:	bf00      	nop
 8005c2a:	e3e0      	b.n	80063ee <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8005c2c:	bf00      	nop
 8005c2e:	e3de      	b.n	80063ee <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8005c30:	bf00      	nop
 8005c32:	e3dc      	b.n	80063ee <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8005c34:	bf00      	nop
      break;
 8005c36:	e3da      	b.n	80063ee <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8005c38:	4b6e      	ldr	r3, [pc, #440]	; (8005df4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c3e:	f003 0303 	and.w	r3, r3, #3
 8005c42:	60fb      	str	r3, [r7, #12]
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2b03      	cmp	r3, #3
 8005c48:	d827      	bhi.n	8005c9a <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8005c4a:	a201      	add	r2, pc, #4	; (adr r2, 8005c50 <HAL_RCCEx_GetPeriphCLKFreq+0x690>)
 8005c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c50:	08005c61 	.word	0x08005c61
 8005c54:	08005c69 	.word	0x08005c69
 8005c58:	08005c71 	.word	0x08005c71
 8005c5c:	08005c85 	.word	0x08005c85
          frequency = HAL_RCC_GetPCLK2Freq();
 8005c60:	f7ff f8a8 	bl	8004db4 <HAL_RCC_GetPCLK2Freq>
 8005c64:	61f8      	str	r0, [r7, #28]
          break;
 8005c66:	e01d      	b.n	8005ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          frequency = HAL_RCC_GetSysClockFreq();
 8005c68:	f7fe fff6 	bl	8004c58 <HAL_RCC_GetSysClockFreq>
 8005c6c:	61f8      	str	r0, [r7, #28]
          break;
 8005c6e:	e019      	b.n	8005ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005c70:	4b60      	ldr	r3, [pc, #384]	; (8005df4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c7c:	d10f      	bne.n	8005c9e <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = HSI_VALUE;
 8005c7e:	4b5f      	ldr	r3, [pc, #380]	; (8005dfc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005c80:	61fb      	str	r3, [r7, #28]
          break;
 8005c82:	e00c      	b.n	8005c9e <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005c84:	4b5b      	ldr	r3, [pc, #364]	; (8005df4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c8a:	f003 0302 	and.w	r3, r3, #2
 8005c8e:	2b02      	cmp	r3, #2
 8005c90:	d107      	bne.n	8005ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
            frequency = LSE_VALUE;
 8005c92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c96:	61fb      	str	r3, [r7, #28]
          break;
 8005c98:	e003      	b.n	8005ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
          break;
 8005c9a:	bf00      	nop
 8005c9c:	e3a8      	b.n	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005c9e:	bf00      	nop
 8005ca0:	e3a6      	b.n	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005ca2:	bf00      	nop
        break;
 8005ca4:	e3a4      	b.n	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8005ca6:	4b53      	ldr	r3, [pc, #332]	; (8005df4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cac:	f003 030c 	and.w	r3, r3, #12
 8005cb0:	60fb      	str	r3, [r7, #12]
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2b0c      	cmp	r3, #12
 8005cb6:	d83a      	bhi.n	8005d2e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8005cb8:	a201      	add	r2, pc, #4	; (adr r2, 8005cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x700>)
 8005cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cbe:	bf00      	nop
 8005cc0:	08005cf5 	.word	0x08005cf5
 8005cc4:	08005d2f 	.word	0x08005d2f
 8005cc8:	08005d2f 	.word	0x08005d2f
 8005ccc:	08005d2f 	.word	0x08005d2f
 8005cd0:	08005cfd 	.word	0x08005cfd
 8005cd4:	08005d2f 	.word	0x08005d2f
 8005cd8:	08005d2f 	.word	0x08005d2f
 8005cdc:	08005d2f 	.word	0x08005d2f
 8005ce0:	08005d05 	.word	0x08005d05
 8005ce4:	08005d2f 	.word	0x08005d2f
 8005ce8:	08005d2f 	.word	0x08005d2f
 8005cec:	08005d2f 	.word	0x08005d2f
 8005cf0:	08005d19 	.word	0x08005d19
          frequency = HAL_RCC_GetPCLK1Freq();
 8005cf4:	f7ff f848 	bl	8004d88 <HAL_RCC_GetPCLK1Freq>
 8005cf8:	61f8      	str	r0, [r7, #28]
          break;
 8005cfa:	e01d      	b.n	8005d38 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = HAL_RCC_GetSysClockFreq();
 8005cfc:	f7fe ffac 	bl	8004c58 <HAL_RCC_GetSysClockFreq>
 8005d00:	61f8      	str	r0, [r7, #28]
          break;
 8005d02:	e019      	b.n	8005d38 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005d04:	4b3b      	ldr	r3, [pc, #236]	; (8005df4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d10:	d10f      	bne.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = HSI_VALUE;
 8005d12:	4b3a      	ldr	r3, [pc, #232]	; (8005dfc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005d14:	61fb      	str	r3, [r7, #28]
          break;
 8005d16:	e00c      	b.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005d18:	4b36      	ldr	r3, [pc, #216]	; (8005df4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d1e:	f003 0302 	and.w	r3, r3, #2
 8005d22:	2b02      	cmp	r3, #2
 8005d24:	d107      	bne.n	8005d36 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
            frequency = LSE_VALUE;
 8005d26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d2a:	61fb      	str	r3, [r7, #28]
          break;
 8005d2c:	e003      	b.n	8005d36 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
          break;
 8005d2e:	bf00      	nop
 8005d30:	e35e      	b.n	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005d32:	bf00      	nop
 8005d34:	e35c      	b.n	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005d36:	bf00      	nop
        break;
 8005d38:	e35a      	b.n	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8005d3a:	4b2e      	ldr	r3, [pc, #184]	; (8005df4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d40:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005d44:	60fb      	str	r3, [r7, #12]
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2b30      	cmp	r3, #48	; 0x30
 8005d4a:	d021      	beq.n	8005d90 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	2b30      	cmp	r3, #48	; 0x30
 8005d50:	d829      	bhi.n	8005da6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2b20      	cmp	r3, #32
 8005d56:	d011      	beq.n	8005d7c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2b20      	cmp	r3, #32
 8005d5c:	d823      	bhi.n	8005da6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d003      	beq.n	8005d6c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2b10      	cmp	r3, #16
 8005d68:	d004      	beq.n	8005d74 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
          break;
 8005d6a:	e01c      	b.n	8005da6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005d6c:	f7ff f80c 	bl	8004d88 <HAL_RCC_GetPCLK1Freq>
 8005d70:	61f8      	str	r0, [r7, #28]
          break;
 8005d72:	e01d      	b.n	8005db0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          frequency = HAL_RCC_GetSysClockFreq();
 8005d74:	f7fe ff70 	bl	8004c58 <HAL_RCC_GetSysClockFreq>
 8005d78:	61f8      	str	r0, [r7, #28]
          break;
 8005d7a:	e019      	b.n	8005db0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005d7c:	4b1d      	ldr	r3, [pc, #116]	; (8005df4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d88:	d10f      	bne.n	8005daa <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = HSI_VALUE;
 8005d8a:	4b1c      	ldr	r3, [pc, #112]	; (8005dfc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005d8c:	61fb      	str	r3, [r7, #28]
          break;
 8005d8e:	e00c      	b.n	8005daa <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005d90:	4b18      	ldr	r3, [pc, #96]	; (8005df4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d96:	f003 0302 	and.w	r3, r3, #2
 8005d9a:	2b02      	cmp	r3, #2
 8005d9c:	d107      	bne.n	8005dae <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
            frequency = LSE_VALUE;
 8005d9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005da2:	61fb      	str	r3, [r7, #28]
          break;
 8005da4:	e003      	b.n	8005dae <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
          break;
 8005da6:	bf00      	nop
 8005da8:	e322      	b.n	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005daa:	bf00      	nop
 8005dac:	e320      	b.n	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005dae:	bf00      	nop
        break;
 8005db0:	e31e      	b.n	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8005db2:	4b10      	ldr	r3, [pc, #64]	; (8005df4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005db8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005dbc:	60fb      	str	r3, [r7, #12]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2bc0      	cmp	r3, #192	; 0xc0
 8005dc2:	d027      	beq.n	8005e14 <HAL_RCCEx_GetPeriphCLKFreq+0x854>
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2bc0      	cmp	r3, #192	; 0xc0
 8005dc8:	d82f      	bhi.n	8005e2a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2b80      	cmp	r3, #128	; 0x80
 8005dce:	d017      	beq.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2b80      	cmp	r3, #128	; 0x80
 8005dd4:	d829      	bhi.n	8005e2a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d003      	beq.n	8005de4 <HAL_RCCEx_GetPeriphCLKFreq+0x824>
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2b40      	cmp	r3, #64	; 0x40
 8005de0:	d004      	beq.n	8005dec <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
          break;
 8005de2:	e022      	b.n	8005e2a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005de4:	f7fe ffd0 	bl	8004d88 <HAL_RCC_GetPCLK1Freq>
 8005de8:	61f8      	str	r0, [r7, #28]
          break;
 8005dea:	e023      	b.n	8005e34 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
          frequency = HAL_RCC_GetSysClockFreq();
 8005dec:	f7fe ff34 	bl	8004c58 <HAL_RCC_GetSysClockFreq>
 8005df0:	61f8      	str	r0, [r7, #28]
          break;
 8005df2:	e01f      	b.n	8005e34 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
 8005df4:	40021000 	.word	0x40021000
 8005df8:	02dc6c00 	.word	0x02dc6c00
 8005dfc:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005e00:	4b9b      	ldr	r3, [pc, #620]	; (8006070 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e0c:	d10f      	bne.n	8005e2e <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = HSI_VALUE;
 8005e0e:	4b99      	ldr	r3, [pc, #612]	; (8006074 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8005e10:	61fb      	str	r3, [r7, #28]
          break;
 8005e12:	e00c      	b.n	8005e2e <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005e14:	4b96      	ldr	r3, [pc, #600]	; (8006070 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e1a:	f003 0302 	and.w	r3, r3, #2
 8005e1e:	2b02      	cmp	r3, #2
 8005e20:	d107      	bne.n	8005e32 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
            frequency = LSE_VALUE;
 8005e22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e26:	61fb      	str	r3, [r7, #28]
          break;
 8005e28:	e003      	b.n	8005e32 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
          break;
 8005e2a:	bf00      	nop
 8005e2c:	e2e0      	b.n	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005e2e:	bf00      	nop
 8005e30:	e2de      	b.n	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005e32:	bf00      	nop
        break;
 8005e34:	e2dc      	b.n	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8005e36:	4b8e      	ldr	r3, [pc, #568]	; (8006070 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e40:	60fb      	str	r3, [r7, #12]
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e48:	d025      	beq.n	8005e96 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e50:	d82c      	bhi.n	8005eac <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e58:	d013      	beq.n	8005e82 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e60:	d824      	bhi.n	8005eac <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d004      	beq.n	8005e72 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e6e:	d004      	beq.n	8005e7a <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 8005e70:	e01c      	b.n	8005eac <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005e72:	f7fe ff89 	bl	8004d88 <HAL_RCC_GetPCLK1Freq>
 8005e76:	61f8      	str	r0, [r7, #28]
          break;
 8005e78:	e01d      	b.n	8005eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = HAL_RCC_GetSysClockFreq();
 8005e7a:	f7fe feed 	bl	8004c58 <HAL_RCC_GetSysClockFreq>
 8005e7e:	61f8      	str	r0, [r7, #28]
          break;
 8005e80:	e019      	b.n	8005eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005e82:	4b7b      	ldr	r3, [pc, #492]	; (8006070 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e8e:	d10f      	bne.n	8005eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = HSI_VALUE;
 8005e90:	4b78      	ldr	r3, [pc, #480]	; (8006074 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8005e92:	61fb      	str	r3, [r7, #28]
          break;
 8005e94:	e00c      	b.n	8005eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005e96:	4b76      	ldr	r3, [pc, #472]	; (8006070 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e9c:	f003 0302 	and.w	r3, r3, #2
 8005ea0:	2b02      	cmp	r3, #2
 8005ea2:	d107      	bne.n	8005eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
            frequency = LSE_VALUE;
 8005ea4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ea8:	61fb      	str	r3, [r7, #28]
          break;
 8005eaa:	e003      	b.n	8005eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
          break;
 8005eac:	bf00      	nop
 8005eae:	e29f      	b.n	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005eb0:	bf00      	nop
 8005eb2:	e29d      	b.n	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005eb4:	bf00      	nop
        break;
 8005eb6:	e29b      	b.n	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8005eb8:	4b6d      	ldr	r3, [pc, #436]	; (8006070 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ebe:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005ec2:	60fb      	str	r3, [r7, #12]
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005eca:	d025      	beq.n	8005f18 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ed2:	d82c      	bhi.n	8005f2e <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005eda:	d013      	beq.n	8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ee2:	d824      	bhi.n	8005f2e <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d004      	beq.n	8005ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ef0:	d004      	beq.n	8005efc <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
          break;
 8005ef2:	e01c      	b.n	8005f2e <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005ef4:	f7fe ff48 	bl	8004d88 <HAL_RCC_GetPCLK1Freq>
 8005ef8:	61f8      	str	r0, [r7, #28]
          break;
 8005efa:	e01d      	b.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = HAL_RCC_GetSysClockFreq();
 8005efc:	f7fe feac 	bl	8004c58 <HAL_RCC_GetSysClockFreq>
 8005f00:	61f8      	str	r0, [r7, #28]
          break;
 8005f02:	e019      	b.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005f04:	4b5a      	ldr	r3, [pc, #360]	; (8006070 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f10:	d10f      	bne.n	8005f32 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = HSI_VALUE;
 8005f12:	4b58      	ldr	r3, [pc, #352]	; (8006074 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8005f14:	61fb      	str	r3, [r7, #28]
          break;
 8005f16:	e00c      	b.n	8005f32 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005f18:	4b55      	ldr	r3, [pc, #340]	; (8006070 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f1e:	f003 0302 	and.w	r3, r3, #2
 8005f22:	2b02      	cmp	r3, #2
 8005f24:	d107      	bne.n	8005f36 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
            frequency = LSE_VALUE;
 8005f26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f2a:	61fb      	str	r3, [r7, #28]
          break;
 8005f2c:	e003      	b.n	8005f36 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
          break;
 8005f2e:	bf00      	nop
 8005f30:	e25e      	b.n	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005f32:	bf00      	nop
 8005f34:	e25c      	b.n	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005f36:	bf00      	nop
        break;
 8005f38:	e25a      	b.n	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005f3a:	4b4d      	ldr	r3, [pc, #308]	; (8006070 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f40:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005f44:	60fb      	str	r3, [r7, #12]
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f4c:	d007      	beq.n	8005f5e <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005f54:	d12f      	bne.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          frequency = HAL_RCC_GetSysClockFreq();
 8005f56:	f7fe fe7f 	bl	8004c58 <HAL_RCC_GetSysClockFreq>
 8005f5a:	61f8      	str	r0, [r7, #28]
          break;
 8005f5c:	e02e      	b.n	8005fbc <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8005f5e:	4b44      	ldr	r3, [pc, #272]	; (8006070 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f6a:	d126      	bne.n	8005fba <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 8005f6c:	4b40      	ldr	r3, [pc, #256]	; (8006070 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005f6e:	691b      	ldr	r3, [r3, #16]
 8005f70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d020      	beq.n	8005fba <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005f78:	4b3d      	ldr	r3, [pc, #244]	; (8006070 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005f7a:	691b      	ldr	r3, [r3, #16]
 8005f7c:	0a1b      	lsrs	r3, r3, #8
 8005f7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f82:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8005f84:	69bb      	ldr	r3, [r7, #24]
 8005f86:	68ba      	ldr	r2, [r7, #8]
 8005f88:	fb03 f202 	mul.w	r2, r3, r2
 8005f8c:	4b38      	ldr	r3, [pc, #224]	; (8006070 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005f8e:	691b      	ldr	r3, [r3, #16]
 8005f90:	091b      	lsrs	r3, r3, #4
 8005f92:	f003 030f 	and.w	r3, r3, #15
 8005f96:	3301      	adds	r3, #1
 8005f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f9c:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8005f9e:	4b34      	ldr	r3, [pc, #208]	; (8006070 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005fa0:	691b      	ldr	r3, [r3, #16]
 8005fa2:	0e5b      	lsrs	r3, r3, #25
 8005fa4:	f003 0303 	and.w	r3, r3, #3
 8005fa8:	3301      	adds	r3, #1
 8005faa:	005b      	lsls	r3, r3, #1
 8005fac:	69ba      	ldr	r2, [r7, #24]
 8005fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fb2:	61fb      	str	r3, [r7, #28]
          break;
 8005fb4:	e001      	b.n	8005fba <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
          break;
 8005fb6:	bf00      	nop
 8005fb8:	e21a      	b.n	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005fba:	bf00      	nop
        break;
 8005fbc:	e218      	b.n	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8005fbe:	4b2c      	ldr	r3, [pc, #176]	; (8006070 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005fc0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005fc4:	f003 0304 	and.w	r3, r3, #4
 8005fc8:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d103      	bne.n	8005fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetPCLK2Freq();
 8005fd0:	f7fe fef0 	bl	8004db4 <HAL_RCC_GetPCLK2Freq>
 8005fd4:	61f8      	str	r0, [r7, #28]
        break;
 8005fd6:	e20b      	b.n	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          frequency = HAL_RCC_GetSysClockFreq();
 8005fd8:	f7fe fe3e 	bl	8004c58 <HAL_RCC_GetSysClockFreq>
 8005fdc:	61f8      	str	r0, [r7, #28]
        break;
 8005fde:	e207      	b.n	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 8005fe0:	4b23      	ldr	r3, [pc, #140]	; (8006070 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005fe2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005fe6:	f003 0318 	and.w	r3, r3, #24
 8005fea:	60fb      	str	r3, [r7, #12]
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2b10      	cmp	r3, #16
 8005ff0:	d010      	beq.n	8006014 <HAL_RCCEx_GetPeriphCLKFreq+0xa54>
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2b10      	cmp	r3, #16
 8005ff6:	d834      	bhi.n	8006062 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d003      	beq.n	8006006 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2b08      	cmp	r3, #8
 8006002:	d024      	beq.n	800604e <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
          break;
 8006004:	e02d      	b.n	8006062 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8006006:	69b9      	ldr	r1, [r7, #24]
 8006008:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800600c:	f000 fbf2 	bl	80067f4 <RCCEx_GetSAIxPeriphCLKFreq>
 8006010:	61f8      	str	r0, [r7, #28]
          break;
 8006012:	e02b      	b.n	800606c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006014:	4b16      	ldr	r3, [pc, #88]	; (8006070 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f003 0302 	and.w	r3, r3, #2
 800601c:	2b02      	cmp	r3, #2
 800601e:	d122      	bne.n	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006020:	4b13      	ldr	r3, [pc, #76]	; (8006070 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f003 0308 	and.w	r3, r3, #8
 8006028:	2b00      	cmp	r3, #0
 800602a:	d005      	beq.n	8006038 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 800602c:	4b10      	ldr	r3, [pc, #64]	; (8006070 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	091b      	lsrs	r3, r3, #4
 8006032:	f003 030f 	and.w	r3, r3, #15
 8006036:	e005      	b.n	8006044 <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
 8006038:	4b0d      	ldr	r3, [pc, #52]	; (8006070 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800603a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800603e:	0a1b      	lsrs	r3, r3, #8
 8006040:	f003 030f 	and.w	r3, r3, #15
 8006044:	4a0c      	ldr	r2, [pc, #48]	; (8006078 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006046:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800604a:	61fb      	str	r3, [r7, #28]
          break;
 800604c:	e00b      	b.n	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800604e:	4b08      	ldr	r3, [pc, #32]	; (8006070 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006056:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800605a:	d106      	bne.n	800606a <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
            frequency = HSI_VALUE;
 800605c:	4b05      	ldr	r3, [pc, #20]	; (8006074 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800605e:	61fb      	str	r3, [r7, #28]
          break;
 8006060:	e003      	b.n	800606a <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
          break;
 8006062:	bf00      	nop
 8006064:	e1c4      	b.n	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006066:	bf00      	nop
 8006068:	e1c2      	b.n	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800606a:	bf00      	nop
        break;
 800606c:	e1c0      	b.n	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 800606e:	bf00      	nop
 8006070:	40021000 	.word	0x40021000
 8006074:	00f42400 	.word	0x00f42400
 8006078:	08009dd4 	.word	0x08009dd4
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800607c:	4b96      	ldr	r3, [pc, #600]	; (80062d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800607e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006082:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006086:	60fb      	str	r3, [r7, #12]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800608e:	d013      	beq.n	80060b8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006096:	d819      	bhi.n	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d004      	beq.n	80060a8 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060a4:	d004      	beq.n	80060b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>
          break;
 80060a6:	e011      	b.n	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          frequency = HAL_RCC_GetPCLK1Freq();
 80060a8:	f7fe fe6e 	bl	8004d88 <HAL_RCC_GetPCLK1Freq>
 80060ac:	61f8      	str	r0, [r7, #28]
          break;
 80060ae:	e010      	b.n	80060d2 <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          frequency = HAL_RCC_GetSysClockFreq();
 80060b0:	f7fe fdd2 	bl	8004c58 <HAL_RCC_GetSysClockFreq>
 80060b4:	61f8      	str	r0, [r7, #28]
          break;
 80060b6:	e00c      	b.n	80060d2 <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80060b8:	4b87      	ldr	r3, [pc, #540]	; (80062d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060c4:	d104      	bne.n	80060d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
            frequency = HSI_VALUE;
 80060c6:	4b85      	ldr	r3, [pc, #532]	; (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 80060c8:	61fb      	str	r3, [r7, #28]
          break;
 80060ca:	e001      	b.n	80060d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
          break;
 80060cc:	bf00      	nop
 80060ce:	e18f      	b.n	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80060d0:	bf00      	nop
        break;
 80060d2:	e18d      	b.n	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80060d4:	4b80      	ldr	r3, [pc, #512]	; (80062d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80060d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060da:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80060de:	60fb      	str	r3, [r7, #12]
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060e6:	d013      	beq.n	8006110 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060ee:	d819      	bhi.n	8006124 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d004      	beq.n	8006100 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80060fc:	d004      	beq.n	8006108 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          break;
 80060fe:	e011      	b.n	8006124 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006100:	f7fe fe42 	bl	8004d88 <HAL_RCC_GetPCLK1Freq>
 8006104:	61f8      	str	r0, [r7, #28]
          break;
 8006106:	e010      	b.n	800612a <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = HAL_RCC_GetSysClockFreq();
 8006108:	f7fe fda6 	bl	8004c58 <HAL_RCC_GetSysClockFreq>
 800610c:	61f8      	str	r0, [r7, #28]
          break;
 800610e:	e00c      	b.n	800612a <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006110:	4b71      	ldr	r3, [pc, #452]	; (80062d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006118:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800611c:	d104      	bne.n	8006128 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
            frequency = HSI_VALUE;
 800611e:	4b6f      	ldr	r3, [pc, #444]	; (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8006120:	61fb      	str	r3, [r7, #28]
          break;
 8006122:	e001      	b.n	8006128 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          break;
 8006124:	bf00      	nop
 8006126:	e163      	b.n	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006128:	bf00      	nop
        break;
 800612a:	e161      	b.n	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800612c:	4b6a      	ldr	r3, [pc, #424]	; (80062d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800612e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006132:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006136:	60fb      	str	r3, [r7, #12]
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800613e:	d013      	beq.n	8006168 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006146:	d819      	bhi.n	800617c <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d004      	beq.n	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0xb98>
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006154:	d004      	beq.n	8006160 <HAL_RCCEx_GetPeriphCLKFreq+0xba0>
          break;
 8006156:	e011      	b.n	800617c <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006158:	f7fe fe16 	bl	8004d88 <HAL_RCC_GetPCLK1Freq>
 800615c:	61f8      	str	r0, [r7, #28]
          break;
 800615e:	e010      	b.n	8006182 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          frequency = HAL_RCC_GetSysClockFreq();
 8006160:	f7fe fd7a 	bl	8004c58 <HAL_RCC_GetSysClockFreq>
 8006164:	61f8      	str	r0, [r7, #28]
          break;
 8006166:	e00c      	b.n	8006182 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006168:	4b5b      	ldr	r3, [pc, #364]	; (80062d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006170:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006174:	d104      	bne.n	8006180 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
            frequency = HSI_VALUE;
 8006176:	4b59      	ldr	r3, [pc, #356]	; (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8006178:	61fb      	str	r3, [r7, #28]
          break;
 800617a:	e001      	b.n	8006180 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
          break;
 800617c:	bf00      	nop
 800617e:	e137      	b.n	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006180:	bf00      	nop
        break;
 8006182:	e135      	b.n	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8006184:	4b54      	ldr	r3, [pc, #336]	; (80062d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006186:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800618a:	f003 0303 	and.w	r3, r3, #3
 800618e:	60fb      	str	r3, [r7, #12]
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2b02      	cmp	r3, #2
 8006194:	d011      	beq.n	80061ba <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2b02      	cmp	r3, #2
 800619a:	d818      	bhi.n	80061ce <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d003      	beq.n	80061aa <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2b01      	cmp	r3, #1
 80061a6:	d004      	beq.n	80061b2 <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
          break;
 80061a8:	e011      	b.n	80061ce <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          frequency = HAL_RCC_GetPCLK1Freq();
 80061aa:	f7fe fded 	bl	8004d88 <HAL_RCC_GetPCLK1Freq>
 80061ae:	61f8      	str	r0, [r7, #28]
          break;
 80061b0:	e010      	b.n	80061d4 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          frequency = HAL_RCC_GetSysClockFreq();
 80061b2:	f7fe fd51 	bl	8004c58 <HAL_RCC_GetSysClockFreq>
 80061b6:	61f8      	str	r0, [r7, #28]
          break;
 80061b8:	e00c      	b.n	80061d4 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80061ba:	4b47      	ldr	r3, [pc, #284]	; (80062d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061c6:	d104      	bne.n	80061d2 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
            frequency = HSI_VALUE;
 80061c8:	4b44      	ldr	r3, [pc, #272]	; (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 80061ca:	61fb      	str	r3, [r7, #28]
          break;
 80061cc:	e001      	b.n	80061d2 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
          break;
 80061ce:	bf00      	nop
 80061d0:	e10e      	b.n	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80061d2:	bf00      	nop
        break;
 80061d4:	e10c      	b.n	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80061d6:	4b40      	ldr	r3, [pc, #256]	; (80062d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80061d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061dc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80061e0:	60fb      	str	r3, [r7, #12]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80061e8:	d02c      	beq.n	8006244 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80061f0:	d833      	bhi.n	800625a <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80061f8:	d01a      	beq.n	8006230 <HAL_RCCEx_GetPeriphCLKFreq+0xc70>
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006200:	d82b      	bhi.n	800625a <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d004      	beq.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800620e:	d004      	beq.n	800621a <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
          break;
 8006210:	e023      	b.n	800625a <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006212:	f7fe fdb9 	bl	8004d88 <HAL_RCC_GetPCLK1Freq>
 8006216:	61f8      	str	r0, [r7, #28]
          break;
 8006218:	e026      	b.n	8006268 <HAL_RCCEx_GetPeriphCLKFreq+0xca8>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800621a:	4b2f      	ldr	r3, [pc, #188]	; (80062d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800621c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006220:	f003 0302 	and.w	r3, r3, #2
 8006224:	2b02      	cmp	r3, #2
 8006226:	d11a      	bne.n	800625e <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
              frequency = LSI_VALUE;
 8006228:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800622c:	61fb      	str	r3, [r7, #28]
          break;
 800622e:	e016      	b.n	800625e <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006230:	4b29      	ldr	r3, [pc, #164]	; (80062d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006238:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800623c:	d111      	bne.n	8006262 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = HSI_VALUE;
 800623e:	4b27      	ldr	r3, [pc, #156]	; (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8006240:	61fb      	str	r3, [r7, #28]
          break;
 8006242:	e00e      	b.n	8006262 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006244:	4b24      	ldr	r3, [pc, #144]	; (80062d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006246:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800624a:	f003 0302 	and.w	r3, r3, #2
 800624e:	2b02      	cmp	r3, #2
 8006250:	d109      	bne.n	8006266 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
            frequency = LSE_VALUE;
 8006252:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006256:	61fb      	str	r3, [r7, #28]
          break;
 8006258:	e005      	b.n	8006266 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
          break;
 800625a:	bf00      	nop
 800625c:	e0c8      	b.n	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800625e:	bf00      	nop
 8006260:	e0c6      	b.n	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006262:	bf00      	nop
 8006264:	e0c4      	b.n	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006266:	bf00      	nop
        break;
 8006268:	e0c2      	b.n	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800626a:	4b1b      	ldr	r3, [pc, #108]	; (80062d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800626c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006270:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006274:	60fb      	str	r3, [r7, #12]
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800627c:	d030      	beq.n	80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd20>
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006284:	d837      	bhi.n	80062f6 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800628c:	d01a      	beq.n	80062c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd04>
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006294:	d82f      	bhi.n	80062f6 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d004      	beq.n	80062a6 <HAL_RCCEx_GetPeriphCLKFreq+0xce6>
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062a2:	d004      	beq.n	80062ae <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
          break;
 80062a4:	e027      	b.n	80062f6 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          frequency = HAL_RCC_GetPCLK1Freq();
 80062a6:	f7fe fd6f 	bl	8004d88 <HAL_RCC_GetPCLK1Freq>
 80062aa:	61f8      	str	r0, [r7, #28]
          break;
 80062ac:	e02a      	b.n	8006304 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80062ae:	4b0a      	ldr	r3, [pc, #40]	; (80062d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80062b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80062b4:	f003 0302 	and.w	r3, r3, #2
 80062b8:	2b02      	cmp	r3, #2
 80062ba:	d11e      	bne.n	80062fa <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
              frequency = LSI_VALUE;
 80062bc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80062c0:	61fb      	str	r3, [r7, #28]
          break;
 80062c2:	e01a      	b.n	80062fa <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80062c4:	4b04      	ldr	r3, [pc, #16]	; (80062d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062d0:	d115      	bne.n	80062fe <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = HSI_VALUE;
 80062d2:	4b02      	ldr	r3, [pc, #8]	; (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 80062d4:	61fb      	str	r3, [r7, #28]
          break;
 80062d6:	e012      	b.n	80062fe <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 80062d8:	40021000 	.word	0x40021000
 80062dc:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80062e0:	4b46      	ldr	r3, [pc, #280]	; (80063fc <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80062e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062e6:	f003 0302 	and.w	r3, r3, #2
 80062ea:	2b02      	cmp	r3, #2
 80062ec:	d109      	bne.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
            frequency = LSE_VALUE;
 80062ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062f2:	61fb      	str	r3, [r7, #28]
          break;
 80062f4:	e005      	b.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
          break;
 80062f6:	bf00      	nop
 80062f8:	e07a      	b.n	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80062fa:	bf00      	nop
 80062fc:	e078      	b.n	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80062fe:	bf00      	nop
 8006300:	e076      	b.n	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006302:	bf00      	nop
        break;
 8006304:	e074      	b.n	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8006306:	4b3d      	ldr	r3, [pc, #244]	; (80063fc <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006308:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800630c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006310:	60fb      	str	r3, [r7, #12]
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006318:	d02c      	beq.n	8006374 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006320:	d855      	bhi.n	80063ce <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d004      	beq.n	8006332 <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800632e:	d004      	beq.n	800633a <HAL_RCCEx_GetPeriphCLKFreq+0xd7a>
          break;
 8006330:	e04d      	b.n	80063ce <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          frequency = HAL_RCC_GetSysClockFreq();
 8006332:	f7fe fc91 	bl	8004c58 <HAL_RCC_GetSysClockFreq>
 8006336:	61f8      	str	r0, [r7, #28]
          break;
 8006338:	e04e      	b.n	80063d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe18>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800633a:	4b30      	ldr	r3, [pc, #192]	; (80063fc <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f003 0302 	and.w	r3, r3, #2
 8006342:	2b02      	cmp	r3, #2
 8006344:	d145      	bne.n	80063d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006346:	4b2d      	ldr	r3, [pc, #180]	; (80063fc <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f003 0308 	and.w	r3, r3, #8
 800634e:	2b00      	cmp	r3, #0
 8006350:	d005      	beq.n	800635e <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 8006352:	4b2a      	ldr	r3, [pc, #168]	; (80063fc <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	091b      	lsrs	r3, r3, #4
 8006358:	f003 030f 	and.w	r3, r3, #15
 800635c:	e005      	b.n	800636a <HAL_RCCEx_GetPeriphCLKFreq+0xdaa>
 800635e:	4b27      	ldr	r3, [pc, #156]	; (80063fc <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006360:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006364:	0a1b      	lsrs	r3, r3, #8
 8006366:	f003 030f 	and.w	r3, r3, #15
 800636a:	4a25      	ldr	r2, [pc, #148]	; (8006400 <HAL_RCCEx_GetPeriphCLKFreq+0xe40>)
 800636c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006370:	61fb      	str	r3, [r7, #28]
          break;
 8006372:	e02e      	b.n	80063d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8006374:	4b21      	ldr	r3, [pc, #132]	; (80063fc <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800637c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006380:	d129      	bne.n	80063d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8006382:	4b1e      	ldr	r3, [pc, #120]	; (80063fc <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006384:	68db      	ldr	r3, [r3, #12]
 8006386:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800638a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800638e:	d122      	bne.n	80063d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006390:	4b1a      	ldr	r3, [pc, #104]	; (80063fc <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006392:	68db      	ldr	r3, [r3, #12]
 8006394:	0a1b      	lsrs	r3, r3, #8
 8006396:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800639a:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800639c:	69bb      	ldr	r3, [r7, #24]
 800639e:	68ba      	ldr	r2, [r7, #8]
 80063a0:	fb03 f202 	mul.w	r2, r3, r2
 80063a4:	4b15      	ldr	r3, [pc, #84]	; (80063fc <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80063a6:	68db      	ldr	r3, [r3, #12]
 80063a8:	091b      	lsrs	r3, r3, #4
 80063aa:	f003 030f 	and.w	r3, r3, #15
 80063ae:	3301      	adds	r3, #1
 80063b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80063b4:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80063b6:	4b11      	ldr	r3, [pc, #68]	; (80063fc <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80063b8:	68db      	ldr	r3, [r3, #12]
 80063ba:	0d5b      	lsrs	r3, r3, #21
 80063bc:	f003 0303 	and.w	r3, r3, #3
 80063c0:	3301      	adds	r3, #1
 80063c2:	005b      	lsls	r3, r3, #1
 80063c4:	69ba      	ldr	r2, [r7, #24]
 80063c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80063ca:	61fb      	str	r3, [r7, #28]
          break;
 80063cc:	e003      	b.n	80063d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          break;
 80063ce:	bf00      	nop
 80063d0:	e00e      	b.n	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80063d2:	bf00      	nop
 80063d4:	e00c      	b.n	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80063d6:	bf00      	nop
        break;
 80063d8:	e00a      	b.n	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80063da:	bf00      	nop
 80063dc:	e008      	b.n	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80063de:	bf00      	nop
 80063e0:	e006      	b.n	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80063e2:	bf00      	nop
 80063e4:	e004      	b.n	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80063e6:	bf00      	nop
 80063e8:	e002      	b.n	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80063ea:	bf00      	nop
 80063ec:	e000      	b.n	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80063ee:	bf00      	nop
    }
  }

  return(frequency);
 80063f0:	69fb      	ldr	r3, [r7, #28]
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3720      	adds	r7, #32
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
 80063fa:	bf00      	nop
 80063fc:	40021000 	.word	0x40021000
 8006400:	08009dd4 	.word	0x08009dd4

08006404 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8006404:	b480      	push	{r7}
 8006406:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8006408:	4b05      	ldr	r3, [pc, #20]	; (8006420 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a04      	ldr	r2, [pc, #16]	; (8006420 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800640e:	f043 0304 	orr.w	r3, r3, #4
 8006412:	6013      	str	r3, [r2, #0]
}
 8006414:	bf00      	nop
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr
 800641e:	bf00      	nop
 8006420:	40021000 	.word	0x40021000

08006424 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b084      	sub	sp, #16
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800642e:	2300      	movs	r3, #0
 8006430:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006432:	4b72      	ldr	r3, [pc, #456]	; (80065fc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006434:	68db      	ldr	r3, [r3, #12]
 8006436:	f003 0303 	and.w	r3, r3, #3
 800643a:	2b00      	cmp	r3, #0
 800643c:	d00e      	beq.n	800645c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800643e:	4b6f      	ldr	r3, [pc, #444]	; (80065fc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006440:	68db      	ldr	r3, [r3, #12]
 8006442:	f003 0203 	and.w	r2, r3, #3
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	429a      	cmp	r2, r3
 800644c:	d103      	bne.n	8006456 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
       ||
 8006452:	2b00      	cmp	r3, #0
 8006454:	d142      	bne.n	80064dc <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8006456:	2301      	movs	r3, #1
 8006458:	73fb      	strb	r3, [r7, #15]
 800645a:	e03f      	b.n	80064dc <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	2b03      	cmp	r3, #3
 8006462:	d018      	beq.n	8006496 <RCCEx_PLLSAI1_Config+0x72>
 8006464:	2b03      	cmp	r3, #3
 8006466:	d825      	bhi.n	80064b4 <RCCEx_PLLSAI1_Config+0x90>
 8006468:	2b01      	cmp	r3, #1
 800646a:	d002      	beq.n	8006472 <RCCEx_PLLSAI1_Config+0x4e>
 800646c:	2b02      	cmp	r3, #2
 800646e:	d009      	beq.n	8006484 <RCCEx_PLLSAI1_Config+0x60>
 8006470:	e020      	b.n	80064b4 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006472:	4b62      	ldr	r3, [pc, #392]	; (80065fc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f003 0302 	and.w	r3, r3, #2
 800647a:	2b00      	cmp	r3, #0
 800647c:	d11d      	bne.n	80064ba <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800647e:	2301      	movs	r3, #1
 8006480:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006482:	e01a      	b.n	80064ba <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006484:	4b5d      	ldr	r3, [pc, #372]	; (80065fc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800648c:	2b00      	cmp	r3, #0
 800648e:	d116      	bne.n	80064be <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8006490:	2301      	movs	r3, #1
 8006492:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006494:	e013      	b.n	80064be <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006496:	4b59      	ldr	r3, [pc, #356]	; (80065fc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d10f      	bne.n	80064c2 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80064a2:	4b56      	ldr	r3, [pc, #344]	; (80065fc <RCCEx_PLLSAI1_Config+0x1d8>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d109      	bne.n	80064c2 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80064ae:	2301      	movs	r3, #1
 80064b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80064b2:	e006      	b.n	80064c2 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80064b4:	2301      	movs	r3, #1
 80064b6:	73fb      	strb	r3, [r7, #15]
      break;
 80064b8:	e004      	b.n	80064c4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80064ba:	bf00      	nop
 80064bc:	e002      	b.n	80064c4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80064be:	bf00      	nop
 80064c0:	e000      	b.n	80064c4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80064c2:	bf00      	nop
    }

    if(status == HAL_OK)
 80064c4:	7bfb      	ldrb	r3, [r7, #15]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d108      	bne.n	80064dc <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80064ca:	4b4c      	ldr	r3, [pc, #304]	; (80065fc <RCCEx_PLLSAI1_Config+0x1d8>)
 80064cc:	68db      	ldr	r3, [r3, #12]
 80064ce:	f023 0203 	bic.w	r2, r3, #3
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4949      	ldr	r1, [pc, #292]	; (80065fc <RCCEx_PLLSAI1_Config+0x1d8>)
 80064d8:	4313      	orrs	r3, r2
 80064da:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80064dc:	7bfb      	ldrb	r3, [r7, #15]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	f040 8086 	bne.w	80065f0 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80064e4:	4b45      	ldr	r3, [pc, #276]	; (80065fc <RCCEx_PLLSAI1_Config+0x1d8>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a44      	ldr	r2, [pc, #272]	; (80065fc <RCCEx_PLLSAI1_Config+0x1d8>)
 80064ea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80064ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064f0:	f7fc f902 	bl	80026f8 <HAL_GetTick>
 80064f4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80064f6:	e009      	b.n	800650c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80064f8:	f7fc f8fe 	bl	80026f8 <HAL_GetTick>
 80064fc:	4602      	mov	r2, r0
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	1ad3      	subs	r3, r2, r3
 8006502:	2b02      	cmp	r3, #2
 8006504:	d902      	bls.n	800650c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006506:	2303      	movs	r3, #3
 8006508:	73fb      	strb	r3, [r7, #15]
        break;
 800650a:	e005      	b.n	8006518 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800650c:	4b3b      	ldr	r3, [pc, #236]	; (80065fc <RCCEx_PLLSAI1_Config+0x1d8>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006514:	2b00      	cmp	r3, #0
 8006516:	d1ef      	bne.n	80064f8 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006518:	7bfb      	ldrb	r3, [r7, #15]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d168      	bne.n	80065f0 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d113      	bne.n	800654c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006524:	4b35      	ldr	r3, [pc, #212]	; (80065fc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006526:	691a      	ldr	r2, [r3, #16]
 8006528:	4b35      	ldr	r3, [pc, #212]	; (8006600 <RCCEx_PLLSAI1_Config+0x1dc>)
 800652a:	4013      	ands	r3, r2
 800652c:	687a      	ldr	r2, [r7, #4]
 800652e:	6892      	ldr	r2, [r2, #8]
 8006530:	0211      	lsls	r1, r2, #8
 8006532:	687a      	ldr	r2, [r7, #4]
 8006534:	68d2      	ldr	r2, [r2, #12]
 8006536:	06d2      	lsls	r2, r2, #27
 8006538:	4311      	orrs	r1, r2
 800653a:	687a      	ldr	r2, [r7, #4]
 800653c:	6852      	ldr	r2, [r2, #4]
 800653e:	3a01      	subs	r2, #1
 8006540:	0112      	lsls	r2, r2, #4
 8006542:	430a      	orrs	r2, r1
 8006544:	492d      	ldr	r1, [pc, #180]	; (80065fc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006546:	4313      	orrs	r3, r2
 8006548:	610b      	str	r3, [r1, #16]
 800654a:	e02d      	b.n	80065a8 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	2b01      	cmp	r3, #1
 8006550:	d115      	bne.n	800657e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006552:	4b2a      	ldr	r3, [pc, #168]	; (80065fc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006554:	691a      	ldr	r2, [r3, #16]
 8006556:	4b2b      	ldr	r3, [pc, #172]	; (8006604 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006558:	4013      	ands	r3, r2
 800655a:	687a      	ldr	r2, [r7, #4]
 800655c:	6892      	ldr	r2, [r2, #8]
 800655e:	0211      	lsls	r1, r2, #8
 8006560:	687a      	ldr	r2, [r7, #4]
 8006562:	6912      	ldr	r2, [r2, #16]
 8006564:	0852      	lsrs	r2, r2, #1
 8006566:	3a01      	subs	r2, #1
 8006568:	0552      	lsls	r2, r2, #21
 800656a:	4311      	orrs	r1, r2
 800656c:	687a      	ldr	r2, [r7, #4]
 800656e:	6852      	ldr	r2, [r2, #4]
 8006570:	3a01      	subs	r2, #1
 8006572:	0112      	lsls	r2, r2, #4
 8006574:	430a      	orrs	r2, r1
 8006576:	4921      	ldr	r1, [pc, #132]	; (80065fc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006578:	4313      	orrs	r3, r2
 800657a:	610b      	str	r3, [r1, #16]
 800657c:	e014      	b.n	80065a8 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800657e:	4b1f      	ldr	r3, [pc, #124]	; (80065fc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006580:	691a      	ldr	r2, [r3, #16]
 8006582:	4b21      	ldr	r3, [pc, #132]	; (8006608 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006584:	4013      	ands	r3, r2
 8006586:	687a      	ldr	r2, [r7, #4]
 8006588:	6892      	ldr	r2, [r2, #8]
 800658a:	0211      	lsls	r1, r2, #8
 800658c:	687a      	ldr	r2, [r7, #4]
 800658e:	6952      	ldr	r2, [r2, #20]
 8006590:	0852      	lsrs	r2, r2, #1
 8006592:	3a01      	subs	r2, #1
 8006594:	0652      	lsls	r2, r2, #25
 8006596:	4311      	orrs	r1, r2
 8006598:	687a      	ldr	r2, [r7, #4]
 800659a:	6852      	ldr	r2, [r2, #4]
 800659c:	3a01      	subs	r2, #1
 800659e:	0112      	lsls	r2, r2, #4
 80065a0:	430a      	orrs	r2, r1
 80065a2:	4916      	ldr	r1, [pc, #88]	; (80065fc <RCCEx_PLLSAI1_Config+0x1d8>)
 80065a4:	4313      	orrs	r3, r2
 80065a6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80065a8:	4b14      	ldr	r3, [pc, #80]	; (80065fc <RCCEx_PLLSAI1_Config+0x1d8>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a13      	ldr	r2, [pc, #76]	; (80065fc <RCCEx_PLLSAI1_Config+0x1d8>)
 80065ae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80065b2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065b4:	f7fc f8a0 	bl	80026f8 <HAL_GetTick>
 80065b8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80065ba:	e009      	b.n	80065d0 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80065bc:	f7fc f89c 	bl	80026f8 <HAL_GetTick>
 80065c0:	4602      	mov	r2, r0
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	1ad3      	subs	r3, r2, r3
 80065c6:	2b02      	cmp	r3, #2
 80065c8:	d902      	bls.n	80065d0 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80065ca:	2303      	movs	r3, #3
 80065cc:	73fb      	strb	r3, [r7, #15]
          break;
 80065ce:	e005      	b.n	80065dc <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80065d0:	4b0a      	ldr	r3, [pc, #40]	; (80065fc <RCCEx_PLLSAI1_Config+0x1d8>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d0ef      	beq.n	80065bc <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80065dc:	7bfb      	ldrb	r3, [r7, #15]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d106      	bne.n	80065f0 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80065e2:	4b06      	ldr	r3, [pc, #24]	; (80065fc <RCCEx_PLLSAI1_Config+0x1d8>)
 80065e4:	691a      	ldr	r2, [r3, #16]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	699b      	ldr	r3, [r3, #24]
 80065ea:	4904      	ldr	r1, [pc, #16]	; (80065fc <RCCEx_PLLSAI1_Config+0x1d8>)
 80065ec:	4313      	orrs	r3, r2
 80065ee:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80065f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3710      	adds	r7, #16
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}
 80065fa:	bf00      	nop
 80065fc:	40021000 	.word	0x40021000
 8006600:	07ff800f 	.word	0x07ff800f
 8006604:	ff9f800f 	.word	0xff9f800f
 8006608:	f9ff800f 	.word	0xf9ff800f

0800660c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b084      	sub	sp, #16
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006616:	2300      	movs	r3, #0
 8006618:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800661a:	4b72      	ldr	r3, [pc, #456]	; (80067e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800661c:	68db      	ldr	r3, [r3, #12]
 800661e:	f003 0303 	and.w	r3, r3, #3
 8006622:	2b00      	cmp	r3, #0
 8006624:	d00e      	beq.n	8006644 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006626:	4b6f      	ldr	r3, [pc, #444]	; (80067e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006628:	68db      	ldr	r3, [r3, #12]
 800662a:	f003 0203 	and.w	r2, r3, #3
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	429a      	cmp	r2, r3
 8006634:	d103      	bne.n	800663e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
       ||
 800663a:	2b00      	cmp	r3, #0
 800663c:	d142      	bne.n	80066c4 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800663e:	2301      	movs	r3, #1
 8006640:	73fb      	strb	r3, [r7, #15]
 8006642:	e03f      	b.n	80066c4 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	2b03      	cmp	r3, #3
 800664a:	d018      	beq.n	800667e <RCCEx_PLLSAI2_Config+0x72>
 800664c:	2b03      	cmp	r3, #3
 800664e:	d825      	bhi.n	800669c <RCCEx_PLLSAI2_Config+0x90>
 8006650:	2b01      	cmp	r3, #1
 8006652:	d002      	beq.n	800665a <RCCEx_PLLSAI2_Config+0x4e>
 8006654:	2b02      	cmp	r3, #2
 8006656:	d009      	beq.n	800666c <RCCEx_PLLSAI2_Config+0x60>
 8006658:	e020      	b.n	800669c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800665a:	4b62      	ldr	r3, [pc, #392]	; (80067e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f003 0302 	and.w	r3, r3, #2
 8006662:	2b00      	cmp	r3, #0
 8006664:	d11d      	bne.n	80066a2 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8006666:	2301      	movs	r3, #1
 8006668:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800666a:	e01a      	b.n	80066a2 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800666c:	4b5d      	ldr	r3, [pc, #372]	; (80067e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006674:	2b00      	cmp	r3, #0
 8006676:	d116      	bne.n	80066a6 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8006678:	2301      	movs	r3, #1
 800667a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800667c:	e013      	b.n	80066a6 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800667e:	4b59      	ldr	r3, [pc, #356]	; (80067e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006686:	2b00      	cmp	r3, #0
 8006688:	d10f      	bne.n	80066aa <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800668a:	4b56      	ldr	r3, [pc, #344]	; (80067e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006692:	2b00      	cmp	r3, #0
 8006694:	d109      	bne.n	80066aa <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8006696:	2301      	movs	r3, #1
 8006698:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800669a:	e006      	b.n	80066aa <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800669c:	2301      	movs	r3, #1
 800669e:	73fb      	strb	r3, [r7, #15]
      break;
 80066a0:	e004      	b.n	80066ac <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80066a2:	bf00      	nop
 80066a4:	e002      	b.n	80066ac <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80066a6:	bf00      	nop
 80066a8:	e000      	b.n	80066ac <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80066aa:	bf00      	nop
    }

    if(status == HAL_OK)
 80066ac:	7bfb      	ldrb	r3, [r7, #15]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d108      	bne.n	80066c4 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80066b2:	4b4c      	ldr	r3, [pc, #304]	; (80067e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80066b4:	68db      	ldr	r3, [r3, #12]
 80066b6:	f023 0203 	bic.w	r2, r3, #3
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4949      	ldr	r1, [pc, #292]	; (80067e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80066c0:	4313      	orrs	r3, r2
 80066c2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80066c4:	7bfb      	ldrb	r3, [r7, #15]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	f040 8086 	bne.w	80067d8 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80066cc:	4b45      	ldr	r3, [pc, #276]	; (80067e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a44      	ldr	r2, [pc, #272]	; (80067e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80066d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066d8:	f7fc f80e 	bl	80026f8 <HAL_GetTick>
 80066dc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80066de:	e009      	b.n	80066f4 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80066e0:	f7fc f80a 	bl	80026f8 <HAL_GetTick>
 80066e4:	4602      	mov	r2, r0
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	1ad3      	subs	r3, r2, r3
 80066ea:	2b02      	cmp	r3, #2
 80066ec:	d902      	bls.n	80066f4 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80066ee:	2303      	movs	r3, #3
 80066f0:	73fb      	strb	r3, [r7, #15]
        break;
 80066f2:	e005      	b.n	8006700 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80066f4:	4b3b      	ldr	r3, [pc, #236]	; (80067e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d1ef      	bne.n	80066e0 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006700:	7bfb      	ldrb	r3, [r7, #15]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d168      	bne.n	80067d8 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d113      	bne.n	8006734 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800670c:	4b35      	ldr	r3, [pc, #212]	; (80067e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800670e:	695a      	ldr	r2, [r3, #20]
 8006710:	4b35      	ldr	r3, [pc, #212]	; (80067e8 <RCCEx_PLLSAI2_Config+0x1dc>)
 8006712:	4013      	ands	r3, r2
 8006714:	687a      	ldr	r2, [r7, #4]
 8006716:	6892      	ldr	r2, [r2, #8]
 8006718:	0211      	lsls	r1, r2, #8
 800671a:	687a      	ldr	r2, [r7, #4]
 800671c:	68d2      	ldr	r2, [r2, #12]
 800671e:	06d2      	lsls	r2, r2, #27
 8006720:	4311      	orrs	r1, r2
 8006722:	687a      	ldr	r2, [r7, #4]
 8006724:	6852      	ldr	r2, [r2, #4]
 8006726:	3a01      	subs	r2, #1
 8006728:	0112      	lsls	r2, r2, #4
 800672a:	430a      	orrs	r2, r1
 800672c:	492d      	ldr	r1, [pc, #180]	; (80067e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800672e:	4313      	orrs	r3, r2
 8006730:	614b      	str	r3, [r1, #20]
 8006732:	e02d      	b.n	8006790 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	2b01      	cmp	r3, #1
 8006738:	d115      	bne.n	8006766 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800673a:	4b2a      	ldr	r3, [pc, #168]	; (80067e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800673c:	695a      	ldr	r2, [r3, #20]
 800673e:	4b2b      	ldr	r3, [pc, #172]	; (80067ec <RCCEx_PLLSAI2_Config+0x1e0>)
 8006740:	4013      	ands	r3, r2
 8006742:	687a      	ldr	r2, [r7, #4]
 8006744:	6892      	ldr	r2, [r2, #8]
 8006746:	0211      	lsls	r1, r2, #8
 8006748:	687a      	ldr	r2, [r7, #4]
 800674a:	6912      	ldr	r2, [r2, #16]
 800674c:	0852      	lsrs	r2, r2, #1
 800674e:	3a01      	subs	r2, #1
 8006750:	0552      	lsls	r2, r2, #21
 8006752:	4311      	orrs	r1, r2
 8006754:	687a      	ldr	r2, [r7, #4]
 8006756:	6852      	ldr	r2, [r2, #4]
 8006758:	3a01      	subs	r2, #1
 800675a:	0112      	lsls	r2, r2, #4
 800675c:	430a      	orrs	r2, r1
 800675e:	4921      	ldr	r1, [pc, #132]	; (80067e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006760:	4313      	orrs	r3, r2
 8006762:	614b      	str	r3, [r1, #20]
 8006764:	e014      	b.n	8006790 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006766:	4b1f      	ldr	r3, [pc, #124]	; (80067e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006768:	695a      	ldr	r2, [r3, #20]
 800676a:	4b21      	ldr	r3, [pc, #132]	; (80067f0 <RCCEx_PLLSAI2_Config+0x1e4>)
 800676c:	4013      	ands	r3, r2
 800676e:	687a      	ldr	r2, [r7, #4]
 8006770:	6892      	ldr	r2, [r2, #8]
 8006772:	0211      	lsls	r1, r2, #8
 8006774:	687a      	ldr	r2, [r7, #4]
 8006776:	6952      	ldr	r2, [r2, #20]
 8006778:	0852      	lsrs	r2, r2, #1
 800677a:	3a01      	subs	r2, #1
 800677c:	0652      	lsls	r2, r2, #25
 800677e:	4311      	orrs	r1, r2
 8006780:	687a      	ldr	r2, [r7, #4]
 8006782:	6852      	ldr	r2, [r2, #4]
 8006784:	3a01      	subs	r2, #1
 8006786:	0112      	lsls	r2, r2, #4
 8006788:	430a      	orrs	r2, r1
 800678a:	4916      	ldr	r1, [pc, #88]	; (80067e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800678c:	4313      	orrs	r3, r2
 800678e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006790:	4b14      	ldr	r3, [pc, #80]	; (80067e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a13      	ldr	r2, [pc, #76]	; (80067e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006796:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800679a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800679c:	f7fb ffac 	bl	80026f8 <HAL_GetTick>
 80067a0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80067a2:	e009      	b.n	80067b8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80067a4:	f7fb ffa8 	bl	80026f8 <HAL_GetTick>
 80067a8:	4602      	mov	r2, r0
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	1ad3      	subs	r3, r2, r3
 80067ae:	2b02      	cmp	r3, #2
 80067b0:	d902      	bls.n	80067b8 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80067b2:	2303      	movs	r3, #3
 80067b4:	73fb      	strb	r3, [r7, #15]
          break;
 80067b6:	e005      	b.n	80067c4 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80067b8:	4b0a      	ldr	r3, [pc, #40]	; (80067e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d0ef      	beq.n	80067a4 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80067c4:	7bfb      	ldrb	r3, [r7, #15]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d106      	bne.n	80067d8 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80067ca:	4b06      	ldr	r3, [pc, #24]	; (80067e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80067cc:	695a      	ldr	r2, [r3, #20]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	699b      	ldr	r3, [r3, #24]
 80067d2:	4904      	ldr	r1, [pc, #16]	; (80067e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80067d4:	4313      	orrs	r3, r2
 80067d6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80067d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3710      	adds	r7, #16
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}
 80067e2:	bf00      	nop
 80067e4:	40021000 	.word	0x40021000
 80067e8:	07ff800f 	.word	0x07ff800f
 80067ec:	ff9f800f 	.word	0xff9f800f
 80067f0:	f9ff800f 	.word	0xf9ff800f

080067f4 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b089      	sub	sp, #36	; 0x24
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
 80067fc:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 80067fe:	2300      	movs	r3, #0
 8006800:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8006802:	2300      	movs	r3, #0
 8006804:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8006806:	2300      	movs	r3, #0
 8006808:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006810:	d10b      	bne.n	800682a <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8006812:	4b7e      	ldr	r3, [pc, #504]	; (8006a0c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006814:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006818:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800681c:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 800681e:	69bb      	ldr	r3, [r7, #24]
 8006820:	2b60      	cmp	r3, #96	; 0x60
 8006822:	d112      	bne.n	800684a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006824:	4b7a      	ldr	r3, [pc, #488]	; (8006a10 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8006826:	61fb      	str	r3, [r7, #28]
 8006828:	e00f      	b.n	800684a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006830:	d10b      	bne.n	800684a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8006832:	4b76      	ldr	r3, [pc, #472]	; (8006a0c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006834:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006838:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800683c:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 800683e:	69bb      	ldr	r3, [r7, #24]
 8006840:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006844:	d101      	bne.n	800684a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8006846:	4b72      	ldr	r3, [pc, #456]	; (8006a10 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8006848:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 800684a:	69fb      	ldr	r3, [r7, #28]
 800684c:	2b00      	cmp	r3, #0
 800684e:	f040 80d6 	bne.w	80069fe <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8006856:	69bb      	ldr	r3, [r7, #24]
 8006858:	2b40      	cmp	r3, #64	; 0x40
 800685a:	d003      	beq.n	8006864 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 800685c:	69bb      	ldr	r3, [r7, #24]
 800685e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006862:	d13b      	bne.n	80068dc <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8006864:	4b69      	ldr	r3, [pc, #420]	; (8006a0c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800686c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006870:	f040 80c4 	bne.w	80069fc <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 8006874:	4b65      	ldr	r3, [pc, #404]	; (8006a0c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006876:	68db      	ldr	r3, [r3, #12]
 8006878:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800687c:	2b00      	cmp	r3, #0
 800687e:	f000 80bd 	beq.w	80069fc <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006882:	4b62      	ldr	r3, [pc, #392]	; (8006a0c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006884:	68db      	ldr	r3, [r3, #12]
 8006886:	091b      	lsrs	r3, r3, #4
 8006888:	f003 030f 	and.w	r3, r3, #15
 800688c:	3301      	adds	r3, #1
 800688e:	693a      	ldr	r2, [r7, #16]
 8006890:	fbb2 f3f3 	udiv	r3, r2, r3
 8006894:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006896:	4b5d      	ldr	r3, [pc, #372]	; (8006a0c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006898:	68db      	ldr	r3, [r3, #12]
 800689a:	0a1b      	lsrs	r3, r3, #8
 800689c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068a0:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 80068a2:	4b5a      	ldr	r3, [pc, #360]	; (8006a0c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80068a4:	68db      	ldr	r3, [r3, #12]
 80068a6:	0edb      	lsrs	r3, r3, #27
 80068a8:	f003 031f 	and.w	r3, r3, #31
 80068ac:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d10a      	bne.n	80068ca <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80068b4:	4b55      	ldr	r3, [pc, #340]	; (8006a0c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80068b6:	68db      	ldr	r3, [r3, #12]
 80068b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d002      	beq.n	80068c6 <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 80068c0:	2311      	movs	r3, #17
 80068c2:	617b      	str	r3, [r7, #20]
 80068c4:	e001      	b.n	80068ca <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 80068c6:	2307      	movs	r3, #7
 80068c8:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	68fa      	ldr	r2, [r7, #12]
 80068ce:	fb03 f202 	mul.w	r2, r3, r2
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80068d8:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80068da:	e08f      	b.n	80069fc <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 80068dc:	69bb      	ldr	r3, [r7, #24]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d13a      	bne.n	8006958 <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 80068e2:	4b4a      	ldr	r3, [pc, #296]	; (8006a0c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80068ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80068ee:	f040 8086 	bne.w	80069fe <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 80068f2:	4b46      	ldr	r3, [pc, #280]	; (8006a0c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80068f4:	691b      	ldr	r3, [r3, #16]
 80068f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d07f      	beq.n	80069fe <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80068fe:	4b43      	ldr	r3, [pc, #268]	; (8006a0c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006900:	691b      	ldr	r3, [r3, #16]
 8006902:	091b      	lsrs	r3, r3, #4
 8006904:	f003 030f 	and.w	r3, r3, #15
 8006908:	3301      	adds	r3, #1
 800690a:	693a      	ldr	r2, [r7, #16]
 800690c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006910:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006912:	4b3e      	ldr	r3, [pc, #248]	; (8006a0c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006914:	691b      	ldr	r3, [r3, #16]
 8006916:	0a1b      	lsrs	r3, r3, #8
 8006918:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800691c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 800691e:	4b3b      	ldr	r3, [pc, #236]	; (8006a0c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006920:	691b      	ldr	r3, [r3, #16]
 8006922:	0edb      	lsrs	r3, r3, #27
 8006924:	f003 031f 	and.w	r3, r3, #31
 8006928:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d10a      	bne.n	8006946 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8006930:	4b36      	ldr	r3, [pc, #216]	; (8006a0c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006932:	691b      	ldr	r3, [r3, #16]
 8006934:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006938:	2b00      	cmp	r3, #0
 800693a:	d002      	beq.n	8006942 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 800693c:	2311      	movs	r3, #17
 800693e:	617b      	str	r3, [r7, #20]
 8006940:	e001      	b.n	8006946 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 8006942:	2307      	movs	r3, #7
 8006944:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	68fa      	ldr	r2, [r7, #12]
 800694a:	fb03 f202 	mul.w	r2, r3, r2
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	fbb2 f3f3 	udiv	r3, r2, r3
 8006954:	61fb      	str	r3, [r7, #28]
 8006956:	e052      	b.n	80069fe <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 8006958:	69bb      	ldr	r3, [r7, #24]
 800695a:	2b80      	cmp	r3, #128	; 0x80
 800695c:	d003      	beq.n	8006966 <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 800695e:	69bb      	ldr	r3, [r7, #24]
 8006960:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006964:	d109      	bne.n	800697a <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006966:	4b29      	ldr	r3, [pc, #164]	; (8006a0c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800696e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006972:	d144      	bne.n	80069fe <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 8006974:	4b27      	ldr	r3, [pc, #156]	; (8006a14 <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 8006976:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006978:	e041      	b.n	80069fe <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 800697a:	69bb      	ldr	r3, [r7, #24]
 800697c:	2b20      	cmp	r3, #32
 800697e:	d003      	beq.n	8006988 <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 8006980:	69bb      	ldr	r3, [r7, #24]
 8006982:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006986:	d13a      	bne.n	80069fe <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8006988:	4b20      	ldr	r3, [pc, #128]	; (8006a0c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006990:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006994:	d133      	bne.n	80069fe <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8006996:	4b1d      	ldr	r3, [pc, #116]	; (8006a0c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006998:	695b      	ldr	r3, [r3, #20]
 800699a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d02d      	beq.n	80069fe <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 80069a2:	4b1a      	ldr	r3, [pc, #104]	; (8006a0c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80069a4:	695b      	ldr	r3, [r3, #20]
 80069a6:	091b      	lsrs	r3, r3, #4
 80069a8:	f003 030f 	and.w	r3, r3, #15
 80069ac:	3301      	adds	r3, #1
 80069ae:	693a      	ldr	r2, [r7, #16]
 80069b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80069b4:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80069b6:	4b15      	ldr	r3, [pc, #84]	; (8006a0c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80069b8:	695b      	ldr	r3, [r3, #20]
 80069ba:	0a1b      	lsrs	r3, r3, #8
 80069bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069c0:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 80069c2:	4b12      	ldr	r3, [pc, #72]	; (8006a0c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80069c4:	695b      	ldr	r3, [r3, #20]
 80069c6:	0edb      	lsrs	r3, r3, #27
 80069c8:	f003 031f 	and.w	r3, r3, #31
 80069cc:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d10a      	bne.n	80069ea <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 80069d4:	4b0d      	ldr	r3, [pc, #52]	; (8006a0c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80069d6:	695b      	ldr	r3, [r3, #20]
 80069d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d002      	beq.n	80069e6 <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 80069e0:	2311      	movs	r3, #17
 80069e2:	617b      	str	r3, [r7, #20]
 80069e4:	e001      	b.n	80069ea <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 80069e6:	2307      	movs	r3, #7
 80069e8:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	68fa      	ldr	r2, [r7, #12]
 80069ee:	fb03 f202 	mul.w	r2, r3, r2
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80069f8:	61fb      	str	r3, [r7, #28]
 80069fa:	e000      	b.n	80069fe <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80069fc:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 80069fe:	69fb      	ldr	r3, [r7, #28]
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3724      	adds	r7, #36	; 0x24
 8006a04:	46bd      	mov	sp, r7
 8006a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0a:	4770      	bx	lr
 8006a0c:	40021000 	.word	0x40021000
 8006a10:	001fff68 	.word	0x001fff68
 8006a14:	00f42400 	.word	0x00f42400

08006a18 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b086      	sub	sp, #24
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	60f8      	str	r0, [r7, #12]
 8006a20:	60b9      	str	r1, [r7, #8]
 8006a22:	607a      	str	r2, [r7, #4]
 8006a24:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	2b02      	cmp	r3, #2
 8006a2a:	d904      	bls.n	8006a36 <HAL_SAI_InitProtocol+0x1e>
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	3b03      	subs	r3, #3
 8006a30:	2b01      	cmp	r3, #1
 8006a32:	d812      	bhi.n	8006a5a <HAL_SAI_InitProtocol+0x42>
 8006a34:	e008      	b.n	8006a48 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	687a      	ldr	r2, [r7, #4]
 8006a3a:	68b9      	ldr	r1, [r7, #8]
 8006a3c:	68f8      	ldr	r0, [r7, #12]
 8006a3e:	f000 f9fb 	bl	8006e38 <SAI_InitI2S>
 8006a42:	4603      	mov	r3, r0
 8006a44:	75fb      	strb	r3, [r7, #23]
      break;
 8006a46:	e00b      	b.n	8006a60 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	687a      	ldr	r2, [r7, #4]
 8006a4c:	68b9      	ldr	r1, [r7, #8]
 8006a4e:	68f8      	ldr	r0, [r7, #12]
 8006a50:	f000 faa4 	bl	8006f9c <SAI_InitPCM>
 8006a54:	4603      	mov	r3, r0
 8006a56:	75fb      	strb	r3, [r7, #23]
      break;
 8006a58:	e002      	b.n	8006a60 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	75fb      	strb	r3, [r7, #23]
      break;
 8006a5e:	bf00      	nop
  }

  if (status == HAL_OK)
 8006a60:	7dfb      	ldrb	r3, [r7, #23]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d104      	bne.n	8006a70 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 8006a66:	68f8      	ldr	r0, [r7, #12]
 8006a68:	f000 f808 	bl	8006a7c <HAL_SAI_Init>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006a70:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3718      	adds	r7, #24
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}
	...

08006a7c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b08a      	sub	sp, #40	; 0x28
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d101      	bne.n	8006a8e <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	e1c7      	b.n	8006e1e <HAL_SAI_Init+0x3a2>

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	d10e      	bne.n	8006ab6 <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a81      	ldr	r2, [pc, #516]	; (8006ca4 <HAL_SAI_Init+0x228>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d107      	bne.n	8006ab2 <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 8006aa6:	2b01      	cmp	r3, #1
 8006aa8:	d103      	bne.n	8006ab2 <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d001      	beq.n	8006ab6 <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	e1b3      	b.n	8006e1e <HAL_SAI_Init+0x3a2>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8006abc:	b2db      	uxtb	r3, r3
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d106      	bne.n	8006ad0 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f7fb fc2e 	bl	800232c <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f000 fae5 	bl	80070a0 <SAI_Disable>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d001      	beq.n	8006ae0 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 8006adc:	2301      	movs	r3, #1
 8006ade:	e19e      	b.n	8006e1e <HAL_SAI_Init+0x3a2>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2202      	movs	r2, #2
 8006ae4:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	68db      	ldr	r3, [r3, #12]
 8006aec:	2b02      	cmp	r3, #2
 8006aee:	d00c      	beq.n	8006b0a <HAL_SAI_Init+0x8e>
 8006af0:	2b02      	cmp	r3, #2
 8006af2:	d80d      	bhi.n	8006b10 <HAL_SAI_Init+0x94>
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d002      	beq.n	8006afe <HAL_SAI_Init+0x82>
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d003      	beq.n	8006b04 <HAL_SAI_Init+0x88>
 8006afc:	e008      	b.n	8006b10 <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8006afe:	2300      	movs	r3, #0
 8006b00:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006b02:	e008      	b.n	8006b16 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8006b04:	2310      	movs	r3, #16
 8006b06:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006b08:	e005      	b.n	8006b16 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8006b0a:	2320      	movs	r3, #32
 8006b0c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006b0e:	e002      	b.n	8006b16 <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 8006b10:	2300      	movs	r3, #0
 8006b12:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006b14:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	689b      	ldr	r3, [r3, #8]
 8006b1a:	2b03      	cmp	r3, #3
 8006b1c:	d81d      	bhi.n	8006b5a <HAL_SAI_Init+0xde>
 8006b1e:	a201      	add	r2, pc, #4	; (adr r2, 8006b24 <HAL_SAI_Init+0xa8>)
 8006b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b24:	08006b35 	.word	0x08006b35
 8006b28:	08006b3b 	.word	0x08006b3b
 8006b2c:	08006b43 	.word	0x08006b43
 8006b30:	08006b4b 	.word	0x08006b4b
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8006b34:	2300      	movs	r3, #0
 8006b36:	61fb      	str	r3, [r7, #28]
      break;
 8006b38:	e012      	b.n	8006b60 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8006b3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b3e:	61fb      	str	r3, [r7, #28]
      break;
 8006b40:	e00e      	b.n	8006b60 <HAL_SAI_Init+0xe4>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8006b42:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006b46:	61fb      	str	r3, [r7, #28]
      break;
 8006b48:	e00a      	b.n	8006b60 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8006b4a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006b4e:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8006b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b52:	f043 0301 	orr.w	r3, r3, #1
 8006b56:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006b58:	e002      	b.n	8006b60 <HAL_SAI_Init+0xe4>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	61fb      	str	r3, [r7, #28]
      break;
 8006b5e:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a4f      	ldr	r2, [pc, #316]	; (8006ca4 <HAL_SAI_Init+0x228>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d004      	beq.n	8006b74 <HAL_SAI_Init+0xf8>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a4e      	ldr	r2, [pc, #312]	; (8006ca8 <HAL_SAI_Init+0x22c>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d103      	bne.n	8006b7c <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 8006b74:	4a4d      	ldr	r2, [pc, #308]	; (8006cac <HAL_SAI_Init+0x230>)
 8006b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b78:	6013      	str	r3, [r2, #0]
 8006b7a:	e002      	b.n	8006b82 <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8006b7c:	4a4c      	ldr	r2, [pc, #304]	; (8006cb0 <HAL_SAI_Init+0x234>)
 8006b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b80:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	69db      	ldr	r3, [r3, #28]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d073      	beq.n	8006c72 <HAL_SAI_Init+0x1f6>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a45      	ldr	r2, [pc, #276]	; (8006ca4 <HAL_SAI_Init+0x228>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d004      	beq.n	8006b9e <HAL_SAI_Init+0x122>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a43      	ldr	r2, [pc, #268]	; (8006ca8 <HAL_SAI_Init+0x22c>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d105      	bne.n	8006baa <HAL_SAI_Init+0x12e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8006b9e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006ba2:	f7fe fd0d 	bl	80055c0 <HAL_RCCEx_GetPeriphCLKFreq>
 8006ba6:	61b8      	str	r0, [r7, #24]
 8006ba8:	e004      	b.n	8006bb4 <HAL_SAI_Init+0x138>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8006baa:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006bae:	f7fe fd07 	bl	80055c0 <HAL_RCCEx_GetPeriphCLKFreq>
 8006bb2:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NOMCK = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NOMCK = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	695b      	ldr	r3, [r3, #20]
 8006bb8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006bbc:	d120      	bne.n	8006c00 <HAL_SAI_Init+0x184>
    {
      /* NOMCK = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bc2:	2b04      	cmp	r3, #4
 8006bc4:	d102      	bne.n	8006bcc <HAL_SAI_Init+0x150>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 8006bc6:	2340      	movs	r3, #64	; 0x40
 8006bc8:	613b      	str	r3, [r7, #16]
 8006bca:	e00a      	b.n	8006be2 <HAL_SAI_Init+0x166>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bd0:	2b08      	cmp	r3, #8
 8006bd2:	d103      	bne.n	8006bdc <HAL_SAI_Init+0x160>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 8006bd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006bd8:	613b      	str	r3, [r7, #16]
 8006bda:	e002      	b.n	8006be2 <HAL_SAI_Init+0x166>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006be0:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8006be2:	69ba      	ldr	r2, [r7, #24]
 8006be4:	4613      	mov	r3, r2
 8006be6:	009b      	lsls	r3, r3, #2
 8006be8:	4413      	add	r3, r2
 8006bea:	005b      	lsls	r3, r3, #1
 8006bec:	4619      	mov	r1, r3
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	69db      	ldr	r3, [r3, #28]
 8006bf2:	693a      	ldr	r2, [r7, #16]
 8006bf4:	fb02 f303 	mul.w	r3, r2, r3
 8006bf8:	fbb1 f3f3 	udiv	r3, r1, r3
 8006bfc:	617b      	str	r3, [r7, #20]
 8006bfe:	e017      	b.n	8006c30 <HAL_SAI_Init+0x1b4>
    }
    else
    {
      /* NOMCK = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c04:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006c08:	d101      	bne.n	8006c0e <HAL_SAI_Init+0x192>
 8006c0a:	2302      	movs	r3, #2
 8006c0c:	e000      	b.n	8006c10 <HAL_SAI_Init+0x194>
 8006c0e:	2301      	movs	r3, #1
 8006c10:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8006c12:	69ba      	ldr	r2, [r7, #24]
 8006c14:	4613      	mov	r3, r2
 8006c16:	009b      	lsls	r3, r3, #2
 8006c18:	4413      	add	r3, r2
 8006c1a:	005b      	lsls	r3, r3, #1
 8006c1c:	4619      	mov	r1, r3
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	69db      	ldr	r3, [r3, #28]
 8006c22:	68fa      	ldr	r2, [r7, #12]
 8006c24:	fb02 f303 	mul.w	r3, r2, r3
 8006c28:	021b      	lsls	r3, r3, #8
 8006c2a:	fbb1 f3f3 	udiv	r3, r1, r3
 8006c2e:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	4a20      	ldr	r2, [pc, #128]	; (8006cb4 <HAL_SAI_Init+0x238>)
 8006c34:	fba2 2303 	umull	r2, r3, r2, r3
 8006c38:	08da      	lsrs	r2, r3, #3
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8006c3e:	6979      	ldr	r1, [r7, #20]
 8006c40:	4b1c      	ldr	r3, [pc, #112]	; (8006cb4 <HAL_SAI_Init+0x238>)
 8006c42:	fba3 2301 	umull	r2, r3, r3, r1
 8006c46:	08da      	lsrs	r2, r3, #3
 8006c48:	4613      	mov	r3, r2
 8006c4a:	009b      	lsls	r3, r3, #2
 8006c4c:	4413      	add	r3, r2
 8006c4e:	005b      	lsls	r3, r3, #1
 8006c50:	1aca      	subs	r2, r1, r3
 8006c52:	2a08      	cmp	r2, #8
 8006c54:	d904      	bls.n	8006c60 <HAL_SAI_Init+0x1e4>
    {
      hsai->Init.Mckdiv += 1U;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6a1b      	ldr	r3, [r3, #32]
 8006c5a:	1c5a      	adds	r2, r3, #1
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c64:	2b04      	cmp	r3, #4
 8006c66:	d104      	bne.n	8006c72 <HAL_SAI_Init+0x1f6>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6a1b      	ldr	r3, [r3, #32]
 8006c6c:	085a      	lsrs	r2, r3, #1
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d003      	beq.n	8006c82 <HAL_SAI_Init+0x206>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	685b      	ldr	r3, [r3, #4]
 8006c7e:	2b02      	cmp	r3, #2
 8006c80:	d109      	bne.n	8006c96 <HAL_SAI_Init+0x21a>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c86:	2b01      	cmp	r3, #1
 8006c88:	d101      	bne.n	8006c8e <HAL_SAI_Init+0x212>
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	e001      	b.n	8006c92 <HAL_SAI_Init+0x216>
 8006c8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c92:	623b      	str	r3, [r7, #32]
 8006c94:	e012      	b.n	8006cbc <HAL_SAI_Init+0x240>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c9a:	2b01      	cmp	r3, #1
 8006c9c:	d10c      	bne.n	8006cb8 <HAL_SAI_Init+0x23c>
 8006c9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ca2:	e00a      	b.n	8006cba <HAL_SAI_Init+0x23e>
 8006ca4:	40015404 	.word	0x40015404
 8006ca8:	40015424 	.word	0x40015424
 8006cac:	40015400 	.word	0x40015400
 8006cb0:	40015800 	.word	0x40015800
 8006cb4:	cccccccd 	.word	0xcccccccd
 8006cb8:	2300      	movs	r3, #0
 8006cba:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	6819      	ldr	r1, [r3, #0]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681a      	ldr	r2, [r3, #0]
 8006cc6:	4b58      	ldr	r3, [pc, #352]	; (8006e28 <HAL_SAI_Init+0x3ac>)
 8006cc8:	400b      	ands	r3, r1
 8006cca:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NOMCK | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	6819      	ldr	r1, [r3, #0]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	685a      	ldr	r2, [r3, #4]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cda:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006ce0:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ce6:	431a      	orrs	r2, r3
 8006ce8:	6a3b      	ldr	r3, [r7, #32]
 8006cea:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8006cec:	69fb      	ldr	r3, [r7, #28]
 8006cee:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          ckstr_bits | syncen_bits |                             \
 8006cf4:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	691b      	ldr	r3, [r3, #16]
 8006cfa:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006d00:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6a1b      	ldr	r3, [r3, #32]
 8006d06:	051b      	lsls	r3, r3, #20
 8006d08:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8006d0e:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	430a      	orrs	r2, r1
 8006d16:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	687a      	ldr	r2, [r7, #4]
 8006d20:	6812      	ldr	r2, [r2, #0]
 8006d22:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8006d26:	f023 030f 	bic.w	r3, r3, #15
 8006d2a:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	6859      	ldr	r1, [r3, #4]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	699a      	ldr	r2, [r3, #24]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d3a:	431a      	orrs	r2, r3
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d40:	431a      	orrs	r2, r3
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	430a      	orrs	r2, r1
 8006d48:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	6899      	ldr	r1, [r3, #8]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681a      	ldr	r2, [r3, #0]
 8006d54:	4b35      	ldr	r3, [pc, #212]	; (8006e2c <HAL_SAI_Init+0x3b0>)
 8006d56:	400b      	ands	r3, r1
 8006d58:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	6899      	ldr	r1, [r3, #8]
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d64:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006d6a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
                           hsai->FrameInit.FSOffset |
 8006d70:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSDefinition |
 8006d76:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d7c:	3b01      	subs	r3, #1
 8006d7e:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8006d80:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	430a      	orrs	r2, r1
 8006d88:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	68d9      	ldr	r1, [r3, #12]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681a      	ldr	r2, [r3, #0]
 8006d94:	f24f 0320 	movw	r3, #61472	; 0xf020
 8006d98:	400b      	ands	r3, r1
 8006d9a:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	68d9      	ldr	r1, [r3, #12]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006daa:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006db0:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006db2:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006db8:	3b01      	subs	r3, #1
 8006dba:	021b      	lsls	r3, r3, #8
 8006dbc:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	430a      	orrs	r2, r1
 8006dc4:	60da      	str	r2, [r3, #12]

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a19      	ldr	r2, [pc, #100]	; (8006e30 <HAL_SAI_Init+0x3b4>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d119      	bne.n	8006e04 <HAL_SAI_Init+0x388>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8006dd0:	4b18      	ldr	r3, [pc, #96]	; (8006e34 <HAL_SAI_Init+0x3b8>)
 8006dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dd4:	4a17      	ldr	r2, [pc, #92]	; (8006e34 <HAL_SAI_Init+0x3b8>)
 8006dd6:	f023 0301 	bic.w	r3, r3, #1
 8006dda:	6453      	str	r3, [r2, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006de2:	2b01      	cmp	r3, #1
 8006de4:	d10e      	bne.n	8006e04 <HAL_SAI_Init+0x388>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dee:	3b01      	subs	r3, #1
 8006df0:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8006df2:	4910      	ldr	r1, [pc, #64]	; (8006e34 <HAL_SAI_Init+0x3b8>)
 8006df4:	4313      	orrs	r3, r2
 8006df6:	644b      	str	r3, [r1, #68]	; 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 8006df8:	4b0e      	ldr	r3, [pc, #56]	; (8006e34 <HAL_SAI_Init+0x3b8>)
 8006dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dfc:	4a0d      	ldr	r2, [pc, #52]	; (8006e34 <HAL_SAI_Init+0x3b8>)
 8006dfe:	f043 0301 	orr.w	r3, r3, #1
 8006e02:	6453      	str	r3, [r2, #68]	; 0x44
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2200      	movs	r2, #0
 8006e08:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2201      	movs	r2, #1
 8006e10:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2200      	movs	r2, #0
 8006e18:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

  return HAL_OK;
 8006e1c:	2300      	movs	r3, #0
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3728      	adds	r7, #40	; 0x28
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}
 8006e26:	bf00      	nop
 8006e28:	f805c010 	.word	0xf805c010
 8006e2c:	fff88000 	.word	0xfff88000
 8006e30:	40015404 	.word	0x40015404
 8006e34:	40015400 	.word	0x40015400

08006e38 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b087      	sub	sp, #28
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	60f8      	str	r0, [r7, #12]
 8006e40:	60b9      	str	r1, [r7, #8]
 8006e42:	607a      	str	r2, [r7, #4]
 8006e44:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e46:	2300      	movs	r3, #0
 8006e48:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	641a      	str	r2, [r3, #64]	; 0x40
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2200      	movs	r2, #0
 8006e54:	649a      	str	r2, [r3, #72]	; 0x48
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d003      	beq.n	8006e66 <SAI_InitI2S+0x2e>
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	2b02      	cmp	r3, #2
 8006e64:	d103      	bne.n	8006e6e <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	64da      	str	r2, [r3, #76]	; 0x4c
 8006e6c:	e002      	b.n	8006e74 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2201      	movs	r2, #1
 8006e72:	64da      	str	r2, [r3, #76]	; 0x4c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006e7a:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006e82:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.FirstBitOffset  = 0;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	2200      	movs	r2, #0
 8006e88:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.SlotNumber      = nbslot;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	683a      	ldr	r2, [r7, #0]
 8006e8e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	f003 0301 	and.w	r3, r3, #1
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d001      	beq.n	8006e9e <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	e077      	b.n	8006f8e <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d107      	bne.n	8006eb4 <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8006eb0:	661a      	str	r2, [r3, #96]	; 0x60
 8006eb2:	e006      	b.n	8006ec2 <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006eba:	65da      	str	r2, [r3, #92]	; 0x5c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Frame definition */
  switch (datasize)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2b03      	cmp	r3, #3
 8006ec6:	d84f      	bhi.n	8006f68 <SAI_InitI2S+0x130>
 8006ec8:	a201      	add	r2, pc, #4	; (adr r2, 8006ed0 <SAI_InitI2S+0x98>)
 8006eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ece:	bf00      	nop
 8006ed0:	08006ee1 	.word	0x08006ee1
 8006ed4:	08006f03 	.word	0x08006f03
 8006ed8:	08006f25 	.word	0x08006f25
 8006edc:	08006f47 	.word	0x08006f47
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	2280      	movs	r2, #128	; 0x80
 8006ee4:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	085b      	lsrs	r3, r3, #1
 8006eea:	015a      	lsls	r2, r3, #5
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	085b      	lsrs	r3, r3, #1
 8006ef4:	011a      	lsls	r2, r3, #4
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	2240      	movs	r2, #64	; 0x40
 8006efe:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8006f00:	e035      	b.n	8006f6e <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2280      	movs	r2, #128	; 0x80
 8006f06:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	085b      	lsrs	r3, r3, #1
 8006f0c:	019a      	lsls	r2, r3, #6
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	085b      	lsrs	r3, r3, #1
 8006f16:	015a      	lsls	r2, r3, #5
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	2280      	movs	r2, #128	; 0x80
 8006f20:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8006f22:	e024      	b.n	8006f6e <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	22c0      	movs	r2, #192	; 0xc0
 8006f28:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	085b      	lsrs	r3, r3, #1
 8006f2e:	019a      	lsls	r2, r3, #6
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	085b      	lsrs	r3, r3, #1
 8006f38:	015a      	lsls	r2, r3, #5
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2280      	movs	r2, #128	; 0x80
 8006f42:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8006f44:	e013      	b.n	8006f6e <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	22e0      	movs	r2, #224	; 0xe0
 8006f4a:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	085b      	lsrs	r3, r3, #1
 8006f50:	019a      	lsls	r2, r3, #6
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	085b      	lsrs	r3, r3, #1
 8006f5a:	015a      	lsls	r2, r3, #5
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	2280      	movs	r2, #128	; 0x80
 8006f64:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8006f66:	e002      	b.n	8006f6e <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 8006f68:	2301      	movs	r3, #1
 8006f6a:	75fb      	strb	r3, [r7, #23]
      break;
 8006f6c:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	2b02      	cmp	r3, #2
 8006f72:	d10b      	bne.n	8006f8c <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2b01      	cmp	r3, #1
 8006f78:	d102      	bne.n	8006f80 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	2210      	movs	r2, #16
 8006f7e:	665a      	str	r2, [r3, #100]	; 0x64
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2b02      	cmp	r3, #2
 8006f84:	d102      	bne.n	8006f8c <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2208      	movs	r2, #8
 8006f8a:	665a      	str	r2, [r3, #100]	; 0x64
    }
  }
  return status;
 8006f8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	371c      	adds	r7, #28
 8006f92:	46bd      	mov	sp, r7
 8006f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f98:	4770      	bx	lr
 8006f9a:	bf00      	nop

08006f9c <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b087      	sub	sp, #28
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	60f8      	str	r0, [r7, #12]
 8006fa4:	60b9      	str	r1, [r7, #8]
 8006fa6:	607a      	str	r2, [r7, #4]
 8006fa8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006faa:	2300      	movs	r3, #0
 8006fac:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	641a      	str	r2, [r3, #64]	; 0x40
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	649a      	str	r2, [r3, #72]	; 0x48
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d003      	beq.n	8006fca <SAI_InitPCM+0x2e>
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	685b      	ldr	r3, [r3, #4]
 8006fc6:	2b02      	cmp	r3, #2
 8006fc8:	d103      	bne.n	8006fd2 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2201      	movs	r2, #1
 8006fce:	64da      	str	r2, [r3, #76]	; 0x4c
 8006fd0:	e002      	b.n	8006fd8 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	64da      	str	r2, [r3, #76]	; 0x4c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006fe4:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8006fec:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.SlotNumber      = nbslot;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	683a      	ldr	r2, [r7, #0]
 8006ff8:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007000:	671a      	str	r2, [r3, #112]	; 0x70

  if (protocol == SAI_PCM_SHORT)
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	2b04      	cmp	r3, #4
 8007006:	d103      	bne.n	8007010 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	2201      	movs	r2, #1
 800700c:	655a      	str	r2, [r3, #84]	; 0x54
 800700e:	e002      	b.n	8007016 <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	220d      	movs	r2, #13
 8007014:	655a      	str	r2, [r3, #84]	; 0x54
  }

  switch (datasize)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2b03      	cmp	r3, #3
 800701a:	d837      	bhi.n	800708c <SAI_InitPCM+0xf0>
 800701c:	a201      	add	r2, pc, #4	; (adr r2, 8007024 <SAI_InitPCM+0x88>)
 800701e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007022:	bf00      	nop
 8007024:	08007035 	.word	0x08007035
 8007028:	0800704b 	.word	0x0800704b
 800702c:	08007061 	.word	0x08007061
 8007030:	08007077 	.word	0x08007077
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	2280      	movs	r2, #128	; 0x80
 8007038:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	011a      	lsls	r2, r3, #4
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2240      	movs	r2, #64	; 0x40
 8007046:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8007048:	e023      	b.n	8007092 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2280      	movs	r2, #128	; 0x80
 800704e:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	015a      	lsls	r2, r3, #5
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	2280      	movs	r2, #128	; 0x80
 800705c:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 800705e:	e018      	b.n	8007092 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	22c0      	movs	r2, #192	; 0xc0
 8007064:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	015a      	lsls	r2, r3, #5
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	2280      	movs	r2, #128	; 0x80
 8007072:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8007074:	e00d      	b.n	8007092 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	22e0      	movs	r2, #224	; 0xe0
 800707a:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	015a      	lsls	r2, r3, #5
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2280      	movs	r2, #128	; 0x80
 8007088:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 800708a:	e002      	b.n	8007092 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 800708c:	2301      	movs	r3, #1
 800708e:	75fb      	strb	r3, [r7, #23]
      break;
 8007090:	bf00      	nop
  }

  return status;
 8007092:	7dfb      	ldrb	r3, [r7, #23]
}
 8007094:	4618      	mov	r0, r3
 8007096:	371c      	adds	r7, #28
 8007098:	46bd      	mov	sp, r7
 800709a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709e:	4770      	bx	lr

080070a0 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b085      	sub	sp, #20
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80070a8:	4b18      	ldr	r3, [pc, #96]	; (800710c <SAI_Disable+0x6c>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a18      	ldr	r2, [pc, #96]	; (8007110 <SAI_Disable+0x70>)
 80070ae:	fba2 2303 	umull	r2, r3, r2, r3
 80070b2:	0b1b      	lsrs	r3, r3, #12
 80070b4:	009b      	lsls	r3, r3, #2
 80070b6:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80070b8:	2300      	movs	r3, #0
 80070ba:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	681a      	ldr	r2, [r3, #0]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80070ca:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d10a      	bne.n	80070e8 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070d8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      status = HAL_TIMEOUT;
 80070e2:	2303      	movs	r3, #3
 80070e4:	72fb      	strb	r3, [r7, #11]
      break;
 80070e6:	e009      	b.n	80070fc <SAI_Disable+0x5c>
    }
    count--;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	3b01      	subs	r3, #1
 80070ec:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d1e7      	bne.n	80070cc <SAI_Disable+0x2c>

  return status;
 80070fc:	7afb      	ldrb	r3, [r7, #11]
}
 80070fe:	4618      	mov	r0, r3
 8007100:	3714      	adds	r7, #20
 8007102:	46bd      	mov	sp, r7
 8007104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007108:	4770      	bx	lr
 800710a:	bf00      	nop
 800710c:	20000004 	.word	0x20000004
 8007110:	95cbec1b 	.word	0x95cbec1b

08007114 <HAL_SMBUS_Init>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_Init(SMBUS_HandleTypeDef *hsmbus)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b082      	sub	sp, #8
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  /* Check the SMBUS handle allocation */
  if (hsmbus == NULL)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d101      	bne.n	8007126 <HAL_SMBUS_Init+0x12>
  {
    return HAL_ERROR;
 8007122:	2301      	movs	r3, #1
 8007124:	e0aa      	b.n	800727c <HAL_SMBUS_Init+0x168>
  assert_param(IS_SMBUS_GENERAL_CALL(hsmbus->Init.GeneralCallMode));
  assert_param(IS_SMBUS_NO_STRETCH(hsmbus->Init.NoStretchMode));
  assert_param(IS_SMBUS_PEC(hsmbus->Init.PacketErrorCheckMode));
  assert_param(IS_SMBUS_PERIPHERAL_MODE(hsmbus->Init.PeripheralMode));

  if (hsmbus->State == HAL_SMBUS_STATE_RESET)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800712a:	2b00      	cmp	r3, #0
 800712c:	d106      	bne.n	800713c <HAL_SMBUS_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hsmbus->Lock = HAL_UNLOCKED;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2200      	movs	r2, #0
 8007132:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hsmbus->MspInitCallback(hsmbus);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_SMBUS_MspInit(hsmbus);
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f7fa fcfa 	bl	8001b30 <HAL_SMBUS_MspInit>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
  }

  hsmbus->State = HAL_SMBUS_STATE_BUSY;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2202      	movs	r2, #2
 8007140:	649a      	str	r2, [r3, #72]	; 0x48

  /* Disable the selected SMBUS peripheral */
  __HAL_SMBUS_DISABLE(hsmbus);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	681a      	ldr	r2, [r3, #0]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f022 0201 	bic.w	r2, r2, #1
 8007150:	601a      	str	r2, [r3, #0]

  /*---------------------------- SMBUSx TIMINGR Configuration ------------------------*/
  /* Configure SMBUSx: Frequency range */
  hsmbus->Instance->TIMINGR = hsmbus->Init.Timing & TIMING_CLEAR_MASK;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	685a      	ldr	r2, [r3, #4]
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800715e:	611a      	str	r2, [r3, #16]

  /*---------------------------- SMBUSx TIMEOUTR Configuration ------------------------*/
  /* Configure SMBUSx: Bus Timeout  */
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TIMOUTEN;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	695a      	ldr	r2, [r3, #20]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800716e:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TEXTEN;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	695a      	ldr	r2, [r3, #20]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800717e:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR = hsmbus->Init.SMBusTimeout;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	687a      	ldr	r2, [r7, #4]
 8007186:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007188:	615a      	str	r2, [r3, #20]

  /*---------------------------- SMBUSx OAR1 Configuration -----------------------*/
  /* Configure SMBUSx: Own Address1 and ack own address1 mode */
  hsmbus->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	689a      	ldr	r2, [r3, #8]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007198:	609a      	str	r2, [r3, #8]

  if (hsmbus->Init.OwnAddress1 != 0UL)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	68db      	ldr	r3, [r3, #12]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d012      	beq.n	80071c8 <HAL_SMBUS_Init+0xb4>
  {
    if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_7BIT)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	691b      	ldr	r3, [r3, #16]
 80071a6:	2b01      	cmp	r3, #1
 80071a8:	d107      	bne.n	80071ba <HAL_SMBUS_Init+0xa6>
    {
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | hsmbus->Init.OwnAddress1);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	68da      	ldr	r2, [r3, #12]
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80071b6:	609a      	str	r2, [r3, #8]
 80071b8:	e006      	b.n	80071c8 <HAL_SMBUS_Init+0xb4>
    }
    else /* SMBUS_ADDRESSINGMODE_10BIT */
    {
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hsmbus->Init.OwnAddress1);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	68da      	ldr	r2, [r3, #12]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80071c6:	609a      	str	r2, [r3, #8]
    }
  }

  /*---------------------------- SMBUSx CR2 Configuration ------------------------*/
  /* Configure SMBUSx: Addressing Master mode */
  if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_10BIT)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	691b      	ldr	r3, [r3, #16]
 80071cc:	2b02      	cmp	r3, #2
 80071ce:	d104      	bne.n	80071da <HAL_SMBUS_Init+0xc6>
  {
    hsmbus->Instance->CR2 = (I2C_CR2_ADD10);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80071d8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process) */
  /* AUTOEND and NACK bit will be manage during Transfer process */
  hsmbus->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	687a      	ldr	r2, [r7, #4]
 80071e2:	6812      	ldr	r2, [r2, #0]
 80071e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80071e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071ec:	6053      	str	r3, [r2, #4]

  /*---------------------------- SMBUSx OAR2 Configuration -----------------------*/
  /* Configure SMBUSx: Dual mode and Own Address2 */
  hsmbus->Instance->OAR2 = (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2 | \
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	695a      	ldr	r2, [r3, #20]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	699b      	ldr	r3, [r3, #24]
 80071f6:	ea42 0103 	orr.w	r1, r2, r3
                            (hsmbus->Init.OwnAddress2Masks << 8U));
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	69db      	ldr	r3, [r3, #28]
 80071fe:	021a      	lsls	r2, r3, #8
  hsmbus->Instance->OAR2 = (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2 | \
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	430a      	orrs	r2, r1
 8007206:	60da      	str	r2, [r3, #12]

  /*---------------------------- SMBUSx CR1 Configuration ------------------------*/
  /* Configure SMBUSx: Generalcall and NoStretch mode */
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6a1a      	ldr	r2, [r3, #32]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007210:	431a      	orrs	r2, r3
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 8007216:	431a      	orrs	r2, r3
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800721c:	ea42 0103 	orr.w	r1, r2, r3
                           hsmbus->Init.AnalogFilter);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	689a      	ldr	r2, [r3, #8]
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 8007228:	430a      	orrs	r2, r1
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 800722a:	601a      	str	r2, [r3, #0]

  /* Enable Slave Byte Control only in case of Packet Error Check is enabled
     and SMBUS Peripheral is set in Slave mode */
  if ((hsmbus->Init.PacketErrorCheckMode == SMBUS_PEC_ENABLE) && \
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007230:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007234:	d110      	bne.n	8007258 <HAL_SMBUS_Init+0x144>
      ((hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE) || \
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  if ((hsmbus->Init.PacketErrorCheckMode == SMBUS_PEC_ENABLE) && \
 800723a:	2b00      	cmp	r3, #0
 800723c:	d004      	beq.n	8007248 <HAL_SMBUS_Init+0x134>
       (hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE_ARP)))
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      ((hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE) || \
 8007242:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007246:	d107      	bne.n	8007258 <HAL_SMBUS_Init+0x144>
  {
    hsmbus->Instance->CR1 |= I2C_CR1_SBC;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	681a      	ldr	r2, [r3, #0]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007256:	601a      	str	r2, [r3, #0]
  }

  /* Enable the selected SMBUS peripheral */
  __HAL_SMBUS_ENABLE(hsmbus);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	681a      	ldr	r2, [r3, #0]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f042 0201 	orr.w	r2, r2, #1
 8007266:	601a      	str	r2, [r3, #0]

  hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2200      	movs	r2, #0
 800726c:	64da      	str	r2, [r3, #76]	; 0x4c
  hsmbus->PreviousState = HAL_SMBUS_STATE_READY;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2201      	movs	r2, #1
 8007272:	641a      	str	r2, [r3, #64]	; 0x40
  hsmbus->State = HAL_SMBUS_STATE_READY;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2201      	movs	r2, #1
 8007278:	649a      	str	r2, [r3, #72]	; 0x48

  return HAL_OK;
 800727a:	2300      	movs	r3, #0
}
 800727c:	4618      	mov	r0, r3
 800727e:	3708      	adds	r7, #8
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}

08007284 <HAL_SMBUS_EnableAlert_IT>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUSx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_EnableAlert_IT(SMBUS_HandleTypeDef *hsmbus)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b082      	sub	sp, #8
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  /* Enable SMBus alert */
  hsmbus->Instance->CR1 |= I2C_CR1_ALERTEN;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	681a      	ldr	r2, [r3, #0]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800729a:	601a      	str	r2, [r3, #0]

  /* Clear ALERT flag */
  __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_ALERT);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80072a4:	61da      	str	r2, [r3, #28]

  /* Enable Alert Interrupt */
  SMBUS_Enable_IRQ(hsmbus, SMBUS_IT_ALERT);
 80072a6:	2180      	movs	r1, #128	; 0x80
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f000 f805 	bl	80072b8 <SMBUS_Enable_IRQ>

  return HAL_OK;
 80072ae:	2300      	movs	r3, #0
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	3708      	adds	r7, #8
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}

080072b8 <SMBUS_Enable_IRQ>:
  *                the configuration information for the specified SMBUS.
  * @param  InterruptRequest Value of @ref SMBUS_Interrupt_configuration_definition.
  * @retval HAL status
  */
static void SMBUS_Enable_IRQ(SMBUS_HandleTypeDef *hsmbus, uint32_t InterruptRequest)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b085      	sub	sp, #20
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
 80072c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpisr = 0UL;
 80072c2:	2300      	movs	r3, #0
 80072c4:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & SMBUS_IT_ALERT) == SMBUS_IT_ALERT)
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d003      	beq.n	80072d8 <SMBUS_Enable_IRQ+0x20>
  {
    /* Enable ERR interrupt */
    tmpisr |= SMBUS_IT_ERRI;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072d6:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_ADDR) == SMBUS_IT_ADDR)
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80072de:	2b38      	cmp	r3, #56	; 0x38
 80072e0:	d103      	bne.n	80072ea <SMBUS_Enable_IRQ+0x32>
  {
    /* Enable ADDR, STOP interrupt */
    tmpisr |= SMBUS_IT_ADDRI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_ERRI;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80072e8:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_TX) == SMBUS_IT_TX)
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 80072f0:	2bf2      	cmp	r3, #242	; 0xf2
 80072f2:	d103      	bne.n	80072fc <SMBUS_Enable_IRQ+0x44>
  {
    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    tmpisr |= SMBUS_IT_ERRI | SMBUS_IT_TCI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_TXI;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 80072fa:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_RX) == SMBUS_IT_RX)
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	f003 03d4 	and.w	r3, r3, #212	; 0xd4
 8007302:	2bd4      	cmp	r3, #212	; 0xd4
 8007304:	d103      	bne.n	800730e <SMBUS_Enable_IRQ+0x56>
  {
    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    tmpisr |= SMBUS_IT_ERRI | SMBUS_IT_TCI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_RXI;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800730c:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of SMBUS interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_SMBUS_ENABLE_IT(hsmbus, tmpisr);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	6819      	ldr	r1, [r3, #0]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	68fa      	ldr	r2, [r7, #12]
 800731a:	430a      	orrs	r2, r1
 800731c:	601a      	str	r2, [r3, #0]
}
 800731e:	bf00      	nop
 8007320:	3714      	adds	r7, #20
 8007322:	46bd      	mov	sp, r7
 8007324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007328:	4770      	bx	lr

0800732a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800732a:	b580      	push	{r7, lr}
 800732c:	b084      	sub	sp, #16
 800732e:	af00      	add	r7, sp, #0
 8007330:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d101      	bne.n	800733c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007338:	2301      	movs	r3, #1
 800733a:	e095      	b.n	8007468 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007340:	2b00      	cmp	r3, #0
 8007342:	d108      	bne.n	8007356 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800734c:	d009      	beq.n	8007362 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2200      	movs	r2, #0
 8007352:	61da      	str	r2, [r3, #28]
 8007354:	e005      	b.n	8007362 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2200      	movs	r2, #0
 800735a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2200      	movs	r2, #0
 8007360:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2200      	movs	r2, #0
 8007366:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800736e:	b2db      	uxtb	r3, r3
 8007370:	2b00      	cmp	r3, #0
 8007372:	d106      	bne.n	8007382 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2200      	movs	r2, #0
 8007378:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f7fa fd65 	bl	8001e4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2202      	movs	r2, #2
 8007386:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	681a      	ldr	r2, [r3, #0]
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007398:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	68db      	ldr	r3, [r3, #12]
 800739e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80073a2:	d902      	bls.n	80073aa <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80073a4:	2300      	movs	r3, #0
 80073a6:	60fb      	str	r3, [r7, #12]
 80073a8:	e002      	b.n	80073b0 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80073aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80073ae:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	68db      	ldr	r3, [r3, #12]
 80073b4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80073b8:	d007      	beq.n	80073ca <HAL_SPI_Init+0xa0>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	68db      	ldr	r3, [r3, #12]
 80073be:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80073c2:	d002      	beq.n	80073ca <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2200      	movs	r2, #0
 80073c8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	685b      	ldr	r3, [r3, #4]
 80073ce:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	689b      	ldr	r3, [r3, #8]
 80073d6:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80073da:	431a      	orrs	r2, r3
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	691b      	ldr	r3, [r3, #16]
 80073e0:	f003 0302 	and.w	r3, r3, #2
 80073e4:	431a      	orrs	r2, r3
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	695b      	ldr	r3, [r3, #20]
 80073ea:	f003 0301 	and.w	r3, r3, #1
 80073ee:	431a      	orrs	r2, r3
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	699b      	ldr	r3, [r3, #24]
 80073f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80073f8:	431a      	orrs	r2, r3
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	69db      	ldr	r3, [r3, #28]
 80073fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007402:	431a      	orrs	r2, r3
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6a1b      	ldr	r3, [r3, #32]
 8007408:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800740c:	ea42 0103 	orr.w	r1, r2, r3
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007414:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	430a      	orrs	r2, r1
 800741e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	699b      	ldr	r3, [r3, #24]
 8007424:	0c1b      	lsrs	r3, r3, #16
 8007426:	f003 0204 	and.w	r2, r3, #4
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800742e:	f003 0310 	and.w	r3, r3, #16
 8007432:	431a      	orrs	r2, r3
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007438:	f003 0308 	and.w	r3, r3, #8
 800743c:	431a      	orrs	r2, r3
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	68db      	ldr	r3, [r3, #12]
 8007442:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007446:	ea42 0103 	orr.w	r1, r2, r3
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	430a      	orrs	r2, r1
 8007456:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2200      	movs	r2, #0
 800745c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2201      	movs	r2, #1
 8007462:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007466:	2300      	movs	r3, #0
}
 8007468:	4618      	mov	r0, r3
 800746a:	3710      	adds	r7, #16
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}

08007470 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b082      	sub	sp, #8
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d101      	bne.n	8007482 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800747e:	2301      	movs	r3, #1
 8007480:	e049      	b.n	8007516 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007488:	b2db      	uxtb	r3, r3
 800748a:	2b00      	cmp	r3, #0
 800748c:	d106      	bne.n	800749c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2200      	movs	r2, #0
 8007492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f7fa fdce 	bl	8002038 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2202      	movs	r2, #2
 80074a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681a      	ldr	r2, [r3, #0]
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	3304      	adds	r3, #4
 80074ac:	4619      	mov	r1, r3
 80074ae:	4610      	mov	r0, r2
 80074b0:	f000 ff0a 	bl	80082c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2201      	movs	r2, #1
 80074b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2201      	movs	r2, #1
 80074c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2201      	movs	r2, #1
 80074c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2201      	movs	r2, #1
 80074d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2201      	movs	r2, #1
 80074d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2201      	movs	r2, #1
 80074e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2201      	movs	r2, #1
 80074e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2201      	movs	r2, #1
 80074f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2201      	movs	r2, #1
 80074f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2201      	movs	r2, #1
 8007500:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2201      	movs	r2, #1
 8007508:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2201      	movs	r2, #1
 8007510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007514:	2300      	movs	r3, #0
}
 8007516:	4618      	mov	r0, r3
 8007518:	3708      	adds	r7, #8
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}

0800751e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800751e:	b580      	push	{r7, lr}
 8007520:	b082      	sub	sp, #8
 8007522:	af00      	add	r7, sp, #0
 8007524:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d101      	bne.n	8007530 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800752c:	2301      	movs	r3, #1
 800752e:	e049      	b.n	80075c4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007536:	b2db      	uxtb	r3, r3
 8007538:	2b00      	cmp	r3, #0
 800753a:	d106      	bne.n	800754a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2200      	movs	r2, #0
 8007540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f7fa fcf5 	bl	8001f34 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2202      	movs	r2, #2
 800754e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681a      	ldr	r2, [r3, #0]
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	3304      	adds	r3, #4
 800755a:	4619      	mov	r1, r3
 800755c:	4610      	mov	r0, r2
 800755e:	f000 feb3 	bl	80082c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2201      	movs	r2, #1
 8007566:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2201      	movs	r2, #1
 800756e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2201      	movs	r2, #1
 8007576:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2201      	movs	r2, #1
 800757e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2201      	movs	r2, #1
 8007586:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2201      	movs	r2, #1
 800758e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2201      	movs	r2, #1
 8007596:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2201      	movs	r2, #1
 800759e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2201      	movs	r2, #1
 80075a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2201      	movs	r2, #1
 80075ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2201      	movs	r2, #1
 80075b6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2201      	movs	r2, #1
 80075be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80075c2:	2300      	movs	r3, #0
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3708      	adds	r7, #8
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}

080075cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b084      	sub	sp, #16
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
 80075d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d109      	bne.n	80075f0 <HAL_TIM_PWM_Start+0x24>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80075e2:	b2db      	uxtb	r3, r3
 80075e4:	2b01      	cmp	r3, #1
 80075e6:	bf14      	ite	ne
 80075e8:	2301      	movne	r3, #1
 80075ea:	2300      	moveq	r3, #0
 80075ec:	b2db      	uxtb	r3, r3
 80075ee:	e03c      	b.n	800766a <HAL_TIM_PWM_Start+0x9e>
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	2b04      	cmp	r3, #4
 80075f4:	d109      	bne.n	800760a <HAL_TIM_PWM_Start+0x3e>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80075fc:	b2db      	uxtb	r3, r3
 80075fe:	2b01      	cmp	r3, #1
 8007600:	bf14      	ite	ne
 8007602:	2301      	movne	r3, #1
 8007604:	2300      	moveq	r3, #0
 8007606:	b2db      	uxtb	r3, r3
 8007608:	e02f      	b.n	800766a <HAL_TIM_PWM_Start+0x9e>
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	2b08      	cmp	r3, #8
 800760e:	d109      	bne.n	8007624 <HAL_TIM_PWM_Start+0x58>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007616:	b2db      	uxtb	r3, r3
 8007618:	2b01      	cmp	r3, #1
 800761a:	bf14      	ite	ne
 800761c:	2301      	movne	r3, #1
 800761e:	2300      	moveq	r3, #0
 8007620:	b2db      	uxtb	r3, r3
 8007622:	e022      	b.n	800766a <HAL_TIM_PWM_Start+0x9e>
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	2b0c      	cmp	r3, #12
 8007628:	d109      	bne.n	800763e <HAL_TIM_PWM_Start+0x72>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007630:	b2db      	uxtb	r3, r3
 8007632:	2b01      	cmp	r3, #1
 8007634:	bf14      	ite	ne
 8007636:	2301      	movne	r3, #1
 8007638:	2300      	moveq	r3, #0
 800763a:	b2db      	uxtb	r3, r3
 800763c:	e015      	b.n	800766a <HAL_TIM_PWM_Start+0x9e>
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	2b10      	cmp	r3, #16
 8007642:	d109      	bne.n	8007658 <HAL_TIM_PWM_Start+0x8c>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800764a:	b2db      	uxtb	r3, r3
 800764c:	2b01      	cmp	r3, #1
 800764e:	bf14      	ite	ne
 8007650:	2301      	movne	r3, #1
 8007652:	2300      	moveq	r3, #0
 8007654:	b2db      	uxtb	r3, r3
 8007656:	e008      	b.n	800766a <HAL_TIM_PWM_Start+0x9e>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800765e:	b2db      	uxtb	r3, r3
 8007660:	2b01      	cmp	r3, #1
 8007662:	bf14      	ite	ne
 8007664:	2301      	movne	r3, #1
 8007666:	2300      	moveq	r3, #0
 8007668:	b2db      	uxtb	r3, r3
 800766a:	2b00      	cmp	r3, #0
 800766c:	d001      	beq.n	8007672 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800766e:	2301      	movs	r3, #1
 8007670:	e09c      	b.n	80077ac <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d104      	bne.n	8007682 <HAL_TIM_PWM_Start+0xb6>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2202      	movs	r2, #2
 800767c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007680:	e023      	b.n	80076ca <HAL_TIM_PWM_Start+0xfe>
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	2b04      	cmp	r3, #4
 8007686:	d104      	bne.n	8007692 <HAL_TIM_PWM_Start+0xc6>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2202      	movs	r2, #2
 800768c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007690:	e01b      	b.n	80076ca <HAL_TIM_PWM_Start+0xfe>
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	2b08      	cmp	r3, #8
 8007696:	d104      	bne.n	80076a2 <HAL_TIM_PWM_Start+0xd6>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2202      	movs	r2, #2
 800769c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80076a0:	e013      	b.n	80076ca <HAL_TIM_PWM_Start+0xfe>
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	2b0c      	cmp	r3, #12
 80076a6:	d104      	bne.n	80076b2 <HAL_TIM_PWM_Start+0xe6>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2202      	movs	r2, #2
 80076ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80076b0:	e00b      	b.n	80076ca <HAL_TIM_PWM_Start+0xfe>
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	2b10      	cmp	r3, #16
 80076b6:	d104      	bne.n	80076c2 <HAL_TIM_PWM_Start+0xf6>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2202      	movs	r2, #2
 80076bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80076c0:	e003      	b.n	80076ca <HAL_TIM_PWM_Start+0xfe>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2202      	movs	r2, #2
 80076c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	2201      	movs	r2, #1
 80076d0:	6839      	ldr	r1, [r7, #0]
 80076d2:	4618      	mov	r0, r3
 80076d4:	f001 fb26 	bl	8008d24 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4a35      	ldr	r2, [pc, #212]	; (80077b4 <HAL_TIM_PWM_Start+0x1e8>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d013      	beq.n	800770a <HAL_TIM_PWM_Start+0x13e>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4a34      	ldr	r2, [pc, #208]	; (80077b8 <HAL_TIM_PWM_Start+0x1ec>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d00e      	beq.n	800770a <HAL_TIM_PWM_Start+0x13e>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4a32      	ldr	r2, [pc, #200]	; (80077bc <HAL_TIM_PWM_Start+0x1f0>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d009      	beq.n	800770a <HAL_TIM_PWM_Start+0x13e>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4a31      	ldr	r2, [pc, #196]	; (80077c0 <HAL_TIM_PWM_Start+0x1f4>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d004      	beq.n	800770a <HAL_TIM_PWM_Start+0x13e>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	4a2f      	ldr	r2, [pc, #188]	; (80077c4 <HAL_TIM_PWM_Start+0x1f8>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d101      	bne.n	800770e <HAL_TIM_PWM_Start+0x142>
 800770a:	2301      	movs	r3, #1
 800770c:	e000      	b.n	8007710 <HAL_TIM_PWM_Start+0x144>
 800770e:	2300      	movs	r3, #0
 8007710:	2b00      	cmp	r3, #0
 8007712:	d007      	beq.n	8007724 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007722:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a22      	ldr	r2, [pc, #136]	; (80077b4 <HAL_TIM_PWM_Start+0x1e8>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d01d      	beq.n	800776a <HAL_TIM_PWM_Start+0x19e>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007736:	d018      	beq.n	800776a <HAL_TIM_PWM_Start+0x19e>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4a22      	ldr	r2, [pc, #136]	; (80077c8 <HAL_TIM_PWM_Start+0x1fc>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d013      	beq.n	800776a <HAL_TIM_PWM_Start+0x19e>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4a21      	ldr	r2, [pc, #132]	; (80077cc <HAL_TIM_PWM_Start+0x200>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d00e      	beq.n	800776a <HAL_TIM_PWM_Start+0x19e>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a1f      	ldr	r2, [pc, #124]	; (80077d0 <HAL_TIM_PWM_Start+0x204>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d009      	beq.n	800776a <HAL_TIM_PWM_Start+0x19e>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4a17      	ldr	r2, [pc, #92]	; (80077b8 <HAL_TIM_PWM_Start+0x1ec>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d004      	beq.n	800776a <HAL_TIM_PWM_Start+0x19e>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a15      	ldr	r2, [pc, #84]	; (80077bc <HAL_TIM_PWM_Start+0x1f0>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d115      	bne.n	8007796 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	689a      	ldr	r2, [r3, #8]
 8007770:	4b18      	ldr	r3, [pc, #96]	; (80077d4 <HAL_TIM_PWM_Start+0x208>)
 8007772:	4013      	ands	r3, r2
 8007774:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	2b06      	cmp	r3, #6
 800777a:	d015      	beq.n	80077a8 <HAL_TIM_PWM_Start+0x1dc>
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007782:	d011      	beq.n	80077a8 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	681a      	ldr	r2, [r3, #0]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f042 0201 	orr.w	r2, r2, #1
 8007792:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007794:	e008      	b.n	80077a8 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	681a      	ldr	r2, [r3, #0]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f042 0201 	orr.w	r2, r2, #1
 80077a4:	601a      	str	r2, [r3, #0]
 80077a6:	e000      	b.n	80077aa <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077a8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80077aa:	2300      	movs	r3, #0
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	3710      	adds	r7, #16
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}
 80077b4:	40012c00 	.word	0x40012c00
 80077b8:	40013400 	.word	0x40013400
 80077bc:	40014000 	.word	0x40014000
 80077c0:	40014400 	.word	0x40014400
 80077c4:	40014800 	.word	0x40014800
 80077c8:	40000400 	.word	0x40000400
 80077cc:	40000800 	.word	0x40000800
 80077d0:	40000c00 	.word	0x40000c00
 80077d4:	00010007 	.word	0x00010007

080077d8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b082      	sub	sp, #8
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d101      	bne.n	80077ea <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80077e6:	2301      	movs	r3, #1
 80077e8:	e049      	b.n	800787e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077f0:	b2db      	uxtb	r3, r3
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d106      	bne.n	8007804 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2200      	movs	r2, #0
 80077fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f000 f841 	bl	8007886 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2202      	movs	r2, #2
 8007808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681a      	ldr	r2, [r3, #0]
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	3304      	adds	r3, #4
 8007814:	4619      	mov	r1, r3
 8007816:	4610      	mov	r0, r2
 8007818:	f000 fd56 	bl	80082c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2201      	movs	r2, #1
 8007820:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2201      	movs	r2, #1
 8007828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2201      	movs	r2, #1
 8007830:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2201      	movs	r2, #1
 8007838:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2201      	movs	r2, #1
 8007840:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2201      	movs	r2, #1
 8007848:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2201      	movs	r2, #1
 8007850:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2201      	movs	r2, #1
 8007858:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2201      	movs	r2, #1
 8007860:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2201      	movs	r2, #1
 8007868:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2201      	movs	r2, #1
 8007870:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2201      	movs	r2, #1
 8007878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800787c:	2300      	movs	r3, #0
}
 800787e:	4618      	mov	r0, r3
 8007880:	3708      	adds	r7, #8
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}

08007886 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8007886:	b480      	push	{r7}
 8007888:	b083      	sub	sp, #12
 800788a:	af00      	add	r7, sp, #0
 800788c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800788e:	bf00      	nop
 8007890:	370c      	adds	r7, #12
 8007892:	46bd      	mov	sp, r7
 8007894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007898:	4770      	bx	lr
	...

0800789c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b084      	sub	sp, #16
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
 80078a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80078a6:	2300      	movs	r3, #0
 80078a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d104      	bne.n	80078ba <HAL_TIM_IC_Start_IT+0x1e>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80078b6:	b2db      	uxtb	r3, r3
 80078b8:	e023      	b.n	8007902 <HAL_TIM_IC_Start_IT+0x66>
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	2b04      	cmp	r3, #4
 80078be:	d104      	bne.n	80078ca <HAL_TIM_IC_Start_IT+0x2e>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80078c6:	b2db      	uxtb	r3, r3
 80078c8:	e01b      	b.n	8007902 <HAL_TIM_IC_Start_IT+0x66>
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	2b08      	cmp	r3, #8
 80078ce:	d104      	bne.n	80078da <HAL_TIM_IC_Start_IT+0x3e>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80078d6:	b2db      	uxtb	r3, r3
 80078d8:	e013      	b.n	8007902 <HAL_TIM_IC_Start_IT+0x66>
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	2b0c      	cmp	r3, #12
 80078de:	d104      	bne.n	80078ea <HAL_TIM_IC_Start_IT+0x4e>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80078e6:	b2db      	uxtb	r3, r3
 80078e8:	e00b      	b.n	8007902 <HAL_TIM_IC_Start_IT+0x66>
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	2b10      	cmp	r3, #16
 80078ee:	d104      	bne.n	80078fa <HAL_TIM_IC_Start_IT+0x5e>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80078f6:	b2db      	uxtb	r3, r3
 80078f8:	e003      	b.n	8007902 <HAL_TIM_IC_Start_IT+0x66>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007900:	b2db      	uxtb	r3, r3
 8007902:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d104      	bne.n	8007914 <HAL_TIM_IC_Start_IT+0x78>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007910:	b2db      	uxtb	r3, r3
 8007912:	e013      	b.n	800793c <HAL_TIM_IC_Start_IT+0xa0>
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	2b04      	cmp	r3, #4
 8007918:	d104      	bne.n	8007924 <HAL_TIM_IC_Start_IT+0x88>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007920:	b2db      	uxtb	r3, r3
 8007922:	e00b      	b.n	800793c <HAL_TIM_IC_Start_IT+0xa0>
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	2b08      	cmp	r3, #8
 8007928:	d104      	bne.n	8007934 <HAL_TIM_IC_Start_IT+0x98>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007930:	b2db      	uxtb	r3, r3
 8007932:	e003      	b.n	800793c <HAL_TIM_IC_Start_IT+0xa0>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800793a:	b2db      	uxtb	r3, r3
 800793c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800793e:	7bbb      	ldrb	r3, [r7, #14]
 8007940:	2b01      	cmp	r3, #1
 8007942:	d102      	bne.n	800794a <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007944:	7b7b      	ldrb	r3, [r7, #13]
 8007946:	2b01      	cmp	r3, #1
 8007948:	d001      	beq.n	800794e <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800794a:	2301      	movs	r3, #1
 800794c:	e0dd      	b.n	8007b0a <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d104      	bne.n	800795e <HAL_TIM_IC_Start_IT+0xc2>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2202      	movs	r2, #2
 8007958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800795c:	e023      	b.n	80079a6 <HAL_TIM_IC_Start_IT+0x10a>
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	2b04      	cmp	r3, #4
 8007962:	d104      	bne.n	800796e <HAL_TIM_IC_Start_IT+0xd2>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2202      	movs	r2, #2
 8007968:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800796c:	e01b      	b.n	80079a6 <HAL_TIM_IC_Start_IT+0x10a>
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	2b08      	cmp	r3, #8
 8007972:	d104      	bne.n	800797e <HAL_TIM_IC_Start_IT+0xe2>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2202      	movs	r2, #2
 8007978:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800797c:	e013      	b.n	80079a6 <HAL_TIM_IC_Start_IT+0x10a>
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	2b0c      	cmp	r3, #12
 8007982:	d104      	bne.n	800798e <HAL_TIM_IC_Start_IT+0xf2>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2202      	movs	r2, #2
 8007988:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800798c:	e00b      	b.n	80079a6 <HAL_TIM_IC_Start_IT+0x10a>
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	2b10      	cmp	r3, #16
 8007992:	d104      	bne.n	800799e <HAL_TIM_IC_Start_IT+0x102>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2202      	movs	r2, #2
 8007998:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800799c:	e003      	b.n	80079a6 <HAL_TIM_IC_Start_IT+0x10a>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2202      	movs	r2, #2
 80079a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d104      	bne.n	80079b6 <HAL_TIM_IC_Start_IT+0x11a>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2202      	movs	r2, #2
 80079b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80079b4:	e013      	b.n	80079de <HAL_TIM_IC_Start_IT+0x142>
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	2b04      	cmp	r3, #4
 80079ba:	d104      	bne.n	80079c6 <HAL_TIM_IC_Start_IT+0x12a>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2202      	movs	r2, #2
 80079c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80079c4:	e00b      	b.n	80079de <HAL_TIM_IC_Start_IT+0x142>
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	2b08      	cmp	r3, #8
 80079ca:	d104      	bne.n	80079d6 <HAL_TIM_IC_Start_IT+0x13a>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2202      	movs	r2, #2
 80079d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80079d4:	e003      	b.n	80079de <HAL_TIM_IC_Start_IT+0x142>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2202      	movs	r2, #2
 80079da:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	2b0c      	cmp	r3, #12
 80079e2:	d841      	bhi.n	8007a68 <HAL_TIM_IC_Start_IT+0x1cc>
 80079e4:	a201      	add	r2, pc, #4	; (adr r2, 80079ec <HAL_TIM_IC_Start_IT+0x150>)
 80079e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ea:	bf00      	nop
 80079ec:	08007a21 	.word	0x08007a21
 80079f0:	08007a69 	.word	0x08007a69
 80079f4:	08007a69 	.word	0x08007a69
 80079f8:	08007a69 	.word	0x08007a69
 80079fc:	08007a33 	.word	0x08007a33
 8007a00:	08007a69 	.word	0x08007a69
 8007a04:	08007a69 	.word	0x08007a69
 8007a08:	08007a69 	.word	0x08007a69
 8007a0c:	08007a45 	.word	0x08007a45
 8007a10:	08007a69 	.word	0x08007a69
 8007a14:	08007a69 	.word	0x08007a69
 8007a18:	08007a69 	.word	0x08007a69
 8007a1c:	08007a57 	.word	0x08007a57
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	68da      	ldr	r2, [r3, #12]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f042 0202 	orr.w	r2, r2, #2
 8007a2e:	60da      	str	r2, [r3, #12]
      break;
 8007a30:	e01d      	b.n	8007a6e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	68da      	ldr	r2, [r3, #12]
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f042 0204 	orr.w	r2, r2, #4
 8007a40:	60da      	str	r2, [r3, #12]
      break;
 8007a42:	e014      	b.n	8007a6e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	68da      	ldr	r2, [r3, #12]
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f042 0208 	orr.w	r2, r2, #8
 8007a52:	60da      	str	r2, [r3, #12]
      break;
 8007a54:	e00b      	b.n	8007a6e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	68da      	ldr	r2, [r3, #12]
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f042 0210 	orr.w	r2, r2, #16
 8007a64:	60da      	str	r2, [r3, #12]
      break;
 8007a66:	e002      	b.n	8007a6e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8007a68:	2301      	movs	r3, #1
 8007a6a:	73fb      	strb	r3, [r7, #15]
      break;
 8007a6c:	bf00      	nop
  }

  if (status == HAL_OK)
 8007a6e:	7bfb      	ldrb	r3, [r7, #15]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d149      	bne.n	8007b08 <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	2201      	movs	r2, #1
 8007a7a:	6839      	ldr	r1, [r7, #0]
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	f001 f951 	bl	8008d24 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	4a23      	ldr	r2, [pc, #140]	; (8007b14 <HAL_TIM_IC_Start_IT+0x278>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d01d      	beq.n	8007ac8 <HAL_TIM_IC_Start_IT+0x22c>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a94:	d018      	beq.n	8007ac8 <HAL_TIM_IC_Start_IT+0x22c>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	4a1f      	ldr	r2, [pc, #124]	; (8007b18 <HAL_TIM_IC_Start_IT+0x27c>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d013      	beq.n	8007ac8 <HAL_TIM_IC_Start_IT+0x22c>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4a1d      	ldr	r2, [pc, #116]	; (8007b1c <HAL_TIM_IC_Start_IT+0x280>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d00e      	beq.n	8007ac8 <HAL_TIM_IC_Start_IT+0x22c>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	4a1c      	ldr	r2, [pc, #112]	; (8007b20 <HAL_TIM_IC_Start_IT+0x284>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d009      	beq.n	8007ac8 <HAL_TIM_IC_Start_IT+0x22c>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	4a1a      	ldr	r2, [pc, #104]	; (8007b24 <HAL_TIM_IC_Start_IT+0x288>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d004      	beq.n	8007ac8 <HAL_TIM_IC_Start_IT+0x22c>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	4a19      	ldr	r2, [pc, #100]	; (8007b28 <HAL_TIM_IC_Start_IT+0x28c>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d115      	bne.n	8007af4 <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	689a      	ldr	r2, [r3, #8]
 8007ace:	4b17      	ldr	r3, [pc, #92]	; (8007b2c <HAL_TIM_IC_Start_IT+0x290>)
 8007ad0:	4013      	ands	r3, r2
 8007ad2:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	2b06      	cmp	r3, #6
 8007ad8:	d015      	beq.n	8007b06 <HAL_TIM_IC_Start_IT+0x26a>
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ae0:	d011      	beq.n	8007b06 <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	681a      	ldr	r2, [r3, #0]
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f042 0201 	orr.w	r2, r2, #1
 8007af0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007af2:	e008      	b.n	8007b06 <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	681a      	ldr	r2, [r3, #0]
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f042 0201 	orr.w	r2, r2, #1
 8007b02:	601a      	str	r2, [r3, #0]
 8007b04:	e000      	b.n	8007b08 <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b06:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8007b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	3710      	adds	r7, #16
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}
 8007b12:	bf00      	nop
 8007b14:	40012c00 	.word	0x40012c00
 8007b18:	40000400 	.word	0x40000400
 8007b1c:	40000800 	.word	0x40000800
 8007b20:	40000c00 	.word	0x40000c00
 8007b24:	40013400 	.word	0x40013400
 8007b28:	40014000 	.word	0x40014000
 8007b2c:	00010007 	.word	0x00010007

08007b30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b082      	sub	sp, #8
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	691b      	ldr	r3, [r3, #16]
 8007b3e:	f003 0302 	and.w	r3, r3, #2
 8007b42:	2b02      	cmp	r3, #2
 8007b44:	d122      	bne.n	8007b8c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	68db      	ldr	r3, [r3, #12]
 8007b4c:	f003 0302 	and.w	r3, r3, #2
 8007b50:	2b02      	cmp	r3, #2
 8007b52:	d11b      	bne.n	8007b8c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f06f 0202 	mvn.w	r2, #2
 8007b5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2201      	movs	r2, #1
 8007b62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	699b      	ldr	r3, [r3, #24]
 8007b6a:	f003 0303 	and.w	r3, r3, #3
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d003      	beq.n	8007b7a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f000 fb89 	bl	800828a <HAL_TIM_IC_CaptureCallback>
 8007b78:	e005      	b.n	8007b86 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f000 fb7b 	bl	8008276 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	f000 fb8c 	bl	800829e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	691b      	ldr	r3, [r3, #16]
 8007b92:	f003 0304 	and.w	r3, r3, #4
 8007b96:	2b04      	cmp	r3, #4
 8007b98:	d122      	bne.n	8007be0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	68db      	ldr	r3, [r3, #12]
 8007ba0:	f003 0304 	and.w	r3, r3, #4
 8007ba4:	2b04      	cmp	r3, #4
 8007ba6:	d11b      	bne.n	8007be0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f06f 0204 	mvn.w	r2, #4
 8007bb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2202      	movs	r2, #2
 8007bb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	699b      	ldr	r3, [r3, #24]
 8007bbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d003      	beq.n	8007bce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f000 fb5f 	bl	800828a <HAL_TIM_IC_CaptureCallback>
 8007bcc:	e005      	b.n	8007bda <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f000 fb51 	bl	8008276 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f000 fb62 	bl	800829e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	691b      	ldr	r3, [r3, #16]
 8007be6:	f003 0308 	and.w	r3, r3, #8
 8007bea:	2b08      	cmp	r3, #8
 8007bec:	d122      	bne.n	8007c34 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	68db      	ldr	r3, [r3, #12]
 8007bf4:	f003 0308 	and.w	r3, r3, #8
 8007bf8:	2b08      	cmp	r3, #8
 8007bfa:	d11b      	bne.n	8007c34 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f06f 0208 	mvn.w	r2, #8
 8007c04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2204      	movs	r2, #4
 8007c0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	69db      	ldr	r3, [r3, #28]
 8007c12:	f003 0303 	and.w	r3, r3, #3
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d003      	beq.n	8007c22 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f000 fb35 	bl	800828a <HAL_TIM_IC_CaptureCallback>
 8007c20:	e005      	b.n	8007c2e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f000 fb27 	bl	8008276 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f000 fb38 	bl	800829e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2200      	movs	r2, #0
 8007c32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	691b      	ldr	r3, [r3, #16]
 8007c3a:	f003 0310 	and.w	r3, r3, #16
 8007c3e:	2b10      	cmp	r3, #16
 8007c40:	d122      	bne.n	8007c88 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	68db      	ldr	r3, [r3, #12]
 8007c48:	f003 0310 	and.w	r3, r3, #16
 8007c4c:	2b10      	cmp	r3, #16
 8007c4e:	d11b      	bne.n	8007c88 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f06f 0210 	mvn.w	r2, #16
 8007c58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2208      	movs	r2, #8
 8007c5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	69db      	ldr	r3, [r3, #28]
 8007c66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d003      	beq.n	8007c76 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f000 fb0b 	bl	800828a <HAL_TIM_IC_CaptureCallback>
 8007c74:	e005      	b.n	8007c82 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f000 fafd 	bl	8008276 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f000 fb0e 	bl	800829e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2200      	movs	r2, #0
 8007c86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	691b      	ldr	r3, [r3, #16]
 8007c8e:	f003 0301 	and.w	r3, r3, #1
 8007c92:	2b01      	cmp	r3, #1
 8007c94:	d10e      	bne.n	8007cb4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	68db      	ldr	r3, [r3, #12]
 8007c9c:	f003 0301 	and.w	r3, r3, #1
 8007ca0:	2b01      	cmp	r3, #1
 8007ca2:	d107      	bne.n	8007cb4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f06f 0201 	mvn.w	r2, #1
 8007cac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f000 fad7 	bl	8008262 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	691b      	ldr	r3, [r3, #16]
 8007cba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cbe:	2b80      	cmp	r3, #128	; 0x80
 8007cc0:	d10e      	bne.n	8007ce0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	68db      	ldr	r3, [r3, #12]
 8007cc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ccc:	2b80      	cmp	r3, #128	; 0x80
 8007cce:	d107      	bne.n	8007ce0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007cd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f001 fa1e 	bl	800911c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	691b      	ldr	r3, [r3, #16]
 8007ce6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007cee:	d10e      	bne.n	8007d0e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	68db      	ldr	r3, [r3, #12]
 8007cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cfa:	2b80      	cmp	r3, #128	; 0x80
 8007cfc:	d107      	bne.n	8007d0e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007d06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f001 fa11 	bl	8009130 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	691b      	ldr	r3, [r3, #16]
 8007d14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d18:	2b40      	cmp	r3, #64	; 0x40
 8007d1a:	d10e      	bne.n	8007d3a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	68db      	ldr	r3, [r3, #12]
 8007d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d26:	2b40      	cmp	r3, #64	; 0x40
 8007d28:	d107      	bne.n	8007d3a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007d32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f000 fabc 	bl	80082b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	691b      	ldr	r3, [r3, #16]
 8007d40:	f003 0320 	and.w	r3, r3, #32
 8007d44:	2b20      	cmp	r3, #32
 8007d46:	d10e      	bne.n	8007d66 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	68db      	ldr	r3, [r3, #12]
 8007d4e:	f003 0320 	and.w	r3, r3, #32
 8007d52:	2b20      	cmp	r3, #32
 8007d54:	d107      	bne.n	8007d66 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f06f 0220 	mvn.w	r2, #32
 8007d5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f001 f9d1 	bl	8009108 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007d66:	bf00      	nop
 8007d68:	3708      	adds	r7, #8
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}

08007d6e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007d6e:	b580      	push	{r7, lr}
 8007d70:	b086      	sub	sp, #24
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	60f8      	str	r0, [r7, #12]
 8007d76:	60b9      	str	r1, [r7, #8]
 8007d78:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d84:	2b01      	cmp	r3, #1
 8007d86:	d101      	bne.n	8007d8c <HAL_TIM_IC_ConfigChannel+0x1e>
 8007d88:	2302      	movs	r3, #2
 8007d8a:	e088      	b.n	8007e9e <HAL_TIM_IC_ConfigChannel+0x130>
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	2201      	movs	r2, #1
 8007d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d11b      	bne.n	8007dd2 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	6818      	ldr	r0, [r3, #0]
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	6819      	ldr	r1, [r3, #0]
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	685a      	ldr	r2, [r3, #4]
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	68db      	ldr	r3, [r3, #12]
 8007daa:	f000 fdfd 	bl	80089a8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	699a      	ldr	r2, [r3, #24]
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f022 020c 	bic.w	r2, r2, #12
 8007dbc:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	6999      	ldr	r1, [r3, #24]
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	689a      	ldr	r2, [r3, #8]
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	430a      	orrs	r2, r1
 8007dce:	619a      	str	r2, [r3, #24]
 8007dd0:	e060      	b.n	8007e94 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2b04      	cmp	r3, #4
 8007dd6:	d11c      	bne.n	8007e12 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	6818      	ldr	r0, [r3, #0]
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	6819      	ldr	r1, [r3, #0]
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	685a      	ldr	r2, [r3, #4]
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	68db      	ldr	r3, [r3, #12]
 8007de8:	f000 fe7b 	bl	8008ae2 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	699a      	ldr	r2, [r3, #24]
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007dfa:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	6999      	ldr	r1, [r3, #24]
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	689b      	ldr	r3, [r3, #8]
 8007e06:	021a      	lsls	r2, r3, #8
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	430a      	orrs	r2, r1
 8007e0e:	619a      	str	r2, [r3, #24]
 8007e10:	e040      	b.n	8007e94 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2b08      	cmp	r3, #8
 8007e16:	d11b      	bne.n	8007e50 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	6818      	ldr	r0, [r3, #0]
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	6819      	ldr	r1, [r3, #0]
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	685a      	ldr	r2, [r3, #4]
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	68db      	ldr	r3, [r3, #12]
 8007e28:	f000 fec8 	bl	8008bbc <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	69da      	ldr	r2, [r3, #28]
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f022 020c 	bic.w	r2, r2, #12
 8007e3a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	69d9      	ldr	r1, [r3, #28]
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	689a      	ldr	r2, [r3, #8]
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	430a      	orrs	r2, r1
 8007e4c:	61da      	str	r2, [r3, #28]
 8007e4e:	e021      	b.n	8007e94 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2b0c      	cmp	r3, #12
 8007e54:	d11c      	bne.n	8007e90 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	6818      	ldr	r0, [r3, #0]
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	6819      	ldr	r1, [r3, #0]
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	685a      	ldr	r2, [r3, #4]
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	68db      	ldr	r3, [r3, #12]
 8007e66:	f000 fee5 	bl	8008c34 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	69da      	ldr	r2, [r3, #28]
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007e78:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	69d9      	ldr	r1, [r3, #28]
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	689b      	ldr	r3, [r3, #8]
 8007e84:	021a      	lsls	r2, r3, #8
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	430a      	orrs	r2, r1
 8007e8c:	61da      	str	r2, [r3, #28]
 8007e8e:	e001      	b.n	8007e94 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8007e90:	2301      	movs	r3, #1
 8007e92:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	2200      	movs	r2, #0
 8007e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007e9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3718      	adds	r7, #24
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}
	...

08007ea8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b086      	sub	sp, #24
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	60f8      	str	r0, [r7, #12]
 8007eb0:	60b9      	str	r1, [r7, #8]
 8007eb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ebe:	2b01      	cmp	r3, #1
 8007ec0:	d101      	bne.n	8007ec6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007ec2:	2302      	movs	r3, #2
 8007ec4:	e0ff      	b.n	80080c6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	2201      	movs	r2, #1
 8007eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2b14      	cmp	r3, #20
 8007ed2:	f200 80f0 	bhi.w	80080b6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007ed6:	a201      	add	r2, pc, #4	; (adr r2, 8007edc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007edc:	08007f31 	.word	0x08007f31
 8007ee0:	080080b7 	.word	0x080080b7
 8007ee4:	080080b7 	.word	0x080080b7
 8007ee8:	080080b7 	.word	0x080080b7
 8007eec:	08007f71 	.word	0x08007f71
 8007ef0:	080080b7 	.word	0x080080b7
 8007ef4:	080080b7 	.word	0x080080b7
 8007ef8:	080080b7 	.word	0x080080b7
 8007efc:	08007fb3 	.word	0x08007fb3
 8007f00:	080080b7 	.word	0x080080b7
 8007f04:	080080b7 	.word	0x080080b7
 8007f08:	080080b7 	.word	0x080080b7
 8007f0c:	08007ff3 	.word	0x08007ff3
 8007f10:	080080b7 	.word	0x080080b7
 8007f14:	080080b7 	.word	0x080080b7
 8007f18:	080080b7 	.word	0x080080b7
 8007f1c:	08008035 	.word	0x08008035
 8007f20:	080080b7 	.word	0x080080b7
 8007f24:	080080b7 	.word	0x080080b7
 8007f28:	080080b7 	.word	0x080080b7
 8007f2c:	08008075 	.word	0x08008075
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	68b9      	ldr	r1, [r7, #8]
 8007f36:	4618      	mov	r0, r3
 8007f38:	f000 fa60 	bl	80083fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	699a      	ldr	r2, [r3, #24]
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f042 0208 	orr.w	r2, r2, #8
 8007f4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	699a      	ldr	r2, [r3, #24]
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f022 0204 	bic.w	r2, r2, #4
 8007f5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	6999      	ldr	r1, [r3, #24]
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	691a      	ldr	r2, [r3, #16]
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	430a      	orrs	r2, r1
 8007f6c:	619a      	str	r2, [r3, #24]
      break;
 8007f6e:	e0a5      	b.n	80080bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	68b9      	ldr	r1, [r7, #8]
 8007f76:	4618      	mov	r0, r3
 8007f78:	f000 fad0 	bl	800851c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	699a      	ldr	r2, [r3, #24]
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	699a      	ldr	r2, [r3, #24]
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	6999      	ldr	r1, [r3, #24]
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	691b      	ldr	r3, [r3, #16]
 8007fa6:	021a      	lsls	r2, r3, #8
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	430a      	orrs	r2, r1
 8007fae:	619a      	str	r2, [r3, #24]
      break;
 8007fb0:	e084      	b.n	80080bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	68b9      	ldr	r1, [r7, #8]
 8007fb8:	4618      	mov	r0, r3
 8007fba:	f000 fb39 	bl	8008630 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	69da      	ldr	r2, [r3, #28]
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f042 0208 	orr.w	r2, r2, #8
 8007fcc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	69da      	ldr	r2, [r3, #28]
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f022 0204 	bic.w	r2, r2, #4
 8007fdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	69d9      	ldr	r1, [r3, #28]
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	691a      	ldr	r2, [r3, #16]
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	430a      	orrs	r2, r1
 8007fee:	61da      	str	r2, [r3, #28]
      break;
 8007ff0:	e064      	b.n	80080bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	68b9      	ldr	r1, [r7, #8]
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	f000 fba1 	bl	8008740 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	69da      	ldr	r2, [r3, #28]
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800800c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	69da      	ldr	r2, [r3, #28]
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800801c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	69d9      	ldr	r1, [r3, #28]
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	691b      	ldr	r3, [r3, #16]
 8008028:	021a      	lsls	r2, r3, #8
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	430a      	orrs	r2, r1
 8008030:	61da      	str	r2, [r3, #28]
      break;
 8008032:	e043      	b.n	80080bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	68b9      	ldr	r1, [r7, #8]
 800803a:	4618      	mov	r0, r3
 800803c:	f000 fbea 	bl	8008814 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f042 0208 	orr.w	r2, r2, #8
 800804e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f022 0204 	bic.w	r2, r2, #4
 800805e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008066:	68bb      	ldr	r3, [r7, #8]
 8008068:	691a      	ldr	r2, [r3, #16]
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	430a      	orrs	r2, r1
 8008070:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008072:	e023      	b.n	80080bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	68b9      	ldr	r1, [r7, #8]
 800807a:	4618      	mov	r0, r3
 800807c:	f000 fc2e 	bl	80088dc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800808e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800809e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	691b      	ldr	r3, [r3, #16]
 80080aa:	021a      	lsls	r2, r3, #8
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	430a      	orrs	r2, r1
 80080b2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80080b4:	e002      	b.n	80080bc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80080b6:	2301      	movs	r3, #1
 80080b8:	75fb      	strb	r3, [r7, #23]
      break;
 80080ba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	2200      	movs	r2, #0
 80080c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80080c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3718      	adds	r7, #24
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}
 80080ce:	bf00      	nop

080080d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b084      	sub	sp, #16
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
 80080d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80080da:	2300      	movs	r3, #0
 80080dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080e4:	2b01      	cmp	r3, #1
 80080e6:	d101      	bne.n	80080ec <HAL_TIM_ConfigClockSource+0x1c>
 80080e8:	2302      	movs	r3, #2
 80080ea:	e0b6      	b.n	800825a <HAL_TIM_ConfigClockSource+0x18a>
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2201      	movs	r2, #1
 80080f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2202      	movs	r2, #2
 80080f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	689b      	ldr	r3, [r3, #8]
 8008102:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800810a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800810e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008116:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	68ba      	ldr	r2, [r7, #8]
 800811e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008128:	d03e      	beq.n	80081a8 <HAL_TIM_ConfigClockSource+0xd8>
 800812a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800812e:	f200 8087 	bhi.w	8008240 <HAL_TIM_ConfigClockSource+0x170>
 8008132:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008136:	f000 8086 	beq.w	8008246 <HAL_TIM_ConfigClockSource+0x176>
 800813a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800813e:	d87f      	bhi.n	8008240 <HAL_TIM_ConfigClockSource+0x170>
 8008140:	2b70      	cmp	r3, #112	; 0x70
 8008142:	d01a      	beq.n	800817a <HAL_TIM_ConfigClockSource+0xaa>
 8008144:	2b70      	cmp	r3, #112	; 0x70
 8008146:	d87b      	bhi.n	8008240 <HAL_TIM_ConfigClockSource+0x170>
 8008148:	2b60      	cmp	r3, #96	; 0x60
 800814a:	d050      	beq.n	80081ee <HAL_TIM_ConfigClockSource+0x11e>
 800814c:	2b60      	cmp	r3, #96	; 0x60
 800814e:	d877      	bhi.n	8008240 <HAL_TIM_ConfigClockSource+0x170>
 8008150:	2b50      	cmp	r3, #80	; 0x50
 8008152:	d03c      	beq.n	80081ce <HAL_TIM_ConfigClockSource+0xfe>
 8008154:	2b50      	cmp	r3, #80	; 0x50
 8008156:	d873      	bhi.n	8008240 <HAL_TIM_ConfigClockSource+0x170>
 8008158:	2b40      	cmp	r3, #64	; 0x40
 800815a:	d058      	beq.n	800820e <HAL_TIM_ConfigClockSource+0x13e>
 800815c:	2b40      	cmp	r3, #64	; 0x40
 800815e:	d86f      	bhi.n	8008240 <HAL_TIM_ConfigClockSource+0x170>
 8008160:	2b30      	cmp	r3, #48	; 0x30
 8008162:	d064      	beq.n	800822e <HAL_TIM_ConfigClockSource+0x15e>
 8008164:	2b30      	cmp	r3, #48	; 0x30
 8008166:	d86b      	bhi.n	8008240 <HAL_TIM_ConfigClockSource+0x170>
 8008168:	2b20      	cmp	r3, #32
 800816a:	d060      	beq.n	800822e <HAL_TIM_ConfigClockSource+0x15e>
 800816c:	2b20      	cmp	r3, #32
 800816e:	d867      	bhi.n	8008240 <HAL_TIM_ConfigClockSource+0x170>
 8008170:	2b00      	cmp	r3, #0
 8008172:	d05c      	beq.n	800822e <HAL_TIM_ConfigClockSource+0x15e>
 8008174:	2b10      	cmp	r3, #16
 8008176:	d05a      	beq.n	800822e <HAL_TIM_ConfigClockSource+0x15e>
 8008178:	e062      	b.n	8008240 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6818      	ldr	r0, [r3, #0]
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	6899      	ldr	r1, [r3, #8]
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	685a      	ldr	r2, [r3, #4]
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	68db      	ldr	r3, [r3, #12]
 800818a:	f000 fdab 	bl	8008ce4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	689b      	ldr	r3, [r3, #8]
 8008194:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800819c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	68ba      	ldr	r2, [r7, #8]
 80081a4:	609a      	str	r2, [r3, #8]
      break;
 80081a6:	e04f      	b.n	8008248 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6818      	ldr	r0, [r3, #0]
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	6899      	ldr	r1, [r3, #8]
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	685a      	ldr	r2, [r3, #4]
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	68db      	ldr	r3, [r3, #12]
 80081b8:	f000 fd94 	bl	8008ce4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	689a      	ldr	r2, [r3, #8]
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80081ca:	609a      	str	r2, [r3, #8]
      break;
 80081cc:	e03c      	b.n	8008248 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6818      	ldr	r0, [r3, #0]
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	6859      	ldr	r1, [r3, #4]
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	68db      	ldr	r3, [r3, #12]
 80081da:	461a      	mov	r2, r3
 80081dc:	f000 fc52 	bl	8008a84 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	2150      	movs	r1, #80	; 0x50
 80081e6:	4618      	mov	r0, r3
 80081e8:	f000 fd61 	bl	8008cae <TIM_ITRx_SetConfig>
      break;
 80081ec:	e02c      	b.n	8008248 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6818      	ldr	r0, [r3, #0]
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	6859      	ldr	r1, [r3, #4]
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	68db      	ldr	r3, [r3, #12]
 80081fa:	461a      	mov	r2, r3
 80081fc:	f000 fcae 	bl	8008b5c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	2160      	movs	r1, #96	; 0x60
 8008206:	4618      	mov	r0, r3
 8008208:	f000 fd51 	bl	8008cae <TIM_ITRx_SetConfig>
      break;
 800820c:	e01c      	b.n	8008248 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6818      	ldr	r0, [r3, #0]
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	6859      	ldr	r1, [r3, #4]
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	68db      	ldr	r3, [r3, #12]
 800821a:	461a      	mov	r2, r3
 800821c:	f000 fc32 	bl	8008a84 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	2140      	movs	r1, #64	; 0x40
 8008226:	4618      	mov	r0, r3
 8008228:	f000 fd41 	bl	8008cae <TIM_ITRx_SetConfig>
      break;
 800822c:	e00c      	b.n	8008248 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681a      	ldr	r2, [r3, #0]
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	4619      	mov	r1, r3
 8008238:	4610      	mov	r0, r2
 800823a:	f000 fd38 	bl	8008cae <TIM_ITRx_SetConfig>
      break;
 800823e:	e003      	b.n	8008248 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8008240:	2301      	movs	r3, #1
 8008242:	73fb      	strb	r3, [r7, #15]
      break;
 8008244:	e000      	b.n	8008248 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8008246:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2201      	movs	r2, #1
 800824c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2200      	movs	r2, #0
 8008254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008258:	7bfb      	ldrb	r3, [r7, #15]
}
 800825a:	4618      	mov	r0, r3
 800825c:	3710      	adds	r7, #16
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}

08008262 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008262:	b480      	push	{r7}
 8008264:	b083      	sub	sp, #12
 8008266:	af00      	add	r7, sp, #0
 8008268:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800826a:	bf00      	nop
 800826c:	370c      	adds	r7, #12
 800826e:	46bd      	mov	sp, r7
 8008270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008274:	4770      	bx	lr

08008276 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008276:	b480      	push	{r7}
 8008278:	b083      	sub	sp, #12
 800827a:	af00      	add	r7, sp, #0
 800827c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800827e:	bf00      	nop
 8008280:	370c      	adds	r7, #12
 8008282:	46bd      	mov	sp, r7
 8008284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008288:	4770      	bx	lr

0800828a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800828a:	b480      	push	{r7}
 800828c:	b083      	sub	sp, #12
 800828e:	af00      	add	r7, sp, #0
 8008290:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008292:	bf00      	nop
 8008294:	370c      	adds	r7, #12
 8008296:	46bd      	mov	sp, r7
 8008298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829c:	4770      	bx	lr

0800829e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800829e:	b480      	push	{r7}
 80082a0:	b083      	sub	sp, #12
 80082a2:	af00      	add	r7, sp, #0
 80082a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80082a6:	bf00      	nop
 80082a8:	370c      	adds	r7, #12
 80082aa:	46bd      	mov	sp, r7
 80082ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b0:	4770      	bx	lr

080082b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80082b2:	b480      	push	{r7}
 80082b4:	b083      	sub	sp, #12
 80082b6:	af00      	add	r7, sp, #0
 80082b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80082ba:	bf00      	nop
 80082bc:	370c      	adds	r7, #12
 80082be:	46bd      	mov	sp, r7
 80082c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c4:	4770      	bx	lr
	...

080082c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80082c8:	b480      	push	{r7}
 80082ca:	b085      	sub	sp, #20
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
 80082d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	4a40      	ldr	r2, [pc, #256]	; (80083dc <TIM_Base_SetConfig+0x114>)
 80082dc:	4293      	cmp	r3, r2
 80082de:	d013      	beq.n	8008308 <TIM_Base_SetConfig+0x40>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082e6:	d00f      	beq.n	8008308 <TIM_Base_SetConfig+0x40>
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	4a3d      	ldr	r2, [pc, #244]	; (80083e0 <TIM_Base_SetConfig+0x118>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d00b      	beq.n	8008308 <TIM_Base_SetConfig+0x40>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	4a3c      	ldr	r2, [pc, #240]	; (80083e4 <TIM_Base_SetConfig+0x11c>)
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d007      	beq.n	8008308 <TIM_Base_SetConfig+0x40>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	4a3b      	ldr	r2, [pc, #236]	; (80083e8 <TIM_Base_SetConfig+0x120>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d003      	beq.n	8008308 <TIM_Base_SetConfig+0x40>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	4a3a      	ldr	r2, [pc, #232]	; (80083ec <TIM_Base_SetConfig+0x124>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d108      	bne.n	800831a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800830e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	685b      	ldr	r3, [r3, #4]
 8008314:	68fa      	ldr	r2, [r7, #12]
 8008316:	4313      	orrs	r3, r2
 8008318:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	4a2f      	ldr	r2, [pc, #188]	; (80083dc <TIM_Base_SetConfig+0x114>)
 800831e:	4293      	cmp	r3, r2
 8008320:	d01f      	beq.n	8008362 <TIM_Base_SetConfig+0x9a>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008328:	d01b      	beq.n	8008362 <TIM_Base_SetConfig+0x9a>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	4a2c      	ldr	r2, [pc, #176]	; (80083e0 <TIM_Base_SetConfig+0x118>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d017      	beq.n	8008362 <TIM_Base_SetConfig+0x9a>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	4a2b      	ldr	r2, [pc, #172]	; (80083e4 <TIM_Base_SetConfig+0x11c>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d013      	beq.n	8008362 <TIM_Base_SetConfig+0x9a>
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	4a2a      	ldr	r2, [pc, #168]	; (80083e8 <TIM_Base_SetConfig+0x120>)
 800833e:	4293      	cmp	r3, r2
 8008340:	d00f      	beq.n	8008362 <TIM_Base_SetConfig+0x9a>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	4a29      	ldr	r2, [pc, #164]	; (80083ec <TIM_Base_SetConfig+0x124>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d00b      	beq.n	8008362 <TIM_Base_SetConfig+0x9a>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	4a28      	ldr	r2, [pc, #160]	; (80083f0 <TIM_Base_SetConfig+0x128>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d007      	beq.n	8008362 <TIM_Base_SetConfig+0x9a>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	4a27      	ldr	r2, [pc, #156]	; (80083f4 <TIM_Base_SetConfig+0x12c>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d003      	beq.n	8008362 <TIM_Base_SetConfig+0x9a>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	4a26      	ldr	r2, [pc, #152]	; (80083f8 <TIM_Base_SetConfig+0x130>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d108      	bne.n	8008374 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008368:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	68db      	ldr	r3, [r3, #12]
 800836e:	68fa      	ldr	r2, [r7, #12]
 8008370:	4313      	orrs	r3, r2
 8008372:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	695b      	ldr	r3, [r3, #20]
 800837e:	4313      	orrs	r3, r2
 8008380:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	68fa      	ldr	r2, [r7, #12]
 8008386:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	689a      	ldr	r2, [r3, #8]
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	681a      	ldr	r2, [r3, #0]
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	4a10      	ldr	r2, [pc, #64]	; (80083dc <TIM_Base_SetConfig+0x114>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d00f      	beq.n	80083c0 <TIM_Base_SetConfig+0xf8>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	4a12      	ldr	r2, [pc, #72]	; (80083ec <TIM_Base_SetConfig+0x124>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d00b      	beq.n	80083c0 <TIM_Base_SetConfig+0xf8>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	4a11      	ldr	r2, [pc, #68]	; (80083f0 <TIM_Base_SetConfig+0x128>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d007      	beq.n	80083c0 <TIM_Base_SetConfig+0xf8>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	4a10      	ldr	r2, [pc, #64]	; (80083f4 <TIM_Base_SetConfig+0x12c>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d003      	beq.n	80083c0 <TIM_Base_SetConfig+0xf8>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	4a0f      	ldr	r2, [pc, #60]	; (80083f8 <TIM_Base_SetConfig+0x130>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d103      	bne.n	80083c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	691a      	ldr	r2, [r3, #16]
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2201      	movs	r2, #1
 80083cc:	615a      	str	r2, [r3, #20]
}
 80083ce:	bf00      	nop
 80083d0:	3714      	adds	r7, #20
 80083d2:	46bd      	mov	sp, r7
 80083d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d8:	4770      	bx	lr
 80083da:	bf00      	nop
 80083dc:	40012c00 	.word	0x40012c00
 80083e0:	40000400 	.word	0x40000400
 80083e4:	40000800 	.word	0x40000800
 80083e8:	40000c00 	.word	0x40000c00
 80083ec:	40013400 	.word	0x40013400
 80083f0:	40014000 	.word	0x40014000
 80083f4:	40014400 	.word	0x40014400
 80083f8:	40014800 	.word	0x40014800

080083fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80083fc:	b480      	push	{r7}
 80083fe:	b087      	sub	sp, #28
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
 8008404:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6a1b      	ldr	r3, [r3, #32]
 800840a:	f023 0201 	bic.w	r2, r3, #1
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6a1b      	ldr	r3, [r3, #32]
 8008416:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	685b      	ldr	r3, [r3, #4]
 800841c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	699b      	ldr	r3, [r3, #24]
 8008422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800842a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800842e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	f023 0303 	bic.w	r3, r3, #3
 8008436:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	68fa      	ldr	r2, [r7, #12]
 800843e:	4313      	orrs	r3, r2
 8008440:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	f023 0302 	bic.w	r3, r3, #2
 8008448:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	689b      	ldr	r3, [r3, #8]
 800844e:	697a      	ldr	r2, [r7, #20]
 8008450:	4313      	orrs	r3, r2
 8008452:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	4a2c      	ldr	r2, [pc, #176]	; (8008508 <TIM_OC1_SetConfig+0x10c>)
 8008458:	4293      	cmp	r3, r2
 800845a:	d00f      	beq.n	800847c <TIM_OC1_SetConfig+0x80>
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	4a2b      	ldr	r2, [pc, #172]	; (800850c <TIM_OC1_SetConfig+0x110>)
 8008460:	4293      	cmp	r3, r2
 8008462:	d00b      	beq.n	800847c <TIM_OC1_SetConfig+0x80>
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	4a2a      	ldr	r2, [pc, #168]	; (8008510 <TIM_OC1_SetConfig+0x114>)
 8008468:	4293      	cmp	r3, r2
 800846a:	d007      	beq.n	800847c <TIM_OC1_SetConfig+0x80>
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	4a29      	ldr	r2, [pc, #164]	; (8008514 <TIM_OC1_SetConfig+0x118>)
 8008470:	4293      	cmp	r3, r2
 8008472:	d003      	beq.n	800847c <TIM_OC1_SetConfig+0x80>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	4a28      	ldr	r2, [pc, #160]	; (8008518 <TIM_OC1_SetConfig+0x11c>)
 8008478:	4293      	cmp	r3, r2
 800847a:	d10c      	bne.n	8008496 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800847c:	697b      	ldr	r3, [r7, #20]
 800847e:	f023 0308 	bic.w	r3, r3, #8
 8008482:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	68db      	ldr	r3, [r3, #12]
 8008488:	697a      	ldr	r2, [r7, #20]
 800848a:	4313      	orrs	r3, r2
 800848c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800848e:	697b      	ldr	r3, [r7, #20]
 8008490:	f023 0304 	bic.w	r3, r3, #4
 8008494:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	4a1b      	ldr	r2, [pc, #108]	; (8008508 <TIM_OC1_SetConfig+0x10c>)
 800849a:	4293      	cmp	r3, r2
 800849c:	d00f      	beq.n	80084be <TIM_OC1_SetConfig+0xc2>
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	4a1a      	ldr	r2, [pc, #104]	; (800850c <TIM_OC1_SetConfig+0x110>)
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d00b      	beq.n	80084be <TIM_OC1_SetConfig+0xc2>
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	4a19      	ldr	r2, [pc, #100]	; (8008510 <TIM_OC1_SetConfig+0x114>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d007      	beq.n	80084be <TIM_OC1_SetConfig+0xc2>
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	4a18      	ldr	r2, [pc, #96]	; (8008514 <TIM_OC1_SetConfig+0x118>)
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d003      	beq.n	80084be <TIM_OC1_SetConfig+0xc2>
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	4a17      	ldr	r2, [pc, #92]	; (8008518 <TIM_OC1_SetConfig+0x11c>)
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d111      	bne.n	80084e2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80084be:	693b      	ldr	r3, [r7, #16]
 80084c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80084c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80084c6:	693b      	ldr	r3, [r7, #16]
 80084c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80084cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	695b      	ldr	r3, [r3, #20]
 80084d2:	693a      	ldr	r2, [r7, #16]
 80084d4:	4313      	orrs	r3, r2
 80084d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	699b      	ldr	r3, [r3, #24]
 80084dc:	693a      	ldr	r2, [r7, #16]
 80084de:	4313      	orrs	r3, r2
 80084e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	693a      	ldr	r2, [r7, #16]
 80084e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	68fa      	ldr	r2, [r7, #12]
 80084ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	685a      	ldr	r2, [r3, #4]
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	697a      	ldr	r2, [r7, #20]
 80084fa:	621a      	str	r2, [r3, #32]
}
 80084fc:	bf00      	nop
 80084fe:	371c      	adds	r7, #28
 8008500:	46bd      	mov	sp, r7
 8008502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008506:	4770      	bx	lr
 8008508:	40012c00 	.word	0x40012c00
 800850c:	40013400 	.word	0x40013400
 8008510:	40014000 	.word	0x40014000
 8008514:	40014400 	.word	0x40014400
 8008518:	40014800 	.word	0x40014800

0800851c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800851c:	b480      	push	{r7}
 800851e:	b087      	sub	sp, #28
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
 8008524:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6a1b      	ldr	r3, [r3, #32]
 800852a:	f023 0210 	bic.w	r2, r3, #16
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6a1b      	ldr	r3, [r3, #32]
 8008536:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	685b      	ldr	r3, [r3, #4]
 800853c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	699b      	ldr	r3, [r3, #24]
 8008542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800854a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800854e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008556:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	021b      	lsls	r3, r3, #8
 800855e:	68fa      	ldr	r2, [r7, #12]
 8008560:	4313      	orrs	r3, r2
 8008562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008564:	697b      	ldr	r3, [r7, #20]
 8008566:	f023 0320 	bic.w	r3, r3, #32
 800856a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	689b      	ldr	r3, [r3, #8]
 8008570:	011b      	lsls	r3, r3, #4
 8008572:	697a      	ldr	r2, [r7, #20]
 8008574:	4313      	orrs	r3, r2
 8008576:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	4a28      	ldr	r2, [pc, #160]	; (800861c <TIM_OC2_SetConfig+0x100>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d003      	beq.n	8008588 <TIM_OC2_SetConfig+0x6c>
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	4a27      	ldr	r2, [pc, #156]	; (8008620 <TIM_OC2_SetConfig+0x104>)
 8008584:	4293      	cmp	r3, r2
 8008586:	d10d      	bne.n	80085a4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008588:	697b      	ldr	r3, [r7, #20]
 800858a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800858e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	68db      	ldr	r3, [r3, #12]
 8008594:	011b      	lsls	r3, r3, #4
 8008596:	697a      	ldr	r2, [r7, #20]
 8008598:	4313      	orrs	r3, r2
 800859a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800859c:	697b      	ldr	r3, [r7, #20]
 800859e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085a2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	4a1d      	ldr	r2, [pc, #116]	; (800861c <TIM_OC2_SetConfig+0x100>)
 80085a8:	4293      	cmp	r3, r2
 80085aa:	d00f      	beq.n	80085cc <TIM_OC2_SetConfig+0xb0>
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	4a1c      	ldr	r2, [pc, #112]	; (8008620 <TIM_OC2_SetConfig+0x104>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d00b      	beq.n	80085cc <TIM_OC2_SetConfig+0xb0>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	4a1b      	ldr	r2, [pc, #108]	; (8008624 <TIM_OC2_SetConfig+0x108>)
 80085b8:	4293      	cmp	r3, r2
 80085ba:	d007      	beq.n	80085cc <TIM_OC2_SetConfig+0xb0>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	4a1a      	ldr	r2, [pc, #104]	; (8008628 <TIM_OC2_SetConfig+0x10c>)
 80085c0:	4293      	cmp	r3, r2
 80085c2:	d003      	beq.n	80085cc <TIM_OC2_SetConfig+0xb0>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	4a19      	ldr	r2, [pc, #100]	; (800862c <TIM_OC2_SetConfig+0x110>)
 80085c8:	4293      	cmp	r3, r2
 80085ca:	d113      	bne.n	80085f4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80085cc:	693b      	ldr	r3, [r7, #16]
 80085ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80085d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80085d4:	693b      	ldr	r3, [r7, #16]
 80085d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80085da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	695b      	ldr	r3, [r3, #20]
 80085e0:	009b      	lsls	r3, r3, #2
 80085e2:	693a      	ldr	r2, [r7, #16]
 80085e4:	4313      	orrs	r3, r2
 80085e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	699b      	ldr	r3, [r3, #24]
 80085ec:	009b      	lsls	r3, r3, #2
 80085ee:	693a      	ldr	r2, [r7, #16]
 80085f0:	4313      	orrs	r3, r2
 80085f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	693a      	ldr	r2, [r7, #16]
 80085f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	68fa      	ldr	r2, [r7, #12]
 80085fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	685a      	ldr	r2, [r3, #4]
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	697a      	ldr	r2, [r7, #20]
 800860c:	621a      	str	r2, [r3, #32]
}
 800860e:	bf00      	nop
 8008610:	371c      	adds	r7, #28
 8008612:	46bd      	mov	sp, r7
 8008614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008618:	4770      	bx	lr
 800861a:	bf00      	nop
 800861c:	40012c00 	.word	0x40012c00
 8008620:	40013400 	.word	0x40013400
 8008624:	40014000 	.word	0x40014000
 8008628:	40014400 	.word	0x40014400
 800862c:	40014800 	.word	0x40014800

08008630 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008630:	b480      	push	{r7}
 8008632:	b087      	sub	sp, #28
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
 8008638:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6a1b      	ldr	r3, [r3, #32]
 800863e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6a1b      	ldr	r3, [r3, #32]
 800864a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	685b      	ldr	r3, [r3, #4]
 8008650:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	69db      	ldr	r3, [r3, #28]
 8008656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800865e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008662:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	f023 0303 	bic.w	r3, r3, #3
 800866a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	68fa      	ldr	r2, [r7, #12]
 8008672:	4313      	orrs	r3, r2
 8008674:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008676:	697b      	ldr	r3, [r7, #20]
 8008678:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800867c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	689b      	ldr	r3, [r3, #8]
 8008682:	021b      	lsls	r3, r3, #8
 8008684:	697a      	ldr	r2, [r7, #20]
 8008686:	4313      	orrs	r3, r2
 8008688:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	4a27      	ldr	r2, [pc, #156]	; (800872c <TIM_OC3_SetConfig+0xfc>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d003      	beq.n	800869a <TIM_OC3_SetConfig+0x6a>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	4a26      	ldr	r2, [pc, #152]	; (8008730 <TIM_OC3_SetConfig+0x100>)
 8008696:	4293      	cmp	r3, r2
 8008698:	d10d      	bne.n	80086b6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80086a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	68db      	ldr	r3, [r3, #12]
 80086a6:	021b      	lsls	r3, r3, #8
 80086a8:	697a      	ldr	r2, [r7, #20]
 80086aa:	4313      	orrs	r3, r2
 80086ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80086ae:	697b      	ldr	r3, [r7, #20]
 80086b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80086b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	4a1c      	ldr	r2, [pc, #112]	; (800872c <TIM_OC3_SetConfig+0xfc>)
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d00f      	beq.n	80086de <TIM_OC3_SetConfig+0xae>
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	4a1b      	ldr	r2, [pc, #108]	; (8008730 <TIM_OC3_SetConfig+0x100>)
 80086c2:	4293      	cmp	r3, r2
 80086c4:	d00b      	beq.n	80086de <TIM_OC3_SetConfig+0xae>
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	4a1a      	ldr	r2, [pc, #104]	; (8008734 <TIM_OC3_SetConfig+0x104>)
 80086ca:	4293      	cmp	r3, r2
 80086cc:	d007      	beq.n	80086de <TIM_OC3_SetConfig+0xae>
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	4a19      	ldr	r2, [pc, #100]	; (8008738 <TIM_OC3_SetConfig+0x108>)
 80086d2:	4293      	cmp	r3, r2
 80086d4:	d003      	beq.n	80086de <TIM_OC3_SetConfig+0xae>
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	4a18      	ldr	r2, [pc, #96]	; (800873c <TIM_OC3_SetConfig+0x10c>)
 80086da:	4293      	cmp	r3, r2
 80086dc:	d113      	bne.n	8008706 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80086de:	693b      	ldr	r3, [r7, #16]
 80086e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80086e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80086e6:	693b      	ldr	r3, [r7, #16]
 80086e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80086ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	695b      	ldr	r3, [r3, #20]
 80086f2:	011b      	lsls	r3, r3, #4
 80086f4:	693a      	ldr	r2, [r7, #16]
 80086f6:	4313      	orrs	r3, r2
 80086f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	699b      	ldr	r3, [r3, #24]
 80086fe:	011b      	lsls	r3, r3, #4
 8008700:	693a      	ldr	r2, [r7, #16]
 8008702:	4313      	orrs	r3, r2
 8008704:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	693a      	ldr	r2, [r7, #16]
 800870a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	68fa      	ldr	r2, [r7, #12]
 8008710:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	685a      	ldr	r2, [r3, #4]
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	697a      	ldr	r2, [r7, #20]
 800871e:	621a      	str	r2, [r3, #32]
}
 8008720:	bf00      	nop
 8008722:	371c      	adds	r7, #28
 8008724:	46bd      	mov	sp, r7
 8008726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872a:	4770      	bx	lr
 800872c:	40012c00 	.word	0x40012c00
 8008730:	40013400 	.word	0x40013400
 8008734:	40014000 	.word	0x40014000
 8008738:	40014400 	.word	0x40014400
 800873c:	40014800 	.word	0x40014800

08008740 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008740:	b480      	push	{r7}
 8008742:	b087      	sub	sp, #28
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
 8008748:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6a1b      	ldr	r3, [r3, #32]
 800874e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6a1b      	ldr	r3, [r3, #32]
 800875a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	685b      	ldr	r3, [r3, #4]
 8008760:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	69db      	ldr	r3, [r3, #28]
 8008766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800876e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008772:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800877a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	021b      	lsls	r3, r3, #8
 8008782:	68fa      	ldr	r2, [r7, #12]
 8008784:	4313      	orrs	r3, r2
 8008786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008788:	693b      	ldr	r3, [r7, #16]
 800878a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800878e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	689b      	ldr	r3, [r3, #8]
 8008794:	031b      	lsls	r3, r3, #12
 8008796:	693a      	ldr	r2, [r7, #16]
 8008798:	4313      	orrs	r3, r2
 800879a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	4a18      	ldr	r2, [pc, #96]	; (8008800 <TIM_OC4_SetConfig+0xc0>)
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d00f      	beq.n	80087c4 <TIM_OC4_SetConfig+0x84>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	4a17      	ldr	r2, [pc, #92]	; (8008804 <TIM_OC4_SetConfig+0xc4>)
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d00b      	beq.n	80087c4 <TIM_OC4_SetConfig+0x84>
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	4a16      	ldr	r2, [pc, #88]	; (8008808 <TIM_OC4_SetConfig+0xc8>)
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d007      	beq.n	80087c4 <TIM_OC4_SetConfig+0x84>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	4a15      	ldr	r2, [pc, #84]	; (800880c <TIM_OC4_SetConfig+0xcc>)
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d003      	beq.n	80087c4 <TIM_OC4_SetConfig+0x84>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	4a14      	ldr	r2, [pc, #80]	; (8008810 <TIM_OC4_SetConfig+0xd0>)
 80087c0:	4293      	cmp	r3, r2
 80087c2:	d109      	bne.n	80087d8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80087c4:	697b      	ldr	r3, [r7, #20]
 80087c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80087ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	695b      	ldr	r3, [r3, #20]
 80087d0:	019b      	lsls	r3, r3, #6
 80087d2:	697a      	ldr	r2, [r7, #20]
 80087d4:	4313      	orrs	r3, r2
 80087d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	697a      	ldr	r2, [r7, #20]
 80087dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	68fa      	ldr	r2, [r7, #12]
 80087e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	685a      	ldr	r2, [r3, #4]
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	693a      	ldr	r2, [r7, #16]
 80087f0:	621a      	str	r2, [r3, #32]
}
 80087f2:	bf00      	nop
 80087f4:	371c      	adds	r7, #28
 80087f6:	46bd      	mov	sp, r7
 80087f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fc:	4770      	bx	lr
 80087fe:	bf00      	nop
 8008800:	40012c00 	.word	0x40012c00
 8008804:	40013400 	.word	0x40013400
 8008808:	40014000 	.word	0x40014000
 800880c:	40014400 	.word	0x40014400
 8008810:	40014800 	.word	0x40014800

08008814 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008814:	b480      	push	{r7}
 8008816:	b087      	sub	sp, #28
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
 800881c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6a1b      	ldr	r3, [r3, #32]
 8008822:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6a1b      	ldr	r3, [r3, #32]
 800882e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	685b      	ldr	r3, [r3, #4]
 8008834:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800883a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008842:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008846:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	68fa      	ldr	r2, [r7, #12]
 800884e:	4313      	orrs	r3, r2
 8008850:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008852:	693b      	ldr	r3, [r7, #16]
 8008854:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008858:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	689b      	ldr	r3, [r3, #8]
 800885e:	041b      	lsls	r3, r3, #16
 8008860:	693a      	ldr	r2, [r7, #16]
 8008862:	4313      	orrs	r3, r2
 8008864:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	4a17      	ldr	r2, [pc, #92]	; (80088c8 <TIM_OC5_SetConfig+0xb4>)
 800886a:	4293      	cmp	r3, r2
 800886c:	d00f      	beq.n	800888e <TIM_OC5_SetConfig+0x7a>
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	4a16      	ldr	r2, [pc, #88]	; (80088cc <TIM_OC5_SetConfig+0xb8>)
 8008872:	4293      	cmp	r3, r2
 8008874:	d00b      	beq.n	800888e <TIM_OC5_SetConfig+0x7a>
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	4a15      	ldr	r2, [pc, #84]	; (80088d0 <TIM_OC5_SetConfig+0xbc>)
 800887a:	4293      	cmp	r3, r2
 800887c:	d007      	beq.n	800888e <TIM_OC5_SetConfig+0x7a>
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	4a14      	ldr	r2, [pc, #80]	; (80088d4 <TIM_OC5_SetConfig+0xc0>)
 8008882:	4293      	cmp	r3, r2
 8008884:	d003      	beq.n	800888e <TIM_OC5_SetConfig+0x7a>
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	4a13      	ldr	r2, [pc, #76]	; (80088d8 <TIM_OC5_SetConfig+0xc4>)
 800888a:	4293      	cmp	r3, r2
 800888c:	d109      	bne.n	80088a2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800888e:	697b      	ldr	r3, [r7, #20]
 8008890:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008894:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	695b      	ldr	r3, [r3, #20]
 800889a:	021b      	lsls	r3, r3, #8
 800889c:	697a      	ldr	r2, [r7, #20]
 800889e:	4313      	orrs	r3, r2
 80088a0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	697a      	ldr	r2, [r7, #20]
 80088a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	68fa      	ldr	r2, [r7, #12]
 80088ac:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	685a      	ldr	r2, [r3, #4]
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	693a      	ldr	r2, [r7, #16]
 80088ba:	621a      	str	r2, [r3, #32]
}
 80088bc:	bf00      	nop
 80088be:	371c      	adds	r7, #28
 80088c0:	46bd      	mov	sp, r7
 80088c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c6:	4770      	bx	lr
 80088c8:	40012c00 	.word	0x40012c00
 80088cc:	40013400 	.word	0x40013400
 80088d0:	40014000 	.word	0x40014000
 80088d4:	40014400 	.word	0x40014400
 80088d8:	40014800 	.word	0x40014800

080088dc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80088dc:	b480      	push	{r7}
 80088de:	b087      	sub	sp, #28
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
 80088e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6a1b      	ldr	r3, [r3, #32]
 80088ea:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6a1b      	ldr	r3, [r3, #32]
 80088f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	685b      	ldr	r3, [r3, #4]
 80088fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008902:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800890a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800890e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	021b      	lsls	r3, r3, #8
 8008916:	68fa      	ldr	r2, [r7, #12]
 8008918:	4313      	orrs	r3, r2
 800891a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800891c:	693b      	ldr	r3, [r7, #16]
 800891e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008922:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	689b      	ldr	r3, [r3, #8]
 8008928:	051b      	lsls	r3, r3, #20
 800892a:	693a      	ldr	r2, [r7, #16]
 800892c:	4313      	orrs	r3, r2
 800892e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	4a18      	ldr	r2, [pc, #96]	; (8008994 <TIM_OC6_SetConfig+0xb8>)
 8008934:	4293      	cmp	r3, r2
 8008936:	d00f      	beq.n	8008958 <TIM_OC6_SetConfig+0x7c>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	4a17      	ldr	r2, [pc, #92]	; (8008998 <TIM_OC6_SetConfig+0xbc>)
 800893c:	4293      	cmp	r3, r2
 800893e:	d00b      	beq.n	8008958 <TIM_OC6_SetConfig+0x7c>
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	4a16      	ldr	r2, [pc, #88]	; (800899c <TIM_OC6_SetConfig+0xc0>)
 8008944:	4293      	cmp	r3, r2
 8008946:	d007      	beq.n	8008958 <TIM_OC6_SetConfig+0x7c>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	4a15      	ldr	r2, [pc, #84]	; (80089a0 <TIM_OC6_SetConfig+0xc4>)
 800894c:	4293      	cmp	r3, r2
 800894e:	d003      	beq.n	8008958 <TIM_OC6_SetConfig+0x7c>
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	4a14      	ldr	r2, [pc, #80]	; (80089a4 <TIM_OC6_SetConfig+0xc8>)
 8008954:	4293      	cmp	r3, r2
 8008956:	d109      	bne.n	800896c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008958:	697b      	ldr	r3, [r7, #20]
 800895a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800895e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	695b      	ldr	r3, [r3, #20]
 8008964:	029b      	lsls	r3, r3, #10
 8008966:	697a      	ldr	r2, [r7, #20]
 8008968:	4313      	orrs	r3, r2
 800896a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	697a      	ldr	r2, [r7, #20]
 8008970:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	68fa      	ldr	r2, [r7, #12]
 8008976:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	685a      	ldr	r2, [r3, #4]
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	693a      	ldr	r2, [r7, #16]
 8008984:	621a      	str	r2, [r3, #32]
}
 8008986:	bf00      	nop
 8008988:	371c      	adds	r7, #28
 800898a:	46bd      	mov	sp, r7
 800898c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008990:	4770      	bx	lr
 8008992:	bf00      	nop
 8008994:	40012c00 	.word	0x40012c00
 8008998:	40013400 	.word	0x40013400
 800899c:	40014000 	.word	0x40014000
 80089a0:	40014400 	.word	0x40014400
 80089a4:	40014800 	.word	0x40014800

080089a8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80089a8:	b480      	push	{r7}
 80089aa:	b087      	sub	sp, #28
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	60f8      	str	r0, [r7, #12]
 80089b0:	60b9      	str	r1, [r7, #8]
 80089b2:	607a      	str	r2, [r7, #4]
 80089b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	6a1b      	ldr	r3, [r3, #32]
 80089ba:	f023 0201 	bic.w	r2, r3, #1
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	699b      	ldr	r3, [r3, #24]
 80089c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	6a1b      	ldr	r3, [r3, #32]
 80089cc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	4a26      	ldr	r2, [pc, #152]	; (8008a6c <TIM_TI1_SetConfig+0xc4>)
 80089d2:	4293      	cmp	r3, r2
 80089d4:	d017      	beq.n	8008a06 <TIM_TI1_SetConfig+0x5e>
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089dc:	d013      	beq.n	8008a06 <TIM_TI1_SetConfig+0x5e>
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	4a23      	ldr	r2, [pc, #140]	; (8008a70 <TIM_TI1_SetConfig+0xc8>)
 80089e2:	4293      	cmp	r3, r2
 80089e4:	d00f      	beq.n	8008a06 <TIM_TI1_SetConfig+0x5e>
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	4a22      	ldr	r2, [pc, #136]	; (8008a74 <TIM_TI1_SetConfig+0xcc>)
 80089ea:	4293      	cmp	r3, r2
 80089ec:	d00b      	beq.n	8008a06 <TIM_TI1_SetConfig+0x5e>
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	4a21      	ldr	r2, [pc, #132]	; (8008a78 <TIM_TI1_SetConfig+0xd0>)
 80089f2:	4293      	cmp	r3, r2
 80089f4:	d007      	beq.n	8008a06 <TIM_TI1_SetConfig+0x5e>
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	4a20      	ldr	r2, [pc, #128]	; (8008a7c <TIM_TI1_SetConfig+0xd4>)
 80089fa:	4293      	cmp	r3, r2
 80089fc:	d003      	beq.n	8008a06 <TIM_TI1_SetConfig+0x5e>
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	4a1f      	ldr	r2, [pc, #124]	; (8008a80 <TIM_TI1_SetConfig+0xd8>)
 8008a02:	4293      	cmp	r3, r2
 8008a04:	d101      	bne.n	8008a0a <TIM_TI1_SetConfig+0x62>
 8008a06:	2301      	movs	r3, #1
 8008a08:	e000      	b.n	8008a0c <TIM_TI1_SetConfig+0x64>
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d008      	beq.n	8008a22 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008a10:	697b      	ldr	r3, [r7, #20]
 8008a12:	f023 0303 	bic.w	r3, r3, #3
 8008a16:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008a18:	697a      	ldr	r2, [r7, #20]
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	4313      	orrs	r3, r2
 8008a1e:	617b      	str	r3, [r7, #20]
 8008a20:	e003      	b.n	8008a2a <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008a22:	697b      	ldr	r3, [r7, #20]
 8008a24:	f043 0301 	orr.w	r3, r3, #1
 8008a28:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008a2a:	697b      	ldr	r3, [r7, #20]
 8008a2c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008a30:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	011b      	lsls	r3, r3, #4
 8008a36:	b2db      	uxtb	r3, r3
 8008a38:	697a      	ldr	r2, [r7, #20]
 8008a3a:	4313      	orrs	r3, r2
 8008a3c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008a3e:	693b      	ldr	r3, [r7, #16]
 8008a40:	f023 030a 	bic.w	r3, r3, #10
 8008a44:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	f003 030a 	and.w	r3, r3, #10
 8008a4c:	693a      	ldr	r2, [r7, #16]
 8008a4e:	4313      	orrs	r3, r2
 8008a50:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	697a      	ldr	r2, [r7, #20]
 8008a56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	693a      	ldr	r2, [r7, #16]
 8008a5c:	621a      	str	r2, [r3, #32]
}
 8008a5e:	bf00      	nop
 8008a60:	371c      	adds	r7, #28
 8008a62:	46bd      	mov	sp, r7
 8008a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a68:	4770      	bx	lr
 8008a6a:	bf00      	nop
 8008a6c:	40012c00 	.word	0x40012c00
 8008a70:	40000400 	.word	0x40000400
 8008a74:	40000800 	.word	0x40000800
 8008a78:	40000c00 	.word	0x40000c00
 8008a7c:	40013400 	.word	0x40013400
 8008a80:	40014000 	.word	0x40014000

08008a84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008a84:	b480      	push	{r7}
 8008a86:	b087      	sub	sp, #28
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	60f8      	str	r0, [r7, #12]
 8008a8c:	60b9      	str	r1, [r7, #8]
 8008a8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	6a1b      	ldr	r3, [r3, #32]
 8008a94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	6a1b      	ldr	r3, [r3, #32]
 8008a9a:	f023 0201 	bic.w	r2, r3, #1
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	699b      	ldr	r3, [r3, #24]
 8008aa6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008aae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	011b      	lsls	r3, r3, #4
 8008ab4:	693a      	ldr	r2, [r7, #16]
 8008ab6:	4313      	orrs	r3, r2
 8008ab8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008aba:	697b      	ldr	r3, [r7, #20]
 8008abc:	f023 030a 	bic.w	r3, r3, #10
 8008ac0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008ac2:	697a      	ldr	r2, [r7, #20]
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	4313      	orrs	r3, r2
 8008ac8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	693a      	ldr	r2, [r7, #16]
 8008ace:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	697a      	ldr	r2, [r7, #20]
 8008ad4:	621a      	str	r2, [r3, #32]
}
 8008ad6:	bf00      	nop
 8008ad8:	371c      	adds	r7, #28
 8008ada:	46bd      	mov	sp, r7
 8008adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae0:	4770      	bx	lr

08008ae2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008ae2:	b480      	push	{r7}
 8008ae4:	b087      	sub	sp, #28
 8008ae6:	af00      	add	r7, sp, #0
 8008ae8:	60f8      	str	r0, [r7, #12]
 8008aea:	60b9      	str	r1, [r7, #8]
 8008aec:	607a      	str	r2, [r7, #4]
 8008aee:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	6a1b      	ldr	r3, [r3, #32]
 8008af4:	f023 0210 	bic.w	r2, r3, #16
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	699b      	ldr	r3, [r3, #24]
 8008b00:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	6a1b      	ldr	r3, [r3, #32]
 8008b06:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008b08:	697b      	ldr	r3, [r7, #20]
 8008b0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b0e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	021b      	lsls	r3, r3, #8
 8008b14:	697a      	ldr	r2, [r7, #20]
 8008b16:	4313      	orrs	r3, r2
 8008b18:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008b1a:	697b      	ldr	r3, [r7, #20]
 8008b1c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008b20:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	031b      	lsls	r3, r3, #12
 8008b26:	b29b      	uxth	r3, r3
 8008b28:	697a      	ldr	r2, [r7, #20]
 8008b2a:	4313      	orrs	r3, r2
 8008b2c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008b2e:	693b      	ldr	r3, [r7, #16]
 8008b30:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008b34:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	011b      	lsls	r3, r3, #4
 8008b3a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008b3e:	693a      	ldr	r2, [r7, #16]
 8008b40:	4313      	orrs	r3, r2
 8008b42:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	697a      	ldr	r2, [r7, #20]
 8008b48:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	693a      	ldr	r2, [r7, #16]
 8008b4e:	621a      	str	r2, [r3, #32]
}
 8008b50:	bf00      	nop
 8008b52:	371c      	adds	r7, #28
 8008b54:	46bd      	mov	sp, r7
 8008b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5a:	4770      	bx	lr

08008b5c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b087      	sub	sp, #28
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	60f8      	str	r0, [r7, #12]
 8008b64:	60b9      	str	r1, [r7, #8]
 8008b66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	6a1b      	ldr	r3, [r3, #32]
 8008b6c:	f023 0210 	bic.w	r2, r3, #16
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	699b      	ldr	r3, [r3, #24]
 8008b78:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	6a1b      	ldr	r3, [r3, #32]
 8008b7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008b80:	697b      	ldr	r3, [r7, #20]
 8008b82:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008b86:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	031b      	lsls	r3, r3, #12
 8008b8c:	697a      	ldr	r2, [r7, #20]
 8008b8e:	4313      	orrs	r3, r2
 8008b90:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008b92:	693b      	ldr	r3, [r7, #16]
 8008b94:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008b98:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008b9a:	68bb      	ldr	r3, [r7, #8]
 8008b9c:	011b      	lsls	r3, r3, #4
 8008b9e:	693a      	ldr	r2, [r7, #16]
 8008ba0:	4313      	orrs	r3, r2
 8008ba2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	697a      	ldr	r2, [r7, #20]
 8008ba8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	693a      	ldr	r2, [r7, #16]
 8008bae:	621a      	str	r2, [r3, #32]
}
 8008bb0:	bf00      	nop
 8008bb2:	371c      	adds	r7, #28
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bba:	4770      	bx	lr

08008bbc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008bbc:	b480      	push	{r7}
 8008bbe:	b087      	sub	sp, #28
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	60f8      	str	r0, [r7, #12]
 8008bc4:	60b9      	str	r1, [r7, #8]
 8008bc6:	607a      	str	r2, [r7, #4]
 8008bc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	6a1b      	ldr	r3, [r3, #32]
 8008bce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	69db      	ldr	r3, [r3, #28]
 8008bda:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	6a1b      	ldr	r3, [r3, #32]
 8008be0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008be2:	697b      	ldr	r3, [r7, #20]
 8008be4:	f023 0303 	bic.w	r3, r3, #3
 8008be8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8008bea:	697a      	ldr	r2, [r7, #20]
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	4313      	orrs	r3, r2
 8008bf0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008bf2:	697b      	ldr	r3, [r7, #20]
 8008bf4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008bf8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	011b      	lsls	r3, r3, #4
 8008bfe:	b2db      	uxtb	r3, r3
 8008c00:	697a      	ldr	r2, [r7, #20]
 8008c02:	4313      	orrs	r3, r2
 8008c04:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008c06:	693b      	ldr	r3, [r7, #16]
 8008c08:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8008c0c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008c0e:	68bb      	ldr	r3, [r7, #8]
 8008c10:	021b      	lsls	r3, r3, #8
 8008c12:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8008c16:	693a      	ldr	r2, [r7, #16]
 8008c18:	4313      	orrs	r3, r2
 8008c1a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	697a      	ldr	r2, [r7, #20]
 8008c20:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	693a      	ldr	r2, [r7, #16]
 8008c26:	621a      	str	r2, [r3, #32]
}
 8008c28:	bf00      	nop
 8008c2a:	371c      	adds	r7, #28
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c32:	4770      	bx	lr

08008c34 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008c34:	b480      	push	{r7}
 8008c36:	b087      	sub	sp, #28
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	60f8      	str	r0, [r7, #12]
 8008c3c:	60b9      	str	r1, [r7, #8]
 8008c3e:	607a      	str	r2, [r7, #4]
 8008c40:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	6a1b      	ldr	r3, [r3, #32]
 8008c46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	69db      	ldr	r3, [r3, #28]
 8008c52:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	6a1b      	ldr	r3, [r3, #32]
 8008c58:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008c5a:	697b      	ldr	r3, [r7, #20]
 8008c5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c60:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	021b      	lsls	r3, r3, #8
 8008c66:	697a      	ldr	r2, [r7, #20]
 8008c68:	4313      	orrs	r3, r2
 8008c6a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008c6c:	697b      	ldr	r3, [r7, #20]
 8008c6e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008c72:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	031b      	lsls	r3, r3, #12
 8008c78:	b29b      	uxth	r3, r3
 8008c7a:	697a      	ldr	r2, [r7, #20]
 8008c7c:	4313      	orrs	r3, r2
 8008c7e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008c80:	693b      	ldr	r3, [r7, #16]
 8008c82:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8008c86:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008c88:	68bb      	ldr	r3, [r7, #8]
 8008c8a:	031b      	lsls	r3, r3, #12
 8008c8c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8008c90:	693a      	ldr	r2, [r7, #16]
 8008c92:	4313      	orrs	r3, r2
 8008c94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	697a      	ldr	r2, [r7, #20]
 8008c9a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	693a      	ldr	r2, [r7, #16]
 8008ca0:	621a      	str	r2, [r3, #32]
}
 8008ca2:	bf00      	nop
 8008ca4:	371c      	adds	r7, #28
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cac:	4770      	bx	lr

08008cae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008cae:	b480      	push	{r7}
 8008cb0:	b085      	sub	sp, #20
 8008cb2:	af00      	add	r7, sp, #0
 8008cb4:	6078      	str	r0, [r7, #4]
 8008cb6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	689b      	ldr	r3, [r3, #8]
 8008cbc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cc4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008cc6:	683a      	ldr	r2, [r7, #0]
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	4313      	orrs	r3, r2
 8008ccc:	f043 0307 	orr.w	r3, r3, #7
 8008cd0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	68fa      	ldr	r2, [r7, #12]
 8008cd6:	609a      	str	r2, [r3, #8]
}
 8008cd8:	bf00      	nop
 8008cda:	3714      	adds	r7, #20
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce2:	4770      	bx	lr

08008ce4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008ce4:	b480      	push	{r7}
 8008ce6:	b087      	sub	sp, #28
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	60f8      	str	r0, [r7, #12]
 8008cec:	60b9      	str	r1, [r7, #8]
 8008cee:	607a      	str	r2, [r7, #4]
 8008cf0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	689b      	ldr	r3, [r3, #8]
 8008cf6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008cf8:	697b      	ldr	r3, [r7, #20]
 8008cfa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008cfe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	021a      	lsls	r2, r3, #8
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	431a      	orrs	r2, r3
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	4313      	orrs	r3, r2
 8008d0c:	697a      	ldr	r2, [r7, #20]
 8008d0e:	4313      	orrs	r3, r2
 8008d10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	697a      	ldr	r2, [r7, #20]
 8008d16:	609a      	str	r2, [r3, #8]
}
 8008d18:	bf00      	nop
 8008d1a:	371c      	adds	r7, #28
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d22:	4770      	bx	lr

08008d24 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008d24:	b480      	push	{r7}
 8008d26:	b087      	sub	sp, #28
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	60f8      	str	r0, [r7, #12]
 8008d2c:	60b9      	str	r1, [r7, #8]
 8008d2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008d30:	68bb      	ldr	r3, [r7, #8]
 8008d32:	f003 031f 	and.w	r3, r3, #31
 8008d36:	2201      	movs	r2, #1
 8008d38:	fa02 f303 	lsl.w	r3, r2, r3
 8008d3c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	6a1a      	ldr	r2, [r3, #32]
 8008d42:	697b      	ldr	r3, [r7, #20]
 8008d44:	43db      	mvns	r3, r3
 8008d46:	401a      	ands	r2, r3
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	6a1a      	ldr	r2, [r3, #32]
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	f003 031f 	and.w	r3, r3, #31
 8008d56:	6879      	ldr	r1, [r7, #4]
 8008d58:	fa01 f303 	lsl.w	r3, r1, r3
 8008d5c:	431a      	orrs	r2, r3
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	621a      	str	r2, [r3, #32]
}
 8008d62:	bf00      	nop
 8008d64:	371c      	adds	r7, #28
 8008d66:	46bd      	mov	sp, r7
 8008d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6c:	4770      	bx	lr
	...

08008d70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008d70:	b480      	push	{r7}
 8008d72:	b085      	sub	sp, #20
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
 8008d78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d80:	2b01      	cmp	r3, #1
 8008d82:	d101      	bne.n	8008d88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008d84:	2302      	movs	r3, #2
 8008d86:	e068      	b.n	8008e5a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2201      	movs	r2, #1
 8008d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2202      	movs	r2, #2
 8008d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	685b      	ldr	r3, [r3, #4]
 8008d9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	689b      	ldr	r3, [r3, #8]
 8008da6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	4a2e      	ldr	r2, [pc, #184]	; (8008e68 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008dae:	4293      	cmp	r3, r2
 8008db0:	d004      	beq.n	8008dbc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	4a2d      	ldr	r2, [pc, #180]	; (8008e6c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008db8:	4293      	cmp	r3, r2
 8008dba:	d108      	bne.n	8008dce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008dc2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	685b      	ldr	r3, [r3, #4]
 8008dc8:	68fa      	ldr	r2, [r7, #12]
 8008dca:	4313      	orrs	r3, r2
 8008dcc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008dd4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	68fa      	ldr	r2, [r7, #12]
 8008ddc:	4313      	orrs	r3, r2
 8008dde:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	68fa      	ldr	r2, [r7, #12]
 8008de6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	4a1e      	ldr	r2, [pc, #120]	; (8008e68 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008dee:	4293      	cmp	r3, r2
 8008df0:	d01d      	beq.n	8008e2e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008dfa:	d018      	beq.n	8008e2e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	4a1b      	ldr	r2, [pc, #108]	; (8008e70 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008e02:	4293      	cmp	r3, r2
 8008e04:	d013      	beq.n	8008e2e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	4a1a      	ldr	r2, [pc, #104]	; (8008e74 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008e0c:	4293      	cmp	r3, r2
 8008e0e:	d00e      	beq.n	8008e2e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	4a18      	ldr	r2, [pc, #96]	; (8008e78 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008e16:	4293      	cmp	r3, r2
 8008e18:	d009      	beq.n	8008e2e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	4a13      	ldr	r2, [pc, #76]	; (8008e6c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008e20:	4293      	cmp	r3, r2
 8008e22:	d004      	beq.n	8008e2e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	4a14      	ldr	r2, [pc, #80]	; (8008e7c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	d10c      	bne.n	8008e48 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	689b      	ldr	r3, [r3, #8]
 8008e3a:	68ba      	ldr	r2, [r7, #8]
 8008e3c:	4313      	orrs	r3, r2
 8008e3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	68ba      	ldr	r2, [r7, #8]
 8008e46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2201      	movs	r2, #1
 8008e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2200      	movs	r2, #0
 8008e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008e58:	2300      	movs	r3, #0
}
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	3714      	adds	r7, #20
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e64:	4770      	bx	lr
 8008e66:	bf00      	nop
 8008e68:	40012c00 	.word	0x40012c00
 8008e6c:	40013400 	.word	0x40013400
 8008e70:	40000400 	.word	0x40000400
 8008e74:	40000800 	.word	0x40000800
 8008e78:	40000c00 	.word	0x40000c00
 8008e7c:	40014000 	.word	0x40014000

08008e80 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008e80:	b480      	push	{r7}
 8008e82:	b085      	sub	sp, #20
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
 8008e88:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e94:	2b01      	cmp	r3, #1
 8008e96:	d101      	bne.n	8008e9c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008e98:	2302      	movs	r3, #2
 8008e9a:	e065      	b.n	8008f68 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2201      	movs	r2, #1
 8008ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	68db      	ldr	r3, [r3, #12]
 8008eae:	4313      	orrs	r3, r2
 8008eb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	689b      	ldr	r3, [r3, #8]
 8008ebc:	4313      	orrs	r3, r2
 8008ebe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	685b      	ldr	r3, [r3, #4]
 8008eca:	4313      	orrs	r3, r2
 8008ecc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	4313      	orrs	r3, r2
 8008eda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	691b      	ldr	r3, [r3, #16]
 8008ee6:	4313      	orrs	r3, r2
 8008ee8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	695b      	ldr	r3, [r3, #20]
 8008ef4:	4313      	orrs	r3, r2
 8008ef6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f02:	4313      	orrs	r3, r2
 8008f04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	699b      	ldr	r3, [r3, #24]
 8008f10:	041b      	lsls	r3, r3, #16
 8008f12:	4313      	orrs	r3, r2
 8008f14:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	4a16      	ldr	r2, [pc, #88]	; (8008f74 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	d004      	beq.n	8008f2a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	4a14      	ldr	r2, [pc, #80]	; (8008f78 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8008f26:	4293      	cmp	r3, r2
 8008f28:	d115      	bne.n	8008f56 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f34:	051b      	lsls	r3, r3, #20
 8008f36:	4313      	orrs	r3, r2
 8008f38:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	69db      	ldr	r3, [r3, #28]
 8008f44:	4313      	orrs	r3, r2
 8008f46:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	6a1b      	ldr	r3, [r3, #32]
 8008f52:	4313      	orrs	r3, r2
 8008f54:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	68fa      	ldr	r2, [r7, #12]
 8008f5c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	2200      	movs	r2, #0
 8008f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008f66:	2300      	movs	r3, #0
}
 8008f68:	4618      	mov	r0, r3
 8008f6a:	3714      	adds	r7, #20
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f72:	4770      	bx	lr
 8008f74:	40012c00 	.word	0x40012c00
 8008f78:	40013400 	.word	0x40013400

08008f7c <HAL_TIMEx_ConfigBreakInput>:
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             const TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)

{
 8008f7c:	b480      	push	{r7}
 8008f7e:	b08b      	sub	sp, #44	; 0x2c
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	60f8      	str	r0, [r7, #12]
 8008f84:	60b9      	str	r1, [r7, #8]
 8008f86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008f88:	2300      	movs	r3, #0
 8008f8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#else
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));
#endif /* DFSDM1_Channel0 */

  /* Check input state */
  __HAL_LOCK(htim);
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f94:	2b01      	cmp	r3, #1
 8008f96:	d101      	bne.n	8008f9c <HAL_TIMEx_ConfigBreakInput+0x20>
 8008f98:	2302      	movs	r3, #2
 8008f9a:	e0af      	b.n	80090fc <HAL_TIMEx_ConfigBreakInput+0x180>
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	2201      	movs	r2, #1
 8008fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (sBreakInputConfig->Source)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	3b01      	subs	r3, #1
 8008faa:	2b07      	cmp	r3, #7
 8008fac:	d83a      	bhi.n	8009024 <HAL_TIMEx_ConfigBreakInput+0xa8>
 8008fae:	a201      	add	r2, pc, #4	; (adr r2, 8008fb4 <HAL_TIMEx_ConfigBreakInput+0x38>)
 8008fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fb4:	08008fd5 	.word	0x08008fd5
 8008fb8:	08008fe9 	.word	0x08008fe9
 8008fbc:	08009025 	.word	0x08009025
 8008fc0:	08008ffd 	.word	0x08008ffd
 8008fc4:	08009025 	.word	0x08009025
 8008fc8:	08009025 	.word	0x08009025
 8008fcc:	08009025 	.word	0x08009025
 8008fd0:	08009011 	.word	0x08009011
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_OR2_BKINE;
 8008fd4:	2301      	movs	r3, #1
 8008fd6:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKINE_Pos;
 8008fd8:	2300      	movs	r3, #0
 8008fda:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_OR2_BKINP;
 8008fdc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008fe0:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_OR2_BKINP_Pos;
 8008fe2:	2309      	movs	r3, #9
 8008fe4:	613b      	str	r3, [r7, #16]
      break;
 8008fe6:	e026      	b.n	8009036 <HAL_TIMEx_ConfigBreakInput+0xba>
    }
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_OR2_BKCMP1E;
 8008fe8:	2302      	movs	r3, #2
 8008fea:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKCMP1E_Pos;
 8008fec:	2301      	movs	r3, #1
 8008fee:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_OR2_BKCMP1P;
 8008ff0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ff4:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_OR2_BKCMP1P_Pos;
 8008ff6:	230a      	movs	r3, #10
 8008ff8:	613b      	str	r3, [r7, #16]
      break;
 8008ffa:	e01c      	b.n	8009036 <HAL_TIMEx_ConfigBreakInput+0xba>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_OR2_BKCMP2E;
 8008ffc:	2304      	movs	r3, #4
 8008ffe:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKCMP2E_Pos;
 8009000:	2302      	movs	r3, #2
 8009002:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_OR2_BKCMP2P;
 8009004:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009008:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_OR2_BKCMP2P_Pos;
 800900a:	230b      	movs	r3, #11
 800900c:	613b      	str	r3, [r7, #16]
      break;
 800900e:	e012      	b.n	8009036 <HAL_TIMEx_ConfigBreakInput+0xba>
    }
#if defined(DFSDM1_Channel0)
    case TIM_BREAKINPUTSOURCE_DFSDM1:
    {
      bkin_enable_mask = TIM1_OR2_BKDF1BK0E;
 8009010:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009014:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKDF1BK0E_Pos;
 8009016:	2308      	movs	r3, #8
 8009018:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = 0U;
 800901a:	2300      	movs	r3, #0
 800901c:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = 0U;
 800901e:	2300      	movs	r3, #0
 8009020:	613b      	str	r3, [r7, #16]
      break;
 8009022:	e008      	b.n	8009036 <HAL_TIMEx_ConfigBreakInput+0xba>
    }
#endif /* DFSDM1_Channel0 */

    default:
    {
      bkin_enable_mask = 0U;
 8009024:	2300      	movs	r3, #0
 8009026:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = 0U;
 8009028:	2300      	movs	r3, #0
 800902a:	61bb      	str	r3, [r7, #24]
      bkin_enable_bitpos = 0U;
 800902c:	2300      	movs	r3, #0
 800902e:	617b      	str	r3, [r7, #20]
      bkin_polarity_bitpos = 0U;
 8009030:	2300      	movs	r3, #0
 8009032:	613b      	str	r3, [r7, #16]
      break;
 8009034:	bf00      	nop
    }
  }

  switch (BreakInput)
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	2b01      	cmp	r3, #1
 800903a:	d003      	beq.n	8009044 <HAL_TIMEx_ConfigBreakInput+0xc8>
 800903c:	68bb      	ldr	r3, [r7, #8]
 800903e:	2b02      	cmp	r3, #2
 8009040:	d029      	beq.n	8009096 <HAL_TIMEx_ConfigBreakInput+0x11a>
 8009042:	e051      	b.n	80090e8 <HAL_TIMEx_ConfigBreakInput+0x16c>
  {
    case TIM_BREAKINPUT_BRK:
    {
      /* Get the TIMx_OR2 register value */
      tmporx = htim->Instance->OR2;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800904a:	623b      	str	r3, [r7, #32]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 800904c:	69fb      	ldr	r3, [r7, #28]
 800904e:	43db      	mvns	r3, r3
 8009050:	6a3a      	ldr	r2, [r7, #32]
 8009052:	4013      	ands	r3, r2
 8009054:	623b      	str	r3, [r7, #32]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	685a      	ldr	r2, [r3, #4]
 800905a:	697b      	ldr	r3, [r7, #20]
 800905c:	409a      	lsls	r2, r3
 800905e:	69fb      	ldr	r3, [r7, #28]
 8009060:	4013      	ands	r3, r2
 8009062:	6a3a      	ldr	r2, [r7, #32]
 8009064:	4313      	orrs	r3, r2
 8009066:	623b      	str	r3, [r7, #32]

      /* Set the break input polarity */
#if defined(DFSDM1_Channel0)
      if (sBreakInputConfig->Source != TIM_BREAKINPUTSOURCE_DFSDM1)
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	2b08      	cmp	r3, #8
 800906e:	d00d      	beq.n	800908c <HAL_TIMEx_ConfigBreakInput+0x110>
#endif /* DFSDM1_Channel0 */
      {
        tmporx &= ~bkin_polarity_mask;
 8009070:	69bb      	ldr	r3, [r7, #24]
 8009072:	43db      	mvns	r3, r3
 8009074:	6a3a      	ldr	r2, [r7, #32]
 8009076:	4013      	ands	r3, r2
 8009078:	623b      	str	r3, [r7, #32]
        tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	689a      	ldr	r2, [r3, #8]
 800907e:	693b      	ldr	r3, [r7, #16]
 8009080:	409a      	lsls	r2, r3
 8009082:	69bb      	ldr	r3, [r7, #24]
 8009084:	4013      	ands	r3, r2
 8009086:	6a3a      	ldr	r2, [r7, #32]
 8009088:	4313      	orrs	r3, r2
 800908a:	623b      	str	r3, [r7, #32]
      }

      /* Set TIMx_OR2 */
      htim->Instance->OR2 = tmporx;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	6a3a      	ldr	r2, [r7, #32]
 8009092:	661a      	str	r2, [r3, #96]	; 0x60
      break;
 8009094:	e02c      	b.n	80090f0 <HAL_TIMEx_ConfigBreakInput+0x174>
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_OR3 register value */
      tmporx = htim->Instance->OR3;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800909c:	623b      	str	r3, [r7, #32]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 800909e:	69fb      	ldr	r3, [r7, #28]
 80090a0:	43db      	mvns	r3, r3
 80090a2:	6a3a      	ldr	r2, [r7, #32]
 80090a4:	4013      	ands	r3, r2
 80090a6:	623b      	str	r3, [r7, #32]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	685a      	ldr	r2, [r3, #4]
 80090ac:	697b      	ldr	r3, [r7, #20]
 80090ae:	409a      	lsls	r2, r3
 80090b0:	69fb      	ldr	r3, [r7, #28]
 80090b2:	4013      	ands	r3, r2
 80090b4:	6a3a      	ldr	r2, [r7, #32]
 80090b6:	4313      	orrs	r3, r2
 80090b8:	623b      	str	r3, [r7, #32]

      /* Set the break input polarity */
#if defined(DFSDM1_Channel0)
      if (sBreakInputConfig->Source != TIM_BREAKINPUTSOURCE_DFSDM1)
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	2b08      	cmp	r3, #8
 80090c0:	d00d      	beq.n	80090de <HAL_TIMEx_ConfigBreakInput+0x162>
#endif /* DFSDM1_Channel0 */
      {
        tmporx &= ~bkin_polarity_mask;
 80090c2:	69bb      	ldr	r3, [r7, #24]
 80090c4:	43db      	mvns	r3, r3
 80090c6:	6a3a      	ldr	r2, [r7, #32]
 80090c8:	4013      	ands	r3, r2
 80090ca:	623b      	str	r3, [r7, #32]
        tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	689a      	ldr	r2, [r3, #8]
 80090d0:	693b      	ldr	r3, [r7, #16]
 80090d2:	409a      	lsls	r2, r3
 80090d4:	69bb      	ldr	r3, [r7, #24]
 80090d6:	4013      	ands	r3, r2
 80090d8:	6a3a      	ldr	r2, [r7, #32]
 80090da:	4313      	orrs	r3, r2
 80090dc:	623b      	str	r3, [r7, #32]
      }

      /* Set TIMx_OR3 */
      htim->Instance->OR3 = tmporx;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	6a3a      	ldr	r2, [r7, #32]
 80090e4:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 80090e6:	e003      	b.n	80090f0 <HAL_TIMEx_ConfigBreakInput+0x174>
    }
    default:
      status = HAL_ERROR;
 80090e8:	2301      	movs	r3, #1
 80090ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80090ee:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	2200      	movs	r2, #0
 80090f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80090f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80090fc:	4618      	mov	r0, r3
 80090fe:	372c      	adds	r7, #44	; 0x2c
 8009100:	46bd      	mov	sp, r7
 8009102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009106:	4770      	bx	lr

08009108 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009108:	b480      	push	{r7}
 800910a:	b083      	sub	sp, #12
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009110:	bf00      	nop
 8009112:	370c      	adds	r7, #12
 8009114:	46bd      	mov	sp, r7
 8009116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911a:	4770      	bx	lr

0800911c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800911c:	b480      	push	{r7}
 800911e:	b083      	sub	sp, #12
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009124:	bf00      	nop
 8009126:	370c      	adds	r7, #12
 8009128:	46bd      	mov	sp, r7
 800912a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912e:	4770      	bx	lr

08009130 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009130:	b480      	push	{r7}
 8009132:	b083      	sub	sp, #12
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009138:	bf00      	nop
 800913a:	370c      	adds	r7, #12
 800913c:	46bd      	mov	sp, r7
 800913e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009142:	4770      	bx	lr

08009144 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b082      	sub	sp, #8
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d101      	bne.n	8009156 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009152:	2301      	movs	r3, #1
 8009154:	e042      	b.n	80091dc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800915c:	2b00      	cmp	r3, #0
 800915e:	d106      	bne.n	800916e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2200      	movs	r2, #0
 8009164:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009168:	6878      	ldr	r0, [r7, #4]
 800916a:	f7f8 fd85 	bl	8001c78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	2224      	movs	r2, #36	; 0x24
 8009172:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	681a      	ldr	r2, [r3, #0]
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f022 0201 	bic.w	r2, r2, #1
 8009184:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f000 f82c 	bl	80091e4 <UART_SetConfig>
 800918c:	4603      	mov	r3, r0
 800918e:	2b01      	cmp	r3, #1
 8009190:	d101      	bne.n	8009196 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009192:	2301      	movs	r3, #1
 8009194:	e022      	b.n	80091dc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800919a:	2b00      	cmp	r3, #0
 800919c:	d002      	beq.n	80091a4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800919e:	6878      	ldr	r0, [r7, #4]
 80091a0:	f000 fb1c 	bl	80097dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	685a      	ldr	r2, [r3, #4]
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80091b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	689a      	ldr	r2, [r3, #8]
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80091c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	681a      	ldr	r2, [r3, #0]
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f042 0201 	orr.w	r2, r2, #1
 80091d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80091d4:	6878      	ldr	r0, [r7, #4]
 80091d6:	f000 fba3 	bl	8009920 <UART_CheckIdleState>
 80091da:	4603      	mov	r3, r0
}
 80091dc:	4618      	mov	r0, r3
 80091de:	3708      	adds	r7, #8
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bd80      	pop	{r7, pc}

080091e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80091e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80091e8:	b08c      	sub	sp, #48	; 0x30
 80091ea:	af00      	add	r7, sp, #0
 80091ec:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80091ee:	2300      	movs	r3, #0
 80091f0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80091f4:	697b      	ldr	r3, [r7, #20]
 80091f6:	689a      	ldr	r2, [r3, #8]
 80091f8:	697b      	ldr	r3, [r7, #20]
 80091fa:	691b      	ldr	r3, [r3, #16]
 80091fc:	431a      	orrs	r2, r3
 80091fe:	697b      	ldr	r3, [r7, #20]
 8009200:	695b      	ldr	r3, [r3, #20]
 8009202:	431a      	orrs	r2, r3
 8009204:	697b      	ldr	r3, [r7, #20]
 8009206:	69db      	ldr	r3, [r3, #28]
 8009208:	4313      	orrs	r3, r2
 800920a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800920c:	697b      	ldr	r3, [r7, #20]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	681a      	ldr	r2, [r3, #0]
 8009212:	4baa      	ldr	r3, [pc, #680]	; (80094bc <UART_SetConfig+0x2d8>)
 8009214:	4013      	ands	r3, r2
 8009216:	697a      	ldr	r2, [r7, #20]
 8009218:	6812      	ldr	r2, [r2, #0]
 800921a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800921c:	430b      	orrs	r3, r1
 800921e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009220:	697b      	ldr	r3, [r7, #20]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	685b      	ldr	r3, [r3, #4]
 8009226:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800922a:	697b      	ldr	r3, [r7, #20]
 800922c:	68da      	ldr	r2, [r3, #12]
 800922e:	697b      	ldr	r3, [r7, #20]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	430a      	orrs	r2, r1
 8009234:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009236:	697b      	ldr	r3, [r7, #20]
 8009238:	699b      	ldr	r3, [r3, #24]
 800923a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800923c:	697b      	ldr	r3, [r7, #20]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	4a9f      	ldr	r2, [pc, #636]	; (80094c0 <UART_SetConfig+0x2dc>)
 8009242:	4293      	cmp	r3, r2
 8009244:	d004      	beq.n	8009250 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009246:	697b      	ldr	r3, [r7, #20]
 8009248:	6a1b      	ldr	r3, [r3, #32]
 800924a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800924c:	4313      	orrs	r3, r2
 800924e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009250:	697b      	ldr	r3, [r7, #20]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	689b      	ldr	r3, [r3, #8]
 8009256:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800925a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800925e:	697a      	ldr	r2, [r7, #20]
 8009260:	6812      	ldr	r2, [r2, #0]
 8009262:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009264:	430b      	orrs	r3, r1
 8009266:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009268:	697b      	ldr	r3, [r7, #20]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800926e:	f023 010f 	bic.w	r1, r3, #15
 8009272:	697b      	ldr	r3, [r7, #20]
 8009274:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009276:	697b      	ldr	r3, [r7, #20]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	430a      	orrs	r2, r1
 800927c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800927e:	697b      	ldr	r3, [r7, #20]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	4a90      	ldr	r2, [pc, #576]	; (80094c4 <UART_SetConfig+0x2e0>)
 8009284:	4293      	cmp	r3, r2
 8009286:	d125      	bne.n	80092d4 <UART_SetConfig+0xf0>
 8009288:	4b8f      	ldr	r3, [pc, #572]	; (80094c8 <UART_SetConfig+0x2e4>)
 800928a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800928e:	f003 0303 	and.w	r3, r3, #3
 8009292:	2b03      	cmp	r3, #3
 8009294:	d81a      	bhi.n	80092cc <UART_SetConfig+0xe8>
 8009296:	a201      	add	r2, pc, #4	; (adr r2, 800929c <UART_SetConfig+0xb8>)
 8009298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800929c:	080092ad 	.word	0x080092ad
 80092a0:	080092bd 	.word	0x080092bd
 80092a4:	080092b5 	.word	0x080092b5
 80092a8:	080092c5 	.word	0x080092c5
 80092ac:	2301      	movs	r3, #1
 80092ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80092b2:	e116      	b.n	80094e2 <UART_SetConfig+0x2fe>
 80092b4:	2302      	movs	r3, #2
 80092b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80092ba:	e112      	b.n	80094e2 <UART_SetConfig+0x2fe>
 80092bc:	2304      	movs	r3, #4
 80092be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80092c2:	e10e      	b.n	80094e2 <UART_SetConfig+0x2fe>
 80092c4:	2308      	movs	r3, #8
 80092c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80092ca:	e10a      	b.n	80094e2 <UART_SetConfig+0x2fe>
 80092cc:	2310      	movs	r3, #16
 80092ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80092d2:	e106      	b.n	80094e2 <UART_SetConfig+0x2fe>
 80092d4:	697b      	ldr	r3, [r7, #20]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	4a7c      	ldr	r2, [pc, #496]	; (80094cc <UART_SetConfig+0x2e8>)
 80092da:	4293      	cmp	r3, r2
 80092dc:	d138      	bne.n	8009350 <UART_SetConfig+0x16c>
 80092de:	4b7a      	ldr	r3, [pc, #488]	; (80094c8 <UART_SetConfig+0x2e4>)
 80092e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092e4:	f003 030c 	and.w	r3, r3, #12
 80092e8:	2b0c      	cmp	r3, #12
 80092ea:	d82d      	bhi.n	8009348 <UART_SetConfig+0x164>
 80092ec:	a201      	add	r2, pc, #4	; (adr r2, 80092f4 <UART_SetConfig+0x110>)
 80092ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092f2:	bf00      	nop
 80092f4:	08009329 	.word	0x08009329
 80092f8:	08009349 	.word	0x08009349
 80092fc:	08009349 	.word	0x08009349
 8009300:	08009349 	.word	0x08009349
 8009304:	08009339 	.word	0x08009339
 8009308:	08009349 	.word	0x08009349
 800930c:	08009349 	.word	0x08009349
 8009310:	08009349 	.word	0x08009349
 8009314:	08009331 	.word	0x08009331
 8009318:	08009349 	.word	0x08009349
 800931c:	08009349 	.word	0x08009349
 8009320:	08009349 	.word	0x08009349
 8009324:	08009341 	.word	0x08009341
 8009328:	2300      	movs	r3, #0
 800932a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800932e:	e0d8      	b.n	80094e2 <UART_SetConfig+0x2fe>
 8009330:	2302      	movs	r3, #2
 8009332:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009336:	e0d4      	b.n	80094e2 <UART_SetConfig+0x2fe>
 8009338:	2304      	movs	r3, #4
 800933a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800933e:	e0d0      	b.n	80094e2 <UART_SetConfig+0x2fe>
 8009340:	2308      	movs	r3, #8
 8009342:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009346:	e0cc      	b.n	80094e2 <UART_SetConfig+0x2fe>
 8009348:	2310      	movs	r3, #16
 800934a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800934e:	e0c8      	b.n	80094e2 <UART_SetConfig+0x2fe>
 8009350:	697b      	ldr	r3, [r7, #20]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	4a5e      	ldr	r2, [pc, #376]	; (80094d0 <UART_SetConfig+0x2ec>)
 8009356:	4293      	cmp	r3, r2
 8009358:	d125      	bne.n	80093a6 <UART_SetConfig+0x1c2>
 800935a:	4b5b      	ldr	r3, [pc, #364]	; (80094c8 <UART_SetConfig+0x2e4>)
 800935c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009360:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009364:	2b30      	cmp	r3, #48	; 0x30
 8009366:	d016      	beq.n	8009396 <UART_SetConfig+0x1b2>
 8009368:	2b30      	cmp	r3, #48	; 0x30
 800936a:	d818      	bhi.n	800939e <UART_SetConfig+0x1ba>
 800936c:	2b20      	cmp	r3, #32
 800936e:	d00a      	beq.n	8009386 <UART_SetConfig+0x1a2>
 8009370:	2b20      	cmp	r3, #32
 8009372:	d814      	bhi.n	800939e <UART_SetConfig+0x1ba>
 8009374:	2b00      	cmp	r3, #0
 8009376:	d002      	beq.n	800937e <UART_SetConfig+0x19a>
 8009378:	2b10      	cmp	r3, #16
 800937a:	d008      	beq.n	800938e <UART_SetConfig+0x1aa>
 800937c:	e00f      	b.n	800939e <UART_SetConfig+0x1ba>
 800937e:	2300      	movs	r3, #0
 8009380:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009384:	e0ad      	b.n	80094e2 <UART_SetConfig+0x2fe>
 8009386:	2302      	movs	r3, #2
 8009388:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800938c:	e0a9      	b.n	80094e2 <UART_SetConfig+0x2fe>
 800938e:	2304      	movs	r3, #4
 8009390:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009394:	e0a5      	b.n	80094e2 <UART_SetConfig+0x2fe>
 8009396:	2308      	movs	r3, #8
 8009398:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800939c:	e0a1      	b.n	80094e2 <UART_SetConfig+0x2fe>
 800939e:	2310      	movs	r3, #16
 80093a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80093a4:	e09d      	b.n	80094e2 <UART_SetConfig+0x2fe>
 80093a6:	697b      	ldr	r3, [r7, #20]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	4a4a      	ldr	r2, [pc, #296]	; (80094d4 <UART_SetConfig+0x2f0>)
 80093ac:	4293      	cmp	r3, r2
 80093ae:	d125      	bne.n	80093fc <UART_SetConfig+0x218>
 80093b0:	4b45      	ldr	r3, [pc, #276]	; (80094c8 <UART_SetConfig+0x2e4>)
 80093b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093b6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80093ba:	2bc0      	cmp	r3, #192	; 0xc0
 80093bc:	d016      	beq.n	80093ec <UART_SetConfig+0x208>
 80093be:	2bc0      	cmp	r3, #192	; 0xc0
 80093c0:	d818      	bhi.n	80093f4 <UART_SetConfig+0x210>
 80093c2:	2b80      	cmp	r3, #128	; 0x80
 80093c4:	d00a      	beq.n	80093dc <UART_SetConfig+0x1f8>
 80093c6:	2b80      	cmp	r3, #128	; 0x80
 80093c8:	d814      	bhi.n	80093f4 <UART_SetConfig+0x210>
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d002      	beq.n	80093d4 <UART_SetConfig+0x1f0>
 80093ce:	2b40      	cmp	r3, #64	; 0x40
 80093d0:	d008      	beq.n	80093e4 <UART_SetConfig+0x200>
 80093d2:	e00f      	b.n	80093f4 <UART_SetConfig+0x210>
 80093d4:	2300      	movs	r3, #0
 80093d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80093da:	e082      	b.n	80094e2 <UART_SetConfig+0x2fe>
 80093dc:	2302      	movs	r3, #2
 80093de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80093e2:	e07e      	b.n	80094e2 <UART_SetConfig+0x2fe>
 80093e4:	2304      	movs	r3, #4
 80093e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80093ea:	e07a      	b.n	80094e2 <UART_SetConfig+0x2fe>
 80093ec:	2308      	movs	r3, #8
 80093ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80093f2:	e076      	b.n	80094e2 <UART_SetConfig+0x2fe>
 80093f4:	2310      	movs	r3, #16
 80093f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80093fa:	e072      	b.n	80094e2 <UART_SetConfig+0x2fe>
 80093fc:	697b      	ldr	r3, [r7, #20]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	4a35      	ldr	r2, [pc, #212]	; (80094d8 <UART_SetConfig+0x2f4>)
 8009402:	4293      	cmp	r3, r2
 8009404:	d12a      	bne.n	800945c <UART_SetConfig+0x278>
 8009406:	4b30      	ldr	r3, [pc, #192]	; (80094c8 <UART_SetConfig+0x2e4>)
 8009408:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800940c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009410:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009414:	d01a      	beq.n	800944c <UART_SetConfig+0x268>
 8009416:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800941a:	d81b      	bhi.n	8009454 <UART_SetConfig+0x270>
 800941c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009420:	d00c      	beq.n	800943c <UART_SetConfig+0x258>
 8009422:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009426:	d815      	bhi.n	8009454 <UART_SetConfig+0x270>
 8009428:	2b00      	cmp	r3, #0
 800942a:	d003      	beq.n	8009434 <UART_SetConfig+0x250>
 800942c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009430:	d008      	beq.n	8009444 <UART_SetConfig+0x260>
 8009432:	e00f      	b.n	8009454 <UART_SetConfig+0x270>
 8009434:	2300      	movs	r3, #0
 8009436:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800943a:	e052      	b.n	80094e2 <UART_SetConfig+0x2fe>
 800943c:	2302      	movs	r3, #2
 800943e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009442:	e04e      	b.n	80094e2 <UART_SetConfig+0x2fe>
 8009444:	2304      	movs	r3, #4
 8009446:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800944a:	e04a      	b.n	80094e2 <UART_SetConfig+0x2fe>
 800944c:	2308      	movs	r3, #8
 800944e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009452:	e046      	b.n	80094e2 <UART_SetConfig+0x2fe>
 8009454:	2310      	movs	r3, #16
 8009456:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800945a:	e042      	b.n	80094e2 <UART_SetConfig+0x2fe>
 800945c:	697b      	ldr	r3, [r7, #20]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	4a17      	ldr	r2, [pc, #92]	; (80094c0 <UART_SetConfig+0x2dc>)
 8009462:	4293      	cmp	r3, r2
 8009464:	d13a      	bne.n	80094dc <UART_SetConfig+0x2f8>
 8009466:	4b18      	ldr	r3, [pc, #96]	; (80094c8 <UART_SetConfig+0x2e4>)
 8009468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800946c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009470:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009474:	d01a      	beq.n	80094ac <UART_SetConfig+0x2c8>
 8009476:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800947a:	d81b      	bhi.n	80094b4 <UART_SetConfig+0x2d0>
 800947c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009480:	d00c      	beq.n	800949c <UART_SetConfig+0x2b8>
 8009482:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009486:	d815      	bhi.n	80094b4 <UART_SetConfig+0x2d0>
 8009488:	2b00      	cmp	r3, #0
 800948a:	d003      	beq.n	8009494 <UART_SetConfig+0x2b0>
 800948c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009490:	d008      	beq.n	80094a4 <UART_SetConfig+0x2c0>
 8009492:	e00f      	b.n	80094b4 <UART_SetConfig+0x2d0>
 8009494:	2300      	movs	r3, #0
 8009496:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800949a:	e022      	b.n	80094e2 <UART_SetConfig+0x2fe>
 800949c:	2302      	movs	r3, #2
 800949e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80094a2:	e01e      	b.n	80094e2 <UART_SetConfig+0x2fe>
 80094a4:	2304      	movs	r3, #4
 80094a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80094aa:	e01a      	b.n	80094e2 <UART_SetConfig+0x2fe>
 80094ac:	2308      	movs	r3, #8
 80094ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80094b2:	e016      	b.n	80094e2 <UART_SetConfig+0x2fe>
 80094b4:	2310      	movs	r3, #16
 80094b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80094ba:	e012      	b.n	80094e2 <UART_SetConfig+0x2fe>
 80094bc:	cfff69f3 	.word	0xcfff69f3
 80094c0:	40008000 	.word	0x40008000
 80094c4:	40013800 	.word	0x40013800
 80094c8:	40021000 	.word	0x40021000
 80094cc:	40004400 	.word	0x40004400
 80094d0:	40004800 	.word	0x40004800
 80094d4:	40004c00 	.word	0x40004c00
 80094d8:	40005000 	.word	0x40005000
 80094dc:	2310      	movs	r3, #16
 80094de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80094e2:	697b      	ldr	r3, [r7, #20]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	4aae      	ldr	r2, [pc, #696]	; (80097a0 <UART_SetConfig+0x5bc>)
 80094e8:	4293      	cmp	r3, r2
 80094ea:	f040 8097 	bne.w	800961c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80094ee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80094f2:	2b08      	cmp	r3, #8
 80094f4:	d823      	bhi.n	800953e <UART_SetConfig+0x35a>
 80094f6:	a201      	add	r2, pc, #4	; (adr r2, 80094fc <UART_SetConfig+0x318>)
 80094f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094fc:	08009521 	.word	0x08009521
 8009500:	0800953f 	.word	0x0800953f
 8009504:	08009529 	.word	0x08009529
 8009508:	0800953f 	.word	0x0800953f
 800950c:	0800952f 	.word	0x0800952f
 8009510:	0800953f 	.word	0x0800953f
 8009514:	0800953f 	.word	0x0800953f
 8009518:	0800953f 	.word	0x0800953f
 800951c:	08009537 	.word	0x08009537
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009520:	f7fb fc32 	bl	8004d88 <HAL_RCC_GetPCLK1Freq>
 8009524:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009526:	e010      	b.n	800954a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009528:	4b9e      	ldr	r3, [pc, #632]	; (80097a4 <UART_SetConfig+0x5c0>)
 800952a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800952c:	e00d      	b.n	800954a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800952e:	f7fb fb93 	bl	8004c58 <HAL_RCC_GetSysClockFreq>
 8009532:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009534:	e009      	b.n	800954a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009536:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800953a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800953c:	e005      	b.n	800954a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800953e:	2300      	movs	r3, #0
 8009540:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009542:	2301      	movs	r3, #1
 8009544:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009548:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800954a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800954c:	2b00      	cmp	r3, #0
 800954e:	f000 8130 	beq.w	80097b2 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009552:	697b      	ldr	r3, [r7, #20]
 8009554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009556:	4a94      	ldr	r2, [pc, #592]	; (80097a8 <UART_SetConfig+0x5c4>)
 8009558:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800955c:	461a      	mov	r2, r3
 800955e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009560:	fbb3 f3f2 	udiv	r3, r3, r2
 8009564:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009566:	697b      	ldr	r3, [r7, #20]
 8009568:	685a      	ldr	r2, [r3, #4]
 800956a:	4613      	mov	r3, r2
 800956c:	005b      	lsls	r3, r3, #1
 800956e:	4413      	add	r3, r2
 8009570:	69ba      	ldr	r2, [r7, #24]
 8009572:	429a      	cmp	r2, r3
 8009574:	d305      	bcc.n	8009582 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009576:	697b      	ldr	r3, [r7, #20]
 8009578:	685b      	ldr	r3, [r3, #4]
 800957a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800957c:	69ba      	ldr	r2, [r7, #24]
 800957e:	429a      	cmp	r2, r3
 8009580:	d903      	bls.n	800958a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8009582:	2301      	movs	r3, #1
 8009584:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009588:	e113      	b.n	80097b2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800958a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800958c:	2200      	movs	r2, #0
 800958e:	60bb      	str	r3, [r7, #8]
 8009590:	60fa      	str	r2, [r7, #12]
 8009592:	697b      	ldr	r3, [r7, #20]
 8009594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009596:	4a84      	ldr	r2, [pc, #528]	; (80097a8 <UART_SetConfig+0x5c4>)
 8009598:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800959c:	b29b      	uxth	r3, r3
 800959e:	2200      	movs	r2, #0
 80095a0:	603b      	str	r3, [r7, #0]
 80095a2:	607a      	str	r2, [r7, #4]
 80095a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80095a8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80095ac:	f7f6 fe26 	bl	80001fc <__aeabi_uldivmod>
 80095b0:	4602      	mov	r2, r0
 80095b2:	460b      	mov	r3, r1
 80095b4:	4610      	mov	r0, r2
 80095b6:	4619      	mov	r1, r3
 80095b8:	f04f 0200 	mov.w	r2, #0
 80095bc:	f04f 0300 	mov.w	r3, #0
 80095c0:	020b      	lsls	r3, r1, #8
 80095c2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80095c6:	0202      	lsls	r2, r0, #8
 80095c8:	6979      	ldr	r1, [r7, #20]
 80095ca:	6849      	ldr	r1, [r1, #4]
 80095cc:	0849      	lsrs	r1, r1, #1
 80095ce:	2000      	movs	r0, #0
 80095d0:	460c      	mov	r4, r1
 80095d2:	4605      	mov	r5, r0
 80095d4:	eb12 0804 	adds.w	r8, r2, r4
 80095d8:	eb43 0905 	adc.w	r9, r3, r5
 80095dc:	697b      	ldr	r3, [r7, #20]
 80095de:	685b      	ldr	r3, [r3, #4]
 80095e0:	2200      	movs	r2, #0
 80095e2:	469a      	mov	sl, r3
 80095e4:	4693      	mov	fp, r2
 80095e6:	4652      	mov	r2, sl
 80095e8:	465b      	mov	r3, fp
 80095ea:	4640      	mov	r0, r8
 80095ec:	4649      	mov	r1, r9
 80095ee:	f7f6 fe05 	bl	80001fc <__aeabi_uldivmod>
 80095f2:	4602      	mov	r2, r0
 80095f4:	460b      	mov	r3, r1
 80095f6:	4613      	mov	r3, r2
 80095f8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80095fa:	6a3b      	ldr	r3, [r7, #32]
 80095fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009600:	d308      	bcc.n	8009614 <UART_SetConfig+0x430>
 8009602:	6a3b      	ldr	r3, [r7, #32]
 8009604:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009608:	d204      	bcs.n	8009614 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800960a:	697b      	ldr	r3, [r7, #20]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	6a3a      	ldr	r2, [r7, #32]
 8009610:	60da      	str	r2, [r3, #12]
 8009612:	e0ce      	b.n	80097b2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8009614:	2301      	movs	r3, #1
 8009616:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800961a:	e0ca      	b.n	80097b2 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800961c:	697b      	ldr	r3, [r7, #20]
 800961e:	69db      	ldr	r3, [r3, #28]
 8009620:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009624:	d166      	bne.n	80096f4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8009626:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800962a:	2b08      	cmp	r3, #8
 800962c:	d827      	bhi.n	800967e <UART_SetConfig+0x49a>
 800962e:	a201      	add	r2, pc, #4	; (adr r2, 8009634 <UART_SetConfig+0x450>)
 8009630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009634:	08009659 	.word	0x08009659
 8009638:	08009661 	.word	0x08009661
 800963c:	08009669 	.word	0x08009669
 8009640:	0800967f 	.word	0x0800967f
 8009644:	0800966f 	.word	0x0800966f
 8009648:	0800967f 	.word	0x0800967f
 800964c:	0800967f 	.word	0x0800967f
 8009650:	0800967f 	.word	0x0800967f
 8009654:	08009677 	.word	0x08009677
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009658:	f7fb fb96 	bl	8004d88 <HAL_RCC_GetPCLK1Freq>
 800965c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800965e:	e014      	b.n	800968a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009660:	f7fb fba8 	bl	8004db4 <HAL_RCC_GetPCLK2Freq>
 8009664:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009666:	e010      	b.n	800968a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009668:	4b4e      	ldr	r3, [pc, #312]	; (80097a4 <UART_SetConfig+0x5c0>)
 800966a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800966c:	e00d      	b.n	800968a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800966e:	f7fb faf3 	bl	8004c58 <HAL_RCC_GetSysClockFreq>
 8009672:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009674:	e009      	b.n	800968a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009676:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800967a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800967c:	e005      	b.n	800968a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800967e:	2300      	movs	r3, #0
 8009680:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009682:	2301      	movs	r3, #1
 8009684:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009688:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800968a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800968c:	2b00      	cmp	r3, #0
 800968e:	f000 8090 	beq.w	80097b2 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009692:	697b      	ldr	r3, [r7, #20]
 8009694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009696:	4a44      	ldr	r2, [pc, #272]	; (80097a8 <UART_SetConfig+0x5c4>)
 8009698:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800969c:	461a      	mov	r2, r3
 800969e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80096a4:	005a      	lsls	r2, r3, #1
 80096a6:	697b      	ldr	r3, [r7, #20]
 80096a8:	685b      	ldr	r3, [r3, #4]
 80096aa:	085b      	lsrs	r3, r3, #1
 80096ac:	441a      	add	r2, r3
 80096ae:	697b      	ldr	r3, [r7, #20]
 80096b0:	685b      	ldr	r3, [r3, #4]
 80096b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80096b6:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80096b8:	6a3b      	ldr	r3, [r7, #32]
 80096ba:	2b0f      	cmp	r3, #15
 80096bc:	d916      	bls.n	80096ec <UART_SetConfig+0x508>
 80096be:	6a3b      	ldr	r3, [r7, #32]
 80096c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80096c4:	d212      	bcs.n	80096ec <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80096c6:	6a3b      	ldr	r3, [r7, #32]
 80096c8:	b29b      	uxth	r3, r3
 80096ca:	f023 030f 	bic.w	r3, r3, #15
 80096ce:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80096d0:	6a3b      	ldr	r3, [r7, #32]
 80096d2:	085b      	lsrs	r3, r3, #1
 80096d4:	b29b      	uxth	r3, r3
 80096d6:	f003 0307 	and.w	r3, r3, #7
 80096da:	b29a      	uxth	r2, r3
 80096dc:	8bfb      	ldrh	r3, [r7, #30]
 80096de:	4313      	orrs	r3, r2
 80096e0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80096e2:	697b      	ldr	r3, [r7, #20]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	8bfa      	ldrh	r2, [r7, #30]
 80096e8:	60da      	str	r2, [r3, #12]
 80096ea:	e062      	b.n	80097b2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80096ec:	2301      	movs	r3, #1
 80096ee:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80096f2:	e05e      	b.n	80097b2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80096f4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80096f8:	2b08      	cmp	r3, #8
 80096fa:	d828      	bhi.n	800974e <UART_SetConfig+0x56a>
 80096fc:	a201      	add	r2, pc, #4	; (adr r2, 8009704 <UART_SetConfig+0x520>)
 80096fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009702:	bf00      	nop
 8009704:	08009729 	.word	0x08009729
 8009708:	08009731 	.word	0x08009731
 800970c:	08009739 	.word	0x08009739
 8009710:	0800974f 	.word	0x0800974f
 8009714:	0800973f 	.word	0x0800973f
 8009718:	0800974f 	.word	0x0800974f
 800971c:	0800974f 	.word	0x0800974f
 8009720:	0800974f 	.word	0x0800974f
 8009724:	08009747 	.word	0x08009747
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009728:	f7fb fb2e 	bl	8004d88 <HAL_RCC_GetPCLK1Freq>
 800972c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800972e:	e014      	b.n	800975a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009730:	f7fb fb40 	bl	8004db4 <HAL_RCC_GetPCLK2Freq>
 8009734:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009736:	e010      	b.n	800975a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009738:	4b1a      	ldr	r3, [pc, #104]	; (80097a4 <UART_SetConfig+0x5c0>)
 800973a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800973c:	e00d      	b.n	800975a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800973e:	f7fb fa8b 	bl	8004c58 <HAL_RCC_GetSysClockFreq>
 8009742:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009744:	e009      	b.n	800975a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009746:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800974a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800974c:	e005      	b.n	800975a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800974e:	2300      	movs	r3, #0
 8009750:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009752:	2301      	movs	r3, #1
 8009754:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009758:	bf00      	nop
    }

    if (pclk != 0U)
 800975a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800975c:	2b00      	cmp	r3, #0
 800975e:	d028      	beq.n	80097b2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009760:	697b      	ldr	r3, [r7, #20]
 8009762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009764:	4a10      	ldr	r2, [pc, #64]	; (80097a8 <UART_SetConfig+0x5c4>)
 8009766:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800976a:	461a      	mov	r2, r3
 800976c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800976e:	fbb3 f2f2 	udiv	r2, r3, r2
 8009772:	697b      	ldr	r3, [r7, #20]
 8009774:	685b      	ldr	r3, [r3, #4]
 8009776:	085b      	lsrs	r3, r3, #1
 8009778:	441a      	add	r2, r3
 800977a:	697b      	ldr	r3, [r7, #20]
 800977c:	685b      	ldr	r3, [r3, #4]
 800977e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009782:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009784:	6a3b      	ldr	r3, [r7, #32]
 8009786:	2b0f      	cmp	r3, #15
 8009788:	d910      	bls.n	80097ac <UART_SetConfig+0x5c8>
 800978a:	6a3b      	ldr	r3, [r7, #32]
 800978c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009790:	d20c      	bcs.n	80097ac <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009792:	6a3b      	ldr	r3, [r7, #32]
 8009794:	b29a      	uxth	r2, r3
 8009796:	697b      	ldr	r3, [r7, #20]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	60da      	str	r2, [r3, #12]
 800979c:	e009      	b.n	80097b2 <UART_SetConfig+0x5ce>
 800979e:	bf00      	nop
 80097a0:	40008000 	.word	0x40008000
 80097a4:	00f42400 	.word	0x00f42400
 80097a8:	08009e04 	.word	0x08009e04
      }
      else
      {
        ret = HAL_ERROR;
 80097ac:	2301      	movs	r3, #1
 80097ae:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80097b2:	697b      	ldr	r3, [r7, #20]
 80097b4:	2201      	movs	r2, #1
 80097b6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80097ba:	697b      	ldr	r3, [r7, #20]
 80097bc:	2201      	movs	r2, #1
 80097be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80097c2:	697b      	ldr	r3, [r7, #20]
 80097c4:	2200      	movs	r2, #0
 80097c6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80097c8:	697b      	ldr	r3, [r7, #20]
 80097ca:	2200      	movs	r2, #0
 80097cc:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80097ce:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80097d2:	4618      	mov	r0, r3
 80097d4:	3730      	adds	r7, #48	; 0x30
 80097d6:	46bd      	mov	sp, r7
 80097d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080097dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80097dc:	b480      	push	{r7}
 80097de:	b083      	sub	sp, #12
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097e8:	f003 0301 	and.w	r3, r3, #1
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d00a      	beq.n	8009806 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	685b      	ldr	r3, [r3, #4]
 80097f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	430a      	orrs	r2, r1
 8009804:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800980a:	f003 0302 	and.w	r3, r3, #2
 800980e:	2b00      	cmp	r3, #0
 8009810:	d00a      	beq.n	8009828 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	685b      	ldr	r3, [r3, #4]
 8009818:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	430a      	orrs	r2, r1
 8009826:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800982c:	f003 0304 	and.w	r3, r3, #4
 8009830:	2b00      	cmp	r3, #0
 8009832:	d00a      	beq.n	800984a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	685b      	ldr	r3, [r3, #4]
 800983a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	430a      	orrs	r2, r1
 8009848:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800984e:	f003 0308 	and.w	r3, r3, #8
 8009852:	2b00      	cmp	r3, #0
 8009854:	d00a      	beq.n	800986c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	685b      	ldr	r3, [r3, #4]
 800985c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	430a      	orrs	r2, r1
 800986a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009870:	f003 0310 	and.w	r3, r3, #16
 8009874:	2b00      	cmp	r3, #0
 8009876:	d00a      	beq.n	800988e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	689b      	ldr	r3, [r3, #8]
 800987e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	430a      	orrs	r2, r1
 800988c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009892:	f003 0320 	and.w	r3, r3, #32
 8009896:	2b00      	cmp	r3, #0
 8009898:	d00a      	beq.n	80098b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	689b      	ldr	r3, [r3, #8]
 80098a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	430a      	orrs	r2, r1
 80098ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d01a      	beq.n	80098f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	685b      	ldr	r3, [r3, #4]
 80098c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	430a      	orrs	r2, r1
 80098d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80098da:	d10a      	bne.n	80098f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	685b      	ldr	r3, [r3, #4]
 80098e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	430a      	orrs	r2, r1
 80098f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d00a      	beq.n	8009914 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	685b      	ldr	r3, [r3, #4]
 8009904:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	430a      	orrs	r2, r1
 8009912:	605a      	str	r2, [r3, #4]
  }
}
 8009914:	bf00      	nop
 8009916:	370c      	adds	r7, #12
 8009918:	46bd      	mov	sp, r7
 800991a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991e:	4770      	bx	lr

08009920 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b086      	sub	sp, #24
 8009924:	af02      	add	r7, sp, #8
 8009926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2200      	movs	r2, #0
 800992c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009930:	f7f8 fee2 	bl	80026f8 <HAL_GetTick>
 8009934:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	f003 0308 	and.w	r3, r3, #8
 8009940:	2b08      	cmp	r3, #8
 8009942:	d10e      	bne.n	8009962 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009944:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009948:	9300      	str	r3, [sp, #0]
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	2200      	movs	r2, #0
 800994e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	f000 f82f 	bl	80099b6 <UART_WaitOnFlagUntilTimeout>
 8009958:	4603      	mov	r3, r0
 800995a:	2b00      	cmp	r3, #0
 800995c:	d001      	beq.n	8009962 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800995e:	2303      	movs	r3, #3
 8009960:	e025      	b.n	80099ae <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	f003 0304 	and.w	r3, r3, #4
 800996c:	2b04      	cmp	r3, #4
 800996e:	d10e      	bne.n	800998e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009970:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009974:	9300      	str	r3, [sp, #0]
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	2200      	movs	r2, #0
 800997a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800997e:	6878      	ldr	r0, [r7, #4]
 8009980:	f000 f819 	bl	80099b6 <UART_WaitOnFlagUntilTimeout>
 8009984:	4603      	mov	r3, r0
 8009986:	2b00      	cmp	r3, #0
 8009988:	d001      	beq.n	800998e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800998a:	2303      	movs	r3, #3
 800998c:	e00f      	b.n	80099ae <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	2220      	movs	r2, #32
 8009992:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	2220      	movs	r2, #32
 800999a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	2200      	movs	r2, #0
 80099a2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2200      	movs	r2, #0
 80099a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80099ac:	2300      	movs	r3, #0
}
 80099ae:	4618      	mov	r0, r3
 80099b0:	3710      	adds	r7, #16
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}

080099b6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80099b6:	b580      	push	{r7, lr}
 80099b8:	b09c      	sub	sp, #112	; 0x70
 80099ba:	af00      	add	r7, sp, #0
 80099bc:	60f8      	str	r0, [r7, #12]
 80099be:	60b9      	str	r1, [r7, #8]
 80099c0:	603b      	str	r3, [r7, #0]
 80099c2:	4613      	mov	r3, r2
 80099c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80099c6:	e0a9      	b.n	8009b1c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80099c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80099ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80099ce:	f000 80a5 	beq.w	8009b1c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80099d2:	f7f8 fe91 	bl	80026f8 <HAL_GetTick>
 80099d6:	4602      	mov	r2, r0
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	1ad3      	subs	r3, r2, r3
 80099dc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80099de:	429a      	cmp	r2, r3
 80099e0:	d302      	bcc.n	80099e8 <UART_WaitOnFlagUntilTimeout+0x32>
 80099e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d140      	bne.n	8009a6a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80099f0:	e853 3f00 	ldrex	r3, [r3]
 80099f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80099f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80099f8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80099fc:	667b      	str	r3, [r7, #100]	; 0x64
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	461a      	mov	r2, r3
 8009a04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009a06:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009a08:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a0a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009a0c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009a0e:	e841 2300 	strex	r3, r2, [r1]
 8009a12:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009a14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d1e6      	bne.n	80099e8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	3308      	adds	r3, #8
 8009a20:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a24:	e853 3f00 	ldrex	r3, [r3]
 8009a28:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a2c:	f023 0301 	bic.w	r3, r3, #1
 8009a30:	663b      	str	r3, [r7, #96]	; 0x60
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	3308      	adds	r3, #8
 8009a38:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009a3a:	64ba      	str	r2, [r7, #72]	; 0x48
 8009a3c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a3e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009a40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009a42:	e841 2300 	strex	r3, r2, [r1]
 8009a46:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009a48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d1e5      	bne.n	8009a1a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	2220      	movs	r2, #32
 8009a52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	2220      	movs	r2, #32
 8009a5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	2200      	movs	r2, #0
 8009a62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8009a66:	2303      	movs	r3, #3
 8009a68:	e069      	b.n	8009b3e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	f003 0304 	and.w	r3, r3, #4
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d051      	beq.n	8009b1c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	69db      	ldr	r3, [r3, #28]
 8009a7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009a82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a86:	d149      	bne.n	8009b1c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009a90:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a9a:	e853 3f00 	ldrex	r3, [r3]
 8009a9e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aa2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009aa6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	461a      	mov	r2, r3
 8009aae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ab0:	637b      	str	r3, [r7, #52]	; 0x34
 8009ab2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ab4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009ab6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009ab8:	e841 2300 	strex	r3, r2, [r1]
 8009abc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d1e6      	bne.n	8009a92 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	3308      	adds	r3, #8
 8009aca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009acc:	697b      	ldr	r3, [r7, #20]
 8009ace:	e853 3f00 	ldrex	r3, [r3]
 8009ad2:	613b      	str	r3, [r7, #16]
   return(result);
 8009ad4:	693b      	ldr	r3, [r7, #16]
 8009ad6:	f023 0301 	bic.w	r3, r3, #1
 8009ada:	66bb      	str	r3, [r7, #104]	; 0x68
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	3308      	adds	r3, #8
 8009ae2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009ae4:	623a      	str	r2, [r7, #32]
 8009ae6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ae8:	69f9      	ldr	r1, [r7, #28]
 8009aea:	6a3a      	ldr	r2, [r7, #32]
 8009aec:	e841 2300 	strex	r3, r2, [r1]
 8009af0:	61bb      	str	r3, [r7, #24]
   return(result);
 8009af2:	69bb      	ldr	r3, [r7, #24]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d1e5      	bne.n	8009ac4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	2220      	movs	r2, #32
 8009afc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	2220      	movs	r2, #32
 8009b04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	2220      	movs	r2, #32
 8009b0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	2200      	movs	r2, #0
 8009b14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009b18:	2303      	movs	r3, #3
 8009b1a:	e010      	b.n	8009b3e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	69da      	ldr	r2, [r3, #28]
 8009b22:	68bb      	ldr	r3, [r7, #8]
 8009b24:	4013      	ands	r3, r2
 8009b26:	68ba      	ldr	r2, [r7, #8]
 8009b28:	429a      	cmp	r2, r3
 8009b2a:	bf0c      	ite	eq
 8009b2c:	2301      	moveq	r3, #1
 8009b2e:	2300      	movne	r3, #0
 8009b30:	b2db      	uxtb	r3, r3
 8009b32:	461a      	mov	r2, r3
 8009b34:	79fb      	ldrb	r3, [r7, #7]
 8009b36:	429a      	cmp	r2, r3
 8009b38:	f43f af46 	beq.w	80099c8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009b3c:	2300      	movs	r3, #0
}
 8009b3e:	4618      	mov	r0, r3
 8009b40:	3770      	adds	r7, #112	; 0x70
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bd80      	pop	{r7, pc}

08009b46 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009b46:	b480      	push	{r7}
 8009b48:	b085      	sub	sp, #20
 8009b4a:	af00      	add	r7, sp, #0
 8009b4c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009b54:	2b01      	cmp	r3, #1
 8009b56:	d101      	bne.n	8009b5c <HAL_UARTEx_DisableFifoMode+0x16>
 8009b58:	2302      	movs	r3, #2
 8009b5a:	e027      	b.n	8009bac <HAL_UARTEx_DisableFifoMode+0x66>
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2201      	movs	r2, #1
 8009b60:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2224      	movs	r2, #36	; 0x24
 8009b68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	681a      	ldr	r2, [r3, #0]
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	f022 0201 	bic.w	r2, r2, #1
 8009b82:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009b8a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	2200      	movs	r2, #0
 8009b90:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	68fa      	ldr	r2, [r7, #12]
 8009b98:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	2220      	movs	r2, #32
 8009b9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009baa:	2300      	movs	r3, #0
}
 8009bac:	4618      	mov	r0, r3
 8009bae:	3714      	adds	r7, #20
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb6:	4770      	bx	lr

08009bb8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b084      	sub	sp, #16
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
 8009bc0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009bc8:	2b01      	cmp	r3, #1
 8009bca:	d101      	bne.n	8009bd0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009bcc:	2302      	movs	r3, #2
 8009bce:	e02d      	b.n	8009c2c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	2201      	movs	r2, #1
 8009bd4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2224      	movs	r2, #36	; 0x24
 8009bdc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	681a      	ldr	r2, [r3, #0]
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	f022 0201 	bic.w	r2, r2, #1
 8009bf6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	689b      	ldr	r3, [r3, #8]
 8009bfe:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	683a      	ldr	r2, [r7, #0]
 8009c08:	430a      	orrs	r2, r1
 8009c0a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009c0c:	6878      	ldr	r0, [r7, #4]
 8009c0e:	f000 f84f 	bl	8009cb0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	68fa      	ldr	r2, [r7, #12]
 8009c18:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	2220      	movs	r2, #32
 8009c1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	2200      	movs	r2, #0
 8009c26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009c2a:	2300      	movs	r3, #0
}
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	3710      	adds	r7, #16
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bd80      	pop	{r7, pc}

08009c34 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b084      	sub	sp, #16
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
 8009c3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009c44:	2b01      	cmp	r3, #1
 8009c46:	d101      	bne.n	8009c4c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009c48:	2302      	movs	r3, #2
 8009c4a:	e02d      	b.n	8009ca8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2201      	movs	r2, #1
 8009c50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2224      	movs	r2, #36	; 0x24
 8009c58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	681a      	ldr	r2, [r3, #0]
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	f022 0201 	bic.w	r2, r2, #1
 8009c72:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	689b      	ldr	r3, [r3, #8]
 8009c7a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	683a      	ldr	r2, [r7, #0]
 8009c84:	430a      	orrs	r2, r1
 8009c86:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009c88:	6878      	ldr	r0, [r7, #4]
 8009c8a:	f000 f811 	bl	8009cb0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	68fa      	ldr	r2, [r7, #12]
 8009c94:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	2220      	movs	r2, #32
 8009c9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009ca6:	2300      	movs	r3, #0
}
 8009ca8:	4618      	mov	r0, r3
 8009caa:	3710      	adds	r7, #16
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bd80      	pop	{r7, pc}

08009cb0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009cb0:	b480      	push	{r7}
 8009cb2:	b085      	sub	sp, #20
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d108      	bne.n	8009cd2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2201      	movs	r2, #1
 8009cc4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2201      	movs	r2, #1
 8009ccc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009cd0:	e031      	b.n	8009d36 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009cd2:	2308      	movs	r3, #8
 8009cd4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009cd6:	2308      	movs	r3, #8
 8009cd8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	689b      	ldr	r3, [r3, #8]
 8009ce0:	0e5b      	lsrs	r3, r3, #25
 8009ce2:	b2db      	uxtb	r3, r3
 8009ce4:	f003 0307 	and.w	r3, r3, #7
 8009ce8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	689b      	ldr	r3, [r3, #8]
 8009cf0:	0f5b      	lsrs	r3, r3, #29
 8009cf2:	b2db      	uxtb	r3, r3
 8009cf4:	f003 0307 	and.w	r3, r3, #7
 8009cf8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009cfa:	7bbb      	ldrb	r3, [r7, #14]
 8009cfc:	7b3a      	ldrb	r2, [r7, #12]
 8009cfe:	4911      	ldr	r1, [pc, #68]	; (8009d44 <UARTEx_SetNbDataToProcess+0x94>)
 8009d00:	5c8a      	ldrb	r2, [r1, r2]
 8009d02:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009d06:	7b3a      	ldrb	r2, [r7, #12]
 8009d08:	490f      	ldr	r1, [pc, #60]	; (8009d48 <UARTEx_SetNbDataToProcess+0x98>)
 8009d0a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009d0c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009d10:	b29a      	uxth	r2, r3
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009d18:	7bfb      	ldrb	r3, [r7, #15]
 8009d1a:	7b7a      	ldrb	r2, [r7, #13]
 8009d1c:	4909      	ldr	r1, [pc, #36]	; (8009d44 <UARTEx_SetNbDataToProcess+0x94>)
 8009d1e:	5c8a      	ldrb	r2, [r1, r2]
 8009d20:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009d24:	7b7a      	ldrb	r2, [r7, #13]
 8009d26:	4908      	ldr	r1, [pc, #32]	; (8009d48 <UARTEx_SetNbDataToProcess+0x98>)
 8009d28:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009d2a:	fb93 f3f2 	sdiv	r3, r3, r2
 8009d2e:	b29a      	uxth	r2, r3
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009d36:	bf00      	nop
 8009d38:	3714      	adds	r7, #20
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d40:	4770      	bx	lr
 8009d42:	bf00      	nop
 8009d44:	08009e1c 	.word	0x08009e1c
 8009d48:	08009e24 	.word	0x08009e24

08009d4c <__libc_init_array>:
 8009d4c:	b570      	push	{r4, r5, r6, lr}
 8009d4e:	4d0d      	ldr	r5, [pc, #52]	; (8009d84 <__libc_init_array+0x38>)
 8009d50:	4c0d      	ldr	r4, [pc, #52]	; (8009d88 <__libc_init_array+0x3c>)
 8009d52:	1b64      	subs	r4, r4, r5
 8009d54:	10a4      	asrs	r4, r4, #2
 8009d56:	2600      	movs	r6, #0
 8009d58:	42a6      	cmp	r6, r4
 8009d5a:	d109      	bne.n	8009d70 <__libc_init_array+0x24>
 8009d5c:	4d0b      	ldr	r5, [pc, #44]	; (8009d8c <__libc_init_array+0x40>)
 8009d5e:	4c0c      	ldr	r4, [pc, #48]	; (8009d90 <__libc_init_array+0x44>)
 8009d60:	f000 f820 	bl	8009da4 <_init>
 8009d64:	1b64      	subs	r4, r4, r5
 8009d66:	10a4      	asrs	r4, r4, #2
 8009d68:	2600      	movs	r6, #0
 8009d6a:	42a6      	cmp	r6, r4
 8009d6c:	d105      	bne.n	8009d7a <__libc_init_array+0x2e>
 8009d6e:	bd70      	pop	{r4, r5, r6, pc}
 8009d70:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d74:	4798      	blx	r3
 8009d76:	3601      	adds	r6, #1
 8009d78:	e7ee      	b.n	8009d58 <__libc_init_array+0xc>
 8009d7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d7e:	4798      	blx	r3
 8009d80:	3601      	adds	r6, #1
 8009d82:	e7f2      	b.n	8009d6a <__libc_init_array+0x1e>
 8009d84:	08009e34 	.word	0x08009e34
 8009d88:	08009e34 	.word	0x08009e34
 8009d8c:	08009e34 	.word	0x08009e34
 8009d90:	08009e38 	.word	0x08009e38

08009d94 <memset>:
 8009d94:	4402      	add	r2, r0
 8009d96:	4603      	mov	r3, r0
 8009d98:	4293      	cmp	r3, r2
 8009d9a:	d100      	bne.n	8009d9e <memset+0xa>
 8009d9c:	4770      	bx	lr
 8009d9e:	f803 1b01 	strb.w	r1, [r3], #1
 8009da2:	e7f9      	b.n	8009d98 <memset+0x4>

08009da4 <_init>:
 8009da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009da6:	bf00      	nop
 8009da8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009daa:	bc08      	pop	{r3}
 8009dac:	469e      	mov	lr, r3
 8009dae:	4770      	bx	lr

08009db0 <_fini>:
 8009db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009db2:	bf00      	nop
 8009db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009db6:	bc08      	pop	{r3}
 8009db8:	469e      	mov	lr, r3
 8009dba:	4770      	bx	lr
