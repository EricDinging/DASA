
Central_control_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009bc4  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08009d80  08009d80  00019d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009df0  08009df0  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08009df0  08009df0  00019df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009df8  08009df8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009df8  08009df8  00019df8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009dfc  08009dfc  00019dfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08009e00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000778  20000010  08009e10  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000788  08009e10  00020788  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e6a3  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033cf  00000000  00000000  0003e6e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019d8  00000000  00000000  00041ab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018c0  00000000  00000000  00043490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e1a0  00000000  00000000  00044d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e728  00000000  00000000  00072ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012353b  00000000  00000000  00091618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001b4b53  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006f5c  00000000  00000000  001b4ba4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20000010 	.word	0x20000010
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08009d68 	.word	0x08009d68

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000014 	.word	0x20000014
 80001f8:	08009d68 	.word	0x08009d68

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b974 	b.w	80004fc <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	468e      	mov	lr, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d14d      	bne.n	80002d6 <__udivmoddi4+0xaa>
 800023a:	428a      	cmp	r2, r1
 800023c:	4694      	mov	ip, r2
 800023e:	d969      	bls.n	8000314 <__udivmoddi4+0xe8>
 8000240:	fab2 f282 	clz	r2, r2
 8000244:	b152      	cbz	r2, 800025c <__udivmoddi4+0x30>
 8000246:	fa01 f302 	lsl.w	r3, r1, r2
 800024a:	f1c2 0120 	rsb	r1, r2, #32
 800024e:	fa20 f101 	lsr.w	r1, r0, r1
 8000252:	fa0c fc02 	lsl.w	ip, ip, r2
 8000256:	ea41 0e03 	orr.w	lr, r1, r3
 800025a:	4094      	lsls	r4, r2
 800025c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000260:	0c21      	lsrs	r1, r4, #16
 8000262:	fbbe f6f8 	udiv	r6, lr, r8
 8000266:	fa1f f78c 	uxth.w	r7, ip
 800026a:	fb08 e316 	mls	r3, r8, r6, lr
 800026e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000272:	fb06 f107 	mul.w	r1, r6, r7
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000282:	f080 811f 	bcs.w	80004c4 <__udivmoddi4+0x298>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 811c 	bls.w	80004c4 <__udivmoddi4+0x298>
 800028c:	3e02      	subs	r6, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a5b      	subs	r3, r3, r1
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb3 f0f8 	udiv	r0, r3, r8
 8000298:	fb08 3310 	mls	r3, r8, r0, r3
 800029c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a0:	fb00 f707 	mul.w	r7, r0, r7
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	d90a      	bls.n	80002be <__udivmoddi4+0x92>
 80002a8:	eb1c 0404 	adds.w	r4, ip, r4
 80002ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b0:	f080 810a 	bcs.w	80004c8 <__udivmoddi4+0x29c>
 80002b4:	42a7      	cmp	r7, r4
 80002b6:	f240 8107 	bls.w	80004c8 <__udivmoddi4+0x29c>
 80002ba:	4464      	add	r4, ip
 80002bc:	3802      	subs	r0, #2
 80002be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c2:	1be4      	subs	r4, r4, r7
 80002c4:	2600      	movs	r6, #0
 80002c6:	b11d      	cbz	r5, 80002d0 <__udivmoddi4+0xa4>
 80002c8:	40d4      	lsrs	r4, r2
 80002ca:	2300      	movs	r3, #0
 80002cc:	e9c5 4300 	strd	r4, r3, [r5]
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0xc2>
 80002da:	2d00      	cmp	r5, #0
 80002dc:	f000 80ef 	beq.w	80004be <__udivmoddi4+0x292>
 80002e0:	2600      	movs	r6, #0
 80002e2:	e9c5 0100 	strd	r0, r1, [r5]
 80002e6:	4630      	mov	r0, r6
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	fab3 f683 	clz	r6, r3
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d14a      	bne.n	800038c <__udivmoddi4+0x160>
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xd4>
 80002fa:	4282      	cmp	r2, r0
 80002fc:	f200 80f9 	bhi.w	80004f2 <__udivmoddi4+0x2c6>
 8000300:	1a84      	subs	r4, r0, r2
 8000302:	eb61 0303 	sbc.w	r3, r1, r3
 8000306:	2001      	movs	r0, #1
 8000308:	469e      	mov	lr, r3
 800030a:	2d00      	cmp	r5, #0
 800030c:	d0e0      	beq.n	80002d0 <__udivmoddi4+0xa4>
 800030e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000312:	e7dd      	b.n	80002d0 <__udivmoddi4+0xa4>
 8000314:	b902      	cbnz	r2, 8000318 <__udivmoddi4+0xec>
 8000316:	deff      	udf	#255	; 0xff
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	2a00      	cmp	r2, #0
 800031e:	f040 8092 	bne.w	8000446 <__udivmoddi4+0x21a>
 8000322:	eba1 010c 	sub.w	r1, r1, ip
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2601      	movs	r6, #1
 8000330:	0c20      	lsrs	r0, r4, #16
 8000332:	fbb1 f3f7 	udiv	r3, r1, r7
 8000336:	fb07 1113 	mls	r1, r7, r3, r1
 800033a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800033e:	fb0e f003 	mul.w	r0, lr, r3
 8000342:	4288      	cmp	r0, r1
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x12c>
 8000346:	eb1c 0101 	adds.w	r1, ip, r1
 800034a:	f103 38ff 	add.w	r8, r3, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x12a>
 8000350:	4288      	cmp	r0, r1
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2c0>
 8000356:	4643      	mov	r3, r8
 8000358:	1a09      	subs	r1, r1, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000360:	fb07 1110 	mls	r1, r7, r0, r1
 8000364:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x156>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 31ff 	add.w	r1, r0, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x154>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2ca>
 8000380:	4608      	mov	r0, r1
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800038a:	e79c      	b.n	80002c6 <__udivmoddi4+0x9a>
 800038c:	f1c6 0720 	rsb	r7, r6, #32
 8000390:	40b3      	lsls	r3, r6
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa20 f407 	lsr.w	r4, r0, r7
 800039e:	fa01 f306 	lsl.w	r3, r1, r6
 80003a2:	431c      	orrs	r4, r3
 80003a4:	40f9      	lsrs	r1, r7
 80003a6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003aa:	fa00 f306 	lsl.w	r3, r0, r6
 80003ae:	fbb1 f8f9 	udiv	r8, r1, r9
 80003b2:	0c20      	lsrs	r0, r4, #16
 80003b4:	fa1f fe8c 	uxth.w	lr, ip
 80003b8:	fb09 1118 	mls	r1, r9, r8, r1
 80003bc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c0:	fb08 f00e 	mul.w	r0, r8, lr
 80003c4:	4288      	cmp	r0, r1
 80003c6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b8>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2bc>
 80003d8:	4288      	cmp	r0, r1
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2bc>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4461      	add	r1, ip
 80003e4:	1a09      	subs	r1, r1, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003ec:	fb09 1110 	mls	r1, r9, r0, r1
 80003f0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003f8:	458e      	cmp	lr, r1
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1e2>
 80003fc:	eb1c 0101 	adds.w	r1, ip, r1
 8000400:	f100 34ff 	add.w	r4, r0, #4294967295
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2b4>
 8000406:	458e      	cmp	lr, r1
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2b4>
 800040a:	3802      	subs	r0, #2
 800040c:	4461      	add	r1, ip
 800040e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000412:	fba0 9402 	umull	r9, r4, r0, r2
 8000416:	eba1 010e 	sub.w	r1, r1, lr
 800041a:	42a1      	cmp	r1, r4
 800041c:	46c8      	mov	r8, r9
 800041e:	46a6      	mov	lr, r4
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x2a4>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x2a0>
 8000424:	b15d      	cbz	r5, 800043e <__udivmoddi4+0x212>
 8000426:	ebb3 0208 	subs.w	r2, r3, r8
 800042a:	eb61 010e 	sbc.w	r1, r1, lr
 800042e:	fa01 f707 	lsl.w	r7, r1, r7
 8000432:	fa22 f306 	lsr.w	r3, r2, r6
 8000436:	40f1      	lsrs	r1, r6
 8000438:	431f      	orrs	r7, r3
 800043a:	e9c5 7100 	strd	r7, r1, [r5]
 800043e:	2600      	movs	r6, #0
 8000440:	4631      	mov	r1, r6
 8000442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000446:	f1c2 0320 	rsb	r3, r2, #32
 800044a:	40d8      	lsrs	r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa21 f303 	lsr.w	r3, r1, r3
 8000454:	4091      	lsls	r1, r2
 8000456:	4301      	orrs	r1, r0
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb3 f0f7 	udiv	r0, r3, r7
 8000464:	fb07 3610 	mls	r6, r7, r0, r3
 8000468:	0c0b      	lsrs	r3, r1, #16
 800046a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800046e:	fb00 f60e 	mul.w	r6, r0, lr
 8000472:	429e      	cmp	r6, r3
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x260>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b8>
 8000484:	429e      	cmp	r6, r3
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b8>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1b9b      	subs	r3, r3, r6
 800048e:	b289      	uxth	r1, r1
 8000490:	fbb3 f6f7 	udiv	r6, r3, r7
 8000494:	fb07 3316 	mls	r3, r7, r6, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb06 f30e 	mul.w	r3, r6, lr
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x28a>
 80004a4:	eb1c 0101 	adds.w	r1, ip, r1
 80004a8:	f106 38ff 	add.w	r8, r6, #4294967295
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2b0>
 80004b2:	3e02      	subs	r6, #2
 80004b4:	4461      	add	r1, ip
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0x104>
 80004be:	462e      	mov	r6, r5
 80004c0:	4628      	mov	r0, r5
 80004c2:	e705      	b.n	80002d0 <__udivmoddi4+0xa4>
 80004c4:	4606      	mov	r6, r0
 80004c6:	e6e3      	b.n	8000290 <__udivmoddi4+0x64>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6f8      	b.n	80002be <__udivmoddi4+0x92>
 80004cc:	454b      	cmp	r3, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f8>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004d8:	3801      	subs	r0, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f8>
 80004dc:	4646      	mov	r6, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x28a>
 80004e0:	4620      	mov	r0, r4
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1e2>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x260>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b8>
 80004ec:	3b02      	subs	r3, #2
 80004ee:	4461      	add	r1, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x12c>
 80004f2:	4630      	mov	r0, r6
 80004f4:	e709      	b.n	800030a <__udivmoddi4+0xde>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x156>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <state_update>:
 *  Created on: Mar 25, 2023
 *      Author: eric
 */
#include "central_control.h"

void state_update() {
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0

	// All the buttons should be rising-edge triggered


	// read reset button, and set reset bit to 1 only if reset button is pressed
	if (reset) {
 8000506:	4b6b      	ldr	r3, [pc, #428]	; (80006b4 <state_update+0x1b4>)
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	2b00      	cmp	r3, #0
 800050c:	d01e      	beq.n	800054c <state_update+0x4c>
		on_off = 0;
 800050e:	4b6a      	ldr	r3, [pc, #424]	; (80006b8 <state_update+0x1b8>)
 8000510:	2200      	movs	r2, #0
 8000512:	701a      	strb	r2, [r3, #0]
		ball_locked = 0;
 8000514:	4b69      	ldr	r3, [pc, #420]	; (80006bc <state_update+0x1bc>)
 8000516:	2200      	movs	r2, #0
 8000518:	701a      	strb	r2, [r3, #0]
		ball_not_found = 0;
 800051a:	4b69      	ldr	r3, [pc, #420]	; (80006c0 <state_update+0x1c0>)
 800051c:	2200      	movs	r2, #0
 800051e:	701a      	strb	r2, [r3, #0]
		ball_count = 0;
 8000520:	4b68      	ldr	r3, [pc, #416]	; (80006c4 <state_update+0x1c4>)
 8000522:	2200      	movs	r2, #0
 8000524:	701a      	strb	r2, [r3, #0]
		ball_collected = 0;
 8000526:	4b68      	ldr	r3, [pc, #416]	; (80006c8 <state_update+0x1c8>)
 8000528:	2200      	movs	r2, #0
 800052a:	701a      	strb	r2, [r3, #0]
		station_arrived = 0;
 800052c:	4b67      	ldr	r3, [pc, #412]	; (80006cc <state_update+0x1cc>)
 800052e:	2200      	movs	r2, #0
 8000530:	701a      	strb	r2, [r3, #0]
		avoid_finished = 0;
 8000532:	4b67      	ldr	r3, [pc, #412]	; (80006d0 <state_update+0x1d0>)
 8000534:	2200      	movs	r2, #0
 8000536:	701a      	strb	r2, [r3, #0]
		reset = 0;
 8000538:	4b5e      	ldr	r3, [pc, #376]	; (80006b4 <state_update+0x1b4>)
 800053a:	2200      	movs	r2, #0
 800053c:	701a      	strb	r2, [r3, #0]
		state = INIT;
 800053e:	4b65      	ldr	r3, [pc, #404]	; (80006d4 <state_update+0x1d4>)
 8000540:	2200      	movs	r2, #0
 8000542:	701a      	strb	r2, [r3, #0]
		prev_state = state;
 8000544:	4b63      	ldr	r3, [pc, #396]	; (80006d4 <state_update+0x1d4>)
 8000546:	781a      	ldrb	r2, [r3, #0]
 8000548:	4b63      	ldr	r3, [pc, #396]	; (80006d8 <state_update+0x1d8>)
 800054a:	701a      	strb	r2, [r3, #0]
	} else {
		// reading peripheral input, and clear register immediately
	}

	// Testing arg begin
	state = COLLECT;
 800054c:	4b61      	ldr	r3, [pc, #388]	; (80006d4 <state_update+0x1d4>)
 800054e:	2202      	movs	r2, #2
 8000550:	701a      	strb	r2, [r3, #0]

	// Testing arg end

	// disable interrupt ultrasonic, ir
	HAL_NVIC_DisableIRQ(TIM3_IRQn);
 8000552:	201d      	movs	r0, #29
 8000554:	f003 fb65 	bl	8003c22 <HAL_NVIC_DisableIRQ>

	enum State next_state = state;
 8000558:	4b5e      	ldr	r3, [pc, #376]	; (80006d4 <state_update+0x1d4>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	71fb      	strb	r3, [r7, #7]

	switch (state) {
 800055e:	4b5d      	ldr	r3, [pc, #372]	; (80006d4 <state_update+0x1d4>)
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	2b04      	cmp	r3, #4
 8000564:	f200 808f 	bhi.w	8000686 <state_update+0x186>
 8000568:	a201      	add	r2, pc, #4	; (adr r2, 8000570 <state_update+0x70>)
 800056a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800056e:	bf00      	nop
 8000570:	08000585 	.word	0x08000585
 8000574:	08000599 	.word	0x08000599
 8000578:	080005d5 	.word	0x080005d5
 800057c:	08000611 	.word	0x08000611
 8000580:	08000639 	.word	0x08000639
	case INIT:
		if (on_off == 1) {
 8000584:	4b4c      	ldr	r3, [pc, #304]	; (80006b8 <state_update+0x1b8>)
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	2b01      	cmp	r3, #1
 800058a:	d173      	bne.n	8000674 <state_update+0x174>
			on_off = 0;
 800058c:	4b4a      	ldr	r3, [pc, #296]	; (80006b8 <state_update+0x1b8>)
 800058e:	2200      	movs	r2, #0
 8000590:	701a      	strb	r2, [r3, #0]
			next_state = SEARCH;
 8000592:	2301      	movs	r3, #1
 8000594:	71fb      	strb	r3, [r7, #7]
		}
		break;
 8000596:	e06d      	b.n	8000674 <state_update+0x174>
	case SEARCH:
		if (on_off) {
 8000598:	4b47      	ldr	r3, [pc, #284]	; (80006b8 <state_update+0x1b8>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	2b00      	cmp	r3, #0
 800059e:	d005      	beq.n	80005ac <state_update+0xac>
			on_off = 0;
 80005a0:	4b45      	ldr	r3, [pc, #276]	; (80006b8 <state_update+0x1b8>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	701a      	strb	r2, [r3, #0]
			next_state = RETURN;
 80005a6:	2303      	movs	r3, #3
 80005a8:	71fb      	strb	r3, [r7, #7]
			next_state = COLLECT;
		} else if (ball_not_found) {
			ball_not_found = 0;
			next_state = RETURN;
		}
		break;
 80005aa:	e065      	b.n	8000678 <state_update+0x178>
		} else if (ball_locked) {
 80005ac:	4b43      	ldr	r3, [pc, #268]	; (80006bc <state_update+0x1bc>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d005      	beq.n	80005c0 <state_update+0xc0>
			ball_locked = 0;
 80005b4:	4b41      	ldr	r3, [pc, #260]	; (80006bc <state_update+0x1bc>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	701a      	strb	r2, [r3, #0]
			next_state = COLLECT;
 80005ba:	2302      	movs	r3, #2
 80005bc:	71fb      	strb	r3, [r7, #7]
		break;
 80005be:	e05b      	b.n	8000678 <state_update+0x178>
		} else if (ball_not_found) {
 80005c0:	4b3f      	ldr	r3, [pc, #252]	; (80006c0 <state_update+0x1c0>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d057      	beq.n	8000678 <state_update+0x178>
			ball_not_found = 0;
 80005c8:	4b3d      	ldr	r3, [pc, #244]	; (80006c0 <state_update+0x1c0>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	701a      	strb	r2, [r3, #0]
			next_state = RETURN;
 80005ce:	2303      	movs	r3, #3
 80005d0:	71fb      	strb	r3, [r7, #7]
		break;
 80005d2:	e051      	b.n	8000678 <state_update+0x178>
	case COLLECT: {
		uint32_t local_count;
		local_count = count;
 80005d4:	4b41      	ldr	r3, [pc, #260]	; (80006dc <state_update+0x1dc>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	603b      	str	r3, [r7, #0]

		if (on_off) {
 80005da:	4b37      	ldr	r3, [pc, #220]	; (80006b8 <state_update+0x1b8>)
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d005      	beq.n	80005ee <state_update+0xee>
			on_off = 0;
 80005e2:	4b35      	ldr	r3, [pc, #212]	; (80006b8 <state_update+0x1b8>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	701a      	strb	r2, [r3, #0]
			next_state = RETURN;
 80005e8:	2303      	movs	r3, #3
 80005ea:	71fb      	strb	r3, [r7, #7]
			} else {
				next_state = RETURN;
			}
			ball_collected = 0; // clear
		}
		break;
 80005ec:	e046      	b.n	800067c <state_update+0x17c>
		} else if (ball_collected) {
 80005ee:	4b36      	ldr	r3, [pc, #216]	; (80006c8 <state_update+0x1c8>)
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d042      	beq.n	800067c <state_update+0x17c>
			if (ball_count < MAXLOAD) {
 80005f6:	4b33      	ldr	r3, [pc, #204]	; (80006c4 <state_update+0x1c4>)
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	2b05      	cmp	r3, #5
 80005fc:	d802      	bhi.n	8000604 <state_update+0x104>
				next_state = SEARCH;
 80005fe:	2301      	movs	r3, #1
 8000600:	71fb      	strb	r3, [r7, #7]
 8000602:	e001      	b.n	8000608 <state_update+0x108>
				next_state = RETURN;
 8000604:	2303      	movs	r3, #3
 8000606:	71fb      	strb	r3, [r7, #7]
			ball_collected = 0; // clear
 8000608:	4b2f      	ldr	r3, [pc, #188]	; (80006c8 <state_update+0x1c8>)
 800060a:	2200      	movs	r2, #0
 800060c:	701a      	strb	r2, [r3, #0]
		break;
 800060e:	e035      	b.n	800067c <state_update+0x17c>
		}
	case RETURN:
		if (on_off) {
 8000610:	4b29      	ldr	r3, [pc, #164]	; (80006b8 <state_update+0x1b8>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d002      	beq.n	800061e <state_update+0x11e>
			on_off = 0;
 8000618:	4b27      	ldr	r3, [pc, #156]	; (80006b8 <state_update+0x1b8>)
 800061a:	2200      	movs	r2, #0
 800061c:	701a      	strb	r2, [r3, #0]
		}

		if (station_arrived) {
 800061e:	4b2b      	ldr	r3, [pc, #172]	; (80006cc <state_update+0x1cc>)
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	2b00      	cmp	r3, #0
 8000624:	d02c      	beq.n	8000680 <state_update+0x180>
			station_arrived = 0;
 8000626:	4b29      	ldr	r3, [pc, #164]	; (80006cc <state_update+0x1cc>)
 8000628:	2200      	movs	r2, #0
 800062a:	701a      	strb	r2, [r3, #0]
			reset = 1;
 800062c:	4b21      	ldr	r3, [pc, #132]	; (80006b4 <state_update+0x1b4>)
 800062e:	2201      	movs	r2, #1
 8000630:	701a      	strb	r2, [r3, #0]
			next_state = INIT;
 8000632:	2300      	movs	r3, #0
 8000634:	71fb      	strb	r3, [r7, #7]
		}

		break;
 8000636:	e023      	b.n	8000680 <state_update+0x180>
	case AVOID_COLLISION:
		// only interrupt can cause the robot to enter this state
		// only after certain conditions are met can the robot leave this state
    
    if (on_off) {
 8000638:	4b1f      	ldr	r3, [pc, #124]	; (80006b8 <state_update+0x1b8>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d005      	beq.n	800064c <state_update+0x14c>
			on_off = 0;
 8000640:	4b1d      	ldr	r3, [pc, #116]	; (80006b8 <state_update+0x1b8>)
 8000642:	2200      	movs	r2, #0
 8000644:	701a      	strb	r2, [r3, #0]
			prev_state = RETURN;
 8000646:	4b24      	ldr	r3, [pc, #144]	; (80006d8 <state_update+0x1d8>)
 8000648:	2203      	movs	r2, #3
 800064a:	701a      	strb	r2, [r3, #0]
		}

		if (avoid_finished) {
 800064c:	4b20      	ldr	r3, [pc, #128]	; (80006d0 <state_update+0x1d0>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d017      	beq.n	8000684 <state_update+0x184>
			avoid_finished = 0;
 8000654:	4b1e      	ldr	r3, [pc, #120]	; (80006d0 <state_update+0x1d0>)
 8000656:	2200      	movs	r2, #0
 8000658:	701a      	strb	r2, [r3, #0]
			next_state = prev_state;
 800065a:	4b1f      	ldr	r3, [pc, #124]	; (80006d8 <state_update+0x1d8>)
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	71fb      	strb	r3, [r7, #7]
			if (on_off) {
 8000660:	4b15      	ldr	r3, [pc, #84]	; (80006b8 <state_update+0x1b8>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d00d      	beq.n	8000684 <state_update+0x184>
				on_off = 0;
 8000668:	4b13      	ldr	r3, [pc, #76]	; (80006b8 <state_update+0x1b8>)
 800066a:	2200      	movs	r2, #0
 800066c:	701a      	strb	r2, [r3, #0]
				next_state = RETURN;
 800066e:	2303      	movs	r3, #3
 8000670:	71fb      	strb	r3, [r7, #7]
			}
		}
		break;
 8000672:	e007      	b.n	8000684 <state_update+0x184>
		break;
 8000674:	bf00      	nop
 8000676:	e006      	b.n	8000686 <state_update+0x186>
		break;
 8000678:	bf00      	nop
 800067a:	e004      	b.n	8000686 <state_update+0x186>
		break;
 800067c:	bf00      	nop
 800067e:	e002      	b.n	8000686 <state_update+0x186>
		break;
 8000680:	bf00      	nop
 8000682:	e000      	b.n	8000686 <state_update+0x186>
		break;
 8000684:	bf00      	nop
	}

	state = next_state;
 8000686:	4a13      	ldr	r2, [pc, #76]	; (80006d4 <state_update+0x1d4>)
 8000688:	79fb      	ldrb	r3, [r7, #7]
 800068a:	7013      	strb	r3, [r2, #0]
	if (state != AVOID_COLLISION) {
 800068c:	4b11      	ldr	r3, [pc, #68]	; (80006d4 <state_update+0x1d4>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	2b04      	cmp	r3, #4
 8000692:	d003      	beq.n	800069c <state_update+0x19c>
		prev_state = state;
 8000694:	4b0f      	ldr	r3, [pc, #60]	; (80006d4 <state_update+0x1d4>)
 8000696:	781a      	ldrb	r2, [r3, #0]
 8000698:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <state_update+0x1d8>)
 800069a:	701a      	strb	r2, [r3, #0]
	}

	// enable interrupt
	if (state == COLLECT) {
 800069c:	4b0d      	ldr	r3, [pc, #52]	; (80006d4 <state_update+0x1d4>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	2b02      	cmp	r3, #2
 80006a2:	d102      	bne.n	80006aa <state_update+0x1aa>
		HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80006a4:	201d      	movs	r0, #29
 80006a6:	f003 faae 	bl	8003c06 <HAL_NVIC_EnableIRQ>
	}
}
 80006aa:	bf00      	nop
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	20000035 	.word	0x20000035
 80006b8:	2000002e 	.word	0x2000002e
 80006bc:	2000002f 	.word	0x2000002f
 80006c0:	20000030 	.word	0x20000030
 80006c4:	20000031 	.word	0x20000031
 80006c8:	20000032 	.word	0x20000032
 80006cc:	20000033 	.word	0x20000033
 80006d0:	20000034 	.word	0x20000034
 80006d4:	2000002c 	.word	0x2000002c
 80006d8:	2000002d 	.word	0x2000002d
 80006dc:	20000038 	.word	0x20000038

080006e0 <execute>:

void execute() {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0

	rotor_control(1);
 80006e4:	2001      	movs	r0, #1
 80006e6:	f001 f8bb 	bl	8001860 <rotor_control>

	switch (state) {
 80006ea:	4b0c      	ldr	r3, [pc, #48]	; (800071c <execute+0x3c>)
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	2b04      	cmp	r3, #4
 80006f0:	d811      	bhi.n	8000716 <execute+0x36>
 80006f2:	a201      	add	r2, pc, #4	; (adr r2, 80006f8 <execute+0x18>)
 80006f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006f8:	08000715 	.word	0x08000715
 80006fc:	08000715 	.word	0x08000715
 8000700:	0800070d 	.word	0x0800070d
 8000704:	08000715 	.word	0x08000715
 8000708:	08000715 	.word	0x08000715
//		motor_control(mode);
//		ball_locked;
//		ball_not_found;
		break;
	case COLLECT:
		rotor_control(0);
 800070c:	2000      	movs	r0, #0
 800070e:	f001 f8a7 	bl	8001860 <rotor_control>

		break;
 8000712:	e000      	b.n	8000716 <execute+0x36>
		break;
 8000714:	bf00      	nop
	case RETURN:
		break;
	case AVOID_COLLISION:
		break;
	}
}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	2000002c 	.word	0x2000002c

08000720 <delay_loop>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void delay_loop(int time) {
 8000720:	b480      	push	{r7}
 8000722:	b085      	sub	sp, #20
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
	 for(volatile int j = 0; j < time; ++j)
 8000728:	2300      	movs	r3, #0
 800072a:	60fb      	str	r3, [r7, #12]
 800072c:	e00c      	b.n	8000748 <delay_loop+0x28>
	  		  for (volatile int i = 0; i < 380; ++i) asm("");//1ms
 800072e:	2300      	movs	r3, #0
 8000730:	60bb      	str	r3, [r7, #8]
 8000732:	e002      	b.n	800073a <delay_loop+0x1a>
 8000734:	68bb      	ldr	r3, [r7, #8]
 8000736:	3301      	adds	r3, #1
 8000738:	60bb      	str	r3, [r7, #8]
 800073a:	68bb      	ldr	r3, [r7, #8]
 800073c:	f5b3 7fbe 	cmp.w	r3, #380	; 0x17c
 8000740:	dbf8      	blt.n	8000734 <delay_loop+0x14>
	 for(volatile int j = 0; j < time; ++j)
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	3301      	adds	r3, #1
 8000746:	60fb      	str	r3, [r7, #12]
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	687a      	ldr	r2, [r7, #4]
 800074c:	429a      	cmp	r2, r3
 800074e:	dcee      	bgt.n	800072e <delay_loop+0xe>
}
 8000750:	bf00      	nop
 8000752:	bf00      	nop
 8000754:	3714      	adds	r7, #20
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr
	...

08000760 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000764:	f001 ff41 	bl	80025ea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000768:	f000 f848 	bl	80007fc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800076c:	f000 f8a8 	bl	80008c0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000770:	f000 ffa2 	bl	80016b8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000774:	f000 f8d8 	bl	8000928 <MX_ADC1_Init>
  MX_CAN1_Init();
 8000778:	f000 f93a 	bl	80009f0 <MX_CAN1_Init>
  MX_COMP1_Init();
 800077c:	f000 f96c 	bl	8000a58 <MX_COMP1_Init>
  MX_COMP2_Init();
 8000780:	f000 f998 	bl	8000ab4 <MX_COMP2_Init>
  MX_I2C1_SMBUS_Init();
 8000784:	f000 f9c2 	bl	8000b0c <MX_I2C1_SMBUS_Init>
  MX_I2C2_SMBUS_Init();
 8000788:	f000 f9fa 	bl	8000b80 <MX_I2C2_SMBUS_Init>
  MX_LPUART1_UART_Init();
 800078c:	f000 fa3a 	bl	8000c04 <MX_LPUART1_UART_Init>
  MX_USART2_UART_Init();
 8000790:	f000 fa86 	bl	8000ca0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000794:	f000 fad2 	bl	8000d3c <MX_USART3_UART_Init>
  MX_SAI1_Init();
 8000798:	f000 fb1c 	bl	8000dd4 <MX_SAI1_Init>
  MX_SAI2_Init();
 800079c:	f000 fbb2 	bl	8000f04 <MX_SAI2_Init>
  MX_SPI1_Init();
 80007a0:	f000 fc18 	bl	8000fd4 <MX_SPI1_Init>
  MX_SPI3_Init();
 80007a4:	f000 fc54 	bl	8001050 <MX_SPI3_Init>
  MX_TIM1_Init();
 80007a8:	f000 fc90 	bl	80010cc <MX_TIM1_Init>
  MX_TIM2_Init();
 80007ac:	f000 fd76 	bl	800129c <MX_TIM2_Init>
  MX_TIM3_Init();
 80007b0:	f000 fdf6 	bl	80013a0 <MX_TIM3_Init>
  MX_TIM4_Init();
 80007b4:	f000 fe66 	bl	8001484 <MX_TIM4_Init>
  MX_TIM15_Init();
 80007b8:	f000 fef2 	bl	80015a0 <MX_TIM15_Init>
  MX_USB_OTG_FS_USB_Init();
 80007bc:	f000 ff74 	bl	80016a8 <MX_USB_OTG_FS_USB_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80007c0:	2104      	movs	r1, #4
 80007c2:	480c      	ldr	r0, [pc, #48]	; (80007f4 <main+0x94>)
 80007c4:	f006 fee4 	bl	8007590 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80007c8:	2108      	movs	r1, #8
 80007ca:	480a      	ldr	r0, [pc, #40]	; (80007f4 <main+0x94>)
 80007cc:	f006 fee0 	bl	8007590 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80007d0:	210c      	movs	r1, #12
 80007d2:	4808      	ldr	r0, [pc, #32]	; (80007f4 <main+0x94>)
 80007d4:	f006 fedc 	bl	8007590 <HAL_TIM_PWM_Start>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 80007d8:	2104      	movs	r1, #4
 80007da:	4807      	ldr	r0, [pc, #28]	; (80007f8 <main+0x98>)
 80007dc:	f007 f840 	bl	8007860 <HAL_TIM_IC_Start_IT>


  while (1)
  {
	  state_update();
 80007e0:	f7ff fe8e 	bl	8000500 <state_update>
	  execute();
 80007e4:	f7ff ff7c 	bl	80006e0 <execute>
	  delay_loop(500);
 80007e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007ec:	f7ff ff98 	bl	8000720 <delay_loop>
  {
 80007f0:	e7f6      	b.n	80007e0 <main+0x80>
 80007f2:	bf00      	nop
 80007f4:	200006dc 	.word	0x200006dc
 80007f8:	20000690 	.word	0x20000690

080007fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b096      	sub	sp, #88	; 0x58
 8000800:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000802:	f107 0314 	add.w	r3, r7, #20
 8000806:	2244      	movs	r2, #68	; 0x44
 8000808:	2100      	movs	r1, #0
 800080a:	4618      	mov	r0, r3
 800080c:	f009 faa4 	bl	8009d58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000810:	463b      	mov	r3, r7
 8000812:	2200      	movs	r2, #0
 8000814:	601a      	str	r2, [r3, #0]
 8000816:	605a      	str	r2, [r3, #4]
 8000818:	609a      	str	r2, [r3, #8]
 800081a:	60da      	str	r2, [r3, #12]
 800081c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800081e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000822:	f003 fbf3 	bl	800400c <HAL_PWREx_ControlVoltageScaling>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800082c:	f001 f812 	bl	8001854 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000830:	f003 fbbc 	bl	8003fac <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000834:	4b21      	ldr	r3, [pc, #132]	; (80008bc <SystemClock_Config+0xc0>)
 8000836:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800083a:	4a20      	ldr	r2, [pc, #128]	; (80008bc <SystemClock_Config+0xc0>)
 800083c:	f023 0318 	bic.w	r3, r3, #24
 8000840:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000844:	2314      	movs	r3, #20
 8000846:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000848:	2301      	movs	r3, #1
 800084a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800084c:	2301      	movs	r3, #1
 800084e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000850:	2300      	movs	r3, #0
 8000852:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000854:	2360      	movs	r3, #96	; 0x60
 8000856:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000858:	2302      	movs	r3, #2
 800085a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800085c:	2301      	movs	r3, #1
 800085e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000860:	2301      	movs	r3, #1
 8000862:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000864:	2310      	movs	r3, #16
 8000866:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000868:	2302      	movs	r3, #2
 800086a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800086c:	2302      	movs	r3, #2
 800086e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000870:	2302      	movs	r3, #2
 8000872:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000874:	f107 0314 	add.w	r3, r7, #20
 8000878:	4618      	mov	r0, r3
 800087a:	f003 fc7b 	bl	8004174 <HAL_RCC_OscConfig>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000884:	f000 ffe6 	bl	8001854 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000888:	230f      	movs	r3, #15
 800088a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800088c:	2303      	movs	r3, #3
 800088e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000890:	2300      	movs	r3, #0
 8000892:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000894:	2300      	movs	r3, #0
 8000896:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000898:	2300      	movs	r3, #0
 800089a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800089c:	463b      	mov	r3, r7
 800089e:	2101      	movs	r1, #1
 80008a0:	4618      	mov	r0, r3
 80008a2:	f004 f881 	bl	80049a8 <HAL_RCC_ClockConfig>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80008ac:	f000 ffd2 	bl	8001854 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80008b0:	f005 fd8a 	bl	80063c8 <HAL_RCCEx_EnableMSIPLLMode>
}
 80008b4:	bf00      	nop
 80008b6:	3758      	adds	r7, #88	; 0x58
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	40021000 	.word	0x40021000

080008c0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b0a6      	sub	sp, #152	; 0x98
 80008c4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	2294      	movs	r2, #148	; 0x94
 80008ca:	2100      	movs	r1, #0
 80008cc:	4618      	mov	r0, r3
 80008ce:	f009 fa43 	bl	8009d58 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_SAI2
 80008d2:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 80008d6:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 80008d8:	2300      	movs	r3, #0
 80008da:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI1;
 80008dc:	2300      	movs	r3, #0
 80008de:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80008e0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80008e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80008e8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80008ec:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80008ee:	2301      	movs	r3, #1
 80008f0:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80008f2:	2301      	movs	r3, #1
 80008f4:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80008f6:	2318      	movs	r3, #24
 80008f8:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80008fa:	2302      	movs	r3, #2
 80008fc:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80008fe:	2302      	movs	r3, #2
 8000900:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000902:	2302      	movs	r3, #2
 8000904:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_48M2CLK
 8000906:	4b07      	ldr	r3, [pc, #28]	; (8000924 <PeriphCommonClock_Config+0x64>)
 8000908:	623b      	str	r3, [r7, #32]
                              |RCC_PLLSAI1_ADC1CLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800090a:	1d3b      	adds	r3, r7, #4
 800090c:	4618      	mov	r0, r3
 800090e:	f004 fb09 	bl	8004f24 <HAL_RCCEx_PeriphCLKConfig>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8000918:	f000 ff9c 	bl	8001854 <Error_Handler>
  }
}
 800091c:	bf00      	nop
 800091e:	3798      	adds	r7, #152	; 0x98
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	01110000 	.word	0x01110000

08000928 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b086      	sub	sp, #24
 800092c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800092e:	463b      	mov	r3, r7
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	605a      	str	r2, [r3, #4]
 8000936:	609a      	str	r2, [r3, #8]
 8000938:	60da      	str	r2, [r3, #12]
 800093a:	611a      	str	r2, [r3, #16]
 800093c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800093e:	4b29      	ldr	r3, [pc, #164]	; (80009e4 <MX_ADC1_Init+0xbc>)
 8000940:	4a29      	ldr	r2, [pc, #164]	; (80009e8 <MX_ADC1_Init+0xc0>)
 8000942:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000944:	4b27      	ldr	r3, [pc, #156]	; (80009e4 <MX_ADC1_Init+0xbc>)
 8000946:	2200      	movs	r2, #0
 8000948:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800094a:	4b26      	ldr	r3, [pc, #152]	; (80009e4 <MX_ADC1_Init+0xbc>)
 800094c:	2200      	movs	r2, #0
 800094e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000950:	4b24      	ldr	r3, [pc, #144]	; (80009e4 <MX_ADC1_Init+0xbc>)
 8000952:	2200      	movs	r2, #0
 8000954:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000956:	4b23      	ldr	r3, [pc, #140]	; (80009e4 <MX_ADC1_Init+0xbc>)
 8000958:	2200      	movs	r2, #0
 800095a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800095c:	4b21      	ldr	r3, [pc, #132]	; (80009e4 <MX_ADC1_Init+0xbc>)
 800095e:	2204      	movs	r2, #4
 8000960:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000962:	4b20      	ldr	r3, [pc, #128]	; (80009e4 <MX_ADC1_Init+0xbc>)
 8000964:	2200      	movs	r2, #0
 8000966:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000968:	4b1e      	ldr	r3, [pc, #120]	; (80009e4 <MX_ADC1_Init+0xbc>)
 800096a:	2200      	movs	r2, #0
 800096c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800096e:	4b1d      	ldr	r3, [pc, #116]	; (80009e4 <MX_ADC1_Init+0xbc>)
 8000970:	2201      	movs	r2, #1
 8000972:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000974:	4b1b      	ldr	r3, [pc, #108]	; (80009e4 <MX_ADC1_Init+0xbc>)
 8000976:	2200      	movs	r2, #0
 8000978:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800097c:	4b19      	ldr	r3, [pc, #100]	; (80009e4 <MX_ADC1_Init+0xbc>)
 800097e:	2200      	movs	r2, #0
 8000980:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000982:	4b18      	ldr	r3, [pc, #96]	; (80009e4 <MX_ADC1_Init+0xbc>)
 8000984:	2200      	movs	r2, #0
 8000986:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000988:	4b16      	ldr	r3, [pc, #88]	; (80009e4 <MX_ADC1_Init+0xbc>)
 800098a:	2200      	movs	r2, #0
 800098c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000990:	4b14      	ldr	r3, [pc, #80]	; (80009e4 <MX_ADC1_Init+0xbc>)
 8000992:	2200      	movs	r2, #0
 8000994:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000996:	4b13      	ldr	r3, [pc, #76]	; (80009e4 <MX_ADC1_Init+0xbc>)
 8000998:	2200      	movs	r2, #0
 800099a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800099e:	4811      	ldr	r0, [pc, #68]	; (80009e4 <MX_ADC1_Init+0xbc>)
 80009a0:	f002 f838 	bl	8002a14 <HAL_ADC_Init>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80009aa:	f000 ff53 	bl	8001854 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80009ae:	4b0f      	ldr	r3, [pc, #60]	; (80009ec <MX_ADC1_Init+0xc4>)
 80009b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009b2:	2306      	movs	r3, #6
 80009b4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80009b6:	2300      	movs	r3, #0
 80009b8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009ba:	237f      	movs	r3, #127	; 0x7f
 80009bc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009be:	2304      	movs	r3, #4
 80009c0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80009c2:	2300      	movs	r3, #0
 80009c4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009c6:	463b      	mov	r3, r7
 80009c8:	4619      	mov	r1, r3
 80009ca:	4806      	ldr	r0, [pc, #24]	; (80009e4 <MX_ADC1_Init+0xbc>)
 80009cc:	f002 f96e 	bl	8002cac <HAL_ADC_ConfigChannel>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80009d6:	f000 ff3d 	bl	8001854 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009da:	bf00      	nop
 80009dc:	3718      	adds	r7, #24
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	2000003c 	.word	0x2000003c
 80009e8:	50040000 	.word	0x50040000
 80009ec:	04300002 	.word	0x04300002

080009f0 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80009f4:	4b16      	ldr	r3, [pc, #88]	; (8000a50 <MX_CAN1_Init+0x60>)
 80009f6:	4a17      	ldr	r2, [pc, #92]	; (8000a54 <MX_CAN1_Init+0x64>)
 80009f8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80009fa:	4b15      	ldr	r3, [pc, #84]	; (8000a50 <MX_CAN1_Init+0x60>)
 80009fc:	2210      	movs	r2, #16
 80009fe:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000a00:	4b13      	ldr	r3, [pc, #76]	; (8000a50 <MX_CAN1_Init+0x60>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a06:	4b12      	ldr	r3, [pc, #72]	; (8000a50 <MX_CAN1_Init+0x60>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000a0c:	4b10      	ldr	r3, [pc, #64]	; (8000a50 <MX_CAN1_Init+0x60>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000a12:	4b0f      	ldr	r3, [pc, #60]	; (8000a50 <MX_CAN1_Init+0x60>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000a18:	4b0d      	ldr	r3, [pc, #52]	; (8000a50 <MX_CAN1_Init+0x60>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000a1e:	4b0c      	ldr	r3, [pc, #48]	; (8000a50 <MX_CAN1_Init+0x60>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000a24:	4b0a      	ldr	r3, [pc, #40]	; (8000a50 <MX_CAN1_Init+0x60>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000a2a:	4b09      	ldr	r3, [pc, #36]	; (8000a50 <MX_CAN1_Init+0x60>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000a30:	4b07      	ldr	r3, [pc, #28]	; (8000a50 <MX_CAN1_Init+0x60>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000a36:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <MX_CAN1_Init+0x60>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000a3c:	4804      	ldr	r0, [pc, #16]	; (8000a50 <MX_CAN1_Init+0x60>)
 8000a3e:	f002 fd31 	bl	80034a4 <HAL_CAN_Init>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000a48:	f000 ff04 	bl	8001854 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000a4c:	bf00      	nop
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	200000a4 	.word	0x200000a4
 8000a54:	40006400 	.word	0x40006400

08000a58 <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 8000a5c:	4b12      	ldr	r3, [pc, #72]	; (8000aa8 <MX_COMP1_Init+0x50>)
 8000a5e:	4a13      	ldr	r2, [pc, #76]	; (8000aac <MX_COMP1_Init+0x54>)
 8000a60:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InvertingInput = COMP_INPUT_MINUS_VREFINT;
 8000a62:	4b11      	ldr	r3, [pc, #68]	; (8000aa8 <MX_COMP1_Init+0x50>)
 8000a64:	4a12      	ldr	r2, [pc, #72]	; (8000ab0 <MX_COMP1_Init+0x58>)
 8000a66:	611a      	str	r2, [r3, #16]
  hcomp1.Init.NonInvertingInput = COMP_INPUT_PLUS_IO2;
 8000a68:	4b0f      	ldr	r3, [pc, #60]	; (8000aa8 <MX_COMP1_Init+0x50>)
 8000a6a:	2280      	movs	r2, #128	; 0x80
 8000a6c:	60da      	str	r2, [r3, #12]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000a6e:	4b0e      	ldr	r3, [pc, #56]	; (8000aa8 <MX_COMP1_Init+0x50>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	619a      	str	r2, [r3, #24]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000a74:	4b0c      	ldr	r3, [pc, #48]	; (8000aa8 <MX_COMP1_Init+0x50>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	615a      	str	r2, [r3, #20]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8000a7a:	4b0b      	ldr	r3, [pc, #44]	; (8000aa8 <MX_COMP1_Init+0x50>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	61da      	str	r2, [r3, #28]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8000a80:	4b09      	ldr	r3, [pc, #36]	; (8000aa8 <MX_COMP1_Init+0x50>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	609a      	str	r2, [r3, #8]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000a86:	4b08      	ldr	r3, [pc, #32]	; (8000aa8 <MX_COMP1_Init+0x50>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000a8c:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <MX_COMP1_Init+0x50>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8000a92:	4805      	ldr	r0, [pc, #20]	; (8000aa8 <MX_COMP1_Init+0x50>)
 8000a94:	f002 feaa 	bl	80037ec <HAL_COMP_Init>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_COMP1_Init+0x4a>
  {
    Error_Handler();
 8000a9e:	f000 fed9 	bl	8001854 <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	200000cc 	.word	0x200000cc
 8000aac:	40010200 	.word	0x40010200
 8000ab0:	00800030 	.word	0x00800030

08000ab4 <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 8000ab8:	4b12      	ldr	r3, [pc, #72]	; (8000b04 <MX_COMP2_Init+0x50>)
 8000aba:	4a13      	ldr	r2, [pc, #76]	; (8000b08 <MX_COMP2_Init+0x54>)
 8000abc:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INPUT_MINUS_IO2;
 8000abe:	4b11      	ldr	r3, [pc, #68]	; (8000b04 <MX_COMP2_Init+0x50>)
 8000ac0:	2270      	movs	r2, #112	; 0x70
 8000ac2:	611a      	str	r2, [r3, #16]
  hcomp2.Init.NonInvertingInput = COMP_INPUT_PLUS_IO2;
 8000ac4:	4b0f      	ldr	r3, [pc, #60]	; (8000b04 <MX_COMP2_Init+0x50>)
 8000ac6:	2280      	movs	r2, #128	; 0x80
 8000ac8:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000aca:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <MX_COMP2_Init+0x50>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	619a      	str	r2, [r3, #24]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000ad0:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <MX_COMP2_Init+0x50>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	615a      	str	r2, [r3, #20]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8000ad6:	4b0b      	ldr	r3, [pc, #44]	; (8000b04 <MX_COMP2_Init+0x50>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	61da      	str	r2, [r3, #28]
  hcomp2.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8000adc:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <MX_COMP2_Init+0x50>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	609a      	str	r2, [r3, #8]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000ae2:	4b08      	ldr	r3, [pc, #32]	; (8000b04 <MX_COMP2_Init+0x50>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	605a      	str	r2, [r3, #4]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000ae8:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <MX_COMP2_Init+0x50>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8000aee:	4805      	ldr	r0, [pc, #20]	; (8000b04 <MX_COMP2_Init+0x50>)
 8000af0:	f002 fe7c 	bl	80037ec <HAL_COMP_Init>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_COMP2_Init+0x4a>
  {
    Error_Handler();
 8000afa:	f000 feab 	bl	8001854 <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	200000f8 	.word	0x200000f8
 8000b08:	40010204 	.word	0x40010204

08000b0c <MX_I2C1_SMBUS_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_SMBUS_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hsmbus1.Instance = I2C1;
 8000b10:	4b18      	ldr	r3, [pc, #96]	; (8000b74 <MX_I2C1_SMBUS_Init+0x68>)
 8000b12:	4a19      	ldr	r2, [pc, #100]	; (8000b78 <MX_I2C1_SMBUS_Init+0x6c>)
 8000b14:	601a      	str	r2, [r3, #0]
  hsmbus1.Init.Timing = 0x00707CBB;
 8000b16:	4b17      	ldr	r3, [pc, #92]	; (8000b74 <MX_I2C1_SMBUS_Init+0x68>)
 8000b18:	4a18      	ldr	r2, [pc, #96]	; (8000b7c <MX_I2C1_SMBUS_Init+0x70>)
 8000b1a:	605a      	str	r2, [r3, #4]
  hsmbus1.Init.AnalogFilter = SMBUS_ANALOGFILTER_ENABLE;
 8000b1c:	4b15      	ldr	r3, [pc, #84]	; (8000b74 <MX_I2C1_SMBUS_Init+0x68>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	609a      	str	r2, [r3, #8]
  hsmbus1.Init.OwnAddress1 = 2;
 8000b22:	4b14      	ldr	r3, [pc, #80]	; (8000b74 <MX_I2C1_SMBUS_Init+0x68>)
 8000b24:	2202      	movs	r2, #2
 8000b26:	60da      	str	r2, [r3, #12]
  hsmbus1.Init.AddressingMode = SMBUS_ADDRESSINGMODE_7BIT;
 8000b28:	4b12      	ldr	r3, [pc, #72]	; (8000b74 <MX_I2C1_SMBUS_Init+0x68>)
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	611a      	str	r2, [r3, #16]
  hsmbus1.Init.DualAddressMode = SMBUS_DUALADDRESS_DISABLE;
 8000b2e:	4b11      	ldr	r3, [pc, #68]	; (8000b74 <MX_I2C1_SMBUS_Init+0x68>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	615a      	str	r2, [r3, #20]
  hsmbus1.Init.OwnAddress2 = 0;
 8000b34:	4b0f      	ldr	r3, [pc, #60]	; (8000b74 <MX_I2C1_SMBUS_Init+0x68>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	619a      	str	r2, [r3, #24]
  hsmbus1.Init.OwnAddress2Masks = SMBUS_OA2_NOMASK;
 8000b3a:	4b0e      	ldr	r3, [pc, #56]	; (8000b74 <MX_I2C1_SMBUS_Init+0x68>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	61da      	str	r2, [r3, #28]
  hsmbus1.Init.GeneralCallMode = SMBUS_GENERALCALL_DISABLE;
 8000b40:	4b0c      	ldr	r3, [pc, #48]	; (8000b74 <MX_I2C1_SMBUS_Init+0x68>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	621a      	str	r2, [r3, #32]
  hsmbus1.Init.NoStretchMode = SMBUS_NOSTRETCH_DISABLE;
 8000b46:	4b0b      	ldr	r3, [pc, #44]	; (8000b74 <MX_I2C1_SMBUS_Init+0x68>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	625a      	str	r2, [r3, #36]	; 0x24
  hsmbus1.Init.PacketErrorCheckMode = SMBUS_PEC_DISABLE;
 8000b4c:	4b09      	ldr	r3, [pc, #36]	; (8000b74 <MX_I2C1_SMBUS_Init+0x68>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	629a      	str	r2, [r3, #40]	; 0x28
  hsmbus1.Init.PeripheralMode = SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE;
 8000b52:	4b08      	ldr	r3, [pc, #32]	; (8000b74 <MX_I2C1_SMBUS_Init+0x68>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	62da      	str	r2, [r3, #44]	; 0x2c
  hsmbus1.Init.SMBusTimeout = 0x00008186;
 8000b58:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <MX_I2C1_SMBUS_Init+0x68>)
 8000b5a:	f248 1286 	movw	r2, #33158	; 0x8186
 8000b5e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_SMBUS_Init(&hsmbus1) != HAL_OK)
 8000b60:	4804      	ldr	r0, [pc, #16]	; (8000b74 <MX_I2C1_SMBUS_Init+0x68>)
 8000b62:	f006 fab9 	bl	80070d8 <HAL_SMBUS_Init>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_I2C1_SMBUS_Init+0x64>
  {
    Error_Handler();
 8000b6c:	f000 fe72 	bl	8001854 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b70:	bf00      	nop
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	20000124 	.word	0x20000124
 8000b78:	40005400 	.word	0x40005400
 8000b7c:	00707cbb 	.word	0x00707cbb

08000b80 <MX_I2C2_SMBUS_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_SMBUS_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hsmbus2.Instance = I2C2;
 8000b84:	4b1c      	ldr	r3, [pc, #112]	; (8000bf8 <MX_I2C2_SMBUS_Init+0x78>)
 8000b86:	4a1d      	ldr	r2, [pc, #116]	; (8000bfc <MX_I2C2_SMBUS_Init+0x7c>)
 8000b88:	601a      	str	r2, [r3, #0]
  hsmbus2.Init.Timing = 0x00707CBB;
 8000b8a:	4b1b      	ldr	r3, [pc, #108]	; (8000bf8 <MX_I2C2_SMBUS_Init+0x78>)
 8000b8c:	4a1c      	ldr	r2, [pc, #112]	; (8000c00 <MX_I2C2_SMBUS_Init+0x80>)
 8000b8e:	605a      	str	r2, [r3, #4]
  hsmbus2.Init.AnalogFilter = SMBUS_ANALOGFILTER_ENABLE;
 8000b90:	4b19      	ldr	r3, [pc, #100]	; (8000bf8 <MX_I2C2_SMBUS_Init+0x78>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	609a      	str	r2, [r3, #8]
  hsmbus2.Init.OwnAddress1 = 2;
 8000b96:	4b18      	ldr	r3, [pc, #96]	; (8000bf8 <MX_I2C2_SMBUS_Init+0x78>)
 8000b98:	2202      	movs	r2, #2
 8000b9a:	60da      	str	r2, [r3, #12]
  hsmbus2.Init.AddressingMode = SMBUS_ADDRESSINGMODE_7BIT;
 8000b9c:	4b16      	ldr	r3, [pc, #88]	; (8000bf8 <MX_I2C2_SMBUS_Init+0x78>)
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	611a      	str	r2, [r3, #16]
  hsmbus2.Init.DualAddressMode = SMBUS_DUALADDRESS_DISABLE;
 8000ba2:	4b15      	ldr	r3, [pc, #84]	; (8000bf8 <MX_I2C2_SMBUS_Init+0x78>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	615a      	str	r2, [r3, #20]
  hsmbus2.Init.OwnAddress2 = 0;
 8000ba8:	4b13      	ldr	r3, [pc, #76]	; (8000bf8 <MX_I2C2_SMBUS_Init+0x78>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	619a      	str	r2, [r3, #24]
  hsmbus2.Init.OwnAddress2Masks = SMBUS_OA2_NOMASK;
 8000bae:	4b12      	ldr	r3, [pc, #72]	; (8000bf8 <MX_I2C2_SMBUS_Init+0x78>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	61da      	str	r2, [r3, #28]
  hsmbus2.Init.GeneralCallMode = SMBUS_GENERALCALL_DISABLE;
 8000bb4:	4b10      	ldr	r3, [pc, #64]	; (8000bf8 <MX_I2C2_SMBUS_Init+0x78>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	621a      	str	r2, [r3, #32]
  hsmbus2.Init.NoStretchMode = SMBUS_NOSTRETCH_DISABLE;
 8000bba:	4b0f      	ldr	r3, [pc, #60]	; (8000bf8 <MX_I2C2_SMBUS_Init+0x78>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	625a      	str	r2, [r3, #36]	; 0x24
  hsmbus2.Init.PacketErrorCheckMode = SMBUS_PEC_DISABLE;
 8000bc0:	4b0d      	ldr	r3, [pc, #52]	; (8000bf8 <MX_I2C2_SMBUS_Init+0x78>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	629a      	str	r2, [r3, #40]	; 0x28
  hsmbus2.Init.PeripheralMode = SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE;
 8000bc6:	4b0c      	ldr	r3, [pc, #48]	; (8000bf8 <MX_I2C2_SMBUS_Init+0x78>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	62da      	str	r2, [r3, #44]	; 0x2c
  hsmbus2.Init.SMBusTimeout = 0x00008186;
 8000bcc:	4b0a      	ldr	r3, [pc, #40]	; (8000bf8 <MX_I2C2_SMBUS_Init+0x78>)
 8000bce:	f248 1286 	movw	r2, #33158	; 0x8186
 8000bd2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_SMBUS_Init(&hsmbus2) != HAL_OK)
 8000bd4:	4808      	ldr	r0, [pc, #32]	; (8000bf8 <MX_I2C2_SMBUS_Init+0x78>)
 8000bd6:	f006 fa7f 	bl	80070d8 <HAL_SMBUS_Init>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_I2C2_SMBUS_Init+0x64>
  {
    Error_Handler();
 8000be0:	f000 fe38 	bl	8001854 <Error_Handler>
  }

  /** configuration Alert Mode
  */
  if (HAL_SMBUS_EnableAlert_IT(&hsmbus2) != HAL_OK)
 8000be4:	4804      	ldr	r0, [pc, #16]	; (8000bf8 <MX_I2C2_SMBUS_Init+0x78>)
 8000be6:	f006 fb2f 	bl	8007248 <HAL_SMBUS_EnableAlert_IT>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_I2C2_SMBUS_Init+0x74>
  {
    Error_Handler();
 8000bf0:	f000 fe30 	bl	8001854 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000bf4:	bf00      	nop
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	20000174 	.word	0x20000174
 8000bfc:	40005800 	.word	0x40005800
 8000c00:	00707cbb 	.word	0x00707cbb

08000c04 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000c08:	4b22      	ldr	r3, [pc, #136]	; (8000c94 <MX_LPUART1_UART_Init+0x90>)
 8000c0a:	4a23      	ldr	r2, [pc, #140]	; (8000c98 <MX_LPUART1_UART_Init+0x94>)
 8000c0c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000c0e:	4b21      	ldr	r3, [pc, #132]	; (8000c94 <MX_LPUART1_UART_Init+0x90>)
 8000c10:	4a22      	ldr	r2, [pc, #136]	; (8000c9c <MX_LPUART1_UART_Init+0x98>)
 8000c12:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8000c14:	4b1f      	ldr	r3, [pc, #124]	; (8000c94 <MX_LPUART1_UART_Init+0x90>)
 8000c16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000c1a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000c1c:	4b1d      	ldr	r3, [pc, #116]	; (8000c94 <MX_LPUART1_UART_Init+0x90>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000c22:	4b1c      	ldr	r3, [pc, #112]	; (8000c94 <MX_LPUART1_UART_Init+0x90>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000c28:	4b1a      	ldr	r3, [pc, #104]	; (8000c94 <MX_LPUART1_UART_Init+0x90>)
 8000c2a:	220c      	movs	r2, #12
 8000c2c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c2e:	4b19      	ldr	r3, [pc, #100]	; (8000c94 <MX_LPUART1_UART_Init+0x90>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c34:	4b17      	ldr	r3, [pc, #92]	; (8000c94 <MX_LPUART1_UART_Init+0x90>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c3a:	4b16      	ldr	r3, [pc, #88]	; (8000c94 <MX_LPUART1_UART_Init+0x90>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c40:	4b14      	ldr	r3, [pc, #80]	; (8000c94 <MX_LPUART1_UART_Init+0x90>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000c46:	4b13      	ldr	r3, [pc, #76]	; (8000c94 <MX_LPUART1_UART_Init+0x90>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000c4c:	4811      	ldr	r0, [pc, #68]	; (8000c94 <MX_LPUART1_UART_Init+0x90>)
 8000c4e:	f008 fa5b 	bl	8009108 <HAL_UART_Init>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8000c58:	f000 fdfc 	bl	8001854 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	480d      	ldr	r0, [pc, #52]	; (8000c94 <MX_LPUART1_UART_Init+0x90>)
 8000c60:	f008 ff8c 	bl	8009b7c <HAL_UARTEx_SetTxFifoThreshold>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000c6a:	f000 fdf3 	bl	8001854 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c6e:	2100      	movs	r1, #0
 8000c70:	4808      	ldr	r0, [pc, #32]	; (8000c94 <MX_LPUART1_UART_Init+0x90>)
 8000c72:	f008 ffc1 	bl	8009bf8 <HAL_UARTEx_SetRxFifoThreshold>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000c7c:	f000 fdea 	bl	8001854 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000c80:	4804      	ldr	r0, [pc, #16]	; (8000c94 <MX_LPUART1_UART_Init+0x90>)
 8000c82:	f008 ff42 	bl	8009b0a <HAL_UARTEx_DisableFifoMode>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000c8c:	f000 fde2 	bl	8001854 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000c90:	bf00      	nop
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	200001c4 	.word	0x200001c4
 8000c98:	40008000 	.word	0x40008000
 8000c9c:	00033324 	.word	0x00033324

08000ca0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ca4:	4b23      	ldr	r3, [pc, #140]	; (8000d34 <MX_USART2_UART_Init+0x94>)
 8000ca6:	4a24      	ldr	r2, [pc, #144]	; (8000d38 <MX_USART2_UART_Init+0x98>)
 8000ca8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000caa:	4b22      	ldr	r3, [pc, #136]	; (8000d34 <MX_USART2_UART_Init+0x94>)
 8000cac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cb0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cb2:	4b20      	ldr	r3, [pc, #128]	; (8000d34 <MX_USART2_UART_Init+0x94>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cb8:	4b1e      	ldr	r3, [pc, #120]	; (8000d34 <MX_USART2_UART_Init+0x94>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cbe:	4b1d      	ldr	r3, [pc, #116]	; (8000d34 <MX_USART2_UART_Init+0x94>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cc4:	4b1b      	ldr	r3, [pc, #108]	; (8000d34 <MX_USART2_UART_Init+0x94>)
 8000cc6:	220c      	movs	r2, #12
 8000cc8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8000cca:	4b1a      	ldr	r3, [pc, #104]	; (8000d34 <MX_USART2_UART_Init+0x94>)
 8000ccc:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000cd0:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cd2:	4b18      	ldr	r3, [pc, #96]	; (8000d34 <MX_USART2_UART_Init+0x94>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cd8:	4b16      	ldr	r3, [pc, #88]	; (8000d34 <MX_USART2_UART_Init+0x94>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cde:	4b15      	ldr	r3, [pc, #84]	; (8000d34 <MX_USART2_UART_Init+0x94>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ce4:	4b13      	ldr	r3, [pc, #76]	; (8000d34 <MX_USART2_UART_Init+0x94>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cea:	4812      	ldr	r0, [pc, #72]	; (8000d34 <MX_USART2_UART_Init+0x94>)
 8000cec:	f008 fa0c 	bl	8009108 <HAL_UART_Init>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8000cf6:	f000 fdad 	bl	8001854 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	480d      	ldr	r0, [pc, #52]	; (8000d34 <MX_USART2_UART_Init+0x94>)
 8000cfe:	f008 ff3d 	bl	8009b7c <HAL_UARTEx_SetTxFifoThreshold>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8000d08:	f000 fda4 	bl	8001854 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	4809      	ldr	r0, [pc, #36]	; (8000d34 <MX_USART2_UART_Init+0x94>)
 8000d10:	f008 ff72 	bl	8009bf8 <HAL_UARTEx_SetRxFifoThreshold>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8000d1a:	f000 fd9b 	bl	8001854 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000d1e:	4805      	ldr	r0, [pc, #20]	; (8000d34 <MX_USART2_UART_Init+0x94>)
 8000d20:	f008 fef3 	bl	8009b0a <HAL_UARTEx_DisableFifoMode>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8000d2a:	f000 fd93 	bl	8001854 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d2e:	bf00      	nop
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	20000254 	.word	0x20000254
 8000d38:	40004400 	.word	0x40004400

08000d3c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d40:	4b22      	ldr	r3, [pc, #136]	; (8000dcc <MX_USART3_UART_Init+0x90>)
 8000d42:	4a23      	ldr	r2, [pc, #140]	; (8000dd0 <MX_USART3_UART_Init+0x94>)
 8000d44:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d46:	4b21      	ldr	r3, [pc, #132]	; (8000dcc <MX_USART3_UART_Init+0x90>)
 8000d48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d4c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d4e:	4b1f      	ldr	r3, [pc, #124]	; (8000dcc <MX_USART3_UART_Init+0x90>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d54:	4b1d      	ldr	r3, [pc, #116]	; (8000dcc <MX_USART3_UART_Init+0x90>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d5a:	4b1c      	ldr	r3, [pc, #112]	; (8000dcc <MX_USART3_UART_Init+0x90>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d60:	4b1a      	ldr	r3, [pc, #104]	; (8000dcc <MX_USART3_UART_Init+0x90>)
 8000d62:	220c      	movs	r2, #12
 8000d64:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d66:	4b19      	ldr	r3, [pc, #100]	; (8000dcc <MX_USART3_UART_Init+0x90>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d6c:	4b17      	ldr	r3, [pc, #92]	; (8000dcc <MX_USART3_UART_Init+0x90>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d72:	4b16      	ldr	r3, [pc, #88]	; (8000dcc <MX_USART3_UART_Init+0x90>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d78:	4b14      	ldr	r3, [pc, #80]	; (8000dcc <MX_USART3_UART_Init+0x90>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d7e:	4b13      	ldr	r3, [pc, #76]	; (8000dcc <MX_USART3_UART_Init+0x90>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d84:	4811      	ldr	r0, [pc, #68]	; (8000dcc <MX_USART3_UART_Init+0x90>)
 8000d86:	f008 f9bf 	bl	8009108 <HAL_UART_Init>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000d90:	f000 fd60 	bl	8001854 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d94:	2100      	movs	r1, #0
 8000d96:	480d      	ldr	r0, [pc, #52]	; (8000dcc <MX_USART3_UART_Init+0x90>)
 8000d98:	f008 fef0 	bl	8009b7c <HAL_UARTEx_SetTxFifoThreshold>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000da2:	f000 fd57 	bl	8001854 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000da6:	2100      	movs	r1, #0
 8000da8:	4808      	ldr	r0, [pc, #32]	; (8000dcc <MX_USART3_UART_Init+0x90>)
 8000daa:	f008 ff25 	bl	8009bf8 <HAL_UARTEx_SetRxFifoThreshold>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000db4:	f000 fd4e 	bl	8001854 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000db8:	4804      	ldr	r0, [pc, #16]	; (8000dcc <MX_USART3_UART_Init+0x90>)
 8000dba:	f008 fea6 	bl	8009b0a <HAL_UARTEx_DisableFifoMode>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000dc4:	f000 fd46 	bl	8001854 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000dc8:	bf00      	nop
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	200002e4 	.word	0x200002e4
 8000dd0:	40004800 	.word	0x40004800

08000dd4 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockB1.Instance = SAI1_Block_B;
 8000dd8:	4b45      	ldr	r3, [pc, #276]	; (8000ef0 <MX_SAI1_Init+0x11c>)
 8000dda:	4a46      	ldr	r2, [pc, #280]	; (8000ef4 <MX_SAI1_Init+0x120>)
 8000ddc:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000dde:	4b44      	ldr	r3, [pc, #272]	; (8000ef0 <MX_SAI1_Init+0x11c>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000de4:	4b42      	ldr	r3, [pc, #264]	; (8000ef0 <MX_SAI1_Init+0x11c>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 8000dea:	4b41      	ldr	r3, [pc, #260]	; (8000ef0 <MX_SAI1_Init+0x11c>)
 8000dec:	2240      	movs	r2, #64	; 0x40
 8000dee:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000df0:	4b3f      	ldr	r3, [pc, #252]	; (8000ef0 <MX_SAI1_Init+0x11c>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000df6:	4b3e      	ldr	r3, [pc, #248]	; (8000ef0 <MX_SAI1_Init+0x11c>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000dfc:	4b3c      	ldr	r3, [pc, #240]	; (8000ef0 <MX_SAI1_Init+0x11c>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000e02:	4b3b      	ldr	r3, [pc, #236]	; (8000ef0 <MX_SAI1_Init+0x11c>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000e08:	4b39      	ldr	r3, [pc, #228]	; (8000ef0 <MX_SAI1_Init+0x11c>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8000e0e:	4b38      	ldr	r3, [pc, #224]	; (8000ef0 <MX_SAI1_Init+0x11c>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000e14:	4b36      	ldr	r3, [pc, #216]	; (8000ef0 <MX_SAI1_Init+0x11c>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000e1a:	4b35      	ldr	r3, [pc, #212]	; (8000ef0 <MX_SAI1_Init+0x11c>)
 8000e1c:	4a36      	ldr	r2, [pc, #216]	; (8000ef8 <MX_SAI1_Init+0x124>)
 8000e1e:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000e20:	4b33      	ldr	r3, [pc, #204]	; (8000ef0 <MX_SAI1_Init+0x11c>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000e26:	4b32      	ldr	r3, [pc, #200]	; (8000ef0 <MX_SAI1_Init+0x11c>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000e2c:	4b30      	ldr	r3, [pc, #192]	; (8000ef0 <MX_SAI1_Init+0x11c>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000e32:	4b2f      	ldr	r3, [pc, #188]	; (8000ef0 <MX_SAI1_Init+0x11c>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.PdmInit.Activation = DISABLE;
 8000e38:	4b2d      	ldr	r3, [pc, #180]	; (8000ef0 <MX_SAI1_Init+0x11c>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.PdmInit.MicPairsNbr = 0;
 8000e40:	4b2b      	ldr	r3, [pc, #172]	; (8000ef0 <MX_SAI1_Init+0x11c>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8000e46:	4b2a      	ldr	r3, [pc, #168]	; (8000ef0 <MX_SAI1_Init+0x11c>)
 8000e48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e4c:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.FrameInit.FrameLength = 8;
 8000e4e:	4b28      	ldr	r3, [pc, #160]	; (8000ef0 <MX_SAI1_Init+0x11c>)
 8000e50:	2208      	movs	r2, #8
 8000e52:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 8000e54:	4b26      	ldr	r3, [pc, #152]	; (8000ef0 <MX_SAI1_Init+0x11c>)
 8000e56:	2201      	movs	r2, #1
 8000e58:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000e5a:	4b25      	ldr	r3, [pc, #148]	; (8000ef0 <MX_SAI1_Init+0x11c>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000e60:	4b23      	ldr	r3, [pc, #140]	; (8000ef0 <MX_SAI1_Init+0x11c>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000e66:	4b22      	ldr	r3, [pc, #136]	; (8000ef0 <MX_SAI1_Init+0x11c>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 8000e6c:	4b20      	ldr	r3, [pc, #128]	; (8000ef0 <MX_SAI1_Init+0x11c>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000e72:	4b1f      	ldr	r3, [pc, #124]	; (8000ef0 <MX_SAI1_Init+0x11c>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 8000e78:	4b1d      	ldr	r3, [pc, #116]	; (8000ef0 <MX_SAI1_Init+0x11c>)
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 8000e7e:	4b1c      	ldr	r3, [pc, #112]	; (8000ef0 <MX_SAI1_Init+0x11c>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	671a      	str	r2, [r3, #112]	; 0x70
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8000e84:	481a      	ldr	r0, [pc, #104]	; (8000ef0 <MX_SAI1_Init+0x11c>)
 8000e86:	f005 fddb 	bl	8006a40 <HAL_SAI_Init>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_SAI1_Init+0xc0>
  {
    Error_Handler();
 8000e90:	f000 fce0 	bl	8001854 <Error_Handler>
  }
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000e94:	4b19      	ldr	r3, [pc, #100]	; (8000efc <MX_SAI1_Init+0x128>)
 8000e96:	4a1a      	ldr	r2, [pc, #104]	; (8000f00 <MX_SAI1_Init+0x12c>)
 8000e98:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000e9a:	4b18      	ldr	r3, [pc, #96]	; (8000efc <MX_SAI1_Init+0x128>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000ea0:	4b16      	ldr	r3, [pc, #88]	; (8000efc <MX_SAI1_Init+0x128>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000ea6:	4b15      	ldr	r3, [pc, #84]	; (8000efc <MX_SAI1_Init+0x128>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000eac:	4b13      	ldr	r3, [pc, #76]	; (8000efc <MX_SAI1_Init+0x128>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000eb2:	4b12      	ldr	r3, [pc, #72]	; (8000efc <MX_SAI1_Init+0x128>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000eb8:	4b10      	ldr	r3, [pc, #64]	; (8000efc <MX_SAI1_Init+0x128>)
 8000eba:	4a0f      	ldr	r2, [pc, #60]	; (8000ef8 <MX_SAI1_Init+0x124>)
 8000ebc:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000ebe:	4b0f      	ldr	r3, [pc, #60]	; (8000efc <MX_SAI1_Init+0x128>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000ec4:	4b0d      	ldr	r3, [pc, #52]	; (8000efc <MX_SAI1_Init+0x128>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000eca:	4b0c      	ldr	r3, [pc, #48]	; (8000efc <MX_SAI1_Init+0x128>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000ed0:	4b0a      	ldr	r3, [pc, #40]	; (8000efc <MX_SAI1_Init+0x128>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	2200      	movs	r2, #0
 8000eda:	2100      	movs	r1, #0
 8000edc:	4807      	ldr	r0, [pc, #28]	; (8000efc <MX_SAI1_Init+0x128>)
 8000ede:	f005 fd7d 	bl	80069dc <HAL_SAI_InitProtocol>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <MX_SAI1_Init+0x118>
  {
    Error_Handler();
 8000ee8:	f000 fcb4 	bl	8001854 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8000eec:	bf00      	nop
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	20000374 	.word	0x20000374
 8000ef4:	40015424 	.word	0x40015424
 8000ef8:	0002ee00 	.word	0x0002ee00
 8000efc:	20000408 	.word	0x20000408
 8000f00:	40015404 	.word	0x40015404

08000f04 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8000f08:	4b2f      	ldr	r3, [pc, #188]	; (8000fc8 <MX_SAI2_Init+0xc4>)
 8000f0a:	4a30      	ldr	r2, [pc, #192]	; (8000fcc <MX_SAI2_Init+0xc8>)
 8000f0c:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000f0e:	4b2e      	ldr	r3, [pc, #184]	; (8000fc8 <MX_SAI2_Init+0xc4>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8000f14:	4b2c      	ldr	r3, [pc, #176]	; (8000fc8 <MX_SAI2_Init+0xc4>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8000f1a:	4b2b      	ldr	r3, [pc, #172]	; (8000fc8 <MX_SAI2_Init+0xc4>)
 8000f1c:	2240      	movs	r2, #64	; 0x40
 8000f1e:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000f20:	4b29      	ldr	r3, [pc, #164]	; (8000fc8 <MX_SAI2_Init+0xc4>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000f26:	4b28      	ldr	r3, [pc, #160]	; (8000fc8 <MX_SAI2_Init+0xc4>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000f2c:	4b26      	ldr	r3, [pc, #152]	; (8000fc8 <MX_SAI2_Init+0xc4>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000f32:	4b25      	ldr	r3, [pc, #148]	; (8000fc8 <MX_SAI2_Init+0xc4>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000f38:	4b23      	ldr	r3, [pc, #140]	; (8000fc8 <MX_SAI2_Init+0xc4>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8000f3e:	4b22      	ldr	r3, [pc, #136]	; (8000fc8 <MX_SAI2_Init+0xc4>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000f44:	4b20      	ldr	r3, [pc, #128]	; (8000fc8 <MX_SAI2_Init+0xc4>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000f4a:	4b1f      	ldr	r3, [pc, #124]	; (8000fc8 <MX_SAI2_Init+0xc4>)
 8000f4c:	4a20      	ldr	r2, [pc, #128]	; (8000fd0 <MX_SAI2_Init+0xcc>)
 8000f4e:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000f50:	4b1d      	ldr	r3, [pc, #116]	; (8000fc8 <MX_SAI2_Init+0xc4>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000f56:	4b1c      	ldr	r3, [pc, #112]	; (8000fc8 <MX_SAI2_Init+0xc4>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000f5c:	4b1a      	ldr	r3, [pc, #104]	; (8000fc8 <MX_SAI2_Init+0xc4>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000f62:	4b19      	ldr	r3, [pc, #100]	; (8000fc8 <MX_SAI2_Init+0xc4>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.PdmInit.Activation = DISABLE;
 8000f68:	4b17      	ldr	r3, [pc, #92]	; (8000fc8 <MX_SAI2_Init+0xc4>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.PdmInit.MicPairsNbr = 0;
 8000f70:	4b15      	ldr	r3, [pc, #84]	; (8000fc8 <MX_SAI2_Init+0xc4>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8000f76:	4b14      	ldr	r3, [pc, #80]	; (8000fc8 <MX_SAI2_Init+0xc4>)
 8000f78:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f7c:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8000f7e:	4b12      	ldr	r3, [pc, #72]	; (8000fc8 <MX_SAI2_Init+0xc4>)
 8000f80:	2208      	movs	r2, #8
 8000f82:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8000f84:	4b10      	ldr	r3, [pc, #64]	; (8000fc8 <MX_SAI2_Init+0xc4>)
 8000f86:	2201      	movs	r2, #1
 8000f88:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000f8a:	4b0f      	ldr	r3, [pc, #60]	; (8000fc8 <MX_SAI2_Init+0xc4>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000f90:	4b0d      	ldr	r3, [pc, #52]	; (8000fc8 <MX_SAI2_Init+0xc4>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000f96:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <MX_SAI2_Init+0xc4>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8000f9c:	4b0a      	ldr	r3, [pc, #40]	; (8000fc8 <MX_SAI2_Init+0xc4>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000fa2:	4b09      	ldr	r3, [pc, #36]	; (8000fc8 <MX_SAI2_Init+0xc4>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8000fa8:	4b07      	ldr	r3, [pc, #28]	; (8000fc8 <MX_SAI2_Init+0xc4>)
 8000faa:	2201      	movs	r2, #1
 8000fac:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8000fae:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <MX_SAI2_Init+0xc4>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	671a      	str	r2, [r3, #112]	; 0x70
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8000fb4:	4804      	ldr	r0, [pc, #16]	; (8000fc8 <MX_SAI2_Init+0xc4>)
 8000fb6:	f005 fd43 	bl	8006a40 <HAL_SAI_Init>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_SAI2_Init+0xc0>
  {
    Error_Handler();
 8000fc0:	f000 fc48 	bl	8001854 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8000fc4:	bf00      	nop
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	2000049c 	.word	0x2000049c
 8000fcc:	40015804 	.word	0x40015804
 8000fd0:	0002ee00 	.word	0x0002ee00

08000fd4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000fd8:	4b1b      	ldr	r3, [pc, #108]	; (8001048 <MX_SPI1_Init+0x74>)
 8000fda:	4a1c      	ldr	r2, [pc, #112]	; (800104c <MX_SPI1_Init+0x78>)
 8000fdc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fde:	4b1a      	ldr	r3, [pc, #104]	; (8001048 <MX_SPI1_Init+0x74>)
 8000fe0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000fe4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000fe6:	4b18      	ldr	r3, [pc, #96]	; (8001048 <MX_SPI1_Init+0x74>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000fec:	4b16      	ldr	r3, [pc, #88]	; (8001048 <MX_SPI1_Init+0x74>)
 8000fee:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000ff2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ff4:	4b14      	ldr	r3, [pc, #80]	; (8001048 <MX_SPI1_Init+0x74>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ffa:	4b13      	ldr	r3, [pc, #76]	; (8001048 <MX_SPI1_Init+0x74>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001000:	4b11      	ldr	r3, [pc, #68]	; (8001048 <MX_SPI1_Init+0x74>)
 8001002:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001006:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001008:	4b0f      	ldr	r3, [pc, #60]	; (8001048 <MX_SPI1_Init+0x74>)
 800100a:	2200      	movs	r2, #0
 800100c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800100e:	4b0e      	ldr	r3, [pc, #56]	; (8001048 <MX_SPI1_Init+0x74>)
 8001010:	2200      	movs	r2, #0
 8001012:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001014:	4b0c      	ldr	r3, [pc, #48]	; (8001048 <MX_SPI1_Init+0x74>)
 8001016:	2200      	movs	r2, #0
 8001018:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800101a:	4b0b      	ldr	r3, [pc, #44]	; (8001048 <MX_SPI1_Init+0x74>)
 800101c:	2200      	movs	r2, #0
 800101e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001020:	4b09      	ldr	r3, [pc, #36]	; (8001048 <MX_SPI1_Init+0x74>)
 8001022:	2207      	movs	r2, #7
 8001024:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001026:	4b08      	ldr	r3, [pc, #32]	; (8001048 <MX_SPI1_Init+0x74>)
 8001028:	2200      	movs	r2, #0
 800102a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800102c:	4b06      	ldr	r3, [pc, #24]	; (8001048 <MX_SPI1_Init+0x74>)
 800102e:	2208      	movs	r2, #8
 8001030:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001032:	4805      	ldr	r0, [pc, #20]	; (8001048 <MX_SPI1_Init+0x74>)
 8001034:	f006 f95b 	bl	80072ee <HAL_SPI_Init>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800103e:	f000 fc09 	bl	8001854 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	20000530 	.word	0x20000530
 800104c:	40013000 	.word	0x40013000

08001050 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001054:	4b1b      	ldr	r3, [pc, #108]	; (80010c4 <MX_SPI3_Init+0x74>)
 8001056:	4a1c      	ldr	r2, [pc, #112]	; (80010c8 <MX_SPI3_Init+0x78>)
 8001058:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800105a:	4b1a      	ldr	r3, [pc, #104]	; (80010c4 <MX_SPI3_Init+0x74>)
 800105c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001060:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001062:	4b18      	ldr	r3, [pc, #96]	; (80010c4 <MX_SPI3_Init+0x74>)
 8001064:	2200      	movs	r2, #0
 8001066:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8001068:	4b16      	ldr	r3, [pc, #88]	; (80010c4 <MX_SPI3_Init+0x74>)
 800106a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800106e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001070:	4b14      	ldr	r3, [pc, #80]	; (80010c4 <MX_SPI3_Init+0x74>)
 8001072:	2200      	movs	r2, #0
 8001074:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001076:	4b13      	ldr	r3, [pc, #76]	; (80010c4 <MX_SPI3_Init+0x74>)
 8001078:	2200      	movs	r2, #0
 800107a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800107c:	4b11      	ldr	r3, [pc, #68]	; (80010c4 <MX_SPI3_Init+0x74>)
 800107e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001082:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001084:	4b0f      	ldr	r3, [pc, #60]	; (80010c4 <MX_SPI3_Init+0x74>)
 8001086:	2200      	movs	r2, #0
 8001088:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800108a:	4b0e      	ldr	r3, [pc, #56]	; (80010c4 <MX_SPI3_Init+0x74>)
 800108c:	2200      	movs	r2, #0
 800108e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001090:	4b0c      	ldr	r3, [pc, #48]	; (80010c4 <MX_SPI3_Init+0x74>)
 8001092:	2200      	movs	r2, #0
 8001094:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001096:	4b0b      	ldr	r3, [pc, #44]	; (80010c4 <MX_SPI3_Init+0x74>)
 8001098:	2200      	movs	r2, #0
 800109a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800109c:	4b09      	ldr	r3, [pc, #36]	; (80010c4 <MX_SPI3_Init+0x74>)
 800109e:	2207      	movs	r2, #7
 80010a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80010a2:	4b08      	ldr	r3, [pc, #32]	; (80010c4 <MX_SPI3_Init+0x74>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80010a8:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <MX_SPI3_Init+0x74>)
 80010aa:	2208      	movs	r2, #8
 80010ac:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80010ae:	4805      	ldr	r0, [pc, #20]	; (80010c4 <MX_SPI3_Init+0x74>)
 80010b0:	f006 f91d 	bl	80072ee <HAL_SPI_Init>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80010ba:	f000 fbcb 	bl	8001854 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	20000594 	.word	0x20000594
 80010c8:	40003c00 	.word	0x40003c00

080010cc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b09c      	sub	sp, #112	; 0x70
 80010d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010d2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	605a      	str	r2, [r3, #4]
 80010dc:	609a      	str	r2, [r3, #8]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 80010de:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	605a      	str	r2, [r3, #4]
 80010e8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010ea:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80010ee:	2200      	movs	r2, #0
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	605a      	str	r2, [r3, #4]
 80010f4:	609a      	str	r2, [r3, #8]
 80010f6:	60da      	str	r2, [r3, #12]
 80010f8:	611a      	str	r2, [r3, #16]
 80010fa:	615a      	str	r2, [r3, #20]
 80010fc:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80010fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
 8001106:	605a      	str	r2, [r3, #4]
 8001108:	609a      	str	r2, [r3, #8]
 800110a:	60da      	str	r2, [r3, #12]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800110c:	463b      	mov	r3, r7
 800110e:	222c      	movs	r2, #44	; 0x2c
 8001110:	2100      	movs	r1, #0
 8001112:	4618      	mov	r0, r3
 8001114:	f008 fe20 	bl	8009d58 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001118:	4b5e      	ldr	r3, [pc, #376]	; (8001294 <MX_TIM1_Init+0x1c8>)
 800111a:	4a5f      	ldr	r2, [pc, #380]	; (8001298 <MX_TIM1_Init+0x1cc>)
 800111c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3999;
 800111e:	4b5d      	ldr	r3, [pc, #372]	; (8001294 <MX_TIM1_Init+0x1c8>)
 8001120:	f640 729f 	movw	r2, #3999	; 0xf9f
 8001124:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001126:	4b5b      	ldr	r3, [pc, #364]	; (8001294 <MX_TIM1_Init+0x1c8>)
 8001128:	2200      	movs	r2, #0
 800112a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 800112c:	4b59      	ldr	r3, [pc, #356]	; (8001294 <MX_TIM1_Init+0x1c8>)
 800112e:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001132:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001134:	4b57      	ldr	r3, [pc, #348]	; (8001294 <MX_TIM1_Init+0x1c8>)
 8001136:	2200      	movs	r2, #0
 8001138:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800113a:	4b56      	ldr	r3, [pc, #344]	; (8001294 <MX_TIM1_Init+0x1c8>)
 800113c:	2200      	movs	r2, #0
 800113e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001140:	4b54      	ldr	r3, [pc, #336]	; (8001294 <MX_TIM1_Init+0x1c8>)
 8001142:	2200      	movs	r2, #0
 8001144:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001146:	4853      	ldr	r0, [pc, #332]	; (8001294 <MX_TIM1_Init+0x1c8>)
 8001148:	f006 f9cb 	bl	80074e2 <HAL_TIM_PWM_Init>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001152:	f000 fb7f 	bl	8001854 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001156:	484f      	ldr	r0, [pc, #316]	; (8001294 <MX_TIM1_Init+0x1c8>)
 8001158:	f006 fb20 	bl	800779c <HAL_TIM_IC_Init>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8001162:	f000 fb77 	bl	8001854 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001166:	2300      	movs	r3, #0
 8001168:	667b      	str	r3, [r7, #100]	; 0x64
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800116a:	2300      	movs	r3, #0
 800116c:	66bb      	str	r3, [r7, #104]	; 0x68
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800116e:	2300      	movs	r3, #0
 8001170:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001172:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001176:	4619      	mov	r1, r3
 8001178:	4846      	ldr	r0, [pc, #280]	; (8001294 <MX_TIM1_Init+0x1c8>)
 800117a:	f007 fddb 	bl	8008d34 <HAL_TIMEx_MasterConfigSynchronization>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8001184:	f000 fb66 	bl	8001854 <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 8001188:	2301      	movs	r3, #1
 800118a:	65bb      	str	r3, [r7, #88]	; 0x58
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 800118c:	2301      	movs	r3, #1
 800118e:	65fb      	str	r3, [r7, #92]	; 0x5c
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 8001190:	2300      	movs	r3, #0
 8001192:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8001194:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001198:	461a      	mov	r2, r3
 800119a:	2101      	movs	r1, #1
 800119c:	483d      	ldr	r0, [pc, #244]	; (8001294 <MX_TIM1_Init+0x1c8>)
 800119e:	f007 fecf 	bl	8008f40 <HAL_TIMEx_ConfigBreakInput>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_TIM1_Init+0xe0>
  {
    Error_Handler();
 80011a8:	f000 fb54 	bl	8001854 <Error_Handler>
  }
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 80011ac:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80011b0:	461a      	mov	r2, r3
 80011b2:	2102      	movs	r1, #2
 80011b4:	4837      	ldr	r0, [pc, #220]	; (8001294 <MX_TIM1_Init+0x1c8>)
 80011b6:	f007 fec3 	bl	8008f40 <HAL_TIMEx_ConfigBreakInput>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80011c0:	f000 fb48 	bl	8001854 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011c4:	2360      	movs	r3, #96	; 0x60
 80011c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.Pulse = 0;
 80011c8:	2300      	movs	r3, #0
 80011ca:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011cc:	2300      	movs	r3, #0
 80011ce:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011d0:	2300      	movs	r3, #0
 80011d2:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011d4:	2300      	movs	r3, #0
 80011d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011d8:	2300      	movs	r3, #0
 80011da:	653b      	str	r3, [r7, #80]	; 0x50
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011dc:	2300      	movs	r3, #0
 80011de:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011e0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80011e4:	2200      	movs	r2, #0
 80011e6:	4619      	mov	r1, r3
 80011e8:	482a      	ldr	r0, [pc, #168]	; (8001294 <MX_TIM1_Init+0x1c8>)
 80011ea:	f006 fe3f 	bl	8007e6c <HAL_TIM_PWM_ConfigChannel>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 80011f4:	f000 fb2e 	bl	8001854 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80011f8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80011fc:	2204      	movs	r2, #4
 80011fe:	4619      	mov	r1, r3
 8001200:	4824      	ldr	r0, [pc, #144]	; (8001294 <MX_TIM1_Init+0x1c8>)
 8001202:	f006 fe33 	bl	8007e6c <HAL_TIM_PWM_ConfigChannel>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 800120c:	f000 fb22 	bl	8001854 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001210:	2302      	movs	r3, #2
 8001212:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001214:	2301      	movs	r3, #1
 8001216:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001218:	2300      	movs	r3, #0
 800121a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigIC.ICFilter = 0;
 800121c:	2300      	movs	r3, #0
 800121e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001220:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001224:	2208      	movs	r2, #8
 8001226:	4619      	mov	r1, r3
 8001228:	481a      	ldr	r0, [pc, #104]	; (8001294 <MX_TIM1_Init+0x1c8>)
 800122a:	f006 fd82 	bl	8007d32 <HAL_TIM_IC_ConfigChannel>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_TIM1_Init+0x16c>
  {
    Error_Handler();
 8001234:	f000 fb0e 	bl	8001854 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8001238:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800123c:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 800123e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001242:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001244:	2300      	movs	r3, #0
 8001246:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001248:	2300      	movs	r3, #0
 800124a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 800124c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001250:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001252:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001256:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001258:	2300      	movs	r3, #0
 800125a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_ENABLE;
 800125c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001260:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001262:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001266:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001268:	2300      	movs	r3, #0
 800126a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800126c:	2300      	movs	r3, #0
 800126e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001270:	463b      	mov	r3, r7
 8001272:	4619      	mov	r1, r3
 8001274:	4807      	ldr	r0, [pc, #28]	; (8001294 <MX_TIM1_Init+0x1c8>)
 8001276:	f007 fde5 	bl	8008e44 <HAL_TIMEx_ConfigBreakDeadTime>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_TIM1_Init+0x1b8>
  {
    Error_Handler();
 8001280:	f000 fae8 	bl	8001854 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001284:	4803      	ldr	r0, [pc, #12]	; (8001294 <MX_TIM1_Init+0x1c8>)
 8001286:	f000 ff6d 	bl	8002164 <HAL_TIM_MspPostInit>

}
 800128a:	bf00      	nop
 800128c:	3770      	adds	r7, #112	; 0x70
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	200005f8 	.word	0x200005f8
 8001298:	40012c00 	.word	0x40012c00

0800129c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b08e      	sub	sp, #56	; 0x38
 80012a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]
 80012aa:	605a      	str	r2, [r3, #4]
 80012ac:	609a      	str	r2, [r3, #8]
 80012ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012b0:	f107 031c 	add.w	r3, r7, #28
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012bc:	463b      	mov	r3, r7
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]
 80012c2:	605a      	str	r2, [r3, #4]
 80012c4:	609a      	str	r2, [r3, #8]
 80012c6:	60da      	str	r2, [r3, #12]
 80012c8:	611a      	str	r2, [r3, #16]
 80012ca:	615a      	str	r2, [r3, #20]
 80012cc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012ce:	4b33      	ldr	r3, [pc, #204]	; (800139c <MX_TIM2_Init+0x100>)
 80012d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012d4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80012d6:	4b31      	ldr	r3, [pc, #196]	; (800139c <MX_TIM2_Init+0x100>)
 80012d8:	2200      	movs	r2, #0
 80012da:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012dc:	4b2f      	ldr	r3, [pc, #188]	; (800139c <MX_TIM2_Init+0x100>)
 80012de:	2200      	movs	r2, #0
 80012e0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80012e2:	4b2e      	ldr	r3, [pc, #184]	; (800139c <MX_TIM2_Init+0x100>)
 80012e4:	f04f 32ff 	mov.w	r2, #4294967295
 80012e8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012ea:	4b2c      	ldr	r3, [pc, #176]	; (800139c <MX_TIM2_Init+0x100>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012f0:	4b2a      	ldr	r3, [pc, #168]	; (800139c <MX_TIM2_Init+0x100>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012f6:	4829      	ldr	r0, [pc, #164]	; (800139c <MX_TIM2_Init+0x100>)
 80012f8:	f006 f89c 	bl	8007434 <HAL_TIM_Base_Init>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001302:	f000 faa7 	bl	8001854 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001306:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800130a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800130c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001310:	4619      	mov	r1, r3
 8001312:	4822      	ldr	r0, [pc, #136]	; (800139c <MX_TIM2_Init+0x100>)
 8001314:	f006 febe 	bl	8008094 <HAL_TIM_ConfigClockSource>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800131e:	f000 fa99 	bl	8001854 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001322:	481e      	ldr	r0, [pc, #120]	; (800139c <MX_TIM2_Init+0x100>)
 8001324:	f006 f8dd 	bl	80074e2 <HAL_TIM_PWM_Init>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800132e:	f000 fa91 	bl	8001854 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001332:	2300      	movs	r3, #0
 8001334:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001336:	2300      	movs	r3, #0
 8001338:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800133a:	f107 031c 	add.w	r3, r7, #28
 800133e:	4619      	mov	r1, r3
 8001340:	4816      	ldr	r0, [pc, #88]	; (800139c <MX_TIM2_Init+0x100>)
 8001342:	f007 fcf7 	bl	8008d34 <HAL_TIMEx_MasterConfigSynchronization>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800134c:	f000 fa82 	bl	8001854 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001350:	2360      	movs	r3, #96	; 0x60
 8001352:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001354:	2300      	movs	r3, #0
 8001356:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001358:	2300      	movs	r3, #0
 800135a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800135c:	2300      	movs	r3, #0
 800135e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001360:	463b      	mov	r3, r7
 8001362:	2200      	movs	r2, #0
 8001364:	4619      	mov	r1, r3
 8001366:	480d      	ldr	r0, [pc, #52]	; (800139c <MX_TIM2_Init+0x100>)
 8001368:	f006 fd80 	bl	8007e6c <HAL_TIM_PWM_ConfigChannel>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001372:	f000 fa6f 	bl	8001854 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001376:	463b      	mov	r3, r7
 8001378:	2208      	movs	r2, #8
 800137a:	4619      	mov	r1, r3
 800137c:	4807      	ldr	r0, [pc, #28]	; (800139c <MX_TIM2_Init+0x100>)
 800137e:	f006 fd75 	bl	8007e6c <HAL_TIM_PWM_ConfigChannel>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8001388:	f000 fa64 	bl	8001854 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800138c:	4803      	ldr	r0, [pc, #12]	; (800139c <MX_TIM2_Init+0x100>)
 800138e:	f000 fee9 	bl	8002164 <HAL_TIM_MspPostInit>

}
 8001392:	bf00      	nop
 8001394:	3738      	adds	r7, #56	; 0x38
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	20000644 	.word	0x20000644

080013a0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b08c      	sub	sp, #48	; 0x30
 80013a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013a6:	f107 0320 	add.w	r3, r7, #32
 80013aa:	2200      	movs	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]
 80013ae:	605a      	str	r2, [r3, #4]
 80013b0:	609a      	str	r2, [r3, #8]
 80013b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013b4:	f107 0314 	add.w	r3, r7, #20
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	605a      	str	r2, [r3, #4]
 80013be:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80013c0:	1d3b      	adds	r3, r7, #4
 80013c2:	2200      	movs	r2, #0
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	605a      	str	r2, [r3, #4]
 80013c8:	609a      	str	r2, [r3, #8]
 80013ca:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013cc:	4b2b      	ldr	r3, [pc, #172]	; (800147c <MX_TIM3_Init+0xdc>)
 80013ce:	4a2c      	ldr	r2, [pc, #176]	; (8001480 <MX_TIM3_Init+0xe0>)
 80013d0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 32000;
 80013d2:	4b2a      	ldr	r3, [pc, #168]	; (800147c <MX_TIM3_Init+0xdc>)
 80013d4:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 80013d8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013da:	4b28      	ldr	r3, [pc, #160]	; (800147c <MX_TIM3_Init+0xdc>)
 80013dc:	2200      	movs	r2, #0
 80013de:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 32000;
 80013e0:	4b26      	ldr	r3, [pc, #152]	; (800147c <MX_TIM3_Init+0xdc>)
 80013e2:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 80013e6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013e8:	4b24      	ldr	r3, [pc, #144]	; (800147c <MX_TIM3_Init+0xdc>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ee:	4b23      	ldr	r3, [pc, #140]	; (800147c <MX_TIM3_Init+0xdc>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80013f4:	4821      	ldr	r0, [pc, #132]	; (800147c <MX_TIM3_Init+0xdc>)
 80013f6:	f006 f81d 	bl	8007434 <HAL_TIM_Base_Init>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001400:	f000 fa28 	bl	8001854 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001404:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001408:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800140a:	f107 0320 	add.w	r3, r7, #32
 800140e:	4619      	mov	r1, r3
 8001410:	481a      	ldr	r0, [pc, #104]	; (800147c <MX_TIM3_Init+0xdc>)
 8001412:	f006 fe3f 	bl	8008094 <HAL_TIM_ConfigClockSource>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 800141c:	f000 fa1a 	bl	8001854 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001420:	4816      	ldr	r0, [pc, #88]	; (800147c <MX_TIM3_Init+0xdc>)
 8001422:	f006 f9bb 	bl	800779c <HAL_TIM_IC_Init>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 800142c:	f000 fa12 	bl	8001854 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001430:	2300      	movs	r3, #0
 8001432:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001434:	2300      	movs	r3, #0
 8001436:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001438:	f107 0314 	add.w	r3, r7, #20
 800143c:	4619      	mov	r1, r3
 800143e:	480f      	ldr	r0, [pc, #60]	; (800147c <MX_TIM3_Init+0xdc>)
 8001440:	f007 fc78 	bl	8008d34 <HAL_TIMEx_MasterConfigSynchronization>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 800144a:	f000 fa03 	bl	8001854 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800144e:	2302      	movs	r3, #2
 8001450:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001452:	2301      	movs	r3, #1
 8001454:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001456:	2300      	movs	r3, #0
 8001458:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800145a:	2300      	movs	r3, #0
 800145c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800145e:	1d3b      	adds	r3, r7, #4
 8001460:	2204      	movs	r2, #4
 8001462:	4619      	mov	r1, r3
 8001464:	4805      	ldr	r0, [pc, #20]	; (800147c <MX_TIM3_Init+0xdc>)
 8001466:	f006 fc64 	bl	8007d32 <HAL_TIM_IC_ConfigChannel>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8001470:	f000 f9f0 	bl	8001854 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001474:	bf00      	nop
 8001476:	3730      	adds	r7, #48	; 0x30
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	20000690 	.word	0x20000690
 8001480:	40000400 	.word	0x40000400

08001484 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b08e      	sub	sp, #56	; 0x38
 8001488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800148a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	605a      	str	r2, [r3, #4]
 8001494:	609a      	str	r2, [r3, #8]
 8001496:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001498:	f107 031c 	add.w	r3, r7, #28
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	605a      	str	r2, [r3, #4]
 80014a2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014a4:	463b      	mov	r3, r7
 80014a6:	2200      	movs	r2, #0
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	605a      	str	r2, [r3, #4]
 80014ac:	609a      	str	r2, [r3, #8]
 80014ae:	60da      	str	r2, [r3, #12]
 80014b0:	611a      	str	r2, [r3, #16]
 80014b2:	615a      	str	r2, [r3, #20]
 80014b4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80014b6:	4b38      	ldr	r3, [pc, #224]	; (8001598 <MX_TIM4_Init+0x114>)
 80014b8:	4a38      	ldr	r2, [pc, #224]	; (800159c <MX_TIM4_Init+0x118>)
 80014ba:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 6399;
 80014bc:	4b36      	ldr	r3, [pc, #216]	; (8001598 <MX_TIM4_Init+0x114>)
 80014be:	f641 02ff 	movw	r2, #6399	; 0x18ff
 80014c2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014c4:	4b34      	ldr	r3, [pc, #208]	; (8001598 <MX_TIM4_Init+0x114>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 80014ca:	4b33      	ldr	r3, [pc, #204]	; (8001598 <MX_TIM4_Init+0x114>)
 80014cc:	2263      	movs	r2, #99	; 0x63
 80014ce:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014d0:	4b31      	ldr	r3, [pc, #196]	; (8001598 <MX_TIM4_Init+0x114>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014d6:	4b30      	ldr	r3, [pc, #192]	; (8001598 <MX_TIM4_Init+0x114>)
 80014d8:	2200      	movs	r2, #0
 80014da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80014dc:	482e      	ldr	r0, [pc, #184]	; (8001598 <MX_TIM4_Init+0x114>)
 80014de:	f005 ffa9 	bl	8007434 <HAL_TIM_Base_Init>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80014e8:	f000 f9b4 	bl	8001854 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014f0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80014f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014f6:	4619      	mov	r1, r3
 80014f8:	4827      	ldr	r0, [pc, #156]	; (8001598 <MX_TIM4_Init+0x114>)
 80014fa:	f006 fdcb 	bl	8008094 <HAL_TIM_ConfigClockSource>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001504:	f000 f9a6 	bl	8001854 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001508:	4823      	ldr	r0, [pc, #140]	; (8001598 <MX_TIM4_Init+0x114>)
 800150a:	f005 ffea 	bl	80074e2 <HAL_TIM_PWM_Init>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001514:	f000 f99e 	bl	8001854 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001518:	2300      	movs	r3, #0
 800151a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800151c:	2300      	movs	r3, #0
 800151e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001520:	f107 031c 	add.w	r3, r7, #28
 8001524:	4619      	mov	r1, r3
 8001526:	481c      	ldr	r0, [pc, #112]	; (8001598 <MX_TIM4_Init+0x114>)
 8001528:	f007 fc04 	bl	8008d34 <HAL_TIMEx_MasterConfigSynchronization>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001532:	f000 f98f 	bl	8001854 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001536:	2360      	movs	r3, #96	; 0x60
 8001538:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800153a:	2300      	movs	r3, #0
 800153c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800153e:	2300      	movs	r3, #0
 8001540:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001542:	2300      	movs	r3, #0
 8001544:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001546:	463b      	mov	r3, r7
 8001548:	2204      	movs	r2, #4
 800154a:	4619      	mov	r1, r3
 800154c:	4812      	ldr	r0, [pc, #72]	; (8001598 <MX_TIM4_Init+0x114>)
 800154e:	f006 fc8d 	bl	8007e6c <HAL_TIM_PWM_ConfigChannel>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001558:	f000 f97c 	bl	8001854 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800155c:	463b      	mov	r3, r7
 800155e:	2208      	movs	r2, #8
 8001560:	4619      	mov	r1, r3
 8001562:	480d      	ldr	r0, [pc, #52]	; (8001598 <MX_TIM4_Init+0x114>)
 8001564:	f006 fc82 	bl	8007e6c <HAL_TIM_PWM_ConfigChannel>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 800156e:	f000 f971 	bl	8001854 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001572:	463b      	mov	r3, r7
 8001574:	220c      	movs	r2, #12
 8001576:	4619      	mov	r1, r3
 8001578:	4807      	ldr	r0, [pc, #28]	; (8001598 <MX_TIM4_Init+0x114>)
 800157a:	f006 fc77 	bl	8007e6c <HAL_TIM_PWM_ConfigChannel>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 8001584:	f000 f966 	bl	8001854 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001588:	4803      	ldr	r0, [pc, #12]	; (8001598 <MX_TIM4_Init+0x114>)
 800158a:	f000 fdeb 	bl	8002164 <HAL_TIM_MspPostInit>

}
 800158e:	bf00      	nop
 8001590:	3738      	adds	r7, #56	; 0x38
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	200006dc 	.word	0x200006dc
 800159c:	40000800 	.word	0x40000800

080015a0 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b096      	sub	sp, #88	; 0x58
 80015a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015a6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]
 80015ae:	605a      	str	r2, [r3, #4]
 80015b0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015b6:	2200      	movs	r2, #0
 80015b8:	601a      	str	r2, [r3, #0]
 80015ba:	605a      	str	r2, [r3, #4]
 80015bc:	609a      	str	r2, [r3, #8]
 80015be:	60da      	str	r2, [r3, #12]
 80015c0:	611a      	str	r2, [r3, #16]
 80015c2:	615a      	str	r2, [r3, #20]
 80015c4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80015c6:	1d3b      	adds	r3, r7, #4
 80015c8:	222c      	movs	r2, #44	; 0x2c
 80015ca:	2100      	movs	r1, #0
 80015cc:	4618      	mov	r0, r3
 80015ce:	f008 fbc3 	bl	8009d58 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80015d2:	4b33      	ldr	r3, [pc, #204]	; (80016a0 <MX_TIM15_Init+0x100>)
 80015d4:	4a33      	ldr	r2, [pc, #204]	; (80016a4 <MX_TIM15_Init+0x104>)
 80015d6:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 80015d8:	4b31      	ldr	r3, [pc, #196]	; (80016a0 <MX_TIM15_Init+0x100>)
 80015da:	2200      	movs	r2, #0
 80015dc:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015de:	4b30      	ldr	r3, [pc, #192]	; (80016a0 <MX_TIM15_Init+0x100>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 80015e4:	4b2e      	ldr	r3, [pc, #184]	; (80016a0 <MX_TIM15_Init+0x100>)
 80015e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015ea:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015ec:	4b2c      	ldr	r3, [pc, #176]	; (80016a0 <MX_TIM15_Init+0x100>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80015f2:	4b2b      	ldr	r3, [pc, #172]	; (80016a0 <MX_TIM15_Init+0x100>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015f8:	4b29      	ldr	r3, [pc, #164]	; (80016a0 <MX_TIM15_Init+0x100>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80015fe:	4828      	ldr	r0, [pc, #160]	; (80016a0 <MX_TIM15_Init+0x100>)
 8001600:	f005 ff6f 	bl	80074e2 <HAL_TIM_PWM_Init>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 800160a:	f000 f923 	bl	8001854 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800160e:	2300      	movs	r3, #0
 8001610:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001612:	2300      	movs	r3, #0
 8001614:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001616:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800161a:	4619      	mov	r1, r3
 800161c:	4820      	ldr	r0, [pc, #128]	; (80016a0 <MX_TIM15_Init+0x100>)
 800161e:	f007 fb89 	bl	8008d34 <HAL_TIMEx_MasterConfigSynchronization>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8001628:	f000 f914 	bl	8001854 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800162c:	2360      	movs	r3, #96	; 0x60
 800162e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001630:	2300      	movs	r3, #0
 8001632:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001634:	2300      	movs	r3, #0
 8001636:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001638:	2300      	movs	r3, #0
 800163a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800163c:	2300      	movs	r3, #0
 800163e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001640:	2300      	movs	r3, #0
 8001642:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001644:	2300      	movs	r3, #0
 8001646:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001648:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800164c:	2200      	movs	r2, #0
 800164e:	4619      	mov	r1, r3
 8001650:	4813      	ldr	r0, [pc, #76]	; (80016a0 <MX_TIM15_Init+0x100>)
 8001652:	f006 fc0b 	bl	8007e6c <HAL_TIM_PWM_ConfigChannel>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 800165c:	f000 f8fa 	bl	8001854 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001660:	2300      	movs	r3, #0
 8001662:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001664:	2300      	movs	r3, #0
 8001666:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001668:	2300      	movs	r3, #0
 800166a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800166c:	2300      	movs	r3, #0
 800166e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001670:	2300      	movs	r3, #0
 8001672:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001674:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001678:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800167a:	2300      	movs	r3, #0
 800167c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800167e:	1d3b      	adds	r3, r7, #4
 8001680:	4619      	mov	r1, r3
 8001682:	4807      	ldr	r0, [pc, #28]	; (80016a0 <MX_TIM15_Init+0x100>)
 8001684:	f007 fbde 	bl	8008e44 <HAL_TIMEx_ConfigBreakDeadTime>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <MX_TIM15_Init+0xf2>
  {
    Error_Handler();
 800168e:	f000 f8e1 	bl	8001854 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001692:	4803      	ldr	r0, [pc, #12]	; (80016a0 <MX_TIM15_Init+0x100>)
 8001694:	f000 fd66 	bl	8002164 <HAL_TIM_MspPostInit>

}
 8001698:	bf00      	nop
 800169a:	3758      	adds	r7, #88	; 0x58
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	20000728 	.word	0x20000728
 80016a4:	40014000 	.word	0x40014000

080016a8 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80016ac:	bf00      	nop
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
	...

080016b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b08e      	sub	sp, #56	; 0x38
 80016bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016c2:	2200      	movs	r2, #0
 80016c4:	601a      	str	r2, [r3, #0]
 80016c6:	605a      	str	r2, [r3, #4]
 80016c8:	609a      	str	r2, [r3, #8]
 80016ca:	60da      	str	r2, [r3, #12]
 80016cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016ce:	4b5d      	ldr	r3, [pc, #372]	; (8001844 <MX_GPIO_Init+0x18c>)
 80016d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d2:	4a5c      	ldr	r2, [pc, #368]	; (8001844 <MX_GPIO_Init+0x18c>)
 80016d4:	f043 0310 	orr.w	r3, r3, #16
 80016d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016da:	4b5a      	ldr	r3, [pc, #360]	; (8001844 <MX_GPIO_Init+0x18c>)
 80016dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016de:	f003 0310 	and.w	r3, r3, #16
 80016e2:	623b      	str	r3, [r7, #32]
 80016e4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016e6:	4b57      	ldr	r3, [pc, #348]	; (8001844 <MX_GPIO_Init+0x18c>)
 80016e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ea:	4a56      	ldr	r2, [pc, #344]	; (8001844 <MX_GPIO_Init+0x18c>)
 80016ec:	f043 0304 	orr.w	r3, r3, #4
 80016f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016f2:	4b54      	ldr	r3, [pc, #336]	; (8001844 <MX_GPIO_Init+0x18c>)
 80016f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f6:	f003 0304 	and.w	r3, r3, #4
 80016fa:	61fb      	str	r3, [r7, #28]
 80016fc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016fe:	4b51      	ldr	r3, [pc, #324]	; (8001844 <MX_GPIO_Init+0x18c>)
 8001700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001702:	4a50      	ldr	r2, [pc, #320]	; (8001844 <MX_GPIO_Init+0x18c>)
 8001704:	f043 0320 	orr.w	r3, r3, #32
 8001708:	64d3      	str	r3, [r2, #76]	; 0x4c
 800170a:	4b4e      	ldr	r3, [pc, #312]	; (8001844 <MX_GPIO_Init+0x18c>)
 800170c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800170e:	f003 0320 	and.w	r3, r3, #32
 8001712:	61bb      	str	r3, [r7, #24]
 8001714:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001716:	4b4b      	ldr	r3, [pc, #300]	; (8001844 <MX_GPIO_Init+0x18c>)
 8001718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800171a:	4a4a      	ldr	r2, [pc, #296]	; (8001844 <MX_GPIO_Init+0x18c>)
 800171c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001720:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001722:	4b48      	ldr	r3, [pc, #288]	; (8001844 <MX_GPIO_Init+0x18c>)
 8001724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800172a:	617b      	str	r3, [r7, #20]
 800172c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800172e:	4b45      	ldr	r3, [pc, #276]	; (8001844 <MX_GPIO_Init+0x18c>)
 8001730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001732:	4a44      	ldr	r2, [pc, #272]	; (8001844 <MX_GPIO_Init+0x18c>)
 8001734:	f043 0301 	orr.w	r3, r3, #1
 8001738:	64d3      	str	r3, [r2, #76]	; 0x4c
 800173a:	4b42      	ldr	r3, [pc, #264]	; (8001844 <MX_GPIO_Init+0x18c>)
 800173c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800173e:	f003 0301 	and.w	r3, r3, #1
 8001742:	613b      	str	r3, [r7, #16]
 8001744:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001746:	4b3f      	ldr	r3, [pc, #252]	; (8001844 <MX_GPIO_Init+0x18c>)
 8001748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800174a:	4a3e      	ldr	r2, [pc, #248]	; (8001844 <MX_GPIO_Init+0x18c>)
 800174c:	f043 0302 	orr.w	r3, r3, #2
 8001750:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001752:	4b3c      	ldr	r3, [pc, #240]	; (8001844 <MX_GPIO_Init+0x18c>)
 8001754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001756:	f003 0302 	and.w	r3, r3, #2
 800175a:	60fb      	str	r3, [r7, #12]
 800175c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800175e:	4b39      	ldr	r3, [pc, #228]	; (8001844 <MX_GPIO_Init+0x18c>)
 8001760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001762:	4a38      	ldr	r2, [pc, #224]	; (8001844 <MX_GPIO_Init+0x18c>)
 8001764:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001768:	64d3      	str	r3, [r2, #76]	; 0x4c
 800176a:	4b36      	ldr	r3, [pc, #216]	; (8001844 <MX_GPIO_Init+0x18c>)
 800176c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800176e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001772:	60bb      	str	r3, [r7, #8]
 8001774:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001776:	4b33      	ldr	r3, [pc, #204]	; (8001844 <MX_GPIO_Init+0x18c>)
 8001778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800177a:	4a32      	ldr	r2, [pc, #200]	; (8001844 <MX_GPIO_Init+0x18c>)
 800177c:	f043 0308 	orr.w	r3, r3, #8
 8001780:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001782:	4b30      	ldr	r3, [pc, #192]	; (8001844 <MX_GPIO_Init+0x18c>)
 8001784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001786:	f003 0308 	and.w	r3, r3, #8
 800178a:	607b      	str	r3, [r7, #4]
 800178c:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 800178e:	f002 fce1 	bl	8004154 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8001792:	2200      	movs	r2, #0
 8001794:	217e      	movs	r1, #126	; 0x7e
 8001796:	482c      	ldr	r0, [pc, #176]	; (8001848 <MX_GPIO_Init+0x190>)
 8001798:	f002 fbf0 	bl	8003f7c <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pins : PG1 PG2 PG3 PG4
                           PG5 PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 800179c:	237e      	movs	r3, #126	; 0x7e
 800179e:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a0:	2301      	movs	r3, #1
 80017a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a4:	2300      	movs	r3, #0
 80017a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a8:	2300      	movs	r3, #0
 80017aa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017b0:	4619      	mov	r1, r3
 80017b2:	4825      	ldr	r0, [pc, #148]	; (8001848 <MX_GPIO_Init+0x190>)
 80017b4:	f002 fa50 	bl	8003c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80017b8:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80017bc:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017be:	2302      	movs	r3, #2
 80017c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c2:	2300      	movs	r3, #0
 80017c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017c6:	2303      	movs	r3, #3
 80017c8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80017ca:	230c      	movs	r3, #12
 80017cc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017d2:	4619      	mov	r1, r3
 80017d4:	481d      	ldr	r0, [pc, #116]	; (800184c <MX_GPIO_Init+0x194>)
 80017d6:	f002 fa3f 	bl	8003c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80017da:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80017de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e0:	2302      	movs	r3, #2
 80017e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e4:	2300      	movs	r3, #0
 80017e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e8:	2303      	movs	r3, #3
 80017ea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80017ec:	230a      	movs	r3, #10
 80017ee:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017f4:	4619      	mov	r1, r3
 80017f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017fa:	f002 fa2d 	bl	8003c58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80017fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001802:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001804:	2300      	movs	r3, #0
 8001806:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001808:	2300      	movs	r3, #0
 800180a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800180c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001810:	4619      	mov	r1, r3
 8001812:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001816:	f002 fa1f 	bl	8003c58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800181a:	2304      	movs	r3, #4
 800181c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181e:	2302      	movs	r3, #2
 8001820:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001822:	2300      	movs	r3, #0
 8001824:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001826:	2303      	movs	r3, #3
 8001828:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800182a:	230c      	movs	r3, #12
 800182c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800182e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001832:	4619      	mov	r1, r3
 8001834:	4806      	ldr	r0, [pc, #24]	; (8001850 <MX_GPIO_Init+0x198>)
 8001836:	f002 fa0f 	bl	8003c58 <HAL_GPIO_Init>

}
 800183a:	bf00      	nop
 800183c:	3738      	adds	r7, #56	; 0x38
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	40021000 	.word	0x40021000
 8001848:	48001800 	.word	0x48001800
 800184c:	48000800 	.word	0x48000800
 8001850:	48000c00 	.word	0x48000c00

08001854 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001858:	b672      	cpsid	i
}
 800185a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800185c:	e7fe      	b.n	800185c <Error_Handler+0x8>
	...

08001860 <rotor_control>:
 */

#include "rotor_control.h"


void rotor_control (uint8_t mode) {
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	4603      	mov	r3, r0
 8001868:	71fb      	strb	r3, [r7, #7]
	// mode 0 turn, mode 1 stop
	static uint8_t motor_pwm_val = 0; // 0 - 99 throttle control
	static uint8_t motor_h_bridge_in1 = 1;
	static uint8_t motor_h_bridge_in2 = 0;

	switch(mode) {
 800186a:	79fb      	ldrb	r3, [r7, #7]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d109      	bne.n	8001884 <rotor_control+0x24>
		case 0 :
			motor_pwm_val = 80;
 8001870:	4b15      	ldr	r3, [pc, #84]	; (80018c8 <rotor_control+0x68>)
 8001872:	2250      	movs	r2, #80	; 0x50
 8001874:	701a      	strb	r2, [r3, #0]
			motor_h_bridge_in1 = 1;
 8001876:	4b15      	ldr	r3, [pc, #84]	; (80018cc <rotor_control+0x6c>)
 8001878:	2201      	movs	r2, #1
 800187a:	701a      	strb	r2, [r3, #0]
			motor_h_bridge_in2 = 0;
 800187c:	4b14      	ldr	r3, [pc, #80]	; (80018d0 <rotor_control+0x70>)
 800187e:	2200      	movs	r2, #0
 8001880:	701a      	strb	r2, [r3, #0]
			break;
 8001882:	e009      	b.n	8001898 <rotor_control+0x38>
		default:
			motor_pwm_val = 0;
 8001884:	4b10      	ldr	r3, [pc, #64]	; (80018c8 <rotor_control+0x68>)
 8001886:	2200      	movs	r2, #0
 8001888:	701a      	strb	r2, [r3, #0]
			motor_h_bridge_in1 = 1;
 800188a:	4b10      	ldr	r3, [pc, #64]	; (80018cc <rotor_control+0x6c>)
 800188c:	2201      	movs	r2, #1
 800188e:	701a      	strb	r2, [r3, #0]
			motor_h_bridge_in2 = 0;
 8001890:	4b0f      	ldr	r3, [pc, #60]	; (80018d0 <rotor_control+0x70>)
 8001892:	2200      	movs	r2, #0
 8001894:	701a      	strb	r2, [r3, #0]
			break;
 8001896:	bf00      	nop
	}

	htim4.Instance->CCR2 = motor_pwm_val; // PD13
 8001898:	4b0b      	ldr	r3, [pc, #44]	; (80018c8 <rotor_control+0x68>)
 800189a:	781a      	ldrb	r2, [r3, #0]
 800189c:	4b0d      	ldr	r3, [pc, #52]	; (80018d4 <rotor_control+0x74>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2,  motor_h_bridge_in1);
 80018a2:	4b0a      	ldr	r3, [pc, #40]	; (80018cc <rotor_control+0x6c>)
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	461a      	mov	r2, r3
 80018a8:	2104      	movs	r1, #4
 80018aa:	480b      	ldr	r0, [pc, #44]	; (80018d8 <rotor_control+0x78>)
 80018ac:	f002 fb66 	bl	8003f7c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1,  motor_h_bridge_in2);
 80018b0:	4b07      	ldr	r3, [pc, #28]	; (80018d0 <rotor_control+0x70>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	461a      	mov	r2, r3
 80018b6:	2102      	movs	r1, #2
 80018b8:	4807      	ldr	r0, [pc, #28]	; (80018d8 <rotor_control+0x78>)
 80018ba:	f002 fb5f 	bl	8003f7c <HAL_GPIO_WritePin>
}
 80018be:	bf00      	nop
 80018c0:	3708      	adds	r7, #8
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	20000774 	.word	0x20000774
 80018cc:	20000000 	.word	0x20000000
 80018d0:	20000775 	.word	0x20000775
 80018d4:	200006dc 	.word	0x200006dc
 80018d8:	48001800 	.word	0x48001800

080018dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018e2:	4b0f      	ldr	r3, [pc, #60]	; (8001920 <HAL_MspInit+0x44>)
 80018e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018e6:	4a0e      	ldr	r2, [pc, #56]	; (8001920 <HAL_MspInit+0x44>)
 80018e8:	f043 0301 	orr.w	r3, r3, #1
 80018ec:	6613      	str	r3, [r2, #96]	; 0x60
 80018ee:	4b0c      	ldr	r3, [pc, #48]	; (8001920 <HAL_MspInit+0x44>)
 80018f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	607b      	str	r3, [r7, #4]
 80018f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018fa:	4b09      	ldr	r3, [pc, #36]	; (8001920 <HAL_MspInit+0x44>)
 80018fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018fe:	4a08      	ldr	r2, [pc, #32]	; (8001920 <HAL_MspInit+0x44>)
 8001900:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001904:	6593      	str	r3, [r2, #88]	; 0x58
 8001906:	4b06      	ldr	r3, [pc, #24]	; (8001920 <HAL_MspInit+0x44>)
 8001908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800190a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800190e:	603b      	str	r3, [r7, #0]
 8001910:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001912:	bf00      	nop
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	40021000 	.word	0x40021000

08001924 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b08c      	sub	sp, #48	; 0x30
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800192c:	f107 031c 	add.w	r3, r7, #28
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	605a      	str	r2, [r3, #4]
 8001936:	609a      	str	r2, [r3, #8]
 8001938:	60da      	str	r2, [r3, #12]
 800193a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a2d      	ldr	r2, [pc, #180]	; (80019f8 <HAL_ADC_MspInit+0xd4>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d154      	bne.n	80019f0 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001946:	4b2d      	ldr	r3, [pc, #180]	; (80019fc <HAL_ADC_MspInit+0xd8>)
 8001948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800194a:	4a2c      	ldr	r2, [pc, #176]	; (80019fc <HAL_ADC_MspInit+0xd8>)
 800194c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001950:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001952:	4b2a      	ldr	r3, [pc, #168]	; (80019fc <HAL_ADC_MspInit+0xd8>)
 8001954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001956:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800195a:	61bb      	str	r3, [r7, #24]
 800195c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800195e:	4b27      	ldr	r3, [pc, #156]	; (80019fc <HAL_ADC_MspInit+0xd8>)
 8001960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001962:	4a26      	ldr	r2, [pc, #152]	; (80019fc <HAL_ADC_MspInit+0xd8>)
 8001964:	f043 0304 	orr.w	r3, r3, #4
 8001968:	64d3      	str	r3, [r2, #76]	; 0x4c
 800196a:	4b24      	ldr	r3, [pc, #144]	; (80019fc <HAL_ADC_MspInit+0xd8>)
 800196c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800196e:	f003 0304 	and.w	r3, r3, #4
 8001972:	617b      	str	r3, [r7, #20]
 8001974:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001976:	4b21      	ldr	r3, [pc, #132]	; (80019fc <HAL_ADC_MspInit+0xd8>)
 8001978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800197a:	4a20      	ldr	r2, [pc, #128]	; (80019fc <HAL_ADC_MspInit+0xd8>)
 800197c:	f043 0301 	orr.w	r3, r3, #1
 8001980:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001982:	4b1e      	ldr	r3, [pc, #120]	; (80019fc <HAL_ADC_MspInit+0xd8>)
 8001984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001986:	f003 0301 	and.w	r3, r3, #1
 800198a:	613b      	str	r3, [r7, #16]
 800198c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800198e:	4b1b      	ldr	r3, [pc, #108]	; (80019fc <HAL_ADC_MspInit+0xd8>)
 8001990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001992:	4a1a      	ldr	r2, [pc, #104]	; (80019fc <HAL_ADC_MspInit+0xd8>)
 8001994:	f043 0302 	orr.w	r3, r3, #2
 8001998:	64d3      	str	r3, [r2, #76]	; 0x4c
 800199a:	4b18      	ldr	r3, [pc, #96]	; (80019fc <HAL_ADC_MspInit+0xd8>)
 800199c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN8
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80019a6:	233f      	movs	r3, #63	; 0x3f
 80019a8:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80019aa:	230b      	movs	r3, #11
 80019ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ae:	2300      	movs	r3, #0
 80019b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019b2:	f107 031c 	add.w	r3, r7, #28
 80019b6:	4619      	mov	r1, r3
 80019b8:	4811      	ldr	r0, [pc, #68]	; (8001a00 <HAL_ADC_MspInit+0xdc>)
 80019ba:	f002 f94d 	bl	8003c58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 80019be:	230a      	movs	r3, #10
 80019c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80019c2:	230b      	movs	r3, #11
 80019c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c6:	2300      	movs	r3, #0
 80019c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ca:	f107 031c 	add.w	r3, r7, #28
 80019ce:	4619      	mov	r1, r3
 80019d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019d4:	f002 f940 	bl	8003c58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80019d8:	2302      	movs	r3, #2
 80019da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80019dc:	230b      	movs	r3, #11
 80019de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e0:	2300      	movs	r3, #0
 80019e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019e4:	f107 031c 	add.w	r3, r7, #28
 80019e8:	4619      	mov	r1, r3
 80019ea:	4806      	ldr	r0, [pc, #24]	; (8001a04 <HAL_ADC_MspInit+0xe0>)
 80019ec:	f002 f934 	bl	8003c58 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80019f0:	bf00      	nop
 80019f2:	3730      	adds	r7, #48	; 0x30
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	50040000 	.word	0x50040000
 80019fc:	40021000 	.word	0x40021000
 8001a00:	48000800 	.word	0x48000800
 8001a04:	48000400 	.word	0x48000400

08001a08 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b08a      	sub	sp, #40	; 0x28
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a10:	f107 0314 	add.w	r3, r7, #20
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	605a      	str	r2, [r3, #4]
 8001a1a:	609a      	str	r2, [r3, #8]
 8001a1c:	60da      	str	r2, [r3, #12]
 8001a1e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a17      	ldr	r2, [pc, #92]	; (8001a84 <HAL_CAN_MspInit+0x7c>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d127      	bne.n	8001a7a <HAL_CAN_MspInit+0x72>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001a2a:	4b17      	ldr	r3, [pc, #92]	; (8001a88 <HAL_CAN_MspInit+0x80>)
 8001a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a2e:	4a16      	ldr	r2, [pc, #88]	; (8001a88 <HAL_CAN_MspInit+0x80>)
 8001a30:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a34:	6593      	str	r3, [r2, #88]	; 0x58
 8001a36:	4b14      	ldr	r3, [pc, #80]	; (8001a88 <HAL_CAN_MspInit+0x80>)
 8001a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a3e:	613b      	str	r3, [r7, #16]
 8001a40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a42:	4b11      	ldr	r3, [pc, #68]	; (8001a88 <HAL_CAN_MspInit+0x80>)
 8001a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a46:	4a10      	ldr	r2, [pc, #64]	; (8001a88 <HAL_CAN_MspInit+0x80>)
 8001a48:	f043 0308 	orr.w	r3, r3, #8
 8001a4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a4e:	4b0e      	ldr	r3, [pc, #56]	; (8001a88 <HAL_CAN_MspInit+0x80>)
 8001a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a52:	f003 0308 	and.w	r3, r3, #8
 8001a56:	60fb      	str	r3, [r7, #12]
 8001a58:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a5e:	2302      	movs	r3, #2
 8001a60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a62:	2300      	movs	r3, #0
 8001a64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a66:	2303      	movs	r3, #3
 8001a68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001a6a:	2309      	movs	r3, #9
 8001a6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a6e:	f107 0314 	add.w	r3, r7, #20
 8001a72:	4619      	mov	r1, r3
 8001a74:	4805      	ldr	r0, [pc, #20]	; (8001a8c <HAL_CAN_MspInit+0x84>)
 8001a76:	f002 f8ef 	bl	8003c58 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001a7a:	bf00      	nop
 8001a7c:	3728      	adds	r7, #40	; 0x28
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	40006400 	.word	0x40006400
 8001a88:	40021000 	.word	0x40021000
 8001a8c:	48000c00 	.word	0x48000c00

08001a90 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b08a      	sub	sp, #40	; 0x28
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a98:	f107 0314 	add.w	r3, r7, #20
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	605a      	str	r2, [r3, #4]
 8001aa2:	609a      	str	r2, [r3, #8]
 8001aa4:	60da      	str	r2, [r3, #12]
 8001aa6:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP1)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a1e      	ldr	r2, [pc, #120]	; (8001b28 <HAL_COMP_MspInit+0x98>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d118      	bne.n	8001ae4 <HAL_COMP_MspInit+0x54>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ab2:	4b1e      	ldr	r3, [pc, #120]	; (8001b2c <HAL_COMP_MspInit+0x9c>)
 8001ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ab6:	4a1d      	ldr	r2, [pc, #116]	; (8001b2c <HAL_COMP_MspInit+0x9c>)
 8001ab8:	f043 0302 	orr.w	r3, r3, #2
 8001abc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001abe:	4b1b      	ldr	r3, [pc, #108]	; (8001b2c <HAL_COMP_MspInit+0x9c>)
 8001ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ac2:	f003 0302 	and.w	r3, r3, #2
 8001ac6:	613b      	str	r3, [r7, #16]
 8001ac8:	693b      	ldr	r3, [r7, #16]
    /**COMP1 GPIO Configuration
    PB2     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001aca:	2304      	movs	r3, #4
 8001acc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ad6:	f107 0314 	add.w	r3, r7, #20
 8001ada:	4619      	mov	r1, r3
 8001adc:	4814      	ldr	r0, [pc, #80]	; (8001b30 <HAL_COMP_MspInit+0xa0>)
 8001ade:	f002 f8bb 	bl	8003c58 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }

}
 8001ae2:	e01c      	b.n	8001b1e <HAL_COMP_MspInit+0x8e>
  else if(hcomp->Instance==COMP2)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a12      	ldr	r2, [pc, #72]	; (8001b34 <HAL_COMP_MspInit+0xa4>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d117      	bne.n	8001b1e <HAL_COMP_MspInit+0x8e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aee:	4b0f      	ldr	r3, [pc, #60]	; (8001b2c <HAL_COMP_MspInit+0x9c>)
 8001af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001af2:	4a0e      	ldr	r2, [pc, #56]	; (8001b2c <HAL_COMP_MspInit+0x9c>)
 8001af4:	f043 0302 	orr.w	r3, r3, #2
 8001af8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001afa:	4b0c      	ldr	r3, [pc, #48]	; (8001b2c <HAL_COMP_MspInit+0x9c>)
 8001afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001afe:	f003 0302 	and.w	r3, r3, #2
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b06:	23c0      	movs	r3, #192	; 0xc0
 8001b08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b12:	f107 0314 	add.w	r3, r7, #20
 8001b16:	4619      	mov	r1, r3
 8001b18:	4805      	ldr	r0, [pc, #20]	; (8001b30 <HAL_COMP_MspInit+0xa0>)
 8001b1a:	f002 f89d 	bl	8003c58 <HAL_GPIO_Init>
}
 8001b1e:	bf00      	nop
 8001b20:	3728      	adds	r7, #40	; 0x28
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	40010200 	.word	0x40010200
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	48000400 	.word	0x48000400
 8001b34:	40010204 	.word	0x40010204

08001b38 <HAL_SMBUS_MspInit>:
* This function configures the hardware resources used in this example
* @param hsmbus: SMBUS handle pointer
* @retval None
*/
void HAL_SMBUS_MspInit(SMBUS_HandleTypeDef* hsmbus)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b0b0      	sub	sp, #192	; 0xc0
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b40:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	605a      	str	r2, [r3, #4]
 8001b4a:	609a      	str	r2, [r3, #8]
 8001b4c:	60da      	str	r2, [r3, #12]
 8001b4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b50:	f107 0318 	add.w	r3, r7, #24
 8001b54:	2294      	movs	r2, #148	; 0x94
 8001b56:	2100      	movs	r1, #0
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f008 f8fd 	bl	8009d58 <memset>
  if(hsmbus->Instance==I2C1)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a42      	ldr	r2, [pc, #264]	; (8001c6c <HAL_SMBUS_MspInit+0x134>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d13c      	bne.n	8001be2 <HAL_SMBUS_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001b68:	2340      	movs	r3, #64	; 0x40
 8001b6a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b70:	f107 0318 	add.w	r3, r7, #24
 8001b74:	4618      	mov	r0, r3
 8001b76:	f003 f9d5 	bl	8004f24 <HAL_RCCEx_PeriphCLKConfig>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <HAL_SMBUS_MspInit+0x4c>
    {
      Error_Handler();
 8001b80:	f7ff fe68 	bl	8001854 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b84:	4b3a      	ldr	r3, [pc, #232]	; (8001c70 <HAL_SMBUS_MspInit+0x138>)
 8001b86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b88:	4a39      	ldr	r2, [pc, #228]	; (8001c70 <HAL_SMBUS_MspInit+0x138>)
 8001b8a:	f043 0302 	orr.w	r3, r3, #2
 8001b8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b90:	4b37      	ldr	r3, [pc, #220]	; (8001c70 <HAL_SMBUS_MspInit+0x138>)
 8001b92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b94:	f003 0302 	and.w	r3, r3, #2
 8001b98:	617b      	str	r3, [r7, #20]
 8001b9a:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b9c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ba0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ba4:	2312      	movs	r3, #18
 8001ba6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001baa:	2301      	movs	r3, #1
 8001bac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001bb6:	2304      	movs	r3, #4
 8001bb8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bbc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	482c      	ldr	r0, [pc, #176]	; (8001c74 <HAL_SMBUS_MspInit+0x13c>)
 8001bc4:	f002 f848 	bl	8003c58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bc8:	4b29      	ldr	r3, [pc, #164]	; (8001c70 <HAL_SMBUS_MspInit+0x138>)
 8001bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bcc:	4a28      	ldr	r2, [pc, #160]	; (8001c70 <HAL_SMBUS_MspInit+0x138>)
 8001bce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bd2:	6593      	str	r3, [r2, #88]	; 0x58
 8001bd4:	4b26      	ldr	r3, [pc, #152]	; (8001c70 <HAL_SMBUS_MspInit+0x138>)
 8001bd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bdc:	613b      	str	r3, [r7, #16]
 8001bde:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001be0:	e03f      	b.n	8001c62 <HAL_SMBUS_MspInit+0x12a>
  else if(hsmbus->Instance==I2C2)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a24      	ldr	r2, [pc, #144]	; (8001c78 <HAL_SMBUS_MspInit+0x140>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d13a      	bne.n	8001c62 <HAL_SMBUS_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001bec:	2380      	movs	r3, #128	; 0x80
 8001bee:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bf4:	f107 0318 	add.w	r3, r7, #24
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f003 f993 	bl	8004f24 <HAL_RCCEx_PeriphCLKConfig>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <HAL_SMBUS_MspInit+0xd0>
      Error_Handler();
 8001c04:	f7ff fe26 	bl	8001854 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c08:	4b19      	ldr	r3, [pc, #100]	; (8001c70 <HAL_SMBUS_MspInit+0x138>)
 8001c0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c0c:	4a18      	ldr	r2, [pc, #96]	; (8001c70 <HAL_SMBUS_MspInit+0x138>)
 8001c0e:	f043 0320 	orr.w	r3, r3, #32
 8001c12:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c14:	4b16      	ldr	r3, [pc, #88]	; (8001c70 <HAL_SMBUS_MspInit+0x138>)
 8001c16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c18:	f003 0320 	and.w	r3, r3, #32
 8001c1c:	60fb      	str	r3, [r7, #12]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001c20:	2307      	movs	r3, #7
 8001c22:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c26:	2312      	movs	r3, #18
 8001c28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c32:	2303      	movs	r3, #3
 8001c34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001c38:	2304      	movs	r3, #4
 8001c3a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c3e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001c42:	4619      	mov	r1, r3
 8001c44:	480d      	ldr	r0, [pc, #52]	; (8001c7c <HAL_SMBUS_MspInit+0x144>)
 8001c46:	f002 f807 	bl	8003c58 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001c4a:	4b09      	ldr	r3, [pc, #36]	; (8001c70 <HAL_SMBUS_MspInit+0x138>)
 8001c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c4e:	4a08      	ldr	r2, [pc, #32]	; (8001c70 <HAL_SMBUS_MspInit+0x138>)
 8001c50:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c54:	6593      	str	r3, [r2, #88]	; 0x58
 8001c56:	4b06      	ldr	r3, [pc, #24]	; (8001c70 <HAL_SMBUS_MspInit+0x138>)
 8001c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c5e:	60bb      	str	r3, [r7, #8]
 8001c60:	68bb      	ldr	r3, [r7, #8]
}
 8001c62:	bf00      	nop
 8001c64:	37c0      	adds	r7, #192	; 0xc0
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	40005400 	.word	0x40005400
 8001c70:	40021000 	.word	0x40021000
 8001c74:	48000400 	.word	0x48000400
 8001c78:	40005800 	.word	0x40005800
 8001c7c:	48001400 	.word	0x48001400

08001c80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b0b2      	sub	sp, #200	; 0xc8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c88:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
 8001c90:	605a      	str	r2, [r3, #4]
 8001c92:	609a      	str	r2, [r3, #8]
 8001c94:	60da      	str	r2, [r3, #12]
 8001c96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c98:	f107 0320 	add.w	r3, r7, #32
 8001c9c:	2294      	movs	r2, #148	; 0x94
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f008 f859 	bl	8009d58 <memset>
  if(huart->Instance==LPUART1)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a64      	ldr	r2, [pc, #400]	; (8001e3c <HAL_UART_MspInit+0x1bc>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d13e      	bne.n	8001d2e <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001cb0:	2320      	movs	r3, #32
 8001cb2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cb8:	f107 0320 	add.w	r3, r7, #32
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f003 f931 	bl	8004f24 <HAL_RCCEx_PeriphCLKConfig>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001cc8:	f7ff fdc4 	bl	8001854 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001ccc:	4b5c      	ldr	r3, [pc, #368]	; (8001e40 <HAL_UART_MspInit+0x1c0>)
 8001cce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cd0:	4a5b      	ldr	r2, [pc, #364]	; (8001e40 <HAL_UART_MspInit+0x1c0>)
 8001cd2:	f043 0301 	orr.w	r3, r3, #1
 8001cd6:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001cd8:	4b59      	ldr	r3, [pc, #356]	; (8001e40 <HAL_UART_MspInit+0x1c0>)
 8001cda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cdc:	f003 0301 	and.w	r3, r3, #1
 8001ce0:	61fb      	str	r3, [r7, #28]
 8001ce2:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ce4:	4b56      	ldr	r3, [pc, #344]	; (8001e40 <HAL_UART_MspInit+0x1c0>)
 8001ce6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ce8:	4a55      	ldr	r2, [pc, #340]	; (8001e40 <HAL_UART_MspInit+0x1c0>)
 8001cea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001cee:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cf0:	4b53      	ldr	r3, [pc, #332]	; (8001e40 <HAL_UART_MspInit+0x1c0>)
 8001cf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cf8:	61bb      	str	r3, [r7, #24]
 8001cfa:	69bb      	ldr	r3, [r7, #24]
    HAL_PWREx_EnableVddIO2();
 8001cfc:	f002 fa2a 	bl	8004154 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001d00:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001d04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d08:	2302      	movs	r3, #2
 8001d0a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d14:	2303      	movs	r3, #3
 8001d16:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001d1a:	2308      	movs	r3, #8
 8001d1c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d20:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001d24:	4619      	mov	r1, r3
 8001d26:	4847      	ldr	r0, [pc, #284]	; (8001e44 <HAL_UART_MspInit+0x1c4>)
 8001d28:	f001 ff96 	bl	8003c58 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001d2c:	e081      	b.n	8001e32 <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART2)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a45      	ldr	r2, [pc, #276]	; (8001e48 <HAL_UART_MspInit+0x1c8>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d13b      	bne.n	8001db0 <HAL_UART_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001d38:	2302      	movs	r3, #2
 8001d3a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d40:	f107 0320 	add.w	r3, r7, #32
 8001d44:	4618      	mov	r0, r3
 8001d46:	f003 f8ed 	bl	8004f24 <HAL_RCCEx_PeriphCLKConfig>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8001d50:	f7ff fd80 	bl	8001854 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d54:	4b3a      	ldr	r3, [pc, #232]	; (8001e40 <HAL_UART_MspInit+0x1c0>)
 8001d56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d58:	4a39      	ldr	r2, [pc, #228]	; (8001e40 <HAL_UART_MspInit+0x1c0>)
 8001d5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d5e:	6593      	str	r3, [r2, #88]	; 0x58
 8001d60:	4b37      	ldr	r3, [pc, #220]	; (8001e40 <HAL_UART_MspInit+0x1c0>)
 8001d62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d68:	617b      	str	r3, [r7, #20]
 8001d6a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d6c:	4b34      	ldr	r3, [pc, #208]	; (8001e40 <HAL_UART_MspInit+0x1c0>)
 8001d6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d70:	4a33      	ldr	r2, [pc, #204]	; (8001e40 <HAL_UART_MspInit+0x1c0>)
 8001d72:	f043 0308 	orr.w	r3, r3, #8
 8001d76:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d78:	4b31      	ldr	r3, [pc, #196]	; (8001e40 <HAL_UART_MspInit+0x1c0>)
 8001d7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d7c:	f003 0308 	and.w	r3, r3, #8
 8001d80:	613b      	str	r3, [r7, #16]
 8001d82:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001d84:	2378      	movs	r3, #120	; 0x78
 8001d86:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d90:	2300      	movs	r3, #0
 8001d92:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d96:	2303      	movs	r3, #3
 8001d98:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d9c:	2307      	movs	r3, #7
 8001d9e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001da2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001da6:	4619      	mov	r1, r3
 8001da8:	4828      	ldr	r0, [pc, #160]	; (8001e4c <HAL_UART_MspInit+0x1cc>)
 8001daa:	f001 ff55 	bl	8003c58 <HAL_GPIO_Init>
}
 8001dae:	e040      	b.n	8001e32 <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART3)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a26      	ldr	r2, [pc, #152]	; (8001e50 <HAL_UART_MspInit+0x1d0>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d13b      	bne.n	8001e32 <HAL_UART_MspInit+0x1b2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001dba:	2304      	movs	r3, #4
 8001dbc:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001dc2:	f107 0320 	add.w	r3, r7, #32
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f003 f8ac 	bl	8004f24 <HAL_RCCEx_PeriphCLKConfig>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <HAL_UART_MspInit+0x156>
      Error_Handler();
 8001dd2:	f7ff fd3f 	bl	8001854 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001dd6:	4b1a      	ldr	r3, [pc, #104]	; (8001e40 <HAL_UART_MspInit+0x1c0>)
 8001dd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dda:	4a19      	ldr	r2, [pc, #100]	; (8001e40 <HAL_UART_MspInit+0x1c0>)
 8001ddc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001de0:	6593      	str	r3, [r2, #88]	; 0x58
 8001de2:	4b17      	ldr	r3, [pc, #92]	; (8001e40 <HAL_UART_MspInit+0x1c0>)
 8001de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001de6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dea:	60fb      	str	r3, [r7, #12]
 8001dec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dee:	4b14      	ldr	r3, [pc, #80]	; (8001e40 <HAL_UART_MspInit+0x1c0>)
 8001df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001df2:	4a13      	ldr	r2, [pc, #76]	; (8001e40 <HAL_UART_MspInit+0x1c0>)
 8001df4:	f043 0308 	orr.w	r3, r3, #8
 8001df8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dfa:	4b11      	ldr	r3, [pc, #68]	; (8001e40 <HAL_UART_MspInit+0x1c0>)
 8001dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dfe:	f003 0308 	and.w	r3, r3, #8
 8001e02:	60bb      	str	r3, [r7, #8]
 8001e04:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001e06:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e0a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e0e:	2302      	movs	r3, #2
 8001e10:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e14:	2300      	movs	r3, #0
 8001e16:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001e20:	2307      	movs	r3, #7
 8001e22:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e26:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	4807      	ldr	r0, [pc, #28]	; (8001e4c <HAL_UART_MspInit+0x1cc>)
 8001e2e:	f001 ff13 	bl	8003c58 <HAL_GPIO_Init>
}
 8001e32:	bf00      	nop
 8001e34:	37c8      	adds	r7, #200	; 0xc8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	40008000 	.word	0x40008000
 8001e40:	40021000 	.word	0x40021000
 8001e44:	48001800 	.word	0x48001800
 8001e48:	40004400 	.word	0x40004400
 8001e4c:	48000c00 	.word	0x48000c00
 8001e50:	40004800 	.word	0x40004800

08001e54 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b08c      	sub	sp, #48	; 0x30
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e5c:	f107 031c 	add.w	r3, r7, #28
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	605a      	str	r2, [r3, #4]
 8001e66:	609a      	str	r2, [r3, #8]
 8001e68:	60da      	str	r2, [r3, #12]
 8001e6a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a2e      	ldr	r2, [pc, #184]	; (8001f2c <HAL_SPI_MspInit+0xd8>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d129      	bne.n	8001eca <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e76:	4b2e      	ldr	r3, [pc, #184]	; (8001f30 <HAL_SPI_MspInit+0xdc>)
 8001e78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e7a:	4a2d      	ldr	r2, [pc, #180]	; (8001f30 <HAL_SPI_MspInit+0xdc>)
 8001e7c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e80:	6613      	str	r3, [r2, #96]	; 0x60
 8001e82:	4b2b      	ldr	r3, [pc, #172]	; (8001f30 <HAL_SPI_MspInit+0xdc>)
 8001e84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e8a:	61bb      	str	r3, [r7, #24]
 8001e8c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e8e:	4b28      	ldr	r3, [pc, #160]	; (8001f30 <HAL_SPI_MspInit+0xdc>)
 8001e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e92:	4a27      	ldr	r2, [pc, #156]	; (8001f30 <HAL_SPI_MspInit+0xdc>)
 8001e94:	f043 0301 	orr.w	r3, r3, #1
 8001e98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e9a:	4b25      	ldr	r3, [pc, #148]	; (8001f30 <HAL_SPI_MspInit+0xdc>)
 8001e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e9e:	f003 0301 	and.w	r3, r3, #1
 8001ea2:	617b      	str	r3, [r7, #20]
 8001ea4:	697b      	ldr	r3, [r7, #20]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001ea6:	23f0      	movs	r3, #240	; 0xf0
 8001ea8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eaa:	2302      	movs	r3, #2
 8001eac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001eb6:	2305      	movs	r3, #5
 8001eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eba:	f107 031c 	add.w	r3, r7, #28
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ec4:	f001 fec8 	bl	8003c58 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001ec8:	e02c      	b.n	8001f24 <HAL_SPI_MspInit+0xd0>
  else if(hspi->Instance==SPI3)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a19      	ldr	r2, [pc, #100]	; (8001f34 <HAL_SPI_MspInit+0xe0>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d127      	bne.n	8001f24 <HAL_SPI_MspInit+0xd0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001ed4:	4b16      	ldr	r3, [pc, #88]	; (8001f30 <HAL_SPI_MspInit+0xdc>)
 8001ed6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed8:	4a15      	ldr	r2, [pc, #84]	; (8001f30 <HAL_SPI_MspInit+0xdc>)
 8001eda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ede:	6593      	str	r3, [r2, #88]	; 0x58
 8001ee0:	4b13      	ldr	r3, [pc, #76]	; (8001f30 <HAL_SPI_MspInit+0xdc>)
 8001ee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ee8:	613b      	str	r3, [r7, #16]
 8001eea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eec:	4b10      	ldr	r3, [pc, #64]	; (8001f30 <HAL_SPI_MspInit+0xdc>)
 8001eee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ef0:	4a0f      	ldr	r2, [pc, #60]	; (8001f30 <HAL_SPI_MspInit+0xdc>)
 8001ef2:	f043 0302 	orr.w	r3, r3, #2
 8001ef6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ef8:	4b0d      	ldr	r3, [pc, #52]	; (8001f30 <HAL_SPI_MspInit+0xdc>)
 8001efa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001efc:	f003 0302 	and.w	r3, r3, #2
 8001f00:	60fb      	str	r3, [r7, #12]
 8001f02:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001f04:	2338      	movs	r3, #56	; 0x38
 8001f06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f08:	2302      	movs	r3, #2
 8001f0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f10:	2303      	movs	r3, #3
 8001f12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001f14:	2306      	movs	r3, #6
 8001f16:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f18:	f107 031c 	add.w	r3, r7, #28
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	4806      	ldr	r0, [pc, #24]	; (8001f38 <HAL_SPI_MspInit+0xe4>)
 8001f20:	f001 fe9a 	bl	8003c58 <HAL_GPIO_Init>
}
 8001f24:	bf00      	nop
 8001f26:	3730      	adds	r7, #48	; 0x30
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	40013000 	.word	0x40013000
 8001f30:	40021000 	.word	0x40021000
 8001f34:	40003c00 	.word	0x40003c00
 8001f38:	48000400 	.word	0x48000400

08001f3c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b08a      	sub	sp, #40	; 0x28
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f44:	f107 0314 	add.w	r3, r7, #20
 8001f48:	2200      	movs	r2, #0
 8001f4a:	601a      	str	r2, [r3, #0]
 8001f4c:	605a      	str	r2, [r3, #4]
 8001f4e:	609a      	str	r2, [r3, #8]
 8001f50:	60da      	str	r2, [r3, #12]
 8001f52:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a35      	ldr	r2, [pc, #212]	; (8002030 <HAL_TIM_PWM_MspInit+0xf4>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d152      	bne.n	8002004 <HAL_TIM_PWM_MspInit+0xc8>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f5e:	4b35      	ldr	r3, [pc, #212]	; (8002034 <HAL_TIM_PWM_MspInit+0xf8>)
 8001f60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f62:	4a34      	ldr	r2, [pc, #208]	; (8002034 <HAL_TIM_PWM_MspInit+0xf8>)
 8001f64:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f68:	6613      	str	r3, [r2, #96]	; 0x60
 8001f6a:	4b32      	ldr	r3, [pc, #200]	; (8002034 <HAL_TIM_PWM_MspInit+0xf8>)
 8001f6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f72:	613b      	str	r3, [r7, #16]
 8001f74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f76:	4b2f      	ldr	r3, [pc, #188]	; (8002034 <HAL_TIM_PWM_MspInit+0xf8>)
 8001f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f7a:	4a2e      	ldr	r2, [pc, #184]	; (8002034 <HAL_TIM_PWM_MspInit+0xf8>)
 8001f7c:	f043 0310 	orr.w	r3, r3, #16
 8001f80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f82:	4b2c      	ldr	r3, [pc, #176]	; (8002034 <HAL_TIM_PWM_MspInit+0xf8>)
 8001f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f86:	f003 0310 	and.w	r3, r3, #16
 8001f8a:	60fb      	str	r3, [r7, #12]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
    PE7     ------> TIM1_ETR
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_BKIN2
    PE15     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001f8e:	2380      	movs	r3, #128	; 0x80
 8001f90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f92:	2302      	movs	r3, #2
 8001f94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f96:	2300      	movs	r3, #0
 8001f98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fa2:	f107 0314 	add.w	r3, r7, #20
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	4823      	ldr	r0, [pc, #140]	; (8002038 <HAL_TIM_PWM_MspInit+0xfc>)
 8001faa:	f001 fe55 	bl	8003c58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001fae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fc4:	f107 0314 	add.w	r3, r7, #20
 8001fc8:	4619      	mov	r1, r3
 8001fca:	481b      	ldr	r0, [pc, #108]	; (8002038 <HAL_TIM_PWM_MspInit+0xfc>)
 8001fcc:	f001 fe44 	bl	8003c58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001fd0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001fd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fe6:	f107 0314 	add.w	r3, r7, #20
 8001fea:	4619      	mov	r1, r3
 8001fec:	4812      	ldr	r0, [pc, #72]	; (8002038 <HAL_TIM_PWM_MspInit+0xfc>)
 8001fee:	f001 fe33 	bl	8003c58 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	2100      	movs	r1, #0
 8001ff6:	201b      	movs	r0, #27
 8001ff8:	f001 fde9 	bl	8003bce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001ffc:	201b      	movs	r0, #27
 8001ffe:	f001 fe02 	bl	8003c06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8002002:	e010      	b.n	8002026 <HAL_TIM_PWM_MspInit+0xea>
  else if(htim_pwm->Instance==TIM15)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a0c      	ldr	r2, [pc, #48]	; (800203c <HAL_TIM_PWM_MspInit+0x100>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d10b      	bne.n	8002026 <HAL_TIM_PWM_MspInit+0xea>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800200e:	4b09      	ldr	r3, [pc, #36]	; (8002034 <HAL_TIM_PWM_MspInit+0xf8>)
 8002010:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002012:	4a08      	ldr	r2, [pc, #32]	; (8002034 <HAL_TIM_PWM_MspInit+0xf8>)
 8002014:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002018:	6613      	str	r3, [r2, #96]	; 0x60
 800201a:	4b06      	ldr	r3, [pc, #24]	; (8002034 <HAL_TIM_PWM_MspInit+0xf8>)
 800201c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800201e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002022:	60bb      	str	r3, [r7, #8]
 8002024:	68bb      	ldr	r3, [r7, #8]
}
 8002026:	bf00      	nop
 8002028:	3728      	adds	r7, #40	; 0x28
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	40012c00 	.word	0x40012c00
 8002034:	40021000 	.word	0x40021000
 8002038:	48001000 	.word	0x48001000
 800203c:	40014000 	.word	0x40014000

08002040 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b08c      	sub	sp, #48	; 0x30
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002048:	f107 031c 	add.w	r3, r7, #28
 800204c:	2200      	movs	r2, #0
 800204e:	601a      	str	r2, [r3, #0]
 8002050:	605a      	str	r2, [r3, #4]
 8002052:	609a      	str	r2, [r3, #8]
 8002054:	60da      	str	r2, [r3, #12]
 8002056:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002060:	d10c      	bne.n	800207c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002062:	4b3b      	ldr	r3, [pc, #236]	; (8002150 <HAL_TIM_Base_MspInit+0x110>)
 8002064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002066:	4a3a      	ldr	r2, [pc, #232]	; (8002150 <HAL_TIM_Base_MspInit+0x110>)
 8002068:	f043 0301 	orr.w	r3, r3, #1
 800206c:	6593      	str	r3, [r2, #88]	; 0x58
 800206e:	4b38      	ldr	r3, [pc, #224]	; (8002150 <HAL_TIM_Base_MspInit+0x110>)
 8002070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	61bb      	str	r3, [r7, #24]
 8002078:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800207a:	e065      	b.n	8002148 <HAL_TIM_Base_MspInit+0x108>
  else if(htim_base->Instance==TIM3)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a34      	ldr	r2, [pc, #208]	; (8002154 <HAL_TIM_Base_MspInit+0x114>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d133      	bne.n	80020ee <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002086:	4b32      	ldr	r3, [pc, #200]	; (8002150 <HAL_TIM_Base_MspInit+0x110>)
 8002088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800208a:	4a31      	ldr	r2, [pc, #196]	; (8002150 <HAL_TIM_Base_MspInit+0x110>)
 800208c:	f043 0302 	orr.w	r3, r3, #2
 8002090:	6593      	str	r3, [r2, #88]	; 0x58
 8002092:	4b2f      	ldr	r3, [pc, #188]	; (8002150 <HAL_TIM_Base_MspInit+0x110>)
 8002094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	617b      	str	r3, [r7, #20]
 800209c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800209e:	4b2c      	ldr	r3, [pc, #176]	; (8002150 <HAL_TIM_Base_MspInit+0x110>)
 80020a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020a2:	4a2b      	ldr	r2, [pc, #172]	; (8002150 <HAL_TIM_Base_MspInit+0x110>)
 80020a4:	f043 0304 	orr.w	r3, r3, #4
 80020a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020aa:	4b29      	ldr	r3, [pc, #164]	; (8002150 <HAL_TIM_Base_MspInit+0x110>)
 80020ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ae:	f003 0304 	and.w	r3, r3, #4
 80020b2:	613b      	str	r3, [r7, #16]
 80020b4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80020b6:	2380      	movs	r3, #128	; 0x80
 80020b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ba:	2302      	movs	r3, #2
 80020bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020be:	2301      	movs	r3, #1
 80020c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c2:	2300      	movs	r3, #0
 80020c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80020c6:	2302      	movs	r3, #2
 80020c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020ca:	f107 031c 	add.w	r3, r7, #28
 80020ce:	4619      	mov	r1, r3
 80020d0:	4821      	ldr	r0, [pc, #132]	; (8002158 <HAL_TIM_Base_MspInit+0x118>)
 80020d2:	f001 fdc1 	bl	8003c58 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80020d6:	2200      	movs	r2, #0
 80020d8:	2100      	movs	r1, #0
 80020da:	201d      	movs	r0, #29
 80020dc:	f001 fd77 	bl	8003bce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80020e0:	201d      	movs	r0, #29
 80020e2:	f001 fd90 	bl	8003c06 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_DisableIRQ(TIM3_IRQn);
 80020e6:	201d      	movs	r0, #29
 80020e8:	f001 fd9b 	bl	8003c22 <HAL_NVIC_DisableIRQ>
}
 80020ec:	e02c      	b.n	8002148 <HAL_TIM_Base_MspInit+0x108>
  else if(htim_base->Instance==TIM4)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a1a      	ldr	r2, [pc, #104]	; (800215c <HAL_TIM_Base_MspInit+0x11c>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d127      	bne.n	8002148 <HAL_TIM_Base_MspInit+0x108>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80020f8:	4b15      	ldr	r3, [pc, #84]	; (8002150 <HAL_TIM_Base_MspInit+0x110>)
 80020fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020fc:	4a14      	ldr	r2, [pc, #80]	; (8002150 <HAL_TIM_Base_MspInit+0x110>)
 80020fe:	f043 0304 	orr.w	r3, r3, #4
 8002102:	6593      	str	r3, [r2, #88]	; 0x58
 8002104:	4b12      	ldr	r3, [pc, #72]	; (8002150 <HAL_TIM_Base_MspInit+0x110>)
 8002106:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002108:	f003 0304 	and.w	r3, r3, #4
 800210c:	60fb      	str	r3, [r7, #12]
 800210e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002110:	4b0f      	ldr	r3, [pc, #60]	; (8002150 <HAL_TIM_Base_MspInit+0x110>)
 8002112:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002114:	4a0e      	ldr	r2, [pc, #56]	; (8002150 <HAL_TIM_Base_MspInit+0x110>)
 8002116:	f043 0310 	orr.w	r3, r3, #16
 800211a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800211c:	4b0c      	ldr	r3, [pc, #48]	; (8002150 <HAL_TIM_Base_MspInit+0x110>)
 800211e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002120:	f003 0310 	and.w	r3, r3, #16
 8002124:	60bb      	str	r3, [r7, #8]
 8002126:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002128:	2301      	movs	r3, #1
 800212a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800212c:	2302      	movs	r3, #2
 800212e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002130:	2300      	movs	r3, #0
 8002132:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002134:	2300      	movs	r3, #0
 8002136:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002138:	2302      	movs	r3, #2
 800213a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800213c:	f107 031c 	add.w	r3, r7, #28
 8002140:	4619      	mov	r1, r3
 8002142:	4807      	ldr	r0, [pc, #28]	; (8002160 <HAL_TIM_Base_MspInit+0x120>)
 8002144:	f001 fd88 	bl	8003c58 <HAL_GPIO_Init>
}
 8002148:	bf00      	nop
 800214a:	3730      	adds	r7, #48	; 0x30
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	40021000 	.word	0x40021000
 8002154:	40000400 	.word	0x40000400
 8002158:	48000800 	.word	0x48000800
 800215c:	40000800 	.word	0x40000800
 8002160:	48001000 	.word	0x48001000

08002164 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b08c      	sub	sp, #48	; 0x30
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800216c:	f107 031c 	add.w	r3, r7, #28
 8002170:	2200      	movs	r2, #0
 8002172:	601a      	str	r2, [r3, #0]
 8002174:	605a      	str	r2, [r3, #4]
 8002176:	609a      	str	r2, [r3, #8]
 8002178:	60da      	str	r2, [r3, #12]
 800217a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a54      	ldr	r2, [pc, #336]	; (80022d4 <HAL_TIM_MspPostInit+0x170>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d11d      	bne.n	80021c2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002186:	4b54      	ldr	r3, [pc, #336]	; (80022d8 <HAL_TIM_MspPostInit+0x174>)
 8002188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800218a:	4a53      	ldr	r2, [pc, #332]	; (80022d8 <HAL_TIM_MspPostInit+0x174>)
 800218c:	f043 0310 	orr.w	r3, r3, #16
 8002190:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002192:	4b51      	ldr	r3, [pc, #324]	; (80022d8 <HAL_TIM_MspPostInit+0x174>)
 8002194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002196:	f003 0310 	and.w	r3, r3, #16
 800219a:	61bb      	str	r3, [r7, #24]
 800219c:	69bb      	ldr	r3, [r7, #24]
    PE9     ------> TIM1_CH1
    PE10     ------> TIM1_CH2N
    PE11     ------> TIM1_CH2
    PE12     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800219e:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80021a2:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a4:	2302      	movs	r3, #2
 80021a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a8:	2300      	movs	r3, #0
 80021aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ac:	2300      	movs	r3, #0
 80021ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80021b0:	2301      	movs	r3, #1
 80021b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021b4:	f107 031c 	add.w	r3, r7, #28
 80021b8:	4619      	mov	r1, r3
 80021ba:	4848      	ldr	r0, [pc, #288]	; (80022dc <HAL_TIM_MspPostInit+0x178>)
 80021bc:	f001 fd4c 	bl	8003c58 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80021c0:	e084      	b.n	80022cc <HAL_TIM_MspPostInit+0x168>
  else if(htim->Instance==TIM2)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021ca:	d13a      	bne.n	8002242 <HAL_TIM_MspPostInit+0xde>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021cc:	4b42      	ldr	r3, [pc, #264]	; (80022d8 <HAL_TIM_MspPostInit+0x174>)
 80021ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021d0:	4a41      	ldr	r2, [pc, #260]	; (80022d8 <HAL_TIM_MspPostInit+0x174>)
 80021d2:	f043 0301 	orr.w	r3, r3, #1
 80021d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021d8:	4b3f      	ldr	r3, [pc, #252]	; (80022d8 <HAL_TIM_MspPostInit+0x174>)
 80021da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021dc:	f003 0301 	and.w	r3, r3, #1
 80021e0:	617b      	str	r3, [r7, #20]
 80021e2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021e4:	4b3c      	ldr	r3, [pc, #240]	; (80022d8 <HAL_TIM_MspPostInit+0x174>)
 80021e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021e8:	4a3b      	ldr	r2, [pc, #236]	; (80022d8 <HAL_TIM_MspPostInit+0x174>)
 80021ea:	f043 0302 	orr.w	r3, r3, #2
 80021ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021f0:	4b39      	ldr	r3, [pc, #228]	; (80022d8 <HAL_TIM_MspPostInit+0x174>)
 80021f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021f4:	f003 0302 	and.w	r3, r3, #2
 80021f8:	613b      	str	r3, [r7, #16]
 80021fa:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80021fc:	2301      	movs	r3, #1
 80021fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002200:	2302      	movs	r3, #2
 8002202:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002204:	2300      	movs	r3, #0
 8002206:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002208:	2300      	movs	r3, #0
 800220a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800220c:	2301      	movs	r3, #1
 800220e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002210:	f107 031c 	add.w	r3, r7, #28
 8002214:	4619      	mov	r1, r3
 8002216:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800221a:	f001 fd1d 	bl	8003c58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800221e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002222:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002224:	2302      	movs	r3, #2
 8002226:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002228:	2300      	movs	r3, #0
 800222a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800222c:	2300      	movs	r3, #0
 800222e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002230:	2301      	movs	r3, #1
 8002232:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002234:	f107 031c 	add.w	r3, r7, #28
 8002238:	4619      	mov	r1, r3
 800223a:	4829      	ldr	r0, [pc, #164]	; (80022e0 <HAL_TIM_MspPostInit+0x17c>)
 800223c:	f001 fd0c 	bl	8003c58 <HAL_GPIO_Init>
}
 8002240:	e044      	b.n	80022cc <HAL_TIM_MspPostInit+0x168>
  else if(htim->Instance==TIM4)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a27      	ldr	r2, [pc, #156]	; (80022e4 <HAL_TIM_MspPostInit+0x180>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d11d      	bne.n	8002288 <HAL_TIM_MspPostInit+0x124>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800224c:	4b22      	ldr	r3, [pc, #136]	; (80022d8 <HAL_TIM_MspPostInit+0x174>)
 800224e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002250:	4a21      	ldr	r2, [pc, #132]	; (80022d8 <HAL_TIM_MspPostInit+0x174>)
 8002252:	f043 0308 	orr.w	r3, r3, #8
 8002256:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002258:	4b1f      	ldr	r3, [pc, #124]	; (80022d8 <HAL_TIM_MspPostInit+0x174>)
 800225a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800225c:	f003 0308 	and.w	r3, r3, #8
 8002260:	60fb      	str	r3, [r7, #12]
 8002262:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002264:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002268:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800226a:	2302      	movs	r3, #2
 800226c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226e:	2300      	movs	r3, #0
 8002270:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002272:	2300      	movs	r3, #0
 8002274:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002276:	2302      	movs	r3, #2
 8002278:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800227a:	f107 031c 	add.w	r3, r7, #28
 800227e:	4619      	mov	r1, r3
 8002280:	4819      	ldr	r0, [pc, #100]	; (80022e8 <HAL_TIM_MspPostInit+0x184>)
 8002282:	f001 fce9 	bl	8003c58 <HAL_GPIO_Init>
}
 8002286:	e021      	b.n	80022cc <HAL_TIM_MspPostInit+0x168>
  else if(htim->Instance==TIM15)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a17      	ldr	r2, [pc, #92]	; (80022ec <HAL_TIM_MspPostInit+0x188>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d11c      	bne.n	80022cc <HAL_TIM_MspPostInit+0x168>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002292:	4b11      	ldr	r3, [pc, #68]	; (80022d8 <HAL_TIM_MspPostInit+0x174>)
 8002294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002296:	4a10      	ldr	r2, [pc, #64]	; (80022d8 <HAL_TIM_MspPostInit+0x174>)
 8002298:	f043 0302 	orr.w	r3, r3, #2
 800229c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800229e:	4b0e      	ldr	r3, [pc, #56]	; (80022d8 <HAL_TIM_MspPostInit+0x174>)
 80022a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022a2:	f003 0302 	and.w	r3, r3, #2
 80022a6:	60bb      	str	r3, [r7, #8]
 80022a8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80022aa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80022ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b0:	2302      	movs	r3, #2
 80022b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b4:	2300      	movs	r3, #0
 80022b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b8:	2300      	movs	r3, #0
 80022ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 80022bc:	230e      	movs	r3, #14
 80022be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022c0:	f107 031c 	add.w	r3, r7, #28
 80022c4:	4619      	mov	r1, r3
 80022c6:	4806      	ldr	r0, [pc, #24]	; (80022e0 <HAL_TIM_MspPostInit+0x17c>)
 80022c8:	f001 fcc6 	bl	8003c58 <HAL_GPIO_Init>
}
 80022cc:	bf00      	nop
 80022ce:	3730      	adds	r7, #48	; 0x30
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	40012c00 	.word	0x40012c00
 80022d8:	40021000 	.word	0x40021000
 80022dc:	48001000 	.word	0x48001000
 80022e0:	48000400 	.word	0x48000400
 80022e4:	40000800 	.word	0x40000800
 80022e8:	48000c00 	.word	0x48000c00
 80022ec:	40014000 	.word	0x40014000

080022f0 <HAL_SAI_MspInit>:

static uint32_t SAI1_client =0;
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b08a      	sub	sp, #40	; 0x28
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a50      	ldr	r2, [pc, #320]	; (8002440 <HAL_SAI_MspInit+0x150>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d124      	bne.n	800234c <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 8002302:	4b50      	ldr	r3, [pc, #320]	; (8002444 <HAL_SAI_MspInit+0x154>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d10b      	bne.n	8002322 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800230a:	4b4f      	ldr	r3, [pc, #316]	; (8002448 <HAL_SAI_MspInit+0x158>)
 800230c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800230e:	4a4e      	ldr	r2, [pc, #312]	; (8002448 <HAL_SAI_MspInit+0x158>)
 8002310:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002314:	6613      	str	r3, [r2, #96]	; 0x60
 8002316:	4b4c      	ldr	r3, [pc, #304]	; (8002448 <HAL_SAI_MspInit+0x158>)
 8002318:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800231a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800231e:	613b      	str	r3, [r7, #16]
 8002320:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 8002322:	4b48      	ldr	r3, [pc, #288]	; (8002444 <HAL_SAI_MspInit+0x154>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	3301      	adds	r3, #1
 8002328:	4a46      	ldr	r2, [pc, #280]	; (8002444 <HAL_SAI_MspInit+0x154>)
 800232a:	6013      	str	r3, [r2, #0]
    PE2     ------> SAI1_MCLK_A
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800232c:	2374      	movs	r3, #116	; 0x74
 800232e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002330:	2302      	movs	r3, #2
 8002332:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002334:	2300      	movs	r3, #0
 8002336:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002338:	2300      	movs	r3, #0
 800233a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800233c:	230d      	movs	r3, #13
 800233e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002340:	f107 0314 	add.w	r3, r7, #20
 8002344:	4619      	mov	r1, r3
 8002346:	4841      	ldr	r0, [pc, #260]	; (800244c <HAL_SAI_MspInit+0x15c>)
 8002348:	f001 fc86 	bl	8003c58 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a3f      	ldr	r2, [pc, #252]	; (8002450 <HAL_SAI_MspInit+0x160>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d135      	bne.n	80023c2 <HAL_SAI_MspInit+0xd2>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 8002356:	4b3b      	ldr	r3, [pc, #236]	; (8002444 <HAL_SAI_MspInit+0x154>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d10b      	bne.n	8002376 <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800235e:	4b3a      	ldr	r3, [pc, #232]	; (8002448 <HAL_SAI_MspInit+0x158>)
 8002360:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002362:	4a39      	ldr	r2, [pc, #228]	; (8002448 <HAL_SAI_MspInit+0x158>)
 8002364:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002368:	6613      	str	r3, [r2, #96]	; 0x60
 800236a:	4b37      	ldr	r3, [pc, #220]	; (8002448 <HAL_SAI_MspInit+0x158>)
 800236c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800236e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002372:	60fb      	str	r3, [r7, #12]
 8002374:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 8002376:	4b33      	ldr	r3, [pc, #204]	; (8002444 <HAL_SAI_MspInit+0x154>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	3301      	adds	r3, #1
 800237c:	4a31      	ldr	r2, [pc, #196]	; (8002444 <HAL_SAI_MspInit+0x154>)
 800237e:	6013      	str	r3, [r2, #0]
    PE3     ------> SAI1_SD_B
    PF7     ------> SAI1_MCLK_B
    PF8     ------> SAI1_SCK_B
    PF9     ------> SAI1_FS_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002380:	2308      	movs	r3, #8
 8002382:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002384:	2302      	movs	r3, #2
 8002386:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002388:	2300      	movs	r3, #0
 800238a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800238c:	2300      	movs	r3, #0
 800238e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8002390:	230d      	movs	r3, #13
 8002392:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002394:	f107 0314 	add.w	r3, r7, #20
 8002398:	4619      	mov	r1, r3
 800239a:	482c      	ldr	r0, [pc, #176]	; (800244c <HAL_SAI_MspInit+0x15c>)
 800239c:	f001 fc5c 	bl	8003c58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80023a0:	f44f 7360 	mov.w	r3, #896	; 0x380
 80023a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a6:	2302      	movs	r3, #2
 80023a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023aa:	2300      	movs	r3, #0
 80023ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ae:	2300      	movs	r3, #0
 80023b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80023b2:	230d      	movs	r3, #13
 80023b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80023b6:	f107 0314 	add.w	r3, r7, #20
 80023ba:	4619      	mov	r1, r3
 80023bc:	4825      	ldr	r0, [pc, #148]	; (8002454 <HAL_SAI_MspInit+0x164>)
 80023be:	f001 fc4b 	bl	8003c58 <HAL_GPIO_Init>

    }
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a24      	ldr	r2, [pc, #144]	; (8002458 <HAL_SAI_MspInit+0x168>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d135      	bne.n	8002438 <HAL_SAI_MspInit+0x148>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 80023cc:	4b23      	ldr	r3, [pc, #140]	; (800245c <HAL_SAI_MspInit+0x16c>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d10b      	bne.n	80023ec <HAL_SAI_MspInit+0xfc>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80023d4:	4b1c      	ldr	r3, [pc, #112]	; (8002448 <HAL_SAI_MspInit+0x158>)
 80023d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023d8:	4a1b      	ldr	r2, [pc, #108]	; (8002448 <HAL_SAI_MspInit+0x158>)
 80023da:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80023de:	6613      	str	r3, [r2, #96]	; 0x60
 80023e0:	4b19      	ldr	r3, [pc, #100]	; (8002448 <HAL_SAI_MspInit+0x158>)
 80023e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023e8:	60bb      	str	r3, [r7, #8]
 80023ea:	68bb      	ldr	r3, [r7, #8]
    }
    SAI2_client ++;
 80023ec:	4b1b      	ldr	r3, [pc, #108]	; (800245c <HAL_SAI_MspInit+0x16c>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	3301      	adds	r3, #1
 80023f2:	4a1a      	ldr	r2, [pc, #104]	; (800245c <HAL_SAI_MspInit+0x16c>)
 80023f4:	6013      	str	r3, [r2, #0]
    PB12     ------> SAI2_FS_A
    PB13     ------> SAI2_SCK_A
    PB15     ------> SAI2_SD_A
    PC6     ------> SAI2_MCLK_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80023f6:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 80023fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023fc:	2302      	movs	r3, #2
 80023fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002400:	2300      	movs	r3, #0
 8002402:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002404:	2300      	movs	r3, #0
 8002406:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8002408:	230d      	movs	r3, #13
 800240a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800240c:	f107 0314 	add.w	r3, r7, #20
 8002410:	4619      	mov	r1, r3
 8002412:	4813      	ldr	r0, [pc, #76]	; (8002460 <HAL_SAI_MspInit+0x170>)
 8002414:	f001 fc20 	bl	8003c58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002418:	2340      	movs	r3, #64	; 0x40
 800241a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800241c:	2302      	movs	r3, #2
 800241e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002420:	2300      	movs	r3, #0
 8002422:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002424:	2300      	movs	r3, #0
 8002426:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8002428:	230d      	movs	r3, #13
 800242a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800242c:	f107 0314 	add.w	r3, r7, #20
 8002430:	4619      	mov	r1, r3
 8002432:	480c      	ldr	r0, [pc, #48]	; (8002464 <HAL_SAI_MspInit+0x174>)
 8002434:	f001 fc10 	bl	8003c58 <HAL_GPIO_Init>

    }
}
 8002438:	bf00      	nop
 800243a:	3728      	adds	r7, #40	; 0x28
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	40015404 	.word	0x40015404
 8002444:	20000778 	.word	0x20000778
 8002448:	40021000 	.word	0x40021000
 800244c:	48001000 	.word	0x48001000
 8002450:	40015424 	.word	0x40015424
 8002454:	48001400 	.word	0x48001400
 8002458:	40015804 	.word	0x40015804
 800245c:	2000077c 	.word	0x2000077c
 8002460:	48000400 	.word	0x48000400
 8002464:	48000800 	.word	0x48000800

08002468 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800246c:	e7fe      	b.n	800246c <NMI_Handler+0x4>

0800246e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800246e:	b480      	push	{r7}
 8002470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002472:	e7fe      	b.n	8002472 <HardFault_Handler+0x4>

08002474 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002478:	e7fe      	b.n	8002478 <MemManage_Handler+0x4>

0800247a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800247a:	b480      	push	{r7}
 800247c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800247e:	e7fe      	b.n	800247e <BusFault_Handler+0x4>

08002480 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002484:	e7fe      	b.n	8002484 <UsageFault_Handler+0x4>

08002486 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002486:	b480      	push	{r7}
 8002488:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800248a:	bf00      	nop
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr

08002494 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002498:	bf00      	nop
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr

080024a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024a2:	b480      	push	{r7}
 80024a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024a6:	bf00      	nop
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024b4:	f000 f8ee 	bl	8002694 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024b8:	bf00      	nop
 80024ba:	bd80      	pop	{r7, pc}

080024bc <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80024c0:	4802      	ldr	r0, [pc, #8]	; (80024cc <TIM1_CC_IRQHandler+0x10>)
 80024c2:	f005 fb17 	bl	8007af4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80024c6:	bf00      	nop
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	200005f8 	.word	0x200005f8

080024d0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	const uint32_t THRESHOD = 500;
 80024d6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80024da:	607b      	str	r3, [r7, #4]

	extern uint32_t count;

	static uint8_t mode = 0;

	if (mode == 0) {
 80024dc:	4b1f      	ldr	r3, [pc, #124]	; (800255c <TIM3_IRQHandler+0x8c>)
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d112      	bne.n	800250a <TIM3_IRQHandler+0x3a>
		// falling edge
		TIM3->CNT = 0;
 80024e4:	4b1e      	ldr	r3, [pc, #120]	; (8002560 <TIM3_IRQHandler+0x90>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	625a      	str	r2, [r3, #36]	; 0x24
		TIM3->CCER &= ~(0b1 << 5);
 80024ea:	4b1d      	ldr	r3, [pc, #116]	; (8002560 <TIM3_IRQHandler+0x90>)
 80024ec:	6a1b      	ldr	r3, [r3, #32]
 80024ee:	4a1c      	ldr	r2, [pc, #112]	; (8002560 <TIM3_IRQHandler+0x90>)
 80024f0:	f023 0320 	bic.w	r3, r3, #32
 80024f4:	6213      	str	r3, [r2, #32]
		TIM3->CCER &= ~(0b1 << 7);
 80024f6:	4b1a      	ldr	r3, [pc, #104]	; (8002560 <TIM3_IRQHandler+0x90>)
 80024f8:	6a1b      	ldr	r3, [r3, #32]
 80024fa:	4a19      	ldr	r2, [pc, #100]	; (8002560 <TIM3_IRQHandler+0x90>)
 80024fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002500:	6213      	str	r3, [r2, #32]
		mode = 1;
 8002502:	4b16      	ldr	r3, [pc, #88]	; (800255c <TIM3_IRQHandler+0x8c>)
 8002504:	2201      	movs	r2, #1
 8002506:	701a      	strb	r2, [r3, #0]
 8002508:	e021      	b.n	800254e <TIM3_IRQHandler+0x7e>
	} else {
		// rising edge;
		uint32_t local_count = TIM3->CNT;
 800250a:	4b15      	ldr	r3, [pc, #84]	; (8002560 <TIM3_IRQHandler+0x90>)
 800250c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250e:	603b      	str	r3, [r7, #0]
		count = local_count;
 8002510:	4a14      	ldr	r2, [pc, #80]	; (8002564 <TIM3_IRQHandler+0x94>)
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	6013      	str	r3, [r2, #0]

		if (local_count > THRESHOD) {
 8002516:	683a      	ldr	r2, [r7, #0]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	429a      	cmp	r2, r3
 800251c:	d908      	bls.n	8002530 <TIM3_IRQHandler+0x60>
			 ball_collected = 1;
 800251e:	4b12      	ldr	r3, [pc, #72]	; (8002568 <TIM3_IRQHandler+0x98>)
 8002520:	2201      	movs	r2, #1
 8002522:	701a      	strb	r2, [r3, #0]
			 ball_count++;
 8002524:	4b11      	ldr	r3, [pc, #68]	; (800256c <TIM3_IRQHandler+0x9c>)
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	3301      	adds	r3, #1
 800252a:	b2da      	uxtb	r2, r3
 800252c:	4b0f      	ldr	r3, [pc, #60]	; (800256c <TIM3_IRQHandler+0x9c>)
 800252e:	701a      	strb	r2, [r3, #0]
		}

		TIM3->CCER |= (0b1 << 5);
 8002530:	4b0b      	ldr	r3, [pc, #44]	; (8002560 <TIM3_IRQHandler+0x90>)
 8002532:	6a1b      	ldr	r3, [r3, #32]
 8002534:	4a0a      	ldr	r2, [pc, #40]	; (8002560 <TIM3_IRQHandler+0x90>)
 8002536:	f043 0320 	orr.w	r3, r3, #32
 800253a:	6213      	str	r3, [r2, #32]
		TIM3->CCER &= ~(0b1 << 7);
 800253c:	4b08      	ldr	r3, [pc, #32]	; (8002560 <TIM3_IRQHandler+0x90>)
 800253e:	6a1b      	ldr	r3, [r3, #32]
 8002540:	4a07      	ldr	r2, [pc, #28]	; (8002560 <TIM3_IRQHandler+0x90>)
 8002542:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002546:	6213      	str	r3, [r2, #32]
		mode = 0;
 8002548:	4b04      	ldr	r3, [pc, #16]	; (800255c <TIM3_IRQHandler+0x8c>)
 800254a:	2200      	movs	r2, #0
 800254c:	701a      	strb	r2, [r3, #0]
	}


  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800254e:	4808      	ldr	r0, [pc, #32]	; (8002570 <TIM3_IRQHandler+0xa0>)
 8002550:	f005 fad0 	bl	8007af4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002554:	bf00      	nop
 8002556:	3708      	adds	r7, #8
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	20000780 	.word	0x20000780
 8002560:	40000400 	.word	0x40000400
 8002564:	20000038 	.word	0x20000038
 8002568:	20000032 	.word	0x20000032
 800256c:	20000031 	.word	0x20000031
 8002570:	20000690 	.word	0x20000690

08002574 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002578:	4b06      	ldr	r3, [pc, #24]	; (8002594 <SystemInit+0x20>)
 800257a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800257e:	4a05      	ldr	r2, [pc, #20]	; (8002594 <SystemInit+0x20>)
 8002580:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002584:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002588:	bf00      	nop
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	e000ed00 	.word	0xe000ed00

08002598 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002598:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025d0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800259c:	f7ff ffea 	bl	8002574 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025a0:	480c      	ldr	r0, [pc, #48]	; (80025d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80025a2:	490d      	ldr	r1, [pc, #52]	; (80025d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80025a4:	4a0d      	ldr	r2, [pc, #52]	; (80025dc <LoopForever+0xe>)
  movs r3, #0
 80025a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025a8:	e002      	b.n	80025b0 <LoopCopyDataInit>

080025aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025ae:	3304      	adds	r3, #4

080025b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025b4:	d3f9      	bcc.n	80025aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025b6:	4a0a      	ldr	r2, [pc, #40]	; (80025e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80025b8:	4c0a      	ldr	r4, [pc, #40]	; (80025e4 <LoopForever+0x16>)
  movs r3, #0
 80025ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025bc:	e001      	b.n	80025c2 <LoopFillZerobss>

080025be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025c0:	3204      	adds	r2, #4

080025c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025c4:	d3fb      	bcc.n	80025be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80025c6:	f007 fba3 	bl	8009d10 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80025ca:	f7fe f8c9 	bl	8000760 <main>

080025ce <LoopForever>:

LoopForever:
    b LoopForever
 80025ce:	e7fe      	b.n	80025ce <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80025d0:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80025d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025d8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80025dc:	08009e00 	.word	0x08009e00
  ldr r2, =_sbss
 80025e0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80025e4:	20000788 	.word	0x20000788

080025e8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80025e8:	e7fe      	b.n	80025e8 <ADC1_IRQHandler>

080025ea <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025ea:	b580      	push	{r7, lr}
 80025ec:	b082      	sub	sp, #8
 80025ee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80025f0:	2300      	movs	r3, #0
 80025f2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025f4:	2003      	movs	r0, #3
 80025f6:	f001 fadf 	bl	8003bb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80025fa:	2000      	movs	r0, #0
 80025fc:	f000 f80e 	bl	800261c <HAL_InitTick>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d002      	beq.n	800260c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	71fb      	strb	r3, [r7, #7]
 800260a:	e001      	b.n	8002610 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800260c:	f7ff f966 	bl	80018dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002610:	79fb      	ldrb	r3, [r7, #7]
}
 8002612:	4618      	mov	r0, r3
 8002614:	3708      	adds	r7, #8
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
	...

0800261c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002624:	2300      	movs	r3, #0
 8002626:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002628:	4b17      	ldr	r3, [pc, #92]	; (8002688 <HAL_InitTick+0x6c>)
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d023      	beq.n	8002678 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002630:	4b16      	ldr	r3, [pc, #88]	; (800268c <HAL_InitTick+0x70>)
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	4b14      	ldr	r3, [pc, #80]	; (8002688 <HAL_InitTick+0x6c>)
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	4619      	mov	r1, r3
 800263a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800263e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002642:	fbb2 f3f3 	udiv	r3, r2, r3
 8002646:	4618      	mov	r0, r3
 8002648:	f001 faf9 	bl	8003c3e <HAL_SYSTICK_Config>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d10f      	bne.n	8002672 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2b0f      	cmp	r3, #15
 8002656:	d809      	bhi.n	800266c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002658:	2200      	movs	r2, #0
 800265a:	6879      	ldr	r1, [r7, #4]
 800265c:	f04f 30ff 	mov.w	r0, #4294967295
 8002660:	f001 fab5 	bl	8003bce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002664:	4a0a      	ldr	r2, [pc, #40]	; (8002690 <HAL_InitTick+0x74>)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6013      	str	r3, [r2, #0]
 800266a:	e007      	b.n	800267c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	73fb      	strb	r3, [r7, #15]
 8002670:	e004      	b.n	800267c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	73fb      	strb	r3, [r7, #15]
 8002676:	e001      	b.n	800267c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800267c:	7bfb      	ldrb	r3, [r7, #15]
}
 800267e:	4618      	mov	r0, r3
 8002680:	3710      	adds	r7, #16
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	2000000c 	.word	0x2000000c
 800268c:	20000004 	.word	0x20000004
 8002690:	20000008 	.word	0x20000008

08002694 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002698:	4b06      	ldr	r3, [pc, #24]	; (80026b4 <HAL_IncTick+0x20>)
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	461a      	mov	r2, r3
 800269e:	4b06      	ldr	r3, [pc, #24]	; (80026b8 <HAL_IncTick+0x24>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4413      	add	r3, r2
 80026a4:	4a04      	ldr	r2, [pc, #16]	; (80026b8 <HAL_IncTick+0x24>)
 80026a6:	6013      	str	r3, [r2, #0]
}
 80026a8:	bf00      	nop
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	2000000c 	.word	0x2000000c
 80026b8:	20000784 	.word	0x20000784

080026bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0
  return uwTick;
 80026c0:	4b03      	ldr	r3, [pc, #12]	; (80026d0 <HAL_GetTick+0x14>)
 80026c2:	681b      	ldr	r3, [r3, #0]
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop
 80026d0:	20000784 	.word	0x20000784

080026d4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	431a      	orrs	r2, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	609a      	str	r2, [r3, #8]
}
 80026ee:	bf00      	nop
 80026f0:	370c      	adds	r7, #12
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr

080026fa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80026fa:	b480      	push	{r7}
 80026fc:	b083      	sub	sp, #12
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
 8002702:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	431a      	orrs	r2, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	609a      	str	r2, [r3, #8]
}
 8002714:	bf00      	nop
 8002716:	370c      	adds	r7, #12
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002730:	4618      	mov	r0, r3
 8002732:	370c      	adds	r7, #12
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr

0800273c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800273c:	b480      	push	{r7}
 800273e:	b087      	sub	sp, #28
 8002740:	af00      	add	r7, sp, #0
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	60b9      	str	r1, [r7, #8]
 8002746:	607a      	str	r2, [r7, #4]
 8002748:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	3360      	adds	r3, #96	; 0x60
 800274e:	461a      	mov	r2, r3
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	4413      	add	r3, r2
 8002756:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	4b08      	ldr	r3, [pc, #32]	; (8002780 <LL_ADC_SetOffset+0x44>)
 800275e:	4013      	ands	r3, r2
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002766:	683a      	ldr	r2, [r7, #0]
 8002768:	430a      	orrs	r2, r1
 800276a:	4313      	orrs	r3, r2
 800276c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002774:	bf00      	nop
 8002776:	371c      	adds	r7, #28
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr
 8002780:	03fff000 	.word	0x03fff000

08002784 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002784:	b480      	push	{r7}
 8002786:	b085      	sub	sp, #20
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	3360      	adds	r3, #96	; 0x60
 8002792:	461a      	mov	r2, r3
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	4413      	add	r3, r2
 800279a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3714      	adds	r7, #20
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr

080027b0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b087      	sub	sp, #28
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	3360      	adds	r3, #96	; 0x60
 80027c0:	461a      	mov	r2, r3
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	4413      	add	r3, r2
 80027c8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	431a      	orrs	r2, r3
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80027da:	bf00      	nop
 80027dc:	371c      	adds	r7, #28
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr

080027e6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80027e6:	b480      	push	{r7}
 80027e8:	b083      	sub	sp, #12
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
 80027ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	695b      	ldr	r3, [r3, #20]
 80027f4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	431a      	orrs	r2, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	615a      	str	r2, [r3, #20]
}
 8002800:	bf00      	nop
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800280c:	b480      	push	{r7}
 800280e:	b087      	sub	sp, #28
 8002810:	af00      	add	r7, sp, #0
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	60b9      	str	r1, [r7, #8]
 8002816:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	3330      	adds	r3, #48	; 0x30
 800281c:	461a      	mov	r2, r3
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	0a1b      	lsrs	r3, r3, #8
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	f003 030c 	and.w	r3, r3, #12
 8002828:	4413      	add	r3, r2
 800282a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	f003 031f 	and.w	r3, r3, #31
 8002836:	211f      	movs	r1, #31
 8002838:	fa01 f303 	lsl.w	r3, r1, r3
 800283c:	43db      	mvns	r3, r3
 800283e:	401a      	ands	r2, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	0e9b      	lsrs	r3, r3, #26
 8002844:	f003 011f 	and.w	r1, r3, #31
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	f003 031f 	and.w	r3, r3, #31
 800284e:	fa01 f303 	lsl.w	r3, r1, r3
 8002852:	431a      	orrs	r2, r3
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002858:	bf00      	nop
 800285a:	371c      	adds	r7, #28
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr

08002864 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002864:	b480      	push	{r7}
 8002866:	b087      	sub	sp, #28
 8002868:	af00      	add	r7, sp, #0
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	60b9      	str	r1, [r7, #8]
 800286e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	3314      	adds	r3, #20
 8002874:	461a      	mov	r2, r3
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	0e5b      	lsrs	r3, r3, #25
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	f003 0304 	and.w	r3, r3, #4
 8002880:	4413      	add	r3, r2
 8002882:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	0d1b      	lsrs	r3, r3, #20
 800288c:	f003 031f 	and.w	r3, r3, #31
 8002890:	2107      	movs	r1, #7
 8002892:	fa01 f303 	lsl.w	r3, r1, r3
 8002896:	43db      	mvns	r3, r3
 8002898:	401a      	ands	r2, r3
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	0d1b      	lsrs	r3, r3, #20
 800289e:	f003 031f 	and.w	r3, r3, #31
 80028a2:	6879      	ldr	r1, [r7, #4]
 80028a4:	fa01 f303 	lsl.w	r3, r1, r3
 80028a8:	431a      	orrs	r2, r3
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80028ae:	bf00      	nop
 80028b0:	371c      	adds	r7, #28
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr
	...

080028bc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80028bc:	b480      	push	{r7}
 80028be:	b085      	sub	sp, #20
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	60b9      	str	r1, [r7, #8]
 80028c6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028d4:	43db      	mvns	r3, r3
 80028d6:	401a      	ands	r2, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f003 0318 	and.w	r3, r3, #24
 80028de:	4908      	ldr	r1, [pc, #32]	; (8002900 <LL_ADC_SetChannelSingleDiff+0x44>)
 80028e0:	40d9      	lsrs	r1, r3
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	400b      	ands	r3, r1
 80028e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028ea:	431a      	orrs	r2, r3
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80028f2:	bf00      	nop
 80028f4:	3714      	adds	r7, #20
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
 80028fe:	bf00      	nop
 8002900:	0007ffff 	.word	0x0007ffff

08002904 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002914:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	6093      	str	r3, [r2, #8]
}
 800291c:	bf00      	nop
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr

08002928 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002938:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800293c:	d101      	bne.n	8002942 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800293e:	2301      	movs	r3, #1
 8002940:	e000      	b.n	8002944 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002942:	2300      	movs	r3, #0
}
 8002944:	4618      	mov	r0, r3
 8002946:	370c      	adds	r7, #12
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr

08002950 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002960:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002964:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800296c:	bf00      	nop
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr

08002978 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002988:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800298c:	d101      	bne.n	8002992 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800298e:	2301      	movs	r3, #1
 8002990:	e000      	b.n	8002994 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002992:	2300      	movs	r3, #0
}
 8002994:	4618      	mov	r0, r3
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	f003 0301 	and.w	r3, r3, #1
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d101      	bne.n	80029b8 <LL_ADC_IsEnabled+0x18>
 80029b4:	2301      	movs	r3, #1
 80029b6:	e000      	b.n	80029ba <LL_ADC_IsEnabled+0x1a>
 80029b8:	2300      	movs	r3, #0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	370c      	adds	r7, #12
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr

080029c6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80029c6:	b480      	push	{r7}
 80029c8:	b083      	sub	sp, #12
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f003 0304 	and.w	r3, r3, #4
 80029d6:	2b04      	cmp	r3, #4
 80029d8:	d101      	bne.n	80029de <LL_ADC_REG_IsConversionOngoing+0x18>
 80029da:	2301      	movs	r3, #1
 80029dc:	e000      	b.n	80029e0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80029de:	2300      	movs	r3, #0
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	f003 0308 	and.w	r3, r3, #8
 80029fc:	2b08      	cmp	r3, #8
 80029fe:	d101      	bne.n	8002a04 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002a00:	2301      	movs	r3, #1
 8002a02:	e000      	b.n	8002a06 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	370c      	adds	r7, #12
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
	...

08002a14 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b088      	sub	sp, #32
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002a20:	2300      	movs	r3, #0
 8002a22:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d101      	bne.n	8002a2e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e12f      	b.n	8002c8e <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	691b      	ldr	r3, [r3, #16]
 8002a32:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d109      	bne.n	8002a50 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f7fe ff71 	bl	8001924 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7ff ff67 	bl	8002928 <LL_ADC_IsDeepPowerDownEnabled>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d004      	beq.n	8002a6a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7ff ff4d 	bl	8002904 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7ff ff82 	bl	8002978 <LL_ADC_IsInternalRegulatorEnabled>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d115      	bne.n	8002aa6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7ff ff66 	bl	8002950 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a84:	4b84      	ldr	r3, [pc, #528]	; (8002c98 <HAL_ADC_Init+0x284>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	099b      	lsrs	r3, r3, #6
 8002a8a:	4a84      	ldr	r2, [pc, #528]	; (8002c9c <HAL_ADC_Init+0x288>)
 8002a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a90:	099b      	lsrs	r3, r3, #6
 8002a92:	3301      	adds	r3, #1
 8002a94:	005b      	lsls	r3, r3, #1
 8002a96:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002a98:	e002      	b.n	8002aa0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	3b01      	subs	r3, #1
 8002a9e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d1f9      	bne.n	8002a9a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7ff ff64 	bl	8002978 <LL_ADC_IsInternalRegulatorEnabled>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d10d      	bne.n	8002ad2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aba:	f043 0210 	orr.w	r2, r3, #16
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ac6:	f043 0201 	orr.w	r2, r3, #1
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7ff ff75 	bl	80029c6 <LL_ADC_REG_IsConversionOngoing>
 8002adc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ae2:	f003 0310 	and.w	r3, r3, #16
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	f040 80c8 	bne.w	8002c7c <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	f040 80c4 	bne.w	8002c7c <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002af8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002afc:	f043 0202 	orr.w	r2, r3, #2
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f7ff ff49 	bl	80029a0 <LL_ADC_IsEnabled>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d10b      	bne.n	8002b2c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b14:	4862      	ldr	r0, [pc, #392]	; (8002ca0 <HAL_ADC_Init+0x28c>)
 8002b16:	f7ff ff43 	bl	80029a0 <LL_ADC_IsEnabled>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d105      	bne.n	8002b2c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	4619      	mov	r1, r3
 8002b26:	485f      	ldr	r0, [pc, #380]	; (8002ca4 <HAL_ADC_Init+0x290>)
 8002b28:	f7ff fdd4 	bl	80026d4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	7e5b      	ldrb	r3, [r3, #25]
 8002b30:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002b36:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002b3c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002b42:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b4a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d106      	bne.n	8002b68 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	045b      	lsls	r3, r3, #17
 8002b62:	69ba      	ldr	r2, [r7, #24]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d009      	beq.n	8002b84 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b74:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b7c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002b7e:	69ba      	ldr	r2, [r7, #24]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	68da      	ldr	r2, [r3, #12]
 8002b8a:	4b47      	ldr	r3, [pc, #284]	; (8002ca8 <HAL_ADC_Init+0x294>)
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	6812      	ldr	r2, [r2, #0]
 8002b92:	69b9      	ldr	r1, [r7, #24]
 8002b94:	430b      	orrs	r3, r1
 8002b96:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7ff ff12 	bl	80029c6 <LL_ADC_REG_IsConversionOngoing>
 8002ba2:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f7ff ff1f 	bl	80029ec <LL_ADC_INJ_IsConversionOngoing>
 8002bae:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d140      	bne.n	8002c38 <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d13d      	bne.n	8002c38 <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	7e1b      	ldrb	r3, [r3, #24]
 8002bc4:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002bc6:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002bce:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002bde:	f023 0306 	bic.w	r3, r3, #6
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	6812      	ldr	r2, [r2, #0]
 8002be6:	69b9      	ldr	r1, [r7, #24]
 8002be8:	430b      	orrs	r3, r1
 8002bea:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d118      	bne.n	8002c28 <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	691b      	ldr	r3, [r3, #16]
 8002bfc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002c00:	f023 0304 	bic.w	r3, r3, #4
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002c0c:	4311      	orrs	r1, r2
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002c12:	4311      	orrs	r1, r2
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002c18:	430a      	orrs	r2, r1
 8002c1a:	431a      	orrs	r2, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f042 0201 	orr.w	r2, r2, #1
 8002c24:	611a      	str	r2, [r3, #16]
 8002c26:	e007      	b.n	8002c38 <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	691a      	ldr	r2, [r3, #16]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f022 0201 	bic.w	r2, r2, #1
 8002c36:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	691b      	ldr	r3, [r3, #16]
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d10c      	bne.n	8002c5a <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c46:	f023 010f 	bic.w	r1, r3, #15
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	69db      	ldr	r3, [r3, #28]
 8002c4e:	1e5a      	subs	r2, r3, #1
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	430a      	orrs	r2, r1
 8002c56:	631a      	str	r2, [r3, #48]	; 0x30
 8002c58:	e007      	b.n	8002c6a <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f022 020f 	bic.w	r2, r2, #15
 8002c68:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c6e:	f023 0303 	bic.w	r3, r3, #3
 8002c72:	f043 0201 	orr.w	r2, r3, #1
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	659a      	str	r2, [r3, #88]	; 0x58
 8002c7a:	e007      	b.n	8002c8c <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c80:	f043 0210 	orr.w	r2, r3, #16
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002c8c:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3720      	adds	r7, #32
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	20000004 	.word	0x20000004
 8002c9c:	053e2d63 	.word	0x053e2d63
 8002ca0:	50040000 	.word	0x50040000
 8002ca4:	50040300 	.word	0x50040300
 8002ca8:	fff0c007 	.word	0xfff0c007

08002cac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b0b6      	sub	sp, #216	; 0xd8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d101      	bne.n	8002cce <HAL_ADC_ConfigChannel+0x22>
 8002cca:	2302      	movs	r3, #2
 8002ccc:	e3d5      	b.n	800347a <HAL_ADC_ConfigChannel+0x7ce>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f7ff fe73 	bl	80029c6 <LL_ADC_REG_IsConversionOngoing>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	f040 83ba 	bne.w	800345c <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	2b05      	cmp	r3, #5
 8002cee:	d824      	bhi.n	8002d3a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	3b02      	subs	r3, #2
 8002cf6:	2b03      	cmp	r3, #3
 8002cf8:	d81b      	bhi.n	8002d32 <HAL_ADC_ConfigChannel+0x86>
 8002cfa:	a201      	add	r2, pc, #4	; (adr r2, 8002d00 <HAL_ADC_ConfigChannel+0x54>)
 8002cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d00:	08002d11 	.word	0x08002d11
 8002d04:	08002d19 	.word	0x08002d19
 8002d08:	08002d21 	.word	0x08002d21
 8002d0c:	08002d29 	.word	0x08002d29
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	220c      	movs	r2, #12
 8002d14:	605a      	str	r2, [r3, #4]
          break;
 8002d16:	e011      	b.n	8002d3c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	2212      	movs	r2, #18
 8002d1c:	605a      	str	r2, [r3, #4]
          break;
 8002d1e:	e00d      	b.n	8002d3c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	2218      	movs	r2, #24
 8002d24:	605a      	str	r2, [r3, #4]
          break;
 8002d26:	e009      	b.n	8002d3c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d2e:	605a      	str	r2, [r3, #4]
          break;
 8002d30:	e004      	b.n	8002d3c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	2206      	movs	r2, #6
 8002d36:	605a      	str	r2, [r3, #4]
          break;
 8002d38:	e000      	b.n	8002d3c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002d3a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6818      	ldr	r0, [r3, #0]
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	6859      	ldr	r1, [r3, #4]
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	461a      	mov	r2, r3
 8002d4a:	f7ff fd5f 	bl	800280c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7ff fe37 	bl	80029c6 <LL_ADC_REG_IsConversionOngoing>
 8002d58:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7ff fe43 	bl	80029ec <LL_ADC_INJ_IsConversionOngoing>
 8002d66:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d6a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	f040 81c1 	bne.w	80030f6 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d74:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	f040 81bc 	bne.w	80030f6 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d86:	d10f      	bne.n	8002da8 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6818      	ldr	r0, [r3, #0]
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2200      	movs	r2, #0
 8002d92:	4619      	mov	r1, r3
 8002d94:	f7ff fd66 	bl	8002864 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7ff fd20 	bl	80027e6 <LL_ADC_SetSamplingTimeCommonConfig>
 8002da6:	e00e      	b.n	8002dc6 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6818      	ldr	r0, [r3, #0]
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	6819      	ldr	r1, [r3, #0]
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	461a      	mov	r2, r3
 8002db6:	f7ff fd55 	bl	8002864 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	2100      	movs	r1, #0
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7ff fd10 	bl	80027e6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	695a      	ldr	r2, [r3, #20]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	08db      	lsrs	r3, r3, #3
 8002dd2:	f003 0303 	and.w	r3, r3, #3
 8002dd6:	005b      	lsls	r3, r3, #1
 8002dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ddc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	691b      	ldr	r3, [r3, #16]
 8002de4:	2b04      	cmp	r3, #4
 8002de6:	d00a      	beq.n	8002dfe <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6818      	ldr	r0, [r3, #0]
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	6919      	ldr	r1, [r3, #16]
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002df8:	f7ff fca0 	bl	800273c <LL_ADC_SetOffset>
 8002dfc:	e17b      	b.n	80030f6 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	2100      	movs	r1, #0
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7ff fcbd 	bl	8002784 <LL_ADC_GetOffsetChannel>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d10a      	bne.n	8002e2a <HAL_ADC_ConfigChannel+0x17e>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	2100      	movs	r1, #0
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f7ff fcb2 	bl	8002784 <LL_ADC_GetOffsetChannel>
 8002e20:	4603      	mov	r3, r0
 8002e22:	0e9b      	lsrs	r3, r3, #26
 8002e24:	f003 021f 	and.w	r2, r3, #31
 8002e28:	e01e      	b.n	8002e68 <HAL_ADC_ConfigChannel+0x1bc>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2100      	movs	r1, #0
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7ff fca7 	bl	8002784 <LL_ADC_GetOffsetChannel>
 8002e36:	4603      	mov	r3, r0
 8002e38:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e3c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002e40:	fa93 f3a3 	rbit	r3, r3
 8002e44:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002e48:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002e4c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002e50:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d101      	bne.n	8002e5c <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8002e58:	2320      	movs	r3, #32
 8002e5a:	e004      	b.n	8002e66 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8002e5c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002e60:	fab3 f383 	clz	r3, r3
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d105      	bne.n	8002e80 <HAL_ADC_ConfigChannel+0x1d4>
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	0e9b      	lsrs	r3, r3, #26
 8002e7a:	f003 031f 	and.w	r3, r3, #31
 8002e7e:	e018      	b.n	8002eb2 <HAL_ADC_ConfigChannel+0x206>
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e88:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002e8c:	fa93 f3a3 	rbit	r3, r3
 8002e90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002e94:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002e9c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d101      	bne.n	8002ea8 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8002ea4:	2320      	movs	r3, #32
 8002ea6:	e004      	b.n	8002eb2 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8002ea8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002eac:	fab3 f383 	clz	r3, r3
 8002eb0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d106      	bne.n	8002ec4 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	2100      	movs	r1, #0
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f7ff fc76 	bl	80027b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2101      	movs	r1, #1
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f7ff fc5a 	bl	8002784 <LL_ADC_GetOffsetChannel>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d10a      	bne.n	8002ef0 <HAL_ADC_ConfigChannel+0x244>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2101      	movs	r1, #1
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f7ff fc4f 	bl	8002784 <LL_ADC_GetOffsetChannel>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	0e9b      	lsrs	r3, r3, #26
 8002eea:	f003 021f 	and.w	r2, r3, #31
 8002eee:	e01e      	b.n	8002f2e <HAL_ADC_ConfigChannel+0x282>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2101      	movs	r1, #1
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7ff fc44 	bl	8002784 <LL_ADC_GetOffsetChannel>
 8002efc:	4603      	mov	r3, r0
 8002efe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f02:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002f06:	fa93 f3a3 	rbit	r3, r3
 8002f0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002f0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002f12:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002f16:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d101      	bne.n	8002f22 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8002f1e:	2320      	movs	r3, #32
 8002f20:	e004      	b.n	8002f2c <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8002f22:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002f26:	fab3 f383 	clz	r3, r3
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d105      	bne.n	8002f46 <HAL_ADC_ConfigChannel+0x29a>
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	0e9b      	lsrs	r3, r3, #26
 8002f40:	f003 031f 	and.w	r3, r3, #31
 8002f44:	e018      	b.n	8002f78 <HAL_ADC_ConfigChannel+0x2cc>
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f4e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002f52:	fa93 f3a3 	rbit	r3, r3
 8002f56:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002f5a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002f5e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002f62:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d101      	bne.n	8002f6e <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8002f6a:	2320      	movs	r3, #32
 8002f6c:	e004      	b.n	8002f78 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8002f6e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002f72:	fab3 f383 	clz	r3, r3
 8002f76:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d106      	bne.n	8002f8a <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2200      	movs	r2, #0
 8002f82:	2101      	movs	r1, #1
 8002f84:	4618      	mov	r0, r3
 8002f86:	f7ff fc13 	bl	80027b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2102      	movs	r1, #2
 8002f90:	4618      	mov	r0, r3
 8002f92:	f7ff fbf7 	bl	8002784 <LL_ADC_GetOffsetChannel>
 8002f96:	4603      	mov	r3, r0
 8002f98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d10a      	bne.n	8002fb6 <HAL_ADC_ConfigChannel+0x30a>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2102      	movs	r1, #2
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f7ff fbec 	bl	8002784 <LL_ADC_GetOffsetChannel>
 8002fac:	4603      	mov	r3, r0
 8002fae:	0e9b      	lsrs	r3, r3, #26
 8002fb0:	f003 021f 	and.w	r2, r3, #31
 8002fb4:	e01e      	b.n	8002ff4 <HAL_ADC_ConfigChannel+0x348>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2102      	movs	r1, #2
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f7ff fbe1 	bl	8002784 <LL_ADC_GetOffsetChannel>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002fcc:	fa93 f3a3 	rbit	r3, r3
 8002fd0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002fd4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002fd8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002fdc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d101      	bne.n	8002fe8 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8002fe4:	2320      	movs	r3, #32
 8002fe6:	e004      	b.n	8002ff2 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8002fe8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002fec:	fab3 f383 	clz	r3, r3
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d105      	bne.n	800300c <HAL_ADC_ConfigChannel+0x360>
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	0e9b      	lsrs	r3, r3, #26
 8003006:	f003 031f 	and.w	r3, r3, #31
 800300a:	e016      	b.n	800303a <HAL_ADC_ConfigChannel+0x38e>
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003014:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003018:	fa93 f3a3 	rbit	r3, r3
 800301c:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800301e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003020:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003024:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003028:	2b00      	cmp	r3, #0
 800302a:	d101      	bne.n	8003030 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 800302c:	2320      	movs	r3, #32
 800302e:	e004      	b.n	800303a <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8003030:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003034:	fab3 f383 	clz	r3, r3
 8003038:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800303a:	429a      	cmp	r2, r3
 800303c:	d106      	bne.n	800304c <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2200      	movs	r2, #0
 8003044:	2102      	movs	r1, #2
 8003046:	4618      	mov	r0, r3
 8003048:	f7ff fbb2 	bl	80027b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2103      	movs	r1, #3
 8003052:	4618      	mov	r0, r3
 8003054:	f7ff fb96 	bl	8002784 <LL_ADC_GetOffsetChannel>
 8003058:	4603      	mov	r3, r0
 800305a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800305e:	2b00      	cmp	r3, #0
 8003060:	d10a      	bne.n	8003078 <HAL_ADC_ConfigChannel+0x3cc>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2103      	movs	r1, #3
 8003068:	4618      	mov	r0, r3
 800306a:	f7ff fb8b 	bl	8002784 <LL_ADC_GetOffsetChannel>
 800306e:	4603      	mov	r3, r0
 8003070:	0e9b      	lsrs	r3, r3, #26
 8003072:	f003 021f 	and.w	r2, r3, #31
 8003076:	e017      	b.n	80030a8 <HAL_ADC_ConfigChannel+0x3fc>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2103      	movs	r1, #3
 800307e:	4618      	mov	r0, r3
 8003080:	f7ff fb80 	bl	8002784 <LL_ADC_GetOffsetChannel>
 8003084:	4603      	mov	r3, r0
 8003086:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003088:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800308a:	fa93 f3a3 	rbit	r3, r3
 800308e:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003090:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003092:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003094:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003096:	2b00      	cmp	r3, #0
 8003098:	d101      	bne.n	800309e <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800309a:	2320      	movs	r3, #32
 800309c:	e003      	b.n	80030a6 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 800309e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030a0:	fab3 f383 	clz	r3, r3
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d105      	bne.n	80030c0 <HAL_ADC_ConfigChannel+0x414>
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	0e9b      	lsrs	r3, r3, #26
 80030ba:	f003 031f 	and.w	r3, r3, #31
 80030be:	e011      	b.n	80030e4 <HAL_ADC_ConfigChannel+0x438>
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80030c8:	fa93 f3a3 	rbit	r3, r3
 80030cc:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80030ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80030d0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80030d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d101      	bne.n	80030dc <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 80030d8:	2320      	movs	r3, #32
 80030da:	e003      	b.n	80030e4 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 80030dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030de:	fab3 f383 	clz	r3, r3
 80030e2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d106      	bne.n	80030f6 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2200      	movs	r2, #0
 80030ee:	2103      	movs	r1, #3
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7ff fb5d 	bl	80027b0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f7ff fc50 	bl	80029a0 <LL_ADC_IsEnabled>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	f040 8140 	bne.w	8003388 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6818      	ldr	r0, [r3, #0]
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	6819      	ldr	r1, [r3, #0]
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	461a      	mov	r2, r3
 8003116:	f7ff fbd1 	bl	80028bc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	4a8f      	ldr	r2, [pc, #572]	; (800335c <HAL_ADC_ConfigChannel+0x6b0>)
 8003120:	4293      	cmp	r3, r2
 8003122:	f040 8131 	bne.w	8003388 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003132:	2b00      	cmp	r3, #0
 8003134:	d10b      	bne.n	800314e <HAL_ADC_ConfigChannel+0x4a2>
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	0e9b      	lsrs	r3, r3, #26
 800313c:	3301      	adds	r3, #1
 800313e:	f003 031f 	and.w	r3, r3, #31
 8003142:	2b09      	cmp	r3, #9
 8003144:	bf94      	ite	ls
 8003146:	2301      	movls	r3, #1
 8003148:	2300      	movhi	r3, #0
 800314a:	b2db      	uxtb	r3, r3
 800314c:	e019      	b.n	8003182 <HAL_ADC_ConfigChannel+0x4d6>
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003154:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003156:	fa93 f3a3 	rbit	r3, r3
 800315a:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800315c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800315e:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003160:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003162:	2b00      	cmp	r3, #0
 8003164:	d101      	bne.n	800316a <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8003166:	2320      	movs	r3, #32
 8003168:	e003      	b.n	8003172 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 800316a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800316c:	fab3 f383 	clz	r3, r3
 8003170:	b2db      	uxtb	r3, r3
 8003172:	3301      	adds	r3, #1
 8003174:	f003 031f 	and.w	r3, r3, #31
 8003178:	2b09      	cmp	r3, #9
 800317a:	bf94      	ite	ls
 800317c:	2301      	movls	r3, #1
 800317e:	2300      	movhi	r3, #0
 8003180:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003182:	2b00      	cmp	r3, #0
 8003184:	d079      	beq.n	800327a <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800318e:	2b00      	cmp	r3, #0
 8003190:	d107      	bne.n	80031a2 <HAL_ADC_ConfigChannel+0x4f6>
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	0e9b      	lsrs	r3, r3, #26
 8003198:	3301      	adds	r3, #1
 800319a:	069b      	lsls	r3, r3, #26
 800319c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031a0:	e015      	b.n	80031ce <HAL_ADC_ConfigChannel+0x522>
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031aa:	fa93 f3a3 	rbit	r3, r3
 80031ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80031b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031b2:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80031b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d101      	bne.n	80031be <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 80031ba:	2320      	movs	r3, #32
 80031bc:	e003      	b.n	80031c6 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 80031be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031c0:	fab3 f383 	clz	r3, r3
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	3301      	adds	r3, #1
 80031c8:	069b      	lsls	r3, r3, #26
 80031ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d109      	bne.n	80031ee <HAL_ADC_ConfigChannel+0x542>
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	0e9b      	lsrs	r3, r3, #26
 80031e0:	3301      	adds	r3, #1
 80031e2:	f003 031f 	and.w	r3, r3, #31
 80031e6:	2101      	movs	r1, #1
 80031e8:	fa01 f303 	lsl.w	r3, r1, r3
 80031ec:	e017      	b.n	800321e <HAL_ADC_ConfigChannel+0x572>
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031f6:	fa93 f3a3 	rbit	r3, r3
 80031fa:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80031fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031fe:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003200:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003202:	2b00      	cmp	r3, #0
 8003204:	d101      	bne.n	800320a <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8003206:	2320      	movs	r3, #32
 8003208:	e003      	b.n	8003212 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 800320a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800320c:	fab3 f383 	clz	r3, r3
 8003210:	b2db      	uxtb	r3, r3
 8003212:	3301      	adds	r3, #1
 8003214:	f003 031f 	and.w	r3, r3, #31
 8003218:	2101      	movs	r1, #1
 800321a:	fa01 f303 	lsl.w	r3, r1, r3
 800321e:	ea42 0103 	orr.w	r1, r2, r3
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800322a:	2b00      	cmp	r3, #0
 800322c:	d10a      	bne.n	8003244 <HAL_ADC_ConfigChannel+0x598>
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	0e9b      	lsrs	r3, r3, #26
 8003234:	3301      	adds	r3, #1
 8003236:	f003 021f 	and.w	r2, r3, #31
 800323a:	4613      	mov	r3, r2
 800323c:	005b      	lsls	r3, r3, #1
 800323e:	4413      	add	r3, r2
 8003240:	051b      	lsls	r3, r3, #20
 8003242:	e018      	b.n	8003276 <HAL_ADC_ConfigChannel+0x5ca>
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800324a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800324c:	fa93 f3a3 	rbit	r3, r3
 8003250:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003254:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003256:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003258:	2b00      	cmp	r3, #0
 800325a:	d101      	bne.n	8003260 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 800325c:	2320      	movs	r3, #32
 800325e:	e003      	b.n	8003268 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8003260:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003262:	fab3 f383 	clz	r3, r3
 8003266:	b2db      	uxtb	r3, r3
 8003268:	3301      	adds	r3, #1
 800326a:	f003 021f 	and.w	r2, r3, #31
 800326e:	4613      	mov	r3, r2
 8003270:	005b      	lsls	r3, r3, #1
 8003272:	4413      	add	r3, r2
 8003274:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003276:	430b      	orrs	r3, r1
 8003278:	e081      	b.n	800337e <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003282:	2b00      	cmp	r3, #0
 8003284:	d107      	bne.n	8003296 <HAL_ADC_ConfigChannel+0x5ea>
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	0e9b      	lsrs	r3, r3, #26
 800328c:	3301      	adds	r3, #1
 800328e:	069b      	lsls	r3, r3, #26
 8003290:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003294:	e015      	b.n	80032c2 <HAL_ADC_ConfigChannel+0x616>
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800329c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800329e:	fa93 f3a3 	rbit	r3, r3
 80032a2:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80032a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032a6:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80032a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d101      	bne.n	80032b2 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 80032ae:	2320      	movs	r3, #32
 80032b0:	e003      	b.n	80032ba <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 80032b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032b4:	fab3 f383 	clz	r3, r3
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	3301      	adds	r3, #1
 80032bc:	069b      	lsls	r3, r3, #26
 80032be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d109      	bne.n	80032e2 <HAL_ADC_ConfigChannel+0x636>
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	0e9b      	lsrs	r3, r3, #26
 80032d4:	3301      	adds	r3, #1
 80032d6:	f003 031f 	and.w	r3, r3, #31
 80032da:	2101      	movs	r1, #1
 80032dc:	fa01 f303 	lsl.w	r3, r1, r3
 80032e0:	e017      	b.n	8003312 <HAL_ADC_ConfigChannel+0x666>
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e8:	6a3b      	ldr	r3, [r7, #32]
 80032ea:	fa93 f3a3 	rbit	r3, r3
 80032ee:	61fb      	str	r3, [r7, #28]
  return result;
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80032f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d101      	bne.n	80032fe <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 80032fa:	2320      	movs	r3, #32
 80032fc:	e003      	b.n	8003306 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 80032fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003300:	fab3 f383 	clz	r3, r3
 8003304:	b2db      	uxtb	r3, r3
 8003306:	3301      	adds	r3, #1
 8003308:	f003 031f 	and.w	r3, r3, #31
 800330c:	2101      	movs	r1, #1
 800330e:	fa01 f303 	lsl.w	r3, r1, r3
 8003312:	ea42 0103 	orr.w	r1, r2, r3
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800331e:	2b00      	cmp	r3, #0
 8003320:	d10d      	bne.n	800333e <HAL_ADC_ConfigChannel+0x692>
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	0e9b      	lsrs	r3, r3, #26
 8003328:	3301      	adds	r3, #1
 800332a:	f003 021f 	and.w	r2, r3, #31
 800332e:	4613      	mov	r3, r2
 8003330:	005b      	lsls	r3, r3, #1
 8003332:	4413      	add	r3, r2
 8003334:	3b1e      	subs	r3, #30
 8003336:	051b      	lsls	r3, r3, #20
 8003338:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800333c:	e01e      	b.n	800337c <HAL_ADC_ConfigChannel+0x6d0>
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	fa93 f3a3 	rbit	r3, r3
 800334a:	613b      	str	r3, [r7, #16]
  return result;
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003350:	69bb      	ldr	r3, [r7, #24]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d104      	bne.n	8003360 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8003356:	2320      	movs	r3, #32
 8003358:	e006      	b.n	8003368 <HAL_ADC_ConfigChannel+0x6bc>
 800335a:	bf00      	nop
 800335c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	fab3 f383 	clz	r3, r3
 8003366:	b2db      	uxtb	r3, r3
 8003368:	3301      	adds	r3, #1
 800336a:	f003 021f 	and.w	r2, r3, #31
 800336e:	4613      	mov	r3, r2
 8003370:	005b      	lsls	r3, r3, #1
 8003372:	4413      	add	r3, r2
 8003374:	3b1e      	subs	r3, #30
 8003376:	051b      	lsls	r3, r3, #20
 8003378:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800337c:	430b      	orrs	r3, r1
 800337e:	683a      	ldr	r2, [r7, #0]
 8003380:	6892      	ldr	r2, [r2, #8]
 8003382:	4619      	mov	r1, r3
 8003384:	f7ff fa6e 	bl	8002864 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	4b3d      	ldr	r3, [pc, #244]	; (8003484 <HAL_ADC_ConfigChannel+0x7d8>)
 800338e:	4013      	ands	r3, r2
 8003390:	2b00      	cmp	r3, #0
 8003392:	d06c      	beq.n	800346e <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003394:	483c      	ldr	r0, [pc, #240]	; (8003488 <HAL_ADC_ConfigChannel+0x7dc>)
 8003396:	f7ff f9c3 	bl	8002720 <LL_ADC_GetCommonPathInternalCh>
 800339a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a3a      	ldr	r2, [pc, #232]	; (800348c <HAL_ADC_ConfigChannel+0x7e0>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d127      	bne.n	80033f8 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80033a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80033ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d121      	bne.n	80033f8 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a35      	ldr	r2, [pc, #212]	; (8003490 <HAL_ADC_ConfigChannel+0x7e4>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d157      	bne.n	800346e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80033be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80033c2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80033c6:	4619      	mov	r1, r3
 80033c8:	482f      	ldr	r0, [pc, #188]	; (8003488 <HAL_ADC_ConfigChannel+0x7dc>)
 80033ca:	f7ff f996 	bl	80026fa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80033ce:	4b31      	ldr	r3, [pc, #196]	; (8003494 <HAL_ADC_ConfigChannel+0x7e8>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	099b      	lsrs	r3, r3, #6
 80033d4:	4a30      	ldr	r2, [pc, #192]	; (8003498 <HAL_ADC_ConfigChannel+0x7ec>)
 80033d6:	fba2 2303 	umull	r2, r3, r2, r3
 80033da:	099b      	lsrs	r3, r3, #6
 80033dc:	1c5a      	adds	r2, r3, #1
 80033de:	4613      	mov	r3, r2
 80033e0:	005b      	lsls	r3, r3, #1
 80033e2:	4413      	add	r3, r2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80033e8:	e002      	b.n	80033f0 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	3b01      	subs	r3, #1
 80033ee:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d1f9      	bne.n	80033ea <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80033f6:	e03a      	b.n	800346e <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a27      	ldr	r2, [pc, #156]	; (800349c <HAL_ADC_ConfigChannel+0x7f0>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d113      	bne.n	800342a <HAL_ADC_ConfigChannel+0x77e>
 8003402:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003406:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d10d      	bne.n	800342a <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a1f      	ldr	r2, [pc, #124]	; (8003490 <HAL_ADC_ConfigChannel+0x7e4>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d12a      	bne.n	800346e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003418:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800341c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003420:	4619      	mov	r1, r3
 8003422:	4819      	ldr	r0, [pc, #100]	; (8003488 <HAL_ADC_ConfigChannel+0x7dc>)
 8003424:	f7ff f969 	bl	80026fa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003428:	e021      	b.n	800346e <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a1c      	ldr	r2, [pc, #112]	; (80034a0 <HAL_ADC_ConfigChannel+0x7f4>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d11c      	bne.n	800346e <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003434:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003438:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800343c:	2b00      	cmp	r3, #0
 800343e:	d116      	bne.n	800346e <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a12      	ldr	r2, [pc, #72]	; (8003490 <HAL_ADC_ConfigChannel+0x7e4>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d111      	bne.n	800346e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800344a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800344e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003452:	4619      	mov	r1, r3
 8003454:	480c      	ldr	r0, [pc, #48]	; (8003488 <HAL_ADC_ConfigChannel+0x7dc>)
 8003456:	f7ff f950 	bl	80026fa <LL_ADC_SetCommonPathInternalCh>
 800345a:	e008      	b.n	800346e <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003460:	f043 0220 	orr.w	r2, r3, #32
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8003476:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800347a:	4618      	mov	r0, r3
 800347c:	37d8      	adds	r7, #216	; 0xd8
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	80080000 	.word	0x80080000
 8003488:	50040300 	.word	0x50040300
 800348c:	c7520000 	.word	0xc7520000
 8003490:	50040000 	.word	0x50040000
 8003494:	20000004 	.word	0x20000004
 8003498:	053e2d63 	.word	0x053e2d63
 800349c:	cb840000 	.word	0xcb840000
 80034a0:	80000001 	.word	0x80000001

080034a4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d101      	bne.n	80034b6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e0ed      	b.n	8003692 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d102      	bne.n	80034c8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f7fe faa0 	bl	8001a08 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f042 0201 	orr.w	r2, r2, #1
 80034d6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80034d8:	f7ff f8f0 	bl	80026bc <HAL_GetTick>
 80034dc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80034de:	e012      	b.n	8003506 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80034e0:	f7ff f8ec 	bl	80026bc <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	2b0a      	cmp	r3, #10
 80034ec:	d90b      	bls.n	8003506 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2205      	movs	r2, #5
 80034fe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e0c5      	b.n	8003692 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	f003 0301 	and.w	r3, r3, #1
 8003510:	2b00      	cmp	r3, #0
 8003512:	d0e5      	beq.n	80034e0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f022 0202 	bic.w	r2, r2, #2
 8003522:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003524:	f7ff f8ca 	bl	80026bc <HAL_GetTick>
 8003528:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800352a:	e012      	b.n	8003552 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800352c:	f7ff f8c6 	bl	80026bc <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	2b0a      	cmp	r3, #10
 8003538:	d90b      	bls.n	8003552 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2205      	movs	r2, #5
 800354a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e09f      	b.n	8003692 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f003 0302 	and.w	r3, r3, #2
 800355c:	2b00      	cmp	r3, #0
 800355e:	d1e5      	bne.n	800352c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	7e1b      	ldrb	r3, [r3, #24]
 8003564:	2b01      	cmp	r3, #1
 8003566:	d108      	bne.n	800357a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003576:	601a      	str	r2, [r3, #0]
 8003578:	e007      	b.n	800358a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003588:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	7e5b      	ldrb	r3, [r3, #25]
 800358e:	2b01      	cmp	r3, #1
 8003590:	d108      	bne.n	80035a4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035a0:	601a      	str	r2, [r3, #0]
 80035a2:	e007      	b.n	80035b4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	7e9b      	ldrb	r3, [r3, #26]
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d108      	bne.n	80035ce <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f042 0220 	orr.w	r2, r2, #32
 80035ca:	601a      	str	r2, [r3, #0]
 80035cc:	e007      	b.n	80035de <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f022 0220 	bic.w	r2, r2, #32
 80035dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	7edb      	ldrb	r3, [r3, #27]
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d108      	bne.n	80035f8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f022 0210 	bic.w	r2, r2, #16
 80035f4:	601a      	str	r2, [r3, #0]
 80035f6:	e007      	b.n	8003608 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f042 0210 	orr.w	r2, r2, #16
 8003606:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	7f1b      	ldrb	r3, [r3, #28]
 800360c:	2b01      	cmp	r3, #1
 800360e:	d108      	bne.n	8003622 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f042 0208 	orr.w	r2, r2, #8
 800361e:	601a      	str	r2, [r3, #0]
 8003620:	e007      	b.n	8003632 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f022 0208 	bic.w	r2, r2, #8
 8003630:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	7f5b      	ldrb	r3, [r3, #29]
 8003636:	2b01      	cmp	r3, #1
 8003638:	d108      	bne.n	800364c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f042 0204 	orr.w	r2, r2, #4
 8003648:	601a      	str	r2, [r3, #0]
 800364a:	e007      	b.n	800365c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f022 0204 	bic.w	r2, r2, #4
 800365a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	689a      	ldr	r2, [r3, #8]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	431a      	orrs	r2, r3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	431a      	orrs	r2, r3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	695b      	ldr	r3, [r3, #20]
 8003670:	ea42 0103 	orr.w	r1, r2, r3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	1e5a      	subs	r2, r3, #1
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	430a      	orrs	r2, r1
 8003680:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003690:	2300      	movs	r3, #0
}
 8003692:	4618      	mov	r0, r3
 8003694:	3710      	adds	r7, #16
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
	...

0800369c <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80036a4:	4b05      	ldr	r3, [pc, #20]	; (80036bc <LL_EXTI_EnableIT_0_31+0x20>)
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	4904      	ldr	r1, [pc, #16]	; (80036bc <LL_EXTI_EnableIT_0_31+0x20>)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	600b      	str	r3, [r1, #0]
}
 80036b0:	bf00      	nop
 80036b2:	370c      	adds	r7, #12
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr
 80036bc:	40010400 	.word	0x40010400

080036c0 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80036c8:	4b06      	ldr	r3, [pc, #24]	; (80036e4 <LL_EXTI_DisableIT_0_31+0x24>)
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	43db      	mvns	r3, r3
 80036d0:	4904      	ldr	r1, [pc, #16]	; (80036e4 <LL_EXTI_DisableIT_0_31+0x24>)
 80036d2:	4013      	ands	r3, r2
 80036d4:	600b      	str	r3, [r1, #0]
}
 80036d6:	bf00      	nop
 80036d8:	370c      	adds	r7, #12
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr
 80036e2:	bf00      	nop
 80036e4:	40010400 	.word	0x40010400

080036e8 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 80036f0:	4b05      	ldr	r3, [pc, #20]	; (8003708 <LL_EXTI_EnableEvent_0_31+0x20>)
 80036f2:	685a      	ldr	r2, [r3, #4]
 80036f4:	4904      	ldr	r1, [pc, #16]	; (8003708 <LL_EXTI_EnableEvent_0_31+0x20>)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	604b      	str	r3, [r1, #4]

}
 80036fc:	bf00      	nop
 80036fe:	370c      	adds	r7, #12
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr
 8003708:	40010400 	.word	0x40010400

0800370c <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8003714:	4b06      	ldr	r3, [pc, #24]	; (8003730 <LL_EXTI_DisableEvent_0_31+0x24>)
 8003716:	685a      	ldr	r2, [r3, #4]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	43db      	mvns	r3, r3
 800371c:	4904      	ldr	r1, [pc, #16]	; (8003730 <LL_EXTI_DisableEvent_0_31+0x24>)
 800371e:	4013      	ands	r3, r2
 8003720:	604b      	str	r3, [r1, #4]
}
 8003722:	bf00      	nop
 8003724:	370c      	adds	r7, #12
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr
 800372e:	bf00      	nop
 8003730:	40010400 	.word	0x40010400

08003734 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800373c:	4b05      	ldr	r3, [pc, #20]	; (8003754 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800373e:	689a      	ldr	r2, [r3, #8]
 8003740:	4904      	ldr	r1, [pc, #16]	; (8003754 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4313      	orrs	r3, r2
 8003746:	608b      	str	r3, [r1, #8]

}
 8003748:	bf00      	nop
 800374a:	370c      	adds	r7, #12
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr
 8003754:	40010400 	.word	0x40010400

08003758 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8003760:	4b06      	ldr	r3, [pc, #24]	; (800377c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8003762:	689a      	ldr	r2, [r3, #8]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	43db      	mvns	r3, r3
 8003768:	4904      	ldr	r1, [pc, #16]	; (800377c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800376a:	4013      	ands	r3, r2
 800376c:	608b      	str	r3, [r1, #8]

}
 800376e:	bf00      	nop
 8003770:	370c      	adds	r7, #12
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	40010400 	.word	0x40010400

08003780 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8003788:	4b05      	ldr	r3, [pc, #20]	; (80037a0 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800378a:	68da      	ldr	r2, [r3, #12]
 800378c:	4904      	ldr	r1, [pc, #16]	; (80037a0 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4313      	orrs	r3, r2
 8003792:	60cb      	str	r3, [r1, #12]
}
 8003794:	bf00      	nop
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr
 80037a0:	40010400 	.word	0x40010400

080037a4 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80037ac:	4b06      	ldr	r3, [pc, #24]	; (80037c8 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80037ae:	68da      	ldr	r2, [r3, #12]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	43db      	mvns	r3, r3
 80037b4:	4904      	ldr	r1, [pc, #16]	; (80037c8 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80037b6:	4013      	ands	r3, r2
 80037b8:	60cb      	str	r3, [r1, #12]
}
 80037ba:	bf00      	nop
 80037bc:	370c      	adds	r7, #12
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr
 80037c6:	bf00      	nop
 80037c8:	40010400 	.word	0x40010400

080037cc <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 80037d4:	4a04      	ldr	r2, [pc, #16]	; (80037e8 <LL_EXTI_ClearFlag_0_31+0x1c>)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6153      	str	r3, [r2, #20]
}
 80037da:	bf00      	nop
 80037dc:	370c      	adds	r7, #12
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr
 80037e6:	bf00      	nop
 80037e8:	40010400 	.word	0x40010400

080037ec <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b088      	sub	sp, #32
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 80037f4:	2300      	movs	r3, #0
 80037f6:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80037f8:	2300      	movs	r3, #0
 80037fa:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d102      	bne.n	8003808 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	77fb      	strb	r3, [r7, #31]
 8003806:	e0d1      	b.n	80039ac <HAL_COMP_Init+0x1c0>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003812:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003816:	d102      	bne.n	800381e <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	77fb      	strb	r3, [r7, #31]
 800381c:	e0c6      	b.n	80039ac <HAL_COMP_Init+0x1c0>
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));
#if defined(COMP2)
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));
#endif

    if(hcomp->State == HAL_COMP_STATE_RESET)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003824:	b2db      	uxtb	r3, r3
 8003826:	2b00      	cmp	r3, #0
 8003828:	d115      	bne.n	8003856 <HAL_COMP_Init+0x6a>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	629a      	str	r2, [r3, #40]	; 0x28
      /*       COMP clock enable must be implemented by user                  */
      /*       in "HAL_COMP_MspInit()".                                       */
      /*       Therefore, for compatibility anticipation, it is recommended   */
      /*       to implement __HAL_RCC_SYSCFG_CLK_ENABLE()                     */
      /*       in "HAL_COMP_MspInit()".                                       */
      __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003838:	4b5f      	ldr	r3, [pc, #380]	; (80039b8 <HAL_COMP_Init+0x1cc>)
 800383a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800383c:	4a5e      	ldr	r2, [pc, #376]	; (80039b8 <HAL_COMP_Init+0x1cc>)
 800383e:	f043 0301 	orr.w	r3, r3, #1
 8003842:	6613      	str	r3, [r2, #96]	; 0x60
 8003844:	4b5c      	ldr	r3, [pc, #368]	; (80039b8 <HAL_COMP_Init+0x1cc>)
 8003846:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003848:	f003 0301 	and.w	r3, r3, #1
 800384c:	60bb      	str	r3, [r7, #8]
 800384e:	68bb      	ldr	r3, [r7, #8]

      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
      /* Init the low level hardware */
      HAL_COMP_MspInit(hcomp);
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f7fe f91d 	bl	8001a90 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003860:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.NonInvertingInput
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	68da      	ldr	r2, [r3, #12]
               | hcomp->Init.InvertingInput
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	69db      	ldr	r3, [r3, #28]
 8003870:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	695b      	ldr	r3, [r3, #20]
 8003876:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	699b      	ldr	r3, [r3, #24]
 800387c:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (  hcomp->Init.NonInvertingInput
 8003882:	4313      	orrs	r3, r2
 8003884:	617b      	str	r3, [r7, #20]
               COMP_CSR_BLANKING | COMP_CSR_BRGEN    | COMP_CSR_SCALEN  | COMP_CSR_INMESEL,
               tmp_csr
              );
#endif /* COMP_CSR_WINMODE */
#else
    MODIFY_REG(hcomp->Instance->CSR,
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	4b4b      	ldr	r3, [pc, #300]	; (80039bc <HAL_COMP_Init+0x1d0>)
 800388e:	4013      	ands	r3, r2
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	6812      	ldr	r2, [r2, #0]
 8003894:	6979      	ldr	r1, [r7, #20]
 8003896:	430b      	orrs	r3, r1
 8003898:	6013      	str	r3, [r2, #0]
#if defined(COMP2)
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038a2:	d106      	bne.n	80038b2 <HAL_COMP_Init+0xc6>
    {
      SET_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 80038a4:	4b46      	ldr	r3, [pc, #280]	; (80039c0 <HAL_COMP_Init+0x1d4>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a45      	ldr	r2, [pc, #276]	; (80039c0 <HAL_COMP_Init+0x1d4>)
 80038aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038ae:	6013      	str	r3, [r2, #0]
 80038b0:	e005      	b.n	80038be <HAL_COMP_Init+0xd2>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 80038b2:	4b43      	ldr	r3, [pc, #268]	; (80039c0 <HAL_COMP_Init+0x1d4>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a42      	ldr	r2, [pc, #264]	; (80039c0 <HAL_COMP_Init+0x1d4>)
 80038b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80038bc:	6013      	str	r3, [r2, #0]
    }
#endif /* COMP2 */

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d016      	beq.n	80038fa <HAL_COMP_Init+0x10e>
 80038cc:	69bb      	ldr	r3, [r7, #24]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d113      	bne.n	80038fa <HAL_COMP_Init+0x10e>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80038d2:	4b3c      	ldr	r3, [pc, #240]	; (80039c4 <HAL_COMP_Init+0x1d8>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	099b      	lsrs	r3, r3, #6
 80038d8:	4a3b      	ldr	r2, [pc, #236]	; (80039c8 <HAL_COMP_Init+0x1dc>)
 80038da:	fba2 2303 	umull	r2, r3, r2, r3
 80038de:	099b      	lsrs	r3, r3, #6
 80038e0:	1c5a      	adds	r2, r3, #1
 80038e2:	4613      	mov	r3, r2
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	4413      	add	r3, r2
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 80038ec:	e002      	b.n	80038f4 <HAL_COMP_Init+0x108>
      {
        wait_loop_index--;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	3b01      	subs	r3, #1
 80038f2:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d1f9      	bne.n	80038ee <HAL_COMP_Init+0x102>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a33      	ldr	r2, [pc, #204]	; (80039cc <HAL_COMP_Init+0x1e0>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d102      	bne.n	800390a <HAL_COMP_Init+0x11e>
 8003904:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003908:	e001      	b.n	800390e <HAL_COMP_Init+0x122>
 800390a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800390e:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a1b      	ldr	r3, [r3, #32]
 8003914:	f003 0303 	and.w	r3, r3, #3
 8003918:	2b00      	cmp	r3, #0
 800391a:	d037      	beq.n	800398c <HAL_COMP_Init+0x1a0>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6a1b      	ldr	r3, [r3, #32]
 8003920:	f003 0310 	and.w	r3, r3, #16
 8003924:	2b00      	cmp	r3, #0
 8003926:	d003      	beq.n	8003930 <HAL_COMP_Init+0x144>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8003928:	6938      	ldr	r0, [r7, #16]
 800392a:	f7ff ff03 	bl	8003734 <LL_EXTI_EnableRisingTrig_0_31>
 800392e:	e002      	b.n	8003936 <HAL_COMP_Init+0x14a>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8003930:	6938      	ldr	r0, [r7, #16]
 8003932:	f7ff ff11 	bl	8003758 <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6a1b      	ldr	r3, [r3, #32]
 800393a:	f003 0320 	and.w	r3, r3, #32
 800393e:	2b00      	cmp	r3, #0
 8003940:	d003      	beq.n	800394a <HAL_COMP_Init+0x15e>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8003942:	6938      	ldr	r0, [r7, #16]
 8003944:	f7ff ff1c 	bl	8003780 <LL_EXTI_EnableFallingTrig_0_31>
 8003948:	e002      	b.n	8003950 <HAL_COMP_Init+0x164>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 800394a:	6938      	ldr	r0, [r7, #16]
 800394c:	f7ff ff2a 	bl	80037a4 <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearFlag_0_31(exti_line);
 8003950:	6938      	ldr	r0, [r7, #16]
 8003952:	f7ff ff3b 	bl	80037cc <LL_EXTI_ClearFlag_0_31>

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a1b      	ldr	r3, [r3, #32]
 800395a:	f003 0302 	and.w	r3, r3, #2
 800395e:	2b00      	cmp	r3, #0
 8003960:	d003      	beq.n	800396a <HAL_COMP_Init+0x17e>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 8003962:	6938      	ldr	r0, [r7, #16]
 8003964:	f7ff fec0 	bl	80036e8 <LL_EXTI_EnableEvent_0_31>
 8003968:	e002      	b.n	8003970 <HAL_COMP_Init+0x184>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 800396a:	6938      	ldr	r0, [r7, #16]
 800396c:	f7ff fece 	bl	800370c <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a1b      	ldr	r3, [r3, #32]
 8003974:	f003 0301 	and.w	r3, r3, #1
 8003978:	2b00      	cmp	r3, #0
 800397a:	d003      	beq.n	8003984 <HAL_COMP_Init+0x198>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 800397c:	6938      	ldr	r0, [r7, #16]
 800397e:	f7ff fe8d 	bl	800369c <LL_EXTI_EnableIT_0_31>
 8003982:	e009      	b.n	8003998 <HAL_COMP_Init+0x1ac>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8003984:	6938      	ldr	r0, [r7, #16]
 8003986:	f7ff fe9b 	bl	80036c0 <LL_EXTI_DisableIT_0_31>
 800398a:	e005      	b.n	8003998 <HAL_COMP_Init+0x1ac>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 800398c:	6938      	ldr	r0, [r7, #16]
 800398e:	f7ff febd 	bl	800370c <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 8003992:	6938      	ldr	r0, [r7, #16]
 8003994:	f7ff fe94 	bl	80036c0 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d103      	bne.n	80039ac <HAL_COMP_Init+0x1c0>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 80039ac:	7ffb      	ldrb	r3, [r7, #31]
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3720      	adds	r7, #32
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	40021000 	.word	0x40021000
 80039bc:	ff207d03 	.word	0xff207d03
 80039c0:	40010204 	.word	0x40010204
 80039c4:	20000004 	.word	0x20000004
 80039c8:	053e2d63 	.word	0x053e2d63
 80039cc:	40010200 	.word	0x40010200

080039d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b085      	sub	sp, #20
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f003 0307 	and.w	r3, r3, #7
 80039de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039e0:	4b0c      	ldr	r3, [pc, #48]	; (8003a14 <__NVIC_SetPriorityGrouping+0x44>)
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039e6:	68ba      	ldr	r2, [r7, #8]
 80039e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80039ec:	4013      	ands	r3, r2
 80039ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80039fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a02:	4a04      	ldr	r2, [pc, #16]	; (8003a14 <__NVIC_SetPriorityGrouping+0x44>)
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	60d3      	str	r3, [r2, #12]
}
 8003a08:	bf00      	nop
 8003a0a:	3714      	adds	r7, #20
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr
 8003a14:	e000ed00 	.word	0xe000ed00

08003a18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a1c:	4b04      	ldr	r3, [pc, #16]	; (8003a30 <__NVIC_GetPriorityGrouping+0x18>)
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	0a1b      	lsrs	r3, r3, #8
 8003a22:	f003 0307 	and.w	r3, r3, #7
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr
 8003a30:	e000ed00 	.word	0xe000ed00

08003a34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	db0b      	blt.n	8003a5e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a46:	79fb      	ldrb	r3, [r7, #7]
 8003a48:	f003 021f 	and.w	r2, r3, #31
 8003a4c:	4907      	ldr	r1, [pc, #28]	; (8003a6c <__NVIC_EnableIRQ+0x38>)
 8003a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a52:	095b      	lsrs	r3, r3, #5
 8003a54:	2001      	movs	r0, #1
 8003a56:	fa00 f202 	lsl.w	r2, r0, r2
 8003a5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003a5e:	bf00      	nop
 8003a60:	370c      	adds	r7, #12
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr
 8003a6a:	bf00      	nop
 8003a6c:	e000e100 	.word	0xe000e100

08003a70 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	4603      	mov	r3, r0
 8003a78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	db12      	blt.n	8003aa8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a82:	79fb      	ldrb	r3, [r7, #7]
 8003a84:	f003 021f 	and.w	r2, r3, #31
 8003a88:	490a      	ldr	r1, [pc, #40]	; (8003ab4 <__NVIC_DisableIRQ+0x44>)
 8003a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a8e:	095b      	lsrs	r3, r3, #5
 8003a90:	2001      	movs	r0, #1
 8003a92:	fa00 f202 	lsl.w	r2, r0, r2
 8003a96:	3320      	adds	r3, #32
 8003a98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003a9c:	f3bf 8f4f 	dsb	sy
}
 8003aa0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003aa2:	f3bf 8f6f 	isb	sy
}
 8003aa6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003aa8:	bf00      	nop
 8003aaa:	370c      	adds	r7, #12
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr
 8003ab4:	e000e100 	.word	0xe000e100

08003ab8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	4603      	mov	r3, r0
 8003ac0:	6039      	str	r1, [r7, #0]
 8003ac2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ac4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	db0a      	blt.n	8003ae2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	b2da      	uxtb	r2, r3
 8003ad0:	490c      	ldr	r1, [pc, #48]	; (8003b04 <__NVIC_SetPriority+0x4c>)
 8003ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ad6:	0112      	lsls	r2, r2, #4
 8003ad8:	b2d2      	uxtb	r2, r2
 8003ada:	440b      	add	r3, r1
 8003adc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ae0:	e00a      	b.n	8003af8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	b2da      	uxtb	r2, r3
 8003ae6:	4908      	ldr	r1, [pc, #32]	; (8003b08 <__NVIC_SetPriority+0x50>)
 8003ae8:	79fb      	ldrb	r3, [r7, #7]
 8003aea:	f003 030f 	and.w	r3, r3, #15
 8003aee:	3b04      	subs	r3, #4
 8003af0:	0112      	lsls	r2, r2, #4
 8003af2:	b2d2      	uxtb	r2, r2
 8003af4:	440b      	add	r3, r1
 8003af6:	761a      	strb	r2, [r3, #24]
}
 8003af8:	bf00      	nop
 8003afa:	370c      	adds	r7, #12
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr
 8003b04:	e000e100 	.word	0xe000e100
 8003b08:	e000ed00 	.word	0xe000ed00

08003b0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b089      	sub	sp, #36	; 0x24
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	60f8      	str	r0, [r7, #12]
 8003b14:	60b9      	str	r1, [r7, #8]
 8003b16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f003 0307 	and.w	r3, r3, #7
 8003b1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	f1c3 0307 	rsb	r3, r3, #7
 8003b26:	2b04      	cmp	r3, #4
 8003b28:	bf28      	it	cs
 8003b2a:	2304      	movcs	r3, #4
 8003b2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	3304      	adds	r3, #4
 8003b32:	2b06      	cmp	r3, #6
 8003b34:	d902      	bls.n	8003b3c <NVIC_EncodePriority+0x30>
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	3b03      	subs	r3, #3
 8003b3a:	e000      	b.n	8003b3e <NVIC_EncodePriority+0x32>
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b40:	f04f 32ff 	mov.w	r2, #4294967295
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4a:	43da      	mvns	r2, r3
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	401a      	ands	r2, r3
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b54:	f04f 31ff 	mov.w	r1, #4294967295
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b5e:	43d9      	mvns	r1, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b64:	4313      	orrs	r3, r2
         );
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3724      	adds	r7, #36	; 0x24
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr
	...

08003b74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	3b01      	subs	r3, #1
 8003b80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b84:	d301      	bcc.n	8003b8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b86:	2301      	movs	r3, #1
 8003b88:	e00f      	b.n	8003baa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b8a:	4a0a      	ldr	r2, [pc, #40]	; (8003bb4 <SysTick_Config+0x40>)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	3b01      	subs	r3, #1
 8003b90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b92:	210f      	movs	r1, #15
 8003b94:	f04f 30ff 	mov.w	r0, #4294967295
 8003b98:	f7ff ff8e 	bl	8003ab8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b9c:	4b05      	ldr	r3, [pc, #20]	; (8003bb4 <SysTick_Config+0x40>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ba2:	4b04      	ldr	r3, [pc, #16]	; (8003bb4 <SysTick_Config+0x40>)
 8003ba4:	2207      	movs	r2, #7
 8003ba6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3708      	adds	r7, #8
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	e000e010 	.word	0xe000e010

08003bb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b082      	sub	sp, #8
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f7ff ff05 	bl	80039d0 <__NVIC_SetPriorityGrouping>
}
 8003bc6:	bf00      	nop
 8003bc8:	3708      	adds	r7, #8
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}

08003bce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bce:	b580      	push	{r7, lr}
 8003bd0:	b086      	sub	sp, #24
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	60b9      	str	r1, [r7, #8]
 8003bd8:	607a      	str	r2, [r7, #4]
 8003bda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003be0:	f7ff ff1a 	bl	8003a18 <__NVIC_GetPriorityGrouping>
 8003be4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	68b9      	ldr	r1, [r7, #8]
 8003bea:	6978      	ldr	r0, [r7, #20]
 8003bec:	f7ff ff8e 	bl	8003b0c <NVIC_EncodePriority>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bf6:	4611      	mov	r1, r2
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f7ff ff5d 	bl	8003ab8 <__NVIC_SetPriority>
}
 8003bfe:	bf00      	nop
 8003c00:	3718      	adds	r7, #24
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}

08003c06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c06:	b580      	push	{r7, lr}
 8003c08:	b082      	sub	sp, #8
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c14:	4618      	mov	r0, r3
 8003c16:	f7ff ff0d 	bl	8003a34 <__NVIC_EnableIRQ>
}
 8003c1a:	bf00      	nop
 8003c1c:	3708      	adds	r7, #8
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}

08003c22 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003c22:	b580      	push	{r7, lr}
 8003c24:	b082      	sub	sp, #8
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	4603      	mov	r3, r0
 8003c2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003c2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c30:	4618      	mov	r0, r3
 8003c32:	f7ff ff1d 	bl	8003a70 <__NVIC_DisableIRQ>
}
 8003c36:	bf00      	nop
 8003c38:	3708      	adds	r7, #8
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}

08003c3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c3e:	b580      	push	{r7, lr}
 8003c40:	b082      	sub	sp, #8
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f7ff ff94 	bl	8003b74 <SysTick_Config>
 8003c4c:	4603      	mov	r3, r0
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3708      	adds	r7, #8
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
	...

08003c58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b087      	sub	sp, #28
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c62:	2300      	movs	r3, #0
 8003c64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c66:	e166      	b.n	8003f36 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	2101      	movs	r1, #1
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	fa01 f303 	lsl.w	r3, r1, r3
 8003c74:	4013      	ands	r3, r2
 8003c76:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	f000 8158 	beq.w	8003f30 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f003 0303 	and.w	r3, r3, #3
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d005      	beq.n	8003c98 <HAL_GPIO_Init+0x40>
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f003 0303 	and.w	r3, r3, #3
 8003c94:	2b02      	cmp	r3, #2
 8003c96:	d130      	bne.n	8003cfa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	005b      	lsls	r3, r3, #1
 8003ca2:	2203      	movs	r2, #3
 8003ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca8:	43db      	mvns	r3, r3
 8003caa:	693a      	ldr	r2, [r7, #16]
 8003cac:	4013      	ands	r3, r2
 8003cae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	68da      	ldr	r2, [r3, #12]
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	005b      	lsls	r3, r3, #1
 8003cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cbc:	693a      	ldr	r2, [r7, #16]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	693a      	ldr	r2, [r7, #16]
 8003cc6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003cce:	2201      	movs	r2, #1
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd6:	43db      	mvns	r3, r3
 8003cd8:	693a      	ldr	r2, [r7, #16]
 8003cda:	4013      	ands	r3, r2
 8003cdc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	091b      	lsrs	r3, r3, #4
 8003ce4:	f003 0201 	and.w	r2, r3, #1
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	fa02 f303 	lsl.w	r3, r2, r3
 8003cee:	693a      	ldr	r2, [r7, #16]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	693a      	ldr	r2, [r7, #16]
 8003cf8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	f003 0303 	and.w	r3, r3, #3
 8003d02:	2b03      	cmp	r3, #3
 8003d04:	d017      	beq.n	8003d36 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	005b      	lsls	r3, r3, #1
 8003d10:	2203      	movs	r2, #3
 8003d12:	fa02 f303 	lsl.w	r3, r2, r3
 8003d16:	43db      	mvns	r3, r3
 8003d18:	693a      	ldr	r2, [r7, #16]
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	689a      	ldr	r2, [r3, #8]
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	005b      	lsls	r3, r3, #1
 8003d26:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2a:	693a      	ldr	r2, [r7, #16]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	693a      	ldr	r2, [r7, #16]
 8003d34:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	f003 0303 	and.w	r3, r3, #3
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d123      	bne.n	8003d8a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	08da      	lsrs	r2, r3, #3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	3208      	adds	r2, #8
 8003d4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	f003 0307 	and.w	r3, r3, #7
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	220f      	movs	r2, #15
 8003d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5e:	43db      	mvns	r3, r3
 8003d60:	693a      	ldr	r2, [r7, #16]
 8003d62:	4013      	ands	r3, r2
 8003d64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	691a      	ldr	r2, [r3, #16]
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	f003 0307 	and.w	r3, r3, #7
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	fa02 f303 	lsl.w	r3, r2, r3
 8003d76:	693a      	ldr	r2, [r7, #16]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	08da      	lsrs	r2, r3, #3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	3208      	adds	r2, #8
 8003d84:	6939      	ldr	r1, [r7, #16]
 8003d86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	005b      	lsls	r3, r3, #1
 8003d94:	2203      	movs	r2, #3
 8003d96:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9a:	43db      	mvns	r3, r3
 8003d9c:	693a      	ldr	r2, [r7, #16]
 8003d9e:	4013      	ands	r3, r2
 8003da0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	f003 0203 	and.w	r2, r3, #3
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	005b      	lsls	r3, r3, #1
 8003dae:	fa02 f303 	lsl.w	r3, r2, r3
 8003db2:	693a      	ldr	r2, [r7, #16]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	693a      	ldr	r2, [r7, #16]
 8003dbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	f000 80b2 	beq.w	8003f30 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dcc:	4b61      	ldr	r3, [pc, #388]	; (8003f54 <HAL_GPIO_Init+0x2fc>)
 8003dce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dd0:	4a60      	ldr	r2, [pc, #384]	; (8003f54 <HAL_GPIO_Init+0x2fc>)
 8003dd2:	f043 0301 	orr.w	r3, r3, #1
 8003dd6:	6613      	str	r3, [r2, #96]	; 0x60
 8003dd8:	4b5e      	ldr	r3, [pc, #376]	; (8003f54 <HAL_GPIO_Init+0x2fc>)
 8003dda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ddc:	f003 0301 	and.w	r3, r3, #1
 8003de0:	60bb      	str	r3, [r7, #8]
 8003de2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003de4:	4a5c      	ldr	r2, [pc, #368]	; (8003f58 <HAL_GPIO_Init+0x300>)
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	089b      	lsrs	r3, r3, #2
 8003dea:	3302      	adds	r3, #2
 8003dec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003df0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	f003 0303 	and.w	r3, r3, #3
 8003df8:	009b      	lsls	r3, r3, #2
 8003dfa:	220f      	movs	r2, #15
 8003dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003e00:	43db      	mvns	r3, r3
 8003e02:	693a      	ldr	r2, [r7, #16]
 8003e04:	4013      	ands	r3, r2
 8003e06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003e0e:	d02b      	beq.n	8003e68 <HAL_GPIO_Init+0x210>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	4a52      	ldr	r2, [pc, #328]	; (8003f5c <HAL_GPIO_Init+0x304>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d025      	beq.n	8003e64 <HAL_GPIO_Init+0x20c>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	4a51      	ldr	r2, [pc, #324]	; (8003f60 <HAL_GPIO_Init+0x308>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d01f      	beq.n	8003e60 <HAL_GPIO_Init+0x208>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	4a50      	ldr	r2, [pc, #320]	; (8003f64 <HAL_GPIO_Init+0x30c>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d019      	beq.n	8003e5c <HAL_GPIO_Init+0x204>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	4a4f      	ldr	r2, [pc, #316]	; (8003f68 <HAL_GPIO_Init+0x310>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d013      	beq.n	8003e58 <HAL_GPIO_Init+0x200>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	4a4e      	ldr	r2, [pc, #312]	; (8003f6c <HAL_GPIO_Init+0x314>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d00d      	beq.n	8003e54 <HAL_GPIO_Init+0x1fc>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	4a4d      	ldr	r2, [pc, #308]	; (8003f70 <HAL_GPIO_Init+0x318>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d007      	beq.n	8003e50 <HAL_GPIO_Init+0x1f8>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	4a4c      	ldr	r2, [pc, #304]	; (8003f74 <HAL_GPIO_Init+0x31c>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d101      	bne.n	8003e4c <HAL_GPIO_Init+0x1f4>
 8003e48:	2307      	movs	r3, #7
 8003e4a:	e00e      	b.n	8003e6a <HAL_GPIO_Init+0x212>
 8003e4c:	2308      	movs	r3, #8
 8003e4e:	e00c      	b.n	8003e6a <HAL_GPIO_Init+0x212>
 8003e50:	2306      	movs	r3, #6
 8003e52:	e00a      	b.n	8003e6a <HAL_GPIO_Init+0x212>
 8003e54:	2305      	movs	r3, #5
 8003e56:	e008      	b.n	8003e6a <HAL_GPIO_Init+0x212>
 8003e58:	2304      	movs	r3, #4
 8003e5a:	e006      	b.n	8003e6a <HAL_GPIO_Init+0x212>
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	e004      	b.n	8003e6a <HAL_GPIO_Init+0x212>
 8003e60:	2302      	movs	r3, #2
 8003e62:	e002      	b.n	8003e6a <HAL_GPIO_Init+0x212>
 8003e64:	2301      	movs	r3, #1
 8003e66:	e000      	b.n	8003e6a <HAL_GPIO_Init+0x212>
 8003e68:	2300      	movs	r3, #0
 8003e6a:	697a      	ldr	r2, [r7, #20]
 8003e6c:	f002 0203 	and.w	r2, r2, #3
 8003e70:	0092      	lsls	r2, r2, #2
 8003e72:	4093      	lsls	r3, r2
 8003e74:	693a      	ldr	r2, [r7, #16]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003e7a:	4937      	ldr	r1, [pc, #220]	; (8003f58 <HAL_GPIO_Init+0x300>)
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	089b      	lsrs	r3, r3, #2
 8003e80:	3302      	adds	r3, #2
 8003e82:	693a      	ldr	r2, [r7, #16]
 8003e84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003e88:	4b3b      	ldr	r3, [pc, #236]	; (8003f78 <HAL_GPIO_Init+0x320>)
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	43db      	mvns	r3, r3
 8003e92:	693a      	ldr	r2, [r7, #16]
 8003e94:	4013      	ands	r3, r2
 8003e96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d003      	beq.n	8003eac <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003ea4:	693a      	ldr	r2, [r7, #16]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003eac:	4a32      	ldr	r2, [pc, #200]	; (8003f78 <HAL_GPIO_Init+0x320>)
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003eb2:	4b31      	ldr	r3, [pc, #196]	; (8003f78 <HAL_GPIO_Init+0x320>)
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	43db      	mvns	r3, r3
 8003ebc:	693a      	ldr	r2, [r7, #16]
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d003      	beq.n	8003ed6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003ece:	693a      	ldr	r2, [r7, #16]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003ed6:	4a28      	ldr	r2, [pc, #160]	; (8003f78 <HAL_GPIO_Init+0x320>)
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003edc:	4b26      	ldr	r3, [pc, #152]	; (8003f78 <HAL_GPIO_Init+0x320>)
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	43db      	mvns	r3, r3
 8003ee6:	693a      	ldr	r2, [r7, #16]
 8003ee8:	4013      	ands	r3, r2
 8003eea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d003      	beq.n	8003f00 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003ef8:	693a      	ldr	r2, [r7, #16]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003f00:	4a1d      	ldr	r2, [pc, #116]	; (8003f78 <HAL_GPIO_Init+0x320>)
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003f06:	4b1c      	ldr	r3, [pc, #112]	; (8003f78 <HAL_GPIO_Init+0x320>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	43db      	mvns	r3, r3
 8003f10:	693a      	ldr	r2, [r7, #16]
 8003f12:	4013      	ands	r3, r2
 8003f14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d003      	beq.n	8003f2a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003f22:	693a      	ldr	r2, [r7, #16]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003f2a:	4a13      	ldr	r2, [pc, #76]	; (8003f78 <HAL_GPIO_Init+0x320>)
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	3301      	adds	r3, #1
 8003f34:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	fa22 f303 	lsr.w	r3, r2, r3
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	f47f ae91 	bne.w	8003c68 <HAL_GPIO_Init+0x10>
  }
}
 8003f46:	bf00      	nop
 8003f48:	bf00      	nop
 8003f4a:	371c      	adds	r7, #28
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr
 8003f54:	40021000 	.word	0x40021000
 8003f58:	40010000 	.word	0x40010000
 8003f5c:	48000400 	.word	0x48000400
 8003f60:	48000800 	.word	0x48000800
 8003f64:	48000c00 	.word	0x48000c00
 8003f68:	48001000 	.word	0x48001000
 8003f6c:	48001400 	.word	0x48001400
 8003f70:	48001800 	.word	0x48001800
 8003f74:	48001c00 	.word	0x48001c00
 8003f78:	40010400 	.word	0x40010400

08003f7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b083      	sub	sp, #12
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	460b      	mov	r3, r1
 8003f86:	807b      	strh	r3, [r7, #2]
 8003f88:	4613      	mov	r3, r2
 8003f8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f8c:	787b      	ldrb	r3, [r7, #1]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d003      	beq.n	8003f9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003f92:	887a      	ldrh	r2, [r7, #2]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003f98:	e002      	b.n	8003fa0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003f9a:	887a      	ldrh	r2, [r7, #2]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003fa0:	bf00      	nop
 8003fa2:	370c      	adds	r7, #12
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr

08003fac <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003fac:	b480      	push	{r7}
 8003fae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fb0:	4b05      	ldr	r3, [pc, #20]	; (8003fc8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a04      	ldr	r2, [pc, #16]	; (8003fc8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003fb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fba:	6013      	str	r3, [r2, #0]
}
 8003fbc:	bf00      	nop
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr
 8003fc6:	bf00      	nop
 8003fc8:	40007000 	.word	0x40007000

08003fcc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003fd0:	4b0d      	ldr	r3, [pc, #52]	; (8004008 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003fd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fdc:	d102      	bne.n	8003fe4 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8003fde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003fe2:	e00b      	b.n	8003ffc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003fe4:	4b08      	ldr	r3, [pc, #32]	; (8004008 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003fe6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ff2:	d102      	bne.n	8003ffa <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003ff4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ff8:	e000      	b.n	8003ffc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003ffa:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr
 8004006:	bf00      	nop
 8004008:	40007000 	.word	0x40007000

0800400c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800400c:	b480      	push	{r7}
 800400e:	b085      	sub	sp, #20
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d141      	bne.n	800409e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800401a:	4b4b      	ldr	r3, [pc, #300]	; (8004148 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004022:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004026:	d131      	bne.n	800408c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004028:	4b47      	ldr	r3, [pc, #284]	; (8004148 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800402a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800402e:	4a46      	ldr	r2, [pc, #280]	; (8004148 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004030:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004034:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004038:	4b43      	ldr	r3, [pc, #268]	; (8004148 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004040:	4a41      	ldr	r2, [pc, #260]	; (8004148 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004042:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004046:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004048:	4b40      	ldr	r3, [pc, #256]	; (800414c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	2232      	movs	r2, #50	; 0x32
 800404e:	fb02 f303 	mul.w	r3, r2, r3
 8004052:	4a3f      	ldr	r2, [pc, #252]	; (8004150 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004054:	fba2 2303 	umull	r2, r3, r2, r3
 8004058:	0c9b      	lsrs	r3, r3, #18
 800405a:	3301      	adds	r3, #1
 800405c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800405e:	e002      	b.n	8004066 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	3b01      	subs	r3, #1
 8004064:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004066:	4b38      	ldr	r3, [pc, #224]	; (8004148 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004068:	695b      	ldr	r3, [r3, #20]
 800406a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800406e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004072:	d102      	bne.n	800407a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d1f2      	bne.n	8004060 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800407a:	4b33      	ldr	r3, [pc, #204]	; (8004148 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800407c:	695b      	ldr	r3, [r3, #20]
 800407e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004082:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004086:	d158      	bne.n	800413a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004088:	2303      	movs	r3, #3
 800408a:	e057      	b.n	800413c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800408c:	4b2e      	ldr	r3, [pc, #184]	; (8004148 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800408e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004092:	4a2d      	ldr	r2, [pc, #180]	; (8004148 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004094:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004098:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800409c:	e04d      	b.n	800413a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040a4:	d141      	bne.n	800412a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80040a6:	4b28      	ldr	r3, [pc, #160]	; (8004148 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80040ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040b2:	d131      	bne.n	8004118 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80040b4:	4b24      	ldr	r3, [pc, #144]	; (8004148 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040ba:	4a23      	ldr	r2, [pc, #140]	; (8004148 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80040c4:	4b20      	ldr	r3, [pc, #128]	; (8004148 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80040cc:	4a1e      	ldr	r2, [pc, #120]	; (8004148 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80040d2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80040d4:	4b1d      	ldr	r3, [pc, #116]	; (800414c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	2232      	movs	r2, #50	; 0x32
 80040da:	fb02 f303 	mul.w	r3, r2, r3
 80040de:	4a1c      	ldr	r2, [pc, #112]	; (8004150 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80040e0:	fba2 2303 	umull	r2, r3, r2, r3
 80040e4:	0c9b      	lsrs	r3, r3, #18
 80040e6:	3301      	adds	r3, #1
 80040e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040ea:	e002      	b.n	80040f2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	3b01      	subs	r3, #1
 80040f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040f2:	4b15      	ldr	r3, [pc, #84]	; (8004148 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040f4:	695b      	ldr	r3, [r3, #20]
 80040f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040fe:	d102      	bne.n	8004106 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d1f2      	bne.n	80040ec <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004106:	4b10      	ldr	r3, [pc, #64]	; (8004148 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004108:	695b      	ldr	r3, [r3, #20]
 800410a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800410e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004112:	d112      	bne.n	800413a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004114:	2303      	movs	r3, #3
 8004116:	e011      	b.n	800413c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004118:	4b0b      	ldr	r3, [pc, #44]	; (8004148 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800411a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800411e:	4a0a      	ldr	r2, [pc, #40]	; (8004148 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004120:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004124:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004128:	e007      	b.n	800413a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800412a:	4b07      	ldr	r3, [pc, #28]	; (8004148 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004132:	4a05      	ldr	r2, [pc, #20]	; (8004148 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004134:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004138:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800413a:	2300      	movs	r3, #0
}
 800413c:	4618      	mov	r0, r3
 800413e:	3714      	adds	r7, #20
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr
 8004148:	40007000 	.word	0x40007000
 800414c:	20000004 	.word	0x20000004
 8004150:	431bde83 	.word	0x431bde83

08004154 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8004154:	b480      	push	{r7}
 8004156:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8004158:	4b05      	ldr	r3, [pc, #20]	; (8004170 <HAL_PWREx_EnableVddIO2+0x1c>)
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	4a04      	ldr	r2, [pc, #16]	; (8004170 <HAL_PWREx_EnableVddIO2+0x1c>)
 800415e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004162:	6053      	str	r3, [r2, #4]
}
 8004164:	bf00      	nop
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr
 800416e:	bf00      	nop
 8004170:	40007000 	.word	0x40007000

08004174 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b088      	sub	sp, #32
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d102      	bne.n	8004188 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	f000 bc08 	b.w	8004998 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004188:	4b96      	ldr	r3, [pc, #600]	; (80043e4 <HAL_RCC_OscConfig+0x270>)
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	f003 030c 	and.w	r3, r3, #12
 8004190:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004192:	4b94      	ldr	r3, [pc, #592]	; (80043e4 <HAL_RCC_OscConfig+0x270>)
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	f003 0303 	and.w	r3, r3, #3
 800419a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 0310 	and.w	r3, r3, #16
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	f000 80e4 	beq.w	8004372 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80041aa:	69bb      	ldr	r3, [r7, #24]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d007      	beq.n	80041c0 <HAL_RCC_OscConfig+0x4c>
 80041b0:	69bb      	ldr	r3, [r7, #24]
 80041b2:	2b0c      	cmp	r3, #12
 80041b4:	f040 808b 	bne.w	80042ce <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	f040 8087 	bne.w	80042ce <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80041c0:	4b88      	ldr	r3, [pc, #544]	; (80043e4 <HAL_RCC_OscConfig+0x270>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0302 	and.w	r3, r3, #2
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d005      	beq.n	80041d8 <HAL_RCC_OscConfig+0x64>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	699b      	ldr	r3, [r3, #24]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d101      	bne.n	80041d8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e3df      	b.n	8004998 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a1a      	ldr	r2, [r3, #32]
 80041dc:	4b81      	ldr	r3, [pc, #516]	; (80043e4 <HAL_RCC_OscConfig+0x270>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 0308 	and.w	r3, r3, #8
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d004      	beq.n	80041f2 <HAL_RCC_OscConfig+0x7e>
 80041e8:	4b7e      	ldr	r3, [pc, #504]	; (80043e4 <HAL_RCC_OscConfig+0x270>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041f0:	e005      	b.n	80041fe <HAL_RCC_OscConfig+0x8a>
 80041f2:	4b7c      	ldr	r3, [pc, #496]	; (80043e4 <HAL_RCC_OscConfig+0x270>)
 80041f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041f8:	091b      	lsrs	r3, r3, #4
 80041fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041fe:	4293      	cmp	r3, r2
 8004200:	d223      	bcs.n	800424a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a1b      	ldr	r3, [r3, #32]
 8004206:	4618      	mov	r0, r3
 8004208:	f000 fdcc 	bl	8004da4 <RCC_SetFlashLatencyFromMSIRange>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d001      	beq.n	8004216 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e3c0      	b.n	8004998 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004216:	4b73      	ldr	r3, [pc, #460]	; (80043e4 <HAL_RCC_OscConfig+0x270>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a72      	ldr	r2, [pc, #456]	; (80043e4 <HAL_RCC_OscConfig+0x270>)
 800421c:	f043 0308 	orr.w	r3, r3, #8
 8004220:	6013      	str	r3, [r2, #0]
 8004222:	4b70      	ldr	r3, [pc, #448]	; (80043e4 <HAL_RCC_OscConfig+0x270>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6a1b      	ldr	r3, [r3, #32]
 800422e:	496d      	ldr	r1, [pc, #436]	; (80043e4 <HAL_RCC_OscConfig+0x270>)
 8004230:	4313      	orrs	r3, r2
 8004232:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004234:	4b6b      	ldr	r3, [pc, #428]	; (80043e4 <HAL_RCC_OscConfig+0x270>)
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	69db      	ldr	r3, [r3, #28]
 8004240:	021b      	lsls	r3, r3, #8
 8004242:	4968      	ldr	r1, [pc, #416]	; (80043e4 <HAL_RCC_OscConfig+0x270>)
 8004244:	4313      	orrs	r3, r2
 8004246:	604b      	str	r3, [r1, #4]
 8004248:	e025      	b.n	8004296 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800424a:	4b66      	ldr	r3, [pc, #408]	; (80043e4 <HAL_RCC_OscConfig+0x270>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a65      	ldr	r2, [pc, #404]	; (80043e4 <HAL_RCC_OscConfig+0x270>)
 8004250:	f043 0308 	orr.w	r3, r3, #8
 8004254:	6013      	str	r3, [r2, #0]
 8004256:	4b63      	ldr	r3, [pc, #396]	; (80043e4 <HAL_RCC_OscConfig+0x270>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a1b      	ldr	r3, [r3, #32]
 8004262:	4960      	ldr	r1, [pc, #384]	; (80043e4 <HAL_RCC_OscConfig+0x270>)
 8004264:	4313      	orrs	r3, r2
 8004266:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004268:	4b5e      	ldr	r3, [pc, #376]	; (80043e4 <HAL_RCC_OscConfig+0x270>)
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	69db      	ldr	r3, [r3, #28]
 8004274:	021b      	lsls	r3, r3, #8
 8004276:	495b      	ldr	r1, [pc, #364]	; (80043e4 <HAL_RCC_OscConfig+0x270>)
 8004278:	4313      	orrs	r3, r2
 800427a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800427c:	69bb      	ldr	r3, [r7, #24]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d109      	bne.n	8004296 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a1b      	ldr	r3, [r3, #32]
 8004286:	4618      	mov	r0, r3
 8004288:	f000 fd8c 	bl	8004da4 <RCC_SetFlashLatencyFromMSIRange>
 800428c:	4603      	mov	r3, r0
 800428e:	2b00      	cmp	r3, #0
 8004290:	d001      	beq.n	8004296 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e380      	b.n	8004998 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004296:	f000 fcc1 	bl	8004c1c <HAL_RCC_GetSysClockFreq>
 800429a:	4602      	mov	r2, r0
 800429c:	4b51      	ldr	r3, [pc, #324]	; (80043e4 <HAL_RCC_OscConfig+0x270>)
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	091b      	lsrs	r3, r3, #4
 80042a2:	f003 030f 	and.w	r3, r3, #15
 80042a6:	4950      	ldr	r1, [pc, #320]	; (80043e8 <HAL_RCC_OscConfig+0x274>)
 80042a8:	5ccb      	ldrb	r3, [r1, r3]
 80042aa:	f003 031f 	and.w	r3, r3, #31
 80042ae:	fa22 f303 	lsr.w	r3, r2, r3
 80042b2:	4a4e      	ldr	r2, [pc, #312]	; (80043ec <HAL_RCC_OscConfig+0x278>)
 80042b4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80042b6:	4b4e      	ldr	r3, [pc, #312]	; (80043f0 <HAL_RCC_OscConfig+0x27c>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4618      	mov	r0, r3
 80042bc:	f7fe f9ae 	bl	800261c <HAL_InitTick>
 80042c0:	4603      	mov	r3, r0
 80042c2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80042c4:	7bfb      	ldrb	r3, [r7, #15]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d052      	beq.n	8004370 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80042ca:	7bfb      	ldrb	r3, [r7, #15]
 80042cc:	e364      	b.n	8004998 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	699b      	ldr	r3, [r3, #24]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d032      	beq.n	800433c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80042d6:	4b43      	ldr	r3, [pc, #268]	; (80043e4 <HAL_RCC_OscConfig+0x270>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a42      	ldr	r2, [pc, #264]	; (80043e4 <HAL_RCC_OscConfig+0x270>)
 80042dc:	f043 0301 	orr.w	r3, r3, #1
 80042e0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80042e2:	f7fe f9eb 	bl	80026bc <HAL_GetTick>
 80042e6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80042e8:	e008      	b.n	80042fc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80042ea:	f7fe f9e7 	bl	80026bc <HAL_GetTick>
 80042ee:	4602      	mov	r2, r0
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	2b02      	cmp	r3, #2
 80042f6:	d901      	bls.n	80042fc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80042f8:	2303      	movs	r3, #3
 80042fa:	e34d      	b.n	8004998 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80042fc:	4b39      	ldr	r3, [pc, #228]	; (80043e4 <HAL_RCC_OscConfig+0x270>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0302 	and.w	r3, r3, #2
 8004304:	2b00      	cmp	r3, #0
 8004306:	d0f0      	beq.n	80042ea <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004308:	4b36      	ldr	r3, [pc, #216]	; (80043e4 <HAL_RCC_OscConfig+0x270>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a35      	ldr	r2, [pc, #212]	; (80043e4 <HAL_RCC_OscConfig+0x270>)
 800430e:	f043 0308 	orr.w	r3, r3, #8
 8004312:	6013      	str	r3, [r2, #0]
 8004314:	4b33      	ldr	r3, [pc, #204]	; (80043e4 <HAL_RCC_OscConfig+0x270>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6a1b      	ldr	r3, [r3, #32]
 8004320:	4930      	ldr	r1, [pc, #192]	; (80043e4 <HAL_RCC_OscConfig+0x270>)
 8004322:	4313      	orrs	r3, r2
 8004324:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004326:	4b2f      	ldr	r3, [pc, #188]	; (80043e4 <HAL_RCC_OscConfig+0x270>)
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	69db      	ldr	r3, [r3, #28]
 8004332:	021b      	lsls	r3, r3, #8
 8004334:	492b      	ldr	r1, [pc, #172]	; (80043e4 <HAL_RCC_OscConfig+0x270>)
 8004336:	4313      	orrs	r3, r2
 8004338:	604b      	str	r3, [r1, #4]
 800433a:	e01a      	b.n	8004372 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800433c:	4b29      	ldr	r3, [pc, #164]	; (80043e4 <HAL_RCC_OscConfig+0x270>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a28      	ldr	r2, [pc, #160]	; (80043e4 <HAL_RCC_OscConfig+0x270>)
 8004342:	f023 0301 	bic.w	r3, r3, #1
 8004346:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004348:	f7fe f9b8 	bl	80026bc <HAL_GetTick>
 800434c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800434e:	e008      	b.n	8004362 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004350:	f7fe f9b4 	bl	80026bc <HAL_GetTick>
 8004354:	4602      	mov	r2, r0
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	2b02      	cmp	r3, #2
 800435c:	d901      	bls.n	8004362 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e31a      	b.n	8004998 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004362:	4b20      	ldr	r3, [pc, #128]	; (80043e4 <HAL_RCC_OscConfig+0x270>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0302 	and.w	r3, r3, #2
 800436a:	2b00      	cmp	r3, #0
 800436c:	d1f0      	bne.n	8004350 <HAL_RCC_OscConfig+0x1dc>
 800436e:	e000      	b.n	8004372 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004370:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0301 	and.w	r3, r3, #1
 800437a:	2b00      	cmp	r3, #0
 800437c:	d073      	beq.n	8004466 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	2b08      	cmp	r3, #8
 8004382:	d005      	beq.n	8004390 <HAL_RCC_OscConfig+0x21c>
 8004384:	69bb      	ldr	r3, [r7, #24]
 8004386:	2b0c      	cmp	r3, #12
 8004388:	d10e      	bne.n	80043a8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	2b03      	cmp	r3, #3
 800438e:	d10b      	bne.n	80043a8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004390:	4b14      	ldr	r3, [pc, #80]	; (80043e4 <HAL_RCC_OscConfig+0x270>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004398:	2b00      	cmp	r3, #0
 800439a:	d063      	beq.n	8004464 <HAL_RCC_OscConfig+0x2f0>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d15f      	bne.n	8004464 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e2f7      	b.n	8004998 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043b0:	d106      	bne.n	80043c0 <HAL_RCC_OscConfig+0x24c>
 80043b2:	4b0c      	ldr	r3, [pc, #48]	; (80043e4 <HAL_RCC_OscConfig+0x270>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a0b      	ldr	r2, [pc, #44]	; (80043e4 <HAL_RCC_OscConfig+0x270>)
 80043b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043bc:	6013      	str	r3, [r2, #0]
 80043be:	e025      	b.n	800440c <HAL_RCC_OscConfig+0x298>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043c8:	d114      	bne.n	80043f4 <HAL_RCC_OscConfig+0x280>
 80043ca:	4b06      	ldr	r3, [pc, #24]	; (80043e4 <HAL_RCC_OscConfig+0x270>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a05      	ldr	r2, [pc, #20]	; (80043e4 <HAL_RCC_OscConfig+0x270>)
 80043d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043d4:	6013      	str	r3, [r2, #0]
 80043d6:	4b03      	ldr	r3, [pc, #12]	; (80043e4 <HAL_RCC_OscConfig+0x270>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a02      	ldr	r2, [pc, #8]	; (80043e4 <HAL_RCC_OscConfig+0x270>)
 80043dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043e0:	6013      	str	r3, [r2, #0]
 80043e2:	e013      	b.n	800440c <HAL_RCC_OscConfig+0x298>
 80043e4:	40021000 	.word	0x40021000
 80043e8:	08009d80 	.word	0x08009d80
 80043ec:	20000004 	.word	0x20000004
 80043f0:	20000008 	.word	0x20000008
 80043f4:	4ba0      	ldr	r3, [pc, #640]	; (8004678 <HAL_RCC_OscConfig+0x504>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a9f      	ldr	r2, [pc, #636]	; (8004678 <HAL_RCC_OscConfig+0x504>)
 80043fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043fe:	6013      	str	r3, [r2, #0]
 8004400:	4b9d      	ldr	r3, [pc, #628]	; (8004678 <HAL_RCC_OscConfig+0x504>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a9c      	ldr	r2, [pc, #624]	; (8004678 <HAL_RCC_OscConfig+0x504>)
 8004406:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800440a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d013      	beq.n	800443c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004414:	f7fe f952 	bl	80026bc <HAL_GetTick>
 8004418:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800441a:	e008      	b.n	800442e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800441c:	f7fe f94e 	bl	80026bc <HAL_GetTick>
 8004420:	4602      	mov	r2, r0
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	2b64      	cmp	r3, #100	; 0x64
 8004428:	d901      	bls.n	800442e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e2b4      	b.n	8004998 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800442e:	4b92      	ldr	r3, [pc, #584]	; (8004678 <HAL_RCC_OscConfig+0x504>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d0f0      	beq.n	800441c <HAL_RCC_OscConfig+0x2a8>
 800443a:	e014      	b.n	8004466 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800443c:	f7fe f93e 	bl	80026bc <HAL_GetTick>
 8004440:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004442:	e008      	b.n	8004456 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004444:	f7fe f93a 	bl	80026bc <HAL_GetTick>
 8004448:	4602      	mov	r2, r0
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	2b64      	cmp	r3, #100	; 0x64
 8004450:	d901      	bls.n	8004456 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	e2a0      	b.n	8004998 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004456:	4b88      	ldr	r3, [pc, #544]	; (8004678 <HAL_RCC_OscConfig+0x504>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d1f0      	bne.n	8004444 <HAL_RCC_OscConfig+0x2d0>
 8004462:	e000      	b.n	8004466 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004464:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 0302 	and.w	r3, r3, #2
 800446e:	2b00      	cmp	r3, #0
 8004470:	d060      	beq.n	8004534 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004472:	69bb      	ldr	r3, [r7, #24]
 8004474:	2b04      	cmp	r3, #4
 8004476:	d005      	beq.n	8004484 <HAL_RCC_OscConfig+0x310>
 8004478:	69bb      	ldr	r3, [r7, #24]
 800447a:	2b0c      	cmp	r3, #12
 800447c:	d119      	bne.n	80044b2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	2b02      	cmp	r3, #2
 8004482:	d116      	bne.n	80044b2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004484:	4b7c      	ldr	r3, [pc, #496]	; (8004678 <HAL_RCC_OscConfig+0x504>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800448c:	2b00      	cmp	r3, #0
 800448e:	d005      	beq.n	800449c <HAL_RCC_OscConfig+0x328>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d101      	bne.n	800449c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e27d      	b.n	8004998 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800449c:	4b76      	ldr	r3, [pc, #472]	; (8004678 <HAL_RCC_OscConfig+0x504>)
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	691b      	ldr	r3, [r3, #16]
 80044a8:	061b      	lsls	r3, r3, #24
 80044aa:	4973      	ldr	r1, [pc, #460]	; (8004678 <HAL_RCC_OscConfig+0x504>)
 80044ac:	4313      	orrs	r3, r2
 80044ae:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044b0:	e040      	b.n	8004534 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d023      	beq.n	8004502 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044ba:	4b6f      	ldr	r3, [pc, #444]	; (8004678 <HAL_RCC_OscConfig+0x504>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a6e      	ldr	r2, [pc, #440]	; (8004678 <HAL_RCC_OscConfig+0x504>)
 80044c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044c6:	f7fe f8f9 	bl	80026bc <HAL_GetTick>
 80044ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044cc:	e008      	b.n	80044e0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044ce:	f7fe f8f5 	bl	80026bc <HAL_GetTick>
 80044d2:	4602      	mov	r2, r0
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	1ad3      	subs	r3, r2, r3
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d901      	bls.n	80044e0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	e25b      	b.n	8004998 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044e0:	4b65      	ldr	r3, [pc, #404]	; (8004678 <HAL_RCC_OscConfig+0x504>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d0f0      	beq.n	80044ce <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044ec:	4b62      	ldr	r3, [pc, #392]	; (8004678 <HAL_RCC_OscConfig+0x504>)
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	691b      	ldr	r3, [r3, #16]
 80044f8:	061b      	lsls	r3, r3, #24
 80044fa:	495f      	ldr	r1, [pc, #380]	; (8004678 <HAL_RCC_OscConfig+0x504>)
 80044fc:	4313      	orrs	r3, r2
 80044fe:	604b      	str	r3, [r1, #4]
 8004500:	e018      	b.n	8004534 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004502:	4b5d      	ldr	r3, [pc, #372]	; (8004678 <HAL_RCC_OscConfig+0x504>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a5c      	ldr	r2, [pc, #368]	; (8004678 <HAL_RCC_OscConfig+0x504>)
 8004508:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800450c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800450e:	f7fe f8d5 	bl	80026bc <HAL_GetTick>
 8004512:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004514:	e008      	b.n	8004528 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004516:	f7fe f8d1 	bl	80026bc <HAL_GetTick>
 800451a:	4602      	mov	r2, r0
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	1ad3      	subs	r3, r2, r3
 8004520:	2b02      	cmp	r3, #2
 8004522:	d901      	bls.n	8004528 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004524:	2303      	movs	r3, #3
 8004526:	e237      	b.n	8004998 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004528:	4b53      	ldr	r3, [pc, #332]	; (8004678 <HAL_RCC_OscConfig+0x504>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004530:	2b00      	cmp	r3, #0
 8004532:	d1f0      	bne.n	8004516 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 0308 	and.w	r3, r3, #8
 800453c:	2b00      	cmp	r3, #0
 800453e:	d03c      	beq.n	80045ba <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	695b      	ldr	r3, [r3, #20]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d01c      	beq.n	8004582 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004548:	4b4b      	ldr	r3, [pc, #300]	; (8004678 <HAL_RCC_OscConfig+0x504>)
 800454a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800454e:	4a4a      	ldr	r2, [pc, #296]	; (8004678 <HAL_RCC_OscConfig+0x504>)
 8004550:	f043 0301 	orr.w	r3, r3, #1
 8004554:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004558:	f7fe f8b0 	bl	80026bc <HAL_GetTick>
 800455c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800455e:	e008      	b.n	8004572 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004560:	f7fe f8ac 	bl	80026bc <HAL_GetTick>
 8004564:	4602      	mov	r2, r0
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	2b02      	cmp	r3, #2
 800456c:	d901      	bls.n	8004572 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800456e:	2303      	movs	r3, #3
 8004570:	e212      	b.n	8004998 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004572:	4b41      	ldr	r3, [pc, #260]	; (8004678 <HAL_RCC_OscConfig+0x504>)
 8004574:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004578:	f003 0302 	and.w	r3, r3, #2
 800457c:	2b00      	cmp	r3, #0
 800457e:	d0ef      	beq.n	8004560 <HAL_RCC_OscConfig+0x3ec>
 8004580:	e01b      	b.n	80045ba <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004582:	4b3d      	ldr	r3, [pc, #244]	; (8004678 <HAL_RCC_OscConfig+0x504>)
 8004584:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004588:	4a3b      	ldr	r2, [pc, #236]	; (8004678 <HAL_RCC_OscConfig+0x504>)
 800458a:	f023 0301 	bic.w	r3, r3, #1
 800458e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004592:	f7fe f893 	bl	80026bc <HAL_GetTick>
 8004596:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004598:	e008      	b.n	80045ac <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800459a:	f7fe f88f 	bl	80026bc <HAL_GetTick>
 800459e:	4602      	mov	r2, r0
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	2b02      	cmp	r3, #2
 80045a6:	d901      	bls.n	80045ac <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80045a8:	2303      	movs	r3, #3
 80045aa:	e1f5      	b.n	8004998 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80045ac:	4b32      	ldr	r3, [pc, #200]	; (8004678 <HAL_RCC_OscConfig+0x504>)
 80045ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045b2:	f003 0302 	and.w	r3, r3, #2
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d1ef      	bne.n	800459a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 0304 	and.w	r3, r3, #4
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	f000 80a6 	beq.w	8004714 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045c8:	2300      	movs	r3, #0
 80045ca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80045cc:	4b2a      	ldr	r3, [pc, #168]	; (8004678 <HAL_RCC_OscConfig+0x504>)
 80045ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d10d      	bne.n	80045f4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045d8:	4b27      	ldr	r3, [pc, #156]	; (8004678 <HAL_RCC_OscConfig+0x504>)
 80045da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045dc:	4a26      	ldr	r2, [pc, #152]	; (8004678 <HAL_RCC_OscConfig+0x504>)
 80045de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045e2:	6593      	str	r3, [r2, #88]	; 0x58
 80045e4:	4b24      	ldr	r3, [pc, #144]	; (8004678 <HAL_RCC_OscConfig+0x504>)
 80045e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045ec:	60bb      	str	r3, [r7, #8]
 80045ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045f0:	2301      	movs	r3, #1
 80045f2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045f4:	4b21      	ldr	r3, [pc, #132]	; (800467c <HAL_RCC_OscConfig+0x508>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d118      	bne.n	8004632 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004600:	4b1e      	ldr	r3, [pc, #120]	; (800467c <HAL_RCC_OscConfig+0x508>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a1d      	ldr	r2, [pc, #116]	; (800467c <HAL_RCC_OscConfig+0x508>)
 8004606:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800460a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800460c:	f7fe f856 	bl	80026bc <HAL_GetTick>
 8004610:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004612:	e008      	b.n	8004626 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004614:	f7fe f852 	bl	80026bc <HAL_GetTick>
 8004618:	4602      	mov	r2, r0
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	2b02      	cmp	r3, #2
 8004620:	d901      	bls.n	8004626 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	e1b8      	b.n	8004998 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004626:	4b15      	ldr	r3, [pc, #84]	; (800467c <HAL_RCC_OscConfig+0x508>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800462e:	2b00      	cmp	r3, #0
 8004630:	d0f0      	beq.n	8004614 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	2b01      	cmp	r3, #1
 8004638:	d108      	bne.n	800464c <HAL_RCC_OscConfig+0x4d8>
 800463a:	4b0f      	ldr	r3, [pc, #60]	; (8004678 <HAL_RCC_OscConfig+0x504>)
 800463c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004640:	4a0d      	ldr	r2, [pc, #52]	; (8004678 <HAL_RCC_OscConfig+0x504>)
 8004642:	f043 0301 	orr.w	r3, r3, #1
 8004646:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800464a:	e029      	b.n	80046a0 <HAL_RCC_OscConfig+0x52c>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	2b05      	cmp	r3, #5
 8004652:	d115      	bne.n	8004680 <HAL_RCC_OscConfig+0x50c>
 8004654:	4b08      	ldr	r3, [pc, #32]	; (8004678 <HAL_RCC_OscConfig+0x504>)
 8004656:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800465a:	4a07      	ldr	r2, [pc, #28]	; (8004678 <HAL_RCC_OscConfig+0x504>)
 800465c:	f043 0304 	orr.w	r3, r3, #4
 8004660:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004664:	4b04      	ldr	r3, [pc, #16]	; (8004678 <HAL_RCC_OscConfig+0x504>)
 8004666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800466a:	4a03      	ldr	r2, [pc, #12]	; (8004678 <HAL_RCC_OscConfig+0x504>)
 800466c:	f043 0301 	orr.w	r3, r3, #1
 8004670:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004674:	e014      	b.n	80046a0 <HAL_RCC_OscConfig+0x52c>
 8004676:	bf00      	nop
 8004678:	40021000 	.word	0x40021000
 800467c:	40007000 	.word	0x40007000
 8004680:	4b9d      	ldr	r3, [pc, #628]	; (80048f8 <HAL_RCC_OscConfig+0x784>)
 8004682:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004686:	4a9c      	ldr	r2, [pc, #624]	; (80048f8 <HAL_RCC_OscConfig+0x784>)
 8004688:	f023 0301 	bic.w	r3, r3, #1
 800468c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004690:	4b99      	ldr	r3, [pc, #612]	; (80048f8 <HAL_RCC_OscConfig+0x784>)
 8004692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004696:	4a98      	ldr	r2, [pc, #608]	; (80048f8 <HAL_RCC_OscConfig+0x784>)
 8004698:	f023 0304 	bic.w	r3, r3, #4
 800469c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d016      	beq.n	80046d6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046a8:	f7fe f808 	bl	80026bc <HAL_GetTick>
 80046ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046ae:	e00a      	b.n	80046c6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046b0:	f7fe f804 	bl	80026bc <HAL_GetTick>
 80046b4:	4602      	mov	r2, r0
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80046be:	4293      	cmp	r3, r2
 80046c0:	d901      	bls.n	80046c6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80046c2:	2303      	movs	r3, #3
 80046c4:	e168      	b.n	8004998 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046c6:	4b8c      	ldr	r3, [pc, #560]	; (80048f8 <HAL_RCC_OscConfig+0x784>)
 80046c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046cc:	f003 0302 	and.w	r3, r3, #2
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d0ed      	beq.n	80046b0 <HAL_RCC_OscConfig+0x53c>
 80046d4:	e015      	b.n	8004702 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046d6:	f7fd fff1 	bl	80026bc <HAL_GetTick>
 80046da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80046dc:	e00a      	b.n	80046f4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046de:	f7fd ffed 	bl	80026bc <HAL_GetTick>
 80046e2:	4602      	mov	r2, r0
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	1ad3      	subs	r3, r2, r3
 80046e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d901      	bls.n	80046f4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80046f0:	2303      	movs	r3, #3
 80046f2:	e151      	b.n	8004998 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80046f4:	4b80      	ldr	r3, [pc, #512]	; (80048f8 <HAL_RCC_OscConfig+0x784>)
 80046f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046fa:	f003 0302 	and.w	r3, r3, #2
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d1ed      	bne.n	80046de <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004702:	7ffb      	ldrb	r3, [r7, #31]
 8004704:	2b01      	cmp	r3, #1
 8004706:	d105      	bne.n	8004714 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004708:	4b7b      	ldr	r3, [pc, #492]	; (80048f8 <HAL_RCC_OscConfig+0x784>)
 800470a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800470c:	4a7a      	ldr	r2, [pc, #488]	; (80048f8 <HAL_RCC_OscConfig+0x784>)
 800470e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004712:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 0320 	and.w	r3, r3, #32
 800471c:	2b00      	cmp	r3, #0
 800471e:	d03c      	beq.n	800479a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004724:	2b00      	cmp	r3, #0
 8004726:	d01c      	beq.n	8004762 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004728:	4b73      	ldr	r3, [pc, #460]	; (80048f8 <HAL_RCC_OscConfig+0x784>)
 800472a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800472e:	4a72      	ldr	r2, [pc, #456]	; (80048f8 <HAL_RCC_OscConfig+0x784>)
 8004730:	f043 0301 	orr.w	r3, r3, #1
 8004734:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004738:	f7fd ffc0 	bl	80026bc <HAL_GetTick>
 800473c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800473e:	e008      	b.n	8004752 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004740:	f7fd ffbc 	bl	80026bc <HAL_GetTick>
 8004744:	4602      	mov	r2, r0
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	2b02      	cmp	r3, #2
 800474c:	d901      	bls.n	8004752 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800474e:	2303      	movs	r3, #3
 8004750:	e122      	b.n	8004998 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004752:	4b69      	ldr	r3, [pc, #420]	; (80048f8 <HAL_RCC_OscConfig+0x784>)
 8004754:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004758:	f003 0302 	and.w	r3, r3, #2
 800475c:	2b00      	cmp	r3, #0
 800475e:	d0ef      	beq.n	8004740 <HAL_RCC_OscConfig+0x5cc>
 8004760:	e01b      	b.n	800479a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004762:	4b65      	ldr	r3, [pc, #404]	; (80048f8 <HAL_RCC_OscConfig+0x784>)
 8004764:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004768:	4a63      	ldr	r2, [pc, #396]	; (80048f8 <HAL_RCC_OscConfig+0x784>)
 800476a:	f023 0301 	bic.w	r3, r3, #1
 800476e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004772:	f7fd ffa3 	bl	80026bc <HAL_GetTick>
 8004776:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004778:	e008      	b.n	800478c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800477a:	f7fd ff9f 	bl	80026bc <HAL_GetTick>
 800477e:	4602      	mov	r2, r0
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	1ad3      	subs	r3, r2, r3
 8004784:	2b02      	cmp	r3, #2
 8004786:	d901      	bls.n	800478c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004788:	2303      	movs	r3, #3
 800478a:	e105      	b.n	8004998 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800478c:	4b5a      	ldr	r3, [pc, #360]	; (80048f8 <HAL_RCC_OscConfig+0x784>)
 800478e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004792:	f003 0302 	and.w	r3, r3, #2
 8004796:	2b00      	cmp	r3, #0
 8004798:	d1ef      	bne.n	800477a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800479e:	2b00      	cmp	r3, #0
 80047a0:	f000 80f9 	beq.w	8004996 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047a8:	2b02      	cmp	r3, #2
 80047aa:	f040 80cf 	bne.w	800494c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80047ae:	4b52      	ldr	r3, [pc, #328]	; (80048f8 <HAL_RCC_OscConfig+0x784>)
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	f003 0203 	and.w	r2, r3, #3
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047be:	429a      	cmp	r2, r3
 80047c0:	d12c      	bne.n	800481c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047cc:	3b01      	subs	r3, #1
 80047ce:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d123      	bne.n	800481c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047de:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d11b      	bne.n	800481c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ee:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d113      	bne.n	800481c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047fe:	085b      	lsrs	r3, r3, #1
 8004800:	3b01      	subs	r3, #1
 8004802:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004804:	429a      	cmp	r2, r3
 8004806:	d109      	bne.n	800481c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004812:	085b      	lsrs	r3, r3, #1
 8004814:	3b01      	subs	r3, #1
 8004816:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004818:	429a      	cmp	r2, r3
 800481a:	d071      	beq.n	8004900 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800481c:	69bb      	ldr	r3, [r7, #24]
 800481e:	2b0c      	cmp	r3, #12
 8004820:	d068      	beq.n	80048f4 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004822:	4b35      	ldr	r3, [pc, #212]	; (80048f8 <HAL_RCC_OscConfig+0x784>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800482a:	2b00      	cmp	r3, #0
 800482c:	d105      	bne.n	800483a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800482e:	4b32      	ldr	r3, [pc, #200]	; (80048f8 <HAL_RCC_OscConfig+0x784>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004836:	2b00      	cmp	r3, #0
 8004838:	d001      	beq.n	800483e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e0ac      	b.n	8004998 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800483e:	4b2e      	ldr	r3, [pc, #184]	; (80048f8 <HAL_RCC_OscConfig+0x784>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a2d      	ldr	r2, [pc, #180]	; (80048f8 <HAL_RCC_OscConfig+0x784>)
 8004844:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004848:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800484a:	f7fd ff37 	bl	80026bc <HAL_GetTick>
 800484e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004850:	e008      	b.n	8004864 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004852:	f7fd ff33 	bl	80026bc <HAL_GetTick>
 8004856:	4602      	mov	r2, r0
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	2b02      	cmp	r3, #2
 800485e:	d901      	bls.n	8004864 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004860:	2303      	movs	r3, #3
 8004862:	e099      	b.n	8004998 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004864:	4b24      	ldr	r3, [pc, #144]	; (80048f8 <HAL_RCC_OscConfig+0x784>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800486c:	2b00      	cmp	r3, #0
 800486e:	d1f0      	bne.n	8004852 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004870:	4b21      	ldr	r3, [pc, #132]	; (80048f8 <HAL_RCC_OscConfig+0x784>)
 8004872:	68da      	ldr	r2, [r3, #12]
 8004874:	4b21      	ldr	r3, [pc, #132]	; (80048fc <HAL_RCC_OscConfig+0x788>)
 8004876:	4013      	ands	r3, r2
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004880:	3a01      	subs	r2, #1
 8004882:	0112      	lsls	r2, r2, #4
 8004884:	4311      	orrs	r1, r2
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800488a:	0212      	lsls	r2, r2, #8
 800488c:	4311      	orrs	r1, r2
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004892:	0852      	lsrs	r2, r2, #1
 8004894:	3a01      	subs	r2, #1
 8004896:	0552      	lsls	r2, r2, #21
 8004898:	4311      	orrs	r1, r2
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800489e:	0852      	lsrs	r2, r2, #1
 80048a0:	3a01      	subs	r2, #1
 80048a2:	0652      	lsls	r2, r2, #25
 80048a4:	4311      	orrs	r1, r2
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80048aa:	06d2      	lsls	r2, r2, #27
 80048ac:	430a      	orrs	r2, r1
 80048ae:	4912      	ldr	r1, [pc, #72]	; (80048f8 <HAL_RCC_OscConfig+0x784>)
 80048b0:	4313      	orrs	r3, r2
 80048b2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80048b4:	4b10      	ldr	r3, [pc, #64]	; (80048f8 <HAL_RCC_OscConfig+0x784>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a0f      	ldr	r2, [pc, #60]	; (80048f8 <HAL_RCC_OscConfig+0x784>)
 80048ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048be:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80048c0:	4b0d      	ldr	r3, [pc, #52]	; (80048f8 <HAL_RCC_OscConfig+0x784>)
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	4a0c      	ldr	r2, [pc, #48]	; (80048f8 <HAL_RCC_OscConfig+0x784>)
 80048c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048ca:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80048cc:	f7fd fef6 	bl	80026bc <HAL_GetTick>
 80048d0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048d2:	e008      	b.n	80048e6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048d4:	f7fd fef2 	bl	80026bc <HAL_GetTick>
 80048d8:	4602      	mov	r2, r0
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	2b02      	cmp	r3, #2
 80048e0:	d901      	bls.n	80048e6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80048e2:	2303      	movs	r3, #3
 80048e4:	e058      	b.n	8004998 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048e6:	4b04      	ldr	r3, [pc, #16]	; (80048f8 <HAL_RCC_OscConfig+0x784>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d0f0      	beq.n	80048d4 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80048f2:	e050      	b.n	8004996 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e04f      	b.n	8004998 <HAL_RCC_OscConfig+0x824>
 80048f8:	40021000 	.word	0x40021000
 80048fc:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004900:	4b27      	ldr	r3, [pc, #156]	; (80049a0 <HAL_RCC_OscConfig+0x82c>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004908:	2b00      	cmp	r3, #0
 800490a:	d144      	bne.n	8004996 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800490c:	4b24      	ldr	r3, [pc, #144]	; (80049a0 <HAL_RCC_OscConfig+0x82c>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a23      	ldr	r2, [pc, #140]	; (80049a0 <HAL_RCC_OscConfig+0x82c>)
 8004912:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004916:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004918:	4b21      	ldr	r3, [pc, #132]	; (80049a0 <HAL_RCC_OscConfig+0x82c>)
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	4a20      	ldr	r2, [pc, #128]	; (80049a0 <HAL_RCC_OscConfig+0x82c>)
 800491e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004922:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004924:	f7fd feca 	bl	80026bc <HAL_GetTick>
 8004928:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800492a:	e008      	b.n	800493e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800492c:	f7fd fec6 	bl	80026bc <HAL_GetTick>
 8004930:	4602      	mov	r2, r0
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	2b02      	cmp	r3, #2
 8004938:	d901      	bls.n	800493e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800493a:	2303      	movs	r3, #3
 800493c:	e02c      	b.n	8004998 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800493e:	4b18      	ldr	r3, [pc, #96]	; (80049a0 <HAL_RCC_OscConfig+0x82c>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004946:	2b00      	cmp	r3, #0
 8004948:	d0f0      	beq.n	800492c <HAL_RCC_OscConfig+0x7b8>
 800494a:	e024      	b.n	8004996 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800494c:	69bb      	ldr	r3, [r7, #24]
 800494e:	2b0c      	cmp	r3, #12
 8004950:	d01f      	beq.n	8004992 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004952:	4b13      	ldr	r3, [pc, #76]	; (80049a0 <HAL_RCC_OscConfig+0x82c>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a12      	ldr	r2, [pc, #72]	; (80049a0 <HAL_RCC_OscConfig+0x82c>)
 8004958:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800495c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800495e:	f7fd fead 	bl	80026bc <HAL_GetTick>
 8004962:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004964:	e008      	b.n	8004978 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004966:	f7fd fea9 	bl	80026bc <HAL_GetTick>
 800496a:	4602      	mov	r2, r0
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	1ad3      	subs	r3, r2, r3
 8004970:	2b02      	cmp	r3, #2
 8004972:	d901      	bls.n	8004978 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8004974:	2303      	movs	r3, #3
 8004976:	e00f      	b.n	8004998 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004978:	4b09      	ldr	r3, [pc, #36]	; (80049a0 <HAL_RCC_OscConfig+0x82c>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004980:	2b00      	cmp	r3, #0
 8004982:	d1f0      	bne.n	8004966 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004984:	4b06      	ldr	r3, [pc, #24]	; (80049a0 <HAL_RCC_OscConfig+0x82c>)
 8004986:	68da      	ldr	r2, [r3, #12]
 8004988:	4905      	ldr	r1, [pc, #20]	; (80049a0 <HAL_RCC_OscConfig+0x82c>)
 800498a:	4b06      	ldr	r3, [pc, #24]	; (80049a4 <HAL_RCC_OscConfig+0x830>)
 800498c:	4013      	ands	r3, r2
 800498e:	60cb      	str	r3, [r1, #12]
 8004990:	e001      	b.n	8004996 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	e000      	b.n	8004998 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8004996:	2300      	movs	r3, #0
}
 8004998:	4618      	mov	r0, r3
 800499a:	3720      	adds	r7, #32
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}
 80049a0:	40021000 	.word	0x40021000
 80049a4:	feeefffc 	.word	0xfeeefffc

080049a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b086      	sub	sp, #24
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80049b2:	2300      	movs	r3, #0
 80049b4:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d101      	bne.n	80049c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	e11d      	b.n	8004bfc <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80049c0:	4b90      	ldr	r3, [pc, #576]	; (8004c04 <HAL_RCC_ClockConfig+0x25c>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 030f 	and.w	r3, r3, #15
 80049c8:	683a      	ldr	r2, [r7, #0]
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d910      	bls.n	80049f0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049ce:	4b8d      	ldr	r3, [pc, #564]	; (8004c04 <HAL_RCC_ClockConfig+0x25c>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f023 020f 	bic.w	r2, r3, #15
 80049d6:	498b      	ldr	r1, [pc, #556]	; (8004c04 <HAL_RCC_ClockConfig+0x25c>)
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	4313      	orrs	r3, r2
 80049dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049de:	4b89      	ldr	r3, [pc, #548]	; (8004c04 <HAL_RCC_ClockConfig+0x25c>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 030f 	and.w	r3, r3, #15
 80049e6:	683a      	ldr	r2, [r7, #0]
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d001      	beq.n	80049f0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	e105      	b.n	8004bfc <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 0302 	and.w	r3, r3, #2
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d010      	beq.n	8004a1e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	689a      	ldr	r2, [r3, #8]
 8004a00:	4b81      	ldr	r3, [pc, #516]	; (8004c08 <HAL_RCC_ClockConfig+0x260>)
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d908      	bls.n	8004a1e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a0c:	4b7e      	ldr	r3, [pc, #504]	; (8004c08 <HAL_RCC_ClockConfig+0x260>)
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	497b      	ldr	r1, [pc, #492]	; (8004c08 <HAL_RCC_ClockConfig+0x260>)
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 0301 	and.w	r3, r3, #1
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d079      	beq.n	8004b1e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	2b03      	cmp	r3, #3
 8004a30:	d11e      	bne.n	8004a70 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a32:	4b75      	ldr	r3, [pc, #468]	; (8004c08 <HAL_RCC_ClockConfig+0x260>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d101      	bne.n	8004a42 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e0dc      	b.n	8004bfc <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8004a42:	f000 fa09 	bl	8004e58 <RCC_GetSysClockFreqFromPLLSource>
 8004a46:	4603      	mov	r3, r0
 8004a48:	4a70      	ldr	r2, [pc, #448]	; (8004c0c <HAL_RCC_ClockConfig+0x264>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d946      	bls.n	8004adc <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004a4e:	4b6e      	ldr	r3, [pc, #440]	; (8004c08 <HAL_RCC_ClockConfig+0x260>)
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d140      	bne.n	8004adc <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004a5a:	4b6b      	ldr	r3, [pc, #428]	; (8004c08 <HAL_RCC_ClockConfig+0x260>)
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a62:	4a69      	ldr	r2, [pc, #420]	; (8004c08 <HAL_RCC_ClockConfig+0x260>)
 8004a64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a68:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004a6a:	2380      	movs	r3, #128	; 0x80
 8004a6c:	617b      	str	r3, [r7, #20]
 8004a6e:	e035      	b.n	8004adc <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	2b02      	cmp	r3, #2
 8004a76:	d107      	bne.n	8004a88 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a78:	4b63      	ldr	r3, [pc, #396]	; (8004c08 <HAL_RCC_ClockConfig+0x260>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d115      	bne.n	8004ab0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	e0b9      	b.n	8004bfc <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d107      	bne.n	8004aa0 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004a90:	4b5d      	ldr	r3, [pc, #372]	; (8004c08 <HAL_RCC_ClockConfig+0x260>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f003 0302 	and.w	r3, r3, #2
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d109      	bne.n	8004ab0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e0ad      	b.n	8004bfc <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004aa0:	4b59      	ldr	r3, [pc, #356]	; (8004c08 <HAL_RCC_ClockConfig+0x260>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d101      	bne.n	8004ab0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e0a5      	b.n	8004bfc <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004ab0:	f000 f8b4 	bl	8004c1c <HAL_RCC_GetSysClockFreq>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	4a55      	ldr	r2, [pc, #340]	; (8004c0c <HAL_RCC_ClockConfig+0x264>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d90f      	bls.n	8004adc <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004abc:	4b52      	ldr	r3, [pc, #328]	; (8004c08 <HAL_RCC_ClockConfig+0x260>)
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d109      	bne.n	8004adc <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004ac8:	4b4f      	ldr	r3, [pc, #316]	; (8004c08 <HAL_RCC_ClockConfig+0x260>)
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ad0:	4a4d      	ldr	r2, [pc, #308]	; (8004c08 <HAL_RCC_ClockConfig+0x260>)
 8004ad2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ad6:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004ad8:	2380      	movs	r3, #128	; 0x80
 8004ada:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004adc:	4b4a      	ldr	r3, [pc, #296]	; (8004c08 <HAL_RCC_ClockConfig+0x260>)
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	f023 0203 	bic.w	r2, r3, #3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	4947      	ldr	r1, [pc, #284]	; (8004c08 <HAL_RCC_ClockConfig+0x260>)
 8004aea:	4313      	orrs	r3, r2
 8004aec:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004aee:	f7fd fde5 	bl	80026bc <HAL_GetTick>
 8004af2:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004af4:	e00a      	b.n	8004b0c <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004af6:	f7fd fde1 	bl	80026bc <HAL_GetTick>
 8004afa:	4602      	mov	r2, r0
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	1ad3      	subs	r3, r2, r3
 8004b00:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d901      	bls.n	8004b0c <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8004b08:	2303      	movs	r3, #3
 8004b0a:	e077      	b.n	8004bfc <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b0c:	4b3e      	ldr	r3, [pc, #248]	; (8004c08 <HAL_RCC_ClockConfig+0x260>)
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	f003 020c 	and.w	r2, r3, #12
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	009b      	lsls	r3, r3, #2
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d1eb      	bne.n	8004af6 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	2b80      	cmp	r3, #128	; 0x80
 8004b22:	d105      	bne.n	8004b30 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004b24:	4b38      	ldr	r3, [pc, #224]	; (8004c08 <HAL_RCC_ClockConfig+0x260>)
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	4a37      	ldr	r2, [pc, #220]	; (8004c08 <HAL_RCC_ClockConfig+0x260>)
 8004b2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b2e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 0302 	and.w	r3, r3, #2
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d010      	beq.n	8004b5e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	689a      	ldr	r2, [r3, #8]
 8004b40:	4b31      	ldr	r3, [pc, #196]	; (8004c08 <HAL_RCC_ClockConfig+0x260>)
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d208      	bcs.n	8004b5e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b4c:	4b2e      	ldr	r3, [pc, #184]	; (8004c08 <HAL_RCC_ClockConfig+0x260>)
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	492b      	ldr	r1, [pc, #172]	; (8004c08 <HAL_RCC_ClockConfig+0x260>)
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b5e:	4b29      	ldr	r3, [pc, #164]	; (8004c04 <HAL_RCC_ClockConfig+0x25c>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 030f 	and.w	r3, r3, #15
 8004b66:	683a      	ldr	r2, [r7, #0]
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d210      	bcs.n	8004b8e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b6c:	4b25      	ldr	r3, [pc, #148]	; (8004c04 <HAL_RCC_ClockConfig+0x25c>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f023 020f 	bic.w	r2, r3, #15
 8004b74:	4923      	ldr	r1, [pc, #140]	; (8004c04 <HAL_RCC_ClockConfig+0x25c>)
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b7c:	4b21      	ldr	r3, [pc, #132]	; (8004c04 <HAL_RCC_ClockConfig+0x25c>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 030f 	and.w	r3, r3, #15
 8004b84:	683a      	ldr	r2, [r7, #0]
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d001      	beq.n	8004b8e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e036      	b.n	8004bfc <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 0304 	and.w	r3, r3, #4
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d008      	beq.n	8004bac <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b9a:	4b1b      	ldr	r3, [pc, #108]	; (8004c08 <HAL_RCC_ClockConfig+0x260>)
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	4918      	ldr	r1, [pc, #96]	; (8004c08 <HAL_RCC_ClockConfig+0x260>)
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f003 0308 	and.w	r3, r3, #8
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d009      	beq.n	8004bcc <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004bb8:	4b13      	ldr	r3, [pc, #76]	; (8004c08 <HAL_RCC_ClockConfig+0x260>)
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	691b      	ldr	r3, [r3, #16]
 8004bc4:	00db      	lsls	r3, r3, #3
 8004bc6:	4910      	ldr	r1, [pc, #64]	; (8004c08 <HAL_RCC_ClockConfig+0x260>)
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004bcc:	f000 f826 	bl	8004c1c <HAL_RCC_GetSysClockFreq>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	4b0d      	ldr	r3, [pc, #52]	; (8004c08 <HAL_RCC_ClockConfig+0x260>)
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	091b      	lsrs	r3, r3, #4
 8004bd8:	f003 030f 	and.w	r3, r3, #15
 8004bdc:	490c      	ldr	r1, [pc, #48]	; (8004c10 <HAL_RCC_ClockConfig+0x268>)
 8004bde:	5ccb      	ldrb	r3, [r1, r3]
 8004be0:	f003 031f 	and.w	r3, r3, #31
 8004be4:	fa22 f303 	lsr.w	r3, r2, r3
 8004be8:	4a0a      	ldr	r2, [pc, #40]	; (8004c14 <HAL_RCC_ClockConfig+0x26c>)
 8004bea:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004bec:	4b0a      	ldr	r3, [pc, #40]	; (8004c18 <HAL_RCC_ClockConfig+0x270>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f7fd fd13 	bl	800261c <HAL_InitTick>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	73fb      	strb	r3, [r7, #15]

  return status;
 8004bfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3718      	adds	r7, #24
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}
 8004c04:	40022000 	.word	0x40022000
 8004c08:	40021000 	.word	0x40021000
 8004c0c:	04c4b400 	.word	0x04c4b400
 8004c10:	08009d80 	.word	0x08009d80
 8004c14:	20000004 	.word	0x20000004
 8004c18:	20000008 	.word	0x20000008

08004c1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b089      	sub	sp, #36	; 0x24
 8004c20:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004c22:	2300      	movs	r3, #0
 8004c24:	61fb      	str	r3, [r7, #28]
 8004c26:	2300      	movs	r3, #0
 8004c28:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c2a:	4b3e      	ldr	r3, [pc, #248]	; (8004d24 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	f003 030c 	and.w	r3, r3, #12
 8004c32:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c34:	4b3b      	ldr	r3, [pc, #236]	; (8004d24 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	f003 0303 	and.w	r3, r3, #3
 8004c3c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d005      	beq.n	8004c50 <HAL_RCC_GetSysClockFreq+0x34>
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	2b0c      	cmp	r3, #12
 8004c48:	d121      	bne.n	8004c8e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d11e      	bne.n	8004c8e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004c50:	4b34      	ldr	r3, [pc, #208]	; (8004d24 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 0308 	and.w	r3, r3, #8
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d107      	bne.n	8004c6c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004c5c:	4b31      	ldr	r3, [pc, #196]	; (8004d24 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c62:	0a1b      	lsrs	r3, r3, #8
 8004c64:	f003 030f 	and.w	r3, r3, #15
 8004c68:	61fb      	str	r3, [r7, #28]
 8004c6a:	e005      	b.n	8004c78 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004c6c:	4b2d      	ldr	r3, [pc, #180]	; (8004d24 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	091b      	lsrs	r3, r3, #4
 8004c72:	f003 030f 	and.w	r3, r3, #15
 8004c76:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004c78:	4a2b      	ldr	r2, [pc, #172]	; (8004d28 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004c7a:	69fb      	ldr	r3, [r7, #28]
 8004c7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c80:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d10d      	bne.n	8004ca4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c8c:	e00a      	b.n	8004ca4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	2b04      	cmp	r3, #4
 8004c92:	d102      	bne.n	8004c9a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004c94:	4b25      	ldr	r3, [pc, #148]	; (8004d2c <HAL_RCC_GetSysClockFreq+0x110>)
 8004c96:	61bb      	str	r3, [r7, #24]
 8004c98:	e004      	b.n	8004ca4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	2b08      	cmp	r3, #8
 8004c9e:	d101      	bne.n	8004ca4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004ca0:	4b23      	ldr	r3, [pc, #140]	; (8004d30 <HAL_RCC_GetSysClockFreq+0x114>)
 8004ca2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	2b0c      	cmp	r3, #12
 8004ca8:	d134      	bne.n	8004d14 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004caa:	4b1e      	ldr	r3, [pc, #120]	; (8004d24 <HAL_RCC_GetSysClockFreq+0x108>)
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	f003 0303 	and.w	r3, r3, #3
 8004cb2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	2b02      	cmp	r3, #2
 8004cb8:	d003      	beq.n	8004cc2 <HAL_RCC_GetSysClockFreq+0xa6>
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	2b03      	cmp	r3, #3
 8004cbe:	d003      	beq.n	8004cc8 <HAL_RCC_GetSysClockFreq+0xac>
 8004cc0:	e005      	b.n	8004cce <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004cc2:	4b1a      	ldr	r3, [pc, #104]	; (8004d2c <HAL_RCC_GetSysClockFreq+0x110>)
 8004cc4:	617b      	str	r3, [r7, #20]
      break;
 8004cc6:	e005      	b.n	8004cd4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004cc8:	4b19      	ldr	r3, [pc, #100]	; (8004d30 <HAL_RCC_GetSysClockFreq+0x114>)
 8004cca:	617b      	str	r3, [r7, #20]
      break;
 8004ccc:	e002      	b.n	8004cd4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	617b      	str	r3, [r7, #20]
      break;
 8004cd2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004cd4:	4b13      	ldr	r3, [pc, #76]	; (8004d24 <HAL_RCC_GetSysClockFreq+0x108>)
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	091b      	lsrs	r3, r3, #4
 8004cda:	f003 030f 	and.w	r3, r3, #15
 8004cde:	3301      	adds	r3, #1
 8004ce0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004ce2:	4b10      	ldr	r3, [pc, #64]	; (8004d24 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ce4:	68db      	ldr	r3, [r3, #12]
 8004ce6:	0a1b      	lsrs	r3, r3, #8
 8004ce8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cec:	697a      	ldr	r2, [r7, #20]
 8004cee:	fb03 f202 	mul.w	r2, r3, r2
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cf8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004cfa:	4b0a      	ldr	r3, [pc, #40]	; (8004d24 <HAL_RCC_GetSysClockFreq+0x108>)
 8004cfc:	68db      	ldr	r3, [r3, #12]
 8004cfe:	0e5b      	lsrs	r3, r3, #25
 8004d00:	f003 0303 	and.w	r3, r3, #3
 8004d04:	3301      	adds	r3, #1
 8004d06:	005b      	lsls	r3, r3, #1
 8004d08:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004d0a:	697a      	ldr	r2, [r7, #20]
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d12:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004d14:	69bb      	ldr	r3, [r7, #24]
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3724      	adds	r7, #36	; 0x24
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr
 8004d22:	bf00      	nop
 8004d24:	40021000 	.word	0x40021000
 8004d28:	08009d98 	.word	0x08009d98
 8004d2c:	00f42400 	.word	0x00f42400
 8004d30:	007a1200 	.word	0x007a1200

08004d34 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d34:	b480      	push	{r7}
 8004d36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d38:	4b03      	ldr	r3, [pc, #12]	; (8004d48 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d44:	4770      	bx	lr
 8004d46:	bf00      	nop
 8004d48:	20000004 	.word	0x20000004

08004d4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004d50:	f7ff fff0 	bl	8004d34 <HAL_RCC_GetHCLKFreq>
 8004d54:	4602      	mov	r2, r0
 8004d56:	4b06      	ldr	r3, [pc, #24]	; (8004d70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	0a1b      	lsrs	r3, r3, #8
 8004d5c:	f003 0307 	and.w	r3, r3, #7
 8004d60:	4904      	ldr	r1, [pc, #16]	; (8004d74 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004d62:	5ccb      	ldrb	r3, [r1, r3]
 8004d64:	f003 031f 	and.w	r3, r3, #31
 8004d68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	bd80      	pop	{r7, pc}
 8004d70:	40021000 	.word	0x40021000
 8004d74:	08009d90 	.word	0x08009d90

08004d78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004d7c:	f7ff ffda 	bl	8004d34 <HAL_RCC_GetHCLKFreq>
 8004d80:	4602      	mov	r2, r0
 8004d82:	4b06      	ldr	r3, [pc, #24]	; (8004d9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	0adb      	lsrs	r3, r3, #11
 8004d88:	f003 0307 	and.w	r3, r3, #7
 8004d8c:	4904      	ldr	r1, [pc, #16]	; (8004da0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004d8e:	5ccb      	ldrb	r3, [r1, r3]
 8004d90:	f003 031f 	and.w	r3, r3, #31
 8004d94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	bd80      	pop	{r7, pc}
 8004d9c:	40021000 	.word	0x40021000
 8004da0:	08009d90 	.word	0x08009d90

08004da4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b086      	sub	sp, #24
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004dac:	2300      	movs	r3, #0
 8004dae:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004db0:	4b27      	ldr	r3, [pc, #156]	; (8004e50 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004db2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004db4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d003      	beq.n	8004dc4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004dbc:	f7ff f906 	bl	8003fcc <HAL_PWREx_GetVoltageRange>
 8004dc0:	6178      	str	r0, [r7, #20]
 8004dc2:	e014      	b.n	8004dee <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004dc4:	4b22      	ldr	r3, [pc, #136]	; (8004e50 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004dc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dc8:	4a21      	ldr	r2, [pc, #132]	; (8004e50 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004dca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dce:	6593      	str	r3, [r2, #88]	; 0x58
 8004dd0:	4b1f      	ldr	r3, [pc, #124]	; (8004e50 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004dd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dd8:	60fb      	str	r3, [r7, #12]
 8004dda:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004ddc:	f7ff f8f6 	bl	8003fcc <HAL_PWREx_GetVoltageRange>
 8004de0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004de2:	4b1b      	ldr	r3, [pc, #108]	; (8004e50 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004de6:	4a1a      	ldr	r2, [pc, #104]	; (8004e50 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004de8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dec:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004df4:	d10b      	bne.n	8004e0e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2b80      	cmp	r3, #128	; 0x80
 8004dfa:	d913      	bls.n	8004e24 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2ba0      	cmp	r3, #160	; 0xa0
 8004e00:	d902      	bls.n	8004e08 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004e02:	2302      	movs	r3, #2
 8004e04:	613b      	str	r3, [r7, #16]
 8004e06:	e00d      	b.n	8004e24 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004e08:	2301      	movs	r3, #1
 8004e0a:	613b      	str	r3, [r7, #16]
 8004e0c:	e00a      	b.n	8004e24 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2b7f      	cmp	r3, #127	; 0x7f
 8004e12:	d902      	bls.n	8004e1a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004e14:	2302      	movs	r3, #2
 8004e16:	613b      	str	r3, [r7, #16]
 8004e18:	e004      	b.n	8004e24 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2b70      	cmp	r3, #112	; 0x70
 8004e1e:	d101      	bne.n	8004e24 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004e20:	2301      	movs	r3, #1
 8004e22:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004e24:	4b0b      	ldr	r3, [pc, #44]	; (8004e54 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f023 020f 	bic.w	r2, r3, #15
 8004e2c:	4909      	ldr	r1, [pc, #36]	; (8004e54 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	4313      	orrs	r3, r2
 8004e32:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004e34:	4b07      	ldr	r3, [pc, #28]	; (8004e54 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 030f 	and.w	r3, r3, #15
 8004e3c:	693a      	ldr	r2, [r7, #16]
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d001      	beq.n	8004e46 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	e000      	b.n	8004e48 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8004e46:	2300      	movs	r3, #0
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3718      	adds	r7, #24
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}
 8004e50:	40021000 	.word	0x40021000
 8004e54:	40022000 	.word	0x40022000

08004e58 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b087      	sub	sp, #28
 8004e5c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004e5e:	4b2d      	ldr	r3, [pc, #180]	; (8004f14 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004e60:	68db      	ldr	r3, [r3, #12]
 8004e62:	f003 0303 	and.w	r3, r3, #3
 8004e66:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2b03      	cmp	r3, #3
 8004e6c:	d00b      	beq.n	8004e86 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2b03      	cmp	r3, #3
 8004e72:	d825      	bhi.n	8004ec0 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d008      	beq.n	8004e8c <RCC_GetSysClockFreqFromPLLSource+0x34>
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2b02      	cmp	r3, #2
 8004e7e:	d11f      	bne.n	8004ec0 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004e80:	4b25      	ldr	r3, [pc, #148]	; (8004f18 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004e82:	613b      	str	r3, [r7, #16]
    break;
 8004e84:	e01f      	b.n	8004ec6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8004e86:	4b25      	ldr	r3, [pc, #148]	; (8004f1c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004e88:	613b      	str	r3, [r7, #16]
    break;
 8004e8a:	e01c      	b.n	8004ec6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004e8c:	4b21      	ldr	r3, [pc, #132]	; (8004f14 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 0308 	and.w	r3, r3, #8
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d107      	bne.n	8004ea8 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004e98:	4b1e      	ldr	r3, [pc, #120]	; (8004f14 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004e9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e9e:	0a1b      	lsrs	r3, r3, #8
 8004ea0:	f003 030f 	and.w	r3, r3, #15
 8004ea4:	617b      	str	r3, [r7, #20]
 8004ea6:	e005      	b.n	8004eb4 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004ea8:	4b1a      	ldr	r3, [pc, #104]	; (8004f14 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	091b      	lsrs	r3, r3, #4
 8004eae:	f003 030f 	and.w	r3, r3, #15
 8004eb2:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8004eb4:	4a1a      	ldr	r2, [pc, #104]	; (8004f20 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ebc:	613b      	str	r3, [r7, #16]
    break;
 8004ebe:	e002      	b.n	8004ec6 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	613b      	str	r3, [r7, #16]
    break;
 8004ec4:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004ec6:	4b13      	ldr	r3, [pc, #76]	; (8004f14 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004ec8:	68db      	ldr	r3, [r3, #12]
 8004eca:	091b      	lsrs	r3, r3, #4
 8004ecc:	f003 030f 	and.w	r3, r3, #15
 8004ed0:	3301      	adds	r3, #1
 8004ed2:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004ed4:	4b0f      	ldr	r3, [pc, #60]	; (8004f14 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004ed6:	68db      	ldr	r3, [r3, #12]
 8004ed8:	0a1b      	lsrs	r3, r3, #8
 8004eda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ede:	693a      	ldr	r2, [r7, #16]
 8004ee0:	fb03 f202 	mul.w	r2, r3, r2
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eea:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004eec:	4b09      	ldr	r3, [pc, #36]	; (8004f14 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	0e5b      	lsrs	r3, r3, #25
 8004ef2:	f003 0303 	and.w	r3, r3, #3
 8004ef6:	3301      	adds	r3, #1
 8004ef8:	005b      	lsls	r3, r3, #1
 8004efa:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004efc:	693a      	ldr	r2, [r7, #16]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f04:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004f06:	683b      	ldr	r3, [r7, #0]
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	371c      	adds	r7, #28
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr
 8004f14:	40021000 	.word	0x40021000
 8004f18:	00f42400 	.word	0x00f42400
 8004f1c:	007a1200 	.word	0x007a1200
 8004f20:	08009d98 	.word	0x08009d98

08004f24 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b086      	sub	sp, #24
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004f30:	2300      	movs	r3, #0
 8004f32:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d040      	beq.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f44:	2b80      	cmp	r3, #128	; 0x80
 8004f46:	d02a      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004f48:	2b80      	cmp	r3, #128	; 0x80
 8004f4a:	d825      	bhi.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004f4c:	2b60      	cmp	r3, #96	; 0x60
 8004f4e:	d026      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004f50:	2b60      	cmp	r3, #96	; 0x60
 8004f52:	d821      	bhi.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004f54:	2b40      	cmp	r3, #64	; 0x40
 8004f56:	d006      	beq.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004f58:	2b40      	cmp	r3, #64	; 0x40
 8004f5a:	d81d      	bhi.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d009      	beq.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004f60:	2b20      	cmp	r3, #32
 8004f62:	d010      	beq.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004f64:	e018      	b.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004f66:	4b89      	ldr	r3, [pc, #548]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	4a88      	ldr	r2, [pc, #544]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f70:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004f72:	e015      	b.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	3304      	adds	r3, #4
 8004f78:	2100      	movs	r1, #0
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f001 fa34 	bl	80063e8 <RCCEx_PLLSAI1_Config>
 8004f80:	4603      	mov	r3, r0
 8004f82:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004f84:	e00c      	b.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	3320      	adds	r3, #32
 8004f8a:	2100      	movs	r1, #0
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f001 fb1f 	bl	80065d0 <RCCEx_PLLSAI2_Config>
 8004f92:	4603      	mov	r3, r0
 8004f94:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004f96:	e003      	b.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	74fb      	strb	r3, [r7, #19]
      break;
 8004f9c:	e000      	b.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8004f9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fa0:	7cfb      	ldrb	r3, [r7, #19]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d10b      	bne.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004fa6:	4b79      	ldr	r3, [pc, #484]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004fa8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004fac:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fb4:	4975      	ldr	r1, [pc, #468]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004fbc:	e001      	b.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fbe:	7cfb      	ldrb	r3, [r7, #19]
 8004fc0:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d047      	beq.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fd6:	d030      	beq.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004fd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fdc:	d82a      	bhi.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004fde:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fe2:	d02a      	beq.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004fe4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fe8:	d824      	bhi.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004fea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fee:	d008      	beq.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004ff0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ff4:	d81e      	bhi.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d00a      	beq.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004ffa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ffe:	d010      	beq.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005000:	e018      	b.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005002:	4b62      	ldr	r3, [pc, #392]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005004:	68db      	ldr	r3, [r3, #12]
 8005006:	4a61      	ldr	r2, [pc, #388]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005008:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800500c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800500e:	e015      	b.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	3304      	adds	r3, #4
 8005014:	2100      	movs	r1, #0
 8005016:	4618      	mov	r0, r3
 8005018:	f001 f9e6 	bl	80063e8 <RCCEx_PLLSAI1_Config>
 800501c:	4603      	mov	r3, r0
 800501e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005020:	e00c      	b.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	3320      	adds	r3, #32
 8005026:	2100      	movs	r1, #0
 8005028:	4618      	mov	r0, r3
 800502a:	f001 fad1 	bl	80065d0 <RCCEx_PLLSAI2_Config>
 800502e:	4603      	mov	r3, r0
 8005030:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005032:	e003      	b.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005034:	2301      	movs	r3, #1
 8005036:	74fb      	strb	r3, [r7, #19]
      break;
 8005038:	e000      	b.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800503a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800503c:	7cfb      	ldrb	r3, [r7, #19]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d10b      	bne.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005042:	4b52      	ldr	r3, [pc, #328]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005044:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005048:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005050:	494e      	ldr	r1, [pc, #312]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005052:	4313      	orrs	r3, r2
 8005054:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005058:	e001      	b.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800505a:	7cfb      	ldrb	r3, [r7, #19]
 800505c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005066:	2b00      	cmp	r3, #0
 8005068:	f000 809f 	beq.w	80051aa <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800506c:	2300      	movs	r3, #0
 800506e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005070:	4b46      	ldr	r3, [pc, #280]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005072:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005074:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005078:	2b00      	cmp	r3, #0
 800507a:	d101      	bne.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800507c:	2301      	movs	r3, #1
 800507e:	e000      	b.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005080:	2300      	movs	r3, #0
 8005082:	2b00      	cmp	r3, #0
 8005084:	d00d      	beq.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005086:	4b41      	ldr	r3, [pc, #260]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800508a:	4a40      	ldr	r2, [pc, #256]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800508c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005090:	6593      	str	r3, [r2, #88]	; 0x58
 8005092:	4b3e      	ldr	r3, [pc, #248]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800509a:	60bb      	str	r3, [r7, #8]
 800509c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800509e:	2301      	movs	r3, #1
 80050a0:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80050a2:	4b3b      	ldr	r3, [pc, #236]	; (8005190 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a3a      	ldr	r2, [pc, #232]	; (8005190 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80050a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050ac:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80050ae:	f7fd fb05 	bl	80026bc <HAL_GetTick>
 80050b2:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80050b4:	e009      	b.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050b6:	f7fd fb01 	bl	80026bc <HAL_GetTick>
 80050ba:	4602      	mov	r2, r0
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	1ad3      	subs	r3, r2, r3
 80050c0:	2b02      	cmp	r3, #2
 80050c2:	d902      	bls.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80050c4:	2303      	movs	r3, #3
 80050c6:	74fb      	strb	r3, [r7, #19]
        break;
 80050c8:	e005      	b.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80050ca:	4b31      	ldr	r3, [pc, #196]	; (8005190 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d0ef      	beq.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80050d6:	7cfb      	ldrb	r3, [r7, #19]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d15b      	bne.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80050dc:	4b2b      	ldr	r3, [pc, #172]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80050de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050e6:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d01f      	beq.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050f4:	697a      	ldr	r2, [r7, #20]
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d019      	beq.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80050fa:	4b24      	ldr	r3, [pc, #144]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80050fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005100:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005104:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005106:	4b21      	ldr	r3, [pc, #132]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005108:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800510c:	4a1f      	ldr	r2, [pc, #124]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800510e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005112:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005116:	4b1d      	ldr	r3, [pc, #116]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800511c:	4a1b      	ldr	r2, [pc, #108]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800511e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005122:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005126:	4a19      	ldr	r2, [pc, #100]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	f003 0301 	and.w	r3, r3, #1
 8005134:	2b00      	cmp	r3, #0
 8005136:	d016      	beq.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005138:	f7fd fac0 	bl	80026bc <HAL_GetTick>
 800513c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800513e:	e00b      	b.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005140:	f7fd fabc 	bl	80026bc <HAL_GetTick>
 8005144:	4602      	mov	r2, r0
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	f241 3288 	movw	r2, #5000	; 0x1388
 800514e:	4293      	cmp	r3, r2
 8005150:	d902      	bls.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8005152:	2303      	movs	r3, #3
 8005154:	74fb      	strb	r3, [r7, #19]
            break;
 8005156:	e006      	b.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005158:	4b0c      	ldr	r3, [pc, #48]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800515a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800515e:	f003 0302 	and.w	r3, r3, #2
 8005162:	2b00      	cmp	r3, #0
 8005164:	d0ec      	beq.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8005166:	7cfb      	ldrb	r3, [r7, #19]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d10c      	bne.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800516c:	4b07      	ldr	r3, [pc, #28]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800516e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005172:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800517c:	4903      	ldr	r1, [pc, #12]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800517e:	4313      	orrs	r3, r2
 8005180:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005184:	e008      	b.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005186:	7cfb      	ldrb	r3, [r7, #19]
 8005188:	74bb      	strb	r3, [r7, #18]
 800518a:	e005      	b.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800518c:	40021000 	.word	0x40021000
 8005190:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005194:	7cfb      	ldrb	r3, [r7, #19]
 8005196:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005198:	7c7b      	ldrb	r3, [r7, #17]
 800519a:	2b01      	cmp	r3, #1
 800519c:	d105      	bne.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800519e:	4ba0      	ldr	r3, [pc, #640]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051a2:	4a9f      	ldr	r2, [pc, #636]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051a8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f003 0301 	and.w	r3, r3, #1
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d00a      	beq.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80051b6:	4b9a      	ldr	r3, [pc, #616]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051bc:	f023 0203 	bic.w	r2, r3, #3
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051c4:	4996      	ldr	r1, [pc, #600]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051c6:	4313      	orrs	r3, r2
 80051c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 0302 	and.w	r3, r3, #2
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d00a      	beq.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80051d8:	4b91      	ldr	r3, [pc, #580]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051de:	f023 020c 	bic.w	r2, r3, #12
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e6:	498e      	ldr	r1, [pc, #568]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051e8:	4313      	orrs	r3, r2
 80051ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f003 0304 	and.w	r3, r3, #4
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d00a      	beq.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80051fa:	4b89      	ldr	r3, [pc, #548]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005200:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005208:	4985      	ldr	r1, [pc, #532]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800520a:	4313      	orrs	r3, r2
 800520c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f003 0308 	and.w	r3, r3, #8
 8005218:	2b00      	cmp	r3, #0
 800521a:	d00a      	beq.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800521c:	4b80      	ldr	r3, [pc, #512]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800521e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005222:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800522a:	497d      	ldr	r1, [pc, #500]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800522c:	4313      	orrs	r3, r2
 800522e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f003 0310 	and.w	r3, r3, #16
 800523a:	2b00      	cmp	r3, #0
 800523c:	d00a      	beq.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800523e:	4b78      	ldr	r3, [pc, #480]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005240:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005244:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800524c:	4974      	ldr	r1, [pc, #464]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800524e:	4313      	orrs	r3, r2
 8005250:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f003 0320 	and.w	r3, r3, #32
 800525c:	2b00      	cmp	r3, #0
 800525e:	d00a      	beq.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005260:	4b6f      	ldr	r3, [pc, #444]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005266:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800526e:	496c      	ldr	r1, [pc, #432]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005270:	4313      	orrs	r3, r2
 8005272:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800527e:	2b00      	cmp	r3, #0
 8005280:	d00a      	beq.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005282:	4b67      	ldr	r3, [pc, #412]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005284:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005288:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005290:	4963      	ldr	r1, [pc, #396]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005292:	4313      	orrs	r3, r2
 8005294:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d00a      	beq.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80052a4:	4b5e      	ldr	r3, [pc, #376]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80052b2:	495b      	ldr	r1, [pc, #364]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052b4:	4313      	orrs	r3, r2
 80052b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d00a      	beq.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80052c6:	4b56      	ldr	r3, [pc, #344]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052cc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052d4:	4952      	ldr	r1, [pc, #328]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052d6:	4313      	orrs	r3, r2
 80052d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d00a      	beq.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80052e8:	4b4d      	ldr	r3, [pc, #308]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ee:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052f6:	494a      	ldr	r1, [pc, #296]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052f8:	4313      	orrs	r3, r2
 80052fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005306:	2b00      	cmp	r3, #0
 8005308:	d00a      	beq.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800530a:	4b45      	ldr	r3, [pc, #276]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800530c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005310:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005318:	4941      	ldr	r1, [pc, #260]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800531a:	4313      	orrs	r3, r2
 800531c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005328:	2b00      	cmp	r3, #0
 800532a:	d00a      	beq.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800532c:	4b3c      	ldr	r3, [pc, #240]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800532e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005332:	f023 0203 	bic.w	r2, r3, #3
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800533a:	4939      	ldr	r1, [pc, #228]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800533c:	4313      	orrs	r3, r2
 800533e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800534a:	2b00      	cmp	r3, #0
 800534c:	d028      	beq.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800534e:	4b34      	ldr	r3, [pc, #208]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005350:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005354:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800535c:	4930      	ldr	r1, [pc, #192]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800535e:	4313      	orrs	r3, r2
 8005360:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005368:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800536c:	d106      	bne.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800536e:	4b2c      	ldr	r3, [pc, #176]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005370:	68db      	ldr	r3, [r3, #12]
 8005372:	4a2b      	ldr	r2, [pc, #172]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005374:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005378:	60d3      	str	r3, [r2, #12]
 800537a:	e011      	b.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005380:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005384:	d10c      	bne.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	3304      	adds	r3, #4
 800538a:	2101      	movs	r1, #1
 800538c:	4618      	mov	r0, r3
 800538e:	f001 f82b 	bl	80063e8 <RCCEx_PLLSAI1_Config>
 8005392:	4603      	mov	r3, r0
 8005394:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005396:	7cfb      	ldrb	r3, [r7, #19]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d001      	beq.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800539c:	7cfb      	ldrb	r3, [r7, #19]
 800539e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d04d      	beq.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053b4:	d108      	bne.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80053b6:	4b1a      	ldr	r3, [pc, #104]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80053bc:	4a18      	ldr	r2, [pc, #96]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80053c2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80053c6:	e012      	b.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80053c8:	4b15      	ldr	r3, [pc, #84]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80053ce:	4a14      	ldr	r2, [pc, #80]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053d4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80053d8:	4b11      	ldr	r3, [pc, #68]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053e6:	490e      	ldr	r1, [pc, #56]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053e8:	4313      	orrs	r3, r2
 80053ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053f6:	d106      	bne.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053f8:	4b09      	ldr	r3, [pc, #36]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	4a08      	ldr	r2, [pc, #32]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005402:	60d3      	str	r3, [r2, #12]
 8005404:	e020      	b.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800540a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800540e:	d109      	bne.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005410:	4b03      	ldr	r3, [pc, #12]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005412:	68db      	ldr	r3, [r3, #12]
 8005414:	4a02      	ldr	r2, [pc, #8]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005416:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800541a:	60d3      	str	r3, [r2, #12]
 800541c:	e014      	b.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800541e:	bf00      	nop
 8005420:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005428:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800542c:	d10c      	bne.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	3304      	adds	r3, #4
 8005432:	2101      	movs	r1, #1
 8005434:	4618      	mov	r0, r3
 8005436:	f000 ffd7 	bl	80063e8 <RCCEx_PLLSAI1_Config>
 800543a:	4603      	mov	r3, r0
 800543c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800543e:	7cfb      	ldrb	r3, [r7, #19]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d001      	beq.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8005444:	7cfb      	ldrb	r3, [r7, #19]
 8005446:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005450:	2b00      	cmp	r3, #0
 8005452:	d028      	beq.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005454:	4b4a      	ldr	r3, [pc, #296]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800545a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005462:	4947      	ldr	r1, [pc, #284]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005464:	4313      	orrs	r3, r2
 8005466:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800546e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005472:	d106      	bne.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005474:	4b42      	ldr	r3, [pc, #264]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005476:	68db      	ldr	r3, [r3, #12]
 8005478:	4a41      	ldr	r2, [pc, #260]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800547a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800547e:	60d3      	str	r3, [r2, #12]
 8005480:	e011      	b.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005486:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800548a:	d10c      	bne.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	3304      	adds	r3, #4
 8005490:	2101      	movs	r1, #1
 8005492:	4618      	mov	r0, r3
 8005494:	f000 ffa8 	bl	80063e8 <RCCEx_PLLSAI1_Config>
 8005498:	4603      	mov	r3, r0
 800549a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800549c:	7cfb      	ldrb	r3, [r7, #19]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d001      	beq.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80054a2:	7cfb      	ldrb	r3, [r7, #19]
 80054a4:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d01e      	beq.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80054b2:	4b33      	ldr	r3, [pc, #204]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80054b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054b8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054c2:	492f      	ldr	r1, [pc, #188]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80054c4:	4313      	orrs	r3, r2
 80054c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80054d4:	d10c      	bne.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	3304      	adds	r3, #4
 80054da:	2102      	movs	r1, #2
 80054dc:	4618      	mov	r0, r3
 80054de:	f000 ff83 	bl	80063e8 <RCCEx_PLLSAI1_Config>
 80054e2:	4603      	mov	r3, r0
 80054e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80054e6:	7cfb      	ldrb	r3, [r7, #19]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d001      	beq.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80054ec:	7cfb      	ldrb	r3, [r7, #19]
 80054ee:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d00b      	beq.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80054fc:	4b20      	ldr	r3, [pc, #128]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80054fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005502:	f023 0204 	bic.w	r2, r3, #4
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800550c:	491c      	ldr	r1, [pc, #112]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800550e:	4313      	orrs	r3, r2
 8005510:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800551c:	2b00      	cmp	r3, #0
 800551e:	d00b      	beq.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005520:	4b17      	ldr	r3, [pc, #92]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005522:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005526:	f023 0218 	bic.w	r2, r3, #24
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005530:	4913      	ldr	r1, [pc, #76]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005532:	4313      	orrs	r3, r2
 8005534:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005540:	2b00      	cmp	r3, #0
 8005542:	d017      	beq.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005544:	4b0e      	ldr	r3, [pc, #56]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005546:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800554a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005554:	490a      	ldr	r1, [pc, #40]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005556:	4313      	orrs	r3, r2
 8005558:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005562:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005566:	d105      	bne.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005568:	4b05      	ldr	r3, [pc, #20]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	4a04      	ldr	r2, [pc, #16]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800556e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005572:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005574:	7cbb      	ldrb	r3, [r7, #18]
}
 8005576:	4618      	mov	r0, r3
 8005578:	3718      	adds	r7, #24
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}
 800557e:	bf00      	nop
 8005580:	40021000 	.word	0x40021000

08005584 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b088      	sub	sp, #32
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 800558c:	2300      	movs	r3, #0
 800558e:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005596:	d13e      	bne.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005598:	4bb6      	ldr	r3, [pc, #728]	; (8005874 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800559a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800559e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055a2:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055aa:	d028      	beq.n	80055fe <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055b2:	f200 86f4 	bhi.w	800639e <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055bc:	d005      	beq.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055c4:	d00e      	beq.n	80055e4 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 80055c6:	f000 beea 	b.w	800639e <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80055ca:	4baa      	ldr	r3, [pc, #680]	; (8005874 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80055cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055d0:	f003 0302 	and.w	r3, r3, #2
 80055d4:	2b02      	cmp	r3, #2
 80055d6:	f040 86e4 	bne.w	80063a2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        frequency = LSE_VALUE;
 80055da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055de:	61fb      	str	r3, [r7, #28]
      break;
 80055e0:	f000 bedf 	b.w	80063a2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80055e4:	4ba3      	ldr	r3, [pc, #652]	; (8005874 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80055e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055ea:	f003 0302 	and.w	r3, r3, #2
 80055ee:	2b02      	cmp	r3, #2
 80055f0:	f040 86d9 	bne.w	80063a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
          frequency = LSI_VALUE;
 80055f4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80055f8:	61fb      	str	r3, [r7, #28]
      break;
 80055fa:	f000 bed4 	b.w	80063a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80055fe:	4b9d      	ldr	r3, [pc, #628]	; (8005874 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005606:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800560a:	f040 86ce 	bne.w	80063aa <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
        frequency = HSE_VALUE / 32U;
 800560e:	4b9a      	ldr	r3, [pc, #616]	; (8005878 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005610:	61fb      	str	r3, [r7, #28]
      break;
 8005612:	f000 beca 	b.w	80063aa <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005616:	4b97      	ldr	r3, [pc, #604]	; (8005874 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005618:	68db      	ldr	r3, [r3, #12]
 800561a:	f003 0303 	and.w	r3, r3, #3
 800561e:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	2b03      	cmp	r3, #3
 8005624:	d036      	beq.n	8005694 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	2b03      	cmp	r3, #3
 800562a:	d840      	bhi.n	80056ae <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	2b01      	cmp	r3, #1
 8005630:	d003      	beq.n	800563a <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	2b02      	cmp	r3, #2
 8005636:	d020      	beq.n	800567a <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8005638:	e039      	b.n	80056ae <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800563a:	4b8e      	ldr	r3, [pc, #568]	; (8005874 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f003 0302 	and.w	r3, r3, #2
 8005642:	2b02      	cmp	r3, #2
 8005644:	d116      	bne.n	8005674 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005646:	4b8b      	ldr	r3, [pc, #556]	; (8005874 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 0308 	and.w	r3, r3, #8
 800564e:	2b00      	cmp	r3, #0
 8005650:	d005      	beq.n	800565e <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8005652:	4b88      	ldr	r3, [pc, #544]	; (8005874 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	091b      	lsrs	r3, r3, #4
 8005658:	f003 030f 	and.w	r3, r3, #15
 800565c:	e005      	b.n	800566a <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 800565e:	4b85      	ldr	r3, [pc, #532]	; (8005874 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005660:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005664:	0a1b      	lsrs	r3, r3, #8
 8005666:	f003 030f 	and.w	r3, r3, #15
 800566a:	4a84      	ldr	r2, [pc, #528]	; (800587c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800566c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005670:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005672:	e01f      	b.n	80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005674:	2300      	movs	r3, #0
 8005676:	61bb      	str	r3, [r7, #24]
      break;
 8005678:	e01c      	b.n	80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800567a:	4b7e      	ldr	r3, [pc, #504]	; (8005874 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005682:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005686:	d102      	bne.n	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8005688:	4b7d      	ldr	r3, [pc, #500]	; (8005880 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800568a:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800568c:	e012      	b.n	80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800568e:	2300      	movs	r3, #0
 8005690:	61bb      	str	r3, [r7, #24]
      break;
 8005692:	e00f      	b.n	80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005694:	4b77      	ldr	r3, [pc, #476]	; (8005874 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800569c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80056a0:	d102      	bne.n	80056a8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 80056a2:	4b78      	ldr	r3, [pc, #480]	; (8005884 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 80056a4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80056a6:	e005      	b.n	80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80056a8:	2300      	movs	r3, #0
 80056aa:	61bb      	str	r3, [r7, #24]
      break;
 80056ac:	e002      	b.n	80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 80056ae:	2300      	movs	r3, #0
 80056b0:	61bb      	str	r3, [r7, #24]
      break;
 80056b2:	bf00      	nop
    }

    switch(PeriphClk)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80056ba:	f000 8606 	beq.w	80062ca <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80056c4:	f200 8673 	bhi.w	80063ae <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80056ce:	f000 8469 	beq.w	8005fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80056d8:	f200 8669 	bhi.w	80063ae <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056e2:	f000 8531 	beq.w	8006148 <HAL_RCCEx_GetPeriphCLKFreq+0xbc4>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056ec:	f200 865f 	bhi.w	80063ae <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80056f6:	f000 8187 	beq.w	8005a08 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005700:	f200 8655 	bhi.w	80063ae <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800570a:	f000 80cd 	beq.w	80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005714:	f200 864b 	bhi.w	80063ae <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800571e:	f000 8430 	beq.w	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005728:	f200 8641 	bhi.w	80063ae <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005732:	f000 83e4 	beq.w	8005efe <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800573c:	f200 8637 	bhi.w	80063ae <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005746:	f000 80af 	beq.w	80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005750:	f200 862d 	bhi.w	80063ae <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800575a:	f000 809d 	beq.w	8005898 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005764:	f200 8623 	bhi.w	80063ae <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800576e:	f000 808b 	beq.w	8005888 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005778:	f200 8619 	bhi.w	80063ae <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005782:	f000 8554 	beq.w	800622e <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800578c:	f200 860f 	bhi.w	80063ae <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005796:	f000 8500 	beq.w	800619a <HAL_RCCEx_GetPeriphCLKFreq+0xc16>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057a0:	f200 8605 	bhi.w	80063ae <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057aa:	f000 84a1 	beq.w	80060f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057b4:	f200 85fb 	bhi.w	80063ae <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2b80      	cmp	r3, #128	; 0x80
 80057bc:	f000 846c 	beq.w	8006098 <HAL_RCCEx_GetPeriphCLKFreq+0xb14>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2b80      	cmp	r3, #128	; 0x80
 80057c4:	f200 85f3 	bhi.w	80063ae <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2b20      	cmp	r3, #32
 80057cc:	d84c      	bhi.n	8005868 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	f000 85ec 	beq.w	80063ae <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	3b01      	subs	r3, #1
 80057da:	2b1f      	cmp	r3, #31
 80057dc:	f200 85e7 	bhi.w	80063ae <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80057e0:	a201      	add	r2, pc, #4	; (adr r2, 80057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 80057e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057e6:	bf00      	nop
 80057e8:	08005bfd 	.word	0x08005bfd
 80057ec:	08005c6b 	.word	0x08005c6b
 80057f0:	080063af 	.word	0x080063af
 80057f4:	08005cff 	.word	0x08005cff
 80057f8:	080063af 	.word	0x080063af
 80057fc:	080063af 	.word	0x080063af
 8005800:	080063af 	.word	0x080063af
 8005804:	08005d77 	.word	0x08005d77
 8005808:	080063af 	.word	0x080063af
 800580c:	080063af 	.word	0x080063af
 8005810:	080063af 	.word	0x080063af
 8005814:	080063af 	.word	0x080063af
 8005818:	080063af 	.word	0x080063af
 800581c:	080063af 	.word	0x080063af
 8005820:	080063af 	.word	0x080063af
 8005824:	08005dfb 	.word	0x08005dfb
 8005828:	080063af 	.word	0x080063af
 800582c:	080063af 	.word	0x080063af
 8005830:	080063af 	.word	0x080063af
 8005834:	080063af 	.word	0x080063af
 8005838:	080063af 	.word	0x080063af
 800583c:	080063af 	.word	0x080063af
 8005840:	080063af 	.word	0x080063af
 8005844:	080063af 	.word	0x080063af
 8005848:	080063af 	.word	0x080063af
 800584c:	080063af 	.word	0x080063af
 8005850:	080063af 	.word	0x080063af
 8005854:	080063af 	.word	0x080063af
 8005858:	080063af 	.word	0x080063af
 800585c:	080063af 	.word	0x080063af
 8005860:	080063af 	.word	0x080063af
 8005864:	08005e7d 	.word	0x08005e7d
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2b40      	cmp	r3, #64	; 0x40
 800586c:	f000 83e8 	beq.w	8006040 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8005870:	f000 bd9d 	b.w	80063ae <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005874:	40021000 	.word	0x40021000
 8005878:	0003d090 	.word	0x0003d090
 800587c:	08009d98 	.word	0x08009d98
 8005880:	00f42400 	.word	0x00f42400
 8005884:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8005888:	69b9      	ldr	r1, [r7, #24]
 800588a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800588e:	f000 ff93 	bl	80067b8 <RCCEx_GetSAIxPeriphCLKFreq>
 8005892:	61f8      	str	r0, [r7, #28]
      break;
 8005894:	f000 bd8e 	b.w	80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8005898:	69b9      	ldr	r1, [r7, #24]
 800589a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800589e:	f000 ff8b 	bl	80067b8 <RCCEx_GetSAIxPeriphCLKFreq>
 80058a2:	61f8      	str	r0, [r7, #28]
      break;
 80058a4:	f000 bd86 	b.w	80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80058a8:	4b9a      	ldr	r3, [pc, #616]	; (8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80058aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058ae:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80058b2:	60fb      	str	r3, [r7, #12]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80058ba:	d015      	beq.n	80058e8 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80058c2:	f200 8092 	bhi.w	80059ea <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80058cc:	d029      	beq.n	8005922 <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80058d4:	f200 8089 	bhi.w	80059ea <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d07b      	beq.n	80059d6 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80058e4:	d04a      	beq.n	800597c <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
          break;
 80058e6:	e080      	b.n	80059ea <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80058e8:	4b8a      	ldr	r3, [pc, #552]	; (8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f003 0302 	and.w	r3, r3, #2
 80058f0:	2b02      	cmp	r3, #2
 80058f2:	d17d      	bne.n	80059f0 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80058f4:	4b87      	ldr	r3, [pc, #540]	; (8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f003 0308 	and.w	r3, r3, #8
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d005      	beq.n	800590c <HAL_RCCEx_GetPeriphCLKFreq+0x388>
 8005900:	4b84      	ldr	r3, [pc, #528]	; (8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	091b      	lsrs	r3, r3, #4
 8005906:	f003 030f 	and.w	r3, r3, #15
 800590a:	e005      	b.n	8005918 <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 800590c:	4b81      	ldr	r3, [pc, #516]	; (8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800590e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005912:	0a1b      	lsrs	r3, r3, #8
 8005914:	f003 030f 	and.w	r3, r3, #15
 8005918:	4a7f      	ldr	r2, [pc, #508]	; (8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800591a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800591e:	61fb      	str	r3, [r7, #28]
          break;
 8005920:	e066      	b.n	80059f0 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8005922:	4b7c      	ldr	r3, [pc, #496]	; (8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800592a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800592e:	d162      	bne.n	80059f6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8005930:	4b78      	ldr	r3, [pc, #480]	; (8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005932:	68db      	ldr	r3, [r3, #12]
 8005934:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005938:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800593c:	d15b      	bne.n	80059f6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800593e:	4b75      	ldr	r3, [pc, #468]	; (8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005940:	68db      	ldr	r3, [r3, #12]
 8005942:	0a1b      	lsrs	r3, r3, #8
 8005944:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005948:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800594a:	69bb      	ldr	r3, [r7, #24]
 800594c:	68ba      	ldr	r2, [r7, #8]
 800594e:	fb03 f202 	mul.w	r2, r3, r2
 8005952:	4b70      	ldr	r3, [pc, #448]	; (8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005954:	68db      	ldr	r3, [r3, #12]
 8005956:	091b      	lsrs	r3, r3, #4
 8005958:	f003 030f 	and.w	r3, r3, #15
 800595c:	3301      	adds	r3, #1
 800595e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005962:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8005964:	4b6b      	ldr	r3, [pc, #428]	; (8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005966:	68db      	ldr	r3, [r3, #12]
 8005968:	0d5b      	lsrs	r3, r3, #21
 800596a:	f003 0303 	and.w	r3, r3, #3
 800596e:	3301      	adds	r3, #1
 8005970:	005b      	lsls	r3, r3, #1
 8005972:	69ba      	ldr	r2, [r7, #24]
 8005974:	fbb2 f3f3 	udiv	r3, r2, r3
 8005978:	61fb      	str	r3, [r7, #28]
          break;
 800597a:	e03c      	b.n	80059f6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800597c:	4b65      	ldr	r3, [pc, #404]	; (8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005984:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005988:	d138      	bne.n	80059fc <HAL_RCCEx_GetPeriphCLKFreq+0x478>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800598a:	4b62      	ldr	r3, [pc, #392]	; (8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800598c:	691b      	ldr	r3, [r3, #16]
 800598e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005992:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005996:	d131      	bne.n	80059fc <HAL_RCCEx_GetPeriphCLKFreq+0x478>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005998:	4b5e      	ldr	r3, [pc, #376]	; (8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800599a:	691b      	ldr	r3, [r3, #16]
 800599c:	0a1b      	lsrs	r3, r3, #8
 800599e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059a2:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80059a4:	69bb      	ldr	r3, [r7, #24]
 80059a6:	68ba      	ldr	r2, [r7, #8]
 80059a8:	fb03 f202 	mul.w	r2, r3, r2
 80059ac:	4b59      	ldr	r3, [pc, #356]	; (8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80059ae:	691b      	ldr	r3, [r3, #16]
 80059b0:	091b      	lsrs	r3, r3, #4
 80059b2:	f003 030f 	and.w	r3, r3, #15
 80059b6:	3301      	adds	r3, #1
 80059b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80059bc:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 80059be:	4b55      	ldr	r3, [pc, #340]	; (8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80059c0:	691b      	ldr	r3, [r3, #16]
 80059c2:	0d5b      	lsrs	r3, r3, #21
 80059c4:	f003 0303 	and.w	r3, r3, #3
 80059c8:	3301      	adds	r3, #1
 80059ca:	005b      	lsls	r3, r3, #1
 80059cc:	69ba      	ldr	r2, [r7, #24]
 80059ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80059d2:	61fb      	str	r3, [r7, #28]
          break;
 80059d4:	e012      	b.n	80059fc <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 80059d6:	4b4f      	ldr	r3, [pc, #316]	; (8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80059d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80059dc:	f003 0302 	and.w	r3, r3, #2
 80059e0:	2b02      	cmp	r3, #2
 80059e2:	d10e      	bne.n	8005a02 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = HSI48_VALUE;
 80059e4:	4b4d      	ldr	r3, [pc, #308]	; (8005b1c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80059e6:	61fb      	str	r3, [r7, #28]
          break;
 80059e8:	e00b      	b.n	8005a02 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 80059ea:	bf00      	nop
 80059ec:	f000 bce2 	b.w	80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80059f0:	bf00      	nop
 80059f2:	f000 bcdf 	b.w	80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80059f6:	bf00      	nop
 80059f8:	f000 bcdc 	b.w	80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80059fc:	bf00      	nop
 80059fe:	f000 bcd9 	b.w	80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005a02:	bf00      	nop
        break;
 8005a04:	f000 bcd6 	b.w	80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 8005a08:	4b42      	ldr	r3, [pc, #264]	; (8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005a0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a12:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a16:	d13d      	bne.n	8005a94 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8005a18:	4b3e      	ldr	r3, [pc, #248]	; (8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a20:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a24:	f040 84c5 	bne.w	80063b2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 8005a28:	4b3a      	ldr	r3, [pc, #232]	; (8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005a2a:	68db      	ldr	r3, [r3, #12]
 8005a2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a34:	f040 84bd 	bne.w	80063b2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005a38:	4b36      	ldr	r3, [pc, #216]	; (8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	0a1b      	lsrs	r3, r3, #8
 8005a3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a42:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005a44:	69bb      	ldr	r3, [r7, #24]
 8005a46:	68ba      	ldr	r2, [r7, #8]
 8005a48:	fb03 f202 	mul.w	r2, r3, r2
 8005a4c:	4b31      	ldr	r3, [pc, #196]	; (8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005a4e:	68db      	ldr	r3, [r3, #12]
 8005a50:	091b      	lsrs	r3, r3, #4
 8005a52:	f003 030f 	and.w	r3, r3, #15
 8005a56:	3301      	adds	r3, #1
 8005a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a5c:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8005a5e:	4b2d      	ldr	r3, [pc, #180]	; (8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005a60:	68db      	ldr	r3, [r3, #12]
 8005a62:	0edb      	lsrs	r3, r3, #27
 8005a64:	f003 031f 	and.w	r3, r3, #31
 8005a68:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d10a      	bne.n	8005a86 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8005a70:	4b28      	ldr	r3, [pc, #160]	; (8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005a72:	68db      	ldr	r3, [r3, #12]
 8005a74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d002      	beq.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 17U;
 8005a7c:	2311      	movs	r3, #17
 8005a7e:	617b      	str	r3, [r7, #20]
 8005a80:	e001      	b.n	8005a86 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
                pllp = 7U;
 8005a82:	2307      	movs	r3, #7
 8005a84:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 8005a86:	69ba      	ldr	r2, [r7, #24]
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a8e:	61fb      	str	r3, [r7, #28]
      break;
 8005a90:	f000 bc8f 	b.w	80063b2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8005a94:	4b1f      	ldr	r3, [pc, #124]	; (8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a9a:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8005a9e:	60fb      	str	r3, [r7, #12]
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005aa6:	d016      	beq.n	8005ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x552>
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005aae:	f200 809b 	bhi.w	8005be8 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ab8:	d032      	beq.n	8005b20 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ac0:	f200 8092 	bhi.w	8005be8 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	f000 8084 	beq.w	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005ad2:	d052      	beq.n	8005b7a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          break;
 8005ad4:	e088      	b.n	8005be8 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005ad6:	4b0f      	ldr	r3, [pc, #60]	; (8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f003 0302 	and.w	r3, r3, #2
 8005ade:	2b02      	cmp	r3, #2
 8005ae0:	f040 8084 	bne.w	8005bec <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005ae4:	4b0b      	ldr	r3, [pc, #44]	; (8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f003 0308 	and.w	r3, r3, #8
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d005      	beq.n	8005afc <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8005af0:	4b08      	ldr	r3, [pc, #32]	; (8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	091b      	lsrs	r3, r3, #4
 8005af6:	f003 030f 	and.w	r3, r3, #15
 8005afa:	e005      	b.n	8005b08 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
 8005afc:	4b05      	ldr	r3, [pc, #20]	; (8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005afe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b02:	0a1b      	lsrs	r3, r3, #8
 8005b04:	f003 030f 	and.w	r3, r3, #15
 8005b08:	4a03      	ldr	r2, [pc, #12]	; (8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8005b0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b0e:	61fb      	str	r3, [r7, #28]
          break;
 8005b10:	e06c      	b.n	8005bec <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 8005b12:	bf00      	nop
 8005b14:	40021000 	.word	0x40021000
 8005b18:	08009d98 	.word	0x08009d98
 8005b1c:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8005b20:	4ba5      	ldr	r3, [pc, #660]	; (8005db8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b28:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b2c:	d160      	bne.n	8005bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8005b2e:	4ba2      	ldr	r3, [pc, #648]	; (8005db8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005b30:	68db      	ldr	r3, [r3, #12]
 8005b32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b3a:	d159      	bne.n	8005bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005b3c:	4b9e      	ldr	r3, [pc, #632]	; (8005db8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005b3e:	68db      	ldr	r3, [r3, #12]
 8005b40:	0a1b      	lsrs	r3, r3, #8
 8005b42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b46:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005b48:	69bb      	ldr	r3, [r7, #24]
 8005b4a:	68ba      	ldr	r2, [r7, #8]
 8005b4c:	fb03 f202 	mul.w	r2, r3, r2
 8005b50:	4b99      	ldr	r3, [pc, #612]	; (8005db8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005b52:	68db      	ldr	r3, [r3, #12]
 8005b54:	091b      	lsrs	r3, r3, #4
 8005b56:	f003 030f 	and.w	r3, r3, #15
 8005b5a:	3301      	adds	r3, #1
 8005b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b60:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8005b62:	4b95      	ldr	r3, [pc, #596]	; (8005db8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	0d5b      	lsrs	r3, r3, #21
 8005b68:	f003 0303 	and.w	r3, r3, #3
 8005b6c:	3301      	adds	r3, #1
 8005b6e:	005b      	lsls	r3, r3, #1
 8005b70:	69ba      	ldr	r2, [r7, #24]
 8005b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b76:	61fb      	str	r3, [r7, #28]
          break;
 8005b78:	e03a      	b.n	8005bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8005b7a:	4b8f      	ldr	r3, [pc, #572]	; (8005db8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b86:	d135      	bne.n	8005bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8005b88:	4b8b      	ldr	r3, [pc, #556]	; (8005db8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005b8a:	691b      	ldr	r3, [r3, #16]
 8005b8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b94:	d12e      	bne.n	8005bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005b96:	4b88      	ldr	r3, [pc, #544]	; (8005db8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005b98:	691b      	ldr	r3, [r3, #16]
 8005b9a:	0a1b      	lsrs	r3, r3, #8
 8005b9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ba0:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8005ba2:	69bb      	ldr	r3, [r7, #24]
 8005ba4:	68ba      	ldr	r2, [r7, #8]
 8005ba6:	fb03 f202 	mul.w	r2, r3, r2
 8005baa:	4b83      	ldr	r3, [pc, #524]	; (8005db8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005bac:	691b      	ldr	r3, [r3, #16]
 8005bae:	091b      	lsrs	r3, r3, #4
 8005bb0:	f003 030f 	and.w	r3, r3, #15
 8005bb4:	3301      	adds	r3, #1
 8005bb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bba:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8005bbc:	4b7e      	ldr	r3, [pc, #504]	; (8005db8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005bbe:	691b      	ldr	r3, [r3, #16]
 8005bc0:	0d5b      	lsrs	r3, r3, #21
 8005bc2:	f003 0303 	and.w	r3, r3, #3
 8005bc6:	3301      	adds	r3, #1
 8005bc8:	005b      	lsls	r3, r3, #1
 8005bca:	69ba      	ldr	r2, [r7, #24]
 8005bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bd0:	61fb      	str	r3, [r7, #28]
          break;
 8005bd2:	e00f      	b.n	8005bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8005bd4:	4b78      	ldr	r3, [pc, #480]	; (8005db8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005bd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005bda:	f003 0302 	and.w	r3, r3, #2
 8005bde:	2b02      	cmp	r3, #2
 8005be0:	d10a      	bne.n	8005bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            frequency = HSI48_VALUE;
 8005be2:	4b76      	ldr	r3, [pc, #472]	; (8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8005be4:	61fb      	str	r3, [r7, #28]
          break;
 8005be6:	e007      	b.n	8005bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          break;
 8005be8:	bf00      	nop
 8005bea:	e3e2      	b.n	80063b2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8005bec:	bf00      	nop
 8005bee:	e3e0      	b.n	80063b2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8005bf0:	bf00      	nop
 8005bf2:	e3de      	b.n	80063b2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8005bf4:	bf00      	nop
 8005bf6:	e3dc      	b.n	80063b2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8005bf8:	bf00      	nop
      break;
 8005bfa:	e3da      	b.n	80063b2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8005bfc:	4b6e      	ldr	r3, [pc, #440]	; (8005db8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c02:	f003 0303 	and.w	r3, r3, #3
 8005c06:	60fb      	str	r3, [r7, #12]
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2b03      	cmp	r3, #3
 8005c0c:	d827      	bhi.n	8005c5e <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8005c0e:	a201      	add	r2, pc, #4	; (adr r2, 8005c14 <HAL_RCCEx_GetPeriphCLKFreq+0x690>)
 8005c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c14:	08005c25 	.word	0x08005c25
 8005c18:	08005c2d 	.word	0x08005c2d
 8005c1c:	08005c35 	.word	0x08005c35
 8005c20:	08005c49 	.word	0x08005c49
          frequency = HAL_RCC_GetPCLK2Freq();
 8005c24:	f7ff f8a8 	bl	8004d78 <HAL_RCC_GetPCLK2Freq>
 8005c28:	61f8      	str	r0, [r7, #28]
          break;
 8005c2a:	e01d      	b.n	8005c68 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          frequency = HAL_RCC_GetSysClockFreq();
 8005c2c:	f7fe fff6 	bl	8004c1c <HAL_RCC_GetSysClockFreq>
 8005c30:	61f8      	str	r0, [r7, #28]
          break;
 8005c32:	e019      	b.n	8005c68 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005c34:	4b60      	ldr	r3, [pc, #384]	; (8005db8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c40:	d10f      	bne.n	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = HSI_VALUE;
 8005c42:	4b5f      	ldr	r3, [pc, #380]	; (8005dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005c44:	61fb      	str	r3, [r7, #28]
          break;
 8005c46:	e00c      	b.n	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005c48:	4b5b      	ldr	r3, [pc, #364]	; (8005db8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c4e:	f003 0302 	and.w	r3, r3, #2
 8005c52:	2b02      	cmp	r3, #2
 8005c54:	d107      	bne.n	8005c66 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
            frequency = LSE_VALUE;
 8005c56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c5a:	61fb      	str	r3, [r7, #28]
          break;
 8005c5c:	e003      	b.n	8005c66 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
          break;
 8005c5e:	bf00      	nop
 8005c60:	e3a8      	b.n	80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005c62:	bf00      	nop
 8005c64:	e3a6      	b.n	80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005c66:	bf00      	nop
        break;
 8005c68:	e3a4      	b.n	80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8005c6a:	4b53      	ldr	r3, [pc, #332]	; (8005db8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c70:	f003 030c 	and.w	r3, r3, #12
 8005c74:	60fb      	str	r3, [r7, #12]
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2b0c      	cmp	r3, #12
 8005c7a:	d83a      	bhi.n	8005cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8005c7c:	a201      	add	r2, pc, #4	; (adr r2, 8005c84 <HAL_RCCEx_GetPeriphCLKFreq+0x700>)
 8005c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c82:	bf00      	nop
 8005c84:	08005cb9 	.word	0x08005cb9
 8005c88:	08005cf3 	.word	0x08005cf3
 8005c8c:	08005cf3 	.word	0x08005cf3
 8005c90:	08005cf3 	.word	0x08005cf3
 8005c94:	08005cc1 	.word	0x08005cc1
 8005c98:	08005cf3 	.word	0x08005cf3
 8005c9c:	08005cf3 	.word	0x08005cf3
 8005ca0:	08005cf3 	.word	0x08005cf3
 8005ca4:	08005cc9 	.word	0x08005cc9
 8005ca8:	08005cf3 	.word	0x08005cf3
 8005cac:	08005cf3 	.word	0x08005cf3
 8005cb0:	08005cf3 	.word	0x08005cf3
 8005cb4:	08005cdd 	.word	0x08005cdd
          frequency = HAL_RCC_GetPCLK1Freq();
 8005cb8:	f7ff f848 	bl	8004d4c <HAL_RCC_GetPCLK1Freq>
 8005cbc:	61f8      	str	r0, [r7, #28]
          break;
 8005cbe:	e01d      	b.n	8005cfc <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = HAL_RCC_GetSysClockFreq();
 8005cc0:	f7fe ffac 	bl	8004c1c <HAL_RCC_GetSysClockFreq>
 8005cc4:	61f8      	str	r0, [r7, #28]
          break;
 8005cc6:	e019      	b.n	8005cfc <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005cc8:	4b3b      	ldr	r3, [pc, #236]	; (8005db8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cd4:	d10f      	bne.n	8005cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = HSI_VALUE;
 8005cd6:	4b3a      	ldr	r3, [pc, #232]	; (8005dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005cd8:	61fb      	str	r3, [r7, #28]
          break;
 8005cda:	e00c      	b.n	8005cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005cdc:	4b36      	ldr	r3, [pc, #216]	; (8005db8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ce2:	f003 0302 	and.w	r3, r3, #2
 8005ce6:	2b02      	cmp	r3, #2
 8005ce8:	d107      	bne.n	8005cfa <HAL_RCCEx_GetPeriphCLKFreq+0x776>
            frequency = LSE_VALUE;
 8005cea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cee:	61fb      	str	r3, [r7, #28]
          break;
 8005cf0:	e003      	b.n	8005cfa <HAL_RCCEx_GetPeriphCLKFreq+0x776>
          break;
 8005cf2:	bf00      	nop
 8005cf4:	e35e      	b.n	80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005cf6:	bf00      	nop
 8005cf8:	e35c      	b.n	80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005cfa:	bf00      	nop
        break;
 8005cfc:	e35a      	b.n	80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8005cfe:	4b2e      	ldr	r3, [pc, #184]	; (8005db8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d04:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005d08:	60fb      	str	r3, [r7, #12]
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2b30      	cmp	r3, #48	; 0x30
 8005d0e:	d021      	beq.n	8005d54 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2b30      	cmp	r3, #48	; 0x30
 8005d14:	d829      	bhi.n	8005d6a <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2b20      	cmp	r3, #32
 8005d1a:	d011      	beq.n	8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2b20      	cmp	r3, #32
 8005d20:	d823      	bhi.n	8005d6a <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d003      	beq.n	8005d30 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2b10      	cmp	r3, #16
 8005d2c:	d004      	beq.n	8005d38 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
          break;
 8005d2e:	e01c      	b.n	8005d6a <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005d30:	f7ff f80c 	bl	8004d4c <HAL_RCC_GetPCLK1Freq>
 8005d34:	61f8      	str	r0, [r7, #28]
          break;
 8005d36:	e01d      	b.n	8005d74 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          frequency = HAL_RCC_GetSysClockFreq();
 8005d38:	f7fe ff70 	bl	8004c1c <HAL_RCC_GetSysClockFreq>
 8005d3c:	61f8      	str	r0, [r7, #28]
          break;
 8005d3e:	e019      	b.n	8005d74 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005d40:	4b1d      	ldr	r3, [pc, #116]	; (8005db8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d4c:	d10f      	bne.n	8005d6e <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = HSI_VALUE;
 8005d4e:	4b1c      	ldr	r3, [pc, #112]	; (8005dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005d50:	61fb      	str	r3, [r7, #28]
          break;
 8005d52:	e00c      	b.n	8005d6e <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005d54:	4b18      	ldr	r3, [pc, #96]	; (8005db8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d5a:	f003 0302 	and.w	r3, r3, #2
 8005d5e:	2b02      	cmp	r3, #2
 8005d60:	d107      	bne.n	8005d72 <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
            frequency = LSE_VALUE;
 8005d62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d66:	61fb      	str	r3, [r7, #28]
          break;
 8005d68:	e003      	b.n	8005d72 <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
          break;
 8005d6a:	bf00      	nop
 8005d6c:	e322      	b.n	80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005d6e:	bf00      	nop
 8005d70:	e320      	b.n	80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005d72:	bf00      	nop
        break;
 8005d74:	e31e      	b.n	80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8005d76:	4b10      	ldr	r3, [pc, #64]	; (8005db8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d7c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005d80:	60fb      	str	r3, [r7, #12]
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2bc0      	cmp	r3, #192	; 0xc0
 8005d86:	d027      	beq.n	8005dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x854>
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2bc0      	cmp	r3, #192	; 0xc0
 8005d8c:	d82f      	bhi.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2b80      	cmp	r3, #128	; 0x80
 8005d92:	d017      	beq.n	8005dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2b80      	cmp	r3, #128	; 0x80
 8005d98:	d829      	bhi.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d003      	beq.n	8005da8 <HAL_RCCEx_GetPeriphCLKFreq+0x824>
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2b40      	cmp	r3, #64	; 0x40
 8005da4:	d004      	beq.n	8005db0 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
          break;
 8005da6:	e022      	b.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005da8:	f7fe ffd0 	bl	8004d4c <HAL_RCC_GetPCLK1Freq>
 8005dac:	61f8      	str	r0, [r7, #28]
          break;
 8005dae:	e023      	b.n	8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
          frequency = HAL_RCC_GetSysClockFreq();
 8005db0:	f7fe ff34 	bl	8004c1c <HAL_RCC_GetSysClockFreq>
 8005db4:	61f8      	str	r0, [r7, #28]
          break;
 8005db6:	e01f      	b.n	8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
 8005db8:	40021000 	.word	0x40021000
 8005dbc:	02dc6c00 	.word	0x02dc6c00
 8005dc0:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005dc4:	4b9b      	ldr	r3, [pc, #620]	; (8006034 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dd0:	d10f      	bne.n	8005df2 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = HSI_VALUE;
 8005dd2:	4b99      	ldr	r3, [pc, #612]	; (8006038 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8005dd4:	61fb      	str	r3, [r7, #28]
          break;
 8005dd6:	e00c      	b.n	8005df2 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005dd8:	4b96      	ldr	r3, [pc, #600]	; (8006034 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dde:	f003 0302 	and.w	r3, r3, #2
 8005de2:	2b02      	cmp	r3, #2
 8005de4:	d107      	bne.n	8005df6 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
            frequency = LSE_VALUE;
 8005de6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005dea:	61fb      	str	r3, [r7, #28]
          break;
 8005dec:	e003      	b.n	8005df6 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
          break;
 8005dee:	bf00      	nop
 8005df0:	e2e0      	b.n	80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005df2:	bf00      	nop
 8005df4:	e2de      	b.n	80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005df6:	bf00      	nop
        break;
 8005df8:	e2dc      	b.n	80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8005dfa:	4b8e      	ldr	r3, [pc, #568]	; (8006034 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e04:	60fb      	str	r3, [r7, #12]
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e0c:	d025      	beq.n	8005e5a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e14:	d82c      	bhi.n	8005e70 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e1c:	d013      	beq.n	8005e46 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e24:	d824      	bhi.n	8005e70 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d004      	beq.n	8005e36 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e32:	d004      	beq.n	8005e3e <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 8005e34:	e01c      	b.n	8005e70 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005e36:	f7fe ff89 	bl	8004d4c <HAL_RCC_GetPCLK1Freq>
 8005e3a:	61f8      	str	r0, [r7, #28]
          break;
 8005e3c:	e01d      	b.n	8005e7a <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = HAL_RCC_GetSysClockFreq();
 8005e3e:	f7fe feed 	bl	8004c1c <HAL_RCC_GetSysClockFreq>
 8005e42:	61f8      	str	r0, [r7, #28]
          break;
 8005e44:	e019      	b.n	8005e7a <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005e46:	4b7b      	ldr	r3, [pc, #492]	; (8006034 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e52:	d10f      	bne.n	8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = HSI_VALUE;
 8005e54:	4b78      	ldr	r3, [pc, #480]	; (8006038 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8005e56:	61fb      	str	r3, [r7, #28]
          break;
 8005e58:	e00c      	b.n	8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005e5a:	4b76      	ldr	r3, [pc, #472]	; (8006034 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e60:	f003 0302 	and.w	r3, r3, #2
 8005e64:	2b02      	cmp	r3, #2
 8005e66:	d107      	bne.n	8005e78 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
            frequency = LSE_VALUE;
 8005e68:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e6c:	61fb      	str	r3, [r7, #28]
          break;
 8005e6e:	e003      	b.n	8005e78 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
          break;
 8005e70:	bf00      	nop
 8005e72:	e29f      	b.n	80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005e74:	bf00      	nop
 8005e76:	e29d      	b.n	80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005e78:	bf00      	nop
        break;
 8005e7a:	e29b      	b.n	80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8005e7c:	4b6d      	ldr	r3, [pc, #436]	; (8006034 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e82:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005e86:	60fb      	str	r3, [r7, #12]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e8e:	d025      	beq.n	8005edc <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e96:	d82c      	bhi.n	8005ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e9e:	d013      	beq.n	8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ea6:	d824      	bhi.n	8005ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d004      	beq.n	8005eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005eb4:	d004      	beq.n	8005ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
          break;
 8005eb6:	e01c      	b.n	8005ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005eb8:	f7fe ff48 	bl	8004d4c <HAL_RCC_GetPCLK1Freq>
 8005ebc:	61f8      	str	r0, [r7, #28]
          break;
 8005ebe:	e01d      	b.n	8005efc <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = HAL_RCC_GetSysClockFreq();
 8005ec0:	f7fe feac 	bl	8004c1c <HAL_RCC_GetSysClockFreq>
 8005ec4:	61f8      	str	r0, [r7, #28]
          break;
 8005ec6:	e019      	b.n	8005efc <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005ec8:	4b5a      	ldr	r3, [pc, #360]	; (8006034 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ed0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ed4:	d10f      	bne.n	8005ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = HSI_VALUE;
 8005ed6:	4b58      	ldr	r3, [pc, #352]	; (8006038 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8005ed8:	61fb      	str	r3, [r7, #28]
          break;
 8005eda:	e00c      	b.n	8005ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005edc:	4b55      	ldr	r3, [pc, #340]	; (8006034 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ee2:	f003 0302 	and.w	r3, r3, #2
 8005ee6:	2b02      	cmp	r3, #2
 8005ee8:	d107      	bne.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x976>
            frequency = LSE_VALUE;
 8005eea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005eee:	61fb      	str	r3, [r7, #28]
          break;
 8005ef0:	e003      	b.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x976>
          break;
 8005ef2:	bf00      	nop
 8005ef4:	e25e      	b.n	80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005ef6:	bf00      	nop
 8005ef8:	e25c      	b.n	80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005efa:	bf00      	nop
        break;
 8005efc:	e25a      	b.n	80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005efe:	4b4d      	ldr	r3, [pc, #308]	; (8006034 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f04:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005f08:	60fb      	str	r3, [r7, #12]
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f10:	d007      	beq.n	8005f22 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005f18:	d12f      	bne.n	8005f7a <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          frequency = HAL_RCC_GetSysClockFreq();
 8005f1a:	f7fe fe7f 	bl	8004c1c <HAL_RCC_GetSysClockFreq>
 8005f1e:	61f8      	str	r0, [r7, #28]
          break;
 8005f20:	e02e      	b.n	8005f80 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8005f22:	4b44      	ldr	r3, [pc, #272]	; (8006034 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f2e:	d126      	bne.n	8005f7e <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 8005f30:	4b40      	ldr	r3, [pc, #256]	; (8006034 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005f32:	691b      	ldr	r3, [r3, #16]
 8005f34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d020      	beq.n	8005f7e <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005f3c:	4b3d      	ldr	r3, [pc, #244]	; (8006034 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005f3e:	691b      	ldr	r3, [r3, #16]
 8005f40:	0a1b      	lsrs	r3, r3, #8
 8005f42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f46:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8005f48:	69bb      	ldr	r3, [r7, #24]
 8005f4a:	68ba      	ldr	r2, [r7, #8]
 8005f4c:	fb03 f202 	mul.w	r2, r3, r2
 8005f50:	4b38      	ldr	r3, [pc, #224]	; (8006034 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005f52:	691b      	ldr	r3, [r3, #16]
 8005f54:	091b      	lsrs	r3, r3, #4
 8005f56:	f003 030f 	and.w	r3, r3, #15
 8005f5a:	3301      	adds	r3, #1
 8005f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f60:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8005f62:	4b34      	ldr	r3, [pc, #208]	; (8006034 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005f64:	691b      	ldr	r3, [r3, #16]
 8005f66:	0e5b      	lsrs	r3, r3, #25
 8005f68:	f003 0303 	and.w	r3, r3, #3
 8005f6c:	3301      	adds	r3, #1
 8005f6e:	005b      	lsls	r3, r3, #1
 8005f70:	69ba      	ldr	r2, [r7, #24]
 8005f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f76:	61fb      	str	r3, [r7, #28]
          break;
 8005f78:	e001      	b.n	8005f7e <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
          break;
 8005f7a:	bf00      	nop
 8005f7c:	e21a      	b.n	80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005f7e:	bf00      	nop
        break;
 8005f80:	e218      	b.n	80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8005f82:	4b2c      	ldr	r3, [pc, #176]	; (8006034 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005f84:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005f88:	f003 0304 	and.w	r3, r3, #4
 8005f8c:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d103      	bne.n	8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetPCLK2Freq();
 8005f94:	f7fe fef0 	bl	8004d78 <HAL_RCC_GetPCLK2Freq>
 8005f98:	61f8      	str	r0, [r7, #28]
        break;
 8005f9a:	e20b      	b.n	80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          frequency = HAL_RCC_GetSysClockFreq();
 8005f9c:	f7fe fe3e 	bl	8004c1c <HAL_RCC_GetSysClockFreq>
 8005fa0:	61f8      	str	r0, [r7, #28]
        break;
 8005fa2:	e207      	b.n	80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 8005fa4:	4b23      	ldr	r3, [pc, #140]	; (8006034 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005fa6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005faa:	f003 0318 	and.w	r3, r3, #24
 8005fae:	60fb      	str	r3, [r7, #12]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2b10      	cmp	r3, #16
 8005fb4:	d010      	beq.n	8005fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xa54>
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2b10      	cmp	r3, #16
 8005fba:	d834      	bhi.n	8006026 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d003      	beq.n	8005fca <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2b08      	cmp	r3, #8
 8005fc6:	d024      	beq.n	8006012 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
          break;
 8005fc8:	e02d      	b.n	8006026 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8005fca:	69b9      	ldr	r1, [r7, #24]
 8005fcc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005fd0:	f000 fbf2 	bl	80067b8 <RCCEx_GetSAIxPeriphCLKFreq>
 8005fd4:	61f8      	str	r0, [r7, #28]
          break;
 8005fd6:	e02b      	b.n	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005fd8:	4b16      	ldr	r3, [pc, #88]	; (8006034 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f003 0302 	and.w	r3, r3, #2
 8005fe0:	2b02      	cmp	r3, #2
 8005fe2:	d122      	bne.n	800602a <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005fe4:	4b13      	ldr	r3, [pc, #76]	; (8006034 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f003 0308 	and.w	r3, r3, #8
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d005      	beq.n	8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 8005ff0:	4b10      	ldr	r3, [pc, #64]	; (8006034 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	091b      	lsrs	r3, r3, #4
 8005ff6:	f003 030f 	and.w	r3, r3, #15
 8005ffa:	e005      	b.n	8006008 <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
 8005ffc:	4b0d      	ldr	r3, [pc, #52]	; (8006034 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005ffe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006002:	0a1b      	lsrs	r3, r3, #8
 8006004:	f003 030f 	and.w	r3, r3, #15
 8006008:	4a0c      	ldr	r2, [pc, #48]	; (800603c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800600a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800600e:	61fb      	str	r3, [r7, #28]
          break;
 8006010:	e00b      	b.n	800602a <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006012:	4b08      	ldr	r3, [pc, #32]	; (8006034 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800601a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800601e:	d106      	bne.n	800602e <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
            frequency = HSI_VALUE;
 8006020:	4b05      	ldr	r3, [pc, #20]	; (8006038 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8006022:	61fb      	str	r3, [r7, #28]
          break;
 8006024:	e003      	b.n	800602e <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
          break;
 8006026:	bf00      	nop
 8006028:	e1c4      	b.n	80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800602a:	bf00      	nop
 800602c:	e1c2      	b.n	80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800602e:	bf00      	nop
        break;
 8006030:	e1c0      	b.n	80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 8006032:	bf00      	nop
 8006034:	40021000 	.word	0x40021000
 8006038:	00f42400 	.word	0x00f42400
 800603c:	08009d98 	.word	0x08009d98
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006040:	4b96      	ldr	r3, [pc, #600]	; (800629c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006046:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800604a:	60fb      	str	r3, [r7, #12]
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006052:	d013      	beq.n	800607c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800605a:	d819      	bhi.n	8006090 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d004      	beq.n	800606c <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006068:	d004      	beq.n	8006074 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>
          break;
 800606a:	e011      	b.n	8006090 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          frequency = HAL_RCC_GetPCLK1Freq();
 800606c:	f7fe fe6e 	bl	8004d4c <HAL_RCC_GetPCLK1Freq>
 8006070:	61f8      	str	r0, [r7, #28]
          break;
 8006072:	e010      	b.n	8006096 <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          frequency = HAL_RCC_GetSysClockFreq();
 8006074:	f7fe fdd2 	bl	8004c1c <HAL_RCC_GetSysClockFreq>
 8006078:	61f8      	str	r0, [r7, #28]
          break;
 800607a:	e00c      	b.n	8006096 <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800607c:	4b87      	ldr	r3, [pc, #540]	; (800629c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006084:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006088:	d104      	bne.n	8006094 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
            frequency = HSI_VALUE;
 800608a:	4b85      	ldr	r3, [pc, #532]	; (80062a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800608c:	61fb      	str	r3, [r7, #28]
          break;
 800608e:	e001      	b.n	8006094 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
          break;
 8006090:	bf00      	nop
 8006092:	e18f      	b.n	80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006094:	bf00      	nop
        break;
 8006096:	e18d      	b.n	80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006098:	4b80      	ldr	r3, [pc, #512]	; (800629c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800609a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800609e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80060a2:	60fb      	str	r3, [r7, #12]
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060aa:	d013      	beq.n	80060d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060b2:	d819      	bhi.n	80060e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d004      	beq.n	80060c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80060c0:	d004      	beq.n	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          break;
 80060c2:	e011      	b.n	80060e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          frequency = HAL_RCC_GetPCLK1Freq();
 80060c4:	f7fe fe42 	bl	8004d4c <HAL_RCC_GetPCLK1Freq>
 80060c8:	61f8      	str	r0, [r7, #28]
          break;
 80060ca:	e010      	b.n	80060ee <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = HAL_RCC_GetSysClockFreq();
 80060cc:	f7fe fda6 	bl	8004c1c <HAL_RCC_GetSysClockFreq>
 80060d0:	61f8      	str	r0, [r7, #28]
          break;
 80060d2:	e00c      	b.n	80060ee <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80060d4:	4b71      	ldr	r3, [pc, #452]	; (800629c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060e0:	d104      	bne.n	80060ec <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
            frequency = HSI_VALUE;
 80060e2:	4b6f      	ldr	r3, [pc, #444]	; (80062a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 80060e4:	61fb      	str	r3, [r7, #28]
          break;
 80060e6:	e001      	b.n	80060ec <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          break;
 80060e8:	bf00      	nop
 80060ea:	e163      	b.n	80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80060ec:	bf00      	nop
        break;
 80060ee:	e161      	b.n	80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80060f0:	4b6a      	ldr	r3, [pc, #424]	; (800629c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80060f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80060fa:	60fb      	str	r3, [r7, #12]
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006102:	d013      	beq.n	800612c <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800610a:	d819      	bhi.n	8006140 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d004      	beq.n	800611c <HAL_RCCEx_GetPeriphCLKFreq+0xb98>
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006118:	d004      	beq.n	8006124 <HAL_RCCEx_GetPeriphCLKFreq+0xba0>
          break;
 800611a:	e011      	b.n	8006140 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          frequency = HAL_RCC_GetPCLK1Freq();
 800611c:	f7fe fe16 	bl	8004d4c <HAL_RCC_GetPCLK1Freq>
 8006120:	61f8      	str	r0, [r7, #28]
          break;
 8006122:	e010      	b.n	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          frequency = HAL_RCC_GetSysClockFreq();
 8006124:	f7fe fd7a 	bl	8004c1c <HAL_RCC_GetSysClockFreq>
 8006128:	61f8      	str	r0, [r7, #28]
          break;
 800612a:	e00c      	b.n	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800612c:	4b5b      	ldr	r3, [pc, #364]	; (800629c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006134:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006138:	d104      	bne.n	8006144 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
            frequency = HSI_VALUE;
 800613a:	4b59      	ldr	r3, [pc, #356]	; (80062a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800613c:	61fb      	str	r3, [r7, #28]
          break;
 800613e:	e001      	b.n	8006144 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
          break;
 8006140:	bf00      	nop
 8006142:	e137      	b.n	80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006144:	bf00      	nop
        break;
 8006146:	e135      	b.n	80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8006148:	4b54      	ldr	r3, [pc, #336]	; (800629c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800614a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800614e:	f003 0303 	and.w	r3, r3, #3
 8006152:	60fb      	str	r3, [r7, #12]
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2b02      	cmp	r3, #2
 8006158:	d011      	beq.n	800617e <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2b02      	cmp	r3, #2
 800615e:	d818      	bhi.n	8006192 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d003      	beq.n	800616e <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2b01      	cmp	r3, #1
 800616a:	d004      	beq.n	8006176 <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
          break;
 800616c:	e011      	b.n	8006192 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          frequency = HAL_RCC_GetPCLK1Freq();
 800616e:	f7fe fded 	bl	8004d4c <HAL_RCC_GetPCLK1Freq>
 8006172:	61f8      	str	r0, [r7, #28]
          break;
 8006174:	e010      	b.n	8006198 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          frequency = HAL_RCC_GetSysClockFreq();
 8006176:	f7fe fd51 	bl	8004c1c <HAL_RCC_GetSysClockFreq>
 800617a:	61f8      	str	r0, [r7, #28]
          break;
 800617c:	e00c      	b.n	8006198 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800617e:	4b47      	ldr	r3, [pc, #284]	; (800629c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006186:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800618a:	d104      	bne.n	8006196 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
            frequency = HSI_VALUE;
 800618c:	4b44      	ldr	r3, [pc, #272]	; (80062a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800618e:	61fb      	str	r3, [r7, #28]
          break;
 8006190:	e001      	b.n	8006196 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
          break;
 8006192:	bf00      	nop
 8006194:	e10e      	b.n	80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006196:	bf00      	nop
        break;
 8006198:	e10c      	b.n	80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800619a:	4b40      	ldr	r3, [pc, #256]	; (800629c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800619c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061a0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80061a4:	60fb      	str	r3, [r7, #12]
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80061ac:	d02c      	beq.n	8006208 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80061b4:	d833      	bhi.n	800621e <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80061bc:	d01a      	beq.n	80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0xc70>
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80061c4:	d82b      	bhi.n	800621e <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d004      	beq.n	80061d6 <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80061d2:	d004      	beq.n	80061de <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
          break;
 80061d4:	e023      	b.n	800621e <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          frequency = HAL_RCC_GetPCLK1Freq();
 80061d6:	f7fe fdb9 	bl	8004d4c <HAL_RCC_GetPCLK1Freq>
 80061da:	61f8      	str	r0, [r7, #28]
          break;
 80061dc:	e026      	b.n	800622c <HAL_RCCEx_GetPeriphCLKFreq+0xca8>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80061de:	4b2f      	ldr	r3, [pc, #188]	; (800629c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80061e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80061e4:	f003 0302 	and.w	r3, r3, #2
 80061e8:	2b02      	cmp	r3, #2
 80061ea:	d11a      	bne.n	8006222 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
              frequency = LSI_VALUE;
 80061ec:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80061f0:	61fb      	str	r3, [r7, #28]
          break;
 80061f2:	e016      	b.n	8006222 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80061f4:	4b29      	ldr	r3, [pc, #164]	; (800629c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006200:	d111      	bne.n	8006226 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = HSI_VALUE;
 8006202:	4b27      	ldr	r3, [pc, #156]	; (80062a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8006204:	61fb      	str	r3, [r7, #28]
          break;
 8006206:	e00e      	b.n	8006226 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006208:	4b24      	ldr	r3, [pc, #144]	; (800629c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800620a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800620e:	f003 0302 	and.w	r3, r3, #2
 8006212:	2b02      	cmp	r3, #2
 8006214:	d109      	bne.n	800622a <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
            frequency = LSE_VALUE;
 8006216:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800621a:	61fb      	str	r3, [r7, #28]
          break;
 800621c:	e005      	b.n	800622a <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
          break;
 800621e:	bf00      	nop
 8006220:	e0c8      	b.n	80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006222:	bf00      	nop
 8006224:	e0c6      	b.n	80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006226:	bf00      	nop
 8006228:	e0c4      	b.n	80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800622a:	bf00      	nop
        break;
 800622c:	e0c2      	b.n	80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800622e:	4b1b      	ldr	r3, [pc, #108]	; (800629c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006234:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006238:	60fb      	str	r3, [r7, #12]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006240:	d030      	beq.n	80062a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd20>
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006248:	d837      	bhi.n	80062ba <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006250:	d01a      	beq.n	8006288 <HAL_RCCEx_GetPeriphCLKFreq+0xd04>
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006258:	d82f      	bhi.n	80062ba <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d004      	beq.n	800626a <HAL_RCCEx_GetPeriphCLKFreq+0xce6>
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006266:	d004      	beq.n	8006272 <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
          break;
 8006268:	e027      	b.n	80062ba <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          frequency = HAL_RCC_GetPCLK1Freq();
 800626a:	f7fe fd6f 	bl	8004d4c <HAL_RCC_GetPCLK1Freq>
 800626e:	61f8      	str	r0, [r7, #28]
          break;
 8006270:	e02a      	b.n	80062c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006272:	4b0a      	ldr	r3, [pc, #40]	; (800629c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006274:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006278:	f003 0302 	and.w	r3, r3, #2
 800627c:	2b02      	cmp	r3, #2
 800627e:	d11e      	bne.n	80062be <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
              frequency = LSI_VALUE;
 8006280:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006284:	61fb      	str	r3, [r7, #28]
          break;
 8006286:	e01a      	b.n	80062be <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006288:	4b04      	ldr	r3, [pc, #16]	; (800629c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006290:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006294:	d115      	bne.n	80062c2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = HSI_VALUE;
 8006296:	4b02      	ldr	r3, [pc, #8]	; (80062a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8006298:	61fb      	str	r3, [r7, #28]
          break;
 800629a:	e012      	b.n	80062c2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 800629c:	40021000 	.word	0x40021000
 80062a0:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80062a4:	4b46      	ldr	r3, [pc, #280]	; (80063c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80062a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062aa:	f003 0302 	and.w	r3, r3, #2
 80062ae:	2b02      	cmp	r3, #2
 80062b0:	d109      	bne.n	80062c6 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
            frequency = LSE_VALUE;
 80062b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062b6:	61fb      	str	r3, [r7, #28]
          break;
 80062b8:	e005      	b.n	80062c6 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
          break;
 80062ba:	bf00      	nop
 80062bc:	e07a      	b.n	80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80062be:	bf00      	nop
 80062c0:	e078      	b.n	80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80062c2:	bf00      	nop
 80062c4:	e076      	b.n	80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80062c6:	bf00      	nop
        break;
 80062c8:	e074      	b.n	80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80062ca:	4b3d      	ldr	r3, [pc, #244]	; (80063c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80062cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80062d0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80062d4:	60fb      	str	r3, [r7, #12]
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80062dc:	d02c      	beq.n	8006338 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80062e4:	d855      	bhi.n	8006392 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d004      	beq.n	80062f6 <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062f2:	d004      	beq.n	80062fe <HAL_RCCEx_GetPeriphCLKFreq+0xd7a>
          break;
 80062f4:	e04d      	b.n	8006392 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          frequency = HAL_RCC_GetSysClockFreq();
 80062f6:	f7fe fc91 	bl	8004c1c <HAL_RCC_GetSysClockFreq>
 80062fa:	61f8      	str	r0, [r7, #28]
          break;
 80062fc:	e04e      	b.n	800639c <HAL_RCCEx_GetPeriphCLKFreq+0xe18>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80062fe:	4b30      	ldr	r3, [pc, #192]	; (80063c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f003 0302 	and.w	r3, r3, #2
 8006306:	2b02      	cmp	r3, #2
 8006308:	d145      	bne.n	8006396 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800630a:	4b2d      	ldr	r3, [pc, #180]	; (80063c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f003 0308 	and.w	r3, r3, #8
 8006312:	2b00      	cmp	r3, #0
 8006314:	d005      	beq.n	8006322 <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 8006316:	4b2a      	ldr	r3, [pc, #168]	; (80063c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	091b      	lsrs	r3, r3, #4
 800631c:	f003 030f 	and.w	r3, r3, #15
 8006320:	e005      	b.n	800632e <HAL_RCCEx_GetPeriphCLKFreq+0xdaa>
 8006322:	4b27      	ldr	r3, [pc, #156]	; (80063c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006324:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006328:	0a1b      	lsrs	r3, r3, #8
 800632a:	f003 030f 	and.w	r3, r3, #15
 800632e:	4a25      	ldr	r2, [pc, #148]	; (80063c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe40>)
 8006330:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006334:	61fb      	str	r3, [r7, #28]
          break;
 8006336:	e02e      	b.n	8006396 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8006338:	4b21      	ldr	r3, [pc, #132]	; (80063c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006340:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006344:	d129      	bne.n	800639a <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8006346:	4b1e      	ldr	r3, [pc, #120]	; (80063c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006348:	68db      	ldr	r3, [r3, #12]
 800634a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800634e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006352:	d122      	bne.n	800639a <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006354:	4b1a      	ldr	r3, [pc, #104]	; (80063c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006356:	68db      	ldr	r3, [r3, #12]
 8006358:	0a1b      	lsrs	r3, r3, #8
 800635a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800635e:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006360:	69bb      	ldr	r3, [r7, #24]
 8006362:	68ba      	ldr	r2, [r7, #8]
 8006364:	fb03 f202 	mul.w	r2, r3, r2
 8006368:	4b15      	ldr	r3, [pc, #84]	; (80063c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800636a:	68db      	ldr	r3, [r3, #12]
 800636c:	091b      	lsrs	r3, r3, #4
 800636e:	f003 030f 	and.w	r3, r3, #15
 8006372:	3301      	adds	r3, #1
 8006374:	fbb2 f3f3 	udiv	r3, r2, r3
 8006378:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800637a:	4b11      	ldr	r3, [pc, #68]	; (80063c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800637c:	68db      	ldr	r3, [r3, #12]
 800637e:	0d5b      	lsrs	r3, r3, #21
 8006380:	f003 0303 	and.w	r3, r3, #3
 8006384:	3301      	adds	r3, #1
 8006386:	005b      	lsls	r3, r3, #1
 8006388:	69ba      	ldr	r2, [r7, #24]
 800638a:	fbb2 f3f3 	udiv	r3, r2, r3
 800638e:	61fb      	str	r3, [r7, #28]
          break;
 8006390:	e003      	b.n	800639a <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          break;
 8006392:	bf00      	nop
 8006394:	e00e      	b.n	80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006396:	bf00      	nop
 8006398:	e00c      	b.n	80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800639a:	bf00      	nop
        break;
 800639c:	e00a      	b.n	80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800639e:	bf00      	nop
 80063a0:	e008      	b.n	80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80063a2:	bf00      	nop
 80063a4:	e006      	b.n	80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80063a6:	bf00      	nop
 80063a8:	e004      	b.n	80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80063aa:	bf00      	nop
 80063ac:	e002      	b.n	80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80063ae:	bf00      	nop
 80063b0:	e000      	b.n	80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80063b2:	bf00      	nop
    }
  }

  return(frequency);
 80063b4:	69fb      	ldr	r3, [r7, #28]
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3720      	adds	r7, #32
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}
 80063be:	bf00      	nop
 80063c0:	40021000 	.word	0x40021000
 80063c4:	08009d98 	.word	0x08009d98

080063c8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80063c8:	b480      	push	{r7}
 80063ca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80063cc:	4b05      	ldr	r3, [pc, #20]	; (80063e4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a04      	ldr	r2, [pc, #16]	; (80063e4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80063d2:	f043 0304 	orr.w	r3, r3, #4
 80063d6:	6013      	str	r3, [r2, #0]
}
 80063d8:	bf00      	nop
 80063da:	46bd      	mov	sp, r7
 80063dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e0:	4770      	bx	lr
 80063e2:	bf00      	nop
 80063e4:	40021000 	.word	0x40021000

080063e8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b084      	sub	sp, #16
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80063f2:	2300      	movs	r3, #0
 80063f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80063f6:	4b72      	ldr	r3, [pc, #456]	; (80065c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80063f8:	68db      	ldr	r3, [r3, #12]
 80063fa:	f003 0303 	and.w	r3, r3, #3
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d00e      	beq.n	8006420 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006402:	4b6f      	ldr	r3, [pc, #444]	; (80065c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006404:	68db      	ldr	r3, [r3, #12]
 8006406:	f003 0203 	and.w	r2, r3, #3
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	429a      	cmp	r2, r3
 8006410:	d103      	bne.n	800641a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
       ||
 8006416:	2b00      	cmp	r3, #0
 8006418:	d142      	bne.n	80064a0 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800641a:	2301      	movs	r3, #1
 800641c:	73fb      	strb	r3, [r7, #15]
 800641e:	e03f      	b.n	80064a0 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	2b03      	cmp	r3, #3
 8006426:	d018      	beq.n	800645a <RCCEx_PLLSAI1_Config+0x72>
 8006428:	2b03      	cmp	r3, #3
 800642a:	d825      	bhi.n	8006478 <RCCEx_PLLSAI1_Config+0x90>
 800642c:	2b01      	cmp	r3, #1
 800642e:	d002      	beq.n	8006436 <RCCEx_PLLSAI1_Config+0x4e>
 8006430:	2b02      	cmp	r3, #2
 8006432:	d009      	beq.n	8006448 <RCCEx_PLLSAI1_Config+0x60>
 8006434:	e020      	b.n	8006478 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006436:	4b62      	ldr	r3, [pc, #392]	; (80065c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f003 0302 	and.w	r3, r3, #2
 800643e:	2b00      	cmp	r3, #0
 8006440:	d11d      	bne.n	800647e <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8006442:	2301      	movs	r3, #1
 8006444:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006446:	e01a      	b.n	800647e <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006448:	4b5d      	ldr	r3, [pc, #372]	; (80065c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006450:	2b00      	cmp	r3, #0
 8006452:	d116      	bne.n	8006482 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8006454:	2301      	movs	r3, #1
 8006456:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006458:	e013      	b.n	8006482 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800645a:	4b59      	ldr	r3, [pc, #356]	; (80065c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006462:	2b00      	cmp	r3, #0
 8006464:	d10f      	bne.n	8006486 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006466:	4b56      	ldr	r3, [pc, #344]	; (80065c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800646e:	2b00      	cmp	r3, #0
 8006470:	d109      	bne.n	8006486 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8006472:	2301      	movs	r3, #1
 8006474:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006476:	e006      	b.n	8006486 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006478:	2301      	movs	r3, #1
 800647a:	73fb      	strb	r3, [r7, #15]
      break;
 800647c:	e004      	b.n	8006488 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800647e:	bf00      	nop
 8006480:	e002      	b.n	8006488 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006482:	bf00      	nop
 8006484:	e000      	b.n	8006488 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006486:	bf00      	nop
    }

    if(status == HAL_OK)
 8006488:	7bfb      	ldrb	r3, [r7, #15]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d108      	bne.n	80064a0 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800648e:	4b4c      	ldr	r3, [pc, #304]	; (80065c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006490:	68db      	ldr	r3, [r3, #12]
 8006492:	f023 0203 	bic.w	r2, r3, #3
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4949      	ldr	r1, [pc, #292]	; (80065c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800649c:	4313      	orrs	r3, r2
 800649e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80064a0:	7bfb      	ldrb	r3, [r7, #15]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	f040 8086 	bne.w	80065b4 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80064a8:	4b45      	ldr	r3, [pc, #276]	; (80065c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a44      	ldr	r2, [pc, #272]	; (80065c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80064ae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80064b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064b4:	f7fc f902 	bl	80026bc <HAL_GetTick>
 80064b8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80064ba:	e009      	b.n	80064d0 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80064bc:	f7fc f8fe 	bl	80026bc <HAL_GetTick>
 80064c0:	4602      	mov	r2, r0
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	1ad3      	subs	r3, r2, r3
 80064c6:	2b02      	cmp	r3, #2
 80064c8:	d902      	bls.n	80064d0 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80064ca:	2303      	movs	r3, #3
 80064cc:	73fb      	strb	r3, [r7, #15]
        break;
 80064ce:	e005      	b.n	80064dc <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80064d0:	4b3b      	ldr	r3, [pc, #236]	; (80065c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d1ef      	bne.n	80064bc <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80064dc:	7bfb      	ldrb	r3, [r7, #15]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d168      	bne.n	80065b4 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d113      	bne.n	8006510 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80064e8:	4b35      	ldr	r3, [pc, #212]	; (80065c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80064ea:	691a      	ldr	r2, [r3, #16]
 80064ec:	4b35      	ldr	r3, [pc, #212]	; (80065c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80064ee:	4013      	ands	r3, r2
 80064f0:	687a      	ldr	r2, [r7, #4]
 80064f2:	6892      	ldr	r2, [r2, #8]
 80064f4:	0211      	lsls	r1, r2, #8
 80064f6:	687a      	ldr	r2, [r7, #4]
 80064f8:	68d2      	ldr	r2, [r2, #12]
 80064fa:	06d2      	lsls	r2, r2, #27
 80064fc:	4311      	orrs	r1, r2
 80064fe:	687a      	ldr	r2, [r7, #4]
 8006500:	6852      	ldr	r2, [r2, #4]
 8006502:	3a01      	subs	r2, #1
 8006504:	0112      	lsls	r2, r2, #4
 8006506:	430a      	orrs	r2, r1
 8006508:	492d      	ldr	r1, [pc, #180]	; (80065c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800650a:	4313      	orrs	r3, r2
 800650c:	610b      	str	r3, [r1, #16]
 800650e:	e02d      	b.n	800656c <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	2b01      	cmp	r3, #1
 8006514:	d115      	bne.n	8006542 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006516:	4b2a      	ldr	r3, [pc, #168]	; (80065c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006518:	691a      	ldr	r2, [r3, #16]
 800651a:	4b2b      	ldr	r3, [pc, #172]	; (80065c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800651c:	4013      	ands	r3, r2
 800651e:	687a      	ldr	r2, [r7, #4]
 8006520:	6892      	ldr	r2, [r2, #8]
 8006522:	0211      	lsls	r1, r2, #8
 8006524:	687a      	ldr	r2, [r7, #4]
 8006526:	6912      	ldr	r2, [r2, #16]
 8006528:	0852      	lsrs	r2, r2, #1
 800652a:	3a01      	subs	r2, #1
 800652c:	0552      	lsls	r2, r2, #21
 800652e:	4311      	orrs	r1, r2
 8006530:	687a      	ldr	r2, [r7, #4]
 8006532:	6852      	ldr	r2, [r2, #4]
 8006534:	3a01      	subs	r2, #1
 8006536:	0112      	lsls	r2, r2, #4
 8006538:	430a      	orrs	r2, r1
 800653a:	4921      	ldr	r1, [pc, #132]	; (80065c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800653c:	4313      	orrs	r3, r2
 800653e:	610b      	str	r3, [r1, #16]
 8006540:	e014      	b.n	800656c <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006542:	4b1f      	ldr	r3, [pc, #124]	; (80065c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006544:	691a      	ldr	r2, [r3, #16]
 8006546:	4b21      	ldr	r3, [pc, #132]	; (80065cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006548:	4013      	ands	r3, r2
 800654a:	687a      	ldr	r2, [r7, #4]
 800654c:	6892      	ldr	r2, [r2, #8]
 800654e:	0211      	lsls	r1, r2, #8
 8006550:	687a      	ldr	r2, [r7, #4]
 8006552:	6952      	ldr	r2, [r2, #20]
 8006554:	0852      	lsrs	r2, r2, #1
 8006556:	3a01      	subs	r2, #1
 8006558:	0652      	lsls	r2, r2, #25
 800655a:	4311      	orrs	r1, r2
 800655c:	687a      	ldr	r2, [r7, #4]
 800655e:	6852      	ldr	r2, [r2, #4]
 8006560:	3a01      	subs	r2, #1
 8006562:	0112      	lsls	r2, r2, #4
 8006564:	430a      	orrs	r2, r1
 8006566:	4916      	ldr	r1, [pc, #88]	; (80065c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006568:	4313      	orrs	r3, r2
 800656a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800656c:	4b14      	ldr	r3, [pc, #80]	; (80065c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a13      	ldr	r2, [pc, #76]	; (80065c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006572:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006576:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006578:	f7fc f8a0 	bl	80026bc <HAL_GetTick>
 800657c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800657e:	e009      	b.n	8006594 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006580:	f7fc f89c 	bl	80026bc <HAL_GetTick>
 8006584:	4602      	mov	r2, r0
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	1ad3      	subs	r3, r2, r3
 800658a:	2b02      	cmp	r3, #2
 800658c:	d902      	bls.n	8006594 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800658e:	2303      	movs	r3, #3
 8006590:	73fb      	strb	r3, [r7, #15]
          break;
 8006592:	e005      	b.n	80065a0 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006594:	4b0a      	ldr	r3, [pc, #40]	; (80065c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800659c:	2b00      	cmp	r3, #0
 800659e:	d0ef      	beq.n	8006580 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80065a0:	7bfb      	ldrb	r3, [r7, #15]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d106      	bne.n	80065b4 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80065a6:	4b06      	ldr	r3, [pc, #24]	; (80065c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80065a8:	691a      	ldr	r2, [r3, #16]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	699b      	ldr	r3, [r3, #24]
 80065ae:	4904      	ldr	r1, [pc, #16]	; (80065c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80065b0:	4313      	orrs	r3, r2
 80065b2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80065b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3710      	adds	r7, #16
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}
 80065be:	bf00      	nop
 80065c0:	40021000 	.word	0x40021000
 80065c4:	07ff800f 	.word	0x07ff800f
 80065c8:	ff9f800f 	.word	0xff9f800f
 80065cc:	f9ff800f 	.word	0xf9ff800f

080065d0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b084      	sub	sp, #16
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
 80065d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80065da:	2300      	movs	r3, #0
 80065dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80065de:	4b72      	ldr	r3, [pc, #456]	; (80067a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80065e0:	68db      	ldr	r3, [r3, #12]
 80065e2:	f003 0303 	and.w	r3, r3, #3
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d00e      	beq.n	8006608 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80065ea:	4b6f      	ldr	r3, [pc, #444]	; (80067a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80065ec:	68db      	ldr	r3, [r3, #12]
 80065ee:	f003 0203 	and.w	r2, r3, #3
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	429a      	cmp	r2, r3
 80065f8:	d103      	bne.n	8006602 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
       ||
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d142      	bne.n	8006688 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8006602:	2301      	movs	r3, #1
 8006604:	73fb      	strb	r3, [r7, #15]
 8006606:	e03f      	b.n	8006688 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	2b03      	cmp	r3, #3
 800660e:	d018      	beq.n	8006642 <RCCEx_PLLSAI2_Config+0x72>
 8006610:	2b03      	cmp	r3, #3
 8006612:	d825      	bhi.n	8006660 <RCCEx_PLLSAI2_Config+0x90>
 8006614:	2b01      	cmp	r3, #1
 8006616:	d002      	beq.n	800661e <RCCEx_PLLSAI2_Config+0x4e>
 8006618:	2b02      	cmp	r3, #2
 800661a:	d009      	beq.n	8006630 <RCCEx_PLLSAI2_Config+0x60>
 800661c:	e020      	b.n	8006660 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800661e:	4b62      	ldr	r3, [pc, #392]	; (80067a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f003 0302 	and.w	r3, r3, #2
 8006626:	2b00      	cmp	r3, #0
 8006628:	d11d      	bne.n	8006666 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800662a:	2301      	movs	r3, #1
 800662c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800662e:	e01a      	b.n	8006666 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006630:	4b5d      	ldr	r3, [pc, #372]	; (80067a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006638:	2b00      	cmp	r3, #0
 800663a:	d116      	bne.n	800666a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 800663c:	2301      	movs	r3, #1
 800663e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006640:	e013      	b.n	800666a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006642:	4b59      	ldr	r3, [pc, #356]	; (80067a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800664a:	2b00      	cmp	r3, #0
 800664c:	d10f      	bne.n	800666e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800664e:	4b56      	ldr	r3, [pc, #344]	; (80067a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006656:	2b00      	cmp	r3, #0
 8006658:	d109      	bne.n	800666e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800665a:	2301      	movs	r3, #1
 800665c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800665e:	e006      	b.n	800666e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006660:	2301      	movs	r3, #1
 8006662:	73fb      	strb	r3, [r7, #15]
      break;
 8006664:	e004      	b.n	8006670 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006666:	bf00      	nop
 8006668:	e002      	b.n	8006670 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800666a:	bf00      	nop
 800666c:	e000      	b.n	8006670 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800666e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006670:	7bfb      	ldrb	r3, [r7, #15]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d108      	bne.n	8006688 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8006676:	4b4c      	ldr	r3, [pc, #304]	; (80067a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006678:	68db      	ldr	r3, [r3, #12]
 800667a:	f023 0203 	bic.w	r2, r3, #3
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4949      	ldr	r1, [pc, #292]	; (80067a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006684:	4313      	orrs	r3, r2
 8006686:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006688:	7bfb      	ldrb	r3, [r7, #15]
 800668a:	2b00      	cmp	r3, #0
 800668c:	f040 8086 	bne.w	800679c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006690:	4b45      	ldr	r3, [pc, #276]	; (80067a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a44      	ldr	r2, [pc, #272]	; (80067a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006696:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800669a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800669c:	f7fc f80e 	bl	80026bc <HAL_GetTick>
 80066a0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80066a2:	e009      	b.n	80066b8 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80066a4:	f7fc f80a 	bl	80026bc <HAL_GetTick>
 80066a8:	4602      	mov	r2, r0
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	1ad3      	subs	r3, r2, r3
 80066ae:	2b02      	cmp	r3, #2
 80066b0:	d902      	bls.n	80066b8 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80066b2:	2303      	movs	r3, #3
 80066b4:	73fb      	strb	r3, [r7, #15]
        break;
 80066b6:	e005      	b.n	80066c4 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80066b8:	4b3b      	ldr	r3, [pc, #236]	; (80067a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d1ef      	bne.n	80066a4 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80066c4:	7bfb      	ldrb	r3, [r7, #15]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d168      	bne.n	800679c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d113      	bne.n	80066f8 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80066d0:	4b35      	ldr	r3, [pc, #212]	; (80067a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80066d2:	695a      	ldr	r2, [r3, #20]
 80066d4:	4b35      	ldr	r3, [pc, #212]	; (80067ac <RCCEx_PLLSAI2_Config+0x1dc>)
 80066d6:	4013      	ands	r3, r2
 80066d8:	687a      	ldr	r2, [r7, #4]
 80066da:	6892      	ldr	r2, [r2, #8]
 80066dc:	0211      	lsls	r1, r2, #8
 80066de:	687a      	ldr	r2, [r7, #4]
 80066e0:	68d2      	ldr	r2, [r2, #12]
 80066e2:	06d2      	lsls	r2, r2, #27
 80066e4:	4311      	orrs	r1, r2
 80066e6:	687a      	ldr	r2, [r7, #4]
 80066e8:	6852      	ldr	r2, [r2, #4]
 80066ea:	3a01      	subs	r2, #1
 80066ec:	0112      	lsls	r2, r2, #4
 80066ee:	430a      	orrs	r2, r1
 80066f0:	492d      	ldr	r1, [pc, #180]	; (80067a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80066f2:	4313      	orrs	r3, r2
 80066f4:	614b      	str	r3, [r1, #20]
 80066f6:	e02d      	b.n	8006754 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	2b01      	cmp	r3, #1
 80066fc:	d115      	bne.n	800672a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80066fe:	4b2a      	ldr	r3, [pc, #168]	; (80067a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006700:	695a      	ldr	r2, [r3, #20]
 8006702:	4b2b      	ldr	r3, [pc, #172]	; (80067b0 <RCCEx_PLLSAI2_Config+0x1e0>)
 8006704:	4013      	ands	r3, r2
 8006706:	687a      	ldr	r2, [r7, #4]
 8006708:	6892      	ldr	r2, [r2, #8]
 800670a:	0211      	lsls	r1, r2, #8
 800670c:	687a      	ldr	r2, [r7, #4]
 800670e:	6912      	ldr	r2, [r2, #16]
 8006710:	0852      	lsrs	r2, r2, #1
 8006712:	3a01      	subs	r2, #1
 8006714:	0552      	lsls	r2, r2, #21
 8006716:	4311      	orrs	r1, r2
 8006718:	687a      	ldr	r2, [r7, #4]
 800671a:	6852      	ldr	r2, [r2, #4]
 800671c:	3a01      	subs	r2, #1
 800671e:	0112      	lsls	r2, r2, #4
 8006720:	430a      	orrs	r2, r1
 8006722:	4921      	ldr	r1, [pc, #132]	; (80067a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006724:	4313      	orrs	r3, r2
 8006726:	614b      	str	r3, [r1, #20]
 8006728:	e014      	b.n	8006754 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800672a:	4b1f      	ldr	r3, [pc, #124]	; (80067a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800672c:	695a      	ldr	r2, [r3, #20]
 800672e:	4b21      	ldr	r3, [pc, #132]	; (80067b4 <RCCEx_PLLSAI2_Config+0x1e4>)
 8006730:	4013      	ands	r3, r2
 8006732:	687a      	ldr	r2, [r7, #4]
 8006734:	6892      	ldr	r2, [r2, #8]
 8006736:	0211      	lsls	r1, r2, #8
 8006738:	687a      	ldr	r2, [r7, #4]
 800673a:	6952      	ldr	r2, [r2, #20]
 800673c:	0852      	lsrs	r2, r2, #1
 800673e:	3a01      	subs	r2, #1
 8006740:	0652      	lsls	r2, r2, #25
 8006742:	4311      	orrs	r1, r2
 8006744:	687a      	ldr	r2, [r7, #4]
 8006746:	6852      	ldr	r2, [r2, #4]
 8006748:	3a01      	subs	r2, #1
 800674a:	0112      	lsls	r2, r2, #4
 800674c:	430a      	orrs	r2, r1
 800674e:	4916      	ldr	r1, [pc, #88]	; (80067a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006750:	4313      	orrs	r3, r2
 8006752:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006754:	4b14      	ldr	r3, [pc, #80]	; (80067a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a13      	ldr	r2, [pc, #76]	; (80067a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800675a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800675e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006760:	f7fb ffac 	bl	80026bc <HAL_GetTick>
 8006764:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006766:	e009      	b.n	800677c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006768:	f7fb ffa8 	bl	80026bc <HAL_GetTick>
 800676c:	4602      	mov	r2, r0
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	1ad3      	subs	r3, r2, r3
 8006772:	2b02      	cmp	r3, #2
 8006774:	d902      	bls.n	800677c <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006776:	2303      	movs	r3, #3
 8006778:	73fb      	strb	r3, [r7, #15]
          break;
 800677a:	e005      	b.n	8006788 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800677c:	4b0a      	ldr	r3, [pc, #40]	; (80067a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006784:	2b00      	cmp	r3, #0
 8006786:	d0ef      	beq.n	8006768 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006788:	7bfb      	ldrb	r3, [r7, #15]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d106      	bne.n	800679c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800678e:	4b06      	ldr	r3, [pc, #24]	; (80067a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006790:	695a      	ldr	r2, [r3, #20]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	699b      	ldr	r3, [r3, #24]
 8006796:	4904      	ldr	r1, [pc, #16]	; (80067a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006798:	4313      	orrs	r3, r2
 800679a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800679c:	7bfb      	ldrb	r3, [r7, #15]
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3710      	adds	r7, #16
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}
 80067a6:	bf00      	nop
 80067a8:	40021000 	.word	0x40021000
 80067ac:	07ff800f 	.word	0x07ff800f
 80067b0:	ff9f800f 	.word	0xff9f800f
 80067b4:	f9ff800f 	.word	0xf9ff800f

080067b8 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b089      	sub	sp, #36	; 0x24
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
 80067c0:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 80067c2:	2300      	movs	r3, #0
 80067c4:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 80067c6:	2300      	movs	r3, #0
 80067c8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 80067ca:	2300      	movs	r3, #0
 80067cc:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067d4:	d10b      	bne.n	80067ee <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80067d6:	4b7e      	ldr	r3, [pc, #504]	; (80069d0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80067d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80067dc:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80067e0:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 80067e2:	69bb      	ldr	r3, [r7, #24]
 80067e4:	2b60      	cmp	r3, #96	; 0x60
 80067e6:	d112      	bne.n	800680e <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80067e8:	4b7a      	ldr	r3, [pc, #488]	; (80069d4 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 80067ea:	61fb      	str	r3, [r7, #28]
 80067ec:	e00f      	b.n	800680e <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067f4:	d10b      	bne.n	800680e <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80067f6:	4b76      	ldr	r3, [pc, #472]	; (80069d0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80067f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80067fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006800:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8006802:	69bb      	ldr	r3, [r7, #24]
 8006804:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006808:	d101      	bne.n	800680e <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 800680a:	4b72      	ldr	r3, [pc, #456]	; (80069d4 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 800680c:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 800680e:	69fb      	ldr	r3, [r7, #28]
 8006810:	2b00      	cmp	r3, #0
 8006812:	f040 80d6 	bne.w	80069c2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 800681a:	69bb      	ldr	r3, [r7, #24]
 800681c:	2b40      	cmp	r3, #64	; 0x40
 800681e:	d003      	beq.n	8006828 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 8006820:	69bb      	ldr	r3, [r7, #24]
 8006822:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006826:	d13b      	bne.n	80068a0 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8006828:	4b69      	ldr	r3, [pc, #420]	; (80069d0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006830:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006834:	f040 80c4 	bne.w	80069c0 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 8006838:	4b65      	ldr	r3, [pc, #404]	; (80069d0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800683a:	68db      	ldr	r3, [r3, #12]
 800683c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006840:	2b00      	cmp	r3, #0
 8006842:	f000 80bd 	beq.w	80069c0 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006846:	4b62      	ldr	r3, [pc, #392]	; (80069d0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006848:	68db      	ldr	r3, [r3, #12]
 800684a:	091b      	lsrs	r3, r3, #4
 800684c:	f003 030f 	and.w	r3, r3, #15
 8006850:	3301      	adds	r3, #1
 8006852:	693a      	ldr	r2, [r7, #16]
 8006854:	fbb2 f3f3 	udiv	r3, r2, r3
 8006858:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800685a:	4b5d      	ldr	r3, [pc, #372]	; (80069d0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800685c:	68db      	ldr	r3, [r3, #12]
 800685e:	0a1b      	lsrs	r3, r3, #8
 8006860:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006864:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8006866:	4b5a      	ldr	r3, [pc, #360]	; (80069d0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006868:	68db      	ldr	r3, [r3, #12]
 800686a:	0edb      	lsrs	r3, r3, #27
 800686c:	f003 031f 	and.w	r3, r3, #31
 8006870:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d10a      	bne.n	800688e <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8006878:	4b55      	ldr	r3, [pc, #340]	; (80069d0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800687a:	68db      	ldr	r3, [r3, #12]
 800687c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006880:	2b00      	cmp	r3, #0
 8006882:	d002      	beq.n	800688a <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 8006884:	2311      	movs	r3, #17
 8006886:	617b      	str	r3, [r7, #20]
 8006888:	e001      	b.n	800688e <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 800688a:	2307      	movs	r3, #7
 800688c:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	68fa      	ldr	r2, [r7, #12]
 8006892:	fb03 f202 	mul.w	r2, r3, r2
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	fbb2 f3f3 	udiv	r3, r2, r3
 800689c:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800689e:	e08f      	b.n	80069c0 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 80068a0:	69bb      	ldr	r3, [r7, #24]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d13a      	bne.n	800691c <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 80068a6:	4b4a      	ldr	r3, [pc, #296]	; (80069d0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80068ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80068b2:	f040 8086 	bne.w	80069c2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 80068b6:	4b46      	ldr	r3, [pc, #280]	; (80069d0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80068b8:	691b      	ldr	r3, [r3, #16]
 80068ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d07f      	beq.n	80069c2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80068c2:	4b43      	ldr	r3, [pc, #268]	; (80069d0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80068c4:	691b      	ldr	r3, [r3, #16]
 80068c6:	091b      	lsrs	r3, r3, #4
 80068c8:	f003 030f 	and.w	r3, r3, #15
 80068cc:	3301      	adds	r3, #1
 80068ce:	693a      	ldr	r2, [r7, #16]
 80068d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80068d4:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80068d6:	4b3e      	ldr	r3, [pc, #248]	; (80069d0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80068d8:	691b      	ldr	r3, [r3, #16]
 80068da:	0a1b      	lsrs	r3, r3, #8
 80068dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068e0:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 80068e2:	4b3b      	ldr	r3, [pc, #236]	; (80069d0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80068e4:	691b      	ldr	r3, [r3, #16]
 80068e6:	0edb      	lsrs	r3, r3, #27
 80068e8:	f003 031f 	and.w	r3, r3, #31
 80068ec:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d10a      	bne.n	800690a <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 80068f4:	4b36      	ldr	r3, [pc, #216]	; (80069d0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80068f6:	691b      	ldr	r3, [r3, #16]
 80068f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d002      	beq.n	8006906 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 8006900:	2311      	movs	r3, #17
 8006902:	617b      	str	r3, [r7, #20]
 8006904:	e001      	b.n	800690a <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 8006906:	2307      	movs	r3, #7
 8006908:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	68fa      	ldr	r2, [r7, #12]
 800690e:	fb03 f202 	mul.w	r2, r3, r2
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	fbb2 f3f3 	udiv	r3, r2, r3
 8006918:	61fb      	str	r3, [r7, #28]
 800691a:	e052      	b.n	80069c2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 800691c:	69bb      	ldr	r3, [r7, #24]
 800691e:	2b80      	cmp	r3, #128	; 0x80
 8006920:	d003      	beq.n	800692a <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 8006922:	69bb      	ldr	r3, [r7, #24]
 8006924:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006928:	d109      	bne.n	800693e <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800692a:	4b29      	ldr	r3, [pc, #164]	; (80069d0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006932:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006936:	d144      	bne.n	80069c2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 8006938:	4b27      	ldr	r3, [pc, #156]	; (80069d8 <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 800693a:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800693c:	e041      	b.n	80069c2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 800693e:	69bb      	ldr	r3, [r7, #24]
 8006940:	2b20      	cmp	r3, #32
 8006942:	d003      	beq.n	800694c <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 8006944:	69bb      	ldr	r3, [r7, #24]
 8006946:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800694a:	d13a      	bne.n	80069c2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 800694c:	4b20      	ldr	r3, [pc, #128]	; (80069d0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006954:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006958:	d133      	bne.n	80069c2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 800695a:	4b1d      	ldr	r3, [pc, #116]	; (80069d0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800695c:	695b      	ldr	r3, [r3, #20]
 800695e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006962:	2b00      	cmp	r3, #0
 8006964:	d02d      	beq.n	80069c2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 8006966:	4b1a      	ldr	r3, [pc, #104]	; (80069d0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006968:	695b      	ldr	r3, [r3, #20]
 800696a:	091b      	lsrs	r3, r3, #4
 800696c:	f003 030f 	and.w	r3, r3, #15
 8006970:	3301      	adds	r3, #1
 8006972:	693a      	ldr	r2, [r7, #16]
 8006974:	fbb2 f3f3 	udiv	r3, r2, r3
 8006978:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800697a:	4b15      	ldr	r3, [pc, #84]	; (80069d0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800697c:	695b      	ldr	r3, [r3, #20]
 800697e:	0a1b      	lsrs	r3, r3, #8
 8006980:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006984:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 8006986:	4b12      	ldr	r3, [pc, #72]	; (80069d0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006988:	695b      	ldr	r3, [r3, #20]
 800698a:	0edb      	lsrs	r3, r3, #27
 800698c:	f003 031f 	and.w	r3, r3, #31
 8006990:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d10a      	bne.n	80069ae <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8006998:	4b0d      	ldr	r3, [pc, #52]	; (80069d0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800699a:	695b      	ldr	r3, [r3, #20]
 800699c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d002      	beq.n	80069aa <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 80069a4:	2311      	movs	r3, #17
 80069a6:	617b      	str	r3, [r7, #20]
 80069a8:	e001      	b.n	80069ae <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 80069aa:	2307      	movs	r3, #7
 80069ac:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	68fa      	ldr	r2, [r7, #12]
 80069b2:	fb03 f202 	mul.w	r2, r3, r2
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80069bc:	61fb      	str	r3, [r7, #28]
 80069be:	e000      	b.n	80069c2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80069c0:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 80069c2:	69fb      	ldr	r3, [r7, #28]
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	3724      	adds	r7, #36	; 0x24
 80069c8:	46bd      	mov	sp, r7
 80069ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ce:	4770      	bx	lr
 80069d0:	40021000 	.word	0x40021000
 80069d4:	001fff68 	.word	0x001fff68
 80069d8:	00f42400 	.word	0x00f42400

080069dc <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b086      	sub	sp, #24
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	60f8      	str	r0, [r7, #12]
 80069e4:	60b9      	str	r1, [r7, #8]
 80069e6:	607a      	str	r2, [r7, #4]
 80069e8:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	2b02      	cmp	r3, #2
 80069ee:	d904      	bls.n	80069fa <HAL_SAI_InitProtocol+0x1e>
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	3b03      	subs	r3, #3
 80069f4:	2b01      	cmp	r3, #1
 80069f6:	d812      	bhi.n	8006a1e <HAL_SAI_InitProtocol+0x42>
 80069f8:	e008      	b.n	8006a0c <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	687a      	ldr	r2, [r7, #4]
 80069fe:	68b9      	ldr	r1, [r7, #8]
 8006a00:	68f8      	ldr	r0, [r7, #12]
 8006a02:	f000 f9fb 	bl	8006dfc <SAI_InitI2S>
 8006a06:	4603      	mov	r3, r0
 8006a08:	75fb      	strb	r3, [r7, #23]
      break;
 8006a0a:	e00b      	b.n	8006a24 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	687a      	ldr	r2, [r7, #4]
 8006a10:	68b9      	ldr	r1, [r7, #8]
 8006a12:	68f8      	ldr	r0, [r7, #12]
 8006a14:	f000 faa4 	bl	8006f60 <SAI_InitPCM>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	75fb      	strb	r3, [r7, #23]
      break;
 8006a1c:	e002      	b.n	8006a24 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 8006a1e:	2301      	movs	r3, #1
 8006a20:	75fb      	strb	r3, [r7, #23]
      break;
 8006a22:	bf00      	nop
  }

  if (status == HAL_OK)
 8006a24:	7dfb      	ldrb	r3, [r7, #23]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d104      	bne.n	8006a34 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 8006a2a:	68f8      	ldr	r0, [r7, #12]
 8006a2c:	f000 f808 	bl	8006a40 <HAL_SAI_Init>
 8006a30:	4603      	mov	r3, r0
 8006a32:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006a34:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3718      	adds	r7, #24
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}
	...

08006a40 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b08a      	sub	sp, #40	; 0x28
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d101      	bne.n	8006a52 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8006a4e:	2301      	movs	r3, #1
 8006a50:	e1c7      	b.n	8006de2 <HAL_SAI_Init+0x3a2>

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006a58:	2b01      	cmp	r3, #1
 8006a5a:	d10e      	bne.n	8006a7a <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a81      	ldr	r2, [pc, #516]	; (8006c68 <HAL_SAI_Init+0x228>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d107      	bne.n	8006a76 <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 8006a6a:	2b01      	cmp	r3, #1
 8006a6c:	d103      	bne.n	8006a76 <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d001      	beq.n	8006a7a <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 8006a76:	2301      	movs	r3, #1
 8006a78:	e1b3      	b.n	8006de2 <HAL_SAI_Init+0x3a2>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8006a80:	b2db      	uxtb	r3, r3
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d106      	bne.n	8006a94 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f7fb fc2e 	bl	80022f0 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f000 fae5 	bl	8007064 <SAI_Disable>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d001      	beq.n	8006aa4 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	e19e      	b.n	8006de2 <HAL_SAI_Init+0x3a2>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2202      	movs	r2, #2
 8006aa8:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	68db      	ldr	r3, [r3, #12]
 8006ab0:	2b02      	cmp	r3, #2
 8006ab2:	d00c      	beq.n	8006ace <HAL_SAI_Init+0x8e>
 8006ab4:	2b02      	cmp	r3, #2
 8006ab6:	d80d      	bhi.n	8006ad4 <HAL_SAI_Init+0x94>
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d002      	beq.n	8006ac2 <HAL_SAI_Init+0x82>
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	d003      	beq.n	8006ac8 <HAL_SAI_Init+0x88>
 8006ac0:	e008      	b.n	8006ad4 <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006ac6:	e008      	b.n	8006ada <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8006ac8:	2310      	movs	r3, #16
 8006aca:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006acc:	e005      	b.n	8006ada <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8006ace:	2320      	movs	r3, #32
 8006ad0:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006ad2:	e002      	b.n	8006ada <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006ad8:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	2b03      	cmp	r3, #3
 8006ae0:	d81d      	bhi.n	8006b1e <HAL_SAI_Init+0xde>
 8006ae2:	a201      	add	r2, pc, #4	; (adr r2, 8006ae8 <HAL_SAI_Init+0xa8>)
 8006ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ae8:	08006af9 	.word	0x08006af9
 8006aec:	08006aff 	.word	0x08006aff
 8006af0:	08006b07 	.word	0x08006b07
 8006af4:	08006b0f 	.word	0x08006b0f
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8006af8:	2300      	movs	r3, #0
 8006afa:	61fb      	str	r3, [r7, #28]
      break;
 8006afc:	e012      	b.n	8006b24 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8006afe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b02:	61fb      	str	r3, [r7, #28]
      break;
 8006b04:	e00e      	b.n	8006b24 <HAL_SAI_Init+0xe4>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8006b06:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006b0a:	61fb      	str	r3, [r7, #28]
      break;
 8006b0c:	e00a      	b.n	8006b24 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8006b0e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006b12:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8006b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b16:	f043 0301 	orr.w	r3, r3, #1
 8006b1a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006b1c:	e002      	b.n	8006b24 <HAL_SAI_Init+0xe4>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	61fb      	str	r3, [r7, #28]
      break;
 8006b22:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a4f      	ldr	r2, [pc, #316]	; (8006c68 <HAL_SAI_Init+0x228>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d004      	beq.n	8006b38 <HAL_SAI_Init+0xf8>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a4e      	ldr	r2, [pc, #312]	; (8006c6c <HAL_SAI_Init+0x22c>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d103      	bne.n	8006b40 <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 8006b38:	4a4d      	ldr	r2, [pc, #308]	; (8006c70 <HAL_SAI_Init+0x230>)
 8006b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b3c:	6013      	str	r3, [r2, #0]
 8006b3e:	e002      	b.n	8006b46 <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8006b40:	4a4c      	ldr	r2, [pc, #304]	; (8006c74 <HAL_SAI_Init+0x234>)
 8006b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b44:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	69db      	ldr	r3, [r3, #28]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d073      	beq.n	8006c36 <HAL_SAI_Init+0x1f6>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a45      	ldr	r2, [pc, #276]	; (8006c68 <HAL_SAI_Init+0x228>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d004      	beq.n	8006b62 <HAL_SAI_Init+0x122>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a43      	ldr	r2, [pc, #268]	; (8006c6c <HAL_SAI_Init+0x22c>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d105      	bne.n	8006b6e <HAL_SAI_Init+0x12e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8006b62:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006b66:	f7fe fd0d 	bl	8005584 <HAL_RCCEx_GetPeriphCLKFreq>
 8006b6a:	61b8      	str	r0, [r7, #24]
 8006b6c:	e004      	b.n	8006b78 <HAL_SAI_Init+0x138>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8006b6e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006b72:	f7fe fd07 	bl	8005584 <HAL_RCCEx_GetPeriphCLKFreq>
 8006b76:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NOMCK = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NOMCK = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	695b      	ldr	r3, [r3, #20]
 8006b7c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006b80:	d120      	bne.n	8006bc4 <HAL_SAI_Init+0x184>
    {
      /* NOMCK = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b86:	2b04      	cmp	r3, #4
 8006b88:	d102      	bne.n	8006b90 <HAL_SAI_Init+0x150>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 8006b8a:	2340      	movs	r3, #64	; 0x40
 8006b8c:	613b      	str	r3, [r7, #16]
 8006b8e:	e00a      	b.n	8006ba6 <HAL_SAI_Init+0x166>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b94:	2b08      	cmp	r3, #8
 8006b96:	d103      	bne.n	8006ba0 <HAL_SAI_Init+0x160>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 8006b98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006b9c:	613b      	str	r3, [r7, #16]
 8006b9e:	e002      	b.n	8006ba6 <HAL_SAI_Init+0x166>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ba4:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8006ba6:	69ba      	ldr	r2, [r7, #24]
 8006ba8:	4613      	mov	r3, r2
 8006baa:	009b      	lsls	r3, r3, #2
 8006bac:	4413      	add	r3, r2
 8006bae:	005b      	lsls	r3, r3, #1
 8006bb0:	4619      	mov	r1, r3
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	69db      	ldr	r3, [r3, #28]
 8006bb6:	693a      	ldr	r2, [r7, #16]
 8006bb8:	fb02 f303 	mul.w	r3, r2, r3
 8006bbc:	fbb1 f3f3 	udiv	r3, r1, r3
 8006bc0:	617b      	str	r3, [r7, #20]
 8006bc2:	e017      	b.n	8006bf4 <HAL_SAI_Init+0x1b4>
    }
    else
    {
      /* NOMCK = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006bcc:	d101      	bne.n	8006bd2 <HAL_SAI_Init+0x192>
 8006bce:	2302      	movs	r3, #2
 8006bd0:	e000      	b.n	8006bd4 <HAL_SAI_Init+0x194>
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8006bd6:	69ba      	ldr	r2, [r7, #24]
 8006bd8:	4613      	mov	r3, r2
 8006bda:	009b      	lsls	r3, r3, #2
 8006bdc:	4413      	add	r3, r2
 8006bde:	005b      	lsls	r3, r3, #1
 8006be0:	4619      	mov	r1, r3
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	69db      	ldr	r3, [r3, #28]
 8006be6:	68fa      	ldr	r2, [r7, #12]
 8006be8:	fb02 f303 	mul.w	r3, r2, r3
 8006bec:	021b      	lsls	r3, r3, #8
 8006bee:	fbb1 f3f3 	udiv	r3, r1, r3
 8006bf2:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	4a20      	ldr	r2, [pc, #128]	; (8006c78 <HAL_SAI_Init+0x238>)
 8006bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8006bfc:	08da      	lsrs	r2, r3, #3
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8006c02:	6979      	ldr	r1, [r7, #20]
 8006c04:	4b1c      	ldr	r3, [pc, #112]	; (8006c78 <HAL_SAI_Init+0x238>)
 8006c06:	fba3 2301 	umull	r2, r3, r3, r1
 8006c0a:	08da      	lsrs	r2, r3, #3
 8006c0c:	4613      	mov	r3, r2
 8006c0e:	009b      	lsls	r3, r3, #2
 8006c10:	4413      	add	r3, r2
 8006c12:	005b      	lsls	r3, r3, #1
 8006c14:	1aca      	subs	r2, r1, r3
 8006c16:	2a08      	cmp	r2, #8
 8006c18:	d904      	bls.n	8006c24 <HAL_SAI_Init+0x1e4>
    {
      hsai->Init.Mckdiv += 1U;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6a1b      	ldr	r3, [r3, #32]
 8006c1e:	1c5a      	adds	r2, r3, #1
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c28:	2b04      	cmp	r3, #4
 8006c2a:	d104      	bne.n	8006c36 <HAL_SAI_Init+0x1f6>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6a1b      	ldr	r3, [r3, #32]
 8006c30:	085a      	lsrs	r2, r3, #1
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d003      	beq.n	8006c46 <HAL_SAI_Init+0x206>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	2b02      	cmp	r3, #2
 8006c44:	d109      	bne.n	8006c5a <HAL_SAI_Init+0x21a>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c4a:	2b01      	cmp	r3, #1
 8006c4c:	d101      	bne.n	8006c52 <HAL_SAI_Init+0x212>
 8006c4e:	2300      	movs	r3, #0
 8006c50:	e001      	b.n	8006c56 <HAL_SAI_Init+0x216>
 8006c52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c56:	623b      	str	r3, [r7, #32]
 8006c58:	e012      	b.n	8006c80 <HAL_SAI_Init+0x240>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c5e:	2b01      	cmp	r3, #1
 8006c60:	d10c      	bne.n	8006c7c <HAL_SAI_Init+0x23c>
 8006c62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c66:	e00a      	b.n	8006c7e <HAL_SAI_Init+0x23e>
 8006c68:	40015404 	.word	0x40015404
 8006c6c:	40015424 	.word	0x40015424
 8006c70:	40015400 	.word	0x40015400
 8006c74:	40015800 	.word	0x40015800
 8006c78:	cccccccd 	.word	0xcccccccd
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	6819      	ldr	r1, [r3, #0]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681a      	ldr	r2, [r3, #0]
 8006c8a:	4b58      	ldr	r3, [pc, #352]	; (8006dec <HAL_SAI_Init+0x3ac>)
 8006c8c:	400b      	ands	r3, r1
 8006c8e:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NOMCK | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	6819      	ldr	r1, [r3, #0]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	685a      	ldr	r2, [r3, #4]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c9e:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006ca4:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006caa:	431a      	orrs	r2, r3
 8006cac:	6a3b      	ldr	r3, [r7, #32]
 8006cae:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8006cb0:	69fb      	ldr	r3, [r7, #28]
 8006cb2:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          ckstr_bits | syncen_bits |                             \
 8006cb8:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	691b      	ldr	r3, [r3, #16]
 8006cbe:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006cc4:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6a1b      	ldr	r3, [r3, #32]
 8006cca:	051b      	lsls	r3, r3, #20
 8006ccc:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8006cd2:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	430a      	orrs	r2, r1
 8006cda:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	687a      	ldr	r2, [r7, #4]
 8006ce4:	6812      	ldr	r2, [r2, #0]
 8006ce6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8006cea:	f023 030f 	bic.w	r3, r3, #15
 8006cee:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	6859      	ldr	r1, [r3, #4]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	699a      	ldr	r2, [r3, #24]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cfe:	431a      	orrs	r2, r3
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d04:	431a      	orrs	r2, r3
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	430a      	orrs	r2, r1
 8006d0c:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	6899      	ldr	r1, [r3, #8]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681a      	ldr	r2, [r3, #0]
 8006d18:	4b35      	ldr	r3, [pc, #212]	; (8006df0 <HAL_SAI_Init+0x3b0>)
 8006d1a:	400b      	ands	r3, r1
 8006d1c:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	6899      	ldr	r1, [r3, #8]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d28:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006d2e:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
                           hsai->FrameInit.FSOffset |
 8006d34:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSDefinition |
 8006d3a:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d40:	3b01      	subs	r3, #1
 8006d42:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8006d44:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	430a      	orrs	r2, r1
 8006d4c:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	68d9      	ldr	r1, [r3, #12]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681a      	ldr	r2, [r3, #0]
 8006d58:	f24f 0320 	movw	r3, #61472	; 0xf020
 8006d5c:	400b      	ands	r3, r1
 8006d5e:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	68d9      	ldr	r1, [r3, #12]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d6e:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d74:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006d76:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d7c:	3b01      	subs	r3, #1
 8006d7e:	021b      	lsls	r3, r3, #8
 8006d80:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	430a      	orrs	r2, r1
 8006d88:	60da      	str	r2, [r3, #12]

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a19      	ldr	r2, [pc, #100]	; (8006df4 <HAL_SAI_Init+0x3b4>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d119      	bne.n	8006dc8 <HAL_SAI_Init+0x388>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8006d94:	4b18      	ldr	r3, [pc, #96]	; (8006df8 <HAL_SAI_Init+0x3b8>)
 8006d96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d98:	4a17      	ldr	r2, [pc, #92]	; (8006df8 <HAL_SAI_Init+0x3b8>)
 8006d9a:	f023 0301 	bic.w	r3, r3, #1
 8006d9e:	6453      	str	r3, [r2, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006da6:	2b01      	cmp	r3, #1
 8006da8:	d10e      	bne.n	8006dc8 <HAL_SAI_Init+0x388>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006db2:	3b01      	subs	r3, #1
 8006db4:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8006db6:	4910      	ldr	r1, [pc, #64]	; (8006df8 <HAL_SAI_Init+0x3b8>)
 8006db8:	4313      	orrs	r3, r2
 8006dba:	644b      	str	r3, [r1, #68]	; 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 8006dbc:	4b0e      	ldr	r3, [pc, #56]	; (8006df8 <HAL_SAI_Init+0x3b8>)
 8006dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dc0:	4a0d      	ldr	r2, [pc, #52]	; (8006df8 <HAL_SAI_Init+0x3b8>)
 8006dc2:	f043 0301 	orr.w	r3, r3, #1
 8006dc6:	6453      	str	r3, [r2, #68]	; 0x44
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

  return HAL_OK;
 8006de0:	2300      	movs	r3, #0
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	3728      	adds	r7, #40	; 0x28
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}
 8006dea:	bf00      	nop
 8006dec:	f805c010 	.word	0xf805c010
 8006df0:	fff88000 	.word	0xfff88000
 8006df4:	40015404 	.word	0x40015404
 8006df8:	40015400 	.word	0x40015400

08006dfc <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b087      	sub	sp, #28
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	60f8      	str	r0, [r7, #12]
 8006e04:	60b9      	str	r1, [r7, #8]
 8006e06:	607a      	str	r2, [r7, #4]
 8006e08:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2200      	movs	r2, #0
 8006e12:	641a      	str	r2, [r3, #64]	; 0x40
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	2200      	movs	r2, #0
 8006e18:	649a      	str	r2, [r3, #72]	; 0x48
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d003      	beq.n	8006e2a <SAI_InitI2S+0x2e>
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	685b      	ldr	r3, [r3, #4]
 8006e26:	2b02      	cmp	r3, #2
 8006e28:	d103      	bne.n	8006e32 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	64da      	str	r2, [r3, #76]	; 0x4c
 8006e30:	e002      	b.n	8006e38 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2201      	movs	r2, #1
 8006e36:	64da      	str	r2, [r3, #76]	; 0x4c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006e3e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006e46:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.FirstBitOffset  = 0;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.SlotNumber      = nbslot;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	683a      	ldr	r2, [r7, #0]
 8006e52:	66da      	str	r2, [r3, #108]	; 0x6c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	f003 0301 	and.w	r3, r3, #1
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d001      	beq.n	8006e62 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	e077      	b.n	8006f52 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d107      	bne.n	8006e78 <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8006e74:	661a      	str	r2, [r3, #96]	; 0x60
 8006e76:	e006      	b.n	8006e86 <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006e7e:	65da      	str	r2, [r3, #92]	; 0x5c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	2200      	movs	r2, #0
 8006e84:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Frame definition */
  switch (datasize)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2b03      	cmp	r3, #3
 8006e8a:	d84f      	bhi.n	8006f2c <SAI_InitI2S+0x130>
 8006e8c:	a201      	add	r2, pc, #4	; (adr r2, 8006e94 <SAI_InitI2S+0x98>)
 8006e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e92:	bf00      	nop
 8006e94:	08006ea5 	.word	0x08006ea5
 8006e98:	08006ec7 	.word	0x08006ec7
 8006e9c:	08006ee9 	.word	0x08006ee9
 8006ea0:	08006f0b 	.word	0x08006f0b
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	2280      	movs	r2, #128	; 0x80
 8006ea8:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	085b      	lsrs	r3, r3, #1
 8006eae:	015a      	lsls	r2, r3, #5
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	085b      	lsrs	r3, r3, #1
 8006eb8:	011a      	lsls	r2, r3, #4
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2240      	movs	r2, #64	; 0x40
 8006ec2:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8006ec4:	e035      	b.n	8006f32 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2280      	movs	r2, #128	; 0x80
 8006eca:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	085b      	lsrs	r3, r3, #1
 8006ed0:	019a      	lsls	r2, r3, #6
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	085b      	lsrs	r3, r3, #1
 8006eda:	015a      	lsls	r2, r3, #5
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	2280      	movs	r2, #128	; 0x80
 8006ee4:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8006ee6:	e024      	b.n	8006f32 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	22c0      	movs	r2, #192	; 0xc0
 8006eec:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	085b      	lsrs	r3, r3, #1
 8006ef2:	019a      	lsls	r2, r3, #6
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	085b      	lsrs	r3, r3, #1
 8006efc:	015a      	lsls	r2, r3, #5
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2280      	movs	r2, #128	; 0x80
 8006f06:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8006f08:	e013      	b.n	8006f32 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	22e0      	movs	r2, #224	; 0xe0
 8006f0e:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	085b      	lsrs	r3, r3, #1
 8006f14:	019a      	lsls	r2, r3, #6
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	085b      	lsrs	r3, r3, #1
 8006f1e:	015a      	lsls	r2, r3, #5
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	2280      	movs	r2, #128	; 0x80
 8006f28:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8006f2a:	e002      	b.n	8006f32 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	75fb      	strb	r3, [r7, #23]
      break;
 8006f30:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	2b02      	cmp	r3, #2
 8006f36:	d10b      	bne.n	8006f50 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2b01      	cmp	r3, #1
 8006f3c:	d102      	bne.n	8006f44 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2210      	movs	r2, #16
 8006f42:	665a      	str	r2, [r3, #100]	; 0x64
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2b02      	cmp	r3, #2
 8006f48:	d102      	bne.n	8006f50 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	2208      	movs	r2, #8
 8006f4e:	665a      	str	r2, [r3, #100]	; 0x64
    }
  }
  return status;
 8006f50:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	371c      	adds	r7, #28
 8006f56:	46bd      	mov	sp, r7
 8006f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5c:	4770      	bx	lr
 8006f5e:	bf00      	nop

08006f60 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8006f60:	b480      	push	{r7}
 8006f62:	b087      	sub	sp, #28
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	60f8      	str	r0, [r7, #12]
 8006f68:	60b9      	str	r1, [r7, #8]
 8006f6a:	607a      	str	r2, [r7, #4]
 8006f6c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	2200      	movs	r2, #0
 8006f76:	641a      	str	r2, [r3, #64]	; 0x40
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	649a      	str	r2, [r3, #72]	; 0x48
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	685b      	ldr	r3, [r3, #4]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d003      	beq.n	8006f8e <SAI_InitPCM+0x2e>
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	685b      	ldr	r3, [r3, #4]
 8006f8a:	2b02      	cmp	r3, #2
 8006f8c:	d103      	bne.n	8006f96 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2201      	movs	r2, #1
 8006f92:	64da      	str	r2, [r3, #76]	; 0x4c
 8006f94:	e002      	b.n	8006f9c <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006fa8:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8006fb0:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.SlotNumber      = nbslot;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	683a      	ldr	r2, [r7, #0]
 8006fbc:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006fc4:	671a      	str	r2, [r3, #112]	; 0x70

  if (protocol == SAI_PCM_SHORT)
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	2b04      	cmp	r3, #4
 8006fca:	d103      	bne.n	8006fd4 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	2201      	movs	r2, #1
 8006fd0:	655a      	str	r2, [r3, #84]	; 0x54
 8006fd2:	e002      	b.n	8006fda <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	220d      	movs	r2, #13
 8006fd8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  switch (datasize)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2b03      	cmp	r3, #3
 8006fde:	d837      	bhi.n	8007050 <SAI_InitPCM+0xf0>
 8006fe0:	a201      	add	r2, pc, #4	; (adr r2, 8006fe8 <SAI_InitPCM+0x88>)
 8006fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fe6:	bf00      	nop
 8006fe8:	08006ff9 	.word	0x08006ff9
 8006fec:	0800700f 	.word	0x0800700f
 8006ff0:	08007025 	.word	0x08007025
 8006ff4:	0800703b 	.word	0x0800703b
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2280      	movs	r2, #128	; 0x80
 8006ffc:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	011a      	lsls	r2, r3, #4
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2240      	movs	r2, #64	; 0x40
 800700a:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 800700c:	e023      	b.n	8007056 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	2280      	movs	r2, #128	; 0x80
 8007012:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	015a      	lsls	r2, r3, #5
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	2280      	movs	r2, #128	; 0x80
 8007020:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8007022:	e018      	b.n	8007056 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	22c0      	movs	r2, #192	; 0xc0
 8007028:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	015a      	lsls	r2, r3, #5
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	2280      	movs	r2, #128	; 0x80
 8007036:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8007038:	e00d      	b.n	8007056 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	22e0      	movs	r2, #224	; 0xe0
 800703e:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	015a      	lsls	r2, r3, #5
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	2280      	movs	r2, #128	; 0x80
 800704c:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 800704e:	e002      	b.n	8007056 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 8007050:	2301      	movs	r3, #1
 8007052:	75fb      	strb	r3, [r7, #23]
      break;
 8007054:	bf00      	nop
  }

  return status;
 8007056:	7dfb      	ldrb	r3, [r7, #23]
}
 8007058:	4618      	mov	r0, r3
 800705a:	371c      	adds	r7, #28
 800705c:	46bd      	mov	sp, r7
 800705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007062:	4770      	bx	lr

08007064 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8007064:	b480      	push	{r7}
 8007066:	b085      	sub	sp, #20
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800706c:	4b18      	ldr	r3, [pc, #96]	; (80070d0 <SAI_Disable+0x6c>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a18      	ldr	r2, [pc, #96]	; (80070d4 <SAI_Disable+0x70>)
 8007072:	fba2 2303 	umull	r2, r3, r2, r3
 8007076:	0b1b      	lsrs	r3, r3, #12
 8007078:	009b      	lsls	r3, r3, #2
 800707a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800707c:	2300      	movs	r3, #0
 800707e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	681a      	ldr	r2, [r3, #0]
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800708e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d10a      	bne.n	80070ac <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800709c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      status = HAL_TIMEOUT;
 80070a6:	2303      	movs	r3, #3
 80070a8:	72fb      	strb	r3, [r7, #11]
      break;
 80070aa:	e009      	b.n	80070c0 <SAI_Disable+0x5c>
    }
    count--;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	3b01      	subs	r3, #1
 80070b0:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d1e7      	bne.n	8007090 <SAI_Disable+0x2c>

  return status;
 80070c0:	7afb      	ldrb	r3, [r7, #11]
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	3714      	adds	r7, #20
 80070c6:	46bd      	mov	sp, r7
 80070c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070cc:	4770      	bx	lr
 80070ce:	bf00      	nop
 80070d0:	20000004 	.word	0x20000004
 80070d4:	95cbec1b 	.word	0x95cbec1b

080070d8 <HAL_SMBUS_Init>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_Init(SMBUS_HandleTypeDef *hsmbus)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b082      	sub	sp, #8
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  /* Check the SMBUS handle allocation */
  if (hsmbus == NULL)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d101      	bne.n	80070ea <HAL_SMBUS_Init+0x12>
  {
    return HAL_ERROR;
 80070e6:	2301      	movs	r3, #1
 80070e8:	e0aa      	b.n	8007240 <HAL_SMBUS_Init+0x168>
  assert_param(IS_SMBUS_GENERAL_CALL(hsmbus->Init.GeneralCallMode));
  assert_param(IS_SMBUS_NO_STRETCH(hsmbus->Init.NoStretchMode));
  assert_param(IS_SMBUS_PEC(hsmbus->Init.PacketErrorCheckMode));
  assert_param(IS_SMBUS_PERIPHERAL_MODE(hsmbus->Init.PeripheralMode));

  if (hsmbus->State == HAL_SMBUS_STATE_RESET)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d106      	bne.n	8007100 <HAL_SMBUS_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hsmbus->Lock = HAL_UNLOCKED;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2200      	movs	r2, #0
 80070f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hsmbus->MspInitCallback(hsmbus);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_SMBUS_MspInit(hsmbus);
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f7fa fd1c 	bl	8001b38 <HAL_SMBUS_MspInit>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
  }

  hsmbus->State = HAL_SMBUS_STATE_BUSY;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2202      	movs	r2, #2
 8007104:	649a      	str	r2, [r3, #72]	; 0x48

  /* Disable the selected SMBUS peripheral */
  __HAL_SMBUS_DISABLE(hsmbus);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	681a      	ldr	r2, [r3, #0]
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f022 0201 	bic.w	r2, r2, #1
 8007114:	601a      	str	r2, [r3, #0]

  /*---------------------------- SMBUSx TIMINGR Configuration ------------------------*/
  /* Configure SMBUSx: Frequency range */
  hsmbus->Instance->TIMINGR = hsmbus->Init.Timing & TIMING_CLEAR_MASK;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	685a      	ldr	r2, [r3, #4]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007122:	611a      	str	r2, [r3, #16]

  /*---------------------------- SMBUSx TIMEOUTR Configuration ------------------------*/
  /* Configure SMBUSx: Bus Timeout  */
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TIMOUTEN;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	695a      	ldr	r2, [r3, #20]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007132:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TEXTEN;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	695a      	ldr	r2, [r3, #20]
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8007142:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR = hsmbus->Init.SMBusTimeout;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	687a      	ldr	r2, [r7, #4]
 800714a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800714c:	615a      	str	r2, [r3, #20]

  /*---------------------------- SMBUSx OAR1 Configuration -----------------------*/
  /* Configure SMBUSx: Own Address1 and ack own address1 mode */
  hsmbus->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	689a      	ldr	r2, [r3, #8]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800715c:	609a      	str	r2, [r3, #8]

  if (hsmbus->Init.OwnAddress1 != 0UL)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	68db      	ldr	r3, [r3, #12]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d012      	beq.n	800718c <HAL_SMBUS_Init+0xb4>
  {
    if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_7BIT)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	691b      	ldr	r3, [r3, #16]
 800716a:	2b01      	cmp	r3, #1
 800716c:	d107      	bne.n	800717e <HAL_SMBUS_Init+0xa6>
    {
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | hsmbus->Init.OwnAddress1);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	68da      	ldr	r2, [r3, #12]
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800717a:	609a      	str	r2, [r3, #8]
 800717c:	e006      	b.n	800718c <HAL_SMBUS_Init+0xb4>
    }
    else /* SMBUS_ADDRESSINGMODE_10BIT */
    {
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hsmbus->Init.OwnAddress1);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	68da      	ldr	r2, [r3, #12]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800718a:	609a      	str	r2, [r3, #8]
    }
  }

  /*---------------------------- SMBUSx CR2 Configuration ------------------------*/
  /* Configure SMBUSx: Addressing Master mode */
  if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_10BIT)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	691b      	ldr	r3, [r3, #16]
 8007190:	2b02      	cmp	r3, #2
 8007192:	d104      	bne.n	800719e <HAL_SMBUS_Init+0xc6>
  {
    hsmbus->Instance->CR2 = (I2C_CR2_ADD10);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800719c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process) */
  /* AUTOEND and NACK bit will be manage during Transfer process */
  hsmbus->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	687a      	ldr	r2, [r7, #4]
 80071a6:	6812      	ldr	r2, [r2, #0]
 80071a8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80071ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071b0:	6053      	str	r3, [r2, #4]

  /*---------------------------- SMBUSx OAR2 Configuration -----------------------*/
  /* Configure SMBUSx: Dual mode and Own Address2 */
  hsmbus->Instance->OAR2 = (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2 | \
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	695a      	ldr	r2, [r3, #20]
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	699b      	ldr	r3, [r3, #24]
 80071ba:	ea42 0103 	orr.w	r1, r2, r3
                            (hsmbus->Init.OwnAddress2Masks << 8U));
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	69db      	ldr	r3, [r3, #28]
 80071c2:	021a      	lsls	r2, r3, #8
  hsmbus->Instance->OAR2 = (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2 | \
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	430a      	orrs	r2, r1
 80071ca:	60da      	str	r2, [r3, #12]

  /*---------------------------- SMBUSx CR1 Configuration ------------------------*/
  /* Configure SMBUSx: Generalcall and NoStretch mode */
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6a1a      	ldr	r2, [r3, #32]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d4:	431a      	orrs	r2, r3
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 80071da:	431a      	orrs	r2, r3
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071e0:	ea42 0103 	orr.w	r1, r2, r3
                           hsmbus->Init.AnalogFilter);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	689a      	ldr	r2, [r3, #8]
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 80071ec:	430a      	orrs	r2, r1
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 80071ee:	601a      	str	r2, [r3, #0]

  /* Enable Slave Byte Control only in case of Packet Error Check is enabled
     and SMBUS Peripheral is set in Slave mode */
  if ((hsmbus->Init.PacketErrorCheckMode == SMBUS_PEC_ENABLE) && \
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071f4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80071f8:	d110      	bne.n	800721c <HAL_SMBUS_Init+0x144>
      ((hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE) || \
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  if ((hsmbus->Init.PacketErrorCheckMode == SMBUS_PEC_ENABLE) && \
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d004      	beq.n	800720c <HAL_SMBUS_Init+0x134>
       (hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE_ARP)))
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      ((hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE) || \
 8007206:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800720a:	d107      	bne.n	800721c <HAL_SMBUS_Init+0x144>
  {
    hsmbus->Instance->CR1 |= I2C_CR1_SBC;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	681a      	ldr	r2, [r3, #0]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800721a:	601a      	str	r2, [r3, #0]
  }

  /* Enable the selected SMBUS peripheral */
  __HAL_SMBUS_ENABLE(hsmbus);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	681a      	ldr	r2, [r3, #0]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f042 0201 	orr.w	r2, r2, #1
 800722a:	601a      	str	r2, [r3, #0]

  hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2200      	movs	r2, #0
 8007230:	64da      	str	r2, [r3, #76]	; 0x4c
  hsmbus->PreviousState = HAL_SMBUS_STATE_READY;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2201      	movs	r2, #1
 8007236:	641a      	str	r2, [r3, #64]	; 0x40
  hsmbus->State = HAL_SMBUS_STATE_READY;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2201      	movs	r2, #1
 800723c:	649a      	str	r2, [r3, #72]	; 0x48

  return HAL_OK;
 800723e:	2300      	movs	r3, #0
}
 8007240:	4618      	mov	r0, r3
 8007242:	3708      	adds	r7, #8
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}

08007248 <HAL_SMBUS_EnableAlert_IT>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUSx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_EnableAlert_IT(SMBUS_HandleTypeDef *hsmbus)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b082      	sub	sp, #8
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
  /* Enable SMBus alert */
  hsmbus->Instance->CR1 |= I2C_CR1_ALERTEN;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	681a      	ldr	r2, [r3, #0]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800725e:	601a      	str	r2, [r3, #0]

  /* Clear ALERT flag */
  __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_ALERT);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007268:	61da      	str	r2, [r3, #28]

  /* Enable Alert Interrupt */
  SMBUS_Enable_IRQ(hsmbus, SMBUS_IT_ALERT);
 800726a:	2180      	movs	r1, #128	; 0x80
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f000 f805 	bl	800727c <SMBUS_Enable_IRQ>

  return HAL_OK;
 8007272:	2300      	movs	r3, #0
}
 8007274:	4618      	mov	r0, r3
 8007276:	3708      	adds	r7, #8
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}

0800727c <SMBUS_Enable_IRQ>:
  *                the configuration information for the specified SMBUS.
  * @param  InterruptRequest Value of @ref SMBUS_Interrupt_configuration_definition.
  * @retval HAL status
  */
static void SMBUS_Enable_IRQ(SMBUS_HandleTypeDef *hsmbus, uint32_t InterruptRequest)
{
 800727c:	b480      	push	{r7}
 800727e:	b085      	sub	sp, #20
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
 8007284:	6039      	str	r1, [r7, #0]
  uint32_t tmpisr = 0UL;
 8007286:	2300      	movs	r3, #0
 8007288:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & SMBUS_IT_ALERT) == SMBUS_IT_ALERT)
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007290:	2b00      	cmp	r3, #0
 8007292:	d003      	beq.n	800729c <SMBUS_Enable_IRQ+0x20>
  {
    /* Enable ERR interrupt */
    tmpisr |= SMBUS_IT_ERRI;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800729a:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_ADDR) == SMBUS_IT_ADDR)
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80072a2:	2b38      	cmp	r3, #56	; 0x38
 80072a4:	d103      	bne.n	80072ae <SMBUS_Enable_IRQ+0x32>
  {
    /* Enable ADDR, STOP interrupt */
    tmpisr |= SMBUS_IT_ADDRI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_ERRI;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80072ac:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_TX) == SMBUS_IT_TX)
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 80072b4:	2bf2      	cmp	r3, #242	; 0xf2
 80072b6:	d103      	bne.n	80072c0 <SMBUS_Enable_IRQ+0x44>
  {
    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    tmpisr |= SMBUS_IT_ERRI | SMBUS_IT_TCI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_TXI;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 80072be:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_RX) == SMBUS_IT_RX)
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	f003 03d4 	and.w	r3, r3, #212	; 0xd4
 80072c6:	2bd4      	cmp	r3, #212	; 0xd4
 80072c8:	d103      	bne.n	80072d2 <SMBUS_Enable_IRQ+0x56>
  {
    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    tmpisr |= SMBUS_IT_ERRI | SMBUS_IT_TCI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_RXI;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 80072d0:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of SMBUS interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_SMBUS_ENABLE_IT(hsmbus, tmpisr);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	6819      	ldr	r1, [r3, #0]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	68fa      	ldr	r2, [r7, #12]
 80072de:	430a      	orrs	r2, r1
 80072e0:	601a      	str	r2, [r3, #0]
}
 80072e2:	bf00      	nop
 80072e4:	3714      	adds	r7, #20
 80072e6:	46bd      	mov	sp, r7
 80072e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ec:	4770      	bx	lr

080072ee <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80072ee:	b580      	push	{r7, lr}
 80072f0:	b084      	sub	sp, #16
 80072f2:	af00      	add	r7, sp, #0
 80072f4:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d101      	bne.n	8007300 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80072fc:	2301      	movs	r3, #1
 80072fe:	e095      	b.n	800742c <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007304:	2b00      	cmp	r3, #0
 8007306:	d108      	bne.n	800731a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	685b      	ldr	r3, [r3, #4]
 800730c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007310:	d009      	beq.n	8007326 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2200      	movs	r2, #0
 8007316:	61da      	str	r2, [r3, #28]
 8007318:	e005      	b.n	8007326 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2200      	movs	r2, #0
 800731e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2200      	movs	r2, #0
 8007324:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2200      	movs	r2, #0
 800732a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007332:	b2db      	uxtb	r3, r3
 8007334:	2b00      	cmp	r3, #0
 8007336:	d106      	bne.n	8007346 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2200      	movs	r2, #0
 800733c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f7fa fd87 	bl	8001e54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2202      	movs	r2, #2
 800734a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	681a      	ldr	r2, [r3, #0]
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800735c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	68db      	ldr	r3, [r3, #12]
 8007362:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007366:	d902      	bls.n	800736e <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007368:	2300      	movs	r3, #0
 800736a:	60fb      	str	r3, [r7, #12]
 800736c:	e002      	b.n	8007374 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800736e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007372:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	68db      	ldr	r3, [r3, #12]
 8007378:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800737c:	d007      	beq.n	800738e <HAL_SPI_Init+0xa0>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	68db      	ldr	r3, [r3, #12]
 8007382:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007386:	d002      	beq.n	800738e <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2200      	movs	r2, #0
 800738c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	689b      	ldr	r3, [r3, #8]
 800739a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800739e:	431a      	orrs	r2, r3
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	691b      	ldr	r3, [r3, #16]
 80073a4:	f003 0302 	and.w	r3, r3, #2
 80073a8:	431a      	orrs	r2, r3
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	695b      	ldr	r3, [r3, #20]
 80073ae:	f003 0301 	and.w	r3, r3, #1
 80073b2:	431a      	orrs	r2, r3
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	699b      	ldr	r3, [r3, #24]
 80073b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80073bc:	431a      	orrs	r2, r3
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	69db      	ldr	r3, [r3, #28]
 80073c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80073c6:	431a      	orrs	r2, r3
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6a1b      	ldr	r3, [r3, #32]
 80073cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073d0:	ea42 0103 	orr.w	r1, r2, r3
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073d8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	430a      	orrs	r2, r1
 80073e2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	699b      	ldr	r3, [r3, #24]
 80073e8:	0c1b      	lsrs	r3, r3, #16
 80073ea:	f003 0204 	and.w	r2, r3, #4
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f2:	f003 0310 	and.w	r3, r3, #16
 80073f6:	431a      	orrs	r2, r3
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073fc:	f003 0308 	and.w	r3, r3, #8
 8007400:	431a      	orrs	r2, r3
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	68db      	ldr	r3, [r3, #12]
 8007406:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800740a:	ea42 0103 	orr.w	r1, r2, r3
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	430a      	orrs	r2, r1
 800741a:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2200      	movs	r2, #0
 8007420:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2201      	movs	r2, #1
 8007426:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800742a:	2300      	movs	r3, #0
}
 800742c:	4618      	mov	r0, r3
 800742e:	3710      	adds	r7, #16
 8007430:	46bd      	mov	sp, r7
 8007432:	bd80      	pop	{r7, pc}

08007434 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b082      	sub	sp, #8
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d101      	bne.n	8007446 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007442:	2301      	movs	r3, #1
 8007444:	e049      	b.n	80074da <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800744c:	b2db      	uxtb	r3, r3
 800744e:	2b00      	cmp	r3, #0
 8007450:	d106      	bne.n	8007460 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2200      	movs	r2, #0
 8007456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f7fa fdf0 	bl	8002040 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2202      	movs	r2, #2
 8007464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681a      	ldr	r2, [r3, #0]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	3304      	adds	r3, #4
 8007470:	4619      	mov	r1, r3
 8007472:	4610      	mov	r0, r2
 8007474:	f000 ff0a 	bl	800828c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2201      	movs	r2, #1
 800747c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2201      	movs	r2, #1
 8007484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2201      	movs	r2, #1
 800748c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2201      	movs	r2, #1
 8007494:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2201      	movs	r2, #1
 800749c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2201      	movs	r2, #1
 80074a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2201      	movs	r2, #1
 80074ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2201      	movs	r2, #1
 80074b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2201      	movs	r2, #1
 80074bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2201      	movs	r2, #1
 80074c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2201      	movs	r2, #1
 80074cc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2201      	movs	r2, #1
 80074d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80074d8:	2300      	movs	r3, #0
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3708      	adds	r7, #8
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}

080074e2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80074e2:	b580      	push	{r7, lr}
 80074e4:	b082      	sub	sp, #8
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d101      	bne.n	80074f4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80074f0:	2301      	movs	r3, #1
 80074f2:	e049      	b.n	8007588 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074fa:	b2db      	uxtb	r3, r3
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d106      	bne.n	800750e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2200      	movs	r2, #0
 8007504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f7fa fd17 	bl	8001f3c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2202      	movs	r2, #2
 8007512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681a      	ldr	r2, [r3, #0]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	3304      	adds	r3, #4
 800751e:	4619      	mov	r1, r3
 8007520:	4610      	mov	r0, r2
 8007522:	f000 feb3 	bl	800828c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2201      	movs	r2, #1
 800752a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2201      	movs	r2, #1
 8007532:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2201      	movs	r2, #1
 800753a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2201      	movs	r2, #1
 8007542:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2201      	movs	r2, #1
 800754a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2201      	movs	r2, #1
 8007552:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2201      	movs	r2, #1
 800755a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2201      	movs	r2, #1
 8007562:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2201      	movs	r2, #1
 800756a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2201      	movs	r2, #1
 8007572:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2201      	movs	r2, #1
 800757a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2201      	movs	r2, #1
 8007582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007586:	2300      	movs	r3, #0
}
 8007588:	4618      	mov	r0, r3
 800758a:	3708      	adds	r7, #8
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}

08007590 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b084      	sub	sp, #16
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
 8007598:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d109      	bne.n	80075b4 <HAL_TIM_PWM_Start+0x24>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80075a6:	b2db      	uxtb	r3, r3
 80075a8:	2b01      	cmp	r3, #1
 80075aa:	bf14      	ite	ne
 80075ac:	2301      	movne	r3, #1
 80075ae:	2300      	moveq	r3, #0
 80075b0:	b2db      	uxtb	r3, r3
 80075b2:	e03c      	b.n	800762e <HAL_TIM_PWM_Start+0x9e>
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	2b04      	cmp	r3, #4
 80075b8:	d109      	bne.n	80075ce <HAL_TIM_PWM_Start+0x3e>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80075c0:	b2db      	uxtb	r3, r3
 80075c2:	2b01      	cmp	r3, #1
 80075c4:	bf14      	ite	ne
 80075c6:	2301      	movne	r3, #1
 80075c8:	2300      	moveq	r3, #0
 80075ca:	b2db      	uxtb	r3, r3
 80075cc:	e02f      	b.n	800762e <HAL_TIM_PWM_Start+0x9e>
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	2b08      	cmp	r3, #8
 80075d2:	d109      	bne.n	80075e8 <HAL_TIM_PWM_Start+0x58>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80075da:	b2db      	uxtb	r3, r3
 80075dc:	2b01      	cmp	r3, #1
 80075de:	bf14      	ite	ne
 80075e0:	2301      	movne	r3, #1
 80075e2:	2300      	moveq	r3, #0
 80075e4:	b2db      	uxtb	r3, r3
 80075e6:	e022      	b.n	800762e <HAL_TIM_PWM_Start+0x9e>
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	2b0c      	cmp	r3, #12
 80075ec:	d109      	bne.n	8007602 <HAL_TIM_PWM_Start+0x72>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80075f4:	b2db      	uxtb	r3, r3
 80075f6:	2b01      	cmp	r3, #1
 80075f8:	bf14      	ite	ne
 80075fa:	2301      	movne	r3, #1
 80075fc:	2300      	moveq	r3, #0
 80075fe:	b2db      	uxtb	r3, r3
 8007600:	e015      	b.n	800762e <HAL_TIM_PWM_Start+0x9e>
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	2b10      	cmp	r3, #16
 8007606:	d109      	bne.n	800761c <HAL_TIM_PWM_Start+0x8c>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800760e:	b2db      	uxtb	r3, r3
 8007610:	2b01      	cmp	r3, #1
 8007612:	bf14      	ite	ne
 8007614:	2301      	movne	r3, #1
 8007616:	2300      	moveq	r3, #0
 8007618:	b2db      	uxtb	r3, r3
 800761a:	e008      	b.n	800762e <HAL_TIM_PWM_Start+0x9e>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007622:	b2db      	uxtb	r3, r3
 8007624:	2b01      	cmp	r3, #1
 8007626:	bf14      	ite	ne
 8007628:	2301      	movne	r3, #1
 800762a:	2300      	moveq	r3, #0
 800762c:	b2db      	uxtb	r3, r3
 800762e:	2b00      	cmp	r3, #0
 8007630:	d001      	beq.n	8007636 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007632:	2301      	movs	r3, #1
 8007634:	e09c      	b.n	8007770 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d104      	bne.n	8007646 <HAL_TIM_PWM_Start+0xb6>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2202      	movs	r2, #2
 8007640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007644:	e023      	b.n	800768e <HAL_TIM_PWM_Start+0xfe>
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	2b04      	cmp	r3, #4
 800764a:	d104      	bne.n	8007656 <HAL_TIM_PWM_Start+0xc6>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2202      	movs	r2, #2
 8007650:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007654:	e01b      	b.n	800768e <HAL_TIM_PWM_Start+0xfe>
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	2b08      	cmp	r3, #8
 800765a:	d104      	bne.n	8007666 <HAL_TIM_PWM_Start+0xd6>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2202      	movs	r2, #2
 8007660:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007664:	e013      	b.n	800768e <HAL_TIM_PWM_Start+0xfe>
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	2b0c      	cmp	r3, #12
 800766a:	d104      	bne.n	8007676 <HAL_TIM_PWM_Start+0xe6>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2202      	movs	r2, #2
 8007670:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007674:	e00b      	b.n	800768e <HAL_TIM_PWM_Start+0xfe>
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	2b10      	cmp	r3, #16
 800767a:	d104      	bne.n	8007686 <HAL_TIM_PWM_Start+0xf6>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2202      	movs	r2, #2
 8007680:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007684:	e003      	b.n	800768e <HAL_TIM_PWM_Start+0xfe>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2202      	movs	r2, #2
 800768a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	2201      	movs	r2, #1
 8007694:	6839      	ldr	r1, [r7, #0]
 8007696:	4618      	mov	r0, r3
 8007698:	f001 fb26 	bl	8008ce8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4a35      	ldr	r2, [pc, #212]	; (8007778 <HAL_TIM_PWM_Start+0x1e8>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d013      	beq.n	80076ce <HAL_TIM_PWM_Start+0x13e>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4a34      	ldr	r2, [pc, #208]	; (800777c <HAL_TIM_PWM_Start+0x1ec>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d00e      	beq.n	80076ce <HAL_TIM_PWM_Start+0x13e>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a32      	ldr	r2, [pc, #200]	; (8007780 <HAL_TIM_PWM_Start+0x1f0>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d009      	beq.n	80076ce <HAL_TIM_PWM_Start+0x13e>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a31      	ldr	r2, [pc, #196]	; (8007784 <HAL_TIM_PWM_Start+0x1f4>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d004      	beq.n	80076ce <HAL_TIM_PWM_Start+0x13e>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	4a2f      	ldr	r2, [pc, #188]	; (8007788 <HAL_TIM_PWM_Start+0x1f8>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d101      	bne.n	80076d2 <HAL_TIM_PWM_Start+0x142>
 80076ce:	2301      	movs	r3, #1
 80076d0:	e000      	b.n	80076d4 <HAL_TIM_PWM_Start+0x144>
 80076d2:	2300      	movs	r3, #0
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d007      	beq.n	80076e8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80076e6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4a22      	ldr	r2, [pc, #136]	; (8007778 <HAL_TIM_PWM_Start+0x1e8>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d01d      	beq.n	800772e <HAL_TIM_PWM_Start+0x19e>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076fa:	d018      	beq.n	800772e <HAL_TIM_PWM_Start+0x19e>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4a22      	ldr	r2, [pc, #136]	; (800778c <HAL_TIM_PWM_Start+0x1fc>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d013      	beq.n	800772e <HAL_TIM_PWM_Start+0x19e>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a21      	ldr	r2, [pc, #132]	; (8007790 <HAL_TIM_PWM_Start+0x200>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d00e      	beq.n	800772e <HAL_TIM_PWM_Start+0x19e>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a1f      	ldr	r2, [pc, #124]	; (8007794 <HAL_TIM_PWM_Start+0x204>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d009      	beq.n	800772e <HAL_TIM_PWM_Start+0x19e>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4a17      	ldr	r2, [pc, #92]	; (800777c <HAL_TIM_PWM_Start+0x1ec>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d004      	beq.n	800772e <HAL_TIM_PWM_Start+0x19e>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a15      	ldr	r2, [pc, #84]	; (8007780 <HAL_TIM_PWM_Start+0x1f0>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d115      	bne.n	800775a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	689a      	ldr	r2, [r3, #8]
 8007734:	4b18      	ldr	r3, [pc, #96]	; (8007798 <HAL_TIM_PWM_Start+0x208>)
 8007736:	4013      	ands	r3, r2
 8007738:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	2b06      	cmp	r3, #6
 800773e:	d015      	beq.n	800776c <HAL_TIM_PWM_Start+0x1dc>
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007746:	d011      	beq.n	800776c <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	681a      	ldr	r2, [r3, #0]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f042 0201 	orr.w	r2, r2, #1
 8007756:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007758:	e008      	b.n	800776c <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	681a      	ldr	r2, [r3, #0]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f042 0201 	orr.w	r2, r2, #1
 8007768:	601a      	str	r2, [r3, #0]
 800776a:	e000      	b.n	800776e <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800776c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800776e:	2300      	movs	r3, #0
}
 8007770:	4618      	mov	r0, r3
 8007772:	3710      	adds	r7, #16
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}
 8007778:	40012c00 	.word	0x40012c00
 800777c:	40013400 	.word	0x40013400
 8007780:	40014000 	.word	0x40014000
 8007784:	40014400 	.word	0x40014400
 8007788:	40014800 	.word	0x40014800
 800778c:	40000400 	.word	0x40000400
 8007790:	40000800 	.word	0x40000800
 8007794:	40000c00 	.word	0x40000c00
 8007798:	00010007 	.word	0x00010007

0800779c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b082      	sub	sp, #8
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d101      	bne.n	80077ae <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80077aa:	2301      	movs	r3, #1
 80077ac:	e049      	b.n	8007842 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077b4:	b2db      	uxtb	r3, r3
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d106      	bne.n	80077c8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2200      	movs	r2, #0
 80077be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f000 f841 	bl	800784a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2202      	movs	r2, #2
 80077cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681a      	ldr	r2, [r3, #0]
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	3304      	adds	r3, #4
 80077d8:	4619      	mov	r1, r3
 80077da:	4610      	mov	r0, r2
 80077dc:	f000 fd56 	bl	800828c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2201      	movs	r2, #1
 80077e4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2201      	movs	r2, #1
 80077ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2201      	movs	r2, #1
 80077f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2201      	movs	r2, #1
 80077fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2201      	movs	r2, #1
 8007804:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2201      	movs	r2, #1
 800780c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2201      	movs	r2, #1
 8007814:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2201      	movs	r2, #1
 800781c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2201      	movs	r2, #1
 8007824:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2201      	movs	r2, #1
 800782c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2201      	movs	r2, #1
 8007834:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2201      	movs	r2, #1
 800783c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007840:	2300      	movs	r3, #0
}
 8007842:	4618      	mov	r0, r3
 8007844:	3708      	adds	r7, #8
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}

0800784a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800784a:	b480      	push	{r7}
 800784c:	b083      	sub	sp, #12
 800784e:	af00      	add	r7, sp, #0
 8007850:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8007852:	bf00      	nop
 8007854:	370c      	adds	r7, #12
 8007856:	46bd      	mov	sp, r7
 8007858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785c:	4770      	bx	lr
	...

08007860 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b084      	sub	sp, #16
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
 8007868:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800786a:	2300      	movs	r3, #0
 800786c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d104      	bne.n	800787e <HAL_TIM_IC_Start_IT+0x1e>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800787a:	b2db      	uxtb	r3, r3
 800787c:	e023      	b.n	80078c6 <HAL_TIM_IC_Start_IT+0x66>
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	2b04      	cmp	r3, #4
 8007882:	d104      	bne.n	800788e <HAL_TIM_IC_Start_IT+0x2e>
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800788a:	b2db      	uxtb	r3, r3
 800788c:	e01b      	b.n	80078c6 <HAL_TIM_IC_Start_IT+0x66>
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	2b08      	cmp	r3, #8
 8007892:	d104      	bne.n	800789e <HAL_TIM_IC_Start_IT+0x3e>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800789a:	b2db      	uxtb	r3, r3
 800789c:	e013      	b.n	80078c6 <HAL_TIM_IC_Start_IT+0x66>
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	2b0c      	cmp	r3, #12
 80078a2:	d104      	bne.n	80078ae <HAL_TIM_IC_Start_IT+0x4e>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80078aa:	b2db      	uxtb	r3, r3
 80078ac:	e00b      	b.n	80078c6 <HAL_TIM_IC_Start_IT+0x66>
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	2b10      	cmp	r3, #16
 80078b2:	d104      	bne.n	80078be <HAL_TIM_IC_Start_IT+0x5e>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80078ba:	b2db      	uxtb	r3, r3
 80078bc:	e003      	b.n	80078c6 <HAL_TIM_IC_Start_IT+0x66>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80078c4:	b2db      	uxtb	r3, r3
 80078c6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d104      	bne.n	80078d8 <HAL_TIM_IC_Start_IT+0x78>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80078d4:	b2db      	uxtb	r3, r3
 80078d6:	e013      	b.n	8007900 <HAL_TIM_IC_Start_IT+0xa0>
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	2b04      	cmp	r3, #4
 80078dc:	d104      	bne.n	80078e8 <HAL_TIM_IC_Start_IT+0x88>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80078e4:	b2db      	uxtb	r3, r3
 80078e6:	e00b      	b.n	8007900 <HAL_TIM_IC_Start_IT+0xa0>
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	2b08      	cmp	r3, #8
 80078ec:	d104      	bne.n	80078f8 <HAL_TIM_IC_Start_IT+0x98>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80078f4:	b2db      	uxtb	r3, r3
 80078f6:	e003      	b.n	8007900 <HAL_TIM_IC_Start_IT+0xa0>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80078fe:	b2db      	uxtb	r3, r3
 8007900:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8007902:	7bbb      	ldrb	r3, [r7, #14]
 8007904:	2b01      	cmp	r3, #1
 8007906:	d102      	bne.n	800790e <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007908:	7b7b      	ldrb	r3, [r7, #13]
 800790a:	2b01      	cmp	r3, #1
 800790c:	d001      	beq.n	8007912 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800790e:	2301      	movs	r3, #1
 8007910:	e0dd      	b.n	8007ace <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d104      	bne.n	8007922 <HAL_TIM_IC_Start_IT+0xc2>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2202      	movs	r2, #2
 800791c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007920:	e023      	b.n	800796a <HAL_TIM_IC_Start_IT+0x10a>
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	2b04      	cmp	r3, #4
 8007926:	d104      	bne.n	8007932 <HAL_TIM_IC_Start_IT+0xd2>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2202      	movs	r2, #2
 800792c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007930:	e01b      	b.n	800796a <HAL_TIM_IC_Start_IT+0x10a>
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	2b08      	cmp	r3, #8
 8007936:	d104      	bne.n	8007942 <HAL_TIM_IC_Start_IT+0xe2>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2202      	movs	r2, #2
 800793c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007940:	e013      	b.n	800796a <HAL_TIM_IC_Start_IT+0x10a>
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	2b0c      	cmp	r3, #12
 8007946:	d104      	bne.n	8007952 <HAL_TIM_IC_Start_IT+0xf2>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2202      	movs	r2, #2
 800794c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007950:	e00b      	b.n	800796a <HAL_TIM_IC_Start_IT+0x10a>
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	2b10      	cmp	r3, #16
 8007956:	d104      	bne.n	8007962 <HAL_TIM_IC_Start_IT+0x102>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2202      	movs	r2, #2
 800795c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007960:	e003      	b.n	800796a <HAL_TIM_IC_Start_IT+0x10a>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2202      	movs	r2, #2
 8007966:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d104      	bne.n	800797a <HAL_TIM_IC_Start_IT+0x11a>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2202      	movs	r2, #2
 8007974:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007978:	e013      	b.n	80079a2 <HAL_TIM_IC_Start_IT+0x142>
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	2b04      	cmp	r3, #4
 800797e:	d104      	bne.n	800798a <HAL_TIM_IC_Start_IT+0x12a>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2202      	movs	r2, #2
 8007984:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007988:	e00b      	b.n	80079a2 <HAL_TIM_IC_Start_IT+0x142>
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	2b08      	cmp	r3, #8
 800798e:	d104      	bne.n	800799a <HAL_TIM_IC_Start_IT+0x13a>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2202      	movs	r2, #2
 8007994:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007998:	e003      	b.n	80079a2 <HAL_TIM_IC_Start_IT+0x142>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2202      	movs	r2, #2
 800799e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	2b0c      	cmp	r3, #12
 80079a6:	d841      	bhi.n	8007a2c <HAL_TIM_IC_Start_IT+0x1cc>
 80079a8:	a201      	add	r2, pc, #4	; (adr r2, 80079b0 <HAL_TIM_IC_Start_IT+0x150>)
 80079aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ae:	bf00      	nop
 80079b0:	080079e5 	.word	0x080079e5
 80079b4:	08007a2d 	.word	0x08007a2d
 80079b8:	08007a2d 	.word	0x08007a2d
 80079bc:	08007a2d 	.word	0x08007a2d
 80079c0:	080079f7 	.word	0x080079f7
 80079c4:	08007a2d 	.word	0x08007a2d
 80079c8:	08007a2d 	.word	0x08007a2d
 80079cc:	08007a2d 	.word	0x08007a2d
 80079d0:	08007a09 	.word	0x08007a09
 80079d4:	08007a2d 	.word	0x08007a2d
 80079d8:	08007a2d 	.word	0x08007a2d
 80079dc:	08007a2d 	.word	0x08007a2d
 80079e0:	08007a1b 	.word	0x08007a1b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	68da      	ldr	r2, [r3, #12]
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f042 0202 	orr.w	r2, r2, #2
 80079f2:	60da      	str	r2, [r3, #12]
      break;
 80079f4:	e01d      	b.n	8007a32 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	68da      	ldr	r2, [r3, #12]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f042 0204 	orr.w	r2, r2, #4
 8007a04:	60da      	str	r2, [r3, #12]
      break;
 8007a06:	e014      	b.n	8007a32 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	68da      	ldr	r2, [r3, #12]
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f042 0208 	orr.w	r2, r2, #8
 8007a16:	60da      	str	r2, [r3, #12]
      break;
 8007a18:	e00b      	b.n	8007a32 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	68da      	ldr	r2, [r3, #12]
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f042 0210 	orr.w	r2, r2, #16
 8007a28:	60da      	str	r2, [r3, #12]
      break;
 8007a2a:	e002      	b.n	8007a32 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	73fb      	strb	r3, [r7, #15]
      break;
 8007a30:	bf00      	nop
  }

  if (status == HAL_OK)
 8007a32:	7bfb      	ldrb	r3, [r7, #15]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d149      	bne.n	8007acc <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	2201      	movs	r2, #1
 8007a3e:	6839      	ldr	r1, [r7, #0]
 8007a40:	4618      	mov	r0, r3
 8007a42:	f001 f951 	bl	8008ce8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4a23      	ldr	r2, [pc, #140]	; (8007ad8 <HAL_TIM_IC_Start_IT+0x278>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d01d      	beq.n	8007a8c <HAL_TIM_IC_Start_IT+0x22c>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a58:	d018      	beq.n	8007a8c <HAL_TIM_IC_Start_IT+0x22c>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	4a1f      	ldr	r2, [pc, #124]	; (8007adc <HAL_TIM_IC_Start_IT+0x27c>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d013      	beq.n	8007a8c <HAL_TIM_IC_Start_IT+0x22c>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4a1d      	ldr	r2, [pc, #116]	; (8007ae0 <HAL_TIM_IC_Start_IT+0x280>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d00e      	beq.n	8007a8c <HAL_TIM_IC_Start_IT+0x22c>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	4a1c      	ldr	r2, [pc, #112]	; (8007ae4 <HAL_TIM_IC_Start_IT+0x284>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d009      	beq.n	8007a8c <HAL_TIM_IC_Start_IT+0x22c>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4a1a      	ldr	r2, [pc, #104]	; (8007ae8 <HAL_TIM_IC_Start_IT+0x288>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d004      	beq.n	8007a8c <HAL_TIM_IC_Start_IT+0x22c>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	4a19      	ldr	r2, [pc, #100]	; (8007aec <HAL_TIM_IC_Start_IT+0x28c>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d115      	bne.n	8007ab8 <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	689a      	ldr	r2, [r3, #8]
 8007a92:	4b17      	ldr	r3, [pc, #92]	; (8007af0 <HAL_TIM_IC_Start_IT+0x290>)
 8007a94:	4013      	ands	r3, r2
 8007a96:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	2b06      	cmp	r3, #6
 8007a9c:	d015      	beq.n	8007aca <HAL_TIM_IC_Start_IT+0x26a>
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007aa4:	d011      	beq.n	8007aca <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	681a      	ldr	r2, [r3, #0]
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f042 0201 	orr.w	r2, r2, #1
 8007ab4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ab6:	e008      	b.n	8007aca <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	681a      	ldr	r2, [r3, #0]
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f042 0201 	orr.w	r2, r2, #1
 8007ac6:	601a      	str	r2, [r3, #0]
 8007ac8:	e000      	b.n	8007acc <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007aca:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8007acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3710      	adds	r7, #16
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}
 8007ad6:	bf00      	nop
 8007ad8:	40012c00 	.word	0x40012c00
 8007adc:	40000400 	.word	0x40000400
 8007ae0:	40000800 	.word	0x40000800
 8007ae4:	40000c00 	.word	0x40000c00
 8007ae8:	40013400 	.word	0x40013400
 8007aec:	40014000 	.word	0x40014000
 8007af0:	00010007 	.word	0x00010007

08007af4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b082      	sub	sp, #8
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	691b      	ldr	r3, [r3, #16]
 8007b02:	f003 0302 	and.w	r3, r3, #2
 8007b06:	2b02      	cmp	r3, #2
 8007b08:	d122      	bne.n	8007b50 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	68db      	ldr	r3, [r3, #12]
 8007b10:	f003 0302 	and.w	r3, r3, #2
 8007b14:	2b02      	cmp	r3, #2
 8007b16:	d11b      	bne.n	8007b50 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f06f 0202 	mvn.w	r2, #2
 8007b20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2201      	movs	r2, #1
 8007b26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	699b      	ldr	r3, [r3, #24]
 8007b2e:	f003 0303 	and.w	r3, r3, #3
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d003      	beq.n	8007b3e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f000 fb89 	bl	800824e <HAL_TIM_IC_CaptureCallback>
 8007b3c:	e005      	b.n	8007b4a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f000 fb7b 	bl	800823a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f000 fb8c 	bl	8008262 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	691b      	ldr	r3, [r3, #16]
 8007b56:	f003 0304 	and.w	r3, r3, #4
 8007b5a:	2b04      	cmp	r3, #4
 8007b5c:	d122      	bne.n	8007ba4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	68db      	ldr	r3, [r3, #12]
 8007b64:	f003 0304 	and.w	r3, r3, #4
 8007b68:	2b04      	cmp	r3, #4
 8007b6a:	d11b      	bne.n	8007ba4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f06f 0204 	mvn.w	r2, #4
 8007b74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2202      	movs	r2, #2
 8007b7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	699b      	ldr	r3, [r3, #24]
 8007b82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d003      	beq.n	8007b92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f000 fb5f 	bl	800824e <HAL_TIM_IC_CaptureCallback>
 8007b90:	e005      	b.n	8007b9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f000 fb51 	bl	800823a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f000 fb62 	bl	8008262 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	691b      	ldr	r3, [r3, #16]
 8007baa:	f003 0308 	and.w	r3, r3, #8
 8007bae:	2b08      	cmp	r3, #8
 8007bb0:	d122      	bne.n	8007bf8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	68db      	ldr	r3, [r3, #12]
 8007bb8:	f003 0308 	and.w	r3, r3, #8
 8007bbc:	2b08      	cmp	r3, #8
 8007bbe:	d11b      	bne.n	8007bf8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f06f 0208 	mvn.w	r2, #8
 8007bc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2204      	movs	r2, #4
 8007bce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	69db      	ldr	r3, [r3, #28]
 8007bd6:	f003 0303 	and.w	r3, r3, #3
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d003      	beq.n	8007be6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f000 fb35 	bl	800824e <HAL_TIM_IC_CaptureCallback>
 8007be4:	e005      	b.n	8007bf2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f000 fb27 	bl	800823a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f000 fb38 	bl	8008262 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	691b      	ldr	r3, [r3, #16]
 8007bfe:	f003 0310 	and.w	r3, r3, #16
 8007c02:	2b10      	cmp	r3, #16
 8007c04:	d122      	bne.n	8007c4c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	68db      	ldr	r3, [r3, #12]
 8007c0c:	f003 0310 	and.w	r3, r3, #16
 8007c10:	2b10      	cmp	r3, #16
 8007c12:	d11b      	bne.n	8007c4c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f06f 0210 	mvn.w	r2, #16
 8007c1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2208      	movs	r2, #8
 8007c22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	69db      	ldr	r3, [r3, #28]
 8007c2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d003      	beq.n	8007c3a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f000 fb0b 	bl	800824e <HAL_TIM_IC_CaptureCallback>
 8007c38:	e005      	b.n	8007c46 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f000 fafd 	bl	800823a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f000 fb0e 	bl	8008262 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	691b      	ldr	r3, [r3, #16]
 8007c52:	f003 0301 	and.w	r3, r3, #1
 8007c56:	2b01      	cmp	r3, #1
 8007c58:	d10e      	bne.n	8007c78 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	68db      	ldr	r3, [r3, #12]
 8007c60:	f003 0301 	and.w	r3, r3, #1
 8007c64:	2b01      	cmp	r3, #1
 8007c66:	d107      	bne.n	8007c78 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f06f 0201 	mvn.w	r2, #1
 8007c70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f000 fad7 	bl	8008226 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	691b      	ldr	r3, [r3, #16]
 8007c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c82:	2b80      	cmp	r3, #128	; 0x80
 8007c84:	d10e      	bne.n	8007ca4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	68db      	ldr	r3, [r3, #12]
 8007c8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c90:	2b80      	cmp	r3, #128	; 0x80
 8007c92:	d107      	bne.n	8007ca4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007c9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f001 fa1e 	bl	80090e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	691b      	ldr	r3, [r3, #16]
 8007caa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007cb2:	d10e      	bne.n	8007cd2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	68db      	ldr	r3, [r3, #12]
 8007cba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cbe:	2b80      	cmp	r3, #128	; 0x80
 8007cc0:	d107      	bne.n	8007cd2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007cca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f001 fa11 	bl	80090f4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	691b      	ldr	r3, [r3, #16]
 8007cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cdc:	2b40      	cmp	r3, #64	; 0x40
 8007cde:	d10e      	bne.n	8007cfe <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	68db      	ldr	r3, [r3, #12]
 8007ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cea:	2b40      	cmp	r3, #64	; 0x40
 8007cec:	d107      	bne.n	8007cfe <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007cf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f000 fabc 	bl	8008276 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	691b      	ldr	r3, [r3, #16]
 8007d04:	f003 0320 	and.w	r3, r3, #32
 8007d08:	2b20      	cmp	r3, #32
 8007d0a:	d10e      	bne.n	8007d2a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	68db      	ldr	r3, [r3, #12]
 8007d12:	f003 0320 	and.w	r3, r3, #32
 8007d16:	2b20      	cmp	r3, #32
 8007d18:	d107      	bne.n	8007d2a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f06f 0220 	mvn.w	r2, #32
 8007d22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f001 f9d1 	bl	80090cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007d2a:	bf00      	nop
 8007d2c:	3708      	adds	r7, #8
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}

08007d32 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007d32:	b580      	push	{r7, lr}
 8007d34:	b086      	sub	sp, #24
 8007d36:	af00      	add	r7, sp, #0
 8007d38:	60f8      	str	r0, [r7, #12]
 8007d3a:	60b9      	str	r1, [r7, #8]
 8007d3c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007d3e:	2300      	movs	r3, #0
 8007d40:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d48:	2b01      	cmp	r3, #1
 8007d4a:	d101      	bne.n	8007d50 <HAL_TIM_IC_ConfigChannel+0x1e>
 8007d4c:	2302      	movs	r3, #2
 8007d4e:	e088      	b.n	8007e62 <HAL_TIM_IC_ConfigChannel+0x130>
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	2201      	movs	r2, #1
 8007d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d11b      	bne.n	8007d96 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	6818      	ldr	r0, [r3, #0]
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	6819      	ldr	r1, [r3, #0]
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	685a      	ldr	r2, [r3, #4]
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	68db      	ldr	r3, [r3, #12]
 8007d6e:	f000 fdfd 	bl	800896c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	699a      	ldr	r2, [r3, #24]
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f022 020c 	bic.w	r2, r2, #12
 8007d80:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	6999      	ldr	r1, [r3, #24]
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	689a      	ldr	r2, [r3, #8]
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	430a      	orrs	r2, r1
 8007d92:	619a      	str	r2, [r3, #24]
 8007d94:	e060      	b.n	8007e58 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2b04      	cmp	r3, #4
 8007d9a:	d11c      	bne.n	8007dd6 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	6818      	ldr	r0, [r3, #0]
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	6819      	ldr	r1, [r3, #0]
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	685a      	ldr	r2, [r3, #4]
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	68db      	ldr	r3, [r3, #12]
 8007dac:	f000 fe7b 	bl	8008aa6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	699a      	ldr	r2, [r3, #24]
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007dbe:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	6999      	ldr	r1, [r3, #24]
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	689b      	ldr	r3, [r3, #8]
 8007dca:	021a      	lsls	r2, r3, #8
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	430a      	orrs	r2, r1
 8007dd2:	619a      	str	r2, [r3, #24]
 8007dd4:	e040      	b.n	8007e58 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2b08      	cmp	r3, #8
 8007dda:	d11b      	bne.n	8007e14 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	6818      	ldr	r0, [r3, #0]
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	6819      	ldr	r1, [r3, #0]
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	685a      	ldr	r2, [r3, #4]
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	68db      	ldr	r3, [r3, #12]
 8007dec:	f000 fec8 	bl	8008b80 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	69da      	ldr	r2, [r3, #28]
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f022 020c 	bic.w	r2, r2, #12
 8007dfe:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	69d9      	ldr	r1, [r3, #28]
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	689a      	ldr	r2, [r3, #8]
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	430a      	orrs	r2, r1
 8007e10:	61da      	str	r2, [r3, #28]
 8007e12:	e021      	b.n	8007e58 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2b0c      	cmp	r3, #12
 8007e18:	d11c      	bne.n	8007e54 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	6818      	ldr	r0, [r3, #0]
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	6819      	ldr	r1, [r3, #0]
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	685a      	ldr	r2, [r3, #4]
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	68db      	ldr	r3, [r3, #12]
 8007e2a:	f000 fee5 	bl	8008bf8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	69da      	ldr	r2, [r3, #28]
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007e3c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	69d9      	ldr	r1, [r3, #28]
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	689b      	ldr	r3, [r3, #8]
 8007e48:	021a      	lsls	r2, r3, #8
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	430a      	orrs	r2, r1
 8007e50:	61da      	str	r2, [r3, #28]
 8007e52:	e001      	b.n	8007e58 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8007e54:	2301      	movs	r3, #1
 8007e56:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007e60:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	3718      	adds	r7, #24
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}
	...

08007e6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b086      	sub	sp, #24
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	60f8      	str	r0, [r7, #12]
 8007e74:	60b9      	str	r1, [r7, #8]
 8007e76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e78:	2300      	movs	r3, #0
 8007e7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e82:	2b01      	cmp	r3, #1
 8007e84:	d101      	bne.n	8007e8a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007e86:	2302      	movs	r3, #2
 8007e88:	e0ff      	b.n	800808a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	2201      	movs	r2, #1
 8007e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2b14      	cmp	r3, #20
 8007e96:	f200 80f0 	bhi.w	800807a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007e9a:	a201      	add	r2, pc, #4	; (adr r2, 8007ea0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ea0:	08007ef5 	.word	0x08007ef5
 8007ea4:	0800807b 	.word	0x0800807b
 8007ea8:	0800807b 	.word	0x0800807b
 8007eac:	0800807b 	.word	0x0800807b
 8007eb0:	08007f35 	.word	0x08007f35
 8007eb4:	0800807b 	.word	0x0800807b
 8007eb8:	0800807b 	.word	0x0800807b
 8007ebc:	0800807b 	.word	0x0800807b
 8007ec0:	08007f77 	.word	0x08007f77
 8007ec4:	0800807b 	.word	0x0800807b
 8007ec8:	0800807b 	.word	0x0800807b
 8007ecc:	0800807b 	.word	0x0800807b
 8007ed0:	08007fb7 	.word	0x08007fb7
 8007ed4:	0800807b 	.word	0x0800807b
 8007ed8:	0800807b 	.word	0x0800807b
 8007edc:	0800807b 	.word	0x0800807b
 8007ee0:	08007ff9 	.word	0x08007ff9
 8007ee4:	0800807b 	.word	0x0800807b
 8007ee8:	0800807b 	.word	0x0800807b
 8007eec:	0800807b 	.word	0x0800807b
 8007ef0:	08008039 	.word	0x08008039
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	68b9      	ldr	r1, [r7, #8]
 8007efa:	4618      	mov	r0, r3
 8007efc:	f000 fa60 	bl	80083c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	699a      	ldr	r2, [r3, #24]
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f042 0208 	orr.w	r2, r2, #8
 8007f0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	699a      	ldr	r2, [r3, #24]
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f022 0204 	bic.w	r2, r2, #4
 8007f1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	6999      	ldr	r1, [r3, #24]
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	691a      	ldr	r2, [r3, #16]
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	430a      	orrs	r2, r1
 8007f30:	619a      	str	r2, [r3, #24]
      break;
 8007f32:	e0a5      	b.n	8008080 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	68b9      	ldr	r1, [r7, #8]
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	f000 fad0 	bl	80084e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	699a      	ldr	r2, [r3, #24]
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	699a      	ldr	r2, [r3, #24]
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	6999      	ldr	r1, [r3, #24]
 8007f66:	68bb      	ldr	r3, [r7, #8]
 8007f68:	691b      	ldr	r3, [r3, #16]
 8007f6a:	021a      	lsls	r2, r3, #8
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	430a      	orrs	r2, r1
 8007f72:	619a      	str	r2, [r3, #24]
      break;
 8007f74:	e084      	b.n	8008080 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	68b9      	ldr	r1, [r7, #8]
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	f000 fb39 	bl	80085f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	69da      	ldr	r2, [r3, #28]
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f042 0208 	orr.w	r2, r2, #8
 8007f90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	69da      	ldr	r2, [r3, #28]
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f022 0204 	bic.w	r2, r2, #4
 8007fa0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	69d9      	ldr	r1, [r3, #28]
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	691a      	ldr	r2, [r3, #16]
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	430a      	orrs	r2, r1
 8007fb2:	61da      	str	r2, [r3, #28]
      break;
 8007fb4:	e064      	b.n	8008080 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	68b9      	ldr	r1, [r7, #8]
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f000 fba1 	bl	8008704 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	69da      	ldr	r2, [r3, #28]
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007fd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	69da      	ldr	r2, [r3, #28]
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007fe0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	69d9      	ldr	r1, [r3, #28]
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	691b      	ldr	r3, [r3, #16]
 8007fec:	021a      	lsls	r2, r3, #8
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	430a      	orrs	r2, r1
 8007ff4:	61da      	str	r2, [r3, #28]
      break;
 8007ff6:	e043      	b.n	8008080 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	68b9      	ldr	r1, [r7, #8]
 8007ffe:	4618      	mov	r0, r3
 8008000:	f000 fbea 	bl	80087d8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f042 0208 	orr.w	r2, r2, #8
 8008012:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f022 0204 	bic.w	r2, r2, #4
 8008022:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	691a      	ldr	r2, [r3, #16]
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	430a      	orrs	r2, r1
 8008034:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008036:	e023      	b.n	8008080 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	68b9      	ldr	r1, [r7, #8]
 800803e:	4618      	mov	r0, r3
 8008040:	f000 fc2e 	bl	80088a0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008052:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008062:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	691b      	ldr	r3, [r3, #16]
 800806e:	021a      	lsls	r2, r3, #8
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	430a      	orrs	r2, r1
 8008076:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008078:	e002      	b.n	8008080 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800807a:	2301      	movs	r3, #1
 800807c:	75fb      	strb	r3, [r7, #23]
      break;
 800807e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	2200      	movs	r2, #0
 8008084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008088:	7dfb      	ldrb	r3, [r7, #23]
}
 800808a:	4618      	mov	r0, r3
 800808c:	3718      	adds	r7, #24
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}
 8008092:	bf00      	nop

08008094 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b084      	sub	sp, #16
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
 800809c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800809e:	2300      	movs	r3, #0
 80080a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080a8:	2b01      	cmp	r3, #1
 80080aa:	d101      	bne.n	80080b0 <HAL_TIM_ConfigClockSource+0x1c>
 80080ac:	2302      	movs	r3, #2
 80080ae:	e0b6      	b.n	800821e <HAL_TIM_ConfigClockSource+0x18a>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2201      	movs	r2, #1
 80080b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2202      	movs	r2, #2
 80080bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	689b      	ldr	r3, [r3, #8]
 80080c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80080ce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80080d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80080da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	68ba      	ldr	r2, [r7, #8]
 80080e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080ec:	d03e      	beq.n	800816c <HAL_TIM_ConfigClockSource+0xd8>
 80080ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080f2:	f200 8087 	bhi.w	8008204 <HAL_TIM_ConfigClockSource+0x170>
 80080f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080fa:	f000 8086 	beq.w	800820a <HAL_TIM_ConfigClockSource+0x176>
 80080fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008102:	d87f      	bhi.n	8008204 <HAL_TIM_ConfigClockSource+0x170>
 8008104:	2b70      	cmp	r3, #112	; 0x70
 8008106:	d01a      	beq.n	800813e <HAL_TIM_ConfigClockSource+0xaa>
 8008108:	2b70      	cmp	r3, #112	; 0x70
 800810a:	d87b      	bhi.n	8008204 <HAL_TIM_ConfigClockSource+0x170>
 800810c:	2b60      	cmp	r3, #96	; 0x60
 800810e:	d050      	beq.n	80081b2 <HAL_TIM_ConfigClockSource+0x11e>
 8008110:	2b60      	cmp	r3, #96	; 0x60
 8008112:	d877      	bhi.n	8008204 <HAL_TIM_ConfigClockSource+0x170>
 8008114:	2b50      	cmp	r3, #80	; 0x50
 8008116:	d03c      	beq.n	8008192 <HAL_TIM_ConfigClockSource+0xfe>
 8008118:	2b50      	cmp	r3, #80	; 0x50
 800811a:	d873      	bhi.n	8008204 <HAL_TIM_ConfigClockSource+0x170>
 800811c:	2b40      	cmp	r3, #64	; 0x40
 800811e:	d058      	beq.n	80081d2 <HAL_TIM_ConfigClockSource+0x13e>
 8008120:	2b40      	cmp	r3, #64	; 0x40
 8008122:	d86f      	bhi.n	8008204 <HAL_TIM_ConfigClockSource+0x170>
 8008124:	2b30      	cmp	r3, #48	; 0x30
 8008126:	d064      	beq.n	80081f2 <HAL_TIM_ConfigClockSource+0x15e>
 8008128:	2b30      	cmp	r3, #48	; 0x30
 800812a:	d86b      	bhi.n	8008204 <HAL_TIM_ConfigClockSource+0x170>
 800812c:	2b20      	cmp	r3, #32
 800812e:	d060      	beq.n	80081f2 <HAL_TIM_ConfigClockSource+0x15e>
 8008130:	2b20      	cmp	r3, #32
 8008132:	d867      	bhi.n	8008204 <HAL_TIM_ConfigClockSource+0x170>
 8008134:	2b00      	cmp	r3, #0
 8008136:	d05c      	beq.n	80081f2 <HAL_TIM_ConfigClockSource+0x15e>
 8008138:	2b10      	cmp	r3, #16
 800813a:	d05a      	beq.n	80081f2 <HAL_TIM_ConfigClockSource+0x15e>
 800813c:	e062      	b.n	8008204 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6818      	ldr	r0, [r3, #0]
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	6899      	ldr	r1, [r3, #8]
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	685a      	ldr	r2, [r3, #4]
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	68db      	ldr	r3, [r3, #12]
 800814e:	f000 fdab 	bl	8008ca8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	689b      	ldr	r3, [r3, #8]
 8008158:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008160:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	68ba      	ldr	r2, [r7, #8]
 8008168:	609a      	str	r2, [r3, #8]
      break;
 800816a:	e04f      	b.n	800820c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6818      	ldr	r0, [r3, #0]
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	6899      	ldr	r1, [r3, #8]
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	685a      	ldr	r2, [r3, #4]
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	68db      	ldr	r3, [r3, #12]
 800817c:	f000 fd94 	bl	8008ca8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	689a      	ldr	r2, [r3, #8]
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800818e:	609a      	str	r2, [r3, #8]
      break;
 8008190:	e03c      	b.n	800820c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6818      	ldr	r0, [r3, #0]
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	6859      	ldr	r1, [r3, #4]
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	68db      	ldr	r3, [r3, #12]
 800819e:	461a      	mov	r2, r3
 80081a0:	f000 fc52 	bl	8008a48 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	2150      	movs	r1, #80	; 0x50
 80081aa:	4618      	mov	r0, r3
 80081ac:	f000 fd61 	bl	8008c72 <TIM_ITRx_SetConfig>
      break;
 80081b0:	e02c      	b.n	800820c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6818      	ldr	r0, [r3, #0]
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	6859      	ldr	r1, [r3, #4]
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	68db      	ldr	r3, [r3, #12]
 80081be:	461a      	mov	r2, r3
 80081c0:	f000 fcae 	bl	8008b20 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	2160      	movs	r1, #96	; 0x60
 80081ca:	4618      	mov	r0, r3
 80081cc:	f000 fd51 	bl	8008c72 <TIM_ITRx_SetConfig>
      break;
 80081d0:	e01c      	b.n	800820c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6818      	ldr	r0, [r3, #0]
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	6859      	ldr	r1, [r3, #4]
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	68db      	ldr	r3, [r3, #12]
 80081de:	461a      	mov	r2, r3
 80081e0:	f000 fc32 	bl	8008a48 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	2140      	movs	r1, #64	; 0x40
 80081ea:	4618      	mov	r0, r3
 80081ec:	f000 fd41 	bl	8008c72 <TIM_ITRx_SetConfig>
      break;
 80081f0:	e00c      	b.n	800820c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681a      	ldr	r2, [r3, #0]
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4619      	mov	r1, r3
 80081fc:	4610      	mov	r0, r2
 80081fe:	f000 fd38 	bl	8008c72 <TIM_ITRx_SetConfig>
      break;
 8008202:	e003      	b.n	800820c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8008204:	2301      	movs	r3, #1
 8008206:	73fb      	strb	r3, [r7, #15]
      break;
 8008208:	e000      	b.n	800820c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800820a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2201      	movs	r2, #1
 8008210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2200      	movs	r2, #0
 8008218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800821c:	7bfb      	ldrb	r3, [r7, #15]
}
 800821e:	4618      	mov	r0, r3
 8008220:	3710      	adds	r7, #16
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}

08008226 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008226:	b480      	push	{r7}
 8008228:	b083      	sub	sp, #12
 800822a:	af00      	add	r7, sp, #0
 800822c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800822e:	bf00      	nop
 8008230:	370c      	adds	r7, #12
 8008232:	46bd      	mov	sp, r7
 8008234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008238:	4770      	bx	lr

0800823a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800823a:	b480      	push	{r7}
 800823c:	b083      	sub	sp, #12
 800823e:	af00      	add	r7, sp, #0
 8008240:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008242:	bf00      	nop
 8008244:	370c      	adds	r7, #12
 8008246:	46bd      	mov	sp, r7
 8008248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824c:	4770      	bx	lr

0800824e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800824e:	b480      	push	{r7}
 8008250:	b083      	sub	sp, #12
 8008252:	af00      	add	r7, sp, #0
 8008254:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008256:	bf00      	nop
 8008258:	370c      	adds	r7, #12
 800825a:	46bd      	mov	sp, r7
 800825c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008260:	4770      	bx	lr

08008262 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008262:	b480      	push	{r7}
 8008264:	b083      	sub	sp, #12
 8008266:	af00      	add	r7, sp, #0
 8008268:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800826a:	bf00      	nop
 800826c:	370c      	adds	r7, #12
 800826e:	46bd      	mov	sp, r7
 8008270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008274:	4770      	bx	lr

08008276 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008276:	b480      	push	{r7}
 8008278:	b083      	sub	sp, #12
 800827a:	af00      	add	r7, sp, #0
 800827c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800827e:	bf00      	nop
 8008280:	370c      	adds	r7, #12
 8008282:	46bd      	mov	sp, r7
 8008284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008288:	4770      	bx	lr
	...

0800828c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800828c:	b480      	push	{r7}
 800828e:	b085      	sub	sp, #20
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
 8008294:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	4a40      	ldr	r2, [pc, #256]	; (80083a0 <TIM_Base_SetConfig+0x114>)
 80082a0:	4293      	cmp	r3, r2
 80082a2:	d013      	beq.n	80082cc <TIM_Base_SetConfig+0x40>
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082aa:	d00f      	beq.n	80082cc <TIM_Base_SetConfig+0x40>
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	4a3d      	ldr	r2, [pc, #244]	; (80083a4 <TIM_Base_SetConfig+0x118>)
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d00b      	beq.n	80082cc <TIM_Base_SetConfig+0x40>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	4a3c      	ldr	r2, [pc, #240]	; (80083a8 <TIM_Base_SetConfig+0x11c>)
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d007      	beq.n	80082cc <TIM_Base_SetConfig+0x40>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	4a3b      	ldr	r2, [pc, #236]	; (80083ac <TIM_Base_SetConfig+0x120>)
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d003      	beq.n	80082cc <TIM_Base_SetConfig+0x40>
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	4a3a      	ldr	r2, [pc, #232]	; (80083b0 <TIM_Base_SetConfig+0x124>)
 80082c8:	4293      	cmp	r3, r2
 80082ca:	d108      	bne.n	80082de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	685b      	ldr	r3, [r3, #4]
 80082d8:	68fa      	ldr	r2, [r7, #12]
 80082da:	4313      	orrs	r3, r2
 80082dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	4a2f      	ldr	r2, [pc, #188]	; (80083a0 <TIM_Base_SetConfig+0x114>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d01f      	beq.n	8008326 <TIM_Base_SetConfig+0x9a>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082ec:	d01b      	beq.n	8008326 <TIM_Base_SetConfig+0x9a>
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	4a2c      	ldr	r2, [pc, #176]	; (80083a4 <TIM_Base_SetConfig+0x118>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d017      	beq.n	8008326 <TIM_Base_SetConfig+0x9a>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	4a2b      	ldr	r2, [pc, #172]	; (80083a8 <TIM_Base_SetConfig+0x11c>)
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d013      	beq.n	8008326 <TIM_Base_SetConfig+0x9a>
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	4a2a      	ldr	r2, [pc, #168]	; (80083ac <TIM_Base_SetConfig+0x120>)
 8008302:	4293      	cmp	r3, r2
 8008304:	d00f      	beq.n	8008326 <TIM_Base_SetConfig+0x9a>
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	4a29      	ldr	r2, [pc, #164]	; (80083b0 <TIM_Base_SetConfig+0x124>)
 800830a:	4293      	cmp	r3, r2
 800830c:	d00b      	beq.n	8008326 <TIM_Base_SetConfig+0x9a>
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	4a28      	ldr	r2, [pc, #160]	; (80083b4 <TIM_Base_SetConfig+0x128>)
 8008312:	4293      	cmp	r3, r2
 8008314:	d007      	beq.n	8008326 <TIM_Base_SetConfig+0x9a>
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	4a27      	ldr	r2, [pc, #156]	; (80083b8 <TIM_Base_SetConfig+0x12c>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d003      	beq.n	8008326 <TIM_Base_SetConfig+0x9a>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	4a26      	ldr	r2, [pc, #152]	; (80083bc <TIM_Base_SetConfig+0x130>)
 8008322:	4293      	cmp	r3, r2
 8008324:	d108      	bne.n	8008338 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800832c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	68db      	ldr	r3, [r3, #12]
 8008332:	68fa      	ldr	r2, [r7, #12]
 8008334:	4313      	orrs	r3, r2
 8008336:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	695b      	ldr	r3, [r3, #20]
 8008342:	4313      	orrs	r3, r2
 8008344:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	68fa      	ldr	r2, [r7, #12]
 800834a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	689a      	ldr	r2, [r3, #8]
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	681a      	ldr	r2, [r3, #0]
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	4a10      	ldr	r2, [pc, #64]	; (80083a0 <TIM_Base_SetConfig+0x114>)
 8008360:	4293      	cmp	r3, r2
 8008362:	d00f      	beq.n	8008384 <TIM_Base_SetConfig+0xf8>
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	4a12      	ldr	r2, [pc, #72]	; (80083b0 <TIM_Base_SetConfig+0x124>)
 8008368:	4293      	cmp	r3, r2
 800836a:	d00b      	beq.n	8008384 <TIM_Base_SetConfig+0xf8>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	4a11      	ldr	r2, [pc, #68]	; (80083b4 <TIM_Base_SetConfig+0x128>)
 8008370:	4293      	cmp	r3, r2
 8008372:	d007      	beq.n	8008384 <TIM_Base_SetConfig+0xf8>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	4a10      	ldr	r2, [pc, #64]	; (80083b8 <TIM_Base_SetConfig+0x12c>)
 8008378:	4293      	cmp	r3, r2
 800837a:	d003      	beq.n	8008384 <TIM_Base_SetConfig+0xf8>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	4a0f      	ldr	r2, [pc, #60]	; (80083bc <TIM_Base_SetConfig+0x130>)
 8008380:	4293      	cmp	r3, r2
 8008382:	d103      	bne.n	800838c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	691a      	ldr	r2, [r3, #16]
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2201      	movs	r2, #1
 8008390:	615a      	str	r2, [r3, #20]
}
 8008392:	bf00      	nop
 8008394:	3714      	adds	r7, #20
 8008396:	46bd      	mov	sp, r7
 8008398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839c:	4770      	bx	lr
 800839e:	bf00      	nop
 80083a0:	40012c00 	.word	0x40012c00
 80083a4:	40000400 	.word	0x40000400
 80083a8:	40000800 	.word	0x40000800
 80083ac:	40000c00 	.word	0x40000c00
 80083b0:	40013400 	.word	0x40013400
 80083b4:	40014000 	.word	0x40014000
 80083b8:	40014400 	.word	0x40014400
 80083bc:	40014800 	.word	0x40014800

080083c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80083c0:	b480      	push	{r7}
 80083c2:	b087      	sub	sp, #28
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
 80083c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6a1b      	ldr	r3, [r3, #32]
 80083ce:	f023 0201 	bic.w	r2, r3, #1
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6a1b      	ldr	r3, [r3, #32]
 80083da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	685b      	ldr	r3, [r3, #4]
 80083e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	699b      	ldr	r3, [r3, #24]
 80083e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80083ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	f023 0303 	bic.w	r3, r3, #3
 80083fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	68fa      	ldr	r2, [r7, #12]
 8008402:	4313      	orrs	r3, r2
 8008404:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	f023 0302 	bic.w	r3, r3, #2
 800840c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	689b      	ldr	r3, [r3, #8]
 8008412:	697a      	ldr	r2, [r7, #20]
 8008414:	4313      	orrs	r3, r2
 8008416:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	4a2c      	ldr	r2, [pc, #176]	; (80084cc <TIM_OC1_SetConfig+0x10c>)
 800841c:	4293      	cmp	r3, r2
 800841e:	d00f      	beq.n	8008440 <TIM_OC1_SetConfig+0x80>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	4a2b      	ldr	r2, [pc, #172]	; (80084d0 <TIM_OC1_SetConfig+0x110>)
 8008424:	4293      	cmp	r3, r2
 8008426:	d00b      	beq.n	8008440 <TIM_OC1_SetConfig+0x80>
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	4a2a      	ldr	r2, [pc, #168]	; (80084d4 <TIM_OC1_SetConfig+0x114>)
 800842c:	4293      	cmp	r3, r2
 800842e:	d007      	beq.n	8008440 <TIM_OC1_SetConfig+0x80>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	4a29      	ldr	r2, [pc, #164]	; (80084d8 <TIM_OC1_SetConfig+0x118>)
 8008434:	4293      	cmp	r3, r2
 8008436:	d003      	beq.n	8008440 <TIM_OC1_SetConfig+0x80>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	4a28      	ldr	r2, [pc, #160]	; (80084dc <TIM_OC1_SetConfig+0x11c>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d10c      	bne.n	800845a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008440:	697b      	ldr	r3, [r7, #20]
 8008442:	f023 0308 	bic.w	r3, r3, #8
 8008446:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	68db      	ldr	r3, [r3, #12]
 800844c:	697a      	ldr	r2, [r7, #20]
 800844e:	4313      	orrs	r3, r2
 8008450:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	f023 0304 	bic.w	r3, r3, #4
 8008458:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	4a1b      	ldr	r2, [pc, #108]	; (80084cc <TIM_OC1_SetConfig+0x10c>)
 800845e:	4293      	cmp	r3, r2
 8008460:	d00f      	beq.n	8008482 <TIM_OC1_SetConfig+0xc2>
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	4a1a      	ldr	r2, [pc, #104]	; (80084d0 <TIM_OC1_SetConfig+0x110>)
 8008466:	4293      	cmp	r3, r2
 8008468:	d00b      	beq.n	8008482 <TIM_OC1_SetConfig+0xc2>
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	4a19      	ldr	r2, [pc, #100]	; (80084d4 <TIM_OC1_SetConfig+0x114>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d007      	beq.n	8008482 <TIM_OC1_SetConfig+0xc2>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	4a18      	ldr	r2, [pc, #96]	; (80084d8 <TIM_OC1_SetConfig+0x118>)
 8008476:	4293      	cmp	r3, r2
 8008478:	d003      	beq.n	8008482 <TIM_OC1_SetConfig+0xc2>
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	4a17      	ldr	r2, [pc, #92]	; (80084dc <TIM_OC1_SetConfig+0x11c>)
 800847e:	4293      	cmp	r3, r2
 8008480:	d111      	bne.n	80084a6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008482:	693b      	ldr	r3, [r7, #16]
 8008484:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008488:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800848a:	693b      	ldr	r3, [r7, #16]
 800848c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008490:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	695b      	ldr	r3, [r3, #20]
 8008496:	693a      	ldr	r2, [r7, #16]
 8008498:	4313      	orrs	r3, r2
 800849a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	699b      	ldr	r3, [r3, #24]
 80084a0:	693a      	ldr	r2, [r7, #16]
 80084a2:	4313      	orrs	r3, r2
 80084a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	693a      	ldr	r2, [r7, #16]
 80084aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	68fa      	ldr	r2, [r7, #12]
 80084b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	685a      	ldr	r2, [r3, #4]
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	697a      	ldr	r2, [r7, #20]
 80084be:	621a      	str	r2, [r3, #32]
}
 80084c0:	bf00      	nop
 80084c2:	371c      	adds	r7, #28
 80084c4:	46bd      	mov	sp, r7
 80084c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ca:	4770      	bx	lr
 80084cc:	40012c00 	.word	0x40012c00
 80084d0:	40013400 	.word	0x40013400
 80084d4:	40014000 	.word	0x40014000
 80084d8:	40014400 	.word	0x40014400
 80084dc:	40014800 	.word	0x40014800

080084e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b087      	sub	sp, #28
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6a1b      	ldr	r3, [r3, #32]
 80084ee:	f023 0210 	bic.w	r2, r3, #16
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6a1b      	ldr	r3, [r3, #32]
 80084fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	685b      	ldr	r3, [r3, #4]
 8008500:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	699b      	ldr	r3, [r3, #24]
 8008506:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800850e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008512:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800851a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	021b      	lsls	r3, r3, #8
 8008522:	68fa      	ldr	r2, [r7, #12]
 8008524:	4313      	orrs	r3, r2
 8008526:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008528:	697b      	ldr	r3, [r7, #20]
 800852a:	f023 0320 	bic.w	r3, r3, #32
 800852e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	689b      	ldr	r3, [r3, #8]
 8008534:	011b      	lsls	r3, r3, #4
 8008536:	697a      	ldr	r2, [r7, #20]
 8008538:	4313      	orrs	r3, r2
 800853a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	4a28      	ldr	r2, [pc, #160]	; (80085e0 <TIM_OC2_SetConfig+0x100>)
 8008540:	4293      	cmp	r3, r2
 8008542:	d003      	beq.n	800854c <TIM_OC2_SetConfig+0x6c>
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	4a27      	ldr	r2, [pc, #156]	; (80085e4 <TIM_OC2_SetConfig+0x104>)
 8008548:	4293      	cmp	r3, r2
 800854a:	d10d      	bne.n	8008568 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800854c:	697b      	ldr	r3, [r7, #20]
 800854e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008552:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	68db      	ldr	r3, [r3, #12]
 8008558:	011b      	lsls	r3, r3, #4
 800855a:	697a      	ldr	r2, [r7, #20]
 800855c:	4313      	orrs	r3, r2
 800855e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008560:	697b      	ldr	r3, [r7, #20]
 8008562:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008566:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	4a1d      	ldr	r2, [pc, #116]	; (80085e0 <TIM_OC2_SetConfig+0x100>)
 800856c:	4293      	cmp	r3, r2
 800856e:	d00f      	beq.n	8008590 <TIM_OC2_SetConfig+0xb0>
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	4a1c      	ldr	r2, [pc, #112]	; (80085e4 <TIM_OC2_SetConfig+0x104>)
 8008574:	4293      	cmp	r3, r2
 8008576:	d00b      	beq.n	8008590 <TIM_OC2_SetConfig+0xb0>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	4a1b      	ldr	r2, [pc, #108]	; (80085e8 <TIM_OC2_SetConfig+0x108>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d007      	beq.n	8008590 <TIM_OC2_SetConfig+0xb0>
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	4a1a      	ldr	r2, [pc, #104]	; (80085ec <TIM_OC2_SetConfig+0x10c>)
 8008584:	4293      	cmp	r3, r2
 8008586:	d003      	beq.n	8008590 <TIM_OC2_SetConfig+0xb0>
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	4a19      	ldr	r2, [pc, #100]	; (80085f0 <TIM_OC2_SetConfig+0x110>)
 800858c:	4293      	cmp	r3, r2
 800858e:	d113      	bne.n	80085b8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008590:	693b      	ldr	r3, [r7, #16]
 8008592:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008596:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008598:	693b      	ldr	r3, [r7, #16]
 800859a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800859e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	695b      	ldr	r3, [r3, #20]
 80085a4:	009b      	lsls	r3, r3, #2
 80085a6:	693a      	ldr	r2, [r7, #16]
 80085a8:	4313      	orrs	r3, r2
 80085aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	699b      	ldr	r3, [r3, #24]
 80085b0:	009b      	lsls	r3, r3, #2
 80085b2:	693a      	ldr	r2, [r7, #16]
 80085b4:	4313      	orrs	r3, r2
 80085b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	693a      	ldr	r2, [r7, #16]
 80085bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	68fa      	ldr	r2, [r7, #12]
 80085c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	685a      	ldr	r2, [r3, #4]
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	697a      	ldr	r2, [r7, #20]
 80085d0:	621a      	str	r2, [r3, #32]
}
 80085d2:	bf00      	nop
 80085d4:	371c      	adds	r7, #28
 80085d6:	46bd      	mov	sp, r7
 80085d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085dc:	4770      	bx	lr
 80085de:	bf00      	nop
 80085e0:	40012c00 	.word	0x40012c00
 80085e4:	40013400 	.word	0x40013400
 80085e8:	40014000 	.word	0x40014000
 80085ec:	40014400 	.word	0x40014400
 80085f0:	40014800 	.word	0x40014800

080085f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80085f4:	b480      	push	{r7}
 80085f6:	b087      	sub	sp, #28
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
 80085fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6a1b      	ldr	r3, [r3, #32]
 8008602:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6a1b      	ldr	r3, [r3, #32]
 800860e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	685b      	ldr	r3, [r3, #4]
 8008614:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	69db      	ldr	r3, [r3, #28]
 800861a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008622:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008626:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	f023 0303 	bic.w	r3, r3, #3
 800862e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	68fa      	ldr	r2, [r7, #12]
 8008636:	4313      	orrs	r3, r2
 8008638:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008640:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	689b      	ldr	r3, [r3, #8]
 8008646:	021b      	lsls	r3, r3, #8
 8008648:	697a      	ldr	r2, [r7, #20]
 800864a:	4313      	orrs	r3, r2
 800864c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	4a27      	ldr	r2, [pc, #156]	; (80086f0 <TIM_OC3_SetConfig+0xfc>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d003      	beq.n	800865e <TIM_OC3_SetConfig+0x6a>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	4a26      	ldr	r2, [pc, #152]	; (80086f4 <TIM_OC3_SetConfig+0x100>)
 800865a:	4293      	cmp	r3, r2
 800865c:	d10d      	bne.n	800867a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800865e:	697b      	ldr	r3, [r7, #20]
 8008660:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008664:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	68db      	ldr	r3, [r3, #12]
 800866a:	021b      	lsls	r3, r3, #8
 800866c:	697a      	ldr	r2, [r7, #20]
 800866e:	4313      	orrs	r3, r2
 8008670:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008672:	697b      	ldr	r3, [r7, #20]
 8008674:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008678:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	4a1c      	ldr	r2, [pc, #112]	; (80086f0 <TIM_OC3_SetConfig+0xfc>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d00f      	beq.n	80086a2 <TIM_OC3_SetConfig+0xae>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	4a1b      	ldr	r2, [pc, #108]	; (80086f4 <TIM_OC3_SetConfig+0x100>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d00b      	beq.n	80086a2 <TIM_OC3_SetConfig+0xae>
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	4a1a      	ldr	r2, [pc, #104]	; (80086f8 <TIM_OC3_SetConfig+0x104>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d007      	beq.n	80086a2 <TIM_OC3_SetConfig+0xae>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	4a19      	ldr	r2, [pc, #100]	; (80086fc <TIM_OC3_SetConfig+0x108>)
 8008696:	4293      	cmp	r3, r2
 8008698:	d003      	beq.n	80086a2 <TIM_OC3_SetConfig+0xae>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	4a18      	ldr	r2, [pc, #96]	; (8008700 <TIM_OC3_SetConfig+0x10c>)
 800869e:	4293      	cmp	r3, r2
 80086a0:	d113      	bne.n	80086ca <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80086a2:	693b      	ldr	r3, [r7, #16]
 80086a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80086a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80086aa:	693b      	ldr	r3, [r7, #16]
 80086ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80086b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	695b      	ldr	r3, [r3, #20]
 80086b6:	011b      	lsls	r3, r3, #4
 80086b8:	693a      	ldr	r2, [r7, #16]
 80086ba:	4313      	orrs	r3, r2
 80086bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	699b      	ldr	r3, [r3, #24]
 80086c2:	011b      	lsls	r3, r3, #4
 80086c4:	693a      	ldr	r2, [r7, #16]
 80086c6:	4313      	orrs	r3, r2
 80086c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	693a      	ldr	r2, [r7, #16]
 80086ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	68fa      	ldr	r2, [r7, #12]
 80086d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	685a      	ldr	r2, [r3, #4]
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	697a      	ldr	r2, [r7, #20]
 80086e2:	621a      	str	r2, [r3, #32]
}
 80086e4:	bf00      	nop
 80086e6:	371c      	adds	r7, #28
 80086e8:	46bd      	mov	sp, r7
 80086ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ee:	4770      	bx	lr
 80086f0:	40012c00 	.word	0x40012c00
 80086f4:	40013400 	.word	0x40013400
 80086f8:	40014000 	.word	0x40014000
 80086fc:	40014400 	.word	0x40014400
 8008700:	40014800 	.word	0x40014800

08008704 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008704:	b480      	push	{r7}
 8008706:	b087      	sub	sp, #28
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
 800870c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6a1b      	ldr	r3, [r3, #32]
 8008712:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6a1b      	ldr	r3, [r3, #32]
 800871e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	685b      	ldr	r3, [r3, #4]
 8008724:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	69db      	ldr	r3, [r3, #28]
 800872a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008732:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008736:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800873e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	021b      	lsls	r3, r3, #8
 8008746:	68fa      	ldr	r2, [r7, #12]
 8008748:	4313      	orrs	r3, r2
 800874a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800874c:	693b      	ldr	r3, [r7, #16]
 800874e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008752:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	689b      	ldr	r3, [r3, #8]
 8008758:	031b      	lsls	r3, r3, #12
 800875a:	693a      	ldr	r2, [r7, #16]
 800875c:	4313      	orrs	r3, r2
 800875e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	4a18      	ldr	r2, [pc, #96]	; (80087c4 <TIM_OC4_SetConfig+0xc0>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d00f      	beq.n	8008788 <TIM_OC4_SetConfig+0x84>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	4a17      	ldr	r2, [pc, #92]	; (80087c8 <TIM_OC4_SetConfig+0xc4>)
 800876c:	4293      	cmp	r3, r2
 800876e:	d00b      	beq.n	8008788 <TIM_OC4_SetConfig+0x84>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	4a16      	ldr	r2, [pc, #88]	; (80087cc <TIM_OC4_SetConfig+0xc8>)
 8008774:	4293      	cmp	r3, r2
 8008776:	d007      	beq.n	8008788 <TIM_OC4_SetConfig+0x84>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	4a15      	ldr	r2, [pc, #84]	; (80087d0 <TIM_OC4_SetConfig+0xcc>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d003      	beq.n	8008788 <TIM_OC4_SetConfig+0x84>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	4a14      	ldr	r2, [pc, #80]	; (80087d4 <TIM_OC4_SetConfig+0xd0>)
 8008784:	4293      	cmp	r3, r2
 8008786:	d109      	bne.n	800879c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800878e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	695b      	ldr	r3, [r3, #20]
 8008794:	019b      	lsls	r3, r3, #6
 8008796:	697a      	ldr	r2, [r7, #20]
 8008798:	4313      	orrs	r3, r2
 800879a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	697a      	ldr	r2, [r7, #20]
 80087a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	68fa      	ldr	r2, [r7, #12]
 80087a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	685a      	ldr	r2, [r3, #4]
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	693a      	ldr	r2, [r7, #16]
 80087b4:	621a      	str	r2, [r3, #32]
}
 80087b6:	bf00      	nop
 80087b8:	371c      	adds	r7, #28
 80087ba:	46bd      	mov	sp, r7
 80087bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c0:	4770      	bx	lr
 80087c2:	bf00      	nop
 80087c4:	40012c00 	.word	0x40012c00
 80087c8:	40013400 	.word	0x40013400
 80087cc:	40014000 	.word	0x40014000
 80087d0:	40014400 	.word	0x40014400
 80087d4:	40014800 	.word	0x40014800

080087d8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80087d8:	b480      	push	{r7}
 80087da:	b087      	sub	sp, #28
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
 80087e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6a1b      	ldr	r3, [r3, #32]
 80087e6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6a1b      	ldr	r3, [r3, #32]
 80087f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	685b      	ldr	r3, [r3, #4]
 80087f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800880a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	68fa      	ldr	r2, [r7, #12]
 8008812:	4313      	orrs	r3, r2
 8008814:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008816:	693b      	ldr	r3, [r7, #16]
 8008818:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800881c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	689b      	ldr	r3, [r3, #8]
 8008822:	041b      	lsls	r3, r3, #16
 8008824:	693a      	ldr	r2, [r7, #16]
 8008826:	4313      	orrs	r3, r2
 8008828:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	4a17      	ldr	r2, [pc, #92]	; (800888c <TIM_OC5_SetConfig+0xb4>)
 800882e:	4293      	cmp	r3, r2
 8008830:	d00f      	beq.n	8008852 <TIM_OC5_SetConfig+0x7a>
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	4a16      	ldr	r2, [pc, #88]	; (8008890 <TIM_OC5_SetConfig+0xb8>)
 8008836:	4293      	cmp	r3, r2
 8008838:	d00b      	beq.n	8008852 <TIM_OC5_SetConfig+0x7a>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	4a15      	ldr	r2, [pc, #84]	; (8008894 <TIM_OC5_SetConfig+0xbc>)
 800883e:	4293      	cmp	r3, r2
 8008840:	d007      	beq.n	8008852 <TIM_OC5_SetConfig+0x7a>
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	4a14      	ldr	r2, [pc, #80]	; (8008898 <TIM_OC5_SetConfig+0xc0>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d003      	beq.n	8008852 <TIM_OC5_SetConfig+0x7a>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	4a13      	ldr	r2, [pc, #76]	; (800889c <TIM_OC5_SetConfig+0xc4>)
 800884e:	4293      	cmp	r3, r2
 8008850:	d109      	bne.n	8008866 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008852:	697b      	ldr	r3, [r7, #20]
 8008854:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008858:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	695b      	ldr	r3, [r3, #20]
 800885e:	021b      	lsls	r3, r3, #8
 8008860:	697a      	ldr	r2, [r7, #20]
 8008862:	4313      	orrs	r3, r2
 8008864:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	697a      	ldr	r2, [r7, #20]
 800886a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	68fa      	ldr	r2, [r7, #12]
 8008870:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	685a      	ldr	r2, [r3, #4]
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	693a      	ldr	r2, [r7, #16]
 800887e:	621a      	str	r2, [r3, #32]
}
 8008880:	bf00      	nop
 8008882:	371c      	adds	r7, #28
 8008884:	46bd      	mov	sp, r7
 8008886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888a:	4770      	bx	lr
 800888c:	40012c00 	.word	0x40012c00
 8008890:	40013400 	.word	0x40013400
 8008894:	40014000 	.word	0x40014000
 8008898:	40014400 	.word	0x40014400
 800889c:	40014800 	.word	0x40014800

080088a0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80088a0:	b480      	push	{r7}
 80088a2:	b087      	sub	sp, #28
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
 80088a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6a1b      	ldr	r3, [r3, #32]
 80088ae:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6a1b      	ldr	r3, [r3, #32]
 80088ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	685b      	ldr	r3, [r3, #4]
 80088c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80088ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	021b      	lsls	r3, r3, #8
 80088da:	68fa      	ldr	r2, [r7, #12]
 80088dc:	4313      	orrs	r3, r2
 80088de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80088e0:	693b      	ldr	r3, [r7, #16]
 80088e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80088e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	689b      	ldr	r3, [r3, #8]
 80088ec:	051b      	lsls	r3, r3, #20
 80088ee:	693a      	ldr	r2, [r7, #16]
 80088f0:	4313      	orrs	r3, r2
 80088f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	4a18      	ldr	r2, [pc, #96]	; (8008958 <TIM_OC6_SetConfig+0xb8>)
 80088f8:	4293      	cmp	r3, r2
 80088fa:	d00f      	beq.n	800891c <TIM_OC6_SetConfig+0x7c>
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	4a17      	ldr	r2, [pc, #92]	; (800895c <TIM_OC6_SetConfig+0xbc>)
 8008900:	4293      	cmp	r3, r2
 8008902:	d00b      	beq.n	800891c <TIM_OC6_SetConfig+0x7c>
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	4a16      	ldr	r2, [pc, #88]	; (8008960 <TIM_OC6_SetConfig+0xc0>)
 8008908:	4293      	cmp	r3, r2
 800890a:	d007      	beq.n	800891c <TIM_OC6_SetConfig+0x7c>
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	4a15      	ldr	r2, [pc, #84]	; (8008964 <TIM_OC6_SetConfig+0xc4>)
 8008910:	4293      	cmp	r3, r2
 8008912:	d003      	beq.n	800891c <TIM_OC6_SetConfig+0x7c>
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	4a14      	ldr	r2, [pc, #80]	; (8008968 <TIM_OC6_SetConfig+0xc8>)
 8008918:	4293      	cmp	r3, r2
 800891a:	d109      	bne.n	8008930 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008922:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	695b      	ldr	r3, [r3, #20]
 8008928:	029b      	lsls	r3, r3, #10
 800892a:	697a      	ldr	r2, [r7, #20]
 800892c:	4313      	orrs	r3, r2
 800892e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	697a      	ldr	r2, [r7, #20]
 8008934:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	68fa      	ldr	r2, [r7, #12]
 800893a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	685a      	ldr	r2, [r3, #4]
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	693a      	ldr	r2, [r7, #16]
 8008948:	621a      	str	r2, [r3, #32]
}
 800894a:	bf00      	nop
 800894c:	371c      	adds	r7, #28
 800894e:	46bd      	mov	sp, r7
 8008950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008954:	4770      	bx	lr
 8008956:	bf00      	nop
 8008958:	40012c00 	.word	0x40012c00
 800895c:	40013400 	.word	0x40013400
 8008960:	40014000 	.word	0x40014000
 8008964:	40014400 	.word	0x40014400
 8008968:	40014800 	.word	0x40014800

0800896c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800896c:	b480      	push	{r7}
 800896e:	b087      	sub	sp, #28
 8008970:	af00      	add	r7, sp, #0
 8008972:	60f8      	str	r0, [r7, #12]
 8008974:	60b9      	str	r1, [r7, #8]
 8008976:	607a      	str	r2, [r7, #4]
 8008978:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	6a1b      	ldr	r3, [r3, #32]
 800897e:	f023 0201 	bic.w	r2, r3, #1
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	699b      	ldr	r3, [r3, #24]
 800898a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	6a1b      	ldr	r3, [r3, #32]
 8008990:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	4a26      	ldr	r2, [pc, #152]	; (8008a30 <TIM_TI1_SetConfig+0xc4>)
 8008996:	4293      	cmp	r3, r2
 8008998:	d017      	beq.n	80089ca <TIM_TI1_SetConfig+0x5e>
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089a0:	d013      	beq.n	80089ca <TIM_TI1_SetConfig+0x5e>
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	4a23      	ldr	r2, [pc, #140]	; (8008a34 <TIM_TI1_SetConfig+0xc8>)
 80089a6:	4293      	cmp	r3, r2
 80089a8:	d00f      	beq.n	80089ca <TIM_TI1_SetConfig+0x5e>
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	4a22      	ldr	r2, [pc, #136]	; (8008a38 <TIM_TI1_SetConfig+0xcc>)
 80089ae:	4293      	cmp	r3, r2
 80089b0:	d00b      	beq.n	80089ca <TIM_TI1_SetConfig+0x5e>
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	4a21      	ldr	r2, [pc, #132]	; (8008a3c <TIM_TI1_SetConfig+0xd0>)
 80089b6:	4293      	cmp	r3, r2
 80089b8:	d007      	beq.n	80089ca <TIM_TI1_SetConfig+0x5e>
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	4a20      	ldr	r2, [pc, #128]	; (8008a40 <TIM_TI1_SetConfig+0xd4>)
 80089be:	4293      	cmp	r3, r2
 80089c0:	d003      	beq.n	80089ca <TIM_TI1_SetConfig+0x5e>
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	4a1f      	ldr	r2, [pc, #124]	; (8008a44 <TIM_TI1_SetConfig+0xd8>)
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d101      	bne.n	80089ce <TIM_TI1_SetConfig+0x62>
 80089ca:	2301      	movs	r3, #1
 80089cc:	e000      	b.n	80089d0 <TIM_TI1_SetConfig+0x64>
 80089ce:	2300      	movs	r3, #0
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d008      	beq.n	80089e6 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80089d4:	697b      	ldr	r3, [r7, #20]
 80089d6:	f023 0303 	bic.w	r3, r3, #3
 80089da:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80089dc:	697a      	ldr	r2, [r7, #20]
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	4313      	orrs	r3, r2
 80089e2:	617b      	str	r3, [r7, #20]
 80089e4:	e003      	b.n	80089ee <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80089e6:	697b      	ldr	r3, [r7, #20]
 80089e8:	f043 0301 	orr.w	r3, r3, #1
 80089ec:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80089ee:	697b      	ldr	r3, [r7, #20]
 80089f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80089f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	011b      	lsls	r3, r3, #4
 80089fa:	b2db      	uxtb	r3, r3
 80089fc:	697a      	ldr	r2, [r7, #20]
 80089fe:	4313      	orrs	r3, r2
 8008a00:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008a02:	693b      	ldr	r3, [r7, #16]
 8008a04:	f023 030a 	bic.w	r3, r3, #10
 8008a08:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	f003 030a 	and.w	r3, r3, #10
 8008a10:	693a      	ldr	r2, [r7, #16]
 8008a12:	4313      	orrs	r3, r2
 8008a14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	697a      	ldr	r2, [r7, #20]
 8008a1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	693a      	ldr	r2, [r7, #16]
 8008a20:	621a      	str	r2, [r3, #32]
}
 8008a22:	bf00      	nop
 8008a24:	371c      	adds	r7, #28
 8008a26:	46bd      	mov	sp, r7
 8008a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2c:	4770      	bx	lr
 8008a2e:	bf00      	nop
 8008a30:	40012c00 	.word	0x40012c00
 8008a34:	40000400 	.word	0x40000400
 8008a38:	40000800 	.word	0x40000800
 8008a3c:	40000c00 	.word	0x40000c00
 8008a40:	40013400 	.word	0x40013400
 8008a44:	40014000 	.word	0x40014000

08008a48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008a48:	b480      	push	{r7}
 8008a4a:	b087      	sub	sp, #28
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	60f8      	str	r0, [r7, #12]
 8008a50:	60b9      	str	r1, [r7, #8]
 8008a52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	6a1b      	ldr	r3, [r3, #32]
 8008a58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	6a1b      	ldr	r3, [r3, #32]
 8008a5e:	f023 0201 	bic.w	r2, r3, #1
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	699b      	ldr	r3, [r3, #24]
 8008a6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008a6c:	693b      	ldr	r3, [r7, #16]
 8008a6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008a72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	011b      	lsls	r3, r3, #4
 8008a78:	693a      	ldr	r2, [r7, #16]
 8008a7a:	4313      	orrs	r3, r2
 8008a7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008a7e:	697b      	ldr	r3, [r7, #20]
 8008a80:	f023 030a 	bic.w	r3, r3, #10
 8008a84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008a86:	697a      	ldr	r2, [r7, #20]
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	4313      	orrs	r3, r2
 8008a8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	693a      	ldr	r2, [r7, #16]
 8008a92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	697a      	ldr	r2, [r7, #20]
 8008a98:	621a      	str	r2, [r3, #32]
}
 8008a9a:	bf00      	nop
 8008a9c:	371c      	adds	r7, #28
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa4:	4770      	bx	lr

08008aa6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008aa6:	b480      	push	{r7}
 8008aa8:	b087      	sub	sp, #28
 8008aaa:	af00      	add	r7, sp, #0
 8008aac:	60f8      	str	r0, [r7, #12]
 8008aae:	60b9      	str	r1, [r7, #8]
 8008ab0:	607a      	str	r2, [r7, #4]
 8008ab2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	6a1b      	ldr	r3, [r3, #32]
 8008ab8:	f023 0210 	bic.w	r2, r3, #16
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	699b      	ldr	r3, [r3, #24]
 8008ac4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	6a1b      	ldr	r3, [r3, #32]
 8008aca:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008acc:	697b      	ldr	r3, [r7, #20]
 8008ace:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ad2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	021b      	lsls	r3, r3, #8
 8008ad8:	697a      	ldr	r2, [r7, #20]
 8008ada:	4313      	orrs	r3, r2
 8008adc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008ade:	697b      	ldr	r3, [r7, #20]
 8008ae0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008ae4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	031b      	lsls	r3, r3, #12
 8008aea:	b29b      	uxth	r3, r3
 8008aec:	697a      	ldr	r2, [r7, #20]
 8008aee:	4313      	orrs	r3, r2
 8008af0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008af2:	693b      	ldr	r3, [r7, #16]
 8008af4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008af8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	011b      	lsls	r3, r3, #4
 8008afe:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008b02:	693a      	ldr	r2, [r7, #16]
 8008b04:	4313      	orrs	r3, r2
 8008b06:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	697a      	ldr	r2, [r7, #20]
 8008b0c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	693a      	ldr	r2, [r7, #16]
 8008b12:	621a      	str	r2, [r3, #32]
}
 8008b14:	bf00      	nop
 8008b16:	371c      	adds	r7, #28
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1e:	4770      	bx	lr

08008b20 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008b20:	b480      	push	{r7}
 8008b22:	b087      	sub	sp, #28
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	60f8      	str	r0, [r7, #12]
 8008b28:	60b9      	str	r1, [r7, #8]
 8008b2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	6a1b      	ldr	r3, [r3, #32]
 8008b30:	f023 0210 	bic.w	r2, r3, #16
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	699b      	ldr	r3, [r3, #24]
 8008b3c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	6a1b      	ldr	r3, [r3, #32]
 8008b42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008b44:	697b      	ldr	r3, [r7, #20]
 8008b46:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008b4a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	031b      	lsls	r3, r3, #12
 8008b50:	697a      	ldr	r2, [r7, #20]
 8008b52:	4313      	orrs	r3, r2
 8008b54:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008b56:	693b      	ldr	r3, [r7, #16]
 8008b58:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008b5c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008b5e:	68bb      	ldr	r3, [r7, #8]
 8008b60:	011b      	lsls	r3, r3, #4
 8008b62:	693a      	ldr	r2, [r7, #16]
 8008b64:	4313      	orrs	r3, r2
 8008b66:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	697a      	ldr	r2, [r7, #20]
 8008b6c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	693a      	ldr	r2, [r7, #16]
 8008b72:	621a      	str	r2, [r3, #32]
}
 8008b74:	bf00      	nop
 8008b76:	371c      	adds	r7, #28
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7e:	4770      	bx	lr

08008b80 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008b80:	b480      	push	{r7}
 8008b82:	b087      	sub	sp, #28
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	60f8      	str	r0, [r7, #12]
 8008b88:	60b9      	str	r1, [r7, #8]
 8008b8a:	607a      	str	r2, [r7, #4]
 8008b8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	6a1b      	ldr	r3, [r3, #32]
 8008b92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	69db      	ldr	r3, [r3, #28]
 8008b9e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	6a1b      	ldr	r3, [r3, #32]
 8008ba4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008ba6:	697b      	ldr	r3, [r7, #20]
 8008ba8:	f023 0303 	bic.w	r3, r3, #3
 8008bac:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8008bae:	697a      	ldr	r2, [r7, #20]
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	4313      	orrs	r3, r2
 8008bb4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008bb6:	697b      	ldr	r3, [r7, #20]
 8008bb8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008bbc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	011b      	lsls	r3, r3, #4
 8008bc2:	b2db      	uxtb	r3, r3
 8008bc4:	697a      	ldr	r2, [r7, #20]
 8008bc6:	4313      	orrs	r3, r2
 8008bc8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008bca:	693b      	ldr	r3, [r7, #16]
 8008bcc:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8008bd0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	021b      	lsls	r3, r3, #8
 8008bd6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8008bda:	693a      	ldr	r2, [r7, #16]
 8008bdc:	4313      	orrs	r3, r2
 8008bde:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	697a      	ldr	r2, [r7, #20]
 8008be4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	693a      	ldr	r2, [r7, #16]
 8008bea:	621a      	str	r2, [r3, #32]
}
 8008bec:	bf00      	nop
 8008bee:	371c      	adds	r7, #28
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf6:	4770      	bx	lr

08008bf8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b087      	sub	sp, #28
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	60f8      	str	r0, [r7, #12]
 8008c00:	60b9      	str	r1, [r7, #8]
 8008c02:	607a      	str	r2, [r7, #4]
 8008c04:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	6a1b      	ldr	r3, [r3, #32]
 8008c0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	69db      	ldr	r3, [r3, #28]
 8008c16:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	6a1b      	ldr	r3, [r3, #32]
 8008c1c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008c1e:	697b      	ldr	r3, [r7, #20]
 8008c20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c24:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	021b      	lsls	r3, r3, #8
 8008c2a:	697a      	ldr	r2, [r7, #20]
 8008c2c:	4313      	orrs	r3, r2
 8008c2e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008c30:	697b      	ldr	r3, [r7, #20]
 8008c32:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008c36:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	031b      	lsls	r3, r3, #12
 8008c3c:	b29b      	uxth	r3, r3
 8008c3e:	697a      	ldr	r2, [r7, #20]
 8008c40:	4313      	orrs	r3, r2
 8008c42:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008c44:	693b      	ldr	r3, [r7, #16]
 8008c46:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8008c4a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	031b      	lsls	r3, r3, #12
 8008c50:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8008c54:	693a      	ldr	r2, [r7, #16]
 8008c56:	4313      	orrs	r3, r2
 8008c58:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	697a      	ldr	r2, [r7, #20]
 8008c5e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	693a      	ldr	r2, [r7, #16]
 8008c64:	621a      	str	r2, [r3, #32]
}
 8008c66:	bf00      	nop
 8008c68:	371c      	adds	r7, #28
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c70:	4770      	bx	lr

08008c72 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008c72:	b480      	push	{r7}
 8008c74:	b085      	sub	sp, #20
 8008c76:	af00      	add	r7, sp, #0
 8008c78:	6078      	str	r0, [r7, #4]
 8008c7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	689b      	ldr	r3, [r3, #8]
 8008c80:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c88:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008c8a:	683a      	ldr	r2, [r7, #0]
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	4313      	orrs	r3, r2
 8008c90:	f043 0307 	orr.w	r3, r3, #7
 8008c94:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	68fa      	ldr	r2, [r7, #12]
 8008c9a:	609a      	str	r2, [r3, #8]
}
 8008c9c:	bf00      	nop
 8008c9e:	3714      	adds	r7, #20
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca6:	4770      	bx	lr

08008ca8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008ca8:	b480      	push	{r7}
 8008caa:	b087      	sub	sp, #28
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	60f8      	str	r0, [r7, #12]
 8008cb0:	60b9      	str	r1, [r7, #8]
 8008cb2:	607a      	str	r2, [r7, #4]
 8008cb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	689b      	ldr	r3, [r3, #8]
 8008cba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008cbc:	697b      	ldr	r3, [r7, #20]
 8008cbe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008cc2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	021a      	lsls	r2, r3, #8
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	431a      	orrs	r2, r3
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	4313      	orrs	r3, r2
 8008cd0:	697a      	ldr	r2, [r7, #20]
 8008cd2:	4313      	orrs	r3, r2
 8008cd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	697a      	ldr	r2, [r7, #20]
 8008cda:	609a      	str	r2, [r3, #8]
}
 8008cdc:	bf00      	nop
 8008cde:	371c      	adds	r7, #28
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce6:	4770      	bx	lr

08008ce8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b087      	sub	sp, #28
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	60f8      	str	r0, [r7, #12]
 8008cf0:	60b9      	str	r1, [r7, #8]
 8008cf2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	f003 031f 	and.w	r3, r3, #31
 8008cfa:	2201      	movs	r2, #1
 8008cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8008d00:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	6a1a      	ldr	r2, [r3, #32]
 8008d06:	697b      	ldr	r3, [r7, #20]
 8008d08:	43db      	mvns	r3, r3
 8008d0a:	401a      	ands	r2, r3
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	6a1a      	ldr	r2, [r3, #32]
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	f003 031f 	and.w	r3, r3, #31
 8008d1a:	6879      	ldr	r1, [r7, #4]
 8008d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8008d20:	431a      	orrs	r2, r3
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	621a      	str	r2, [r3, #32]
}
 8008d26:	bf00      	nop
 8008d28:	371c      	adds	r7, #28
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d30:	4770      	bx	lr
	...

08008d34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008d34:	b480      	push	{r7}
 8008d36:	b085      	sub	sp, #20
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
 8008d3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d44:	2b01      	cmp	r3, #1
 8008d46:	d101      	bne.n	8008d4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008d48:	2302      	movs	r3, #2
 8008d4a:	e068      	b.n	8008e1e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2201      	movs	r2, #1
 8008d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2202      	movs	r2, #2
 8008d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	685b      	ldr	r3, [r3, #4]
 8008d62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	689b      	ldr	r3, [r3, #8]
 8008d6a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	4a2e      	ldr	r2, [pc, #184]	; (8008e2c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d004      	beq.n	8008d80 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	4a2d      	ldr	r2, [pc, #180]	; (8008e30 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d108      	bne.n	8008d92 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008d86:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	685b      	ldr	r3, [r3, #4]
 8008d8c:	68fa      	ldr	r2, [r7, #12]
 8008d8e:	4313      	orrs	r3, r2
 8008d90:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d98:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	68fa      	ldr	r2, [r7, #12]
 8008da0:	4313      	orrs	r3, r2
 8008da2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	68fa      	ldr	r2, [r7, #12]
 8008daa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	4a1e      	ldr	r2, [pc, #120]	; (8008e2c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d01d      	beq.n	8008df2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008dbe:	d018      	beq.n	8008df2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	4a1b      	ldr	r2, [pc, #108]	; (8008e34 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008dc6:	4293      	cmp	r3, r2
 8008dc8:	d013      	beq.n	8008df2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	4a1a      	ldr	r2, [pc, #104]	; (8008e38 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008dd0:	4293      	cmp	r3, r2
 8008dd2:	d00e      	beq.n	8008df2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	4a18      	ldr	r2, [pc, #96]	; (8008e3c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	d009      	beq.n	8008df2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	4a13      	ldr	r2, [pc, #76]	; (8008e30 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008de4:	4293      	cmp	r3, r2
 8008de6:	d004      	beq.n	8008df2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	4a14      	ldr	r2, [pc, #80]	; (8008e40 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008dee:	4293      	cmp	r3, r2
 8008df0:	d10c      	bne.n	8008e0c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008df2:	68bb      	ldr	r3, [r7, #8]
 8008df4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008df8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	689b      	ldr	r3, [r3, #8]
 8008dfe:	68ba      	ldr	r2, [r7, #8]
 8008e00:	4313      	orrs	r3, r2
 8008e02:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	68ba      	ldr	r2, [r7, #8]
 8008e0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2201      	movs	r2, #1
 8008e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2200      	movs	r2, #0
 8008e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008e1c:	2300      	movs	r3, #0
}
 8008e1e:	4618      	mov	r0, r3
 8008e20:	3714      	adds	r7, #20
 8008e22:	46bd      	mov	sp, r7
 8008e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e28:	4770      	bx	lr
 8008e2a:	bf00      	nop
 8008e2c:	40012c00 	.word	0x40012c00
 8008e30:	40013400 	.word	0x40013400
 8008e34:	40000400 	.word	0x40000400
 8008e38:	40000800 	.word	0x40000800
 8008e3c:	40000c00 	.word	0x40000c00
 8008e40:	40014000 	.word	0x40014000

08008e44 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008e44:	b480      	push	{r7}
 8008e46:	b085      	sub	sp, #20
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
 8008e4c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008e4e:	2300      	movs	r3, #0
 8008e50:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e58:	2b01      	cmp	r3, #1
 8008e5a:	d101      	bne.n	8008e60 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008e5c:	2302      	movs	r3, #2
 8008e5e:	e065      	b.n	8008f2c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2201      	movs	r2, #1
 8008e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	68db      	ldr	r3, [r3, #12]
 8008e72:	4313      	orrs	r3, r2
 8008e74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	689b      	ldr	r3, [r3, #8]
 8008e80:	4313      	orrs	r3, r2
 8008e82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	685b      	ldr	r3, [r3, #4]
 8008e8e:	4313      	orrs	r3, r2
 8008e90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	4313      	orrs	r3, r2
 8008e9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	691b      	ldr	r3, [r3, #16]
 8008eaa:	4313      	orrs	r3, r2
 8008eac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	695b      	ldr	r3, [r3, #20]
 8008eb8:	4313      	orrs	r3, r2
 8008eba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ec6:	4313      	orrs	r3, r2
 8008ec8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	699b      	ldr	r3, [r3, #24]
 8008ed4:	041b      	lsls	r3, r3, #16
 8008ed6:	4313      	orrs	r3, r2
 8008ed8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	4a16      	ldr	r2, [pc, #88]	; (8008f38 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8008ee0:	4293      	cmp	r3, r2
 8008ee2:	d004      	beq.n	8008eee <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	4a14      	ldr	r2, [pc, #80]	; (8008f3c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8008eea:	4293      	cmp	r3, r2
 8008eec:	d115      	bne.n	8008f1a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ef8:	051b      	lsls	r3, r3, #20
 8008efa:	4313      	orrs	r3, r2
 8008efc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	69db      	ldr	r3, [r3, #28]
 8008f08:	4313      	orrs	r3, r2
 8008f0a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	6a1b      	ldr	r3, [r3, #32]
 8008f16:	4313      	orrs	r3, r2
 8008f18:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	68fa      	ldr	r2, [r7, #12]
 8008f20:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2200      	movs	r2, #0
 8008f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008f2a:	2300      	movs	r3, #0
}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	3714      	adds	r7, #20
 8008f30:	46bd      	mov	sp, r7
 8008f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f36:	4770      	bx	lr
 8008f38:	40012c00 	.word	0x40012c00
 8008f3c:	40013400 	.word	0x40013400

08008f40 <HAL_TIMEx_ConfigBreakInput>:
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             const TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)

{
 8008f40:	b480      	push	{r7}
 8008f42:	b08b      	sub	sp, #44	; 0x2c
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	60f8      	str	r0, [r7, #12]
 8008f48:	60b9      	str	r1, [r7, #8]
 8008f4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#else
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));
#endif /* DFSDM1_Channel0 */

  /* Check input state */
  __HAL_LOCK(htim);
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f58:	2b01      	cmp	r3, #1
 8008f5a:	d101      	bne.n	8008f60 <HAL_TIMEx_ConfigBreakInput+0x20>
 8008f5c:	2302      	movs	r3, #2
 8008f5e:	e0af      	b.n	80090c0 <HAL_TIMEx_ConfigBreakInput+0x180>
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	2201      	movs	r2, #1
 8008f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (sBreakInputConfig->Source)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	3b01      	subs	r3, #1
 8008f6e:	2b07      	cmp	r3, #7
 8008f70:	d83a      	bhi.n	8008fe8 <HAL_TIMEx_ConfigBreakInput+0xa8>
 8008f72:	a201      	add	r2, pc, #4	; (adr r2, 8008f78 <HAL_TIMEx_ConfigBreakInput+0x38>)
 8008f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f78:	08008f99 	.word	0x08008f99
 8008f7c:	08008fad 	.word	0x08008fad
 8008f80:	08008fe9 	.word	0x08008fe9
 8008f84:	08008fc1 	.word	0x08008fc1
 8008f88:	08008fe9 	.word	0x08008fe9
 8008f8c:	08008fe9 	.word	0x08008fe9
 8008f90:	08008fe9 	.word	0x08008fe9
 8008f94:	08008fd5 	.word	0x08008fd5
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_OR2_BKINE;
 8008f98:	2301      	movs	r3, #1
 8008f9a:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKINE_Pos;
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_OR2_BKINP;
 8008fa0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008fa4:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_OR2_BKINP_Pos;
 8008fa6:	2309      	movs	r3, #9
 8008fa8:	613b      	str	r3, [r7, #16]
      break;
 8008faa:	e026      	b.n	8008ffa <HAL_TIMEx_ConfigBreakInput+0xba>
    }
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_OR2_BKCMP1E;
 8008fac:	2302      	movs	r3, #2
 8008fae:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKCMP1E_Pos;
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_OR2_BKCMP1P;
 8008fb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008fb8:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_OR2_BKCMP1P_Pos;
 8008fba:	230a      	movs	r3, #10
 8008fbc:	613b      	str	r3, [r7, #16]
      break;
 8008fbe:	e01c      	b.n	8008ffa <HAL_TIMEx_ConfigBreakInput+0xba>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_OR2_BKCMP2E;
 8008fc0:	2304      	movs	r3, #4
 8008fc2:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKCMP2E_Pos;
 8008fc4:	2302      	movs	r3, #2
 8008fc6:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_OR2_BKCMP2P;
 8008fc8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008fcc:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_OR2_BKCMP2P_Pos;
 8008fce:	230b      	movs	r3, #11
 8008fd0:	613b      	str	r3, [r7, #16]
      break;
 8008fd2:	e012      	b.n	8008ffa <HAL_TIMEx_ConfigBreakInput+0xba>
    }
#if defined(DFSDM1_Channel0)
    case TIM_BREAKINPUTSOURCE_DFSDM1:
    {
      bkin_enable_mask = TIM1_OR2_BKDF1BK0E;
 8008fd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008fd8:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKDF1BK0E_Pos;
 8008fda:	2308      	movs	r3, #8
 8008fdc:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = 0U;
 8008fde:	2300      	movs	r3, #0
 8008fe0:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = 0U;
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	613b      	str	r3, [r7, #16]
      break;
 8008fe6:	e008      	b.n	8008ffa <HAL_TIMEx_ConfigBreakInput+0xba>
    }
#endif /* DFSDM1_Channel0 */

    default:
    {
      bkin_enable_mask = 0U;
 8008fe8:	2300      	movs	r3, #0
 8008fea:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = 0U;
 8008fec:	2300      	movs	r3, #0
 8008fee:	61bb      	str	r3, [r7, #24]
      bkin_enable_bitpos = 0U;
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	617b      	str	r3, [r7, #20]
      bkin_polarity_bitpos = 0U;
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	613b      	str	r3, [r7, #16]
      break;
 8008ff8:	bf00      	nop
    }
  }

  switch (BreakInput)
 8008ffa:	68bb      	ldr	r3, [r7, #8]
 8008ffc:	2b01      	cmp	r3, #1
 8008ffe:	d003      	beq.n	8009008 <HAL_TIMEx_ConfigBreakInput+0xc8>
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	2b02      	cmp	r3, #2
 8009004:	d029      	beq.n	800905a <HAL_TIMEx_ConfigBreakInput+0x11a>
 8009006:	e051      	b.n	80090ac <HAL_TIMEx_ConfigBreakInput+0x16c>
  {
    case TIM_BREAKINPUT_BRK:
    {
      /* Get the TIMx_OR2 register value */
      tmporx = htim->Instance->OR2;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800900e:	623b      	str	r3, [r7, #32]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 8009010:	69fb      	ldr	r3, [r7, #28]
 8009012:	43db      	mvns	r3, r3
 8009014:	6a3a      	ldr	r2, [r7, #32]
 8009016:	4013      	ands	r3, r2
 8009018:	623b      	str	r3, [r7, #32]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	685a      	ldr	r2, [r3, #4]
 800901e:	697b      	ldr	r3, [r7, #20]
 8009020:	409a      	lsls	r2, r3
 8009022:	69fb      	ldr	r3, [r7, #28]
 8009024:	4013      	ands	r3, r2
 8009026:	6a3a      	ldr	r2, [r7, #32]
 8009028:	4313      	orrs	r3, r2
 800902a:	623b      	str	r3, [r7, #32]

      /* Set the break input polarity */
#if defined(DFSDM1_Channel0)
      if (sBreakInputConfig->Source != TIM_BREAKINPUTSOURCE_DFSDM1)
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	2b08      	cmp	r3, #8
 8009032:	d00d      	beq.n	8009050 <HAL_TIMEx_ConfigBreakInput+0x110>
#endif /* DFSDM1_Channel0 */
      {
        tmporx &= ~bkin_polarity_mask;
 8009034:	69bb      	ldr	r3, [r7, #24]
 8009036:	43db      	mvns	r3, r3
 8009038:	6a3a      	ldr	r2, [r7, #32]
 800903a:	4013      	ands	r3, r2
 800903c:	623b      	str	r3, [r7, #32]
        tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	689a      	ldr	r2, [r3, #8]
 8009042:	693b      	ldr	r3, [r7, #16]
 8009044:	409a      	lsls	r2, r3
 8009046:	69bb      	ldr	r3, [r7, #24]
 8009048:	4013      	ands	r3, r2
 800904a:	6a3a      	ldr	r2, [r7, #32]
 800904c:	4313      	orrs	r3, r2
 800904e:	623b      	str	r3, [r7, #32]
      }

      /* Set TIMx_OR2 */
      htim->Instance->OR2 = tmporx;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	6a3a      	ldr	r2, [r7, #32]
 8009056:	661a      	str	r2, [r3, #96]	; 0x60
      break;
 8009058:	e02c      	b.n	80090b4 <HAL_TIMEx_ConfigBreakInput+0x174>
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_OR3 register value */
      tmporx = htim->Instance->OR3;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009060:	623b      	str	r3, [r7, #32]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 8009062:	69fb      	ldr	r3, [r7, #28]
 8009064:	43db      	mvns	r3, r3
 8009066:	6a3a      	ldr	r2, [r7, #32]
 8009068:	4013      	ands	r3, r2
 800906a:	623b      	str	r3, [r7, #32]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	685a      	ldr	r2, [r3, #4]
 8009070:	697b      	ldr	r3, [r7, #20]
 8009072:	409a      	lsls	r2, r3
 8009074:	69fb      	ldr	r3, [r7, #28]
 8009076:	4013      	ands	r3, r2
 8009078:	6a3a      	ldr	r2, [r7, #32]
 800907a:	4313      	orrs	r3, r2
 800907c:	623b      	str	r3, [r7, #32]

      /* Set the break input polarity */
#if defined(DFSDM1_Channel0)
      if (sBreakInputConfig->Source != TIM_BREAKINPUTSOURCE_DFSDM1)
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	2b08      	cmp	r3, #8
 8009084:	d00d      	beq.n	80090a2 <HAL_TIMEx_ConfigBreakInput+0x162>
#endif /* DFSDM1_Channel0 */
      {
        tmporx &= ~bkin_polarity_mask;
 8009086:	69bb      	ldr	r3, [r7, #24]
 8009088:	43db      	mvns	r3, r3
 800908a:	6a3a      	ldr	r2, [r7, #32]
 800908c:	4013      	ands	r3, r2
 800908e:	623b      	str	r3, [r7, #32]
        tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	689a      	ldr	r2, [r3, #8]
 8009094:	693b      	ldr	r3, [r7, #16]
 8009096:	409a      	lsls	r2, r3
 8009098:	69bb      	ldr	r3, [r7, #24]
 800909a:	4013      	ands	r3, r2
 800909c:	6a3a      	ldr	r2, [r7, #32]
 800909e:	4313      	orrs	r3, r2
 80090a0:	623b      	str	r3, [r7, #32]
      }

      /* Set TIMx_OR3 */
      htim->Instance->OR3 = tmporx;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	6a3a      	ldr	r2, [r7, #32]
 80090a8:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 80090aa:	e003      	b.n	80090b4 <HAL_TIMEx_ConfigBreakInput+0x174>
    }
    default:
      status = HAL_ERROR;
 80090ac:	2301      	movs	r3, #1
 80090ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80090b2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	2200      	movs	r2, #0
 80090b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80090bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80090c0:	4618      	mov	r0, r3
 80090c2:	372c      	adds	r7, #44	; 0x2c
 80090c4:	46bd      	mov	sp, r7
 80090c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ca:	4770      	bx	lr

080090cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80090cc:	b480      	push	{r7}
 80090ce:	b083      	sub	sp, #12
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80090d4:	bf00      	nop
 80090d6:	370c      	adds	r7, #12
 80090d8:	46bd      	mov	sp, r7
 80090da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090de:	4770      	bx	lr

080090e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80090e0:	b480      	push	{r7}
 80090e2:	b083      	sub	sp, #12
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80090e8:	bf00      	nop
 80090ea:	370c      	adds	r7, #12
 80090ec:	46bd      	mov	sp, r7
 80090ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f2:	4770      	bx	lr

080090f4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80090f4:	b480      	push	{r7}
 80090f6:	b083      	sub	sp, #12
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80090fc:	bf00      	nop
 80090fe:	370c      	adds	r7, #12
 8009100:	46bd      	mov	sp, r7
 8009102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009106:	4770      	bx	lr

08009108 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b082      	sub	sp, #8
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d101      	bne.n	800911a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009116:	2301      	movs	r3, #1
 8009118:	e042      	b.n	80091a0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009120:	2b00      	cmp	r3, #0
 8009122:	d106      	bne.n	8009132 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2200      	movs	r2, #0
 8009128:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800912c:	6878      	ldr	r0, [r7, #4]
 800912e:	f7f8 fda7 	bl	8001c80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	2224      	movs	r2, #36	; 0x24
 8009136:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	681a      	ldr	r2, [r3, #0]
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	f022 0201 	bic.w	r2, r2, #1
 8009148:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	f000 f82c 	bl	80091a8 <UART_SetConfig>
 8009150:	4603      	mov	r3, r0
 8009152:	2b01      	cmp	r3, #1
 8009154:	d101      	bne.n	800915a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009156:	2301      	movs	r3, #1
 8009158:	e022      	b.n	80091a0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800915e:	2b00      	cmp	r3, #0
 8009160:	d002      	beq.n	8009168 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f000 fb1c 	bl	80097a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	685a      	ldr	r2, [r3, #4]
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009176:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	689a      	ldr	r2, [r3, #8]
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009186:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	681a      	ldr	r2, [r3, #0]
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f042 0201 	orr.w	r2, r2, #1
 8009196:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009198:	6878      	ldr	r0, [r7, #4]
 800919a:	f000 fba3 	bl	80098e4 <UART_CheckIdleState>
 800919e:	4603      	mov	r3, r0
}
 80091a0:	4618      	mov	r0, r3
 80091a2:	3708      	adds	r7, #8
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bd80      	pop	{r7, pc}

080091a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80091a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80091ac:	b08c      	sub	sp, #48	; 0x30
 80091ae:	af00      	add	r7, sp, #0
 80091b0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80091b2:	2300      	movs	r3, #0
 80091b4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80091b8:	697b      	ldr	r3, [r7, #20]
 80091ba:	689a      	ldr	r2, [r3, #8]
 80091bc:	697b      	ldr	r3, [r7, #20]
 80091be:	691b      	ldr	r3, [r3, #16]
 80091c0:	431a      	orrs	r2, r3
 80091c2:	697b      	ldr	r3, [r7, #20]
 80091c4:	695b      	ldr	r3, [r3, #20]
 80091c6:	431a      	orrs	r2, r3
 80091c8:	697b      	ldr	r3, [r7, #20]
 80091ca:	69db      	ldr	r3, [r3, #28]
 80091cc:	4313      	orrs	r3, r2
 80091ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80091d0:	697b      	ldr	r3, [r7, #20]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	681a      	ldr	r2, [r3, #0]
 80091d6:	4baa      	ldr	r3, [pc, #680]	; (8009480 <UART_SetConfig+0x2d8>)
 80091d8:	4013      	ands	r3, r2
 80091da:	697a      	ldr	r2, [r7, #20]
 80091dc:	6812      	ldr	r2, [r2, #0]
 80091de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80091e0:	430b      	orrs	r3, r1
 80091e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80091e4:	697b      	ldr	r3, [r7, #20]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	685b      	ldr	r3, [r3, #4]
 80091ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80091ee:	697b      	ldr	r3, [r7, #20]
 80091f0:	68da      	ldr	r2, [r3, #12]
 80091f2:	697b      	ldr	r3, [r7, #20]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	430a      	orrs	r2, r1
 80091f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80091fa:	697b      	ldr	r3, [r7, #20]
 80091fc:	699b      	ldr	r3, [r3, #24]
 80091fe:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009200:	697b      	ldr	r3, [r7, #20]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	4a9f      	ldr	r2, [pc, #636]	; (8009484 <UART_SetConfig+0x2dc>)
 8009206:	4293      	cmp	r3, r2
 8009208:	d004      	beq.n	8009214 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800920a:	697b      	ldr	r3, [r7, #20]
 800920c:	6a1b      	ldr	r3, [r3, #32]
 800920e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009210:	4313      	orrs	r3, r2
 8009212:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009214:	697b      	ldr	r3, [r7, #20]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	689b      	ldr	r3, [r3, #8]
 800921a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800921e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8009222:	697a      	ldr	r2, [r7, #20]
 8009224:	6812      	ldr	r2, [r2, #0]
 8009226:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009228:	430b      	orrs	r3, r1
 800922a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800922c:	697b      	ldr	r3, [r7, #20]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009232:	f023 010f 	bic.w	r1, r3, #15
 8009236:	697b      	ldr	r3, [r7, #20]
 8009238:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800923a:	697b      	ldr	r3, [r7, #20]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	430a      	orrs	r2, r1
 8009240:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009242:	697b      	ldr	r3, [r7, #20]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	4a90      	ldr	r2, [pc, #576]	; (8009488 <UART_SetConfig+0x2e0>)
 8009248:	4293      	cmp	r3, r2
 800924a:	d125      	bne.n	8009298 <UART_SetConfig+0xf0>
 800924c:	4b8f      	ldr	r3, [pc, #572]	; (800948c <UART_SetConfig+0x2e4>)
 800924e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009252:	f003 0303 	and.w	r3, r3, #3
 8009256:	2b03      	cmp	r3, #3
 8009258:	d81a      	bhi.n	8009290 <UART_SetConfig+0xe8>
 800925a:	a201      	add	r2, pc, #4	; (adr r2, 8009260 <UART_SetConfig+0xb8>)
 800925c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009260:	08009271 	.word	0x08009271
 8009264:	08009281 	.word	0x08009281
 8009268:	08009279 	.word	0x08009279
 800926c:	08009289 	.word	0x08009289
 8009270:	2301      	movs	r3, #1
 8009272:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009276:	e116      	b.n	80094a6 <UART_SetConfig+0x2fe>
 8009278:	2302      	movs	r3, #2
 800927a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800927e:	e112      	b.n	80094a6 <UART_SetConfig+0x2fe>
 8009280:	2304      	movs	r3, #4
 8009282:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009286:	e10e      	b.n	80094a6 <UART_SetConfig+0x2fe>
 8009288:	2308      	movs	r3, #8
 800928a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800928e:	e10a      	b.n	80094a6 <UART_SetConfig+0x2fe>
 8009290:	2310      	movs	r3, #16
 8009292:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009296:	e106      	b.n	80094a6 <UART_SetConfig+0x2fe>
 8009298:	697b      	ldr	r3, [r7, #20]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	4a7c      	ldr	r2, [pc, #496]	; (8009490 <UART_SetConfig+0x2e8>)
 800929e:	4293      	cmp	r3, r2
 80092a0:	d138      	bne.n	8009314 <UART_SetConfig+0x16c>
 80092a2:	4b7a      	ldr	r3, [pc, #488]	; (800948c <UART_SetConfig+0x2e4>)
 80092a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092a8:	f003 030c 	and.w	r3, r3, #12
 80092ac:	2b0c      	cmp	r3, #12
 80092ae:	d82d      	bhi.n	800930c <UART_SetConfig+0x164>
 80092b0:	a201      	add	r2, pc, #4	; (adr r2, 80092b8 <UART_SetConfig+0x110>)
 80092b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092b6:	bf00      	nop
 80092b8:	080092ed 	.word	0x080092ed
 80092bc:	0800930d 	.word	0x0800930d
 80092c0:	0800930d 	.word	0x0800930d
 80092c4:	0800930d 	.word	0x0800930d
 80092c8:	080092fd 	.word	0x080092fd
 80092cc:	0800930d 	.word	0x0800930d
 80092d0:	0800930d 	.word	0x0800930d
 80092d4:	0800930d 	.word	0x0800930d
 80092d8:	080092f5 	.word	0x080092f5
 80092dc:	0800930d 	.word	0x0800930d
 80092e0:	0800930d 	.word	0x0800930d
 80092e4:	0800930d 	.word	0x0800930d
 80092e8:	08009305 	.word	0x08009305
 80092ec:	2300      	movs	r3, #0
 80092ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80092f2:	e0d8      	b.n	80094a6 <UART_SetConfig+0x2fe>
 80092f4:	2302      	movs	r3, #2
 80092f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80092fa:	e0d4      	b.n	80094a6 <UART_SetConfig+0x2fe>
 80092fc:	2304      	movs	r3, #4
 80092fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009302:	e0d0      	b.n	80094a6 <UART_SetConfig+0x2fe>
 8009304:	2308      	movs	r3, #8
 8009306:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800930a:	e0cc      	b.n	80094a6 <UART_SetConfig+0x2fe>
 800930c:	2310      	movs	r3, #16
 800930e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009312:	e0c8      	b.n	80094a6 <UART_SetConfig+0x2fe>
 8009314:	697b      	ldr	r3, [r7, #20]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	4a5e      	ldr	r2, [pc, #376]	; (8009494 <UART_SetConfig+0x2ec>)
 800931a:	4293      	cmp	r3, r2
 800931c:	d125      	bne.n	800936a <UART_SetConfig+0x1c2>
 800931e:	4b5b      	ldr	r3, [pc, #364]	; (800948c <UART_SetConfig+0x2e4>)
 8009320:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009324:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009328:	2b30      	cmp	r3, #48	; 0x30
 800932a:	d016      	beq.n	800935a <UART_SetConfig+0x1b2>
 800932c:	2b30      	cmp	r3, #48	; 0x30
 800932e:	d818      	bhi.n	8009362 <UART_SetConfig+0x1ba>
 8009330:	2b20      	cmp	r3, #32
 8009332:	d00a      	beq.n	800934a <UART_SetConfig+0x1a2>
 8009334:	2b20      	cmp	r3, #32
 8009336:	d814      	bhi.n	8009362 <UART_SetConfig+0x1ba>
 8009338:	2b00      	cmp	r3, #0
 800933a:	d002      	beq.n	8009342 <UART_SetConfig+0x19a>
 800933c:	2b10      	cmp	r3, #16
 800933e:	d008      	beq.n	8009352 <UART_SetConfig+0x1aa>
 8009340:	e00f      	b.n	8009362 <UART_SetConfig+0x1ba>
 8009342:	2300      	movs	r3, #0
 8009344:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009348:	e0ad      	b.n	80094a6 <UART_SetConfig+0x2fe>
 800934a:	2302      	movs	r3, #2
 800934c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009350:	e0a9      	b.n	80094a6 <UART_SetConfig+0x2fe>
 8009352:	2304      	movs	r3, #4
 8009354:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009358:	e0a5      	b.n	80094a6 <UART_SetConfig+0x2fe>
 800935a:	2308      	movs	r3, #8
 800935c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009360:	e0a1      	b.n	80094a6 <UART_SetConfig+0x2fe>
 8009362:	2310      	movs	r3, #16
 8009364:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009368:	e09d      	b.n	80094a6 <UART_SetConfig+0x2fe>
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	4a4a      	ldr	r2, [pc, #296]	; (8009498 <UART_SetConfig+0x2f0>)
 8009370:	4293      	cmp	r3, r2
 8009372:	d125      	bne.n	80093c0 <UART_SetConfig+0x218>
 8009374:	4b45      	ldr	r3, [pc, #276]	; (800948c <UART_SetConfig+0x2e4>)
 8009376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800937a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800937e:	2bc0      	cmp	r3, #192	; 0xc0
 8009380:	d016      	beq.n	80093b0 <UART_SetConfig+0x208>
 8009382:	2bc0      	cmp	r3, #192	; 0xc0
 8009384:	d818      	bhi.n	80093b8 <UART_SetConfig+0x210>
 8009386:	2b80      	cmp	r3, #128	; 0x80
 8009388:	d00a      	beq.n	80093a0 <UART_SetConfig+0x1f8>
 800938a:	2b80      	cmp	r3, #128	; 0x80
 800938c:	d814      	bhi.n	80093b8 <UART_SetConfig+0x210>
 800938e:	2b00      	cmp	r3, #0
 8009390:	d002      	beq.n	8009398 <UART_SetConfig+0x1f0>
 8009392:	2b40      	cmp	r3, #64	; 0x40
 8009394:	d008      	beq.n	80093a8 <UART_SetConfig+0x200>
 8009396:	e00f      	b.n	80093b8 <UART_SetConfig+0x210>
 8009398:	2300      	movs	r3, #0
 800939a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800939e:	e082      	b.n	80094a6 <UART_SetConfig+0x2fe>
 80093a0:	2302      	movs	r3, #2
 80093a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80093a6:	e07e      	b.n	80094a6 <UART_SetConfig+0x2fe>
 80093a8:	2304      	movs	r3, #4
 80093aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80093ae:	e07a      	b.n	80094a6 <UART_SetConfig+0x2fe>
 80093b0:	2308      	movs	r3, #8
 80093b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80093b6:	e076      	b.n	80094a6 <UART_SetConfig+0x2fe>
 80093b8:	2310      	movs	r3, #16
 80093ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80093be:	e072      	b.n	80094a6 <UART_SetConfig+0x2fe>
 80093c0:	697b      	ldr	r3, [r7, #20]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	4a35      	ldr	r2, [pc, #212]	; (800949c <UART_SetConfig+0x2f4>)
 80093c6:	4293      	cmp	r3, r2
 80093c8:	d12a      	bne.n	8009420 <UART_SetConfig+0x278>
 80093ca:	4b30      	ldr	r3, [pc, #192]	; (800948c <UART_SetConfig+0x2e4>)
 80093cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80093d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80093d8:	d01a      	beq.n	8009410 <UART_SetConfig+0x268>
 80093da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80093de:	d81b      	bhi.n	8009418 <UART_SetConfig+0x270>
 80093e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80093e4:	d00c      	beq.n	8009400 <UART_SetConfig+0x258>
 80093e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80093ea:	d815      	bhi.n	8009418 <UART_SetConfig+0x270>
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d003      	beq.n	80093f8 <UART_SetConfig+0x250>
 80093f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093f4:	d008      	beq.n	8009408 <UART_SetConfig+0x260>
 80093f6:	e00f      	b.n	8009418 <UART_SetConfig+0x270>
 80093f8:	2300      	movs	r3, #0
 80093fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80093fe:	e052      	b.n	80094a6 <UART_SetConfig+0x2fe>
 8009400:	2302      	movs	r3, #2
 8009402:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009406:	e04e      	b.n	80094a6 <UART_SetConfig+0x2fe>
 8009408:	2304      	movs	r3, #4
 800940a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800940e:	e04a      	b.n	80094a6 <UART_SetConfig+0x2fe>
 8009410:	2308      	movs	r3, #8
 8009412:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009416:	e046      	b.n	80094a6 <UART_SetConfig+0x2fe>
 8009418:	2310      	movs	r3, #16
 800941a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800941e:	e042      	b.n	80094a6 <UART_SetConfig+0x2fe>
 8009420:	697b      	ldr	r3, [r7, #20]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	4a17      	ldr	r2, [pc, #92]	; (8009484 <UART_SetConfig+0x2dc>)
 8009426:	4293      	cmp	r3, r2
 8009428:	d13a      	bne.n	80094a0 <UART_SetConfig+0x2f8>
 800942a:	4b18      	ldr	r3, [pc, #96]	; (800948c <UART_SetConfig+0x2e4>)
 800942c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009430:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009434:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009438:	d01a      	beq.n	8009470 <UART_SetConfig+0x2c8>
 800943a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800943e:	d81b      	bhi.n	8009478 <UART_SetConfig+0x2d0>
 8009440:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009444:	d00c      	beq.n	8009460 <UART_SetConfig+0x2b8>
 8009446:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800944a:	d815      	bhi.n	8009478 <UART_SetConfig+0x2d0>
 800944c:	2b00      	cmp	r3, #0
 800944e:	d003      	beq.n	8009458 <UART_SetConfig+0x2b0>
 8009450:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009454:	d008      	beq.n	8009468 <UART_SetConfig+0x2c0>
 8009456:	e00f      	b.n	8009478 <UART_SetConfig+0x2d0>
 8009458:	2300      	movs	r3, #0
 800945a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800945e:	e022      	b.n	80094a6 <UART_SetConfig+0x2fe>
 8009460:	2302      	movs	r3, #2
 8009462:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009466:	e01e      	b.n	80094a6 <UART_SetConfig+0x2fe>
 8009468:	2304      	movs	r3, #4
 800946a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800946e:	e01a      	b.n	80094a6 <UART_SetConfig+0x2fe>
 8009470:	2308      	movs	r3, #8
 8009472:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009476:	e016      	b.n	80094a6 <UART_SetConfig+0x2fe>
 8009478:	2310      	movs	r3, #16
 800947a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800947e:	e012      	b.n	80094a6 <UART_SetConfig+0x2fe>
 8009480:	cfff69f3 	.word	0xcfff69f3
 8009484:	40008000 	.word	0x40008000
 8009488:	40013800 	.word	0x40013800
 800948c:	40021000 	.word	0x40021000
 8009490:	40004400 	.word	0x40004400
 8009494:	40004800 	.word	0x40004800
 8009498:	40004c00 	.word	0x40004c00
 800949c:	40005000 	.word	0x40005000
 80094a0:	2310      	movs	r3, #16
 80094a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80094a6:	697b      	ldr	r3, [r7, #20]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	4aae      	ldr	r2, [pc, #696]	; (8009764 <UART_SetConfig+0x5bc>)
 80094ac:	4293      	cmp	r3, r2
 80094ae:	f040 8097 	bne.w	80095e0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80094b2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80094b6:	2b08      	cmp	r3, #8
 80094b8:	d823      	bhi.n	8009502 <UART_SetConfig+0x35a>
 80094ba:	a201      	add	r2, pc, #4	; (adr r2, 80094c0 <UART_SetConfig+0x318>)
 80094bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094c0:	080094e5 	.word	0x080094e5
 80094c4:	08009503 	.word	0x08009503
 80094c8:	080094ed 	.word	0x080094ed
 80094cc:	08009503 	.word	0x08009503
 80094d0:	080094f3 	.word	0x080094f3
 80094d4:	08009503 	.word	0x08009503
 80094d8:	08009503 	.word	0x08009503
 80094dc:	08009503 	.word	0x08009503
 80094e0:	080094fb 	.word	0x080094fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80094e4:	f7fb fc32 	bl	8004d4c <HAL_RCC_GetPCLK1Freq>
 80094e8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80094ea:	e010      	b.n	800950e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80094ec:	4b9e      	ldr	r3, [pc, #632]	; (8009768 <UART_SetConfig+0x5c0>)
 80094ee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80094f0:	e00d      	b.n	800950e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80094f2:	f7fb fb93 	bl	8004c1c <HAL_RCC_GetSysClockFreq>
 80094f6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80094f8:	e009      	b.n	800950e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80094fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80094fe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009500:	e005      	b.n	800950e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8009502:	2300      	movs	r3, #0
 8009504:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009506:	2301      	movs	r3, #1
 8009508:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800950c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800950e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009510:	2b00      	cmp	r3, #0
 8009512:	f000 8130 	beq.w	8009776 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009516:	697b      	ldr	r3, [r7, #20]
 8009518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800951a:	4a94      	ldr	r2, [pc, #592]	; (800976c <UART_SetConfig+0x5c4>)
 800951c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009520:	461a      	mov	r2, r3
 8009522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009524:	fbb3 f3f2 	udiv	r3, r3, r2
 8009528:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800952a:	697b      	ldr	r3, [r7, #20]
 800952c:	685a      	ldr	r2, [r3, #4]
 800952e:	4613      	mov	r3, r2
 8009530:	005b      	lsls	r3, r3, #1
 8009532:	4413      	add	r3, r2
 8009534:	69ba      	ldr	r2, [r7, #24]
 8009536:	429a      	cmp	r2, r3
 8009538:	d305      	bcc.n	8009546 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800953a:	697b      	ldr	r3, [r7, #20]
 800953c:	685b      	ldr	r3, [r3, #4]
 800953e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009540:	69ba      	ldr	r2, [r7, #24]
 8009542:	429a      	cmp	r2, r3
 8009544:	d903      	bls.n	800954e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8009546:	2301      	movs	r3, #1
 8009548:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800954c:	e113      	b.n	8009776 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800954e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009550:	2200      	movs	r2, #0
 8009552:	60bb      	str	r3, [r7, #8]
 8009554:	60fa      	str	r2, [r7, #12]
 8009556:	697b      	ldr	r3, [r7, #20]
 8009558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800955a:	4a84      	ldr	r2, [pc, #528]	; (800976c <UART_SetConfig+0x5c4>)
 800955c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009560:	b29b      	uxth	r3, r3
 8009562:	2200      	movs	r2, #0
 8009564:	603b      	str	r3, [r7, #0]
 8009566:	607a      	str	r2, [r7, #4]
 8009568:	e9d7 2300 	ldrd	r2, r3, [r7]
 800956c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009570:	f7f6 fe44 	bl	80001fc <__aeabi_uldivmod>
 8009574:	4602      	mov	r2, r0
 8009576:	460b      	mov	r3, r1
 8009578:	4610      	mov	r0, r2
 800957a:	4619      	mov	r1, r3
 800957c:	f04f 0200 	mov.w	r2, #0
 8009580:	f04f 0300 	mov.w	r3, #0
 8009584:	020b      	lsls	r3, r1, #8
 8009586:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800958a:	0202      	lsls	r2, r0, #8
 800958c:	6979      	ldr	r1, [r7, #20]
 800958e:	6849      	ldr	r1, [r1, #4]
 8009590:	0849      	lsrs	r1, r1, #1
 8009592:	2000      	movs	r0, #0
 8009594:	460c      	mov	r4, r1
 8009596:	4605      	mov	r5, r0
 8009598:	eb12 0804 	adds.w	r8, r2, r4
 800959c:	eb43 0905 	adc.w	r9, r3, r5
 80095a0:	697b      	ldr	r3, [r7, #20]
 80095a2:	685b      	ldr	r3, [r3, #4]
 80095a4:	2200      	movs	r2, #0
 80095a6:	469a      	mov	sl, r3
 80095a8:	4693      	mov	fp, r2
 80095aa:	4652      	mov	r2, sl
 80095ac:	465b      	mov	r3, fp
 80095ae:	4640      	mov	r0, r8
 80095b0:	4649      	mov	r1, r9
 80095b2:	f7f6 fe23 	bl	80001fc <__aeabi_uldivmod>
 80095b6:	4602      	mov	r2, r0
 80095b8:	460b      	mov	r3, r1
 80095ba:	4613      	mov	r3, r2
 80095bc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80095be:	6a3b      	ldr	r3, [r7, #32]
 80095c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80095c4:	d308      	bcc.n	80095d8 <UART_SetConfig+0x430>
 80095c6:	6a3b      	ldr	r3, [r7, #32]
 80095c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80095cc:	d204      	bcs.n	80095d8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80095ce:	697b      	ldr	r3, [r7, #20]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	6a3a      	ldr	r2, [r7, #32]
 80095d4:	60da      	str	r2, [r3, #12]
 80095d6:	e0ce      	b.n	8009776 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80095d8:	2301      	movs	r3, #1
 80095da:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80095de:	e0ca      	b.n	8009776 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80095e0:	697b      	ldr	r3, [r7, #20]
 80095e2:	69db      	ldr	r3, [r3, #28]
 80095e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80095e8:	d166      	bne.n	80096b8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80095ea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80095ee:	2b08      	cmp	r3, #8
 80095f0:	d827      	bhi.n	8009642 <UART_SetConfig+0x49a>
 80095f2:	a201      	add	r2, pc, #4	; (adr r2, 80095f8 <UART_SetConfig+0x450>)
 80095f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095f8:	0800961d 	.word	0x0800961d
 80095fc:	08009625 	.word	0x08009625
 8009600:	0800962d 	.word	0x0800962d
 8009604:	08009643 	.word	0x08009643
 8009608:	08009633 	.word	0x08009633
 800960c:	08009643 	.word	0x08009643
 8009610:	08009643 	.word	0x08009643
 8009614:	08009643 	.word	0x08009643
 8009618:	0800963b 	.word	0x0800963b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800961c:	f7fb fb96 	bl	8004d4c <HAL_RCC_GetPCLK1Freq>
 8009620:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009622:	e014      	b.n	800964e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009624:	f7fb fba8 	bl	8004d78 <HAL_RCC_GetPCLK2Freq>
 8009628:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800962a:	e010      	b.n	800964e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800962c:	4b4e      	ldr	r3, [pc, #312]	; (8009768 <UART_SetConfig+0x5c0>)
 800962e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009630:	e00d      	b.n	800964e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009632:	f7fb faf3 	bl	8004c1c <HAL_RCC_GetSysClockFreq>
 8009636:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009638:	e009      	b.n	800964e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800963a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800963e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009640:	e005      	b.n	800964e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8009642:	2300      	movs	r3, #0
 8009644:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009646:	2301      	movs	r3, #1
 8009648:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800964c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800964e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009650:	2b00      	cmp	r3, #0
 8009652:	f000 8090 	beq.w	8009776 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009656:	697b      	ldr	r3, [r7, #20]
 8009658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800965a:	4a44      	ldr	r2, [pc, #272]	; (800976c <UART_SetConfig+0x5c4>)
 800965c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009660:	461a      	mov	r2, r3
 8009662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009664:	fbb3 f3f2 	udiv	r3, r3, r2
 8009668:	005a      	lsls	r2, r3, #1
 800966a:	697b      	ldr	r3, [r7, #20]
 800966c:	685b      	ldr	r3, [r3, #4]
 800966e:	085b      	lsrs	r3, r3, #1
 8009670:	441a      	add	r2, r3
 8009672:	697b      	ldr	r3, [r7, #20]
 8009674:	685b      	ldr	r3, [r3, #4]
 8009676:	fbb2 f3f3 	udiv	r3, r2, r3
 800967a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800967c:	6a3b      	ldr	r3, [r7, #32]
 800967e:	2b0f      	cmp	r3, #15
 8009680:	d916      	bls.n	80096b0 <UART_SetConfig+0x508>
 8009682:	6a3b      	ldr	r3, [r7, #32]
 8009684:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009688:	d212      	bcs.n	80096b0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800968a:	6a3b      	ldr	r3, [r7, #32]
 800968c:	b29b      	uxth	r3, r3
 800968e:	f023 030f 	bic.w	r3, r3, #15
 8009692:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009694:	6a3b      	ldr	r3, [r7, #32]
 8009696:	085b      	lsrs	r3, r3, #1
 8009698:	b29b      	uxth	r3, r3
 800969a:	f003 0307 	and.w	r3, r3, #7
 800969e:	b29a      	uxth	r2, r3
 80096a0:	8bfb      	ldrh	r3, [r7, #30]
 80096a2:	4313      	orrs	r3, r2
 80096a4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80096a6:	697b      	ldr	r3, [r7, #20]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	8bfa      	ldrh	r2, [r7, #30]
 80096ac:	60da      	str	r2, [r3, #12]
 80096ae:	e062      	b.n	8009776 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80096b0:	2301      	movs	r3, #1
 80096b2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80096b6:	e05e      	b.n	8009776 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80096b8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80096bc:	2b08      	cmp	r3, #8
 80096be:	d828      	bhi.n	8009712 <UART_SetConfig+0x56a>
 80096c0:	a201      	add	r2, pc, #4	; (adr r2, 80096c8 <UART_SetConfig+0x520>)
 80096c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096c6:	bf00      	nop
 80096c8:	080096ed 	.word	0x080096ed
 80096cc:	080096f5 	.word	0x080096f5
 80096d0:	080096fd 	.word	0x080096fd
 80096d4:	08009713 	.word	0x08009713
 80096d8:	08009703 	.word	0x08009703
 80096dc:	08009713 	.word	0x08009713
 80096e0:	08009713 	.word	0x08009713
 80096e4:	08009713 	.word	0x08009713
 80096e8:	0800970b 	.word	0x0800970b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80096ec:	f7fb fb2e 	bl	8004d4c <HAL_RCC_GetPCLK1Freq>
 80096f0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80096f2:	e014      	b.n	800971e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80096f4:	f7fb fb40 	bl	8004d78 <HAL_RCC_GetPCLK2Freq>
 80096f8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80096fa:	e010      	b.n	800971e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80096fc:	4b1a      	ldr	r3, [pc, #104]	; (8009768 <UART_SetConfig+0x5c0>)
 80096fe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009700:	e00d      	b.n	800971e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009702:	f7fb fa8b 	bl	8004c1c <HAL_RCC_GetSysClockFreq>
 8009706:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009708:	e009      	b.n	800971e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800970a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800970e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009710:	e005      	b.n	800971e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8009712:	2300      	movs	r3, #0
 8009714:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009716:	2301      	movs	r3, #1
 8009718:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800971c:	bf00      	nop
    }

    if (pclk != 0U)
 800971e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009720:	2b00      	cmp	r3, #0
 8009722:	d028      	beq.n	8009776 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009724:	697b      	ldr	r3, [r7, #20]
 8009726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009728:	4a10      	ldr	r2, [pc, #64]	; (800976c <UART_SetConfig+0x5c4>)
 800972a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800972e:	461a      	mov	r2, r3
 8009730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009732:	fbb3 f2f2 	udiv	r2, r3, r2
 8009736:	697b      	ldr	r3, [r7, #20]
 8009738:	685b      	ldr	r3, [r3, #4]
 800973a:	085b      	lsrs	r3, r3, #1
 800973c:	441a      	add	r2, r3
 800973e:	697b      	ldr	r3, [r7, #20]
 8009740:	685b      	ldr	r3, [r3, #4]
 8009742:	fbb2 f3f3 	udiv	r3, r2, r3
 8009746:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009748:	6a3b      	ldr	r3, [r7, #32]
 800974a:	2b0f      	cmp	r3, #15
 800974c:	d910      	bls.n	8009770 <UART_SetConfig+0x5c8>
 800974e:	6a3b      	ldr	r3, [r7, #32]
 8009750:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009754:	d20c      	bcs.n	8009770 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009756:	6a3b      	ldr	r3, [r7, #32]
 8009758:	b29a      	uxth	r2, r3
 800975a:	697b      	ldr	r3, [r7, #20]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	60da      	str	r2, [r3, #12]
 8009760:	e009      	b.n	8009776 <UART_SetConfig+0x5ce>
 8009762:	bf00      	nop
 8009764:	40008000 	.word	0x40008000
 8009768:	00f42400 	.word	0x00f42400
 800976c:	08009dc8 	.word	0x08009dc8
      }
      else
      {
        ret = HAL_ERROR;
 8009770:	2301      	movs	r3, #1
 8009772:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009776:	697b      	ldr	r3, [r7, #20]
 8009778:	2201      	movs	r2, #1
 800977a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800977e:	697b      	ldr	r3, [r7, #20]
 8009780:	2201      	movs	r2, #1
 8009782:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009786:	697b      	ldr	r3, [r7, #20]
 8009788:	2200      	movs	r2, #0
 800978a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800978c:	697b      	ldr	r3, [r7, #20]
 800978e:	2200      	movs	r2, #0
 8009790:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8009792:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8009796:	4618      	mov	r0, r3
 8009798:	3730      	adds	r7, #48	; 0x30
 800979a:	46bd      	mov	sp, r7
 800979c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080097a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80097a0:	b480      	push	{r7}
 80097a2:	b083      	sub	sp, #12
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097ac:	f003 0301 	and.w	r3, r3, #1
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d00a      	beq.n	80097ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	685b      	ldr	r3, [r3, #4]
 80097ba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	430a      	orrs	r2, r1
 80097c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097ce:	f003 0302 	and.w	r3, r3, #2
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d00a      	beq.n	80097ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	685b      	ldr	r3, [r3, #4]
 80097dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	430a      	orrs	r2, r1
 80097ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097f0:	f003 0304 	and.w	r3, r3, #4
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d00a      	beq.n	800980e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	685b      	ldr	r3, [r3, #4]
 80097fe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	430a      	orrs	r2, r1
 800980c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009812:	f003 0308 	and.w	r3, r3, #8
 8009816:	2b00      	cmp	r3, #0
 8009818:	d00a      	beq.n	8009830 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	685b      	ldr	r3, [r3, #4]
 8009820:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	430a      	orrs	r2, r1
 800982e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009834:	f003 0310 	and.w	r3, r3, #16
 8009838:	2b00      	cmp	r3, #0
 800983a:	d00a      	beq.n	8009852 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	689b      	ldr	r3, [r3, #8]
 8009842:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	430a      	orrs	r2, r1
 8009850:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009856:	f003 0320 	and.w	r3, r3, #32
 800985a:	2b00      	cmp	r3, #0
 800985c:	d00a      	beq.n	8009874 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	689b      	ldr	r3, [r3, #8]
 8009864:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	430a      	orrs	r2, r1
 8009872:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800987c:	2b00      	cmp	r3, #0
 800987e:	d01a      	beq.n	80098b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	685b      	ldr	r3, [r3, #4]
 8009886:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	430a      	orrs	r2, r1
 8009894:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800989a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800989e:	d10a      	bne.n	80098b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	685b      	ldr	r3, [r3, #4]
 80098a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	430a      	orrs	r2, r1
 80098b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d00a      	beq.n	80098d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	685b      	ldr	r3, [r3, #4]
 80098c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	430a      	orrs	r2, r1
 80098d6:	605a      	str	r2, [r3, #4]
  }
}
 80098d8:	bf00      	nop
 80098da:	370c      	adds	r7, #12
 80098dc:	46bd      	mov	sp, r7
 80098de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e2:	4770      	bx	lr

080098e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b086      	sub	sp, #24
 80098e8:	af02      	add	r7, sp, #8
 80098ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2200      	movs	r2, #0
 80098f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80098f4:	f7f8 fee2 	bl	80026bc <HAL_GetTick>
 80098f8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	f003 0308 	and.w	r3, r3, #8
 8009904:	2b08      	cmp	r3, #8
 8009906:	d10e      	bne.n	8009926 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009908:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800990c:	9300      	str	r3, [sp, #0]
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	2200      	movs	r2, #0
 8009912:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009916:	6878      	ldr	r0, [r7, #4]
 8009918:	f000 f82f 	bl	800997a <UART_WaitOnFlagUntilTimeout>
 800991c:	4603      	mov	r3, r0
 800991e:	2b00      	cmp	r3, #0
 8009920:	d001      	beq.n	8009926 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009922:	2303      	movs	r3, #3
 8009924:	e025      	b.n	8009972 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	f003 0304 	and.w	r3, r3, #4
 8009930:	2b04      	cmp	r3, #4
 8009932:	d10e      	bne.n	8009952 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009934:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009938:	9300      	str	r3, [sp, #0]
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	2200      	movs	r2, #0
 800993e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009942:	6878      	ldr	r0, [r7, #4]
 8009944:	f000 f819 	bl	800997a <UART_WaitOnFlagUntilTimeout>
 8009948:	4603      	mov	r3, r0
 800994a:	2b00      	cmp	r3, #0
 800994c:	d001      	beq.n	8009952 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800994e:	2303      	movs	r3, #3
 8009950:	e00f      	b.n	8009972 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	2220      	movs	r2, #32
 8009956:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	2220      	movs	r2, #32
 800995e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	2200      	movs	r2, #0
 8009966:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2200      	movs	r2, #0
 800996c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009970:	2300      	movs	r3, #0
}
 8009972:	4618      	mov	r0, r3
 8009974:	3710      	adds	r7, #16
 8009976:	46bd      	mov	sp, r7
 8009978:	bd80      	pop	{r7, pc}

0800997a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800997a:	b580      	push	{r7, lr}
 800997c:	b09c      	sub	sp, #112	; 0x70
 800997e:	af00      	add	r7, sp, #0
 8009980:	60f8      	str	r0, [r7, #12]
 8009982:	60b9      	str	r1, [r7, #8]
 8009984:	603b      	str	r3, [r7, #0]
 8009986:	4613      	mov	r3, r2
 8009988:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800998a:	e0a9      	b.n	8009ae0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800998c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800998e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009992:	f000 80a5 	beq.w	8009ae0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009996:	f7f8 fe91 	bl	80026bc <HAL_GetTick>
 800999a:	4602      	mov	r2, r0
 800999c:	683b      	ldr	r3, [r7, #0]
 800999e:	1ad3      	subs	r3, r2, r3
 80099a0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80099a2:	429a      	cmp	r2, r3
 80099a4:	d302      	bcc.n	80099ac <UART_WaitOnFlagUntilTimeout+0x32>
 80099a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d140      	bne.n	8009a2e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80099b4:	e853 3f00 	ldrex	r3, [r3]
 80099b8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80099ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80099bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80099c0:	667b      	str	r3, [r7, #100]	; 0x64
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	461a      	mov	r2, r3
 80099c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80099ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80099cc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099ce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80099d0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80099d2:	e841 2300 	strex	r3, r2, [r1]
 80099d6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80099d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d1e6      	bne.n	80099ac <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	3308      	adds	r3, #8
 80099e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099e8:	e853 3f00 	ldrex	r3, [r3]
 80099ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80099ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099f0:	f023 0301 	bic.w	r3, r3, #1
 80099f4:	663b      	str	r3, [r7, #96]	; 0x60
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	3308      	adds	r3, #8
 80099fc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80099fe:	64ba      	str	r2, [r7, #72]	; 0x48
 8009a00:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a02:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009a04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009a06:	e841 2300 	strex	r3, r2, [r1]
 8009a0a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009a0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d1e5      	bne.n	80099de <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	2220      	movs	r2, #32
 8009a16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	2220      	movs	r2, #32
 8009a1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	2200      	movs	r2, #0
 8009a26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8009a2a:	2303      	movs	r3, #3
 8009a2c:	e069      	b.n	8009b02 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	f003 0304 	and.w	r3, r3, #4
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d051      	beq.n	8009ae0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	69db      	ldr	r3, [r3, #28]
 8009a42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009a46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a4a:	d149      	bne.n	8009ae0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009a54:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a5e:	e853 3f00 	ldrex	r3, [r3]
 8009a62:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a66:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009a6a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	461a      	mov	r2, r3
 8009a72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009a74:	637b      	str	r3, [r7, #52]	; 0x34
 8009a76:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a78:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009a7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009a7c:	e841 2300 	strex	r3, r2, [r1]
 8009a80:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d1e6      	bne.n	8009a56 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	3308      	adds	r3, #8
 8009a8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a90:	697b      	ldr	r3, [r7, #20]
 8009a92:	e853 3f00 	ldrex	r3, [r3]
 8009a96:	613b      	str	r3, [r7, #16]
   return(result);
 8009a98:	693b      	ldr	r3, [r7, #16]
 8009a9a:	f023 0301 	bic.w	r3, r3, #1
 8009a9e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	3308      	adds	r3, #8
 8009aa6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009aa8:	623a      	str	r2, [r7, #32]
 8009aaa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aac:	69f9      	ldr	r1, [r7, #28]
 8009aae:	6a3a      	ldr	r2, [r7, #32]
 8009ab0:	e841 2300 	strex	r3, r2, [r1]
 8009ab4:	61bb      	str	r3, [r7, #24]
   return(result);
 8009ab6:	69bb      	ldr	r3, [r7, #24]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d1e5      	bne.n	8009a88 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	2220      	movs	r2, #32
 8009ac0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	2220      	movs	r2, #32
 8009ac8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	2220      	movs	r2, #32
 8009ad0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009adc:	2303      	movs	r3, #3
 8009ade:	e010      	b.n	8009b02 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	69da      	ldr	r2, [r3, #28]
 8009ae6:	68bb      	ldr	r3, [r7, #8]
 8009ae8:	4013      	ands	r3, r2
 8009aea:	68ba      	ldr	r2, [r7, #8]
 8009aec:	429a      	cmp	r2, r3
 8009aee:	bf0c      	ite	eq
 8009af0:	2301      	moveq	r3, #1
 8009af2:	2300      	movne	r3, #0
 8009af4:	b2db      	uxtb	r3, r3
 8009af6:	461a      	mov	r2, r3
 8009af8:	79fb      	ldrb	r3, [r7, #7]
 8009afa:	429a      	cmp	r2, r3
 8009afc:	f43f af46 	beq.w	800998c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009b00:	2300      	movs	r3, #0
}
 8009b02:	4618      	mov	r0, r3
 8009b04:	3770      	adds	r7, #112	; 0x70
 8009b06:	46bd      	mov	sp, r7
 8009b08:	bd80      	pop	{r7, pc}

08009b0a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009b0a:	b480      	push	{r7}
 8009b0c:	b085      	sub	sp, #20
 8009b0e:	af00      	add	r7, sp, #0
 8009b10:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009b18:	2b01      	cmp	r3, #1
 8009b1a:	d101      	bne.n	8009b20 <HAL_UARTEx_DisableFifoMode+0x16>
 8009b1c:	2302      	movs	r3, #2
 8009b1e:	e027      	b.n	8009b70 <HAL_UARTEx_DisableFifoMode+0x66>
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2201      	movs	r2, #1
 8009b24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2224      	movs	r2, #36	; 0x24
 8009b2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	681a      	ldr	r2, [r3, #0]
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	f022 0201 	bic.w	r2, r2, #1
 8009b46:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009b4e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2200      	movs	r2, #0
 8009b54:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	68fa      	ldr	r2, [r7, #12]
 8009b5c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	2220      	movs	r2, #32
 8009b62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2200      	movs	r2, #0
 8009b6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009b6e:	2300      	movs	r3, #0
}
 8009b70:	4618      	mov	r0, r3
 8009b72:	3714      	adds	r7, #20
 8009b74:	46bd      	mov	sp, r7
 8009b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7a:	4770      	bx	lr

08009b7c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b084      	sub	sp, #16
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
 8009b84:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009b8c:	2b01      	cmp	r3, #1
 8009b8e:	d101      	bne.n	8009b94 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009b90:	2302      	movs	r3, #2
 8009b92:	e02d      	b.n	8009bf0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2201      	movs	r2, #1
 8009b98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2224      	movs	r2, #36	; 0x24
 8009ba0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	681a      	ldr	r2, [r3, #0]
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	f022 0201 	bic.w	r2, r2, #1
 8009bba:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	689b      	ldr	r3, [r3, #8]
 8009bc2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	683a      	ldr	r2, [r7, #0]
 8009bcc:	430a      	orrs	r2, r1
 8009bce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	f000 f84f 	bl	8009c74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	68fa      	ldr	r2, [r7, #12]
 8009bdc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	2220      	movs	r2, #32
 8009be2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	2200      	movs	r2, #0
 8009bea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009bee:	2300      	movs	r3, #0
}
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	3710      	adds	r7, #16
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	bd80      	pop	{r7, pc}

08009bf8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b084      	sub	sp, #16
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
 8009c00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009c08:	2b01      	cmp	r3, #1
 8009c0a:	d101      	bne.n	8009c10 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009c0c:	2302      	movs	r3, #2
 8009c0e:	e02d      	b.n	8009c6c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	2201      	movs	r2, #1
 8009c14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2224      	movs	r2, #36	; 0x24
 8009c1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	681a      	ldr	r2, [r3, #0]
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	f022 0201 	bic.w	r2, r2, #1
 8009c36:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	689b      	ldr	r3, [r3, #8]
 8009c3e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	683a      	ldr	r2, [r7, #0]
 8009c48:	430a      	orrs	r2, r1
 8009c4a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009c4c:	6878      	ldr	r0, [r7, #4]
 8009c4e:	f000 f811 	bl	8009c74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	68fa      	ldr	r2, [r7, #12]
 8009c58:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	2220      	movs	r2, #32
 8009c5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2200      	movs	r2, #0
 8009c66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009c6a:	2300      	movs	r3, #0
}
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	3710      	adds	r7, #16
 8009c70:	46bd      	mov	sp, r7
 8009c72:	bd80      	pop	{r7, pc}

08009c74 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009c74:	b480      	push	{r7}
 8009c76:	b085      	sub	sp, #20
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d108      	bne.n	8009c96 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2201      	movs	r2, #1
 8009c88:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	2201      	movs	r2, #1
 8009c90:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009c94:	e031      	b.n	8009cfa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009c96:	2308      	movs	r3, #8
 8009c98:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009c9a:	2308      	movs	r3, #8
 8009c9c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	689b      	ldr	r3, [r3, #8]
 8009ca4:	0e5b      	lsrs	r3, r3, #25
 8009ca6:	b2db      	uxtb	r3, r3
 8009ca8:	f003 0307 	and.w	r3, r3, #7
 8009cac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	689b      	ldr	r3, [r3, #8]
 8009cb4:	0f5b      	lsrs	r3, r3, #29
 8009cb6:	b2db      	uxtb	r3, r3
 8009cb8:	f003 0307 	and.w	r3, r3, #7
 8009cbc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009cbe:	7bbb      	ldrb	r3, [r7, #14]
 8009cc0:	7b3a      	ldrb	r2, [r7, #12]
 8009cc2:	4911      	ldr	r1, [pc, #68]	; (8009d08 <UARTEx_SetNbDataToProcess+0x94>)
 8009cc4:	5c8a      	ldrb	r2, [r1, r2]
 8009cc6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009cca:	7b3a      	ldrb	r2, [r7, #12]
 8009ccc:	490f      	ldr	r1, [pc, #60]	; (8009d0c <UARTEx_SetNbDataToProcess+0x98>)
 8009cce:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009cd0:	fb93 f3f2 	sdiv	r3, r3, r2
 8009cd4:	b29a      	uxth	r2, r3
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009cdc:	7bfb      	ldrb	r3, [r7, #15]
 8009cde:	7b7a      	ldrb	r2, [r7, #13]
 8009ce0:	4909      	ldr	r1, [pc, #36]	; (8009d08 <UARTEx_SetNbDataToProcess+0x94>)
 8009ce2:	5c8a      	ldrb	r2, [r1, r2]
 8009ce4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009ce8:	7b7a      	ldrb	r2, [r7, #13]
 8009cea:	4908      	ldr	r1, [pc, #32]	; (8009d0c <UARTEx_SetNbDataToProcess+0x98>)
 8009cec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009cee:	fb93 f3f2 	sdiv	r3, r3, r2
 8009cf2:	b29a      	uxth	r2, r3
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009cfa:	bf00      	nop
 8009cfc:	3714      	adds	r7, #20
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d04:	4770      	bx	lr
 8009d06:	bf00      	nop
 8009d08:	08009de0 	.word	0x08009de0
 8009d0c:	08009de8 	.word	0x08009de8

08009d10 <__libc_init_array>:
 8009d10:	b570      	push	{r4, r5, r6, lr}
 8009d12:	4d0d      	ldr	r5, [pc, #52]	; (8009d48 <__libc_init_array+0x38>)
 8009d14:	4c0d      	ldr	r4, [pc, #52]	; (8009d4c <__libc_init_array+0x3c>)
 8009d16:	1b64      	subs	r4, r4, r5
 8009d18:	10a4      	asrs	r4, r4, #2
 8009d1a:	2600      	movs	r6, #0
 8009d1c:	42a6      	cmp	r6, r4
 8009d1e:	d109      	bne.n	8009d34 <__libc_init_array+0x24>
 8009d20:	4d0b      	ldr	r5, [pc, #44]	; (8009d50 <__libc_init_array+0x40>)
 8009d22:	4c0c      	ldr	r4, [pc, #48]	; (8009d54 <__libc_init_array+0x44>)
 8009d24:	f000 f820 	bl	8009d68 <_init>
 8009d28:	1b64      	subs	r4, r4, r5
 8009d2a:	10a4      	asrs	r4, r4, #2
 8009d2c:	2600      	movs	r6, #0
 8009d2e:	42a6      	cmp	r6, r4
 8009d30:	d105      	bne.n	8009d3e <__libc_init_array+0x2e>
 8009d32:	bd70      	pop	{r4, r5, r6, pc}
 8009d34:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d38:	4798      	blx	r3
 8009d3a:	3601      	adds	r6, #1
 8009d3c:	e7ee      	b.n	8009d1c <__libc_init_array+0xc>
 8009d3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d42:	4798      	blx	r3
 8009d44:	3601      	adds	r6, #1
 8009d46:	e7f2      	b.n	8009d2e <__libc_init_array+0x1e>
 8009d48:	08009df8 	.word	0x08009df8
 8009d4c:	08009df8 	.word	0x08009df8
 8009d50:	08009df8 	.word	0x08009df8
 8009d54:	08009dfc 	.word	0x08009dfc

08009d58 <memset>:
 8009d58:	4402      	add	r2, r0
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	4293      	cmp	r3, r2
 8009d5e:	d100      	bne.n	8009d62 <memset+0xa>
 8009d60:	4770      	bx	lr
 8009d62:	f803 1b01 	strb.w	r1, [r3], #1
 8009d66:	e7f9      	b.n	8009d5c <memset+0x4>

08009d68 <_init>:
 8009d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d6a:	bf00      	nop
 8009d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d6e:	bc08      	pop	{r3}
 8009d70:	469e      	mov	lr, r3
 8009d72:	4770      	bx	lr

08009d74 <_fini>:
 8009d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d76:	bf00      	nop
 8009d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d7a:	bc08      	pop	{r3}
 8009d7c:	469e      	mov	lr, r3
 8009d7e:	4770      	bx	lr
